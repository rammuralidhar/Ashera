//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/androidlayouts/repackaged/android/view/Gravity.java
//

#ifndef _RepackagedAndroidViewGravity_H_
#define _RepackagedAndroidViewGravity_H_

#include "J2ObjC_header.h"

@class RepackagedAndroidGraphicsRect;

#define RepackagedAndroidViewGravity_NO_GRAVITY 0
#define RepackagedAndroidViewGravity_AXIS_SPECIFIED 1
#define RepackagedAndroidViewGravity_AXIS_PULL_BEFORE 2
#define RepackagedAndroidViewGravity_AXIS_PULL_AFTER 4
#define RepackagedAndroidViewGravity_AXIS_CLIP 8
#define RepackagedAndroidViewGravity_AXIS_X_SHIFT 0
#define RepackagedAndroidViewGravity_AXIS_Y_SHIFT 4
#define RepackagedAndroidViewGravity_TOP 48
#define RepackagedAndroidViewGravity_BOTTOM 80
#define RepackagedAndroidViewGravity_LEFT 3
#define RepackagedAndroidViewGravity_RIGHT 5
#define RepackagedAndroidViewGravity_CENTER_VERTICAL 16
#define RepackagedAndroidViewGravity_FILL_VERTICAL 112
#define RepackagedAndroidViewGravity_CENTER_HORIZONTAL 1
#define RepackagedAndroidViewGravity_FILL_HORIZONTAL 7
#define RepackagedAndroidViewGravity_CENTER 17
#define RepackagedAndroidViewGravity_FILL 119
#define RepackagedAndroidViewGravity_CLIP_VERTICAL 128
#define RepackagedAndroidViewGravity_CLIP_HORIZONTAL 8
#define RepackagedAndroidViewGravity_RELATIVE_LAYOUT_DIRECTION 8388608
#define RepackagedAndroidViewGravity_HORIZONTAL_GRAVITY_MASK 7
#define RepackagedAndroidViewGravity_VERTICAL_GRAVITY_MASK 112
#define RepackagedAndroidViewGravity_DISPLAY_CLIP_VERTICAL 268435456
#define RepackagedAndroidViewGravity_DISPLAY_CLIP_HORIZONTAL 16777216
#define RepackagedAndroidViewGravity_START 8388611
#define RepackagedAndroidViewGravity_END 8388613
#define RepackagedAndroidViewGravity_RELATIVE_HORIZONTAL_GRAVITY_MASK 8388615

/**
 @brief Standard constants and tools for placing an object within a potentially larger container.
 */
@interface RepackagedAndroidViewGravity : NSObject

#pragma mark Public

- (instancetype)init;

/**
 @brief Apply a gravity constant to an object.
 @param gravity The desired placement of the object, as defined by the constants in this class.
 @param w The horizontal size of the object.
 @param h The vertical size of the object.
 @param container The frame of the containing space, in which the object will be placed.  Should be large enough to contain the width and height of the object.
 @param xAdj Offset to apply to the X axis.  If gravity is LEFT this pushes it to the right; if gravity is RIGHT it pushes it to the left; if gravity is CENTER_HORIZONTAL it pushes it to the right or left; otherwise it is ignored.
 @param yAdj Offset to apply to the Y axis.  If gravity is TOP this pushes it down; if gravity is BOTTOM it pushes it up; if gravity is CENTER_VERTICAL it pushes it down or up; otherwise it is ignored.
 @param outRect Receives the computed frame of the object in its container.
 */
+ (void)applyWithInt:(jint)gravity
             withInt:(jint)w
             withInt:(jint)h
withRepackagedAndroidGraphicsRect:(RepackagedAndroidGraphicsRect *)container
             withInt:(jint)xAdj
             withInt:(jint)yAdj
withRepackagedAndroidGraphicsRect:(RepackagedAndroidGraphicsRect *)outRect;

/**
 @brief Apply a gravity constant to an object.
 @param gravity The desired placement of the object, as defined by the constants in this class.
 @param w The horizontal size of the object.
 @param h The vertical size of the object.
 @param container The frame of the containing space, in which the object will be placed.  Should be large enough to contain the width and height of the object.
 @param xAdj Offset to apply to the X axis.  If gravity is LEFT this pushes it to the right; if gravity is RIGHT it pushes it to the left; if gravity is CENTER_HORIZONTAL it pushes it to the right or left; otherwise it is ignored.
 @param yAdj Offset to apply to the Y axis.  If gravity is TOP this pushes it down; if gravity is BOTTOM it pushes it up; if gravity is CENTER_VERTICAL it pushes it down or up; otherwise it is ignored.
 @param outRect Receives the computed frame of the object in its container.
 @param layoutDirection The layout direction.
 */
+ (void)applyWithInt:(jint)gravity
             withInt:(jint)w
             withInt:(jint)h
withRepackagedAndroidGraphicsRect:(RepackagedAndroidGraphicsRect *)container
             withInt:(jint)xAdj
             withInt:(jint)yAdj
withRepackagedAndroidGraphicsRect:(RepackagedAndroidGraphicsRect *)outRect
             withInt:(jint)layoutDirection;

/**
 @brief Apply a gravity constant to an object.
 This supposes that the layout direction is LTR.
 @param gravity The desired placement of the object, as defined by the constants in this class.
 @param w The horizontal size of the object.
 @param h The vertical size of the object.
 @param container The frame of the containing space, in which the object will be placed.  Should be large enough to contain the width and height of the object.
 @param outRect Receives the computed frame of the object in its container.
 */
+ (void)applyWithInt:(jint)gravity
             withInt:(jint)w
             withInt:(jint)h
withRepackagedAndroidGraphicsRect:(RepackagedAndroidGraphicsRect *)container
withRepackagedAndroidGraphicsRect:(RepackagedAndroidGraphicsRect *)outRect;

/**
 @brief Apply a gravity constant to an object and take care if layout direction is RTL or not.
 @param gravity The desired placement of the object, as defined by the constants in this class.
 @param w The horizontal size of the object.
 @param h The vertical size of the object.
 @param container The frame of the containing space, in which the object will be placed.  Should be large enough to contain the width and height of the object.
 @param outRect Receives the computed frame of the object in its container.
 @param layoutDirection The layout direction.
 */
+ (void)applyWithInt:(jint)gravity
             withInt:(jint)w
             withInt:(jint)h
withRepackagedAndroidGraphicsRect:(RepackagedAndroidGraphicsRect *)container
withRepackagedAndroidGraphicsRect:(RepackagedAndroidGraphicsRect *)outRect
             withInt:(jint)layoutDirection;

/**
 @brief Apply additional gravity behavior based on the overall "display" that an object exists in.
 This can be used after #apply(int,int,int,Rect,int,int,Rect) to place the object within a visible display.  By default this moves or clips the object to be visible in the display; the gravity flags #DISPLAY_CLIP_HORIZONTAL and #DISPLAY_CLIP_VERTICAL can be used to change this behavior.
 @param gravity Gravity constants to modify the placement within the display.
 @param display The rectangle of the display in which the object is being placed.
 @param inoutObj Supplies the current object position; returns with it modified if needed to fit in the display.
 */
+ (void)applyDisplayWithInt:(jint)gravity
withRepackagedAndroidGraphicsRect:(RepackagedAndroidGraphicsRect *)display
withRepackagedAndroidGraphicsRect:(RepackagedAndroidGraphicsRect *)inoutObj;

/**
 @brief Apply additional gravity behavior based on the overall "display" that an object exists in.
 This can be used after #apply(int,int,int,Rect,int,int,Rect) to place the object within a visible display.  By default this moves or clips the object to be visible in the display; the gravity flags #DISPLAY_CLIP_HORIZONTAL and #DISPLAY_CLIP_VERTICAL can be used to change this behavior.
 @param gravity Gravity constants to modify the placement within the display.
 @param display The rectangle of the display in which the object is being placed.
 @param inoutObj Supplies the current object position; returns with it modified if needed to fit in the display.
 @param layoutDirection The layout direction.
 */
+ (void)applyDisplayWithInt:(jint)gravity
withRepackagedAndroidGraphicsRect:(RepackagedAndroidGraphicsRect *)display
withRepackagedAndroidGraphicsRect:(RepackagedAndroidGraphicsRect *)inoutObj
                    withInt:(jint)layoutDirection;

/**
 @brief <p>Convert script specific gravity to absolute horizontal value.
 </p> if horizontal direction is LTR, then START will set LEFT and END will set RIGHT. if horizontal direction is RTL, then START will set RIGHT and END will set LEFT.
 @param gravity The gravity to convert to absolute (horizontal) values.
 @param layoutDirection The layout direction.
 @return gravity converted to absolute (horizontal) values.
 */
+ (jint)getAbsoluteGravityWithInt:(jint)gravity
                          withInt:(jint)layoutDirection;

/**
 @brief <p>Indicate whether the supplied gravity has an horizontal pull.
 </p>
 @param gravity the gravity to check for horizontal pull
 @return true if the supplied gravity has an horizontal pull
 */
+ (jboolean)isHorizontalWithInt:(jint)gravity;

/**
 @brief <p>Indicate whether the supplied gravity has a vertical pull.
 </p>
 @param gravity the gravity to check for vertical pull
 @return true if the supplied gravity has a vertical pull
 */
+ (jboolean)isVerticalWithInt:(jint)gravity;

@end

J2OBJC_EMPTY_STATIC_INIT(RepackagedAndroidViewGravity)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewGravity, NO_GRAVITY, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewGravity, AXIS_SPECIFIED, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewGravity, AXIS_PULL_BEFORE, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewGravity, AXIS_PULL_AFTER, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewGravity, AXIS_CLIP, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewGravity, AXIS_X_SHIFT, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewGravity, AXIS_Y_SHIFT, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewGravity, TOP, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewGravity, BOTTOM, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewGravity, LEFT, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewGravity, RIGHT, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewGravity, CENTER_VERTICAL, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewGravity, FILL_VERTICAL, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewGravity, CENTER_HORIZONTAL, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewGravity, FILL_HORIZONTAL, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewGravity, CENTER, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewGravity, FILL, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewGravity, CLIP_VERTICAL, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewGravity, CLIP_HORIZONTAL, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewGravity, RELATIVE_LAYOUT_DIRECTION, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewGravity, HORIZONTAL_GRAVITY_MASK, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewGravity, VERTICAL_GRAVITY_MASK, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewGravity, DISPLAY_CLIP_VERTICAL, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewGravity, DISPLAY_CLIP_HORIZONTAL, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewGravity, START, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewGravity, END, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewGravity, RELATIVE_HORIZONTAL_GRAVITY_MASK, jint)

FOUNDATION_EXPORT void RepackagedAndroidViewGravity_applyWithInt_withInt_withInt_withRepackagedAndroidGraphicsRect_withRepackagedAndroidGraphicsRect_(jint gravity, jint w, jint h, RepackagedAndroidGraphicsRect *container, RepackagedAndroidGraphicsRect *outRect);

FOUNDATION_EXPORT void RepackagedAndroidViewGravity_applyWithInt_withInt_withInt_withRepackagedAndroidGraphicsRect_withRepackagedAndroidGraphicsRect_withInt_(jint gravity, jint w, jint h, RepackagedAndroidGraphicsRect *container, RepackagedAndroidGraphicsRect *outRect, jint layoutDirection);

FOUNDATION_EXPORT void RepackagedAndroidViewGravity_applyWithInt_withInt_withInt_withRepackagedAndroidGraphicsRect_withInt_withInt_withRepackagedAndroidGraphicsRect_(jint gravity, jint w, jint h, RepackagedAndroidGraphicsRect *container, jint xAdj, jint yAdj, RepackagedAndroidGraphicsRect *outRect);

FOUNDATION_EXPORT void RepackagedAndroidViewGravity_applyWithInt_withInt_withInt_withRepackagedAndroidGraphicsRect_withInt_withInt_withRepackagedAndroidGraphicsRect_withInt_(jint gravity, jint w, jint h, RepackagedAndroidGraphicsRect *container, jint xAdj, jint yAdj, RepackagedAndroidGraphicsRect *outRect, jint layoutDirection);

FOUNDATION_EXPORT void RepackagedAndroidViewGravity_applyDisplayWithInt_withRepackagedAndroidGraphicsRect_withRepackagedAndroidGraphicsRect_(jint gravity, RepackagedAndroidGraphicsRect *display, RepackagedAndroidGraphicsRect *inoutObj);

FOUNDATION_EXPORT void RepackagedAndroidViewGravity_applyDisplayWithInt_withRepackagedAndroidGraphicsRect_withRepackagedAndroidGraphicsRect_withInt_(jint gravity, RepackagedAndroidGraphicsRect *display, RepackagedAndroidGraphicsRect *inoutObj, jint layoutDirection);

FOUNDATION_EXPORT jboolean RepackagedAndroidViewGravity_isVerticalWithInt_(jint gravity);

FOUNDATION_EXPORT jboolean RepackagedAndroidViewGravity_isHorizontalWithInt_(jint gravity);

FOUNDATION_EXPORT jint RepackagedAndroidViewGravity_getAbsoluteGravityWithInt_withInt_(jint gravity, jint layoutDirection);

FOUNDATION_EXPORT void RepackagedAndroidViewGravity_init(RepackagedAndroidViewGravity *self);

FOUNDATION_EXPORT RepackagedAndroidViewGravity *new_RepackagedAndroidViewGravity_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(RepackagedAndroidViewGravity)

#endif // _RepackagedAndroidViewGravity_H_
