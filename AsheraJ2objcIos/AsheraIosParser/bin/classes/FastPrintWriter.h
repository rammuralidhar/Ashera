//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/androidlayouts/repackaged/com/android/internal/util/FastPrintWriter.java
//

#ifndef _RepackagedComAndroidInternalUtilFastPrintWriter_H_
#define _RepackagedComAndroidInternalUtilFastPrintWriter_H_

#include "J2ObjC_header.h"
#include "java/io/PrintWriter.h"

@class IOSCharArray;
@class JavaIoOutputStream;
@class JavaIoWriter;
@protocol JavaLangCharSequence;
@protocol RepackagedAndroidUtilPrinter;

@interface RepackagedComAndroidInternalUtilFastPrintWriter : JavaIoPrintWriter

#pragma mark Public

/**
 @brief Constructs a new <code>PrintWriter</code> with <code>out</code> as its target stream.
 By default, the new print writer does not automatically flush its contents to the target stream when a newline is encountered.
 @param out the target output stream.
 @throws NullPointerException if <code>out</code> is <code>null</code> .
 */
- (instancetype)initWithJavaIoOutputStream:(JavaIoOutputStream *)outArg;

/**
 @brief Constructs a new <code>PrintWriter</code> with <code>out</code> as its target stream.
 The parameter <code>autoFlush</code> determines if the print writer automatically flushes its contents to the target stream when a newline is encountered.
 @param out the target output stream.
 @param autoFlush indicates whether contents are flushed upon encountering a newline sequence.
 @throws NullPointerException if <code>out</code> is <code>null</code> .
 */
- (instancetype)initWithJavaIoOutputStream:(JavaIoOutputStream *)outArg
                               withBoolean:(jboolean)autoFlush;

/**
 @brief Constructs a new <code>PrintWriter</code> with <code>out</code> as its target stream and a custom buffer size.
 The parameter <code>autoFlush</code> determines if the print writer automatically flushes its contents to the target stream when a newline is encountered.
 @param out the target output stream.
 @param autoFlush indicates whether contents are flushed upon encountering a newline sequence.
 @param bufferLen specifies the size of the FastPrintWriter's internal buffer; the default is 8192.
 @throws NullPointerException if <code>out</code> is <code>null</code> .
 */
- (instancetype)initWithJavaIoOutputStream:(JavaIoOutputStream *)outArg
                               withBoolean:(jboolean)autoFlush
                                   withInt:(jint)bufferLen;

/**
 @brief Constructs a new <code>PrintWriter</code> with <code>pr</code> as its target printer and the default buffer size.
 Because a Printer is line-base, autoflush is always enabled.
 @param pr the target writer.
 @throws NullPointerException if <code>pr</code> is <code>null</code> .
 */
- (instancetype)initWithRepackagedAndroidUtilPrinter:(id<RepackagedAndroidUtilPrinter>)pr;

/**
 @brief Constructs a new <code>PrintWriter</code> with <code>pr</code> as its target printer and a custom buffer size.
 Because a Printer is line-base, autoflush is always enabled.
 @param pr the target writer.
 @param bufferLen specifies the size of the FastPrintWriter's internal buffer; the default is 512.
 @throws NullPointerException if <code>pr</code> is <code>null</code> .
 */
- (instancetype)initWithRepackagedAndroidUtilPrinter:(id<RepackagedAndroidUtilPrinter>)pr
                                             withInt:(jint)bufferLen;

/**
 @brief Constructs a new <code>PrintWriter</code> with <code>wr</code> as its target writer.
 By default, the new print writer does not automatically flush its contents to the target writer when a newline is encountered. <p>NOTE: Unlike PrintWriter, this version will still do buffering inside of FastPrintWriter before sending data to the Writer.  This means you must call flush() before retrieving any data from the Writer.</p>
 @param wr the target writer.
 @throws NullPointerException if <code>wr</code> is <code>null</code> .
 */
- (instancetype)initWithJavaIoWriter:(JavaIoWriter *)wr;

/**
 @brief Constructs a new <code>PrintWriter</code> with <code>wr</code> as its target writer.
 The parameter <code>autoFlush</code> determines if the print writer automatically flushes its contents to the target writer when a newline is encountered.
 @param wr the target writer.
 @param autoFlush indicates whether to flush contents upon encountering a newline sequence.
 @throws NullPointerException if <code>out</code> is <code>null</code> .
 */
- (instancetype)initWithJavaIoWriter:(JavaIoWriter *)wr
                         withBoolean:(jboolean)autoFlush;

/**
 @brief Constructs a new <code>PrintWriter</code> with <code>wr</code> as its target writer and a custom buffer size.
 The parameter <code>autoFlush</code> determines if the print writer automatically flushes its contents to the target writer when a newline is encountered.
 @param wr the target writer.
 @param autoFlush indicates whether to flush contents upon encountering a newline sequence.
 @param bufferLen specifies the size of the FastPrintWriter's internal buffer; the default is 8192.
 @throws NullPointerException if <code>wr</code> is <code>null</code> .
 */
- (instancetype)initWithJavaIoWriter:(JavaIoWriter *)wr
                         withBoolean:(jboolean)autoFlush
                             withInt:(jint)bufferLen;

/**
 @brief Appends a subsequence of the character sequence <code>csq</code> to the target.
 This method works the same way as <code>PrintWriter.print(csq.subsequence(start, end).toString())</code> . If <code>csq</code> is <code>null</code> , then the specified subsequence of the string "null" will be written to the target.
 @param csq the character sequence appended to the target.
 @param start the index of the first char in the character sequence appended to the target.
 @param end the index of the character following the last character of the subsequence appended to the target.
 @return this writer.
 @throws StringIndexOutOfBoundsException if <code>start > end</code> , <code>start < 0</code> , <code>end < 0</code> or either <code>start</code> or <code>end</code> are greater or equal than the length of <code>csq</code> .
 */
- (JavaIoPrintWriter *)appendWithJavaLangCharSequence:(id<JavaLangCharSequence>)csq
                                              withInt:(jint)start
                                              withInt:(jint)end;

/**
 @brief Flushes this writer and returns the value of the error flag.
 @return <code>true</code> if either an <code>IOException</code> has been thrown previously or if <code>setError()</code> has been called; <code>false</code> otherwise.
 */
- (jboolean)checkError;

- (void)close;

/**
 @brief Ensures that all pending data is sent out to the target.
 It also flushes the target. If an I/O error occurs, this writer's error state is set to <code>true</code> .
 */
- (void)flush;

/**
 @brief Prints the string representation of the specified character to the target.
 @param ch the character to print to the target.
 */
- (void)printWithChar:(jchar)ch;

/**
 @brief Prints the string representation of the specified character array to the target.
 @param charArray the character array to print to the target.
 */
- (void)printWithCharArray:(IOSCharArray *)charArray;

- (void)printWithInt:(jint)inum;

- (void)printWithLong:(jlong)lnum;

/**
 @brief Prints a string to the target.
 The string is converted to an array of bytes using the encoding chosen during the construction of this writer. The bytes are then written to the target with <code>write(int)</code> . <p> If an I/O error occurs, this writer's error flag is set to <code>true</code> .
 @param str the string to print to the target.
 */
- (void)printWithNSString:(NSString *)str;

/**
 @brief Prints a newline.
 Flushes this writer if the autoFlush flag is set to <code>true</code> .
 */
- (void)println;

/**
 @brief Prints the string representation of the char <code>c</code> followed by a newline.
 Flushes this writer if the autoFlush flag is set to <code>true</code> .
 */
- (void)printlnWithChar:(jchar)c;

/**
 @brief Prints the string representation of the character array <code>chars</code> followed by a newline.
 Flushes this writer if the autoFlush flag is set to <code>true</code> .
 */
- (void)printlnWithCharArray:(IOSCharArray *)chars;

- (void)printlnWithInt:(jint)inum;

- (void)printlnWithLong:(jlong)lnum;

/**
 @brief Writes <code>count</code> characters from <code>buffer</code> starting at <code>offset</code> to the target.
 <p> This writer's error flag is set to <code>true</code> if this writer is closed or an I/O error occurs.
 @param buf the buffer to write to the target.
 @param offset the index of the first character in <code>buffer</code> to write.
 @param count the number of characters in <code>buffer</code> to write.
 @throws IndexOutOfBoundsException if <code>offset < 0</code> or <code>count < 0</code> , or if <code>offset + count</code> is greater than the length of <code>buf</code> .
 */
- (void)writeWithCharArray:(IOSCharArray *)buf
                   withInt:(jint)offset
                   withInt:(jint)count;

/**
 @brief Writes one character to the target.
 Only the two least significant bytes of the integer <code>oneChar</code> are written. <p> This writer's error flag is set to <code>true</code> if this writer is closed or an I/O error occurs.
 @param oneChar the character to write to the target.
 */
- (void)writeWithInt:(jint)oneChar;

/**
 @brief Writes the characters from the specified string to the target.
 @param str the non-null string containing the characters to write.
 */
- (void)writeWithNSString:(NSString *)str;

/**
 @brief Writes <code>count</code> characters from <code>str</code> starting at <code>offset</code> to the target.
 @param str the non-null string containing the characters to write.
 @param offset the index of the first character in <code>str</code> to write.
 @param count the number of characters from <code>str</code> to write.
 @throws IndexOutOfBoundsException if <code>offset < 0</code> or <code>count < 0</code> , or if <code>offset + count</code> is greater than the length of <code>str</code> .
 */
- (void)writeWithNSString:(NSString *)str
                  withInt:(jint)offset
                  withInt:(jint)count;

#pragma mark Protected

/**
 @brief Sets the error state of the stream to false.
 @since 1.6
 */
- (void)clearError;

/**
 @brief Sets the error flag of this writer to true.
 */
- (void)setError;

@end

J2OBJC_EMPTY_STATIC_INIT(RepackagedComAndroidInternalUtilFastPrintWriter)

FOUNDATION_EXPORT void RepackagedComAndroidInternalUtilFastPrintWriter_initWithJavaIoOutputStream_(RepackagedComAndroidInternalUtilFastPrintWriter *self, JavaIoOutputStream *outArg);

FOUNDATION_EXPORT RepackagedComAndroidInternalUtilFastPrintWriter *new_RepackagedComAndroidInternalUtilFastPrintWriter_initWithJavaIoOutputStream_(JavaIoOutputStream *outArg) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void RepackagedComAndroidInternalUtilFastPrintWriter_initWithJavaIoOutputStream_withBoolean_(RepackagedComAndroidInternalUtilFastPrintWriter *self, JavaIoOutputStream *outArg, jboolean autoFlush);

FOUNDATION_EXPORT RepackagedComAndroidInternalUtilFastPrintWriter *new_RepackagedComAndroidInternalUtilFastPrintWriter_initWithJavaIoOutputStream_withBoolean_(JavaIoOutputStream *outArg, jboolean autoFlush) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void RepackagedComAndroidInternalUtilFastPrintWriter_initWithJavaIoOutputStream_withBoolean_withInt_(RepackagedComAndroidInternalUtilFastPrintWriter *self, JavaIoOutputStream *outArg, jboolean autoFlush, jint bufferLen);

FOUNDATION_EXPORT RepackagedComAndroidInternalUtilFastPrintWriter *new_RepackagedComAndroidInternalUtilFastPrintWriter_initWithJavaIoOutputStream_withBoolean_withInt_(JavaIoOutputStream *outArg, jboolean autoFlush, jint bufferLen) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void RepackagedComAndroidInternalUtilFastPrintWriter_initWithJavaIoWriter_(RepackagedComAndroidInternalUtilFastPrintWriter *self, JavaIoWriter *wr);

FOUNDATION_EXPORT RepackagedComAndroidInternalUtilFastPrintWriter *new_RepackagedComAndroidInternalUtilFastPrintWriter_initWithJavaIoWriter_(JavaIoWriter *wr) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void RepackagedComAndroidInternalUtilFastPrintWriter_initWithJavaIoWriter_withBoolean_(RepackagedComAndroidInternalUtilFastPrintWriter *self, JavaIoWriter *wr, jboolean autoFlush);

FOUNDATION_EXPORT RepackagedComAndroidInternalUtilFastPrintWriter *new_RepackagedComAndroidInternalUtilFastPrintWriter_initWithJavaIoWriter_withBoolean_(JavaIoWriter *wr, jboolean autoFlush) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void RepackagedComAndroidInternalUtilFastPrintWriter_initWithJavaIoWriter_withBoolean_withInt_(RepackagedComAndroidInternalUtilFastPrintWriter *self, JavaIoWriter *wr, jboolean autoFlush, jint bufferLen);

FOUNDATION_EXPORT RepackagedComAndroidInternalUtilFastPrintWriter *new_RepackagedComAndroidInternalUtilFastPrintWriter_initWithJavaIoWriter_withBoolean_withInt_(JavaIoWriter *wr, jboolean autoFlush, jint bufferLen) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void RepackagedComAndroidInternalUtilFastPrintWriter_initWithRepackagedAndroidUtilPrinter_(RepackagedComAndroidInternalUtilFastPrintWriter *self, id<RepackagedAndroidUtilPrinter> pr);

FOUNDATION_EXPORT RepackagedComAndroidInternalUtilFastPrintWriter *new_RepackagedComAndroidInternalUtilFastPrintWriter_initWithRepackagedAndroidUtilPrinter_(id<RepackagedAndroidUtilPrinter> pr) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void RepackagedComAndroidInternalUtilFastPrintWriter_initWithRepackagedAndroidUtilPrinter_withInt_(RepackagedComAndroidInternalUtilFastPrintWriter *self, id<RepackagedAndroidUtilPrinter> pr, jint bufferLen);

FOUNDATION_EXPORT RepackagedComAndroidInternalUtilFastPrintWriter *new_RepackagedComAndroidInternalUtilFastPrintWriter_initWithRepackagedAndroidUtilPrinter_withInt_(id<RepackagedAndroidUtilPrinter> pr, jint bufferLen) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(RepackagedComAndroidInternalUtilFastPrintWriter)

#endif // _RepackagedComAndroidInternalUtilFastPrintWriter_H_
