//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/androidlayouts/repackaged/android/util/Spline.java
//

#ifndef _RepackagedAndroidUtilSpline_H_
#define _RepackagedAndroidUtilSpline_H_

#include "J2ObjC_header.h"

@class IOSFloatArray;

/**
 @brief Performs spline interpolation given a set of control points.
 */
@interface RepackagedAndroidUtilSpline : NSObject

#pragma mark Public

- (instancetype)init;

/**
 @brief Creates a linear spline from a given set of control points.
 Like a monotone cubic spline, the interpolated curve will be monotonic if the control points are monotonic.
 @param x The X component of the control points, strictly increasing.
 @param y The Y component of the control points.
 @return 
 @throws IllegalArgumentException if the X or Y arrays are null, have different lengths or have fewer than 2 values.
 @throws IllegalArgumentException if the X components of the control points are not strictly increasing.
 */
+ (RepackagedAndroidUtilSpline *)createLinearSplineWithFloatArray:(IOSFloatArray *)x
                                                   withFloatArray:(IOSFloatArray *)y;

/**
 @brief Creates a monotone cubic spline from a given set of control points.
 The spline is guaranteed to pass through each control point exactly. Moreover, assuming the control points are monotonic (Y is non-decreasing or non-increasing) then the interpolated values will also be monotonic. This function uses the Fritsch-Carlson method for computing the spline parameters. http://en.wikipedia.org/wiki/Monotone_cubic_interpolation
 @param x The X component of the control points, strictly increasing.
 @param y The Y component of the control points, monotonic.
 @return 
 @throws IllegalArgumentException if the X or Y arrays are null, have different lengths or have fewer than 2 values.
 @throws IllegalArgumentException if the control points are not monotonic.
 */
+ (RepackagedAndroidUtilSpline *)createMonotoneCubicSplineWithFloatArray:(IOSFloatArray *)x
                                                          withFloatArray:(IOSFloatArray *)y;

/**
 @brief Creates an appropriate spline based on the properties of the control points.
 If the control points are monotonic then the resulting spline will preserve that and otherwise optimize for error bounds.
 */
+ (RepackagedAndroidUtilSpline *)createSplineWithFloatArray:(IOSFloatArray *)x
                                             withFloatArray:(IOSFloatArray *)y;

/**
 @brief Interpolates the value of Y = f(X) for given X.
 Clamps X to the domain of the spline.
 @param x The X value.
 @return The interpolated Y = f(X) value.
 */
- (jfloat)interpolateWithFloat:(jfloat)x;

@end

J2OBJC_EMPTY_STATIC_INIT(RepackagedAndroidUtilSpline)

FOUNDATION_EXPORT RepackagedAndroidUtilSpline *RepackagedAndroidUtilSpline_createSplineWithFloatArray_withFloatArray_(IOSFloatArray *x, IOSFloatArray *y);

FOUNDATION_EXPORT RepackagedAndroidUtilSpline *RepackagedAndroidUtilSpline_createMonotoneCubicSplineWithFloatArray_withFloatArray_(IOSFloatArray *x, IOSFloatArray *y);

FOUNDATION_EXPORT RepackagedAndroidUtilSpline *RepackagedAndroidUtilSpline_createLinearSplineWithFloatArray_withFloatArray_(IOSFloatArray *x, IOSFloatArray *y);

FOUNDATION_EXPORT void RepackagedAndroidUtilSpline_init(RepackagedAndroidUtilSpline *self);

J2OBJC_TYPE_LITERAL_HEADER(RepackagedAndroidUtilSpline)

@interface RepackagedAndroidUtilSpline_MonotoneCubicSpline : RepackagedAndroidUtilSpline

#pragma mark Public

- (instancetype)initWithFloatArray:(IOSFloatArray *)x
                    withFloatArray:(IOSFloatArray *)y;

- (jfloat)interpolateWithFloat:(jfloat)x;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(RepackagedAndroidUtilSpline_MonotoneCubicSpline)

FOUNDATION_EXPORT void RepackagedAndroidUtilSpline_MonotoneCubicSpline_initWithFloatArray_withFloatArray_(RepackagedAndroidUtilSpline_MonotoneCubicSpline *self, IOSFloatArray *x, IOSFloatArray *y);

FOUNDATION_EXPORT RepackagedAndroidUtilSpline_MonotoneCubicSpline *new_RepackagedAndroidUtilSpline_MonotoneCubicSpline_initWithFloatArray_withFloatArray_(IOSFloatArray *x, IOSFloatArray *y) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(RepackagedAndroidUtilSpline_MonotoneCubicSpline)

@interface RepackagedAndroidUtilSpline_LinearSpline : RepackagedAndroidUtilSpline

#pragma mark Public

- (instancetype)initWithFloatArray:(IOSFloatArray *)x
                    withFloatArray:(IOSFloatArray *)y;

- (jfloat)interpolateWithFloat:(jfloat)x;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(RepackagedAndroidUtilSpline_LinearSpline)

FOUNDATION_EXPORT void RepackagedAndroidUtilSpline_LinearSpline_initWithFloatArray_withFloatArray_(RepackagedAndroidUtilSpline_LinearSpline *self, IOSFloatArray *x, IOSFloatArray *y);

FOUNDATION_EXPORT RepackagedAndroidUtilSpline_LinearSpline *new_RepackagedAndroidUtilSpline_LinearSpline_initWithFloatArray_withFloatArray_(IOSFloatArray *x, IOSFloatArray *y) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(RepackagedAndroidUtilSpline_LinearSpline)

#endif // _RepackagedAndroidUtilSpline_H_
