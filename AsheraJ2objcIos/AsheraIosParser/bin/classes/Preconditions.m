//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/androidlayouts/repackaged/com/android/internal/util/Preconditions.java
//


#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "Preconditions.h"
#include "java/lang/Float.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/NullPointerException.h"
#include "java/util/Collection.h"

#line 0 "/Users/ramm/git/Ashera/AsheraAndroidParser/androidlayouts/repackaged/com/android/internal/util/Preconditions.java"


#line 25
@implementation RepackagedComAndroidInternalUtilPreconditions

+ (void)checkArgumentWithBoolean:(jboolean)expression {
  RepackagedComAndroidInternalUtilPreconditions_checkArgumentWithBoolean_(expression);
}


#line 41
+ (id)checkNotNullWithId:(id)reference {
  return RepackagedComAndroidInternalUtilPreconditions_checkNotNullWithId_(reference);
}


#line 58
+ (id)checkNotNullWithId:(id)reference
                  withId:(id)errorMessage {
  return RepackagedComAndroidInternalUtilPreconditions_checkNotNullWithId_withId_(reference, errorMessage);
}


#line 72
+ (void)checkStateWithBoolean:(jboolean)expression {
  RepackagedComAndroidInternalUtilPreconditions_checkStateWithBoolean_(expression);
}


#line 82
+ (void)checkFlagsArgumentWithInt:(jint)requestedFlags
                          withInt:(jint)allowedFlags {
  RepackagedComAndroidInternalUtilPreconditions_checkFlagsArgumentWithInt_withInt_(requestedFlags, allowedFlags);
}


#line 98
+ (jint)checkArgumentNonnegativeWithInt:(jint)value
                           withNSString:(NSString *)errorMessage {
  return RepackagedComAndroidInternalUtilPreconditions_checkArgumentNonnegativeWithInt_withNSString_(value, errorMessage);
}


#line 114
+ (jlong)checkArgumentNonnegativeWithLong:(jlong)value
                             withNSString:(NSString *)errorMessage {
  return RepackagedComAndroidInternalUtilPreconditions_checkArgumentNonnegativeWithLong_withNSString_(value, errorMessage);
}


#line 130
+ (jint)checkArgumentPositiveWithInt:(jint)value
                        withNSString:(NSString *)errorMessage {
  return RepackagedComAndroidInternalUtilPreconditions_checkArgumentPositiveWithInt_withNSString_(value, errorMessage);
}


#line 151
+ (jfloat)checkArgumentFiniteWithFloat:(jfloat)value
                          withNSString:(NSString *)valueName {
  return RepackagedComAndroidInternalUtilPreconditions_checkArgumentFiniteWithFloat_withNSString_(value, valueName);
}


#line 176
+ (jfloat)checkArgumentInRangeWithFloat:(jfloat)value
                              withFloat:(jfloat)lower
                              withFloat:(jfloat)upper
                           withNSString:(NSString *)valueName {
  return RepackagedComAndroidInternalUtilPreconditions_checkArgumentInRangeWithFloat_withFloat_withFloat_withNSString_(value, lower, upper, valueName);
}


#line 205
+ (jint)checkArgumentInRangeWithInt:(jint)value
                            withInt:(jint)lower
                            withInt:(jint)upper
                       withNSString:(NSString *)valueName {
  return RepackagedComAndroidInternalUtilPreconditions_checkArgumentInRangeWithInt_withInt_withInt_withNSString_(value, lower, upper, valueName);
}


#line 230
+ (IOSObjectArray *)checkArrayElementsNotNullWithNSObjectArray:(IOSObjectArray *)value
                                                  withNSString:(NSString *)valueName {
  return RepackagedComAndroidInternalUtilPreconditions_checkArrayElementsNotNullWithNSObjectArray_withNSString_(value, valueName);
}


#line 256
+ (id<JavaUtilCollection>)checkCollectionElementsNotNullWithJavaUtilCollection:(id<JavaUtilCollection>)value
                                                                  withNSString:(NSString *)valueName {
  return RepackagedComAndroidInternalUtilPreconditions_checkCollectionElementsNotNullWithJavaUtilCollection_withNSString_(value, valueName);
}


#line 285
+ (id<JavaUtilCollection>)checkCollectionNotEmptyWithJavaUtilCollection:(id<JavaUtilCollection>)value
                                                           withNSString:(NSString *)valueName {
  return RepackagedComAndroidInternalUtilPreconditions_checkCollectionNotEmptyWithJavaUtilCollection_withNSString_(value, valueName);
}


#line 312
+ (IOSFloatArray *)checkArrayElementsInRangeWithFloatArray:(IOSFloatArray *)value
                                                 withFloat:(jfloat)lower
                                                 withFloat:(jfloat)upper
                                              withNSString:(NSString *)valueName {
  return RepackagedComAndroidInternalUtilPreconditions_checkArrayElementsInRangeWithFloatArray_withFloat_withFloat_withNSString_(value, lower, upper, valueName);
}

- (instancetype)init {
  RepackagedComAndroidInternalUtilPreconditions_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "checkArgumentWithBoolean:", "checkArgument", "V", 0x9, NULL, NULL },
    { "checkNotNullWithId:", "checkNotNull", "TT;", 0x9, NULL, "<T:Ljava/lang/Object;>(TT;)TT;" },
    { "checkNotNullWithId:withId:", "checkNotNull", "TT;", 0x9, NULL, "<T:Ljava/lang/Object;>(TT;Ljava/lang/Object;)TT;" },
    { "checkStateWithBoolean:", "checkState", "V", 0x9, NULL, NULL },
    { "checkFlagsArgumentWithInt:withInt:", "checkFlagsArgument", "V", 0x9, NULL, NULL },
    { "checkArgumentNonnegativeWithInt:withNSString:", "checkArgumentNonnegative", "I", 0x9, NULL, NULL },
    { "checkArgumentNonnegativeWithLong:withNSString:", "checkArgumentNonnegative", "J", 0x9, NULL, NULL },
    { "checkArgumentPositiveWithInt:withNSString:", "checkArgumentPositive", "I", 0x9, NULL, NULL },
    { "checkArgumentFiniteWithFloat:withNSString:", "checkArgumentFinite", "F", 0x9, NULL, NULL },
    { "checkArgumentInRangeWithFloat:withFloat:withFloat:withNSString:", "checkArgumentInRange", "F", 0x9, NULL, NULL },
    { "checkArgumentInRangeWithInt:withInt:withInt:withNSString:", "checkArgumentInRange", "I", 0x9, NULL, NULL },
    { "checkArrayElementsNotNullWithNSObjectArray:withNSString:", "checkArrayElementsNotNull", "[Ljava.lang.Object;", 0x9, NULL, "<T:Ljava/lang/Object;>([TT;Ljava/lang/String;)[TT;" },
    { "checkCollectionElementsNotNullWithJavaUtilCollection:withNSString:", "checkCollectionElementsNotNull", "Ljava.util.Collection;", 0x9, NULL, "<T:Ljava/lang/Object;>(Ljava/util/Collection<TT;>;Ljava/lang/String;)Ljava/util/Collection<TT;>;" },
    { "checkCollectionNotEmptyWithJavaUtilCollection:withNSString:", "checkCollectionNotEmpty", "Ljava.util.Collection;", 0x9, NULL, "<T:Ljava/lang/Object;>(Ljava/util/Collection<TT;>;Ljava/lang/String;)Ljava/util/Collection<TT;>;" },
    { "checkArrayElementsInRangeWithFloatArray:withFloat:withFloat:withNSString:", "checkArrayElementsInRange", "[F", 0x9, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcClassInfo _RepackagedComAndroidInternalUtilPreconditions = { 2, "Preconditions", "repackaged.com.android.internal.util", NULL, 0x1, 16, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_RepackagedComAndroidInternalUtilPreconditions;
}

@end


#line 27
void RepackagedComAndroidInternalUtilPreconditions_checkArgumentWithBoolean_(jboolean expression) {
  RepackagedComAndroidInternalUtilPreconditions_initialize();
  
#line 28
  if (!expression) {
    @throw new_JavaLangIllegalArgumentException_init();
  }
}


#line 41
id RepackagedComAndroidInternalUtilPreconditions_checkNotNullWithId_(id reference) {
  RepackagedComAndroidInternalUtilPreconditions_initialize();
  
#line 42
  if (reference == nil) {
    @throw new_JavaLangNullPointerException_init();
  }
  return reference;
}


#line 58
id RepackagedComAndroidInternalUtilPreconditions_checkNotNullWithId_withId_(id reference, id errorMessage) {
  RepackagedComAndroidInternalUtilPreconditions_initialize();
  
#line 59
  if (reference == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(NSString_valueOf_(errorMessage));
  }
  return reference;
}


#line 72
void RepackagedComAndroidInternalUtilPreconditions_checkStateWithBoolean_(jboolean expression) {
  RepackagedComAndroidInternalUtilPreconditions_initialize();
  
#line 73
  if (!expression) {
    @throw new_JavaLangIllegalStateException_init();
  }
}


#line 82
void RepackagedComAndroidInternalUtilPreconditions_checkFlagsArgumentWithInt_withInt_(jint requestedFlags, jint allowedFlags) {
  RepackagedComAndroidInternalUtilPreconditions_initialize();
  
#line 83
  if ((requestedFlags & allowedFlags) != requestedFlags) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$$$", @"Requested flags 0x", JavaLangInteger_toHexStringWithInt_(
#line 85
    requestedFlags), @", but only 0x", JavaLangInteger_toHexStringWithInt_(
#line 86
    allowedFlags), @" are allowed"));
  }
}


#line 98
jint RepackagedComAndroidInternalUtilPreconditions_checkArgumentNonnegativeWithInt_withNSString_(jint value, NSString *errorMessage) {
  RepackagedComAndroidInternalUtilPreconditions_initialize();
  
#line 99
  if (value < 0) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(errorMessage);
  }
  
#line 103
  return value;
}


#line 114
jlong RepackagedComAndroidInternalUtilPreconditions_checkArgumentNonnegativeWithLong_withNSString_(jlong value, NSString *errorMessage) {
  RepackagedComAndroidInternalUtilPreconditions_initialize();
  
#line 115
  if (value < 0) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(errorMessage);
  }
  
#line 119
  return value;
}


#line 130
jint RepackagedComAndroidInternalUtilPreconditions_checkArgumentPositiveWithInt_withNSString_(jint value, NSString *errorMessage) {
  RepackagedComAndroidInternalUtilPreconditions_initialize();
  
#line 131
  if (value <= 0) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(errorMessage);
  }
  
#line 135
  return value;
}


#line 151
jfloat RepackagedComAndroidInternalUtilPreconditions_checkArgumentFiniteWithFloat_withNSString_(jfloat value, NSString *valueName) {
  RepackagedComAndroidInternalUtilPreconditions_initialize();
  
#line 152
  if (JavaLangFloat_isNaNWithFloat_(value)) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", valueName, @" must not be NaN"));
  }
  else
#line 154
  if (JavaLangFloat_isInfiniteWithFloat_(value)) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", valueName, @" must not be infinite"));
  }
  
#line 158
  return value;
}


#line 176
jfloat RepackagedComAndroidInternalUtilPreconditions_checkArgumentInRangeWithFloat_withFloat_withFloat_withNSString_(jfloat value, jfloat lower, jfloat upper, NSString *valueName) {
  RepackagedComAndroidInternalUtilPreconditions_initialize();
  if (JavaLangFloat_isNaNWithFloat_(value)) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", valueName, @" must not be NaN"));
  }
  else
#line 180
  if (value < lower) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(NSString_formatWithNSString_withNSObjectArray_(
#line 183
    @"%s is out of range of [%f, %f] (too low)", [IOSObjectArray newArrayWithObjects:(id[]){ valueName, JavaLangFloat_valueOfWithFloat_(lower), JavaLangFloat_valueOfWithFloat_(upper) } count:3 type:NSObject_class_()]));
  }
  else
#line 184
  if (value > upper) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(NSString_formatWithNSString_withNSObjectArray_(
#line 187
    @"%s is out of range of [%f, %f] (too high)", [IOSObjectArray newArrayWithObjects:(id[]){ valueName, JavaLangFloat_valueOfWithFloat_(lower), JavaLangFloat_valueOfWithFloat_(upper) } count:3 type:NSObject_class_()]));
  }
  
#line 190
  return value;
}


#line 205
jint RepackagedComAndroidInternalUtilPreconditions_checkArgumentInRangeWithInt_withInt_withInt_withNSString_(jint value, jint lower, jint upper, NSString *valueName) {
  RepackagedComAndroidInternalUtilPreconditions_initialize();
  if (value < lower) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(NSString_formatWithNSString_withNSObjectArray_(
#line 210
    @"%s is out of range of [%d, %d] (too low)", [IOSObjectArray newArrayWithObjects:(id[]){ valueName, JavaLangInteger_valueOfWithInt_(lower), JavaLangInteger_valueOfWithInt_(upper) } count:3 type:NSObject_class_()]));
  }
  else
#line 211
  if (value > upper) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(NSString_formatWithNSString_withNSObjectArray_(
#line 214
    @"%s is out of range of [%d, %d] (too high)", [IOSObjectArray newArrayWithObjects:(id[]){ valueName, JavaLangInteger_valueOfWithInt_(lower), JavaLangInteger_valueOfWithInt_(upper) } count:3 type:NSObject_class_()]));
  }
  
#line 217
  return value;
}


#line 230
IOSObjectArray *RepackagedComAndroidInternalUtilPreconditions_checkArrayElementsNotNullWithNSObjectArray_withNSString_(IOSObjectArray *value, NSString *valueName) {
  RepackagedComAndroidInternalUtilPreconditions_initialize();
  
#line 231
  if (value == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(JreStrcat("$$", valueName, @" must not be null"));
  }
  
#line 235
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(value))->size_; ++i) {
    if (IOSObjectArray_Get(value, i) == nil) {
      @throw new_JavaLangNullPointerException_initWithNSString_(NSString_formatWithNSString_withNSObjectArray_(
#line 238
      @"%s[%d] must not be null", [IOSObjectArray newArrayWithObjects:(id[]){ valueName, JavaLangInteger_valueOfWithInt_(i) } count:2 type:NSObject_class_()]));
    }
  }
  
#line 242
  return value;
}


#line 256
id<JavaUtilCollection> RepackagedComAndroidInternalUtilPreconditions_checkCollectionElementsNotNullWithJavaUtilCollection_withNSString_(id<JavaUtilCollection> value, NSString *valueName) {
  RepackagedComAndroidInternalUtilPreconditions_initialize();
  if (value == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(JreStrcat("$$", valueName, @" must not be null"));
  }
  
#line 262
  jlong ctr = 0;
  for (id __strong elem in nil_chk(value)) {
    if (elem == nil) {
      @throw new_JavaLangNullPointerException_initWithNSString_(NSString_formatWithNSString_withNSObjectArray_(
#line 266
      @"%s[%d] must not be null", [IOSObjectArray newArrayWithObjects:(id[]){ valueName, JavaLangLong_valueOfWithLong_(ctr) } count:2 type:NSObject_class_()]));
    }
    ++ctr;
  }
  
#line 271
  return value;
}


#line 285
id<JavaUtilCollection> RepackagedComAndroidInternalUtilPreconditions_checkCollectionNotEmptyWithJavaUtilCollection_withNSString_(id<JavaUtilCollection> value, NSString *valueName) {
  RepackagedComAndroidInternalUtilPreconditions_initialize();
  if (value == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(JreStrcat("$$", valueName, @" must not be null"));
  }
  if ([((id<JavaUtilCollection>) nil_chk(value)) isEmpty]) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", valueName, @" is empty"));
  }
  return value;
}


#line 312
IOSFloatArray *RepackagedComAndroidInternalUtilPreconditions_checkArrayElementsInRangeWithFloatArray_withFloat_withFloat_withNSString_(IOSFloatArray *value, jfloat lower, jfloat upper, NSString *valueName) {
  RepackagedComAndroidInternalUtilPreconditions_initialize();
  (void) RepackagedComAndroidInternalUtilPreconditions_checkNotNullWithId_withId_(value, JreStrcat("$$", valueName, @" must not be null"));
  
#line 316
  for (jint i = 0; i < ((IOSFloatArray *) nil_chk(value))->size_; ++i) {
    jfloat v = IOSFloatArray_Get(value, i);
    
#line 319
    if (JavaLangFloat_isNaNWithFloat_(v)) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$CI$", valueName, '[', i, @"] must not be NaN"));
    }
    else
#line 321
    if (v < lower) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(NSString_formatWithNSString_withNSObjectArray_(
#line 323
      @"%s[%d] is out of range of [%f, %f] (too low)", [IOSObjectArray newArrayWithObjects:(id[]){
#line 324
        valueName, JavaLangInteger_valueOfWithInt_(i), JavaLangFloat_valueOfWithFloat_(lower), JavaLangFloat_valueOfWithFloat_(upper) } count:4 type:NSObject_class_()]));
      }
      else
#line 325
      if (v > upper) {
        @throw new_JavaLangIllegalArgumentException_initWithNSString_(NSString_formatWithNSString_withNSObjectArray_(
#line 327
        @"%s[%d] is out of range of [%f, %f] (too high)", [IOSObjectArray newArrayWithObjects:(id[]){
#line 328
          valueName, JavaLangInteger_valueOfWithInt_(i), JavaLangFloat_valueOfWithFloat_(lower), JavaLangFloat_valueOfWithFloat_(upper) } count:4 type:NSObject_class_()]));
        }
      }
      
#line 332
      return value;
    }

void RepackagedComAndroidInternalUtilPreconditions_init(RepackagedComAndroidInternalUtilPreconditions *self) {
  (void) NSObject_init(self);
}

RepackagedComAndroidInternalUtilPreconditions *new_RepackagedComAndroidInternalUtilPreconditions_init() {
  RepackagedComAndroidInternalUtilPreconditions *self = [RepackagedComAndroidInternalUtilPreconditions alloc];
  RepackagedComAndroidInternalUtilPreconditions_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RepackagedComAndroidInternalUtilPreconditions)
