//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/androidlayouts/repackaged/android/view/View.java
//


#include "AbsSavedState.h"
#include "AccessibilityEvent.h"
#include "AccessibilityIterators.h"
#include "AccessibilityManager.h"
#include "AccessibilityNodeInfo.h"
#include "AccessibilityNodeProvider.h"
#include "ActionMode.h"
#include "Animation.h"
#include "AnimationUtils.h"
#include "AnimatorInflater.h"
#include "ApplicationInfo.h"
#include "AttributeSet.h"
#include "Bitmap.h"
#include "Build.h"
#include "Bundle.h"
#include "Canvas.h"
#include "Checkable.h"
#include "Choreographer.h"
#include "ClipData.h"
#include "ColorDrawable.h"
#include "ColorStateList.h"
#include "Configuration.h"
#include "Context.h"
#include "ContextMenu.h"
#include "ContextWrapper.h"
#include "Display.h"
#include "DisplayListCanvas.h"
#include "DisplayManagerGlobal.h"
#include "DisplayMetrics.h"
#include "DragEvent.h"
#include "Drawable.h"
#include "EditorInfo.h"
#include "FloatProperty.h"
#include "FrameLayout.h"
#include "GhostView.h"
#include "Gravity.h"
#include "Handler.h"
#include "HapticFeedbackConstants.h"
#include "HardwareLayer.h"
#include "HardwareRenderer.h"
#include "IBinder.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "IWindow.h"
#include "IWindowId.h"
#include "IWindowSession.h"
#include "InputConnection.h"
#include "InputDevice.h"
#include "InputEventConsistencyVerifier.h"
#include "InputMethodManager.h"
#include "Insets.h"
#include "Intent.h"
#include "Interpolator.h"
#include "J2ObjC_source.h"
#include "KeyEvent.h"
#include "LayoutDirection.h"
#include "LayoutInflater.h"
#include "LinearGradient.h"
#include "Lists.h"
#include "Log.h"
#include "LongSparseLongArray.h"
#include "Maps.h"
#include "Matrix.h"
#include "MenuBuilder.h"
#include "MotionEvent.h"
#include "Outline.h"
#include "Paint.h"
#include "Parcel.h"
#include "Parcelable.h"
#include "PixelFormat.h"
#include "Point.h"
#include "Pools.h"
#include "PorterDuff.h"
#include "PorterDuffXfermode.h"
#include "Predicate.h"
#include "Property.h"
#include "R.h"
#include "Rect.h"
#include "RectF.h"
#include "Region.h"
#include "RemoteException.h"
#include "RenderNode.h"
#include "Resources.h"
#include "ScrollBarDrawable.h"
#include "Shader.h"
#include "SoundEffectConstants.h"
#include "SparseArray.h"
#include "StateListAnimator.h"
#include "StateSet.h"
#include "SuperNotCalledException.h"
#include "Surface.h"
#include "SystemClock.h"
#include "SystemProperties.h"
#include "TextUtils.h"
#include "TouchDelegate.h"
#include "Trace.h"
#include "Transformation.h"
#include "TypedArray.h"
#include "TypedValue.h"
#include "View.h"
#include "ViewConfiguration.h"
#include "ViewDebug.h"
#include "ViewGroup.h"
#include "ViewHierarchyEncoder.h"
#include "ViewOutlineProvider.h"
#include "ViewOverlay.h"
#include "ViewParent.h"
#include "ViewPropertyAnimator.h"
#include "ViewRootImpl.h"
#include "ViewStructure.h"
#include "ViewTreeObserver.h"
#include "WindowId.h"
#include "WindowInsets.h"
#include "java/lang/AbstractMethodError.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Deprecated.h"
#include "java/lang/Exception.h"
#include "java/lang/Float.h"
#include "java/lang/IllegalAccessException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/NoSuchMethodException.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/OutOfMemoryError.h"
#include "java/lang/Runnable.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/lang/ThreadLocal.h"
#include "java/lang/annotation/Retention.h"
#include "java/lang/annotation/RetentionPolicy.h"
#include "java/lang/ref/WeakReference.h"
#include "java/lang/reflect/Field.h"
#include "java/lang/reflect/InvocationTargetException.h"
#include "java/lang/reflect/Method.h"
#include "java/lang/reflect/Modifier.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Locale.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/concurrent/CopyOnWriteArrayList.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"

@class RepackagedAndroidViewView_CheckForLongPress;
@class RepackagedAndroidViewView_CheckForTap;
@class RepackagedAndroidViewView_ForegroundInfo;
@class RepackagedAndroidViewView_MatchIdPredicate;
@class RepackagedAndroidViewView_MatchLabelForPredicate;
@class RepackagedAndroidViewView_PerformClick;
@class RepackagedAndroidViewView_ScrollabilityCache;
@class RepackagedAndroidViewView_SendViewScrolledAccessibilityEvent;
@class RepackagedAndroidViewView_UnsetPressedState;

#line 0 "/Users/ramm/git/Ashera/AsheraAndroidParser/androidlayouts/repackaged/android/view/View.java"

#define RepackagedAndroidViewView_DBG NO
#define RepackagedAndroidViewView_NOT_FOCUSABLE 0
#define RepackagedAndroidViewView_FOCUSABLE 1
#define RepackagedAndroidViewView_FOCUSABLE_MASK 1
#define RepackagedAndroidViewView_FITS_SYSTEM_WINDOWS 2
#define RepackagedAndroidViewView_POPULATING_ACCESSIBILITY_EVENT_TYPES 172479
#define RepackagedAndroidViewView_PFLAG_PRESSED 16384
#define RepackagedAndroidViewView_PFLAG_SAVE_STATE_CALLED 131072
#define RepackagedAndroidViewView_PFLAG_PREPRESSED 33554432
#define RepackagedAndroidViewView_PFLAG_AWAKEN_SCROLL_BARS_ON_ATTACH 134217728
#define RepackagedAndroidViewView_PFLAG_HOVERED 268435456
#define RepackagedAndroidViewView_PFLAG_DOES_NOTHING_REUSE_PLEASE 536870912
#define RepackagedAndroidViewView_LAYOUT_DIRECTION_DEFAULT 2
#define RepackagedAndroidViewView_TEXT_DIRECTION_DEFAULT 0
#define RepackagedAndroidViewView_TEXT_ALIGNMENT_DEFAULT 1
#define RepackagedAndroidViewView_PFLAG2_TEXT_ALIGNMENT_RESOLVED_DEFAULT 131072
#define RepackagedAndroidViewView_UNDEFINED_PADDING ((jint) 0x80000000)
#define RepackagedAndroidViewView_PROVIDER_BACKGROUND 0
#define RepackagedAndroidViewView_PROVIDER_NONE 1
#define RepackagedAndroidViewView_PROVIDER_BOUNDS 2
#define RepackagedAndroidViewView_PROVIDER_PADDED_BOUNDS 3

@interface RepackagedAndroidViewView () {
 @public
  /**
   @brief Map used to store views' tags.
   */
  RepackagedAndroidUtilSparseArray *mKeyedTags_;
  jint mAccessibilityCursorPosition_;
  /**
   @brief Controls the over-scroll mode for this view.
   See #overScrollBy(int,int,int,int,int,int,int,int,boolean) , #OVER_SCROLL_ALWAYS , #OVER_SCROLL_IF_CONTENT_SCROLLS , and #OVER_SCROLL_NEVER .
   */
  jint mOverScrollMode_;
  jboolean mLastIsOpaque_;
  /**
   @brief The layout insets in pixels, that is the distance in pixels between the visible edges of this view its bounds.
   */
  RepackagedAndroidGraphicsInsets *mLayoutInsets_;
  /**
   @brief Briefly describes the view and is primarily used for accessibility support.
   */
  id<JavaLangCharSequence> mContentDescription_;
  /**
   @brief Specifies the id of a view for which this view serves as a label for accessibility purposes.
   */
  jint mLabelForId_;
  /**
   @brief Predicate for matching labeled view id with its label for accessibility purposes.
   */
  RepackagedAndroidViewView_MatchLabelForPredicate *mMatchLabelForPredicate_;
  /**
   @brief Specifies a view before which this one is visited in accessibility traversal.
   */
  jint mAccessibilityTraversalBeforeId_;
  /**
   @brief Specifies a view after which this one is visited in accessibility traversal.
   */
  jint mAccessibilityTraversalAfterId_;
  /**
   @brief Predicate for matching a view by its id.
   */
  RepackagedAndroidViewView_MatchIdPredicate *mMatchIdPredicate_;
  /**
   @brief Cache if a left padding has been defined
   */
  jboolean mLeftPaddingDefined_;
  /**
   @brief Cache if a right padding has been defined
   */
  jboolean mRightPaddingDefined_;
  RepackagedAndroidUtilLongSparseLongArray *mMeasureCache_;
  RepackagedAndroidGraphicsDrawableDrawable *mBackground_;
  RepackagedAndroidViewView_TintInfo *mBackgroundTint_;
  RepackagedAndroidViewView_ForegroundInfo *mForegroundInfo_;
  RepackagedAndroidGraphicsDrawableDrawable *mScrollIndicatorDrawable_;
  /**
   @brief RenderNode used for backgrounds.
   <p> When non-null and valid, this is expected to contain an up-to-date copy of the background drawable. It is cleared on temporary detach, and reset on cleanup.
   */
  RepackagedAndroidViewRenderNode *mBackgroundRenderNode_;
  jint mBackgroundResource_;
  jboolean mBackgroundSizeChanged_;
  NSString *mTransitionName_;
  RepackagedAndroidContentResResources *mResources_;
  RepackagedAndroidViewView_ScrollabilityCache *mScrollCache_;
  IOSIntArray *mDrawableState_;
  /**
   @brief Animator that automatically runs based on state changes.
   */
  RepackagedAndroidAnimationStateListAnimator *mStateListAnimator_;
  /**
   @brief When this view has focus and the next focus is #FOCUS_LEFT , the user may specify which view to go to next.
   */
  jint mNextFocusLeftId_;
  /**
   @brief When this view has focus and the next focus is #FOCUS_RIGHT , the user may specify which view to go to next.
   */
  jint mNextFocusRightId_;
  /**
   @brief When this view has focus and the next focus is #FOCUS_UP , the user may specify which view to go to next.
   */
  jint mNextFocusUpId_;
  /**
   @brief When this view has focus and the next focus is #FOCUS_DOWN , the user may specify which view to go to next.
   */
  jint mNextFocusDownId_;
  RepackagedAndroidViewView_CheckForLongPress *mPendingCheckForLongPress_;
  RepackagedAndroidViewView_CheckForTap *mPendingCheckForTap_;
  RepackagedAndroidViewView_PerformClick *mPerformClick_;
  RepackagedAndroidViewView_SendViewScrolledAccessibilityEvent *mSendViewScrolledAccessibilityEvent_;
  RepackagedAndroidViewView_UnsetPressedState *mUnsetPressedState_;
  /**
   @brief Whether the long press's action has been invoked.
   The tap's action is invoked on the up event while a long press is invoked as soon as the long press duration is reached, so a long press could be performed before the tap is checked, in which case the tap's action should not be invoked.
   */
  jboolean mHasPerformedLongPress_;
  /**
   @brief Whether a context click button is currently pressed down.
   This is true when the stylus is touching the screen and the primary button has been pressed, or if a mouse's right button is pressed. This is false once the button is released or if the stylus has been lifted.
   */
  jboolean mInContextButtonPress_;
  /**
   @brief Whether the next up event should be ignored for the purposes of gesture recognition.
   This is true after a stylus button press has occured, when the next up event should not be recognized as a tap.
   */
  jboolean mIgnoreNextUpEvent_;
  /**
   @brief The minimum height of the view.
   We'll try our best to have the height of this view to at least this amount.
   */
  jint mMinHeight_;
  /**
   @brief The minimum width of the view.
   We'll try our best to have the width of this view to at least this amount.
   */
  jint mMinWidth_;
  /**
   @brief The delegate to handle touch events that are physically in this view but should be handled by another view.
   */
  RepackagedAndroidViewTouchDelegate *mTouchDelegate_;
  /**
   @brief Solid color to use as a background when creating the drawing cache.
   Enables the cache to use 16 bit bitmaps instead of 32 bit.
   */
  jint mDrawingCacheBackgroundColor_;
  /**
   @brief Special tree observer used when mAttachInfo is null.
   */
  RepackagedAndroidViewViewTreeObserver *mFloatingTreeObserver_;
  /**
   @brief Cache the touch slop from the context that created the view.
   */
  jint mTouchSlop_;
  /**
   @brief Object that handles automatic animation of view properties.
   */
  RepackagedAndroidViewViewPropertyAnimator *mAnimator_;
  /**
   @brief Vertical scroll factor cached by #getVerticalScrollFactor .
   */
  jfloat mVerticalScrollFactor_;
  /**
   @brief Position of the vertical scroll bar.
   */
  jint mVerticalScrollbarPosition_;
  RepackagedAndroidGraphicsBitmap *mDrawingCache_;
  RepackagedAndroidGraphicsBitmap *mUnscaledDrawingCache_;
  /**
   @brief Set to true when the view is sending hover accessibility events because it is the innermost hovered view.
   */
  jboolean mSendingHoverAccessibilityEvents_;
  /**
   @brief The currently active parent view for receiving delegated nested scrolling events.
   This is set by #startNestedScroll(int) during a touch interaction and cleared by #stopNestedScroll() at the same point where we clear requestDisallowInterceptTouchEvent.
   */
  id<RepackagedAndroidViewViewParent> mNestedScrollingParent_;
  IOSIntArray *mTempNestedScrollConsumed_;
}

+ (RepackagedAndroidUtilSparseArray *)getAttributeMap;

- (void)saveAttributeDataWithRepackagedAndroidUtilAttributeSet:(id<RepackagedAndroidUtilAttributeSet>)attrs
                     withRepackagedAndroidContentResTypedArray:(id<RepackagedAndroidContentResTypedArray>)t;

- (void)initializeScrollIndicatorsInternal OBJC_METHOD_FAMILY_NONE;

/**
 @brief <p> Initalizes the scrollability cache if necessary.
 </p>
 */
- (void)initScrollCache OBJC_METHOD_FAMILY_NONE;

- (RepackagedAndroidViewView_ScrollabilityCache *)getScrollCache;

- (void)populateVirtualStructureWithRepackagedAndroidViewViewStructure:(RepackagedAndroidViewViewStructure *)structure
       withRepackagedAndroidViewAccessibilityAccessibilityNodeProvider:(RepackagedAndroidViewAccessibilityAccessibilityNodeProvider *)provider
           withRepackagedAndroidViewAccessibilityAccessibilityNodeInfo:(RepackagedAndroidViewAccessibilityAccessibilityNodeInfo *)info;

- (RepackagedAndroidViewView *)findLabelForViewWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)view
                                                                     withInt:(jint)labeledId;

- (void)resetPressedState;

- (jboolean)fitSystemWindowsIntWithRepackagedAndroidGraphicsRect:(RepackagedAndroidGraphicsRect *)insets;

/**
 @brief Sets the pressed state for this view and provides a touch coordinate for animation hinting.
 @param pressed Pass true to set the View's internal state to "pressed", or false to reverts the View's internal state from a previously set "pressed" state.
 @param x The x coordinate of the touch that caused the press
 @param y The y coordinate of the touch that caused the press
 */
- (void)setPressedWithBoolean:(jboolean)pressed
                    withFloat:(jfloat)x
                    withFloat:(jfloat)y;

- (RepackagedAndroidViewView *)findViewInsideOutShouldExistWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)root
                                                                                 withInt:(jint)id_;

- (void)sendAccessibilityHoverEventWithInt:(jint)eventType;

- (jboolean)requestFocusNoSearchWithInt:(jint)direction
      withRepackagedAndroidGraphicsRect:(RepackagedAndroidGraphicsRect *)previouslyFocusedRect;

/**
 @return Whether any ancestor of this view blocks descendant focus.
 */
- (jboolean)hasAncestorThatBlocksDescendantFocus;

/**
 @brief Returns whether the View has registered callbacks which makes it important for accessibility.
 @return True if the view is actionable for accessibility.
 */
- (jboolean)hasListenersForAccessibility;

- (jboolean)traverseAtGranularityWithInt:(jint)granularity
                             withBoolean:(jboolean)forward
                             withBoolean:(jboolean)extendSelection;

- (void)sendViewTextTraversedAtGranularityEventWithInt:(jint)action
                                               withInt:(jint)granularity
                                               withInt:(jint)fromIndex
                                               withInt:(jint)toIndex;

- (jboolean)dispatchGenericMotionEventInternalWithRepackagedAndroidViewMotionEvent:(RepackagedAndroidViewMotionEvent *)event;

/**
 @brief Returns true if the view should handle #onHoverEvent by calling #setHovered to change its hovered state.
 @return True if the view is hoverable.
 */
- (jboolean)isHoverable;

/**
 @brief Remove the longpress detection timer.
 */
- (void)removeLongPressCallback;

/**
 @brief Remove the pending click action
 */
- (void)removePerformClickCallback;

/**
 @brief Remove the prepress detection timer.
 */
- (void)removeUnsetPressCallback;

/**
 @brief Remove the tap detection timer.
 */
- (void)removeTapCallback;

/**
 @brief Remove the pending callback for sending a AccessibilityEvent#TYPE_VIEW_SCROLLED accessibility event.
 */
- (void)removeSendViewScrolledAccessibilityEventCallback;

/**
 @brief Calculates the visual alpha of this view, which is a combination of the actual alpha value and the transitionAlpha value (if set).
 */
- (jfloat)getFinalAlpha;

- (void)setOutlineProviderFromAttributeWithInt:(jint)providerInt;

/**
 @brief Internal version of #invalidateOutline() which invalidates the outline without invalidating the view itself.
 This is intended to be called from within methods in the View class itself which are the result of the view being invalidated already. For example, when we are drawing the background of a View, we invalidate the outline in case it changed in the meantime, but we do not need to invalidate the view because we're already drawing the background as part of drawing the view in response to an earlier invalidation of the view.
 */
- (void)rebuildOutline;

/**
 @brief Trigger the scrollbars to draw.
 This method differs from awakenScrollBars() only in its default duration. initialAwakenScrollBars() will show the scroll bars for longer than usual to give the user more of a chance to notice them.
 @return true if the animation is played, false otherwise.
 */
- (jboolean)initialAwakenScrollBars OBJC_METHOD_FAMILY_NONE;

/**
 @brief Do not invalidate views which are not visible and which are not running an animation.
 They will not get drawn and they should not set dirty flags as if they will be drawn
 */
- (jboolean)skipInvalidate;

/**
 @return this view's projection receiver, or <code>null</code> if none exists
 */
- (RepackagedAndroidViewView *)getProjectionReceiver;

/**
 @return whether the view is a projection receiver
 */
- (jboolean)isProjectionReceiver;

/**
 @brief Damage area of the screen that can be covered by this View's shadow.
 This method will guarantee that any changes to shadows cast by a View are damaged on the screen for future redraw.
 */
- (void)damageShadowReceiver;

/**
 @brief Post a callback to send a AccessibilityEvent#TYPE_VIEW_SCROLLED event.
 This event is sent at most once every ViewConfiguration#getSendRecurringAccessibilityEventsInterval() .
 */
- (void)postSendViewScrolledAccessibilityEventCallback;

- (void)onDrawScrollIndicatorsWithRepackagedAndroidGraphicsCanvas:(RepackagedAndroidGraphicsCanvas *)c;

/**
 @brief Return true if the application tag in the AndroidManifest has set "supportRtl" to true
 */
- (jboolean)hasRtlSupport;

/**
 @brief Return true if we are in RTL compatibility mode (either before Jelly Bean MR1 or RTL not supported)
 */
- (jboolean)isRtlCompatibilityMode;

/**
 @return true if RTL properties need resolution.
 */
- (jboolean)needRtlPropertiesResolution;

- (void)cleanupDraw;

- (void)resetDisplayList;

/**
 @brief private, internal implementation of buildDrawingCache, used to enable tracing
 */
- (void)buildDrawingCacheImplWithBoolean:(jboolean)autoScale;

/**
 @brief Utility function, called by draw(canvas, parent, drawingTime) to handle the less common case of an active Animation being run on the view.
 */
- (jboolean)applyLegacyAnimationWithRepackagedAndroidViewViewGroup:(RepackagedAndroidViewViewGroup *)parent
                                                          withLong:(jlong)drawingTime
                       withRepackagedAndroidViewAnimationAnimation:(id<RepackagedAndroidViewAnimationAnimation>)a
                                                       withBoolean:(jboolean)scalingRequired;

/**
 @brief Draws the background onto the specified canvas.
 @param canvas Canvas on which to draw the background
 */
- (void)drawBackgroundWithRepackagedAndroidGraphicsCanvas:(RepackagedAndroidGraphicsCanvas *)canvas;

- (void)setBackgroundRenderNodePropertiesWithRepackagedAndroidViewRenderNode:(RepackagedAndroidViewRenderNode *)renderNode;

/**
 @brief Creates a new display list or updates the existing display list for the specified Drawable.
 @param drawable Drawable for which to create a display list
 @param renderNode Existing RenderNode, or <code>null</code>
 @return A valid display list for the specified drawable
 */
- (RepackagedAndroidViewRenderNode *)getDrawableRenderNodeWithRepackagedAndroidGraphicsDrawableDrawable:(RepackagedAndroidGraphicsDrawableDrawable *)drawable
                                                                    withRepackagedAndroidViewRenderNode:(RepackagedAndroidViewRenderNode *)renderNode;

/**
 @brief Build a human readable string representation of the specified view flags.
 @param flags the view flags to convert to a string
 @return a String representing the supplied flags
 */
+ (NSString *)printFlagsWithInt:(jint)flags;

/**
 @brief Build a human readable string representation of the specified private view flags.
 @param privateFlags the private view flags to convert to a string
 @return a String representing the supplied flags
 */
+ (NSString *)printPrivateFlagsWithInt:(jint)privateFlags;

- (jboolean)setOpticalFrameWithInt:(jint)left
                           withInt:(jint)top
                           withInt:(jint)right
                           withInt:(jint)bottom;

- (void)sizeChangeWithInt:(jint)newWidth
                  withInt:(jint)newHeight
                  withInt:(jint)oldWidth
                  withInt:(jint)oldHeight;

- (void)applyBackgroundTint;

- (void)applyForegroundTint;

- (void)setKeyedTagWithInt:(jint)key
                    withId:(id)tag;

/**
 @brief Sets the measured dimension without extra processing for things like optical bounds.
 Useful for reapplying consistent values that have already been cooked with adjustments for optical bounds, etc. such as those from the measurement cache.
 @param measuredWidth The measured width of this view.  May be a complex bit mask as defined by #MEASURED_SIZE_MASK and #MEASURED_STATE_TOO_SMALL .
 @param measuredHeight The measured height of this view.  May be a complex bit mask as defined by #MEASURED_SIZE_MASK and #MEASURED_STATE_TOO_SMALL .
 */
- (void)setMeasuredDimensionRawWithInt:(jint)measuredWidth
                               withInt:(jint)measuredHeight;

- (void)checkForLongClickWithInt:(jint)delayOffset;

- (jboolean)inLiveRegion;

/**
 @brief Dump all private flags in readable format, useful for documentation and sanity checking.
 */
+ (void)dumpFlags;

+ (void)dumpFlagWithJavaUtilHashMap:(JavaUtilHashMap *)found
                       withNSString:(NSString *)name
                            withInt:(jint)value;

@end

J2OBJC_FIELD_SETTER(RepackagedAndroidViewView, mKeyedTags_, RepackagedAndroidUtilSparseArray *)
J2OBJC_FIELD_SETTER(RepackagedAndroidViewView, mLayoutInsets_, RepackagedAndroidGraphicsInsets *)
J2OBJC_FIELD_SETTER(RepackagedAndroidViewView, mContentDescription_, id<JavaLangCharSequence>)
J2OBJC_FIELD_SETTER(RepackagedAndroidViewView, mMatchLabelForPredicate_, RepackagedAndroidViewView_MatchLabelForPredicate *)
J2OBJC_FIELD_SETTER(RepackagedAndroidViewView, mMatchIdPredicate_, RepackagedAndroidViewView_MatchIdPredicate *)
J2OBJC_FIELD_SETTER(RepackagedAndroidViewView, mMeasureCache_, RepackagedAndroidUtilLongSparseLongArray *)
J2OBJC_FIELD_SETTER(RepackagedAndroidViewView, mBackground_, RepackagedAndroidGraphicsDrawableDrawable *)
J2OBJC_FIELD_SETTER(RepackagedAndroidViewView, mBackgroundTint_, RepackagedAndroidViewView_TintInfo *)
J2OBJC_FIELD_SETTER(RepackagedAndroidViewView, mForegroundInfo_, RepackagedAndroidViewView_ForegroundInfo *)
J2OBJC_FIELD_SETTER(RepackagedAndroidViewView, mScrollIndicatorDrawable_, RepackagedAndroidGraphicsDrawableDrawable *)
J2OBJC_FIELD_SETTER(RepackagedAndroidViewView, mBackgroundRenderNode_, RepackagedAndroidViewRenderNode *)
J2OBJC_FIELD_SETTER(RepackagedAndroidViewView, mTransitionName_, NSString *)
J2OBJC_FIELD_SETTER(RepackagedAndroidViewView, mResources_, RepackagedAndroidContentResResources *)
J2OBJC_FIELD_SETTER(RepackagedAndroidViewView, mScrollCache_, RepackagedAndroidViewView_ScrollabilityCache *)
J2OBJC_FIELD_SETTER(RepackagedAndroidViewView, mDrawableState_, IOSIntArray *)
J2OBJC_FIELD_SETTER(RepackagedAndroidViewView, mStateListAnimator_, RepackagedAndroidAnimationStateListAnimator *)
J2OBJC_FIELD_SETTER(RepackagedAndroidViewView, mPendingCheckForLongPress_, RepackagedAndroidViewView_CheckForLongPress *)
J2OBJC_FIELD_SETTER(RepackagedAndroidViewView, mPendingCheckForTap_, RepackagedAndroidViewView_CheckForTap *)
J2OBJC_FIELD_SETTER(RepackagedAndroidViewView, mPerformClick_, RepackagedAndroidViewView_PerformClick *)
J2OBJC_FIELD_SETTER(RepackagedAndroidViewView, mSendViewScrolledAccessibilityEvent_, RepackagedAndroidViewView_SendViewScrolledAccessibilityEvent *)
J2OBJC_FIELD_SETTER(RepackagedAndroidViewView, mUnsetPressedState_, RepackagedAndroidViewView_UnsetPressedState *)
J2OBJC_FIELD_SETTER(RepackagedAndroidViewView, mTouchDelegate_, RepackagedAndroidViewTouchDelegate *)
J2OBJC_FIELD_SETTER(RepackagedAndroidViewView, mFloatingTreeObserver_, RepackagedAndroidViewViewTreeObserver *)
J2OBJC_FIELD_SETTER(RepackagedAndroidViewView, mAnimator_, RepackagedAndroidViewViewPropertyAnimator *)
J2OBJC_FIELD_SETTER(RepackagedAndroidViewView, mDrawingCache_, RepackagedAndroidGraphicsBitmap *)
J2OBJC_FIELD_SETTER(RepackagedAndroidViewView, mUnscaledDrawingCache_, RepackagedAndroidGraphicsBitmap *)
J2OBJC_FIELD_SETTER(RepackagedAndroidViewView, mNestedScrollingParent_, id<RepackagedAndroidViewViewParent>)
J2OBJC_FIELD_SETTER(RepackagedAndroidViewView, mTempNestedScrollConsumed_, IOSIntArray *)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, DBG, jboolean)

static jboolean RepackagedAndroidViewView_sCompatibilityDone_ = 
#line 737
NO;
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, sCompatibilityDone_, jboolean)
J2OBJC_STATIC_FIELD_REF_GETTER(RepackagedAndroidViewView, sCompatibilityDone_, jboolean)

static jboolean RepackagedAndroidViewView_sUseBrokenMakeMeasureSpec_ = 
#line 742
NO;
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, sUseBrokenMakeMeasureSpec_, jboolean)
J2OBJC_STATIC_FIELD_REF_GETTER(RepackagedAndroidViewView, sUseBrokenMakeMeasureSpec_, jboolean)

static jboolean RepackagedAndroidViewView_sIgnoreMeasureCache_ = 
#line 752
NO;
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, sIgnoreMeasureCache_, jboolean)
J2OBJC_STATIC_FIELD_REF_GETTER(RepackagedAndroidViewView, sIgnoreMeasureCache_, jboolean)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, NOT_FOCUSABLE, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, FOCUSABLE, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, FOCUSABLE_MASK, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, FITS_SYSTEM_WINDOWS, jint)

static IOSIntArray *RepackagedAndroidViewView_VISIBILITY_FLAGS_;
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, VISIBILITY_FLAGS_, IOSIntArray *)

static IOSIntArray *RepackagedAndroidViewView_DRAWING_CACHE_QUALITY_FLAGS_;
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, DRAWING_CACHE_QUALITY_FLAGS_, IOSIntArray *)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, POPULATING_ACCESSIBILITY_EVENT_TYPES, jint)

static jint RepackagedAndroidViewView_sNextAccessibilityViewId_;
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, sNextAccessibilityViewId_, jint)
J2OBJC_STATIC_FIELD_REF_GETTER(RepackagedAndroidViewView, sNextAccessibilityViewId_, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, PFLAG_PRESSED, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, PFLAG_SAVE_STATE_CALLED, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, PFLAG_PREPRESSED, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, PFLAG_AWAKEN_SCROLL_BARS_ON_ATTACH, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, PFLAG_HOVERED, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, PFLAG_DOES_NOTHING_REUSE_PLEASE, jint)

static IOSIntArray *RepackagedAndroidViewView_LAYOUT_DIRECTION_FLAGS_;
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, LAYOUT_DIRECTION_FLAGS_, IOSIntArray *)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, LAYOUT_DIRECTION_DEFAULT, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, TEXT_DIRECTION_DEFAULT, jint)

static IOSIntArray *RepackagedAndroidViewView_PFLAG2_TEXT_DIRECTION_FLAGS_;
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, PFLAG2_TEXT_DIRECTION_FLAGS_, IOSIntArray *)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, TEXT_ALIGNMENT_DEFAULT, jint)

static IOSIntArray *RepackagedAndroidViewView_PFLAG2_TEXT_ALIGNMENT_FLAGS_;
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, PFLAG2_TEXT_ALIGNMENT_FLAGS_, IOSIntArray *)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, PFLAG2_TEXT_ALIGNMENT_RESOLVED_DEFAULT, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, UNDEFINED_PADDING, jint)

static JavaUtilConcurrentAtomicAtomicInteger *RepackagedAndroidViewView_sNextGeneratedId_;
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, sNextGeneratedId_, JavaUtilConcurrentAtomicAtomicInteger *)

static RepackagedAndroidUtilSparseArray *RepackagedAndroidViewView_mAttributeMap_;
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, mAttributeMap_, RepackagedAndroidUtilSparseArray *)
J2OBJC_STATIC_FIELD_SETTER(RepackagedAndroidViewView, mAttributeMap_, RepackagedAndroidUtilSparseArray *)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, PROVIDER_BACKGROUND, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, PROVIDER_NONE, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, PROVIDER_BOUNDS, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, PROVIDER_PADDED_BOUNDS, jint)

__attribute__((unused)) static RepackagedAndroidUtilSparseArray *RepackagedAndroidViewView_getAttributeMap();

__attribute__((unused)) static void RepackagedAndroidViewView_saveAttributeDataWithRepackagedAndroidUtilAttributeSet_withRepackagedAndroidContentResTypedArray_(RepackagedAndroidViewView *self, id<RepackagedAndroidUtilAttributeSet> attrs, id<RepackagedAndroidContentResTypedArray> t);

__attribute__((unused)) static void RepackagedAndroidViewView_initializeScrollIndicatorsInternal(RepackagedAndroidViewView *self);

__attribute__((unused)) static void RepackagedAndroidViewView_initScrollCache(RepackagedAndroidViewView *self);

__attribute__((unused)) static RepackagedAndroidViewView_ScrollabilityCache *RepackagedAndroidViewView_getScrollCache(RepackagedAndroidViewView *self);

__attribute__((unused)) static void RepackagedAndroidViewView_populateVirtualStructureWithRepackagedAndroidViewViewStructure_withRepackagedAndroidViewAccessibilityAccessibilityNodeProvider_withRepackagedAndroidViewAccessibilityAccessibilityNodeInfo_(RepackagedAndroidViewView *self, RepackagedAndroidViewViewStructure *structure, RepackagedAndroidViewAccessibilityAccessibilityNodeProvider *provider, RepackagedAndroidViewAccessibilityAccessibilityNodeInfo *info);

__attribute__((unused)) static RepackagedAndroidViewView *RepackagedAndroidViewView_findLabelForViewWithRepackagedAndroidViewView_withInt_(RepackagedAndroidViewView *self, RepackagedAndroidViewView *view, jint labeledId);

__attribute__((unused)) static void RepackagedAndroidViewView_resetPressedState(RepackagedAndroidViewView *self);

__attribute__((unused)) static jboolean RepackagedAndroidViewView_fitSystemWindowsIntWithRepackagedAndroidGraphicsRect_(RepackagedAndroidViewView *self, RepackagedAndroidGraphicsRect *insets);

__attribute__((unused)) static void RepackagedAndroidViewView_setPressedWithBoolean_withFloat_withFloat_(RepackagedAndroidViewView *self, jboolean pressed, jfloat x, jfloat y);

__attribute__((unused)) static jboolean RepackagedAndroidViewView_isFocusable(RepackagedAndroidViewView *self);

__attribute__((unused)) static jboolean RepackagedAndroidViewView_isFocusableInTouchMode(RepackagedAndroidViewView *self);

__attribute__((unused)) static RepackagedAndroidViewView *RepackagedAndroidViewView_findViewInsideOutShouldExistWithRepackagedAndroidViewView_withInt_(RepackagedAndroidViewView *self, RepackagedAndroidViewView *root, jint id_);

__attribute__((unused)) static void RepackagedAndroidViewView_sendAccessibilityHoverEventWithInt_(RepackagedAndroidViewView *self, jint eventType);

__attribute__((unused)) static jboolean RepackagedAndroidViewView_requestFocus(RepackagedAndroidViewView *self);

__attribute__((unused)) static jboolean RepackagedAndroidViewView_requestFocusWithInt_(RepackagedAndroidViewView *self, jint direction);

__attribute__((unused)) static jboolean RepackagedAndroidViewView_requestFocusNoSearchWithInt_withRepackagedAndroidGraphicsRect_(RepackagedAndroidViewView *self, jint direction, RepackagedAndroidGraphicsRect *previouslyFocusedRect);

__attribute__((unused)) static jboolean RepackagedAndroidViewView_hasAncestorThatBlocksDescendantFocus(RepackagedAndroidViewView *self);

__attribute__((unused)) static jboolean RepackagedAndroidViewView_hasListenersForAccessibility(RepackagedAndroidViewView *self);

__attribute__((unused)) static jboolean RepackagedAndroidViewView_traverseAtGranularityWithInt_withBoolean_withBoolean_(RepackagedAndroidViewView *self, jint granularity, jboolean forward, jboolean extendSelection);

__attribute__((unused)) static void RepackagedAndroidViewView_sendViewTextTraversedAtGranularityEventWithInt_withInt_withInt_withInt_(RepackagedAndroidViewView *self, jint action, jint granularity, jint fromIndex, jint toIndex);

__attribute__((unused)) static jboolean RepackagedAndroidViewView_dispatchGenericMotionEventInternalWithRepackagedAndroidViewMotionEvent_(RepackagedAndroidViewView *self, RepackagedAndroidViewMotionEvent *event);

__attribute__((unused)) static id<RepackagedAndroidContentContext> RepackagedAndroidViewView_getContext(RepackagedAndroidViewView *self);

__attribute__((unused)) static jboolean RepackagedAndroidViewView_isHoverable(RepackagedAndroidViewView *self);

__attribute__((unused)) static void RepackagedAndroidViewView_removeLongPressCallback(RepackagedAndroidViewView *self);

__attribute__((unused)) static void RepackagedAndroidViewView_removePerformClickCallback(RepackagedAndroidViewView *self);

__attribute__((unused)) static void RepackagedAndroidViewView_removeUnsetPressCallback(RepackagedAndroidViewView *self);

__attribute__((unused)) static void RepackagedAndroidViewView_removeTapCallback(RepackagedAndroidViewView *self);

__attribute__((unused)) static void RepackagedAndroidViewView_removeSendViewScrolledAccessibilityEventCallback(RepackagedAndroidViewView *self);

__attribute__((unused)) static id<RepackagedAndroidViewViewParent> RepackagedAndroidViewView_getParent(RepackagedAndroidViewView *self);

__attribute__((unused)) static jint RepackagedAndroidViewView_getScrollX(RepackagedAndroidViewView *self);

__attribute__((unused)) static jint RepackagedAndroidViewView_getScrollY(RepackagedAndroidViewView *self);

__attribute__((unused)) static jint RepackagedAndroidViewView_getWidth(RepackagedAndroidViewView *self);

__attribute__((unused)) static jint RepackagedAndroidViewView_getHeight(RepackagedAndroidViewView *self);

__attribute__((unused)) static jboolean RepackagedAndroidViewView_hasIdentityMatrix(RepackagedAndroidViewView *self);

__attribute__((unused)) static RepackagedAndroidGraphicsMatrix *RepackagedAndroidViewView_getInverseMatrix(RepackagedAndroidViewView *self);

__attribute__((unused)) static jfloat RepackagedAndroidViewView_getFinalAlpha(RepackagedAndroidViewView *self);

__attribute__((unused)) static jint RepackagedAndroidViewView_getTop(RepackagedAndroidViewView *self);

__attribute__((unused)) static jint RepackagedAndroidViewView_getBottom(RepackagedAndroidViewView *self);

__attribute__((unused)) static void RepackagedAndroidViewView_setBottomWithInt_(RepackagedAndroidViewView *self, jint bottom);

__attribute__((unused)) static jint RepackagedAndroidViewView_getLeft(RepackagedAndroidViewView *self);

__attribute__((unused)) static jint RepackagedAndroidViewView_getRight(RepackagedAndroidViewView *self);

__attribute__((unused)) static void RepackagedAndroidViewView_setRightWithInt_(RepackagedAndroidViewView *self, jint right);

__attribute__((unused)) static jboolean RepackagedAndroidViewView_getClipToOutline(RepackagedAndroidViewView *self);

__attribute__((unused)) static void RepackagedAndroidViewView_setOutlineProviderFromAttributeWithInt_(RepackagedAndroidViewView *self, jint providerInt);

__attribute__((unused)) static void RepackagedAndroidViewView_rebuildOutline(RepackagedAndroidViewView *self);

__attribute__((unused)) static jboolean RepackagedAndroidViewView_pointInViewWithFloat_withFloat_(RepackagedAndroidViewView *self, jfloat localX, jfloat localY);

__attribute__((unused)) static jboolean RepackagedAndroidViewView_initialAwakenScrollBars(RepackagedAndroidViewView *self);

__attribute__((unused)) static jboolean RepackagedAndroidViewView_skipInvalidate(RepackagedAndroidViewView *self);

__attribute__((unused)) static RepackagedAndroidViewView *RepackagedAndroidViewView_getProjectionReceiver(RepackagedAndroidViewView *self);

__attribute__((unused)) static jboolean RepackagedAndroidViewView_isProjectionReceiver(RepackagedAndroidViewView *self);

__attribute__((unused)) static void RepackagedAndroidViewView_damageShadowReceiver(RepackagedAndroidViewView *self);

__attribute__((unused)) static void RepackagedAndroidViewView_postSendViewScrolledAccessibilityEventCallback(RepackagedAndroidViewView *self);

__attribute__((unused)) static void RepackagedAndroidViewView_onDrawScrollIndicatorsWithRepackagedAndroidGraphicsCanvas_(RepackagedAndroidViewView *self, RepackagedAndroidGraphicsCanvas *c);

__attribute__((unused)) static void RepackagedAndroidViewView_onDrawScrollBarsWithRepackagedAndroidGraphicsCanvas_(RepackagedAndroidViewView *self, RepackagedAndroidGraphicsCanvas *canvas);

__attribute__((unused)) static jboolean RepackagedAndroidViewView_hasRtlSupport(RepackagedAndroidViewView *self);

__attribute__((unused)) static jboolean RepackagedAndroidViewView_isRtlCompatibilityMode(RepackagedAndroidViewView *self);

__attribute__((unused)) static jboolean RepackagedAndroidViewView_needRtlPropertiesResolution(RepackagedAndroidViewView *self);

__attribute__((unused)) static void RepackagedAndroidViewView_cleanupDraw(RepackagedAndroidViewView *self);

__attribute__((unused)) static void RepackagedAndroidViewView_cancelPendingInputEvents(RepackagedAndroidViewView *self);

__attribute__((unused)) static void RepackagedAndroidViewView_resetDisplayList(RepackagedAndroidViewView *self);

__attribute__((unused)) static void RepackagedAndroidViewView_buildDrawingCacheImplWithBoolean_(RepackagedAndroidViewView *self, jboolean autoScale);

__attribute__((unused)) static jboolean RepackagedAndroidViewView_applyLegacyAnimationWithRepackagedAndroidViewViewGroup_withLong_withRepackagedAndroidViewAnimationAnimation_withBoolean_(RepackagedAndroidViewView *self, RepackagedAndroidViewViewGroup *parent, jlong drawingTime, id<RepackagedAndroidViewAnimationAnimation> a, jboolean scalingRequired);

__attribute__((unused)) static void RepackagedAndroidViewView_drawBackgroundWithRepackagedAndroidGraphicsCanvas_(RepackagedAndroidViewView *self, RepackagedAndroidGraphicsCanvas *canvas);

__attribute__((unused)) static void RepackagedAndroidViewView_setBackgroundRenderNodePropertiesWithRepackagedAndroidViewRenderNode_(RepackagedAndroidViewView *self, RepackagedAndroidViewRenderNode *renderNode);

__attribute__((unused)) static RepackagedAndroidViewRenderNode *RepackagedAndroidViewView_getDrawableRenderNodeWithRepackagedAndroidGraphicsDrawableDrawable_withRepackagedAndroidViewRenderNode_(RepackagedAndroidViewView *self, RepackagedAndroidGraphicsDrawableDrawable *drawable, RepackagedAndroidViewRenderNode *renderNode);

__attribute__((unused)) static NSString *RepackagedAndroidViewView_printFlagsWithInt_(jint flags);

__attribute__((unused)) static NSString *RepackagedAndroidViewView_printPrivateFlagsWithInt_(jint privateFlags);

__attribute__((unused)) static jboolean RepackagedAndroidViewView_setOpticalFrameWithInt_withInt_withInt_withInt_(RepackagedAndroidViewView *self, jint left, jint top, jint right, jint bottom);

__attribute__((unused)) static void RepackagedAndroidViewView_sizeChangeWithInt_withInt_withInt_withInt_(RepackagedAndroidViewView *self, jint newWidth, jint newHeight, jint oldWidth, jint oldHeight);

__attribute__((unused)) static IOSIntArray *RepackagedAndroidViewView_getDrawableState(RepackagedAndroidViewView *self);

__attribute__((unused)) static void RepackagedAndroidViewView_applyBackgroundTint(RepackagedAndroidViewView *self);

__attribute__((unused)) static void RepackagedAndroidViewView_applyForegroundTint(RepackagedAndroidViewView *self);

__attribute__((unused)) static RepackagedAndroidViewView *RepackagedAndroidViewView_findViewByPredicateInsideOutWithRepackagedAndroidViewView_withRepackagedComAndroidInternalUtilPredicate_(RepackagedAndroidViewView *self, RepackagedAndroidViewView *start, id<RepackagedComAndroidInternalUtilPredicate> predicate);

__attribute__((unused)) static void RepackagedAndroidViewView_setKeyedTagWithInt_withId_(RepackagedAndroidViewView *self, jint key, id tag);

__attribute__((unused)) static void RepackagedAndroidViewView_setMeasuredDimensionWithInt_withInt_(RepackagedAndroidViewView *self, jint measuredWidth, jint measuredHeight);

__attribute__((unused)) static void RepackagedAndroidViewView_setMeasuredDimensionRawWithInt_withInt_(RepackagedAndroidViewView *self, jint measuredWidth, jint measuredHeight);

__attribute__((unused)) static void RepackagedAndroidViewView_checkForLongClickWithInt_(RepackagedAndroidViewView *self, jint delayOffset);

__attribute__((unused)) static void RepackagedAndroidViewView_setTransitionNameWithNSString_(RepackagedAndroidViewView *self, NSString *transitionName);

__attribute__((unused)) static jboolean RepackagedAndroidViewView_inLiveRegion(RepackagedAndroidViewView *self);

__attribute__((unused)) static void RepackagedAndroidViewView_dumpFlags();

__attribute__((unused)) static void RepackagedAndroidViewView_dumpFlagWithJavaUtilHashMap_withNSString_withInt_(JavaUtilHashMap *found, NSString *name, jint value);

@interface RepackagedAndroidViewView_Visibility : NSObject
@end

@interface RepackagedAndroidViewView_DrawingCacheQuality : NSObject
@end

@interface RepackagedAndroidViewView_ScrollBarStyle : NSObject
@end

@interface RepackagedAndroidViewView_FocusableMode : NSObject
@end

@interface RepackagedAndroidViewView_FocusDirection : NSObject
@end

@interface RepackagedAndroidViewView_FocusRealDirection : NSObject
@end

@interface RepackagedAndroidViewView_LayoutDir : NSObject
@end

@interface RepackagedAndroidViewView_ResolvedLayoutDir : NSObject
@end

@interface RepackagedAndroidViewView_TextAlignment : NSObject
@end

@interface RepackagedAndroidViewView_ScrollIndicators : NSObject
@end

@interface RepackagedAndroidViewView_FindViewFlags : NSObject
@end

@interface RepackagedAndroidViewView_TransformationInfo () {
 @public
  /**
   @brief The transform matrix for the View.
   This transform is calculated internally based on the translation, rotation, and scale properties. Do *not* use this variable directly; instead call getMatrix(), which will load the value from the View's RenderNode.
   */
  RepackagedAndroidGraphicsMatrix *mMatrix_;
  /**
   @brief The inverse transform matrix for the View.
   This transform is calculated internally based on the translation, rotation, and scale properties. Do *not* use this variable directly; instead call getInverseMatrix(), which will load the value from the View's RenderNode.
   */
  RepackagedAndroidGraphicsMatrix *mInverseMatrix_;
}

@end

J2OBJC_FIELD_SETTER(RepackagedAndroidViewView_TransformationInfo, mMatrix_, RepackagedAndroidGraphicsMatrix *)
J2OBJC_FIELD_SETTER(RepackagedAndroidViewView_TransformationInfo, mInverseMatrix_, RepackagedAndroidGraphicsMatrix *)

@interface RepackagedAndroidViewView_ForegroundInfo : NSObject {
 @public
  RepackagedAndroidGraphicsDrawableDrawable *mDrawable_;
  RepackagedAndroidViewView_TintInfo *mTintInfo_;
  jint mGravity_;
  jboolean mInsidePadding_;
  jboolean mBoundsChanged_;
  RepackagedAndroidGraphicsRect *mSelfBounds_;
  RepackagedAndroidGraphicsRect *mOverlayBounds_;
}

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RepackagedAndroidViewView_ForegroundInfo)

J2OBJC_FIELD_SETTER(RepackagedAndroidViewView_ForegroundInfo, mDrawable_, RepackagedAndroidGraphicsDrawableDrawable *)
J2OBJC_FIELD_SETTER(RepackagedAndroidViewView_ForegroundInfo, mTintInfo_, RepackagedAndroidViewView_TintInfo *)
J2OBJC_FIELD_SETTER(RepackagedAndroidViewView_ForegroundInfo, mSelfBounds_, RepackagedAndroidGraphicsRect *)
J2OBJC_FIELD_SETTER(RepackagedAndroidViewView_ForegroundInfo, mOverlayBounds_, RepackagedAndroidGraphicsRect *)

__attribute__((unused)) static void RepackagedAndroidViewView_ForegroundInfo_init(RepackagedAndroidViewView_ForegroundInfo *self);

__attribute__((unused)) static RepackagedAndroidViewView_ForegroundInfo *new_RepackagedAndroidViewView_ForegroundInfo_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(RepackagedAndroidViewView_ForegroundInfo)

@interface RepackagedAndroidViewView_ListenerInfo () {
 @public
  /**
   @brief Listeners for layout change events.
   */
  JavaUtilArrayList *mOnLayoutChangeListeners_;
  /**
   @brief Listeners for attach events.
   */
  JavaUtilConcurrentCopyOnWriteArrayList *mOnAttachStateChangeListeners_;
  id<RepackagedAndroidViewView_OnKeyListener> mOnKeyListener_;
  id<RepackagedAndroidViewView_OnTouchListener> mOnTouchListener_;
  id<RepackagedAndroidViewView_OnHoverListener> mOnHoverListener_;
  id<RepackagedAndroidViewView_OnGenericMotionListener> mOnGenericMotionListener_;
  id<RepackagedAndroidViewView_OnDragListener> mOnDragListener_;
  id<RepackagedAndroidViewView_OnSystemUiVisibilityChangeListener> mOnSystemUiVisibilityChangeListener_;
}

@end

J2OBJC_FIELD_SETTER(RepackagedAndroidViewView_ListenerInfo, mOnLayoutChangeListeners_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(RepackagedAndroidViewView_ListenerInfo, mOnAttachStateChangeListeners_, JavaUtilConcurrentCopyOnWriteArrayList *)
J2OBJC_FIELD_SETTER(RepackagedAndroidViewView_ListenerInfo, mOnKeyListener_, id<RepackagedAndroidViewView_OnKeyListener>)
J2OBJC_FIELD_SETTER(RepackagedAndroidViewView_ListenerInfo, mOnTouchListener_, id<RepackagedAndroidViewView_OnTouchListener>)
J2OBJC_FIELD_SETTER(RepackagedAndroidViewView_ListenerInfo, mOnHoverListener_, id<RepackagedAndroidViewView_OnHoverListener>)
J2OBJC_FIELD_SETTER(RepackagedAndroidViewView_ListenerInfo, mOnGenericMotionListener_, id<RepackagedAndroidViewView_OnGenericMotionListener>)
J2OBJC_FIELD_SETTER(RepackagedAndroidViewView_ListenerInfo, mOnDragListener_, id<RepackagedAndroidViewView_OnDragListener>)
J2OBJC_FIELD_SETTER(RepackagedAndroidViewView_ListenerInfo, mOnSystemUiVisibilityChangeListener_, id<RepackagedAndroidViewView_OnSystemUiVisibilityChangeListener>)

@interface RepackagedAndroidViewView_OnClickListener : NSObject
@end

/**
 @brief An implementation of OnClickListener that attempts to lazily load a named click handling method from a parent or ancestor context.
 */
@interface RepackagedAndroidViewView_DeclaredOnClickListener : NSObject < RepackagedAndroidViewView_OnClickListener > {
 @public
  RepackagedAndroidViewView *mHostView_;
  NSString *mMethodName_;
  JavaLangReflectMethod *mMethod_;
}

- (instancetype)initWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)hostView
                                     withNSString:(NSString *)methodName;

- (void)onClickWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)v;

- (JavaLangReflectMethod *)resolveMethodWithRepackagedAndroidContentContext:(id<RepackagedAndroidContentContext>)context
                                                               withNSString:(NSString *)name;

@end

J2OBJC_EMPTY_STATIC_INIT(RepackagedAndroidViewView_DeclaredOnClickListener)

J2OBJC_FIELD_SETTER(RepackagedAndroidViewView_DeclaredOnClickListener, mHostView_, RepackagedAndroidViewView *)
J2OBJC_FIELD_SETTER(RepackagedAndroidViewView_DeclaredOnClickListener, mMethodName_, NSString *)
J2OBJC_FIELD_SETTER(RepackagedAndroidViewView_DeclaredOnClickListener, mMethod_, JavaLangReflectMethod *)

__attribute__((unused)) static void RepackagedAndroidViewView_DeclaredOnClickListener_initWithRepackagedAndroidViewView_withNSString_(RepackagedAndroidViewView_DeclaredOnClickListener *self, RepackagedAndroidViewView *hostView, NSString *methodName);

__attribute__((unused)) static RepackagedAndroidViewView_DeclaredOnClickListener *new_RepackagedAndroidViewView_DeclaredOnClickListener_initWithRepackagedAndroidViewView_withNSString_(RepackagedAndroidViewView *hostView, NSString *methodName) NS_RETURNS_RETAINED;

__attribute__((unused)) static JavaLangReflectMethod *RepackagedAndroidViewView_DeclaredOnClickListener_resolveMethodWithRepackagedAndroidContentContext_withNSString_(RepackagedAndroidViewView_DeclaredOnClickListener *self, id<RepackagedAndroidContentContext> context, NSString *name);

J2OBJC_TYPE_LITERAL_HEADER(RepackagedAndroidViewView_DeclaredOnClickListener)

@interface RepackagedAndroidViewView_OnScrollChangeListener : NSObject
@end

@interface RepackagedAndroidViewView_OnLayoutChangeListener : NSObject
@end

@interface RepackagedAndroidViewView_DragShadowBuilder () {
 @public
  JavaLangRefWeakReference *mView_;
}

@end

J2OBJC_FIELD_SETTER(RepackagedAndroidViewView_DragShadowBuilder, mView_, JavaLangRefWeakReference *)

#define RepackagedAndroidViewView_MeasureSpec_MODE_SHIFT 30
#define RepackagedAndroidViewView_MeasureSpec_MODE_MASK -1073741824

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView_MeasureSpec, MODE_SHIFT, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView_MeasureSpec, MODE_MASK, jint)

@interface RepackagedAndroidViewView_CheckForLongPress : NSObject < JavaLangRunnable > {
 @public
  RepackagedAndroidViewView *this$0_;
  jint mOriginalWindowAttachCount_;
}

- (void)run;

- (void)rememberWindowAttachCount;

- (instancetype)initWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(RepackagedAndroidViewView_CheckForLongPress)

J2OBJC_FIELD_SETTER(RepackagedAndroidViewView_CheckForLongPress, this$0_, RepackagedAndroidViewView *)

__attribute__((unused)) static void RepackagedAndroidViewView_CheckForLongPress_initWithRepackagedAndroidViewView_(RepackagedAndroidViewView_CheckForLongPress *self, RepackagedAndroidViewView *outer$);

__attribute__((unused)) static RepackagedAndroidViewView_CheckForLongPress *new_RepackagedAndroidViewView_CheckForLongPress_initWithRepackagedAndroidViewView_(RepackagedAndroidViewView *outer$) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(RepackagedAndroidViewView_CheckForLongPress)

@interface RepackagedAndroidViewView_CheckForTap : NSObject < JavaLangRunnable > {
 @public
  RepackagedAndroidViewView *this$0_;
  jfloat x_;
  jfloat y_;
}

- (void)run;

- (instancetype)initWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(RepackagedAndroidViewView_CheckForTap)

J2OBJC_FIELD_SETTER(RepackagedAndroidViewView_CheckForTap, this$0_, RepackagedAndroidViewView *)

__attribute__((unused)) static void RepackagedAndroidViewView_CheckForTap_initWithRepackagedAndroidViewView_(RepackagedAndroidViewView_CheckForTap *self, RepackagedAndroidViewView *outer$);

__attribute__((unused)) static RepackagedAndroidViewView_CheckForTap *new_RepackagedAndroidViewView_CheckForTap_initWithRepackagedAndroidViewView_(RepackagedAndroidViewView *outer$) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(RepackagedAndroidViewView_CheckForTap)

@interface RepackagedAndroidViewView_PerformClick : NSObject < JavaLangRunnable > {
 @public
  RepackagedAndroidViewView *this$0_;
}

- (void)run;

- (instancetype)initWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(RepackagedAndroidViewView_PerformClick)

J2OBJC_FIELD_SETTER(RepackagedAndroidViewView_PerformClick, this$0_, RepackagedAndroidViewView *)

__attribute__((unused)) static void RepackagedAndroidViewView_PerformClick_initWithRepackagedAndroidViewView_(RepackagedAndroidViewView_PerformClick *self, RepackagedAndroidViewView *outer$);

__attribute__((unused)) static RepackagedAndroidViewView_PerformClick *new_RepackagedAndroidViewView_PerformClick_initWithRepackagedAndroidViewView_(RepackagedAndroidViewView *outer$) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(RepackagedAndroidViewView_PerformClick)

@interface RepackagedAndroidViewView_OnKeyListener : NSObject
@end

@interface RepackagedAndroidViewView_OnTouchListener : NSObject
@end

@interface RepackagedAndroidViewView_OnHoverListener : NSObject
@end

@interface RepackagedAndroidViewView_OnGenericMotionListener : NSObject
@end

@interface RepackagedAndroidViewView_OnLongClickListener : NSObject
@end

@interface RepackagedAndroidViewView_OnDragListener : NSObject
@end

@interface RepackagedAndroidViewView_OnFocusChangeListener : NSObject
@end

@interface RepackagedAndroidViewView_OnContextClickListener : NSObject
@end

@interface RepackagedAndroidViewView_OnCreateContextMenuListener : NSObject
@end

@interface RepackagedAndroidViewView_OnSystemUiVisibilityChangeListener : NSObject
@end

@interface RepackagedAndroidViewView_OnAttachStateChangeListener : NSObject
@end

@interface RepackagedAndroidViewView_OnApplyWindowInsetsListener : NSObject
@end

@interface RepackagedAndroidViewView_UnsetPressedState : NSObject < JavaLangRunnable > {
 @public
  RepackagedAndroidViewView *this$0_;
}

- (void)run;

- (instancetype)initWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(RepackagedAndroidViewView_UnsetPressedState)

J2OBJC_FIELD_SETTER(RepackagedAndroidViewView_UnsetPressedState, this$0_, RepackagedAndroidViewView *)

__attribute__((unused)) static void RepackagedAndroidViewView_UnsetPressedState_initWithRepackagedAndroidViewView_(RepackagedAndroidViewView_UnsetPressedState *self, RepackagedAndroidViewView *outer$);

__attribute__((unused)) static RepackagedAndroidViewView_UnsetPressedState *new_RepackagedAndroidViewView_UnsetPressedState_initWithRepackagedAndroidViewView_(RepackagedAndroidViewView *outer$) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(RepackagedAndroidViewView_UnsetPressedState)

@interface RepackagedAndroidViewView_BaseSavedState_$1 : NSObject < RepackagedAndroidOsParcelable_Creator >

- (RepackagedAndroidViewView_BaseSavedState *)createFromParcelWithRepackagedAndroidOsParcel:(id<RepackagedAndroidOsParcel>)inArg;

- (IOSObjectArray *)newArrayWithInt:(jint)size OBJC_METHOD_FAMILY_NONE;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RepackagedAndroidViewView_BaseSavedState_$1)

__attribute__((unused)) static void RepackagedAndroidViewView_BaseSavedState_$1_init(RepackagedAndroidViewView_BaseSavedState_$1 *self);

__attribute__((unused)) static RepackagedAndroidViewView_BaseSavedState_$1 *new_RepackagedAndroidViewView_BaseSavedState_$1_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(RepackagedAndroidViewView_BaseSavedState_$1)

@interface RepackagedAndroidViewView_AttachInfo_Callbacks : NSObject
@end

#define RepackagedAndroidViewView_AttachInfo_InvalidateInfo_POOL_LIMIT 10

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView_AttachInfo_InvalidateInfo, POOL_LIMIT, jint)

static RepackagedAndroidUtilPools_SynchronizedPool *RepackagedAndroidViewView_AttachInfo_InvalidateInfo_sPool_;
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView_AttachInfo_InvalidateInfo, sPool_, RepackagedAndroidUtilPools_SynchronizedPool *)

#define RepackagedAndroidViewView_ScrollabilityCache_OFF 0
#define RepackagedAndroidViewView_ScrollabilityCache_ON 1
#define RepackagedAndroidViewView_ScrollabilityCache_FADING 2

/**
 @brief <p>ScrollabilityCache holds various fields used by a View when scrolling is supported.
 This avoids keeping too many unused fields in most instances of View.</p>
 */
@interface RepackagedAndroidViewView_ScrollabilityCache : NSObject < JavaLangRunnable > {
 @public
  jboolean fadeScrollBars_;
  jint fadingEdgeLength_;
  jint scrollBarDefaultDelayBeforeFade_;
  jint scrollBarFadeDuration_;
  jint scrollBarSize_;
  RepackagedAndroidWidgetScrollBarDrawable *scrollBar_;
  IOSFloatArray *interpolatorValues_;
  RepackagedAndroidViewView *host_;
  RepackagedAndroidGraphicsPaint *paint_;
  RepackagedAndroidGraphicsMatrix *matrix_;
  RepackagedAndroidGraphicsShader *shader_;
  RepackagedAndroidGraphicsInterpolator *scrollBarInterpolator_;
  /**
   @brief When fading should start.
   This time moves into the future every time a new scroll happens. Measured based on SystemClock.uptimeMillis()
   */
  jlong fadeStartTime_;
  /**
   @brief The current state of the scrollbars: ON, OFF, or FADING
   */
  jint state_;
  jint mLastColor_;
}

- (instancetype)initWithRepackagedAndroidViewViewConfiguration:(RepackagedAndroidViewViewConfiguration *)configuration
                                 withRepackagedAndroidViewView:(RepackagedAndroidViewView *)host;

- (void)setFadeColorWithInt:(jint)color;

- (void)run;

@end

J2OBJC_STATIC_INIT(RepackagedAndroidViewView_ScrollabilityCache)

J2OBJC_FIELD_SETTER(RepackagedAndroidViewView_ScrollabilityCache, scrollBar_, RepackagedAndroidWidgetScrollBarDrawable *)
J2OBJC_FIELD_SETTER(RepackagedAndroidViewView_ScrollabilityCache, interpolatorValues_, IOSFloatArray *)
J2OBJC_FIELD_SETTER(RepackagedAndroidViewView_ScrollabilityCache, host_, RepackagedAndroidViewView *)
J2OBJC_FIELD_SETTER(RepackagedAndroidViewView_ScrollabilityCache, paint_, RepackagedAndroidGraphicsPaint *)
J2OBJC_FIELD_SETTER(RepackagedAndroidViewView_ScrollabilityCache, matrix_, RepackagedAndroidGraphicsMatrix *)
J2OBJC_FIELD_SETTER(RepackagedAndroidViewView_ScrollabilityCache, shader_, RepackagedAndroidGraphicsShader *)
J2OBJC_FIELD_SETTER(RepackagedAndroidViewView_ScrollabilityCache, scrollBarInterpolator_, RepackagedAndroidGraphicsInterpolator *)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView_ScrollabilityCache, OFF, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView_ScrollabilityCache, ON, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView_ScrollabilityCache, FADING, jint)

static IOSFloatArray *RepackagedAndroidViewView_ScrollabilityCache_OPAQUE_;
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView_ScrollabilityCache, OPAQUE_, IOSFloatArray *)

static IOSFloatArray *RepackagedAndroidViewView_ScrollabilityCache_TRANSPARENT_;
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView_ScrollabilityCache, TRANSPARENT_, IOSFloatArray *)

__attribute__((unused)) static void RepackagedAndroidViewView_ScrollabilityCache_initWithRepackagedAndroidViewViewConfiguration_withRepackagedAndroidViewView_(RepackagedAndroidViewView_ScrollabilityCache *self, RepackagedAndroidViewViewConfiguration *configuration, RepackagedAndroidViewView *host);

__attribute__((unused)) static RepackagedAndroidViewView_ScrollabilityCache *new_RepackagedAndroidViewView_ScrollabilityCache_initWithRepackagedAndroidViewViewConfiguration_withRepackagedAndroidViewView_(RepackagedAndroidViewViewConfiguration *configuration, RepackagedAndroidViewView *host) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(RepackagedAndroidViewView_ScrollabilityCache)

/**
 @brief Resuable callback for sending AccessibilityEvent#TYPE_VIEW_SCROLLED accessibility event.
 */
@interface RepackagedAndroidViewView_SendViewScrolledAccessibilityEvent : NSObject < JavaLangRunnable > {
 @public
  RepackagedAndroidViewView *this$0_;
  jboolean mIsPending_;
}

- (void)run;

- (instancetype)initWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(RepackagedAndroidViewView_SendViewScrolledAccessibilityEvent)

J2OBJC_FIELD_SETTER(RepackagedAndroidViewView_SendViewScrolledAccessibilityEvent, this$0_, RepackagedAndroidViewView *)

__attribute__((unused)) static void RepackagedAndroidViewView_SendViewScrolledAccessibilityEvent_initWithRepackagedAndroidViewView_(RepackagedAndroidViewView_SendViewScrolledAccessibilityEvent *self, RepackagedAndroidViewView *outer$);

__attribute__((unused)) static RepackagedAndroidViewView_SendViewScrolledAccessibilityEvent *new_RepackagedAndroidViewView_SendViewScrolledAccessibilityEvent_initWithRepackagedAndroidViewView_(RepackagedAndroidViewView *outer$) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(RepackagedAndroidViewView_SendViewScrolledAccessibilityEvent)

@interface RepackagedAndroidViewView_MatchIdPredicate : NSObject < RepackagedComAndroidInternalUtilPredicate > {
 @public
  jint mId_;
}

- (jboolean)applyWithId:(RepackagedAndroidViewView *)view;

- (instancetype)initWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(RepackagedAndroidViewView_MatchIdPredicate)

__attribute__((unused)) static void RepackagedAndroidViewView_MatchIdPredicate_initWithRepackagedAndroidViewView_(RepackagedAndroidViewView_MatchIdPredicate *self, RepackagedAndroidViewView *outer$);

__attribute__((unused)) static RepackagedAndroidViewView_MatchIdPredicate *new_RepackagedAndroidViewView_MatchIdPredicate_initWithRepackagedAndroidViewView_(RepackagedAndroidViewView *outer$) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(RepackagedAndroidViewView_MatchIdPredicate)

@interface RepackagedAndroidViewView_MatchLabelForPredicate : NSObject < RepackagedComAndroidInternalUtilPredicate > {
 @public
  jint mLabeledId_;
}

- (jboolean)applyWithId:(RepackagedAndroidViewView *)view;

- (instancetype)initWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(RepackagedAndroidViewView_MatchLabelForPredicate)

__attribute__((unused)) static void RepackagedAndroidViewView_MatchLabelForPredicate_initWithRepackagedAndroidViewView_(RepackagedAndroidViewView_MatchLabelForPredicate *self, RepackagedAndroidViewView *outer$);

__attribute__((unused)) static RepackagedAndroidViewView_MatchLabelForPredicate *new_RepackagedAndroidViewView_MatchLabelForPredicate_initWithRepackagedAndroidViewView_(RepackagedAndroidViewView *outer$) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(RepackagedAndroidViewView_MatchLabelForPredicate)

@interface RepackagedAndroidViewView_SendViewStateChangedAccessibilityEvent () {
 @public
  RepackagedAndroidViewView *this$0_;
  jint mChangeTypes_;
  jboolean mPosted_;
  jboolean mPostedWithDelay_;
  jlong mLastEventTimeMillis_;
}

@end

J2OBJC_FIELD_SETTER(RepackagedAndroidViewView_SendViewStateChangedAccessibilityEvent, this$0_, RepackagedAndroidViewView *)

@interface RepackagedAndroidViewView_$13 : NSObject < RepackagedComAndroidInternalUtilPredicate > {
 @public
  jint val$id_;
}

- (jboolean)applyWithId:(RepackagedAndroidViewView *)t;

- (instancetype)initWithInt:(jint)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RepackagedAndroidViewView_$13)

__attribute__((unused)) static void RepackagedAndroidViewView_$13_initWithInt_(RepackagedAndroidViewView_$13 *self, jint capture$0);

__attribute__((unused)) static RepackagedAndroidViewView_$13 *new_RepackagedAndroidViewView_$13_initWithInt_(jint capture$0) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(RepackagedAndroidViewView_$13)

@interface RepackagedAndroidViewView_$1 : RepackagedAndroidUtilFloatProperty

- (void)setValueWithId:(RepackagedAndroidViewView *)object
             withFloat:(jfloat)value;

- (JavaLangFloat *)getWithId:(RepackagedAndroidViewView *)object;

- (instancetype)initWithNSString:(NSString *)arg$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RepackagedAndroidViewView_$1)

__attribute__((unused)) static void RepackagedAndroidViewView_$1_initWithNSString_(RepackagedAndroidViewView_$1 *self, NSString *arg$0);

__attribute__((unused)) static RepackagedAndroidViewView_$1 *new_RepackagedAndroidViewView_$1_initWithNSString_(NSString *arg$0) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(RepackagedAndroidViewView_$1)

@interface RepackagedAndroidViewView_$2 : RepackagedAndroidUtilFloatProperty

- (void)setValueWithId:(RepackagedAndroidViewView *)object
             withFloat:(jfloat)value;

- (JavaLangFloat *)getWithId:(RepackagedAndroidViewView *)object;

- (instancetype)initWithNSString:(NSString *)arg$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RepackagedAndroidViewView_$2)

__attribute__((unused)) static void RepackagedAndroidViewView_$2_initWithNSString_(RepackagedAndroidViewView_$2 *self, NSString *arg$0);

__attribute__((unused)) static RepackagedAndroidViewView_$2 *new_RepackagedAndroidViewView_$2_initWithNSString_(NSString *arg$0) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(RepackagedAndroidViewView_$2)

@interface RepackagedAndroidViewView_$3 : RepackagedAndroidUtilFloatProperty

- (void)setValueWithId:(RepackagedAndroidViewView *)object
             withFloat:(jfloat)value;

- (JavaLangFloat *)getWithId:(RepackagedAndroidViewView *)object;

- (instancetype)initWithNSString:(NSString *)arg$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RepackagedAndroidViewView_$3)

__attribute__((unused)) static void RepackagedAndroidViewView_$3_initWithNSString_(RepackagedAndroidViewView_$3 *self, NSString *arg$0);

__attribute__((unused)) static RepackagedAndroidViewView_$3 *new_RepackagedAndroidViewView_$3_initWithNSString_(NSString *arg$0) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(RepackagedAndroidViewView_$3)

@interface RepackagedAndroidViewView_$4 : RepackagedAndroidUtilFloatProperty

- (void)setValueWithId:(RepackagedAndroidViewView *)object
             withFloat:(jfloat)value;

- (JavaLangFloat *)getWithId:(RepackagedAndroidViewView *)object;

- (instancetype)initWithNSString:(NSString *)arg$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RepackagedAndroidViewView_$4)

__attribute__((unused)) static void RepackagedAndroidViewView_$4_initWithNSString_(RepackagedAndroidViewView_$4 *self, NSString *arg$0);

__attribute__((unused)) static RepackagedAndroidViewView_$4 *new_RepackagedAndroidViewView_$4_initWithNSString_(NSString *arg$0) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(RepackagedAndroidViewView_$4)

@interface RepackagedAndroidViewView_$5 : RepackagedAndroidUtilFloatProperty

- (void)setValueWithId:(RepackagedAndroidViewView *)object
             withFloat:(jfloat)value;

- (JavaLangFloat *)getWithId:(RepackagedAndroidViewView *)object;

- (instancetype)initWithNSString:(NSString *)arg$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RepackagedAndroidViewView_$5)

__attribute__((unused)) static void RepackagedAndroidViewView_$5_initWithNSString_(RepackagedAndroidViewView_$5 *self, NSString *arg$0);

__attribute__((unused)) static RepackagedAndroidViewView_$5 *new_RepackagedAndroidViewView_$5_initWithNSString_(NSString *arg$0) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(RepackagedAndroidViewView_$5)

@interface RepackagedAndroidViewView_$6 : RepackagedAndroidUtilFloatProperty

- (void)setValueWithId:(RepackagedAndroidViewView *)object
             withFloat:(jfloat)value;

- (JavaLangFloat *)getWithId:(RepackagedAndroidViewView *)object;

- (instancetype)initWithNSString:(NSString *)arg$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RepackagedAndroidViewView_$6)

__attribute__((unused)) static void RepackagedAndroidViewView_$6_initWithNSString_(RepackagedAndroidViewView_$6 *self, NSString *arg$0);

__attribute__((unused)) static RepackagedAndroidViewView_$6 *new_RepackagedAndroidViewView_$6_initWithNSString_(NSString *arg$0) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(RepackagedAndroidViewView_$6)

@interface RepackagedAndroidViewView_$7 : RepackagedAndroidUtilFloatProperty

- (void)setValueWithId:(RepackagedAndroidViewView *)object
             withFloat:(jfloat)value;

- (JavaLangFloat *)getWithId:(RepackagedAndroidViewView *)object;

- (instancetype)initWithNSString:(NSString *)arg$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RepackagedAndroidViewView_$7)

__attribute__((unused)) static void RepackagedAndroidViewView_$7_initWithNSString_(RepackagedAndroidViewView_$7 *self, NSString *arg$0);

__attribute__((unused)) static RepackagedAndroidViewView_$7 *new_RepackagedAndroidViewView_$7_initWithNSString_(NSString *arg$0) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(RepackagedAndroidViewView_$7)

@interface RepackagedAndroidViewView_$8 : RepackagedAndroidUtilFloatProperty

- (void)setValueWithId:(RepackagedAndroidViewView *)object
             withFloat:(jfloat)value;

- (JavaLangFloat *)getWithId:(RepackagedAndroidViewView *)object;

- (instancetype)initWithNSString:(NSString *)arg$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RepackagedAndroidViewView_$8)

__attribute__((unused)) static void RepackagedAndroidViewView_$8_initWithNSString_(RepackagedAndroidViewView_$8 *self, NSString *arg$0);

__attribute__((unused)) static RepackagedAndroidViewView_$8 *new_RepackagedAndroidViewView_$8_initWithNSString_(NSString *arg$0) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(RepackagedAndroidViewView_$8)

@interface RepackagedAndroidViewView_$9 : RepackagedAndroidUtilFloatProperty

- (void)setValueWithId:(RepackagedAndroidViewView *)object
             withFloat:(jfloat)value;

- (JavaLangFloat *)getWithId:(RepackagedAndroidViewView *)object;

- (instancetype)initWithNSString:(NSString *)arg$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RepackagedAndroidViewView_$9)

__attribute__((unused)) static void RepackagedAndroidViewView_$9_initWithNSString_(RepackagedAndroidViewView_$9 *self, NSString *arg$0);

__attribute__((unused)) static RepackagedAndroidViewView_$9 *new_RepackagedAndroidViewView_$9_initWithNSString_(NSString *arg$0) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(RepackagedAndroidViewView_$9)

@interface RepackagedAndroidViewView_$10 : RepackagedAndroidUtilFloatProperty

- (void)setValueWithId:(RepackagedAndroidViewView *)object
             withFloat:(jfloat)value;

- (JavaLangFloat *)getWithId:(RepackagedAndroidViewView *)object;

- (instancetype)initWithNSString:(NSString *)arg$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RepackagedAndroidViewView_$10)

__attribute__((unused)) static void RepackagedAndroidViewView_$10_initWithNSString_(RepackagedAndroidViewView_$10 *self, NSString *arg$0);

__attribute__((unused)) static RepackagedAndroidViewView_$10 *new_RepackagedAndroidViewView_$10_initWithNSString_(NSString *arg$0) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(RepackagedAndroidViewView_$10)

@interface RepackagedAndroidViewView_$11 : RepackagedAndroidUtilFloatProperty

- (void)setValueWithId:(RepackagedAndroidViewView *)object
             withFloat:(jfloat)value;

- (JavaLangFloat *)getWithId:(RepackagedAndroidViewView *)object;

- (instancetype)initWithNSString:(NSString *)arg$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RepackagedAndroidViewView_$11)

__attribute__((unused)) static void RepackagedAndroidViewView_$11_initWithNSString_(RepackagedAndroidViewView_$11 *self, NSString *arg$0);

__attribute__((unused)) static RepackagedAndroidViewView_$11 *new_RepackagedAndroidViewView_$11_initWithNSString_(NSString *arg$0) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(RepackagedAndroidViewView_$11)

@interface RepackagedAndroidViewView_$12 : RepackagedAndroidUtilFloatProperty

- (void)setValueWithId:(RepackagedAndroidViewView *)object
             withFloat:(jfloat)value;

- (JavaLangFloat *)getWithId:(RepackagedAndroidViewView *)object;

- (instancetype)initWithNSString:(NSString *)arg$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RepackagedAndroidViewView_$12)

__attribute__((unused)) static void RepackagedAndroidViewView_$12_initWithNSString_(RepackagedAndroidViewView_$12 *self, NSString *arg$0);

__attribute__((unused)) static RepackagedAndroidViewView_$12 *new_RepackagedAndroidViewView_$12_initWithNSString_(NSString *arg$0) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(RepackagedAndroidViewView_$12)

J2OBJC_INITIALIZED_DEFN(RepackagedAndroidViewView)

NSString *RepackagedAndroidViewView_VIEW_LOG_TAG_ = 
#line 712
@"View";
NSString *RepackagedAndroidViewView_DEBUG_LAYOUT_PROPERTY_ = 
#line 719
@"debug.layout";
jboolean RepackagedAndroidViewView_mDebugViewAttributes_ = 
#line 726
NO;
jboolean RepackagedAndroidViewView_sUseZeroUnspecifiedMeasureSpec_ = 
#line 747
NO;
IOSIntArray *RepackagedAndroidViewView_EMPTY_STATE_SET_;
IOSIntArray *RepackagedAndroidViewView_ENABLED_STATE_SET_;
IOSIntArray *RepackagedAndroidViewView_FOCUSED_STATE_SET_;
IOSIntArray *RepackagedAndroidViewView_SELECTED_STATE_SET_;
IOSIntArray *RepackagedAndroidViewView_PRESSED_STATE_SET_;
IOSIntArray *RepackagedAndroidViewView_WINDOW_FOCUSED_STATE_SET_;
IOSIntArray *RepackagedAndroidViewView_ENABLED_FOCUSED_STATE_SET_;
IOSIntArray *RepackagedAndroidViewView_ENABLED_SELECTED_STATE_SET_;
IOSIntArray *RepackagedAndroidViewView_ENABLED_WINDOW_FOCUSED_STATE_SET_;
IOSIntArray *RepackagedAndroidViewView_FOCUSED_SELECTED_STATE_SET_;
IOSIntArray *RepackagedAndroidViewView_FOCUSED_WINDOW_FOCUSED_STATE_SET_;
IOSIntArray *RepackagedAndroidViewView_SELECTED_WINDOW_FOCUSED_STATE_SET_;
IOSIntArray *RepackagedAndroidViewView_ENABLED_FOCUSED_SELECTED_STATE_SET_;
IOSIntArray *RepackagedAndroidViewView_ENABLED_FOCUSED_WINDOW_FOCUSED_STATE_SET_;
IOSIntArray *RepackagedAndroidViewView_ENABLED_SELECTED_WINDOW_FOCUSED_STATE_SET_;
IOSIntArray *RepackagedAndroidViewView_FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET_;
IOSIntArray *RepackagedAndroidViewView_ENABLED_FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET_;
IOSIntArray *RepackagedAndroidViewView_PRESSED_WINDOW_FOCUSED_STATE_SET_;
IOSIntArray *RepackagedAndroidViewView_PRESSED_SELECTED_STATE_SET_;
IOSIntArray *RepackagedAndroidViewView_PRESSED_SELECTED_WINDOW_FOCUSED_STATE_SET_;
IOSIntArray *RepackagedAndroidViewView_PRESSED_FOCUSED_STATE_SET_;
IOSIntArray *RepackagedAndroidViewView_PRESSED_FOCUSED_WINDOW_FOCUSED_STATE_SET_;
IOSIntArray *RepackagedAndroidViewView_PRESSED_FOCUSED_SELECTED_STATE_SET_;
IOSIntArray *RepackagedAndroidViewView_PRESSED_FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET_;
IOSIntArray *RepackagedAndroidViewView_PRESSED_ENABLED_STATE_SET_;
IOSIntArray *RepackagedAndroidViewView_PRESSED_ENABLED_WINDOW_FOCUSED_STATE_SET_;
IOSIntArray *RepackagedAndroidViewView_PRESSED_ENABLED_SELECTED_STATE_SET_;
IOSIntArray *RepackagedAndroidViewView_PRESSED_ENABLED_SELECTED_WINDOW_FOCUSED_STATE_SET_;
IOSIntArray *RepackagedAndroidViewView_PRESSED_ENABLED_FOCUSED_STATE_SET_;
IOSIntArray *RepackagedAndroidViewView_PRESSED_ENABLED_FOCUSED_WINDOW_FOCUSED_STATE_SET_;
IOSIntArray *RepackagedAndroidViewView_PRESSED_ENABLED_FOCUSED_SELECTED_STATE_SET_;
IOSIntArray *RepackagedAndroidViewView_PRESSED_ENABLED_FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET_;
JavaLangThreadLocal *RepackagedAndroidViewView_sThreadLocal_;
RepackagedAndroidUtilProperty *RepackagedAndroidViewView_ALPHA_;
RepackagedAndroidUtilProperty *RepackagedAndroidViewView_TRANSLATION_X_;
RepackagedAndroidUtilProperty *RepackagedAndroidViewView_TRANSLATION_Y_;
RepackagedAndroidUtilProperty *RepackagedAndroidViewView_TRANSLATION_Z_;
RepackagedAndroidUtilProperty *RepackagedAndroidViewView_X_;
RepackagedAndroidUtilProperty *RepackagedAndroidViewView_Y_;
RepackagedAndroidUtilProperty *RepackagedAndroidViewView_Z_;
RepackagedAndroidUtilProperty *RepackagedAndroidViewView_ROTATION_;
RepackagedAndroidUtilProperty *RepackagedAndroidViewView_ROTATION_X_;
RepackagedAndroidUtilProperty *RepackagedAndroidViewView_ROTATION_Y_;
RepackagedAndroidUtilProperty *RepackagedAndroidViewView_SCALE_X_;
RepackagedAndroidUtilProperty *RepackagedAndroidViewView_SCALE_Y_;


#line 705
@implementation RepackagedAndroidViewView


#line 3781
- (instancetype)initWithRepackagedAndroidContentContext:(id<RepackagedAndroidContentContext>)context {
  RepackagedAndroidViewView_initWithRepackagedAndroidContentContext_(self, context);
  return self;
}


#line 3838
- (instancetype)initWithRepackagedAndroidContentContext:(id<RepackagedAndroidContentContext>)context
                  withRepackagedAndroidUtilAttributeSet:(id<RepackagedAndroidUtilAttributeSet>)attrs {
  RepackagedAndroidViewView_initWithRepackagedAndroidContentContext_withRepackagedAndroidUtilAttributeSet_(self, context, attrs);
  return self;
}


#line 3859
- (instancetype)initWithRepackagedAndroidContentContext:(id<RepackagedAndroidContentContext>)context
                  withRepackagedAndroidUtilAttributeSet:(id<RepackagedAndroidUtilAttributeSet>)attrs
                                                withInt:(jint)defStyleAttr {
  RepackagedAndroidViewView_initWithRepackagedAndroidContentContext_withRepackagedAndroidUtilAttributeSet_withInt_(self, context, attrs, defStyleAttr);
  return self;
}


#line 3896
- (instancetype)initWithRepackagedAndroidContentContext:(id<RepackagedAndroidContentContext>)context
                  withRepackagedAndroidUtilAttributeSet:(id<RepackagedAndroidUtilAttributeSet>)attrs
                                                withInt:(jint)defStyleAttr
                                                withInt:(jint)defStyleRes {
  RepackagedAndroidViewView_initWithRepackagedAndroidContentContext_withRepackagedAndroidUtilAttributeSet_withInt_withInt_(self, context, attrs, defStyleAttr, defStyleRes);
  return self;
}


#line 4493
- (instancetype)init {
  RepackagedAndroidViewView_init(self);
  return self;
}

+ (RepackagedAndroidUtilSparseArray *)getAttributeMap {
  return RepackagedAndroidViewView_getAttributeMap();
}


#line 4505
- (void)saveAttributeDataWithRepackagedAndroidUtilAttributeSet:(id<RepackagedAndroidUtilAttributeSet>)attrs
                     withRepackagedAndroidContentResTypedArray:(id<RepackagedAndroidContentResTypedArray>)t {
  RepackagedAndroidViewView_saveAttributeDataWithRepackagedAndroidUtilAttributeSet_withRepackagedAndroidContentResTypedArray_(self, attrs, t);
}


#line 4556
- (NSString *)description {
  JavaLangStringBuilder *out = new_JavaLangStringBuilder_initWithInt_(128);
  (void) [out appendWithNSString:[[self getClass] getName]];
  (void) [out appendWithChar:'{'];
  (void) [out appendWithNSString:JavaLangInteger_toHexStringWithInt_(JavaLangSystem_identityHashCodeWithId_(self))];
  (void) [out appendWithChar:' '];
  switch (mViewFlags_ & RepackagedAndroidViewView_VISIBILITY_MASK) {
    case RepackagedAndroidViewView_VISIBLE:
    
#line 4563
    (void) [out appendWithChar:'V'];
    
#line 4563
    break;
    case RepackagedAndroidViewView_INVISIBLE:
    
#line 4564
    (void) [out appendWithChar:'I'];
    
#line 4564
    break;
    case RepackagedAndroidViewView_GONE:
    
#line 4565
    (void) [out appendWithChar:'G'];
    
#line 4565
    break;
    default:
    
#line 4566
    (void) [out appendWithChar:'.'];
    
#line 4566
    break;
  }
  (void) [out appendWithChar:(mViewFlags_ & RepackagedAndroidViewView_FOCUSABLE_MASK) == RepackagedAndroidViewView_FOCUSABLE ? 'F' : '.'];
  (void) [out appendWithChar:(mViewFlags_ & RepackagedAndroidViewView_ENABLED_MASK) == RepackagedAndroidViewView_ENABLED ? 'E' : '.'];
  (void) [out appendWithChar:(mViewFlags_ & RepackagedAndroidViewView_DRAW_MASK) == RepackagedAndroidViewView_WILL_NOT_DRAW ? '.' : 'D'];
  (void) [out appendWithChar:(mViewFlags_ & RepackagedAndroidViewView_SCROLLBARS_HORIZONTAL) != 0 ? 'H' : '.'];
  (void) [out appendWithChar:(mViewFlags_ & RepackagedAndroidViewView_SCROLLBARS_VERTICAL) != 0 ? 'V' : '.'];
  (void) [out appendWithChar:(mViewFlags_ & RepackagedAndroidViewView_CLICKABLE) != 0 ? 'C' : '.'];
  (void) [out appendWithChar:(mViewFlags_ & RepackagedAndroidViewView_LONG_CLICKABLE) != 0 ? 'L' : '.'];
  (void) [out appendWithChar:(mViewFlags_ & RepackagedAndroidViewView_CONTEXT_CLICKABLE) != 0 ? 'X' : '.'];
  (void) [out appendWithChar:' '];
  (void) [out appendWithChar:(mPrivateFlags_ & RepackagedAndroidViewView_PFLAG_IS_ROOT_NAMESPACE) != 0 ? 'R' : '.'];
  (void) [out appendWithChar:(mPrivateFlags_ & RepackagedAndroidViewView_PFLAG_FOCUSED) != 0 ? 'F' : '.'];
  (void) [out appendWithChar:(mPrivateFlags_ & RepackagedAndroidViewView_PFLAG_SELECTED) != 0 ? 'S' : '.'];
  if ((mPrivateFlags_ & RepackagedAndroidViewView_PFLAG_PREPRESSED) != 0) {
    (void) [out appendWithChar:'p'];
  }
  else {
    
#line 4583
    (void) [out appendWithChar:(mPrivateFlags_ & RepackagedAndroidViewView_PFLAG_PRESSED) != 0 ? 'P' : '.'];
  }
  (void) [out appendWithChar:(mPrivateFlags_ & RepackagedAndroidViewView_PFLAG_HOVERED) != 0 ? 'H' : '.'];
  (void) [out appendWithChar:(mPrivateFlags_ & RepackagedAndroidViewView_PFLAG_ACTIVATED) != 0 ? 'A' : '.'];
  (void) [out appendWithChar:(mPrivateFlags_ & RepackagedAndroidViewView_PFLAG_INVALIDATED) != 0 ? 'I' : '.'];
  (void) [out appendWithChar:(mPrivateFlags_ & RepackagedAndroidViewView_PFLAG_DIRTY_MASK) != 0 ? 'D' : '.'];
  (void) [out appendWithChar:' '];
  (void) [out appendWithInt:mLeft_];
  (void) [out appendWithChar:','];
  (void) [out appendWithInt:mTop_];
  (void) [out appendWithChar:'-'];
  (void) [out appendWithInt:mRight_];
  (void) [out appendWithChar:','];
  (void) [out appendWithInt:mBottom_];
  jint id_ = [self getId];
  if (id_ != RepackagedAndroidViewView_NO_ID) {
    (void) [out appendWithNSString:@" #"];
    (void) [out appendWithNSString:JavaLangInteger_toHexStringWithInt_(id_)];
    RepackagedAndroidContentResResources *r = mResources_;
    if (id_ > 0 && RepackagedAndroidContentResResources_resourceHasPackageWithInt_(id_) && r != nil) {
      @try {
        NSString *pkgname;
        switch (id_ & (jint) 0xff000000) {
          case (jint) 0x7f000000:
          pkgname = @"app";
          break;
          case (jint) 0x01000000:
          pkgname = @"android";
          break;
          default:
          pkgname = [r getResourcePackageNameWithInt:id_];
          break;
        }
        NSString *typename_ = [r getResourceTypeNameWithInt:id_];
        NSString *entryname = [r getResourceEntryNameWithInt:id_];
        (void) [out appendWithNSString:@" "];
        (void) [out appendWithNSString:pkgname];
        (void) [out appendWithNSString:@":"];
        (void) [out appendWithNSString:typename_];
        (void) [out appendWithNSString:@"/"];
        (void) [out appendWithNSString:entryname];
      }
      @catch (
#line 4624
      RepackagedAndroidContentResResources_NotFoundException *e) {
      }
    }
  }
  (void) [out appendWithNSString:@"}"];
  return [out description];
}


#line 4645
- (void)initializeFadingEdgeWithRepackagedAndroidContentResTypedArray:(id<RepackagedAndroidContentResTypedArray>)a {
  
#line 4652
  id<RepackagedAndroidContentResTypedArray> arr = [((id<RepackagedAndroidContentContext>) nil_chk(mContext_)) obtainStyledAttributesWithIntArray:RepackagedComAndroidInternalR_styleable_get_View_()];
  
#line 4654
  [self initializeFadingEdgeInternalWithRepackagedAndroidContentResTypedArray:arr];
  
#line 4656
  [((id<RepackagedAndroidContentResTypedArray>) nil_chk(arr)) recycle];
}


#line 4671
- (void)initializeFadingEdgeInternalWithRepackagedAndroidContentResTypedArray:(id<RepackagedAndroidContentResTypedArray>)a {
  RepackagedAndroidViewView_initScrollCache(self);
  
#line 4674
  ((RepackagedAndroidViewView_ScrollabilityCache *) nil_chk(mScrollCache_))->fadingEdgeLength_ = [((id<RepackagedAndroidContentResTypedArray>) nil_chk(a)) getDimensionPixelSizeWithInt:
#line 4675
  RepackagedComAndroidInternalR_styleable_View_fadingEdgeLength withInt:
#line 4676
  [((RepackagedAndroidViewViewConfiguration *) nil_chk(RepackagedAndroidViewViewConfiguration_getWithRepackagedAndroidContentContext_(mContext_))) getScaledFadingEdgeLength]];
}


#line 4687
- (jint)getVerticalFadingEdgeLength {
  if ([self isVerticalFadingEdgeEnabled]) {
    RepackagedAndroidViewView_ScrollabilityCache *cache = mScrollCache_;
    if (cache != nil) {
      return cache->fadingEdgeLength_;
    }
  }
  return 0;
}


#line 4707
- (void)setFadingEdgeLengthWithInt:(jint)length {
  RepackagedAndroidViewView_initScrollCache(self);
  ((RepackagedAndroidViewView_ScrollabilityCache *) nil_chk(mScrollCache_))->fadingEdgeLength_ = length;
}


#line 4720
- (jint)getHorizontalFadingEdgeLength {
  if ([self isHorizontalFadingEdgeEnabled]) {
    RepackagedAndroidViewView_ScrollabilityCache *cache = mScrollCache_;
    if (cache != nil) {
      return cache->fadingEdgeLength_;
    }
  }
  return 0;
}


#line 4736
- (jint)getVerticalScrollbarWidth {
  RepackagedAndroidViewView_ScrollabilityCache *cache = mScrollCache_;
  if (cache != nil) {
    RepackagedAndroidWidgetScrollBarDrawable *scrollBar = cache->scrollBar_;
    if (scrollBar != nil) {
      jint size = [scrollBar getSizeWithBoolean:YES];
      if (size <= 0) {
        size = cache->scrollBarSize_;
      }
      return size;
    }
    return 0;
  }
  return 0;
}


#line 4758
- (jint)getHorizontalScrollbarHeight {
  RepackagedAndroidViewView_ScrollabilityCache *cache = mScrollCache_;
  if (cache != nil) {
    RepackagedAndroidWidgetScrollBarDrawable *scrollBar = cache->scrollBar_;
    if (scrollBar != nil) {
      jint size = [scrollBar getSizeWithBoolean:NO];
      if (size <= 0) {
        size = cache->scrollBarSize_;
      }
      return size;
    }
    return 0;
  }
  return 0;
}


#line 4787
- (void)initializeScrollbarsWithRepackagedAndroidContentResTypedArray:(id<RepackagedAndroidContentResTypedArray>)a {
  
#line 4792
  id<RepackagedAndroidContentResTypedArray> arr = [((id<RepackagedAndroidContentContext>) nil_chk(mContext_)) obtainStyledAttributesWithIntArray:RepackagedComAndroidInternalR_styleable_get_View_()];
  
#line 4794
  [self initializeScrollbarsInternalWithRepackagedAndroidContentResTypedArray:arr];
  
#line 4797
  [((id<RepackagedAndroidContentResTypedArray>) nil_chk(arr)) recycle];
}


#line 4812
- (void)initializeScrollbarsInternalWithRepackagedAndroidContentResTypedArray:(id<RepackagedAndroidContentResTypedArray>)a {
  RepackagedAndroidViewView_initScrollCache(self);
  
#line 4815
  RepackagedAndroidViewView_ScrollabilityCache *scrollabilityCache = mScrollCache_;
  
#line 4817
  if (((RepackagedAndroidViewView_ScrollabilityCache *) nil_chk(scrollabilityCache))->scrollBar_ == nil) {
    scrollabilityCache->scrollBar_ = new_RepackagedAndroidWidgetScrollBarDrawable_init();
    [scrollabilityCache->scrollBar_ setCallbackWithRepackagedAndroidViewView:self];
    [scrollabilityCache->scrollBar_ setStateWithIntArray:RepackagedAndroidViewView_getDrawableState(self)];
  }
  
#line 4823
  jboolean fadeScrollbars = [((id<RepackagedAndroidContentResTypedArray>) nil_chk(a)) getBooleanWithInt:RepackagedComAndroidInternalR_styleable_View_fadeScrollbars withBoolean:YES];
  
#line 4825
  if (!fadeScrollbars) {
    scrollabilityCache->state_ = RepackagedAndroidViewView_ScrollabilityCache_ON;
  }
  scrollabilityCache->fadeScrollBars_ = fadeScrollbars;
  
#line 4831
  scrollabilityCache->scrollBarFadeDuration_ = [a getIntWithInt:
#line 4832
  RepackagedComAndroidInternalR_styleable_View_scrollbarFadeDuration withInt:RepackagedAndroidViewViewConfiguration_getScrollBarFadeDuration()];
  
#line 4834
  scrollabilityCache->scrollBarDefaultDelayBeforeFade_ = [a getIntWithInt:
#line 4835
  RepackagedComAndroidInternalR_styleable_View_scrollbarDefaultDelayBeforeFade withInt:RepackagedAndroidViewViewConfiguration_getScrollDefaultDelay()];
  
#line 4839
  scrollabilityCache->scrollBarSize_ = [a getDimensionPixelSizeWithInt:
#line 4840
  RepackagedComAndroidInternalR_styleable_View_scrollbarSize withInt:
#line 4841
  [((RepackagedAndroidViewViewConfiguration *) nil_chk(RepackagedAndroidViewViewConfiguration_getWithRepackagedAndroidContentContext_(mContext_))) getScaledScrollBarSize]];
  
#line 4843
  RepackagedAndroidGraphicsDrawableDrawable *track = [a getDrawableWithInt:RepackagedComAndroidInternalR_styleable_View_scrollbarTrackHorizontal];
  [((RepackagedAndroidWidgetScrollBarDrawable *) nil_chk(scrollabilityCache->scrollBar_)) setHorizontalTrackDrawableWithRepackagedAndroidGraphicsDrawableDrawable:track];
  
#line 4846
  RepackagedAndroidGraphicsDrawableDrawable *thumb = [a getDrawableWithInt:RepackagedComAndroidInternalR_styleable_View_scrollbarThumbHorizontal];
  if (thumb != nil) {
    [scrollabilityCache->scrollBar_ setHorizontalThumbDrawableWithRepackagedAndroidGraphicsDrawableDrawable:thumb];
  }
  
#line 4851
  jboolean alwaysDraw = [a getBooleanWithInt:RepackagedComAndroidInternalR_styleable_View_scrollbarAlwaysDrawHorizontalTrack withBoolean:
#line 4852
  NO];
  if (alwaysDraw) {
    [scrollabilityCache->scrollBar_ setAlwaysDrawHorizontalTrackWithBoolean:YES];
  }
  
#line 4857
  track = [a getDrawableWithInt:RepackagedComAndroidInternalR_styleable_View_scrollbarTrackVertical];
  [scrollabilityCache->scrollBar_ setVerticalTrackDrawableWithRepackagedAndroidGraphicsDrawableDrawable:track];
  
#line 4860
  thumb = [a getDrawableWithInt:RepackagedComAndroidInternalR_styleable_View_scrollbarThumbVertical];
  if (thumb != nil) {
    [scrollabilityCache->scrollBar_ setVerticalThumbDrawableWithRepackagedAndroidGraphicsDrawableDrawable:thumb];
  }
  
#line 4865
  alwaysDraw = [a getBooleanWithInt:RepackagedComAndroidInternalR_styleable_View_scrollbarAlwaysDrawVerticalTrack withBoolean:
#line 4866
  NO];
  if (alwaysDraw) {
    [scrollabilityCache->scrollBar_ setAlwaysDrawVerticalTrackWithBoolean:YES];
  }
  
#line 4872
  jint layoutDirection = [self getLayoutDirection];
  if (track != nil) {
    [track setLayoutDirectionWithInt:layoutDirection];
  }
  if (thumb != nil) {
    [thumb setLayoutDirectionWithInt:layoutDirection];
  }
  
#line 4881
  [self resolvePadding];
}


#line 4884
- (void)initializeScrollIndicatorsInternal {
  RepackagedAndroidViewView_initializeScrollIndicatorsInternal(self);
}


#line 4898
- (void)initScrollCache {
  RepackagedAndroidViewView_initScrollCache(self);
}


#line 4904
- (RepackagedAndroidViewView_ScrollabilityCache *)getScrollCache {
  return RepackagedAndroidViewView_getScrollCache(self);
}


#line 4916
- (void)setVerticalScrollbarPositionWithInt:(jint)position {
  if (mVerticalScrollbarPosition_ != position) {
    mVerticalScrollbarPosition_ = position;
    [self computeOpaqueFlags];
    [self resolvePadding];
  }
}


#line 4928
- (jint)getVerticalScrollbarPosition {
  return mVerticalScrollbarPosition_;
}


#line 4943
- (void)setScrollIndicatorsWithInt:(jint)indicators {
  [self setScrollIndicatorsWithInt:indicators withInt:URShift32(
#line 4945
  RepackagedAndroidViewView_SCROLL_INDICATORS_PFLAG3_MASK, RepackagedAndroidViewView_SCROLL_INDICATORS_TO_PFLAGS3_LSHIFT)];
}


#line 4975
- (void)setScrollIndicatorsWithInt:(jint)indicators
                           withInt:(jint)mask {
  
#line 4977
  LShiftAssignInt(&mask, RepackagedAndroidViewView_SCROLL_INDICATORS_TO_PFLAGS3_LSHIFT);
  mask &= RepackagedAndroidViewView_SCROLL_INDICATORS_PFLAG3_MASK;
  
#line 4981
  LShiftAssignInt(&indicators, RepackagedAndroidViewView_SCROLL_INDICATORS_TO_PFLAGS3_LSHIFT);
  indicators &= mask;
  
#line 4985
  jint updatedFlags = indicators | (mPrivateFlags3_ & ~mask);
  
#line 4987
  if (mPrivateFlags3_ != updatedFlags) {
    mPrivateFlags3_ = updatedFlags;
    
#line 4990
    if (indicators != 0) {
      RepackagedAndroidViewView_initializeScrollIndicatorsInternal(self);
    }
    [self invalidate];
  }
}


#line 5010
- (jint)getScrollIndicators {
  return URShift32((mPrivateFlags3_ & RepackagedAndroidViewView_SCROLL_INDICATORS_PFLAG3_MASK),
#line 5012
  RepackagedAndroidViewView_SCROLL_INDICATORS_TO_PFLAGS3_LSHIFT);
}


#line 5015
- (RepackagedAndroidViewView_ListenerInfo *)getListenerInfo {
  if (mListenerInfo_ != nil) {
    return mListenerInfo_;
  }
  mListenerInfo_ = new_RepackagedAndroidViewView_ListenerInfo_init();
  return mListenerInfo_;
}


#line 5037
- (void)setOnScrollChangeListenerWithRepackagedAndroidViewView_OnScrollChangeListener:(id<RepackagedAndroidViewView_OnScrollChangeListener>)l {
  ((RepackagedAndroidViewView_ListenerInfo *) nil_chk([self getListenerInfo]))->mOnScrollChangeListener_ = l;
}


#line 5046
- (void)setOnFocusChangeListenerWithRepackagedAndroidViewView_OnFocusChangeListener:(id<RepackagedAndroidViewView_OnFocusChangeListener>)l {
  ((RepackagedAndroidViewView_ListenerInfo *) nil_chk([self getListenerInfo]))->mOnFocusChangeListener_ = l;
}


#line 5056
- (void)addOnLayoutChangeListenerWithRepackagedAndroidViewView_OnLayoutChangeListener:(id<RepackagedAndroidViewView_OnLayoutChangeListener>)listener {
  RepackagedAndroidViewView_ListenerInfo *li = [self getListenerInfo];
  if (((RepackagedAndroidViewView_ListenerInfo *) nil_chk(li))->mOnLayoutChangeListeners_ == nil) {
    li->mOnLayoutChangeListeners_ = new_JavaUtilArrayList_init();
  }
  if (![((JavaUtilArrayList *) nil_chk(li->mOnLayoutChangeListeners_)) containsWithId:listener]) {
    [li->mOnLayoutChangeListeners_ addWithId:listener];
  }
}


#line 5071
- (void)removeOnLayoutChangeListenerWithRepackagedAndroidViewView_OnLayoutChangeListener:(id<RepackagedAndroidViewView_OnLayoutChangeListener>)listener {
  RepackagedAndroidViewView_ListenerInfo *li = mListenerInfo_;
  if (li == nil || li->mOnLayoutChangeListeners_ == nil) {
    return;
  }
  [((JavaUtilArrayList *) nil_chk(((RepackagedAndroidViewView_ListenerInfo *) nil_chk(li))->mOnLayoutChangeListeners_)) removeWithId:listener];
}


#line 5089
- (void)addOnAttachStateChangeListenerWithRepackagedAndroidViewView_OnAttachStateChangeListener:(id<RepackagedAndroidViewView_OnAttachStateChangeListener>)listener {
  RepackagedAndroidViewView_ListenerInfo *li = [self getListenerInfo];
  if (((RepackagedAndroidViewView_ListenerInfo *) nil_chk(li))->mOnAttachStateChangeListeners_ == nil) {
    li->mOnAttachStateChangeListeners_ = new_JavaUtilConcurrentCopyOnWriteArrayList_init();
  }
  
#line 5095
  [((JavaUtilConcurrentCopyOnWriteArrayList *) nil_chk(li->mOnAttachStateChangeListeners_)) addWithId:listener];
}


#line 5105
- (void)removeOnAttachStateChangeListenerWithRepackagedAndroidViewView_OnAttachStateChangeListener:(id<RepackagedAndroidViewView_OnAttachStateChangeListener>)listener {
  RepackagedAndroidViewView_ListenerInfo *li = mListenerInfo_;
  if (li == nil || li->mOnAttachStateChangeListeners_ == nil) {
    return;
  }
  [((JavaUtilConcurrentCopyOnWriteArrayList *) nil_chk(((RepackagedAndroidViewView_ListenerInfo *) nil_chk(li))->mOnAttachStateChangeListeners_)) removeWithId:listener];
}


#line 5118
- (id<RepackagedAndroidViewView_OnFocusChangeListener>)getOnFocusChangeListener {
  RepackagedAndroidViewView_ListenerInfo *li = mListenerInfo_;
  return li != nil ? li->mOnFocusChangeListener_ : nil;
}


#line 5131
- (void)setOnClickListenerWithRepackagedAndroidViewView_OnClickListener:(id<RepackagedAndroidViewView_OnClickListener>)l {
  if (![self isClickable]) {
    [self setClickableWithBoolean:YES];
  }
  ((RepackagedAndroidViewView_ListenerInfo *) nil_chk([self getListenerInfo]))->mOnClickListener_ = l;
}


#line 5142
- (jboolean)hasOnClickListeners {
  RepackagedAndroidViewView_ListenerInfo *li = mListenerInfo_;
  return (li != nil && li->mOnClickListener_ != nil);
}


#line 5155
- (void)setOnLongClickListenerWithRepackagedAndroidViewView_OnLongClickListener:(id<RepackagedAndroidViewView_OnLongClickListener>)l {
  if (![self isLongClickable]) {
    [self setLongClickableWithBoolean:YES];
  }
  ((RepackagedAndroidViewView_ListenerInfo *) nil_chk([self getListenerInfo]))->mOnLongClickListener_ = l;
}


#line 5169
- (void)setOnContextClickListenerWithRepackagedAndroidViewView_OnContextClickListener:(id<RepackagedAndroidViewView_OnContextClickListener>)l {
  if (![self isContextClickable]) {
    [self setContextClickableWithBoolean:YES];
  }
  ((RepackagedAndroidViewView_ListenerInfo *) nil_chk([self getListenerInfo]))->mOnContextClickListener_ = l;
}


#line 5183
- (void)setOnCreateContextMenuListenerWithRepackagedAndroidViewView_OnCreateContextMenuListener:(id<RepackagedAndroidViewView_OnCreateContextMenuListener>)l {
  if (![self isLongClickable]) {
    [self setLongClickableWithBoolean:YES];
  }
  ((RepackagedAndroidViewView_ListenerInfo *) nil_chk([self getListenerInfo]))->mOnCreateContextMenuListener_ = l;
}


#line 5198
- (jboolean)performClick {
  jboolean result;
  RepackagedAndroidViewView_ListenerInfo *li = mListenerInfo_;
  if (li != nil && li->mOnClickListener_ != nil) {
    [self playSoundEffectWithInt:RepackagedAndroidViewSoundEffectConstants_CLICK];
    [li->mOnClickListener_ onClickWithRepackagedAndroidViewView:self];
    result = YES;
  }
  else {
    
#line 5206
    result = NO;
  }
  
#line 5209
  [self sendAccessibilityEventWithInt:RepackagedAndroidViewAccessibilityAccessibilityEvent_TYPE_VIEW_CLICKED];
  return result;
}


#line 5221
- (jboolean)callOnClick {
  RepackagedAndroidViewView_ListenerInfo *li = mListenerInfo_;
  if (li != nil && li->mOnClickListener_ != nil) {
    [li->mOnClickListener_ onClickWithRepackagedAndroidViewView:self];
    return YES;
  }
  return NO;
}


#line 5236
- (jboolean)performLongClick {
  [self sendAccessibilityEventWithInt:RepackagedAndroidViewAccessibilityAccessibilityEvent_TYPE_VIEW_LONG_CLICKED];
  
#line 5239
  jboolean handled = NO;
  RepackagedAndroidViewView_ListenerInfo *li = mListenerInfo_;
  if (li != nil && li->mOnLongClickListener_ != nil) {
    handled = [li->mOnLongClickListener_ onLongClickWithRepackagedAndroidViewView:self];
  }
  if (!handled) {
    handled = [self showContextMenu];
  }
  if (handled) {
    [self performHapticFeedbackWithInt:RepackagedAndroidViewHapticFeedbackConstants_LONG_PRESS];
  }
  return handled;
}


#line 5259
- (jboolean)performContextClick {
  [self sendAccessibilityEventWithInt:RepackagedAndroidViewAccessibilityAccessibilityEvent_TYPE_VIEW_CONTEXT_CLICKED];
  
#line 5262
  jboolean handled = NO;
  RepackagedAndroidViewView_ListenerInfo *li = mListenerInfo_;
  if (li != nil && li->mOnContextClickListener_ != nil) {
    handled = [li->mOnContextClickListener_ onContextClickWithRepackagedAndroidViewView:self];
  }
  if (handled) {
    [self performHapticFeedbackWithInt:RepackagedAndroidViewHapticFeedbackConstants_CONTEXT_CLICK];
  }
  return handled;
}


#line 5281
- (jboolean)performButtonActionOnTouchDownWithRepackagedAndroidViewMotionEvent:(RepackagedAndroidViewMotionEvent *)event {
  if ([((RepackagedAndroidViewMotionEvent *) nil_chk(event)) getToolTypeWithInt:0] == RepackagedAndroidViewMotionEvent_get_TOOL_TYPE_MOUSE_() &&
#line 5283
  ([event getButtonState] & RepackagedAndroidViewMotionEvent_BUTTON_SECONDARY) != 0) {
    [self showContextMenuWithFloat:[event getX] withFloat:[event getY] withInt:[event getMetaState]];
    mPrivateFlags_ |= RepackagedAndroidViewView_PFLAG_CANCEL_NEXT_UP_EVENT;
    return YES;
  }
  return NO;
}


#line 5296
- (jboolean)showContextMenu {
  return [((id<RepackagedAndroidViewViewParent>) nil_chk(RepackagedAndroidViewView_getParent(self))) showContextMenuForChildWithRepackagedAndroidViewView:self];
}


#line 5310
- (jboolean)showContextMenuWithFloat:(jfloat)x
                           withFloat:(jfloat)y
                             withInt:(jint)metaState {
  return [self showContextMenu];
}


#line 5323
- (RepackagedAndroidViewActionMode *)startActionModeWithRepackagedAndroidViewActionMode_Callback:(id<RepackagedAndroidViewActionMode_Callback>)callback {
  return [self startActionModeWithRepackagedAndroidViewActionMode_Callback:callback withInt:RepackagedAndroidViewActionMode_get_TYPE_PRIMARY_()];
}


#line 5336
- (RepackagedAndroidViewActionMode *)startActionModeWithRepackagedAndroidViewActionMode_Callback:(id<RepackagedAndroidViewActionMode_Callback>)callback
                                                                                         withInt:(jint)type {
  id<RepackagedAndroidViewViewParent> parent = RepackagedAndroidViewView_getParent(self);
  if (parent == nil) return nil;
  @try {
    return [((id<RepackagedAndroidViewViewParent>) nil_chk(parent)) startActionModeForChildWithRepackagedAndroidViewView:self withRepackagedAndroidViewActionMode_Callback:callback withInt:type];
  }
  @catch (
#line 5341
  JavaLangAbstractMethodError *ame) {
    
#line 5343
    return [((id<RepackagedAndroidViewViewParent>) nil_chk(parent)) startActionModeForChildWithRepackagedAndroidViewView:self withRepackagedAndroidViewActionMode_Callback:callback];
  }
}


#line 5355
- (void)startActivityForResultWithRepackagedAndroidContentIntent:(id<RepackagedAndroidContentIntent>)intent
                                                         withInt:(jint)requestCode {
  mStartActivityRequestWho_ = JreStrcat("$I", @"@android:view:", JavaLangSystem_identityHashCodeWithId_(self));
  [((id<RepackagedAndroidContentContext>) nil_chk(RepackagedAndroidViewView_getContext(self))) startActivityForResultWithNSString:mStartActivityRequestWho_ withRepackagedAndroidContentIntent:intent withInt:requestCode withId:nil];
}


#line 5373
- (jboolean)dispatchActivityResultWithNSString:(NSString *)who
                                       withInt:(jint)requestCode
                                       withInt:(jint)resultCode
            withRepackagedAndroidContentIntent:(id<RepackagedAndroidContentIntent>)data {
  
#line 5375
  if (mStartActivityRequestWho_ != nil && [mStartActivityRequestWho_ isEqual:who]) {
    [self onActivityResultWithInt:requestCode withInt:resultCode withRepackagedAndroidContentIntent:data];
    mStartActivityRequestWho_ = nil;
    return YES;
  }
  return NO;
}


#line 5395
- (void)onActivityResultWithInt:(jint)requestCode
                        withInt:(jint)resultCode
withRepackagedAndroidContentIntent:(id<RepackagedAndroidContentIntent>)data {
}


#line 5405
- (void)setOnKeyListenerWithRepackagedAndroidViewView_OnKeyListener:(id<RepackagedAndroidViewView_OnKeyListener>)l {
  ((RepackagedAndroidViewView_ListenerInfo *) nil_chk([self getListenerInfo]))->mOnKeyListener_ = l;
}


#line 5413
- (void)setOnTouchListenerWithRepackagedAndroidViewView_OnTouchListener:(id<RepackagedAndroidViewView_OnTouchListener>)l {
  ((RepackagedAndroidViewView_ListenerInfo *) nil_chk([self getListenerInfo]))->mOnTouchListener_ = l;
}


#line 5421
- (void)setOnGenericMotionListenerWithRepackagedAndroidViewView_OnGenericMotionListener:(id<RepackagedAndroidViewView_OnGenericMotionListener>)l {
  ((RepackagedAndroidViewView_ListenerInfo *) nil_chk([self getListenerInfo]))->mOnGenericMotionListener_ = l;
}


#line 5429
- (void)setOnHoverListenerWithRepackagedAndroidViewView_OnHoverListener:(id<RepackagedAndroidViewView_OnHoverListener>)l {
  ((RepackagedAndroidViewView_ListenerInfo *) nil_chk([self getListenerInfo]))->mOnHoverListener_ = l;
}


#line 5440
- (void)setOnDragListenerWithRepackagedAndroidViewView_OnDragListener:(id<RepackagedAndroidViewView_OnDragListener>)l {
  ((RepackagedAndroidViewView_ListenerInfo *) nil_chk([self getListenerInfo]))->mOnDragListener_ = l;
}


#line 5459
- (void)handleFocusGainInternalWithInt:(jint)direction
     withRepackagedAndroidGraphicsRect:(RepackagedAndroidGraphicsRect *)previouslyFocusedRect {
  
#line 5464
  if ((mPrivateFlags_ & RepackagedAndroidViewView_PFLAG_FOCUSED) == 0) {
    mPrivateFlags_ |= RepackagedAndroidViewView_PFLAG_FOCUSED;
    
#line 5467
    RepackagedAndroidViewView *oldFocus = (mAttachInfo_ != nil) ? [((RepackagedAndroidViewView *) nil_chk([self getRootView])) findFocus] : nil;
    
#line 5469
    if (mParent_ != nil) {
      [mParent_ requestChildFocusWithRepackagedAndroidViewView:self withRepackagedAndroidViewView:self];
    }
    
#line 5473
    if (mAttachInfo_ != nil) {
      [((RepackagedAndroidViewViewTreeObserver *) nil_chk(mAttachInfo_->mTreeObserver_)) dispatchOnGlobalFocusChangeWithRepackagedAndroidViewView:oldFocus withRepackagedAndroidViewView:self];
    }
    
#line 5477
    [self onFocusChangedWithBoolean:YES withInt:direction withRepackagedAndroidGraphicsRect:previouslyFocusedRect];
    [self refreshDrawableState];
  }
}


#line 5489
- (void)getHotspotBoundsWithRepackagedAndroidGraphicsRect:(RepackagedAndroidGraphicsRect *)outRect {
  RepackagedAndroidGraphicsDrawableDrawable *background = [self getBackground];
  if (background != nil) {
    [background getHotspotBoundsWithRepackagedAndroidGraphicsRect:outRect];
  }
  else {
    
#line 5494
    [self getBoundsOnScreenWithRepackagedAndroidGraphicsRect:outRect];
  }
}


#line 5509
- (jboolean)requestRectangleOnScreenWithRepackagedAndroidGraphicsRect:(RepackagedAndroidGraphicsRect *)rectangle {
  return [self requestRectangleOnScreenWithRepackagedAndroidGraphicsRect:rectangle withBoolean:NO];
}


#line 5528
- (jboolean)requestRectangleOnScreenWithRepackagedAndroidGraphicsRect:(RepackagedAndroidGraphicsRect *)rectangle
                                                          withBoolean:(jboolean)immediate {
  if (mParent_ == nil) {
    return NO;
  }
  
#line 5533
  RepackagedAndroidViewView *child = self;
  
#line 5535
  RepackagedAndroidGraphicsRectF *position = (mAttachInfo_ != nil) ? mAttachInfo_->mTmpTransformRect_ : new_RepackagedAndroidGraphicsRectF_init();
  [position setWithRepackagedAndroidGraphicsRect:rectangle];
  
#line 5538
  id<RepackagedAndroidViewViewParent> parent = mParent_;
  jboolean scrolled = NO;
  while (parent != nil) {
    [((RepackagedAndroidGraphicsRect *) nil_chk(rectangle)) setWithInt:J2ObjCFpToInt(position->left_) withInt:J2ObjCFpToInt(position->top_) withInt:J2ObjCFpToInt(
#line 5542
    position->right_) withInt:J2ObjCFpToInt(position->bottom_)];
    
#line 5544
    scrolled |= [((id<RepackagedAndroidViewViewParent>) nil_chk(parent)) requestChildRectangleOnScreenWithRepackagedAndroidViewView:child withRepackagedAndroidGraphicsRect:
#line 5545
    rectangle withBoolean:immediate];
    
#line 5547
    if (!RepackagedAndroidViewView_hasIdentityMatrix(child)) {
      [((RepackagedAndroidGraphicsMatrix *) nil_chk([child getMatrix])) mapRectWithRepackagedAndroidGraphicsRectF:position];
    }
    
#line 5551
    [position offsetWithFloat:child->mLeft_ withFloat:child->mTop_];
    
#line 5553
    if (!([parent isKindOfClass:[RepackagedAndroidViewView class]])) {
      break;
    }
    
#line 5557
    RepackagedAndroidViewView *parentView = (RepackagedAndroidViewView *) check_class_cast(parent, [RepackagedAndroidViewView class]);
    
#line 5559
    [position offsetWithFloat:-RepackagedAndroidViewView_getScrollX(parentView) withFloat:-RepackagedAndroidViewView_getScrollY(parentView)];
    
#line 5561
    child = parentView;
    parent = RepackagedAndroidViewView_getParent(child);
  }
  
#line 5565
  return scrolled;
}


#line 5579
- (void)clearFocus {
  
#line 5584
  [self clearFocusInternalWithRepackagedAndroidViewView:nil withBoolean:YES withBoolean:YES];
}


#line 5596
- (void)clearFocusInternalWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)focused
                                            withBoolean:(jboolean)propagate
                                            withBoolean:(jboolean)refocus {
  if ((mPrivateFlags_ & RepackagedAndroidViewView_PFLAG_FOCUSED) != 0) {
    mPrivateFlags_ &= ~RepackagedAndroidViewView_PFLAG_FOCUSED;
    
#line 5600
    if (propagate && mParent_ != nil) {
      [mParent_ clearChildFocusWithRepackagedAndroidViewView:self];
    }
    
#line 5604
    [self onFocusChangedWithBoolean:NO withInt:0 withRepackagedAndroidGraphicsRect:nil];
    [self refreshDrawableState];
    
#line 5607
    if (propagate && (!refocus || ![self rootViewRequestFocus])) {
      [self notifyGlobalFocusClearedWithRepackagedAndroidViewView:self];
    }
  }
}


#line 5613
- (void)notifyGlobalFocusClearedWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)oldFocus {
  if (oldFocus != nil && mAttachInfo_ != nil) {
    [((RepackagedAndroidViewViewTreeObserver *) nil_chk(mAttachInfo_->mTreeObserver_)) dispatchOnGlobalFocusChangeWithRepackagedAndroidViewView:oldFocus withRepackagedAndroidViewView:nil];
  }
}

- (jboolean)rootViewRequestFocus {
  RepackagedAndroidViewView *root = [self getRootView];
  return root != nil && RepackagedAndroidViewView_requestFocus(root);
}


#line 5632
- (void)unFocusWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)focused {
  
#line 5637
  [self clearFocusInternalWithRepackagedAndroidViewView:focused withBoolean:NO withBoolean:NO];
}


#line 5647
- (jboolean)hasFocus {
  return (mPrivateFlags_ & RepackagedAndroidViewView_PFLAG_FOCUSED) != 0;
}


#line 5664
- (jboolean)hasFocusable {
  if (!RepackagedAndroidViewView_isFocusableInTouchMode(self)) {
    for (id<RepackagedAndroidViewViewParent> p = mParent_; [p isKindOfClass:[RepackagedAndroidViewViewGroup class]]; p = [((id<RepackagedAndroidViewViewParent>) nil_chk(p)) getParent]) {
      RepackagedAndroidViewViewGroup *g = (RepackagedAndroidViewViewGroup *) check_class_cast(p, [RepackagedAndroidViewViewGroup class]);
      if ([((RepackagedAndroidViewViewGroup *) nil_chk(g)) shouldBlockFocusForTouchscreen]) {
        return NO;
      }
    }
  }
  return (mViewFlags_ & RepackagedAndroidViewView_VISIBILITY_MASK) == RepackagedAndroidViewView_VISIBLE && RepackagedAndroidViewView_isFocusable(self);
}


#line 5695
- (void)onFocusChangedWithBoolean:(jboolean)gainFocus
                          withInt:(jint)direction
withRepackagedAndroidGraphicsRect:(RepackagedAndroidGraphicsRect *)previouslyFocusedRect {
  
#line 5697
  if (gainFocus) {
    [self sendAccessibilityEventWithInt:RepackagedAndroidViewAccessibilityAccessibilityEvent_TYPE_VIEW_FOCUSED];
  }
  else {
    
#line 5700
    [self notifyViewAccessibilityStateChangedIfNeededWithInt:
#line 5701
    RepackagedAndroidViewAccessibilityAccessibilityEvent_CONTENT_CHANGE_TYPE_UNDEFINED];
  }
  
#line 5704
  RepackagedAndroidViewInputmethodInputMethodManager *imm = RepackagedAndroidViewInputmethodInputMethodManager_peekInstance();
  if (!gainFocus) {
    if ([self isPressed]) {
      [self setPressedWithBoolean:NO];
    }
    if (imm != nil && mAttachInfo_ != nil &&
#line 5710
    mAttachInfo_->mHasWindowFocus_) {
      [imm focusOutWithRepackagedAndroidViewView:self];
    }
    [self onFocusLost];
  }
  else
#line 5714
  if (imm != nil && mAttachInfo_ != nil &&
#line 5715
  mAttachInfo_->mHasWindowFocus_) {
    [imm focusInWithRepackagedAndroidViewView:self];
  }
  
#line 5719
  [self invalidateWithBoolean:YES];
  RepackagedAndroidViewView_ListenerInfo *li = mListenerInfo_;
  if (li != nil && li->mOnFocusChangeListener_ != nil) {
    [li->mOnFocusChangeListener_ onFocusChangeWithRepackagedAndroidViewView:self withBoolean:gainFocus];
  }
  
#line 5725
  if (mAttachInfo_ != nil) {
    [((RepackagedAndroidViewKeyEvent_DispatcherState *) nil_chk(mAttachInfo_->mKeyDispatchState_)) resetWithRepackagedAndroidViewView:self];
  }
}


#line 5757
- (void)sendAccessibilityEventWithInt:(jint)eventType {
  if (mAccessibilityDelegate_ != nil) {
    [mAccessibilityDelegate_ sendAccessibilityEventWithRepackagedAndroidViewView:self withInt:eventType];
  }
  else {
    
#line 5761
    [self sendAccessibilityEventInternalWithInt:eventType];
  }
}


#line 5774
- (void)announceForAccessibilityWithJavaLangCharSequence:(id<JavaLangCharSequence>)text {
  if ([((RepackagedAndroidViewAccessibilityAccessibilityManager *) nil_chk(RepackagedAndroidViewAccessibilityAccessibilityManager_getInstanceWithRepackagedAndroidContentContext_(mContext_))) isEnabled] && mParent_ != nil) {
    RepackagedAndroidViewAccessibilityAccessibilityEvent *event = RepackagedAndroidViewAccessibilityAccessibilityEvent_obtainWithInt_(
#line 5777
    RepackagedAndroidViewAccessibilityAccessibilityEvent_TYPE_ANNOUNCEMENT);
    [self onInitializeAccessibilityEventWithRepackagedAndroidViewAccessibilityAccessibilityEvent:event];
    [((id<JavaUtilList>) nil_chk([((RepackagedAndroidViewAccessibilityAccessibilityEvent *) nil_chk(event)) getText])) addWithId:text];
    [event setContentDescriptionWithJavaLangCharSequence:nil];
    [mParent_ requestSendAccessibilityEventWithRepackagedAndroidViewView:self withRepackagedAndroidViewAccessibilityAccessibilityEvent:event];
  }
}


#line 5792
- (void)sendAccessibilityEventInternalWithInt:(jint)eventType {
  if ([((RepackagedAndroidViewAccessibilityAccessibilityManager *) nil_chk(RepackagedAndroidViewAccessibilityAccessibilityManager_getInstanceWithRepackagedAndroidContentContext_(mContext_))) isEnabled]) {
    [self sendAccessibilityEventUncheckedWithRepackagedAndroidViewAccessibilityAccessibilityEvent:RepackagedAndroidViewAccessibilityAccessibilityEvent_obtainWithInt_(eventType)];
  }
}


#line 5813
- (void)sendAccessibilityEventUncheckedWithRepackagedAndroidViewAccessibilityAccessibilityEvent:(RepackagedAndroidViewAccessibilityAccessibilityEvent *)event {
  if (mAccessibilityDelegate_ != nil) {
    [mAccessibilityDelegate_ sendAccessibilityEventUncheckedWithRepackagedAndroidViewView:self withRepackagedAndroidViewAccessibilityAccessibilityEvent:event];
  }
  else {
    
#line 5817
    [self sendAccessibilityEventUncheckedInternalWithRepackagedAndroidViewAccessibilityAccessibilityEvent:event];
  }
}


#line 5828
- (void)sendAccessibilityEventUncheckedInternalWithRepackagedAndroidViewAccessibilityAccessibilityEvent:(RepackagedAndroidViewAccessibilityAccessibilityEvent *)event {
  if (![self isShown]) {
    return;
  }
  [self onInitializeAccessibilityEventWithRepackagedAndroidViewAccessibilityAccessibilityEvent:event];
  
#line 5834
  if (([((RepackagedAndroidViewAccessibilityAccessibilityEvent *) nil_chk(event)) getEventType] & RepackagedAndroidViewView_POPULATING_ACCESSIBILITY_EVENT_TYPES) != 0) {
    [self dispatchPopulateAccessibilityEventWithRepackagedAndroidViewAccessibilityAccessibilityEvent:event];
  }
  
#line 5838
  [((id<RepackagedAndroidViewViewParent>) nil_chk(RepackagedAndroidViewView_getParent(self))) requestSendAccessibilityEventWithRepackagedAndroidViewView:self withRepackagedAndroidViewAccessibilityAccessibilityEvent:event];
}


#line 5866
- (jboolean)dispatchPopulateAccessibilityEventWithRepackagedAndroidViewAccessibilityAccessibilityEvent:(RepackagedAndroidViewAccessibilityAccessibilityEvent *)event {
  if (mAccessibilityDelegate_ != nil) {
    return [mAccessibilityDelegate_ dispatchPopulateAccessibilityEventWithRepackagedAndroidViewView:self withRepackagedAndroidViewAccessibilityAccessibilityEvent:event];
  }
  else {
    
#line 5870
    return [self dispatchPopulateAccessibilityEventInternalWithRepackagedAndroidViewAccessibilityAccessibilityEvent:event];
  }
}


#line 5881
- (jboolean)dispatchPopulateAccessibilityEventInternalWithRepackagedAndroidViewAccessibilityAccessibilityEvent:(RepackagedAndroidViewAccessibilityAccessibilityEvent *)event {
  [self onPopulateAccessibilityEventWithRepackagedAndroidViewAccessibilityAccessibilityEvent:event];
  return NO;
}


#line 5918
- (void)onPopulateAccessibilityEventWithRepackagedAndroidViewAccessibilityAccessibilityEvent:(RepackagedAndroidViewAccessibilityAccessibilityEvent *)event {
  if (mAccessibilityDelegate_ != nil) {
    [mAccessibilityDelegate_ onPopulateAccessibilityEventWithRepackagedAndroidViewView:self withRepackagedAndroidViewAccessibilityAccessibilityEvent:event];
  }
  else {
    
#line 5922
    [self onPopulateAccessibilityEventInternalWithRepackagedAndroidViewAccessibilityAccessibilityEvent:event];
  }
}


#line 5933
- (void)onPopulateAccessibilityEventInternalWithRepackagedAndroidViewAccessibilityAccessibilityEvent:(RepackagedAndroidViewAccessibilityAccessibilityEvent *)event {
}


#line 5963
- (void)onInitializeAccessibilityEventWithRepackagedAndroidViewAccessibilityAccessibilityEvent:(RepackagedAndroidViewAccessibilityAccessibilityEvent *)event {
  if (mAccessibilityDelegate_ != nil) {
    [mAccessibilityDelegate_ onInitializeAccessibilityEventWithRepackagedAndroidViewView:self withRepackagedAndroidViewAccessibilityAccessibilityEvent:event];
  }
  else {
    
#line 5967
    [self onInitializeAccessibilityEventInternalWithRepackagedAndroidViewAccessibilityAccessibilityEvent:event];
  }
}


#line 5978
- (void)onInitializeAccessibilityEventInternalWithRepackagedAndroidViewAccessibilityAccessibilityEvent:(RepackagedAndroidViewAccessibilityAccessibilityEvent *)event {
  [((RepackagedAndroidViewAccessibilityAccessibilityEvent *) nil_chk(event)) setSourceWithRepackagedAndroidViewView:self];
  [event setClassNameWithJavaLangCharSequence:[self getAccessibilityClassName]];
  [event setPackageNameWithJavaLangCharSequence:[((id<RepackagedAndroidContentContext>) nil_chk(RepackagedAndroidViewView_getContext(self))) getPackageName]];
  [event setEnabledWithBoolean:[self isEnabled]];
  [event setContentDescriptionWithJavaLangCharSequence:mContentDescription_];
  
#line 5985
  switch ([event getEventType]) {
    case RepackagedAndroidViewAccessibilityAccessibilityEvent_TYPE_VIEW_FOCUSED:
    {
      
#line 5987
      JavaUtilArrayList *focusablesTempList = (mAttachInfo_ != nil) ?
#line 5988
      mAttachInfo_->mTempArrayList_ : new_JavaUtilArrayList_init();
      [((RepackagedAndroidViewView *) nil_chk([self getRootView])) addFocusablesWithJavaUtilArrayList:focusablesTempList withInt:RepackagedAndroidViewView_FOCUS_FORWARD withInt:RepackagedAndroidViewView_FOCUSABLES_ALL];
      [event setItemCountWithInt:[focusablesTempList size]];
      [event setCurrentItemIndexWithInt:[focusablesTempList indexOfWithId:self]];
      if (mAttachInfo_ != nil) {
        [focusablesTempList clear];
      }
    }
    
#line 5995
    break;
    case RepackagedAndroidViewAccessibilityAccessibilityEvent_TYPE_VIEW_TEXT_SELECTION_CHANGED:
    {
      
#line 5997
      id<JavaLangCharSequence> text = [self getIterableTextForAccessibility];
      if (text != nil && [text length] > 0) {
        [event setFromIndexWithInt:[self getAccessibilitySelectionStart]];
        [event setToIndexWithInt:[self getAccessibilitySelectionEnd]];
        [event setItemCountWithInt:[text length]];
      }
    }
    
#line 6003
    break;
  }
}


#line 6023
- (RepackagedAndroidViewAccessibilityAccessibilityNodeInfo *)createAccessibilityNodeInfo {
  if (mAccessibilityDelegate_ != nil) {
    return [mAccessibilityDelegate_ createAccessibilityNodeInfoWithRepackagedAndroidViewView:self];
  }
  else {
    
#line 6027
    return [self createAccessibilityNodeInfoInternal];
  }
}


#line 6036
- (RepackagedAndroidViewAccessibilityAccessibilityNodeInfo *)createAccessibilityNodeInfoInternal {
  RepackagedAndroidViewAccessibilityAccessibilityNodeProvider *provider = [self getAccessibilityNodeProvider];
  if (provider != nil) {
    return [provider createAccessibilityNodeInfoWithInt:RepackagedAndroidViewAccessibilityAccessibilityNodeProvider_HOST_VIEW_ID];
  }
  else {
    
#line 6041
    RepackagedAndroidViewAccessibilityAccessibilityNodeInfo *info = RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_obtainWithRepackagedAndroidViewView_(self);
    [self onInitializeAccessibilityNodeInfoWithRepackagedAndroidViewAccessibilityAccessibilityNodeInfo:info];
    return info;
  }
}


#line 6079
- (void)onInitializeAccessibilityNodeInfoWithRepackagedAndroidViewAccessibilityAccessibilityNodeInfo:(RepackagedAndroidViewAccessibilityAccessibilityNodeInfo *)info {
  if (mAccessibilityDelegate_ != nil) {
    [mAccessibilityDelegate_ onInitializeAccessibilityNodeInfoWithRepackagedAndroidViewView:self withRepackagedAndroidViewAccessibilityAccessibilityNodeInfo:info];
  }
  else {
    
#line 6083
    [self onInitializeAccessibilityNodeInfoInternalWithRepackagedAndroidViewAccessibilityAccessibilityNodeInfo:info];
  }
}


#line 6093
- (void)getBoundsOnScreenWithRepackagedAndroidGraphicsRect:(RepackagedAndroidGraphicsRect *)outRect {
  [self getBoundsOnScreenWithRepackagedAndroidGraphicsRect:outRect withBoolean:NO];
}


#line 6104
- (void)getBoundsOnScreenWithRepackagedAndroidGraphicsRect:(RepackagedAndroidGraphicsRect *)outRect
                                               withBoolean:(jboolean)clipToParent {
  if (mAttachInfo_ == nil) {
    return;
  }
  
#line 6109
  RepackagedAndroidGraphicsRectF *position = ((RepackagedAndroidViewView_AttachInfo *) nil_chk(mAttachInfo_))->mTmpTransformRect_;
  [((RepackagedAndroidGraphicsRectF *) nil_chk(position)) setWithFloat:0 withFloat:0 withFloat:mRight_ - mLeft_ withFloat:mBottom_ - mTop_];
  
#line 6112
  if (!RepackagedAndroidViewView_hasIdentityMatrix(self)) {
    [((RepackagedAndroidGraphicsMatrix *) nil_chk([self getMatrix])) mapRectWithRepackagedAndroidGraphicsRectF:position];
  }
  
#line 6116
  [position offsetWithFloat:mLeft_ withFloat:mTop_];
  
#line 6118
  id<RepackagedAndroidViewViewParent> parent = mParent_;
  while ([parent isKindOfClass:[RepackagedAndroidViewView class]]) {
    RepackagedAndroidViewView *parentView = (RepackagedAndroidViewView *) check_class_cast(parent, [RepackagedAndroidViewView class]);
    
#line 6122
    [position offsetWithFloat:-((RepackagedAndroidViewView *) nil_chk(parentView))->mScrollX_ withFloat:-parentView->mScrollY_];
    
#line 6124
    if (clipToParent) {
      position->left_ = JavaLangMath_maxWithFloat_withFloat_(position->left_, 0);
      position->top_ = JavaLangMath_maxWithFloat_withFloat_(position->top_, 0);
      position->right_ = JavaLangMath_minWithFloat_withFloat_(position->right_, RepackagedAndroidViewView_getWidth(parentView));
      position->bottom_ = JavaLangMath_minWithFloat_withFloat_(position->bottom_, RepackagedAndroidViewView_getHeight(parentView));
    }
    
#line 6131
    if (!RepackagedAndroidViewView_hasIdentityMatrix(parentView)) {
      [((RepackagedAndroidGraphicsMatrix *) nil_chk([parentView getMatrix])) mapRectWithRepackagedAndroidGraphicsRectF:position];
    }
    
#line 6135
    [position offsetWithFloat:parentView->mLeft_ withFloat:parentView->mTop_];
    
#line 6137
    parent = parentView->mParent_;
  }
  
#line 6140
  if ([parent isKindOfClass:[RepackagedAndroidViewViewRootImpl class]]) {
    RepackagedAndroidViewViewRootImpl *viewRootImpl = (RepackagedAndroidViewViewRootImpl *) check_class_cast(parent, [RepackagedAndroidViewViewRootImpl class]);
    [position offsetWithFloat:0 withFloat:-((RepackagedAndroidViewViewRootImpl *) nil_chk(viewRootImpl))->mCurScrollY_];
  }
  
#line 6145
  [position offsetWithFloat:mAttachInfo_->mWindowLeft_ withFloat:mAttachInfo_->mWindowTop_];
  
#line 6147
  [((RepackagedAndroidGraphicsRect *) nil_chk(outRect)) setWithInt:J2ObjCFpToInt((position->left_ + 0.5f)) withInt:J2ObjCFpToInt((position->top_ + 0.5f)) withInt:J2ObjCFpToInt(
#line 6148
  (position->right_ + 0.5f)) withInt:J2ObjCFpToInt((position->bottom_ + 0.5f))];
}


#line 6158
- (id<JavaLangCharSequence>)getAccessibilityClassName {
  return [RepackagedAndroidViewView_class_() getName];
}


#line 6168
- (void)onProvideStructureWithRepackagedAndroidViewViewStructure:(RepackagedAndroidViewViewStructure *)structure {
  jint id_ = mID_;
  if (id_ > 0 && (id_ & (jint) 0xff000000) != 0 && (id_ & (jint) 0x00ff0000) != 0 &&
#line 6171
  (id_ & (jint) 0x0000ffff) != 0) {
    NSString *pkg, *type, *entry_;
    @try {
      RepackagedAndroidContentResResources *res = [self getResources];
      entry_ = [((RepackagedAndroidContentResResources *) nil_chk(res)) getResourceEntryNameWithInt:id_];
      type = [res getResourceTypeNameWithInt:id_];
      pkg = [res getResourcePackageNameWithInt:id_];
    }
    @catch (
#line 6178
    RepackagedAndroidContentResResources_NotFoundException *e) {
      entry_ = type = pkg = nil;
    }
    [((RepackagedAndroidViewViewStructure *) nil_chk(structure)) setIdWithInt:id_ withNSString:pkg withNSString:type withNSString:entry_];
  }
  else {
    
#line 6183
    [((RepackagedAndroidViewViewStructure *) nil_chk(structure)) setIdWithInt:id_ withNSString:nil withNSString:nil withNSString:nil];
  }
  [((RepackagedAndroidViewViewStructure *) nil_chk(structure)) setDimensWithInt:mLeft_ withInt:mTop_ withInt:mScrollX_ withInt:mScrollY_ withInt:mRight_ - mLeft_ withInt:mBottom_ - mTop_];
  if (!RepackagedAndroidViewView_hasIdentityMatrix(self)) {
    [structure setTransformationWithRepackagedAndroidGraphicsMatrix:[self getMatrix]];
  }
  [structure setElevationWithFloat:[self getZ]];
  [structure setVisibilityWithInt:[self getVisibility]];
  [structure setEnabledWithBoolean:[self isEnabled]];
  if ([self isClickable]) {
    [structure setClickableWithBoolean:YES];
  }
  if (RepackagedAndroidViewView_isFocusable(self)) {
    [structure setFocusableWithBoolean:YES];
  }
  if ([self isFocused]) {
    [structure setFocusedWithBoolean:YES];
  }
  if ([self isAccessibilityFocused]) {
    [structure setAccessibilityFocusedWithBoolean:YES];
  }
  if ([self isSelected]) {
    [structure setSelectedWithBoolean:YES];
  }
  if ([self isActivated]) {
    [structure setActivatedWithBoolean:YES];
  }
  if ([self isLongClickable]) {
    [structure setLongClickableWithBoolean:YES];
  }
  if ([RepackagedAndroidWidgetCheckable_class_() isInstance:self]) {
    [structure setCheckableWithBoolean:YES];
    if ([((id<RepackagedAndroidWidgetCheckable>) check_protocol_cast(self, @protocol(RepackagedAndroidWidgetCheckable))) isChecked]) {
      [structure setCheckedWithBoolean:YES];
    }
  }
  if ([self isContextClickable]) {
    [structure setContextClickableWithBoolean:YES];
  }
  [structure setClassNameWithNSString:[((id<JavaLangCharSequence>) nil_chk([self getAccessibilityClassName])) description]];
  [structure setContentDescriptionWithJavaLangCharSequence:[self getContentDescription]];
}


#line 6234
- (void)onProvideVirtualStructureWithRepackagedAndroidViewViewStructure:(RepackagedAndroidViewViewStructure *)structure {
  RepackagedAndroidViewAccessibilityAccessibilityNodeProvider *provider = [self getAccessibilityNodeProvider];
  if (provider != nil) {
    RepackagedAndroidViewAccessibilityAccessibilityNodeInfo *info = [self createAccessibilityNodeInfo];
    [((RepackagedAndroidViewViewStructure *) nil_chk(structure)) setChildCountWithInt:1];
    RepackagedAndroidViewViewStructure *root = [structure newChildWithInt:0];
    RepackagedAndroidViewView_populateVirtualStructureWithRepackagedAndroidViewViewStructure_withRepackagedAndroidViewAccessibilityAccessibilityNodeProvider_withRepackagedAndroidViewAccessibilityAccessibilityNodeInfo_(self, root, provider, info);
    [((RepackagedAndroidViewAccessibilityAccessibilityNodeInfo *) nil_chk(info)) recycle];
  }
}

- (void)populateVirtualStructureWithRepackagedAndroidViewViewStructure:(RepackagedAndroidViewViewStructure *)structure
       withRepackagedAndroidViewAccessibilityAccessibilityNodeProvider:(RepackagedAndroidViewAccessibilityAccessibilityNodeProvider *)provider
           withRepackagedAndroidViewAccessibilityAccessibilityNodeInfo:(RepackagedAndroidViewAccessibilityAccessibilityNodeInfo *)info {
  RepackagedAndroidViewView_populateVirtualStructureWithRepackagedAndroidViewViewStructure_withRepackagedAndroidViewAccessibilityAccessibilityNodeProvider_withRepackagedAndroidViewAccessibilityAccessibilityNodeInfo_(self, structure, provider, info);
}


#line 6306
- (void)dispatchProvideStructureWithRepackagedAndroidViewViewStructure:(RepackagedAndroidViewViewStructure *)structure {
  if (![self isAssistBlocked]) {
    [self onProvideStructureWithRepackagedAndroidViewViewStructure:structure];
    [self onProvideVirtualStructureWithRepackagedAndroidViewViewStructure:structure];
  }
  else {
    
#line 6311
    [((RepackagedAndroidViewViewStructure *) nil_chk(structure)) setClassNameWithNSString:[((id<JavaLangCharSequence>) nil_chk([self getAccessibilityClassName])) description]];
    [structure setAssistBlockedWithBoolean:YES];
  }
}


#line 6323
- (void)onInitializeAccessibilityNodeInfoInternalWithRepackagedAndroidViewAccessibilityAccessibilityNodeInfo:(RepackagedAndroidViewAccessibilityAccessibilityNodeInfo *)info {
  if (mAttachInfo_ == nil) {
    return;
  }
  
#line 6328
  RepackagedAndroidGraphicsRect *bounds = ((RepackagedAndroidViewView_AttachInfo *) nil_chk(mAttachInfo_))->mTmpInvalRect_;
  
#line 6330
  [self getDrawingRectWithRepackagedAndroidGraphicsRect:bounds];
  [((RepackagedAndroidViewAccessibilityAccessibilityNodeInfo *) nil_chk(info)) setBoundsInParentWithRepackagedAndroidGraphicsRect:bounds];
  
#line 6333
  [self getBoundsOnScreenWithRepackagedAndroidGraphicsRect:bounds withBoolean:YES];
  [info setBoundsInScreenWithRepackagedAndroidGraphicsRect:bounds];
  
#line 6336
  id<RepackagedAndroidViewViewParent> parent = [self getParentForAccessibility];
  if ([parent isKindOfClass:[RepackagedAndroidViewView class]]) {
    [info setParentWithRepackagedAndroidViewView:(RepackagedAndroidViewView *) check_class_cast(parent, [RepackagedAndroidViewView class])];
  }
  
#line 6341
  if (mID_ != RepackagedAndroidViewView_NO_ID) {
    RepackagedAndroidViewView *rootView = [self getRootView];
    if (rootView == nil) {
      rootView = self;
    }
    
#line 6347
    RepackagedAndroidViewView *label = RepackagedAndroidViewView_findLabelForViewWithRepackagedAndroidViewView_withInt_(nil_chk(rootView), self, mID_);
    if (label != nil) {
      [info setLabeledByWithRepackagedAndroidViewView:label];
    }
    
#line 6352
    if ((mAttachInfo_->mAccessibilityFetchFlags_ &
#line 6353
    RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_FLAG_REPORT_VIEW_IDS) != 0 && RepackagedAndroidContentResResources_resourceHasPackageWithInt_(
#line 6354
    mID_)) {
      @try {
        NSString *viewId = [((RepackagedAndroidContentResResources *) nil_chk([self getResources])) getResourceNameWithInt:mID_];
        [info setViewIdResourceNameWithNSString:viewId];
      }
      @catch (
#line 6358
      RepackagedAndroidContentResResources_NotFoundException *nfe) {
      }
    }
  }
  
#line 6364
  if (mLabelForId_ != RepackagedAndroidViewView_NO_ID) {
    RepackagedAndroidViewView *rootView = [self getRootView];
    if (rootView == nil) {
      rootView = self;
    }
    RepackagedAndroidViewView *labeled = RepackagedAndroidViewView_findViewInsideOutShouldExistWithRepackagedAndroidViewView_withInt_(nil_chk(rootView), self, mLabelForId_);
    if (labeled != nil) {
      [info setLabelForWithRepackagedAndroidViewView:labeled];
    }
  }
  
#line 6375
  if (mAccessibilityTraversalBeforeId_ != RepackagedAndroidViewView_NO_ID) {
    RepackagedAndroidViewView *rootView = [self getRootView];
    if (rootView == nil) {
      rootView = self;
    }
    RepackagedAndroidViewView *next = RepackagedAndroidViewView_findViewInsideOutShouldExistWithRepackagedAndroidViewView_withInt_(nil_chk(rootView), self,
#line 6381
    mAccessibilityTraversalBeforeId_);
    if (next != nil && [next includeForAccessibility]) {
      [info setTraversalBeforeWithRepackagedAndroidViewView:next];
    }
  }
  
#line 6387
  if (mAccessibilityTraversalAfterId_ != RepackagedAndroidViewView_NO_ID) {
    RepackagedAndroidViewView *rootView = [self getRootView];
    if (rootView == nil) {
      rootView = self;
    }
    RepackagedAndroidViewView *next = RepackagedAndroidViewView_findViewInsideOutShouldExistWithRepackagedAndroidViewView_withInt_(nil_chk(rootView), self,
#line 6393
    mAccessibilityTraversalAfterId_);
    if (next != nil && [next includeForAccessibility]) {
      [info setTraversalAfterWithRepackagedAndroidViewView:next];
    }
  }
  
#line 6399
  [info setVisibleToUserWithBoolean:[self isVisibleToUser]];
  
#line 6401
  [info setPackageNameWithJavaLangCharSequence:[((id<RepackagedAndroidContentContext>) nil_chk(mContext_)) getPackageName]];
  [info setClassNameWithJavaLangCharSequence:[self getAccessibilityClassName]];
  [info setContentDescriptionWithJavaLangCharSequence:[self getContentDescription]];
  
#line 6405
  [info setEnabledWithBoolean:[self isEnabled]];
  [info setClickableWithBoolean:[self isClickable]];
  [info setFocusableWithBoolean:RepackagedAndroidViewView_isFocusable(self)];
  [info setFocusedWithBoolean:[self isFocused]];
  [info setAccessibilityFocusedWithBoolean:[self isAccessibilityFocused]];
  [info setSelectedWithBoolean:[self isSelected]];
  [info setLongClickableWithBoolean:[self isLongClickable]];
  [info setContextClickableWithBoolean:[self isContextClickable]];
  [info setLiveRegionWithInt:[self getAccessibilityLiveRegion]];
  
#line 6418
  [info addActionWithInt:RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_ACTION_SELECT];
  [info addActionWithInt:RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_ACTION_CLEAR_SELECTION];
  
#line 6421
  if (RepackagedAndroidViewView_isFocusable(self)) {
    if ([self isFocused]) {
      [info addActionWithInt:RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_ACTION_CLEAR_FOCUS];
    }
    else {
      
#line 6425
      [info addActionWithInt:RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_ACTION_FOCUS];
    }
  }
  
#line 6429
  if (![self isAccessibilityFocused]) {
    [info addActionWithInt:RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_ACTION_ACCESSIBILITY_FOCUS];
  }
  else {
    
#line 6432
    [info addActionWithInt:RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_ACTION_CLEAR_ACCESSIBILITY_FOCUS];
  }
  
#line 6435
  if ([self isClickable] && [self isEnabled]) {
    [info addActionWithInt:RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_ACTION_CLICK];
  }
  
#line 6439
  if ([self isLongClickable] && [self isEnabled]) {
    [info addActionWithInt:RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_ACTION_LONG_CLICK];
  }
  
#line 6443
  if ([self isContextClickable] && [self isEnabled]) {
    [info addActionWithRepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction:RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction_get_ACTION_CONTEXT_CLICK_()];
  }
  
#line 6447
  id<JavaLangCharSequence> text = [self getIterableTextForAccessibility];
  if (text != nil && [text length] > 0) {
    [info setTextSelectionWithInt:[self getAccessibilitySelectionStart] withInt:[self getAccessibilitySelectionEnd]];
    
#line 6451
    [info addActionWithInt:RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_ACTION_SET_SELECTION];
    [info addActionWithInt:RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_ACTION_NEXT_AT_MOVEMENT_GRANULARITY];
    [info addActionWithInt:RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_ACTION_PREVIOUS_AT_MOVEMENT_GRANULARITY];
    [info setMovementGranularitiesWithInt:RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_MOVEMENT_GRANULARITY_CHARACTER |
#line 6455
    RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_MOVEMENT_GRANULARITY_WORD |
#line 6456
    RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_MOVEMENT_GRANULARITY_PARAGRAPH];
  }
  
#line 6459
  [info addActionWithRepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction:RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction_get_ACTION_SHOW_ON_SCREEN_()];
}


#line 6462
- (RepackagedAndroidViewView *)findLabelForViewWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)view
                                                                     withInt:(jint)labeledId {
  return RepackagedAndroidViewView_findLabelForViewWithRepackagedAndroidViewView_withInt_(self, view, labeledId);
}


#line 6479
- (jboolean)isVisibleToUser {
  return [self isVisibleToUserWithRepackagedAndroidGraphicsRect:nil];
}


#line 6500
- (jboolean)isVisibleToUserWithRepackagedAndroidGraphicsRect:(RepackagedAndroidGraphicsRect *)boundInView {
  if (mAttachInfo_ != nil) {
    
#line 6503
    if (mAttachInfo_->mWindowVisibility_ != RepackagedAndroidViewView_VISIBLE) {
      return NO;
    }
    
#line 6508
    id current = self;
    while ([current isKindOfClass:[RepackagedAndroidViewView class]]) {
      RepackagedAndroidViewView *view = (RepackagedAndroidViewView *) check_class_cast(current, [RepackagedAndroidViewView class]);
      
#line 6513
      if ([view getAlpha] <= 0 || [view getTransitionAlpha] <= 0 ||
#line 6514
      [view getVisibility] != RepackagedAndroidViewView_VISIBLE) {
        return NO;
      }
      current = view->mParent_;
    }
    
#line 6520
    RepackagedAndroidGraphicsRect *visibleRect = mAttachInfo_->mTmpInvalRect_;
    RepackagedAndroidGraphicsPoint *offset = mAttachInfo_->mPoint_;
    if (![self getGlobalVisibleRectWithRepackagedAndroidGraphicsRect:visibleRect withRepackagedAndroidGraphicsPoint:offset]) {
      return NO;
    }
    
#line 6526
    if (boundInView != nil) {
      [((RepackagedAndroidGraphicsRect *) nil_chk(visibleRect)) offsetWithInt:-((RepackagedAndroidGraphicsPoint *) nil_chk(offset))->x_ withInt:-offset->y_];
      return [boundInView intersectWithRepackagedAndroidGraphicsRect:visibleRect];
    }
    return YES;
  }
  return NO;
}


#line 6543
- (RepackagedAndroidViewView_AccessibilityDelegate *)getAccessibilityDelegate {
  return mAccessibilityDelegate_;
}


#line 6556
- (void)setAccessibilityDelegateWithRepackagedAndroidViewView_AccessibilityDelegate:(RepackagedAndroidViewView_AccessibilityDelegate *)delegate {
  mAccessibilityDelegate_ = delegate;
}


#line 6582
- (RepackagedAndroidViewAccessibilityAccessibilityNodeProvider *)getAccessibilityNodeProvider {
  if (mAccessibilityDelegate_ != nil) {
    return [mAccessibilityDelegate_ getAccessibilityNodeProviderWithRepackagedAndroidViewView:self];
  }
  else {
    
#line 6586
    return nil;
  }
}


#line 6598
- (jint)getAccessibilityViewId {
  if (mAccessibilityViewId_ == RepackagedAndroidViewView_NO_ID) {
    mAccessibilityViewId_ = RepackagedAndroidViewView_sNextAccessibilityViewId_++;
  }
  return mAccessibilityViewId_;
}


#line 6612
- (jint)getAccessibilityWindowId {
  return mAttachInfo_ != nil ? mAttachInfo_->mAccessibilityWindowId_ :
#line 6614
  RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_UNDEFINED_ITEM_ID;
}


#line 6629
- (id<JavaLangCharSequence>)getContentDescription {
  return mContentDescription_;
}


#line 6645
- (void)setContentDescriptionWithJavaLangCharSequence:(id<JavaLangCharSequence>)contentDescription {
  if (mContentDescription_ == nil) {
    if (contentDescription == nil) {
      return;
    }
  }
  else
#line 6650
  if ([mContentDescription_ isEqual:contentDescription]) {
    return;
  }
  mContentDescription_ = contentDescription;
  jboolean nonEmptyDesc = contentDescription != nil && [contentDescription length] > 0;
  if (nonEmptyDesc && [self getImportantForAccessibility] == RepackagedAndroidViewView_IMPORTANT_FOR_ACCESSIBILITY_AUTO) {
    [self setImportantForAccessibilityWithInt:RepackagedAndroidViewView_IMPORTANT_FOR_ACCESSIBILITY_YES];
    [self notifySubtreeAccessibilityStateChangedIfNeeded];
  }
  else {
    
#line 6659
    [self notifyViewAccessibilityStateChangedIfNeededWithInt:
#line 6660
    RepackagedAndroidViewAccessibilityAccessibilityEvent_CONTENT_CHANGE_TYPE_CONTENT_DESCRIPTION];
  }
}


#line 6687
- (void)setAccessibilityTraversalBeforeWithInt:(jint)beforeId {
  if (mAccessibilityTraversalBeforeId_ == beforeId) {
    return;
  }
  mAccessibilityTraversalBeforeId_ = beforeId;
  [self notifyViewAccessibilityStateChangedIfNeededWithInt:
#line 6693
  RepackagedAndroidViewAccessibilityAccessibilityEvent_CONTENT_CHANGE_TYPE_UNDEFINED];
}


#line 6704
- (jint)getAccessibilityTraversalBefore {
  return mAccessibilityTraversalBeforeId_;
}


#line 6731
- (void)setAccessibilityTraversalAfterWithInt:(jint)afterId {
  if (mAccessibilityTraversalAfterId_ == afterId) {
    return;
  }
  mAccessibilityTraversalAfterId_ = afterId;
  [self notifyViewAccessibilityStateChangedIfNeededWithInt:
#line 6737
  RepackagedAndroidViewAccessibilityAccessibilityEvent_CONTENT_CHANGE_TYPE_UNDEFINED];
}


#line 6748
- (jint)getAccessibilityTraversalAfter {
  return mAccessibilityTraversalAfterId_;
}


#line 6759
- (jint)getLabelFor {
  return mLabelForId_;
}


#line 6770
- (void)setLabelForWithInt:(jint)id_ {
  if (mLabelForId_ == id_) {
    return;
  }
  mLabelForId_ = id_;
  if (mLabelForId_ != RepackagedAndroidViewView_NO_ID &&
#line 6776
  mID_ == RepackagedAndroidViewView_NO_ID) {
    mID_ = RepackagedAndroidViewView_generateViewId();
  }
  [self notifyViewAccessibilityStateChangedIfNeededWithInt:
#line 6780
  RepackagedAndroidViewAccessibilityAccessibilityEvent_CONTENT_CHANGE_TYPE_UNDEFINED];
}


#line 6797
- (void)onFocusLost {
  RepackagedAndroidViewView_resetPressedState(self);
}

- (void)resetPressedState {
  RepackagedAndroidViewView_resetPressedState(self);
}


#line 6821
- (jboolean)isFocused {
  return (mPrivateFlags_ & RepackagedAndroidViewView_PFLAG_FOCUSED) != 0;
}


#line 6832
- (RepackagedAndroidViewView *)findFocus {
  return (mPrivateFlags_ & RepackagedAndroidViewView_PFLAG_FOCUSED) != 0 ? self : nil;
}


#line 6845
- (jboolean)isScrollContainer {
  return (mPrivateFlags_ & RepackagedAndroidViewView_PFLAG_SCROLL_CONTAINER_ADDED) != 0;
}


#line 6858
- (void)setScrollContainerWithBoolean:(jboolean)isScrollContainer {
  if (isScrollContainer) {
    if (mAttachInfo_ != nil && (mPrivateFlags_ & RepackagedAndroidViewView_PFLAG_SCROLL_CONTAINER_ADDED) == 0) {
      [((JavaUtilArrayList *) nil_chk(mAttachInfo_->mScrollContainers_)) addWithId:self];
      mPrivateFlags_ |= RepackagedAndroidViewView_PFLAG_SCROLL_CONTAINER_ADDED;
    }
    mPrivateFlags_ |= RepackagedAndroidViewView_PFLAG_SCROLL_CONTAINER;
  }
  else {
    
#line 6866
    if ((mPrivateFlags_ & RepackagedAndroidViewView_PFLAG_SCROLL_CONTAINER_ADDED) != 0) {
      [((JavaUtilArrayList *) nil_chk(((RepackagedAndroidViewView_AttachInfo *) nil_chk(mAttachInfo_))->mScrollContainers_)) removeWithId:self];
    }
    mPrivateFlags_ &= ~(RepackagedAndroidViewView_PFLAG_SCROLL_CONTAINER | RepackagedAndroidViewView_PFLAG_SCROLL_CONTAINER_ADDED);
  }
}


#line 6886
- (jint)getDrawingCacheQuality {
  return mViewFlags_ & RepackagedAndroidViewView_DRAWING_CACHE_QUALITY_MASK;
}


#line 6903
- (void)setDrawingCacheQualityWithInt:(jint)quality {
  [self setFlagsWithInt:quality withInt:RepackagedAndroidViewView_DRAWING_CACHE_QUALITY_MASK];
}


#line 6917
- (jboolean)getKeepScreenOn {
  return (mViewFlags_ & RepackagedAndroidViewView_KEEP_SCREEN_ON) != 0;
}


#line 6931
- (void)setKeepScreenOnWithBoolean:(jboolean)keepScreenOn {
  [self setFlagsWithInt:keepScreenOn ? RepackagedAndroidViewView_KEEP_SCREEN_ON : 0 withInt:RepackagedAndroidViewView_KEEP_SCREEN_ON];
}


#line 6941
- (jint)getNextFocusLeftId {
  return mNextFocusLeftId_;
}


#line 6952
- (void)setNextFocusLeftIdWithInt:(jint)nextFocusLeftId {
  mNextFocusLeftId_ = nextFocusLeftId;
}


#line 6962
- (jint)getNextFocusRightId {
  return mNextFocusRightId_;
}


#line 6973
- (void)setNextFocusRightIdWithInt:(jint)nextFocusRightId {
  mNextFocusRightId_ = nextFocusRightId;
}


#line 6983
- (jint)getNextFocusUpId {
  return mNextFocusUpId_;
}


#line 6994
- (void)setNextFocusUpIdWithInt:(jint)nextFocusUpId {
  mNextFocusUpId_ = nextFocusUpId;
}


#line 7004
- (jint)getNextFocusDownId {
  return mNextFocusDownId_;
}


#line 7015
- (void)setNextFocusDownIdWithInt:(jint)nextFocusDownId {
  mNextFocusDownId_ = nextFocusDownId;
}


#line 7025
- (jint)getNextFocusForwardId {
  return mNextFocusForwardId_;
}


#line 7036
- (void)setNextFocusForwardIdWithInt:(jint)nextFocusForwardId {
  mNextFocusForwardId_ = nextFocusForwardId;
}


#line 7045
- (jboolean)isShown {
  RepackagedAndroidViewView *current = self;
  
#line 7048
  do {
    if ((current->mViewFlags_ & RepackagedAndroidViewView_VISIBILITY_MASK) != RepackagedAndroidViewView_VISIBLE) {
      return NO;
    }
    id<RepackagedAndroidViewViewParent> parent = current->mParent_;
    if (parent == nil) {
      return NO;
    }
    if (!([parent isKindOfClass:[RepackagedAndroidViewView class]])) {
      return YES;
    }
    current = (RepackagedAndroidViewView *) check_class_cast(parent, [RepackagedAndroidViewView class]);
  }
  while (
#line 7060
  current != nil);
  
#line 7062
  return NO;
}


#line 7128
- (jboolean)fitSystemWindowsWithRepackagedAndroidGraphicsRect:(RepackagedAndroidGraphicsRect *)insets {
  if ((mPrivateFlags3_ & RepackagedAndroidViewView_PFLAG3_APPLYING_INSETS) == 0) {
    if (insets == nil) {
      
#line 7134
      return NO;
    }
    
#line 7139
    @try {
      mPrivateFlags3_ |= RepackagedAndroidViewView_PFLAG3_FITTING_SYSTEM_WINDOWS;
      return [((RepackagedAndroidViewWindowInsets *) nil_chk([self dispatchApplyWindowInsetsWithRepackagedAndroidViewWindowInsets:new_RepackagedAndroidViewWindowInsets_initWithRepackagedAndroidGraphicsRect_(insets)])) isConsumed];
    }
    @finally {
      
#line 7143
      mPrivateFlags3_ &= ~RepackagedAndroidViewView_PFLAG3_FITTING_SYSTEM_WINDOWS;
    }
  }
  else {
    
#line 7148
    return RepackagedAndroidViewView_fitSystemWindowsIntWithRepackagedAndroidGraphicsRect_(self, insets);
  }
}


#line 7152
- (jboolean)fitSystemWindowsIntWithRepackagedAndroidGraphicsRect:(RepackagedAndroidGraphicsRect *)insets {
  return RepackagedAndroidViewView_fitSystemWindowsIntWithRepackagedAndroidGraphicsRect_(self, insets);
}


#line 7196
- (RepackagedAndroidViewWindowInsets *)onApplyWindowInsetsWithRepackagedAndroidViewWindowInsets:(RepackagedAndroidViewWindowInsets *)insets {
  if ((mPrivateFlags3_ & RepackagedAndroidViewView_PFLAG3_FITTING_SYSTEM_WINDOWS) == 0) {
    
#line 7201
    if ([self fitSystemWindowsWithRepackagedAndroidGraphicsRect:[((RepackagedAndroidViewWindowInsets *) nil_chk(insets)) getSystemWindowInsets]]) {
      return [insets consumeSystemWindowInsets];
    }
  }
  else {
    if (RepackagedAndroidViewView_fitSystemWindowsIntWithRepackagedAndroidGraphicsRect_(self, [((RepackagedAndroidViewWindowInsets *) nil_chk(insets)) getSystemWindowInsets])) {
      return [insets consumeSystemWindowInsets];
    }
  }
  return insets;
}


#line 7224
- (void)setOnApplyWindowInsetsListenerWithRepackagedAndroidViewView_OnApplyWindowInsetsListener:(id<RepackagedAndroidViewView_OnApplyWindowInsetsListener>)listener {
  ((RepackagedAndroidViewView_ListenerInfo *) nil_chk([self getListenerInfo]))->mOnApplyWindowInsetsListener_ = listener;
}


#line 7249
- (RepackagedAndroidViewWindowInsets *)dispatchApplyWindowInsetsWithRepackagedAndroidViewWindowInsets:(RepackagedAndroidViewWindowInsets *)insets {
  @try {
    mPrivateFlags3_ |= RepackagedAndroidViewView_PFLAG3_APPLYING_INSETS;
    if (mListenerInfo_ != nil && mListenerInfo_->mOnApplyWindowInsetsListener_ != nil) {
      return [mListenerInfo_->mOnApplyWindowInsetsListener_ onApplyWindowInsetsWithRepackagedAndroidViewView:self withRepackagedAndroidViewWindowInsets:insets];
    }
    else {
      
#line 7255
      return [self onApplyWindowInsetsWithRepackagedAndroidViewWindowInsets:insets];
    }
  }
  @finally {
    
#line 7258
    mPrivateFlags3_ &= ~RepackagedAndroidViewView_PFLAG3_APPLYING_INSETS;
  }
}

- (RepackagedAndroidViewWindowInsets *)getRootWindowInsets {
  if (mAttachInfo_ != nil) {
    return [((RepackagedAndroidViewViewRootImpl *) nil_chk(mAttachInfo_->mViewRootImpl_)) getWindowInsetsWithBoolean:NO];
  }
  return nil;
}


#line 7279
- (jboolean)computeFitSystemWindowsWithRepackagedAndroidGraphicsRect:(RepackagedAndroidGraphicsRect *)inoutInsets
                                   withRepackagedAndroidGraphicsRect:(RepackagedAndroidGraphicsRect *)outLocalInsets {
  if ((mViewFlags_ & RepackagedAndroidViewView_OPTIONAL_FITS_SYSTEM_WINDOWS) == 0 ||
#line 7281
  mAttachInfo_ == nil ||
#line 7282
  ((mAttachInfo_->mSystemUiVisibility_ & RepackagedAndroidViewView_SYSTEM_UI_LAYOUT_FLAGS) == 0 &&
#line 7283
  !mAttachInfo_->mOverscanRequested_)) {
    [((RepackagedAndroidGraphicsRect *) nil_chk(outLocalInsets)) setWithRepackagedAndroidGraphicsRect:inoutInsets];
    [((RepackagedAndroidGraphicsRect *) nil_chk(inoutInsets)) setWithInt:0 withInt:0 withInt:0 withInt:0];
    return YES;
  }
  else {
    
#line 7290
    RepackagedAndroidGraphicsRect *overscan = mAttachInfo_->mOverscanInsets_;
    [((RepackagedAndroidGraphicsRect *) nil_chk(outLocalInsets)) setWithRepackagedAndroidGraphicsRect:overscan];
    ((RepackagedAndroidGraphicsRect *) nil_chk(inoutInsets))->left_ -= ((RepackagedAndroidGraphicsRect *) nil_chk(overscan))->left_;
    inoutInsets->top_ -= overscan->top_;
    inoutInsets->right_ -= overscan->right_;
    inoutInsets->bottom_ -= overscan->bottom_;
    return NO;
  }
}


#line 7310
- (RepackagedAndroidViewWindowInsets *)computeSystemWindowInsetsWithRepackagedAndroidViewWindowInsets:(RepackagedAndroidViewWindowInsets *)inArg
                                                                    withRepackagedAndroidGraphicsRect:(RepackagedAndroidGraphicsRect *)outLocalInsets {
  if ((mViewFlags_ & RepackagedAndroidViewView_OPTIONAL_FITS_SYSTEM_WINDOWS) == 0 ||
#line 7312
  mAttachInfo_ == nil ||
#line 7313
  (mAttachInfo_->mSystemUiVisibility_ & RepackagedAndroidViewView_SYSTEM_UI_LAYOUT_FLAGS) == 0) {
    [((RepackagedAndroidGraphicsRect *) nil_chk(outLocalInsets)) setWithRepackagedAndroidGraphicsRect:[((RepackagedAndroidViewWindowInsets *) nil_chk(inArg)) getSystemWindowInsets]];
    return [inArg consumeSystemWindowInsets];
  }
  else {
    
#line 7317
    [((RepackagedAndroidGraphicsRect *) nil_chk(outLocalInsets)) setWithInt:0 withInt:0 withInt:0 withInt:0];
    return inArg;
  }
}


#line 7341
- (void)setFitsSystemWindowsWithBoolean:(jboolean)fitSystemWindows {
  [self setFlagsWithInt:fitSystemWindows ? RepackagedAndroidViewView_FITS_SYSTEM_WINDOWS : 0 withInt:RepackagedAndroidViewView_FITS_SYSTEM_WINDOWS];
}


#line 7359
- (jboolean)getFitsSystemWindows {
  return (mViewFlags_ & RepackagedAndroidViewView_FITS_SYSTEM_WINDOWS) == RepackagedAndroidViewView_FITS_SYSTEM_WINDOWS;
}


#line 7364
- (jboolean)fitsSystemWindows {
  return [self getFitsSystemWindows];
}


#line 7372
- (void)requestFitSystemWindows {
  if (mParent_ != nil) {
    [mParent_ requestFitSystemWindows];
  }
}


#line 7381
- (void)requestApplyInsets {
  [self requestFitSystemWindows];
}


#line 7389
- (void)makeOptionalFitsSystemWindows {
  [self setFlagsWithInt:RepackagedAndroidViewView_OPTIONAL_FITS_SYSTEM_WINDOWS withInt:RepackagedAndroidViewView_OPTIONAL_FITS_SYSTEM_WINDOWS];
}


#line 7398
- (void)getOutsetsWithRepackagedAndroidGraphicsRect:(RepackagedAndroidGraphicsRect *)outOutsetRect {
  if (mAttachInfo_ != nil) {
    [((RepackagedAndroidGraphicsRect *) nil_chk(outOutsetRect)) setWithRepackagedAndroidGraphicsRect:mAttachInfo_->mOutsets_];
  }
  else {
    
#line 7402
    [((RepackagedAndroidGraphicsRect *) nil_chk(outOutsetRect)) setEmpty];
  }
}


#line 7418
- (jint)getVisibility {
  return mViewFlags_ & RepackagedAndroidViewView_VISIBILITY_MASK;
}


#line 7429
- (void)setVisibilityWithInt:(jint)visibility {
  [self setFlagsWithInt:visibility withInt:RepackagedAndroidViewView_VISIBILITY_MASK];
}


#line 7440
- (jboolean)isEnabled {
  return (mViewFlags_ & RepackagedAndroidViewView_ENABLED_MASK) == RepackagedAndroidViewView_ENABLED;
}


#line 7451
- (void)setEnabledWithBoolean:(jboolean)enabled {
  if (enabled == [self isEnabled]) return;
  
#line 7454
  [self setFlagsWithInt:enabled ? RepackagedAndroidViewView_ENABLED : RepackagedAndroidViewView_DISABLED withInt:RepackagedAndroidViewView_ENABLED_MASK];
  
#line 7460
  [self refreshDrawableState];
  
#line 7464
  [self invalidateWithBoolean:YES];
  
#line 7466
  if (!enabled) {
    RepackagedAndroidViewView_cancelPendingInputEvents(self);
  }
}


#line 7482
- (void)setFocusableWithBoolean:(jboolean)focusable {
  if (!focusable) {
    [self setFlagsWithInt:0 withInt:RepackagedAndroidViewView_FOCUSABLE_IN_TOUCH_MODE];
  }
  [self setFlagsWithInt:focusable ? RepackagedAndroidViewView_FOCUSABLE : RepackagedAndroidViewView_NOT_FOCUSABLE withInt:RepackagedAndroidViewView_FOCUSABLE_MASK];
}


#line 7500
- (void)setFocusableInTouchModeWithBoolean:(jboolean)focusableInTouchMode {
  
#line 7505
  [self setFlagsWithInt:focusableInTouchMode ? RepackagedAndroidViewView_FOCUSABLE_IN_TOUCH_MODE : 0 withInt:RepackagedAndroidViewView_FOCUSABLE_IN_TOUCH_MODE];
  if (focusableInTouchMode) {
    [self setFlagsWithInt:RepackagedAndroidViewView_FOCUSABLE withInt:RepackagedAndroidViewView_FOCUSABLE_MASK];
  }
}


#line 7523
- (void)setSoundEffectsEnabledWithBoolean:(jboolean)soundEffectsEnabled {
  [self setFlagsWithInt:soundEffectsEnabled ? RepackagedAndroidViewView_SOUND_EFFECTS_ENABLED : 0 withInt:RepackagedAndroidViewView_SOUND_EFFECTS_ENABLED];
}


#line 7536
- (jboolean)isSoundEffectsEnabled {
  return RepackagedAndroidViewView_SOUND_EFFECTS_ENABLED == (mViewFlags_ & RepackagedAndroidViewView_SOUND_EFFECTS_ENABLED);
}


#line 7552
- (void)setHapticFeedbackEnabledWithBoolean:(jboolean)hapticFeedbackEnabled {
  [self setFlagsWithInt:hapticFeedbackEnabled ? RepackagedAndroidViewView_HAPTIC_FEEDBACK_ENABLED : 0 withInt:RepackagedAndroidViewView_HAPTIC_FEEDBACK_ENABLED];
}


#line 7565
- (jboolean)isHapticFeedbackEnabled {
  return RepackagedAndroidViewView_HAPTIC_FEEDBACK_ENABLED == (mViewFlags_ & RepackagedAndroidViewView_HAPTIC_FEEDBACK_ENABLED);
}


#line 7588
- (jint)getRawLayoutDirection {
  return RShift32((mPrivateFlags2_ & RepackagedAndroidViewView_PFLAG2_LAYOUT_DIRECTION_MASK), RepackagedAndroidViewView_PFLAG2_LAYOUT_DIRECTION_MASK_SHIFT);
}


#line 7610
- (void)setLayoutDirectionWithInt:(jint)layoutDirection {
  if ([self getRawLayoutDirection] != layoutDirection) {
    
#line 7613
    mPrivateFlags2_ &= ~RepackagedAndroidViewView_PFLAG2_LAYOUT_DIRECTION_MASK;
    [self resetRtlProperties];
    
#line 7616
    mPrivateFlags2_ |=
#line 7617
    ((LShift32(layoutDirection, RepackagedAndroidViewView_PFLAG2_LAYOUT_DIRECTION_MASK_SHIFT)) & RepackagedAndroidViewView_PFLAG2_LAYOUT_DIRECTION_MASK);
    
#line 7619
    [self resolveRtlPropertiesIfNeeded];
    [self requestLayout];
    [self invalidateWithBoolean:YES];
  }
}


#line 7641
- (jint)getLayoutDirection {
  jint targetSdkVersion = ((RepackagedAndroidContentPmApplicationInfo *) nil_chk([((id<RepackagedAndroidContentContext>) nil_chk(RepackagedAndroidViewView_getContext(self))) getApplicationInfo]))->targetSdkVersion_;
  if (targetSdkVersion < RepackagedAndroidOsBuild_VERSION_CODES_JELLY_BEAN_MR1) {
    mPrivateFlags2_ |= RepackagedAndroidViewView_PFLAG2_LAYOUT_DIRECTION_RESOLVED;
    return RepackagedAndroidViewView_LAYOUT_DIRECTION_RESOLVED_DEFAULT;
  }
  return ((mPrivateFlags2_ & RepackagedAndroidViewView_PFLAG2_LAYOUT_DIRECTION_RESOLVED_RTL) ==
#line 7648
  RepackagedAndroidViewView_PFLAG2_LAYOUT_DIRECTION_RESOLVED_RTL) ? RepackagedAndroidViewView_LAYOUT_DIRECTION_RTL : RepackagedAndroidViewView_LAYOUT_DIRECTION_LTR;
}


#line 7660
- (jboolean)isLayoutRtl {
  return [self getLayoutDirection] == RepackagedAndroidViewView_LAYOUT_DIRECTION_RTL;
}


#line 7677
- (jboolean)hasTransientState {
  return (mPrivateFlags2_ & RepackagedAndroidViewView_PFLAG2_HAS_TRANSIENT_STATE) == RepackagedAndroidViewView_PFLAG2_HAS_TRANSIENT_STATE;
}


#line 7694
- (void)setHasTransientStateWithBoolean:(jboolean)hasTransientState {
  mTransientStateCount_ = hasTransientState ? mTransientStateCount_ + 1 :
#line 7696
  mTransientStateCount_ - 1;
  if (mTransientStateCount_ < 0) {
    mTransientStateCount_ = 0;
    RepackagedAndroidUtilLog_eWithNSString_withNSString_(RepackagedAndroidViewView_VIEW_LOG_TAG_, @"hasTransientState decremented below 0: unmatched pair of setHasTransientState calls");
  }
  else if ((hasTransientState && mTransientStateCount_ == 1) ||
#line 7702
  (!hasTransientState && mTransientStateCount_ == 0)) {
    
#line 7704
    mPrivateFlags2_ = (mPrivateFlags2_ & ~RepackagedAndroidViewView_PFLAG2_HAS_TRANSIENT_STATE) |
#line 7705
    (hasTransientState ? RepackagedAndroidViewView_PFLAG2_HAS_TRANSIENT_STATE : 0);
    if (mParent_ != nil) {
      @try {
        [mParent_ childHasTransientStateChangedWithRepackagedAndroidViewView:self withBoolean:hasTransientState];
      }
      @catch (
#line 7709
      JavaLangAbstractMethodError *e) {
        RepackagedAndroidUtilLog_eWithNSString_withNSString_withJavaLangThrowable_(RepackagedAndroidViewView_VIEW_LOG_TAG_, JreStrcat("$$", [[mParent_ getClass] getSimpleName], @" does not fully implement ViewParent"),
#line 7711
        e);
      }
    }
  }
}


#line 7720
- (jboolean)isAttachedToWindow {
  return mAttachInfo_ != nil;
}


#line 7728
- (jboolean)isLaidOut {
  return (mPrivateFlags3_ & RepackagedAndroidViewView_PFLAG3_IS_LAID_OUT) == RepackagedAndroidViewView_PFLAG3_IS_LAID_OUT;
}


#line 7742
- (void)setWillNotDrawWithBoolean:(jboolean)willNotDraw {
  [self setFlagsWithInt:willNotDraw ? RepackagedAndroidViewView_WILL_NOT_DRAW : 0 withInt:RepackagedAndroidViewView_DRAW_MASK];
}


#line 7752
- (jboolean)willNotDraw {
  return (mViewFlags_ & RepackagedAndroidViewView_DRAW_MASK) == RepackagedAndroidViewView_WILL_NOT_DRAW;
}


#line 7765
- (void)setWillNotCacheDrawingWithBoolean:(jboolean)willNotCacheDrawing {
  [self setFlagsWithInt:willNotCacheDrawing ? RepackagedAndroidViewView_WILL_NOT_CACHE_DRAWING : 0 withInt:RepackagedAndroidViewView_WILL_NOT_CACHE_DRAWING];
}


#line 7775
- (jboolean)willNotCacheDrawing {
  return (mViewFlags_ & RepackagedAndroidViewView_WILL_NOT_CACHE_DRAWING) == RepackagedAndroidViewView_WILL_NOT_CACHE_DRAWING;
}


#line 7788
- (jboolean)isClickable {
  return (mViewFlags_ & RepackagedAndroidViewView_CLICKABLE) == RepackagedAndroidViewView_CLICKABLE;
}


#line 7803
- (void)setClickableWithBoolean:(jboolean)clickable {
  [self setFlagsWithInt:clickable ? RepackagedAndroidViewView_CLICKABLE : 0 withInt:RepackagedAndroidViewView_CLICKABLE];
}


#line 7815
- (jboolean)isLongClickable {
  return (mViewFlags_ & RepackagedAndroidViewView_LONG_CLICKABLE) == RepackagedAndroidViewView_LONG_CLICKABLE;
}


#line 7829
- (void)setLongClickableWithBoolean:(jboolean)longClickable {
  [self setFlagsWithInt:longClickable ? RepackagedAndroidViewView_LONG_CLICKABLE : 0 withInt:RepackagedAndroidViewView_LONG_CLICKABLE];
}


#line 7840
- (jboolean)isContextClickable {
  return (mViewFlags_ & RepackagedAndroidViewView_CONTEXT_CLICKABLE) == RepackagedAndroidViewView_CONTEXT_CLICKABLE;
}


#line 7851
- (void)setContextClickableWithBoolean:(jboolean)contextClickable {
  [self setFlagsWithInt:contextClickable ? RepackagedAndroidViewView_CONTEXT_CLICKABLE : 0 withInt:RepackagedAndroidViewView_CONTEXT_CLICKABLE];
}


#line 7865
- (void)setPressedWithBoolean:(jboolean)pressed
                    withFloat:(jfloat)x
                    withFloat:(jfloat)y {
  RepackagedAndroidViewView_setPressedWithBoolean_withFloat_withFloat_(self, pressed, x, y);
}


#line 7882
- (void)setPressedWithBoolean:(jboolean)pressed {
  jboolean needsRefresh = pressed != ((mPrivateFlags_ & RepackagedAndroidViewView_PFLAG_PRESSED) == RepackagedAndroidViewView_PFLAG_PRESSED);
  
#line 7885
  if (pressed) {
    mPrivateFlags_ |= RepackagedAndroidViewView_PFLAG_PRESSED;
  }
  else {
    
#line 7888
    mPrivateFlags_ &= ~RepackagedAndroidViewView_PFLAG_PRESSED;
  }
  
#line 7891
  if (needsRefresh) {
    [self refreshDrawableState];
  }
  [self dispatchSetPressedWithBoolean:pressed];
}


#line 7904
- (void)dispatchSetPressedWithBoolean:(jboolean)pressed {
}


#line 7919
- (jboolean)isPressed {
  return (mPrivateFlags_ & RepackagedAndroidViewView_PFLAG_PRESSED) == RepackagedAndroidViewView_PFLAG_PRESSED;
}


#line 7934
- (jboolean)isAssistBlocked {
  return (mPrivateFlags3_ & RepackagedAndroidViewView_PFLAG3_ASSIST_BLOCKED) != 0;
}


#line 7953
- (void)setAssistBlockedWithBoolean:(jboolean)enabled {
  if (enabled) {
    mPrivateFlags3_ |= RepackagedAndroidViewView_PFLAG3_ASSIST_BLOCKED;
  }
  else {
    
#line 7957
    mPrivateFlags3_ &= ~RepackagedAndroidViewView_PFLAG3_ASSIST_BLOCKED;
  }
}


#line 7970
- (jboolean)isSaveEnabled {
  return (mViewFlags_ & RepackagedAndroidViewView_SAVE_DISABLED_MASK) != RepackagedAndroidViewView_SAVE_DISABLED;
}


#line 7990
- (void)setSaveEnabledWithBoolean:(jboolean)enabled {
  [self setFlagsWithInt:enabled ? 0 : RepackagedAndroidViewView_SAVE_DISABLED withInt:RepackagedAndroidViewView_SAVE_DISABLED_MASK];
}


#line 8005
- (jboolean)getFilterTouchesWhenObscured {
  return (mViewFlags_ & RepackagedAndroidViewView_FILTER_TOUCHES_WHEN_OBSCURED) != 0;
}


#line 8019
- (void)setFilterTouchesWhenObscuredWithBoolean:(jboolean)enabled {
  [self setFlagsWithInt:enabled ? RepackagedAndroidViewView_FILTER_TOUCHES_WHEN_OBSCURED : 0 withInt:
#line 8021
  RepackagedAndroidViewView_FILTER_TOUCHES_WHEN_OBSCURED];
}


#line 8034
- (jboolean)isSaveFromParentEnabled {
  return (mViewFlags_ & RepackagedAndroidViewView_PARENT_SAVE_DISABLED_MASK) != RepackagedAndroidViewView_PARENT_SAVE_DISABLED;
}


#line 8051
- (void)setSaveFromParentEnabledWithBoolean:(jboolean)enabled {
  [self setFlagsWithInt:enabled ? 0 : RepackagedAndroidViewView_PARENT_SAVE_DISABLED withInt:RepackagedAndroidViewView_PARENT_SAVE_DISABLED_MASK];
}


#line 8063
- (jboolean)isFocusable {
  return RepackagedAndroidViewView_isFocusable(self);
}


#line 8076
- (jboolean)isFocusableInTouchMode {
  return RepackagedAndroidViewView_isFocusableInTouchMode(self);
}


#line 8089
- (RepackagedAndroidViewView *)focusSearchWithInt:(jint)direction {
  if (mParent_ != nil) {
    return [mParent_ focusSearchWithRepackagedAndroidViewView:self withInt:direction];
  }
  else {
    
#line 8093
    return nil;
  }
}


#line 8108
- (jboolean)dispatchUnhandledMoveWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)focused
                                                       withInt:(jint)direction {
  return NO;
}


#line 8120
- (RepackagedAndroidViewView *)findUserSetNextFocusWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)root
                                                                         withInt:(jint)direction {
  switch (direction) {
    case RepackagedAndroidViewView_FOCUS_LEFT:
    if (mNextFocusLeftId_ == RepackagedAndroidViewView_NO_ID) return nil;
    return RepackagedAndroidViewView_findViewInsideOutShouldExistWithRepackagedAndroidViewView_withInt_(self, root, mNextFocusLeftId_);
    case RepackagedAndroidViewView_FOCUS_RIGHT:
    if (mNextFocusRightId_ == RepackagedAndroidViewView_NO_ID) return nil;
    return RepackagedAndroidViewView_findViewInsideOutShouldExistWithRepackagedAndroidViewView_withInt_(self, root, mNextFocusRightId_);
    case RepackagedAndroidViewView_FOCUS_UP:
    if (mNextFocusUpId_ == RepackagedAndroidViewView_NO_ID) return nil;
    return RepackagedAndroidViewView_findViewInsideOutShouldExistWithRepackagedAndroidViewView_withInt_(self, root, mNextFocusUpId_);
    case RepackagedAndroidViewView_FOCUS_DOWN:
    if (mNextFocusDownId_ == RepackagedAndroidViewView_NO_ID) return nil;
    return RepackagedAndroidViewView_findViewInsideOutShouldExistWithRepackagedAndroidViewView_withInt_(self, root, mNextFocusDownId_);
    case RepackagedAndroidViewView_FOCUS_FORWARD:
    if (mNextFocusForwardId_ == RepackagedAndroidViewView_NO_ID) return nil;
    return RepackagedAndroidViewView_findViewInsideOutShouldExistWithRepackagedAndroidViewView_withInt_(self, root, mNextFocusForwardId_);
    case RepackagedAndroidViewView_FOCUS_BACKWARD:
    {
      
#line 8138
      if (mID_ == RepackagedAndroidViewView_NO_ID) return nil;
      jint id_ = mID_;
      return RepackagedAndroidViewView_findViewByPredicateInsideOutWithRepackagedAndroidViewView_withRepackagedComAndroidInternalUtilPredicate_(nil_chk(root), self, new_RepackagedAndroidViewView_$13_initWithInt_(id_));
    }
  }
  
#line 8148
  return nil;
}


#line 8151
- (RepackagedAndroidViewView *)findViewInsideOutShouldExistWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)root
                                                                                 withInt:(jint)id_ {
  return RepackagedAndroidViewView_findViewInsideOutShouldExistWithRepackagedAndroidViewView_withInt_(self, root, id_);
}


#line 8170
- (JavaUtilArrayList *)getFocusablesWithInt:(jint)direction {
  JavaUtilArrayList *result = new_JavaUtilArrayList_initWithInt_(24);
  [self addFocusablesWithJavaUtilArrayList:result withInt:direction];
  return result;
}


#line 8184
- (void)addFocusablesWithJavaUtilArrayList:(JavaUtilArrayList *)views
                                   withInt:(jint)direction {
  [self addFocusablesWithJavaUtilArrayList:views withInt:direction withInt:RepackagedAndroidViewView_FOCUSABLES_TOUCH_MODE];
}


#line 8204
- (void)addFocusablesWithJavaUtilArrayList:(JavaUtilArrayList *)views
                                   withInt:(jint)direction
                                   withInt:(jint)focusableMode {
  
#line 8206
  if (views == nil) {
    return;
  }
  if (!RepackagedAndroidViewView_isFocusable(self)) {
    return;
  }
  if ((focusableMode & RepackagedAndroidViewView_FOCUSABLES_TOUCH_MODE) == RepackagedAndroidViewView_FOCUSABLES_TOUCH_MODE &&
#line 8213
  [self isInTouchMode] && !RepackagedAndroidViewView_isFocusableInTouchMode(self)) {
    return;
  }
  [((JavaUtilArrayList *) nil_chk(views)) addWithId:self];
}


#line 8234
- (void)findViewsWithTextWithJavaUtilArrayList:(JavaUtilArrayList *)outViews
                      withJavaLangCharSequence:(id<JavaLangCharSequence>)searched
                                       withInt:(jint)flags {
  
#line 8236
  if ([self getAccessibilityNodeProvider] != nil) {
    if ((flags & RepackagedAndroidViewView_FIND_VIEWS_WITH_ACCESSIBILITY_NODE_PROVIDERS) != 0) {
      [((JavaUtilArrayList *) nil_chk(outViews)) addWithId:self];
    }
  }
  else
#line 8240
  if ((flags & RepackagedAndroidViewView_FIND_VIEWS_WITH_CONTENT_DESCRIPTION) != 0 &&
#line 8241
  (searched != nil && [searched length] > 0) &&
#line 8242
  (mContentDescription_ != nil && [mContentDescription_ length] > 0)) {
    NSString *searchedLowerCase = [((NSString *) nil_chk([searched description])) lowercaseString];
    NSString *contentDescriptionLowerCase = [((NSString *) nil_chk([mContentDescription_ description])) lowercaseString];
    if ([((NSString *) nil_chk(contentDescriptionLowerCase)) contains:searchedLowerCase]) {
      [((JavaUtilArrayList *) nil_chk(outViews)) addWithId:self];
    }
  }
}


#line 8257
- (JavaUtilArrayList *)getTouchables {
  JavaUtilArrayList *result = new_JavaUtilArrayList_init();
  [self addTouchablesWithJavaUtilArrayList:result];
  return result;
}


#line 8269
- (void)addTouchablesWithJavaUtilArrayList:(JavaUtilArrayList *)views {
  jint viewFlags = mViewFlags_;
  
#line 8272
  if (((viewFlags & RepackagedAndroidViewView_CLICKABLE) == RepackagedAndroidViewView_CLICKABLE || (viewFlags & RepackagedAndroidViewView_LONG_CLICKABLE) == RepackagedAndroidViewView_LONG_CLICKABLE ||
#line 8273
  (viewFlags & RepackagedAndroidViewView_CONTEXT_CLICKABLE) == RepackagedAndroidViewView_CONTEXT_CLICKABLE) &&
#line 8274
  (viewFlags & RepackagedAndroidViewView_ENABLED_MASK) == RepackagedAndroidViewView_ENABLED) {
    [((JavaUtilArrayList *) nil_chk(views)) addWithId:self];
  }
}


#line 8284
- (jboolean)isAccessibilityFocused {
  return (mPrivateFlags2_ & RepackagedAndroidViewView_PFLAG2_ACCESSIBILITY_FOCUSED) != 0;
}


#line 8302
- (jboolean)requestAccessibilityFocus {
  RepackagedAndroidViewAccessibilityAccessibilityManager *manager = RepackagedAndroidViewAccessibilityAccessibilityManager_getInstanceWithRepackagedAndroidContentContext_(mContext_);
  if (![((RepackagedAndroidViewAccessibilityAccessibilityManager *) nil_chk(manager)) isEnabled] || ![manager isTouchExplorationEnabled]) {
    return NO;
  }
  if ((mViewFlags_ & RepackagedAndroidViewView_VISIBILITY_MASK) != RepackagedAndroidViewView_VISIBLE) {
    return NO;
  }
  if ((mPrivateFlags2_ & RepackagedAndroidViewView_PFLAG2_ACCESSIBILITY_FOCUSED) == 0) {
    mPrivateFlags2_ |= RepackagedAndroidViewView_PFLAG2_ACCESSIBILITY_FOCUSED;
    RepackagedAndroidViewViewRootImpl *viewRootImpl = [self getViewRootImpl];
    if (viewRootImpl != nil) {
      [viewRootImpl setAccessibilityFocusWithId:self withId:nil];
    }
    [self invalidate];
    [self sendAccessibilityEventWithInt:RepackagedAndroidViewAccessibilityAccessibilityEvent_TYPE_VIEW_ACCESSIBILITY_FOCUSED];
    return YES;
  }
  return NO;
}


#line 8331
- (void)clearAccessibilityFocus {
  [self clearAccessibilityFocusNoCallbacks];
  
#line 8335
  RepackagedAndroidViewViewRootImpl *viewRootImpl = [self getViewRootImpl];
  if (viewRootImpl != nil) {
    RepackagedAndroidViewView *focusHost = [viewRootImpl getAccessibilityFocusedHost];
    if (focusHost != nil && RepackagedAndroidViewViewRootImpl_isViewDescendantOfWithRepackagedAndroidViewView_withRepackagedAndroidViewView_(focusHost, self)) {
      [viewRootImpl setAccessibilityFocusWithId:nil withId:nil];
    }
  }
}

- (void)sendAccessibilityHoverEventWithInt:(jint)eventType {
  RepackagedAndroidViewView_sendAccessibilityHoverEventWithInt_(self, eventType);
}


#line 8375
- (void)clearAccessibilityFocusNoCallbacks {
  if ((mPrivateFlags2_ & RepackagedAndroidViewView_PFLAG2_ACCESSIBILITY_FOCUSED) != 0) {
    mPrivateFlags2_ &= ~RepackagedAndroidViewView_PFLAG2_ACCESSIBILITY_FOCUSED;
    [self invalidate];
    [self sendAccessibilityEventWithInt:RepackagedAndroidViewAccessibilityAccessibilityEvent_TYPE_VIEW_ACCESSIBILITY_FOCUS_CLEARED];
  }
}


#line 8399
- (jboolean)requestFocus {
  return RepackagedAndroidViewView_requestFocus(self);
}


#line 8420
- (jboolean)requestFocusWithInt:(jint)direction {
  return RepackagedAndroidViewView_requestFocusWithInt_(self, direction);
}


#line 8453
- (jboolean)requestFocusWithInt:(jint)direction
withRepackagedAndroidGraphicsRect:(RepackagedAndroidGraphicsRect *)previouslyFocusedRect {
  return RepackagedAndroidViewView_requestFocusNoSearchWithInt_withRepackagedAndroidGraphicsRect_(self, direction, previouslyFocusedRect);
}


#line 8457
- (jboolean)requestFocusNoSearchWithInt:(jint)direction
      withRepackagedAndroidGraphicsRect:(RepackagedAndroidGraphicsRect *)previouslyFocusedRect {
  return RepackagedAndroidViewView_requestFocusNoSearchWithInt_withRepackagedAndroidGraphicsRect_(self, direction, previouslyFocusedRect);
}


#line 8489
- (jboolean)requestFocusFromTouch {
  
#line 8491
  if ([self isInTouchMode]) {
    RepackagedAndroidViewViewRootImpl *viewRoot = [self getViewRootImpl];
    if (viewRoot != nil) {
      [viewRoot ensureTouchModeWithBoolean:NO];
    }
  }
  return RepackagedAndroidViewView_requestFocusWithInt_(self, RepackagedAndroidViewView_FOCUS_DOWN);
}


#line 8503
- (jboolean)hasAncestorThatBlocksDescendantFocus {
  return RepackagedAndroidViewView_hasAncestorThatBlocksDescendantFocus(self);
}


#line 8539
- (jint)getImportantForAccessibility {
  return RShift32((mPrivateFlags2_ & RepackagedAndroidViewView_PFLAG2_IMPORTANT_FOR_ACCESSIBILITY_MASK),
#line 8541
  RepackagedAndroidViewView_PFLAG2_IMPORTANT_FOR_ACCESSIBILITY_SHIFT);
}


#line 8572
- (void)setAccessibilityLiveRegionWithInt:(jint)mode {
  if (mode != [self getAccessibilityLiveRegion]) {
    mPrivateFlags2_ &= ~RepackagedAndroidViewView_PFLAG2_ACCESSIBILITY_LIVE_REGION_MASK;
    mPrivateFlags2_ |= (LShift32(mode, RepackagedAndroidViewView_PFLAG2_ACCESSIBILITY_LIVE_REGION_SHIFT)) &
#line 8576
    RepackagedAndroidViewView_PFLAG2_ACCESSIBILITY_LIVE_REGION_MASK;
    [self notifyViewAccessibilityStateChangedIfNeededWithInt:
#line 8578
    RepackagedAndroidViewAccessibilityAccessibilityEvent_CONTENT_CHANGE_TYPE_UNDEFINED];
  }
}


#line 8591
- (jint)getAccessibilityLiveRegion {
  return RShift32((mPrivateFlags2_ & RepackagedAndroidViewView_PFLAG2_ACCESSIBILITY_LIVE_REGION_MASK),
#line 8593
  RepackagedAndroidViewView_PFLAG2_ACCESSIBILITY_LIVE_REGION_SHIFT);
}


#line 8610
- (void)setImportantForAccessibilityWithInt:(jint)mode {
  jint oldMode = [self getImportantForAccessibility];
  if (mode != oldMode) {
    
#line 8616
    jboolean maySkipNotify = oldMode == RepackagedAndroidViewView_IMPORTANT_FOR_ACCESSIBILITY_AUTO ||
#line 8617
    mode == RepackagedAndroidViewView_IMPORTANT_FOR_ACCESSIBILITY_AUTO;
    jboolean oldIncludeForAccessibility = maySkipNotify && [self includeForAccessibility];
    mPrivateFlags2_ &= ~RepackagedAndroidViewView_PFLAG2_IMPORTANT_FOR_ACCESSIBILITY_MASK;
    mPrivateFlags2_ |= (LShift32(mode, RepackagedAndroidViewView_PFLAG2_IMPORTANT_FOR_ACCESSIBILITY_SHIFT)) &
#line 8621
    RepackagedAndroidViewView_PFLAG2_IMPORTANT_FOR_ACCESSIBILITY_MASK;
    if (!maySkipNotify || oldIncludeForAccessibility != [self includeForAccessibility]) {
      [self notifySubtreeAccessibilityStateChangedIfNeeded];
    }
    else {
      
#line 8625
      [self notifyViewAccessibilityStateChangedIfNeededWithInt:
#line 8626
      RepackagedAndroidViewAccessibilityAccessibilityEvent_CONTENT_CHANGE_TYPE_UNDEFINED];
    }
  }
}


#line 8665
- (jboolean)isImportantForAccessibility {
  jint mode = RShift32((mPrivateFlags2_ & RepackagedAndroidViewView_PFLAG2_IMPORTANT_FOR_ACCESSIBILITY_MASK),
#line 8667
  RepackagedAndroidViewView_PFLAG2_IMPORTANT_FOR_ACCESSIBILITY_SHIFT);
  if (mode == RepackagedAndroidViewView_IMPORTANT_FOR_ACCESSIBILITY_NO ||
#line 8669
  mode == RepackagedAndroidViewView_IMPORTANT_FOR_ACCESSIBILITY_NO_HIDE_DESCENDANTS) {
    return NO;
  }
  
#line 8674
  id<RepackagedAndroidViewViewParent> parent = mParent_;
  while ([parent isKindOfClass:[RepackagedAndroidViewView class]]) {
    if ([((RepackagedAndroidViewView *) nil_chk(((RepackagedAndroidViewView *) check_class_cast(parent, [RepackagedAndroidViewView class])))) getImportantForAccessibility] ==
#line 8677
    RepackagedAndroidViewView_IMPORTANT_FOR_ACCESSIBILITY_NO_HIDE_DESCENDANTS) {
      return NO;
    }
    parent = [((id<RepackagedAndroidViewViewParent>) nil_chk(parent)) getParent];
  }
  
#line 8683
  return mode == RepackagedAndroidViewView_IMPORTANT_FOR_ACCESSIBILITY_YES || [self isActionableForAccessibility] || RepackagedAndroidViewView_hasListenersForAccessibility(self) ||
#line 8684
  [self getAccessibilityNodeProvider] != nil ||
#line 8685
  [self getAccessibilityLiveRegion] != RepackagedAndroidViewView_ACCESSIBILITY_LIVE_REGION_NONE;
}


#line 8695
- (id<RepackagedAndroidViewViewParent>)getParentForAccessibility {
  if ([mParent_ isKindOfClass:[RepackagedAndroidViewView class]]) {
    RepackagedAndroidViewView *parentView = (RepackagedAndroidViewView *) check_class_cast(mParent_, [RepackagedAndroidViewView class]);
    if ([((RepackagedAndroidViewView *) nil_chk(parentView)) includeForAccessibility]) {
      return mParent_;
    }
    else {
      
#line 8701
      return [((id<RepackagedAndroidViewViewParent>) nil_chk(mParent_)) getParentForAccessibility];
    }
  }
  return nil;
}


#line 8715
- (void)addChildrenForAccessibilityWithJavaUtilArrayList:(JavaUtilArrayList *)outChildren {
}


#line 8729
- (jboolean)includeForAccessibility {
  if (mAttachInfo_ != nil) {
    return (mAttachInfo_->mAccessibilityFetchFlags_ &
#line 8732
    RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_FLAG_INCLUDE_NOT_IMPORTANT_VIEWS) != 0 ||
#line 8733
    [self isImportantForAccessibility];
  }
  return NO;
}


#line 8747
- (jboolean)isActionableForAccessibility {
  return ([self isClickable] || [self isLongClickable] || RepackagedAndroidViewView_isFocusable(self));
}


#line 8757
- (jboolean)hasListenersForAccessibility {
  return RepackagedAndroidViewView_hasListenersForAccessibility(self);
}


#line 8775
- (void)notifyViewAccessibilityStateChangedIfNeededWithInt:(jint)changeType {
  if (![((RepackagedAndroidViewAccessibilityAccessibilityManager *) nil_chk(RepackagedAndroidViewAccessibilityAccessibilityManager_getInstanceWithRepackagedAndroidContentContext_(mContext_))) isEnabled] || mAttachInfo_ == nil) {
    return;
  }
  if (mSendViewStateChangedAccessibilityEvent_ == nil) {
    mSendViewStateChangedAccessibilityEvent_ = new_RepackagedAndroidViewView_SendViewStateChangedAccessibilityEvent_initWithRepackagedAndroidViewView_(self);
  }
  
#line 8783
  [((RepackagedAndroidViewView_SendViewStateChangedAccessibilityEvent *) nil_chk(mSendViewStateChangedAccessibilityEvent_)) runOrPostWithInt:changeType];
}


#line 8797
- (void)notifySubtreeAccessibilityStateChangedIfNeeded {
  if (![((RepackagedAndroidViewAccessibilityAccessibilityManager *) nil_chk(RepackagedAndroidViewAccessibilityAccessibilityManager_getInstanceWithRepackagedAndroidContentContext_(mContext_))) isEnabled] || mAttachInfo_ == nil) {
    return;
  }
  if ((mPrivateFlags2_ & RepackagedAndroidViewView_PFLAG2_SUBTREE_ACCESSIBILITY_STATE_CHANGED) == 0) {
    mPrivateFlags2_ |= RepackagedAndroidViewView_PFLAG2_SUBTREE_ACCESSIBILITY_STATE_CHANGED;
    if (mParent_ != nil) {
      @try {
        [mParent_ notifySubtreeAccessibilityStateChangedWithRepackagedAndroidViewView:
#line 8806
        self withRepackagedAndroidViewView:self withInt:RepackagedAndroidViewAccessibilityAccessibilityEvent_CONTENT_CHANGE_TYPE_SUBTREE];
      }
      @catch (
#line 8807
      JavaLangAbstractMethodError *e) {
        RepackagedAndroidUtilLog_eWithNSString_withNSString_withJavaLangThrowable_(RepackagedAndroidViewView_VIEW_LOG_TAG_, JreStrcat("$$", [[mParent_ getClass] getSimpleName], @" does not fully implement ViewParent"),
#line 8809
        e);
      }
    }
  }
}


#line 8825
- (void)setTransitionVisibilityWithInt:(jint)visibility {
  mViewFlags_ = (mViewFlags_ & ~RepackagedAndroidViewView_VISIBILITY_MASK) | visibility;
}


#line 8833
- (void)resetSubtreeAccessibilityStateChanged {
  mPrivateFlags2_ &= ~RepackagedAndroidViewView_PFLAG2_SUBTREE_ACCESSIBILITY_STATE_CHANGED;
}


#line 8856
- (jboolean)dispatchNestedPrePerformAccessibilityActionWithInt:(jint)action
                                 withRepackagedAndroidOsBundle:(RepackagedAndroidOsBundle *)arguments {
  for (id<RepackagedAndroidViewViewParent> p = RepackagedAndroidViewView_getParent(self); p != nil; p = [p getParent]) {
    if ([((id<RepackagedAndroidViewViewParent>) nil_chk(p)) onNestedPrePerformAccessibilityActionWithRepackagedAndroidViewView:self withInt:action withRepackagedAndroidOsBundle:arguments]) {
      return YES;
    }
  }
  return NO;
}


#line 8884
- (jboolean)performAccessibilityActionWithInt:(jint)action
                withRepackagedAndroidOsBundle:(RepackagedAndroidOsBundle *)arguments {
  if (mAccessibilityDelegate_ != nil) {
    return [mAccessibilityDelegate_ performAccessibilityActionWithRepackagedAndroidViewView:self withInt:action withRepackagedAndroidOsBundle:arguments];
  }
  else {
    
#line 8888
    return [self performAccessibilityActionInternalWithInt:action withRepackagedAndroidOsBundle:arguments];
  }
}


#line 8899
- (jboolean)performAccessibilityActionInternalWithInt:(jint)action
                        withRepackagedAndroidOsBundle:(RepackagedAndroidOsBundle *)arguments {
  if ([self isNestedScrollingEnabled] &&
#line 8901
  (action == RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_ACTION_SCROLL_BACKWARD ||
#line 8902
  action == RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_ACTION_SCROLL_FORWARD ||
#line 8903
  action == RepackagedComAndroidInternalR_id_accessibilityActionScrollUp ||
#line 8904
  action == RepackagedComAndroidInternalR_id_accessibilityActionScrollLeft ||
#line 8905
  action == RepackagedComAndroidInternalR_id_accessibilityActionScrollDown ||
#line 8906
  action == RepackagedComAndroidInternalR_id_accessibilityActionScrollRight)) {
    if ([self dispatchNestedPrePerformAccessibilityActionWithInt:action withRepackagedAndroidOsBundle:arguments]) {
      return YES;
    }
  }
  
#line 8912
  switch (action) {
    case RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_ACTION_CLICK:
    {
      
#line 8914
      if ([self isClickable]) {
        [self performClick];
        return YES;
      }
    }
    
#line 8918
    break;
    case RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_ACTION_LONG_CLICK:
    {
      
#line 8920
      if ([self isLongClickable]) {
        [self performLongClick];
        return YES;
      }
    }
    
#line 8924
    break;
    case RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_ACTION_FOCUS:
    {
      
#line 8926
      if (![self hasFocus]) {
        
#line 8929
        [((RepackagedAndroidViewViewRootImpl *) nil_chk([self getViewRootImpl])) ensureTouchModeWithBoolean:NO];
        return RepackagedAndroidViewView_requestFocus(self);
      }
    }
    
#line 8932
    break;
    case RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_ACTION_CLEAR_FOCUS:
    {
      
#line 8934
      if ([self hasFocus]) {
        [self clearFocus];
        return ![self isFocused];
      }
    }
    
#line 8938
    break;
    case RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_ACTION_SELECT:
    {
      
#line 8940
      if (![self isSelected]) {
        [self setSelectedWithBoolean:YES];
        return [self isSelected];
      }
    }
    
#line 8944
    break;
    case RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_ACTION_CLEAR_SELECTION:
    {
      
#line 8946
      if ([self isSelected]) {
        [self setSelectedWithBoolean:NO];
        return ![self isSelected];
      }
    }
    
#line 8950
    break;
    case RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_ACTION_ACCESSIBILITY_FOCUS:
    {
      
#line 8952
      if (![self isAccessibilityFocused]) {
        return [self requestAccessibilityFocus];
      }
    }
    
#line 8955
    break;
    case RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_ACTION_CLEAR_ACCESSIBILITY_FOCUS:
    {
      
#line 8957
      if ([self isAccessibilityFocused]) {
        [self clearAccessibilityFocus];
        return YES;
      }
    }
    
#line 8961
    break;
    case RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_ACTION_NEXT_AT_MOVEMENT_GRANULARITY:
    {
      
#line 8963
      if (arguments != nil) {
        jint granularity = [arguments getIntWithNSString:RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_get_ACTION_ARGUMENT_MOVEMENT_GRANULARITY_INT_()];
        
#line 8966
        jboolean extendSelection = [arguments getBooleanWithNSString:RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_get_ACTION_ARGUMENT_EXTEND_SELECTION_BOOLEAN_()];
        
#line 8968
        return RepackagedAndroidViewView_traverseAtGranularityWithInt_withBoolean_withBoolean_(self, granularity, YES, extendSelection);
      }
    }
    
#line 8970
    break;
    case RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_ACTION_PREVIOUS_AT_MOVEMENT_GRANULARITY:
    {
      
#line 8972
      if (arguments != nil) {
        jint granularity = [arguments getIntWithNSString:RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_get_ACTION_ARGUMENT_MOVEMENT_GRANULARITY_INT_()];
        
#line 8975
        jboolean extendSelection = [arguments getBooleanWithNSString:RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_get_ACTION_ARGUMENT_EXTEND_SELECTION_BOOLEAN_()];
        
#line 8977
        return RepackagedAndroidViewView_traverseAtGranularityWithInt_withBoolean_withBoolean_(self, granularity, NO, extendSelection);
      }
    }
    
#line 8979
    break;
    case RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_ACTION_SET_SELECTION:
    {
      
#line 8981
      id<JavaLangCharSequence> text = [self getIterableTextForAccessibility];
      if (text == nil) {
        return NO;
      }
      jint start = (arguments != nil) ? [arguments getIntWithNSString:RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_get_ACTION_ARGUMENT_SELECTION_START_INT_() withInt:
#line 8986
      -1] : -1;
      jint end = (arguments != nil) ? [arguments getIntWithNSString:RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_get_ACTION_ARGUMENT_SELECTION_END_INT_() withInt:
#line 8988
      -1] : -1;
      
#line 8990
      if (([self getAccessibilitySelectionStart] != start ||
#line 8991
      [self getAccessibilitySelectionEnd] != end) &&
#line 8992
      (start == end)) {
        [self setAccessibilitySelectionWithInt:start withInt:end];
        [self notifyViewAccessibilityStateChangedIfNeededWithInt:
#line 8995
        RepackagedAndroidViewAccessibilityAccessibilityEvent_CONTENT_CHANGE_TYPE_UNDEFINED];
        return YES;
      }
    }
    
#line 8998
    break;
    case RepackagedComAndroidInternalR_id_accessibilityActionShowOnScreen:
    {
      
#line 9000
      if (mAttachInfo_ != nil) {
        RepackagedAndroidGraphicsRect *r = mAttachInfo_->mTmpInvalRect_;
        [self getDrawingRectWithRepackagedAndroidGraphicsRect:r];
        return [self requestRectangleOnScreenWithRepackagedAndroidGraphicsRect:r withBoolean:YES];
      }
    }
    
#line 9005
    break;
    case RepackagedComAndroidInternalR_id_accessibilityActionContextClick:
    {
      
#line 9007
      if ([self isContextClickable]) {
        [self performContextClick];
        return YES;
      }
    }
    
#line 9011
    break;
  }
  return NO;
}


#line 9016
- (jboolean)traverseAtGranularityWithInt:(jint)granularity
                             withBoolean:(jboolean)forward
                             withBoolean:(jboolean)extendSelection {
  return RepackagedAndroidViewView_traverseAtGranularityWithInt_withBoolean_withBoolean_(self, granularity, forward, extendSelection);
}


#line 9061
- (id<JavaLangCharSequence>)getIterableTextForAccessibility {
  return [self getContentDescription];
}


#line 9072
- (jboolean)isAccessibilitySelectionExtendable {
  return NO;
}


#line 9079
- (jint)getAccessibilitySelectionStart {
  return mAccessibilityCursorPosition_;
}


#line 9086
- (jint)getAccessibilitySelectionEnd {
  return [self getAccessibilitySelectionStart];
}


#line 9093
- (void)setAccessibilitySelectionWithInt:(jint)start
                                 withInt:(jint)end {
  if (start == end && end == mAccessibilityCursorPosition_) {
    return;
  }
  if (start >= 0 && start == end && end <= [((id<JavaLangCharSequence>) nil_chk([self getIterableTextForAccessibility])) length]) {
    mAccessibilityCursorPosition_ = start;
  }
  else {
    
#line 9100
    mAccessibilityCursorPosition_ = RepackagedAndroidViewView_ACCESSIBILITY_CURSOR_POSITION_UNDEFINED;
  }
  [self sendAccessibilityEventWithInt:RepackagedAndroidViewAccessibilityAccessibilityEvent_TYPE_VIEW_TEXT_SELECTION_CHANGED];
}


#line 9105
- (void)sendViewTextTraversedAtGranularityEventWithInt:(jint)action
                                               withInt:(jint)granularity
                                               withInt:(jint)fromIndex
                                               withInt:(jint)toIndex {
  RepackagedAndroidViewView_sendViewTextTraversedAtGranularityEventWithInt_withInt_withInt_withInt_(self, action, granularity, fromIndex, toIndex);
}


#line 9124
- (RepackagedAndroidViewAccessibilityIterators_TextSegmentIterator *)getIteratorForGranularityWithInt:(jint)granularity {
  switch (granularity) {
    case RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_MOVEMENT_GRANULARITY_CHARACTER:
    {
      
#line 9127
      id<JavaLangCharSequence> text = [self getIterableTextForAccessibility];
      if (text != nil && [text length] > 0) {
        RepackagedAndroidViewAccessibilityIterators_CharacterTextSegmentIterator *iterator = RepackagedAndroidViewAccessibilityIterators_CharacterTextSegmentIterator_getInstanceWithJavaUtilLocale_((
#line 9131
        [((RepackagedAndroidContentResResources *) nil_chk([((id<RepackagedAndroidContentContext>) nil_chk(mContext_)) getResources])) getConfiguration], RepackagedAndroidContentResConfiguration_locale_));
        [((RepackagedAndroidViewAccessibilityIterators_CharacterTextSegmentIterator *) nil_chk(iterator)) initialize__WithNSString:[text description]];
        return iterator;
      }
    }
    
#line 9135
    break;
    case RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_MOVEMENT_GRANULARITY_WORD:
    {
      
#line 9137
      id<JavaLangCharSequence> text = [self getIterableTextForAccessibility];
      if (text != nil && [text length] > 0) {
        RepackagedAndroidViewAccessibilityIterators_WordTextSegmentIterator *iterator = RepackagedAndroidViewAccessibilityIterators_WordTextSegmentIterator_getInstanceWithJavaUtilLocale_((
#line 9141
        [((RepackagedAndroidContentResResources *) nil_chk([((id<RepackagedAndroidContentContext>) nil_chk(mContext_)) getResources])) getConfiguration], RepackagedAndroidContentResConfiguration_locale_));
        [((RepackagedAndroidViewAccessibilityIterators_WordTextSegmentIterator *) nil_chk(iterator)) initialize__WithNSString:[text description]];
        return iterator;
      }
    }
    
#line 9145
    break;
    case RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_MOVEMENT_GRANULARITY_PARAGRAPH:
    {
      
#line 9147
      id<JavaLangCharSequence> text = [self getIterableTextForAccessibility];
      if (text != nil && [text length] > 0) {
        RepackagedAndroidViewAccessibilityIterators_ParagraphTextSegmentIterator *iterator = RepackagedAndroidViewAccessibilityIterators_ParagraphTextSegmentIterator_getInstance();
        
#line 9151
        [((RepackagedAndroidViewAccessibilityIterators_ParagraphTextSegmentIterator *) nil_chk(iterator)) initialize__WithNSString:[text description]];
        return iterator;
      }
    }
    
#line 9154
    break;
  }
  return nil;
}


#line 9162
- (void)dispatchStartTemporaryDetach {
  [self onStartTemporaryDetach];
}


#line 9172
- (void)onStartTemporaryDetach {
  RepackagedAndroidViewView_removeUnsetPressCallback(self);
  mPrivateFlags_ |= RepackagedAndroidViewView_PFLAG_CANCEL_NEXT_UP_EVENT;
}


#line 9180
- (void)dispatchFinishTemporaryDetach {
  [self onFinishTemporaryDetach];
}


#line 9188
- (void)onFinishTemporaryDetach {
}


#line 9198
- (RepackagedAndroidViewKeyEvent_DispatcherState *)getKeyDispatcherState {
  return mAttachInfo_ != nil ? mAttachInfo_->mKeyDispatchState_ : nil;
}


#line 9212
- (jboolean)dispatchKeyEventPreImeWithRepackagedAndroidViewKeyEvent:(RepackagedAndroidViewKeyEvent *)event {
  return [self onKeyPreImeWithInt:[((RepackagedAndroidViewKeyEvent *) nil_chk(event)) getKeyCode] withRepackagedAndroidViewKeyEvent:event];
}


#line 9226
- (jboolean)dispatchKeyEventWithRepackagedAndroidViewKeyEvent:(RepackagedAndroidViewKeyEvent *)event {
  if (mInputEventConsistencyVerifier_ != nil) {
    [mInputEventConsistencyVerifier_ onKeyEventWithRepackagedAndroidViewKeyEvent:event withInt:0];
  }
  
#line 9233
  RepackagedAndroidViewView_ListenerInfo *li = mListenerInfo_;
  if (li != nil && li->mOnKeyListener_ != nil && (mViewFlags_ & RepackagedAndroidViewView_ENABLED_MASK) == RepackagedAndroidViewView_ENABLED &&
#line 9235
  [li->mOnKeyListener_ onKeyWithRepackagedAndroidViewView:self withInt:[((RepackagedAndroidViewKeyEvent *) nil_chk(event)) getKeyCode] withRepackagedAndroidViewKeyEvent:event]) {
    return YES;
  }
  
#line 9239
  if ([((RepackagedAndroidViewKeyEvent *) nil_chk(event)) dispatchWithRepackagedAndroidViewView:self withRepackagedAndroidViewKeyEvent_DispatcherState:mAttachInfo_ != nil ?
#line 9240
  mAttachInfo_->mKeyDispatchState_ : nil withRepackagedAndroidViewView:self]) {
    return YES;
  }
  
#line 9244
  if (mInputEventConsistencyVerifier_ != nil) {
    [mInputEventConsistencyVerifier_ onUnhandledEventWithRepackagedAndroidViewKeyEvent:event withInt:0];
  }
  return NO;
}


#line 9256
- (jboolean)dispatchKeyShortcutEventWithRepackagedAndroidViewKeyEvent:(RepackagedAndroidViewKeyEvent *)event {
  return [self onKeyShortcutWithInt:[((RepackagedAndroidViewKeyEvent *) nil_chk(event)) getKeyCode] withRepackagedAndroidViewKeyEvent:event];
}


#line 9267
- (jboolean)dispatchTouchEventWithRepackagedAndroidViewMotionEvent:(RepackagedAndroidViewMotionEvent *)event {
  
#line 9269
  if ([((RepackagedAndroidViewMotionEvent *) nil_chk(event)) isTargetAccessibilityFocus]) {
    
#line 9271
    if (![self isAccessibilityFocusedViewOrHost]) {
      return NO;
    }
    
#line 9275
    [event setTargetAccessibilityFocusWithBoolean:NO];
  }
  
#line 9278
  jboolean result = NO;
  
#line 9280
  if (mInputEventConsistencyVerifier_ != nil) {
    [mInputEventConsistencyVerifier_ onTouchEventWithRepackagedAndroidViewMotionEvent:event withInt:0];
  }
  
#line 9284
  jint actionMasked = [event getActionMasked];
  if (actionMasked == RepackagedAndroidViewMotionEvent_ACTION_DOWN) {
    
#line 9287
    [self stopNestedScroll];
  }
  
#line 9290
  if ([self onFilterTouchEventForSecurityWithRepackagedAndroidViewMotionEvent:event]) {
    
#line 9292
    RepackagedAndroidViewView_ListenerInfo *li = mListenerInfo_;
    if (li != nil && li->mOnTouchListener_ != nil &&
#line 9294
    (mViewFlags_ & RepackagedAndroidViewView_ENABLED_MASK) == RepackagedAndroidViewView_ENABLED &&
#line 9295
    [li->mOnTouchListener_ onTouchWithRepackagedAndroidViewView:self withRepackagedAndroidViewMotionEvent:event]) {
      result = YES;
    }
    
#line 9299
    if (!result && [self onTouchEventWithRepackagedAndroidViewMotionEvent:event]) {
      result = YES;
    }
  }
  
#line 9304
  if (!result && mInputEventConsistencyVerifier_ != nil) {
    [mInputEventConsistencyVerifier_ onUnhandledEventWithRepackagedAndroidViewMotionEvent:event withInt:0];
  }
  
#line 9311
  if (actionMasked == RepackagedAndroidViewMotionEvent_ACTION_UP ||
#line 9312
  actionMasked == RepackagedAndroidViewMotionEvent_ACTION_CANCEL ||
#line 9313
  (actionMasked == RepackagedAndroidViewMotionEvent_ACTION_DOWN && !result)) {
    [self stopNestedScroll];
  }
  
#line 9317
  return result;
}


#line 9320
- (jboolean)isAccessibilityFocusedViewOrHost {
  return [self isAccessibilityFocused] || ([self getViewRootImpl] != nil && [((RepackagedAndroidViewViewRootImpl *) nil_chk([self getViewRootImpl])) getAccessibilityFocusedHost] ==
#line 9322
  self);
}


#line 9333
- (jboolean)onFilterTouchEventForSecurityWithRepackagedAndroidViewMotionEvent:(RepackagedAndroidViewMotionEvent *)event {
  
#line 9335
  if ((mViewFlags_ & RepackagedAndroidViewView_FILTER_TOUCHES_WHEN_OBSCURED) != 0 &&
#line 9336
  ([((RepackagedAndroidViewMotionEvent *) nil_chk(event)) getFlags] & RepackagedAndroidViewMotionEvent_FLAG_WINDOW_IS_OBSCURED) != 0) {
    
#line 9338
    return NO;
  }
  return YES;
}


#line 9349
- (jboolean)dispatchTrackballEventWithRepackagedAndroidViewMotionEvent:(RepackagedAndroidViewMotionEvent *)event {
  if (mInputEventConsistencyVerifier_ != nil) {
    [mInputEventConsistencyVerifier_ onTrackballEventWithRepackagedAndroidViewMotionEvent:event withInt:0];
  }
  
#line 9354
  return [self onTrackballEventWithRepackagedAndroidViewMotionEvent:event];
}


#line 9369
- (jboolean)dispatchGenericMotionEventWithRepackagedAndroidViewMotionEvent:(RepackagedAndroidViewMotionEvent *)event {
  if (mInputEventConsistencyVerifier_ != nil) {
    [mInputEventConsistencyVerifier_ onGenericMotionEventWithRepackagedAndroidViewMotionEvent:event withInt:0];
  }
  
#line 9374
  jint source = [((RepackagedAndroidViewMotionEvent *) nil_chk(event)) getSource];
  if ((source & RepackagedAndroidViewInputDevice_SOURCE_CLASS_POINTER) != 0) {
    jint action = [event getAction];
    if (action == RepackagedAndroidViewMotionEvent_ACTION_HOVER_ENTER ||
#line 9378
    action == RepackagedAndroidViewMotionEvent_ACTION_HOVER_MOVE ||
#line 9379
    action == RepackagedAndroidViewMotionEvent_ACTION_HOVER_EXIT) {
      if ([self dispatchHoverEventWithRepackagedAndroidViewMotionEvent:event]) {
        return YES;
      }
    }
    else
#line 9383
    if ([self dispatchGenericPointerEventWithRepackagedAndroidViewMotionEvent:event]) {
      return YES;
    }
  }
  else
#line 9386
  if ([self dispatchGenericFocusedEventWithRepackagedAndroidViewMotionEvent:event]) {
    return YES;
  }
  
#line 9390
  if (RepackagedAndroidViewView_dispatchGenericMotionEventInternalWithRepackagedAndroidViewMotionEvent_(self, event)) {
    return YES;
  }
  
#line 9394
  if (mInputEventConsistencyVerifier_ != nil) {
    [mInputEventConsistencyVerifier_ onUnhandledEventWithRepackagedAndroidViewMotionEvent:event withInt:0];
  }
  return NO;
}


#line 9400
- (jboolean)dispatchGenericMotionEventInternalWithRepackagedAndroidViewMotionEvent:(RepackagedAndroidViewMotionEvent *)event {
  return RepackagedAndroidViewView_dispatchGenericMotionEventInternalWithRepackagedAndroidViewMotionEvent_(self, event);
}


#line 9454
- (jboolean)dispatchHoverEventWithRepackagedAndroidViewMotionEvent:(RepackagedAndroidViewMotionEvent *)event {
  RepackagedAndroidViewView_ListenerInfo *li = mListenerInfo_;
  
#line 9457
  if (li != nil && li->mOnHoverListener_ != nil &&
#line 9458
  (mViewFlags_ & RepackagedAndroidViewView_ENABLED_MASK) == RepackagedAndroidViewView_ENABLED &&
#line 9459
  [li->mOnHoverListener_ onHoverWithRepackagedAndroidViewView:self withRepackagedAndroidViewMotionEvent:event]) {
    return YES;
  }
  
#line 9463
  return [self onHoverEventWithRepackagedAndroidViewMotionEvent:event];
}


#line 9472
- (jboolean)hasHoveredChild {
  return NO;
}


#line 9486
- (jboolean)dispatchGenericPointerEventWithRepackagedAndroidViewMotionEvent:(RepackagedAndroidViewMotionEvent *)event {
  return NO;
}


#line 9500
- (jboolean)dispatchGenericFocusedEventWithRepackagedAndroidViewMotionEvent:(RepackagedAndroidViewMotionEvent *)event {
  return NO;
}


#line 9517
- (jboolean)dispatchPointerEventWithRepackagedAndroidViewMotionEvent:(RepackagedAndroidViewMotionEvent *)event {
  if ([((RepackagedAndroidViewMotionEvent *) nil_chk(event)) isTouchEvent]) {
    return [self dispatchTouchEventWithRepackagedAndroidViewMotionEvent:event];
  }
  else {
    
#line 9521
    return [self dispatchGenericMotionEventWithRepackagedAndroidViewMotionEvent:event];
  }
}


#line 9532
- (void)dispatchWindowFocusChangedWithBoolean:(jboolean)hasFocus {
  [self onWindowFocusChangedWithBoolean:hasFocus];
}


#line 9546
- (void)onWindowFocusChangedWithBoolean:(jboolean)hasWindowFocus {
  RepackagedAndroidViewInputmethodInputMethodManager *imm = RepackagedAndroidViewInputmethodInputMethodManager_peekInstance();
  if (!hasWindowFocus) {
    if ([self isPressed]) {
      [self setPressedWithBoolean:NO];
    }
    if (imm != nil && (mPrivateFlags_ & RepackagedAndroidViewView_PFLAG_FOCUSED) != 0) {
      [imm focusOutWithRepackagedAndroidViewView:self];
    }
    RepackagedAndroidViewView_removeLongPressCallback(self);
    RepackagedAndroidViewView_removeTapCallback(self);
    [self onFocusLost];
  }
  else
#line 9558
  if (imm != nil && (mPrivateFlags_ & RepackagedAndroidViewView_PFLAG_FOCUSED) != 0) {
    [imm focusInWithRepackagedAndroidViewView:self];
  }
  [self refreshDrawableState];
}


#line 9570
- (jboolean)hasWindowFocus {
  return mAttachInfo_ != nil && mAttachInfo_->mHasWindowFocus_;
}


#line 9582
- (void)dispatchVisibilityChangedWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)changedView
                                                       withInt:(jint)visibility {
  
#line 9584
  [self onVisibilityChangedWithRepackagedAndroidViewView:changedView withInt:visibility];
}


#line 9596
- (void)onVisibilityChangedWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)changedView
                                                 withInt:(jint)visibility {
  jboolean visible = visibility == RepackagedAndroidViewView_VISIBLE && [self getVisibility] == RepackagedAndroidViewView_VISIBLE;
  if (visible && mAttachInfo_ != nil) {
    RepackagedAndroidViewView_initialAwakenScrollBars(self);
  }
  
#line 9602
  RepackagedAndroidGraphicsDrawableDrawable *dr = mBackground_;
  if (dr != nil && visible != [dr isVisible]) {
    [dr setVisibleWithBoolean:visible withBoolean:NO];
  }
  RepackagedAndroidGraphicsDrawableDrawable *fg = mForegroundInfo_ != nil ? mForegroundInfo_->mDrawable_ : nil;
  if (fg != nil && visible != [fg isVisible]) {
    [fg setVisibleWithBoolean:visible withBoolean:NO];
  }
}


#line 9621
- (void)dispatchDisplayHintWithInt:(jint)hint {
  [self onDisplayHintWithInt:hint];
}


#line 9634
- (void)onDisplayHintWithInt:(jint)hint {
}


#line 9645
- (void)dispatchWindowVisibilityChangedWithInt:(jint)visibility {
  [self onWindowVisibilityChangedWithInt:visibility];
}


#line 9659
- (void)onWindowVisibilityChangedWithInt:(jint)visibility {
  if (visibility == RepackagedAndroidViewView_VISIBLE) {
    RepackagedAndroidViewView_initialAwakenScrollBars(self);
  }
}


#line 9672
- (jint)getWindowVisibility {
  return mAttachInfo_ != nil ? mAttachInfo_->mWindowVisibility_ : RepackagedAndroidViewView_GONE;
}


#line 9692
- (void)getWindowVisibleDisplayFrameWithRepackagedAndroidGraphicsRect:(RepackagedAndroidGraphicsRect *)outRect {
  if (mAttachInfo_ != nil) {
    @try {
      [((id<RepackagedAndroidViewIWindowSession>) nil_chk(mAttachInfo_->mSession_)) getDisplayFrameWithRepackagedAndroidViewIWindow:mAttachInfo_->mWindow_ withRepackagedAndroidGraphicsRect:outRect];
    }
    @catch (
#line 9696
    RepackagedAndroidOsRemoteException *e) {
      return;
    }
    
#line 9702
    RepackagedAndroidGraphicsRect *insets = mAttachInfo_->mVisibleInsets_;
    ((RepackagedAndroidGraphicsRect *) nil_chk(outRect))->left_ += ((RepackagedAndroidGraphicsRect *) nil_chk(insets))->left_;
    outRect->top_ += insets->top_;
    outRect->right_ -= insets->right_;
    outRect->bottom_ -= insets->bottom_;
    return;
  }
  
#line 9711
  RepackagedAndroidViewDisplay *d = [((RepackagedAndroidHardwareDisplayDisplayManagerGlobal *) nil_chk(RepackagedAndroidHardwareDisplayDisplayManagerGlobal_getInstance())) getRealDisplayWithInt:RepackagedAndroidViewDisplay_DEFAULT_DISPLAY];
  [((RepackagedAndroidViewDisplay *) nil_chk(d)) getRectSizeWithRepackagedAndroidGraphicsRect:outRect];
}


#line 9724
- (void)dispatchConfigurationChangedWithRepackagedAndroidContentResConfiguration:(id<RepackagedAndroidContentResConfiguration>)newConfig {
  [self onConfigurationChangedWithRepackagedAndroidContentResConfiguration:newConfig];
}


#line 9738
- (void)onConfigurationChangedWithRepackagedAndroidContentResConfiguration:(id<RepackagedAndroidContentResConfiguration>)newConfig {
}


#line 9745
- (void)dispatchCollectViewAttributesWithRepackagedAndroidViewView_AttachInfo:(RepackagedAndroidViewView_AttachInfo *)attachInfo
                                                                      withInt:(jint)visibility {
  [self performCollectViewAttributesWithRepackagedAndroidViewView_AttachInfo:attachInfo withInt:visibility];
}


#line 9749
- (void)performCollectViewAttributesWithRepackagedAndroidViewView_AttachInfo:(RepackagedAndroidViewView_AttachInfo *)attachInfo
                                                                     withInt:(jint)visibility {
  if ((visibility & RepackagedAndroidViewView_VISIBILITY_MASK) == RepackagedAndroidViewView_VISIBLE) {
    if ((mViewFlags_ & RepackagedAndroidViewView_KEEP_SCREEN_ON) == RepackagedAndroidViewView_KEEP_SCREEN_ON) {
      ((RepackagedAndroidViewView_AttachInfo *) nil_chk(attachInfo))->mKeepScreenOn_ = YES;
    }
    ((RepackagedAndroidViewView_AttachInfo *) nil_chk(attachInfo))->mSystemUiVisibility_ |= mSystemUiVisibility_;
    RepackagedAndroidViewView_ListenerInfo *li = mListenerInfo_;
    if (li != nil && li->mOnSystemUiVisibilityChangeListener_ != nil) {
      attachInfo->mHasSystemUiListeners_ = YES;
    }
  }
}


#line 9762
- (void)needGlobalAttributesUpdateWithBoolean:(jboolean)force {
  RepackagedAndroidViewView_AttachInfo *ai = mAttachInfo_;
  if (ai != nil && !ai->mRecomputeGlobalAttributes_) {
    if (force || ai->mKeepScreenOn_ || (ai->mSystemUiVisibility_ != 0) ||
#line 9766
    ai->mHasSystemUiListeners_) {
      ai->mRecomputeGlobalAttributes_ = YES;
    }
  }
}


#line 9780
- (jboolean)isInTouchMode {
  if (mAttachInfo_ != nil) {
    return mAttachInfo_->mInTouchMode_;
  }
  else {
    
#line 9784
    return RepackagedAndroidViewViewRootImpl_isInTouchMode();
  }
}


#line 9795
- (id<RepackagedAndroidContentContext>)getContext {
  return RepackagedAndroidViewView_getContext(self);
}


#line 9811
- (jboolean)onKeyPreImeWithInt:(jint)keyCode
withRepackagedAndroidViewKeyEvent:(RepackagedAndroidViewKeyEvent *)event {
  return NO;
}


#line 9829
- (jboolean)onKeyDownWithInt:(jint)keyCode
withRepackagedAndroidViewKeyEvent:(RepackagedAndroidViewKeyEvent *)event {
  jboolean result = NO;
  
#line 9832
  if (RepackagedAndroidViewKeyEvent_isConfirmKeyWithInt_(keyCode)) {
    if ((mViewFlags_ & RepackagedAndroidViewView_ENABLED_MASK) == RepackagedAndroidViewView_DISABLED) {
      return YES;
    }
    
#line 9837
    if (((mViewFlags_ & RepackagedAndroidViewView_CLICKABLE) == RepackagedAndroidViewView_CLICKABLE ||
#line 9838
    (mViewFlags_ & RepackagedAndroidViewView_LONG_CLICKABLE) == RepackagedAndroidViewView_LONG_CLICKABLE) &&
#line 9839
    ([((RepackagedAndroidViewKeyEvent *) nil_chk(event)) getRepeatCount] == 0)) {
      [self setPressedWithBoolean:YES];
      RepackagedAndroidViewView_checkForLongClickWithInt_(self, 0);
      return YES;
    }
  }
  return result;
}


#line 9856
- (jboolean)onKeyLongPressWithInt:(jint)keyCode
withRepackagedAndroidViewKeyEvent:(RepackagedAndroidViewKeyEvent *)event {
  return NO;
}


#line 9873
- (jboolean)onKeyUpWithInt:(jint)keyCode
withRepackagedAndroidViewKeyEvent:(RepackagedAndroidViewKeyEvent *)event {
  if (RepackagedAndroidViewKeyEvent_isConfirmKeyWithInt_(keyCode)) {
    if ((mViewFlags_ & RepackagedAndroidViewView_ENABLED_MASK) == RepackagedAndroidViewView_DISABLED) {
      return YES;
    }
    if ((mViewFlags_ & RepackagedAndroidViewView_CLICKABLE) == RepackagedAndroidViewView_CLICKABLE && [self isPressed]) {
      [self setPressedWithBoolean:NO];
      
#line 9881
      if (!mHasPerformedLongPress_) {
        
#line 9883
        RepackagedAndroidViewView_removeLongPressCallback(self);
        return [self performClick];
      }
    }
  }
  return NO;
}


#line 9904
- (jboolean)onKeyMultipleWithInt:(jint)keyCode
                         withInt:(jint)repeatCount
withRepackagedAndroidViewKeyEvent:(RepackagedAndroidViewKeyEvent *)event {
  return NO;
}


#line 9919
- (jboolean)onKeyShortcutWithInt:(jint)keyCode
withRepackagedAndroidViewKeyEvent:(RepackagedAndroidViewKeyEvent *)event {
  return NO;
}


#line 9940
- (jboolean)onCheckIsTextEditor {
  return NO;
}


#line 9963
- (RepackagedAndroidViewInputmethodInputConnection *)onCreateInputConnectionWithRepackagedAndroidViewInputmethodEditorInfo:(id<RepackagedAndroidViewInputmethodEditorInfo>)outAttrs {
  return nil;
}


#line 9977
- (jboolean)checkInputConnectionProxyWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)view {
  return NO;
}


#line 9991
- (void)createContextMenuWithRepackagedAndroidViewContextMenu:(RepackagedAndroidViewContextMenu *)menu {
  RepackagedAndroidViewContextMenu_ContextMenuInfo *menuInfo = [self getContextMenuInfo];
  
#line 9996
  [((RepackagedComAndroidInternalViewMenuMenuBuilder *) nil_chk(((RepackagedComAndroidInternalViewMenuMenuBuilder *) check_class_cast(menu, [RepackagedComAndroidInternalViewMenuMenuBuilder class])))) setCurrentMenuInfoWithRepackagedAndroidViewContextMenu_ContextMenuInfo:menuInfo];
  
#line 9998
  [self onCreateContextMenuWithRepackagedAndroidViewContextMenu:menu];
  RepackagedAndroidViewView_ListenerInfo *li = mListenerInfo_;
  if (li != nil && li->mOnCreateContextMenuListener_ != nil) {
    [li->mOnCreateContextMenuListener_ onCreateContextMenuWithRepackagedAndroidViewContextMenu:menu withRepackagedAndroidViewView:self withRepackagedAndroidViewContextMenu_ContextMenuInfo:menuInfo];
  }
  
#line 10006
  [((RepackagedComAndroidInternalViewMenuMenuBuilder *) nil_chk(((RepackagedComAndroidInternalViewMenuMenuBuilder *) check_class_cast(menu, [RepackagedComAndroidInternalViewMenuMenuBuilder class])))) setCurrentMenuInfoWithRepackagedAndroidViewContextMenu_ContextMenuInfo:nil];
  
#line 10008
  if (mParent_ != nil) {
    [mParent_ createContextMenuWithRepackagedAndroidViewContextMenu:menu];
  }
}


#line 10023
- (RepackagedAndroidViewContextMenu_ContextMenuInfo *)getContextMenuInfo {
  return nil;
}


#line 10033
- (void)onCreateContextMenuWithRepackagedAndroidViewContextMenu:(RepackagedAndroidViewContextMenu *)menu {
}


#line 10048
- (jboolean)onTrackballEventWithRepackagedAndroidViewMotionEvent:(RepackagedAndroidViewMotionEvent *)event {
  return NO;
}


#line 10089
- (jboolean)onGenericMotionEventWithRepackagedAndroidViewMotionEvent:(RepackagedAndroidViewMotionEvent *)event {
  return NO;
}


#line 10129
- (jboolean)onHoverEventWithRepackagedAndroidViewMotionEvent:(RepackagedAndroidViewMotionEvent *)event {
  
#line 10133
  jint action = [((RepackagedAndroidViewMotionEvent *) nil_chk(event)) getActionMasked];
  if (!mSendingHoverAccessibilityEvents_) {
    if ((action == RepackagedAndroidViewMotionEvent_ACTION_HOVER_ENTER ||
#line 10136
    action == RepackagedAndroidViewMotionEvent_ACTION_HOVER_MOVE) &&
#line 10137
    ![self hasHoveredChild] && RepackagedAndroidViewView_pointInViewWithFloat_withFloat_(self,
#line 10138
    [event getX], [event getY])) {
      RepackagedAndroidViewView_sendAccessibilityHoverEventWithInt_(self, RepackagedAndroidViewAccessibilityAccessibilityEvent_TYPE_VIEW_HOVER_ENTER);
      mSendingHoverAccessibilityEvents_ = YES;
    }
  }
  else {
    
#line 10143
    if (action == RepackagedAndroidViewMotionEvent_ACTION_HOVER_EXIT ||
#line 10144
    (action == RepackagedAndroidViewMotionEvent_ACTION_MOVE &&
#line 10145
    !RepackagedAndroidViewView_pointInViewWithFloat_withFloat_(self, [event getX], [event getY]))) {
      mSendingHoverAccessibilityEvents_ = NO;
      RepackagedAndroidViewView_sendAccessibilityHoverEventWithInt_(self, RepackagedAndroidViewAccessibilityAccessibilityEvent_TYPE_VIEW_HOVER_EXIT);
    }
  }
  
#line 10151
  if (RepackagedAndroidViewView_isHoverable(self)) {
    switch (action) {
      case RepackagedAndroidViewMotionEvent_ACTION_HOVER_ENTER:
      [self setHoveredWithBoolean:YES];
      break;
      case RepackagedAndroidViewMotionEvent_ACTION_HOVER_EXIT:
      [self setHoveredWithBoolean:NO];
      break;
    }
    
#line 10168
    RepackagedAndroidViewView_dispatchGenericMotionEventInternalWithRepackagedAndroidViewMotionEvent_(self, event);
    
#line 10171
    return YES;
  }
  
#line 10174
  return NO;
}


#line 10183
- (jboolean)isHoverable {
  return RepackagedAndroidViewView_isHoverable(self);
}


#line 10203
- (jboolean)isHovered {
  return (mPrivateFlags_ & RepackagedAndroidViewView_PFLAG_HOVERED) != 0;
}


#line 10222
- (void)setHoveredWithBoolean:(jboolean)hovered {
  if (hovered) {
    if ((mPrivateFlags_ & RepackagedAndroidViewView_PFLAG_HOVERED) == 0) {
      mPrivateFlags_ |= RepackagedAndroidViewView_PFLAG_HOVERED;
      [self refreshDrawableState];
      [self onHoverChangedWithBoolean:YES];
    }
  }
  else {
    
#line 10230
    if ((mPrivateFlags_ & RepackagedAndroidViewView_PFLAG_HOVERED) != 0) {
      mPrivateFlags_ &= ~RepackagedAndroidViewView_PFLAG_HOVERED;
      [self refreshDrawableState];
      [self onHoverChangedWithBoolean:NO];
    }
  }
}


#line 10250
- (void)onHoverChangedWithBoolean:(jboolean)hovered {
}


#line 10270
- (jboolean)onTouchEventWithRepackagedAndroidViewMotionEvent:(RepackagedAndroidViewMotionEvent *)event {
  jfloat x = [((RepackagedAndroidViewMotionEvent *) nil_chk(event)) getX];
  jfloat y = [event getY];
  jint viewFlags = mViewFlags_;
  jint action = [event getAction];
  
#line 10276
  if ((viewFlags & RepackagedAndroidViewView_ENABLED_MASK) == RepackagedAndroidViewView_DISABLED) {
    if (action == RepackagedAndroidViewMotionEvent_ACTION_UP && (mPrivateFlags_ & RepackagedAndroidViewView_PFLAG_PRESSED) != 0) {
      [self setPressedWithBoolean:NO];
    }
    
#line 10282
    return (((viewFlags & RepackagedAndroidViewView_CLICKABLE) == RepackagedAndroidViewView_CLICKABLE ||
#line 10283
    (viewFlags & RepackagedAndroidViewView_LONG_CLICKABLE) == RepackagedAndroidViewView_LONG_CLICKABLE) ||
#line 10284
    (viewFlags & RepackagedAndroidViewView_CONTEXT_CLICKABLE) == RepackagedAndroidViewView_CONTEXT_CLICKABLE);
  }
  
#line 10287
  if (mTouchDelegate_ != nil) {
    if ([mTouchDelegate_ onTouchEventWithRepackagedAndroidViewMotionEvent:event]) {
      return YES;
    }
  }
  
#line 10293
  if (((viewFlags & RepackagedAndroidViewView_CLICKABLE) == RepackagedAndroidViewView_CLICKABLE ||
#line 10294
  (viewFlags & RepackagedAndroidViewView_LONG_CLICKABLE) == RepackagedAndroidViewView_LONG_CLICKABLE) ||
#line 10295
  (viewFlags & RepackagedAndroidViewView_CONTEXT_CLICKABLE) == RepackagedAndroidViewView_CONTEXT_CLICKABLE) {
    {
      
#line 10298
      jboolean prepressed;
      
#line 10358
      jboolean isInScrollingContainer;
      
#line 10296
      switch (action) {
        case RepackagedAndroidViewMotionEvent_ACTION_UP:
        prepressed = ((mPrivateFlags_ & RepackagedAndroidViewView_PFLAG_PREPRESSED) != 0);
        if ((mPrivateFlags_ & RepackagedAndroidViewView_PFLAG_PRESSED) != 0 || prepressed) {
          
#line 10302
          jboolean focusTaken = NO;
          if (RepackagedAndroidViewView_isFocusable(self) && RepackagedAndroidViewView_isFocusableInTouchMode(self) && ![self isFocused]) {
            focusTaken = RepackagedAndroidViewView_requestFocus(self);
          }
          
#line 10307
          if (prepressed) {
            
#line 10312
            RepackagedAndroidViewView_setPressedWithBoolean_withFloat_withFloat_(self, YES, x, y);
          }
          
#line 10315
          if (!mHasPerformedLongPress_ && !mIgnoreNextUpEvent_) {
            
#line 10317
            RepackagedAndroidViewView_removeLongPressCallback(self);
            
#line 10320
            if (!focusTaken) {
              
#line 10324
              if (mPerformClick_ == nil) {
                mPerformClick_ = new_RepackagedAndroidViewView_PerformClick_initWithRepackagedAndroidViewView_(self);
              }
              if (![self postWithJavaLangRunnable:mPerformClick_]) {
                [self performClick];
              }
            }
          }
          
#line 10333
          if (mUnsetPressedState_ == nil) {
            mUnsetPressedState_ = new_RepackagedAndroidViewView_UnsetPressedState_initWithRepackagedAndroidViewView_(self);
          }
          
#line 10337
          if (prepressed) {
            [self postDelayedWithJavaLangRunnable:mUnsetPressedState_ withLong:RepackagedAndroidViewViewConfiguration_getPressedStateDuration()];
          }
          else if (![self postWithJavaLangRunnable:mUnsetPressedState_]) {
            
#line 10342
            [((RepackagedAndroidViewView_UnsetPressedState *) nil_chk(mUnsetPressedState_)) run];
          }
          
#line 10345
          RepackagedAndroidViewView_removeTapCallback(self);
        }
        mIgnoreNextUpEvent_ = NO;
        break;
        
#line 10350
        case RepackagedAndroidViewMotionEvent_ACTION_DOWN:
        mHasPerformedLongPress_ = NO;
        
#line 10353
        if ([self performButtonActionOnTouchDownWithRepackagedAndroidViewMotionEvent:event]) {
          break;
        }
        
#line 10358
        isInScrollingContainer = [self isInScrollingContainer];
        
#line 10362
        if (isInScrollingContainer) {
          mPrivateFlags_ |= RepackagedAndroidViewView_PFLAG_PREPRESSED;
          if (mPendingCheckForTap_ == nil) {
            mPendingCheckForTap_ = new_RepackagedAndroidViewView_CheckForTap_initWithRepackagedAndroidViewView_(self);
          }
          ((RepackagedAndroidViewView_CheckForTap *) nil_chk(mPendingCheckForTap_))->x_ = [event getX];
          mPendingCheckForTap_->y_ = [event getY];
          [self postDelayedWithJavaLangRunnable:mPendingCheckForTap_ withLong:RepackagedAndroidViewViewConfiguration_getTapTimeout()];
        }
        else {
          RepackagedAndroidViewView_setPressedWithBoolean_withFloat_withFloat_(self, YES, x, y);
          RepackagedAndroidViewView_checkForLongClickWithInt_(self, 0);
        }
        break;
        
#line 10377
        case RepackagedAndroidViewMotionEvent_ACTION_CANCEL:
        [self setPressedWithBoolean:NO];
        RepackagedAndroidViewView_removeTapCallback(self);
        RepackagedAndroidViewView_removeLongPressCallback(self);
        mInContextButtonPress_ = NO;
        mHasPerformedLongPress_ = NO;
        mIgnoreNextUpEvent_ = NO;
        break;
        
#line 10386
        case RepackagedAndroidViewMotionEvent_ACTION_MOVE:
        [self drawableHotspotChangedWithFloat:x withFloat:y];
        
#line 10390
        if (![self pointInViewWithFloat:x withFloat:y withFloat:mTouchSlop_]) {
          
#line 10392
          RepackagedAndroidViewView_removeTapCallback(self);
          if ((mPrivateFlags_ & RepackagedAndroidViewView_PFLAG_PRESSED) != 0) {
            
#line 10395
            RepackagedAndroidViewView_removeLongPressCallback(self);
            
#line 10397
            [self setPressedWithBoolean:NO];
          }
        }
        break;
      }
    }
    return YES;
  }
  
#line 10406
  return NO;
}


#line 10412
- (jboolean)isInScrollingContainer {
  id<RepackagedAndroidViewViewParent> p = RepackagedAndroidViewView_getParent(self);
  while (p != nil && [p isKindOfClass:[RepackagedAndroidViewViewGroup class]]) {
    if ([((RepackagedAndroidViewViewGroup *) nil_chk(((RepackagedAndroidViewViewGroup *) check_class_cast(p, [RepackagedAndroidViewViewGroup class])))) shouldDelayChildPressedState]) {
      return YES;
    }
    p = [((id<RepackagedAndroidViewViewParent>) nil_chk(p)) getParent];
  }
  return NO;
}


#line 10426
- (void)removeLongPressCallback {
  RepackagedAndroidViewView_removeLongPressCallback(self);
}


#line 10435
- (void)removePerformClickCallback {
  RepackagedAndroidViewView_removePerformClickCallback(self);
}


#line 10444
- (void)removeUnsetPressCallback {
  RepackagedAndroidViewView_removeUnsetPressCallback(self);
}


#line 10454
- (void)removeTapCallback {
  RepackagedAndroidViewView_removeTapCallback(self);
}


#line 10467
- (void)cancelLongPress {
  RepackagedAndroidViewView_removeLongPressCallback(self);
  
#line 10475
  RepackagedAndroidViewView_removeTapCallback(self);
}


#line 10482
- (void)removeSendViewScrolledAccessibilityEventCallback {
  RepackagedAndroidViewView_removeSendViewScrolledAccessibilityEventCallback(self);
}


#line 10492
- (void)setTouchDelegateWithRepackagedAndroidViewTouchDelegate:(RepackagedAndroidViewTouchDelegate *)delegate {
  mTouchDelegate_ = delegate;
}


#line 10499
- (RepackagedAndroidViewTouchDelegate *)getTouchDelegate {
  return mTouchDelegate_;
}


#line 10517
- (void)requestUnbufferedDispatchWithRepackagedAndroidViewMotionEvent:(RepackagedAndroidViewMotionEvent *)event {
  jint action = [((RepackagedAndroidViewMotionEvent *) nil_chk(event)) getAction];
  if (mAttachInfo_ == nil || (
#line 10520
  action != RepackagedAndroidViewMotionEvent_ACTION_DOWN && action != RepackagedAndroidViewMotionEvent_ACTION_MOVE) ||
#line 10521
  ![event isTouchEvent]) {
    return;
  }
  ((RepackagedAndroidViewView_AttachInfo *) nil_chk(mAttachInfo_))->mUnbufferedDispatchRequested_ = YES;
}


#line 10533
- (void)setFlagsWithInt:(jint)flags
                withInt:(jint)mask {
  jboolean accessibilityEnabled =
#line 10535
  [((RepackagedAndroidViewAccessibilityAccessibilityManager *) nil_chk(RepackagedAndroidViewAccessibilityAccessibilityManager_getInstanceWithRepackagedAndroidContentContext_(mContext_))) isEnabled];
  jboolean oldIncludeForAccessibility = accessibilityEnabled && [self includeForAccessibility];
  
#line 10538
  jint old = mViewFlags_;
  mViewFlags_ = (mViewFlags_ & ~mask) | (flags & mask);
  
#line 10541
  jint changed = mViewFlags_ ^ old;
  if (changed == 0) {
    return;
  }
  jint privateFlags = mPrivateFlags_;
  
#line 10548
  if (((changed & RepackagedAndroidViewView_FOCUSABLE_MASK) != 0) &&
#line 10549
  ((privateFlags & RepackagedAndroidViewView_PFLAG_HAS_BOUNDS) != 0)) {
    if (((old & RepackagedAndroidViewView_FOCUSABLE_MASK) == RepackagedAndroidViewView_FOCUSABLE) &&
#line 10551
    ((privateFlags & RepackagedAndroidViewView_PFLAG_FOCUSED) != 0)) {
      
#line 10553
      [self clearFocus];
    }
    else
#line 10554
    if (((old & RepackagedAndroidViewView_FOCUSABLE_MASK) == RepackagedAndroidViewView_NOT_FOCUSABLE) &&
#line 10555
    ((privateFlags & RepackagedAndroidViewView_PFLAG_FOCUSED) == 0)) {
      
#line 10560
      if (mParent_ != nil) [mParent_ focusableViewAvailableWithRepackagedAndroidViewView:self];
    }
  }
  
#line 10564
  jint newVisibility = flags & RepackagedAndroidViewView_VISIBILITY_MASK;
  if (newVisibility == RepackagedAndroidViewView_VISIBLE) {
    if ((changed & RepackagedAndroidViewView_VISIBILITY_MASK) != 0) {
      
#line 10572
      mPrivateFlags_ |= RepackagedAndroidViewView_PFLAG_DRAWN;
      [self invalidateWithBoolean:YES];
      
#line 10575
      [self needGlobalAttributesUpdateWithBoolean:YES];
      
#line 10581
      if ((mParent_ != nil) && (mBottom_ > mTop_) && (mRight_ > mLeft_)) {
        [mParent_ focusableViewAvailableWithRepackagedAndroidViewView:self];
      }
    }
  }
  
#line 10588
  if ((changed & RepackagedAndroidViewView_GONE) != 0) {
    [self needGlobalAttributesUpdateWithBoolean:NO];
    [self requestLayout];
    
#line 10592
    if ((mViewFlags_ & RepackagedAndroidViewView_VISIBILITY_MASK) == RepackagedAndroidViewView_GONE) {
      if ([self hasFocus]) [self clearFocus];
      [self clearAccessibilityFocus];
      [self destroyDrawingCache];
      if ([mParent_ isKindOfClass:[RepackagedAndroidViewView class]]) {
        
#line 10598
        [((RepackagedAndroidViewView *) nil_chk(((RepackagedAndroidViewView *) check_class_cast(mParent_, [RepackagedAndroidViewView class])))) invalidateWithBoolean:YES];
      }
      
#line 10602
      mPrivateFlags_ |= RepackagedAndroidViewView_PFLAG_DRAWN;
    }
    if (mAttachInfo_ != nil) {
      mAttachInfo_->mViewVisibilityChanged_ = YES;
    }
  }
  
#line 10610
  if ((changed & RepackagedAndroidViewView_INVISIBLE) != 0) {
    [self needGlobalAttributesUpdateWithBoolean:NO];
    
#line 10616
    mPrivateFlags_ |= RepackagedAndroidViewView_PFLAG_DRAWN;
    
#line 10618
    if ((mViewFlags_ & RepackagedAndroidViewView_VISIBILITY_MASK) == RepackagedAndroidViewView_INVISIBLE) {
      
#line 10620
      if ([self getRootView] != self) {
        if ([self hasFocus]) [self clearFocus];
        [self clearAccessibilityFocus];
      }
    }
    if (mAttachInfo_ != nil) {
      mAttachInfo_->mViewVisibilityChanged_ = YES;
    }
  }
  
#line 10630
  if ((changed & RepackagedAndroidViewView_VISIBILITY_MASK) != 0) {
    
#line 10632
    if (newVisibility != RepackagedAndroidViewView_VISIBLE && mAttachInfo_ != nil) {
      RepackagedAndroidViewView_cleanupDraw(self);
    }
    
#line 10636
    if ([mParent_ isKindOfClass:[RepackagedAndroidViewViewGroup class]]) {
      [((RepackagedAndroidViewViewGroup *) nil_chk(((RepackagedAndroidViewViewGroup *) check_class_cast(mParent_, [RepackagedAndroidViewViewGroup class])))) onChildVisibilityChangedWithRepackagedAndroidViewView:self withInt:
#line 10638
      (changed & RepackagedAndroidViewView_VISIBILITY_MASK) withInt:newVisibility];
      [((RepackagedAndroidViewView *) nil_chk(((RepackagedAndroidViewView *) check_class_cast(mParent_, [RepackagedAndroidViewView class])))) invalidateWithBoolean:YES];
    }
    else
#line 10640
    if (mParent_ != nil) {
      [mParent_ invalidateChildWithRepackagedAndroidViewView:self withRepackagedAndroidGraphicsRect:nil];
    }
    
#line 10644
    if (mAttachInfo_ != nil) {
      [self dispatchVisibilityChangedWithRepackagedAndroidViewView:self withInt:newVisibility];
      [self notifySubtreeAccessibilityStateChangedIfNeeded];
    }
  }
  
#line 10650
  if ((changed & RepackagedAndroidViewView_WILL_NOT_CACHE_DRAWING) != 0) {
    [self destroyDrawingCache];
  }
  
#line 10654
  if ((changed & RepackagedAndroidViewView_DRAWING_CACHE_ENABLED) != 0) {
    [self destroyDrawingCache];
    mPrivateFlags_ &= ~RepackagedAndroidViewView_PFLAG_DRAWING_CACHE_VALID;
    [self invalidateParentCaches];
  }
  
#line 10660
  if ((changed & RepackagedAndroidViewView_DRAWING_CACHE_QUALITY_MASK) != 0) {
    [self destroyDrawingCache];
    mPrivateFlags_ &= ~RepackagedAndroidViewView_PFLAG_DRAWING_CACHE_VALID;
  }
  
#line 10665
  if ((changed & RepackagedAndroidViewView_DRAW_MASK) != 0) {
    if ((mViewFlags_ & RepackagedAndroidViewView_WILL_NOT_DRAW) != 0) {
      if (mBackground_ != nil ||
#line 10668
      (mForegroundInfo_ != nil && mForegroundInfo_->mDrawable_ != nil)) {
        mPrivateFlags_ &= ~RepackagedAndroidViewView_PFLAG_SKIP_DRAW;
      }
      else {
        
#line 10671
        mPrivateFlags_ |= RepackagedAndroidViewView_PFLAG_SKIP_DRAW;
      }
    }
    else {
      
#line 10674
      mPrivateFlags_ &= ~RepackagedAndroidViewView_PFLAG_SKIP_DRAW;
    }
    [self requestLayout];
    [self invalidateWithBoolean:YES];
  }
  
#line 10680
  if ((changed & RepackagedAndroidViewView_KEEP_SCREEN_ON) != 0) {
    if (mParent_ != nil && mAttachInfo_ != nil && !mAttachInfo_->mRecomputeGlobalAttributes_) {
      [mParent_ recomputeViewAttributesWithRepackagedAndroidViewView:self];
    }
  }
  
#line 10686
  if (accessibilityEnabled) {
    if ((changed & RepackagedAndroidViewView_FOCUSABLE_MASK) != 0 || (changed & RepackagedAndroidViewView_VISIBILITY_MASK) != 0 ||
#line 10688
    (changed & RepackagedAndroidViewView_CLICKABLE) != 0 || (changed & RepackagedAndroidViewView_LONG_CLICKABLE) != 0 ||
#line 10689
    (changed & RepackagedAndroidViewView_CONTEXT_CLICKABLE) != 0) {
      if (oldIncludeForAccessibility != [self includeForAccessibility]) {
        [self notifySubtreeAccessibilityStateChangedIfNeeded];
      }
      else {
        
#line 10693
        [self notifyViewAccessibilityStateChangedIfNeededWithInt:
#line 10694
        RepackagedAndroidViewAccessibilityAccessibilityEvent_CONTENT_CHANGE_TYPE_UNDEFINED];
      }
    }
    else
#line 10696
    if ((changed & RepackagedAndroidViewView_ENABLED_MASK) != 0) {
      [self notifyViewAccessibilityStateChangedIfNeededWithInt:
#line 10698
      RepackagedAndroidViewAccessibilityAccessibilityEvent_CONTENT_CHANGE_TYPE_UNDEFINED];
    }
  }
}


#line 10714
- (void)bringToFront {
  if (mParent_ != nil) {
    [mParent_ bringChildToFrontWithRepackagedAndroidViewView:self];
  }
}


#line 10731
- (void)onScrollChangedWithInt:(jint)l
                       withInt:(jint)t
                       withInt:(jint)oldl
                       withInt:(jint)oldt {
  [self notifySubtreeAccessibilityStateChangedIfNeeded];
  
#line 10734
  if ([((RepackagedAndroidViewAccessibilityAccessibilityManager *) nil_chk(RepackagedAndroidViewAccessibilityAccessibilityManager_getInstanceWithRepackagedAndroidContentContext_(mContext_))) isEnabled]) {
    RepackagedAndroidViewView_postSendViewScrolledAccessibilityEventCallback(self);
  }
  
#line 10738
  mBackgroundSizeChanged_ = YES;
  if (mForegroundInfo_ != nil) {
    mForegroundInfo_->mBoundsChanged_ = YES;
  }
  
#line 10743
  RepackagedAndroidViewView_AttachInfo *ai = mAttachInfo_;
  if (ai != nil) {
    ai->mViewScrollChanged_ = YES;
  }
  
#line 10748
  if (mListenerInfo_ != nil && mListenerInfo_->mOnScrollChangeListener_ != nil) {
    [mListenerInfo_->mOnScrollChangeListener_ onScrollChangeWithRepackagedAndroidViewView:self withInt:l withInt:t withInt:oldl withInt:oldt];
  }
}


#line 10810
- (void)onSizeChangedWithInt:(jint)w
                     withInt:(jint)h
                     withInt:(jint)oldw
                     withInt:(jint)oldh {
}


#line 10819
- (void)dispatchDrawWithRepackagedAndroidGraphicsCanvas:(RepackagedAndroidGraphicsCanvas *)canvas {
}


#line 10829
- (id<RepackagedAndroidViewViewParent>)getParent {
  return RepackagedAndroidViewView_getParent(self);
}


#line 10839
- (void)setScrollXWithInt:(jint)value {
  [self scrollToWithInt:value withInt:mScrollY_];
}


#line 10849
- (void)setScrollYWithInt:(jint)value {
  [self scrollToWithInt:mScrollX_ withInt:value];
}


#line 10861
- (jint)getScrollX {
  return RepackagedAndroidViewView_getScrollX(self);
}


#line 10872
- (jint)getScrollY {
  return RepackagedAndroidViewView_getScrollY(self);
}


#line 10882
- (jint)getWidth {
  return RepackagedAndroidViewView_getWidth(self);
}


#line 10892
- (jint)getHeight {
  return RepackagedAndroidViewView_getHeight(self);
}


#line 10905
- (void)getDrawingRectWithRepackagedAndroidGraphicsRect:(RepackagedAndroidGraphicsRect *)outRect {
  ((RepackagedAndroidGraphicsRect *) nil_chk(outRect))->left_ = mScrollX_;
  outRect->top_ = mScrollY_;
  outRect->right_ = mScrollX_ + (mRight_ - mLeft_);
  outRect->bottom_ = mScrollY_ + (mBottom_ - mTop_);
}


#line 10919
- (jint)getMeasuredWidth {
  return mMeasuredWidth_ & RepackagedAndroidViewView_MEASURED_SIZE_MASK;
}


#line 10936
- (jint)getMeasuredWidthAndState {
  return mMeasuredWidth_;
}


#line 10947
- (jint)getMeasuredHeight {
  return mMeasuredHeight_ & RepackagedAndroidViewView_MEASURED_SIZE_MASK;
}


#line 10964
- (jint)getMeasuredHeightAndState {
  return mMeasuredHeight_;
}


#line 10975
- (jint)getMeasuredState {
  return (mMeasuredWidth_ & RepackagedAndroidViewView_MEASURED_STATE_MASK) |
#line 10977
  ((RShift32(mMeasuredHeight_, RepackagedAndroidViewView_MEASURED_HEIGHT_STATE_SHIFT)) &
#line 10978
  (RShift32(RepackagedAndroidViewView_MEASURED_STATE_MASK, RepackagedAndroidViewView_MEASURED_HEIGHT_STATE_SHIFT)));
}


#line 10992
- (RepackagedAndroidGraphicsMatrix *)getMatrix {
  [self ensureTransformationInfo];
  RepackagedAndroidGraphicsMatrix *matrix = ((RepackagedAndroidViewView_TransformationInfo *) nil_chk(mTransformationInfo_))->mMatrix_;
  [((RepackagedAndroidViewRenderNode *) nil_chk(mRenderNode_)) getMatrixWithRepackagedAndroidGraphicsMatrix:matrix];
  return matrix;
}


#line 11005
- (jboolean)hasIdentityMatrix {
  return RepackagedAndroidViewView_hasIdentityMatrix(self);
}

- (void)ensureTransformationInfo {
  if (mTransformationInfo_ == nil) {
    mTransformationInfo_ = new_RepackagedAndroidViewView_TransformationInfo_init();
  }
}


#line 11023
- (RepackagedAndroidGraphicsMatrix *)getInverseMatrix {
  return RepackagedAndroidViewView_getInverseMatrix(self);
}


#line 11040
- (jfloat)getCameraDistance {
  jfloat dpi = ((RepackagedAndroidUtilDisplayMetrics *) nil_chk([((RepackagedAndroidContentResResources *) nil_chk(mResources_)) getDisplayMetrics]))->densityDpi_;
  return -([((RepackagedAndroidViewRenderNode *) nil_chk(mRenderNode_)) getCameraDistance] * dpi);
}


#line 11084
- (void)setCameraDistanceWithFloat:(jfloat)distance {
  jfloat dpi = ((RepackagedAndroidUtilDisplayMetrics *) nil_chk([((RepackagedAndroidContentResResources *) nil_chk(mResources_)) getDisplayMetrics]))->densityDpi_;
  
#line 11087
  [self invalidateViewPropertyWithBoolean:YES withBoolean:NO];
  [((RepackagedAndroidViewRenderNode *) nil_chk(mRenderNode_)) setCameraDistanceWithFloat:-JavaLangMath_absWithFloat_(distance) / dpi];
  [self invalidateViewPropertyWithBoolean:NO withBoolean:NO];
  
#line 11091
  [self invalidateParentIfNeededAndWasQuickRejected];
}


#line 11104
- (jfloat)getRotation {
  return [((RepackagedAndroidViewRenderNode *) nil_chk(mRenderNode_)) getRotation];
}


#line 11122
- (void)setRotationWithFloat:(jfloat)rotation {
  if (rotation != [self getRotation]) {
    
#line 11125
    [self invalidateViewPropertyWithBoolean:YES withBoolean:NO];
    [((RepackagedAndroidViewRenderNode *) nil_chk(mRenderNode_)) setRotationWithFloat:rotation];
    [self invalidateViewPropertyWithBoolean:NO withBoolean:YES];
    
#line 11129
    [self invalidateParentIfNeededAndWasQuickRejected];
    [self notifySubtreeAccessibilityStateChangedIfNeeded];
  }
}


#line 11144
- (jfloat)getRotationY {
  return [((RepackagedAndroidViewRenderNode *) nil_chk(mRenderNode_)) getRotationY];
}


#line 11167
- (void)setRotationYWithFloat:(jfloat)rotationY {
  if (rotationY != [self getRotationY]) {
    [self invalidateViewPropertyWithBoolean:YES withBoolean:NO];
    [((RepackagedAndroidViewRenderNode *) nil_chk(mRenderNode_)) setRotationYWithFloat:rotationY];
    [self invalidateViewPropertyWithBoolean:NO withBoolean:YES];
    
#line 11173
    [self invalidateParentIfNeededAndWasQuickRejected];
    [self notifySubtreeAccessibilityStateChangedIfNeeded];
  }
}


#line 11188
- (jfloat)getRotationX {
  return [((RepackagedAndroidViewRenderNode *) nil_chk(mRenderNode_)) getRotationX];
}


#line 11211
- (void)setRotationXWithFloat:(jfloat)rotationX {
  if (rotationX != [self getRotationX]) {
    [self invalidateViewPropertyWithBoolean:YES withBoolean:NO];
    [((RepackagedAndroidViewRenderNode *) nil_chk(mRenderNode_)) setRotationXWithFloat:rotationX];
    [self invalidateViewPropertyWithBoolean:NO withBoolean:YES];
    
#line 11217
    [self invalidateParentIfNeededAndWasQuickRejected];
    [self notifySubtreeAccessibilityStateChangedIfNeeded];
  }
}


#line 11233
- (jfloat)getScaleX {
  return [((RepackagedAndroidViewRenderNode *) nil_chk(mRenderNode_)) getScaleX];
}


#line 11247
- (void)setScaleXWithFloat:(jfloat)scaleX {
  if (scaleX != [self getScaleX]) {
    [self invalidateViewPropertyWithBoolean:YES withBoolean:NO];
    [((RepackagedAndroidViewRenderNode *) nil_chk(mRenderNode_)) setScaleXWithFloat:scaleX];
    [self invalidateViewPropertyWithBoolean:NO withBoolean:YES];
    
#line 11253
    [self invalidateParentIfNeededAndWasQuickRejected];
    [self notifySubtreeAccessibilityStateChangedIfNeeded];
  }
}


#line 11269
- (jfloat)getScaleY {
  return [((RepackagedAndroidViewRenderNode *) nil_chk(mRenderNode_)) getScaleY];
}


#line 11283
- (void)setScaleYWithFloat:(jfloat)scaleY {
  if (scaleY != [self getScaleY]) {
    [self invalidateViewPropertyWithBoolean:YES withBoolean:NO];
    [((RepackagedAndroidViewRenderNode *) nil_chk(mRenderNode_)) setScaleYWithFloat:scaleY];
    [self invalidateViewPropertyWithBoolean:NO withBoolean:YES];
    
#line 11289
    [self invalidateParentIfNeededAndWasQuickRejected];
    [self notifySubtreeAccessibilityStateChangedIfNeeded];
  }
}


#line 11307
- (jfloat)getPivotX {
  return [((RepackagedAndroidViewRenderNode *) nil_chk(mRenderNode_)) getPivotX];
}


#line 11326
- (void)setPivotXWithFloat:(jfloat)pivotX {
  if (![((RepackagedAndroidViewRenderNode *) nil_chk(mRenderNode_)) isPivotExplicitlySet] || pivotX != [self getPivotX]) {
    [self invalidateViewPropertyWithBoolean:YES withBoolean:NO];
    [mRenderNode_ setPivotXWithFloat:pivotX];
    [self invalidateViewPropertyWithBoolean:NO withBoolean:YES];
    
#line 11332
    [self invalidateParentIfNeededAndWasQuickRejected];
  }
}


#line 11349
- (jfloat)getPivotY {
  return [((RepackagedAndroidViewRenderNode *) nil_chk(mRenderNode_)) getPivotY];
}


#line 11367
- (void)setPivotYWithFloat:(jfloat)pivotY {
  if (![((RepackagedAndroidViewRenderNode *) nil_chk(mRenderNode_)) isPivotExplicitlySet] || pivotY != [self getPivotY]) {
    [self invalidateViewPropertyWithBoolean:YES withBoolean:NO];
    [mRenderNode_ setPivotYWithFloat:pivotY];
    [self invalidateViewPropertyWithBoolean:NO withBoolean:YES];
    
#line 11373
    [self invalidateParentIfNeededAndWasQuickRejected];
  }
}


#line 11385
- (jfloat)getAlpha {
  return mTransformationInfo_ != nil ? mTransformationInfo_->mAlpha_ : 1;
}


#line 11408
- (jboolean)hasOverlappingRendering {
  return YES;
}


#line 11449
- (void)setAlphaWithFloat:(jfloat)alpha {
  [self ensureTransformationInfo];
  if (((RepackagedAndroidViewView_TransformationInfo *) nil_chk(mTransformationInfo_))->mAlpha_ != alpha) {
    mTransformationInfo_->mAlpha_ = alpha;
    if ([self onSetAlphaWithInt:J2ObjCFpToInt((alpha * 255))]) {
      mPrivateFlags_ |= RepackagedAndroidViewView_PFLAG_ALPHA_SET;
      
#line 11456
      [self invalidateParentCaches];
      [self invalidateWithBoolean:YES];
    }
    else {
      
#line 11459
      mPrivateFlags_ &= ~RepackagedAndroidViewView_PFLAG_ALPHA_SET;
      [self invalidateViewPropertyWithBoolean:YES withBoolean:NO];
      [((RepackagedAndroidViewRenderNode *) nil_chk(mRenderNode_)) setAlphaWithFloat:RepackagedAndroidViewView_getFinalAlpha(self)];
      [self notifyViewAccessibilityStateChangedIfNeededWithInt:
#line 11463
      RepackagedAndroidViewAccessibilityAccessibilityEvent_CONTENT_CHANGE_TYPE_UNDEFINED];
    }
  }
}


#line 11478
- (jboolean)setAlphaNoInvalidationWithFloat:(jfloat)alpha {
  [self ensureTransformationInfo];
  if (((RepackagedAndroidViewView_TransformationInfo *) nil_chk(mTransformationInfo_))->mAlpha_ != alpha) {
    mTransformationInfo_->mAlpha_ = alpha;
    jboolean subclassHandlesAlpha = [self onSetAlphaWithInt:J2ObjCFpToInt((alpha * 255))];
    if (subclassHandlesAlpha) {
      mPrivateFlags_ |= RepackagedAndroidViewView_PFLAG_ALPHA_SET;
      return YES;
    }
    else {
      
#line 11487
      mPrivateFlags_ &= ~RepackagedAndroidViewView_PFLAG_ALPHA_SET;
      [((RepackagedAndroidViewRenderNode *) nil_chk(mRenderNode_)) setAlphaWithFloat:RepackagedAndroidViewView_getFinalAlpha(self)];
    }
  }
  return NO;
}


#line 11503
- (void)setTransitionAlphaWithFloat:(jfloat)alpha {
  [self ensureTransformationInfo];
  if (((RepackagedAndroidViewView_TransformationInfo *) nil_chk(mTransformationInfo_))->mTransitionAlpha_ != alpha) {
    mTransformationInfo_->mTransitionAlpha_ = alpha;
    mPrivateFlags_ &= ~RepackagedAndroidViewView_PFLAG_ALPHA_SET;
    [self invalidateViewPropertyWithBoolean:YES withBoolean:NO];
    [((RepackagedAndroidViewRenderNode *) nil_chk(mRenderNode_)) setAlphaWithFloat:RepackagedAndroidViewView_getFinalAlpha(self)];
  }
}


#line 11517
- (jfloat)getFinalAlpha {
  return RepackagedAndroidViewView_getFinalAlpha(self);
}


#line 11534
- (jfloat)getTransitionAlpha {
  return mTransformationInfo_ != nil ? mTransformationInfo_->mTransitionAlpha_ : 1;
}


#line 11544
- (jint)getTop {
  return RepackagedAndroidViewView_getTop(self);
}


#line 11555
- (void)setTopWithInt:(jint)top {
  if (top != mTop_) {
    jboolean matrixIsIdentity = RepackagedAndroidViewView_hasIdentityMatrix(self);
    if (matrixIsIdentity) {
      if (mAttachInfo_ != nil) {
        jint minTop;
        jint yLoc;
        if (top < mTop_) {
          minTop = top;
          yLoc = top - mTop_;
        }
        else {
          
#line 11566
          minTop = mTop_;
          yLoc = 0;
        }
        [self invalidateWithInt:0 withInt:yLoc withInt:mRight_ - mLeft_ withInt:mBottom_ - minTop];
      }
    }
    else {
      [self invalidateWithBoolean:YES];
    }
    
#line 11576
    jint width = mRight_ - mLeft_;
    jint oldHeight = mBottom_ - mTop_;
    
#line 11579
    mTop_ = top;
    [((RepackagedAndroidViewRenderNode *) nil_chk(mRenderNode_)) setTopWithInt:mTop_];
    
#line 11582
    RepackagedAndroidViewView_sizeChangeWithInt_withInt_withInt_withInt_(self, width, mBottom_ - mTop_, width, oldHeight);
    
#line 11584
    if (!matrixIsIdentity) {
      mPrivateFlags_ |= RepackagedAndroidViewView_PFLAG_DRAWN;
      [self invalidateWithBoolean:YES];
    }
    mBackgroundSizeChanged_ = YES;
    if (mForegroundInfo_ != nil) {
      mForegroundInfo_->mBoundsChanged_ = YES;
    }
    [self invalidateParentIfNeeded];
    if ((mPrivateFlags2_ & RepackagedAndroidViewView_PFLAG2_VIEW_QUICK_REJECTED) == RepackagedAndroidViewView_PFLAG2_VIEW_QUICK_REJECTED) {
      
#line 11595
      [self invalidateParentIfNeeded];
    }
  }
}


#line 11606
- (jint)getBottom {
  return RepackagedAndroidViewView_getBottom(self);
}


#line 11615
- (jboolean)isDirty {
  return (mPrivateFlags_ & RepackagedAndroidViewView_PFLAG_DIRTY_MASK) != 0;
}


#line 11626
- (void)setBottomWithInt:(jint)bottom {
  RepackagedAndroidViewView_setBottomWithInt_(self, bottom);
}


#line 11674
- (jint)getLeft {
  return RepackagedAndroidViewView_getLeft(self);
}


#line 11685
- (void)setLeftWithInt:(jint)left {
  if (left != mLeft_) {
    jboolean matrixIsIdentity = RepackagedAndroidViewView_hasIdentityMatrix(self);
    if (matrixIsIdentity) {
      if (mAttachInfo_ != nil) {
        jint minLeft;
        jint xLoc;
        if (left < mLeft_) {
          minLeft = left;
          xLoc = left - mLeft_;
        }
        else {
          
#line 11696
          minLeft = mLeft_;
          xLoc = 0;
        }
        [self invalidateWithInt:xLoc withInt:0 withInt:mRight_ - minLeft withInt:mBottom_ - mTop_];
      }
    }
    else {
      [self invalidateWithBoolean:YES];
    }
    
#line 11706
    jint oldWidth = mRight_ - mLeft_;
    jint height = mBottom_ - mTop_;
    
#line 11709
    mLeft_ = left;
    [((RepackagedAndroidViewRenderNode *) nil_chk(mRenderNode_)) setLeftWithInt:left];
    
#line 11712
    RepackagedAndroidViewView_sizeChangeWithInt_withInt_withInt_withInt_(self, mRight_ - mLeft_, height, oldWidth, height);
    
#line 11714
    if (!matrixIsIdentity) {
      mPrivateFlags_ |= RepackagedAndroidViewView_PFLAG_DRAWN;
      [self invalidateWithBoolean:YES];
    }
    mBackgroundSizeChanged_ = YES;
    if (mForegroundInfo_ != nil) {
      mForegroundInfo_->mBoundsChanged_ = YES;
    }
    [self invalidateParentIfNeeded];
    if ((mPrivateFlags2_ & RepackagedAndroidViewView_PFLAG2_VIEW_QUICK_REJECTED) == RepackagedAndroidViewView_PFLAG2_VIEW_QUICK_REJECTED) {
      
#line 11725
      [self invalidateParentIfNeeded];
    }
  }
}


#line 11736
- (jint)getRight {
  return RepackagedAndroidViewView_getRight(self);
}


#line 11747
- (void)setRightWithInt:(jint)right {
  RepackagedAndroidViewView_setRightWithInt_(self, right);
}


#line 11797
- (jfloat)getX {
  return mLeft_ + [self getTranslationX];
}


#line 11808
- (void)setXWithFloat:(jfloat)x {
  [self setTranslationXWithFloat:x - mLeft_];
}


#line 11820
- (jfloat)getY {
  return mTop_ + [self getTranslationY];
}


#line 11831
- (void)setYWithFloat:(jfloat)y {
  [self setTranslationYWithFloat:y - mTop_];
}


#line 11843
- (jfloat)getZ {
  return [self getElevation] + [self getTranslationZ];
}


#line 11854
- (void)setZWithFloat:(jfloat)z {
  [self setTranslationZWithFloat:z - [self getElevation]];
}


#line 11864
- (jfloat)getElevation {
  return [((RepackagedAndroidViewRenderNode *) nil_chk(mRenderNode_)) getElevation];
}


#line 11873
- (void)setElevationWithFloat:(jfloat)elevation {
  if (elevation != [self getElevation]) {
    [self invalidateViewPropertyWithBoolean:YES withBoolean:NO];
    [((RepackagedAndroidViewRenderNode *) nil_chk(mRenderNode_)) setElevationWithFloat:elevation];
    [self invalidateViewPropertyWithBoolean:NO withBoolean:YES];
    
#line 11879
    [self invalidateParentIfNeededAndWasQuickRejected];
  }
}


#line 11891
- (jfloat)getTranslationX {
  return [((RepackagedAndroidViewRenderNode *) nil_chk(mRenderNode_)) getTranslationX];
}


#line 11905
- (void)setTranslationXWithFloat:(jfloat)translationX {
  if (translationX != [self getTranslationX]) {
    [self invalidateViewPropertyWithBoolean:YES withBoolean:NO];
    [((RepackagedAndroidViewRenderNode *) nil_chk(mRenderNode_)) setTranslationXWithFloat:translationX];
    [self invalidateViewPropertyWithBoolean:NO withBoolean:YES];
    
#line 11911
    [self invalidateParentIfNeededAndWasQuickRejected];
    [self notifySubtreeAccessibilityStateChangedIfNeeded];
  }
}


#line 11925
- (jfloat)getTranslationY {
  return [((RepackagedAndroidViewRenderNode *) nil_chk(mRenderNode_)) getTranslationY];
}


#line 11939
- (void)setTranslationYWithFloat:(jfloat)translationY {
  if (translationY != [self getTranslationY]) {
    [self invalidateViewPropertyWithBoolean:YES withBoolean:NO];
    [((RepackagedAndroidViewRenderNode *) nil_chk(mRenderNode_)) setTranslationYWithFloat:translationY];
    [self invalidateViewPropertyWithBoolean:NO withBoolean:YES];
    
#line 11945
    [self invalidateParentIfNeededAndWasQuickRejected];
    [self notifySubtreeAccessibilityStateChangedIfNeeded];
  }
}


#line 11956
- (jfloat)getTranslationZ {
  return [((RepackagedAndroidViewRenderNode *) nil_chk(mRenderNode_)) getTranslationZ];
}


#line 11965
- (void)setTranslationZWithFloat:(jfloat)translationZ {
  if (translationZ != [self getTranslationZ]) {
    [self invalidateViewPropertyWithBoolean:YES withBoolean:NO];
    [((RepackagedAndroidViewRenderNode *) nil_chk(mRenderNode_)) setTranslationZWithFloat:translationZ];
    [self invalidateViewPropertyWithBoolean:NO withBoolean:YES];
    
#line 11971
    [self invalidateParentIfNeededAndWasQuickRejected];
  }
}

- (void)setAnimationMatrixWithRepackagedAndroidGraphicsMatrix:(RepackagedAndroidGraphicsMatrix *)matrix {
  [self invalidateViewPropertyWithBoolean:YES withBoolean:NO];
  [((RepackagedAndroidViewRenderNode *) nil_chk(mRenderNode_)) setAnimationMatrixWithRepackagedAndroidGraphicsMatrix:matrix];
  [self invalidateViewPropertyWithBoolean:NO withBoolean:YES];
  
#line 11981
  [self invalidateParentIfNeededAndWasQuickRejected];
}


#line 11990
- (RepackagedAndroidAnimationStateListAnimator *)getStateListAnimator {
  return mStateListAnimator_;
}


#line 12002
- (void)setStateListAnimatorWithRepackagedAndroidAnimationStateListAnimator:(RepackagedAndroidAnimationStateListAnimator *)stateListAnimator {
  if (mStateListAnimator_ == stateListAnimator) {
    return;
  }
  if (mStateListAnimator_ != nil) {
    [mStateListAnimator_ setTargetWithId:nil];
  }
  mStateListAnimator_ = stateListAnimator;
  if (stateListAnimator != nil) {
    [stateListAnimator setTargetWithId:self];
    if ([self isAttachedToWindow]) {
      [stateListAnimator setStateWithIntArray:RepackagedAndroidViewView_getDrawableState(self)];
    }
  }
}


#line 12027
- (jboolean)getClipToOutline {
  return RepackagedAndroidViewView_getClipToOutline(self);
}


#line 12046
- (void)setClipToOutlineWithBoolean:(jboolean)clipToOutline {
  [self damageInParent];
  if (RepackagedAndroidViewView_getClipToOutline(self) != clipToOutline) {
    [((RepackagedAndroidViewRenderNode *) nil_chk(mRenderNode_)) setClipToOutlineWithBoolean:clipToOutline];
  }
}


#line 12058
- (void)setOutlineProviderFromAttributeWithInt:(jint)providerInt {
  RepackagedAndroidViewView_setOutlineProviderFromAttributeWithInt_(self, providerInt);
}


#line 12092
- (void)setOutlineProviderWithRepackagedAndroidViewViewOutlineProvider:(RepackagedAndroidViewViewOutlineProvider *)provider {
  mOutlineProvider_ = provider;
  [self invalidateOutline];
}


#line 12103
- (RepackagedAndroidViewViewOutlineProvider *)getOutlineProvider {
  return mOutlineProvider_;
}


#line 12112
- (void)invalidateOutline {
  RepackagedAndroidViewView_rebuildOutline(self);
  
#line 12115
  [self notifySubtreeAccessibilityStateChangedIfNeeded];
  [self invalidateViewPropertyWithBoolean:NO withBoolean:NO];
}


#line 12128
- (void)rebuildOutline {
  RepackagedAndroidViewView_rebuildOutline(self);
}


#line 12151
- (jboolean)hasShadow {
  return [((RepackagedAndroidViewRenderNode *) nil_chk(mRenderNode_)) hasShadow];
}


#line 12157
- (void)setRevealClipWithBoolean:(jboolean)shouldClip
                       withFloat:(jfloat)x
                       withFloat:(jfloat)y
                       withFloat:(jfloat)radius {
  [((RepackagedAndroidViewRenderNode *) nil_chk(mRenderNode_)) setRevealClipWithBoolean:shouldClip withFloat:x withFloat:y withFloat:radius];
  [self invalidateViewPropertyWithBoolean:NO withBoolean:NO];
}


#line 12167
- (void)getHitRectWithRepackagedAndroidGraphicsRect:(RepackagedAndroidGraphicsRect *)outRect {
  if (RepackagedAndroidViewView_hasIdentityMatrix(self) || mAttachInfo_ == nil) {
    [((RepackagedAndroidGraphicsRect *) nil_chk(outRect)) setWithInt:mLeft_ withInt:mTop_ withInt:mRight_ withInt:mBottom_];
  }
  else {
    
#line 12171
    RepackagedAndroidGraphicsRectF *tmpRect = mAttachInfo_->mTmpTransformRect_;
    [((RepackagedAndroidGraphicsRectF *) nil_chk(tmpRect)) setWithFloat:0 withFloat:0 withFloat:RepackagedAndroidViewView_getWidth(self) withFloat:RepackagedAndroidViewView_getHeight(self)];
    [((RepackagedAndroidGraphicsMatrix *) nil_chk([self getMatrix])) mapRectWithRepackagedAndroidGraphicsRectF:tmpRect];
    [((RepackagedAndroidGraphicsRect *) nil_chk(outRect)) setWithInt:J2ObjCFpToInt(tmpRect->left_) + mLeft_ withInt:J2ObjCFpToInt(tmpRect->top_) + mTop_ withInt:
#line 12175
    J2ObjCFpToInt(tmpRect->right_) + mLeft_ withInt:J2ObjCFpToInt(tmpRect->bottom_) + mTop_];
  }
}


#line 12182
- (jboolean)pointInViewWithFloat:(jfloat)localX
                       withFloat:(jfloat)localY {
  return RepackagedAndroidViewView_pointInViewWithFloat_withFloat_(self, localX, localY);
}


#line 12195
- (jboolean)pointInViewWithFloat:(jfloat)localX
                       withFloat:(jfloat)localY
                       withFloat:(jfloat)slop {
  return localX >= -slop && localY >= -slop && localX < ((mRight_ - mLeft_) + slop) &&
#line 12197
  localY < ((mBottom_ - mTop_) + slop);
}


#line 12211
- (void)getFocusedRectWithRepackagedAndroidGraphicsRect:(RepackagedAndroidGraphicsRect *)r {
  [self getDrawingRectWithRepackagedAndroidGraphicsRect:r];
}


#line 12229
- (jboolean)getGlobalVisibleRectWithRepackagedAndroidGraphicsRect:(RepackagedAndroidGraphicsRect *)r
                               withRepackagedAndroidGraphicsPoint:(RepackagedAndroidGraphicsPoint *)globalOffset {
  jint width = mRight_ - mLeft_;
  jint height = mBottom_ - mTop_;
  if (width > 0 && height > 0) {
    [((RepackagedAndroidGraphicsRect *) nil_chk(r)) setWithInt:0 withInt:0 withInt:width withInt:height];
    if (globalOffset != nil) {
      [globalOffset setWithInt:-mScrollX_ withInt:-mScrollY_];
    }
    return mParent_ == nil || [mParent_ getChildVisibleRectWithRepackagedAndroidViewView:self withRepackagedAndroidGraphicsRect:r withRepackagedAndroidGraphicsPoint:globalOffset];
  }
  return NO;
}


#line 12242
- (jboolean)getGlobalVisibleRectWithRepackagedAndroidGraphicsRect:(RepackagedAndroidGraphicsRect *)r {
  return [self getGlobalVisibleRectWithRepackagedAndroidGraphicsRect:r withRepackagedAndroidGraphicsPoint:nil];
}

- (jboolean)getLocalVisibleRectWithRepackagedAndroidGraphicsRect:(RepackagedAndroidGraphicsRect *)r {
  RepackagedAndroidGraphicsPoint *offset = mAttachInfo_ != nil ? mAttachInfo_->mPoint_ : new_RepackagedAndroidGraphicsPoint_init();
  if ([self getGlobalVisibleRectWithRepackagedAndroidGraphicsRect:r withRepackagedAndroidGraphicsPoint:offset]) {
    [((RepackagedAndroidGraphicsRect *) nil_chk(r)) offsetWithInt:-offset->x_ withInt:-offset->y_];
    return YES;
  }
  return NO;
}


#line 12260
- (void)offsetTopAndBottomWithInt:(jint)offset {
  if (offset != 0) {
    jboolean matrixIsIdentity = RepackagedAndroidViewView_hasIdentityMatrix(self);
    if (matrixIsIdentity) {
      if ([self isHardwareAccelerated]) {
        [self invalidateViewPropertyWithBoolean:NO withBoolean:NO];
      }
      else {
        
#line 12267
        id<RepackagedAndroidViewViewParent> p = mParent_;
        if (p != nil && mAttachInfo_ != nil) {
          RepackagedAndroidGraphicsRect *r = mAttachInfo_->mTmpInvalRect_;
          jint minTop;
          jint maxBottom;
          jint yLoc;
          if (offset < 0) {
            minTop = mTop_ + offset;
            maxBottom = mBottom_;
            yLoc = offset;
          }
          else {
            
#line 12278
            minTop = mTop_;
            maxBottom = mBottom_ + offset;
            yLoc = 0;
          }
          [((RepackagedAndroidGraphicsRect *) nil_chk(r)) setWithInt:0 withInt:yLoc withInt:mRight_ - mLeft_ withInt:maxBottom - minTop];
          [p invalidateChildWithRepackagedAndroidViewView:self withRepackagedAndroidGraphicsRect:r];
        }
      }
    }
    else {
      
#line 12287
      [self invalidateViewPropertyWithBoolean:NO withBoolean:NO];
    }
    
#line 12290
    mTop_ += offset;
    mBottom_ += offset;
    [((RepackagedAndroidViewRenderNode *) nil_chk(mRenderNode_)) offsetTopAndBottomWithInt:offset];
    if ([self isHardwareAccelerated]) {
      [self invalidateViewPropertyWithBoolean:NO withBoolean:NO];
      [self invalidateParentIfNeededAndWasQuickRejected];
    }
    else {
      
#line 12297
      if (!matrixIsIdentity) {
        [self invalidateViewPropertyWithBoolean:NO withBoolean:YES];
      }
      [self invalidateParentIfNeeded];
    }
    [self notifySubtreeAccessibilityStateChangedIfNeeded];
  }
}


#line 12311
- (void)offsetLeftAndRightWithInt:(jint)offset {
  if (offset != 0) {
    jboolean matrixIsIdentity = RepackagedAndroidViewView_hasIdentityMatrix(self);
    if (matrixIsIdentity) {
      if ([self isHardwareAccelerated]) {
        [self invalidateViewPropertyWithBoolean:NO withBoolean:NO];
      }
      else {
        
#line 12318
        id<RepackagedAndroidViewViewParent> p = mParent_;
        if (p != nil && mAttachInfo_ != nil) {
          RepackagedAndroidGraphicsRect *r = mAttachInfo_->mTmpInvalRect_;
          jint minLeft;
          jint maxRight;
          if (offset < 0) {
            minLeft = mLeft_ + offset;
            maxRight = mRight_;
          }
          else {
            
#line 12327
            minLeft = mLeft_;
            maxRight = mRight_ + offset;
          }
          [((RepackagedAndroidGraphicsRect *) nil_chk(r)) setWithInt:0 withInt:0 withInt:maxRight - minLeft withInt:mBottom_ - mTop_];
          [p invalidateChildWithRepackagedAndroidViewView:self withRepackagedAndroidGraphicsRect:r];
        }
      }
    }
    else {
      
#line 12335
      [self invalidateViewPropertyWithBoolean:NO withBoolean:NO];
    }
    
#line 12338
    mLeft_ += offset;
    mRight_ += offset;
    [((RepackagedAndroidViewRenderNode *) nil_chk(mRenderNode_)) offsetLeftAndRightWithInt:offset];
    if ([self isHardwareAccelerated]) {
      [self invalidateViewPropertyWithBoolean:NO withBoolean:NO];
      [self invalidateParentIfNeededAndWasQuickRejected];
    }
    else {
      
#line 12345
      if (!matrixIsIdentity) {
        [self invalidateViewPropertyWithBoolean:NO withBoolean:YES];
      }
      [self invalidateParentIfNeeded];
    }
    [self notifySubtreeAccessibilityStateChangedIfNeeded];
  }
}


#line 12370
- (RepackagedAndroidViewViewGroup_LayoutParams *)getLayoutParams {
  return mLayoutParams_;
}


#line 12383
- (void)setLayoutParamsWithRepackagedAndroidViewViewGroup_LayoutParams:(RepackagedAndroidViewViewGroup_LayoutParams *)params {
  if (params == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"Layout parameters cannot be null");
  }
  mLayoutParams_ = params;
  [self resolveLayoutParams];
  if ([mParent_ isKindOfClass:[RepackagedAndroidViewViewGroup class]]) {
    [((RepackagedAndroidViewViewGroup *) nil_chk(((RepackagedAndroidViewViewGroup *) check_class_cast(mParent_, [RepackagedAndroidViewViewGroup class])))) onSetLayoutParamsWithRepackagedAndroidViewView:self withRepackagedAndroidViewViewGroup_LayoutParams:params];
  }
  [self requestLayout];
}


#line 12400
- (void)resolveLayoutParams {
  if (mLayoutParams_ != nil) {
    [mLayoutParams_ resolveLayoutDirectionWithInt:[self getLayoutDirection]];
  }
}


#line 12413
- (void)scrollToWithInt:(jint)x
                withInt:(jint)y {
  if (mScrollX_ != x || mScrollY_ != y) {
    jint oldX = mScrollX_;
    jint oldY = mScrollY_;
    mScrollX_ = x;
    mScrollY_ = y;
    [self invalidateParentCaches];
    [self onScrollChangedWithInt:mScrollX_ withInt:mScrollY_ withInt:oldX withInt:oldY];
    if (![self awakenScrollBars]) {
      [self postInvalidateOnAnimation];
    }
  }
}


#line 12434
- (void)scrollByWithInt:(jint)x
                withInt:(jint)y {
  [self scrollToWithInt:mScrollX_ + x withInt:mScrollY_ + y];
}


#line 12467
- (jboolean)awakenScrollBars {
  return mScrollCache_ != nil &&
#line 12469
  [self awakenScrollBarsWithInt:mScrollCache_->scrollBarDefaultDelayBeforeFade_ withBoolean:YES];
}


#line 12480
- (jboolean)initialAwakenScrollBars {
  return RepackagedAndroidViewView_initialAwakenScrollBars(self);
}


#line 12519
- (jboolean)awakenScrollBarsWithInt:(jint)startDelay {
  return [self awakenScrollBarsWithInt:startDelay withBoolean:YES];
}


#line 12561
- (jboolean)awakenScrollBarsWithInt:(jint)startDelay
                        withBoolean:(jboolean)invalidate {
  RepackagedAndroidViewView_ScrollabilityCache *scrollCache = mScrollCache_;
  
#line 12564
  if (scrollCache == nil || !scrollCache->fadeScrollBars_) {
    return NO;
  }
  
#line 12568
  if (((RepackagedAndroidViewView_ScrollabilityCache *) nil_chk(scrollCache))->scrollBar_ == nil) {
    scrollCache->scrollBar_ = new_RepackagedAndroidWidgetScrollBarDrawable_init();
    [scrollCache->scrollBar_ setCallbackWithRepackagedAndroidViewView:self];
    [scrollCache->scrollBar_ setStateWithIntArray:RepackagedAndroidViewView_getDrawableState(self)];
  }
  
#line 12574
  if ([self isHorizontalScrollBarEnabled] || [self isVerticalScrollBarEnabled]) {
    
#line 12576
    if (invalidate) {
      
#line 12578
      [self postInvalidateOnAnimation];
    }
    
#line 12581
    if (scrollCache->state_ == RepackagedAndroidViewView_ScrollabilityCache_OFF) {
      
#line 12585
      jint KEY_REPEAT_FIRST_DELAY = 750;
      startDelay = JavaLangMath_maxWithInt_withInt_(KEY_REPEAT_FIRST_DELAY, startDelay);
    }
    
#line 12591
    jlong fadeStartTime = RepackagedAndroidViewAnimationAnimationUtils_currentAnimationTimeMillis() + startDelay;
    scrollCache->fadeStartTime_ = fadeStartTime;
    scrollCache->state_ = RepackagedAndroidViewView_ScrollabilityCache_ON;
    
#line 12596
    if (mAttachInfo_ != nil) {
      [((id<RepackagedAndroidOsHandler>) nil_chk(mAttachInfo_->mHandler_)) removeCallbacksWithId:scrollCache];
      [mAttachInfo_->mHandler_ postAtTimeWithId:scrollCache withLong:fadeStartTime];
    }
    
#line 12601
    return YES;
  }
  
#line 12604
  return NO;
}


#line 12611
- (jboolean)skipInvalidate {
  return RepackagedAndroidViewView_skipInvalidate(self);
}


#line 12630
- (void)invalidateWithRepackagedAndroidGraphicsRect:(RepackagedAndroidGraphicsRect *)dirty {
  jint scrollX = mScrollX_;
  jint scrollY = mScrollY_;
  [self invalidateInternalWithInt:((RepackagedAndroidGraphicsRect *) nil_chk(dirty))->left_ - scrollX withInt:dirty->top_ - scrollY withInt:
#line 12634
  dirty->right_ - scrollX withInt:dirty->bottom_ - scrollY withBoolean:YES withBoolean:NO];
}


#line 12651
- (void)invalidateWithInt:(jint)l
                  withInt:(jint)t
                  withInt:(jint)r
                  withInt:(jint)b {
  jint scrollX = mScrollX_;
  jint scrollY = mScrollY_;
  [self invalidateInternalWithInt:l - scrollX withInt:t - scrollY withInt:r - scrollX withInt:b - scrollY withBoolean:YES withBoolean:NO];
}


#line 12665
- (void)invalidate {
  [self invalidateWithBoolean:YES];
}


#line 12681
- (void)invalidateWithBoolean:(jboolean)invalidateCache {
  [self invalidateInternalWithInt:0 withInt:0 withInt:mRight_ - mLeft_ withInt:mBottom_ - mTop_ withBoolean:invalidateCache withBoolean:YES];
}

- (void)invalidateInternalWithInt:(jint)l
                          withInt:(jint)t
                          withInt:(jint)r
                          withInt:(jint)b
                      withBoolean:(jboolean)invalidateCache
                      withBoolean:(jboolean)fullInvalidate {
  
#line 12687
  if (mGhostView_ != nil) {
    [mGhostView_ invalidateWithBoolean:YES];
    return;
  }
  
#line 12692
  if (RepackagedAndroidViewView_skipInvalidate(self)) {
    return;
  }
  
#line 12696
  if ((mPrivateFlags_ & (RepackagedAndroidViewView_PFLAG_DRAWN | RepackagedAndroidViewView_PFLAG_HAS_BOUNDS)) == (RepackagedAndroidViewView_PFLAG_DRAWN | RepackagedAndroidViewView_PFLAG_HAS_BOUNDS) ||
#line 12697
  (invalidateCache && (mPrivateFlags_ & RepackagedAndroidViewView_PFLAG_DRAWING_CACHE_VALID) == RepackagedAndroidViewView_PFLAG_DRAWING_CACHE_VALID) ||
#line 12698
  (mPrivateFlags_ & RepackagedAndroidViewView_PFLAG_INVALIDATED) != RepackagedAndroidViewView_PFLAG_INVALIDATED ||
#line 12699
  (fullInvalidate && [self isOpaque] != mLastIsOpaque_)) {
    if (fullInvalidate) {
      mLastIsOpaque_ = [self isOpaque];
      mPrivateFlags_ &= ~RepackagedAndroidViewView_PFLAG_DRAWN;
    }
    
#line 12705
    mPrivateFlags_ |= RepackagedAndroidViewView_PFLAG_DIRTY;
    
#line 12707
    if (invalidateCache) {
      mPrivateFlags_ |= RepackagedAndroidViewView_PFLAG_INVALIDATED;
      mPrivateFlags_ &= ~RepackagedAndroidViewView_PFLAG_DRAWING_CACHE_VALID;
    }
    
#line 12713
    RepackagedAndroidViewView_AttachInfo *ai = mAttachInfo_;
    id<RepackagedAndroidViewViewParent> p = mParent_;
    if (p != nil && ai != nil && l < r && t < b) {
      RepackagedAndroidGraphicsRect *damage = ai->mTmpInvalRect_;
      [((RepackagedAndroidGraphicsRect *) nil_chk(damage)) setWithInt:l withInt:t withInt:r withInt:b];
      [p invalidateChildWithRepackagedAndroidViewView:self withRepackagedAndroidGraphicsRect:damage];
    }
    
#line 12722
    if (mBackground_ != nil && [mBackground_ isProjected]) {
      RepackagedAndroidViewView *receiver = RepackagedAndroidViewView_getProjectionReceiver(self);
      if (receiver != nil) {
        [receiver damageInParent];
      }
    }
    
#line 12730
    if ([self isHardwareAccelerated] && [self getZ] != 0) {
      RepackagedAndroidViewView_damageShadowReceiver(self);
    }
  }
}


#line 12739
- (RepackagedAndroidViewView *)getProjectionReceiver {
  return RepackagedAndroidViewView_getProjectionReceiver(self);
}


#line 12755
- (jboolean)isProjectionReceiver {
  return RepackagedAndroidViewView_isProjectionReceiver(self);
}


#line 12765
- (void)damageShadowReceiver {
  RepackagedAndroidViewView_damageShadowReceiver(self);
}


#line 12792
- (void)invalidateViewPropertyWithBoolean:(jboolean)invalidateParent
                              withBoolean:(jboolean)forceRedraw {
  if (![self isHardwareAccelerated] ||
#line 12794
  ![((RepackagedAndroidViewRenderNode *) nil_chk(mRenderNode_)) isValid] ||
#line 12795
  (mPrivateFlags_ & RepackagedAndroidViewView_PFLAG_DRAW_ANIMATION) != 0) {
    if (invalidateParent) {
      [self invalidateParentCaches];
    }
    if (forceRedraw) {
      mPrivateFlags_ |= RepackagedAndroidViewView_PFLAG_DRAWN;
    }
    [self invalidateWithBoolean:NO];
  }
  else {
    
#line 12804
    [self damageInParent];
  }
  if ([self isHardwareAccelerated] && invalidateParent && [self getZ] != 0) {
    RepackagedAndroidViewView_damageShadowReceiver(self);
  }
}


#line 12816
- (void)damageInParent {
  RepackagedAndroidViewView_AttachInfo *ai = mAttachInfo_;
  id<RepackagedAndroidViewViewParent> p = mParent_;
  if (p != nil && ai != nil) {
    RepackagedAndroidGraphicsRect *r = ai->mTmpInvalRect_;
    [((RepackagedAndroidGraphicsRect *) nil_chk(r)) setWithInt:0 withInt:0 withInt:mRight_ - mLeft_ withInt:mBottom_ - mTop_];
    if ([mParent_ isKindOfClass:[RepackagedAndroidViewViewGroup class]]) {
      [((RepackagedAndroidViewViewGroup *) nil_chk(((RepackagedAndroidViewViewGroup *) check_class_cast(mParent_, [RepackagedAndroidViewViewGroup class])))) damageChildWithRepackagedAndroidViewView:self withRepackagedAndroidGraphicsRect:r];
    }
    else {
      
#line 12825
      [((id<RepackagedAndroidViewViewParent>) nil_chk(mParent_)) invalidateChildWithRepackagedAndroidViewView:self withRepackagedAndroidGraphicsRect:r];
    }
  }
}

- (void)transformRectWithRepackagedAndroidGraphicsRect:(RepackagedAndroidGraphicsRect *)rect {
  if (![((RepackagedAndroidGraphicsMatrix *) nil_chk([self getMatrix])) isIdentity]) {
    RepackagedAndroidGraphicsRectF *boundingRect = ((RepackagedAndroidViewView_AttachInfo *) nil_chk(mAttachInfo_))->mTmpTransformRect_;
    [((RepackagedAndroidGraphicsRectF *) nil_chk(boundingRect)) setWithRepackagedAndroidGraphicsRect:rect];
    [((RepackagedAndroidGraphicsMatrix *) nil_chk([self getMatrix])) mapRectWithRepackagedAndroidGraphicsRectF:boundingRect];
    [((RepackagedAndroidGraphicsRect *) nil_chk(rect)) setWithInt:J2ObjCFpToInt(JavaLangMath_floorWithDouble_(boundingRect->left_)) withInt:J2ObjCFpToInt(JavaLangMath_floorWithDouble_(
#line 12839
    boundingRect->top_)) withInt:J2ObjCFpToInt(JavaLangMath_ceilWithDouble_(
#line 12840
    boundingRect->right_)) withInt:J2ObjCFpToInt(JavaLangMath_ceilWithDouble_(
#line 12841
    boundingRect->bottom_))];
  }
}


#line 12854
- (void)invalidateParentCaches {
  if ([mParent_ isKindOfClass:[RepackagedAndroidViewView class]]) {
    ((RepackagedAndroidViewView *) nil_chk(((RepackagedAndroidViewView *) check_class_cast(mParent_, [RepackagedAndroidViewView class]))))->mPrivateFlags_ |= RepackagedAndroidViewView_PFLAG_INVALIDATED;
  }
}


#line 12869
- (void)invalidateParentIfNeeded {
  if ([self isHardwareAccelerated] && [mParent_ isKindOfClass:[RepackagedAndroidViewView class]]) {
    [((RepackagedAndroidViewView *) nil_chk(((RepackagedAndroidViewView *) check_class_cast(mParent_, [RepackagedAndroidViewView class])))) invalidateWithBoolean:YES];
  }
}


#line 12878
- (void)invalidateParentIfNeededAndWasQuickRejected {
  if ((mPrivateFlags2_ & RepackagedAndroidViewView_PFLAG2_VIEW_QUICK_REJECTED) != 0) {
    
#line 12881
    [self invalidateParentIfNeeded];
  }
}


#line 12897
- (jboolean)isOpaque {
  return (mPrivateFlags_ & RepackagedAndroidViewView_PFLAG_OPAQUE_MASK) == RepackagedAndroidViewView_PFLAG_OPAQUE_MASK &&
#line 12899
  RepackagedAndroidViewView_getFinalAlpha(self) >= 1.0f;
}


#line 12905
- (void)computeOpaqueFlags {
  
#line 12911
  if (mBackground_ != nil && [mBackground_ getOpacity] == RepackagedAndroidGraphicsPixelFormat_get_OPAQUE_()) {
    mPrivateFlags_ |= RepackagedAndroidViewView_PFLAG_OPAQUE_BACKGROUND;
  }
  else {
    
#line 12914
    mPrivateFlags_ &= ~RepackagedAndroidViewView_PFLAG_OPAQUE_BACKGROUND;
  }
  
#line 12917
  jint flags = mViewFlags_;
  if (((flags & RepackagedAndroidViewView_SCROLLBARS_VERTICAL) == 0 && (flags & RepackagedAndroidViewView_SCROLLBARS_HORIZONTAL) == 0) ||
#line 12919
  (flags & RepackagedAndroidViewView_SCROLLBARS_STYLE_MASK) == RepackagedAndroidViewView_SCROLLBARS_INSIDE_OVERLAY ||
#line 12920
  (flags & RepackagedAndroidViewView_SCROLLBARS_STYLE_MASK) == RepackagedAndroidViewView_SCROLLBARS_OUTSIDE_OVERLAY) {
    mPrivateFlags_ |= RepackagedAndroidViewView_PFLAG_OPAQUE_SCROLLBARS;
  }
  else {
    
#line 12923
    mPrivateFlags_ &= ~RepackagedAndroidViewView_PFLAG_OPAQUE_SCROLLBARS;
  }
}


#line 12930
- (jboolean)hasOpaqueScrollbars {
  return (mPrivateFlags_ & RepackagedAndroidViewView_PFLAG_OPAQUE_SCROLLBARS) == RepackagedAndroidViewView_PFLAG_OPAQUE_SCROLLBARS;
}


#line 12938
- (id<RepackagedAndroidOsHandler>)getHandler {
  RepackagedAndroidViewView_AttachInfo *attachInfo = mAttachInfo_;
  if (attachInfo != nil) {
    return attachInfo->mHandler_;
  }
  return nil;
}


#line 12951
- (RepackagedAndroidViewViewRootImpl *)getViewRootImpl {
  if (mAttachInfo_ != nil) {
    return mAttachInfo_->mViewRootImpl_;
  }
  return nil;
}


#line 12961
- (RepackagedAndroidViewHardwareRenderer *)getHardwareRenderer {
  return mAttachInfo_ != nil ? mAttachInfo_->mHardwareRenderer_ : nil;
}


#line 12978
- (jboolean)postWithJavaLangRunnable:(id<JavaLangRunnable>)action {
  RepackagedAndroidViewView_AttachInfo *attachInfo = mAttachInfo_;
  if (attachInfo != nil) {
    return [((id<RepackagedAndroidOsHandler>) nil_chk(attachInfo->mHandler_)) postWithJavaLangRunnable:action];
  }
  
#line 12984
  [((id<RepackagedAndroidOsHandler>) nil_chk(RepackagedAndroidViewViewRootImpl_getRunQueue())) postWithJavaLangRunnable:action];
  return YES;
}


#line 13007
- (jboolean)postDelayedWithJavaLangRunnable:(id<JavaLangRunnable>)action
                                   withLong:(jlong)delayMillis {
  RepackagedAndroidViewView_AttachInfo *attachInfo = mAttachInfo_;
  if (attachInfo != nil) {
    return [((id<RepackagedAndroidOsHandler>) nil_chk(attachInfo->mHandler_)) postDelayedWithJavaLangRunnable:action withLong:delayMillis];
  }
  
#line 13013
  [((id<RepackagedAndroidOsHandler>) nil_chk(RepackagedAndroidViewViewRootImpl_getRunQueue())) postDelayedWithJavaLangRunnable:action withLong:delayMillis];
  return YES;
}


#line 13026
- (void)postOnAnimationWithJavaLangRunnable:(id<JavaLangRunnable>)action {
  RepackagedAndroidViewView_AttachInfo *attachInfo = mAttachInfo_;
  if (attachInfo != nil) {
    [((RepackagedAndroidViewChoreographer *) nil_chk(((RepackagedAndroidViewViewRootImpl *) nil_chk(attachInfo->mViewRootImpl_))->mChoreographer_)) postCallbackWithNSString:RepackagedAndroidViewChoreographer_get_CALLBACK_ANIMATION_() withJavaLangRunnable:
#line 13030
    action withId:nil];
  }
  else {
    [((id<RepackagedAndroidOsHandler>) nil_chk(RepackagedAndroidViewViewRootImpl_getRunQueue())) postWithJavaLangRunnable:action];
  }
}


#line 13049
- (void)postOnAnimationDelayedWithJavaLangRunnable:(id<JavaLangRunnable>)action
                                          withLong:(jlong)delayMillis {
  RepackagedAndroidViewView_AttachInfo *attachInfo = mAttachInfo_;
  if (attachInfo != nil) {
    [((RepackagedAndroidViewChoreographer *) nil_chk(((RepackagedAndroidViewViewRootImpl *) nil_chk(attachInfo->mViewRootImpl_))->mChoreographer_)) postCallbackDelayedWithNSString:RepackagedAndroidViewChoreographer_get_CALLBACK_ANIMATION_() withJavaLangRunnable:
#line 13053
    action withId:nil withLong:delayMillis];
  }
  else {
    [((id<RepackagedAndroidOsHandler>) nil_chk(RepackagedAndroidViewViewRootImpl_getRunQueue())) postDelayedWithJavaLangRunnable:action withLong:delayMillis];
  }
}


#line 13075
- (jboolean)removeCallbacksWithJavaLangRunnable:(id<JavaLangRunnable>)action {
  if (action != nil) {
    RepackagedAndroidViewView_AttachInfo *attachInfo = mAttachInfo_;
    if (attachInfo != nil) {
      [((id<RepackagedAndroidOsHandler>) nil_chk(attachInfo->mHandler_)) removeCallbacksWithId:action];
      [((RepackagedAndroidViewChoreographer *) nil_chk(((RepackagedAndroidViewViewRootImpl *) nil_chk(attachInfo->mViewRootImpl_))->mChoreographer_)) removeCallbacksWithNSString:RepackagedAndroidViewChoreographer_get_CALLBACK_ANIMATION_() withJavaLangRunnable:
#line 13081
      action withId:nil];
    }
    
#line 13084
    [((id<RepackagedAndroidOsHandler>) nil_chk(RepackagedAndroidViewViewRootImpl_getRunQueue())) removeCallbacksWithId:action];
  }
  return YES;
}


#line 13099
- (void)postInvalidate {
  [self postInvalidateDelayedWithLong:0];
}


#line 13119
- (void)postInvalidateWithInt:(jint)left
                      withInt:(jint)top
                      withInt:(jint)right
                      withInt:(jint)bottom {
  [self postInvalidateDelayedWithLong:0 withInt:left withInt:top withInt:right withInt:bottom];
}


#line 13136
- (void)postInvalidateDelayedWithLong:(jlong)delayMilliseconds {
  
#line 13139
  RepackagedAndroidViewView_AttachInfo *attachInfo = mAttachInfo_;
  if (attachInfo != nil) {
    [((RepackagedAndroidViewViewRootImpl *) nil_chk(attachInfo->mViewRootImpl_)) dispatchInvalidateDelayedWithRepackagedAndroidViewView:self withLong:delayMilliseconds];
  }
}


#line 13163
- (void)postInvalidateDelayedWithLong:(jlong)delayMilliseconds
                              withInt:(jint)left
                              withInt:(jint)top
                              withInt:(jint)right
                              withInt:(jint)bottom {
  
#line 13168
  RepackagedAndroidViewView_AttachInfo *attachInfo = mAttachInfo_;
  if (attachInfo != nil) {
    RepackagedAndroidViewView_AttachInfo_InvalidateInfo *info = RepackagedAndroidViewView_AttachInfo_InvalidateInfo_obtain();
    ((RepackagedAndroidViewView_AttachInfo_InvalidateInfo *) nil_chk(info))->target_ = self;
    info->left_ = left;
    info->top_ = top;
    info->right_ = right;
    info->bottom_ = bottom;
    
#line 13177
    [((RepackagedAndroidViewViewRootImpl *) nil_chk(attachInfo->mViewRootImpl_)) dispatchInvalidateRectDelayedWithRepackagedAndroidViewView_AttachInfo_InvalidateInfo:info withLong:delayMilliseconds];
  }
}


#line 13190
- (void)postInvalidateOnAnimation {
  
#line 13193
  RepackagedAndroidViewView_AttachInfo *attachInfo = mAttachInfo_;
  if (attachInfo != nil) {
    [((RepackagedAndroidViewViewRootImpl *) nil_chk(attachInfo->mViewRootImpl_)) dispatchInvalidateOnAnimationWithRepackagedAndroidViewView:self];
  }
}


#line 13214
- (void)postInvalidateOnAnimationWithInt:(jint)left
                                 withInt:(jint)top
                                 withInt:(jint)right
                                 withInt:(jint)bottom {
  
#line 13217
  RepackagedAndroidViewView_AttachInfo *attachInfo = mAttachInfo_;
  if (attachInfo != nil) {
    RepackagedAndroidViewView_AttachInfo_InvalidateInfo *info = RepackagedAndroidViewView_AttachInfo_InvalidateInfo_obtain();
    ((RepackagedAndroidViewView_AttachInfo_InvalidateInfo *) nil_chk(info))->target_ = self;
    info->left_ = left;
    info->top_ = top;
    info->right_ = right;
    info->bottom_ = bottom;
    
#line 13226
    [((RepackagedAndroidViewViewRootImpl *) nil_chk(attachInfo->mViewRootImpl_)) dispatchInvalidateRectOnAnimationWithRepackagedAndroidViewView_AttachInfo_InvalidateInfo:info];
  }
}


#line 13235
- (void)postSendViewScrolledAccessibilityEventCallback {
  RepackagedAndroidViewView_postSendViewScrolledAccessibilityEventCallback(self);
}


#line 13252
- (void)computeScroll {
}


#line 13266
- (jboolean)isHorizontalFadingEdgeEnabled {
  return (mViewFlags_ & RepackagedAndroidViewView_FADING_EDGE_HORIZONTAL) == RepackagedAndroidViewView_FADING_EDGE_HORIZONTAL;
}


#line 13282
- (void)setHorizontalFadingEdgeEnabledWithBoolean:(jboolean)horizontalFadingEdgeEnabled {
  if ([self isHorizontalFadingEdgeEnabled] != horizontalFadingEdgeEnabled) {
    if (horizontalFadingEdgeEnabled) {
      RepackagedAndroidViewView_initScrollCache(self);
    }
    
#line 13288
    mViewFlags_ ^= RepackagedAndroidViewView_FADING_EDGE_HORIZONTAL;
  }
}


#line 13303
- (jboolean)isVerticalFadingEdgeEnabled {
  return (mViewFlags_ & RepackagedAndroidViewView_FADING_EDGE_VERTICAL) == RepackagedAndroidViewView_FADING_EDGE_VERTICAL;
}


#line 13319
- (void)setVerticalFadingEdgeEnabledWithBoolean:(jboolean)verticalFadingEdgeEnabled {
  if ([self isVerticalFadingEdgeEnabled] != verticalFadingEdgeEnabled) {
    if (verticalFadingEdgeEnabled) {
      RepackagedAndroidViewView_initScrollCache(self);
    }
    
#line 13325
    mViewFlags_ ^= RepackagedAndroidViewView_FADING_EDGE_VERTICAL;
  }
}


#line 13339
- (jfloat)getTopFadingEdgeStrength {
  return [self computeVerticalScrollOffset] > 0 ? 1.0f : 0.0f;
}


#line 13353
- (jfloat)getBottomFadingEdgeStrength {
  return [self computeVerticalScrollOffset] + [self computeVerticalScrollExtent] <
#line 13355
  [self computeVerticalScrollRange] ? 1.0f : 0.0f;
}


#line 13368
- (jfloat)getLeftFadingEdgeStrength {
  return [self computeHorizontalScrollOffset] > 0 ? 1.0f : 0.0f;
}


#line 13382
- (jfloat)getRightFadingEdgeStrength {
  return [self computeHorizontalScrollOffset] + [self computeHorizontalScrollExtent] <
#line 13384
  [self computeHorizontalScrollRange] ? 1.0f : 0.0f;
}


#line 13396
- (jboolean)isHorizontalScrollBarEnabled {
  return (mViewFlags_ & RepackagedAndroidViewView_SCROLLBARS_HORIZONTAL) == RepackagedAndroidViewView_SCROLLBARS_HORIZONTAL;
}


#line 13409
- (void)setHorizontalScrollBarEnabledWithBoolean:(jboolean)horizontalScrollBarEnabled {
  if ([self isHorizontalScrollBarEnabled] != horizontalScrollBarEnabled) {
    mViewFlags_ ^= RepackagedAndroidViewView_SCROLLBARS_HORIZONTAL;
    [self computeOpaqueFlags];
    [self resolvePadding];
  }
}


#line 13426
- (jboolean)isVerticalScrollBarEnabled {
  return (mViewFlags_ & RepackagedAndroidViewView_SCROLLBARS_VERTICAL) == RepackagedAndroidViewView_SCROLLBARS_VERTICAL;
}


#line 13439
- (void)setVerticalScrollBarEnabledWithBoolean:(jboolean)verticalScrollBarEnabled {
  if ([self isVerticalScrollBarEnabled] != verticalScrollBarEnabled) {
    mViewFlags_ ^= RepackagedAndroidViewView_SCROLLBARS_VERTICAL;
    [self computeOpaqueFlags];
    [self resolvePadding];
  }
}


#line 13450
- (void)recomputePadding {
  [self internalSetPaddingWithInt:mUserPaddingLeft_ withInt:mPaddingTop_ withInt:mUserPaddingRight_ withInt:mUserPaddingBottom_];
}


#line 13461
- (void)setScrollbarFadingEnabledWithBoolean:(jboolean)fadeScrollbars {
  RepackagedAndroidViewView_initScrollCache(self);
  RepackagedAndroidViewView_ScrollabilityCache *scrollabilityCache = mScrollCache_;
  ((RepackagedAndroidViewView_ScrollabilityCache *) nil_chk(scrollabilityCache))->fadeScrollBars_ = fadeScrollbars;
  if (fadeScrollbars) {
    scrollabilityCache->state_ = RepackagedAndroidViewView_ScrollabilityCache_OFF;
  }
  else {
    
#line 13468
    scrollabilityCache->state_ = RepackagedAndroidViewView_ScrollabilityCache_ON;
  }
}


#line 13480
- (jboolean)isScrollbarFadingEnabled {
  return mScrollCache_ != nil && mScrollCache_->fadeScrollBars_;
}


#line 13492
- (jint)getScrollBarDefaultDelayBeforeFade {
  return mScrollCache_ == nil ? RepackagedAndroidViewViewConfiguration_getScrollDefaultDelay() :
#line 13494
  mScrollCache_->scrollBarDefaultDelayBeforeFade_;
}


#line 13504
- (void)setScrollBarDefaultDelayBeforeFadeWithInt:(jint)scrollBarDefaultDelayBeforeFade {
  ((RepackagedAndroidViewView_ScrollabilityCache *) nil_chk(RepackagedAndroidViewView_getScrollCache(self)))->scrollBarDefaultDelayBeforeFade_ = scrollBarDefaultDelayBeforeFade;
}


#line 13516
- (jint)getScrollBarFadeDuration {
  return mScrollCache_ == nil ? RepackagedAndroidViewViewConfiguration_getScrollBarFadeDuration() :
#line 13518
  mScrollCache_->scrollBarFadeDuration_;
}


#line 13528
- (void)setScrollBarFadeDurationWithInt:(jint)scrollBarFadeDuration {
  ((RepackagedAndroidViewView_ScrollabilityCache *) nil_chk(RepackagedAndroidViewView_getScrollCache(self)))->scrollBarFadeDuration_ = scrollBarFadeDuration;
}


#line 13540
- (jint)getScrollBarSize {
  return mScrollCache_ == nil ? [((RepackagedAndroidViewViewConfiguration *) nil_chk(RepackagedAndroidViewViewConfiguration_getWithRepackagedAndroidContentContext_(mContext_))) getScaledScrollBarSize] :
#line 13542
  mScrollCache_->scrollBarSize_;
}


#line 13552
- (void)setScrollBarSizeWithInt:(jint)scrollBarSize {
  ((RepackagedAndroidViewView_ScrollabilityCache *) nil_chk(RepackagedAndroidViewView_getScrollCache(self)))->scrollBarSize_ = scrollBarSize;
}


#line 13575
- (void)setScrollBarStyleWithInt:(jint)style {
  if (style != (mViewFlags_ & RepackagedAndroidViewView_SCROLLBARS_STYLE_MASK)) {
    mViewFlags_ = (mViewFlags_ & ~RepackagedAndroidViewView_SCROLLBARS_STYLE_MASK) | (style & RepackagedAndroidViewView_SCROLLBARS_STYLE_MASK);
    [self computeOpaqueFlags];
    [self resolvePadding];
  }
}


#line 13600
- (jint)getScrollBarStyle {
  return mViewFlags_ & RepackagedAndroidViewView_SCROLLBARS_STYLE_MASK;
}


#line 13621
- (jint)computeHorizontalScrollRange {
  return RepackagedAndroidViewView_getWidth(self);
}


#line 13642
- (jint)computeHorizontalScrollOffset {
  return mScrollX_;
}


#line 13663
- (jint)computeHorizontalScrollExtent {
  return RepackagedAndroidViewView_getWidth(self);
}


#line 13682
- (jint)computeVerticalScrollRange {
  return RepackagedAndroidViewView_getHeight(self);
}


#line 13703
- (jint)computeVerticalScrollOffset {
  return mScrollY_;
}


#line 13724
- (jint)computeVerticalScrollExtent {
  return RepackagedAndroidViewView_getHeight(self);
}


#line 13734
- (jboolean)canScrollHorizontallyWithInt:(jint)direction {
  jint offset = [self computeHorizontalScrollOffset];
  jint range = [self computeHorizontalScrollRange] - [self computeHorizontalScrollExtent];
  if (range == 0) return NO;
  if (direction < 0) {
    return offset > 0;
  }
  else {
    
#line 13741
    return offset < range - 1;
  }
}


#line 13751
- (jboolean)canScrollVerticallyWithInt:(jint)direction {
  jint offset = [self computeVerticalScrollOffset];
  jint range = [self computeVerticalScrollRange] - [self computeVerticalScrollExtent];
  if (range == 0) return NO;
  if (direction < 0) {
    return offset > 0;
  }
  else {
    
#line 13758
    return offset < range - 1;
  }
}


#line 13762
- (void)getScrollIndicatorBoundsWithRepackagedAndroidGraphicsRect:(RepackagedAndroidGraphicsRect *)outArg {
  ((RepackagedAndroidGraphicsRect *) nil_chk(outArg))->left_ = mScrollX_;
  outArg->right_ = mScrollX_ + mRight_ - mLeft_;
  outArg->top_ = mScrollY_;
  outArg->bottom_ = mScrollY_ + mBottom_ - mTop_;
}

- (void)onDrawScrollIndicatorsWithRepackagedAndroidGraphicsCanvas:(RepackagedAndroidGraphicsCanvas *)c {
  RepackagedAndroidViewView_onDrawScrollIndicatorsWithRepackagedAndroidGraphicsCanvas_(self, c);
}


#line 13839
- (void)onDrawScrollBarsWithRepackagedAndroidGraphicsCanvas:(RepackagedAndroidGraphicsCanvas *)canvas {
  RepackagedAndroidViewView_onDrawScrollBarsWithRepackagedAndroidGraphicsCanvas_(self, canvas);
}


#line 13964
- (jboolean)isVerticalScrollBarHidden {
  return NO;
}


#line 13982
- (void)onDrawHorizontalScrollBarWithRepackagedAndroidGraphicsCanvas:(RepackagedAndroidGraphicsCanvas *)canvas
                       withRepackagedAndroidGraphicsDrawableDrawable:(RepackagedAndroidGraphicsDrawableDrawable *)scrollBar
                                                             withInt:(jint)l
                                                             withInt:(jint)t
                                                             withInt:(jint)r
                                                             withInt:(jint)b {
  
#line 13984
  [((RepackagedAndroidGraphicsDrawableDrawable *) nil_chk(scrollBar)) setBoundsWithInt:l withInt:t withInt:r withInt:b];
  [scrollBar drawWithRepackagedAndroidGraphicsCanvas:canvas];
}


#line 14002
- (void)onDrawVerticalScrollBarWithRepackagedAndroidGraphicsCanvas:(RepackagedAndroidGraphicsCanvas *)canvas
                     withRepackagedAndroidGraphicsDrawableDrawable:(RepackagedAndroidGraphicsDrawableDrawable *)scrollBar
                                                           withInt:(jint)l
                                                           withInt:(jint)t
                                                           withInt:(jint)r
                                                           withInt:(jint)b {
  
#line 14004
  [((RepackagedAndroidGraphicsDrawableDrawable *) nil_chk(scrollBar)) setBoundsWithInt:l withInt:t withInt:r withInt:b];
  [scrollBar drawWithRepackagedAndroidGraphicsCanvas:canvas];
}


#line 14013
- (void)onDrawWithRepackagedAndroidGraphicsCanvas:(RepackagedAndroidGraphicsCanvas *)canvas {
}


#line 14020
- (void)assignParentWithRepackagedAndroidViewViewParent:(id<RepackagedAndroidViewViewParent>)parent {
  if (mParent_ == nil) {
    mParent_ = parent;
  }
  else
#line 14023
  if (parent == nil) {
    mParent_ = nil;
  }
  else {
    
#line 14026
    @throw new_JavaLangRuntimeException_initWithNSString_(JreStrcat("$@$", @"view ", self, @" being added, but it already has a parent"));
  }
}


#line 14041
- (void)onAttachedToWindow {
  if ((mPrivateFlags_ & RepackagedAndroidViewView_PFLAG_REQUEST_TRANSPARENT_REGIONS) != 0) {
    [((id<RepackagedAndroidViewViewParent>) nil_chk(mParent_)) requestTransparentRegionWithRepackagedAndroidViewView:self];
  }
  
#line 14046
  mPrivateFlags3_ &= ~RepackagedAndroidViewView_PFLAG3_IS_LAID_OUT;
  
#line 14048
  [self jumpDrawablesToCurrentState];
  
#line 14050
  [self resetSubtreeAccessibilityStateChanged];
  
#line 14053
  RepackagedAndroidViewView_rebuildOutline(self);
  
#line 14055
  if ([self isFocused]) {
    RepackagedAndroidViewInputmethodInputMethodManager *imm = RepackagedAndroidViewInputmethodInputMethodManager_peekInstance();
    if (imm != nil) {
      [imm focusInWithRepackagedAndroidViewView:self];
    }
  }
}


#line 14070
- (jboolean)resolveRtlPropertiesIfNeeded {
  if (!RepackagedAndroidViewView_needRtlPropertiesResolution(self)) return NO;
  
#line 14074
  if (![self isLayoutDirectionResolved]) {
    [self resolveLayoutDirection];
    [self resolveLayoutParams];
  }
  
#line 14079
  if (![self isTextDirectionResolved]) {
    [self resolveTextDirection];
  }
  if (![self isTextAlignmentResolved]) {
    [self resolveTextAlignment];
  }
  
#line 14087
  if (![self areDrawablesResolved]) {
    [self resolveDrawables];
  }
  if (![self isPaddingResolved]) {
    [self resolvePadding];
  }
  [self onRtlPropertiesChangedWithInt:[self getLayoutDirection]];
  return YES;
}


#line 14102
- (void)resetRtlProperties {
  [self resetResolvedLayoutDirection];
  [self resetResolvedTextDirection];
  [self resetResolvedTextAlignment];
  [self resetResolvedPadding];
  [self resetResolvedDrawables];
}


#line 14113
- (void)dispatchScreenStateChangedWithInt:(jint)screenState {
  [self onScreenStateChangedWithInt:screenState];
}


#line 14126
- (void)onScreenStateChangedWithInt:(jint)screenState {
}


#line 14132
- (jboolean)hasRtlSupport {
  return RepackagedAndroidViewView_hasRtlSupport(self);
}


#line 14140
- (jboolean)isRtlCompatibilityMode {
  return RepackagedAndroidViewView_isRtlCompatibilityMode(self);
}


#line 14149
- (jboolean)needRtlPropertiesResolution {
  return RepackagedAndroidViewView_needRtlPropertiesResolution(self);
}


#line 14167
- (void)onRtlPropertiesChangedWithInt:(jint)layoutDirection {
}


#line 14178
- (jboolean)resolveLayoutDirection {
  
#line 14180
  mPrivateFlags2_ &= ~RepackagedAndroidViewView_PFLAG2_LAYOUT_DIRECTION_RESOLVED_MASK;
  
#line 14182
  if (RepackagedAndroidViewView_hasRtlSupport(self)) {
    
#line 14184
    switch (RShift32((mPrivateFlags2_ & RepackagedAndroidViewView_PFLAG2_LAYOUT_DIRECTION_MASK),
#line 14185
    RepackagedAndroidViewView_PFLAG2_LAYOUT_DIRECTION_MASK_SHIFT)) {
      case RepackagedAndroidViewView_LAYOUT_DIRECTION_INHERIT:
      
#line 14189
      if (![self canResolveLayoutDirection]) return NO;
      
#line 14192
      @try {
        if (![((id<RepackagedAndroidViewViewParent>) nil_chk(mParent_)) isLayoutDirectionResolved]) return NO;
        
#line 14195
        if ([mParent_ getLayoutDirection] == RepackagedAndroidViewView_LAYOUT_DIRECTION_RTL) {
          mPrivateFlags2_ |= RepackagedAndroidViewView_PFLAG2_LAYOUT_DIRECTION_RESOLVED_RTL;
        }
      }
      @catch (
#line 14198
      JavaLangAbstractMethodError *e) {
        RepackagedAndroidUtilLog_eWithNSString_withNSString_withJavaLangThrowable_(RepackagedAndroidViewView_VIEW_LOG_TAG_, JreStrcat("$$", [[((id<RepackagedAndroidViewViewParent>) nil_chk(mParent_)) getClass] getSimpleName], @" does not fully implement ViewParent"),
#line 14200
        e);
      }
      break;
      case RepackagedAndroidViewView_LAYOUT_DIRECTION_RTL:
      mPrivateFlags2_ |= RepackagedAndroidViewView_PFLAG2_LAYOUT_DIRECTION_RESOLVED_RTL;
      break;
      case RepackagedAndroidViewView_LAYOUT_DIRECTION_LOCALE:
      if (RepackagedAndroidViewView_LAYOUT_DIRECTION_RTL == RepackagedAndroidTextTextUtils_getLayoutDirectionFromLocaleWithJavaUtilLocale_(JavaUtilLocale_getDefault())) {
        
#line 14209
        mPrivateFlags2_ |= RepackagedAndroidViewView_PFLAG2_LAYOUT_DIRECTION_RESOLVED_RTL;
      }
      break;
      default:
      ;
    }
  }
  
#line 14218
  mPrivateFlags2_ |= RepackagedAndroidViewView_PFLAG2_LAYOUT_DIRECTION_RESOLVED;
  return YES;
}


#line 14227
- (jboolean)canResolveLayoutDirection {
  switch ([self getRawLayoutDirection]) {
    case RepackagedAndroidViewView_LAYOUT_DIRECTION_INHERIT:
    if (mParent_ != nil) {
      @try {
        return [mParent_ canResolveLayoutDirection];
      }
      @catch (
#line 14233
      JavaLangAbstractMethodError *e) {
        RepackagedAndroidUtilLog_eWithNSString_withNSString_withJavaLangThrowable_(RepackagedAndroidViewView_VIEW_LOG_TAG_, JreStrcat("$$", [[mParent_ getClass] getSimpleName], @" does not fully implement ViewParent"),
#line 14235
        e);
      }
    }
    return NO;
    
#line 14240
    default:
    return YES;
  }
}


#line 14251
- (void)resetResolvedLayoutDirection {
  
#line 14253
  mPrivateFlags2_ &= ~RepackagedAndroidViewView_PFLAG2_LAYOUT_DIRECTION_RESOLVED_MASK;
}


#line 14261
- (jboolean)isLayoutDirectionInherited {
  return [self getRawLayoutDirection] == RepackagedAndroidViewView_LAYOUT_DIRECTION_INHERIT;
}


#line 14268
- (jboolean)isLayoutDirectionResolved {
  return (mPrivateFlags2_ & RepackagedAndroidViewView_PFLAG2_LAYOUT_DIRECTION_RESOLVED) == RepackagedAndroidViewView_PFLAG2_LAYOUT_DIRECTION_RESOLVED;
}


#line 14277
- (jboolean)isPaddingResolved {
  return (mPrivateFlags2_ & RepackagedAndroidViewView_PFLAG2_PADDING_RESOLVED) == RepackagedAndroidViewView_PFLAG2_PADDING_RESOLVED;
}


#line 14287
- (void)resolvePadding {
  jint resolvedLayoutDirection = [self getLayoutDirection];
  
#line 14290
  if (!RepackagedAndroidViewView_isRtlCompatibilityMode(self)) {
    
#line 14295
    if (mBackground_ != nil && (!mLeftPaddingDefined_ || !mRightPaddingDefined_)) {
      RepackagedAndroidGraphicsRect *padding = [((JavaLangThreadLocal *) nil_chk(RepackagedAndroidViewView_sThreadLocal_)) get];
      if (padding == nil) {
        padding = new_RepackagedAndroidGraphicsRect_init();
        [RepackagedAndroidViewView_sThreadLocal_ setWithId:padding];
      }
      [mBackground_ getPaddingWithRepackagedAndroidGraphicsRect:padding];
      if (!mLeftPaddingDefined_) {
        mUserPaddingLeftInitial_ = ((RepackagedAndroidGraphicsRect *) nil_chk(padding))->left_;
      }
      if (!mRightPaddingDefined_) {
        mUserPaddingRightInitial_ = ((RepackagedAndroidGraphicsRect *) nil_chk(padding))->right_;
      }
    }
    switch (resolvedLayoutDirection) {
      case RepackagedAndroidViewView_LAYOUT_DIRECTION_RTL:
      if (mUserPaddingStart_ != RepackagedAndroidViewView_UNDEFINED_PADDING) {
        mUserPaddingRight_ = mUserPaddingStart_;
      }
      else {
        
#line 14314
        mUserPaddingRight_ = mUserPaddingRightInitial_;
      }
      if (mUserPaddingEnd_ != RepackagedAndroidViewView_UNDEFINED_PADDING) {
        mUserPaddingLeft_ = mUserPaddingEnd_;
      }
      else {
        
#line 14319
        mUserPaddingLeft_ = mUserPaddingLeftInitial_;
      }
      break;
      case RepackagedAndroidViewView_LAYOUT_DIRECTION_LTR:
      default:
      if (mUserPaddingStart_ != RepackagedAndroidViewView_UNDEFINED_PADDING) {
        mUserPaddingLeft_ = mUserPaddingStart_;
      }
      else {
        
#line 14327
        mUserPaddingLeft_ = mUserPaddingLeftInitial_;
      }
      if (mUserPaddingEnd_ != RepackagedAndroidViewView_UNDEFINED_PADDING) {
        mUserPaddingRight_ = mUserPaddingEnd_;
      }
      else {
        
#line 14332
        mUserPaddingRight_ = mUserPaddingRightInitial_;
      }
    }
    
#line 14336
    mUserPaddingBottom_ = (mUserPaddingBottom_ >= 0) ? mUserPaddingBottom_ : mPaddingBottom_;
  }
  
#line 14339
  [self internalSetPaddingWithInt:mUserPaddingLeft_ withInt:mPaddingTop_ withInt:mUserPaddingRight_ withInt:mUserPaddingBottom_];
  [self onRtlPropertiesChangedWithInt:resolvedLayoutDirection];
  
#line 14342
  mPrivateFlags2_ |= RepackagedAndroidViewView_PFLAG2_PADDING_RESOLVED;
}


#line 14350
- (void)resetResolvedPadding {
  [self resetResolvedPaddingInternal];
}


#line 14358
- (void)resetResolvedPaddingInternal {
  mPrivateFlags2_ &= ~RepackagedAndroidViewView_PFLAG2_PADDING_RESOLVED;
}


#line 14369
- (void)onDetachedFromWindow {
}


#line 14383
- (void)onDetachedFromWindowInternal {
  mPrivateFlags_ &= ~RepackagedAndroidViewView_PFLAG_CANCEL_NEXT_UP_EVENT;
  mPrivateFlags3_ &= ~RepackagedAndroidViewView_PFLAG3_IS_LAID_OUT;
  
#line 14387
  RepackagedAndroidViewView_removeUnsetPressCallback(self);
  RepackagedAndroidViewView_removeLongPressCallback(self);
  RepackagedAndroidViewView_removePerformClickCallback(self);
  RepackagedAndroidViewView_removeSendViewScrolledAccessibilityEventCallback(self);
  [self stopNestedScroll];
  
#line 14395
  [self jumpDrawablesToCurrentState];
  
#line 14397
  [self destroyDrawingCache];
  
#line 14399
  RepackagedAndroidViewView_cleanupDraw(self);
  mCurrentAnimation_ = nil;
}


#line 14403
- (void)cleanupDraw {
  RepackagedAndroidViewView_cleanupDraw(self);
}


#line 14410
- (void)invalidateInheritedLayoutModeWithInt:(jint)layoutModeOfRoot {
}


#line 14416
- (jint)getWindowAttachCount {
  return mWindowAttachCount_;
}


#line 14425
- (id<RepackagedAndroidOsIBinder>)getWindowToken {
  return mAttachInfo_ != nil ? mAttachInfo_->mWindowToken_ : nil;
}


#line 14433
- (RepackagedAndroidViewWindowId *)getWindowId {
  if (mAttachInfo_ == nil) {
    return nil;
  }
  if (((RepackagedAndroidViewView_AttachInfo *) nil_chk(mAttachInfo_))->mWindowId_ == nil) {
    @try {
      mAttachInfo_->mIWindowId_ = [((id<RepackagedAndroidViewIWindowSession>) nil_chk(mAttachInfo_->mSession_)) getWindowIdWithRepackagedAndroidOsIBinder:
#line 14440
      mAttachInfo_->mWindowToken_];
      mAttachInfo_->mWindowId_ = new_RepackagedAndroidViewWindowId_initWithRepackagedAndroidViewIWindowId_(
#line 14442
      mAttachInfo_->mIWindowId_);
    }
    @catch (
#line 14443
    RepackagedAndroidOsRemoteException *e) {
    }
  }
  return mAttachInfo_->mWindowId_;
}


#line 14459
- (id<RepackagedAndroidOsIBinder>)getApplicationWindowToken {
  RepackagedAndroidViewView_AttachInfo *ai = mAttachInfo_;
  if (ai != nil) {
    id<RepackagedAndroidOsIBinder> appWindowToken = ai->mPanelParentWindowToken_;
    if (appWindowToken == nil) {
      appWindowToken = ai->mWindowToken_;
    }
    return appWindowToken;
  }
  return nil;
}


#line 14476
- (RepackagedAndroidViewDisplay *)getDisplay {
  return mAttachInfo_ != nil ? mAttachInfo_->mDisplay_ : nil;
}


#line 14485
- (id<RepackagedAndroidViewIWindowSession>)getWindowSession {
  return mAttachInfo_ != nil ? mAttachInfo_->mSession_ : nil;
}


#line 14492
- (jint)combineVisibilityWithInt:(jint)vis1
                         withInt:(jint)vis2 {
  
#line 14494
  return JavaLangMath_maxWithInt_withInt_(vis1, vis2);
}


#line 14501
- (void)dispatchAttachedToWindowWithRepackagedAndroidViewView_AttachInfo:(RepackagedAndroidViewView_AttachInfo *)info
                                                                 withInt:(jint)visibility {
  
#line 14503
  mAttachInfo_ = info;
  if (mOverlay_ != nil) {
    [((RepackagedAndroidViewViewGroup *) nil_chk([mOverlay_ getOverlayView])) dispatchAttachedToWindowWithRepackagedAndroidViewView_AttachInfo:info withInt:visibility];
  }
  mWindowAttachCount_++;
  
#line 14509
  mPrivateFlags_ |= RepackagedAndroidViewView_PFLAG_DRAWABLE_STATE_DIRTY;
  if (mFloatingTreeObserver_ != nil) {
    [((RepackagedAndroidViewViewTreeObserver *) nil_chk(((RepackagedAndroidViewView_AttachInfo *) nil_chk(info))->mTreeObserver_)) mergeWithRepackagedAndroidViewViewTreeObserver:mFloatingTreeObserver_];
    mFloatingTreeObserver_ = nil;
  }
  if ((mPrivateFlags_ & RepackagedAndroidViewView_PFLAG_SCROLL_CONTAINER) != 0) {
    [((JavaUtilArrayList *) nil_chk(((RepackagedAndroidViewView_AttachInfo *) nil_chk(mAttachInfo_))->mScrollContainers_)) addWithId:self];
    mPrivateFlags_ |= RepackagedAndroidViewView_PFLAG_SCROLL_CONTAINER_ADDED;
  }
  [self performCollectViewAttributesWithRepackagedAndroidViewView_AttachInfo:mAttachInfo_ withInt:visibility];
  [self onAttachedToWindow];
  
#line 14521
  RepackagedAndroidViewView_ListenerInfo *li = mListenerInfo_;
  JavaUtilConcurrentCopyOnWriteArrayList *listeners =
#line 14523
  li != nil ? li->mOnAttachStateChangeListeners_ : nil;
  if (listeners != nil && [listeners size] > 0) {
    
#line 14529
    for (id<RepackagedAndroidViewView_OnAttachStateChangeListener> __strong listener in listeners) {
      [((id<RepackagedAndroidViewView_OnAttachStateChangeListener>) nil_chk(listener)) onViewAttachedToWindowWithRepackagedAndroidViewView:self];
    }
  }
  
#line 14534
  jint vis = ((RepackagedAndroidViewView_AttachInfo *) nil_chk(info))->mWindowVisibility_;
  if (vis != RepackagedAndroidViewView_GONE) {
    [self onWindowVisibilityChangedWithInt:vis];
  }
  
#line 14542
  [self onVisibilityChangedWithRepackagedAndroidViewView:self withInt:visibility];
  
#line 14544
  if ((mPrivateFlags_ & RepackagedAndroidViewView_PFLAG_DRAWABLE_STATE_DIRTY) != 0) {
    
#line 14546
    [self refreshDrawableState];
  }
  [self needGlobalAttributesUpdateWithBoolean:NO];
}


#line 14551
- (void)dispatchDetachedFromWindow {
  RepackagedAndroidViewView_AttachInfo *info = mAttachInfo_;
  if (info != nil) {
    jint vis = info->mWindowVisibility_;
    if (vis != RepackagedAndroidViewView_GONE) {
      [self onWindowVisibilityChangedWithInt:RepackagedAndroidViewView_GONE];
    }
  }
  
#line 14560
  [self onDetachedFromWindow];
  [self onDetachedFromWindowInternal];
  
#line 14563
  RepackagedAndroidViewInputmethodInputMethodManager *imm = RepackagedAndroidViewInputmethodInputMethodManager_peekInstance();
  if (imm != nil) {
    [imm onViewDetachedFromWindowWithRepackagedAndroidViewView:self];
  }
  
#line 14568
  RepackagedAndroidViewView_ListenerInfo *li = mListenerInfo_;
  JavaUtilConcurrentCopyOnWriteArrayList *listeners =
#line 14570
  li != nil ? li->mOnAttachStateChangeListeners_ : nil;
  if (listeners != nil && [listeners size] > 0) {
    
#line 14576
    for (id<RepackagedAndroidViewView_OnAttachStateChangeListener> __strong listener in listeners) {
      [((id<RepackagedAndroidViewView_OnAttachStateChangeListener>) nil_chk(listener)) onViewDetachedFromWindowWithRepackagedAndroidViewView:self];
    }
  }
  
#line 14581
  if ((mPrivateFlags_ & RepackagedAndroidViewView_PFLAG_SCROLL_CONTAINER_ADDED) != 0) {
    [((JavaUtilArrayList *) nil_chk(((RepackagedAndroidViewView_AttachInfo *) nil_chk(mAttachInfo_))->mScrollContainers_)) removeWithId:self];
    mPrivateFlags_ &= ~RepackagedAndroidViewView_PFLAG_SCROLL_CONTAINER_ADDED;
  }
  
#line 14586
  mAttachInfo_ = nil;
  if (mOverlay_ != nil) {
    [((RepackagedAndroidViewViewGroup *) nil_chk([mOverlay_ getOverlayView])) dispatchDetachedFromWindow];
  }
}


#line 14613
- (void)cancelPendingInputEvents {
  RepackagedAndroidViewView_cancelPendingInputEvents(self);
}


#line 14621
- (void)dispatchCancelPendingInputEvents {
  mPrivateFlags3_ &= ~RepackagedAndroidViewView_PFLAG3_CALLED_SUPER;
  [self onCancelPendingInputEvents];
  if ((mPrivateFlags3_ & RepackagedAndroidViewView_PFLAG3_CALLED_SUPER) != RepackagedAndroidViewView_PFLAG3_CALLED_SUPER) {
    @throw new_RepackagedAndroidUtilSuperNotCalledException_initWithNSString_(JreStrcat("$$$", @"View ", [[self getClass] getSimpleName], @" did not call through to super.onCancelPendingInputEvents()"));
  }
}


#line 14641
- (void)onCancelPendingInputEvents {
  RepackagedAndroidViewView_removePerformClickCallback(self);
  [self cancelLongPress];
  mPrivateFlags3_ |= RepackagedAndroidViewView_PFLAG3_CALLED_SUPER;
}


#line 14656
- (void)saveHierarchyStateWithRepackagedAndroidUtilSparseArray:(RepackagedAndroidUtilSparseArray *)container {
  [self dispatchSaveInstanceStateWithRepackagedAndroidUtilSparseArray:container];
}


#line 14671
- (void)dispatchSaveInstanceStateWithRepackagedAndroidUtilSparseArray:(RepackagedAndroidUtilSparseArray *)container {
  if (mID_ != RepackagedAndroidViewView_NO_ID && (mViewFlags_ & RepackagedAndroidViewView_SAVE_DISABLED_MASK) == 0) {
    mPrivateFlags_ &= ~RepackagedAndroidViewView_PFLAG_SAVE_STATE_CALLED;
    id<RepackagedAndroidOsParcelable> state = [self onSaveInstanceState];
    if ((mPrivateFlags_ & RepackagedAndroidViewView_PFLAG_SAVE_STATE_CALLED) == 0) {
      @throw new_JavaLangIllegalStateException_initWithNSString_(
#line 14677
      @"Derived class did not call super.onSaveInstanceState()");
    }
    if (state != nil) {
      
#line 14682
      [((RepackagedAndroidUtilSparseArray *) nil_chk(container)) putWithInt:mID_ withId:state];
    }
  }
}


#line 14709
- (id<RepackagedAndroidOsParcelable>)onSaveInstanceState {
  mPrivateFlags_ |= RepackagedAndroidViewView_PFLAG_SAVE_STATE_CALLED;
  if (mStartActivityRequestWho_ != nil) {
    RepackagedAndroidViewView_BaseSavedState *state = new_RepackagedAndroidViewView_BaseSavedState_initWithRepackagedAndroidOsParcelable_(RepackagedAndroidViewAbsSavedState_get_EMPTY_STATE_());
    state->mStartActivityRequestWhoSaved_ = mStartActivityRequestWho_;
    return state;
  }
  return RepackagedAndroidViewAbsSavedState_get_EMPTY_STATE_();
}


#line 14728
- (void)restoreHierarchyStateWithRepackagedAndroidUtilSparseArray:(RepackagedAndroidUtilSparseArray *)container {
  [self dispatchRestoreInstanceStateWithRepackagedAndroidUtilSparseArray:container];
}


#line 14744
- (void)dispatchRestoreInstanceStateWithRepackagedAndroidUtilSparseArray:(RepackagedAndroidUtilSparseArray *)container {
  if (mID_ != RepackagedAndroidViewView_NO_ID) {
    id<RepackagedAndroidOsParcelable> state = [((RepackagedAndroidUtilSparseArray *) nil_chk(container)) getWithInt:mID_];
    if (state != nil) {
      
#line 14750
      mPrivateFlags_ &= ~RepackagedAndroidViewView_PFLAG_SAVE_STATE_CALLED;
      [self onRestoreInstanceStateWithRepackagedAndroidOsParcelable:state];
      if ((mPrivateFlags_ & RepackagedAndroidViewView_PFLAG_SAVE_STATE_CALLED) == 0) {
        @throw new_JavaLangIllegalStateException_initWithNSString_(
#line 14754
        @"Derived class did not call super.onRestoreInstanceState()");
      }
    }
  }
}


#line 14773
- (void)onRestoreInstanceStateWithRepackagedAndroidOsParcelable:(id<RepackagedAndroidOsParcelable>)state {
  mPrivateFlags_ |= RepackagedAndroidViewView_PFLAG_SAVE_STATE_CALLED;
  if (state != nil && !([state isKindOfClass:[RepackagedAndroidViewAbsSavedState class]])) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$$$", @"Wrong state class, expecting View State but received ",
#line 14777
    [[state getClass] description], @" instead. This usually happens when two views of different type have the same id in the same hierarchy. This view's id is ", RepackagedAndroidViewViewDebug_resolveIdWithRepackagedAndroidContentContext_withInt_(
#line 14779
    mContext_, [self getId]), @". Make sure other views do not use the same id."));
  }
  
#line 14782
  if (state != nil && [state isKindOfClass:[RepackagedAndroidViewView_BaseSavedState class]]) {
    mStartActivityRequestWho_ = ((RepackagedAndroidViewView_BaseSavedState *) check_class_cast(state, [RepackagedAndroidViewView_BaseSavedState class]))->mStartActivityRequestWhoSaved_;
  }
}


#line 14792
- (jlong)getDrawingTime {
  return mAttachInfo_ != nil ? mAttachInfo_->mDrawingTime_ : 0;
}


#line 14817
- (void)setDuplicateParentStateEnabledWithBoolean:(jboolean)enabled {
  [self setFlagsWithInt:enabled ? RepackagedAndroidViewView_DUPLICATE_PARENT_STATE : 0 withInt:RepackagedAndroidViewView_DUPLICATE_PARENT_STATE];
}


#line 14830
- (jboolean)isDuplicateParentStateEnabled {
  return (mViewFlags_ & RepackagedAndroidViewView_DUPLICATE_PARENT_STATE) == RepackagedAndroidViewView_DUPLICATE_PARENT_STATE;
}


#line 14871
- (void)setLayerTypeWithInt:(jint)layerType
withRepackagedAndroidGraphicsPaint:(RepackagedAndroidGraphicsPaint *)paint {
  if (layerType < RepackagedAndroidViewView_LAYER_TYPE_NONE || layerType > RepackagedAndroidViewView_LAYER_TYPE_HARDWARE) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Layer type can only be one of: LAYER_TYPE_NONE, LAYER_TYPE_SOFTWARE or LAYER_TYPE_HARDWARE");
  }
  
#line 14877
  jboolean typeChanged = [((RepackagedAndroidViewRenderNode *) nil_chk(mRenderNode_)) setLayerTypeWithInt:layerType];
  
#line 14879
  if (!typeChanged) {
    [self setLayerPaintWithRepackagedAndroidGraphicsPaint:paint];
    return;
  }
  
#line 14885
  if (mLayerType_ == RepackagedAndroidViewView_LAYER_TYPE_SOFTWARE) {
    [self destroyDrawingCache];
  }
  
#line 14889
  mLayerType_ = layerType;
  jboolean layerDisabled = mLayerType_ == RepackagedAndroidViewView_LAYER_TYPE_NONE;
  mLayerPaint_ = layerDisabled ? nil : (paint == nil ? new_RepackagedAndroidGraphicsPaint_init() : paint);
  [mRenderNode_ setLayerPaintWithRepackagedAndroidGraphicsPaint:mLayerPaint_];
  
#line 14896
  [self invalidateParentCaches];
  [self invalidateWithBoolean:YES];
}


#line 14925
- (void)setLayerPaintWithRepackagedAndroidGraphicsPaint:(RepackagedAndroidGraphicsPaint *)paint {
  jint layerType = [self getLayerType];
  if (layerType != RepackagedAndroidViewView_LAYER_TYPE_NONE) {
    mLayerPaint_ = paint == nil ? new_RepackagedAndroidGraphicsPaint_init() : paint;
    if (layerType == RepackagedAndroidViewView_LAYER_TYPE_HARDWARE) {
      if ([((RepackagedAndroidViewRenderNode *) nil_chk(mRenderNode_)) setLayerPaintWithRepackagedAndroidGraphicsPaint:mLayerPaint_]) {
        [self invalidateViewPropertyWithBoolean:NO withBoolean:NO];
      }
    }
    else {
      
#line 14934
      [self invalidate];
    }
  }
}


#line 14954
- (jint)getLayerType {
  return mLayerType_;
}


#line 14971
- (void)buildLayer {
  if (mLayerType_ == RepackagedAndroidViewView_LAYER_TYPE_NONE) return;
  
#line 14974
  RepackagedAndroidViewView_AttachInfo *attachInfo = mAttachInfo_;
  if (attachInfo == nil) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"This view must be attached to a window first");
  }
  
#line 14979
  if (RepackagedAndroidViewView_getWidth(self) == 0 || RepackagedAndroidViewView_getHeight(self) == 0) {
    return;
  }
  
#line 14983
  switch (mLayerType_) {
    case RepackagedAndroidViewView_LAYER_TYPE_HARDWARE:
    (void) [self updateDisplayListIfDirty];
    if (((RepackagedAndroidViewView_AttachInfo *) nil_chk(attachInfo))->mHardwareRenderer_ != nil && [((RepackagedAndroidViewRenderNode *) nil_chk(mRenderNode_)) isValid]) {
      [attachInfo->mHardwareRenderer_ buildLayerWithRepackagedAndroidViewRenderNode:mRenderNode_];
    }
    break;
    case RepackagedAndroidViewView_LAYER_TYPE_SOFTWARE:
    [self buildDrawingCacheWithBoolean:YES];
    break;
  }
}


#line 15002
- (RepackagedAndroidViewHardwareLayer *)getHardwareLayer {
  return nil;
}


#line 15018
- (void)destroyHardwareResources {
  
#line 15023
  RepackagedAndroidViewView_resetDisplayList(self);
}


#line 15053
- (void)setDrawingCacheEnabledWithBoolean:(jboolean)enabled {
  mCachingFailed_ = NO;
  [self setFlagsWithInt:enabled ? RepackagedAndroidViewView_DRAWING_CACHE_ENABLED : 0 withInt:RepackagedAndroidViewView_DRAWING_CACHE_ENABLED];
}


#line 15067
- (jboolean)isDrawingCacheEnabled {
  return (mViewFlags_ & RepackagedAndroidViewView_DRAWING_CACHE_ENABLED) == RepackagedAndroidViewView_DRAWING_CACHE_ENABLED;
}


#line 15078
- (void)outputDirtyFlagsWithNSString:(NSString *)indent
                         withBoolean:(jboolean)clear
                             withInt:(jint)clearMask {
  RepackagedAndroidUtilLog_dWithNSString_withNSString_(@"View", JreStrcat("$@$I$I$I$IC", indent, self, @"             DIRTY(", (mPrivateFlags_ & RepackagedAndroidViewView_PFLAG_DIRTY_MASK), @") DRAWN(",
#line 15080
  (mPrivateFlags_ & RepackagedAndroidViewView_PFLAG_DRAWN), @") CACHE_VALID(",
#line 15081
  (mPrivateFlags_ & RepackagedAndroidViewView_PFLAG_DRAWING_CACHE_VALID), @") INVALIDATED(",
#line 15082
  (mPrivateFlags_ & RepackagedAndroidViewView_PFLAG_INVALIDATED), ')'));
  if (clear) {
    mPrivateFlags_ &= clearMask;
  }
  if ([self isKindOfClass:[RepackagedAndroidViewViewGroup class]]) {
    RepackagedAndroidViewViewGroup *parent = (RepackagedAndroidViewViewGroup *) check_class_cast(self, [RepackagedAndroidViewViewGroup class]);
    jint count = [parent getChildCount];
    for (jint i = 0; i < count; i++) {
      RepackagedAndroidViewView *child = [parent getChildAtWithInt:i];
      [((RepackagedAndroidViewView *) nil_chk(child)) outputDirtyFlagsWithNSString:JreStrcat("$$", indent, @"  ") withBoolean:clear withInt:clearMask];
    }
  }
}


#line 15104
- (void)dispatchGetDisplayList {
}


#line 15114
- (jboolean)canHaveDisplayList {
  return !(mAttachInfo_ == nil || mAttachInfo_->mHardwareRenderer_ == nil);
}


#line 15123
- (RepackagedAndroidViewRenderNode *)updateDisplayListIfDirty {
  RepackagedAndroidViewRenderNode *renderNode = mRenderNode_;
  if (![self canHaveDisplayList]) {
    
#line 15127
    return renderNode;
  }
  
#line 15130
  if ((mPrivateFlags_ & RepackagedAndroidViewView_PFLAG_DRAWING_CACHE_VALID) == 0 ||
#line 15131
  ![((RepackagedAndroidViewRenderNode *) nil_chk(renderNode)) isValid] ||
#line 15132
  (mRecreateDisplayList_)) {
    
#line 15135
    if ([((RepackagedAndroidViewRenderNode *) nil_chk(renderNode)) isValid] &&
#line 15136
    !mRecreateDisplayList_) {
      mPrivateFlags_ |= RepackagedAndroidViewView_PFLAG_DRAWN | RepackagedAndroidViewView_PFLAG_DRAWING_CACHE_VALID;
      mPrivateFlags_ &= ~RepackagedAndroidViewView_PFLAG_DIRTY_MASK;
      [self dispatchGetDisplayList];
      
#line 15141
      return renderNode;
    }
    
#line 15146
    mRecreateDisplayList_ = YES;
    
#line 15148
    jint width = mRight_ - mLeft_;
    jint height = mBottom_ - mTop_;
    jint layerType = [self getLayerType];
    
#line 15152
    RepackagedAndroidViewDisplayListCanvas *canvas = [renderNode startWithInt:width withInt:height];
    [((RepackagedAndroidViewDisplayListCanvas *) nil_chk(canvas)) setHighContrastTextWithBoolean:((RepackagedAndroidViewView_AttachInfo *) nil_chk(mAttachInfo_))->mHighContrastText_];
    
#line 15155
    @try {
      RepackagedAndroidViewHardwareLayer *layer = [self getHardwareLayer];
      if (layer != nil && [layer isValid]) {
        [canvas drawHardwareLayerWithRepackagedAndroidViewHardwareLayer:layer withInt:0 withInt:0 withRepackagedAndroidGraphicsPaint:mLayerPaint_];
      }
      else
#line 15159
      if (layerType == RepackagedAndroidViewView_LAYER_TYPE_SOFTWARE) {
        [self buildDrawingCacheWithBoolean:YES];
        RepackagedAndroidGraphicsBitmap *cache = [self getDrawingCacheWithBoolean:YES];
        if (cache != nil) {
          [canvas drawBitmapWithRepackagedAndroidGraphicsBitmap:cache withInt:0 withInt:0 withRepackagedAndroidGraphicsPaint:mLayerPaint_];
        }
      }
      else {
        
#line 15166
        [self computeScroll];
        
#line 15168
        [canvas translateWithInt:-mScrollX_ withInt:-mScrollY_];
        mPrivateFlags_ |= RepackagedAndroidViewView_PFLAG_DRAWN | RepackagedAndroidViewView_PFLAG_DRAWING_CACHE_VALID;
        mPrivateFlags_ &= ~RepackagedAndroidViewView_PFLAG_DIRTY_MASK;
        
#line 15173
        if ((mPrivateFlags_ & RepackagedAndroidViewView_PFLAG_SKIP_DRAW) == RepackagedAndroidViewView_PFLAG_SKIP_DRAW) {
          [self dispatchDrawWithRepackagedAndroidGraphicsCanvas:canvas];
          if (mOverlay_ != nil && ![mOverlay_ isEmpty]) {
            [((RepackagedAndroidViewViewGroup *) nil_chk([mOverlay_ getOverlayView])) drawWithRepackagedAndroidGraphicsCanvas:canvas];
          }
        }
        else {
          
#line 15179
          [self drawWithRepackagedAndroidGraphicsCanvas:canvas];
        }
      }
    }
    @finally {
      
#line 15183
      [renderNode endWithRepackagedAndroidViewDisplayListCanvas:canvas];
      [self setDisplayListPropertiesWithRepackagedAndroidViewRenderNode:renderNode];
    }
  }
  else {
    
#line 15187
    mPrivateFlags_ |= RepackagedAndroidViewView_PFLAG_DRAWN | RepackagedAndroidViewView_PFLAG_DRAWING_CACHE_VALID;
    mPrivateFlags_ &= ~RepackagedAndroidViewView_PFLAG_DIRTY_MASK;
  }
  return renderNode;
}


#line 15193
- (void)resetDisplayList {
  RepackagedAndroidViewView_resetDisplayList(self);
}


#line 15210
- (RepackagedAndroidGraphicsBitmap *)getDrawingCache {
  return [self getDrawingCacheWithBoolean:NO];
}


#line 15241
- (RepackagedAndroidGraphicsBitmap *)getDrawingCacheWithBoolean:(jboolean)autoScale {
  if ((mViewFlags_ & RepackagedAndroidViewView_WILL_NOT_CACHE_DRAWING) == RepackagedAndroidViewView_WILL_NOT_CACHE_DRAWING) {
    return nil;
  }
  if ((mViewFlags_ & RepackagedAndroidViewView_DRAWING_CACHE_ENABLED) == RepackagedAndroidViewView_DRAWING_CACHE_ENABLED) {
    [self buildDrawingCacheWithBoolean:autoScale];
  }
  return autoScale ? mDrawingCache_ : mUnscaledDrawingCache_;
}


#line 15261
- (void)destroyDrawingCache {
  if (mDrawingCache_ != nil) {
    [mDrawingCache_ recycle];
    mDrawingCache_ = nil;
  }
  if (mUnscaledDrawingCache_ != nil) {
    [mUnscaledDrawingCache_ recycle];
    mUnscaledDrawingCache_ = nil;
  }
}


#line 15283
- (void)setDrawingCacheBackgroundColorWithInt:(jint)color {
  if (color != mDrawingCacheBackgroundColor_) {
    mDrawingCacheBackgroundColor_ = color;
    mPrivateFlags_ &= ~RepackagedAndroidViewView_PFLAG_DRAWING_CACHE_VALID;
  }
}


#line 15296
- (jint)getDrawingCacheBackgroundColor {
  return mDrawingCacheBackgroundColor_;
}


#line 15305
- (void)buildDrawingCache {
  [self buildDrawingCacheWithBoolean:NO];
}


#line 15332
- (void)buildDrawingCacheWithBoolean:(jboolean)autoScale {
  if ((mPrivateFlags_ & RepackagedAndroidViewView_PFLAG_DRAWING_CACHE_VALID) == 0 || (autoScale ?
#line 15334
  mDrawingCache_ == nil : mUnscaledDrawingCache_ == nil)) {
    if (RepackagedAndroidOsTrace_isTagEnabledWithNSString_(RepackagedAndroidOsTrace_get_TRACE_TAG_VIEW_())) {
      RepackagedAndroidOsTrace_traceBeginWithNSString_withNSString_(RepackagedAndroidOsTrace_get_TRACE_TAG_VIEW_(), JreStrcat("$$", @"buildDrawingCache/SW Layer for ",
#line 15337
      [[self getClass] getSimpleName]));
    }
    @try {
      RepackagedAndroidViewView_buildDrawingCacheImplWithBoolean_(self, autoScale);
    }
    @finally {
      
#line 15342
      RepackagedAndroidOsTrace_traceEndWithNSString_(RepackagedAndroidOsTrace_get_TRACE_TAG_VIEW_());
    }
  }
}


#line 15350
- (void)buildDrawingCacheImplWithBoolean:(jboolean)autoScale {
  RepackagedAndroidViewView_buildDrawingCacheImplWithBoolean_(self, autoScale);
}


#line 15495
- (RepackagedAndroidGraphicsBitmap *)createSnapshotWithRepackagedAndroidGraphicsBitmap_Config:(RepackagedAndroidGraphicsBitmap_Config *)quality
                                                                                      withInt:(jint)backgroundColor
                                                                                  withBoolean:(jboolean)skipChildren {
  jint width = mRight_ - mLeft_;
  jint height = mBottom_ - mTop_;
  
#line 15499
  RepackagedAndroidViewView_AttachInfo *attachInfo = mAttachInfo_;
  jfloat scale_ = attachInfo != nil ? attachInfo->mApplicationScale_ : 1.0f;
  width = J2ObjCFpToInt(((width * scale_) + 0.5f));
  height = J2ObjCFpToInt(((height * scale_) + 0.5f));
  
#line 15504
  RepackagedAndroidGraphicsBitmap *bitmap = RepackagedAndroidGraphicsBitmap_createBitmapWithRepackagedAndroidUtilDisplayMetrics_withInt_withInt_withRepackagedAndroidGraphicsBitmap_Config_([((RepackagedAndroidContentResResources *) nil_chk(mResources_)) getDisplayMetrics],
#line 15505
  width > 0 ? width : 1, height > 0 ? height : 1, quality);
  if (bitmap == nil) {
    @throw new_JavaLangOutOfMemoryError_init();
  }
  
#line 15510
  RepackagedAndroidContentResResources *resources = [self getResources];
  if (resources != nil) {
    [((RepackagedAndroidGraphicsBitmap *) nil_chk(bitmap)) setDensityWithInt:((RepackagedAndroidUtilDisplayMetrics *) nil_chk([resources getDisplayMetrics]))->densityDpi_];
  }
  
#line 15515
  RepackagedAndroidGraphicsCanvas *canvas;
  if (attachInfo != nil) {
    canvas = attachInfo->mCanvas_;
    if (canvas == nil) {
      canvas = new_RepackagedAndroidGraphicsCanvas_init();
    }
    [((RepackagedAndroidGraphicsCanvas *) nil_chk(canvas)) setBitmapWithRepackagedAndroidGraphicsBitmap:bitmap];
    
#line 15526
    attachInfo->mCanvas_ = nil;
  }
  else {
    canvas = new_RepackagedAndroidGraphicsCanvas_initWithRepackagedAndroidGraphicsBitmap_(bitmap);
  }
  
#line 15532
  if ((backgroundColor & (jint) 0xff000000) != 0) {
    [((RepackagedAndroidGraphicsBitmap *) nil_chk(bitmap)) eraseColorWithInt:backgroundColor];
  }
  
#line 15536
  [self computeScroll];
  jint restoreCount = [((RepackagedAndroidGraphicsCanvas *) nil_chk(canvas)) save];
  [canvas scale__WithFloat:scale_ withFloat:scale_];
  [canvas translateWithInt:-mScrollX_ withInt:-mScrollY_];
  
#line 15542
  jint flags = mPrivateFlags_;
  mPrivateFlags_ &= ~RepackagedAndroidViewView_PFLAG_DIRTY_MASK;
  
#line 15546
  if ((mPrivateFlags_ & RepackagedAndroidViewView_PFLAG_SKIP_DRAW) == RepackagedAndroidViewView_PFLAG_SKIP_DRAW) {
    [self dispatchDrawWithRepackagedAndroidGraphicsCanvas:canvas];
    if (mOverlay_ != nil && ![mOverlay_ isEmpty]) {
      [((RepackagedAndroidViewViewGroup *) nil_chk([mOverlay_ getOverlayView])) drawWithRepackagedAndroidGraphicsCanvas:canvas];
    }
  }
  else {
    
#line 15552
    [self drawWithRepackagedAndroidGraphicsCanvas:canvas];
  }
  
#line 15555
  mPrivateFlags_ = flags;
  
#line 15557
  [canvas restoreToCountWithInt:restoreCount];
  [canvas setBitmapWithRepackagedAndroidGraphicsBitmap:nil];
  
#line 15560
  if (attachInfo != nil) {
    
#line 15562
    attachInfo->mCanvas_ = canvas;
  }
  
#line 15565
  return bitmap;
}

- (jboolean)isInEditMode {
  return NO;
}


#line 15605
- (jboolean)isPaddingOffsetRequired {
  return NO;
}


#line 15619
- (jint)getLeftPaddingOffset {
  return 0;
}


#line 15633
- (jint)getRightPaddingOffset {
  return 0;
}


#line 15647
- (jint)getTopPaddingOffset {
  return 0;
}


#line 15661
- (jint)getBottomPaddingOffset {
  return 0;
}


#line 15669
- (jint)getFadeTopWithBoolean:(jboolean)offsetRequired {
  jint top = mPaddingTop_;
  if (offsetRequired) top += [self getTopPaddingOffset];
  return top;
}


#line 15679
- (jint)getFadeHeightWithBoolean:(jboolean)offsetRequired {
  jint padding = mPaddingTop_;
  if (offsetRequired) padding += [self getTopPaddingOffset];
  return mBottom_ - mTop_ - mPaddingBottom_ - padding;
}


#line 15701
- (jboolean)isHardwareAccelerated {
  return mAttachInfo_ != nil && mAttachInfo_->mHardwareAccelerated_;
}


#line 15713
- (void)setClipBoundsWithRepackagedAndroidGraphicsRect:(RepackagedAndroidGraphicsRect *)clipBounds {
  if (clipBounds == mClipBounds_ ||
#line 15715
  (clipBounds != nil && [clipBounds isEqual:mClipBounds_])) {
    return;
  }
  if (clipBounds != nil) {
    if (mClipBounds_ == nil) {
      mClipBounds_ = new_RepackagedAndroidGraphicsRect_initWithRepackagedAndroidGraphicsRect_(clipBounds);
    }
    else {
      
#line 15722
      [mClipBounds_ setWithRepackagedAndroidGraphicsRect:clipBounds];
    }
  }
  else {
    
#line 15725
    mClipBounds_ = nil;
  }
  [((RepackagedAndroidViewRenderNode *) nil_chk(mRenderNode_)) setClipBoundsWithRepackagedAndroidGraphicsRect:mClipBounds_];
  [self invalidateViewPropertyWithBoolean:NO withBoolean:NO];
}


#line 15737
- (RepackagedAndroidGraphicsRect *)getClipBounds {
  return (mClipBounds_ != nil) ? new_RepackagedAndroidGraphicsRect_initWithRepackagedAndroidGraphicsRect_(mClipBounds_) : nil;
}


#line 15751
- (jboolean)getClipBoundsWithRepackagedAndroidGraphicsRect:(RepackagedAndroidGraphicsRect *)outRect {
  if (mClipBounds_ != nil) {
    [((RepackagedAndroidGraphicsRect *) nil_chk(outRect)) setWithRepackagedAndroidGraphicsRect:mClipBounds_];
    return YES;
  }
  return NO;
}


#line 15763
- (jboolean)applyLegacyAnimationWithRepackagedAndroidViewViewGroup:(RepackagedAndroidViewViewGroup *)parent
                                                          withLong:(jlong)drawingTime
                       withRepackagedAndroidViewAnimationAnimation:(id<RepackagedAndroidViewAnimationAnimation>)a
                                                       withBoolean:(jboolean)scalingRequired {
  return RepackagedAndroidViewView_applyLegacyAnimationWithRepackagedAndroidViewViewGroup_withLong_withRepackagedAndroidViewAnimationAnimation_withBoolean_(self, parent, drawingTime, a, scalingRequired);
}


#line 15823
- (void)setDisplayListPropertiesWithRepackagedAndroidViewRenderNode:(RepackagedAndroidViewRenderNode *)renderNode {
  if (renderNode != nil) {
    [renderNode setHasOverlappingRenderingWithBoolean:[self hasOverlappingRendering]];
    [renderNode setClipToBoundsWithBoolean:[mParent_ isKindOfClass:[RepackagedAndroidViewViewGroup class]] &&
#line 15827
    [((RepackagedAndroidViewViewGroup *) nil_chk(((RepackagedAndroidViewViewGroup *) check_class_cast(mParent_, [RepackagedAndroidViewViewGroup class])))) getClipChildren]];
    
#line 15829
    jfloat alpha = 1;
    if ([mParent_ isKindOfClass:[RepackagedAndroidViewViewGroup class]] && (((RepackagedAndroidViewViewGroup *) nil_chk(((RepackagedAndroidViewViewGroup *) check_class_cast(mParent_, [RepackagedAndroidViewViewGroup class]))))->mGroupFlags_ &
#line 15831
    RepackagedAndroidViewViewGroup_FLAG_SUPPORT_STATIC_TRANSFORMATIONS) != 0) {
      RepackagedAndroidViewViewGroup *parentVG = (RepackagedAndroidViewViewGroup *) check_class_cast(mParent_, [RepackagedAndroidViewViewGroup class]);
      RepackagedAndroidViewAnimationTransformation *t = [((RepackagedAndroidViewViewGroup *) nil_chk(parentVG)) getChildTransformation];
      if ([parentVG getChildStaticTransformationWithRepackagedAndroidViewView:self withRepackagedAndroidViewAnimationTransformation:t]) {
        jint transformType = [((RepackagedAndroidViewAnimationTransformation *) nil_chk(t)) getTransformationType];
        if (transformType != RepackagedAndroidViewAnimationTransformation_TYPE_IDENTITY) {
          if ((transformType & RepackagedAndroidViewAnimationTransformation_TYPE_ALPHA) != 0) {
            alpha = [t getAlpha];
          }
          if ((transformType & RepackagedAndroidViewAnimationTransformation_TYPE_MATRIX) != 0) {
            [renderNode setStaticMatrixWithRepackagedAndroidGraphicsMatrix:[t getMatrix]];
          }
        }
      }
    }
    if (mTransformationInfo_ != nil) {
      alpha *= RepackagedAndroidViewView_getFinalAlpha(self);
      if (alpha < 1) {
        jint multipliedAlpha = J2ObjCFpToInt((255 * alpha));
        if ([self onSetAlphaWithInt:multipliedAlpha]) {
          alpha = 1;
        }
      }
      [renderNode setAlphaWithFloat:alpha];
    }
    else
#line 15855
    if (alpha < 1) {
      [renderNode setAlphaWithFloat:alpha];
    }
  }
}

- (jboolean)drawWithRepackagedAndroidGraphicsCanvas:(RepackagedAndroidGraphicsCanvas *)canvas
                 withRepackagedAndroidViewViewGroup:(RepackagedAndroidViewViewGroup *)parent
                                           withLong:(jlong)drawingTime {
  jboolean hardwareAcceleratedCanvas = [((RepackagedAndroidGraphicsCanvas *) nil_chk(canvas)) isHardwareAccelerated];
  
#line 15874
  jboolean drawingWithRenderNode = mAttachInfo_ != nil &&
#line 15875
  mAttachInfo_->mHardwareAccelerated_ &&
#line 15876
  hardwareAcceleratedCanvas;
  
#line 15878
  jboolean more = NO;
  jboolean childHasIdentityMatrix = RepackagedAndroidViewView_hasIdentityMatrix(self);
  jint parentFlags = ((RepackagedAndroidViewViewGroup *) nil_chk(parent))->mGroupFlags_;
  
#line 15882
  if ((parentFlags & RepackagedAndroidViewViewGroup_FLAG_CLEAR_TRANSFORMATION) != 0) {
    [((RepackagedAndroidViewAnimationTransformation *) nil_chk([parent getChildTransformation])) clear];
    parent->mGroupFlags_ &= ~RepackagedAndroidViewViewGroup_FLAG_CLEAR_TRANSFORMATION;
  }
  
#line 15887
  RepackagedAndroidViewAnimationTransformation *transformToApply = nil;
  jboolean concatMatrix = NO;
  jboolean scalingRequired = mAttachInfo_ != nil && mAttachInfo_->mScalingRequired_;
  id<RepackagedAndroidViewAnimationAnimation> a = [self getAnimation];
  if (a != nil) {
    more = RepackagedAndroidViewView_applyLegacyAnimationWithRepackagedAndroidViewViewGroup_withLong_withRepackagedAndroidViewAnimationAnimation_withBoolean_(self, parent, drawingTime, a, scalingRequired);
    concatMatrix = [a willChangeTransformationMatrix];
    if (concatMatrix) {
      mPrivateFlags3_ |= RepackagedAndroidViewView_PFLAG3_VIEW_IS_ANIMATING_TRANSFORM;
    }
    transformToApply = [parent getChildTransformation];
  }
  else {
    
#line 15899
    if ((mPrivateFlags3_ & RepackagedAndroidViewView_PFLAG3_VIEW_IS_ANIMATING_TRANSFORM) != 0) {
      
#line 15901
      [((RepackagedAndroidViewRenderNode *) nil_chk(mRenderNode_)) setAnimationMatrixWithRepackagedAndroidGraphicsMatrix:nil];
      mPrivateFlags3_ &= ~RepackagedAndroidViewView_PFLAG3_VIEW_IS_ANIMATING_TRANSFORM;
    }
    if (!drawingWithRenderNode &&
#line 15905
    (parentFlags & RepackagedAndroidViewViewGroup_FLAG_SUPPORT_STATIC_TRANSFORMATIONS) != 0) {
      RepackagedAndroidViewAnimationTransformation *t = [parent getChildTransformation];
      jboolean hasTransform = [parent getChildStaticTransformationWithRepackagedAndroidViewView:self withRepackagedAndroidViewAnimationTransformation:t];
      if (hasTransform) {
        jint transformType = [((RepackagedAndroidViewAnimationTransformation *) nil_chk(t)) getTransformationType];
        transformToApply = transformType != RepackagedAndroidViewAnimationTransformation_TYPE_IDENTITY ? t : nil;
        concatMatrix = ((transformType & RepackagedAndroidViewAnimationTransformation_TYPE_MATRIX) != 0);
      }
    }
  }
  
#line 15916
  concatMatrix |= !childHasIdentityMatrix;
  
#line 15920
  mPrivateFlags_ |= RepackagedAndroidViewView_PFLAG_DRAWN;
  
#line 15922
  if (!concatMatrix &&
#line 15923
  (parentFlags & (RepackagedAndroidViewViewGroup_FLAG_SUPPORT_STATIC_TRANSFORMATIONS |
#line 15924
  RepackagedAndroidViewViewGroup_FLAG_CLIP_CHILDREN)) == RepackagedAndroidViewViewGroup_FLAG_CLIP_CHILDREN &&
#line 15925
  [canvas quickRejectWithInt:mLeft_ withInt:mTop_ withInt:mRight_ withInt:mBottom_ withRepackagedAndroidGraphicsCanvas_EdgeTypeEnum:RepackagedAndroidGraphicsCanvas_EdgeTypeEnum_get_BW()] &&
#line 15926
  (mPrivateFlags_ & RepackagedAndroidViewView_PFLAG_DRAW_ANIMATION) == 0) {
    mPrivateFlags2_ |= RepackagedAndroidViewView_PFLAG2_VIEW_QUICK_REJECTED;
    return more;
  }
  mPrivateFlags2_ &= ~RepackagedAndroidViewView_PFLAG2_VIEW_QUICK_REJECTED;
  
#line 15932
  if (hardwareAcceleratedCanvas) {
    
#line 15935
    mRecreateDisplayList_ = ((mPrivateFlags_ & RepackagedAndroidViewView_PFLAG_INVALIDATED) != 0);
    mPrivateFlags_ &= ~RepackagedAndroidViewView_PFLAG_INVALIDATED;
  }
  
#line 15939
  RepackagedAndroidViewRenderNode *renderNode = nil;
  RepackagedAndroidGraphicsBitmap *cache = nil;
  jint layerType = [self getLayerType];
  if (layerType == RepackagedAndroidViewView_LAYER_TYPE_SOFTWARE ||
#line 15943
  (!drawingWithRenderNode && layerType != RepackagedAndroidViewView_LAYER_TYPE_NONE)) {
    
#line 15945
    layerType = RepackagedAndroidViewView_LAYER_TYPE_SOFTWARE;
    [self buildDrawingCacheWithBoolean:YES];
    cache = [self getDrawingCacheWithBoolean:YES];
  }
  
#line 15950
  if (drawingWithRenderNode) {
    
#line 15953
    renderNode = [self updateDisplayListIfDirty];
    if (![((RepackagedAndroidViewRenderNode *) nil_chk(renderNode)) isValid]) {
      
#line 15958
      renderNode = nil;
      drawingWithRenderNode = NO;
    }
  }
  
#line 15963
  jint sx = 0;
  jint sy = 0;
  if (!drawingWithRenderNode) {
    [self computeScroll];
    sx = mScrollX_;
    sy = mScrollY_;
  }
  
#line 15971
  jboolean drawingWithDrawingCache = cache != nil && !drawingWithRenderNode;
  jboolean offsetForScroll = cache == nil && !drawingWithRenderNode;
  
#line 15974
  jint restoreTo = -1;
  if (!drawingWithRenderNode || transformToApply != nil) {
    restoreTo = [canvas save];
  }
  if (offsetForScroll) {
    [canvas translateWithInt:mLeft_ - sx withInt:mTop_ - sy];
  }
  else {
    
#line 15981
    if (!drawingWithRenderNode) {
      [canvas translateWithInt:mLeft_ withInt:mTop_];
    }
    if (scalingRequired) {
      if (drawingWithRenderNode) {
        
#line 15987
        restoreTo = [canvas save];
      }
      
#line 15990
      jfloat scale_ = 1.0f / ((RepackagedAndroidViewView_AttachInfo *) nil_chk(mAttachInfo_))->mApplicationScale_;
      [canvas scale__WithFloat:scale_ withFloat:scale_];
    }
  }
  
#line 15995
  jfloat alpha = drawingWithRenderNode ? 1 : ([self getAlpha] * [self getTransitionAlpha]);
  if (transformToApply != nil ||
#line 15997
  alpha < 1 ||
#line 15998
  !RepackagedAndroidViewView_hasIdentityMatrix(self) ||
#line 15999
  (mPrivateFlags3_ & RepackagedAndroidViewView_PFLAG3_VIEW_IS_ANIMATING_ALPHA) != 0) {
    if (transformToApply != nil || !childHasIdentityMatrix) {
      jint transX = 0;
      jint transY = 0;
      
#line 16004
      if (offsetForScroll) {
        transX = -sx;
        transY = -sy;
      }
      
#line 16009
      if (transformToApply != nil) {
        if (concatMatrix) {
          if (drawingWithRenderNode) {
            [((RepackagedAndroidViewRenderNode *) nil_chk(renderNode)) setAnimationMatrixWithRepackagedAndroidGraphicsMatrix:[transformToApply getMatrix]];
          }
          else {
            
#line 16016
            [canvas translateWithInt:-transX withInt:-transY];
            [canvas concatWithRepackagedAndroidGraphicsMatrix:[transformToApply getMatrix]];
            [canvas translateWithInt:transX withInt:transY];
          }
          parent->mGroupFlags_ |= RepackagedAndroidViewViewGroup_FLAG_CLEAR_TRANSFORMATION;
        }
        
#line 16023
        jfloat transformAlpha = [transformToApply getAlpha];
        if (transformAlpha < 1) {
          alpha *= transformAlpha;
          parent->mGroupFlags_ |= RepackagedAndroidViewViewGroup_FLAG_CLEAR_TRANSFORMATION;
        }
      }
      
#line 16030
      if (!childHasIdentityMatrix && !drawingWithRenderNode) {
        [canvas translateWithInt:-transX withInt:-transY];
        [canvas concatWithRepackagedAndroidGraphicsMatrix:[self getMatrix]];
        [canvas translateWithInt:transX withInt:transY];
      }
    }
    
#line 16038
    if (alpha < 1 || (mPrivateFlags3_ & RepackagedAndroidViewView_PFLAG3_VIEW_IS_ANIMATING_ALPHA) != 0) {
      if (alpha < 1) {
        mPrivateFlags3_ |= RepackagedAndroidViewView_PFLAG3_VIEW_IS_ANIMATING_ALPHA;
      }
      else {
        
#line 16042
        mPrivateFlags3_ &= ~RepackagedAndroidViewView_PFLAG3_VIEW_IS_ANIMATING_ALPHA;
      }
      parent->mGroupFlags_ |= RepackagedAndroidViewViewGroup_FLAG_CLEAR_TRANSFORMATION;
      if (!drawingWithDrawingCache) {
        jint multipliedAlpha = J2ObjCFpToInt((255 * alpha));
        if (![self onSetAlphaWithInt:multipliedAlpha]) {
          if (drawingWithRenderNode) {
            [((RepackagedAndroidViewRenderNode *) nil_chk(renderNode)) setAlphaWithFloat:alpha * [self getAlpha] * [self getTransitionAlpha]];
          }
          else
#line 16050
          if (layerType == RepackagedAndroidViewView_LAYER_TYPE_NONE) {
            [canvas saveLayerAlphaWithInt:sx withInt:sy withInt:sx + RepackagedAndroidViewView_getWidth(self) withInt:sy + RepackagedAndroidViewView_getHeight(self) withInt:
#line 16052
            multipliedAlpha];
          }
        }
        else {
          mPrivateFlags_ |= RepackagedAndroidViewView_PFLAG_ALPHA_SET;
        }
      }
    }
  }
  else
#line 16060
  if ((mPrivateFlags_ & RepackagedAndroidViewView_PFLAG_ALPHA_SET) == RepackagedAndroidViewView_PFLAG_ALPHA_SET) {
    [self onSetAlphaWithInt:255];
    mPrivateFlags_ &= ~RepackagedAndroidViewView_PFLAG_ALPHA_SET;
  }
  
#line 16065
  if (!drawingWithRenderNode) {
    
#line 16067
    if ((parentFlags & RepackagedAndroidViewViewGroup_FLAG_CLIP_CHILDREN) != 0 && cache == nil) {
      if (offsetForScroll) {
        [canvas clipRectWithInt:sx withInt:sy withInt:sx + RepackagedAndroidViewView_getWidth(self) withInt:sy + RepackagedAndroidViewView_getHeight(self)];
      }
      else {
        
#line 16071
        if (!scalingRequired || cache == nil) {
          [canvas clipRectWithInt:0 withInt:0 withInt:RepackagedAndroidViewView_getWidth(self) withInt:RepackagedAndroidViewView_getHeight(self)];
        }
        else {
          
#line 16074
          [canvas clipRectWithInt:0 withInt:0 withInt:[cache getWidth] withInt:[cache getHeight]];
        }
      }
    }
    
#line 16079
    if (mClipBounds_ != nil) {
      
#line 16081
      [canvas clipRectWithRepackagedAndroidGraphicsRect:mClipBounds_];
    }
  }
  
#line 16085
  if (!drawingWithDrawingCache) {
    if (drawingWithRenderNode) {
      mPrivateFlags_ &= ~RepackagedAndroidViewView_PFLAG_DIRTY_MASK;
      [((RepackagedAndroidViewDisplayListCanvas *) check_class_cast(canvas, [RepackagedAndroidViewDisplayListCanvas class])) drawRenderNodeWithRepackagedAndroidViewRenderNode:renderNode];
    }
    else {
      if ((mPrivateFlags_ & RepackagedAndroidViewView_PFLAG_SKIP_DRAW) == RepackagedAndroidViewView_PFLAG_SKIP_DRAW) {
        mPrivateFlags_ &= ~RepackagedAndroidViewView_PFLAG_DIRTY_MASK;
        [self dispatchDrawWithRepackagedAndroidGraphicsCanvas:canvas];
      }
      else {
        
#line 16095
        [self drawWithRepackagedAndroidGraphicsCanvas:canvas];
      }
    }
  }
  else
#line 16098
  if (cache != nil) {
    mPrivateFlags_ &= ~RepackagedAndroidViewView_PFLAG_DIRTY_MASK;
    if (layerType == RepackagedAndroidViewView_LAYER_TYPE_NONE) {
      
#line 16102
      RepackagedAndroidGraphicsPaint *cachePaint = parent->mCachePaint_;
      if (cachePaint == nil) {
        cachePaint = new_RepackagedAndroidGraphicsPaint_init();
        [cachePaint setDitherWithBoolean:NO];
        parent->mCachePaint_ = cachePaint;
      }
      [((RepackagedAndroidGraphicsPaint *) nil_chk(cachePaint)) setAlphaWithInt:J2ObjCFpToInt((alpha * 255))];
      [canvas drawBitmapWithRepackagedAndroidGraphicsBitmap:cache withFloat:0.0f withFloat:0.0f withRepackagedAndroidGraphicsPaint:cachePaint];
    }
    else {
      jint layerPaintAlpha = [((RepackagedAndroidGraphicsPaint *) nil_chk(mLayerPaint_)) getAlpha];
      [mLayerPaint_ setAlphaWithInt:J2ObjCFpToInt((alpha * layerPaintAlpha))];
      [canvas drawBitmapWithRepackagedAndroidGraphicsBitmap:cache withFloat:0.0f withFloat:0.0f withRepackagedAndroidGraphicsPaint:mLayerPaint_];
      [mLayerPaint_ setAlphaWithInt:layerPaintAlpha];
    }
  }
  
#line 16119
  if (restoreTo >= 0) {
    [canvas restoreToCountWithInt:restoreTo];
  }
  
#line 16123
  if (a != nil && !more) {
    if (!hardwareAcceleratedCanvas && ![a getFillAfter]) {
      [self onSetAlphaWithInt:255];
    }
    [parent finishAnimatingViewWithRepackagedAndroidViewView:self withRepackagedAndroidViewAnimationAnimation:a];
  }
  
#line 16130
  if (more && hardwareAcceleratedCanvas) {
    if ([((id<RepackagedAndroidViewAnimationAnimation>) nil_chk(a)) hasAlpha] && (mPrivateFlags_ & RepackagedAndroidViewView_PFLAG_ALPHA_SET) == RepackagedAndroidViewView_PFLAG_ALPHA_SET) {
      
#line 16133
      [self invalidateWithBoolean:YES];
    }
  }
  
#line 16137
  mRecreateDisplayList_ = NO;
  
#line 16139
  return more;
}


#line 16152
- (void)drawWithRepackagedAndroidGraphicsCanvas:(RepackagedAndroidGraphicsCanvas *)canvas {
  jint privateFlags = mPrivateFlags_;
  jboolean dirtyOpaque = (privateFlags & RepackagedAndroidViewView_PFLAG_DIRTY_MASK) == RepackagedAndroidViewView_PFLAG_DIRTY_OPAQUE &&
#line 16155
  (mAttachInfo_ == nil || !mAttachInfo_->mIgnoreDirtyState_);
  mPrivateFlags_ = (privateFlags & ~RepackagedAndroidViewView_PFLAG_DIRTY_MASK) | RepackagedAndroidViewView_PFLAG_DRAWN;
  
#line 16171
  jint saveCount;
  
#line 16173
  if (!dirtyOpaque) {
    RepackagedAndroidViewView_drawBackgroundWithRepackagedAndroidGraphicsCanvas_(self, canvas);
  }
  
#line 16178
  jint viewFlags = mViewFlags_;
  jboolean horizontalEdges = (viewFlags & RepackagedAndroidViewView_FADING_EDGE_HORIZONTAL) != 0;
  jboolean verticalEdges = (viewFlags & RepackagedAndroidViewView_FADING_EDGE_VERTICAL) != 0;
  if (!verticalEdges && !horizontalEdges) {
    
#line 16183
    if (!dirtyOpaque) [self onDrawWithRepackagedAndroidGraphicsCanvas:canvas];
    
#line 16186
    [self dispatchDrawWithRepackagedAndroidGraphicsCanvas:canvas];
    
#line 16189
    if (mOverlay_ != nil && ![mOverlay_ isEmpty]) {
      [((RepackagedAndroidViewViewGroup *) nil_chk([mOverlay_ getOverlayView])) dispatchDrawWithRepackagedAndroidGraphicsCanvas:canvas];
    }
    
#line 16194
    [self onDrawForegroundWithRepackagedAndroidGraphicsCanvas:canvas];
    
#line 16197
    return;
  }
  
#line 16207
  jboolean drawTop = NO;
  jboolean drawBottom = NO;
  jboolean drawLeft = NO;
  jboolean drawRight = NO;
  
#line 16212
  jfloat topFadeStrength = 0.0f;
  jfloat bottomFadeStrength = 0.0f;
  jfloat leftFadeStrength = 0.0f;
  jfloat rightFadeStrength = 0.0f;
  
#line 16218
  jint paddingLeft = mPaddingLeft_;
  
#line 16220
  jboolean offsetRequired = [self isPaddingOffsetRequired];
  if (offsetRequired) {
    paddingLeft += [self getLeftPaddingOffset];
  }
  
#line 16225
  jint left = mScrollX_ + paddingLeft;
  jint right = left + mRight_ - mLeft_ - mPaddingRight_ - paddingLeft;
  jint top = mScrollY_ + [self getFadeTopWithBoolean:offsetRequired];
  jint bottom = top + [self getFadeHeightWithBoolean:offsetRequired];
  
#line 16230
  if (offsetRequired) {
    right += [self getRightPaddingOffset];
    bottom += [self getBottomPaddingOffset];
  }
  
#line 16235
  RepackagedAndroidViewView_ScrollabilityCache *scrollabilityCache = mScrollCache_;
  jfloat fadeHeight = ((RepackagedAndroidViewView_ScrollabilityCache *) nil_chk(scrollabilityCache))->fadingEdgeLength_;
  jint length = J2ObjCFpToInt(fadeHeight);
  
#line 16241
  if (verticalEdges && (top + length > bottom - length)) {
    length = (bottom - top) / 2;
  }
  
#line 16246
  if (horizontalEdges && (left + length > right - length)) {
    length = (right - left) / 2;
  }
  
#line 16250
  if (verticalEdges) {
    topFadeStrength = JavaLangMath_maxWithFloat_withFloat_(0.0f, JavaLangMath_minWithFloat_withFloat_(1.0f, [self getTopFadingEdgeStrength]));
    drawTop = (topFadeStrength * fadeHeight > 1.0f);
    bottomFadeStrength = JavaLangMath_maxWithFloat_withFloat_(0.0f, JavaLangMath_minWithFloat_withFloat_(1.0f, [self getBottomFadingEdgeStrength]));
    drawBottom = (bottomFadeStrength * fadeHeight > 1.0f);
  }
  
#line 16257
  if (horizontalEdges) {
    leftFadeStrength = JavaLangMath_maxWithFloat_withFloat_(0.0f, JavaLangMath_minWithFloat_withFloat_(1.0f, [self getLeftFadingEdgeStrength]));
    drawLeft = (leftFadeStrength * fadeHeight > 1.0f);
    rightFadeStrength = JavaLangMath_maxWithFloat_withFloat_(0.0f, JavaLangMath_minWithFloat_withFloat_(1.0f, [self getRightFadingEdgeStrength]));
    drawRight = (rightFadeStrength * fadeHeight > 1.0f);
  }
  
#line 16264
  saveCount = [((RepackagedAndroidGraphicsCanvas *) nil_chk(canvas)) getSaveCount];
  
#line 16266
  jint solidColor = [self getSolidColor];
  if (solidColor == 0) {
    jint flags = RepackagedAndroidGraphicsCanvas_HAS_ALPHA_LAYER_SAVE_FLAG;
    
#line 16270
    if (drawTop) {
      [canvas saveLayerWithInt:left withInt:top withInt:right withInt:top + length withId:nil withInt:flags];
    }
    
#line 16274
    if (drawBottom) {
      [canvas saveLayerWithInt:left withInt:bottom - length withInt:right withInt:bottom withId:nil withInt:flags];
    }
    
#line 16278
    if (drawLeft) {
      [canvas saveLayerWithInt:left withInt:top withInt:left + length withInt:bottom withId:nil withInt:flags];
    }
    
#line 16282
    if (drawRight) {
      [canvas saveLayerWithInt:right - length withInt:top withInt:right withInt:bottom withId:nil withInt:flags];
    }
  }
  else {
    
#line 16286
    [scrollabilityCache setFadeColorWithInt:solidColor];
  }
  
#line 16290
  if (!dirtyOpaque) [self onDrawWithRepackagedAndroidGraphicsCanvas:canvas];
  
#line 16293
  [self dispatchDrawWithRepackagedAndroidGraphicsCanvas:canvas];
  
#line 16296
  RepackagedAndroidGraphicsPaint *p = scrollabilityCache->paint_;
  RepackagedAndroidGraphicsMatrix *matrix = scrollabilityCache->matrix_;
  RepackagedAndroidGraphicsShader *fade = scrollabilityCache->shader_;
  
#line 16300
  if (drawTop) {
    [((RepackagedAndroidGraphicsMatrix *) nil_chk(matrix)) setScaleWithFloat:1 withFloat:fadeHeight * topFadeStrength];
    [matrix postTranslateWithFloat:left withFloat:top];
    [((RepackagedAndroidGraphicsShader *) nil_chk(fade)) setLocalMatrixWithRepackagedAndroidGraphicsMatrix:matrix];
    [((RepackagedAndroidGraphicsPaint *) nil_chk(p)) setShaderWithRepackagedAndroidGraphicsShader:fade];
    [canvas drawRectWithInt:left withInt:top withInt:right withInt:top + length withRepackagedAndroidGraphicsPaint:p];
  }
  
#line 16308
  if (drawBottom) {
    [((RepackagedAndroidGraphicsMatrix *) nil_chk(matrix)) setScaleWithFloat:1 withFloat:fadeHeight * bottomFadeStrength];
    [matrix postRotateWithFloat:180];
    [matrix postTranslateWithFloat:left withFloat:bottom];
    [((RepackagedAndroidGraphicsShader *) nil_chk(fade)) setLocalMatrixWithRepackagedAndroidGraphicsMatrix:matrix];
    [((RepackagedAndroidGraphicsPaint *) nil_chk(p)) setShaderWithRepackagedAndroidGraphicsShader:fade];
    [canvas drawRectWithInt:left withInt:bottom - length withInt:right withInt:bottom withRepackagedAndroidGraphicsPaint:p];
  }
  
#line 16317
  if (drawLeft) {
    [((RepackagedAndroidGraphicsMatrix *) nil_chk(matrix)) setScaleWithFloat:1 withFloat:fadeHeight * leftFadeStrength];
    [matrix postRotateWithFloat:-90];
    [matrix postTranslateWithFloat:left withFloat:top];
    [((RepackagedAndroidGraphicsShader *) nil_chk(fade)) setLocalMatrixWithRepackagedAndroidGraphicsMatrix:matrix];
    [((RepackagedAndroidGraphicsPaint *) nil_chk(p)) setShaderWithRepackagedAndroidGraphicsShader:fade];
    [canvas drawRectWithInt:left withInt:top withInt:left + length withInt:bottom withRepackagedAndroidGraphicsPaint:p];
  }
  
#line 16326
  if (drawRight) {
    [((RepackagedAndroidGraphicsMatrix *) nil_chk(matrix)) setScaleWithFloat:1 withFloat:fadeHeight * rightFadeStrength];
    [matrix postRotateWithFloat:90];
    [matrix postTranslateWithFloat:right withFloat:top];
    [((RepackagedAndroidGraphicsShader *) nil_chk(fade)) setLocalMatrixWithRepackagedAndroidGraphicsMatrix:matrix];
    [((RepackagedAndroidGraphicsPaint *) nil_chk(p)) setShaderWithRepackagedAndroidGraphicsShader:fade];
    [canvas drawRectWithInt:right - length withInt:top withInt:right withInt:bottom withRepackagedAndroidGraphicsPaint:p];
  }
  
#line 16335
  [canvas restoreToCountWithInt:saveCount];
  
#line 16338
  if (mOverlay_ != nil && ![mOverlay_ isEmpty]) {
    [((RepackagedAndroidViewViewGroup *) nil_chk([mOverlay_ getOverlayView])) dispatchDrawWithRepackagedAndroidGraphicsCanvas:canvas];
  }
  
#line 16343
  [self onDrawForegroundWithRepackagedAndroidGraphicsCanvas:canvas];
}

- (void)drawBackgroundWithRepackagedAndroidGraphicsCanvas:(RepackagedAndroidGraphicsCanvas *)canvas {
  RepackagedAndroidViewView_drawBackgroundWithRepackagedAndroidGraphicsCanvas_(self, canvas);
}


#line 16388
- (void)setBackgroundBounds {
  if (mBackgroundSizeChanged_ && mBackground_ != nil) {
    [mBackground_ setBoundsWithInt:0 withInt:0 withInt:mRight_ - mLeft_ withInt:mBottom_ - mTop_];
    mBackgroundSizeChanged_ = NO;
    RepackagedAndroidViewView_rebuildOutline(self);
  }
}

- (void)setBackgroundRenderNodePropertiesWithRepackagedAndroidViewRenderNode:(RepackagedAndroidViewRenderNode *)renderNode {
  RepackagedAndroidViewView_setBackgroundRenderNodePropertiesWithRepackagedAndroidViewRenderNode_(self, renderNode);
}


#line 16409
- (RepackagedAndroidViewRenderNode *)getDrawableRenderNodeWithRepackagedAndroidGraphicsDrawableDrawable:(RepackagedAndroidGraphicsDrawableDrawable *)drawable
                                                                    withRepackagedAndroidViewRenderNode:(RepackagedAndroidViewRenderNode *)renderNode {
  return RepackagedAndroidViewView_getDrawableRenderNodeWithRepackagedAndroidGraphicsDrawableDrawable_withRepackagedAndroidViewRenderNode_(self, drawable, renderNode);
}


#line 16453
- (RepackagedAndroidViewViewOverlay *)getOverlay {
  if (mOverlay_ == nil) {
    mOverlay_ = new_RepackagedAndroidViewViewOverlay_initWithRepackagedAndroidContentContext_withRepackagedAndroidViewView_(mContext_, self);
  }
  return mOverlay_;
}


#line 16473
- (jint)getSolidColor {
  return 0;
}


#line 16483
+ (NSString *)printFlagsWithInt:(jint)flags {
  return RepackagedAndroidViewView_printFlagsWithInt_(flags);
}


#line 16519
+ (NSString *)printPrivateFlagsWithInt:(jint)privateFlags {
  return RepackagedAndroidViewView_printPrivateFlagsWithInt_(privateFlags);
}


#line 16576
- (jboolean)isLayoutRequested {
  return (mPrivateFlags_ & RepackagedAndroidViewView_PFLAG_FORCE_LAYOUT) == RepackagedAndroidViewView_PFLAG_FORCE_LAYOUT;
}


#line 16584
+ (jboolean)isLayoutModeOpticalWithId:(id)o {
  return RepackagedAndroidViewView_isLayoutModeOpticalWithId_(o);
}

- (jboolean)setOpticalFrameWithInt:(jint)left
                           withInt:(jint)top
                           withInt:(jint)right
                           withInt:(jint)bottom {
  return RepackagedAndroidViewView_setOpticalFrameWithInt_withInt_withInt_withInt_(self, left, top, right, bottom);
}


#line 16620
- (void)layoutWithInt:(jint)l
              withInt:(jint)t
              withInt:(jint)r
              withInt:(jint)b {
  if ((mPrivateFlags3_ & RepackagedAndroidViewView_PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT) != 0) {
    [self onMeasureWithInt:mOldWidthMeasureSpec_ withInt:mOldHeightMeasureSpec_];
    mPrivateFlags3_ &= ~RepackagedAndroidViewView_PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT;
  }
  
#line 16626
  jint oldL = mLeft_;
  jint oldT = mTop_;
  jint oldB = mBottom_;
  jint oldR = mRight_;
  
#line 16631
  jboolean changed = RepackagedAndroidViewView_isLayoutModeOpticalWithId_(mParent_) ? RepackagedAndroidViewView_setOpticalFrameWithInt_withInt_withInt_withInt_(self,
#line 16632
  l, t, r, b) : [self setFrameWithInt:l withInt:t withInt:r withInt:b];
  
#line 16634
  if (changed || (mPrivateFlags_ & RepackagedAndroidViewView_PFLAG_LAYOUT_REQUIRED) == RepackagedAndroidViewView_PFLAG_LAYOUT_REQUIRED) {
    [self onLayoutWithBoolean:changed withInt:l withInt:t withInt:r withInt:b];
    mPrivateFlags_ &= ~RepackagedAndroidViewView_PFLAG_LAYOUT_REQUIRED;
    
#line 16638
    RepackagedAndroidViewView_ListenerInfo *li = mListenerInfo_;
    if (li != nil && li->mOnLayoutChangeListeners_ != nil) {
      JavaUtilArrayList *listenersCopy =
#line 16641
      (JavaUtilArrayList *) check_class_cast([li->mOnLayoutChangeListeners_ clone], [JavaUtilArrayList class]);
      jint numListeners = [((JavaUtilArrayList *) nil_chk(listenersCopy)) size];
      for (jint i = 0; i < numListeners; ++i) {
        [((id<RepackagedAndroidViewView_OnLayoutChangeListener>) nil_chk([listenersCopy getWithInt:i])) onLayoutChangeWithRepackagedAndroidViewView:self withInt:l withInt:t withInt:r withInt:b withInt:oldL withInt:oldT withInt:oldR withInt:oldB];
      }
    }
  }
  
#line 16649
  mPrivateFlags_ &= ~RepackagedAndroidViewView_PFLAG_FORCE_LAYOUT;
  mPrivateFlags3_ |= RepackagedAndroidViewView_PFLAG3_IS_LAID_OUT;
}


#line 16666
- (void)onLayoutWithBoolean:(jboolean)changed
                    withInt:(jint)left
                    withInt:(jint)top
                    withInt:(jint)right
                    withInt:(jint)bottom {
}


#line 16682
- (jboolean)setFrameWithInt:(jint)left
                    withInt:(jint)top
                    withInt:(jint)right
                    withInt:(jint)bottom {
  jboolean changed = NO;
  
#line 16690
  if (mLeft_ != left || mRight_ != right || mTop_ != top || mBottom_ != bottom) {
    changed = YES;
    
#line 16694
    jint drawn = mPrivateFlags_ & RepackagedAndroidViewView_PFLAG_DRAWN;
    
#line 16696
    jint oldWidth = mRight_ - mLeft_;
    jint oldHeight = mBottom_ - mTop_;
    jint newWidth = right - left;
    jint newHeight = bottom - top;
    jboolean sizeChanged = (newWidth != oldWidth) || (newHeight != oldHeight);
    
#line 16703
    [self invalidateWithBoolean:sizeChanged];
    
#line 16705
    mLeft_ = left;
    mTop_ = top;
    mRight_ = right;
    mBottom_ = bottom;
    [((RepackagedAndroidViewRenderNode *) nil_chk(mRenderNode_)) setLeftTopRightBottomWithInt:mLeft_ withInt:mTop_ withInt:mRight_ withInt:mBottom_];
    
#line 16711
    mPrivateFlags_ |= RepackagedAndroidViewView_PFLAG_HAS_BOUNDS;
    
#line 16714
    if (sizeChanged) {
      RepackagedAndroidViewView_sizeChangeWithInt_withInt_withInt_withInt_(self, newWidth, newHeight, oldWidth, oldHeight);
    }
    
#line 16718
    if ((mViewFlags_ & RepackagedAndroidViewView_VISIBILITY_MASK) == RepackagedAndroidViewView_VISIBLE || mGhostView_ != nil) {
      
#line 16724
      mPrivateFlags_ |= RepackagedAndroidViewView_PFLAG_DRAWN;
      [self invalidateWithBoolean:sizeChanged];
      
#line 16728
      [self invalidateParentCaches];
    }
    
#line 16732
    mPrivateFlags_ |= drawn;
    
#line 16734
    mBackgroundSizeChanged_ = YES;
    if (mForegroundInfo_ != nil) {
      mForegroundInfo_->mBoundsChanged_ = YES;
    }
    
#line 16739
    [self notifySubtreeAccessibilityStateChangedIfNeeded];
  }
  return changed;
}


#line 16748
- (void)setLeftTopRightBottomWithInt:(jint)left
                             withInt:(jint)top
                             withInt:(jint)right
                             withInt:(jint)bottom {
  [self setFrameWithInt:left withInt:top withInt:right withInt:bottom];
}


#line 16752
- (void)sizeChangeWithInt:(jint)newWidth
                  withInt:(jint)newHeight
                  withInt:(jint)oldWidth
                  withInt:(jint)oldHeight {
  RepackagedAndroidViewView_sizeChangeWithInt_withInt_withInt_withInt_(self, newWidth, newHeight, oldWidth, oldHeight);
}


#line 16769
- (void)onFinishInflate {
}


#line 16777
- (RepackagedAndroidContentResResources *)getResources {
  return mResources_;
}


#line 16787
- (void)invalidateDrawableWithRepackagedAndroidGraphicsDrawableDrawable:(RepackagedAndroidGraphicsDrawableDrawable *)drawable {
  if ([self verifyDrawableWithRepackagedAndroidGraphicsDrawableDrawable:drawable]) {
    RepackagedAndroidGraphicsRect *dirty = [((RepackagedAndroidGraphicsDrawableDrawable *) nil_chk(drawable)) getDirtyBounds];
    jint scrollX = mScrollX_;
    jint scrollY = mScrollY_;
    
#line 16793
    [self invalidateWithInt:((RepackagedAndroidGraphicsRect *) nil_chk(dirty))->left_ + scrollX withInt:dirty->top_ + scrollY withInt:
#line 16794
    dirty->right_ + scrollX withInt:dirty->bottom_ + scrollY];
    RepackagedAndroidViewView_rebuildOutline(self);
  }
}


#line 16808
- (void)scheduleDrawableWithRepackagedAndroidGraphicsDrawableDrawable:(RepackagedAndroidGraphicsDrawableDrawable *)who
                                                 withJavaLangRunnable:(id<JavaLangRunnable>)what
                                                             withLong:(jlong)when {
  if ([self verifyDrawableWithRepackagedAndroidGraphicsDrawableDrawable:who] && what != nil) {
    jlong delay = when - RepackagedAndroidOsSystemClock_uptimeMillis();
    if (mAttachInfo_ != nil) {
      [((RepackagedAndroidViewChoreographer *) nil_chk(((RepackagedAndroidViewViewRootImpl *) nil_chk(mAttachInfo_->mViewRootImpl_))->mChoreographer_)) postCallbackDelayedWithNSString:RepackagedAndroidViewChoreographer_get_CALLBACK_ANIMATION_() withJavaLangRunnable:
#line 16813
      what withId:who withLong:RepackagedAndroidViewChoreographer_subtractFrameDelayWithLong_(
#line 16814
      delay)];
    }
    else {
      
#line 16816
      [((id<RepackagedAndroidOsHandler>) nil_chk(RepackagedAndroidViewViewRootImpl_getRunQueue())) postDelayedWithJavaLangRunnable:what withLong:delay];
    }
  }
}

- (void)unscheduleDrawableWithRepackagedAndroidGraphicsDrawableDrawable:(RepackagedAndroidGraphicsDrawableDrawable *)who
                                                   withJavaLangRunnable:(id<JavaLangRunnable>)what {
  if ([self verifyDrawableWithRepackagedAndroidGraphicsDrawableDrawable:who] && what != nil) {
    if (mAttachInfo_ != nil) {
      [((RepackagedAndroidViewChoreographer *) nil_chk(((RepackagedAndroidViewViewRootImpl *) nil_chk(mAttachInfo_->mViewRootImpl_))->mChoreographer_)) removeCallbacksWithNSString:RepackagedAndroidViewChoreographer_get_CALLBACK_ANIMATION_() withJavaLangRunnable:
#line 16832
      what withId:who];
    }
    [((id<RepackagedAndroidOsHandler>) nil_chk(RepackagedAndroidViewViewRootImpl_getRunQueue())) removeCallbacksWithId:what];
  }
}


#line 16847
- (void)unscheduleDrawableWithRepackagedAndroidGraphicsDrawableDrawable:(RepackagedAndroidGraphicsDrawableDrawable *)who {
  if (mAttachInfo_ != nil && who != nil) {
    [((RepackagedAndroidViewChoreographer *) nil_chk(((RepackagedAndroidViewViewRootImpl *) nil_chk(mAttachInfo_->mViewRootImpl_))->mChoreographer_)) removeCallbacksWithNSString:RepackagedAndroidViewChoreographer_get_CALLBACK_ANIMATION_() withJavaLangRunnable:
#line 16850
    nil withId:who];
  }
}


#line 16862
- (void)resolveDrawables {
  
#line 16870
  if (![self isLayoutDirectionResolved] &&
#line 16871
  [self getRawLayoutDirection] == RepackagedAndroidViewView_LAYOUT_DIRECTION_INHERIT) {
    return;
  }
  
#line 16875
  jint layoutDirection = [self isLayoutDirectionResolved] ?
#line 16876
  [self getLayoutDirection] : [self getRawLayoutDirection];
  
#line 16878
  if (mBackground_ != nil) {
    [mBackground_ setLayoutDirectionWithInt:layoutDirection];
  }
  if (mForegroundInfo_ != nil && mForegroundInfo_->mDrawable_ != nil) {
    [mForegroundInfo_->mDrawable_ setLayoutDirectionWithInt:layoutDirection];
  }
  mPrivateFlags2_ |= RepackagedAndroidViewView_PFLAG2_DRAWABLE_RESOLVED;
  [self onResolveDrawablesWithInt:layoutDirection];
}


#line 16888
- (jboolean)areDrawablesResolved {
  return (mPrivateFlags2_ & RepackagedAndroidViewView_PFLAG2_DRAWABLE_RESOLVED) == RepackagedAndroidViewView_PFLAG2_DRAWABLE_RESOLVED;
}


#line 16904
- (void)onResolveDrawablesWithInt:(jint)layoutDirection {
}


#line 16910
- (void)resetResolvedDrawables {
  [self resetResolvedDrawablesInternal];
}

- (void)resetResolvedDrawablesInternal {
  mPrivateFlags2_ &= ~RepackagedAndroidViewView_PFLAG2_DRAWABLE_RESOLVED;
}


#line 16938
- (jboolean)verifyDrawableWithRepackagedAndroidGraphicsDrawableDrawable:(RepackagedAndroidGraphicsDrawableDrawable *)who {
  return who == mBackground_ || (mScrollCache_ != nil && mScrollCache_->scrollBar_ == who) ||
#line 16940
  (mForegroundInfo_ != nil && mForegroundInfo_->mDrawable_ == who);
}


#line 16955
- (void)drawableStateChanged {
  IOSIntArray *state = RepackagedAndroidViewView_getDrawableState(self);
  
#line 16958
  RepackagedAndroidGraphicsDrawableDrawable *bg = mBackground_;
  if (bg != nil && [bg isStateful]) {
    [bg setStateWithIntArray:state];
  }
  
#line 16963
  RepackagedAndroidGraphicsDrawableDrawable *fg = mForegroundInfo_ != nil ? mForegroundInfo_->mDrawable_ : nil;
  if (fg != nil && [fg isStateful]) {
    [fg setStateWithIntArray:state];
  }
  
#line 16968
  if (mScrollCache_ != nil) {
    RepackagedAndroidGraphicsDrawableDrawable *scrollBar = mScrollCache_->scrollBar_;
    if (scrollBar != nil && [scrollBar isStateful]) {
      [scrollBar setStateWithIntArray:state];
    }
  }
  
#line 16975
  if (mStateListAnimator_ != nil) {
    [mStateListAnimator_ setStateWithIntArray:state];
  }
}


#line 16993
- (void)drawableHotspotChangedWithFloat:(jfloat)x
                              withFloat:(jfloat)y {
  if (mBackground_ != nil) {
    [mBackground_ setHotspotWithFloat:x withFloat:y];
  }
  if (mForegroundInfo_ != nil && mForegroundInfo_->mDrawable_ != nil) {
    [mForegroundInfo_->mDrawable_ setHotspotWithFloat:x withFloat:y];
  }
  
#line 17001
  [self dispatchDrawableHotspotChangedWithFloat:x withFloat:y];
}


#line 17011
- (void)dispatchDrawableHotspotChangedWithFloat:(jfloat)x
                                      withFloat:(jfloat)y {
}


#line 17022
- (void)refreshDrawableState {
  mPrivateFlags_ |= RepackagedAndroidViewView_PFLAG_DRAWABLE_STATE_DIRTY;
  [self drawableStateChanged];
  
#line 17026
  id<RepackagedAndroidViewViewParent> parent = mParent_;
  if (parent != nil) {
    [parent childDrawableStateChangedWithRepackagedAndroidViewView:self];
  }
}


#line 17042
- (IOSIntArray *)getDrawableState {
  return RepackagedAndroidViewView_getDrawableState(self);
}


#line 17067
- (IOSIntArray *)onCreateDrawableStateWithInt:(jint)extraSpace {
  if ((mViewFlags_ & RepackagedAndroidViewView_DUPLICATE_PARENT_STATE) == RepackagedAndroidViewView_DUPLICATE_PARENT_STATE &&
#line 17069
  [mParent_ isKindOfClass:[RepackagedAndroidViewView class]]) {
    return [((RepackagedAndroidViewView *) nil_chk(((RepackagedAndroidViewView *) check_class_cast(mParent_, [RepackagedAndroidViewView class])))) onCreateDrawableStateWithInt:extraSpace];
  }
  
#line 17073
  IOSIntArray *drawableState;
  
#line 17075
  jint privateFlags = mPrivateFlags_;
  
#line 17077
  jint viewStateIndex = 0;
  if ((privateFlags & RepackagedAndroidViewView_PFLAG_PRESSED) != 0) viewStateIndex |= RepackagedAndroidUtilStateSet_VIEW_STATE_PRESSED;
  if ((mViewFlags_ & RepackagedAndroidViewView_ENABLED_MASK) == RepackagedAndroidViewView_ENABLED) viewStateIndex |= RepackagedAndroidUtilStateSet_VIEW_STATE_ENABLED;
  if ([self isFocused]) viewStateIndex |= RepackagedAndroidUtilStateSet_VIEW_STATE_FOCUSED;
  if ((privateFlags & RepackagedAndroidViewView_PFLAG_SELECTED) != 0) viewStateIndex |= RepackagedAndroidUtilStateSet_VIEW_STATE_SELECTED;
  if ([self hasWindowFocus]) viewStateIndex |= RepackagedAndroidUtilStateSet_VIEW_STATE_WINDOW_FOCUSED;
  if ((privateFlags & RepackagedAndroidViewView_PFLAG_ACTIVATED) != 0) viewStateIndex |= RepackagedAndroidUtilStateSet_VIEW_STATE_ACTIVATED;
  if (mAttachInfo_ != nil && mAttachInfo_->mHardwareAccelerationRequested_ && RepackagedAndroidViewHardwareRenderer_isAvailable()) {
    
#line 17089
    viewStateIndex |= RepackagedAndroidUtilStateSet_VIEW_STATE_ACCELERATED;
  }
  if ((privateFlags & RepackagedAndroidViewView_PFLAG_HOVERED) != 0) viewStateIndex |= RepackagedAndroidUtilStateSet_VIEW_STATE_HOVERED;
  
#line 17093
  jint privateFlags2 = mPrivateFlags2_;
  if ((privateFlags2 & RepackagedAndroidViewView_PFLAG2_DRAG_CAN_ACCEPT) != 0) {
    viewStateIndex |= RepackagedAndroidUtilStateSet_VIEW_STATE_DRAG_CAN_ACCEPT;
  }
  if ((privateFlags2 & RepackagedAndroidViewView_PFLAG2_DRAG_HOVERED) != 0) {
    viewStateIndex |= RepackagedAndroidUtilStateSet_VIEW_STATE_DRAG_HOVERED;
  }
  
#line 17101
  drawableState = RepackagedAndroidUtilStateSet_getWithInt_(viewStateIndex);
  
#line 17115
  if (extraSpace == 0) {
    return drawableState;
  }
  
#line 17119
  IOSIntArray *fullState;
  if (drawableState != nil) {
    fullState = [IOSIntArray newArrayWithLength:drawableState->size_ + extraSpace];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(drawableState, 0, fullState, 0, drawableState->size_);
  }
  else {
    
#line 17124
    fullState = [IOSIntArray newArrayWithLength:extraSpace];
  }
  
#line 17127
  return fullState;
}


#line 17147
+ (IOSIntArray *)mergeDrawableStatesWithIntArray:(IOSIntArray *)baseState
                                    withIntArray:(IOSIntArray *)additionalState {
  return RepackagedAndroidViewView_mergeDrawableStatesWithIntArray_withIntArray_(baseState, additionalState);
}


#line 17165
- (void)jumpDrawablesToCurrentState {
  if (mBackground_ != nil) {
    [mBackground_ jumpToCurrentState];
  }
  if (mStateListAnimator_ != nil) {
    [mStateListAnimator_ jumpToCurrentState];
  }
  if (mForegroundInfo_ != nil && mForegroundInfo_->mDrawable_ != nil) {
    [mForegroundInfo_->mDrawable_ jumpToCurrentState];
  }
}


#line 17182
- (void)setBackgroundColorWithInt:(jint)color {
  if ([mBackground_ isKindOfClass:[RepackagedAndroidGraphicsDrawableColorDrawable class]]) {
    [((RepackagedAndroidGraphicsDrawableColorDrawable *) nil_chk(((RepackagedAndroidGraphicsDrawableColorDrawable *) check_class_cast([((RepackagedAndroidGraphicsDrawableDrawable *) nil_chk(mBackground_)) mutate], [RepackagedAndroidGraphicsDrawableColorDrawable class])))) setColorWithInt:color];
    [self computeOpaqueFlags];
    mBackgroundResource_ = 0;
  }
  else {
    
#line 17188
    [self setBackgroundWithRepackagedAndroidGraphicsDrawableDrawable:new_RepackagedAndroidGraphicsDrawableColorDrawable_initWithInt_(color)];
  }
}


#line 17200
- (void)setBackgroundResourceWithInt:(jint)resid {
  if (resid != 0 && resid == mBackgroundResource_) {
    return;
  }
  
#line 17205
  RepackagedAndroidGraphicsDrawableDrawable *d = nil;
  if (resid != 0) {
    d = [((id<RepackagedAndroidContentContext>) nil_chk(mContext_)) getDrawableWithInt:resid];
  }
  [self setBackgroundWithRepackagedAndroidGraphicsDrawableDrawable:d];
  
#line 17211
  mBackgroundResource_ = resid;
}


#line 17224
- (void)setBackgroundWithRepackagedAndroidGraphicsDrawableDrawable:(RepackagedAndroidGraphicsDrawableDrawable *)background {
  
#line 17226
  [self setBackgroundDrawableWithRepackagedAndroidGraphicsDrawableDrawable:background];
}


#line 17233
- (void)setBackgroundDrawableWithRepackagedAndroidGraphicsDrawableDrawable:(RepackagedAndroidGraphicsDrawableDrawable *)background {
  [self computeOpaqueFlags];
  
#line 17236
  if (background == mBackground_) {
    return;
  }
  
#line 17240
  jboolean requestLayout = NO;
  
#line 17242
  mBackgroundResource_ = 0;
  
#line 17248
  if (mBackground_ != nil) {
    [mBackground_ setCallbackWithRepackagedAndroidViewView:nil];
    [self unscheduleDrawableWithRepackagedAndroidGraphicsDrawableDrawable:mBackground_];
  }
  
#line 17253
  if (background != nil) {
    RepackagedAndroidGraphicsRect *padding = [((JavaLangThreadLocal *) nil_chk(RepackagedAndroidViewView_sThreadLocal_)) get];
    if (padding == nil) {
      padding = new_RepackagedAndroidGraphicsRect_init();
      [RepackagedAndroidViewView_sThreadLocal_ setWithId:padding];
    }
    [self resetResolvedDrawablesInternal];
    [background setLayoutDirectionWithInt:[self getLayoutDirection]];
    if ([background getPaddingWithRepackagedAndroidGraphicsRect:padding]) {
      [self resetResolvedPaddingInternal];
      switch ([background getLayoutDirection]) {
        case RepackagedAndroidViewView_LAYOUT_DIRECTION_RTL:
        mUserPaddingLeftInitial_ = ((RepackagedAndroidGraphicsRect *) nil_chk(padding))->right_;
        mUserPaddingRightInitial_ = padding->left_;
        [self internalSetPaddingWithInt:padding->right_ withInt:padding->top_ withInt:padding->left_ withInt:padding->bottom_];
        break;
        case RepackagedAndroidViewView_LAYOUT_DIRECTION_LTR:
        default:
        mUserPaddingLeftInitial_ = ((RepackagedAndroidGraphicsRect *) nil_chk(padding))->left_;
        mUserPaddingRightInitial_ = padding->right_;
        [self internalSetPaddingWithInt:padding->left_ withInt:padding->top_ withInt:padding->right_ withInt:padding->bottom_];
      }
      mLeftPaddingDefined_ = NO;
      mRightPaddingDefined_ = NO;
    }
    
#line 17281
    if (mBackground_ == nil ||
#line 17282
    [mBackground_ getMinimumHeight] != [background getMinimumHeight] ||
#line 17283
    [mBackground_ getMinimumWidth] != [background getMinimumWidth]) {
      requestLayout = YES;
    }
    
#line 17287
    [background setCallbackWithRepackagedAndroidViewView:self];
    if ([background isStateful]) {
      [background setStateWithIntArray:RepackagedAndroidViewView_getDrawableState(self)];
    }
    [background setVisibleWithBoolean:[self getVisibility] == RepackagedAndroidViewView_VISIBLE withBoolean:NO];
    mBackground_ = background;
    
#line 17294
    RepackagedAndroidViewView_applyBackgroundTint(self);
    
#line 17296
    if ((mPrivateFlags_ & RepackagedAndroidViewView_PFLAG_SKIP_DRAW) != 0) {
      mPrivateFlags_ &= ~RepackagedAndroidViewView_PFLAG_SKIP_DRAW;
      requestLayout = YES;
    }
  }
  else {
    mBackground_ = nil;
    if ((mViewFlags_ & RepackagedAndroidViewView_WILL_NOT_DRAW) != 0 &&
#line 17304
    (mForegroundInfo_ == nil || mForegroundInfo_->mDrawable_ == nil)) {
      mPrivateFlags_ |= RepackagedAndroidViewView_PFLAG_SKIP_DRAW;
    }
    
#line 17317
    requestLayout = YES;
  }
  
#line 17320
  [self computeOpaqueFlags];
  
#line 17322
  if (requestLayout) {
    [self requestLayout];
  }
  
#line 17326
  mBackgroundSizeChanged_ = YES;
  [self invalidateWithBoolean:YES];
}


#line 17339
- (RepackagedAndroidGraphicsDrawableDrawable *)getBackground {
  return mBackground_;
}


#line 17357
- (void)setBackgroundTintListWithRepackagedAndroidContentResColorStateList:(id<RepackagedAndroidContentResColorStateList>)tint {
  if (mBackgroundTint_ == nil) {
    mBackgroundTint_ = new_RepackagedAndroidViewView_TintInfo_init();
  }
  ((RepackagedAndroidViewView_TintInfo *) nil_chk(mBackgroundTint_))->mTintList_ = tint;
  mBackgroundTint_->mHasTintList_ = YES;
  
#line 17364
  RepackagedAndroidViewView_applyBackgroundTint(self);
}


#line 17375
- (id<RepackagedAndroidContentResColorStateList>)getBackgroundTintList {
  return mBackgroundTint_ != nil ? mBackgroundTint_->mTintList_ : nil;
}


#line 17390
- (void)setBackgroundTintModeWithRepackagedAndroidGraphicsPorterDuff_ModeEnum:(RepackagedAndroidGraphicsPorterDuff_ModeEnum *)tintMode {
  if (mBackgroundTint_ == nil) {
    mBackgroundTint_ = new_RepackagedAndroidViewView_TintInfo_init();
  }
  ((RepackagedAndroidViewView_TintInfo *) nil_chk(mBackgroundTint_))->mTintMode_ = tintMode;
  mBackgroundTint_->mHasTintMode_ = YES;
  
#line 17397
  RepackagedAndroidViewView_applyBackgroundTint(self);
}


#line 17410
- (RepackagedAndroidGraphicsPorterDuff_ModeEnum *)getBackgroundTintMode {
  return mBackgroundTint_ != nil ? mBackgroundTint_->mTintMode_ : nil;
}

- (void)applyBackgroundTint {
  RepackagedAndroidViewView_applyBackgroundTint(self);
}


#line 17445
- (RepackagedAndroidGraphicsDrawableDrawable *)getForeground {
  return mForegroundInfo_ != nil ? mForegroundInfo_->mDrawable_ : nil;
}


#line 17456
- (void)setForegroundWithRepackagedAndroidGraphicsDrawableDrawable:(RepackagedAndroidGraphicsDrawableDrawable *)foreground {
  if (mForegroundInfo_ == nil) {
    if (foreground == nil) {
      
#line 17460
      return;
    }
    mForegroundInfo_ = new_RepackagedAndroidViewView_ForegroundInfo_init();
  }
  
#line 17465
  if (foreground == ((RepackagedAndroidViewView_ForegroundInfo *) nil_chk(mForegroundInfo_))->mDrawable_) {
    
#line 17467
    return;
  }
  
#line 17470
  if (mForegroundInfo_->mDrawable_ != nil) {
    [mForegroundInfo_->mDrawable_ setCallbackWithRepackagedAndroidViewView:nil];
    [self unscheduleDrawableWithRepackagedAndroidGraphicsDrawableDrawable:mForegroundInfo_->mDrawable_];
  }
  
#line 17475
  mForegroundInfo_->mDrawable_ = foreground;
  mForegroundInfo_->mBoundsChanged_ = YES;
  if (foreground != nil) {
    if ((mPrivateFlags_ & RepackagedAndroidViewView_PFLAG_SKIP_DRAW) != 0) {
      mPrivateFlags_ &= ~RepackagedAndroidViewView_PFLAG_SKIP_DRAW;
    }
    [foreground setCallbackWithRepackagedAndroidViewView:self];
    [foreground setLayoutDirectionWithInt:[self getLayoutDirection]];
    if ([foreground isStateful]) {
      [foreground setStateWithIntArray:RepackagedAndroidViewView_getDrawableState(self)];
    }
    RepackagedAndroidViewView_applyForegroundTint(self);
  }
  else
#line 17487
  if ((mViewFlags_ & RepackagedAndroidViewView_WILL_NOT_DRAW) != 0 && mBackground_ == nil) {
    mPrivateFlags_ |= RepackagedAndroidViewView_PFLAG_SKIP_DRAW;
  }
  [self requestLayout];
  [self invalidate];
}

- (jboolean)isForegroundInsidePadding {
  return mForegroundInfo_ != nil ? mForegroundInfo_->mInsidePadding_ : YES;
}


#line 17515
- (jint)getForegroundGravity {
  return mForegroundInfo_ != nil ? mForegroundInfo_->mGravity_ :
#line 17517
  RepackagedAndroidViewGravity_START | RepackagedAndroidViewGravity_TOP;
}


#line 17529
- (void)setForegroundGravityWithInt:(jint)gravity {
  if (mForegroundInfo_ == nil) {
    mForegroundInfo_ = new_RepackagedAndroidViewView_ForegroundInfo_init();
  }
  
#line 17534
  if (((RepackagedAndroidViewView_ForegroundInfo *) nil_chk(mForegroundInfo_))->mGravity_ != gravity) {
    if ((gravity & RepackagedAndroidViewGravity_RELATIVE_HORIZONTAL_GRAVITY_MASK) == 0) {
      gravity |= RepackagedAndroidViewGravity_START;
    }
    
#line 17539
    if ((gravity & RepackagedAndroidViewGravity_VERTICAL_GRAVITY_MASK) == 0) {
      gravity |= RepackagedAndroidViewGravity_TOP;
    }
    
#line 17543
    mForegroundInfo_->mGravity_ = gravity;
    [self requestLayout];
  }
}


#line 17562
- (void)setForegroundTintListWithRepackagedAndroidContentResColorStateList:(id<RepackagedAndroidContentResColorStateList>)tint {
  if (mForegroundInfo_ == nil) {
    mForegroundInfo_ = new_RepackagedAndroidViewView_ForegroundInfo_init();
  }
  if (((RepackagedAndroidViewView_ForegroundInfo *) nil_chk(mForegroundInfo_))->mTintInfo_ == nil) {
    mForegroundInfo_->mTintInfo_ = new_RepackagedAndroidViewView_TintInfo_init();
  }
  ((RepackagedAndroidViewView_TintInfo *) nil_chk(mForegroundInfo_->mTintInfo_))->mTintList_ = tint;
  mForegroundInfo_->mTintInfo_->mHasTintList_ = YES;
  
#line 17572
  RepackagedAndroidViewView_applyForegroundTint(self);
}


#line 17583
- (id<RepackagedAndroidContentResColorStateList>)getForegroundTintList {
  return mForegroundInfo_ != nil && mForegroundInfo_->mTintInfo_ != nil ?
#line 17585
  mForegroundInfo_->mTintInfo_->mTintList_ : nil;
}


#line 17599
- (void)setForegroundTintModeWithRepackagedAndroidGraphicsPorterDuff_ModeEnum:(RepackagedAndroidGraphicsPorterDuff_ModeEnum *)tintMode {
  if (mForegroundInfo_ == nil) {
    mForegroundInfo_ = new_RepackagedAndroidViewView_ForegroundInfo_init();
  }
  if (((RepackagedAndroidViewView_ForegroundInfo *) nil_chk(mForegroundInfo_))->mTintInfo_ == nil) {
    mForegroundInfo_->mTintInfo_ = new_RepackagedAndroidViewView_TintInfo_init();
  }
  ((RepackagedAndroidViewView_TintInfo *) nil_chk(mForegroundInfo_->mTintInfo_))->mTintMode_ = tintMode;
  mForegroundInfo_->mTintInfo_->mHasTintMode_ = YES;
  
#line 17609
  RepackagedAndroidViewView_applyForegroundTint(self);
}


#line 17622
- (RepackagedAndroidGraphicsPorterDuff_ModeEnum *)getForegroundTintMode {
  return mForegroundInfo_ != nil && mForegroundInfo_->mTintInfo_ != nil ?
#line 17624
  mForegroundInfo_->mTintInfo_->mTintMode_ : nil;
}


#line 17627
- (void)applyForegroundTint {
  RepackagedAndroidViewView_applyForegroundTint(self);
}


#line 17660
- (void)onDrawForegroundWithRepackagedAndroidGraphicsCanvas:(RepackagedAndroidGraphicsCanvas *)canvas {
  RepackagedAndroidViewView_onDrawScrollIndicatorsWithRepackagedAndroidGraphicsCanvas_(self, canvas);
  RepackagedAndroidViewView_onDrawScrollBarsWithRepackagedAndroidGraphicsCanvas_(self, canvas);
  
#line 17664
  RepackagedAndroidGraphicsDrawableDrawable *foreground = mForegroundInfo_ != nil ? mForegroundInfo_->mDrawable_ : nil;
  if (foreground != nil) {
    if (((RepackagedAndroidViewView_ForegroundInfo *) nil_chk(mForegroundInfo_))->mBoundsChanged_) {
      mForegroundInfo_->mBoundsChanged_ = NO;
      RepackagedAndroidGraphicsRect *selfBounds = mForegroundInfo_->mSelfBounds_;
      RepackagedAndroidGraphicsRect *overlayBounds = mForegroundInfo_->mOverlayBounds_;
      
#line 17671
      if (mForegroundInfo_->mInsidePadding_) {
        [((RepackagedAndroidGraphicsRect *) nil_chk(selfBounds)) setWithInt:0 withInt:0 withInt:RepackagedAndroidViewView_getWidth(self) withInt:RepackagedAndroidViewView_getHeight(self)];
      }
      else {
        
#line 17674
        [((RepackagedAndroidGraphicsRect *) nil_chk(selfBounds)) setWithInt:[self getPaddingLeft] withInt:[self getPaddingTop] withInt:
#line 17675
        RepackagedAndroidViewView_getWidth(self) - [self getPaddingRight] withInt:RepackagedAndroidViewView_getHeight(self) - [self getPaddingBottom]];
      }
      
#line 17678
      jint ld = [self getLayoutDirection];
      RepackagedAndroidViewGravity_applyWithInt_withInt_withInt_withRepackagedAndroidGraphicsRect_withRepackagedAndroidGraphicsRect_withInt_(mForegroundInfo_->mGravity_, [foreground getIntrinsicWidth],
#line 17680
      [foreground getIntrinsicHeight], selfBounds, overlayBounds, ld);
      [foreground setBoundsWithRepackagedAndroidGraphicsRect:overlayBounds];
    }
    
#line 17684
    [foreground drawWithRepackagedAndroidGraphicsCanvas:canvas];
  }
}


#line 17705
- (void)setPaddingWithInt:(jint)left
                  withInt:(jint)top
                  withInt:(jint)right
                  withInt:(jint)bottom {
  [self resetResolvedPaddingInternal];
  
#line 17708
  mUserPaddingStart_ = RepackagedAndroidViewView_UNDEFINED_PADDING;
  mUserPaddingEnd_ = RepackagedAndroidViewView_UNDEFINED_PADDING;
  
#line 17711
  mUserPaddingLeftInitial_ = left;
  mUserPaddingRightInitial_ = right;
  
#line 17714
  mLeftPaddingDefined_ = YES;
  mRightPaddingDefined_ = YES;
  
#line 17717
  [self internalSetPaddingWithInt:left withInt:top withInt:right withInt:bottom];
}


#line 17723
- (void)internalSetPaddingWithInt:(jint)left
                          withInt:(jint)top
                          withInt:(jint)right
                          withInt:(jint)bottom {
  mUserPaddingLeft_ = left;
  mUserPaddingRight_ = right;
  mUserPaddingBottom_ = bottom;
  
#line 17728
  jint viewFlags = mViewFlags_;
  jboolean changed = NO;
  
#line 17732
  if ((viewFlags & (RepackagedAndroidViewView_SCROLLBARS_VERTICAL | RepackagedAndroidViewView_SCROLLBARS_HORIZONTAL)) != 0) {
    if ((viewFlags & RepackagedAndroidViewView_SCROLLBARS_VERTICAL) != 0) {
      jint offset = (viewFlags & RepackagedAndroidViewView_SCROLLBARS_INSET_MASK) == 0 ?
#line 17735
      0 : [self getVerticalScrollbarWidth];
      switch (mVerticalScrollbarPosition_) {
        case RepackagedAndroidViewView_SCROLLBAR_POSITION_DEFAULT:
        if ([self isLayoutRtl]) {
          left += offset;
        }
        else {
          
#line 17741
          right += offset;
        }
        break;
        case RepackagedAndroidViewView_SCROLLBAR_POSITION_RIGHT:
        right += offset;
        break;
        case RepackagedAndroidViewView_SCROLLBAR_POSITION_LEFT:
        left += offset;
        break;
      }
    }
    if ((viewFlags & RepackagedAndroidViewView_SCROLLBARS_HORIZONTAL) != 0) {
      bottom += (viewFlags & RepackagedAndroidViewView_SCROLLBARS_INSET_MASK) == 0 ?
#line 17754
      0 : [self getHorizontalScrollbarHeight];
    }
  }
  
#line 17758
  if (mPaddingLeft_ != left) {
    changed = YES;
    mPaddingLeft_ = left;
  }
  if (mPaddingTop_ != top) {
    changed = YES;
    mPaddingTop_ = top;
  }
  if (mPaddingRight_ != right) {
    changed = YES;
    mPaddingRight_ = right;
  }
  if (mPaddingBottom_ != bottom) {
    changed = YES;
    mPaddingBottom_ = bottom;
  }
  
#line 17775
  if (changed) {
    [self requestLayout];
    [self invalidateOutline];
  }
}


#line 17798
- (void)setPaddingRelativeWithInt:(jint)start
                          withInt:(jint)top
                          withInt:(jint)end
                          withInt:(jint)bottom {
  [self resetResolvedPaddingInternal];
  
#line 17801
  mUserPaddingStart_ = start;
  mUserPaddingEnd_ = end;
  mLeftPaddingDefined_ = YES;
  mRightPaddingDefined_ = YES;
  
#line 17806
  switch ([self getLayoutDirection]) {
    case RepackagedAndroidViewView_LAYOUT_DIRECTION_RTL:
    mUserPaddingLeftInitial_ = end;
    mUserPaddingRightInitial_ = start;
    [self internalSetPaddingWithInt:end withInt:top withInt:start withInt:bottom];
    break;
    case RepackagedAndroidViewView_LAYOUT_DIRECTION_LTR:
    default:
    mUserPaddingLeftInitial_ = start;
    mUserPaddingRightInitial_ = end;
    [self internalSetPaddingWithInt:start withInt:top withInt:end withInt:bottom];
  }
}

- (jint)getPaddingTop {
  return mPaddingTop_;
}


#line 17836
- (jint)getPaddingBottom {
  return mPaddingBottom_;
}


#line 17847
- (jint)getPaddingLeft {
  if (![self isPaddingResolved]) {
    [self resolvePadding];
  }
  return mPaddingLeft_;
}


#line 17861
- (jint)getPaddingStart {
  if (![self isPaddingResolved]) {
    [self resolvePadding];
  }
  return ([self getLayoutDirection] == RepackagedAndroidViewView_LAYOUT_DIRECTION_RTL) ?
#line 17866
  mPaddingRight_ : mPaddingLeft_;
}


#line 17876
- (jint)getPaddingRight {
  if (![self isPaddingResolved]) {
    [self resolvePadding];
  }
  return mPaddingRight_;
}


#line 17890
- (jint)getPaddingEnd {
  if (![self isPaddingResolved]) {
    [self resolvePadding];
  }
  return ([self getLayoutDirection] == RepackagedAndroidViewView_LAYOUT_DIRECTION_RTL) ?
#line 17895
  mPaddingLeft_ : mPaddingRight_;
}


#line 17906
- (jboolean)isPaddingRelative {
  return (mUserPaddingStart_ != RepackagedAndroidViewView_UNDEFINED_PADDING || mUserPaddingEnd_ != RepackagedAndroidViewView_UNDEFINED_PADDING);
}

- (RepackagedAndroidGraphicsInsets *)computeOpticalInsets {
  return (mBackground_ == nil) ? RepackagedAndroidGraphicsInsets_get_NONE_() : [mBackground_ getOpticalInsets];
}


#line 17917
- (void)resetPaddingToInitialValues {
  if (RepackagedAndroidViewView_isRtlCompatibilityMode(self)) {
    mPaddingLeft_ = mUserPaddingLeftInitial_;
    mPaddingRight_ = mUserPaddingRightInitial_;
    return;
  }
  if ([self isLayoutRtl]) {
    mPaddingLeft_ = (mUserPaddingEnd_ >= 0) ? mUserPaddingEnd_ : mUserPaddingLeftInitial_;
    mPaddingRight_ = (mUserPaddingStart_ >= 0) ? mUserPaddingStart_ : mUserPaddingRightInitial_;
  }
  else {
    
#line 17927
    mPaddingLeft_ = (mUserPaddingStart_ >= 0) ? mUserPaddingStart_ : mUserPaddingLeftInitial_;
    mPaddingRight_ = (mUserPaddingEnd_ >= 0) ? mUserPaddingEnd_ : mUserPaddingRightInitial_;
  }
}

- (RepackagedAndroidGraphicsInsets *)getOpticalInsets {
  if (mLayoutInsets_ == nil) {
    mLayoutInsets_ = [self computeOpticalInsets];
  }
  return mLayoutInsets_;
}


#line 17952
- (void)setOpticalInsetsWithRepackagedAndroidGraphicsInsets:(RepackagedAndroidGraphicsInsets *)insets {
  mLayoutInsets_ = insets;
}


#line 17964
- (void)setSelectedWithBoolean:(jboolean)selected {
  
#line 17966
  if (((mPrivateFlags_ & RepackagedAndroidViewView_PFLAG_SELECTED) != 0) != selected) {
    mPrivateFlags_ = (mPrivateFlags_ & ~RepackagedAndroidViewView_PFLAG_SELECTED) | (selected ? RepackagedAndroidViewView_PFLAG_SELECTED : 0);
    if (!selected) RepackagedAndroidViewView_resetPressedState(self);
    [self invalidateWithBoolean:YES];
    [self refreshDrawableState];
    [self dispatchSetSelectedWithBoolean:selected];
    if (selected) {
      [self sendAccessibilityEventWithInt:RepackagedAndroidViewAccessibilityAccessibilityEvent_TYPE_VIEW_SELECTED];
    }
    else {
      
#line 17975
      [self notifyViewAccessibilityStateChangedIfNeededWithInt:
#line 17976
      RepackagedAndroidViewAccessibilityAccessibilityEvent_CONTENT_CHANGE_TYPE_UNDEFINED];
    }
  }
}


#line 17988
- (void)dispatchSetSelectedWithBoolean:(jboolean)selected {
}


#line 17997
- (jboolean)isSelected {
  return (mPrivateFlags_ & RepackagedAndroidViewView_PFLAG_SELECTED) != 0;
}


#line 18014
- (void)setActivatedWithBoolean:(jboolean)activated {
  
#line 18016
  if (((mPrivateFlags_ & RepackagedAndroidViewView_PFLAG_ACTIVATED) != 0) != activated) {
    mPrivateFlags_ = (mPrivateFlags_ & ~RepackagedAndroidViewView_PFLAG_ACTIVATED) | (activated ? RepackagedAndroidViewView_PFLAG_ACTIVATED : 0);
    [self invalidateWithBoolean:YES];
    [self refreshDrawableState];
    [self dispatchSetActivatedWithBoolean:activated];
  }
}


#line 18031
- (void)dispatchSetActivatedWithBoolean:(jboolean)activated {
}


#line 18040
- (jboolean)isActivated {
  return (mPrivateFlags_ & RepackagedAndroidViewView_PFLAG_ACTIVATED) != 0;
}


#line 18056
- (RepackagedAndroidViewViewTreeObserver *)getViewTreeObserver {
  if (mAttachInfo_ != nil) {
    return mAttachInfo_->mTreeObserver_;
  }
  if (mFloatingTreeObserver_ == nil) {
    mFloatingTreeObserver_ = new_RepackagedAndroidViewViewTreeObserver_init();
  }
  return mFloatingTreeObserver_;
}


#line 18071
- (RepackagedAndroidViewView *)getRootView {
  if (mAttachInfo_ != nil) {
    RepackagedAndroidViewView *v = mAttachInfo_->mRootView_;
    if (v != nil) {
      return v;
    }
  }
  
#line 18079
  RepackagedAndroidViewView *parent = self;
  
#line 18081
  while (parent->mParent_ != nil && [parent->mParent_ isKindOfClass:[RepackagedAndroidViewView class]]) {
    parent = (RepackagedAndroidViewView *) check_class_cast(parent->mParent_, [RepackagedAndroidViewView class]);
  }
  
#line 18085
  return parent;
}


#line 18096
- (jboolean)toGlobalMotionEventWithRepackagedAndroidViewMotionEvent:(RepackagedAndroidViewMotionEvent *)ev {
  RepackagedAndroidViewView_AttachInfo *info = mAttachInfo_;
  if (info == nil) {
    return NO;
  }
  
#line 18102
  RepackagedAndroidGraphicsMatrix *m = ((RepackagedAndroidViewView_AttachInfo *) nil_chk(info))->mTmpMatrix_;
  [((RepackagedAndroidGraphicsMatrix *) nil_chk(m)) setWithRepackagedAndroidGraphicsMatrix:RepackagedAndroidGraphicsMatrix_get_IDENTITY_MATRIX_()];
  [self transformMatrixToGlobalWithRepackagedAndroidGraphicsMatrix:m];
  [((RepackagedAndroidViewMotionEvent *) nil_chk(ev)) transformWithRepackagedAndroidGraphicsMatrix:m];
  return YES;
}


#line 18117
- (jboolean)toLocalMotionEventWithRepackagedAndroidViewMotionEvent:(RepackagedAndroidViewMotionEvent *)ev {
  RepackagedAndroidViewView_AttachInfo *info = mAttachInfo_;
  if (info == nil) {
    return NO;
  }
  
#line 18123
  RepackagedAndroidGraphicsMatrix *m = ((RepackagedAndroidViewView_AttachInfo *) nil_chk(info))->mTmpMatrix_;
  [((RepackagedAndroidGraphicsMatrix *) nil_chk(m)) setWithRepackagedAndroidGraphicsMatrix:RepackagedAndroidGraphicsMatrix_get_IDENTITY_MATRIX_()];
  [self transformMatrixToLocalWithRepackagedAndroidGraphicsMatrix:m];
  [((RepackagedAndroidViewMotionEvent *) nil_chk(ev)) transformWithRepackagedAndroidGraphicsMatrix:m];
  return YES;
}


#line 18137
- (void)transformMatrixToGlobalWithRepackagedAndroidGraphicsMatrix:(RepackagedAndroidGraphicsMatrix *)m {
  id<RepackagedAndroidViewViewParent> parent = mParent_;
  if ([parent isKindOfClass:[RepackagedAndroidViewView class]]) {
    RepackagedAndroidViewView *vp = (RepackagedAndroidViewView *) check_class_cast(parent, [RepackagedAndroidViewView class]);
    [((RepackagedAndroidViewView *) nil_chk(vp)) transformMatrixToGlobalWithRepackagedAndroidGraphicsMatrix:m];
    [((RepackagedAndroidGraphicsMatrix *) nil_chk(m)) preTranslateWithFloat:-vp->mScrollX_ withFloat:-vp->mScrollY_];
  }
  else
#line 18143
  if ([parent isKindOfClass:[RepackagedAndroidViewViewRootImpl class]]) {
    RepackagedAndroidViewViewRootImpl *vr = (RepackagedAndroidViewViewRootImpl *) check_class_cast(parent, [RepackagedAndroidViewViewRootImpl class]);
    [((RepackagedAndroidViewViewRootImpl *) nil_chk(vr)) transformMatrixToGlobalWithRepackagedAndroidGraphicsMatrix:m];
    [((RepackagedAndroidGraphicsMatrix *) nil_chk(m)) preTranslateWithFloat:0 withFloat:-vr->mCurScrollY_];
  }
  
#line 18149
  [((RepackagedAndroidGraphicsMatrix *) nil_chk(m)) preTranslateWithFloat:mLeft_ withFloat:mTop_];
  
#line 18151
  if (!RepackagedAndroidViewView_hasIdentityMatrix(self)) {
    [m preConcatWithRepackagedAndroidGraphicsMatrix:[self getMatrix]];
  }
}


#line 18163
- (void)transformMatrixToLocalWithRepackagedAndroidGraphicsMatrix:(RepackagedAndroidGraphicsMatrix *)m {
  id<RepackagedAndroidViewViewParent> parent = mParent_;
  if ([parent isKindOfClass:[RepackagedAndroidViewView class]]) {
    RepackagedAndroidViewView *vp = (RepackagedAndroidViewView *) check_class_cast(parent, [RepackagedAndroidViewView class]);
    [((RepackagedAndroidViewView *) nil_chk(vp)) transformMatrixToLocalWithRepackagedAndroidGraphicsMatrix:m];
    [((RepackagedAndroidGraphicsMatrix *) nil_chk(m)) postTranslateWithFloat:vp->mScrollX_ withFloat:vp->mScrollY_];
  }
  else
#line 18169
  if ([parent isKindOfClass:[RepackagedAndroidViewViewRootImpl class]]) {
    RepackagedAndroidViewViewRootImpl *vr = (RepackagedAndroidViewViewRootImpl *) check_class_cast(parent, [RepackagedAndroidViewViewRootImpl class]);
    [((RepackagedAndroidViewViewRootImpl *) nil_chk(vr)) transformMatrixToLocalWithRepackagedAndroidGraphicsMatrix:m];
    [((RepackagedAndroidGraphicsMatrix *) nil_chk(m)) postTranslateWithFloat:0 withFloat:vr->mCurScrollY_];
  }
  
#line 18175
  [((RepackagedAndroidGraphicsMatrix *) nil_chk(m)) postTranslateWithFloat:-mLeft_ withFloat:-mTop_];
  
#line 18177
  if (!RepackagedAndroidViewView_hasIdentityMatrix(self)) {
    [m postConcatWithRepackagedAndroidGraphicsMatrix:RepackagedAndroidViewView_getInverseMatrix(self)];
  }
}


#line 18189
- (IOSIntArray *)getLocationOnScreen {
  IOSIntArray *location = [IOSIntArray newArrayWithLength:2];
  [self getLocationOnScreenWithIntArray:location];
  return location;
}


#line 18202
- (void)getLocationOnScreenWithIntArray:(IOSIntArray *)location {
  [self getLocationInWindowWithIntArray:location];
  
#line 18205
  RepackagedAndroidViewView_AttachInfo *info = mAttachInfo_;
  if (info != nil) {
    *IOSIntArray_GetRef(nil_chk(location), 0) += info->mWindowLeft_;
    *IOSIntArray_GetRef(location, 1) += info->mWindowTop_;
  }
}


#line 18219
- (void)getLocationInWindowWithIntArray:(IOSIntArray *)location {
  if (location == nil || location->size_ < 2) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"location must be an array of two integers");
  }
  
#line 18224
  if (mAttachInfo_ == nil) {
    
#line 18226
    *IOSIntArray_GetRef(nil_chk(location), 0) = *IOSIntArray_GetRef(location, 1) = 0;
    return;
  }
  
#line 18230
  IOSFloatArray *position = ((RepackagedAndroidViewView_AttachInfo *) nil_chk(mAttachInfo_))->mTmpTransformLocation_;
  *IOSFloatArray_GetRef(nil_chk(position), 0) = *IOSFloatArray_GetRef(position, 1) = 0.0f;
  
#line 18233
  if (!RepackagedAndroidViewView_hasIdentityMatrix(self)) {
    [((RepackagedAndroidGraphicsMatrix *) nil_chk([self getMatrix])) mapPointsWithFloatArray:position];
  }
  
#line 18237
  *IOSFloatArray_GetRef(position, 0) += mLeft_;
  *IOSFloatArray_GetRef(position, 1) += mTop_;
  
#line 18240
  id<RepackagedAndroidViewViewParent> viewParent = mParent_;
  while ([viewParent isKindOfClass:[RepackagedAndroidViewView class]]) {
    RepackagedAndroidViewView *view = (RepackagedAndroidViewView *) check_class_cast(viewParent, [RepackagedAndroidViewView class]);
    
#line 18244
    *IOSFloatArray_GetRef(position, 0) -= ((RepackagedAndroidViewView *) nil_chk(view))->mScrollX_;
    *IOSFloatArray_GetRef(position, 1) -= view->mScrollY_;
    
#line 18247
    if (!RepackagedAndroidViewView_hasIdentityMatrix(view)) {
      [((RepackagedAndroidGraphicsMatrix *) nil_chk([view getMatrix])) mapPointsWithFloatArray:position];
    }
    
#line 18251
    *IOSFloatArray_GetRef(position, 0) += view->mLeft_;
    *IOSFloatArray_GetRef(position, 1) += view->mTop_;
    
#line 18254
    viewParent = view->mParent_;
  }
  
#line 18257
  if ([viewParent isKindOfClass:[RepackagedAndroidViewViewRootImpl class]]) {
    
#line 18259
    RepackagedAndroidViewViewRootImpl *vr = (RepackagedAndroidViewViewRootImpl *) check_class_cast(viewParent, [RepackagedAndroidViewViewRootImpl class]);
    *IOSFloatArray_GetRef(position, 1) -= ((RepackagedAndroidViewViewRootImpl *) nil_chk(vr))->mCurScrollY_;
  }
  
#line 18263
  *IOSIntArray_GetRef(nil_chk(location), 0) = J2ObjCFpToInt((IOSFloatArray_Get(position, 0) + 0.5f));
  *IOSIntArray_GetRef(location, 1) = J2ObjCFpToInt((IOSFloatArray_Get(position, 1) + 0.5f));
}


#line 18272
- (RepackagedAndroidViewView *)findViewTraversalWithInt:(jint)id_ {
  if (id_ == mID_) {
    return self;
  }
  return nil;
}


#line 18284
- (RepackagedAndroidViewView *)findViewWithTagTraversalWithId:(id)tag {
  if (tag != nil && [tag isEqual:mTag_]) {
    return self;
  }
  return nil;
}


#line 18297
- (RepackagedAndroidViewView *)findViewByPredicateTraversalWithRepackagedComAndroidInternalUtilPredicate:(id<RepackagedComAndroidInternalUtilPredicate>)predicate
                                                                           withRepackagedAndroidViewView:(RepackagedAndroidViewView *)childToSkip {
  if ([((id<RepackagedComAndroidInternalUtilPredicate>) nil_chk(predicate)) applyWithId:self]) {
    return self;
  }
  return nil;
}


#line 18312
- (RepackagedAndroidViewView *)findViewByIdWithInt:(jint)id_ {
  if (id_ < 0) {
    return nil;
  }
  return [self findViewTraversalWithInt:id_];
}


#line 18325
- (RepackagedAndroidViewView *)findViewByAccessibilityIdWithInt:(jint)accessibilityId {
  if (accessibilityId < 0) {
    return nil;
  }
  RepackagedAndroidViewView *view = [self findViewByAccessibilityIdTraversalWithInt:accessibilityId];
  if (view != nil) {
    return [view includeForAccessibility] ? view : nil;
  }
  return nil;
}


#line 18351
- (RepackagedAndroidViewView *)findViewByAccessibilityIdTraversalWithInt:(jint)accessibilityId {
  if ([self getAccessibilityViewId] == accessibilityId) {
    return self;
  }
  return nil;
}


#line 18365
- (RepackagedAndroidViewView *)findViewWithTagWithId:(id)tag {
  if (tag == nil) {
    return nil;
  }
  return [self findViewWithTagTraversalWithId:tag];
}


#line 18380
- (RepackagedAndroidViewView *)findViewByPredicateWithRepackagedComAndroidInternalUtilPredicate:(id<RepackagedComAndroidInternalUtilPredicate>)predicate {
  return [self findViewByPredicateTraversalWithRepackagedComAndroidInternalUtilPredicate:predicate withRepackagedAndroidViewView:nil];
}


#line 18400
- (RepackagedAndroidViewView *)findViewByPredicateInsideOutWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)start
                                           withRepackagedComAndroidInternalUtilPredicate:(id<RepackagedComAndroidInternalUtilPredicate>)predicate {
  return RepackagedAndroidViewView_findViewByPredicateInsideOutWithRepackagedAndroidViewView_withRepackagedComAndroidInternalUtilPredicate_(self, start, predicate);
}


#line 18431
- (void)setIdWithInt:(jint)id_ {
  mID_ = id_;
  if (mID_ == RepackagedAndroidViewView_NO_ID && mLabelForId_ != RepackagedAndroidViewView_NO_ID) {
    mID_ = RepackagedAndroidViewView_generateViewId();
  }
}


#line 18444
- (void)setIsRootNamespaceWithBoolean:(jboolean)isRoot {
  if (isRoot) {
    mPrivateFlags_ |= RepackagedAndroidViewView_PFLAG_IS_ROOT_NAMESPACE;
  }
  else {
    
#line 18448
    mPrivateFlags_ &= ~RepackagedAndroidViewView_PFLAG_IS_ROOT_NAMESPACE;
  }
}


#line 18457
- (jboolean)isRootNamespace {
  return (mPrivateFlags_ & RepackagedAndroidViewView_PFLAG_IS_ROOT_NAMESPACE) != 0;
}


#line 18473
- (jint)getId {
  return mID_;
}


#line 18487
- (id)getTag {
  return mTag_;
}


#line 18502
- (void)setTagWithId:(id)tag {
  mTag_ = tag;
}


#line 18517
- (id)getTagWithInt:(jint)key {
  if (mKeyedTags_ != nil) return [mKeyedTags_ getWithInt:key];
  return nil;
}


#line 18543
- (void)setTagWithInt:(jint)key
               withId:(id)tag {
  
#line 18546
  if ((URShift32(key, 24)) < 2) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"The key must be an application-specific resource id.");
  }
  
#line 18551
  RepackagedAndroidViewView_setKeyedTagWithInt_withId_(self, key, tag);
}


#line 18560
- (void)setTagInternalWithInt:(jint)key
                       withId:(id)tag {
  if ((URShift32(key, 24)) != (jint) 0x1) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"The key must be a framework-specific resource id.");
  }
  
#line 18566
  RepackagedAndroidViewView_setKeyedTagWithInt_withId_(self, key, tag);
}


#line 18569
- (void)setKeyedTagWithInt:(jint)key
                    withId:(id)tag {
  RepackagedAndroidViewView_setKeyedTagWithInt_withId_(self, key, tag);
}


#line 18583
- (void)debug {
  [self debugWithInt:0];
}


#line 18596
- (void)debugWithInt:(jint)depth {
  NSString *output = RepackagedAndroidViewView_debugIndentWithInt_(depth - 1);
  
#line 18599
  output = JreStrcat("$$", output, JreStrcat("$@", @"+ ", self));
  jint id_ = [self getId];
  if (id_ != -1) {
    output = JreStrcat("$$", output, JreStrcat("$IC", @" (id=", id_, ')'));
  }
  id tag = [self getTag];
  if (tag != nil) {
    output = JreStrcat("$$", output, JreStrcat("$@C", @" (tag=", tag, ')'));
  }
  RepackagedAndroidUtilLog_dWithNSString_withNSString_(RepackagedAndroidViewView_VIEW_LOG_TAG_, output);
  
#line 18610
  if ((mPrivateFlags_ & RepackagedAndroidViewView_PFLAG_FOCUSED) != 0) {
    output = JreStrcat("$$", RepackagedAndroidViewView_debugIndentWithInt_(depth), @" FOCUSED");
    RepackagedAndroidUtilLog_dWithNSString_withNSString_(RepackagedAndroidViewView_VIEW_LOG_TAG_, output);
  }
  
#line 18615
  output = RepackagedAndroidViewView_debugIndentWithInt_(depth);
  output = JreStrcat("$$", output, JreStrcat("$I$I$I$I$I$I$", @"frame={", mLeft_, @", ", mTop_, @", ", mRight_, @", ",
#line 18617
  mBottom_, @"} scroll={", mScrollX_, @", ", mScrollY_, @"} "));
  
#line 18619
  RepackagedAndroidUtilLog_dWithNSString_withNSString_(RepackagedAndroidViewView_VIEW_LOG_TAG_, output);
  
#line 18621
  if (mPaddingLeft_ != 0 || mPaddingTop_ != 0 || mPaddingRight_ != 0 ||
#line 18622
  mPaddingBottom_ != 0) {
    output = RepackagedAndroidViewView_debugIndentWithInt_(depth);
    output = JreStrcat("$$", output, JreStrcat("$I$I$I$IC", @"padding={", mPaddingLeft_, @", ", mPaddingTop_, @", ",
#line 18625
    mPaddingRight_, @", ", mPaddingBottom_, '}'));
    RepackagedAndroidUtilLog_dWithNSString_withNSString_(RepackagedAndroidViewView_VIEW_LOG_TAG_, output);
  }
  
#line 18629
  output = RepackagedAndroidViewView_debugIndentWithInt_(depth);
  output = JreStrcat("$$", output, JreStrcat("$I$I", @"mMeasureWidth=", mMeasuredWidth_, @" mMeasureHeight=",
#line 18631
  mMeasuredHeight_));
  RepackagedAndroidUtilLog_dWithNSString_withNSString_(RepackagedAndroidViewView_VIEW_LOG_TAG_, output);
  
#line 18634
  output = RepackagedAndroidViewView_debugIndentWithInt_(depth);
  if (mLayoutParams_ == nil) {
    output = JreStrcat("$$", output, @"BAD! no layout params");
  }
  else {
    
#line 18638
    output = [mLayoutParams_ debugWithNSString:output];
  }
  RepackagedAndroidUtilLog_dWithNSString_withNSString_(RepackagedAndroidViewView_VIEW_LOG_TAG_, output);
  
#line 18642
  output = RepackagedAndroidViewView_debugIndentWithInt_(depth);
  output = JreStrcat("$$", output, @"flags={");
  output = JreStrcat("$$", output, RepackagedAndroidViewView_printFlagsWithInt_(mViewFlags_));
  output = JreStrcat("$C", output, '}');
  RepackagedAndroidUtilLog_dWithNSString_withNSString_(RepackagedAndroidViewView_VIEW_LOG_TAG_, output);
  
#line 18648
  output = RepackagedAndroidViewView_debugIndentWithInt_(depth);
  output = JreStrcat("$$", output, @"privateFlags={");
  output = JreStrcat("$$", output, RepackagedAndroidViewView_printPrivateFlagsWithInt_(mPrivateFlags_));
  output = JreStrcat("$C", output, '}');
  RepackagedAndroidUtilLog_dWithNSString_withNSString_(RepackagedAndroidViewView_VIEW_LOG_TAG_, output);
}


#line 18663
+ (NSString *)debugIndentWithInt:(jint)depth {
  return RepackagedAndroidViewView_debugIndentWithInt_(depth);
}


#line 18680
- (jint)getBaseline {
  return -1;
}


#line 18691
- (jboolean)isInLayout {
  RepackagedAndroidViewViewRootImpl *viewRoot = [self getViewRootImpl];
  return (viewRoot != nil && [viewRoot isInLayout]);
}


#line 18708
- (void)requestLayout {
  if (mMeasureCache_ != nil) [mMeasureCache_ clear];
  
#line 18711
  if (mAttachInfo_ != nil && mAttachInfo_->mViewRequestingLayout_ == nil) {
    
#line 18714
    RepackagedAndroidViewViewRootImpl *viewRoot = [self getViewRootImpl];
    if (viewRoot != nil && [viewRoot isInLayout]) {
      if (![viewRoot requestLayoutDuringLayoutWithRepackagedAndroidViewView:self]) {
        return;
      }
    }
    mAttachInfo_->mViewRequestingLayout_ = self;
  }
  
#line 18723
  mPrivateFlags_ |= RepackagedAndroidViewView_PFLAG_FORCE_LAYOUT;
  mPrivateFlags_ |= RepackagedAndroidViewView_PFLAG_INVALIDATED;
  
#line 18726
  if (mParent_ != nil && ![mParent_ isLayoutRequested]) {
    [mParent_ requestLayout];
  }
  if (mAttachInfo_ != nil && mAttachInfo_->mViewRequestingLayout_ == self) {
    mAttachInfo_->mViewRequestingLayout_ = nil;
  }
}


#line 18739
- (void)forceLayout {
  if (mMeasureCache_ != nil) [mMeasureCache_ clear];
  
#line 18742
  mPrivateFlags_ |= RepackagedAndroidViewView_PFLAG_FORCE_LAYOUT;
  mPrivateFlags_ |= RepackagedAndroidViewView_PFLAG_INVALIDATED;
}


#line 18766
- (void)measureWithInt:(jint)widthMeasureSpec
               withInt:(jint)heightMeasureSpec {
  jboolean optical = RepackagedAndroidViewView_isLayoutModeOpticalWithId_(self);
  if (optical != RepackagedAndroidViewView_isLayoutModeOpticalWithId_(mParent_)) {
    RepackagedAndroidGraphicsInsets *insets = [self getOpticalInsets];
    jint oWidth = ((RepackagedAndroidGraphicsInsets *) nil_chk(insets))->left_ + insets->right_;
    jint oHeight = insets->top_ + insets->bottom_;
    widthMeasureSpec = RepackagedAndroidViewView_MeasureSpec_adjustWithInt_withInt_(widthMeasureSpec, optical ? -oWidth : oWidth);
    heightMeasureSpec = RepackagedAndroidViewView_MeasureSpec_adjustWithInt_withInt_(heightMeasureSpec, optical ? -oHeight : oHeight);
  }
  
#line 18777
  jlong key = (LShift64((jlong) widthMeasureSpec, 32)) | ((jlong) heightMeasureSpec & (jlong) 0xffffffffLL);
  if (mMeasureCache_ == nil) mMeasureCache_ = new_RepackagedAndroidUtilLongSparseLongArray_initWithInt_(2);
  
#line 18780
  if ((mPrivateFlags_ & RepackagedAndroidViewView_PFLAG_FORCE_LAYOUT) == RepackagedAndroidViewView_PFLAG_FORCE_LAYOUT ||
#line 18781
  widthMeasureSpec != mOldWidthMeasureSpec_ ||
#line 18782
  heightMeasureSpec != mOldHeightMeasureSpec_) {
    
#line 18785
    mPrivateFlags_ &= ~RepackagedAndroidViewView_PFLAG_MEASURED_DIMENSION_SET;
    
#line 18787
    [self resolveRtlPropertiesIfNeeded];
    
#line 18789
    jint cacheIndex = (mPrivateFlags_ & RepackagedAndroidViewView_PFLAG_FORCE_LAYOUT) == RepackagedAndroidViewView_PFLAG_FORCE_LAYOUT ? -1 :
#line 18790
    [((RepackagedAndroidUtilLongSparseLongArray *) nil_chk(mMeasureCache_)) indexOfKeyWithLong:key];
    if (cacheIndex < 0 || RepackagedAndroidViewView_sIgnoreMeasureCache_) {
      
#line 18793
      [self onMeasureWithInt:widthMeasureSpec withInt:heightMeasureSpec];
      mPrivateFlags3_ &= ~RepackagedAndroidViewView_PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT;
    }
    else {
      
#line 18796
      jlong value = [((RepackagedAndroidUtilLongSparseLongArray *) nil_chk(mMeasureCache_)) valueAtWithInt:cacheIndex];
      
#line 18798
      RepackagedAndroidViewView_setMeasuredDimensionRawWithInt_withInt_(self, (jint) (RShift64(value, 32)), (jint) value);
      mPrivateFlags3_ |= RepackagedAndroidViewView_PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT;
    }
    
#line 18804
    if ((mPrivateFlags_ & RepackagedAndroidViewView_PFLAG_MEASURED_DIMENSION_SET) != RepackagedAndroidViewView_PFLAG_MEASURED_DIMENSION_SET) {
      @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$I$$$", @"View with id ", [self getId], @": ",
#line 18806
      [[self getClass] getName], @"#onMeasure() did not set the measured dimension by calling setMeasuredDimension()"));
    }
    
#line 18811
    mPrivateFlags_ |= RepackagedAndroidViewView_PFLAG_LAYOUT_REQUIRED;
  }
  
#line 18814
  mOldWidthMeasureSpec_ = widthMeasureSpec;
  mOldHeightMeasureSpec_ = heightMeasureSpec;
  
#line 18817
  [((RepackagedAndroidUtilLongSparseLongArray *) nil_chk(mMeasureCache_)) putWithLong:key withLong:(LShift64(((jlong) mMeasuredWidth_), 32)) | (
#line 18818
  (jlong) mMeasuredHeight_ & (jlong) 0xffffffffLL)];
}


#line 18867
- (void)onMeasureWithInt:(jint)widthMeasureSpec
                 withInt:(jint)heightMeasureSpec {
  RepackagedAndroidViewView_setMeasuredDimensionWithInt_withInt_(self, RepackagedAndroidViewView_getDefaultSizeWithInt_withInt_([self getSuggestedMinimumWidth], widthMeasureSpec), RepackagedAndroidViewView_getDefaultSizeWithInt_withInt_(
#line 18869
  [self getSuggestedMinimumHeight], heightMeasureSpec));
}


#line 18884
- (void)setMeasuredDimensionWithInt:(jint)measuredWidth
                            withInt:(jint)measuredHeight {
  RepackagedAndroidViewView_setMeasuredDimensionWithInt_withInt_(self, measuredWidth, measuredHeight);
}


#line 18909
- (void)setMeasuredDimensionRawWithInt:(jint)measuredWidth
                               withInt:(jint)measuredHeight {
  RepackagedAndroidViewView_setMeasuredDimensionRawWithInt_withInt_(self, measuredWidth, measuredHeight);
}


#line 18924
+ (jint)combineMeasuredStatesWithInt:(jint)curState
                             withInt:(jint)newState {
  return RepackagedAndroidViewView_combineMeasuredStatesWithInt_withInt_(curState, newState);
}


#line 18932
+ (jint)resolveSizeWithInt:(jint)size
                   withInt:(jint)measureSpec {
  return RepackagedAndroidViewView_resolveSizeWithInt_withInt_(size, measureSpec);
}


#line 18952
+ (jint)resolveSizeAndStateWithInt:(jint)size
                           withInt:(jint)measureSpec
                           withInt:(jint)childMeasuredState {
  return RepackagedAndroidViewView_resolveSizeAndStateWithInt_withInt_withInt_(size, measureSpec, childMeasuredState);
}


#line 18983
+ (jint)getDefaultSizeWithInt:(jint)size
                      withInt:(jint)measureSpec {
  return RepackagedAndroidViewView_getDefaultSizeWithInt_withInt_(size, measureSpec);
}


#line 19011
- (jint)getSuggestedMinimumHeight {
  return (mBackground_ == nil) ? mMinHeight_ : JavaLangMath_maxWithInt_withInt_(mMinHeight_, [mBackground_ getMinimumHeight]);
}


#line 19027
- (jint)getSuggestedMinimumWidth {
  return (mBackground_ == nil) ? mMinWidth_ : JavaLangMath_maxWithInt_withInt_(mMinWidth_, [mBackground_ getMinimumWidth]);
}


#line 19040
- (jint)getMinimumHeight {
  return mMinHeight_;
}


#line 19055
- (void)setMinimumHeightWithInt:(jint)minHeight {
  mMinHeight_ = minHeight;
  [self requestLayout];
}


#line 19069
- (jint)getMinimumWidth {
  return mMinWidth_;
}


#line 19084
- (void)setMinimumWidthWithInt:(jint)minWidth {
  mMinWidth_ = minWidth;
  [self requestLayout];
}


#line 19096
- (id<RepackagedAndroidViewAnimationAnimation>)getAnimation {
  return mCurrentAnimation_;
}


#line 19105
- (void)startAnimationWithRepackagedAndroidViewAnimationAnimation:(id<RepackagedAndroidViewAnimationAnimation>)animation {
  [((id<RepackagedAndroidViewAnimationAnimation>) nil_chk(animation)) setStartTimeWithInt:RepackagedAndroidViewAnimationAnimation_START_ON_FIRST_FRAME];
  [self setAnimationWithRepackagedAndroidViewAnimationAnimation:animation];
  [self invalidateParentCaches];
  [self invalidateWithBoolean:YES];
}


#line 19115
- (void)clearAnimation {
  if (mCurrentAnimation_ != nil) {
    [mCurrentAnimation_ detach];
  }
  mCurrentAnimation_ = nil;
  [self invalidateParentIfNeeded];
}


#line 19136
- (void)setAnimationWithRepackagedAndroidViewAnimationAnimation:(id<RepackagedAndroidViewAnimationAnimation>)animation {
  mCurrentAnimation_ = animation;
  
#line 19139
  if (animation != nil) {
    
#line 19143
    if (mAttachInfo_ != nil && mAttachInfo_->mDisplayState_ == RepackagedAndroidViewDisplay_STATE_OFF &&
#line 19144
    [animation getStartTime] == RepackagedAndroidViewAnimationAnimation_START_ON_FIRST_FRAME) {
      [animation setStartTimeWithInt:RepackagedAndroidViewAnimationAnimationUtils_currentAnimationTimeMillis()];
    }
    [animation reset];
  }
}


#line 19160
- (void)onAnimationStart {
  mPrivateFlags_ |= RepackagedAndroidViewView_PFLAG_ANIMATION_STARTED;
}


#line 19173
- (void)onAnimationEnd {
  mPrivateFlags_ &= ~RepackagedAndroidViewView_PFLAG_ANIMATION_STARTED;
}


#line 19188
- (jboolean)onSetAlphaWithInt:(jint)alpha {
  return NO;
}


#line 19207
- (jboolean)gatherTransparentRegionWithRepackagedAndroidGraphicsRegion:(RepackagedAndroidGraphicsRegion *)region {
  RepackagedAndroidViewView_AttachInfo *attachInfo = mAttachInfo_;
  if (region != nil && attachInfo != nil) {
    jint pflags = mPrivateFlags_;
    if ((pflags & RepackagedAndroidViewView_PFLAG_SKIP_DRAW) == 0) {
      
#line 19214
      IOSIntArray *location = attachInfo->mTransparentLocation_;
      [self getLocationInWindowWithIntArray:location];
      [region opWithInt:IOSIntArray_Get(nil_chk(location), 0) withInt:IOSIntArray_Get(location, 1) withInt:IOSIntArray_Get(location, 0) + mRight_ - mLeft_ withInt:
#line 19217
      IOSIntArray_Get(location, 1) + mBottom_ - mTop_ withRepackagedAndroidGraphicsRegion_OpEnum:RepackagedAndroidGraphicsRegion_OpEnum_get_DIFFERENCE()];
    }
    else {
      
#line 19219
      if (mBackground_ != nil && [mBackground_ getOpacity] != RepackagedAndroidGraphicsPixelFormat_get_TRANSPARENT_()) {
        
#line 19222
        [self applyDrawableToTransparentRegionWithRepackagedAndroidGraphicsDrawableDrawable:mBackground_ withRepackagedAndroidGraphicsRegion:region];
      }
      if (mForegroundInfo_ != nil && mForegroundInfo_->mDrawable_ != nil &&
#line 19225
      [mForegroundInfo_->mDrawable_ getOpacity] != RepackagedAndroidGraphicsPixelFormat_get_TRANSPARENT_()) {
        
#line 19227
        [self applyDrawableToTransparentRegionWithRepackagedAndroidGraphicsDrawableDrawable:mForegroundInfo_->mDrawable_ withRepackagedAndroidGraphicsRegion:region];
      }
    }
  }
  return YES;
}


#line 19246
- (void)playSoundEffectWithInt:(jint)soundConstant {
  if (mAttachInfo_ == nil || mAttachInfo_->mRootCallbacks_ == nil || ![self isSoundEffectsEnabled]) {
    return;
  }
  [((id<RepackagedAndroidViewView_AttachInfo_Callbacks>) nil_chk(((RepackagedAndroidViewView_AttachInfo *) nil_chk(mAttachInfo_))->mRootCallbacks_)) playSoundEffectWithInt:soundConstant];
}


#line 19268
- (jboolean)performHapticFeedbackWithInt:(jint)feedbackConstant {
  return [self performHapticFeedbackWithInt:feedbackConstant withInt:0];
}


#line 19281
- (jboolean)performHapticFeedbackWithInt:(jint)feedbackConstant
                                 withInt:(jint)flags {
  if (mAttachInfo_ == nil) {
    return NO;
  }
  
#line 19286
  if ((flags & RepackagedAndroidViewHapticFeedbackConstants_FLAG_IGNORE_VIEW_SETTING) == 0 &&
#line 19287
  ![self isHapticFeedbackEnabled]) {
    return NO;
  }
  return [((id<RepackagedAndroidViewView_AttachInfo_Callbacks>) nil_chk(((RepackagedAndroidViewView_AttachInfo *) nil_chk(mAttachInfo_))->mRootCallbacks_)) performHapticFeedbackWithInt:feedbackConstant withBoolean:
#line 19291
  (flags & RepackagedAndroidViewHapticFeedbackConstants_FLAG_IGNORE_GLOBAL_SETTING) != 0];
}


#line 19340
- (void)setSystemUiVisibilityWithInt:(jint)visibility {
  if (visibility != mSystemUiVisibility_) {
    mSystemUiVisibility_ = visibility;
    if (mParent_ != nil && mAttachInfo_ != nil && !mAttachInfo_->mRecomputeGlobalAttributes_) {
      [mParent_ recomputeViewAttributesWithRepackagedAndroidViewView:self];
    }
  }
}


#line 19357
- (jint)getSystemUiVisibility {
  return mSystemUiVisibility_;
}


#line 19367
- (jint)getWindowSystemUiVisibility {
  return mAttachInfo_ != nil ? mAttachInfo_->mSystemUiVisibility_ : 0;
}


#line 19379
- (void)onWindowSystemUiVisibilityChangedWithInt:(jint)visible {
}


#line 19386
- (void)dispatchWindowSystemUiVisiblityChangedWithInt:(jint)visible {
  [self onWindowSystemUiVisibilityChangedWithInt:visible];
}


#line 19394
- (void)setOnSystemUiVisibilityChangeListenerWithRepackagedAndroidViewView_OnSystemUiVisibilityChangeListener:(id<RepackagedAndroidViewView_OnSystemUiVisibilityChangeListener>)l {
  ((RepackagedAndroidViewView_ListenerInfo *) nil_chk([self getListenerInfo]))->mOnSystemUiVisibilityChangeListener_ = l;
  if (mParent_ != nil && mAttachInfo_ != nil && !mAttachInfo_->mRecomputeGlobalAttributes_) {
    [mParent_ recomputeViewAttributesWithRepackagedAndroidViewView:self];
  }
}


#line 19405
- (void)dispatchSystemUiVisibilityChangedWithInt:(jint)visibility {
  RepackagedAndroidViewView_ListenerInfo *li = mListenerInfo_;
  if (li != nil && li->mOnSystemUiVisibilityChangeListener_ != nil) {
    [li->mOnSystemUiVisibilityChangeListener_ onSystemUiVisibilityChangeWithInt:
#line 19409
    visibility & RepackagedAndroidViewView_PUBLIC_STATUS_BAR_VISIBILITY_MASK];
  }
}


#line 19413
- (jboolean)updateLocalSystemUiVisibilityWithInt:(jint)localValue
                                         withInt:(jint)localChanges {
  jint val = (mSystemUiVisibility_ & ~localChanges) | (localValue & localChanges);
  if (val != mSystemUiVisibility_) {
    [self setSystemUiVisibilityWithInt:val];
    return YES;
  }
  return NO;
}

- (void)setDisabledSystemUiVisibilityWithInt:(jint)flags {
  if (mAttachInfo_ != nil) {
    if (mAttachInfo_->mDisabledSystemUiVisibility_ != flags) {
      mAttachInfo_->mDisabledSystemUiVisibility_ = flags;
      if (mParent_ != nil) {
        [mParent_ recomputeViewAttributesWithRepackagedAndroidViewView:self];
      }
    }
  }
}


#line 19588
- (jboolean)startDragWithRepackagedAndroidContentClipData:(id<RepackagedAndroidContentClipData>)data
          withRepackagedAndroidViewView_DragShadowBuilder:(RepackagedAndroidViewView_DragShadowBuilder *)shadowBuilder
                                                   withId:(id)myLocalState
                                                  withInt:(jint)flags {
  
#line 19593
  jboolean okay = NO;
  
#line 19595
  RepackagedAndroidGraphicsPoint *shadowSize = new_RepackagedAndroidGraphicsPoint_init();
  RepackagedAndroidGraphicsPoint *shadowTouchPoint = new_RepackagedAndroidGraphicsPoint_init();
  [((RepackagedAndroidViewView_DragShadowBuilder *) nil_chk(shadowBuilder)) onProvideShadowMetricsWithRepackagedAndroidGraphicsPoint:shadowSize withRepackagedAndroidGraphicsPoint:shadowTouchPoint];
  
#line 19599
  if ((shadowSize->x_ < 0) || (shadowSize->y_ < 0) ||
#line 19600
  (shadowTouchPoint->x_ < 0) || (shadowTouchPoint->y_ < 0)) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"Drag shadow dimensions must not be negative");
  }
  
#line 19608
  RepackagedAndroidViewSurface *surface = new_RepackagedAndroidViewSurface_init();
  @try {
    id<RepackagedAndroidOsIBinder> token = [((id<RepackagedAndroidViewIWindowSession>) nil_chk(((RepackagedAndroidViewView_AttachInfo *) nil_chk(mAttachInfo_))->mSession_)) prepareDragWithRepackagedAndroidViewIWindow:mAttachInfo_->mWindow_ withInt:
#line 19611
    flags withInt:shadowSize->x_ withInt:shadowSize->y_ withRepackagedAndroidViewSurface:surface];
    
#line 19614
    if (token != nil) {
      RepackagedAndroidGraphicsCanvas *canvas = [surface lockCanvasWithId:nil];
      @try {
        [((RepackagedAndroidGraphicsCanvas *) nil_chk(canvas)) drawColorWithInt:0 withRepackagedAndroidGraphicsPorterDuff_ModeEnum:RepackagedAndroidGraphicsPorterDuff_ModeEnum_get_CLEAR()];
        [shadowBuilder onDrawShadowWithRepackagedAndroidGraphicsCanvas:canvas];
      }
      @finally {
        
#line 19620
        [surface unlockCanvasAndPostWithRepackagedAndroidGraphicsCanvas:canvas];
      }
      
#line 19623
      RepackagedAndroidViewViewRootImpl *root = [self getViewRootImpl];
      
#line 19626
      [((RepackagedAndroidViewViewRootImpl *) nil_chk(root)) setLocalDragStateWithId:myLocalState];
      
#line 19629
      [root getLastTouchPointWithRepackagedAndroidGraphicsPoint:shadowSize];
      
#line 19631
      okay = [mAttachInfo_->mSession_ performDragWithRepackagedAndroidViewIWindow:mAttachInfo_->mWindow_ withRepackagedAndroidOsIBinder:token withInt:
#line 19632
      shadowSize->x_ withInt:shadowSize->y_ withInt:
#line 19633
      shadowTouchPoint->x_ withInt:shadowTouchPoint->y_ withRepackagedAndroidContentClipData:data];
      
#line 19638
      [surface release__];
    }
  }
  @catch (
#line 19640
  JavaLangException *e) {
    RepackagedAndroidUtilLog_eWithNSString_withNSString_withJavaLangThrowable_(RepackagedAndroidViewView_VIEW_LOG_TAG_, @"Unable to initiate drag", e);
    [surface destroy];
  }
  
#line 19645
  return okay;
}


#line 19672
- (jboolean)onDragEventWithRepackagedAndroidViewDragEvent:(RepackagedAndroidViewDragEvent *)event {
  return NO;
}


#line 19692
- (jboolean)dispatchDragEventWithRepackagedAndroidViewDragEvent:(RepackagedAndroidViewDragEvent *)event {
  RepackagedAndroidViewView_ListenerInfo *li = mListenerInfo_;
  
#line 19695
  if (li != nil && li->mOnDragListener_ != nil && (mViewFlags_ & RepackagedAndroidViewView_ENABLED_MASK) == RepackagedAndroidViewView_ENABLED &&
#line 19696
  [li->mOnDragListener_ onDragWithRepackagedAndroidViewView:self withRepackagedAndroidViewDragEvent:event]) {
    return YES;
  }
  return [self onDragEventWithRepackagedAndroidViewDragEvent:event];
}


#line 19702
- (jboolean)canAcceptDrag {
  return (mPrivateFlags2_ & RepackagedAndroidViewView_PFLAG2_DRAG_CAN_ACCEPT) != 0;
}


#line 19711
- (void)onCloseSystemDialogsWithNSString:(NSString *)reason {
}


#line 19729
- (void)applyDrawableToTransparentRegionWithRepackagedAndroidGraphicsDrawableDrawable:(RepackagedAndroidGraphicsDrawableDrawable *)dr
                                                  withRepackagedAndroidGraphicsRegion:(RepackagedAndroidGraphicsRegion *)region {
  
#line 19733
  RepackagedAndroidGraphicsRegion *r = [((RepackagedAndroidGraphicsDrawableDrawable *) nil_chk(dr)) getTransparentRegion];
  RepackagedAndroidGraphicsRect *db = [dr getBounds];
  RepackagedAndroidViewView_AttachInfo *attachInfo = mAttachInfo_;
  if (r != nil && attachInfo != nil) {
    jint w = RepackagedAndroidViewView_getRight(self) - RepackagedAndroidViewView_getLeft(self);
    jint h = RepackagedAndroidViewView_getBottom(self) - RepackagedAndroidViewView_getTop(self);
    if (((RepackagedAndroidGraphicsRect *) nil_chk(db))->left_ > 0) {
      
#line 19741
      [r opWithInt:0 withInt:0 withInt:db->left_ withInt:h withRepackagedAndroidGraphicsRegion_OpEnum:RepackagedAndroidGraphicsRegion_OpEnum_get_UNION()];
    }
    if (db->right_ < w) {
      
#line 19745
      [r opWithInt:db->right_ withInt:0 withInt:w withInt:h withRepackagedAndroidGraphicsRegion_OpEnum:RepackagedAndroidGraphicsRegion_OpEnum_get_UNION()];
    }
    if (db->top_ > 0) {
      
#line 19749
      [r opWithInt:0 withInt:0 withInt:w withInt:db->top_ withRepackagedAndroidGraphicsRegion_OpEnum:RepackagedAndroidGraphicsRegion_OpEnum_get_UNION()];
    }
    if (db->bottom_ < h) {
      
#line 19753
      [r opWithInt:0 withInt:db->bottom_ withInt:w withInt:h withRepackagedAndroidGraphicsRegion_OpEnum:RepackagedAndroidGraphicsRegion_OpEnum_get_UNION()];
    }
    IOSIntArray *location = attachInfo->mTransparentLocation_;
    [self getLocationInWindowWithIntArray:location];
    [r translateWithInt:IOSIntArray_Get(nil_chk(location), 0) withInt:IOSIntArray_Get(location, 1)];
    [((RepackagedAndroidGraphicsRegion *) nil_chk(region)) opWithRepackagedAndroidGraphicsRegion:r withRepackagedAndroidGraphicsRegion_OpEnum:RepackagedAndroidGraphicsRegion_OpEnum_get_INTERSECT()];
  }
  else {
    
#line 19760
    [((RepackagedAndroidGraphicsRegion *) nil_chk(region)) opWithRepackagedAndroidGraphicsRect:db withRepackagedAndroidGraphicsRegion_OpEnum:RepackagedAndroidGraphicsRegion_OpEnum_get_DIFFERENCE()];
  }
}


#line 19764
- (void)checkForLongClickWithInt:(jint)delayOffset {
  RepackagedAndroidViewView_checkForLongClickWithInt_(self, delayOffset);
}


#line 19787
+ (RepackagedAndroidViewView *)inflateWithRepackagedAndroidContentContext:(id<RepackagedAndroidContentContext>)context
                                                                  withInt:(jint)resource
                                       withRepackagedAndroidViewViewGroup:(RepackagedAndroidViewViewGroup *)root {
  return RepackagedAndroidViewView_inflateWithRepackagedAndroidContentContext_withInt_withRepackagedAndroidViewViewGroup_(context, resource, root);
}


#line 19815
- (jboolean)overScrollByWithInt:(jint)deltaX
                        withInt:(jint)deltaY
                        withInt:(jint)scrollX
                        withInt:(jint)scrollY
                        withInt:(jint)scrollRangeX
                        withInt:(jint)scrollRangeY
                        withInt:(jint)maxOverScrollX
                        withInt:(jint)maxOverScrollY
                    withBoolean:(jboolean)isTouchEvent {
  
#line 19820
  jint overScrollMode = mOverScrollMode_;
  jboolean canScrollHorizontal =
#line 19822
  [self computeHorizontalScrollRange] > [self computeHorizontalScrollExtent];
  jboolean canScrollVertical =
#line 19824
  [self computeVerticalScrollRange] > [self computeVerticalScrollExtent];
  jboolean overScrollHorizontal = overScrollMode == RepackagedAndroidViewView_OVER_SCROLL_ALWAYS ||
#line 19826
  (overScrollMode == RepackagedAndroidViewView_OVER_SCROLL_IF_CONTENT_SCROLLS && canScrollHorizontal);
  jboolean overScrollVertical = overScrollMode == RepackagedAndroidViewView_OVER_SCROLL_ALWAYS ||
#line 19828
  (overScrollMode == RepackagedAndroidViewView_OVER_SCROLL_IF_CONTENT_SCROLLS && canScrollVertical);
  
#line 19830
  jint newScrollX = scrollX + deltaX;
  if (!overScrollHorizontal) {
    maxOverScrollX = 0;
  }
  
#line 19835
  jint newScrollY = scrollY + deltaY;
  if (!overScrollVertical) {
    maxOverScrollY = 0;
  }
  
#line 19841
  jint left = -maxOverScrollX;
  jint right = maxOverScrollX + scrollRangeX;
  jint top = -maxOverScrollY;
  jint bottom = maxOverScrollY + scrollRangeY;
  
#line 19846
  jboolean clampedX = NO;
  if (newScrollX > right) {
    newScrollX = right;
    clampedX = YES;
  }
  else
#line 19850
  if (newScrollX < left) {
    newScrollX = left;
    clampedX = YES;
  }
  
#line 19855
  jboolean clampedY = NO;
  if (newScrollY > bottom) {
    newScrollY = bottom;
    clampedY = YES;
  }
  else
#line 19859
  if (newScrollY < top) {
    newScrollY = top;
    clampedY = YES;
  }
  
#line 19864
  [self onOverScrolledWithInt:newScrollX withInt:newScrollY withBoolean:clampedX withBoolean:clampedY];
  
#line 19866
  return clampedX || clampedY;
}


#line 19878
- (void)onOverScrolledWithInt:(jint)scrollX
                      withInt:(jint)scrollY
                  withBoolean:(jboolean)clampedX
                  withBoolean:(jboolean)clampedY {
}


#line 19891
- (jint)getOverScrollMode {
  return mOverScrollMode_;
}


#line 19906
- (void)setOverScrollModeWithInt:(jint)overScrollMode {
  if (overScrollMode != RepackagedAndroidViewView_OVER_SCROLL_ALWAYS &&
#line 19908
  overScrollMode != RepackagedAndroidViewView_OVER_SCROLL_IF_CONTENT_SCROLLS &&
#line 19909
  overScrollMode != RepackagedAndroidViewView_OVER_SCROLL_NEVER) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"Invalid overscroll mode ", overScrollMode));
  }
  mOverScrollMode_ = overScrollMode;
}


#line 19928
- (void)setNestedScrollingEnabledWithBoolean:(jboolean)enabled {
  if (enabled) {
    mPrivateFlags3_ |= RepackagedAndroidViewView_PFLAG3_NESTED_SCROLLING_ENABLED;
  }
  else {
    
#line 19932
    [self stopNestedScroll];
    mPrivateFlags3_ &= ~RepackagedAndroidViewView_PFLAG3_NESTED_SCROLLING_ENABLED;
  }
}


#line 19949
- (jboolean)isNestedScrollingEnabled {
  return (mPrivateFlags3_ & RepackagedAndroidViewView_PFLAG3_NESTED_SCROLLING_ENABLED) ==
#line 19951
  RepackagedAndroidViewView_PFLAG3_NESTED_SCROLLING_ENABLED;
}


#line 19991
- (jboolean)startNestedScrollWithInt:(jint)axes {
  if ([self hasNestedScrollingParent]) {
    
#line 19994
    return YES;
  }
  if ([self isNestedScrollingEnabled]) {
    id<RepackagedAndroidViewViewParent> p = RepackagedAndroidViewView_getParent(self);
    RepackagedAndroidViewView *child = self;
    while (p != nil) {
      @try {
        if ([((id<RepackagedAndroidViewViewParent>) nil_chk(p)) onStartNestedScrollWithRepackagedAndroidViewView:child withRepackagedAndroidViewView:self withInt:axes]) {
          mNestedScrollingParent_ = p;
          [p onNestedScrollAcceptedWithRepackagedAndroidViewView:child withRepackagedAndroidViewView:self withInt:axes];
          return YES;
        }
      }
      @catch (
#line 20006
      JavaLangAbstractMethodError *e) {
        RepackagedAndroidUtilLog_eWithNSString_withNSString_withJavaLangThrowable_(RepackagedAndroidViewView_VIEW_LOG_TAG_, JreStrcat("$@$", @"ViewParent ", p, @" does not implement interface method onStartNestedScroll"),
#line 20008
        e);
      }
      
#line 20011
      if ([p isKindOfClass:[RepackagedAndroidViewView class]]) {
        child = (RepackagedAndroidViewView *) check_class_cast(p, [RepackagedAndroidViewView class]);
      }
      p = [((id<RepackagedAndroidViewViewParent>) nil_chk(p)) getParent];
    }
  }
  return NO;
}


#line 20027
- (void)stopNestedScroll {
  if (mNestedScrollingParent_ != nil) {
    [mNestedScrollingParent_ onStopNestedScrollWithRepackagedAndroidViewView:self];
    mNestedScrollingParent_ = nil;
  }
}


#line 20042
- (jboolean)hasNestedScrollingParent {
  return mNestedScrollingParent_ != nil;
}


#line 20069
- (jboolean)dispatchNestedScrollWithInt:(jint)dxConsumed
                                withInt:(jint)dyConsumed
                                withInt:(jint)dxUnconsumed
                                withInt:(jint)dyUnconsumed
                           withIntArray:(IOSIntArray *)offsetInWindow {
  
#line 20071
  if ([self isNestedScrollingEnabled] && mNestedScrollingParent_ != nil) {
    if (dxConsumed != 0 || dyConsumed != 0 || dxUnconsumed != 0 || dyUnconsumed != 0) {
      jint startX = 0;
      jint startY = 0;
      if (offsetInWindow != nil) {
        [self getLocationInWindowWithIntArray:offsetInWindow];
        startX = IOSIntArray_Get(offsetInWindow, 0);
        startY = IOSIntArray_Get(offsetInWindow, 1);
      }
      
#line 20081
      [mNestedScrollingParent_ onNestedScrollWithRepackagedAndroidViewView:self withInt:dxConsumed withInt:dyConsumed withInt:
#line 20082
      dxUnconsumed withInt:dyUnconsumed];
      
#line 20084
      if (offsetInWindow != nil) {
        [self getLocationInWindowWithIntArray:offsetInWindow];
        *IOSIntArray_GetRef(offsetInWindow, 0) -= startX;
        *IOSIntArray_GetRef(offsetInWindow, 1) -= startY;
      }
      return YES;
    }
    else
#line 20090
    if (offsetInWindow != nil) {
      
#line 20092
      *IOSIntArray_GetRef(offsetInWindow, 0) = 0;
      *IOSIntArray_GetRef(offsetInWindow, 1) = 0;
    }
  }
  return NO;
}


#line 20118
- (jboolean)dispatchNestedPreScrollWithInt:(jint)dx
                                   withInt:(jint)dy
                              withIntArray:(IOSIntArray *)consumed
                              withIntArray:(IOSIntArray *)offsetInWindow {
  
#line 20120
  if ([self isNestedScrollingEnabled] && mNestedScrollingParent_ != nil) {
    if (dx != 0 || dy != 0) {
      jint startX = 0;
      jint startY = 0;
      if (offsetInWindow != nil) {
        [self getLocationInWindowWithIntArray:offsetInWindow];
        startX = IOSIntArray_Get(offsetInWindow, 0);
        startY = IOSIntArray_Get(offsetInWindow, 1);
      }
      
#line 20130
      if (consumed == nil) {
        if (mTempNestedScrollConsumed_ == nil) {
          mTempNestedScrollConsumed_ = [IOSIntArray newArrayWithLength:2];
        }
        consumed = mTempNestedScrollConsumed_;
      }
      *IOSIntArray_GetRef(nil_chk(consumed), 0) = 0;
      *IOSIntArray_GetRef(consumed, 1) = 0;
      [mNestedScrollingParent_ onNestedPreScrollWithRepackagedAndroidViewView:self withInt:dx withInt:dy withIntArray:consumed];
      
#line 20140
      if (offsetInWindow != nil) {
        [self getLocationInWindowWithIntArray:offsetInWindow];
        *IOSIntArray_GetRef(offsetInWindow, 0) -= startX;
        *IOSIntArray_GetRef(offsetInWindow, 1) -= startY;
      }
      return IOSIntArray_Get(consumed, 0) != 0 || IOSIntArray_Get(consumed, 1) != 0;
    }
    else
#line 20146
    if (offsetInWindow != nil) {
      *IOSIntArray_GetRef(offsetInWindow, 0) = 0;
      *IOSIntArray_GetRef(offsetInWindow, 1) = 0;
    }
  }
  return NO;
}


#line 20172
- (jboolean)dispatchNestedFlingWithFloat:(jfloat)velocityX
                               withFloat:(jfloat)velocityY
                             withBoolean:(jboolean)consumed {
  if ([self isNestedScrollingEnabled] && mNestedScrollingParent_ != nil) {
    return [mNestedScrollingParent_ onNestedFlingWithRepackagedAndroidViewView:self withFloat:velocityX withFloat:velocityY withBoolean:consumed];
  }
  return NO;
}


#line 20209
- (jboolean)dispatchNestedPreFlingWithFloat:(jfloat)velocityX
                                  withFloat:(jfloat)velocityY {
  if ([self isNestedScrollingEnabled] && mNestedScrollingParent_ != nil) {
    return [mNestedScrollingParent_ onNestedPreFlingWithRepackagedAndroidViewView:self withFloat:velocityX withFloat:velocityY];
  }
  return NO;
}


#line 20222
- (jfloat)getVerticalScrollFactor {
  if (mVerticalScrollFactor_ == 0) {
    RepackagedAndroidUtilTypedValue *outValue = new_RepackagedAndroidUtilTypedValue_init();
    if (![((RepackagedAndroidContentResResources_Theme *) nil_chk([((id<RepackagedAndroidContentContext>) nil_chk(mContext_)) getTheme])) resolveAttributeWithInt:
#line 20226
    RepackagedComAndroidInternalR_attr_listPreferredItemHeight withRepackagedAndroidUtilTypedValue:outValue withBoolean:YES]) {
      @throw new_JavaLangIllegalStateException_initWithNSString_(
#line 20228
      @"Expected theme to define listPreferredItemHeight.");
    }
    mVerticalScrollFactor_ = [outValue getDimensionWithRepackagedAndroidUtilDisplayMetrics:
#line 20231
    [((RepackagedAndroidContentResResources *) nil_chk([mContext_ getResources])) getDisplayMetrics]];
  }
  return mVerticalScrollFactor_;
}


#line 20242
- (jfloat)getHorizontalScrollFactor {
  
#line 20244
  return [self getVerticalScrollFactor];
}


#line 20276
- (jint)getRawTextDirection {
  return RShift32((mPrivateFlags2_ & RepackagedAndroidViewView_PFLAG2_TEXT_DIRECTION_MASK), RepackagedAndroidViewView_PFLAG2_TEXT_DIRECTION_MASK_SHIFT);
}


#line 20300
- (void)setTextDirectionWithInt:(jint)textDirection {
  if ([self getRawTextDirection] != textDirection) {
    
#line 20303
    mPrivateFlags2_ &= ~RepackagedAndroidViewView_PFLAG2_TEXT_DIRECTION_MASK;
    [self resetResolvedTextDirection];
    
#line 20306
    mPrivateFlags2_ |= ((LShift32(textDirection, RepackagedAndroidViewView_PFLAG2_TEXT_DIRECTION_MASK_SHIFT)) & RepackagedAndroidViewView_PFLAG2_TEXT_DIRECTION_MASK);
    
#line 20308
    [self resolveTextDirection];
    
#line 20310
    [self onRtlPropertiesChangedWithInt:[self getLayoutDirection]];
    
#line 20312
    [self requestLayout];
    [self invalidateWithBoolean:YES];
  }
}


#line 20342
- (jint)getTextDirection {
  return RShift32((mPrivateFlags2_ & RepackagedAndroidViewView_PFLAG2_TEXT_DIRECTION_RESOLVED_MASK), RepackagedAndroidViewView_PFLAG2_TEXT_DIRECTION_RESOLVED_MASK_SHIFT);
}


#line 20353
- (jboolean)resolveTextDirection {
  
#line 20355
  mPrivateFlags2_ &= ~(RepackagedAndroidViewView_PFLAG2_TEXT_DIRECTION_RESOLVED | RepackagedAndroidViewView_PFLAG2_TEXT_DIRECTION_RESOLVED_MASK);
  
#line 20357
  if (RepackagedAndroidViewView_hasRtlSupport(self)) {
    
#line 20359
    jint textDirection = [self getRawTextDirection];
    {
      
#line 20385
      jint parentResolvedDirection;
      
#line 20360
      switch (textDirection) {
        case RepackagedAndroidViewView_TEXT_DIRECTION_INHERIT:
        if (![self canResolveTextDirection]) {
          
#line 20364
          mPrivateFlags2_ |= RepackagedAndroidViewView_PFLAG2_TEXT_DIRECTION_RESOLVED_DEFAULT;
          
#line 20366
          return NO;
        }
        
#line 20370
        @try {
          if (![((id<RepackagedAndroidViewViewParent>) nil_chk(mParent_)) isTextDirectionResolved]) {
            mPrivateFlags2_ |= RepackagedAndroidViewView_PFLAG2_TEXT_DIRECTION_RESOLVED_DEFAULT;
            
#line 20374
            return NO;
          }
        }
        @catch (
#line 20376
        JavaLangAbstractMethodError *e) {
          RepackagedAndroidUtilLog_eWithNSString_withNSString_withJavaLangThrowable_(RepackagedAndroidViewView_VIEW_LOG_TAG_, JreStrcat("$$", [[((id<RepackagedAndroidViewViewParent>) nil_chk(mParent_)) getClass] getSimpleName], @" does not fully implement ViewParent"),
#line 20378
          e);
          mPrivateFlags2_ |= RepackagedAndroidViewView_PFLAG2_TEXT_DIRECTION_RESOLVED |
#line 20380
          RepackagedAndroidViewView_PFLAG2_TEXT_DIRECTION_RESOLVED_DEFAULT;
          return YES;
        }
        
#line 20386
        @try {
          parentResolvedDirection = [((id<RepackagedAndroidViewViewParent>) nil_chk(mParent_)) getTextDirection];
        }
        @catch (
#line 20388
        JavaLangAbstractMethodError *e) {
          RepackagedAndroidUtilLog_eWithNSString_withNSString_withJavaLangThrowable_(RepackagedAndroidViewView_VIEW_LOG_TAG_, JreStrcat("$$", [[((id<RepackagedAndroidViewViewParent>) nil_chk(mParent_)) getClass] getSimpleName], @" does not fully implement ViewParent"),
#line 20390
          e);
          parentResolvedDirection = RepackagedAndroidViewView_TEXT_DIRECTION_LTR;
        }
        switch (parentResolvedDirection) {
          case RepackagedAndroidViewView_TEXT_DIRECTION_FIRST_STRONG:
          case RepackagedAndroidViewView_TEXT_DIRECTION_ANY_RTL:
          case RepackagedAndroidViewView_TEXT_DIRECTION_LTR:
          case RepackagedAndroidViewView_TEXT_DIRECTION_RTL:
          case RepackagedAndroidViewView_TEXT_DIRECTION_LOCALE:
          case RepackagedAndroidViewView_TEXT_DIRECTION_FIRST_STRONG_LTR:
          case RepackagedAndroidViewView_TEXT_DIRECTION_FIRST_STRONG_RTL:
          mPrivateFlags2_ |=
#line 20402
          (LShift32(parentResolvedDirection, RepackagedAndroidViewView_PFLAG2_TEXT_DIRECTION_RESOLVED_MASK_SHIFT));
          break;
          default:
          
#line 20406
          mPrivateFlags2_ |= RepackagedAndroidViewView_PFLAG2_TEXT_DIRECTION_RESOLVED_DEFAULT;
        }
        break;
        case RepackagedAndroidViewView_TEXT_DIRECTION_FIRST_STRONG:
        case RepackagedAndroidViewView_TEXT_DIRECTION_ANY_RTL:
        case RepackagedAndroidViewView_TEXT_DIRECTION_LTR:
        case RepackagedAndroidViewView_TEXT_DIRECTION_RTL:
        case RepackagedAndroidViewView_TEXT_DIRECTION_LOCALE:
        case RepackagedAndroidViewView_TEXT_DIRECTION_FIRST_STRONG_LTR:
        case RepackagedAndroidViewView_TEXT_DIRECTION_FIRST_STRONG_RTL:
        
#line 20417
        mPrivateFlags2_ |= (LShift32(textDirection, RepackagedAndroidViewView_PFLAG2_TEXT_DIRECTION_RESOLVED_MASK_SHIFT));
        break;
        default:
        
#line 20421
        mPrivateFlags2_ |= RepackagedAndroidViewView_PFLAG2_TEXT_DIRECTION_RESOLVED_DEFAULT;
      }
    }
  }
  else {
    
#line 20425
    mPrivateFlags2_ |= RepackagedAndroidViewView_PFLAG2_TEXT_DIRECTION_RESOLVED_DEFAULT;
  }
  
#line 20429
  mPrivateFlags2_ |= RepackagedAndroidViewView_PFLAG2_TEXT_DIRECTION_RESOLVED;
  return YES;
}


#line 20438
- (jboolean)canResolveTextDirection {
  switch ([self getRawTextDirection]) {
    case RepackagedAndroidViewView_TEXT_DIRECTION_INHERIT:
    if (mParent_ != nil) {
      @try {
        return [mParent_ canResolveTextDirection];
      }
      @catch (
#line 20444
      JavaLangAbstractMethodError *e) {
        RepackagedAndroidUtilLog_eWithNSString_withNSString_withJavaLangThrowable_(RepackagedAndroidViewView_VIEW_LOG_TAG_, JreStrcat("$$", [[mParent_ getClass] getSimpleName], @" does not fully implement ViewParent"),
#line 20446
        e);
      }
    }
    return NO;
    
#line 20451
    default:
    return YES;
  }
}


#line 20462
- (void)resetResolvedTextDirection {
  
#line 20464
  mPrivateFlags2_ &= ~(RepackagedAndroidViewView_PFLAG2_TEXT_DIRECTION_RESOLVED | RepackagedAndroidViewView_PFLAG2_TEXT_DIRECTION_RESOLVED_MASK);
  
#line 20466
  mPrivateFlags2_ |= RepackagedAndroidViewView_PFLAG2_TEXT_DIRECTION_RESOLVED_DEFAULT;
}


#line 20474
- (jboolean)isTextDirectionInherited {
  return [self getRawTextDirection] == RepackagedAndroidViewView_TEXT_DIRECTION_INHERIT;
}


#line 20481
- (jboolean)isTextDirectionResolved {
  return (mPrivateFlags2_ & RepackagedAndroidViewView_PFLAG2_TEXT_DIRECTION_RESOLVED) == RepackagedAndroidViewView_PFLAG2_TEXT_DIRECTION_RESOLVED;
}


#line 20513
- (jint)getRawTextAlignment {
  return RShift32((mPrivateFlags2_ & RepackagedAndroidViewView_PFLAG2_TEXT_ALIGNMENT_MASK), RepackagedAndroidViewView_PFLAG2_TEXT_ALIGNMENT_MASK_SHIFT);
}


#line 20536
- (void)setTextAlignmentWithInt:(jint)textAlignment {
  if (textAlignment != [self getRawTextAlignment]) {
    
#line 20539
    mPrivateFlags2_ &= ~RepackagedAndroidViewView_PFLAG2_TEXT_ALIGNMENT_MASK;
    [self resetResolvedTextAlignment];
    
#line 20542
    mPrivateFlags2_ |=
#line 20543
    ((LShift32(textAlignment, RepackagedAndroidViewView_PFLAG2_TEXT_ALIGNMENT_MASK_SHIFT)) & RepackagedAndroidViewView_PFLAG2_TEXT_ALIGNMENT_MASK);
    
#line 20545
    [self resolveTextAlignment];
    
#line 20547
    [self onRtlPropertiesChangedWithInt:[self getLayoutDirection]];
    
#line 20549
    [self requestLayout];
    [self invalidateWithBoolean:YES];
  }
}


#line 20578
- (jint)getTextAlignment {
  return RShift32((mPrivateFlags2_ & RepackagedAndroidViewView_PFLAG2_TEXT_ALIGNMENT_RESOLVED_MASK),
#line 20580
  RepackagedAndroidViewView_PFLAG2_TEXT_ALIGNMENT_RESOLVED_MASK_SHIFT);
}


#line 20590
- (jboolean)resolveTextAlignment {
  
#line 20592
  mPrivateFlags2_ &= ~(RepackagedAndroidViewView_PFLAG2_TEXT_ALIGNMENT_RESOLVED | RepackagedAndroidViewView_PFLAG2_TEXT_ALIGNMENT_RESOLVED_MASK);
  
#line 20594
  if (RepackagedAndroidViewView_hasRtlSupport(self)) {
    
#line 20596
    jint textAlignment = [self getRawTextAlignment];
    {
      
#line 20622
      jint parentResolvedTextAlignment;
      
#line 20597
      switch (textAlignment) {
        case RepackagedAndroidViewView_TEXT_ALIGNMENT_INHERIT:
        
#line 20600
        if (![self canResolveTextAlignment]) {
          
#line 20602
          mPrivateFlags2_ |= RepackagedAndroidViewView_PFLAG2_TEXT_ALIGNMENT_RESOLVED_DEFAULT;
          
#line 20604
          return NO;
        }
        
#line 20608
        @try {
          if (![((id<RepackagedAndroidViewViewParent>) nil_chk(mParent_)) isTextAlignmentResolved]) {
            mPrivateFlags2_ |= RepackagedAndroidViewView_PFLAG2_TEXT_ALIGNMENT_RESOLVED_DEFAULT;
            
#line 20612
            return NO;
          }
        }
        @catch (
#line 20614
        JavaLangAbstractMethodError *e) {
          RepackagedAndroidUtilLog_eWithNSString_withNSString_withJavaLangThrowable_(RepackagedAndroidViewView_VIEW_LOG_TAG_, JreStrcat("$$", [[((id<RepackagedAndroidViewViewParent>) nil_chk(mParent_)) getClass] getSimpleName], @" does not fully implement ViewParent"),
#line 20616
          e);
          mPrivateFlags2_ |= RepackagedAndroidViewView_PFLAG2_TEXT_ALIGNMENT_RESOLVED |
#line 20618
          RepackagedAndroidViewView_PFLAG2_TEXT_ALIGNMENT_RESOLVED_DEFAULT;
          return YES;
        }
        
#line 20623
        @try {
          parentResolvedTextAlignment = [((id<RepackagedAndroidViewViewParent>) nil_chk(mParent_)) getTextAlignment];
        }
        @catch (
#line 20625
        JavaLangAbstractMethodError *e) {
          RepackagedAndroidUtilLog_eWithNSString_withNSString_withJavaLangThrowable_(RepackagedAndroidViewView_VIEW_LOG_TAG_, JreStrcat("$$", [[((id<RepackagedAndroidViewViewParent>) nil_chk(mParent_)) getClass] getSimpleName], @" does not fully implement ViewParent"),
#line 20627
          e);
          parentResolvedTextAlignment = RepackagedAndroidViewView_TEXT_ALIGNMENT_GRAVITY;
        }
        switch (parentResolvedTextAlignment) {
          case RepackagedAndroidViewView_TEXT_ALIGNMENT_GRAVITY:
          case RepackagedAndroidViewView_TEXT_ALIGNMENT_TEXT_START:
          case RepackagedAndroidViewView_TEXT_ALIGNMENT_TEXT_END:
          case RepackagedAndroidViewView_TEXT_ALIGNMENT_CENTER:
          case RepackagedAndroidViewView_TEXT_ALIGNMENT_VIEW_START:
          case RepackagedAndroidViewView_TEXT_ALIGNMENT_VIEW_END:
          
#line 20639
          mPrivateFlags2_ |=
#line 20640
          (LShift32(parentResolvedTextAlignment, RepackagedAndroidViewView_PFLAG2_TEXT_ALIGNMENT_RESOLVED_MASK_SHIFT));
          break;
          default:
          
#line 20644
          mPrivateFlags2_ |= RepackagedAndroidViewView_PFLAG2_TEXT_ALIGNMENT_RESOLVED_DEFAULT;
        }
        break;
        case RepackagedAndroidViewView_TEXT_ALIGNMENT_GRAVITY:
        case RepackagedAndroidViewView_TEXT_ALIGNMENT_TEXT_START:
        case RepackagedAndroidViewView_TEXT_ALIGNMENT_TEXT_END:
        case RepackagedAndroidViewView_TEXT_ALIGNMENT_CENTER:
        case RepackagedAndroidViewView_TEXT_ALIGNMENT_VIEW_START:
        case RepackagedAndroidViewView_TEXT_ALIGNMENT_VIEW_END:
        
#line 20654
        mPrivateFlags2_ |= (LShift32(textAlignment, RepackagedAndroidViewView_PFLAG2_TEXT_ALIGNMENT_RESOLVED_MASK_SHIFT));
        break;
        default:
        
#line 20658
        mPrivateFlags2_ |= RepackagedAndroidViewView_PFLAG2_TEXT_ALIGNMENT_RESOLVED_DEFAULT;
      }
    }
  }
  else {
    
#line 20662
    mPrivateFlags2_ |= RepackagedAndroidViewView_PFLAG2_TEXT_ALIGNMENT_RESOLVED_DEFAULT;
  }
  
#line 20666
  mPrivateFlags2_ |= RepackagedAndroidViewView_PFLAG2_TEXT_ALIGNMENT_RESOLVED;
  return YES;
}


#line 20675
- (jboolean)canResolveTextAlignment {
  switch ([self getRawTextAlignment]) {
    case RepackagedAndroidViewView_TEXT_DIRECTION_INHERIT:
    if (mParent_ != nil) {
      @try {
        return [mParent_ canResolveTextAlignment];
      }
      @catch (
#line 20681
      JavaLangAbstractMethodError *e) {
        RepackagedAndroidUtilLog_eWithNSString_withNSString_withJavaLangThrowable_(RepackagedAndroidViewView_VIEW_LOG_TAG_, JreStrcat("$$", [[mParent_ getClass] getSimpleName], @" does not fully implement ViewParent"),
#line 20683
        e);
      }
    }
    return NO;
    
#line 20688
    default:
    return YES;
  }
}


#line 20699
- (void)resetResolvedTextAlignment {
  
#line 20701
  mPrivateFlags2_ &= ~(RepackagedAndroidViewView_PFLAG2_TEXT_ALIGNMENT_RESOLVED | RepackagedAndroidViewView_PFLAG2_TEXT_ALIGNMENT_RESOLVED_MASK);
  
#line 20703
  mPrivateFlags2_ |= RepackagedAndroidViewView_PFLAG2_TEXT_ALIGNMENT_RESOLVED_DEFAULT;
}


#line 20711
- (jboolean)isTextAlignmentInherited {
  return [self getRawTextAlignment] == RepackagedAndroidViewView_TEXT_ALIGNMENT_INHERIT;
}


#line 20718
- (jboolean)isTextAlignmentResolved {
  return (mPrivateFlags2_ & RepackagedAndroidViewView_PFLAG2_TEXT_ALIGNMENT_RESOLVED) == RepackagedAndroidViewView_PFLAG2_TEXT_ALIGNMENT_RESOLVED;
}


#line 20728
+ (jint)generateViewId {
  return RepackagedAndroidViewView_generateViewId();
}


#line 20747
- (void)captureTransitioningViewsWithJavaUtilList:(id<JavaUtilList>)transitioningViews {
  if ([self getVisibility] == RepackagedAndroidViewView_VISIBLE) {
    [((id<JavaUtilList>) nil_chk(transitioningViews)) addWithId:self];
  }
}


#line 20758
- (void)findNamedViewsWithJavaUtilMap:(id<JavaUtilMap>)namedElements {
  if ([self getVisibility] == RepackagedAndroidViewView_VISIBLE || mGhostView_ != nil) {
    NSString *transitionName = [self getTransitionName];
    if (transitionName != nil) {
      (void) [((id<JavaUtilMap>) nil_chk(namedElements)) putWithId:transitionName withId:self];
    }
  }
}


#line 21157
- (void)hackTurnOffWindowResizeAnimWithBoolean:(jboolean)off {
  ((RepackagedAndroidViewView_AttachInfo *) nil_chk(mAttachInfo_))->mTurnOffWindowResizeAnim_ = off;
}


#line 21167
- (RepackagedAndroidViewViewPropertyAnimator *)animate {
  if (mAnimator_ == nil) {
    mAnimator_ = new_RepackagedAndroidViewViewPropertyAnimator_initWithRepackagedAndroidViewView_(self);
  }
  return mAnimator_;
}


#line 21180
- (void)setTransitionNameWithNSString:(NSString *)transitionName {
  RepackagedAndroidViewView_setTransitionNameWithNSString_(self, transitionName);
}


#line 21194
- (NSString *)getTransitionName {
  return mTransitionName_;
}


#line 22364
- (jboolean)inLiveRegion {
  return RepackagedAndroidViewView_inLiveRegion(self);
}


#line 22385
+ (void)dumpFlags {
  RepackagedAndroidViewView_dumpFlags();
}


#line 22414
+ (void)dumpFlagWithJavaUtilHashMap:(JavaUtilHashMap *)found
                       withNSString:(NSString *)name
                            withInt:(jint)value {
  RepackagedAndroidViewView_dumpFlagWithJavaUtilHashMap_withNSString_withInt_(found, name, value);
}


#line 22424
- (void)encodeWithRepackagedAndroidViewViewHierarchyEncoder:(id<RepackagedAndroidViewViewHierarchyEncoder>)stream {
  [((id<RepackagedAndroidViewViewHierarchyEncoder>) nil_chk(stream)) beginObjectWithRepackagedAndroidViewView:self];
  [self encodePropertiesWithRepackagedAndroidViewViewHierarchyEncoder:stream];
  [stream endObject];
}


#line 22432
- (void)encodePropertiesWithRepackagedAndroidViewViewHierarchyEncoder:(id<RepackagedAndroidViewViewHierarchyEncoder>)stream {
  id resolveId = RepackagedAndroidViewViewDebug_resolveIdWithRepackagedAndroidContentContext_withInt_(RepackagedAndroidViewView_getContext(self), mID_);
  if ([resolveId isKindOfClass:[NSString class]]) {
    [((id<RepackagedAndroidViewViewHierarchyEncoder>) nil_chk(stream)) addPropertyWithNSString:@"id" withNSString:(NSString *) check_class_cast(resolveId, [NSString class])];
  }
  else {
    
#line 22437
    [((id<RepackagedAndroidViewViewHierarchyEncoder>) nil_chk(stream)) addPropertyWithNSString:@"id" withInt:mID_];
  }
  
#line 22440
  [((id<RepackagedAndroidViewViewHierarchyEncoder>) nil_chk(stream)) addPropertyWithNSString:@"misc:transformation.alpha" withFloat:
#line 22441
  mTransformationInfo_ != nil ? mTransformationInfo_->mAlpha_ : 0];
  [stream addPropertyWithNSString:@"misc:transitionName" withNSString:[self getTransitionName]];
  
#line 22445
  [stream addPropertyWithNSString:@"layout:left" withInt:mLeft_];
  [stream addPropertyWithNSString:@"layout:right" withInt:mRight_];
  [stream addPropertyWithNSString:@"layout:top" withInt:mTop_];
  [stream addPropertyWithNSString:@"layout:bottom" withInt:mBottom_];
  [stream addPropertyWithNSString:@"layout:width" withInt:RepackagedAndroidViewView_getWidth(self)];
  [stream addPropertyWithNSString:@"layout:height" withInt:RepackagedAndroidViewView_getHeight(self)];
  [stream addPropertyWithNSString:@"layout:layoutDirection" withInt:[self getLayoutDirection]];
  [stream addPropertyWithNSString:@"layout:layoutRtl" withBoolean:[self isLayoutRtl]];
  [stream addPropertyWithNSString:@"layout:hasTransientState" withBoolean:[self hasTransientState]];
  [stream addPropertyWithNSString:@"layout:baseline" withInt:[self getBaseline]];
  
#line 22457
  RepackagedAndroidViewViewGroup_LayoutParams *layoutParams = [self getLayoutParams];
  if (layoutParams != nil) {
    [stream addPropertyKeyWithNSString:@"layoutParams"];
    [layoutParams encodeWithRepackagedAndroidViewViewHierarchyEncoder:stream];
  }
  
#line 22464
  [stream addPropertyWithNSString:@"scrolling:scrollX" withInt:mScrollX_];
  [stream addPropertyWithNSString:@"scrolling:scrollY" withInt:mScrollY_];
  
#line 22468
  [stream addPropertyWithNSString:@"padding:paddingLeft" withInt:mPaddingLeft_];
  [stream addPropertyWithNSString:@"padding:paddingRight" withInt:mPaddingRight_];
  [stream addPropertyWithNSString:@"padding:paddingTop" withInt:mPaddingTop_];
  [stream addPropertyWithNSString:@"padding:paddingBottom" withInt:mPaddingBottom_];
  [stream addPropertyWithNSString:@"padding:userPaddingRight" withInt:mUserPaddingRight_];
  [stream addPropertyWithNSString:@"padding:userPaddingLeft" withInt:mUserPaddingLeft_];
  [stream addPropertyWithNSString:@"padding:userPaddingBottom" withInt:mUserPaddingBottom_];
  [stream addPropertyWithNSString:@"padding:userPaddingStart" withInt:mUserPaddingStart_];
  [stream addPropertyWithNSString:@"padding:userPaddingEnd" withInt:mUserPaddingEnd_];
  
#line 22479
  [stream addPropertyWithNSString:@"measurement:minHeight" withInt:mMinHeight_];
  [stream addPropertyWithNSString:@"measurement:minWidth" withInt:mMinWidth_];
  [stream addPropertyWithNSString:@"measurement:measuredWidth" withInt:mMeasuredWidth_];
  [stream addPropertyWithNSString:@"measurement:measuredHeight" withInt:mMeasuredHeight_];
  
#line 22485
  [stream addPropertyWithNSString:@"drawing:elevation" withFloat:[self getElevation]];
  [stream addPropertyWithNSString:@"drawing:translationX" withFloat:[self getTranslationX]];
  [stream addPropertyWithNSString:@"drawing:translationY" withFloat:[self getTranslationY]];
  [stream addPropertyWithNSString:@"drawing:translationZ" withFloat:[self getTranslationZ]];
  [stream addPropertyWithNSString:@"drawing:rotation" withFloat:[self getRotation]];
  [stream addPropertyWithNSString:@"drawing:rotationX" withFloat:[self getRotationX]];
  [stream addPropertyWithNSString:@"drawing:rotationY" withFloat:[self getRotationY]];
  [stream addPropertyWithNSString:@"drawing:scaleX" withFloat:[self getScaleX]];
  [stream addPropertyWithNSString:@"drawing:scaleY" withFloat:[self getScaleY]];
  [stream addPropertyWithNSString:@"drawing:pivotX" withFloat:[self getPivotX]];
  [stream addPropertyWithNSString:@"drawing:pivotY" withFloat:[self getPivotY]];
  [stream addPropertyWithNSString:@"drawing:opaque" withBoolean:[self isOpaque]];
  [stream addPropertyWithNSString:@"drawing:alpha" withFloat:[self getAlpha]];
  [stream addPropertyWithNSString:@"drawing:transitionAlpha" withFloat:[self getTransitionAlpha]];
  [stream addPropertyWithNSString:@"drawing:shadow" withBoolean:[self hasShadow]];
  [stream addPropertyWithNSString:@"drawing:solidColor" withInt:[self getSolidColor]];
  [stream addPropertyWithNSString:@"drawing:layerType" withInt:mLayerType_];
  [stream addPropertyWithNSString:@"drawing:willNotDraw" withBoolean:[self willNotDraw]];
  [stream addPropertyWithNSString:@"drawing:hardwareAccelerated" withBoolean:[self isHardwareAccelerated]];
  [stream addPropertyWithNSString:@"drawing:willNotCacheDrawing" withBoolean:[self willNotCacheDrawing]];
  [stream addPropertyWithNSString:@"drawing:drawingCacheEnabled" withBoolean:[self isDrawingCacheEnabled]];
  [stream addPropertyWithNSString:@"drawing:overlappingRendering" withBoolean:[self hasOverlappingRendering]];
  
#line 22509
  [stream addPropertyWithNSString:@"focus:hasFocus" withBoolean:[self hasFocus]];
  [stream addPropertyWithNSString:@"focus:isFocused" withBoolean:[self isFocused]];
  [stream addPropertyWithNSString:@"focus:isFocusable" withBoolean:RepackagedAndroidViewView_isFocusable(self)];
  [stream addPropertyWithNSString:@"focus:isFocusableInTouchMode" withBoolean:RepackagedAndroidViewView_isFocusableInTouchMode(self)];
  
#line 22514
  [stream addPropertyWithNSString:@"misc:clickable" withBoolean:[self isClickable]];
  [stream addPropertyWithNSString:@"misc:pressed" withBoolean:[self isPressed]];
  [stream addPropertyWithNSString:@"misc:selected" withBoolean:[self isSelected]];
  [stream addPropertyWithNSString:@"misc:touchMode" withBoolean:[self isInTouchMode]];
  [stream addPropertyWithNSString:@"misc:hovered" withBoolean:[self isHovered]];
  [stream addPropertyWithNSString:@"misc:activated" withBoolean:[self isActivated]];
  
#line 22521
  [stream addPropertyWithNSString:@"misc:visibility" withInt:[self getVisibility]];
  [stream addPropertyWithNSString:@"misc:fitsSystemWindows" withBoolean:[self getFitsSystemWindows]];
  [stream addPropertyWithNSString:@"misc:filterTouchesWhenObscured" withBoolean:[self getFilterTouchesWhenObscured]];
  
#line 22525
  [stream addPropertyWithNSString:@"misc:enabled" withBoolean:[self isEnabled]];
  [stream addPropertyWithNSString:@"misc:soundEffectsEnabled" withBoolean:[self isSoundEffectsEnabled]];
  [stream addPropertyWithNSString:@"misc:hapticFeedbackEnabled" withBoolean:[self isHapticFeedbackEnabled]];
  
#line 22530
  RepackagedAndroidContentResResources_Theme *theme = [((id<RepackagedAndroidContentContext>) nil_chk(RepackagedAndroidViewView_getContext(self))) getTheme];
  if (theme != nil) {
    [stream addPropertyKeyWithNSString:@"theme"];
    [theme encodeWithRepackagedAndroidViewViewHierarchyEncoder:stream];
  }
  
#line 22537
  jint n = mAttributes_ != nil ? mAttributes_->size_ : 0;
  [stream addPropertyWithNSString:@"meta:__attrCount__" withInt:n / 2];
  for (jint i = 0; i < n; i += 2) {
    [stream addPropertyWithNSString:JreStrcat("$$", @"meta:__attr__", IOSObjectArray_Get(nil_chk(mAttributes_), i)) withNSString:IOSObjectArray_Get(mAttributes_, i + 1)];
  }
  
#line 22543
  [stream addPropertyWithNSString:@"misc:scrollBarStyle" withInt:[self getScrollBarStyle]];
  
#line 22546
  [stream addPropertyWithNSString:@"text:textDirection" withInt:[self getTextDirection]];
  [stream addPropertyWithNSString:@"text:textAlignment" withInt:[self getTextAlignment]];
  
#line 22550
  id<JavaLangCharSequence> contentDescription = [self getContentDescription];
  [stream addPropertyWithNSString:@"accessibility:contentDescription" withNSString:
#line 22552
  contentDescription == nil ? @"" : [contentDescription description]];
  [stream addPropertyWithNSString:@"accessibility:labelFor" withInt:[self getLabelFor]];
  [stream addPropertyWithNSString:@"accessibility:importantForAccessibility" withInt:[self getImportantForAccessibility]];
}

+ (void)initialize {
  if (self == [RepackagedAndroidViewView class]) {
    RepackagedAndroidViewView_VISIBILITY_FLAGS_ = [IOSIntArray newArrayWithInts:(jint[]){
#line 808
      RepackagedAndroidViewView_VISIBLE, RepackagedAndroidViewView_INVISIBLE, RepackagedAndroidViewView_GONE } count:3];
      RepackagedAndroidViewView_DRAWING_CACHE_QUALITY_FLAGS_ = [IOSIntArray newArrayWithInts:(jint[]){
#line 969
        RepackagedAndroidViewView_DRAWING_CACHE_QUALITY_AUTO, RepackagedAndroidViewView_DRAWING_CACHE_QUALITY_LOW, RepackagedAndroidViewView_DRAWING_CACHE_QUALITY_HIGH } count:3];
        {
          
#line 1471
          RepackagedAndroidViewView_EMPTY_STATE_SET_ = RepackagedAndroidUtilStateSet_getWithInt_(0);
          
#line 1473
          RepackagedAndroidViewView_WINDOW_FOCUSED_STATE_SET_ = RepackagedAndroidUtilStateSet_getWithInt_(RepackagedAndroidUtilStateSet_VIEW_STATE_WINDOW_FOCUSED);
          
#line 1475
          RepackagedAndroidViewView_SELECTED_STATE_SET_ = RepackagedAndroidUtilStateSet_getWithInt_(RepackagedAndroidUtilStateSet_VIEW_STATE_SELECTED);
          RepackagedAndroidViewView_SELECTED_WINDOW_FOCUSED_STATE_SET_ = RepackagedAndroidUtilStateSet_getWithInt_(
#line 1477
          RepackagedAndroidUtilStateSet_VIEW_STATE_WINDOW_FOCUSED | RepackagedAndroidUtilStateSet_VIEW_STATE_SELECTED);
          
#line 1479
          RepackagedAndroidViewView_FOCUSED_STATE_SET_ = RepackagedAndroidUtilStateSet_getWithInt_(RepackagedAndroidUtilStateSet_VIEW_STATE_FOCUSED);
          RepackagedAndroidViewView_FOCUSED_WINDOW_FOCUSED_STATE_SET_ = RepackagedAndroidUtilStateSet_getWithInt_(
#line 1481
          RepackagedAndroidUtilStateSet_VIEW_STATE_WINDOW_FOCUSED | RepackagedAndroidUtilStateSet_VIEW_STATE_FOCUSED);
          RepackagedAndroidViewView_FOCUSED_SELECTED_STATE_SET_ = RepackagedAndroidUtilStateSet_getWithInt_(
#line 1483
          RepackagedAndroidUtilStateSet_VIEW_STATE_SELECTED | RepackagedAndroidUtilStateSet_VIEW_STATE_FOCUSED);
          RepackagedAndroidViewView_FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET_ = RepackagedAndroidUtilStateSet_getWithInt_(
#line 1485
          RepackagedAndroidUtilStateSet_VIEW_STATE_WINDOW_FOCUSED | RepackagedAndroidUtilStateSet_VIEW_STATE_SELECTED |
#line 1486
          RepackagedAndroidUtilStateSet_VIEW_STATE_FOCUSED);
          
#line 1488
          RepackagedAndroidViewView_ENABLED_STATE_SET_ = RepackagedAndroidUtilStateSet_getWithInt_(RepackagedAndroidUtilStateSet_VIEW_STATE_ENABLED);
          RepackagedAndroidViewView_ENABLED_WINDOW_FOCUSED_STATE_SET_ = RepackagedAndroidUtilStateSet_getWithInt_(
#line 1490
          RepackagedAndroidUtilStateSet_VIEW_STATE_WINDOW_FOCUSED | RepackagedAndroidUtilStateSet_VIEW_STATE_ENABLED);
          RepackagedAndroidViewView_ENABLED_SELECTED_STATE_SET_ = RepackagedAndroidUtilStateSet_getWithInt_(
#line 1492
          RepackagedAndroidUtilStateSet_VIEW_STATE_SELECTED | RepackagedAndroidUtilStateSet_VIEW_STATE_ENABLED);
          RepackagedAndroidViewView_ENABLED_SELECTED_WINDOW_FOCUSED_STATE_SET_ = RepackagedAndroidUtilStateSet_getWithInt_(
#line 1494
          RepackagedAndroidUtilStateSet_VIEW_STATE_WINDOW_FOCUSED | RepackagedAndroidUtilStateSet_VIEW_STATE_SELECTED |
#line 1495
          RepackagedAndroidUtilStateSet_VIEW_STATE_ENABLED);
          RepackagedAndroidViewView_ENABLED_FOCUSED_STATE_SET_ = RepackagedAndroidUtilStateSet_getWithInt_(
#line 1497
          RepackagedAndroidUtilStateSet_VIEW_STATE_FOCUSED | RepackagedAndroidUtilStateSet_VIEW_STATE_ENABLED);
          RepackagedAndroidViewView_ENABLED_FOCUSED_WINDOW_FOCUSED_STATE_SET_ = RepackagedAndroidUtilStateSet_getWithInt_(
#line 1499
          RepackagedAndroidUtilStateSet_VIEW_STATE_WINDOW_FOCUSED | RepackagedAndroidUtilStateSet_VIEW_STATE_FOCUSED |
#line 1500
          RepackagedAndroidUtilStateSet_VIEW_STATE_ENABLED);
          RepackagedAndroidViewView_ENABLED_FOCUSED_SELECTED_STATE_SET_ = RepackagedAndroidUtilStateSet_getWithInt_(
#line 1502
          RepackagedAndroidUtilStateSet_VIEW_STATE_SELECTED | RepackagedAndroidUtilStateSet_VIEW_STATE_FOCUSED |
#line 1503
          RepackagedAndroidUtilStateSet_VIEW_STATE_ENABLED);
          RepackagedAndroidViewView_ENABLED_FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET_ = RepackagedAndroidUtilStateSet_getWithInt_(
#line 1505
          RepackagedAndroidUtilStateSet_VIEW_STATE_WINDOW_FOCUSED | RepackagedAndroidUtilStateSet_VIEW_STATE_SELECTED |
#line 1506
          RepackagedAndroidUtilStateSet_VIEW_STATE_FOCUSED | RepackagedAndroidUtilStateSet_VIEW_STATE_ENABLED);
          
#line 1508
          RepackagedAndroidViewView_PRESSED_STATE_SET_ = RepackagedAndroidUtilStateSet_getWithInt_(RepackagedAndroidUtilStateSet_VIEW_STATE_PRESSED);
          RepackagedAndroidViewView_PRESSED_WINDOW_FOCUSED_STATE_SET_ = RepackagedAndroidUtilStateSet_getWithInt_(
#line 1510
          RepackagedAndroidUtilStateSet_VIEW_STATE_WINDOW_FOCUSED | RepackagedAndroidUtilStateSet_VIEW_STATE_PRESSED);
          RepackagedAndroidViewView_PRESSED_SELECTED_STATE_SET_ = RepackagedAndroidUtilStateSet_getWithInt_(
#line 1512
          RepackagedAndroidUtilStateSet_VIEW_STATE_SELECTED | RepackagedAndroidUtilStateSet_VIEW_STATE_PRESSED);
          RepackagedAndroidViewView_PRESSED_SELECTED_WINDOW_FOCUSED_STATE_SET_ = RepackagedAndroidUtilStateSet_getWithInt_(
#line 1514
          RepackagedAndroidUtilStateSet_VIEW_STATE_WINDOW_FOCUSED | RepackagedAndroidUtilStateSet_VIEW_STATE_SELECTED |
#line 1515
          RepackagedAndroidUtilStateSet_VIEW_STATE_PRESSED);
          RepackagedAndroidViewView_PRESSED_FOCUSED_STATE_SET_ = RepackagedAndroidUtilStateSet_getWithInt_(
#line 1517
          RepackagedAndroidUtilStateSet_VIEW_STATE_FOCUSED | RepackagedAndroidUtilStateSet_VIEW_STATE_PRESSED);
          RepackagedAndroidViewView_PRESSED_FOCUSED_WINDOW_FOCUSED_STATE_SET_ = RepackagedAndroidUtilStateSet_getWithInt_(
#line 1519
          RepackagedAndroidUtilStateSet_VIEW_STATE_WINDOW_FOCUSED | RepackagedAndroidUtilStateSet_VIEW_STATE_FOCUSED |
#line 1520
          RepackagedAndroidUtilStateSet_VIEW_STATE_PRESSED);
          RepackagedAndroidViewView_PRESSED_FOCUSED_SELECTED_STATE_SET_ = RepackagedAndroidUtilStateSet_getWithInt_(
#line 1522
          RepackagedAndroidUtilStateSet_VIEW_STATE_SELECTED | RepackagedAndroidUtilStateSet_VIEW_STATE_FOCUSED |
#line 1523
          RepackagedAndroidUtilStateSet_VIEW_STATE_PRESSED);
          RepackagedAndroidViewView_PRESSED_FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET_ = RepackagedAndroidUtilStateSet_getWithInt_(
#line 1525
          RepackagedAndroidUtilStateSet_VIEW_STATE_WINDOW_FOCUSED | RepackagedAndroidUtilStateSet_VIEW_STATE_SELECTED |
#line 1526
          RepackagedAndroidUtilStateSet_VIEW_STATE_FOCUSED | RepackagedAndroidUtilStateSet_VIEW_STATE_PRESSED);
          RepackagedAndroidViewView_PRESSED_ENABLED_STATE_SET_ = RepackagedAndroidUtilStateSet_getWithInt_(
#line 1528
          RepackagedAndroidUtilStateSet_VIEW_STATE_ENABLED | RepackagedAndroidUtilStateSet_VIEW_STATE_PRESSED);
          RepackagedAndroidViewView_PRESSED_ENABLED_WINDOW_FOCUSED_STATE_SET_ = RepackagedAndroidUtilStateSet_getWithInt_(
#line 1530
          RepackagedAndroidUtilStateSet_VIEW_STATE_WINDOW_FOCUSED | RepackagedAndroidUtilStateSet_VIEW_STATE_ENABLED |
#line 1531
          RepackagedAndroidUtilStateSet_VIEW_STATE_PRESSED);
          RepackagedAndroidViewView_PRESSED_ENABLED_SELECTED_STATE_SET_ = RepackagedAndroidUtilStateSet_getWithInt_(
#line 1533
          RepackagedAndroidUtilStateSet_VIEW_STATE_SELECTED | RepackagedAndroidUtilStateSet_VIEW_STATE_ENABLED |
#line 1534
          RepackagedAndroidUtilStateSet_VIEW_STATE_PRESSED);
          RepackagedAndroidViewView_PRESSED_ENABLED_SELECTED_WINDOW_FOCUSED_STATE_SET_ = RepackagedAndroidUtilStateSet_getWithInt_(
#line 1536
          RepackagedAndroidUtilStateSet_VIEW_STATE_WINDOW_FOCUSED | RepackagedAndroidUtilStateSet_VIEW_STATE_SELECTED |
#line 1537
          RepackagedAndroidUtilStateSet_VIEW_STATE_ENABLED | RepackagedAndroidUtilStateSet_VIEW_STATE_PRESSED);
          RepackagedAndroidViewView_PRESSED_ENABLED_FOCUSED_STATE_SET_ = RepackagedAndroidUtilStateSet_getWithInt_(
#line 1539
          RepackagedAndroidUtilStateSet_VIEW_STATE_FOCUSED | RepackagedAndroidUtilStateSet_VIEW_STATE_ENABLED |
#line 1540
          RepackagedAndroidUtilStateSet_VIEW_STATE_PRESSED);
          RepackagedAndroidViewView_PRESSED_ENABLED_FOCUSED_WINDOW_FOCUSED_STATE_SET_ = RepackagedAndroidUtilStateSet_getWithInt_(
#line 1542
          RepackagedAndroidUtilStateSet_VIEW_STATE_WINDOW_FOCUSED | RepackagedAndroidUtilStateSet_VIEW_STATE_FOCUSED |
#line 1543
          RepackagedAndroidUtilStateSet_VIEW_STATE_ENABLED | RepackagedAndroidUtilStateSet_VIEW_STATE_PRESSED);
          RepackagedAndroidViewView_PRESSED_ENABLED_FOCUSED_SELECTED_STATE_SET_ = RepackagedAndroidUtilStateSet_getWithInt_(
#line 1545
          RepackagedAndroidUtilStateSet_VIEW_STATE_SELECTED | RepackagedAndroidUtilStateSet_VIEW_STATE_FOCUSED |
#line 1546
          RepackagedAndroidUtilStateSet_VIEW_STATE_ENABLED | RepackagedAndroidUtilStateSet_VIEW_STATE_PRESSED);
          RepackagedAndroidViewView_PRESSED_ENABLED_FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET_ = RepackagedAndroidUtilStateSet_getWithInt_(
#line 1548
          RepackagedAndroidUtilStateSet_VIEW_STATE_WINDOW_FOCUSED | RepackagedAndroidUtilStateSet_VIEW_STATE_SELECTED |
#line 1549
          RepackagedAndroidUtilStateSet_VIEW_STATE_FOCUSED | RepackagedAndroidUtilStateSet_VIEW_STATE_ENABLED |
#line 1550
          RepackagedAndroidUtilStateSet_VIEW_STATE_PRESSED);
        }
        RepackagedAndroidViewView_sThreadLocal_ = new_JavaLangThreadLocal_init();
        RepackagedAndroidViewView_LAYOUT_DIRECTION_FLAGS_ = [IOSIntArray newArrayWithInts:(jint[]){
#line 1948
          RepackagedAndroidViewView_LAYOUT_DIRECTION_LTR,
#line 1949
          RepackagedAndroidViewView_LAYOUT_DIRECTION_RTL,
#line 1950
          RepackagedAndroidViewView_LAYOUT_DIRECTION_INHERIT,
#line 1951
          RepackagedAndroidViewView_LAYOUT_DIRECTION_LOCALE } count:4];
          RepackagedAndroidViewView_PFLAG2_TEXT_DIRECTION_FLAGS_ = [IOSIntArray newArrayWithInts:(jint[]){ LShift32(
#line 2043
          RepackagedAndroidViewView_TEXT_DIRECTION_INHERIT, RepackagedAndroidViewView_PFLAG2_TEXT_DIRECTION_MASK_SHIFT), LShift32(
#line 2044
          RepackagedAndroidViewView_TEXT_DIRECTION_FIRST_STRONG, RepackagedAndroidViewView_PFLAG2_TEXT_DIRECTION_MASK_SHIFT), LShift32(
#line 2045
          RepackagedAndroidViewView_TEXT_DIRECTION_ANY_RTL, RepackagedAndroidViewView_PFLAG2_TEXT_DIRECTION_MASK_SHIFT), LShift32(
#line 2046
          RepackagedAndroidViewView_TEXT_DIRECTION_LTR, RepackagedAndroidViewView_PFLAG2_TEXT_DIRECTION_MASK_SHIFT), LShift32(
#line 2047
          RepackagedAndroidViewView_TEXT_DIRECTION_RTL, RepackagedAndroidViewView_PFLAG2_TEXT_DIRECTION_MASK_SHIFT), LShift32(
#line 2048
          RepackagedAndroidViewView_TEXT_DIRECTION_LOCALE, RepackagedAndroidViewView_PFLAG2_TEXT_DIRECTION_MASK_SHIFT), LShift32(
#line 2049
          RepackagedAndroidViewView_TEXT_DIRECTION_FIRST_STRONG_LTR, RepackagedAndroidViewView_PFLAG2_TEXT_DIRECTION_MASK_SHIFT), LShift32(
#line 2050
          RepackagedAndroidViewView_TEXT_DIRECTION_FIRST_STRONG_RTL, RepackagedAndroidViewView_PFLAG2_TEXT_DIRECTION_MASK_SHIFT) } count:8];
          RepackagedAndroidViewView_PFLAG2_TEXT_ALIGNMENT_FLAGS_ = [IOSIntArray newArrayWithInts:(jint[]){ LShift32(
#line 2173
          RepackagedAndroidViewView_TEXT_ALIGNMENT_INHERIT, RepackagedAndroidViewView_PFLAG2_TEXT_ALIGNMENT_MASK_SHIFT), LShift32(
#line 2174
          RepackagedAndroidViewView_TEXT_ALIGNMENT_GRAVITY, RepackagedAndroidViewView_PFLAG2_TEXT_ALIGNMENT_MASK_SHIFT), LShift32(
#line 2175
          RepackagedAndroidViewView_TEXT_ALIGNMENT_TEXT_START, RepackagedAndroidViewView_PFLAG2_TEXT_ALIGNMENT_MASK_SHIFT), LShift32(
#line 2176
          RepackagedAndroidViewView_TEXT_ALIGNMENT_TEXT_END, RepackagedAndroidViewView_PFLAG2_TEXT_ALIGNMENT_MASK_SHIFT), LShift32(
#line 2177
          RepackagedAndroidViewView_TEXT_ALIGNMENT_CENTER, RepackagedAndroidViewView_PFLAG2_TEXT_ALIGNMENT_MASK_SHIFT), LShift32(
#line 2178
          RepackagedAndroidViewView_TEXT_ALIGNMENT_VIEW_START, RepackagedAndroidViewView_PFLAG2_TEXT_ALIGNMENT_MASK_SHIFT), LShift32(
#line 2179
          RepackagedAndroidViewView_TEXT_ALIGNMENT_VIEW_END, RepackagedAndroidViewView_PFLAG2_TEXT_ALIGNMENT_MASK_SHIFT) } count:7];
          RepackagedAndroidViewView_sNextGeneratedId_ = new_JavaUtilConcurrentAtomicAtomicInteger_initWithInt_(
#line 3747
          1);
          RepackagedAndroidViewView_ALPHA_ = new_RepackagedAndroidViewView_$1_initWithNSString_(
#line 20774
          @"alpha");
          RepackagedAndroidViewView_TRANSLATION_X_ = new_RepackagedAndroidViewView_$2_initWithNSString_(
#line 20790
          @"translationX");
          RepackagedAndroidViewView_TRANSLATION_Y_ = new_RepackagedAndroidViewView_$3_initWithNSString_(
#line 20806
          @"translationY");
          RepackagedAndroidViewView_TRANSLATION_Z_ = new_RepackagedAndroidViewView_$4_initWithNSString_(
#line 20822
          @"translationZ");
          RepackagedAndroidViewView_X_ = new_RepackagedAndroidViewView_$5_initWithNSString_(
#line 20838
          @"x");
          RepackagedAndroidViewView_Y_ = new_RepackagedAndroidViewView_$6_initWithNSString_(
#line 20854
          @"y");
          RepackagedAndroidViewView_Z_ = new_RepackagedAndroidViewView_$7_initWithNSString_(
#line 20870
          @"z");
          RepackagedAndroidViewView_ROTATION_ = new_RepackagedAndroidViewView_$8_initWithNSString_(
#line 20886
          @"rotation");
          RepackagedAndroidViewView_ROTATION_X_ = new_RepackagedAndroidViewView_$9_initWithNSString_(
#line 20902
          @"rotationX");
          RepackagedAndroidViewView_ROTATION_Y_ = new_RepackagedAndroidViewView_$10_initWithNSString_(
#line 20918
          @"rotationY");
          RepackagedAndroidViewView_SCALE_X_ = new_RepackagedAndroidViewView_$11_initWithNSString_(
#line 20934
          @"scaleX");
          RepackagedAndroidViewView_SCALE_Y_ = new_RepackagedAndroidViewView_$12_initWithNSString_(
#line 20950
          @"scaleY");
          J2OBJC_SET_INITIALIZED(RepackagedAndroidViewView)
        }
      }

+ (IOSObjectArray *)__annotations_hasFocus {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[RepackagedAndroidViewViewDebug_ExportedProperty alloc] initWithCategory:@"focus" withDeepExport:false withFlagMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withFormatToHexString:false withHasAdjacentMapping:false withIndexMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withPrefix:@"" withResolveId:false] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_getContentDescription {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[RepackagedAndroidViewViewDebug_ExportedProperty alloc] initWithCategory:@"accessibility" withDeepExport:false withFlagMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withFormatToHexString:false withHasAdjacentMapping:false withIndexMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withPrefix:@"" withResolveId:false] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_getLabelFor {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[RepackagedAndroidViewViewDebug_ExportedProperty alloc] initWithCategory:@"accessibility" withDeepExport:false withFlagMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withFormatToHexString:false withHasAdjacentMapping:false withIndexMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withPrefix:@"" withResolveId:false] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_isFocused {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[RepackagedAndroidViewViewDebug_ExportedProperty alloc] initWithCategory:@"focus" withDeepExport:false withFlagMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withFormatToHexString:false withHasAdjacentMapping:false withIndexMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withPrefix:@"" withResolveId:false] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_getFitsSystemWindows {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[RepackagedAndroidViewViewDebug_ExportedProperty alloc] initWithCategory:@"" withDeepExport:false withFlagMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withFormatToHexString:false withHasAdjacentMapping:false withIndexMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withPrefix:@"" withResolveId:false] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_getVisibility {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[RepackagedAndroidViewViewDebug_ExportedProperty alloc] initWithCategory:@"" withDeepExport:false withFlagMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withFormatToHexString:false withHasAdjacentMapping:false withIndexMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withMapping:[IOSObjectArray arrayWithObjects:(id[]) { [[RepackagedAndroidViewViewDebug_IntToString alloc] initWithFrom:0 withTo:@"VISIBLE"], [[RepackagedAndroidViewViewDebug_IntToString alloc] initWithFrom:4 withTo:@"INVISIBLE"], [[RepackagedAndroidViewViewDebug_IntToString alloc] initWithFrom:8 withTo:@"GONE"] } count:3 type:NSObject_class_()] withPrefix:@"" withResolveId:false] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_isEnabled {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[RepackagedAndroidViewViewDebug_ExportedProperty alloc] initWithCategory:@"" withDeepExport:false withFlagMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withFormatToHexString:false withHasAdjacentMapping:false withIndexMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withPrefix:@"" withResolveId:false] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_isSoundEffectsEnabled {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[RepackagedAndroidViewViewDebug_ExportedProperty alloc] initWithCategory:@"" withDeepExport:false withFlagMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withFormatToHexString:false withHasAdjacentMapping:false withIndexMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withPrefix:@"" withResolveId:false] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_isHapticFeedbackEnabled {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[RepackagedAndroidViewViewDebug_ExportedProperty alloc] initWithCategory:@"" withDeepExport:false withFlagMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withFormatToHexString:false withHasAdjacentMapping:false withIndexMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withPrefix:@"" withResolveId:false] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_getRawLayoutDirection {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[RepackagedAndroidViewViewDebug_ExportedProperty alloc] initWithCategory:@"layout" withDeepExport:false withFlagMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withFormatToHexString:false withHasAdjacentMapping:false withIndexMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withMapping:[IOSObjectArray arrayWithObjects:(id[]) { [[RepackagedAndroidViewViewDebug_IntToString alloc] initWithFrom:0 withTo:@"LTR"], [[RepackagedAndroidViewViewDebug_IntToString alloc] initWithFrom:1 withTo:@"RTL"], [[RepackagedAndroidViewViewDebug_IntToString alloc] initWithFrom:2 withTo:@"INHERIT"], [[RepackagedAndroidViewViewDebug_IntToString alloc] initWithFrom:3 withTo:@"LOCALE"] } count:4 type:NSObject_class_()] withPrefix:@"" withResolveId:false] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_getLayoutDirection {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[RepackagedAndroidViewViewDebug_ExportedProperty alloc] initWithCategory:@"layout" withDeepExport:false withFlagMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withFormatToHexString:false withHasAdjacentMapping:false withIndexMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withMapping:[IOSObjectArray arrayWithObjects:(id[]) { [[RepackagedAndroidViewViewDebug_IntToString alloc] initWithFrom:0 withTo:@"RESOLVED_DIRECTION_LTR"], [[RepackagedAndroidViewViewDebug_IntToString alloc] initWithFrom:1 withTo:@"RESOLVED_DIRECTION_RTL"] } count:2 type:NSObject_class_()] withPrefix:@"" withResolveId:false] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_isLayoutRtl {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[RepackagedAndroidViewViewDebug_ExportedProperty alloc] initWithCategory:@"layout" withDeepExport:false withFlagMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withFormatToHexString:false withHasAdjacentMapping:false withIndexMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withPrefix:@"" withResolveId:false] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_hasTransientState {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[RepackagedAndroidViewViewDebug_ExportedProperty alloc] initWithCategory:@"layout" withDeepExport:false withFlagMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withFormatToHexString:false withHasAdjacentMapping:false withIndexMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withPrefix:@"" withResolveId:false] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_willNotDraw {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[RepackagedAndroidViewViewDebug_ExportedProperty alloc] initWithCategory:@"drawing" withDeepExport:false withFlagMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withFormatToHexString:false withHasAdjacentMapping:false withIndexMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withPrefix:@"" withResolveId:false] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_willNotCacheDrawing {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[RepackagedAndroidViewViewDebug_ExportedProperty alloc] initWithCategory:@"drawing" withDeepExport:false withFlagMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withFormatToHexString:false withHasAdjacentMapping:false withIndexMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withPrefix:@"" withResolveId:false] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_isClickable {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[RepackagedAndroidViewViewDebug_ExportedProperty alloc] initWithCategory:@"" withDeepExport:false withFlagMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withFormatToHexString:false withHasAdjacentMapping:false withIndexMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withPrefix:@"" withResolveId:false] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_isPressed {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[RepackagedAndroidViewViewDebug_ExportedProperty alloc] initWithCategory:@"" withDeepExport:false withFlagMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withFormatToHexString:false withHasAdjacentMapping:false withIndexMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withPrefix:@"" withResolveId:false] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_getFilterTouchesWhenObscured {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[RepackagedAndroidViewViewDebug_ExportedProperty alloc] initWithCategory:@"" withDeepExport:false withFlagMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withFormatToHexString:false withHasAdjacentMapping:false withIndexMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withPrefix:@"" withResolveId:false] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_isFocusable {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[RepackagedAndroidViewViewDebug_ExportedProperty alloc] initWithCategory:@"focus" withDeepExport:false withFlagMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withFormatToHexString:false withHasAdjacentMapping:false withIndexMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withPrefix:@"" withResolveId:false] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_isFocusableInTouchMode {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[RepackagedAndroidViewViewDebug_ExportedProperty alloc] initWithCategory:@"" withDeepExport:false withFlagMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withFormatToHexString:false withHasAdjacentMapping:false withIndexMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withPrefix:@"" withResolveId:false] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_getImportantForAccessibility {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[RepackagedAndroidViewViewDebug_ExportedProperty alloc] initWithCategory:@"accessibility" withDeepExport:false withFlagMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withFormatToHexString:false withHasAdjacentMapping:false withIndexMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withMapping:[IOSObjectArray arrayWithObjects:(id[]) { [[RepackagedAndroidViewViewDebug_IntToString alloc] initWithFrom:0 withTo:@"auto"], [[RepackagedAndroidViewViewDebug_IntToString alloc] initWithFrom:1 withTo:@"yes"], [[RepackagedAndroidViewViewDebug_IntToString alloc] initWithFrom:2 withTo:@"no"], [[RepackagedAndroidViewViewDebug_IntToString alloc] initWithFrom:4 withTo:@"noHideDescendants"] } count:4 type:NSObject_class_()] withPrefix:@"" withResolveId:false] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_isInTouchMode {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[RepackagedAndroidViewViewDebug_ExportedProperty alloc] initWithCategory:@"" withDeepExport:false withFlagMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withFormatToHexString:false withHasAdjacentMapping:false withIndexMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withPrefix:@"" withResolveId:false] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_getContext {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[RepackagedAndroidViewViewDebug_CapturedViewProperty alloc] initWithRetrieveReturn:false] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_isHovered {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[RepackagedAndroidViewViewDebug_ExportedProperty alloc] initWithCategory:@"" withDeepExport:false withFlagMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withFormatToHexString:false withHasAdjacentMapping:false withIndexMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withPrefix:@"" withResolveId:false] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_getWidth {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[RepackagedAndroidViewViewDebug_ExportedProperty alloc] initWithCategory:@"layout" withDeepExport:false withFlagMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withFormatToHexString:false withHasAdjacentMapping:false withIndexMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withPrefix:@"" withResolveId:false] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_getHeight {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[RepackagedAndroidViewViewDebug_ExportedProperty alloc] initWithCategory:@"layout" withDeepExport:false withFlagMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withFormatToHexString:false withHasAdjacentMapping:false withIndexMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withPrefix:@"" withResolveId:false] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_getMeasuredWidthAndState {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[RepackagedAndroidViewViewDebug_ExportedProperty alloc] initWithCategory:@"measurement" withDeepExport:false withFlagMapping:[IOSObjectArray arrayWithObjects:(id[]) { [[RepackagedAndroidViewViewDebug_FlagToString alloc] initWithEquals:16777216 withMask:-16777216 withName:@"MEASURED_STATE_TOO_SMALL" withOutputIf:true] } count:1 type:NSObject_class_()] withFormatToHexString:false withHasAdjacentMapping:false withIndexMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withPrefix:@"" withResolveId:false] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_getMeasuredHeightAndState {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[RepackagedAndroidViewViewDebug_ExportedProperty alloc] initWithCategory:@"measurement" withDeepExport:false withFlagMapping:[IOSObjectArray arrayWithObjects:(id[]) { [[RepackagedAndroidViewViewDebug_FlagToString alloc] initWithEquals:16777216 withMask:-16777216 withName:@"MEASURED_STATE_TOO_SMALL" withOutputIf:true] } count:1 type:NSObject_class_()] withFormatToHexString:false withHasAdjacentMapping:false withIndexMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withPrefix:@"" withResolveId:false] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_getRotation {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[RepackagedAndroidViewViewDebug_ExportedProperty alloc] initWithCategory:@"drawing" withDeepExport:false withFlagMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withFormatToHexString:false withHasAdjacentMapping:false withIndexMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withPrefix:@"" withResolveId:false] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_getRotationY {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[RepackagedAndroidViewViewDebug_ExportedProperty alloc] initWithCategory:@"drawing" withDeepExport:false withFlagMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withFormatToHexString:false withHasAdjacentMapping:false withIndexMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withPrefix:@"" withResolveId:false] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_getRotationX {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[RepackagedAndroidViewViewDebug_ExportedProperty alloc] initWithCategory:@"drawing" withDeepExport:false withFlagMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withFormatToHexString:false withHasAdjacentMapping:false withIndexMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withPrefix:@"" withResolveId:false] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_getScaleX {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[RepackagedAndroidViewViewDebug_ExportedProperty alloc] initWithCategory:@"drawing" withDeepExport:false withFlagMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withFormatToHexString:false withHasAdjacentMapping:false withIndexMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withPrefix:@"" withResolveId:false] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_getScaleY {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[RepackagedAndroidViewViewDebug_ExportedProperty alloc] initWithCategory:@"drawing" withDeepExport:false withFlagMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withFormatToHexString:false withHasAdjacentMapping:false withIndexMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withPrefix:@"" withResolveId:false] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_getPivotX {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[RepackagedAndroidViewViewDebug_ExportedProperty alloc] initWithCategory:@"drawing" withDeepExport:false withFlagMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withFormatToHexString:false withHasAdjacentMapping:false withIndexMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withPrefix:@"" withResolveId:false] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_getPivotY {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[RepackagedAndroidViewViewDebug_ExportedProperty alloc] initWithCategory:@"drawing" withDeepExport:false withFlagMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withFormatToHexString:false withHasAdjacentMapping:false withIndexMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withPrefix:@"" withResolveId:false] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_getAlpha {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[RepackagedAndroidViewViewDebug_ExportedProperty alloc] initWithCategory:@"drawing" withDeepExport:false withFlagMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withFormatToHexString:false withHasAdjacentMapping:false withIndexMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withPrefix:@"" withResolveId:false] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_hasOverlappingRendering {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[RepackagedAndroidViewViewDebug_ExportedProperty alloc] initWithCategory:@"drawing" withDeepExport:false withFlagMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withFormatToHexString:false withHasAdjacentMapping:false withIndexMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withPrefix:@"" withResolveId:false] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_getTransitionAlpha {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[RepackagedAndroidViewViewDebug_ExportedProperty alloc] initWithCategory:@"drawing" withDeepExport:false withFlagMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withFormatToHexString:false withHasAdjacentMapping:false withIndexMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withPrefix:@"" withResolveId:false] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_getTop {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[RepackagedAndroidViewViewDebug_CapturedViewProperty alloc] initWithRetrieveReturn:false] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_getBottom {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[RepackagedAndroidViewViewDebug_CapturedViewProperty alloc] initWithRetrieveReturn:false] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_getLeft {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[RepackagedAndroidViewViewDebug_CapturedViewProperty alloc] initWithRetrieveReturn:false] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_getRight {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[RepackagedAndroidViewViewDebug_CapturedViewProperty alloc] initWithRetrieveReturn:false] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_getX {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[RepackagedAndroidViewViewDebug_ExportedProperty alloc] initWithCategory:@"drawing" withDeepExport:false withFlagMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withFormatToHexString:false withHasAdjacentMapping:false withIndexMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withPrefix:@"" withResolveId:false] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_getY {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[RepackagedAndroidViewViewDebug_ExportedProperty alloc] initWithCategory:@"drawing" withDeepExport:false withFlagMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withFormatToHexString:false withHasAdjacentMapping:false withIndexMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withPrefix:@"" withResolveId:false] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_getZ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[RepackagedAndroidViewViewDebug_ExportedProperty alloc] initWithCategory:@"drawing" withDeepExport:false withFlagMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withFormatToHexString:false withHasAdjacentMapping:false withIndexMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withPrefix:@"" withResolveId:false] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_getElevation {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[RepackagedAndroidViewViewDebug_ExportedProperty alloc] initWithCategory:@"drawing" withDeepExport:false withFlagMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withFormatToHexString:false withHasAdjacentMapping:false withIndexMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withPrefix:@"" withResolveId:false] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_getTranslationX {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[RepackagedAndroidViewViewDebug_ExportedProperty alloc] initWithCategory:@"drawing" withDeepExport:false withFlagMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withFormatToHexString:false withHasAdjacentMapping:false withIndexMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withPrefix:@"" withResolveId:false] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_getTranslationY {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[RepackagedAndroidViewViewDebug_ExportedProperty alloc] initWithCategory:@"drawing" withDeepExport:false withFlagMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withFormatToHexString:false withHasAdjacentMapping:false withIndexMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withPrefix:@"" withResolveId:false] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_getTranslationZ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[RepackagedAndroidViewViewDebug_ExportedProperty alloc] initWithCategory:@"drawing" withDeepExport:false withFlagMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withFormatToHexString:false withHasAdjacentMapping:false withIndexMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withPrefix:@"" withResolveId:false] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_hasShadow {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[RepackagedAndroidViewViewDebug_ExportedProperty alloc] initWithCategory:@"drawing" withDeepExport:false withFlagMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withFormatToHexString:false withHasAdjacentMapping:false withIndexMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withPrefix:@"" withResolveId:false] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_getLayoutParams {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[RepackagedAndroidViewViewDebug_ExportedProperty alloc] initWithCategory:@"" withDeepExport:true withFlagMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withFormatToHexString:false withHasAdjacentMapping:false withIndexMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withPrefix:@"layout_" withResolveId:false] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_isOpaque {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[RepackagedAndroidViewViewDebug_ExportedProperty alloc] initWithCategory:@"drawing" withDeepExport:false withFlagMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withFormatToHexString:false withHasAdjacentMapping:false withIndexMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withPrefix:@"" withResolveId:false] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_getScrollBarStyle {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[RepackagedAndroidViewViewDebug_ExportedProperty alloc] initWithCategory:@"" withDeepExport:false withFlagMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withFormatToHexString:false withHasAdjacentMapping:false withIndexMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withMapping:[IOSObjectArray arrayWithObjects:(id[]) { [[RepackagedAndroidViewViewDebug_IntToString alloc] initWithFrom:0 withTo:@"INSIDE_OVERLAY"], [[RepackagedAndroidViewViewDebug_IntToString alloc] initWithFrom:16777216 withTo:@"INSIDE_INSET"], [[RepackagedAndroidViewViewDebug_IntToString alloc] initWithFrom:33554432 withTo:@"OUTSIDE_OVERLAY"], [[RepackagedAndroidViewViewDebug_IntToString alloc] initWithFrom:50331648 withTo:@"OUTSIDE_INSET"] } count:4 type:NSObject_class_()] withPrefix:@"" withResolveId:false] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_isDrawingCacheEnabled {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[RepackagedAndroidViewViewDebug_ExportedProperty alloc] initWithCategory:@"drawing" withDeepExport:false withFlagMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withFormatToHexString:false withHasAdjacentMapping:false withIndexMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withPrefix:@"" withResolveId:false] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_isHardwareAccelerated {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[RepackagedAndroidViewViewDebug_ExportedProperty alloc] initWithCategory:@"drawing" withDeepExport:false withFlagMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withFormatToHexString:false withHasAdjacentMapping:false withIndexMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withPrefix:@"" withResolveId:false] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_getSolidColor {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[RepackagedAndroidViewViewDebug_ExportedProperty alloc] initWithCategory:@"drawing" withDeepExport:false withFlagMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withFormatToHexString:false withHasAdjacentMapping:false withIndexMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withPrefix:@"" withResolveId:false] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_setBackgroundDrawableWithRepackagedAndroidGraphicsDrawableDrawable_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[JavaLangDeprecated alloc] init] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_isSelected {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[RepackagedAndroidViewViewDebug_ExportedProperty alloc] initWithCategory:@"" withDeepExport:false withFlagMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withFormatToHexString:false withHasAdjacentMapping:false withIndexMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withPrefix:@"" withResolveId:false] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_isActivated {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[RepackagedAndroidViewViewDebug_ExportedProperty alloc] initWithCategory:@"" withDeepExport:false withFlagMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withFormatToHexString:false withHasAdjacentMapping:false withIndexMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withPrefix:@"" withResolveId:false] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_getLocationOnScreen {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[RepackagedAndroidViewViewDebug_ExportedProperty alloc] initWithCategory:@"layout" withDeepExport:false withFlagMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withFormatToHexString:false withHasAdjacentMapping:false withIndexMapping:[IOSObjectArray arrayWithObjects:(id[]) { [[RepackagedAndroidViewViewDebug_IntToString alloc] initWithFrom:0 withTo:@"x"], [[RepackagedAndroidViewViewDebug_IntToString alloc] initWithFrom:1 withTo:@"y"] } count:2 type:NSObject_class_()] withMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withPrefix:@"" withResolveId:false] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_getId {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[RepackagedAndroidViewViewDebug_CapturedViewProperty alloc] initWithRetrieveReturn:false] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_getTag {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[RepackagedAndroidViewViewDebug_ExportedProperty alloc] initWithCategory:@"" withDeepExport:false withFlagMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withFormatToHexString:false withHasAdjacentMapping:false withIndexMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withPrefix:@"" withResolveId:false] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_getBaseline {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[RepackagedAndroidViewViewDebug_ExportedProperty alloc] initWithCategory:@"layout" withDeepExport:false withFlagMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withFormatToHexString:false withHasAdjacentMapping:false withIndexMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withPrefix:@"" withResolveId:false] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_getRawTextDirection {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[RepackagedAndroidViewViewDebug_ExportedProperty alloc] initWithCategory:@"text" withDeepExport:false withFlagMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withFormatToHexString:false withHasAdjacentMapping:false withIndexMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withMapping:[IOSObjectArray arrayWithObjects:(id[]) { [[RepackagedAndroidViewViewDebug_IntToString alloc] initWithFrom:0 withTo:@"INHERIT"], [[RepackagedAndroidViewViewDebug_IntToString alloc] initWithFrom:1 withTo:@"FIRST_STRONG"], [[RepackagedAndroidViewViewDebug_IntToString alloc] initWithFrom:2 withTo:@"ANY_RTL"], [[RepackagedAndroidViewViewDebug_IntToString alloc] initWithFrom:3 withTo:@"LTR"], [[RepackagedAndroidViewViewDebug_IntToString alloc] initWithFrom:4 withTo:@"RTL"], [[RepackagedAndroidViewViewDebug_IntToString alloc] initWithFrom:5 withTo:@"LOCALE"], [[RepackagedAndroidViewViewDebug_IntToString alloc] initWithFrom:6 withTo:@"FIRST_STRONG_LTR"], [[RepackagedAndroidViewViewDebug_IntToString alloc] initWithFrom:7 withTo:@"FIRST_STRONG_RTL"] } count:8 type:NSObject_class_()] withPrefix:@"" withResolveId:false] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_getTextDirection {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[RepackagedAndroidViewViewDebug_ExportedProperty alloc] initWithCategory:@"text" withDeepExport:false withFlagMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withFormatToHexString:false withHasAdjacentMapping:false withIndexMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withMapping:[IOSObjectArray arrayWithObjects:(id[]) { [[RepackagedAndroidViewViewDebug_IntToString alloc] initWithFrom:0 withTo:@"INHERIT"], [[RepackagedAndroidViewViewDebug_IntToString alloc] initWithFrom:1 withTo:@"FIRST_STRONG"], [[RepackagedAndroidViewViewDebug_IntToString alloc] initWithFrom:2 withTo:@"ANY_RTL"], [[RepackagedAndroidViewViewDebug_IntToString alloc] initWithFrom:3 withTo:@"LTR"], [[RepackagedAndroidViewViewDebug_IntToString alloc] initWithFrom:4 withTo:@"RTL"], [[RepackagedAndroidViewViewDebug_IntToString alloc] initWithFrom:5 withTo:@"LOCALE"], [[RepackagedAndroidViewViewDebug_IntToString alloc] initWithFrom:6 withTo:@"FIRST_STRONG_LTR"], [[RepackagedAndroidViewViewDebug_IntToString alloc] initWithFrom:7 withTo:@"FIRST_STRONG_RTL"] } count:8 type:NSObject_class_()] withPrefix:@"" withResolveId:false] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_getRawTextAlignment {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[RepackagedAndroidViewViewDebug_ExportedProperty alloc] initWithCategory:@"text" withDeepExport:false withFlagMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withFormatToHexString:false withHasAdjacentMapping:false withIndexMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withMapping:[IOSObjectArray arrayWithObjects:(id[]) { [[RepackagedAndroidViewViewDebug_IntToString alloc] initWithFrom:0 withTo:@"INHERIT"], [[RepackagedAndroidViewViewDebug_IntToString alloc] initWithFrom:1 withTo:@"GRAVITY"], [[RepackagedAndroidViewViewDebug_IntToString alloc] initWithFrom:2 withTo:@"TEXT_START"], [[RepackagedAndroidViewViewDebug_IntToString alloc] initWithFrom:3 withTo:@"TEXT_END"], [[RepackagedAndroidViewViewDebug_IntToString alloc] initWithFrom:4 withTo:@"CENTER"], [[RepackagedAndroidViewViewDebug_IntToString alloc] initWithFrom:5 withTo:@"VIEW_START"], [[RepackagedAndroidViewViewDebug_IntToString alloc] initWithFrom:6 withTo:@"VIEW_END"] } count:7 type:NSObject_class_()] withPrefix:@"" withResolveId:false] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_getTextAlignment {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[RepackagedAndroidViewViewDebug_ExportedProperty alloc] initWithCategory:@"text" withDeepExport:false withFlagMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withFormatToHexString:false withHasAdjacentMapping:false withIndexMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withMapping:[IOSObjectArray arrayWithObjects:(id[]) { [[RepackagedAndroidViewViewDebug_IntToString alloc] initWithFrom:0 withTo:@"INHERIT"], [[RepackagedAndroidViewViewDebug_IntToString alloc] initWithFrom:1 withTo:@"GRAVITY"], [[RepackagedAndroidViewViewDebug_IntToString alloc] initWithFrom:2 withTo:@"TEXT_START"], [[RepackagedAndroidViewViewDebug_IntToString alloc] initWithFrom:3 withTo:@"TEXT_END"], [[RepackagedAndroidViewViewDebug_IntToString alloc] initWithFrom:4 withTo:@"CENTER"], [[RepackagedAndroidViewViewDebug_IntToString alloc] initWithFrom:5 withTo:@"VIEW_START"], [[RepackagedAndroidViewViewDebug_IntToString alloc] initWithFrom:6 withTo:@"VIEW_END"] } count:7 type:NSObject_class_()] withPrefix:@"" withResolveId:false] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_getTransitionName {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[RepackagedAndroidViewViewDebug_ExportedProperty alloc] initWithCategory:@"" withDeepExport:false withFlagMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withFormatToHexString:false withHasAdjacentMapping:false withIndexMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withPrefix:@"" withResolveId:false] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_mMeasuredWidth_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[RepackagedAndroidViewViewDebug_ExportedProperty alloc] initWithCategory:@"measurement" withDeepExport:false withFlagMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withFormatToHexString:false withHasAdjacentMapping:false withIndexMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withPrefix:@"" withResolveId:false] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_mMeasuredHeight_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[RepackagedAndroidViewViewDebug_ExportedProperty alloc] initWithCategory:@"measurement" withDeepExport:false withFlagMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withFormatToHexString:false withHasAdjacentMapping:false withIndexMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withPrefix:@"" withResolveId:false] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_mID_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[RepackagedAndroidViewViewDebug_ExportedProperty alloc] initWithCategory:@"" withDeepExport:false withFlagMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withFormatToHexString:false withHasAdjacentMapping:false withIndexMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withPrefix:@"" withResolveId:true] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_mPrivateFlags_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[RepackagedAndroidViewViewDebug_ExportedProperty alloc] initWithCategory:@"" withDeepExport:false withFlagMapping:[IOSObjectArray arrayWithObjects:(id[]) { [[RepackagedAndroidViewViewDebug_FlagToString alloc] initWithEquals:4096 withMask:4096 withName:@"FORCE_LAYOUT" withOutputIf:true], [[RepackagedAndroidViewViewDebug_FlagToString alloc] initWithEquals:8192 withMask:8192 withName:@"LAYOUT_REQUIRED" withOutputIf:true], [[RepackagedAndroidViewViewDebug_FlagToString alloc] initWithEquals:32768 withMask:32768 withName:@"DRAWING_CACHE_INVALID" withOutputIf:false], [[RepackagedAndroidViewViewDebug_FlagToString alloc] initWithEquals:32 withMask:32 withName:@"DRAWN" withOutputIf:true], [[RepackagedAndroidViewViewDebug_FlagToString alloc] initWithEquals:32 withMask:32 withName:@"NOT_DRAWN" withOutputIf:false], [[RepackagedAndroidViewViewDebug_FlagToString alloc] initWithEquals:4194304 withMask:6291456 withName:@"DIRTY_OPAQUE" withOutputIf:true], [[RepackagedAndroidViewViewDebug_FlagToString alloc] initWithEquals:2097152 withMask:6291456 withName:@"DIRTY" withOutputIf:true] } count:7 type:NSObject_class_()] withFormatToHexString:true withHasAdjacentMapping:false withIndexMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withPrefix:@"" withResolveId:false] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_mSystemUiVisibility_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[RepackagedAndroidViewViewDebug_ExportedProperty alloc] initWithCategory:@"" withDeepExport:false withFlagMapping:[IOSObjectArray arrayWithObjects:(id[]) { [[RepackagedAndroidViewViewDebug_FlagToString alloc] initWithEquals:1 withMask:1 withName:@"SYSTEM_UI_FLAG_LOW_PROFILE" withOutputIf:true], [[RepackagedAndroidViewViewDebug_FlagToString alloc] initWithEquals:2 withMask:2 withName:@"SYSTEM_UI_FLAG_HIDE_NAVIGATION" withOutputIf:true], [[RepackagedAndroidViewViewDebug_FlagToString alloc] initWithEquals:0 withMask:16383 withName:@"SYSTEM_UI_FLAG_VISIBLE" withOutputIf:true] } count:3 type:NSObject_class_()] withFormatToHexString:true withHasAdjacentMapping:false withIndexMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withPrefix:@"" withResolveId:false] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_mViewFlags_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[RepackagedAndroidViewViewDebug_ExportedProperty alloc] initWithCategory:@"" withDeepExport:false withFlagMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withFormatToHexString:true withHasAdjacentMapping:false withIndexMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withPrefix:@"" withResolveId:false] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_mLeft_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[RepackagedAndroidViewViewDebug_ExportedProperty alloc] initWithCategory:@"layout" withDeepExport:false withFlagMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withFormatToHexString:false withHasAdjacentMapping:false withIndexMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withPrefix:@"" withResolveId:false] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_mRight_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[RepackagedAndroidViewViewDebug_ExportedProperty alloc] initWithCategory:@"layout" withDeepExport:false withFlagMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withFormatToHexString:false withHasAdjacentMapping:false withIndexMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withPrefix:@"" withResolveId:false] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_mTop_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[RepackagedAndroidViewViewDebug_ExportedProperty alloc] initWithCategory:@"layout" withDeepExport:false withFlagMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withFormatToHexString:false withHasAdjacentMapping:false withIndexMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withPrefix:@"" withResolveId:false] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_mBottom_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[RepackagedAndroidViewViewDebug_ExportedProperty alloc] initWithCategory:@"layout" withDeepExport:false withFlagMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withFormatToHexString:false withHasAdjacentMapping:false withIndexMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withPrefix:@"" withResolveId:false] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_mScrollX_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[RepackagedAndroidViewViewDebug_ExportedProperty alloc] initWithCategory:@"scrolling" withDeepExport:false withFlagMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withFormatToHexString:false withHasAdjacentMapping:false withIndexMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withPrefix:@"" withResolveId:false] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_mScrollY_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[RepackagedAndroidViewViewDebug_ExportedProperty alloc] initWithCategory:@"scrolling" withDeepExport:false withFlagMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withFormatToHexString:false withHasAdjacentMapping:false withIndexMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withPrefix:@"" withResolveId:false] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_mPaddingLeft_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[RepackagedAndroidViewViewDebug_ExportedProperty alloc] initWithCategory:@"padding" withDeepExport:false withFlagMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withFormatToHexString:false withHasAdjacentMapping:false withIndexMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withPrefix:@"" withResolveId:false] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_mPaddingRight_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[RepackagedAndroidViewViewDebug_ExportedProperty alloc] initWithCategory:@"padding" withDeepExport:false withFlagMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withFormatToHexString:false withHasAdjacentMapping:false withIndexMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withPrefix:@"" withResolveId:false] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_mPaddingTop_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[RepackagedAndroidViewViewDebug_ExportedProperty alloc] initWithCategory:@"padding" withDeepExport:false withFlagMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withFormatToHexString:false withHasAdjacentMapping:false withIndexMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withPrefix:@"" withResolveId:false] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_mPaddingBottom_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[RepackagedAndroidViewViewDebug_ExportedProperty alloc] initWithCategory:@"padding" withDeepExport:false withFlagMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withFormatToHexString:false withHasAdjacentMapping:false withIndexMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withPrefix:@"" withResolveId:false] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_mUserPaddingRight_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[RepackagedAndroidViewViewDebug_ExportedProperty alloc] initWithCategory:@"padding" withDeepExport:false withFlagMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withFormatToHexString:false withHasAdjacentMapping:false withIndexMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withPrefix:@"" withResolveId:false] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_mUserPaddingBottom_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[RepackagedAndroidViewViewDebug_ExportedProperty alloc] initWithCategory:@"padding" withDeepExport:false withFlagMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withFormatToHexString:false withHasAdjacentMapping:false withIndexMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withPrefix:@"" withResolveId:false] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_mUserPaddingLeft_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[RepackagedAndroidViewViewDebug_ExportedProperty alloc] initWithCategory:@"padding" withDeepExport:false withFlagMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withFormatToHexString:false withHasAdjacentMapping:false withIndexMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withPrefix:@"" withResolveId:false] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_mUserPaddingStart_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[RepackagedAndroidViewViewDebug_ExportedProperty alloc] initWithCategory:@"padding" withDeepExport:false withFlagMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withFormatToHexString:false withHasAdjacentMapping:false withIndexMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withPrefix:@"" withResolveId:false] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_mUserPaddingEnd_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[RepackagedAndroidViewViewDebug_ExportedProperty alloc] initWithCategory:@"padding" withDeepExport:false withFlagMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withFormatToHexString:false withHasAdjacentMapping:false withIndexMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withPrefix:@"" withResolveId:false] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_mBackground_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[RepackagedAndroidViewViewDebug_ExportedProperty alloc] initWithCategory:@"" withDeepExport:true withFlagMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withFormatToHexString:false withHasAdjacentMapping:false withIndexMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withPrefix:@"bg_" withResolveId:false] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_mForegroundInfo_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[RepackagedAndroidViewViewDebug_ExportedProperty alloc] initWithCategory:@"" withDeepExport:true withFlagMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withFormatToHexString:false withHasAdjacentMapping:false withIndexMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withPrefix:@"fg_" withResolveId:false] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_mContext_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[RepackagedAndroidViewViewDebug_ExportedProperty alloc] initWithCategory:@"" withDeepExport:true withFlagMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withFormatToHexString:false withHasAdjacentMapping:false withIndexMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withPrefix:@"" withResolveId:false] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_mMinHeight_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[RepackagedAndroidViewViewDebug_ExportedProperty alloc] initWithCategory:@"measurement" withDeepExport:false withFlagMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withFormatToHexString:false withHasAdjacentMapping:false withIndexMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withPrefix:@"" withResolveId:false] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_mMinWidth_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[RepackagedAndroidViewViewDebug_ExportedProperty alloc] initWithCategory:@"measurement" withDeepExport:false withFlagMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withFormatToHexString:false withHasAdjacentMapping:false withIndexMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withPrefix:@"" withResolveId:false] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_mLayerType_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[RepackagedAndroidViewViewDebug_ExportedProperty alloc] initWithCategory:@"drawing" withDeepExport:false withFlagMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withFormatToHexString:false withHasAdjacentMapping:false withIndexMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withMapping:[IOSObjectArray arrayWithObjects:(id[]) { [[RepackagedAndroidViewViewDebug_IntToString alloc] initWithFrom:0 withTo:@"NONE"], [[RepackagedAndroidViewViewDebug_IntToString alloc] initWithFrom:1 withTo:@"SOFTWARE"], [[RepackagedAndroidViewViewDebug_IntToString alloc] initWithFrom:2 withTo:@"HARDWARE"] } count:3 type:NSObject_class_()] withPrefix:@"" withResolveId:false] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_mAttributes_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[RepackagedAndroidViewViewDebug_ExportedProperty alloc] initWithCategory:@"attributes" withDeepExport:false withFlagMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withFormatToHexString:false withHasAdjacentMapping:true withIndexMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withPrefix:@"" withResolveId:false] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithRepackagedAndroidContentContext:", "View", NULL, 0x1, NULL, NULL },
    { "initWithRepackagedAndroidContentContext:withRepackagedAndroidUtilAttributeSet:", "View", NULL, 0x1, NULL, NULL },
    { "initWithRepackagedAndroidContentContext:withRepackagedAndroidUtilAttributeSet:withInt:", "View", NULL, 0x1, NULL, NULL },
    { "initWithRepackagedAndroidContentContext:withRepackagedAndroidUtilAttributeSet:withInt:withInt:", "View", NULL, 0x1, NULL, NULL },
    { "init", "View", NULL, 0x0, NULL, NULL },
    { "getAttributeMap", NULL, "Lrepackaged.android.util.SparseArray;", 0xa, NULL, NULL },
    { "saveAttributeDataWithRepackagedAndroidUtilAttributeSet:withRepackagedAndroidContentResTypedArray:", "saveAttributeData", "V", 0x2, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "initializeFadingEdgeWithRepackagedAndroidContentResTypedArray:", "initializeFadingEdge", "V", 0x4, NULL, NULL },
    { "initializeFadingEdgeInternalWithRepackagedAndroidContentResTypedArray:", "initializeFadingEdgeInternal", "V", 0x4, NULL, NULL },
    { "getVerticalFadingEdgeLength", NULL, "I", 0x1, NULL, NULL },
    { "setFadingEdgeLengthWithInt:", "setFadingEdgeLength", "V", 0x1, NULL, NULL },
    { "getHorizontalFadingEdgeLength", NULL, "I", 0x1, NULL, NULL },
    { "getVerticalScrollbarWidth", NULL, "I", 0x1, NULL, NULL },
    { "getHorizontalScrollbarHeight", NULL, "I", 0x4, NULL, NULL },
    { "initializeScrollbarsWithRepackagedAndroidContentResTypedArray:", "initializeScrollbars", "V", 0x4, NULL, NULL },
    { "initializeScrollbarsInternalWithRepackagedAndroidContentResTypedArray:", "initializeScrollbarsInternal", "V", 0x4, NULL, NULL },
    { "initializeScrollIndicatorsInternal", NULL, "V", 0x2, NULL, NULL },
    { "initScrollCache", NULL, "V", 0x2, NULL, NULL },
    { "getScrollCache", NULL, "Lrepackaged.android.view.View$ScrollabilityCache;", 0x2, NULL, NULL },
    { "setVerticalScrollbarPositionWithInt:", "setVerticalScrollbarPosition", "V", 0x1, NULL, NULL },
    { "getVerticalScrollbarPosition", NULL, "I", 0x1, NULL, NULL },
    { "setScrollIndicatorsWithInt:", "setScrollIndicators", "V", 0x1, NULL, NULL },
    { "setScrollIndicatorsWithInt:withInt:", "setScrollIndicators", "V", 0x1, NULL, NULL },
    { "getScrollIndicators", NULL, "I", 0x1, NULL, NULL },
    { "getListenerInfo", NULL, "Lrepackaged.android.view.View$ListenerInfo;", 0x0, NULL, NULL },
    { "setOnScrollChangeListenerWithRepackagedAndroidViewView_OnScrollChangeListener:", "setOnScrollChangeListener", "V", 0x1, NULL, NULL },
    { "setOnFocusChangeListenerWithRepackagedAndroidViewView_OnFocusChangeListener:", "setOnFocusChangeListener", "V", 0x1, NULL, NULL },
    { "addOnLayoutChangeListenerWithRepackagedAndroidViewView_OnLayoutChangeListener:", "addOnLayoutChangeListener", "V", 0x1, NULL, NULL },
    { "removeOnLayoutChangeListenerWithRepackagedAndroidViewView_OnLayoutChangeListener:", "removeOnLayoutChangeListener", "V", 0x1, NULL, NULL },
    { "addOnAttachStateChangeListenerWithRepackagedAndroidViewView_OnAttachStateChangeListener:", "addOnAttachStateChangeListener", "V", 0x1, NULL, NULL },
    { "removeOnAttachStateChangeListenerWithRepackagedAndroidViewView_OnAttachStateChangeListener:", "removeOnAttachStateChangeListener", "V", 0x1, NULL, NULL },
    { "getOnFocusChangeListener", NULL, "Lrepackaged.android.view.View$OnFocusChangeListener;", 0x1, NULL, NULL },
    { "setOnClickListenerWithRepackagedAndroidViewView_OnClickListener:", "setOnClickListener", "V", 0x1, NULL, NULL },
    { "hasOnClickListeners", NULL, "Z", 0x1, NULL, NULL },
    { "setOnLongClickListenerWithRepackagedAndroidViewView_OnLongClickListener:", "setOnLongClickListener", "V", 0x1, NULL, NULL },
    { "setOnContextClickListenerWithRepackagedAndroidViewView_OnContextClickListener:", "setOnContextClickListener", "V", 0x1, NULL, NULL },
    { "setOnCreateContextMenuListenerWithRepackagedAndroidViewView_OnCreateContextMenuListener:", "setOnCreateContextMenuListener", "V", 0x1, NULL, NULL },
    { "performClick", NULL, "Z", 0x1, NULL, NULL },
    { "callOnClick", NULL, "Z", 0x1, NULL, NULL },
    { "performLongClick", NULL, "Z", 0x1, NULL, NULL },
    { "performContextClick", NULL, "Z", 0x1, NULL, NULL },
    { "performButtonActionOnTouchDownWithRepackagedAndroidViewMotionEvent:", "performButtonActionOnTouchDown", "Z", 0x4, NULL, NULL },
    { "showContextMenu", NULL, "Z", 0x1, NULL, NULL },
    { "showContextMenuWithFloat:withFloat:withInt:", "showContextMenu", "Z", 0x1, NULL, NULL },
    { "startActionModeWithRepackagedAndroidViewActionMode_Callback:", "startActionMode", "Lrepackaged.android.view.ActionMode;", 0x1, NULL, NULL },
    { "startActionModeWithRepackagedAndroidViewActionMode_Callback:withInt:", "startActionMode", "Lrepackaged.android.view.ActionMode;", 0x1, NULL, NULL },
    { "startActivityForResultWithRepackagedAndroidContentIntent:withInt:", "startActivityForResult", "V", 0x1, NULL, NULL },
    { "dispatchActivityResultWithNSString:withInt:withInt:withRepackagedAndroidContentIntent:", "dispatchActivityResult", "Z", 0x1, NULL, NULL },
    { "onActivityResultWithInt:withInt:withRepackagedAndroidContentIntent:", "onActivityResult", "V", 0x1, NULL, NULL },
    { "setOnKeyListenerWithRepackagedAndroidViewView_OnKeyListener:", "setOnKeyListener", "V", 0x1, NULL, NULL },
    { "setOnTouchListenerWithRepackagedAndroidViewView_OnTouchListener:", "setOnTouchListener", "V", 0x1, NULL, NULL },
    { "setOnGenericMotionListenerWithRepackagedAndroidViewView_OnGenericMotionListener:", "setOnGenericMotionListener", "V", 0x1, NULL, NULL },
    { "setOnHoverListenerWithRepackagedAndroidViewView_OnHoverListener:", "setOnHoverListener", "V", 0x1, NULL, NULL },
    { "setOnDragListenerWithRepackagedAndroidViewView_OnDragListener:", "setOnDragListener", "V", 0x1, NULL, NULL },
    { "handleFocusGainInternalWithInt:withRepackagedAndroidGraphicsRect:", "handleFocusGainInternal", "V", 0x0, NULL, NULL },
    { "getHotspotBoundsWithRepackagedAndroidGraphicsRect:", "getHotspotBounds", "V", 0x1, NULL, NULL },
    { "requestRectangleOnScreenWithRepackagedAndroidGraphicsRect:", "requestRectangleOnScreen", "Z", 0x1, NULL, NULL },
    { "requestRectangleOnScreenWithRepackagedAndroidGraphicsRect:withBoolean:", "requestRectangleOnScreen", "Z", 0x1, NULL, NULL },
    { "clearFocus", NULL, "V", 0x1, NULL, NULL },
    { "clearFocusInternalWithRepackagedAndroidViewView:withBoolean:withBoolean:", "clearFocusInternal", "V", 0x0, NULL, NULL },
    { "notifyGlobalFocusClearedWithRepackagedAndroidViewView:", "notifyGlobalFocusCleared", "V", 0x0, NULL, NULL },
    { "rootViewRequestFocus", NULL, "Z", 0x0, NULL, NULL },
    { "unFocusWithRepackagedAndroidViewView:", "unFocus", "V", 0x0, NULL, NULL },
    { "hasFocus", NULL, "Z", 0x1, NULL, NULL },
    { "hasFocusable", NULL, "Z", 0x1, NULL, NULL },
    { "onFocusChangedWithBoolean:withInt:withRepackagedAndroidGraphicsRect:", "onFocusChanged", "V", 0x4, NULL, NULL },
    { "sendAccessibilityEventWithInt:", "sendAccessibilityEvent", "V", 0x1, NULL, NULL },
    { "announceForAccessibilityWithJavaLangCharSequence:", "announceForAccessibility", "V", 0x1, NULL, NULL },
    { "sendAccessibilityEventInternalWithInt:", "sendAccessibilityEventInternal", "V", 0x1, NULL, NULL },
    { "sendAccessibilityEventUncheckedWithRepackagedAndroidViewAccessibilityAccessibilityEvent:", "sendAccessibilityEventUnchecked", "V", 0x1, NULL, NULL },
    { "sendAccessibilityEventUncheckedInternalWithRepackagedAndroidViewAccessibilityAccessibilityEvent:", "sendAccessibilityEventUncheckedInternal", "V", 0x1, NULL, NULL },
    { "dispatchPopulateAccessibilityEventWithRepackagedAndroidViewAccessibilityAccessibilityEvent:", "dispatchPopulateAccessibilityEvent", "Z", 0x1, NULL, NULL },
    { "dispatchPopulateAccessibilityEventInternalWithRepackagedAndroidViewAccessibilityAccessibilityEvent:", "dispatchPopulateAccessibilityEventInternal", "Z", 0x1, NULL, NULL },
    { "onPopulateAccessibilityEventWithRepackagedAndroidViewAccessibilityAccessibilityEvent:", "onPopulateAccessibilityEvent", "V", 0x1, NULL, NULL },
    { "onPopulateAccessibilityEventInternalWithRepackagedAndroidViewAccessibilityAccessibilityEvent:", "onPopulateAccessibilityEventInternal", "V", 0x1, NULL, NULL },
    { "onInitializeAccessibilityEventWithRepackagedAndroidViewAccessibilityAccessibilityEvent:", "onInitializeAccessibilityEvent", "V", 0x1, NULL, NULL },
    { "onInitializeAccessibilityEventInternalWithRepackagedAndroidViewAccessibilityAccessibilityEvent:", "onInitializeAccessibilityEventInternal", "V", 0x1, NULL, NULL },
    { "createAccessibilityNodeInfo", NULL, "Lrepackaged.android.view.accessibility.AccessibilityNodeInfo;", 0x1, NULL, NULL },
    { "createAccessibilityNodeInfoInternal", NULL, "Lrepackaged.android.view.accessibility.AccessibilityNodeInfo;", 0x1, NULL, NULL },
    { "onInitializeAccessibilityNodeInfoWithRepackagedAndroidViewAccessibilityAccessibilityNodeInfo:", "onInitializeAccessibilityNodeInfo", "V", 0x1, NULL, NULL },
    { "getBoundsOnScreenWithRepackagedAndroidGraphicsRect:", "getBoundsOnScreen", "V", 0x1, NULL, NULL },
    { "getBoundsOnScreenWithRepackagedAndroidGraphicsRect:withBoolean:", "getBoundsOnScreen", "V", 0x1, NULL, NULL },
    { "getAccessibilityClassName", NULL, "Ljava.lang.CharSequence;", 0x1, NULL, NULL },
    { "onProvideStructureWithRepackagedAndroidViewViewStructure:", "onProvideStructure", "V", 0x1, NULL, NULL },
    { "onProvideVirtualStructureWithRepackagedAndroidViewViewStructure:", "onProvideVirtualStructure", "V", 0x1, NULL, NULL },
    { "populateVirtualStructureWithRepackagedAndroidViewViewStructure:withRepackagedAndroidViewAccessibilityAccessibilityNodeProvider:withRepackagedAndroidViewAccessibilityAccessibilityNodeInfo:", "populateVirtualStructure", "V", 0x2, NULL, NULL },
    { "dispatchProvideStructureWithRepackagedAndroidViewViewStructure:", "dispatchProvideStructure", "V", 0x1, NULL, NULL },
    { "onInitializeAccessibilityNodeInfoInternalWithRepackagedAndroidViewAccessibilityAccessibilityNodeInfo:", "onInitializeAccessibilityNodeInfoInternal", "V", 0x1, NULL, NULL },
    { "findLabelForViewWithRepackagedAndroidViewView:withInt:", "findLabelForView", "Lrepackaged.android.view.View;", 0x2, NULL, NULL },
    { "isVisibleToUser", NULL, "Z", 0x4, NULL, NULL },
    { "isVisibleToUserWithRepackagedAndroidGraphicsRect:", "isVisibleToUser", "Z", 0x4, NULL, NULL },
    { "getAccessibilityDelegate", NULL, "Lrepackaged.android.view.View$AccessibilityDelegate;", 0x1, NULL, NULL },
    { "setAccessibilityDelegateWithRepackagedAndroidViewView_AccessibilityDelegate:", "setAccessibilityDelegate", "V", 0x1, NULL, NULL },
    { "getAccessibilityNodeProvider", NULL, "Lrepackaged.android.view.accessibility.AccessibilityNodeProvider;", 0x1, NULL, NULL },
    { "getAccessibilityViewId", NULL, "I", 0x1, NULL, NULL },
    { "getAccessibilityWindowId", NULL, "I", 0x1, NULL, NULL },
    { "getContentDescription", NULL, "Ljava.lang.CharSequence;", 0x1, NULL, NULL },
    { "setContentDescriptionWithJavaLangCharSequence:", "setContentDescription", "V", 0x1, NULL, NULL },
    { "setAccessibilityTraversalBeforeWithInt:", "setAccessibilityTraversalBefore", "V", 0x1, NULL, NULL },
    { "getAccessibilityTraversalBefore", NULL, "I", 0x1, NULL, NULL },
    { "setAccessibilityTraversalAfterWithInt:", "setAccessibilityTraversalAfter", "V", 0x1, NULL, NULL },
    { "getAccessibilityTraversalAfter", NULL, "I", 0x1, NULL, NULL },
    { "getLabelFor", NULL, "I", 0x1, NULL, NULL },
    { "setLabelForWithInt:", "setLabelFor", "V", 0x1, NULL, NULL },
    { "onFocusLost", NULL, "V", 0x4, NULL, NULL },
    { "resetPressedState", NULL, "V", 0x2, NULL, NULL },
    { "isFocused", NULL, "Z", 0x1, NULL, NULL },
    { "findFocus", NULL, "Lrepackaged.android.view.View;", 0x1, NULL, NULL },
    { "isScrollContainer", NULL, "Z", 0x1, NULL, NULL },
    { "setScrollContainerWithBoolean:", "setScrollContainer", "V", 0x1, NULL, NULL },
    { "getDrawingCacheQuality", NULL, "I", 0x1, NULL, NULL },
    { "setDrawingCacheQualityWithInt:", "setDrawingCacheQuality", "V", 0x1, NULL, NULL },
    { "getKeepScreenOn", NULL, "Z", 0x1, NULL, NULL },
    { "setKeepScreenOnWithBoolean:", "setKeepScreenOn", "V", 0x1, NULL, NULL },
    { "getNextFocusLeftId", NULL, "I", 0x1, NULL, NULL },
    { "setNextFocusLeftIdWithInt:", "setNextFocusLeftId", "V", 0x1, NULL, NULL },
    { "getNextFocusRightId", NULL, "I", 0x1, NULL, NULL },
    { "setNextFocusRightIdWithInt:", "setNextFocusRightId", "V", 0x1, NULL, NULL },
    { "getNextFocusUpId", NULL, "I", 0x1, NULL, NULL },
    { "setNextFocusUpIdWithInt:", "setNextFocusUpId", "V", 0x1, NULL, NULL },
    { "getNextFocusDownId", NULL, "I", 0x1, NULL, NULL },
    { "setNextFocusDownIdWithInt:", "setNextFocusDownId", "V", 0x1, NULL, NULL },
    { "getNextFocusForwardId", NULL, "I", 0x1, NULL, NULL },
    { "setNextFocusForwardIdWithInt:", "setNextFocusForwardId", "V", 0x1, NULL, NULL },
    { "isShown", NULL, "Z", 0x1, NULL, NULL },
    { "fitSystemWindowsWithRepackagedAndroidGraphicsRect:", "fitSystemWindows", "Z", 0x4, NULL, NULL },
    { "fitSystemWindowsIntWithRepackagedAndroidGraphicsRect:", "fitSystemWindowsInt", "Z", 0x2, NULL, NULL },
    { "onApplyWindowInsetsWithRepackagedAndroidViewWindowInsets:", "onApplyWindowInsets", "Lrepackaged.android.view.WindowInsets;", 0x1, NULL, NULL },
    { "setOnApplyWindowInsetsListenerWithRepackagedAndroidViewView_OnApplyWindowInsetsListener:", "setOnApplyWindowInsetsListener", "V", 0x1, NULL, NULL },
    { "dispatchApplyWindowInsetsWithRepackagedAndroidViewWindowInsets:", "dispatchApplyWindowInsets", "Lrepackaged.android.view.WindowInsets;", 0x1, NULL, NULL },
    { "getRootWindowInsets", NULL, "Lrepackaged.android.view.WindowInsets;", 0x1, NULL, NULL },
    { "computeFitSystemWindowsWithRepackagedAndroidGraphicsRect:withRepackagedAndroidGraphicsRect:", "computeFitSystemWindows", "Z", 0x4, NULL, NULL },
    { "computeSystemWindowInsetsWithRepackagedAndroidViewWindowInsets:withRepackagedAndroidGraphicsRect:", "computeSystemWindowInsets", "Lrepackaged.android.view.WindowInsets;", 0x1, NULL, NULL },
    { "setFitsSystemWindowsWithBoolean:", "setFitsSystemWindows", "V", 0x1, NULL, NULL },
    { "getFitsSystemWindows", NULL, "Z", 0x1, NULL, NULL },
    { "fitsSystemWindows", NULL, "Z", 0x1, NULL, NULL },
    { "requestFitSystemWindows", NULL, "V", 0x1, NULL, NULL },
    { "requestApplyInsets", NULL, "V", 0x1, NULL, NULL },
    { "makeOptionalFitsSystemWindows", NULL, "V", 0x1, NULL, NULL },
    { "getOutsetsWithRepackagedAndroidGraphicsRect:", "getOutsets", "V", 0x1, NULL, NULL },
    { "getVisibility", NULL, "I", 0x1, NULL, NULL },
    { "setVisibilityWithInt:", "setVisibility", "V", 0x1, NULL, NULL },
    { "isEnabled", NULL, "Z", 0x1, NULL, NULL },
    { "setEnabledWithBoolean:", "setEnabled", "V", 0x1, NULL, NULL },
    { "setFocusableWithBoolean:", "setFocusable", "V", 0x1, NULL, NULL },
    { "setFocusableInTouchModeWithBoolean:", "setFocusableInTouchMode", "V", 0x1, NULL, NULL },
    { "setSoundEffectsEnabledWithBoolean:", "setSoundEffectsEnabled", "V", 0x1, NULL, NULL },
    { "isSoundEffectsEnabled", NULL, "Z", 0x1, NULL, NULL },
    { "setHapticFeedbackEnabledWithBoolean:", "setHapticFeedbackEnabled", "V", 0x1, NULL, NULL },
    { "isHapticFeedbackEnabled", NULL, "Z", 0x1, NULL, NULL },
    { "getRawLayoutDirection", NULL, "I", 0x1, NULL, NULL },
    { "setLayoutDirectionWithInt:", "setLayoutDirection", "V", 0x1, NULL, NULL },
    { "getLayoutDirection", NULL, "I", 0x1, NULL, NULL },
    { "isLayoutRtl", NULL, "Z", 0x1, NULL, NULL },
    { "hasTransientState", NULL, "Z", 0x1, NULL, NULL },
    { "setHasTransientStateWithBoolean:", "setHasTransientState", "V", 0x1, NULL, NULL },
    { "isAttachedToWindow", NULL, "Z", 0x1, NULL, NULL },
    { "isLaidOut", NULL, "Z", 0x1, NULL, NULL },
    { "setWillNotDrawWithBoolean:", "setWillNotDraw", "V", 0x1, NULL, NULL },
    { "willNotDraw", NULL, "Z", 0x1, NULL, NULL },
    { "setWillNotCacheDrawingWithBoolean:", "setWillNotCacheDrawing", "V", 0x1, NULL, NULL },
    { "willNotCacheDrawing", NULL, "Z", 0x1, NULL, NULL },
    { "isClickable", NULL, "Z", 0x1, NULL, NULL },
    { "setClickableWithBoolean:", "setClickable", "V", 0x1, NULL, NULL },
    { "isLongClickable", NULL, "Z", 0x1, NULL, NULL },
    { "setLongClickableWithBoolean:", "setLongClickable", "V", 0x1, NULL, NULL },
    { "isContextClickable", NULL, "Z", 0x1, NULL, NULL },
    { "setContextClickableWithBoolean:", "setContextClickable", "V", 0x1, NULL, NULL },
    { "setPressedWithBoolean:withFloat:withFloat:", "setPressed", "V", 0x2, NULL, NULL },
    { "setPressedWithBoolean:", "setPressed", "V", 0x1, NULL, NULL },
    { "dispatchSetPressedWithBoolean:", "dispatchSetPressed", "V", 0x4, NULL, NULL },
    { "isPressed", NULL, "Z", 0x1, NULL, NULL },
    { "isAssistBlocked", NULL, "Z", 0x1, NULL, NULL },
    { "setAssistBlockedWithBoolean:", "setAssistBlocked", "V", 0x1, NULL, NULL },
    { "isSaveEnabled", NULL, "Z", 0x1, NULL, NULL },
    { "setSaveEnabledWithBoolean:", "setSaveEnabled", "V", 0x1, NULL, NULL },
    { "getFilterTouchesWhenObscured", NULL, "Z", 0x1, NULL, NULL },
    { "setFilterTouchesWhenObscuredWithBoolean:", "setFilterTouchesWhenObscured", "V", 0x1, NULL, NULL },
    { "isSaveFromParentEnabled", NULL, "Z", 0x1, NULL, NULL },
    { "setSaveFromParentEnabledWithBoolean:", "setSaveFromParentEnabled", "V", 0x1, NULL, NULL },
    { "isFocusable", NULL, "Z", 0x11, NULL, NULL },
    { "isFocusableInTouchMode", NULL, "Z", 0x11, NULL, NULL },
    { "focusSearchWithInt:", "focusSearch", "Lrepackaged.android.view.View;", 0x1, NULL, NULL },
    { "dispatchUnhandledMoveWithRepackagedAndroidViewView:withInt:", "dispatchUnhandledMove", "Z", 0x1, NULL, NULL },
    { "findUserSetNextFocusWithRepackagedAndroidViewView:withInt:", "findUserSetNextFocus", "Lrepackaged.android.view.View;", 0x0, NULL, NULL },
    { "findViewInsideOutShouldExistWithRepackagedAndroidViewView:withInt:", "findViewInsideOutShouldExist", "Lrepackaged.android.view.View;", 0x2, NULL, NULL },
    { "getFocusablesWithInt:", "getFocusables", "Ljava.util.ArrayList;", 0x1, NULL, NULL },
    { "addFocusablesWithJavaUtilArrayList:withInt:", "addFocusables", "V", 0x1, NULL, NULL },
    { "addFocusablesWithJavaUtilArrayList:withInt:withInt:", "addFocusables", "V", 0x1, NULL, NULL },
    { "findViewsWithTextWithJavaUtilArrayList:withJavaLangCharSequence:withInt:", "findViewsWithText", "V", 0x1, NULL, NULL },
    { "getTouchables", NULL, "Ljava.util.ArrayList;", 0x1, NULL, NULL },
    { "addTouchablesWithJavaUtilArrayList:", "addTouchables", "V", 0x1, NULL, NULL },
    { "isAccessibilityFocused", NULL, "Z", 0x1, NULL, NULL },
    { "requestAccessibilityFocus", NULL, "Z", 0x1, NULL, NULL },
    { "clearAccessibilityFocus", NULL, "V", 0x1, NULL, NULL },
    { "sendAccessibilityHoverEventWithInt:", "sendAccessibilityHoverEvent", "V", 0x2, NULL, NULL },
    { "clearAccessibilityFocusNoCallbacks", NULL, "V", 0x0, NULL, NULL },
    { "requestFocus", NULL, "Z", 0x11, NULL, NULL },
    { "requestFocusWithInt:", "requestFocus", "Z", 0x11, NULL, NULL },
    { "requestFocusWithInt:withRepackagedAndroidGraphicsRect:", "requestFocus", "Z", 0x1, NULL, NULL },
    { "requestFocusNoSearchWithInt:withRepackagedAndroidGraphicsRect:", "requestFocusNoSearch", "Z", 0x2, NULL, NULL },
    { "requestFocusFromTouch", NULL, "Z", 0x11, NULL, NULL },
    { "hasAncestorThatBlocksDescendantFocus", NULL, "Z", 0x2, NULL, NULL },
    { "getImportantForAccessibility", NULL, "I", 0x1, NULL, NULL },
    { "setAccessibilityLiveRegionWithInt:", "setAccessibilityLiveRegion", "V", 0x1, NULL, NULL },
    { "getAccessibilityLiveRegion", NULL, "I", 0x1, NULL, NULL },
    { "setImportantForAccessibilityWithInt:", "setImportantForAccessibility", "V", 0x1, NULL, NULL },
    { "isImportantForAccessibility", NULL, "Z", 0x1, NULL, NULL },
    { "getParentForAccessibility", NULL, "Lrepackaged.android.view.ViewParent;", 0x1, NULL, NULL },
    { "addChildrenForAccessibilityWithJavaUtilArrayList:", "addChildrenForAccessibility", "V", 0x1, NULL, NULL },
    { "includeForAccessibility", NULL, "Z", 0x1, NULL, NULL },
    { "isActionableForAccessibility", NULL, "Z", 0x1, NULL, NULL },
    { "hasListenersForAccessibility", NULL, "Z", 0x2, NULL, NULL },
    { "notifyViewAccessibilityStateChangedIfNeededWithInt:", "notifyViewAccessibilityStateChangedIfNeeded", "V", 0x1, NULL, NULL },
    { "notifySubtreeAccessibilityStateChangedIfNeeded", NULL, "V", 0x1, NULL, NULL },
    { "setTransitionVisibilityWithInt:", "setTransitionVisibility", "V", 0x1, NULL, NULL },
    { "resetSubtreeAccessibilityStateChanged", NULL, "V", 0x0, NULL, NULL },
    { "dispatchNestedPrePerformAccessibilityActionWithInt:withRepackagedAndroidOsBundle:", "dispatchNestedPrePerformAccessibilityAction", "Z", 0x1, NULL, NULL },
    { "performAccessibilityActionWithInt:withRepackagedAndroidOsBundle:", "performAccessibilityAction", "Z", 0x1, NULL, NULL },
    { "performAccessibilityActionInternalWithInt:withRepackagedAndroidOsBundle:", "performAccessibilityActionInternal", "Z", 0x1, NULL, NULL },
    { "traverseAtGranularityWithInt:withBoolean:withBoolean:", "traverseAtGranularity", "Z", 0x2, NULL, NULL },
    { "getIterableTextForAccessibility", NULL, "Ljava.lang.CharSequence;", 0x1, NULL, NULL },
    { "isAccessibilitySelectionExtendable", NULL, "Z", 0x1, NULL, NULL },
    { "getAccessibilitySelectionStart", NULL, "I", 0x1, NULL, NULL },
    { "getAccessibilitySelectionEnd", NULL, "I", 0x1, NULL, NULL },
    { "setAccessibilitySelectionWithInt:withInt:", "setAccessibilitySelection", "V", 0x1, NULL, NULL },
    { "sendViewTextTraversedAtGranularityEventWithInt:withInt:withInt:withInt:", "sendViewTextTraversedAtGranularityEvent", "V", 0x2, NULL, NULL },
    { "getIteratorForGranularityWithInt:", "getIteratorForGranularity", "Lrepackaged.android.view.AccessibilityIterators$TextSegmentIterator;", 0x1, NULL, NULL },
    { "dispatchStartTemporaryDetach", NULL, "V", 0x1, NULL, NULL },
    { "onStartTemporaryDetach", NULL, "V", 0x1, NULL, NULL },
    { "dispatchFinishTemporaryDetach", NULL, "V", 0x1, NULL, NULL },
    { "onFinishTemporaryDetach", NULL, "V", 0x1, NULL, NULL },
    { "getKeyDispatcherState", NULL, "Lrepackaged.android.view.KeyEvent$DispatcherState;", 0x1, NULL, NULL },
    { "dispatchKeyEventPreImeWithRepackagedAndroidViewKeyEvent:", "dispatchKeyEventPreIme", "Z", 0x1, NULL, NULL },
    { "dispatchKeyEventWithRepackagedAndroidViewKeyEvent:", "dispatchKeyEvent", "Z", 0x1, NULL, NULL },
    { "dispatchKeyShortcutEventWithRepackagedAndroidViewKeyEvent:", "dispatchKeyShortcutEvent", "Z", 0x1, NULL, NULL },
    { "dispatchTouchEventWithRepackagedAndroidViewMotionEvent:", "dispatchTouchEvent", "Z", 0x1, NULL, NULL },
    { "isAccessibilityFocusedViewOrHost", NULL, "Z", 0x0, NULL, NULL },
    { "onFilterTouchEventForSecurityWithRepackagedAndroidViewMotionEvent:", "onFilterTouchEventForSecurity", "Z", 0x1, NULL, NULL },
    { "dispatchTrackballEventWithRepackagedAndroidViewMotionEvent:", "dispatchTrackballEvent", "Z", 0x1, NULL, NULL },
    { "dispatchGenericMotionEventWithRepackagedAndroidViewMotionEvent:", "dispatchGenericMotionEvent", "Z", 0x1, NULL, NULL },
    { "dispatchGenericMotionEventInternalWithRepackagedAndroidViewMotionEvent:", "dispatchGenericMotionEventInternal", "Z", 0x2, NULL, NULL },
    { "dispatchHoverEventWithRepackagedAndroidViewMotionEvent:", "dispatchHoverEvent", "Z", 0x4, NULL, NULL },
    { "hasHoveredChild", NULL, "Z", 0x4, NULL, NULL },
    { "dispatchGenericPointerEventWithRepackagedAndroidViewMotionEvent:", "dispatchGenericPointerEvent", "Z", 0x4, NULL, NULL },
    { "dispatchGenericFocusedEventWithRepackagedAndroidViewMotionEvent:", "dispatchGenericFocusedEvent", "Z", 0x4, NULL, NULL },
    { "dispatchPointerEventWithRepackagedAndroidViewMotionEvent:", "dispatchPointerEvent", "Z", 0x11, NULL, NULL },
    { "dispatchWindowFocusChangedWithBoolean:", "dispatchWindowFocusChanged", "V", 0x1, NULL, NULL },
    { "onWindowFocusChangedWithBoolean:", "onWindowFocusChanged", "V", 0x1, NULL, NULL },
    { "hasWindowFocus", NULL, "Z", 0x1, NULL, NULL },
    { "dispatchVisibilityChangedWithRepackagedAndroidViewView:withInt:", "dispatchVisibilityChanged", "V", 0x4, NULL, NULL },
    { "onVisibilityChangedWithRepackagedAndroidViewView:withInt:", "onVisibilityChanged", "V", 0x4, NULL, NULL },
    { "dispatchDisplayHintWithInt:", "dispatchDisplayHint", "V", 0x1, NULL, NULL },
    { "onDisplayHintWithInt:", "onDisplayHint", "V", 0x4, NULL, NULL },
    { "dispatchWindowVisibilityChangedWithInt:", "dispatchWindowVisibilityChanged", "V", 0x1, NULL, NULL },
    { "onWindowVisibilityChangedWithInt:", "onWindowVisibilityChanged", "V", 0x4, NULL, NULL },
    { "getWindowVisibility", NULL, "I", 0x1, NULL, NULL },
    { "getWindowVisibleDisplayFrameWithRepackagedAndroidGraphicsRect:", "getWindowVisibleDisplayFrame", "V", 0x1, NULL, NULL },
    { "dispatchConfigurationChangedWithRepackagedAndroidContentResConfiguration:", "dispatchConfigurationChanged", "V", 0x1, NULL, NULL },
    { "onConfigurationChangedWithRepackagedAndroidContentResConfiguration:", "onConfigurationChanged", "V", 0x4, NULL, NULL },
    { "dispatchCollectViewAttributesWithRepackagedAndroidViewView_AttachInfo:withInt:", "dispatchCollectViewAttributes", "V", 0x0, NULL, NULL },
    { "performCollectViewAttributesWithRepackagedAndroidViewView_AttachInfo:withInt:", "performCollectViewAttributes", "V", 0x0, NULL, NULL },
    { "needGlobalAttributesUpdateWithBoolean:", "needGlobalAttributesUpdate", "V", 0x0, NULL, NULL },
    { "isInTouchMode", NULL, "Z", 0x1, NULL, NULL },
    { "getContext", NULL, "Lrepackaged.android.content.Context;", 0x11, NULL, NULL },
    { "onKeyPreImeWithInt:withRepackagedAndroidViewKeyEvent:", "onKeyPreIme", "Z", 0x1, NULL, NULL },
    { "onKeyDownWithInt:withRepackagedAndroidViewKeyEvent:", "onKeyDown", "Z", 0x1, NULL, NULL },
    { "onKeyLongPressWithInt:withRepackagedAndroidViewKeyEvent:", "onKeyLongPress", "Z", 0x1, NULL, NULL },
    { "onKeyUpWithInt:withRepackagedAndroidViewKeyEvent:", "onKeyUp", "Z", 0x1, NULL, NULL },
    { "onKeyMultipleWithInt:withInt:withRepackagedAndroidViewKeyEvent:", "onKeyMultiple", "Z", 0x1, NULL, NULL },
    { "onKeyShortcutWithInt:withRepackagedAndroidViewKeyEvent:", "onKeyShortcut", "Z", 0x1, NULL, NULL },
    { "onCheckIsTextEditor", NULL, "Z", 0x1, NULL, NULL },
    { "onCreateInputConnectionWithRepackagedAndroidViewInputmethodEditorInfo:", "onCreateInputConnection", "Lrepackaged.android.view.inputmethod.InputConnection;", 0x1, NULL, NULL },
    { "checkInputConnectionProxyWithRepackagedAndroidViewView:", "checkInputConnectionProxy", "Z", 0x1, NULL, NULL },
    { "createContextMenuWithRepackagedAndroidViewContextMenu:", "createContextMenu", "V", 0x1, NULL, NULL },
    { "getContextMenuInfo", NULL, "Lrepackaged.android.view.ContextMenu$ContextMenuInfo;", 0x4, NULL, NULL },
    { "onCreateContextMenuWithRepackagedAndroidViewContextMenu:", "onCreateContextMenu", "V", 0x4, NULL, NULL },
    { "onTrackballEventWithRepackagedAndroidViewMotionEvent:", "onTrackballEvent", "Z", 0x1, NULL, NULL },
    { "onGenericMotionEventWithRepackagedAndroidViewMotionEvent:", "onGenericMotionEvent", "Z", 0x1, NULL, NULL },
    { "onHoverEventWithRepackagedAndroidViewMotionEvent:", "onHoverEvent", "Z", 0x1, NULL, NULL },
    { "isHoverable", NULL, "Z", 0x2, NULL, NULL },
    { "isHovered", NULL, "Z", 0x1, NULL, NULL },
    { "setHoveredWithBoolean:", "setHovered", "V", 0x1, NULL, NULL },
    { "onHoverChangedWithBoolean:", "onHoverChanged", "V", 0x1, NULL, NULL },
    { "onTouchEventWithRepackagedAndroidViewMotionEvent:", "onTouchEvent", "Z", 0x1, NULL, NULL },
    { "isInScrollingContainer", NULL, "Z", 0x1, NULL, NULL },
    { "removeLongPressCallback", NULL, "V", 0x2, NULL, NULL },
    { "removePerformClickCallback", NULL, "V", 0x2, NULL, NULL },
    { "removeUnsetPressCallback", NULL, "V", 0x2, NULL, NULL },
    { "removeTapCallback", NULL, "V", 0x2, NULL, NULL },
    { "cancelLongPress", NULL, "V", 0x1, NULL, NULL },
    { "removeSendViewScrolledAccessibilityEventCallback", NULL, "V", 0x2, NULL, NULL },
    { "setTouchDelegateWithRepackagedAndroidViewTouchDelegate:", "setTouchDelegate", "V", 0x1, NULL, NULL },
    { "getTouchDelegate", NULL, "Lrepackaged.android.view.TouchDelegate;", 0x1, NULL, NULL },
    { "requestUnbufferedDispatchWithRepackagedAndroidViewMotionEvent:", "requestUnbufferedDispatch", "V", 0x11, NULL, NULL },
    { "setFlagsWithInt:withInt:", "setFlags", "V", 0x0, NULL, NULL },
    { "bringToFront", NULL, "V", 0x1, NULL, NULL },
    { "onScrollChangedWithInt:withInt:withInt:withInt:", "onScrollChanged", "V", 0x4, NULL, NULL },
    { "onSizeChangedWithInt:withInt:withInt:withInt:", "onSizeChanged", "V", 0x4, NULL, NULL },
    { "dispatchDrawWithRepackagedAndroidGraphicsCanvas:", "dispatchDraw", "V", 0x4, NULL, NULL },
    { "getParent", NULL, "Lrepackaged.android.view.ViewParent;", 0x11, NULL, NULL },
    { "setScrollXWithInt:", "setScrollX", "V", 0x1, NULL, NULL },
    { "setScrollYWithInt:", "setScrollY", "V", 0x1, NULL, NULL },
    { "getScrollX", NULL, "I", 0x11, NULL, NULL },
    { "getScrollY", NULL, "I", 0x11, NULL, NULL },
    { "getWidth", NULL, "I", 0x11, NULL, NULL },
    { "getHeight", NULL, "I", 0x11, NULL, NULL },
    { "getDrawingRectWithRepackagedAndroidGraphicsRect:", "getDrawingRect", "V", 0x1, NULL, NULL },
    { "getMeasuredWidth", NULL, "I", 0x11, NULL, NULL },
    { "getMeasuredWidthAndState", NULL, "I", 0x11, NULL, NULL },
    { "getMeasuredHeight", NULL, "I", 0x11, NULL, NULL },
    { "getMeasuredHeightAndState", NULL, "I", 0x11, NULL, NULL },
    { "getMeasuredState", NULL, "I", 0x11, NULL, NULL },
    { "getMatrix", NULL, "Lrepackaged.android.graphics.Matrix;", 0x1, NULL, NULL },
    { "hasIdentityMatrix", NULL, "Z", 0x10, NULL, NULL },
    { "ensureTransformationInfo", NULL, "V", 0x0, NULL, NULL },
    { "getInverseMatrix", NULL, "Lrepackaged.android.graphics.Matrix;", 0x11, NULL, NULL },
    { "getCameraDistance", NULL, "F", 0x1, NULL, NULL },
    { "setCameraDistanceWithFloat:", "setCameraDistance", "V", 0x1, NULL, NULL },
    { "getRotation", NULL, "F", 0x1, NULL, NULL },
    { "setRotationWithFloat:", "setRotation", "V", 0x1, NULL, NULL },
    { "getRotationY", NULL, "F", 0x1, NULL, NULL },
    { "setRotationYWithFloat:", "setRotationY", "V", 0x1, NULL, NULL },
    { "getRotationX", NULL, "F", 0x1, NULL, NULL },
    { "setRotationXWithFloat:", "setRotationX", "V", 0x1, NULL, NULL },
    { "getScaleX", NULL, "F", 0x1, NULL, NULL },
    { "setScaleXWithFloat:", "setScaleX", "V", 0x1, NULL, NULL },
    { "getScaleY", NULL, "F", 0x1, NULL, NULL },
    { "setScaleYWithFloat:", "setScaleY", "V", 0x1, NULL, NULL },
    { "getPivotX", NULL, "F", 0x1, NULL, NULL },
    { "setPivotXWithFloat:", "setPivotX", "V", 0x1, NULL, NULL },
    { "getPivotY", NULL, "F", 0x1, NULL, NULL },
    { "setPivotYWithFloat:", "setPivotY", "V", 0x1, NULL, NULL },
    { "getAlpha", NULL, "F", 0x1, NULL, NULL },
    { "hasOverlappingRendering", NULL, "Z", 0x1, NULL, NULL },
    { "setAlphaWithFloat:", "setAlpha", "V", 0x1, NULL, NULL },
    { "setAlphaNoInvalidationWithFloat:", "setAlphaNoInvalidation", "Z", 0x0, NULL, NULL },
    { "setTransitionAlphaWithFloat:", "setTransitionAlpha", "V", 0x1, NULL, NULL },
    { "getFinalAlpha", NULL, "F", 0x2, NULL, NULL },
    { "getTransitionAlpha", NULL, "F", 0x1, NULL, NULL },
    { "getTop", NULL, "I", 0x11, NULL, NULL },
    { "setTopWithInt:", "setTop", "V", 0x11, NULL, NULL },
    { "getBottom", NULL, "I", 0x11, NULL, NULL },
    { "isDirty", NULL, "Z", 0x1, NULL, NULL },
    { "setBottomWithInt:", "setBottom", "V", 0x11, NULL, NULL },
    { "getLeft", NULL, "I", 0x11, NULL, NULL },
    { "setLeftWithInt:", "setLeft", "V", 0x11, NULL, NULL },
    { "getRight", NULL, "I", 0x11, NULL, NULL },
    { "setRightWithInt:", "setRight", "V", 0x11, NULL, NULL },
    { "getX", NULL, "F", 0x1, NULL, NULL },
    { "setXWithFloat:", "setX", "V", 0x1, NULL, NULL },
    { "getY", NULL, "F", 0x1, NULL, NULL },
    { "setYWithFloat:", "setY", "V", 0x1, NULL, NULL },
    { "getZ", NULL, "F", 0x1, NULL, NULL },
    { "setZWithFloat:", "setZ", "V", 0x1, NULL, NULL },
    { "getElevation", NULL, "F", 0x1, NULL, NULL },
    { "setElevationWithFloat:", "setElevation", "V", 0x1, NULL, NULL },
    { "getTranslationX", NULL, "F", 0x1, NULL, NULL },
    { "setTranslationXWithFloat:", "setTranslationX", "V", 0x1, NULL, NULL },
    { "getTranslationY", NULL, "F", 0x1, NULL, NULL },
    { "setTranslationYWithFloat:", "setTranslationY", "V", 0x1, NULL, NULL },
    { "getTranslationZ", NULL, "F", 0x1, NULL, NULL },
    { "setTranslationZWithFloat:", "setTranslationZ", "V", 0x1, NULL, NULL },
    { "setAnimationMatrixWithRepackagedAndroidGraphicsMatrix:", "setAnimationMatrix", "V", 0x1, NULL, NULL },
    { "getStateListAnimator", NULL, "Lrepackaged.android.animation.StateListAnimator;", 0x1, NULL, NULL },
    { "setStateListAnimatorWithRepackagedAndroidAnimationStateListAnimator:", "setStateListAnimator", "V", 0x1, NULL, NULL },
    { "getClipToOutline", NULL, "Z", 0x11, NULL, NULL },
    { "setClipToOutlineWithBoolean:", "setClipToOutline", "V", 0x1, NULL, NULL },
    { "setOutlineProviderFromAttributeWithInt:", "setOutlineProviderFromAttribute", "V", 0x2, NULL, NULL },
    { "setOutlineProviderWithRepackagedAndroidViewViewOutlineProvider:", "setOutlineProvider", "V", 0x1, NULL, NULL },
    { "getOutlineProvider", NULL, "Lrepackaged.android.view.ViewOutlineProvider;", 0x1, NULL, NULL },
    { "invalidateOutline", NULL, "V", 0x1, NULL, NULL },
    { "rebuildOutline", NULL, "V", 0x2, NULL, NULL },
    { "hasShadow", NULL, "Z", 0x1, NULL, NULL },
    { "setRevealClipWithBoolean:withFloat:withFloat:withFloat:", "setRevealClip", "V", 0x1, NULL, NULL },
    { "getHitRectWithRepackagedAndroidGraphicsRect:", "getHitRect", "V", 0x1, NULL, NULL },
    { "pointInViewWithFloat:withFloat:", "pointInView", "Z", 0x10, NULL, NULL },
    { "pointInViewWithFloat:withFloat:withFloat:", "pointInView", "Z", 0x1, NULL, NULL },
    { "getFocusedRectWithRepackagedAndroidGraphicsRect:", "getFocusedRect", "V", 0x1, NULL, NULL },
    { "getGlobalVisibleRectWithRepackagedAndroidGraphicsRect:withRepackagedAndroidGraphicsPoint:", "getGlobalVisibleRect", "Z", 0x1, NULL, NULL },
    { "getGlobalVisibleRectWithRepackagedAndroidGraphicsRect:", "getGlobalVisibleRect", "Z", 0x11, NULL, NULL },
    { "getLocalVisibleRectWithRepackagedAndroidGraphicsRect:", "getLocalVisibleRect", "Z", 0x11, NULL, NULL },
    { "offsetTopAndBottomWithInt:", "offsetTopAndBottom", "V", 0x1, NULL, NULL },
    { "offsetLeftAndRightWithInt:", "offsetLeftAndRight", "V", 0x1, NULL, NULL },
    { "getLayoutParams", NULL, "Lrepackaged.android.view.ViewGroup$LayoutParams;", 0x1, NULL, NULL },
    { "setLayoutParamsWithRepackagedAndroidViewViewGroup_LayoutParams:", "setLayoutParams", "V", 0x1, NULL, NULL },
    { "resolveLayoutParams", NULL, "V", 0x1, NULL, NULL },
    { "scrollToWithInt:withInt:", "scrollTo", "V", 0x1, NULL, NULL },
    { "scrollByWithInt:withInt:", "scrollBy", "V", 0x1, NULL, NULL },
    { "awakenScrollBars", NULL, "Z", 0x4, NULL, NULL },
    { "initialAwakenScrollBars", NULL, "Z", 0x2, NULL, NULL },
    { "awakenScrollBarsWithInt:", "awakenScrollBars", "Z", 0x4, NULL, NULL },
    { "awakenScrollBarsWithInt:withBoolean:", "awakenScrollBars", "Z", 0x4, NULL, NULL },
    { "skipInvalidate", NULL, "Z", 0x2, NULL, NULL },
    { "invalidateWithRepackagedAndroidGraphicsRect:", "invalidate", "V", 0x1, NULL, NULL },
    { "invalidateWithInt:withInt:withInt:withInt:", "invalidate", "V", 0x1, NULL, NULL },
    { "invalidate", NULL, "V", 0x1, NULL, NULL },
    { "invalidateWithBoolean:", "invalidate", "V", 0x0, NULL, NULL },
    { "invalidateInternalWithInt:withInt:withInt:withInt:withBoolean:withBoolean:", "invalidateInternal", "V", 0x0, NULL, NULL },
    { "getProjectionReceiver", NULL, "Lrepackaged.android.view.View;", 0x2, NULL, NULL },
    { "isProjectionReceiver", NULL, "Z", 0x2, NULL, NULL },
    { "damageShadowReceiver", NULL, "V", 0x2, NULL, NULL },
    { "invalidateViewPropertyWithBoolean:withBoolean:", "invalidateViewProperty", "V", 0x0, NULL, NULL },
    { "damageInParent", NULL, "V", 0x4, NULL, NULL },
    { "transformRectWithRepackagedAndroidGraphicsRect:", "transformRect", "V", 0x0, NULL, NULL },
    { "invalidateParentCaches", NULL, "V", 0x4, NULL, NULL },
    { "invalidateParentIfNeeded", NULL, "V", 0x4, NULL, NULL },
    { "invalidateParentIfNeededAndWasQuickRejected", NULL, "V", 0x4, NULL, NULL },
    { "isOpaque", NULL, "Z", 0x1, NULL, NULL },
    { "computeOpaqueFlags", NULL, "V", 0x4, NULL, NULL },
    { "hasOpaqueScrollbars", NULL, "Z", 0x4, NULL, NULL },
    { "getHandler", NULL, "Lrepackaged.android.os.Handler;", 0x1, NULL, NULL },
    { "getViewRootImpl", NULL, "Lrepackaged.android.view.ViewRootImpl;", 0x1, NULL, NULL },
    { "getHardwareRenderer", NULL, "Lrepackaged.android.view.HardwareRenderer;", 0x1, NULL, NULL },
    { "postWithJavaLangRunnable:", "post", "Z", 0x1, NULL, NULL },
    { "postDelayedWithJavaLangRunnable:withLong:", "postDelayed", "Z", 0x1, NULL, NULL },
    { "postOnAnimationWithJavaLangRunnable:", "postOnAnimation", "V", 0x1, NULL, NULL },
    { "postOnAnimationDelayedWithJavaLangRunnable:withLong:", "postOnAnimationDelayed", "V", 0x1, NULL, NULL },
    { "removeCallbacksWithJavaLangRunnable:", "removeCallbacks", "Z", 0x1, NULL, NULL },
    { "postInvalidate", NULL, "V", 0x1, NULL, NULL },
    { "postInvalidateWithInt:withInt:withInt:withInt:", "postInvalidate", "V", 0x1, NULL, NULL },
    { "postInvalidateDelayedWithLong:", "postInvalidateDelayed", "V", 0x1, NULL, NULL },
    { "postInvalidateDelayedWithLong:withInt:withInt:withInt:withInt:", "postInvalidateDelayed", "V", 0x1, NULL, NULL },
    { "postInvalidateOnAnimation", NULL, "V", 0x1, NULL, NULL },
    { "postInvalidateOnAnimationWithInt:withInt:withInt:withInt:", "postInvalidateOnAnimation", "V", 0x1, NULL, NULL },
    { "postSendViewScrolledAccessibilityEventCallback", NULL, "V", 0x2, NULL, NULL },
    { "computeScroll", NULL, "V", 0x1, NULL, NULL },
    { "isHorizontalFadingEdgeEnabled", NULL, "Z", 0x1, NULL, NULL },
    { "setHorizontalFadingEdgeEnabledWithBoolean:", "setHorizontalFadingEdgeEnabled", "V", 0x1, NULL, NULL },
    { "isVerticalFadingEdgeEnabled", NULL, "Z", 0x1, NULL, NULL },
    { "setVerticalFadingEdgeEnabledWithBoolean:", "setVerticalFadingEdgeEnabled", "V", 0x1, NULL, NULL },
    { "getTopFadingEdgeStrength", NULL, "F", 0x4, NULL, NULL },
    { "getBottomFadingEdgeStrength", NULL, "F", 0x4, NULL, NULL },
    { "getLeftFadingEdgeStrength", NULL, "F", 0x4, NULL, NULL },
    { "getRightFadingEdgeStrength", NULL, "F", 0x4, NULL, NULL },
    { "isHorizontalScrollBarEnabled", NULL, "Z", 0x1, NULL, NULL },
    { "setHorizontalScrollBarEnabledWithBoolean:", "setHorizontalScrollBarEnabled", "V", 0x1, NULL, NULL },
    { "isVerticalScrollBarEnabled", NULL, "Z", 0x1, NULL, NULL },
    { "setVerticalScrollBarEnabledWithBoolean:", "setVerticalScrollBarEnabled", "V", 0x1, NULL, NULL },
    { "recomputePadding", NULL, "V", 0x4, NULL, NULL },
    { "setScrollbarFadingEnabledWithBoolean:", "setScrollbarFadingEnabled", "V", 0x1, NULL, NULL },
    { "isScrollbarFadingEnabled", NULL, "Z", 0x1, NULL, NULL },
    { "getScrollBarDefaultDelayBeforeFade", NULL, "I", 0x1, NULL, NULL },
    { "setScrollBarDefaultDelayBeforeFadeWithInt:", "setScrollBarDefaultDelayBeforeFade", "V", 0x1, NULL, NULL },
    { "getScrollBarFadeDuration", NULL, "I", 0x1, NULL, NULL },
    { "setScrollBarFadeDurationWithInt:", "setScrollBarFadeDuration", "V", 0x1, NULL, NULL },
    { "getScrollBarSize", NULL, "I", 0x1, NULL, NULL },
    { "setScrollBarSizeWithInt:", "setScrollBarSize", "V", 0x1, NULL, NULL },
    { "setScrollBarStyleWithInt:", "setScrollBarStyle", "V", 0x1, NULL, NULL },
    { "getScrollBarStyle", NULL, "I", 0x1, NULL, NULL },
    { "computeHorizontalScrollRange", NULL, "I", 0x4, NULL, NULL },
    { "computeHorizontalScrollOffset", NULL, "I", 0x4, NULL, NULL },
    { "computeHorizontalScrollExtent", NULL, "I", 0x4, NULL, NULL },
    { "computeVerticalScrollRange", NULL, "I", 0x4, NULL, NULL },
    { "computeVerticalScrollOffset", NULL, "I", 0x4, NULL, NULL },
    { "computeVerticalScrollExtent", NULL, "I", 0x4, NULL, NULL },
    { "canScrollHorizontallyWithInt:", "canScrollHorizontally", "Z", 0x1, NULL, NULL },
    { "canScrollVerticallyWithInt:", "canScrollVertically", "Z", 0x1, NULL, NULL },
    { "getScrollIndicatorBoundsWithRepackagedAndroidGraphicsRect:", "getScrollIndicatorBounds", "V", 0x0, NULL, NULL },
    { "onDrawScrollIndicatorsWithRepackagedAndroidGraphicsCanvas:", "onDrawScrollIndicators", "V", 0x2, NULL, NULL },
    { "onDrawScrollBarsWithRepackagedAndroidGraphicsCanvas:", "onDrawScrollBars", "V", 0x14, NULL, NULL },
    { "isVerticalScrollBarHidden", NULL, "Z", 0x4, NULL, NULL },
    { "onDrawHorizontalScrollBarWithRepackagedAndroidGraphicsCanvas:withRepackagedAndroidGraphicsDrawableDrawable:withInt:withInt:withInt:withInt:", "onDrawHorizontalScrollBar", "V", 0x4, NULL, NULL },
    { "onDrawVerticalScrollBarWithRepackagedAndroidGraphicsCanvas:withRepackagedAndroidGraphicsDrawableDrawable:withInt:withInt:withInt:withInt:", "onDrawVerticalScrollBar", "V", 0x4, NULL, NULL },
    { "onDrawWithRepackagedAndroidGraphicsCanvas:", "onDraw", "V", 0x4, NULL, NULL },
    { "assignParentWithRepackagedAndroidViewViewParent:", "assignParent", "V", 0x0, NULL, NULL },
    { "onAttachedToWindow", NULL, "V", 0x4, NULL, NULL },
    { "resolveRtlPropertiesIfNeeded", NULL, "Z", 0x1, NULL, NULL },
    { "resetRtlProperties", NULL, "V", 0x1, NULL, NULL },
    { "dispatchScreenStateChangedWithInt:", "dispatchScreenStateChanged", "V", 0x0, NULL, NULL },
    { "onScreenStateChangedWithInt:", "onScreenStateChanged", "V", 0x1, NULL, NULL },
    { "hasRtlSupport", NULL, "Z", 0x2, NULL, NULL },
    { "isRtlCompatibilityMode", NULL, "Z", 0x2, NULL, NULL },
    { "needRtlPropertiesResolution", NULL, "Z", 0x2, NULL, NULL },
    { "onRtlPropertiesChangedWithInt:", "onRtlPropertiesChanged", "V", 0x1, NULL, NULL },
    { "resolveLayoutDirection", NULL, "Z", 0x1, NULL, NULL },
    { "canResolveLayoutDirection", NULL, "Z", 0x1, NULL, NULL },
    { "resetResolvedLayoutDirection", NULL, "V", 0x1, NULL, NULL },
    { "isLayoutDirectionInherited", NULL, "Z", 0x1, NULL, NULL },
    { "isLayoutDirectionResolved", NULL, "Z", 0x1, NULL, NULL },
    { "isPaddingResolved", NULL, "Z", 0x0, NULL, NULL },
    { "resolvePadding", NULL, "V", 0x1, NULL, NULL },
    { "resetResolvedPadding", NULL, "V", 0x1, NULL, NULL },
    { "resetResolvedPaddingInternal", NULL, "V", 0x0, NULL, NULL },
    { "onDetachedFromWindow", NULL, "V", 0x4, NULL, NULL },
    { "onDetachedFromWindowInternal", NULL, "V", 0x4, NULL, NULL },
    { "cleanupDraw", NULL, "V", 0x2, NULL, NULL },
    { "invalidateInheritedLayoutModeWithInt:", "invalidateInheritedLayoutMode", "V", 0x0, NULL, NULL },
    { "getWindowAttachCount", NULL, "I", 0x4, NULL, NULL },
    { "getWindowToken", NULL, "Lrepackaged.android.os.IBinder;", 0x1, NULL, NULL },
    { "getWindowId", NULL, "Lrepackaged.android.view.WindowId;", 0x1, NULL, NULL },
    { "getApplicationWindowToken", NULL, "Lrepackaged.android.os.IBinder;", 0x1, NULL, NULL },
    { "getDisplay", NULL, "Lrepackaged.android.view.Display;", 0x1, NULL, NULL },
    { "getWindowSession", NULL, "Lrepackaged.android.view.IWindowSession;", 0x0, NULL, NULL },
    { "combineVisibilityWithInt:withInt:", "combineVisibility", "I", 0x0, NULL, NULL },
    { "dispatchAttachedToWindowWithRepackagedAndroidViewView_AttachInfo:withInt:", "dispatchAttachedToWindow", "V", 0x0, NULL, NULL },
    { "dispatchDetachedFromWindow", NULL, "V", 0x0, NULL, NULL },
    { "cancelPendingInputEvents", NULL, "V", 0x11, NULL, NULL },
    { "dispatchCancelPendingInputEvents", NULL, "V", 0x0, NULL, NULL },
    { "onCancelPendingInputEvents", NULL, "V", 0x1, NULL, NULL },
    { "saveHierarchyStateWithRepackagedAndroidUtilSparseArray:", "saveHierarchyState", "V", 0x1, NULL, NULL },
    { "dispatchSaveInstanceStateWithRepackagedAndroidUtilSparseArray:", "dispatchSaveInstanceState", "V", 0x4, NULL, NULL },
    { "onSaveInstanceState", NULL, "Lrepackaged.android.os.Parcelable;", 0x4, NULL, NULL },
    { "restoreHierarchyStateWithRepackagedAndroidUtilSparseArray:", "restoreHierarchyState", "V", 0x1, NULL, NULL },
    { "dispatchRestoreInstanceStateWithRepackagedAndroidUtilSparseArray:", "dispatchRestoreInstanceState", "V", 0x4, NULL, NULL },
    { "onRestoreInstanceStateWithRepackagedAndroidOsParcelable:", "onRestoreInstanceState", "V", 0x4, NULL, NULL },
    { "getDrawingTime", NULL, "J", 0x1, NULL, NULL },
    { "setDuplicateParentStateEnabledWithBoolean:", "setDuplicateParentStateEnabled", "V", 0x1, NULL, NULL },
    { "isDuplicateParentStateEnabled", NULL, "Z", 0x1, NULL, NULL },
    { "setLayerTypeWithInt:withRepackagedAndroidGraphicsPaint:", "setLayerType", "V", 0x1, NULL, NULL },
    { "setLayerPaintWithRepackagedAndroidGraphicsPaint:", "setLayerPaint", "V", 0x1, NULL, NULL },
    { "getLayerType", NULL, "I", 0x1, NULL, NULL },
    { "buildLayer", NULL, "V", 0x1, NULL, NULL },
    { "getHardwareLayer", NULL, "Lrepackaged.android.view.HardwareLayer;", 0x0, NULL, NULL },
    { "destroyHardwareResources", NULL, "V", 0x4, NULL, NULL },
    { "setDrawingCacheEnabledWithBoolean:", "setDrawingCacheEnabled", "V", 0x1, NULL, NULL },
    { "isDrawingCacheEnabled", NULL, "Z", 0x1, NULL, NULL },
    { "outputDirtyFlagsWithNSString:withBoolean:withInt:", "outputDirtyFlags", "V", 0x1, NULL, NULL },
    { "dispatchGetDisplayList", NULL, "V", 0x4, NULL, NULL },
    { "canHaveDisplayList", NULL, "Z", 0x1, NULL, NULL },
    { "updateDisplayListIfDirty", NULL, "Lrepackaged.android.view.RenderNode;", 0x1, NULL, NULL },
    { "resetDisplayList", NULL, "V", 0x2, NULL, NULL },
    { "getDrawingCache", NULL, "Lrepackaged.android.graphics.Bitmap;", 0x1, NULL, NULL },
    { "getDrawingCacheWithBoolean:", "getDrawingCache", "Lrepackaged.android.graphics.Bitmap;", 0x1, NULL, NULL },
    { "destroyDrawingCache", NULL, "V", 0x1, NULL, NULL },
    { "setDrawingCacheBackgroundColorWithInt:", "setDrawingCacheBackgroundColor", "V", 0x1, NULL, NULL },
    { "getDrawingCacheBackgroundColor", NULL, "I", 0x1, NULL, NULL },
    { "buildDrawingCache", NULL, "V", 0x1, NULL, NULL },
    { "buildDrawingCacheWithBoolean:", "buildDrawingCache", "V", 0x1, NULL, NULL },
    { "buildDrawingCacheImplWithBoolean:", "buildDrawingCacheImpl", "V", 0x2, NULL, NULL },
    { "createSnapshotWithRepackagedAndroidGraphicsBitmap_Config:withInt:withBoolean:", "createSnapshot", "Lrepackaged.android.graphics.Bitmap;", 0x0, NULL, NULL },
    { "isInEditMode", NULL, "Z", 0x1, NULL, NULL },
    { "isPaddingOffsetRequired", NULL, "Z", 0x4, NULL, NULL },
    { "getLeftPaddingOffset", NULL, "I", 0x4, NULL, NULL },
    { "getRightPaddingOffset", NULL, "I", 0x4, NULL, NULL },
    { "getTopPaddingOffset", NULL, "I", 0x4, NULL, NULL },
    { "getBottomPaddingOffset", NULL, "I", 0x4, NULL, NULL },
    { "getFadeTopWithBoolean:", "getFadeTop", "I", 0x4, NULL, NULL },
    { "getFadeHeightWithBoolean:", "getFadeHeight", "I", 0x4, NULL, NULL },
    { "isHardwareAccelerated", NULL, "Z", 0x1, NULL, NULL },
    { "setClipBoundsWithRepackagedAndroidGraphicsRect:", "setClipBounds", "V", 0x1, NULL, NULL },
    { "getClipBounds", NULL, "Lrepackaged.android.graphics.Rect;", 0x1, NULL, NULL },
    { "getClipBoundsWithRepackagedAndroidGraphicsRect:", "getClipBounds", "Z", 0x1, NULL, NULL },
    { "applyLegacyAnimationWithRepackagedAndroidViewViewGroup:withLong:withRepackagedAndroidViewAnimationAnimation:withBoolean:", "applyLegacyAnimation", "Z", 0x2, NULL, NULL },
    { "setDisplayListPropertiesWithRepackagedAndroidViewRenderNode:", "setDisplayListProperties", "V", 0x0, NULL, NULL },
    { "drawWithRepackagedAndroidGraphicsCanvas:withRepackagedAndroidViewViewGroup:withLong:", "draw", "Z", 0x0, NULL, NULL },
    { "drawWithRepackagedAndroidGraphicsCanvas:", "draw", "V", 0x1, NULL, NULL },
    { "drawBackgroundWithRepackagedAndroidGraphicsCanvas:", "drawBackground", "V", 0x2, NULL, NULL },
    { "setBackgroundBounds", NULL, "V", 0x0, NULL, NULL },
    { "setBackgroundRenderNodePropertiesWithRepackagedAndroidViewRenderNode:", "setBackgroundRenderNodeProperties", "V", 0x2, NULL, NULL },
    { "getDrawableRenderNodeWithRepackagedAndroidGraphicsDrawableDrawable:withRepackagedAndroidViewRenderNode:", "getDrawableRenderNode", "Lrepackaged.android.view.RenderNode;", 0x2, NULL, NULL },
    { "getOverlay", NULL, "Lrepackaged.android.view.ViewOverlay;", 0x1, NULL, NULL },
    { "getSolidColor", NULL, "I", 0x1, NULL, NULL },
    { "printFlagsWithInt:", "printFlags", "Ljava.lang.String;", 0xa, NULL, NULL },
    { "printPrivateFlagsWithInt:", "printPrivateFlags", "Ljava.lang.String;", 0xa, NULL, NULL },
    { "isLayoutRequested", NULL, "Z", 0x1, NULL, NULL },
    { "isLayoutModeOpticalWithId:", "isLayoutModeOptical", "Z", 0x9, NULL, NULL },
    { "setOpticalFrameWithInt:withInt:withInt:withInt:", "setOpticalFrame", "Z", 0x2, NULL, NULL },
    { "layoutWithInt:withInt:withInt:withInt:", "layout", "V", 0x1, NULL, NULL },
    { "onLayoutWithBoolean:withInt:withInt:withInt:withInt:", "onLayout", "V", 0x4, NULL, NULL },
    { "setFrameWithInt:withInt:withInt:withInt:", "setFrame", "Z", 0x4, NULL, NULL },
    { "setLeftTopRightBottomWithInt:withInt:withInt:withInt:", "setLeftTopRightBottom", "V", 0x1, NULL, NULL },
    { "sizeChangeWithInt:withInt:withInt:withInt:", "sizeChange", "V", 0x2, NULL, NULL },
    { "onFinishInflate", NULL, "V", 0x4, NULL, NULL },
    { "getResources", NULL, "Lrepackaged.android.content.res.Resources;", 0x1, NULL, NULL },
    { "invalidateDrawableWithRepackagedAndroidGraphicsDrawableDrawable:", "invalidateDrawable", "V", 0x1, NULL, NULL },
    { "scheduleDrawableWithRepackagedAndroidGraphicsDrawableDrawable:withJavaLangRunnable:withLong:", "scheduleDrawable", "V", 0x1, NULL, NULL },
    { "unscheduleDrawableWithRepackagedAndroidGraphicsDrawableDrawable:withJavaLangRunnable:", "unscheduleDrawable", "V", 0x1, NULL, NULL },
    { "unscheduleDrawableWithRepackagedAndroidGraphicsDrawableDrawable:", "unscheduleDrawable", "V", 0x1, NULL, NULL },
    { "resolveDrawables", NULL, "V", 0x4, NULL, NULL },
    { "areDrawablesResolved", NULL, "Z", 0x0, NULL, NULL },
    { "onResolveDrawablesWithInt:", "onResolveDrawables", "V", 0x1, NULL, NULL },
    { "resetResolvedDrawables", NULL, "V", 0x4, NULL, NULL },
    { "resetResolvedDrawablesInternal", NULL, "V", 0x0, NULL, NULL },
    { "verifyDrawableWithRepackagedAndroidGraphicsDrawableDrawable:", "verifyDrawable", "Z", 0x4, NULL, NULL },
    { "drawableStateChanged", NULL, "V", 0x4, NULL, NULL },
    { "drawableHotspotChangedWithFloat:withFloat:", "drawableHotspotChanged", "V", 0x1, NULL, NULL },
    { "dispatchDrawableHotspotChangedWithFloat:withFloat:", "dispatchDrawableHotspotChanged", "V", 0x1, NULL, NULL },
    { "refreshDrawableState", NULL, "V", 0x1, NULL, NULL },
    { "getDrawableState", NULL, "[I", 0x11, NULL, NULL },
    { "onCreateDrawableStateWithInt:", "onCreateDrawableState", "[I", 0x4, NULL, NULL },
    { "mergeDrawableStatesWithIntArray:withIntArray:", "mergeDrawableStates", "[I", 0xc, NULL, NULL },
    { "jumpDrawablesToCurrentState", NULL, "V", 0x1, NULL, NULL },
    { "setBackgroundColorWithInt:", "setBackgroundColor", "V", 0x1, NULL, NULL },
    { "setBackgroundResourceWithInt:", "setBackgroundResource", "V", 0x1, NULL, NULL },
    { "setBackgroundWithRepackagedAndroidGraphicsDrawableDrawable:", "setBackground", "V", 0x1, NULL, NULL },
    { "setBackgroundDrawableWithRepackagedAndroidGraphicsDrawableDrawable:", "setBackgroundDrawable", "V", 0x1, NULL, NULL },
    { "getBackground", NULL, "Lrepackaged.android.graphics.drawable.Drawable;", 0x1, NULL, NULL },
    { "setBackgroundTintListWithRepackagedAndroidContentResColorStateList:", "setBackgroundTintList", "V", 0x1, NULL, NULL },
    { "getBackgroundTintList", NULL, "Lrepackaged.android.content.res.ColorStateList;", 0x1, NULL, NULL },
    { "setBackgroundTintModeWithRepackagedAndroidGraphicsPorterDuff_ModeEnum:", "setBackgroundTintMode", "V", 0x1, NULL, NULL },
    { "getBackgroundTintMode", NULL, "Lrepackaged.android.graphics.PorterDuff$Mode;", 0x1, NULL, NULL },
    { "applyBackgroundTint", NULL, "V", 0x2, NULL, NULL },
    { "getForeground", NULL, "Lrepackaged.android.graphics.drawable.Drawable;", 0x1, NULL, NULL },
    { "setForegroundWithRepackagedAndroidGraphicsDrawableDrawable:", "setForeground", "V", 0x1, NULL, NULL },
    { "isForegroundInsidePadding", NULL, "Z", 0x1, NULL, NULL },
    { "getForegroundGravity", NULL, "I", 0x1, NULL, NULL },
    { "setForegroundGravityWithInt:", "setForegroundGravity", "V", 0x1, NULL, NULL },
    { "setForegroundTintListWithRepackagedAndroidContentResColorStateList:", "setForegroundTintList", "V", 0x1, NULL, NULL },
    { "getForegroundTintList", NULL, "Lrepackaged.android.content.res.ColorStateList;", 0x1, NULL, NULL },
    { "setForegroundTintModeWithRepackagedAndroidGraphicsPorterDuff_ModeEnum:", "setForegroundTintMode", "V", 0x1, NULL, NULL },
    { "getForegroundTintMode", NULL, "Lrepackaged.android.graphics.PorterDuff$Mode;", 0x1, NULL, NULL },
    { "applyForegroundTint", NULL, "V", 0x2, NULL, NULL },
    { "onDrawForegroundWithRepackagedAndroidGraphicsCanvas:", "onDrawForeground", "V", 0x1, NULL, NULL },
    { "setPaddingWithInt:withInt:withInt:withInt:", "setPadding", "V", 0x1, NULL, NULL },
    { "internalSetPaddingWithInt:withInt:withInt:withInt:", "internalSetPadding", "V", 0x4, NULL, NULL },
    { "setPaddingRelativeWithInt:withInt:withInt:withInt:", "setPaddingRelative", "V", 0x1, NULL, NULL },
    { "getPaddingTop", NULL, "I", 0x1, NULL, NULL },
    { "getPaddingBottom", NULL, "I", 0x1, NULL, NULL },
    { "getPaddingLeft", NULL, "I", 0x1, NULL, NULL },
    { "getPaddingStart", NULL, "I", 0x1, NULL, NULL },
    { "getPaddingRight", NULL, "I", 0x1, NULL, NULL },
    { "getPaddingEnd", NULL, "I", 0x1, NULL, NULL },
    { "isPaddingRelative", NULL, "Z", 0x1, NULL, NULL },
    { "computeOpticalInsets", NULL, "Lrepackaged.android.graphics.Insets;", 0x0, NULL, NULL },
    { "resetPaddingToInitialValues", NULL, "V", 0x1, NULL, NULL },
    { "getOpticalInsets", NULL, "Lrepackaged.android.graphics.Insets;", 0x1, NULL, NULL },
    { "setOpticalInsetsWithRepackagedAndroidGraphicsInsets:", "setOpticalInsets", "V", 0x1, NULL, NULL },
    { "setSelectedWithBoolean:", "setSelected", "V", 0x1, NULL, NULL },
    { "dispatchSetSelectedWithBoolean:", "dispatchSetSelected", "V", 0x4, NULL, NULL },
    { "isSelected", NULL, "Z", 0x1, NULL, NULL },
    { "setActivatedWithBoolean:", "setActivated", "V", 0x1, NULL, NULL },
    { "dispatchSetActivatedWithBoolean:", "dispatchSetActivated", "V", 0x4, NULL, NULL },
    { "isActivated", NULL, "Z", 0x1, NULL, NULL },
    { "getViewTreeObserver", NULL, "Lrepackaged.android.view.ViewTreeObserver;", 0x1, NULL, NULL },
    { "getRootView", NULL, "Lrepackaged.android.view.View;", 0x1, NULL, NULL },
    { "toGlobalMotionEventWithRepackagedAndroidViewMotionEvent:", "toGlobalMotionEvent", "Z", 0x1, NULL, NULL },
    { "toLocalMotionEventWithRepackagedAndroidViewMotionEvent:", "toLocalMotionEvent", "Z", 0x1, NULL, NULL },
    { "transformMatrixToGlobalWithRepackagedAndroidGraphicsMatrix:", "transformMatrixToGlobal", "V", 0x1, NULL, NULL },
    { "transformMatrixToLocalWithRepackagedAndroidGraphicsMatrix:", "transformMatrixToLocal", "V", 0x1, NULL, NULL },
    { "getLocationOnScreen", NULL, "[I", 0x1, NULL, NULL },
    { "getLocationOnScreenWithIntArray:", "getLocationOnScreen", "V", 0x1, NULL, NULL },
    { "getLocationInWindowWithIntArray:", "getLocationInWindow", "V", 0x1, NULL, NULL },
    { "findViewTraversalWithInt:", "findViewTraversal", "Lrepackaged.android.view.View;", 0x4, NULL, NULL },
    { "findViewWithTagTraversalWithId:", "findViewWithTagTraversal", "Lrepackaged.android.view.View;", 0x4, NULL, NULL },
    { "findViewByPredicateTraversalWithRepackagedComAndroidInternalUtilPredicate:withRepackagedAndroidViewView:", "findViewByPredicateTraversal", "Lrepackaged.android.view.View;", 0x4, NULL, NULL },
    { "findViewByIdWithInt:", "findViewById", "Lrepackaged.android.view.View;", 0x11, NULL, NULL },
    { "findViewByAccessibilityIdWithInt:", "findViewByAccessibilityId", "Lrepackaged.android.view.View;", 0x10, NULL, NULL },
    { "findViewByAccessibilityIdTraversalWithInt:", "findViewByAccessibilityIdTraversal", "Lrepackaged.android.view.View;", 0x1, NULL, NULL },
    { "findViewWithTagWithId:", "findViewWithTag", "Lrepackaged.android.view.View;", 0x11, NULL, NULL },
    { "findViewByPredicateWithRepackagedComAndroidInternalUtilPredicate:", "findViewByPredicate", "Lrepackaged.android.view.View;", 0x11, NULL, NULL },
    { "findViewByPredicateInsideOutWithRepackagedAndroidViewView:withRepackagedComAndroidInternalUtilPredicate:", "findViewByPredicateInsideOut", "Lrepackaged.android.view.View;", 0x11, NULL, NULL },
    { "setIdWithInt:", "setId", "V", 0x1, NULL, NULL },
    { "setIsRootNamespaceWithBoolean:", "setIsRootNamespace", "V", 0x1, NULL, NULL },
    { "isRootNamespace", NULL, "Z", 0x1, NULL, NULL },
    { "getId", NULL, "I", 0x1, NULL, NULL },
    { "getTag", NULL, "Ljava.lang.Object;", 0x1, NULL, NULL },
    { "setTagWithId:", "setTag", "V", 0x1, NULL, NULL },
    { "getTagWithInt:", "getTag", "Ljava.lang.Object;", 0x1, NULL, NULL },
    { "setTagWithInt:withId:", "setTag", "V", 0x1, NULL, NULL },
    { "setTagInternalWithInt:withId:", "setTagInternal", "V", 0x1, NULL, NULL },
    { "setKeyedTagWithInt:withId:", "setKeyedTag", "V", 0x2, NULL, NULL },
    { "debug", NULL, "V", 0x1, NULL, NULL },
    { "debugWithInt:", "debug", "V", 0x4, NULL, NULL },
    { "debugIndentWithInt:", "debugIndent", "Ljava.lang.String;", 0xc, NULL, NULL },
    { "getBaseline", NULL, "I", 0x1, NULL, NULL },
    { "isInLayout", NULL, "Z", 0x1, NULL, NULL },
    { "requestLayout", NULL, "V", 0x1, NULL, NULL },
    { "forceLayout", NULL, "V", 0x1, NULL, NULL },
    { "measureWithInt:withInt:", "measure", "V", 0x11, NULL, NULL },
    { "onMeasureWithInt:withInt:", "onMeasure", "V", 0x4, NULL, NULL },
    { "setMeasuredDimensionWithInt:withInt:", "setMeasuredDimension", "V", 0x14, NULL, NULL },
    { "setMeasuredDimensionRawWithInt:withInt:", "setMeasuredDimensionRaw", "V", 0x2, NULL, NULL },
    { "combineMeasuredStatesWithInt:withInt:", "combineMeasuredStates", "I", 0x9, NULL, NULL },
    { "resolveSizeWithInt:withInt:", "resolveSize", "I", 0x9, NULL, NULL },
    { "resolveSizeAndStateWithInt:withInt:withInt:", "resolveSizeAndState", "I", 0x9, NULL, NULL },
    { "getDefaultSizeWithInt:withInt:", "getDefaultSize", "I", 0x9, NULL, NULL },
    { "getSuggestedMinimumHeight", NULL, "I", 0x4, NULL, NULL },
    { "getSuggestedMinimumWidth", NULL, "I", 0x4, NULL, NULL },
    { "getMinimumHeight", NULL, "I", 0x1, NULL, NULL },
    { "setMinimumHeightWithInt:", "setMinimumHeight", "V", 0x1, NULL, NULL },
    { "getMinimumWidth", NULL, "I", 0x1, NULL, NULL },
    { "setMinimumWidthWithInt:", "setMinimumWidth", "V", 0x1, NULL, NULL },
    { "getAnimation", NULL, "Lrepackaged.android.view.animation.Animation;", 0x1, NULL, NULL },
    { "startAnimationWithRepackagedAndroidViewAnimationAnimation:", "startAnimation", "V", 0x1, NULL, NULL },
    { "clearAnimation", NULL, "V", 0x1, NULL, NULL },
    { "setAnimationWithRepackagedAndroidViewAnimationAnimation:", "setAnimation", "V", 0x1, NULL, NULL },
    { "onAnimationStart", NULL, "V", 0x4, NULL, NULL },
    { "onAnimationEnd", NULL, "V", 0x4, NULL, NULL },
    { "onSetAlphaWithInt:", "onSetAlpha", "Z", 0x4, NULL, NULL },
    { "gatherTransparentRegionWithRepackagedAndroidGraphicsRegion:", "gatherTransparentRegion", "Z", 0x1, NULL, NULL },
    { "playSoundEffectWithInt:", "playSoundEffect", "V", 0x1, NULL, NULL },
    { "performHapticFeedbackWithInt:", "performHapticFeedback", "Z", 0x1, NULL, NULL },
    { "performHapticFeedbackWithInt:withInt:", "performHapticFeedback", "Z", 0x1, NULL, NULL },
    { "setSystemUiVisibilityWithInt:", "setSystemUiVisibility", "V", 0x1, NULL, NULL },
    { "getSystemUiVisibility", NULL, "I", 0x1, NULL, NULL },
    { "getWindowSystemUiVisibility", NULL, "I", 0x1, NULL, NULL },
    { "onWindowSystemUiVisibilityChangedWithInt:", "onWindowSystemUiVisibilityChanged", "V", 0x1, NULL, NULL },
    { "dispatchWindowSystemUiVisiblityChangedWithInt:", "dispatchWindowSystemUiVisiblityChanged", "V", 0x1, NULL, NULL },
    { "setOnSystemUiVisibilityChangeListenerWithRepackagedAndroidViewView_OnSystemUiVisibilityChangeListener:", "setOnSystemUiVisibilityChangeListener", "V", 0x1, NULL, NULL },
    { "dispatchSystemUiVisibilityChangedWithInt:", "dispatchSystemUiVisibilityChanged", "V", 0x1, NULL, NULL },
    { "updateLocalSystemUiVisibilityWithInt:withInt:", "updateLocalSystemUiVisibility", "Z", 0x0, NULL, NULL },
    { "setDisabledSystemUiVisibilityWithInt:", "setDisabledSystemUiVisibility", "V", 0x1, NULL, NULL },
    { "startDragWithRepackagedAndroidContentClipData:withRepackagedAndroidViewView_DragShadowBuilder:withId:withInt:", "startDrag", "Z", 0x11, NULL, NULL },
    { "onDragEventWithRepackagedAndroidViewDragEvent:", "onDragEvent", "Z", 0x1, NULL, NULL },
    { "dispatchDragEventWithRepackagedAndroidViewDragEvent:", "dispatchDragEvent", "Z", 0x1, NULL, NULL },
    { "canAcceptDrag", NULL, "Z", 0x0, NULL, NULL },
    { "onCloseSystemDialogsWithNSString:", "onCloseSystemDialogs", "V", 0x1, NULL, NULL },
    { "applyDrawableToTransparentRegionWithRepackagedAndroidGraphicsDrawableDrawable:withRepackagedAndroidGraphicsRegion:", "applyDrawableToTransparentRegion", "V", 0x1, NULL, NULL },
    { "checkForLongClickWithInt:", "checkForLongClick", "V", 0x2, NULL, NULL },
    { "inflateWithRepackagedAndroidContentContext:withInt:withRepackagedAndroidViewViewGroup:", "inflate", "Lrepackaged.android.view.View;", 0x9, NULL, NULL },
    { "overScrollByWithInt:withInt:withInt:withInt:withInt:withInt:withInt:withInt:withBoolean:", "overScrollBy", "Z", 0x4, NULL, NULL },
    { "onOverScrolledWithInt:withInt:withBoolean:withBoolean:", "onOverScrolled", "V", 0x4, NULL, NULL },
    { "getOverScrollMode", NULL, "I", 0x1, NULL, NULL },
    { "setOverScrollModeWithInt:", "setOverScrollMode", "V", 0x1, NULL, NULL },
    { "setNestedScrollingEnabledWithBoolean:", "setNestedScrollingEnabled", "V", 0x1, NULL, NULL },
    { "isNestedScrollingEnabled", NULL, "Z", 0x1, NULL, NULL },
    { "startNestedScrollWithInt:", "startNestedScroll", "Z", 0x1, NULL, NULL },
    { "stopNestedScroll", NULL, "V", 0x1, NULL, NULL },
    { "hasNestedScrollingParent", NULL, "Z", 0x1, NULL, NULL },
    { "dispatchNestedScrollWithInt:withInt:withInt:withInt:withIntArray:", "dispatchNestedScroll", "Z", 0x1, NULL, NULL },
    { "dispatchNestedPreScrollWithInt:withInt:withIntArray:withIntArray:", "dispatchNestedPreScroll", "Z", 0x1, NULL, NULL },
    { "dispatchNestedFlingWithFloat:withFloat:withBoolean:", "dispatchNestedFling", "Z", 0x1, NULL, NULL },
    { "dispatchNestedPreFlingWithFloat:withFloat:", "dispatchNestedPreFling", "Z", 0x1, NULL, NULL },
    { "getVerticalScrollFactor", NULL, "F", 0x4, NULL, NULL },
    { "getHorizontalScrollFactor", NULL, "F", 0x4, NULL, NULL },
    { "getRawTextDirection", NULL, "I", 0x1, NULL, NULL },
    { "setTextDirectionWithInt:", "setTextDirection", "V", 0x1, NULL, NULL },
    { "getTextDirection", NULL, "I", 0x1, NULL, NULL },
    { "resolveTextDirection", NULL, "Z", 0x1, NULL, NULL },
    { "canResolveTextDirection", NULL, "Z", 0x1, NULL, NULL },
    { "resetResolvedTextDirection", NULL, "V", 0x1, NULL, NULL },
    { "isTextDirectionInherited", NULL, "Z", 0x1, NULL, NULL },
    { "isTextDirectionResolved", NULL, "Z", 0x1, NULL, NULL },
    { "getRawTextAlignment", NULL, "I", 0x1, NULL, NULL },
    { "setTextAlignmentWithInt:", "setTextAlignment", "V", 0x1, NULL, NULL },
    { "getTextAlignment", NULL, "I", 0x1, NULL, NULL },
    { "resolveTextAlignment", NULL, "Z", 0x1, NULL, NULL },
    { "canResolveTextAlignment", NULL, "Z", 0x1, NULL, NULL },
    { "resetResolvedTextAlignment", NULL, "V", 0x1, NULL, NULL },
    { "isTextAlignmentInherited", NULL, "Z", 0x1, NULL, NULL },
    { "isTextAlignmentResolved", NULL, "Z", 0x1, NULL, NULL },
    { "generateViewId", NULL, "I", 0x9, NULL, NULL },
    { "captureTransitioningViewsWithJavaUtilList:", "captureTransitioningViews", "V", 0x1, NULL, NULL },
    { "findNamedViewsWithJavaUtilMap:", "findNamedViews", "V", 0x1, NULL, NULL },
    { "hackTurnOffWindowResizeAnimWithBoolean:", "hackTurnOffWindowResizeAnim", "V", 0x1, NULL, NULL },
    { "animate", NULL, "Lrepackaged.android.view.ViewPropertyAnimator;", 0x1, NULL, NULL },
    { "setTransitionNameWithNSString:", "setTransitionName", "V", 0x11, NULL, NULL },
    { "getTransitionName", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "inLiveRegion", NULL, "Z", 0x2, NULL, NULL },
    { "dumpFlags", NULL, "V", 0xa, NULL, NULL },
    { "dumpFlagWithJavaUtilHashMap:withNSString:withInt:", "dumpFlag", "V", 0xa, NULL, NULL },
    { "encodeWithRepackagedAndroidViewViewHierarchyEncoder:", "encode", "V", 0x1, NULL, NULL },
    { "encodePropertiesWithRepackagedAndroidViewViewHierarchyEncoder:", "encodeProperties", "V", 0x4, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "DBG_", NULL, 0x1a, "Z", NULL, NULL, .constantValue.asBOOL = RepackagedAndroidViewView_DBG },
    { "VIEW_LOG_TAG_", NULL, 0x1c, "Ljava.lang.String;", &RepackagedAndroidViewView_VIEW_LOG_TAG_, NULL,  },
    { "DEBUG_LAYOUT_PROPERTY_", NULL, 0x19, "Ljava.lang.String;", &RepackagedAndroidViewView_DEBUG_LAYOUT_PROPERTY_, NULL,  },
    { "mDebugViewAttributes_", NULL, 0x9, "Z", &RepackagedAndroidViewView_mDebugViewAttributes_, NULL,  },
    { "NO_ID_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_NO_ID },
    { "sCompatibilityDone_", NULL, 0xa, "Z", &RepackagedAndroidViewView_sCompatibilityDone_, NULL,  },
    { "sUseBrokenMakeMeasureSpec_", NULL, 0xa, "Z", &RepackagedAndroidViewView_sUseBrokenMakeMeasureSpec_, NULL,  },
    { "sUseZeroUnspecifiedMeasureSpec_", NULL, 0x8, "Z", &RepackagedAndroidViewView_sUseZeroUnspecifiedMeasureSpec_, NULL,  },
    { "sIgnoreMeasureCache_", NULL, 0xa, "Z", &RepackagedAndroidViewView_sIgnoreMeasureCache_, NULL,  },
    { "NOT_FOCUSABLE_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_NOT_FOCUSABLE },
    { "FOCUSABLE_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_FOCUSABLE },
    { "FOCUSABLE_MASK_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_FOCUSABLE_MASK },
    { "FITS_SYSTEM_WINDOWS_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_FITS_SYSTEM_WINDOWS },
    { "VISIBLE_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_VISIBLE },
    { "INVISIBLE_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_INVISIBLE },
    { "GONE_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_GONE },
    { "VISIBILITY_MASK_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_VISIBILITY_MASK },
    { "VISIBILITY_FLAGS_", NULL, 0x1a, "[I", &RepackagedAndroidViewView_VISIBILITY_FLAGS_, NULL,  },
    { "ENABLED_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_ENABLED },
    { "DISABLED_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_DISABLED },
    { "ENABLED_MASK_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_ENABLED_MASK },
    { "WILL_NOT_DRAW_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_WILL_NOT_DRAW },
    { "DRAW_MASK_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_DRAW_MASK },
    { "SCROLLBARS_NONE_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_SCROLLBARS_NONE },
    { "SCROLLBARS_HORIZONTAL_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_SCROLLBARS_HORIZONTAL },
    { "SCROLLBARS_VERTICAL_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_SCROLLBARS_VERTICAL },
    { "SCROLLBARS_MASK_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_SCROLLBARS_MASK },
    { "FILTER_TOUCHES_WHEN_OBSCURED_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_FILTER_TOUCHES_WHEN_OBSCURED },
    { "OPTIONAL_FITS_SYSTEM_WINDOWS_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_OPTIONAL_FITS_SYSTEM_WINDOWS },
    { "FADING_EDGE_NONE_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_FADING_EDGE_NONE },
    { "FADING_EDGE_HORIZONTAL_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_FADING_EDGE_HORIZONTAL },
    { "FADING_EDGE_VERTICAL_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_FADING_EDGE_VERTICAL },
    { "FADING_EDGE_MASK_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_FADING_EDGE_MASK },
    { "CLICKABLE_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_CLICKABLE },
    { "DRAWING_CACHE_ENABLED_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_DRAWING_CACHE_ENABLED },
    { "SAVE_DISABLED_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_SAVE_DISABLED },
    { "SAVE_DISABLED_MASK_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_SAVE_DISABLED_MASK },
    { "WILL_NOT_CACHE_DRAWING_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_WILL_NOT_CACHE_DRAWING },
    { "FOCUSABLE_IN_TOUCH_MODE_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_FOCUSABLE_IN_TOUCH_MODE },
    { "DRAWING_CACHE_QUALITY_LOW_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_DRAWING_CACHE_QUALITY_LOW },
    { "DRAWING_CACHE_QUALITY_HIGH_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_DRAWING_CACHE_QUALITY_HIGH },
    { "DRAWING_CACHE_QUALITY_AUTO_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_DRAWING_CACHE_QUALITY_AUTO },
    { "DRAWING_CACHE_QUALITY_FLAGS_", NULL, 0x1a, "[I", &RepackagedAndroidViewView_DRAWING_CACHE_QUALITY_FLAGS_, NULL,  },
    { "DRAWING_CACHE_QUALITY_MASK_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_DRAWING_CACHE_QUALITY_MASK },
    { "LONG_CLICKABLE_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_LONG_CLICKABLE },
    { "DUPLICATE_PARENT_STATE_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_DUPLICATE_PARENT_STATE },
    { "CONTEXT_CLICKABLE_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_CONTEXT_CLICKABLE },
    { "SCROLLBARS_INSIDE_OVERLAY_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_SCROLLBARS_INSIDE_OVERLAY },
    { "SCROLLBARS_INSIDE_INSET_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_SCROLLBARS_INSIDE_INSET },
    { "SCROLLBARS_OUTSIDE_OVERLAY_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_SCROLLBARS_OUTSIDE_OVERLAY },
    { "SCROLLBARS_OUTSIDE_INSET_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_SCROLLBARS_OUTSIDE_INSET },
    { "SCROLLBARS_INSET_MASK_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_SCROLLBARS_INSET_MASK },
    { "SCROLLBARS_OUTSIDE_MASK_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_SCROLLBARS_OUTSIDE_MASK },
    { "SCROLLBARS_STYLE_MASK_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_SCROLLBARS_STYLE_MASK },
    { "KEEP_SCREEN_ON_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_KEEP_SCREEN_ON },
    { "SOUND_EFFECTS_ENABLED_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_SOUND_EFFECTS_ENABLED },
    { "HAPTIC_FEEDBACK_ENABLED_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_HAPTIC_FEEDBACK_ENABLED },
    { "PARENT_SAVE_DISABLED_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_PARENT_SAVE_DISABLED },
    { "PARENT_SAVE_DISABLED_MASK_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_PARENT_SAVE_DISABLED_MASK },
    { "FOCUSABLES_ALL_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_FOCUSABLES_ALL },
    { "FOCUSABLES_TOUCH_MODE_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_FOCUSABLES_TOUCH_MODE },
    { "FOCUS_BACKWARD_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_FOCUS_BACKWARD },
    { "FOCUS_FORWARD_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_FOCUS_FORWARD },
    { "FOCUS_LEFT_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_FOCUS_LEFT },
    { "FOCUS_UP_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_FOCUS_UP },
    { "FOCUS_RIGHT_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_FOCUS_RIGHT },
    { "FOCUS_DOWN_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_FOCUS_DOWN },
    { "MEASURED_SIZE_MASK_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_MEASURED_SIZE_MASK },
    { "MEASURED_STATE_MASK_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_MEASURED_STATE_MASK },
    { "MEASURED_HEIGHT_STATE_SHIFT_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_MEASURED_HEIGHT_STATE_SHIFT },
    { "MEASURED_STATE_TOO_SMALL_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_MEASURED_STATE_TOO_SMALL },
    { "EMPTY_STATE_SET_", NULL, 0x1c, "[I", &RepackagedAndroidViewView_EMPTY_STATE_SET_, NULL,  },
    { "ENABLED_STATE_SET_", NULL, 0x1c, "[I", &RepackagedAndroidViewView_ENABLED_STATE_SET_, NULL,  },
    { "FOCUSED_STATE_SET_", NULL, 0x1c, "[I", &RepackagedAndroidViewView_FOCUSED_STATE_SET_, NULL,  },
    { "SELECTED_STATE_SET_", NULL, 0x1c, "[I", &RepackagedAndroidViewView_SELECTED_STATE_SET_, NULL,  },
    { "PRESSED_STATE_SET_", NULL, 0x1c, "[I", &RepackagedAndroidViewView_PRESSED_STATE_SET_, NULL,  },
    { "WINDOW_FOCUSED_STATE_SET_", NULL, 0x1c, "[I", &RepackagedAndroidViewView_WINDOW_FOCUSED_STATE_SET_, NULL,  },
    { "ENABLED_FOCUSED_STATE_SET_", NULL, 0x1c, "[I", &RepackagedAndroidViewView_ENABLED_FOCUSED_STATE_SET_, NULL,  },
    { "ENABLED_SELECTED_STATE_SET_", NULL, 0x1c, "[I", &RepackagedAndroidViewView_ENABLED_SELECTED_STATE_SET_, NULL,  },
    { "ENABLED_WINDOW_FOCUSED_STATE_SET_", NULL, 0x1c, "[I", &RepackagedAndroidViewView_ENABLED_WINDOW_FOCUSED_STATE_SET_, NULL,  },
    { "FOCUSED_SELECTED_STATE_SET_", NULL, 0x1c, "[I", &RepackagedAndroidViewView_FOCUSED_SELECTED_STATE_SET_, NULL,  },
    { "FOCUSED_WINDOW_FOCUSED_STATE_SET_", NULL, 0x1c, "[I", &RepackagedAndroidViewView_FOCUSED_WINDOW_FOCUSED_STATE_SET_, NULL,  },
    { "SELECTED_WINDOW_FOCUSED_STATE_SET_", NULL, 0x1c, "[I", &RepackagedAndroidViewView_SELECTED_WINDOW_FOCUSED_STATE_SET_, NULL,  },
    { "ENABLED_FOCUSED_SELECTED_STATE_SET_", NULL, 0x1c, "[I", &RepackagedAndroidViewView_ENABLED_FOCUSED_SELECTED_STATE_SET_, NULL,  },
    { "ENABLED_FOCUSED_WINDOW_FOCUSED_STATE_SET_", NULL, 0x1c, "[I", &RepackagedAndroidViewView_ENABLED_FOCUSED_WINDOW_FOCUSED_STATE_SET_, NULL,  },
    { "ENABLED_SELECTED_WINDOW_FOCUSED_STATE_SET_", NULL, 0x1c, "[I", &RepackagedAndroidViewView_ENABLED_SELECTED_WINDOW_FOCUSED_STATE_SET_, NULL,  },
    { "FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET_", NULL, 0x1c, "[I", &RepackagedAndroidViewView_FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET_, NULL,  },
    { "ENABLED_FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET_", NULL, 0x1c, "[I", &RepackagedAndroidViewView_ENABLED_FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET_, NULL,  },
    { "PRESSED_WINDOW_FOCUSED_STATE_SET_", NULL, 0x1c, "[I", &RepackagedAndroidViewView_PRESSED_WINDOW_FOCUSED_STATE_SET_, NULL,  },
    { "PRESSED_SELECTED_STATE_SET_", NULL, 0x1c, "[I", &RepackagedAndroidViewView_PRESSED_SELECTED_STATE_SET_, NULL,  },
    { "PRESSED_SELECTED_WINDOW_FOCUSED_STATE_SET_", NULL, 0x1c, "[I", &RepackagedAndroidViewView_PRESSED_SELECTED_WINDOW_FOCUSED_STATE_SET_, NULL,  },
    { "PRESSED_FOCUSED_STATE_SET_", NULL, 0x1c, "[I", &RepackagedAndroidViewView_PRESSED_FOCUSED_STATE_SET_, NULL,  },
    { "PRESSED_FOCUSED_WINDOW_FOCUSED_STATE_SET_", NULL, 0x1c, "[I", &RepackagedAndroidViewView_PRESSED_FOCUSED_WINDOW_FOCUSED_STATE_SET_, NULL,  },
    { "PRESSED_FOCUSED_SELECTED_STATE_SET_", NULL, 0x1c, "[I", &RepackagedAndroidViewView_PRESSED_FOCUSED_SELECTED_STATE_SET_, NULL,  },
    { "PRESSED_FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET_", NULL, 0x1c, "[I", &RepackagedAndroidViewView_PRESSED_FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET_, NULL,  },
    { "PRESSED_ENABLED_STATE_SET_", NULL, 0x1c, "[I", &RepackagedAndroidViewView_PRESSED_ENABLED_STATE_SET_, NULL,  },
    { "PRESSED_ENABLED_WINDOW_FOCUSED_STATE_SET_", NULL, 0x1c, "[I", &RepackagedAndroidViewView_PRESSED_ENABLED_WINDOW_FOCUSED_STATE_SET_, NULL,  },
    { "PRESSED_ENABLED_SELECTED_STATE_SET_", NULL, 0x1c, "[I", &RepackagedAndroidViewView_PRESSED_ENABLED_SELECTED_STATE_SET_, NULL,  },
    { "PRESSED_ENABLED_SELECTED_WINDOW_FOCUSED_STATE_SET_", NULL, 0x1c, "[I", &RepackagedAndroidViewView_PRESSED_ENABLED_SELECTED_WINDOW_FOCUSED_STATE_SET_, NULL,  },
    { "PRESSED_ENABLED_FOCUSED_STATE_SET_", NULL, 0x1c, "[I", &RepackagedAndroidViewView_PRESSED_ENABLED_FOCUSED_STATE_SET_, NULL,  },
    { "PRESSED_ENABLED_FOCUSED_WINDOW_FOCUSED_STATE_SET_", NULL, 0x1c, "[I", &RepackagedAndroidViewView_PRESSED_ENABLED_FOCUSED_WINDOW_FOCUSED_STATE_SET_, NULL,  },
    { "PRESSED_ENABLED_FOCUSED_SELECTED_STATE_SET_", NULL, 0x1c, "[I", &RepackagedAndroidViewView_PRESSED_ENABLED_FOCUSED_SELECTED_STATE_SET_, NULL,  },
    { "PRESSED_ENABLED_FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET_", NULL, 0x1c, "[I", &RepackagedAndroidViewView_PRESSED_ENABLED_FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET_, NULL,  },
    { "POPULATING_ACCESSIBILITY_EVENT_TYPES_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_POPULATING_ACCESSIBILITY_EVENT_TYPES },
    { "sThreadLocal_", NULL, 0x18, "Ljava.lang.ThreadLocal;", &RepackagedAndroidViewView_sThreadLocal_, "Ljava/lang/ThreadLocal<Lrepackaged/android/graphics/Rect;>;",  },
    { "mKeyedTags_", NULL, 0x2, "Lrepackaged.android.util.SparseArray;", NULL, "Lrepackaged/android/util/SparseArray<Ljava/lang/Object;>;",  },
    { "sNextAccessibilityViewId_", NULL, 0xa, "I", &RepackagedAndroidViewView_sNextAccessibilityViewId_, NULL,  },
    { "mCurrentAnimation_", NULL, 0x4, "Lrepackaged.android.view.animation.Animation;", NULL, NULL,  },
    { "mMeasuredWidth_", NULL, 0x0, "I", NULL, NULL,  },
    { "mMeasuredHeight_", NULL, 0x0, "I", NULL, NULL,  },
    { "mRecreateDisplayList_", NULL, 0x0, "Z", NULL, NULL,  },
    { "mID_", NULL, 0x0, "I", NULL, NULL,  },
    { "mAccessibilityViewId_", NULL, 0x0, "I", NULL, NULL,  },
    { "mAccessibilityCursorPosition_", NULL, 0x2, "I", NULL, NULL,  },
    { "mSendViewStateChangedAccessibilityEvent_", NULL, 0x0, "Lrepackaged.android.view.View$SendViewStateChangedAccessibilityEvent;", NULL, NULL,  },
    { "mTag_", NULL, 0x4, "Ljava.lang.Object;", NULL, NULL,  },
    { "PFLAG_WANTS_FOCUS_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_PFLAG_WANTS_FOCUS },
    { "PFLAG_FOCUSED_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_PFLAG_FOCUSED },
    { "PFLAG_SELECTED_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_PFLAG_SELECTED },
    { "PFLAG_IS_ROOT_NAMESPACE_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_PFLAG_IS_ROOT_NAMESPACE },
    { "PFLAG_HAS_BOUNDS_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_PFLAG_HAS_BOUNDS },
    { "PFLAG_DRAWN_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_PFLAG_DRAWN },
    { "PFLAG_DRAW_ANIMATION_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_PFLAG_DRAW_ANIMATION },
    { "PFLAG_SKIP_DRAW_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_PFLAG_SKIP_DRAW },
    { "PFLAG_REQUEST_TRANSPARENT_REGIONS_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_PFLAG_REQUEST_TRANSPARENT_REGIONS },
    { "PFLAG_DRAWABLE_STATE_DIRTY_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_PFLAG_DRAWABLE_STATE_DIRTY },
    { "PFLAG_MEASURED_DIMENSION_SET_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_PFLAG_MEASURED_DIMENSION_SET },
    { "PFLAG_FORCE_LAYOUT_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_PFLAG_FORCE_LAYOUT },
    { "PFLAG_LAYOUT_REQUIRED_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_PFLAG_LAYOUT_REQUIRED },
    { "PFLAG_PRESSED_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_PFLAG_PRESSED },
    { "PFLAG_DRAWING_CACHE_VALID_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_PFLAG_DRAWING_CACHE_VALID },
    { "PFLAG_ANIMATION_STARTED_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_PFLAG_ANIMATION_STARTED },
    { "PFLAG_SAVE_STATE_CALLED_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_PFLAG_SAVE_STATE_CALLED },
    { "PFLAG_ALPHA_SET_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_PFLAG_ALPHA_SET },
    { "PFLAG_SCROLL_CONTAINER_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_PFLAG_SCROLL_CONTAINER },
    { "PFLAG_SCROLL_CONTAINER_ADDED_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_PFLAG_SCROLL_CONTAINER_ADDED },
    { "PFLAG_DIRTY_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_PFLAG_DIRTY },
    { "PFLAG_DIRTY_OPAQUE_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_PFLAG_DIRTY_OPAQUE },
    { "PFLAG_DIRTY_MASK_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_PFLAG_DIRTY_MASK },
    { "PFLAG_OPAQUE_BACKGROUND_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_PFLAG_OPAQUE_BACKGROUND },
    { "PFLAG_OPAQUE_SCROLLBARS_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_PFLAG_OPAQUE_SCROLLBARS },
    { "PFLAG_OPAQUE_MASK_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_PFLAG_OPAQUE_MASK },
    { "PFLAG_PREPRESSED_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_PFLAG_PREPRESSED },
    { "PFLAG_CANCEL_NEXT_UP_EVENT_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_PFLAG_CANCEL_NEXT_UP_EVENT },
    { "PFLAG_AWAKEN_SCROLL_BARS_ON_ATTACH_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_PFLAG_AWAKEN_SCROLL_BARS_ON_ATTACH },
    { "PFLAG_HOVERED_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_PFLAG_HOVERED },
    { "PFLAG_DOES_NOTHING_REUSE_PLEASE_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_PFLAG_DOES_NOTHING_REUSE_PLEASE },
    { "PFLAG_ACTIVATED_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_PFLAG_ACTIVATED },
    { "PFLAG_INVALIDATED_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_PFLAG_INVALIDATED },
    { "PFLAG2_DRAG_CAN_ACCEPT_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_PFLAG2_DRAG_CAN_ACCEPT },
    { "PFLAG2_DRAG_HOVERED_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_PFLAG2_DRAG_HOVERED },
    { "LAYOUT_DIRECTION_UNDEFINED_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_LAYOUT_DIRECTION_UNDEFINED },
    { "LAYOUT_DIRECTION_LTR_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_LAYOUT_DIRECTION_LTR },
    { "LAYOUT_DIRECTION_RTL_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_LAYOUT_DIRECTION_RTL },
    { "LAYOUT_DIRECTION_INHERIT_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_LAYOUT_DIRECTION_INHERIT },
    { "LAYOUT_DIRECTION_LOCALE_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_LAYOUT_DIRECTION_LOCALE },
    { "PFLAG2_LAYOUT_DIRECTION_MASK_SHIFT_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_PFLAG2_LAYOUT_DIRECTION_MASK_SHIFT },
    { "PFLAG2_LAYOUT_DIRECTION_MASK_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_PFLAG2_LAYOUT_DIRECTION_MASK },
    { "PFLAG2_LAYOUT_DIRECTION_RESOLVED_RTL_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_PFLAG2_LAYOUT_DIRECTION_RESOLVED_RTL },
    { "PFLAG2_LAYOUT_DIRECTION_RESOLVED_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_PFLAG2_LAYOUT_DIRECTION_RESOLVED },
    { "PFLAG2_LAYOUT_DIRECTION_RESOLVED_MASK_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_PFLAG2_LAYOUT_DIRECTION_RESOLVED_MASK },
    { "LAYOUT_DIRECTION_FLAGS_", NULL, 0x1a, "[I", &RepackagedAndroidViewView_LAYOUT_DIRECTION_FLAGS_, NULL,  },
    { "LAYOUT_DIRECTION_DEFAULT_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_LAYOUT_DIRECTION_DEFAULT },
    { "LAYOUT_DIRECTION_RESOLVED_DEFAULT_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_LAYOUT_DIRECTION_RESOLVED_DEFAULT },
    { "TEXT_DIRECTION_INHERIT_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_TEXT_DIRECTION_INHERIT },
    { "TEXT_DIRECTION_FIRST_STRONG_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_TEXT_DIRECTION_FIRST_STRONG },
    { "TEXT_DIRECTION_ANY_RTL_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_TEXT_DIRECTION_ANY_RTL },
    { "TEXT_DIRECTION_LTR_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_TEXT_DIRECTION_LTR },
    { "TEXT_DIRECTION_RTL_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_TEXT_DIRECTION_RTL },
    { "TEXT_DIRECTION_LOCALE_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_TEXT_DIRECTION_LOCALE },
    { "TEXT_DIRECTION_FIRST_STRONG_LTR_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_TEXT_DIRECTION_FIRST_STRONG_LTR },
    { "TEXT_DIRECTION_FIRST_STRONG_RTL_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_TEXT_DIRECTION_FIRST_STRONG_RTL },
    { "TEXT_DIRECTION_DEFAULT_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_TEXT_DIRECTION_DEFAULT },
    { "TEXT_DIRECTION_RESOLVED_DEFAULT_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_TEXT_DIRECTION_RESOLVED_DEFAULT },
    { "PFLAG2_TEXT_DIRECTION_MASK_SHIFT_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_PFLAG2_TEXT_DIRECTION_MASK_SHIFT },
    { "PFLAG2_TEXT_DIRECTION_MASK_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_PFLAG2_TEXT_DIRECTION_MASK },
    { "PFLAG2_TEXT_DIRECTION_FLAGS_", NULL, 0x1a, "[I", &RepackagedAndroidViewView_PFLAG2_TEXT_DIRECTION_FLAGS_, NULL,  },
    { "PFLAG2_TEXT_DIRECTION_RESOLVED_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_PFLAG2_TEXT_DIRECTION_RESOLVED },
    { "PFLAG2_TEXT_DIRECTION_RESOLVED_MASK_SHIFT_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_PFLAG2_TEXT_DIRECTION_RESOLVED_MASK_SHIFT },
    { "PFLAG2_TEXT_DIRECTION_RESOLVED_MASK_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_PFLAG2_TEXT_DIRECTION_RESOLVED_MASK },
    { "PFLAG2_TEXT_DIRECTION_RESOLVED_DEFAULT_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_PFLAG2_TEXT_DIRECTION_RESOLVED_DEFAULT },
    { "TEXT_ALIGNMENT_INHERIT_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_TEXT_ALIGNMENT_INHERIT },
    { "TEXT_ALIGNMENT_GRAVITY_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_TEXT_ALIGNMENT_GRAVITY },
    { "TEXT_ALIGNMENT_TEXT_START_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_TEXT_ALIGNMENT_TEXT_START },
    { "TEXT_ALIGNMENT_TEXT_END_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_TEXT_ALIGNMENT_TEXT_END },
    { "TEXT_ALIGNMENT_CENTER_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_TEXT_ALIGNMENT_CENTER },
    { "TEXT_ALIGNMENT_VIEW_START_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_TEXT_ALIGNMENT_VIEW_START },
    { "TEXT_ALIGNMENT_VIEW_END_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_TEXT_ALIGNMENT_VIEW_END },
    { "TEXT_ALIGNMENT_DEFAULT_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_TEXT_ALIGNMENT_DEFAULT },
    { "TEXT_ALIGNMENT_RESOLVED_DEFAULT_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_TEXT_ALIGNMENT_RESOLVED_DEFAULT },
    { "PFLAG2_TEXT_ALIGNMENT_MASK_SHIFT_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_PFLAG2_TEXT_ALIGNMENT_MASK_SHIFT },
    { "PFLAG2_TEXT_ALIGNMENT_MASK_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_PFLAG2_TEXT_ALIGNMENT_MASK },
    { "PFLAG2_TEXT_ALIGNMENT_FLAGS_", NULL, 0x1a, "[I", &RepackagedAndroidViewView_PFLAG2_TEXT_ALIGNMENT_FLAGS_, NULL,  },
    { "PFLAG2_TEXT_ALIGNMENT_RESOLVED_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_PFLAG2_TEXT_ALIGNMENT_RESOLVED },
    { "PFLAG2_TEXT_ALIGNMENT_RESOLVED_MASK_SHIFT_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_PFLAG2_TEXT_ALIGNMENT_RESOLVED_MASK_SHIFT },
    { "PFLAG2_TEXT_ALIGNMENT_RESOLVED_MASK_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_PFLAG2_TEXT_ALIGNMENT_RESOLVED_MASK },
    { "PFLAG2_TEXT_ALIGNMENT_RESOLVED_DEFAULT_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_PFLAG2_TEXT_ALIGNMENT_RESOLVED_DEFAULT },
    { "PFLAG2_IMPORTANT_FOR_ACCESSIBILITY_SHIFT_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_PFLAG2_IMPORTANT_FOR_ACCESSIBILITY_SHIFT },
    { "IMPORTANT_FOR_ACCESSIBILITY_AUTO_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_IMPORTANT_FOR_ACCESSIBILITY_AUTO },
    { "IMPORTANT_FOR_ACCESSIBILITY_YES_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_IMPORTANT_FOR_ACCESSIBILITY_YES },
    { "IMPORTANT_FOR_ACCESSIBILITY_NO_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_IMPORTANT_FOR_ACCESSIBILITY_NO },
    { "IMPORTANT_FOR_ACCESSIBILITY_NO_HIDE_DESCENDANTS_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_IMPORTANT_FOR_ACCESSIBILITY_NO_HIDE_DESCENDANTS },
    { "IMPORTANT_FOR_ACCESSIBILITY_DEFAULT_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_IMPORTANT_FOR_ACCESSIBILITY_DEFAULT },
    { "PFLAG2_IMPORTANT_FOR_ACCESSIBILITY_MASK_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_PFLAG2_IMPORTANT_FOR_ACCESSIBILITY_MASK },
    { "PFLAG2_ACCESSIBILITY_LIVE_REGION_SHIFT_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_PFLAG2_ACCESSIBILITY_LIVE_REGION_SHIFT },
    { "ACCESSIBILITY_LIVE_REGION_NONE_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_ACCESSIBILITY_LIVE_REGION_NONE },
    { "ACCESSIBILITY_LIVE_REGION_POLITE_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_ACCESSIBILITY_LIVE_REGION_POLITE },
    { "ACCESSIBILITY_LIVE_REGION_ASSERTIVE_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_ACCESSIBILITY_LIVE_REGION_ASSERTIVE },
    { "ACCESSIBILITY_LIVE_REGION_DEFAULT_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_ACCESSIBILITY_LIVE_REGION_DEFAULT },
    { "PFLAG2_ACCESSIBILITY_LIVE_REGION_MASK_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_PFLAG2_ACCESSIBILITY_LIVE_REGION_MASK },
    { "PFLAG2_ACCESSIBILITY_FOCUSED_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_PFLAG2_ACCESSIBILITY_FOCUSED },
    { "PFLAG2_SUBTREE_ACCESSIBILITY_STATE_CHANGED_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_PFLAG2_SUBTREE_ACCESSIBILITY_STATE_CHANGED },
    { "PFLAG2_VIEW_QUICK_REJECTED_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_PFLAG2_VIEW_QUICK_REJECTED },
    { "PFLAG2_PADDING_RESOLVED_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_PFLAG2_PADDING_RESOLVED },
    { "PFLAG2_DRAWABLE_RESOLVED_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_PFLAG2_DRAWABLE_RESOLVED },
    { "PFLAG2_HAS_TRANSIENT_STATE_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_PFLAG2_HAS_TRANSIENT_STATE },
    { "ALL_RTL_PROPERTIES_RESOLVED_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_ALL_RTL_PROPERTIES_RESOLVED },
    { "PFLAG3_VIEW_IS_ANIMATING_TRANSFORM_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_PFLAG3_VIEW_IS_ANIMATING_TRANSFORM },
    { "PFLAG3_VIEW_IS_ANIMATING_ALPHA_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_PFLAG3_VIEW_IS_ANIMATING_ALPHA },
    { "PFLAG3_IS_LAID_OUT_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_PFLAG3_IS_LAID_OUT },
    { "PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT },
    { "PFLAG3_CALLED_SUPER_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_PFLAG3_CALLED_SUPER },
    { "PFLAG3_APPLYING_INSETS_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_PFLAG3_APPLYING_INSETS },
    { "PFLAG3_FITTING_SYSTEM_WINDOWS_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_PFLAG3_FITTING_SYSTEM_WINDOWS },
    { "PFLAG3_NESTED_SCROLLING_ENABLED_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_PFLAG3_NESTED_SCROLLING_ENABLED },
    { "PFLAG3_SCROLL_INDICATOR_TOP_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_PFLAG3_SCROLL_INDICATOR_TOP },
    { "PFLAG3_SCROLL_INDICATOR_BOTTOM_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_PFLAG3_SCROLL_INDICATOR_BOTTOM },
    { "PFLAG3_SCROLL_INDICATOR_LEFT_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_PFLAG3_SCROLL_INDICATOR_LEFT },
    { "PFLAG3_SCROLL_INDICATOR_RIGHT_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_PFLAG3_SCROLL_INDICATOR_RIGHT },
    { "PFLAG3_SCROLL_INDICATOR_START_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_PFLAG3_SCROLL_INDICATOR_START },
    { "PFLAG3_SCROLL_INDICATOR_END_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_PFLAG3_SCROLL_INDICATOR_END },
    { "DRAG_MASK_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_DRAG_MASK },
    { "SCROLL_INDICATORS_NONE_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_SCROLL_INDICATORS_NONE },
    { "SCROLL_INDICATORS_PFLAG3_MASK_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_SCROLL_INDICATORS_PFLAG3_MASK },
    { "SCROLL_INDICATORS_TO_PFLAGS3_LSHIFT_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_SCROLL_INDICATORS_TO_PFLAGS3_LSHIFT },
    { "SCROLL_INDICATOR_TOP_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_SCROLL_INDICATOR_TOP },
    { "SCROLL_INDICATOR_BOTTOM_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_SCROLL_INDICATOR_BOTTOM },
    { "SCROLL_INDICATOR_LEFT_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_SCROLL_INDICATOR_LEFT },
    { "SCROLL_INDICATOR_RIGHT_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_SCROLL_INDICATOR_RIGHT },
    { "SCROLL_INDICATOR_START_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_SCROLL_INDICATOR_START },
    { "SCROLL_INDICATOR_END_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_SCROLL_INDICATOR_END },
    { "PFLAG3_ASSIST_BLOCKED_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_PFLAG3_ASSIST_BLOCKED },
    { "OVER_SCROLL_ALWAYS_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_OVER_SCROLL_ALWAYS },
    { "OVER_SCROLL_IF_CONTENT_SCROLLS_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_OVER_SCROLL_IF_CONTENT_SCROLLS },
    { "OVER_SCROLL_NEVER_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_OVER_SCROLL_NEVER },
    { "SYSTEM_UI_FLAG_VISIBLE_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_SYSTEM_UI_FLAG_VISIBLE },
    { "SYSTEM_UI_FLAG_LOW_PROFILE_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_SYSTEM_UI_FLAG_LOW_PROFILE },
    { "SYSTEM_UI_FLAG_HIDE_NAVIGATION_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_SYSTEM_UI_FLAG_HIDE_NAVIGATION },
    { "SYSTEM_UI_FLAG_FULLSCREEN_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_SYSTEM_UI_FLAG_FULLSCREEN },
    { "SYSTEM_UI_FLAG_LAYOUT_STABLE_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_SYSTEM_UI_FLAG_LAYOUT_STABLE },
    { "SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION },
    { "SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN },
    { "SYSTEM_UI_FLAG_IMMERSIVE_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_SYSTEM_UI_FLAG_IMMERSIVE },
    { "SYSTEM_UI_FLAG_IMMERSIVE_STICKY_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_SYSTEM_UI_FLAG_IMMERSIVE_STICKY },
    { "SYSTEM_UI_FLAG_LIGHT_STATUS_BAR_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_SYSTEM_UI_FLAG_LIGHT_STATUS_BAR },
    { "STATUS_BAR_HIDDEN_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_STATUS_BAR_HIDDEN },
    { "STATUS_BAR_VISIBLE_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_STATUS_BAR_VISIBLE },
    { "STATUS_BAR_DISABLE_EXPAND_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_STATUS_BAR_DISABLE_EXPAND },
    { "STATUS_BAR_DISABLE_NOTIFICATION_ICONS_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_STATUS_BAR_DISABLE_NOTIFICATION_ICONS },
    { "STATUS_BAR_DISABLE_NOTIFICATION_ALERTS_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_STATUS_BAR_DISABLE_NOTIFICATION_ALERTS },
    { "STATUS_BAR_DISABLE_NOTIFICATION_TICKER_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_STATUS_BAR_DISABLE_NOTIFICATION_TICKER },
    { "STATUS_BAR_DISABLE_SYSTEM_INFO_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_STATUS_BAR_DISABLE_SYSTEM_INFO },
    { "STATUS_BAR_DISABLE_HOME_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_STATUS_BAR_DISABLE_HOME },
    { "STATUS_BAR_DISABLE_BACK_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_STATUS_BAR_DISABLE_BACK },
    { "STATUS_BAR_DISABLE_CLOCK_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_STATUS_BAR_DISABLE_CLOCK },
    { "STATUS_BAR_DISABLE_RECENT_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_STATUS_BAR_DISABLE_RECENT },
    { "STATUS_BAR_DISABLE_SEARCH_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_STATUS_BAR_DISABLE_SEARCH },
    { "STATUS_BAR_TRANSIENT_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_STATUS_BAR_TRANSIENT },
    { "NAVIGATION_BAR_TRANSIENT_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_NAVIGATION_BAR_TRANSIENT },
    { "STATUS_BAR_UNHIDE_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_STATUS_BAR_UNHIDE },
    { "NAVIGATION_BAR_UNHIDE_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_NAVIGATION_BAR_UNHIDE },
    { "STATUS_BAR_TRANSLUCENT_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_STATUS_BAR_TRANSLUCENT },
    { "NAVIGATION_BAR_TRANSLUCENT_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_NAVIGATION_BAR_TRANSLUCENT },
    { "RECENT_APPS_VISIBLE_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_RECENT_APPS_VISIBLE },
    { "SYSTEM_UI_TRANSPARENT_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_SYSTEM_UI_TRANSPARENT },
    { "PUBLIC_STATUS_BAR_VISIBILITY_MASK_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_PUBLIC_STATUS_BAR_VISIBILITY_MASK },
    { "SYSTEM_UI_CLEARABLE_FLAGS_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_SYSTEM_UI_CLEARABLE_FLAGS },
    { "SYSTEM_UI_LAYOUT_FLAGS_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_SYSTEM_UI_LAYOUT_FLAGS },
    { "FIND_VIEWS_WITH_TEXT_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_FIND_VIEWS_WITH_TEXT },
    { "FIND_VIEWS_WITH_CONTENT_DESCRIPTION_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_FIND_VIEWS_WITH_CONTENT_DESCRIPTION },
    { "FIND_VIEWS_WITH_ACCESSIBILITY_NODE_PROVIDERS_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_FIND_VIEWS_WITH_ACCESSIBILITY_NODE_PROVIDERS },
    { "ACCESSIBILITY_CURSOR_POSITION_UNDEFINED_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_ACCESSIBILITY_CURSOR_POSITION_UNDEFINED },
    { "SCREEN_STATE_OFF_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_SCREEN_STATE_OFF },
    { "SCREEN_STATE_ON_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_SCREEN_STATE_ON },
    { "SCROLL_AXIS_NONE_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_SCROLL_AXIS_NONE },
    { "SCROLL_AXIS_HORIZONTAL_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_SCROLL_AXIS_HORIZONTAL },
    { "SCROLL_AXIS_VERTICAL_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_SCROLL_AXIS_VERTICAL },
    { "mOverScrollMode_", NULL, 0x2, "I", NULL, NULL,  },
    { "mParent_", NULL, 0x4, "Lrepackaged.android.view.ViewParent;", NULL, NULL,  },
    { "mAttachInfo_", NULL, 0x0, "Lrepackaged.android.view.View$AttachInfo;", NULL, NULL,  },
    { "mPrivateFlags_", NULL, 0x0, "I", NULL, NULL,  },
    { "mPrivateFlags2_", NULL, 0x0, "I", NULL, NULL,  },
    { "mPrivateFlags3_", NULL, 0x0, "I", NULL, NULL,  },
    { "mSystemUiVisibility_", NULL, 0x0, "I", NULL, NULL,  },
    { "mTransientStateCount_", NULL, 0x0, "I", NULL, NULL,  },
    { "mWindowAttachCount_", NULL, 0x0, "I", NULL, NULL,  },
    { "mLayoutParams_", NULL, 0x4, "Lrepackaged.android.view.ViewGroup$LayoutParams;", NULL, NULL,  },
    { "mViewFlags_", NULL, 0x0, "I", NULL, NULL,  },
    { "mTransformationInfo_", NULL, 0x0, "Lrepackaged.android.view.View$TransformationInfo;", NULL, NULL,  },
    { "mClipBounds_", NULL, 0x0, "Lrepackaged.android.graphics.Rect;", NULL, NULL,  },
    { "mLastIsOpaque_", NULL, 0x2, "Z", NULL, NULL,  },
    { "mLeft_", NULL, 0x4, "I", NULL, NULL,  },
    { "mRight_", NULL, 0x4, "I", NULL, NULL,  },
    { "mTop_", NULL, 0x4, "I", NULL, NULL,  },
    { "mBottom_", NULL, 0x4, "I", NULL, NULL,  },
    { "mScrollX_", NULL, 0x4, "I", NULL, NULL,  },
    { "mScrollY_", NULL, 0x4, "I", NULL, NULL,  },
    { "mPaddingLeft_", NULL, 0x4, "I", NULL, NULL,  },
    { "mPaddingRight_", NULL, 0x4, "I", NULL, NULL,  },
    { "mPaddingTop_", NULL, 0x4, "I", NULL, NULL,  },
    { "mPaddingBottom_", NULL, 0x4, "I", NULL, NULL,  },
    { "mLayoutInsets_", NULL, 0x2, "Lrepackaged.android.graphics.Insets;", NULL, NULL,  },
    { "mContentDescription_", NULL, 0x2, "Ljava.lang.CharSequence;", NULL, NULL,  },
    { "mLabelForId_", NULL, 0x2, "I", NULL, NULL,  },
    { "mMatchLabelForPredicate_", NULL, 0x2, "Lrepackaged.android.view.View$MatchLabelForPredicate;", NULL, NULL,  },
    { "mAccessibilityTraversalBeforeId_", NULL, 0x2, "I", NULL, NULL,  },
    { "mAccessibilityTraversalAfterId_", NULL, 0x2, "I", NULL, NULL,  },
    { "mMatchIdPredicate_", NULL, 0x2, "Lrepackaged.android.view.View$MatchIdPredicate;", NULL, NULL,  },
    { "mUserPaddingRight_", NULL, 0x4, "I", NULL, NULL,  },
    { "mUserPaddingBottom_", NULL, 0x4, "I", NULL, NULL,  },
    { "mUserPaddingLeft_", NULL, 0x4, "I", NULL, NULL,  },
    { "mUserPaddingStart_", NULL, 0x0, "I", NULL, NULL,  },
    { "mUserPaddingEnd_", NULL, 0x0, "I", NULL, NULL,  },
    { "mUserPaddingLeftInitial_", NULL, 0x0, "I", NULL, NULL,  },
    { "mUserPaddingRightInitial_", NULL, 0x0, "I", NULL, NULL,  },
    { "UNDEFINED_PADDING_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_UNDEFINED_PADDING },
    { "mLeftPaddingDefined_", NULL, 0x2, "Z", NULL, NULL,  },
    { "mRightPaddingDefined_", NULL, 0x2, "Z", NULL, NULL,  },
    { "mOldWidthMeasureSpec_", NULL, 0x0, "I", NULL, NULL,  },
    { "mOldHeightMeasureSpec_", NULL, 0x0, "I", NULL, NULL,  },
    { "mMeasureCache_", NULL, 0x2, "Lrepackaged.android.util.LongSparseLongArray;", NULL, NULL,  },
    { "mBackground_", NULL, 0x2, "Lrepackaged.android.graphics.drawable.Drawable;", NULL, NULL,  },
    { "mBackgroundTint_", NULL, 0x2, "Lrepackaged.android.view.View$TintInfo;", NULL, NULL,  },
    { "mForegroundInfo_", NULL, 0x2, "Lrepackaged.android.view.View$ForegroundInfo;", NULL, NULL,  },
    { "mScrollIndicatorDrawable_", NULL, 0x2, "Lrepackaged.android.graphics.drawable.Drawable;", NULL, NULL,  },
    { "mBackgroundRenderNode_", NULL, 0x2, "Lrepackaged.android.view.RenderNode;", NULL, NULL,  },
    { "mBackgroundResource_", NULL, 0x2, "I", NULL, NULL,  },
    { "mBackgroundSizeChanged_", NULL, 0x2, "Z", NULL, NULL,  },
    { "mTransitionName_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "mListenerInfo_", NULL, 0x0, "Lrepackaged.android.view.View$ListenerInfo;", NULL, NULL,  },
    { "mContext_", NULL, 0x4, "Lrepackaged.android.content.Context;", NULL, NULL,  },
    { "mResources_", NULL, 0x12, "Lrepackaged.android.content.res.Resources;", NULL, NULL,  },
    { "mScrollCache_", NULL, 0x2, "Lrepackaged.android.view.View$ScrollabilityCache;", NULL, NULL,  },
    { "mDrawableState_", NULL, 0x2, "[I", NULL, NULL,  },
    { "mOutlineProvider_", NULL, 0x0, "Lrepackaged.android.view.ViewOutlineProvider;", NULL, NULL,  },
    { "mStateListAnimator_", NULL, 0x2, "Lrepackaged.android.animation.StateListAnimator;", NULL, NULL,  },
    { "mNextFocusLeftId_", NULL, 0x2, "I", NULL, NULL,  },
    { "mNextFocusRightId_", NULL, 0x2, "I", NULL, NULL,  },
    { "mNextFocusUpId_", NULL, 0x2, "I", NULL, NULL,  },
    { "mNextFocusDownId_", NULL, 0x2, "I", NULL, NULL,  },
    { "mNextFocusForwardId_", NULL, 0x0, "I", NULL, NULL,  },
    { "mPendingCheckForLongPress_", NULL, 0x2, "Lrepackaged.android.view.View$CheckForLongPress;", NULL, NULL,  },
    { "mPendingCheckForTap_", NULL, 0x2, "Lrepackaged.android.view.View$CheckForTap;", NULL, NULL,  },
    { "mPerformClick_", NULL, 0x2, "Lrepackaged.android.view.View$PerformClick;", NULL, NULL,  },
    { "mSendViewScrolledAccessibilityEvent_", NULL, 0x2, "Lrepackaged.android.view.View$SendViewScrolledAccessibilityEvent;", NULL, NULL,  },
    { "mUnsetPressedState_", NULL, 0x2, "Lrepackaged.android.view.View$UnsetPressedState;", NULL, NULL,  },
    { "mHasPerformedLongPress_", NULL, 0x2, "Z", NULL, NULL,  },
    { "mInContextButtonPress_", NULL, 0x2, "Z", NULL, NULL,  },
    { "mIgnoreNextUpEvent_", NULL, 0x2, "Z", NULL, NULL,  },
    { "mMinHeight_", NULL, 0x2, "I", NULL, NULL,  },
    { "mMinWidth_", NULL, 0x2, "I", NULL, NULL,  },
    { "mTouchDelegate_", NULL, 0x2, "Lrepackaged.android.view.TouchDelegate;", NULL, NULL,  },
    { "mDrawingCacheBackgroundColor_", NULL, 0x2, "I", NULL, NULL,  },
    { "mFloatingTreeObserver_", NULL, 0x2, "Lrepackaged.android.view.ViewTreeObserver;", NULL, NULL,  },
    { "mTouchSlop_", NULL, 0x2, "I", NULL, NULL,  },
    { "mAnimator_", NULL, 0x2, "Lrepackaged.android.view.ViewPropertyAnimator;", NULL, NULL,  },
    { "DRAG_FLAG_GLOBAL_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_DRAG_FLAG_GLOBAL },
    { "mVerticalScrollFactor_", NULL, 0x2, "F", NULL, NULL,  },
    { "mVerticalScrollbarPosition_", NULL, 0x2, "I", NULL, NULL,  },
    { "SCROLLBAR_POSITION_DEFAULT_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_SCROLLBAR_POSITION_DEFAULT },
    { "SCROLLBAR_POSITION_LEFT_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_SCROLLBAR_POSITION_LEFT },
    { "SCROLLBAR_POSITION_RIGHT_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_SCROLLBAR_POSITION_RIGHT },
    { "LAYER_TYPE_NONE_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_LAYER_TYPE_NONE },
    { "LAYER_TYPE_SOFTWARE_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_LAYER_TYPE_SOFTWARE },
    { "LAYER_TYPE_HARDWARE_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_LAYER_TYPE_HARDWARE },
    { "mLayerType_", NULL, 0x0, "I", NULL, NULL,  },
    { "mLayerPaint_", NULL, 0x0, "Lrepackaged.android.graphics.Paint;", NULL, NULL,  },
    { "mCachingFailed_", NULL, 0x1, "Z", NULL, NULL,  },
    { "mDrawingCache_", NULL, 0x2, "Lrepackaged.android.graphics.Bitmap;", NULL, NULL,  },
    { "mUnscaledDrawingCache_", NULL, 0x2, "Lrepackaged.android.graphics.Bitmap;", NULL, NULL,  },
    { "mRenderNode_", NULL, 0x10, "Lrepackaged.android.view.RenderNode;", NULL, NULL,  },
    { "mSendingHoverAccessibilityEvents_", NULL, 0x2, "Z", NULL, NULL,  },
    { "mAccessibilityDelegate_", NULL, 0x0, "Lrepackaged.android.view.View$AccessibilityDelegate;", NULL, NULL,  },
    { "mOverlay_", NULL, 0x0, "Lrepackaged.android.view.ViewOverlay;", NULL, NULL,  },
    { "mNestedScrollingParent_", NULL, 0x2, "Lrepackaged.android.view.ViewParent;", NULL, NULL,  },
    { "mInputEventConsistencyVerifier_", NULL, 0x14, "Lrepackaged.android.view.InputEventConsistencyVerifier;", NULL, NULL,  },
    { "sNextGeneratedId_", NULL, 0x1a, "Ljava.util.concurrent.atomic.AtomicInteger;", &RepackagedAndroidViewView_sNextGeneratedId_, NULL,  },
    { "mTempNestedScrollConsumed_", NULL, 0x2, "[I", NULL, NULL,  },
    { "mGhostView_", NULL, 0x0, "Lrepackaged.android.view.GhostView;", NULL, NULL,  },
    { "mAttributes_", NULL, 0x1, "[Ljava.lang.String;", NULL, NULL,  },
    { "mAttributeMap_", NULL, 0xa, "Lrepackaged.android.util.SparseArray;", &RepackagedAndroidViewView_mAttributeMap_, "Lrepackaged/android/util/SparseArray<Ljava/lang/String;>;",  },
    { "mStartActivityRequestWho_", NULL, 0x0, "Ljava.lang.String;", NULL, NULL,  },
    { "PROVIDER_BACKGROUND_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_PROVIDER_BACKGROUND },
    { "PROVIDER_NONE_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_PROVIDER_NONE },
    { "PROVIDER_BOUNDS_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_PROVIDER_BOUNDS },
    { "PROVIDER_PADDED_BOUNDS_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_PROVIDER_PADDED_BOUNDS },
    { "ALPHA_", NULL, 0x19, "Lrepackaged.android.util.Property;", &RepackagedAndroidViewView_ALPHA_, "Lrepackaged/android/util/Property<Lrepackaged/android/view/View;Ljava/lang/Float;>;",  },
    { "TRANSLATION_X_", NULL, 0x19, "Lrepackaged.android.util.Property;", &RepackagedAndroidViewView_TRANSLATION_X_, "Lrepackaged/android/util/Property<Lrepackaged/android/view/View;Ljava/lang/Float;>;",  },
    { "TRANSLATION_Y_", NULL, 0x19, "Lrepackaged.android.util.Property;", &RepackagedAndroidViewView_TRANSLATION_Y_, "Lrepackaged/android/util/Property<Lrepackaged/android/view/View;Ljava/lang/Float;>;",  },
    { "TRANSLATION_Z_", NULL, 0x19, "Lrepackaged.android.util.Property;", &RepackagedAndroidViewView_TRANSLATION_Z_, "Lrepackaged/android/util/Property<Lrepackaged/android/view/View;Ljava/lang/Float;>;",  },
    { "X_", NULL, 0x19, "Lrepackaged.android.util.Property;", &RepackagedAndroidViewView_X_, "Lrepackaged/android/util/Property<Lrepackaged/android/view/View;Ljava/lang/Float;>;",  },
    { "Y_", NULL, 0x19, "Lrepackaged.android.util.Property;", &RepackagedAndroidViewView_Y_, "Lrepackaged/android/util/Property<Lrepackaged/android/view/View;Ljava/lang/Float;>;",  },
    { "Z_", NULL, 0x19, "Lrepackaged.android.util.Property;", &RepackagedAndroidViewView_Z_, "Lrepackaged/android/util/Property<Lrepackaged/android/view/View;Ljava/lang/Float;>;",  },
    { "ROTATION_", NULL, 0x19, "Lrepackaged.android.util.Property;", &RepackagedAndroidViewView_ROTATION_, "Lrepackaged/android/util/Property<Lrepackaged/android/view/View;Ljava/lang/Float;>;",  },
    { "ROTATION_X_", NULL, 0x19, "Lrepackaged.android.util.Property;", &RepackagedAndroidViewView_ROTATION_X_, "Lrepackaged/android/util/Property<Lrepackaged/android/view/View;Ljava/lang/Float;>;",  },
    { "ROTATION_Y_", NULL, 0x19, "Lrepackaged.android.util.Property;", &RepackagedAndroidViewView_ROTATION_Y_, "Lrepackaged/android/util/Property<Lrepackaged/android/view/View;Ljava/lang/Float;>;",  },
    { "SCALE_X_", NULL, 0x19, "Lrepackaged.android.util.Property;", &RepackagedAndroidViewView_SCALE_X_, "Lrepackaged/android/util/Property<Lrepackaged/android/view/View;Ljava/lang/Float;>;",  },
    { "SCALE_Y_", NULL, 0x19, "Lrepackaged.android.util.Property;", &RepackagedAndroidViewView_SCALE_Y_, "Lrepackaged/android/util/Property<Lrepackaged/android/view/View;Ljava/lang/Float;>;",  },
  };
  static const char *inner_classes[] = {"Lrepackaged.android.view.View$Visibility;", "Lrepackaged.android.view.View$DrawingCacheQuality;", "Lrepackaged.android.view.View$ScrollBarStyle;", "Lrepackaged.android.view.View$FocusableMode;", "Lrepackaged.android.view.View$FocusDirection;", "Lrepackaged.android.view.View$FocusRealDirection;", "Lrepackaged.android.view.View$LayoutDir;", "Lrepackaged.android.view.View$ResolvedLayoutDir;", "Lrepackaged.android.view.View$TextAlignment;", "Lrepackaged.android.view.View$ScrollIndicators;", "Lrepackaged.android.view.View$FindViewFlags;", "Lrepackaged.android.view.View$TransformationInfo;", "Lrepackaged.android.view.View$TintInfo;", "Lrepackaged.android.view.View$ForegroundInfo;", "Lrepackaged.android.view.View$ListenerInfo;", "Lrepackaged.android.view.View$DeclaredOnClickListener;", "Lrepackaged.android.view.View$OnScrollChangeListener;", "Lrepackaged.android.view.View$OnLayoutChangeListener;", "Lrepackaged.android.view.View$DragShadowBuilder;", "Lrepackaged.android.view.View$MeasureSpec;", "Lrepackaged.android.view.View$CheckForLongPress;", "Lrepackaged.android.view.View$CheckForTap;", "Lrepackaged.android.view.View$PerformClick;", "Lrepackaged.android.view.View$OnKeyListener;", "Lrepackaged.android.view.View$OnTouchListener;", "Lrepackaged.android.view.View$OnHoverListener;", "Lrepackaged.android.view.View$OnGenericMotionListener;", "Lrepackaged.android.view.View$OnLongClickListener;", "Lrepackaged.android.view.View$OnDragListener;", "Lrepackaged.android.view.View$OnFocusChangeListener;", "Lrepackaged.android.view.View$OnClickListener;", "Lrepackaged.android.view.View$OnContextClickListener;", "Lrepackaged.android.view.View$OnCreateContextMenuListener;", "Lrepackaged.android.view.View$OnSystemUiVisibilityChangeListener;", "Lrepackaged.android.view.View$OnAttachStateChangeListener;", "Lrepackaged.android.view.View$OnApplyWindowInsetsListener;", "Lrepackaged.android.view.View$UnsetPressedState;", "Lrepackaged.android.view.View$BaseSavedState;", "Lrepackaged.android.view.View$AttachInfo;", "Lrepackaged.android.view.View$ScrollabilityCache;", "Lrepackaged.android.view.View$SendViewScrolledAccessibilityEvent;", "Lrepackaged.android.view.View$AccessibilityDelegate;", "Lrepackaged.android.view.View$MatchIdPredicate;", "Lrepackaged.android.view.View$MatchLabelForPredicate;", "Lrepackaged.android.view.View$SendViewStateChangedAccessibilityEvent;"};
  static const J2ObjcClassInfo _RepackagedAndroidViewView = { 2, "View", "repackaged.android.view", NULL, 0x1, 745, methods, 408, fields, 0, NULL, 45, inner_classes, NULL, NULL };
  return &_RepackagedAndroidViewView;
}

@end


#line 3781
void RepackagedAndroidViewView_initWithRepackagedAndroidContentContext_(RepackagedAndroidViewView *self, id<RepackagedAndroidContentContext> context) {
  (void) NSObject_init(self);
  self->mCurrentAnimation_ =
#line 1590
  nil;
  self->mRecreateDisplayList_ =
#line 1615
  NO;
  self->mID_ = RepackagedAndroidViewView_NO_ID;
  self->mAccessibilityViewId_ = RepackagedAndroidViewView_NO_ID;
  self->mAccessibilityCursorPosition_ = RepackagedAndroidViewView_ACCESSIBILITY_CURSOR_POSITION_UNDEFINED;
  self->mTag_ =
#line 1644
  nil;
  self->mTransientStateCount_ =
#line 3110
  0;
  self->mClipBounds_ =
#line 3171
  nil;
  self->mPaddingLeft_ =
#line 3225
  0;
  self->mPaddingRight_ =
#line 3232
  0;
  self->mLabelForId_ =
#line 3263
  RepackagedAndroidViewView_NO_ID;
  self->mAccessibilityTraversalBeforeId_ = RepackagedAndroidViewView_NO_ID;
  self->mAccessibilityTraversalAfterId_ = RepackagedAndroidViewView_NO_ID;
  self->mLeftPaddingDefined_ =
#line 3346
  NO;
  self->mRightPaddingDefined_ =
#line 3351
  NO;
  self->mOldWidthMeasureSpec_ =
#line 3356
  JavaLangInteger_MIN_VALUE;
  self->mOldHeightMeasureSpec_ =
#line 3360
  JavaLangInteger_MIN_VALUE;
  self->mDrawableState_ =
#line 3481
  nil;
  self->mOutlineProvider_ = RepackagedAndroidViewViewOutlineProvider_get_BACKGROUND_();
  self->mNextFocusLeftId_ =
#line 3494
  RepackagedAndroidViewView_NO_ID;
  self->mNextFocusRightId_ =
#line 3500
  RepackagedAndroidViewView_NO_ID;
  self->mNextFocusUpId_ =
#line 3506
  RepackagedAndroidViewView_NO_ID;
  self->mNextFocusDownId_ =
#line 3512
  RepackagedAndroidViewView_NO_ID;
  self->mNextFocusForwardId_ =
#line 3518
  RepackagedAndroidViewView_NO_ID;
  self->mPendingCheckForTap_ =
#line 3521
  nil;
  self->mTouchDelegate_ =
#line 3567
  nil;
  self->mDrawingCacheBackgroundColor_ =
#line 3573
  0;
  self->mAnimator_ =
#line 3588
  nil;
  self->mLayerType_ = RepackagedAndroidViewView_LAYER_TYPE_NONE;
  self->mInputEventConsistencyVerifier_ =
#line 3744
  RepackagedAndroidViewInputEventConsistencyVerifier_isInstrumentationEnabled() ? new_RepackagedAndroidViewInputEventConsistencyVerifier_initWithRepackagedAndroidViewView_withInt_(self,
#line 3745
  0) : nil;
  
#line 3782
  self->mContext_ = context;
  self->mResources_ = context != nil ? [context getResources] : nil;
  self->mViewFlags_ = RepackagedAndroidViewView_SOUND_EFFECTS_ENABLED | RepackagedAndroidViewView_HAPTIC_FEEDBACK_ENABLED;
  
#line 3786
  self->mPrivateFlags2_ =
#line 3787
  (LShift32(RepackagedAndroidViewView_LAYOUT_DIRECTION_DEFAULT, RepackagedAndroidViewView_PFLAG2_LAYOUT_DIRECTION_MASK_SHIFT)) |
#line 3788
  (LShift32(RepackagedAndroidViewView_TEXT_DIRECTION_DEFAULT, RepackagedAndroidViewView_PFLAG2_TEXT_DIRECTION_MASK_SHIFT)) |
#line 3789
  (RepackagedAndroidViewView_PFLAG2_TEXT_DIRECTION_RESOLVED_DEFAULT) |
#line 3790
  (LShift32(RepackagedAndroidViewView_TEXT_ALIGNMENT_DEFAULT, RepackagedAndroidViewView_PFLAG2_TEXT_ALIGNMENT_MASK_SHIFT)) |
#line 3791
  (RepackagedAndroidViewView_PFLAG2_TEXT_ALIGNMENT_RESOLVED_DEFAULT) |
#line 3792
  (LShift32(RepackagedAndroidViewView_IMPORTANT_FOR_ACCESSIBILITY_DEFAULT, RepackagedAndroidViewView_PFLAG2_IMPORTANT_FOR_ACCESSIBILITY_SHIFT));
  self->mTouchSlop_ = [((RepackagedAndroidViewViewConfiguration *) nil_chk(RepackagedAndroidViewViewConfiguration_getWithRepackagedAndroidContentContext_(context))) getScaledTouchSlop];
  [self setOverScrollModeWithInt:RepackagedAndroidViewView_OVER_SCROLL_IF_CONTENT_SCROLLS];
  self->mUserPaddingStart_ = RepackagedAndroidViewView_UNDEFINED_PADDING;
  self->mUserPaddingEnd_ = RepackagedAndroidViewView_UNDEFINED_PADDING;
  self->mRenderNode_ = RepackagedAndroidViewRenderNode_createWithNSString_withRepackagedAndroidViewView_([[self getClass] getName], self);
  
#line 3799
  if (!RepackagedAndroidViewView_sCompatibilityDone_ && context != nil) {
    jint targetSdkVersion = ((RepackagedAndroidContentPmApplicationInfo *) nil_chk([context getApplicationInfo]))->targetSdkVersion_;
    
#line 3803
    RepackagedAndroidViewView_sUseBrokenMakeMeasureSpec_ = (targetSdkVersion <= RepackagedAndroidOsBuild_VERSION_CODES_JELLY_BEAN_MR1);
    
#line 3807
    RepackagedAndroidViewView_sIgnoreMeasureCache_ = (targetSdkVersion < RepackagedAndroidOsBuild_VERSION_CODES_KITKAT);
    
#line 3809
    *RepackagedAndroidGraphicsCanvas_getRef_sCompatibilityRestore_() = (targetSdkVersion < RepackagedAndroidOsBuild_VERSION_CODES_M);
    
#line 3816
    RepackagedAndroidViewView_sUseZeroUnspecifiedMeasureSpec_ = (targetSdkVersion < RepackagedAndroidOsBuild_VERSION_CODES_M);
    
#line 3818
    RepackagedAndroidViewView_sCompatibilityDone_ = YES;
  }
}


#line 3781
RepackagedAndroidViewView *new_RepackagedAndroidViewView_initWithRepackagedAndroidContentContext_(id<RepackagedAndroidContentContext> context) {
  RepackagedAndroidViewView *self = [RepackagedAndroidViewView alloc];
  RepackagedAndroidViewView_initWithRepackagedAndroidContentContext_(self, context);
  return self;
}


#line 3838
void RepackagedAndroidViewView_initWithRepackagedAndroidContentContext_withRepackagedAndroidUtilAttributeSet_(RepackagedAndroidViewView *self, id<RepackagedAndroidContentContext> context, id<RepackagedAndroidUtilAttributeSet> attrs) {
  (void) RepackagedAndroidViewView_initWithRepackagedAndroidContentContext_withRepackagedAndroidUtilAttributeSet_withInt_(self, context, attrs, 0);
}


#line 3838
RepackagedAndroidViewView *new_RepackagedAndroidViewView_initWithRepackagedAndroidContentContext_withRepackagedAndroidUtilAttributeSet_(id<RepackagedAndroidContentContext> context, id<RepackagedAndroidUtilAttributeSet> attrs) {
  RepackagedAndroidViewView *self = [RepackagedAndroidViewView alloc];
  RepackagedAndroidViewView_initWithRepackagedAndroidContentContext_withRepackagedAndroidUtilAttributeSet_(self, context, attrs);
  return self;
}


#line 3859
void RepackagedAndroidViewView_initWithRepackagedAndroidContentContext_withRepackagedAndroidUtilAttributeSet_withInt_(RepackagedAndroidViewView *self, id<RepackagedAndroidContentContext> context, id<RepackagedAndroidUtilAttributeSet> attrs, jint defStyleAttr) {
  (void) RepackagedAndroidViewView_initWithRepackagedAndroidContentContext_withRepackagedAndroidUtilAttributeSet_withInt_withInt_(self, context, attrs, defStyleAttr, 0);
}


#line 3859
RepackagedAndroidViewView *new_RepackagedAndroidViewView_initWithRepackagedAndroidContentContext_withRepackagedAndroidUtilAttributeSet_withInt_(id<RepackagedAndroidContentContext> context, id<RepackagedAndroidUtilAttributeSet> attrs, jint defStyleAttr) {
  RepackagedAndroidViewView *self = [RepackagedAndroidViewView alloc];
  RepackagedAndroidViewView_initWithRepackagedAndroidContentContext_withRepackagedAndroidUtilAttributeSet_withInt_(self, context, attrs, defStyleAttr);
  return self;
}


#line 3896
void RepackagedAndroidViewView_initWithRepackagedAndroidContentContext_withRepackagedAndroidUtilAttributeSet_withInt_withInt_(RepackagedAndroidViewView *self, id<RepackagedAndroidContentContext> context, id<RepackagedAndroidUtilAttributeSet> attrs, jint defStyleAttr, jint defStyleRes) {
  (void) RepackagedAndroidViewView_initWithRepackagedAndroidContentContext_(self, context);
  
#line 3899
  id<RepackagedAndroidContentResTypedArray> a = [((id<RepackagedAndroidContentContext>) nil_chk(context)) obtainStyledAttributesWithRepackagedAndroidUtilAttributeSet:
#line 3900
  attrs withIntArray:RepackagedComAndroidInternalR_styleable_get_View_() withInt:defStyleAttr withInt:defStyleRes];
  
#line 3902
  if (RepackagedAndroidViewView_mDebugViewAttributes_) {
    RepackagedAndroidViewView_saveAttributeDataWithRepackagedAndroidUtilAttributeSet_withRepackagedAndroidContentResTypedArray_(self, attrs, a);
  }
  
#line 3906
  RepackagedAndroidGraphicsDrawableDrawable *background = nil;
  
#line 3908
  jint leftPadding = -1;
  jint topPadding = -1;
  jint rightPadding = -1;
  jint bottomPadding = -1;
  jint startPadding = RepackagedAndroidViewView_UNDEFINED_PADDING;
  jint endPadding = RepackagedAndroidViewView_UNDEFINED_PADDING;
  
#line 3915
  jint padding = -1;
  
#line 3917
  jint viewFlagValues = 0;
  jint viewFlagMasks = 0;
  
#line 3920
  jboolean setScrollContainer = NO;
  
#line 3922
  jint x = 0;
  jint y = 0;
  
#line 3925
  jfloat tx = 0;
  jfloat ty = 0;
  jfloat tz = 0;
  jfloat elevation = 0;
  jfloat rotation = 0;
  jfloat rotationX = 0;
  jfloat rotationY = 0;
  jfloat sx = 1.0f;
  jfloat sy = 1.0f;
  jboolean transformSet = NO;
  
#line 3936
  jint scrollbarStyle = RepackagedAndroidViewView_SCROLLBARS_INSIDE_OVERLAY;
  jint overScrollMode = self->mOverScrollMode_;
  jboolean initializeScrollbars = NO;
  jboolean initializeScrollIndicators = NO;
  
#line 3941
  jboolean startPaddingDefined = NO;
  jboolean endPaddingDefined = NO;
  jboolean leftPaddingDefined = NO;
  jboolean rightPaddingDefined = NO;
  
#line 3946
  jint targetSdkVersion = ((RepackagedAndroidContentPmApplicationInfo *) nil_chk([context getApplicationInfo]))->targetSdkVersion_;
  
#line 3948
  jint N = [((id<RepackagedAndroidContentResTypedArray>) nil_chk(a)) getIndexCount];
  for (jint i = 0; i < N; i++) {
    jint attr = [a getIndexWithInt:i];
    {
      
#line 4092
      jint visibility;
      
#line 4103
      jint layoutDirection;
      jint value;
      
#line 4109
      jint cacheQuality;
      
#line 4140
      jint scrollbars;
      
#line 4155
      jint fadingEdge;
      
#line 4214
      NSString *handlerName;
      
#line 4232
      jint textDirection;
      
#line 4241
      jint textAlignment;
      
#line 4313
      jint scrollIndicators;
      
#line 3951
      switch (attr) {
        case RepackagedComAndroidInternalR_styleable_View_background:
        background = [a getDrawableWithInt:attr];
        break;
        case RepackagedComAndroidInternalR_styleable_View_padding:
        padding = [a getDimensionPixelSizeWithInt:attr withInt:-1];
        self->mUserPaddingLeftInitial_ = padding;
        self->mUserPaddingRightInitial_ = padding;
        leftPaddingDefined = YES;
        rightPaddingDefined = YES;
        break;
        case RepackagedComAndroidInternalR_styleable_View_paddingLeft:
        leftPadding = [a getDimensionPixelSizeWithInt:attr withInt:-1];
        self->mUserPaddingLeftInitial_ = leftPadding;
        leftPaddingDefined = YES;
        break;
        case RepackagedComAndroidInternalR_styleable_View_paddingTop:
        topPadding = [a getDimensionPixelSizeWithInt:attr withInt:-1];
        break;
        case RepackagedComAndroidInternalR_styleable_View_paddingRight:
        rightPadding = [a getDimensionPixelSizeWithInt:attr withInt:-1];
        self->mUserPaddingRightInitial_ = rightPadding;
        rightPaddingDefined = YES;
        break;
        case RepackagedComAndroidInternalR_styleable_View_paddingBottom:
        bottomPadding = [a getDimensionPixelSizeWithInt:attr withInt:-1];
        break;
        case RepackagedComAndroidInternalR_styleable_View_paddingStart:
        startPadding = [a getDimensionPixelSizeWithInt:attr withInt:RepackagedAndroidViewView_UNDEFINED_PADDING];
        startPaddingDefined = (startPadding != RepackagedAndroidViewView_UNDEFINED_PADDING);
        break;
        case RepackagedComAndroidInternalR_styleable_View_paddingEnd:
        endPadding = [a getDimensionPixelSizeWithInt:attr withInt:RepackagedAndroidViewView_UNDEFINED_PADDING];
        endPaddingDefined = (endPadding != RepackagedAndroidViewView_UNDEFINED_PADDING);
        break;
        case RepackagedComAndroidInternalR_styleable_View_scrollX:
        x = [a getDimensionPixelOffsetWithInt:attr withInt:0];
        break;
        case RepackagedComAndroidInternalR_styleable_View_scrollY:
        y = [a getDimensionPixelOffsetWithInt:attr withInt:0];
        break;
        case RepackagedComAndroidInternalR_styleable_View_alpha:
        [self setAlphaWithFloat:[a getFloatWithInt:attr withFloat:1.0f]];
        break;
        case RepackagedComAndroidInternalR_styleable_View_transformPivotX:
        [self setPivotXWithFloat:[a getDimensionPixelOffsetWithInt:attr withInt:0]];
        break;
        case RepackagedComAndroidInternalR_styleable_View_transformPivotY:
        [self setPivotYWithFloat:[a getDimensionPixelOffsetWithInt:attr withInt:0]];
        break;
        case RepackagedComAndroidInternalR_styleable_View_translationX:
        tx = [a getDimensionPixelOffsetWithInt:attr withInt:0];
        transformSet = YES;
        break;
        case RepackagedComAndroidInternalR_styleable_View_translationY:
        ty = [a getDimensionPixelOffsetWithInt:attr withInt:0];
        transformSet = YES;
        break;
        case RepackagedComAndroidInternalR_styleable_View_translationZ:
        tz = [a getDimensionPixelOffsetWithInt:attr withInt:0];
        transformSet = YES;
        break;
        case RepackagedComAndroidInternalR_styleable_View_elevation:
        elevation = [a getDimensionPixelOffsetWithInt:attr withInt:0];
        transformSet = YES;
        break;
        case RepackagedComAndroidInternalR_styleable_View_rotation:
        rotation = [a getFloatWithInt:attr withFloat:0];
        transformSet = YES;
        break;
        case RepackagedComAndroidInternalR_styleable_View_rotationX:
        rotationX = [a getFloatWithInt:attr withFloat:0];
        transformSet = YES;
        break;
        case RepackagedComAndroidInternalR_styleable_View_rotationY:
        rotationY = [a getFloatWithInt:attr withFloat:0];
        transformSet = YES;
        break;
        case RepackagedComAndroidInternalR_styleable_View_scaleX:
        sx = [a getFloatWithInt:attr withFloat:1.0f];
        transformSet = YES;
        break;
        case RepackagedComAndroidInternalR_styleable_View_scaleY:
        sy = [a getFloatWithInt:attr withFloat:1.0f];
        transformSet = YES;
        break;
        case RepackagedComAndroidInternalR_styleable_View_id:
        self->mID_ = [a getResourceIdWithInt:attr withInt:RepackagedAndroidViewView_NO_ID];
        break;
        case RepackagedComAndroidInternalR_styleable_View_tag:
        self->mTag_ = [a getTextWithInt:attr];
        break;
        case RepackagedComAndroidInternalR_styleable_View_fitsSystemWindows:
        if ([a getBooleanWithInt:attr withBoolean:NO]) {
          viewFlagValues |= RepackagedAndroidViewView_FITS_SYSTEM_WINDOWS;
          viewFlagMasks |= RepackagedAndroidViewView_FITS_SYSTEM_WINDOWS;
        }
        break;
        case RepackagedComAndroidInternalR_styleable_View_focusable:
        if ([a getBooleanWithInt:attr withBoolean:NO]) {
          viewFlagValues |= RepackagedAndroidViewView_FOCUSABLE;
          viewFlagMasks |= RepackagedAndroidViewView_FOCUSABLE_MASK;
        }
        break;
        case RepackagedComAndroidInternalR_styleable_View_focusableInTouchMode:
        if ([a getBooleanWithInt:attr withBoolean:NO]) {
          viewFlagValues |= RepackagedAndroidViewView_FOCUSABLE_IN_TOUCH_MODE | RepackagedAndroidViewView_FOCUSABLE;
          viewFlagMasks |= RepackagedAndroidViewView_FOCUSABLE_IN_TOUCH_MODE | RepackagedAndroidViewView_FOCUSABLE_MASK;
        }
        break;
        case RepackagedComAndroidInternalR_styleable_View_clickable:
        if ([a getBooleanWithInt:attr withBoolean:NO]) {
          viewFlagValues |= RepackagedAndroidViewView_CLICKABLE;
          viewFlagMasks |= RepackagedAndroidViewView_CLICKABLE;
        }
        break;
        case RepackagedComAndroidInternalR_styleable_View_longClickable:
        if ([a getBooleanWithInt:attr withBoolean:NO]) {
          viewFlagValues |= RepackagedAndroidViewView_LONG_CLICKABLE;
          viewFlagMasks |= RepackagedAndroidViewView_LONG_CLICKABLE;
        }
        break;
        case RepackagedComAndroidInternalR_styleable_View_contextClickable:
        if ([a getBooleanWithInt:attr withBoolean:NO]) {
          viewFlagValues |= RepackagedAndroidViewView_CONTEXT_CLICKABLE;
          viewFlagMasks |= RepackagedAndroidViewView_CONTEXT_CLICKABLE;
        }
        break;
        case RepackagedComAndroidInternalR_styleable_View_saveEnabled:
        if (![a getBooleanWithInt:attr withBoolean:YES]) {
          viewFlagValues |= RepackagedAndroidViewView_SAVE_DISABLED;
          viewFlagMasks |= RepackagedAndroidViewView_SAVE_DISABLED_MASK;
        }
        break;
        case RepackagedComAndroidInternalR_styleable_View_duplicateParentState:
        if ([a getBooleanWithInt:attr withBoolean:NO]) {
          viewFlagValues |= RepackagedAndroidViewView_DUPLICATE_PARENT_STATE;
          viewFlagMasks |= RepackagedAndroidViewView_DUPLICATE_PARENT_STATE;
        }
        break;
        case RepackagedComAndroidInternalR_styleable_View_visibility:
        visibility = [a getIntWithInt:attr withInt:0];
        if (visibility != 0) {
          viewFlagValues |= IOSIntArray_Get(nil_chk(RepackagedAndroidViewView_VISIBILITY_FLAGS_), visibility);
          viewFlagMasks |= RepackagedAndroidViewView_VISIBILITY_MASK;
        }
        break;
        case RepackagedComAndroidInternalR_styleable_View_layoutDirection:
        
#line 4100
        self->mPrivateFlags2_ &=
#line 4101
        ~(RepackagedAndroidViewView_PFLAG2_LAYOUT_DIRECTION_MASK | RepackagedAndroidViewView_PFLAG2_LAYOUT_DIRECTION_RESOLVED_MASK);
        
#line 4103
        layoutDirection = [a getIntWithInt:attr withInt:-1];
        value = (layoutDirection != -1) ? IOSIntArray_Get(nil_chk(RepackagedAndroidViewView_LAYOUT_DIRECTION_FLAGS_),
#line 4105
        layoutDirection) : RepackagedAndroidViewView_LAYOUT_DIRECTION_DEFAULT;
        self->mPrivateFlags2_ |= (LShift32(value, RepackagedAndroidViewView_PFLAG2_LAYOUT_DIRECTION_MASK_SHIFT));
        break;
        case RepackagedComAndroidInternalR_styleable_View_drawingCacheQuality:
        cacheQuality = [a getIntWithInt:attr withInt:0];
        if (cacheQuality != 0) {
          viewFlagValues |= IOSIntArray_Get(nil_chk(RepackagedAndroidViewView_DRAWING_CACHE_QUALITY_FLAGS_), cacheQuality);
          viewFlagMasks |= RepackagedAndroidViewView_DRAWING_CACHE_QUALITY_MASK;
        }
        break;
        case RepackagedComAndroidInternalR_styleable_View_contentDescription:
        [self setContentDescriptionWithJavaLangCharSequence:[a getStringWithInt:attr]];
        break;
        case RepackagedComAndroidInternalR_styleable_View_accessibilityTraversalBefore:
        [self setAccessibilityTraversalBeforeWithInt:[a getResourceIdWithInt:attr withInt:RepackagedAndroidViewView_NO_ID]];
        break;
        case RepackagedComAndroidInternalR_styleable_View_accessibilityTraversalAfter:
        [self setAccessibilityTraversalAfterWithInt:[a getResourceIdWithInt:attr withInt:RepackagedAndroidViewView_NO_ID]];
        break;
        case RepackagedComAndroidInternalR_styleable_View_labelFor:
        [self setLabelForWithInt:[a getResourceIdWithInt:attr withInt:RepackagedAndroidViewView_NO_ID]];
        break;
        case RepackagedComAndroidInternalR_styleable_View_soundEffectsEnabled:
        if (![a getBooleanWithInt:attr withBoolean:YES]) {
          viewFlagValues &= ~RepackagedAndroidViewView_SOUND_EFFECTS_ENABLED;
          viewFlagMasks |= RepackagedAndroidViewView_SOUND_EFFECTS_ENABLED;
        }
        break;
        case RepackagedComAndroidInternalR_styleable_View_hapticFeedbackEnabled:
        if (![a getBooleanWithInt:attr withBoolean:YES]) {
          viewFlagValues &= ~RepackagedAndroidViewView_HAPTIC_FEEDBACK_ENABLED;
          viewFlagMasks |= RepackagedAndroidViewView_HAPTIC_FEEDBACK_ENABLED;
        }
        break;
        case RepackagedComAndroidInternalR_styleable_View_scrollbars:
        scrollbars = [a getIntWithInt:attr withInt:RepackagedAndroidViewView_SCROLLBARS_NONE];
        if (scrollbars != RepackagedAndroidViewView_SCROLLBARS_NONE) {
          viewFlagValues |= scrollbars;
          viewFlagMasks |= RepackagedAndroidViewView_SCROLLBARS_MASK;
          initializeScrollbars = YES;
        }
        break;
        
#line 4148
        case RepackagedComAndroidInternalR_styleable_View_fadingEdge:
        if (targetSdkVersion >= RepackagedAndroidOsBuild_VERSION_CODES_ICE_CREAM_SANDWICH) {
          
#line 4151
          break;
        }
        
#line 4154
        case RepackagedComAndroidInternalR_styleable_View_requiresFadingEdge:
        fadingEdge = [a getIntWithInt:attr withInt:RepackagedAndroidViewView_FADING_EDGE_NONE];
        if (fadingEdge != RepackagedAndroidViewView_FADING_EDGE_NONE) {
          viewFlagValues |= fadingEdge;
          viewFlagMasks |= RepackagedAndroidViewView_FADING_EDGE_MASK;
          [self initializeFadingEdgeInternalWithRepackagedAndroidContentResTypedArray:a];
        }
        break;
        case RepackagedComAndroidInternalR_styleable_View_scrollbarStyle:
        scrollbarStyle = [a getIntWithInt:attr withInt:RepackagedAndroidViewView_SCROLLBARS_INSIDE_OVERLAY];
        if (scrollbarStyle != RepackagedAndroidViewView_SCROLLBARS_INSIDE_OVERLAY) {
          viewFlagValues |= scrollbarStyle & RepackagedAndroidViewView_SCROLLBARS_STYLE_MASK;
          viewFlagMasks |= RepackagedAndroidViewView_SCROLLBARS_STYLE_MASK;
        }
        break;
        case RepackagedComAndroidInternalR_styleable_View_isScrollContainer:
        setScrollContainer = YES;
        if ([a getBooleanWithInt:attr withBoolean:NO]) {
          [self setScrollContainerWithBoolean:YES];
        }
        break;
        case RepackagedComAndroidInternalR_styleable_View_keepScreenOn:
        if ([a getBooleanWithInt:attr withBoolean:NO]) {
          viewFlagValues |= RepackagedAndroidViewView_KEEP_SCREEN_ON;
          viewFlagMasks |= RepackagedAndroidViewView_KEEP_SCREEN_ON;
        }
        break;
        case RepackagedComAndroidInternalR_styleable_View_filterTouchesWhenObscured:
        if ([a getBooleanWithInt:attr withBoolean:NO]) {
          viewFlagValues |= RepackagedAndroidViewView_FILTER_TOUCHES_WHEN_OBSCURED;
          viewFlagMasks |= RepackagedAndroidViewView_FILTER_TOUCHES_WHEN_OBSCURED;
        }
        break;
        case RepackagedComAndroidInternalR_styleable_View_nextFocusLeft:
        self->mNextFocusLeftId_ = [a getResourceIdWithInt:attr withInt:RepackagedAndroidViewView_NO_ID];
        break;
        case RepackagedComAndroidInternalR_styleable_View_nextFocusRight:
        self->mNextFocusRightId_ = [a getResourceIdWithInt:attr withInt:RepackagedAndroidViewView_NO_ID];
        break;
        case RepackagedComAndroidInternalR_styleable_View_nextFocusUp:
        self->mNextFocusUpId_ = [a getResourceIdWithInt:attr withInt:RepackagedAndroidViewView_NO_ID];
        break;
        case RepackagedComAndroidInternalR_styleable_View_nextFocusDown:
        self->mNextFocusDownId_ = [a getResourceIdWithInt:attr withInt:RepackagedAndroidViewView_NO_ID];
        break;
        case RepackagedComAndroidInternalR_styleable_View_nextFocusForward:
        self->mNextFocusForwardId_ = [a getResourceIdWithInt:attr withInt:RepackagedAndroidViewView_NO_ID];
        break;
        case RepackagedComAndroidInternalR_styleable_View_minWidth:
        self->mMinWidth_ = [a getDimensionPixelSizeWithInt:attr withInt:0];
        break;
        case RepackagedComAndroidInternalR_styleable_View_minHeight:
        self->mMinHeight_ = [a getDimensionPixelSizeWithInt:attr withInt:0];
        break;
        case RepackagedComAndroidInternalR_styleable_View_onClick:
        if ([context isRestricted]) {
          @throw new_JavaLangIllegalStateException_initWithNSString_(@"The android:onClick attribute cannot be used within a restricted context");
        }
        
#line 4214
        handlerName = [a getStringWithInt:attr];
        if (handlerName != nil) {
          [self setOnClickListenerWithRepackagedAndroidViewView_OnClickListener:new_RepackagedAndroidViewView_DeclaredOnClickListener_initWithRepackagedAndroidViewView_withNSString_(self, handlerName)];
        }
        break;
        case RepackagedComAndroidInternalR_styleable_View_overScrollMode:
        overScrollMode = [a getIntWithInt:attr withInt:RepackagedAndroidViewView_OVER_SCROLL_IF_CONTENT_SCROLLS];
        break;
        case RepackagedComAndroidInternalR_styleable_View_verticalScrollbarPosition:
        self->mVerticalScrollbarPosition_ = [a getIntWithInt:attr withInt:RepackagedAndroidViewView_SCROLLBAR_POSITION_DEFAULT];
        break;
        case RepackagedComAndroidInternalR_styleable_View_layerType:
        [self setLayerTypeWithInt:[a getIntWithInt:attr withInt:RepackagedAndroidViewView_LAYER_TYPE_NONE] withRepackagedAndroidGraphicsPaint:nil];
        break;
        case RepackagedComAndroidInternalR_styleable_View_textDirection:
        
#line 4230
        self->mPrivateFlags2_ &= ~RepackagedAndroidViewView_PFLAG2_TEXT_DIRECTION_MASK;
        
#line 4232
        textDirection = [a getIntWithInt:attr withInt:-1];
        if (textDirection != -1) {
          self->mPrivateFlags2_ |= IOSIntArray_Get(nil_chk(RepackagedAndroidViewView_PFLAG2_TEXT_DIRECTION_FLAGS_), textDirection);
        }
        break;
        case RepackagedComAndroidInternalR_styleable_View_textAlignment:
        
#line 4239
        self->mPrivateFlags2_ &= ~RepackagedAndroidViewView_PFLAG2_TEXT_ALIGNMENT_MASK;
        
#line 4241
        textAlignment = [a getIntWithInt:attr withInt:RepackagedAndroidViewView_TEXT_ALIGNMENT_DEFAULT];
        self->mPrivateFlags2_ |= IOSIntArray_Get(nil_chk(RepackagedAndroidViewView_PFLAG2_TEXT_ALIGNMENT_FLAGS_), textAlignment);
        break;
        case RepackagedComAndroidInternalR_styleable_View_importantForAccessibility:
        [self setImportantForAccessibilityWithInt:[a getIntWithInt:attr withInt:RepackagedAndroidViewView_IMPORTANT_FOR_ACCESSIBILITY_DEFAULT]];
        
#line 4247
        break;
        case RepackagedComAndroidInternalR_styleable_View_accessibilityLiveRegion:
        [self setAccessibilityLiveRegionWithInt:[a getIntWithInt:attr withInt:RepackagedAndroidViewView_ACCESSIBILITY_LIVE_REGION_DEFAULT]];
        break;
        case RepackagedComAndroidInternalR_styleable_View_transitionName:
        RepackagedAndroidViewView_setTransitionNameWithNSString_(self, [a getStringWithInt:attr]);
        break;
        case RepackagedComAndroidInternalR_styleable_View_nestedScrollingEnabled:
        [self setNestedScrollingEnabledWithBoolean:[a getBooleanWithInt:attr withBoolean:NO]];
        break;
        case RepackagedComAndroidInternalR_styleable_View_stateListAnimator:
        [self setStateListAnimatorWithRepackagedAndroidAnimationStateListAnimator:RepackagedAndroidAnimationAnimatorInflater_loadStateListAnimatorWithRepackagedAndroidContentContext_withInt_(context,
#line 4259
        [a getResourceIdWithInt:attr withInt:0])];
        break;
        case RepackagedComAndroidInternalR_styleable_View_backgroundTint:
        
#line 4263
        if (self->mBackgroundTint_ == nil) {
          self->mBackgroundTint_ = new_RepackagedAndroidViewView_TintInfo_init();
        }
        ((RepackagedAndroidViewView_TintInfo *) nil_chk(self->mBackgroundTint_))->mTintList_ = [a getColorStateListWithInt:
#line 4267
        RepackagedComAndroidInternalR_styleable_View_backgroundTint];
        self->mBackgroundTint_->mHasTintList_ = YES;
        break;
        case RepackagedComAndroidInternalR_styleable_View_backgroundTintMode:
        
#line 4272
        if (self->mBackgroundTint_ == nil) {
          self->mBackgroundTint_ = new_RepackagedAndroidViewView_TintInfo_init();
        }
        ((RepackagedAndroidViewView_TintInfo *) nil_chk(self->mBackgroundTint_))->mTintMode_ = RepackagedAndroidGraphicsDrawableDrawable_parseTintModeWithInt_withId_([a getIntWithInt:
#line 4276
        RepackagedComAndroidInternalR_styleable_View_backgroundTintMode withInt:-1], nil);
        self->mBackgroundTint_->mHasTintMode_ = YES;
        break;
        case RepackagedComAndroidInternalR_styleable_View_outlineProvider:
        RepackagedAndroidViewView_setOutlineProviderFromAttributeWithInt_(self, [a getIntWithInt:RepackagedComAndroidInternalR_styleable_View_outlineProvider withInt:RepackagedAndroidViewView_PROVIDER_BACKGROUND]);
        
#line 4282
        break;
        case RepackagedComAndroidInternalR_styleable_View_foreground:
        if (targetSdkVersion >= RepackagedAndroidOsBuild_VERSION_CODES_M || [self isKindOfClass:[RepackagedAndroidWidgetFrameLayout class]]) {
          [self setForegroundWithRepackagedAndroidGraphicsDrawableDrawable:[a getDrawableWithInt:attr]];
        }
        break;
        case RepackagedComAndroidInternalR_styleable_View_foregroundGravity:
        if (targetSdkVersion >= RepackagedAndroidOsBuild_VERSION_CODES_M || [self isKindOfClass:[RepackagedAndroidWidgetFrameLayout class]]) {
          [self setForegroundGravityWithInt:[a getIntWithInt:attr withInt:RepackagedAndroidViewGravity_NO_GRAVITY]];
        }
        break;
        case RepackagedComAndroidInternalR_styleable_View_foregroundTintMode:
        if (targetSdkVersion >= RepackagedAndroidOsBuild_VERSION_CODES_M || [self isKindOfClass:[RepackagedAndroidWidgetFrameLayout class]]) {
          [self setForegroundTintModeWithRepackagedAndroidGraphicsPorterDuff_ModeEnum:RepackagedAndroidGraphicsDrawableDrawable_parseTintModeWithInt_withId_([a getIntWithInt:attr withInt:-1], nil)];
        }
        break;
        case RepackagedComAndroidInternalR_styleable_View_foregroundTint:
        if (targetSdkVersion >= RepackagedAndroidOsBuild_VERSION_CODES_M || [self isKindOfClass:[RepackagedAndroidWidgetFrameLayout class]]) {
          [self setForegroundTintListWithRepackagedAndroidContentResColorStateList:[a getColorStateListWithInt:attr]];
        }
        break;
        case RepackagedComAndroidInternalR_styleable_View_foregroundInsidePadding:
        if (targetSdkVersion >= RepackagedAndroidOsBuild_VERSION_CODES_M || [self isKindOfClass:[RepackagedAndroidWidgetFrameLayout class]]) {
          if (self->mForegroundInfo_ == nil) {
            self->mForegroundInfo_ = new_RepackagedAndroidViewView_ForegroundInfo_init();
          }
          ((RepackagedAndroidViewView_ForegroundInfo *) nil_chk(self->mForegroundInfo_))->mInsidePadding_ = [a getBooleanWithInt:attr withBoolean:
#line 4309
          self->mForegroundInfo_->mInsidePadding_];
        }
        break;
        case RepackagedComAndroidInternalR_styleable_View_scrollIndicators:
        scrollIndicators =
#line 4314
        (LShift32([a getIntWithInt:attr withInt:0], RepackagedAndroidViewView_SCROLL_INDICATORS_TO_PFLAGS3_LSHIFT)) & RepackagedAndroidViewView_SCROLL_INDICATORS_PFLAG3_MASK;
        
#line 4316
        if (scrollIndicators != 0) {
          self->mPrivateFlags3_ |= scrollIndicators;
          initializeScrollIndicators = YES;
        }
        break;
      }
    }
  }
  [self setOverScrollModeWithInt:overScrollMode];
  
#line 4329
  self->mUserPaddingStart_ = startPadding;
  self->mUserPaddingEnd_ = endPadding;
  
#line 4332
  if (background != nil) {
    [self setBackgroundWithRepackagedAndroidGraphicsDrawableDrawable:background];
  }
  
#line 4338
  self->mLeftPaddingDefined_ = leftPaddingDefined;
  self->mRightPaddingDefined_ = rightPaddingDefined;
  
#line 4341
  if (padding >= 0) {
    leftPadding = padding;
    topPadding = padding;
    rightPadding = padding;
    bottomPadding = padding;
    self->mUserPaddingLeftInitial_ = padding;
    self->mUserPaddingRightInitial_ = padding;
  }
  
#line 4350
  if (RepackagedAndroidViewView_isRtlCompatibilityMode(self)) {
    
#line 4358
    if (!self->mLeftPaddingDefined_ && startPaddingDefined) {
      leftPadding = startPadding;
    }
    self->mUserPaddingLeftInitial_ = (leftPadding >= 0) ? leftPadding : self->mUserPaddingLeftInitial_;
    if (!self->mRightPaddingDefined_ && endPaddingDefined) {
      rightPadding = endPadding;
    }
    self->mUserPaddingRightInitial_ = (rightPadding >= 0) ? rightPadding : self->mUserPaddingRightInitial_;
  }
  else {
    
#line 4372
    jboolean hasRelativePadding = startPaddingDefined || endPaddingDefined;
    
#line 4374
    if (self->mLeftPaddingDefined_ && !hasRelativePadding) {
      self->mUserPaddingLeftInitial_ = leftPadding;
    }
    if (self->mRightPaddingDefined_ && !hasRelativePadding) {
      self->mUserPaddingRightInitial_ = rightPadding;
    }
  }
  
#line 4382
  [self internalSetPaddingWithInt:self->mUserPaddingLeftInitial_ withInt:
#line 4384
  topPadding >= 0 ? topPadding : self->mPaddingTop_ withInt:self->mUserPaddingRightInitial_ withInt:
#line 4386
  bottomPadding >= 0 ? bottomPadding : self->mPaddingBottom_];
  
#line 4388
  if (viewFlagMasks != 0) {
    [self setFlagsWithInt:viewFlagValues withInt:viewFlagMasks];
  }
  
#line 4392
  if (initializeScrollbars) {
    [self initializeScrollbarsInternalWithRepackagedAndroidContentResTypedArray:a];
  }
  
#line 4396
  if (initializeScrollIndicators) {
    RepackagedAndroidViewView_initializeScrollIndicatorsInternal(self);
  }
  
#line 4400
  [a recycle];
  
#line 4403
  if (scrollbarStyle != RepackagedAndroidViewView_SCROLLBARS_INSIDE_OVERLAY) {
    [self recomputePadding];
  }
  
#line 4407
  if (x != 0 || y != 0) {
    [self scrollToWithInt:x withInt:y];
  }
  
#line 4411
  if (transformSet) {
    [self setTranslationXWithFloat:tx];
    [self setTranslationYWithFloat:ty];
    [self setTranslationZWithFloat:tz];
    [self setElevationWithFloat:elevation];
    [self setRotationWithFloat:rotation];
    [self setRotationXWithFloat:rotationX];
    [self setRotationYWithFloat:rotationY];
    [self setScaleXWithFloat:sx];
    [self setScaleYWithFloat:sy];
  }
  
#line 4423
  if (!setScrollContainer && (viewFlagValues & RepackagedAndroidViewView_SCROLLBARS_VERTICAL) != 0) {
    [self setScrollContainerWithBoolean:YES];
  }
  
#line 4427
  [self computeOpaqueFlags];
}


#line 3896
RepackagedAndroidViewView *new_RepackagedAndroidViewView_initWithRepackagedAndroidContentContext_withRepackagedAndroidUtilAttributeSet_withInt_withInt_(id<RepackagedAndroidContentContext> context, id<RepackagedAndroidUtilAttributeSet> attrs, jint defStyleAttr, jint defStyleRes) {
  RepackagedAndroidViewView *self = [RepackagedAndroidViewView alloc];
  RepackagedAndroidViewView_initWithRepackagedAndroidContentContext_withRepackagedAndroidUtilAttributeSet_withInt_withInt_(self, context, attrs, defStyleAttr, defStyleRes);
  return self;
}


#line 4493
void RepackagedAndroidViewView_init(RepackagedAndroidViewView *self) {
  (void) NSObject_init(self);
  self->mCurrentAnimation_ =
#line 1590
  nil;
  self->mRecreateDisplayList_ =
#line 1615
  NO;
  self->mID_ = RepackagedAndroidViewView_NO_ID;
  self->mAccessibilityViewId_ = RepackagedAndroidViewView_NO_ID;
  self->mAccessibilityCursorPosition_ = RepackagedAndroidViewView_ACCESSIBILITY_CURSOR_POSITION_UNDEFINED;
  self->mTag_ =
#line 1644
  nil;
  self->mTransientStateCount_ =
#line 3110
  0;
  self->mClipBounds_ =
#line 3171
  nil;
  self->mPaddingLeft_ =
#line 3225
  0;
  self->mPaddingRight_ =
#line 3232
  0;
  self->mLabelForId_ =
#line 3263
  RepackagedAndroidViewView_NO_ID;
  self->mAccessibilityTraversalBeforeId_ = RepackagedAndroidViewView_NO_ID;
  self->mAccessibilityTraversalAfterId_ = RepackagedAndroidViewView_NO_ID;
  self->mLeftPaddingDefined_ =
#line 3346
  NO;
  self->mRightPaddingDefined_ =
#line 3351
  NO;
  self->mOldWidthMeasureSpec_ =
#line 3356
  JavaLangInteger_MIN_VALUE;
  self->mOldHeightMeasureSpec_ =
#line 3360
  JavaLangInteger_MIN_VALUE;
  self->mDrawableState_ =
#line 3481
  nil;
  self->mOutlineProvider_ = RepackagedAndroidViewViewOutlineProvider_get_BACKGROUND_();
  self->mNextFocusLeftId_ =
#line 3494
  RepackagedAndroidViewView_NO_ID;
  self->mNextFocusRightId_ =
#line 3500
  RepackagedAndroidViewView_NO_ID;
  self->mNextFocusUpId_ =
#line 3506
  RepackagedAndroidViewView_NO_ID;
  self->mNextFocusDownId_ =
#line 3512
  RepackagedAndroidViewView_NO_ID;
  self->mNextFocusForwardId_ =
#line 3518
  RepackagedAndroidViewView_NO_ID;
  self->mPendingCheckForTap_ =
#line 3521
  nil;
  self->mTouchDelegate_ =
#line 3567
  nil;
  self->mDrawingCacheBackgroundColor_ =
#line 3573
  0;
  self->mAnimator_ =
#line 3588
  nil;
  self->mLayerType_ = RepackagedAndroidViewView_LAYER_TYPE_NONE;
  self->mInputEventConsistencyVerifier_ =
#line 3744
  RepackagedAndroidViewInputEventConsistencyVerifier_isInstrumentationEnabled() ? new_RepackagedAndroidViewInputEventConsistencyVerifier_initWithRepackagedAndroidViewView_withInt_(self,
#line 3745
  0) : nil;
  
#line 4494
  self->mResources_ = nil;
  self->mRenderNode_ = RepackagedAndroidViewRenderNode_createWithNSString_withRepackagedAndroidViewView_([[self getClass] getName], self);
}


#line 4493
RepackagedAndroidViewView *new_RepackagedAndroidViewView_init() {
  RepackagedAndroidViewView *self = [RepackagedAndroidViewView alloc];
  RepackagedAndroidViewView_init(self);
  return self;
}


#line 4498
RepackagedAndroidUtilSparseArray *RepackagedAndroidViewView_getAttributeMap() {
  RepackagedAndroidViewView_initialize();
  
#line 4499
  if (RepackagedAndroidViewView_mAttributeMap_ == nil) {
    RepackagedAndroidViewView_mAttributeMap_ = new_RepackagedAndroidUtilSparseArray_init();
  }
  return RepackagedAndroidViewView_mAttributeMap_;
}


#line 4505
void RepackagedAndroidViewView_saveAttributeDataWithRepackagedAndroidUtilAttributeSet_withRepackagedAndroidContentResTypedArray_(RepackagedAndroidViewView *self, id<RepackagedAndroidUtilAttributeSet> attrs, id<RepackagedAndroidContentResTypedArray> t) {
  jint attrsCount = attrs == nil ? 0 : [attrs getAttributeCount];
  jint indexCount = [((id<RepackagedAndroidContentResTypedArray>) nil_chk(t)) getIndexCount];
  IOSObjectArray *attributes = [IOSObjectArray newArrayWithLength:(attrsCount + indexCount) * 2 type:NSString_class_()];
  
#line 4510
  jint i = 0;
  
#line 4513
  for (jint j = 0; j < attrsCount; ++j) {
    (void) IOSObjectArray_Set(attributes, i, [((id<RepackagedAndroidUtilAttributeSet>) nil_chk(attrs)) getAttributeNameWithInt:j]);
    (void) IOSObjectArray_Set(attributes, i + 1, [attrs getAttributeValueWithInt:j]);
    i += 2;
  }
  
#line 4520
  RepackagedAndroidContentResResources *res = [t getResources];
  RepackagedAndroidUtilSparseArray *attributeMap = RepackagedAndroidViewView_getAttributeMap();
  for (jint j = 0; j < indexCount; ++j) {
    jint index = [t getIndexWithInt:j];
    if (![t hasValueOrEmptyWithInt:index]) {
      
#line 4526
      continue;
    }
    
#line 4529
    jint resourceId = [t getResourceIdWithInt:index withInt:0];
    if (resourceId == 0) {
      
#line 4532
      continue;
    }
    
#line 4535
    NSString *resourceName = [((RepackagedAndroidUtilSparseArray *) nil_chk(attributeMap)) getWithInt:resourceId];
    if (resourceName == nil) {
      @try {
        resourceName = [((RepackagedAndroidContentResResources *) nil_chk(res)) getResourceNameWithInt:resourceId];
      }
      @catch (
#line 4539
      RepackagedAndroidContentResResources_NotFoundException *e) {
        resourceName = JreStrcat("$$", @"0x", JavaLangInteger_toHexStringWithInt_(resourceId));
      }
      [attributeMap putWithInt:resourceId withId:resourceName];
    }
    
#line 4545
    (void) IOSObjectArray_Set(attributes, i, resourceName);
    (void) IOSObjectArray_Set(attributes, i + 1, [t getStringWithInt:index]);
    i += 2;
  }
  
#line 4551
  IOSObjectArray *trimmed = [IOSObjectArray newArrayWithLength:i type:NSString_class_()];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(attributes, 0, trimmed, 0, i);
  self->mAttributes_ = trimmed;
}


#line 4884
void RepackagedAndroidViewView_initializeScrollIndicatorsInternal(RepackagedAndroidViewView *self) {
  
#line 4888
  if (self->mScrollIndicatorDrawable_ == nil) {
    self->mScrollIndicatorDrawable_ = [((id<RepackagedAndroidContentContext>) nil_chk(self->mContext_)) getDrawableWithInt:RepackagedComAndroidInternalR_drawable_scroll_indicator_material];
  }
}


#line 4898
void RepackagedAndroidViewView_initScrollCache(RepackagedAndroidViewView *self) {
  if (self->mScrollCache_ == nil) {
    self->mScrollCache_ = new_RepackagedAndroidViewView_ScrollabilityCache_initWithRepackagedAndroidViewViewConfiguration_withRepackagedAndroidViewView_(RepackagedAndroidViewViewConfiguration_getWithRepackagedAndroidContentContext_(self->mContext_), self);
  }
}

RepackagedAndroidViewView_ScrollabilityCache *RepackagedAndroidViewView_getScrollCache(RepackagedAndroidViewView *self) {
  RepackagedAndroidViewView_initScrollCache(self);
  return self->mScrollCache_;
}


#line 6245
void RepackagedAndroidViewView_populateVirtualStructureWithRepackagedAndroidViewViewStructure_withRepackagedAndroidViewAccessibilityAccessibilityNodeProvider_withRepackagedAndroidViewAccessibilityAccessibilityNodeInfo_(RepackagedAndroidViewView *self, RepackagedAndroidViewViewStructure *structure, RepackagedAndroidViewAccessibilityAccessibilityNodeProvider *provider, RepackagedAndroidViewAccessibilityAccessibilityNodeInfo *info) {
  
#line 6247
  [((RepackagedAndroidViewViewStructure *) nil_chk(structure)) setIdWithInt:RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_getVirtualDescendantIdWithLong_([((RepackagedAndroidViewAccessibilityAccessibilityNodeInfo *) nil_chk(info)) getSourceNodeId]) withNSString:
#line 6248
  nil withNSString:nil withNSString:nil];
  RepackagedAndroidGraphicsRect *rect = [structure getTempRect];
  [info getBoundsInParentWithRepackagedAndroidGraphicsRect:rect];
  [structure setDimensWithInt:((RepackagedAndroidGraphicsRect *) nil_chk(rect))->left_ withInt:rect->top_ withInt:0 withInt:0 withInt:[rect width] withInt:[rect height]];
  [structure setVisibilityWithInt:RepackagedAndroidViewView_VISIBLE];
  [structure setEnabledWithBoolean:[info isEnabled]];
  if ([info isClickable]) {
    [structure setClickableWithBoolean:YES];
  }
  if ([info isFocusable]) {
    [structure setFocusableWithBoolean:YES];
  }
  if ([info isFocused]) {
    [structure setFocusedWithBoolean:YES];
  }
  if ([info isAccessibilityFocused]) {
    [structure setAccessibilityFocusedWithBoolean:YES];
  }
  if ([info isSelected]) {
    [structure setSelectedWithBoolean:YES];
  }
  if ([info isLongClickable]) {
    [structure setLongClickableWithBoolean:YES];
  }
  if ([info isCheckable]) {
    [structure setCheckableWithBoolean:YES];
    if ([info isChecked]) {
      [structure setCheckedWithBoolean:YES];
    }
  }
  if ([info isContextClickable]) {
    [structure setContextClickableWithBoolean:YES];
  }
  id<JavaLangCharSequence> cname = [info getClassName];
  [structure setClassNameWithNSString:cname != nil ? [cname description] : nil];
  [structure setContentDescriptionWithJavaLangCharSequence:[info getContentDescription]];
  if ([info getText] != nil || [info getError] != nil) {
    [structure setTextWithJavaLangCharSequence:[info getText] withInt:[info getTextSelectionStart] withInt:
#line 6286
    [info getTextSelectionEnd]];
  }
  jint NCHILDREN = [info getChildCount];
  if (NCHILDREN > 0) {
    [structure setChildCountWithInt:NCHILDREN];
    for (jint i = 0; i < NCHILDREN; i++) {
      RepackagedAndroidViewAccessibilityAccessibilityNodeInfo *cinfo = [((RepackagedAndroidViewAccessibilityAccessibilityNodeProvider *) nil_chk(provider)) createAccessibilityNodeInfoWithInt:RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_getVirtualDescendantIdWithLong_(
#line 6293
      [info getChildIdWithInt:i])];
      RepackagedAndroidViewViewStructure *child = [structure newChildWithInt:i];
      RepackagedAndroidViewView_populateVirtualStructureWithRepackagedAndroidViewViewStructure_withRepackagedAndroidViewAccessibilityAccessibilityNodeProvider_withRepackagedAndroidViewAccessibilityAccessibilityNodeInfo_(self, child, provider, cinfo);
      [((RepackagedAndroidViewAccessibilityAccessibilityNodeInfo *) nil_chk(cinfo)) recycle];
    }
  }
}


#line 6462
RepackagedAndroidViewView *RepackagedAndroidViewView_findLabelForViewWithRepackagedAndroidViewView_withInt_(RepackagedAndroidViewView *self, RepackagedAndroidViewView *view, jint labeledId) {
  if (self->mMatchLabelForPredicate_ == nil) {
    self->mMatchLabelForPredicate_ = new_RepackagedAndroidViewView_MatchLabelForPredicate_initWithRepackagedAndroidViewView_(self);
  }
  ((RepackagedAndroidViewView_MatchLabelForPredicate *) nil_chk(self->mMatchLabelForPredicate_))->mLabeledId_ = labeledId;
  return RepackagedAndroidViewView_findViewByPredicateInsideOutWithRepackagedAndroidViewView_withRepackagedComAndroidInternalUtilPredicate_(self, view, self->mMatchLabelForPredicate_);
}


#line 6801
void RepackagedAndroidViewView_resetPressedState(RepackagedAndroidViewView *self) {
  if ((self->mViewFlags_ & RepackagedAndroidViewView_ENABLED_MASK) == RepackagedAndroidViewView_DISABLED) {
    return;
  }
  
#line 6806
  if ([self isPressed]) {
    [self setPressedWithBoolean:NO];
    
#line 6809
    if (!self->mHasPerformedLongPress_) {
      RepackagedAndroidViewView_removeLongPressCallback(self);
    }
  }
}


#line 7152
jboolean RepackagedAndroidViewView_fitSystemWindowsIntWithRepackagedAndroidGraphicsRect_(RepackagedAndroidViewView *self, RepackagedAndroidGraphicsRect *insets) {
  if ((self->mViewFlags_ & RepackagedAndroidViewView_FITS_SYSTEM_WINDOWS) == RepackagedAndroidViewView_FITS_SYSTEM_WINDOWS) {
    self->mUserPaddingStart_ = RepackagedAndroidViewView_UNDEFINED_PADDING;
    self->mUserPaddingEnd_ = RepackagedAndroidViewView_UNDEFINED_PADDING;
    RepackagedAndroidGraphicsRect *localInsets = [((JavaLangThreadLocal *) nil_chk(RepackagedAndroidViewView_sThreadLocal_)) get];
    if (localInsets == nil) {
      localInsets = new_RepackagedAndroidGraphicsRect_init();
      [RepackagedAndroidViewView_sThreadLocal_ setWithId:localInsets];
    }
    jboolean res = [self computeFitSystemWindowsWithRepackagedAndroidGraphicsRect:insets withRepackagedAndroidGraphicsRect:localInsets];
    self->mUserPaddingLeftInitial_ = ((RepackagedAndroidGraphicsRect *) nil_chk(localInsets))->left_;
    self->mUserPaddingRightInitial_ = localInsets->right_;
    [self internalSetPaddingWithInt:localInsets->left_ withInt:localInsets->top_ withInt:
#line 7165
    localInsets->right_ withInt:localInsets->bottom_];
    return res;
  }
  return NO;
}


#line 7865
void RepackagedAndroidViewView_setPressedWithBoolean_withFloat_withFloat_(RepackagedAndroidViewView *self, jboolean pressed, jfloat x, jfloat y) {
  if (pressed) {
    [self drawableHotspotChangedWithFloat:x withFloat:y];
  }
  
#line 7870
  [self setPressedWithBoolean:pressed];
}


#line 8063
jboolean RepackagedAndroidViewView_isFocusable(RepackagedAndroidViewView *self) {
  return RepackagedAndroidViewView_FOCUSABLE == (self->mViewFlags_ & RepackagedAndroidViewView_FOCUSABLE_MASK);
}


#line 8076
jboolean RepackagedAndroidViewView_isFocusableInTouchMode(RepackagedAndroidViewView *self) {
  return RepackagedAndroidViewView_FOCUSABLE_IN_TOUCH_MODE == (self->mViewFlags_ & RepackagedAndroidViewView_FOCUSABLE_IN_TOUCH_MODE);
}


#line 8151
RepackagedAndroidViewView *RepackagedAndroidViewView_findViewInsideOutShouldExistWithRepackagedAndroidViewView_withInt_(RepackagedAndroidViewView *self, RepackagedAndroidViewView *root, jint id_) {
  if (self->mMatchIdPredicate_ == nil) {
    self->mMatchIdPredicate_ = new_RepackagedAndroidViewView_MatchIdPredicate_initWithRepackagedAndroidViewView_(self);
  }
  ((RepackagedAndroidViewView_MatchIdPredicate *) nil_chk(self->mMatchIdPredicate_))->mId_ = id_;
  RepackagedAndroidViewView *result = RepackagedAndroidViewView_findViewByPredicateInsideOutWithRepackagedAndroidViewView_withRepackagedComAndroidInternalUtilPredicate_(nil_chk(root), self, self->mMatchIdPredicate_);
  if (result == nil) {
    RepackagedAndroidUtilLog_wWithNSString_withNSString_(RepackagedAndroidViewView_VIEW_LOG_TAG_, JreStrcat("$I", @"couldn't find view with id ", id_));
  }
  return result;
}


#line 8344
void RepackagedAndroidViewView_sendAccessibilityHoverEventWithInt_(RepackagedAndroidViewView *self, jint eventType) {
  
#line 8354
  RepackagedAndroidViewView *source = self;
  while (YES) {
    if ([source includeForAccessibility]) {
      [source sendAccessibilityEventWithInt:eventType];
      return;
    }
    id<RepackagedAndroidViewViewParent> parent = RepackagedAndroidViewView_getParent(source);
    if ([parent isKindOfClass:[RepackagedAndroidViewView class]]) {
      source = (RepackagedAndroidViewView *) check_class_cast(parent, [RepackagedAndroidViewView class]);
    }
    else {
      
#line 8364
      return;
    }
  }
}


#line 8399
jboolean RepackagedAndroidViewView_requestFocus(RepackagedAndroidViewView *self) {
  return RepackagedAndroidViewView_requestFocusWithInt_(self, RepackagedAndroidViewView_FOCUS_DOWN);
}


#line 8420
jboolean RepackagedAndroidViewView_requestFocusWithInt_(RepackagedAndroidViewView *self, jint direction) {
  return [self requestFocusWithInt:direction withRepackagedAndroidGraphicsRect:nil];
}


#line 8457
jboolean RepackagedAndroidViewView_requestFocusNoSearchWithInt_withRepackagedAndroidGraphicsRect_(RepackagedAndroidViewView *self, jint direction, RepackagedAndroidGraphicsRect *previouslyFocusedRect) {
  
#line 8459
  if ((self->mViewFlags_ & RepackagedAndroidViewView_FOCUSABLE_MASK) != RepackagedAndroidViewView_FOCUSABLE ||
#line 8460
  (self->mViewFlags_ & RepackagedAndroidViewView_VISIBILITY_MASK) != RepackagedAndroidViewView_VISIBLE) {
    return NO;
  }
  
#line 8465
  if ([self isInTouchMode] &&
#line 8466
  (RepackagedAndroidViewView_FOCUSABLE_IN_TOUCH_MODE != (self->mViewFlags_ & RepackagedAndroidViewView_FOCUSABLE_IN_TOUCH_MODE))) {
    return NO;
  }
  
#line 8471
  if (RepackagedAndroidViewView_hasAncestorThatBlocksDescendantFocus(self)) {
    return NO;
  }
  
#line 8475
  [self handleFocusGainInternalWithInt:direction withRepackagedAndroidGraphicsRect:previouslyFocusedRect];
  return YES;
}


#line 8503
jboolean RepackagedAndroidViewView_hasAncestorThatBlocksDescendantFocus(RepackagedAndroidViewView *self) {
  jboolean focusableInTouchMode = RepackagedAndroidViewView_isFocusableInTouchMode(self);
  id<RepackagedAndroidViewViewParent> ancestor = self->mParent_;
  while ([ancestor isKindOfClass:[RepackagedAndroidViewViewGroup class]]) {
    RepackagedAndroidViewViewGroup *vgAncestor = (RepackagedAndroidViewViewGroup *) check_class_cast(ancestor, [RepackagedAndroidViewViewGroup class]);
    if ([((RepackagedAndroidViewViewGroup *) nil_chk(vgAncestor)) getDescendantFocusability] == RepackagedAndroidViewViewGroup_FOCUS_BLOCK_DESCENDANTS ||
#line 8509
    (!focusableInTouchMode && [vgAncestor shouldBlockFocusForTouchscreen])) {
      return YES;
    }
    else {
      
#line 8512
      ancestor = RepackagedAndroidViewView_getParent(vgAncestor);
    }
  }
  return NO;
}


#line 8757
jboolean RepackagedAndroidViewView_hasListenersForAccessibility(RepackagedAndroidViewView *self) {
  RepackagedAndroidViewView_ListenerInfo *info = [self getListenerInfo];
  return self->mTouchDelegate_ != nil || ((RepackagedAndroidViewView_ListenerInfo *) nil_chk(info))->mOnKeyListener_ != nil ||
#line 8760
  info->mOnTouchListener_ != nil || info->mOnGenericMotionListener_ != nil ||
#line 8761
  info->mOnHoverListener_ != nil || info->mOnDragListener_ != nil;
}


#line 9016
jboolean RepackagedAndroidViewView_traverseAtGranularityWithInt_withBoolean_withBoolean_(RepackagedAndroidViewView *self, jint granularity, jboolean forward, jboolean extendSelection) {
  
#line 9018
  id<JavaLangCharSequence> text = [self getIterableTextForAccessibility];
  if (text == nil || [text length] == 0) {
    return NO;
  }
  RepackagedAndroidViewAccessibilityIterators_TextSegmentIterator *iterator = [self getIteratorForGranularityWithInt:granularity];
  if (iterator == nil) {
    return NO;
  }
  jint current = [self getAccessibilitySelectionEnd];
  if (current == RepackagedAndroidViewView_ACCESSIBILITY_CURSOR_POSITION_UNDEFINED) {
    current = forward ? 0 : [((id<JavaLangCharSequence>) nil_chk(text)) length];
  }
  IOSIntArray *range = forward ? [((RepackagedAndroidViewAccessibilityIterators_TextSegmentIterator *) nil_chk(iterator)) followingWithInt:current] : [((RepackagedAndroidViewAccessibilityIterators_TextSegmentIterator *) nil_chk(iterator)) precedingWithInt:current];
  if (range == nil) {
    return NO;
  }
  jint segmentStart = IOSIntArray_Get(range, 0);
  jint segmentEnd = IOSIntArray_Get(range, 1);
  jint selectionStart;
  jint selectionEnd;
  if (extendSelection && [self isAccessibilitySelectionExtendable]) {
    selectionStart = [self getAccessibilitySelectionStart];
    if (selectionStart == RepackagedAndroidViewView_ACCESSIBILITY_CURSOR_POSITION_UNDEFINED) {
      selectionStart = forward ? segmentStart : segmentEnd;
    }
    selectionEnd = forward ? segmentEnd : segmentStart;
  }
  else {
    
#line 9045
    selectionStart = selectionEnd = forward ? segmentEnd : segmentStart;
  }
  [self setAccessibilitySelectionWithInt:selectionStart withInt:selectionEnd];
  jint action = forward ? RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_ACTION_NEXT_AT_MOVEMENT_GRANULARITY :
#line 9049
  RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_ACTION_PREVIOUS_AT_MOVEMENT_GRANULARITY;
  RepackagedAndroidViewView_sendViewTextTraversedAtGranularityEventWithInt_withInt_withInt_withInt_(self, action, granularity, segmentStart, segmentEnd);
  return YES;
}


#line 9105
void RepackagedAndroidViewView_sendViewTextTraversedAtGranularityEventWithInt_withInt_withInt_withInt_(RepackagedAndroidViewView *self, jint action, jint granularity, jint fromIndex, jint toIndex) {
  
#line 9107
  if (self->mParent_ == nil) {
    return;
  }
  RepackagedAndroidViewAccessibilityAccessibilityEvent *event = RepackagedAndroidViewAccessibilityAccessibilityEvent_obtainWithInt_(
#line 9111
  RepackagedAndroidViewAccessibilityAccessibilityEvent_TYPE_VIEW_TEXT_TRAVERSED_AT_MOVEMENT_GRANULARITY);
  [self onInitializeAccessibilityEventWithRepackagedAndroidViewAccessibilityAccessibilityEvent:event];
  [self onPopulateAccessibilityEventWithRepackagedAndroidViewAccessibilityAccessibilityEvent:event];
  [((RepackagedAndroidViewAccessibilityAccessibilityEvent *) nil_chk(event)) setFromIndexWithInt:fromIndex];
  [event setToIndexWithInt:toIndex];
  [event setActionWithInt:action];
  [event setMovementGranularityWithInt:granularity];
  [((id<RepackagedAndroidViewViewParent>) nil_chk(self->mParent_)) requestSendAccessibilityEventWithRepackagedAndroidViewView:self withRepackagedAndroidViewAccessibilityAccessibilityEvent:event];
}


#line 9400
jboolean RepackagedAndroidViewView_dispatchGenericMotionEventInternalWithRepackagedAndroidViewMotionEvent_(RepackagedAndroidViewView *self, RepackagedAndroidViewMotionEvent *event) {
  
#line 9402
  RepackagedAndroidViewView_ListenerInfo *li = self->mListenerInfo_;
  if (li != nil && li->mOnGenericMotionListener_ != nil &&
#line 9404
  (self->mViewFlags_ & RepackagedAndroidViewView_ENABLED_MASK) == RepackagedAndroidViewView_ENABLED &&
#line 9405
  [li->mOnGenericMotionListener_ onGenericMotionWithRepackagedAndroidViewView:self withRepackagedAndroidViewMotionEvent:event]) {
    return YES;
  }
  
#line 9409
  if ([self onGenericMotionEventWithRepackagedAndroidViewMotionEvent:event]) {
    return YES;
  }
  
#line 9413
  jint actionButton = [((RepackagedAndroidViewMotionEvent *) nil_chk(event)) getActionButton];
  switch ([event getActionMasked]) {
    case RepackagedAndroidViewMotionEvent_ACTION_BUTTON_PRESS:
    if ([self isContextClickable] && !self->mInContextButtonPress_ && !self->mHasPerformedLongPress_ &&
#line 9417
    (actionButton == RepackagedAndroidViewMotionEvent_BUTTON_STYLUS_PRIMARY ||
#line 9418
    actionButton == RepackagedAndroidViewMotionEvent_BUTTON_SECONDARY)) {
      if ([self performContextClick]) {
        self->mInContextButtonPress_ = YES;
        RepackagedAndroidViewView_setPressedWithBoolean_withFloat_withFloat_(self, YES, [event getX], [event getY]);
        RepackagedAndroidViewView_removeTapCallback(self);
        RepackagedAndroidViewView_removeLongPressCallback(self);
        return YES;
      }
    }
    break;
    
#line 9429
    case RepackagedAndroidViewMotionEvent_ACTION_BUTTON_RELEASE:
    if (self->mInContextButtonPress_ && (actionButton == RepackagedAndroidViewMotionEvent_BUTTON_STYLUS_PRIMARY ||
#line 9431
    actionButton == RepackagedAndroidViewMotionEvent_BUTTON_SECONDARY)) {
      self->mInContextButtonPress_ = NO;
      self->mIgnoreNextUpEvent_ = YES;
    }
    break;
  }
  
#line 9438
  if (self->mInputEventConsistencyVerifier_ != nil) {
    [self->mInputEventConsistencyVerifier_ onUnhandledEventWithRepackagedAndroidViewMotionEvent:event withInt:0];
  }
  return NO;
}


#line 9795
id<RepackagedAndroidContentContext> RepackagedAndroidViewView_getContext(RepackagedAndroidViewView *self) {
  return self->mContext_;
}


#line 10183
jboolean RepackagedAndroidViewView_isHoverable(RepackagedAndroidViewView *self) {
  jint viewFlags = self->mViewFlags_;
  if ((viewFlags & RepackagedAndroidViewView_ENABLED_MASK) == RepackagedAndroidViewView_DISABLED) {
    return NO;
  }
  
#line 10189
  return (viewFlags & RepackagedAndroidViewView_CLICKABLE) == RepackagedAndroidViewView_CLICKABLE ||
#line 10190
  (viewFlags & RepackagedAndroidViewView_LONG_CLICKABLE) == RepackagedAndroidViewView_LONG_CLICKABLE ||
#line 10191
  (viewFlags & RepackagedAndroidViewView_CONTEXT_CLICKABLE) == RepackagedAndroidViewView_CONTEXT_CLICKABLE;
}


#line 10426
void RepackagedAndroidViewView_removeLongPressCallback(RepackagedAndroidViewView *self) {
  if (self->mPendingCheckForLongPress_ != nil) {
    [self removeCallbacksWithJavaLangRunnable:self->mPendingCheckForLongPress_];
  }
}


#line 10435
void RepackagedAndroidViewView_removePerformClickCallback(RepackagedAndroidViewView *self) {
  if (self->mPerformClick_ != nil) {
    [self removeCallbacksWithJavaLangRunnable:self->mPerformClick_];
  }
}


#line 10444
void RepackagedAndroidViewView_removeUnsetPressCallback(RepackagedAndroidViewView *self) {
  if ((self->mPrivateFlags_ & RepackagedAndroidViewView_PFLAG_PRESSED) != 0 && self->mUnsetPressedState_ != nil) {
    [self setPressedWithBoolean:NO];
    [self removeCallbacksWithJavaLangRunnable:self->mUnsetPressedState_];
  }
}


#line 10454
void RepackagedAndroidViewView_removeTapCallback(RepackagedAndroidViewView *self) {
  if (self->mPendingCheckForTap_ != nil) {
    self->mPrivateFlags_ &= ~RepackagedAndroidViewView_PFLAG_PREPRESSED;
    [self removeCallbacksWithJavaLangRunnable:self->mPendingCheckForTap_];
  }
}


#line 10482
void RepackagedAndroidViewView_removeSendViewScrolledAccessibilityEventCallback(RepackagedAndroidViewView *self) {
  if (self->mSendViewScrolledAccessibilityEvent_ != nil) {
    [self removeCallbacksWithJavaLangRunnable:self->mSendViewScrolledAccessibilityEvent_];
    self->mSendViewScrolledAccessibilityEvent_->mIsPending_ = NO;
  }
}


#line 10829
id<RepackagedAndroidViewViewParent> RepackagedAndroidViewView_getParent(RepackagedAndroidViewView *self) {
  return self->mParent_;
}


#line 10861
jint RepackagedAndroidViewView_getScrollX(RepackagedAndroidViewView *self) {
  return self->mScrollX_;
}


#line 10872
jint RepackagedAndroidViewView_getScrollY(RepackagedAndroidViewView *self) {
  return self->mScrollY_;
}


#line 10882
jint RepackagedAndroidViewView_getWidth(RepackagedAndroidViewView *self) {
  return self->mRight_ - self->mLeft_;
}


#line 10892
jint RepackagedAndroidViewView_getHeight(RepackagedAndroidViewView *self) {
  return self->mBottom_ - self->mTop_;
}


#line 11005
jboolean RepackagedAndroidViewView_hasIdentityMatrix(RepackagedAndroidViewView *self) {
  return [((RepackagedAndroidViewRenderNode *) nil_chk(self->mRenderNode_)) hasIdentityMatrix];
}


#line 11023
RepackagedAndroidGraphicsMatrix *RepackagedAndroidViewView_getInverseMatrix(RepackagedAndroidViewView *self) {
  [self ensureTransformationInfo];
  if (((RepackagedAndroidViewView_TransformationInfo *) nil_chk(self->mTransformationInfo_))->mInverseMatrix_ == nil) {
    self->mTransformationInfo_->mInverseMatrix_ = new_RepackagedAndroidGraphicsMatrix_init();
  }
  RepackagedAndroidGraphicsMatrix *matrix = self->mTransformationInfo_->mInverseMatrix_;
  [((RepackagedAndroidViewRenderNode *) nil_chk(self->mRenderNode_)) getInverseMatrixWithRepackagedAndroidGraphicsMatrix:matrix];
  return matrix;
}


#line 11517
jfloat RepackagedAndroidViewView_getFinalAlpha(RepackagedAndroidViewView *self) {
  if (self->mTransformationInfo_ != nil) {
    return self->mTransformationInfo_->mAlpha_ * self->mTransformationInfo_->mTransitionAlpha_;
  }
  return 1;
}


#line 11544
jint RepackagedAndroidViewView_getTop(RepackagedAndroidViewView *self) {
  return self->mTop_;
}


#line 11606
jint RepackagedAndroidViewView_getBottom(RepackagedAndroidViewView *self) {
  return self->mBottom_;
}


#line 11626
void RepackagedAndroidViewView_setBottomWithInt_(RepackagedAndroidViewView *self, jint bottom) {
  if (bottom != self->mBottom_) {
    jboolean matrixIsIdentity = RepackagedAndroidViewView_hasIdentityMatrix(self);
    if (matrixIsIdentity) {
      if (self->mAttachInfo_ != nil) {
        jint maxBottom;
        if (bottom < self->mBottom_) {
          maxBottom = self->mBottom_;
        }
        else {
          
#line 11635
          maxBottom = bottom;
        }
        [self invalidateWithInt:0 withInt:0 withInt:self->mRight_ - self->mLeft_ withInt:maxBottom - self->mTop_];
      }
    }
    else {
      [self invalidateWithBoolean:YES];
    }
    
#line 11644
    jint width = self->mRight_ - self->mLeft_;
    jint oldHeight = self->mBottom_ - self->mTop_;
    
#line 11647
    self->mBottom_ = bottom;
    [((RepackagedAndroidViewRenderNode *) nil_chk(self->mRenderNode_)) setBottomWithInt:self->mBottom_];
    
#line 11650
    RepackagedAndroidViewView_sizeChangeWithInt_withInt_withInt_withInt_(self, width, self->mBottom_ - self->mTop_, width, oldHeight);
    
#line 11652
    if (!matrixIsIdentity) {
      self->mPrivateFlags_ |= RepackagedAndroidViewView_PFLAG_DRAWN;
      [self invalidateWithBoolean:YES];
    }
    self->mBackgroundSizeChanged_ = YES;
    if (self->mForegroundInfo_ != nil) {
      self->mForegroundInfo_->mBoundsChanged_ = YES;
    }
    [self invalidateParentIfNeeded];
    if ((self->mPrivateFlags2_ & RepackagedAndroidViewView_PFLAG2_VIEW_QUICK_REJECTED) == RepackagedAndroidViewView_PFLAG2_VIEW_QUICK_REJECTED) {
      
#line 11663
      [self invalidateParentIfNeeded];
    }
  }
}


#line 11674
jint RepackagedAndroidViewView_getLeft(RepackagedAndroidViewView *self) {
  return self->mLeft_;
}


#line 11736
jint RepackagedAndroidViewView_getRight(RepackagedAndroidViewView *self) {
  return self->mRight_;
}


#line 11747
void RepackagedAndroidViewView_setRightWithInt_(RepackagedAndroidViewView *self, jint right) {
  if (right != self->mRight_) {
    jboolean matrixIsIdentity = RepackagedAndroidViewView_hasIdentityMatrix(self);
    if (matrixIsIdentity) {
      if (self->mAttachInfo_ != nil) {
        jint maxRight;
        if (right < self->mRight_) {
          maxRight = self->mRight_;
        }
        else {
          
#line 11756
          maxRight = right;
        }
        [self invalidateWithInt:0 withInt:0 withInt:maxRight - self->mLeft_ withInt:self->mBottom_ - self->mTop_];
      }
    }
    else {
      [self invalidateWithBoolean:YES];
    }
    
#line 11765
    jint oldWidth = self->mRight_ - self->mLeft_;
    jint height = self->mBottom_ - self->mTop_;
    
#line 11768
    self->mRight_ = right;
    [((RepackagedAndroidViewRenderNode *) nil_chk(self->mRenderNode_)) setRightWithInt:self->mRight_];
    
#line 11771
    RepackagedAndroidViewView_sizeChangeWithInt_withInt_withInt_withInt_(self, self->mRight_ - self->mLeft_, height, oldWidth, height);
    
#line 11773
    if (!matrixIsIdentity) {
      self->mPrivateFlags_ |= RepackagedAndroidViewView_PFLAG_DRAWN;
      [self invalidateWithBoolean:YES];
    }
    self->mBackgroundSizeChanged_ = YES;
    if (self->mForegroundInfo_ != nil) {
      self->mForegroundInfo_->mBoundsChanged_ = YES;
    }
    [self invalidateParentIfNeeded];
    if ((self->mPrivateFlags2_ & RepackagedAndroidViewView_PFLAG2_VIEW_QUICK_REJECTED) == RepackagedAndroidViewView_PFLAG2_VIEW_QUICK_REJECTED) {
      
#line 11784
      [self invalidateParentIfNeeded];
    }
  }
}


#line 12027
jboolean RepackagedAndroidViewView_getClipToOutline(RepackagedAndroidViewView *self) {
  return [((RepackagedAndroidViewRenderNode *) nil_chk(self->mRenderNode_)) getClipToOutline];
}


#line 12058
void RepackagedAndroidViewView_setOutlineProviderFromAttributeWithInt_(RepackagedAndroidViewView *self, jint providerInt) {
  switch (providerInt) {
    case RepackagedAndroidViewView_PROVIDER_BACKGROUND:
    [self setOutlineProviderWithRepackagedAndroidViewViewOutlineProvider:RepackagedAndroidViewViewOutlineProvider_get_BACKGROUND_()];
    break;
    case RepackagedAndroidViewView_PROVIDER_NONE:
    [self setOutlineProviderWithRepackagedAndroidViewViewOutlineProvider:nil];
    break;
    case RepackagedAndroidViewView_PROVIDER_BOUNDS:
    [self setOutlineProviderWithRepackagedAndroidViewViewOutlineProvider:RepackagedAndroidViewViewOutlineProvider_get_BOUNDS_()];
    break;
    case RepackagedAndroidViewView_PROVIDER_PADDED_BOUNDS:
    [self setOutlineProviderWithRepackagedAndroidViewViewOutlineProvider:RepackagedAndroidViewViewOutlineProvider_get_PADDED_BOUNDS_()];
    break;
  }
}


#line 12128
void RepackagedAndroidViewView_rebuildOutline(RepackagedAndroidViewView *self) {
  
#line 12130
  if (self->mAttachInfo_ == nil) return;
  
#line 12132
  if (self->mOutlineProvider_ == nil) {
    
#line 12134
    [((RepackagedAndroidViewRenderNode *) nil_chk(self->mRenderNode_)) setOutlineWithRepackagedAndroidGraphicsOutline:nil];
  }
  else {
    
#line 12136
    RepackagedAndroidGraphicsOutline *outline = ((RepackagedAndroidViewView_AttachInfo *) nil_chk(self->mAttachInfo_))->mTmpOutline_;
    [((RepackagedAndroidGraphicsOutline *) nil_chk(outline)) setEmpty];
    [outline setAlphaWithFloat:1.0f];
    
#line 12140
    [self->mOutlineProvider_ getOutlineWithRepackagedAndroidViewView:self withRepackagedAndroidGraphicsOutline:outline];
    [((RepackagedAndroidViewRenderNode *) nil_chk(self->mRenderNode_)) setOutlineWithRepackagedAndroidGraphicsOutline:outline];
  }
}


#line 12182
jboolean RepackagedAndroidViewView_pointInViewWithFloat_withFloat_(RepackagedAndroidViewView *self, jfloat localX, jfloat localY) {
  return localX >= 0 && localX < (self->mRight_ - self->mLeft_) &&
#line 12184
  localY >= 0 && localY < (self->mBottom_ - self->mTop_);
}


#line 12480
jboolean RepackagedAndroidViewView_initialAwakenScrollBars(RepackagedAndroidViewView *self) {
  return self->mScrollCache_ != nil &&
#line 12482
  [self awakenScrollBarsWithInt:self->mScrollCache_->scrollBarDefaultDelayBeforeFade_ * 4 withBoolean:YES];
}


#line 12611
jboolean RepackagedAndroidViewView_skipInvalidate(RepackagedAndroidViewView *self) {
  return (self->mViewFlags_ & RepackagedAndroidViewView_VISIBILITY_MASK) != RepackagedAndroidViewView_VISIBLE && self->mCurrentAnimation_ == nil &&
#line 12613
  (!([self->mParent_ isKindOfClass:[RepackagedAndroidViewViewGroup class]]) ||
#line 12614
  ![((RepackagedAndroidViewViewGroup *) nil_chk(((RepackagedAndroidViewViewGroup *) check_class_cast(self->mParent_, [RepackagedAndroidViewViewGroup class])))) isViewTransitioningWithRepackagedAndroidViewView:self]);
}


#line 12739
RepackagedAndroidViewView *RepackagedAndroidViewView_getProjectionReceiver(RepackagedAndroidViewView *self) {
  id<RepackagedAndroidViewViewParent> p = RepackagedAndroidViewView_getParent(self);
  while (p != nil && [p isKindOfClass:[RepackagedAndroidViewView class]]) {
    RepackagedAndroidViewView *v = (RepackagedAndroidViewView *) check_class_cast(p, [RepackagedAndroidViewView class]);
    if (RepackagedAndroidViewView_isProjectionReceiver(nil_chk(v))) {
      return v;
    }
    p = [((id<RepackagedAndroidViewViewParent>) nil_chk(p)) getParent];
  }
  
#line 12749
  return nil;
}


#line 12755
jboolean RepackagedAndroidViewView_isProjectionReceiver(RepackagedAndroidViewView *self) {
  return self->mBackground_ != nil;
}


#line 12765
void RepackagedAndroidViewView_damageShadowReceiver(RepackagedAndroidViewView *self) {
  RepackagedAndroidViewView_AttachInfo *ai = self->mAttachInfo_;
  if (ai != nil) {
    id<RepackagedAndroidViewViewParent> p = RepackagedAndroidViewView_getParent(self);
    if (p != nil && [p isKindOfClass:[RepackagedAndroidViewViewGroup class]]) {
      RepackagedAndroidViewViewGroup *vg = (RepackagedAndroidViewViewGroup *) check_class_cast(p, [RepackagedAndroidViewViewGroup class]);
      [vg damageInParent];
    }
  }
}


#line 13235
void RepackagedAndroidViewView_postSendViewScrolledAccessibilityEventCallback(RepackagedAndroidViewView *self) {
  if (self->mSendViewScrolledAccessibilityEvent_ == nil) {
    self->mSendViewScrolledAccessibilityEvent_ = new_RepackagedAndroidViewView_SendViewScrolledAccessibilityEvent_initWithRepackagedAndroidViewView_(self);
  }
  if (!((RepackagedAndroidViewView_SendViewScrolledAccessibilityEvent *) nil_chk(self->mSendViewScrolledAccessibilityEvent_))->mIsPending_) {
    self->mSendViewScrolledAccessibilityEvent_->mIsPending_ = YES;
    [self postDelayedWithJavaLangRunnable:self->mSendViewScrolledAccessibilityEvent_ withLong:RepackagedAndroidViewViewConfiguration_getSendRecurringAccessibilityEventsInterval()];
  }
}


#line 13769
void RepackagedAndroidViewView_onDrawScrollIndicatorsWithRepackagedAndroidGraphicsCanvas_(RepackagedAndroidViewView *self, RepackagedAndroidGraphicsCanvas *c) {
  if ((self->mPrivateFlags3_ & RepackagedAndroidViewView_SCROLL_INDICATORS_PFLAG3_MASK) == 0) {
    
#line 13772
    return;
  }
  
#line 13775
  RepackagedAndroidGraphicsDrawableDrawable *dr = self->mScrollIndicatorDrawable_;
  if (dr == nil) {
    
#line 13778
    return;
  }
  
#line 13781
  jint h = [((RepackagedAndroidGraphicsDrawableDrawable *) nil_chk(dr)) getIntrinsicHeight];
  jint w = [dr getIntrinsicWidth];
  RepackagedAndroidGraphicsRect *rect = ((RepackagedAndroidViewView_AttachInfo *) nil_chk(self->mAttachInfo_))->mTmpInvalRect_;
  [self getScrollIndicatorBoundsWithRepackagedAndroidGraphicsRect:rect];
  
#line 13786
  if ((self->mPrivateFlags3_ & RepackagedAndroidViewView_PFLAG3_SCROLL_INDICATOR_TOP) != 0) {
    jboolean canScrollUp = [self canScrollVerticallyWithInt:-1];
    if (canScrollUp) {
      [dr setBoundsWithInt:((RepackagedAndroidGraphicsRect *) nil_chk(rect))->left_ withInt:rect->top_ withInt:rect->right_ withInt:rect->top_ + h];
      [dr drawWithRepackagedAndroidGraphicsCanvas:c];
    }
  }
  
#line 13794
  if ((self->mPrivateFlags3_ & RepackagedAndroidViewView_PFLAG3_SCROLL_INDICATOR_BOTTOM) != 0) {
    jboolean canScrollDown = [self canScrollVerticallyWithInt:1];
    if (canScrollDown) {
      [dr setBoundsWithInt:((RepackagedAndroidGraphicsRect *) nil_chk(rect))->left_ withInt:rect->bottom_ - h withInt:rect->right_ withInt:rect->bottom_];
      [dr drawWithRepackagedAndroidGraphicsCanvas:c];
    }
  }
  
#line 13802
  jint leftRtl;
  jint rightRtl;
  if ([self getLayoutDirection] == RepackagedAndroidViewView_LAYOUT_DIRECTION_RTL) {
    leftRtl = RepackagedAndroidViewView_PFLAG3_SCROLL_INDICATOR_END;
    rightRtl = RepackagedAndroidViewView_PFLAG3_SCROLL_INDICATOR_START;
  }
  else {
    
#line 13808
    leftRtl = RepackagedAndroidViewView_PFLAG3_SCROLL_INDICATOR_START;
    rightRtl = RepackagedAndroidViewView_PFLAG3_SCROLL_INDICATOR_END;
  }
  
#line 13812
  jint leftMask = RepackagedAndroidViewView_PFLAG3_SCROLL_INDICATOR_LEFT | leftRtl;
  if ((self->mPrivateFlags3_ & leftMask) != 0) {
    jboolean canScrollLeft = [self canScrollHorizontallyWithInt:-1];
    if (canScrollLeft) {
      [dr setBoundsWithInt:((RepackagedAndroidGraphicsRect *) nil_chk(rect))->left_ withInt:rect->top_ withInt:rect->left_ + w withInt:rect->bottom_];
      [dr drawWithRepackagedAndroidGraphicsCanvas:c];
    }
  }
  
#line 13821
  jint rightMask = RepackagedAndroidViewView_PFLAG3_SCROLL_INDICATOR_RIGHT | rightRtl;
  if ((self->mPrivateFlags3_ & rightMask) != 0) {
    jboolean canScrollRight = [self canScrollHorizontallyWithInt:1];
    if (canScrollRight) {
      [dr setBoundsWithInt:((RepackagedAndroidGraphicsRect *) nil_chk(rect))->right_ - w withInt:rect->top_ withInt:rect->right_ withInt:rect->bottom_];
      [dr drawWithRepackagedAndroidGraphicsCanvas:c];
    }
  }
}


#line 13839
void RepackagedAndroidViewView_onDrawScrollBarsWithRepackagedAndroidGraphicsCanvas_(RepackagedAndroidViewView *self, RepackagedAndroidGraphicsCanvas *canvas) {
  
#line 13841
  RepackagedAndroidViewView_ScrollabilityCache *cache = self->mScrollCache_;
  if (cache != nil) {
    
#line 13844
    jint state = cache->state_;
    
#line 13846
    if (state == RepackagedAndroidViewView_ScrollabilityCache_OFF) {
      return;
    }
    
#line 13850
    jboolean invalidate = NO;
    
#line 13852
    if (state == RepackagedAndroidViewView_ScrollabilityCache_FADING) {
      
#line 13854
      if (cache->interpolatorValues_ == nil) {
        cache->interpolatorValues_ = [IOSFloatArray newArrayWithLength:1];
      }
      
#line 13858
      IOSFloatArray *values = cache->interpolatorValues_;
      
#line 13861
      if ([((RepackagedAndroidGraphicsInterpolator *) nil_chk(cache->scrollBarInterpolator_)) timeToValuesWithFloatArray:values] == RepackagedAndroidGraphicsInterpolator_ResultEnum_get_FREEZE_END()) {
        
#line 13863
        cache->state_ = RepackagedAndroidViewView_ScrollabilityCache_OFF;
      }
      else {
        
#line 13865
        [((RepackagedAndroidWidgetScrollBarDrawable *) nil_chk([((RepackagedAndroidWidgetScrollBarDrawable *) nil_chk(cache->scrollBar_)) mutate])) setAlphaWithInt:JavaLangMath_roundWithFloat_(IOSFloatArray_Get(nil_chk(values), 0))];
      }
      
#line 13871
      invalidate = YES;
    }
    else {
      
#line 13875
      [((RepackagedAndroidWidgetScrollBarDrawable *) nil_chk([((RepackagedAndroidWidgetScrollBarDrawable *) nil_chk(cache->scrollBar_)) mutate])) setAlphaWithInt:255];
    }
    
#line 13879
    jint viewFlags = self->mViewFlags_;
    
#line 13881
    jboolean drawHorizontalScrollBar =
#line 13882
    (viewFlags & RepackagedAndroidViewView_SCROLLBARS_HORIZONTAL) == RepackagedAndroidViewView_SCROLLBARS_HORIZONTAL;
    jboolean drawVerticalScrollBar =
#line 13884
    (viewFlags & RepackagedAndroidViewView_SCROLLBARS_VERTICAL) == RepackagedAndroidViewView_SCROLLBARS_VERTICAL &&
#line 13885
    ![self isVerticalScrollBarHidden];
    
#line 13887
    if (drawVerticalScrollBar || drawHorizontalScrollBar) {
      jint width = self->mRight_ - self->mLeft_;
      jint height = self->mBottom_ - self->mTop_;
      
#line 13891
      RepackagedAndroidWidgetScrollBarDrawable *scrollBar = cache->scrollBar_;
      
#line 13893
      jint scrollX = self->mScrollX_;
      jint scrollY = self->mScrollY_;
      jint inside = (viewFlags & RepackagedAndroidViewView_SCROLLBARS_OUTSIDE_MASK) == 0 ? ~0 : 0;
      
#line 13897
      jint left;
      jint top;
      jint right;
      jint bottom;
      
#line 13902
      if (drawHorizontalScrollBar) {
        jint size = [((RepackagedAndroidWidgetScrollBarDrawable *) nil_chk(scrollBar)) getSizeWithBoolean:NO];
        if (size <= 0) {
          size = cache->scrollBarSize_;
        }
        
#line 13908
        [scrollBar setParametersWithInt:[self computeHorizontalScrollRange] withInt:
#line 13909
        [self computeHorizontalScrollOffset] withInt:
#line 13910
        [self computeHorizontalScrollExtent] withBoolean:NO];
        jint verticalScrollBarGap = drawVerticalScrollBar ?
#line 13912
        [self getVerticalScrollbarWidth] : 0;
        top = scrollY + height - size - (self->mUserPaddingBottom_ & inside);
        left = scrollX + (self->mPaddingLeft_ & inside);
        right = scrollX + width - (self->mUserPaddingRight_ & inside) - verticalScrollBarGap;
        bottom = top + size;
        [self onDrawHorizontalScrollBarWithRepackagedAndroidGraphicsCanvas:canvas withRepackagedAndroidGraphicsDrawableDrawable:scrollBar withInt:left withInt:top withInt:right withInt:bottom];
        if (invalidate) {
          [self invalidateWithInt:left withInt:top withInt:right withInt:bottom];
        }
      }
      
#line 13923
      if (drawVerticalScrollBar) {
        jint size = [((RepackagedAndroidWidgetScrollBarDrawable *) nil_chk(scrollBar)) getSizeWithBoolean:YES];
        if (size <= 0) {
          size = cache->scrollBarSize_;
        }
        
#line 13929
        [scrollBar setParametersWithInt:[self computeVerticalScrollRange] withInt:
#line 13930
        [self computeVerticalScrollOffset] withInt:
#line 13931
        [self computeVerticalScrollExtent] withBoolean:YES];
        jint verticalScrollbarPosition = self->mVerticalScrollbarPosition_;
        if (verticalScrollbarPosition == RepackagedAndroidViewView_SCROLLBAR_POSITION_DEFAULT) {
          verticalScrollbarPosition = [self isLayoutRtl] ? RepackagedAndroidViewView_SCROLLBAR_POSITION_LEFT : RepackagedAndroidViewView_SCROLLBAR_POSITION_RIGHT;
        }
        
#line 13937
        switch (verticalScrollbarPosition) {
          default:
          case RepackagedAndroidViewView_SCROLLBAR_POSITION_RIGHT:
          left = scrollX + width - size - (self->mUserPaddingRight_ & inside);
          break;
          case RepackagedAndroidViewView_SCROLLBAR_POSITION_LEFT:
          left = scrollX + (self->mUserPaddingLeft_ & inside);
          break;
        }
        top = scrollY + (self->mPaddingTop_ & inside);
        right = left + size;
        bottom = scrollY + height - (self->mUserPaddingBottom_ & inside);
        [self onDrawVerticalScrollBarWithRepackagedAndroidGraphicsCanvas:canvas withRepackagedAndroidGraphicsDrawableDrawable:scrollBar withInt:left withInt:top withInt:right withInt:bottom];
        if (invalidate) {
          [self invalidateWithInt:left withInt:top withInt:right withInt:bottom];
        }
      }
    }
  }
}


#line 14132
jboolean RepackagedAndroidViewView_hasRtlSupport(RepackagedAndroidViewView *self) {
  return [((RepackagedAndroidContentPmApplicationInfo *) nil_chk([((id<RepackagedAndroidContentContext>) nil_chk(self->mContext_)) getApplicationInfo])) hasRtlSupport];
}


#line 14140
jboolean RepackagedAndroidViewView_isRtlCompatibilityMode(RepackagedAndroidViewView *self) {
  jint targetSdkVersion = ((RepackagedAndroidContentPmApplicationInfo *) nil_chk([((id<RepackagedAndroidContentContext>) nil_chk(RepackagedAndroidViewView_getContext(self))) getApplicationInfo]))->targetSdkVersion_;
  return targetSdkVersion < RepackagedAndroidOsBuild_VERSION_CODES_JELLY_BEAN_MR1 || !RepackagedAndroidViewView_hasRtlSupport(self);
}


#line 14149
jboolean RepackagedAndroidViewView_needRtlPropertiesResolution(RepackagedAndroidViewView *self) {
  return (self->mPrivateFlags2_ & RepackagedAndroidViewView_ALL_RTL_PROPERTIES_RESOLVED) != RepackagedAndroidViewView_ALL_RTL_PROPERTIES_RESOLVED;
}


#line 14403
void RepackagedAndroidViewView_cleanupDraw(RepackagedAndroidViewView *self) {
  RepackagedAndroidViewView_resetDisplayList(self);
  if (self->mAttachInfo_ != nil) {
    [((RepackagedAndroidViewViewRootImpl *) nil_chk(self->mAttachInfo_->mViewRootImpl_)) cancelInvalidateWithRepackagedAndroidViewView:self];
  }
}


#line 14613
void RepackagedAndroidViewView_cancelPendingInputEvents(RepackagedAndroidViewView *self) {
  [self dispatchCancelPendingInputEvents];
}


#line 15193
void RepackagedAndroidViewView_resetDisplayList(RepackagedAndroidViewView *self) {
  if ([((RepackagedAndroidViewRenderNode *) nil_chk(self->mRenderNode_)) isValid]) {
    [self->mRenderNode_ destroyDisplayListData];
  }
  
#line 15198
  if (self->mBackgroundRenderNode_ != nil && [self->mBackgroundRenderNode_ isValid]) {
    [self->mBackgroundRenderNode_ destroyDisplayListData];
  }
}


#line 15350
void RepackagedAndroidViewView_buildDrawingCacheImplWithBoolean_(RepackagedAndroidViewView *self, jboolean autoScale) {
  self->mCachingFailed_ = NO;
  
#line 15353
  jint width = self->mRight_ - self->mLeft_;
  jint height = self->mBottom_ - self->mTop_;
  
#line 15356
  RepackagedAndroidViewView_AttachInfo *attachInfo = self->mAttachInfo_;
  jboolean scalingRequired = attachInfo != nil && attachInfo->mScalingRequired_;
  
#line 15359
  if (autoScale && scalingRequired) {
    width = J2ObjCFpToInt(((width * ((RepackagedAndroidViewView_AttachInfo *) nil_chk(attachInfo))->mApplicationScale_) + 0.5f));
    height = J2ObjCFpToInt(((height * attachInfo->mApplicationScale_) + 0.5f));
  }
  
#line 15364
  jint drawingCacheBackgroundColor = self->mDrawingCacheBackgroundColor_;
  jboolean opaque = drawingCacheBackgroundColor != 0 || [self isOpaque];
  jboolean use32BitCache = attachInfo != nil && attachInfo->mUse32BitDrawingCache_;
  
#line 15368
  jlong projectedBitmapSize = width * height * (opaque && !use32BitCache ? 2 : 4);
  jlong drawingCacheSize =
#line 15370
  [((RepackagedAndroidViewViewConfiguration *) nil_chk(RepackagedAndroidViewViewConfiguration_getWithRepackagedAndroidContentContext_(self->mContext_))) getScaledMaximumDrawingCacheSize];
  if (width <= 0 || height <= 0 || projectedBitmapSize > drawingCacheSize) {
    if (width > 0 && height > 0) {
      RepackagedAndroidUtilLog_wWithNSString_withNSString_(RepackagedAndroidViewView_VIEW_LOG_TAG_, JreStrcat("$$J$J$", [[self getClass] getSimpleName], @" not displayed because it is too large to fit into a software layer (or drawing cache), needs ",
#line 15375
      projectedBitmapSize, @" bytes, only ",
#line 15376
      drawingCacheSize, @" available"));
    }
    [self destroyDrawingCache];
    self->mCachingFailed_ = YES;
    return;
  }
  
#line 15383
  jboolean clear = YES;
  RepackagedAndroidGraphicsBitmap *bitmap = autoScale ? self->mDrawingCache_ : self->mUnscaledDrawingCache_;
  
#line 15386
  if (bitmap == nil || [bitmap getWidth] != width || [bitmap getHeight] != height) {
    RepackagedAndroidGraphicsBitmap_Config *quality;
    if (!opaque) {
      
#line 15391
      switch (self->mViewFlags_ & RepackagedAndroidViewView_DRAWING_CACHE_QUALITY_MASK) {
        case RepackagedAndroidViewView_DRAWING_CACHE_QUALITY_AUTO:
        case RepackagedAndroidViewView_DRAWING_CACHE_QUALITY_LOW:
        case RepackagedAndroidViewView_DRAWING_CACHE_QUALITY_HIGH:
        default:
        quality = RepackagedAndroidGraphicsBitmap_Config_get_ARGB_8888_();
        break;
      }
    }
    else {
      
#line 15402
      quality = use32BitCache ? RepackagedAndroidGraphicsBitmap_Config_get_ARGB_8888_() : RepackagedAndroidGraphicsBitmap_Config_get_RGB_565_();
    }
    
#line 15406
    if (bitmap != nil) [bitmap recycle];
    
#line 15408
    @try {
      bitmap = RepackagedAndroidGraphicsBitmap_createBitmapWithRepackagedAndroidUtilDisplayMetrics_withInt_withInt_withRepackagedAndroidGraphicsBitmap_Config_([((RepackagedAndroidContentResResources *) nil_chk(self->mResources_)) getDisplayMetrics],
#line 15410
      width, height, quality);
      [((RepackagedAndroidGraphicsBitmap *) nil_chk(bitmap)) setDensityWithInt:((RepackagedAndroidUtilDisplayMetrics *) nil_chk([((RepackagedAndroidContentResResources *) nil_chk([self getResources])) getDisplayMetrics]))->densityDpi_];
      if (autoScale) {
        self->mDrawingCache_ = bitmap;
      }
      else {
        
#line 15415
        self->mUnscaledDrawingCache_ = bitmap;
      }
      if (opaque && use32BitCache) [bitmap setHasAlphaWithBoolean:NO];
    }
    @catch (
#line 15418
    JavaLangOutOfMemoryError *e) {
      
#line 15422
      if (autoScale) {
        self->mDrawingCache_ = nil;
      }
      else {
        
#line 15425
        self->mUnscaledDrawingCache_ = nil;
      }
      self->mCachingFailed_ = YES;
      return;
    }
    
#line 15431
    clear = (drawingCacheBackgroundColor != 0);
  }
  
#line 15434
  RepackagedAndroidGraphicsCanvas *canvas;
  if (attachInfo != nil) {
    canvas = attachInfo->mCanvas_;
    if (canvas == nil) {
      canvas = new_RepackagedAndroidGraphicsCanvas_init();
    }
    [((RepackagedAndroidGraphicsCanvas *) nil_chk(canvas)) setBitmapWithRepackagedAndroidGraphicsBitmap:bitmap];
    
#line 15445
    attachInfo->mCanvas_ = nil;
  }
  else {
    canvas = new_RepackagedAndroidGraphicsCanvas_initWithRepackagedAndroidGraphicsBitmap_(bitmap);
  }
  
#line 15451
  if (clear) {
    [((RepackagedAndroidGraphicsBitmap *) nil_chk(bitmap)) eraseColorWithInt:drawingCacheBackgroundColor];
  }
  
#line 15455
  [self computeScroll];
  jint restoreCount = [((RepackagedAndroidGraphicsCanvas *) nil_chk(canvas)) save];
  
#line 15458
  if (autoScale && scalingRequired) {
    jfloat scale_ = ((RepackagedAndroidViewView_AttachInfo *) nil_chk(attachInfo))->mApplicationScale_;
    [canvas scale__WithFloat:scale_ withFloat:scale_];
  }
  
#line 15463
  [canvas translateWithInt:-self->mScrollX_ withInt:-self->mScrollY_];
  
#line 15465
  self->mPrivateFlags_ |= RepackagedAndroidViewView_PFLAG_DRAWN;
  if (self->mAttachInfo_ == nil || !self->mAttachInfo_->mHardwareAccelerated_ ||
#line 15467
  self->mLayerType_ != RepackagedAndroidViewView_LAYER_TYPE_NONE) {
    self->mPrivateFlags_ |= RepackagedAndroidViewView_PFLAG_DRAWING_CACHE_VALID;
  }
  
#line 15472
  if ((self->mPrivateFlags_ & RepackagedAndroidViewView_PFLAG_SKIP_DRAW) == RepackagedAndroidViewView_PFLAG_SKIP_DRAW) {
    self->mPrivateFlags_ &= ~RepackagedAndroidViewView_PFLAG_DIRTY_MASK;
    [self dispatchDrawWithRepackagedAndroidGraphicsCanvas:canvas];
    if (self->mOverlay_ != nil && ![self->mOverlay_ isEmpty]) {
      [((RepackagedAndroidViewViewGroup *) nil_chk([self->mOverlay_ getOverlayView])) drawWithRepackagedAndroidGraphicsCanvas:canvas];
    }
  }
  else {
    
#line 15479
    [self drawWithRepackagedAndroidGraphicsCanvas:canvas];
  }
  
#line 15482
  [canvas restoreToCountWithInt:restoreCount];
  [canvas setBitmapWithRepackagedAndroidGraphicsBitmap:nil];
  
#line 15485
  if (attachInfo != nil) {
    
#line 15487
    attachInfo->mCanvas_ = canvas;
  }
}


#line 15763
jboolean RepackagedAndroidViewView_applyLegacyAnimationWithRepackagedAndroidViewViewGroup_withLong_withRepackagedAndroidViewAnimationAnimation_withBoolean_(RepackagedAndroidViewView *self, RepackagedAndroidViewViewGroup *parent, jlong drawingTime, id<RepackagedAndroidViewAnimationAnimation> a, jboolean scalingRequired) {
  
#line 15765
  RepackagedAndroidViewAnimationTransformation *invalidationTransform;
  jint flags = ((RepackagedAndroidViewViewGroup *) nil_chk(parent))->mGroupFlags_;
  jboolean initialized = [((id<RepackagedAndroidViewAnimationAnimation>) nil_chk(a)) isInitialized];
  if (!initialized) {
    [a initialize__WithInt:self->mRight_ - self->mLeft_ withInt:self->mBottom_ - self->mTop_ withInt:RepackagedAndroidViewView_getWidth(parent) withInt:RepackagedAndroidViewView_getHeight(parent)];
    [a initializeInvalidateRegionWithInt:0 withInt:0 withInt:self->mRight_ - self->mLeft_ withInt:self->mBottom_ - self->mTop_];
    if (self->mAttachInfo_ != nil) [a setListenerHandlerWithRepackagedAndroidOsHandler:self->mAttachInfo_->mHandler_];
    [self onAnimationStart];
  }
  
#line 15775
  RepackagedAndroidViewAnimationTransformation *t = [parent getChildTransformation];
  jboolean more = [a getTransformationWithLong:drawingTime withRepackagedAndroidViewAnimationTransformation:t withFloat:1.0f];
  if (scalingRequired && ((RepackagedAndroidViewView_AttachInfo *) nil_chk(self->mAttachInfo_))->mApplicationScale_ != 1.0f) {
    if (parent->mInvalidationTransformation_ == nil) {
      parent->mInvalidationTransformation_ = new_RepackagedAndroidViewAnimationTransformation_init();
    }
    invalidationTransform = parent->mInvalidationTransformation_;
    [a getTransformationWithLong:drawingTime withRepackagedAndroidViewAnimationTransformation:invalidationTransform withFloat:1.0f];
  }
  else {
    
#line 15784
    invalidationTransform = t;
  }
  
#line 15787
  if (more) {
    if (![a willChangeBounds]) {
      if ((flags & (RepackagedAndroidViewViewGroup_FLAG_OPTIMIZE_INVALIDATE | RepackagedAndroidViewViewGroup_FLAG_ANIMATION_DONE)) ==
#line 15790
      RepackagedAndroidViewViewGroup_FLAG_OPTIMIZE_INVALIDATE) {
        parent->mGroupFlags_ |= RepackagedAndroidViewViewGroup_FLAG_INVALIDATE_REQUIRED;
      }
      else
#line 15792
      if ((flags & RepackagedAndroidViewViewGroup_FLAG_INVALIDATE_REQUIRED) == 0) {
        
#line 15795
        parent->mPrivateFlags_ |= RepackagedAndroidViewView_PFLAG_DRAW_ANIMATION;
        [parent invalidateWithInt:self->mLeft_ withInt:self->mTop_ withInt:self->mRight_ withInt:self->mBottom_];
      }
    }
    else {
      
#line 15799
      if (parent->mInvalidateRegion_ == nil) {
        parent->mInvalidateRegion_ = new_RepackagedAndroidGraphicsRectF_init();
      }
      RepackagedAndroidGraphicsRectF *region = parent->mInvalidateRegion_;
      [a getInvalidateRegionWithInt:0 withInt:0 withInt:self->mRight_ - self->mLeft_ withInt:self->mBottom_ - self->mTop_ withRepackagedAndroidGraphicsRectF:region withRepackagedAndroidViewAnimationTransformation:
#line 15804
      invalidationTransform];
      
#line 15808
      parent->mPrivateFlags_ |= RepackagedAndroidViewView_PFLAG_DRAW_ANIMATION;
      
#line 15810
      jint left = self->mLeft_ + J2ObjCFpToInt(((RepackagedAndroidGraphicsRectF *) nil_chk(region))->left_);
      jint top = self->mTop_ + J2ObjCFpToInt(region->top_);
      [parent invalidateWithInt:left withInt:top withInt:left + J2ObjCFpToInt(([region width] + .5f)) withInt:
#line 15813
      top + J2ObjCFpToInt(([region height] + .5f))];
    }
  }
  return more;
}


#line 16351
void RepackagedAndroidViewView_drawBackgroundWithRepackagedAndroidGraphicsCanvas_(RepackagedAndroidViewView *self, RepackagedAndroidGraphicsCanvas *canvas) {
  RepackagedAndroidGraphicsDrawableDrawable *background = self->mBackground_;
  if (background == nil) {
    return;
  }
  
#line 16357
  [self setBackgroundBounds];
  
#line 16360
  if ([((RepackagedAndroidGraphicsCanvas *) nil_chk(canvas)) isHardwareAccelerated] && self->mAttachInfo_ != nil &&
#line 16361
  self->mAttachInfo_->mHardwareRenderer_ != nil) {
    self->mBackgroundRenderNode_ = RepackagedAndroidViewView_getDrawableRenderNodeWithRepackagedAndroidGraphicsDrawableDrawable_withRepackagedAndroidViewRenderNode_(self, background, self->mBackgroundRenderNode_);
    
#line 16364
    RepackagedAndroidViewRenderNode *renderNode = self->mBackgroundRenderNode_;
    if (renderNode != nil && [renderNode isValid]) {
      RepackagedAndroidViewView_setBackgroundRenderNodePropertiesWithRepackagedAndroidViewRenderNode_(self, renderNode);
      [((RepackagedAndroidViewDisplayListCanvas *) check_class_cast(canvas, [RepackagedAndroidViewDisplayListCanvas class])) drawRenderNodeWithRepackagedAndroidViewRenderNode:renderNode];
      return;
    }
  }
  
#line 16372
  jint scrollX = self->mScrollX_;
  jint scrollY = self->mScrollY_;
  if ((scrollX | scrollY) == 0) {
    [((RepackagedAndroidGraphicsDrawableDrawable *) nil_chk(background)) drawWithRepackagedAndroidGraphicsCanvas:canvas];
  }
  else {
    
#line 16377
    [canvas translateWithInt:scrollX withInt:scrollY];
    [((RepackagedAndroidGraphicsDrawableDrawable *) nil_chk(background)) drawWithRepackagedAndroidGraphicsCanvas:canvas];
    [canvas translateWithInt:-scrollX withInt:-scrollY];
  }
}


#line 16396
void RepackagedAndroidViewView_setBackgroundRenderNodePropertiesWithRepackagedAndroidViewRenderNode_(RepackagedAndroidViewView *self, RepackagedAndroidViewRenderNode *renderNode) {
  [((RepackagedAndroidViewRenderNode *) nil_chk(renderNode)) setTranslationXWithFloat:self->mScrollX_];
  [renderNode setTranslationYWithFloat:self->mScrollY_];
}


#line 16409
RepackagedAndroidViewRenderNode *RepackagedAndroidViewView_getDrawableRenderNodeWithRepackagedAndroidGraphicsDrawableDrawable_withRepackagedAndroidViewRenderNode_(RepackagedAndroidViewView *self, RepackagedAndroidGraphicsDrawableDrawable *drawable, RepackagedAndroidViewRenderNode *renderNode) {
  if (renderNode == nil) {
    renderNode = RepackagedAndroidViewRenderNode_createWithNSString_withRepackagedAndroidViewView_([[((RepackagedAndroidGraphicsDrawableDrawable *) nil_chk(drawable)) getClass] getName], self);
  }
  
#line 16414
  RepackagedAndroidGraphicsRect *bounds = [((RepackagedAndroidGraphicsDrawableDrawable *) nil_chk(drawable)) getBounds];
  jint width = [((RepackagedAndroidGraphicsRect *) nil_chk(bounds)) width];
  jint height = [bounds height];
  RepackagedAndroidViewDisplayListCanvas *canvas = [((RepackagedAndroidViewRenderNode *) nil_chk(renderNode)) startWithInt:width withInt:height];
  
#line 16423
  [((RepackagedAndroidViewDisplayListCanvas *) nil_chk(canvas)) translateWithInt:-bounds->left_ withInt:-bounds->top_];
  
#line 16425
  @try {
    [drawable drawWithRepackagedAndroidGraphicsCanvas:canvas];
  }
  @finally {
    
#line 16428
    [renderNode endWithRepackagedAndroidViewDisplayListCanvas:canvas];
  }
  
#line 16432
  [renderNode setLeftTopRightBottomWithInt:bounds->left_ withInt:bounds->top_ withInt:bounds->right_ withInt:bounds->bottom_];
  [renderNode setProjectBackwardsWithBoolean:[drawable isProjected]];
  [renderNode setProjectionReceiverWithBoolean:YES];
  [renderNode setClipToBoundsWithBoolean:NO];
  return renderNode;
}


#line 16483
NSString *RepackagedAndroidViewView_printFlagsWithInt_(jint flags) {
  RepackagedAndroidViewView_initialize();
  
#line 16484
  NSString *output = @"";
  jint numFlags = 0;
  if ((flags & RepackagedAndroidViewView_FOCUSABLE_MASK) == RepackagedAndroidViewView_FOCUSABLE) {
    output = JreStrcat("$$", output, @"TAKES_FOCUS");
    numFlags++;
  }
  
#line 16491
  switch (flags & RepackagedAndroidViewView_VISIBILITY_MASK) {
    case RepackagedAndroidViewView_INVISIBLE:
    if (numFlags > 0) {
      output = JreStrcat("$C", output, ' ');
    }
    output = JreStrcat("$$", output, @"INVISIBLE");
    
#line 16498
    break;
    case RepackagedAndroidViewView_GONE:
    if (numFlags > 0) {
      output = JreStrcat("$C", output, ' ');
    }
    output = JreStrcat("$$", output, @"GONE");
    
#line 16505
    break;
    default:
    break;
  }
  return output;
}


#line 16519
NSString *RepackagedAndroidViewView_printPrivateFlagsWithInt_(jint privateFlags) {
  RepackagedAndroidViewView_initialize();
  
#line 16520
  NSString *output = @"";
  jint numFlags = 0;
  
#line 16523
  if ((privateFlags & RepackagedAndroidViewView_PFLAG_WANTS_FOCUS) == RepackagedAndroidViewView_PFLAG_WANTS_FOCUS) {
    output = JreStrcat("$$", output, @"WANTS_FOCUS");
    numFlags++;
  }
  
#line 16528
  if ((privateFlags & RepackagedAndroidViewView_PFLAG_FOCUSED) == RepackagedAndroidViewView_PFLAG_FOCUSED) {
    if (numFlags > 0) {
      output = JreStrcat("$C", output, ' ');
    }
    output = JreStrcat("$$", output, @"FOCUSED");
    numFlags++;
  }
  
#line 16536
  if ((privateFlags & RepackagedAndroidViewView_PFLAG_SELECTED) == RepackagedAndroidViewView_PFLAG_SELECTED) {
    if (numFlags > 0) {
      output = JreStrcat("$C", output, ' ');
    }
    output = JreStrcat("$$", output, @"SELECTED");
    numFlags++;
  }
  
#line 16544
  if ((privateFlags & RepackagedAndroidViewView_PFLAG_IS_ROOT_NAMESPACE) == RepackagedAndroidViewView_PFLAG_IS_ROOT_NAMESPACE) {
    if (numFlags > 0) {
      output = JreStrcat("$C", output, ' ');
    }
    output = JreStrcat("$$", output, @"IS_ROOT_NAMESPACE");
    numFlags++;
  }
  
#line 16552
  if ((privateFlags & RepackagedAndroidViewView_PFLAG_HAS_BOUNDS) == RepackagedAndroidViewView_PFLAG_HAS_BOUNDS) {
    if (numFlags > 0) {
      output = JreStrcat("$C", output, ' ');
    }
    output = JreStrcat("$$", output, @"HAS_BOUNDS");
    numFlags++;
  }
  
#line 16560
  if ((privateFlags & RepackagedAndroidViewView_PFLAG_DRAWN) == RepackagedAndroidViewView_PFLAG_DRAWN) {
    if (numFlags > 0) {
      output = JreStrcat("$C", output, ' ');
    }
    output = JreStrcat("$$", output, @"DRAWN");
  }
  
#line 16567
  return output;
}


#line 16584
jboolean RepackagedAndroidViewView_isLayoutModeOpticalWithId_(id o) {
  RepackagedAndroidViewView_initialize();
  
#line 16585
  return [o isKindOfClass:[RepackagedAndroidViewViewGroup class]] && [((RepackagedAndroidViewViewGroup *) nil_chk(((RepackagedAndroidViewViewGroup *) check_class_cast(o, [RepackagedAndroidViewViewGroup class])))) isLayoutModeOptical];
}


#line 16588
jboolean RepackagedAndroidViewView_setOpticalFrameWithInt_withInt_withInt_withInt_(RepackagedAndroidViewView *self, jint left, jint top, jint right, jint bottom) {
  RepackagedAndroidGraphicsInsets *parentInsets = [self->mParent_ isKindOfClass:[RepackagedAndroidViewView class]] ?
#line 16590
  [((RepackagedAndroidViewView *) nil_chk(((RepackagedAndroidViewView *) check_class_cast(self->mParent_, [RepackagedAndroidViewView class])))) getOpticalInsets] : RepackagedAndroidGraphicsInsets_get_NONE_();
  RepackagedAndroidGraphicsInsets *childInsets = [self getOpticalInsets];
  return [self setFrameWithInt:
#line 16593
  left + parentInsets->left_ - ((RepackagedAndroidGraphicsInsets *) nil_chk(childInsets))->left_ withInt:
#line 16594
  top + parentInsets->top_ - childInsets->top_ withInt:
#line 16595
  right + parentInsets->left_ + childInsets->right_ withInt:
#line 16596
  bottom + parentInsets->top_ + childInsets->bottom_];
}


#line 16752
void RepackagedAndroidViewView_sizeChangeWithInt_withInt_withInt_withInt_(RepackagedAndroidViewView *self, jint newWidth, jint newHeight, jint oldWidth, jint oldHeight) {
  [self onSizeChangedWithInt:newWidth withInt:newHeight withInt:oldWidth withInt:oldHeight];
  if (self->mOverlay_ != nil) {
    RepackagedAndroidViewView_setRightWithInt_(nil_chk([self->mOverlay_ getOverlayView]), newWidth);
    RepackagedAndroidViewView_setBottomWithInt_(nil_chk([self->mOverlay_ getOverlayView]), newHeight);
  }
  RepackagedAndroidViewView_rebuildOutline(self);
}


#line 17042
IOSIntArray *RepackagedAndroidViewView_getDrawableState(RepackagedAndroidViewView *self) {
  if ((self->mDrawableState_ != nil) && ((self->mPrivateFlags_ & RepackagedAndroidViewView_PFLAG_DRAWABLE_STATE_DIRTY) == 0)) {
    return self->mDrawableState_;
  }
  else {
    
#line 17046
    self->mDrawableState_ = [self onCreateDrawableStateWithInt:0];
    self->mPrivateFlags_ &= ~RepackagedAndroidViewView_PFLAG_DRAWABLE_STATE_DIRTY;
    return self->mDrawableState_;
  }
}


#line 17147
IOSIntArray *RepackagedAndroidViewView_mergeDrawableStatesWithIntArray_withIntArray_(IOSIntArray *baseState, IOSIntArray *additionalState) {
  RepackagedAndroidViewView_initialize();
  
#line 17148
  jint N = ((IOSIntArray *) nil_chk(baseState))->size_;
  jint i = N - 1;
  while (i >= 0 && IOSIntArray_Get(baseState, i) == 0) {
    i--;
  }
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(additionalState, 0, baseState, i + 1, ((IOSIntArray *) nil_chk(additionalState))->size_);
  return baseState;
}


#line 17414
void RepackagedAndroidViewView_applyBackgroundTint(RepackagedAndroidViewView *self) {
  if (self->mBackground_ != nil && self->mBackgroundTint_ != nil) {
    RepackagedAndroidViewView_TintInfo *tintInfo = self->mBackgroundTint_;
    if (tintInfo->mHasTintList_ || tintInfo->mHasTintMode_) {
      self->mBackground_ = [self->mBackground_ mutate];
      
#line 17420
      if (tintInfo->mHasTintList_) {
        [((RepackagedAndroidGraphicsDrawableDrawable *) nil_chk(self->mBackground_)) setTintListWithRepackagedAndroidContentResColorStateList:tintInfo->mTintList_];
      }
      
#line 17424
      if (tintInfo->mHasTintMode_) {
        [((RepackagedAndroidGraphicsDrawableDrawable *) nil_chk(self->mBackground_)) setTintModeWithRepackagedAndroidGraphicsPorterDuff_ModeEnum:tintInfo->mTintMode_];
      }
      
#line 17430
      if ([((RepackagedAndroidGraphicsDrawableDrawable *) nil_chk(self->mBackground_)) isStateful]) {
        [self->mBackground_ setStateWithIntArray:RepackagedAndroidViewView_getDrawableState(self)];
      }
    }
  }
}


#line 17627
void RepackagedAndroidViewView_applyForegroundTint(RepackagedAndroidViewView *self) {
  if (self->mForegroundInfo_ != nil && self->mForegroundInfo_->mDrawable_ != nil &&
#line 17629
  self->mForegroundInfo_->mTintInfo_ != nil) {
    RepackagedAndroidViewView_TintInfo *tintInfo = self->mForegroundInfo_->mTintInfo_;
    if (tintInfo->mHasTintList_ || tintInfo->mHasTintMode_) {
      self->mForegroundInfo_->mDrawable_ = [self->mForegroundInfo_->mDrawable_ mutate];
      
#line 17634
      if (tintInfo->mHasTintList_) {
        [((RepackagedAndroidGraphicsDrawableDrawable *) nil_chk(self->mForegroundInfo_->mDrawable_)) setTintListWithRepackagedAndroidContentResColorStateList:tintInfo->mTintList_];
      }
      
#line 17638
      if (tintInfo->mHasTintMode_) {
        [((RepackagedAndroidGraphicsDrawableDrawable *) nil_chk(self->mForegroundInfo_->mDrawable_)) setTintModeWithRepackagedAndroidGraphicsPorterDuff_ModeEnum:tintInfo->mTintMode_];
      }
      
#line 17644
      if ([((RepackagedAndroidGraphicsDrawableDrawable *) nil_chk(self->mForegroundInfo_->mDrawable_)) isStateful]) {
        [self->mForegroundInfo_->mDrawable_ setStateWithIntArray:RepackagedAndroidViewView_getDrawableState(self)];
      }
    }
  }
}


#line 18400
RepackagedAndroidViewView *RepackagedAndroidViewView_findViewByPredicateInsideOutWithRepackagedAndroidViewView_withRepackagedComAndroidInternalUtilPredicate_(RepackagedAndroidViewView *self, RepackagedAndroidViewView *start, id<RepackagedComAndroidInternalUtilPredicate> predicate) {
  RepackagedAndroidViewView *childToSkip = nil;
  for (; ; ) {
    RepackagedAndroidViewView *view = [((RepackagedAndroidViewView *) nil_chk(start)) findViewByPredicateTraversalWithRepackagedComAndroidInternalUtilPredicate:predicate withRepackagedAndroidViewView:childToSkip];
    if (view != nil || start == self) {
      return view;
    }
    
#line 18408
    id<RepackagedAndroidViewViewParent> parent = RepackagedAndroidViewView_getParent(start);
    if (parent == nil || !([parent isKindOfClass:[RepackagedAndroidViewView class]])) {
      return nil;
    }
    
#line 18413
    childToSkip = start;
    start = (RepackagedAndroidViewView *) check_class_cast(parent, [RepackagedAndroidViewView class]);
  }
}


#line 18569
void RepackagedAndroidViewView_setKeyedTagWithInt_withId_(RepackagedAndroidViewView *self, jint key, id tag) {
  if (self->mKeyedTags_ == nil) {
    self->mKeyedTags_ = new_RepackagedAndroidUtilSparseArray_initWithInt_(2);
  }
  
#line 18574
  [((RepackagedAndroidUtilSparseArray *) nil_chk(self->mKeyedTags_)) putWithInt:key withId:tag];
}


#line 18663
NSString *RepackagedAndroidViewView_debugIndentWithInt_(jint depth) {
  RepackagedAndroidViewView_initialize();
  
#line 18664
  JavaLangStringBuilder *spaces = new_JavaLangStringBuilder_initWithInt_((depth * 2 + 3) * 2);
  for (jint i = 0; i < (depth * 2) + 3; i++) {
    (void) [((JavaLangStringBuilder *) nil_chk([spaces appendWithChar:' '])) appendWithChar:' '];
  }
  return [spaces description];
}


#line 18884
void RepackagedAndroidViewView_setMeasuredDimensionWithInt_withInt_(RepackagedAndroidViewView *self, jint measuredWidth, jint measuredHeight) {
  jboolean optical = RepackagedAndroidViewView_isLayoutModeOpticalWithId_(self);
  if (optical != RepackagedAndroidViewView_isLayoutModeOpticalWithId_(self->mParent_)) {
    RepackagedAndroidGraphicsInsets *insets = [self getOpticalInsets];
    jint opticalWidth = ((RepackagedAndroidGraphicsInsets *) nil_chk(insets))->left_ + insets->right_;
    jint opticalHeight = insets->top_ + insets->bottom_;
    
#line 18891
    measuredWidth += optical ? opticalWidth : -opticalWidth;
    measuredHeight += optical ? opticalHeight : -opticalHeight;
  }
  RepackagedAndroidViewView_setMeasuredDimensionRawWithInt_withInt_(self, measuredWidth, measuredHeight);
}


#line 18909
void RepackagedAndroidViewView_setMeasuredDimensionRawWithInt_withInt_(RepackagedAndroidViewView *self, jint measuredWidth, jint measuredHeight) {
  self->mMeasuredWidth_ = measuredWidth;
  self->mMeasuredHeight_ = measuredHeight;
  
#line 18913
  self->mPrivateFlags_ |= RepackagedAndroidViewView_PFLAG_MEASURED_DIMENSION_SET;
}


#line 18924
jint RepackagedAndroidViewView_combineMeasuredStatesWithInt_withInt_(jint curState, jint newState) {
  RepackagedAndroidViewView_initialize();
  
#line 18925
  return curState | newState;
}


#line 18932
jint RepackagedAndroidViewView_resolveSizeWithInt_withInt_(jint size, jint measureSpec) {
  RepackagedAndroidViewView_initialize();
  
#line 18933
  return RepackagedAndroidViewView_resolveSizeAndStateWithInt_withInt_withInt_(size, measureSpec, 0) & RepackagedAndroidViewView_MEASURED_SIZE_MASK;
}


#line 18952
jint RepackagedAndroidViewView_resolveSizeAndStateWithInt_withInt_withInt_(jint size, jint measureSpec, jint childMeasuredState) {
  RepackagedAndroidViewView_initialize();
  
#line 18953
  jint specMode = RepackagedAndroidViewView_MeasureSpec_getModeWithInt_(measureSpec);
  jint specSize = RepackagedAndroidViewView_MeasureSpec_getSizeWithInt_(measureSpec);
  jint result;
  switch (specMode) {
    case RepackagedAndroidViewView_MeasureSpec_AT_MOST:
    if (specSize < size) {
      result = specSize | RepackagedAndroidViewView_MEASURED_STATE_TOO_SMALL;
    }
    else {
      
#line 18961
      result = size;
    }
    break;
    case RepackagedAndroidViewView_MeasureSpec_EXACTLY:
    result = specSize;
    break;
    case RepackagedAndroidViewView_MeasureSpec_UNSPECIFIED:
    default:
    result = size;
  }
  return result | (childMeasuredState & RepackagedAndroidViewView_MEASURED_STATE_MASK);
}


#line 18983
jint RepackagedAndroidViewView_getDefaultSizeWithInt_withInt_(jint size, jint measureSpec) {
  RepackagedAndroidViewView_initialize();
  
#line 18984
  jint result = size;
  jint specMode = RepackagedAndroidViewView_MeasureSpec_getModeWithInt_(measureSpec);
  jint specSize = RepackagedAndroidViewView_MeasureSpec_getSizeWithInt_(measureSpec);
  
#line 18988
  switch (specMode) {
    case RepackagedAndroidViewView_MeasureSpec_UNSPECIFIED:
    result = size;
    break;
    case RepackagedAndroidViewView_MeasureSpec_AT_MOST:
    case RepackagedAndroidViewView_MeasureSpec_EXACTLY:
    result = specSize;
    break;
  }
  return result;
}


#line 19764
void RepackagedAndroidViewView_checkForLongClickWithInt_(RepackagedAndroidViewView *self, jint delayOffset) {
  if ((self->mViewFlags_ & RepackagedAndroidViewView_LONG_CLICKABLE) == RepackagedAndroidViewView_LONG_CLICKABLE) {
    self->mHasPerformedLongPress_ = NO;
    
#line 19768
    if (self->mPendingCheckForLongPress_ == nil) {
      self->mPendingCheckForLongPress_ = new_RepackagedAndroidViewView_CheckForLongPress_initWithRepackagedAndroidViewView_(self);
    }
    [((RepackagedAndroidViewView_CheckForLongPress *) nil_chk(self->mPendingCheckForLongPress_)) rememberWindowAttachCount];
    [self postDelayedWithJavaLangRunnable:self->mPendingCheckForLongPress_ withLong:
#line 19773
    RepackagedAndroidViewViewConfiguration_getLongPressTimeout() - delayOffset];
  }
}


#line 19787
RepackagedAndroidViewView *RepackagedAndroidViewView_inflateWithRepackagedAndroidContentContext_withInt_withRepackagedAndroidViewViewGroup_(id<RepackagedAndroidContentContext> context, jint resource, RepackagedAndroidViewViewGroup *root) {
  RepackagedAndroidViewView_initialize();
  
#line 19788
  RepackagedAndroidViewLayoutInflater *factory = RepackagedAndroidViewLayoutInflater_fromWithRepackagedAndroidContentContext_(context);
  return [((RepackagedAndroidViewLayoutInflater *) nil_chk(factory)) inflateWithInt:resource withRepackagedAndroidViewViewGroup:root];
}


#line 20728
jint RepackagedAndroidViewView_generateViewId() {
  RepackagedAndroidViewView_initialize();
  
#line 20729
  for (; ; ) {
    jint result = [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(RepackagedAndroidViewView_sNextGeneratedId_)) get];
    
#line 20732
    jint newValue = result + 1;
    if (newValue > (jint) 0x00FFFFFF) newValue = 1;
    if ([RepackagedAndroidViewView_sNextGeneratedId_ compareAndSetWithInt:result withInt:newValue]) {
      return result;
    }
  }
}


#line 21180
void RepackagedAndroidViewView_setTransitionNameWithNSString_(RepackagedAndroidViewView *self, NSString *transitionName) {
  self->mTransitionName_ = transitionName;
}


#line 22364
jboolean RepackagedAndroidViewView_inLiveRegion(RepackagedAndroidViewView *self) {
  if ([self getAccessibilityLiveRegion] != RepackagedAndroidViewView_ACCESSIBILITY_LIVE_REGION_NONE) {
    return YES;
  }
  
#line 22369
  id<RepackagedAndroidViewViewParent> parent = RepackagedAndroidViewView_getParent(self);
  while ([parent isKindOfClass:[RepackagedAndroidViewView class]]) {
    if ([((RepackagedAndroidViewView *) nil_chk(((RepackagedAndroidViewView *) check_class_cast(parent, [RepackagedAndroidViewView class])))) getAccessibilityLiveRegion] !=
#line 22372
    RepackagedAndroidViewView_ACCESSIBILITY_LIVE_REGION_NONE) {
      return YES;
    }
    parent = [((id<RepackagedAndroidViewViewParent>) nil_chk(parent)) getParent];
  }
  
#line 22378
  return NO;
}


#line 22385
void RepackagedAndroidViewView_dumpFlags() {
  RepackagedAndroidViewView_initialize();
  
#line 22386
  JavaUtilHashMap *found = RepackagedComGoogleAndroidCollectMaps_newHashMap();
  @try {
    {
      IOSObjectArray *a__ =
#line 22388
      [RepackagedAndroidViewView_class_() getDeclaredFields];
      JavaLangReflectField * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      JavaLangReflectField * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        JavaLangReflectField *field = *b__++;
        
#line 22389
        jint modifiers = [((JavaLangReflectField *) nil_chk(field)) getModifiers];
        if (JavaLangReflectModifier_isStaticWithInt_(modifiers) && JavaLangReflectModifier_isFinalWithInt_(modifiers)) {
          if ([((IOSClass *) nil_chk([field getType])) isEqual:[IOSClass intClass]]) {
            jint value = [field getIntWithId:nil];
            RepackagedAndroidViewView_dumpFlagWithJavaUtilHashMap_withNSString_withInt_(found, [field getName], value);
          }
          else
#line 22394
          if ([((IOSClass *) nil_chk([field getType])) isEqual:IOSClass_intArray(1)]) {
            IOSIntArray *values = (IOSIntArray *) check_class_cast([field getWithId:nil], [IOSIntArray class]);
            for (jint i = 0; i < ((IOSIntArray *) nil_chk(values))->size_; i++) {
              RepackagedAndroidViewView_dumpFlagWithJavaUtilHashMap_withNSString_withInt_(found, JreStrcat("$CIC", [field getName], '[', i, ']'), IOSIntArray_Get(values, i));
            }
          }
        }
      }
    }
  }
  @catch (
#line 22402
  JavaLangIllegalAccessException *e) {
    @throw new_JavaLangRuntimeException_initWithJavaLangThrowable_(e);
  }
  
#line 22406
  JavaUtilArrayList *keys = RepackagedComGoogleAndroidCollectLists_newArrayList();
  [((JavaUtilArrayList *) nil_chk(keys)) addAllWithJavaUtilCollection:[((JavaUtilHashMap *) nil_chk(found)) keySet]];
  JavaUtilCollections_sortWithJavaUtilList_(keys);
  for (NSString * __strong key in keys) {
    RepackagedAndroidUtilLog_dWithNSString_withNSString_(RepackagedAndroidViewView_VIEW_LOG_TAG_, [found getWithId:key]);
  }
}


#line 22414
void RepackagedAndroidViewView_dumpFlagWithJavaUtilHashMap_withNSString_withInt_(JavaUtilHashMap *found, NSString *name, jint value) {
  RepackagedAndroidViewView_initialize();
  NSString *bits = [((NSString *) nil_chk(NSString_formatWithNSString_withNSObjectArray_(@"%32s", [IOSObjectArray newArrayWithObjects:(id[]){ JavaLangInteger_toBinaryStringWithInt_(value) } count:1 type:NSObject_class_()]))) replace:'0' withChar:' '];
  jint prefix = [((NSString *) nil_chk(name)) indexOf:'_'];
  NSString *key = JreStrcat("$$$", (prefix > 0 ? [name substring:0 endIndex:prefix] : name), bits, name);
  NSString *output = JreStrcat("$C$", bits, ' ', name);
  (void) [((JavaUtilHashMap *) nil_chk(found)) putWithId:key withId:output];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RepackagedAndroidViewView)


#line 779
@implementation RepackagedAndroidViewView_Visibility

+ (IOSObjectArray *)__annotations {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[JavaLangAnnotationRetention alloc] initWithValue:JavaLangAnnotationRetentionPolicyEnum_get_SOURCE()] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcClassInfo _RepackagedAndroidViewView_Visibility = { 2, "Visibility", "repackaged.android.view", "View", 0x2609, 0, NULL, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_RepackagedAndroidViewView_Visibility;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(RepackagedAndroidViewView_Visibility)


#line 951
@implementation RepackagedAndroidViewView_DrawingCacheQuality

+ (IOSObjectArray *)__annotations {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[JavaLangAnnotationRetention alloc] initWithValue:JavaLangAnnotationRetentionPolicyEnum_get_SOURCE()] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcClassInfo _RepackagedAndroidViewView_DrawingCacheQuality = { 2, "DrawingCacheQuality", "repackaged.android.view", "View", 0x2609, 0, NULL, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_RepackagedAndroidViewView_DrawingCacheQuality;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(RepackagedAndroidViewView_DrawingCacheQuality)


#line 1016
@implementation RepackagedAndroidViewView_ScrollBarStyle

+ (IOSObjectArray *)__annotations {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[JavaLangAnnotationRetention alloc] initWithValue:JavaLangAnnotationRetentionPolicyEnum_get_SOURCE()] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcClassInfo _RepackagedAndroidViewView_ScrollBarStyle = { 2, "ScrollBarStyle", "repackaged.android.view", "View", 0x2609, 0, NULL, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_RepackagedAndroidViewView_ScrollBarStyle;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(RepackagedAndroidViewView_ScrollBarStyle)


#line 1105
@implementation RepackagedAndroidViewView_FocusableMode

+ (IOSObjectArray *)__annotations {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[JavaLangAnnotationRetention alloc] initWithValue:JavaLangAnnotationRetentionPolicyEnum_get_SOURCE()] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcClassInfo _RepackagedAndroidViewView_FocusableMode = { 2, "FocusableMode", "repackaged.android.view", "View", 0x2609, 0, NULL, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_RepackagedAndroidViewView_FocusableMode;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(RepackagedAndroidViewView_FocusableMode)


#line 1129
@implementation RepackagedAndroidViewView_FocusDirection

+ (IOSObjectArray *)__annotations {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[JavaLangAnnotationRetention alloc] initWithValue:JavaLangAnnotationRetentionPolicyEnum_get_SOURCE()] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcClassInfo _RepackagedAndroidViewView_FocusDirection = { 2, "FocusDirection", "repackaged.android.view", "View", 0x2609, 0, NULL, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_RepackagedAndroidViewView_FocusDirection;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(RepackagedAndroidViewView_FocusDirection)


#line 1139
@implementation RepackagedAndroidViewView_FocusRealDirection

+ (IOSObjectArray *)__annotations {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[JavaLangAnnotationRetention alloc] initWithValue:JavaLangAnnotationRetentionPolicyEnum_get_SOURCE()] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcClassInfo _RepackagedAndroidViewView_FocusRealDirection = { 2, "FocusRealDirection", "repackaged.android.view", "View", 0x2609, 0, NULL, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_RepackagedAndroidViewView_FocusRealDirection;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(RepackagedAndroidViewView_FocusRealDirection)


#line 1870
@implementation RepackagedAndroidViewView_LayoutDir

+ (IOSObjectArray *)__annotations {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[JavaLangAnnotationRetention alloc] initWithValue:JavaLangAnnotationRetentionPolicyEnum_get_SOURCE()] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcClassInfo _RepackagedAndroidViewView_LayoutDir = { 2, "LayoutDir", "repackaged.android.view", "View", 0x2609, 0, NULL, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_RepackagedAndroidViewView_LayoutDir;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(RepackagedAndroidViewView_LayoutDir)


#line 1878
@implementation RepackagedAndroidViewView_ResolvedLayoutDir

+ (IOSObjectArray *)__annotations {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[JavaLangAnnotationRetention alloc] initWithValue:JavaLangAnnotationRetentionPolicyEnum_get_SOURCE()] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcClassInfo _RepackagedAndroidViewView_ResolvedLayoutDir = { 2, "ResolvedLayoutDir", "repackaged.android.view", "View", 0x2609, 0, NULL, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_RepackagedAndroidViewView_ResolvedLayoutDir;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(RepackagedAndroidViewView_ResolvedLayoutDir)


#line 2091
@implementation RepackagedAndroidViewView_TextAlignment

+ (IOSObjectArray *)__annotations {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[JavaLangAnnotationRetention alloc] initWithValue:JavaLangAnnotationRetentionPolicyEnum_get_SOURCE()] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcClassInfo _RepackagedAndroidViewView_TextAlignment = { 2, "TextAlignment", "repackaged.android.view", "View", 0x2609, 0, NULL, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_RepackagedAndroidViewView_TextAlignment;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(RepackagedAndroidViewView_TextAlignment)


#line 2485
@implementation RepackagedAndroidViewView_ScrollIndicators

+ (IOSObjectArray *)__annotations {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[JavaLangAnnotationRetention alloc] initWithValue:JavaLangAnnotationRetentionPolicyEnum_get_SOURCE()] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcClassInfo _RepackagedAndroidViewView_ScrollIndicators = { 2, "ScrollIndicators", "repackaged.android.view", "View", 0x2609, 0, NULL, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_RepackagedAndroidViewView_ScrollIndicators;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(RepackagedAndroidViewView_ScrollIndicators)


#line 2982
@implementation RepackagedAndroidViewView_FindViewFlags

+ (IOSObjectArray *)__annotations {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[JavaLangAnnotationRetention alloc] initWithValue:JavaLangAnnotationRetentionPolicyEnum_get_SOURCE()] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcClassInfo _RepackagedAndroidViewView_FindViewFlags = { 2, "FindViewFlags", "repackaged.android.view", "View", 0x2609, 0, NULL, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_RepackagedAndroidViewView_FindViewFlags;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(RepackagedAndroidViewView_FindViewFlags)


#line 3132
@implementation RepackagedAndroidViewView_TransformationInfo

- (instancetype)init {
  RepackagedAndroidViewView_TransformationInfo_init(self);
  return self;
}

+ (IOSObjectArray *)__annotations_mAlpha_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[RepackagedAndroidViewViewDebug_ExportedProperty alloc] initWithCategory:@"" withDeepExport:false withFlagMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withFormatToHexString:false withHasAdjacentMapping:false withIndexMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withPrefix:@"" withResolveId:false] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", NULL, NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "mMatrix_", NULL, 0x12, "Lrepackaged.android.graphics.Matrix;", NULL, NULL,  },
    { "mInverseMatrix_", NULL, 0x2, "Lrepackaged.android.graphics.Matrix;", NULL, NULL,  },
    { "mAlpha_", NULL, 0x0, "F", NULL, NULL,  },
    { "mTransitionAlpha_", NULL, 0x0, "F", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _RepackagedAndroidViewView_TransformationInfo = { 2, "TransformationInfo", "repackaged.android.view", "View", 0x8, 1, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_RepackagedAndroidViewView_TransformationInfo;
}

@end

void RepackagedAndroidViewView_TransformationInfo_init(RepackagedAndroidViewView_TransformationInfo *self) {
  (void) NSObject_init(self);
  self->mMatrix_ = new_RepackagedAndroidGraphicsMatrix_init();
  self->mAlpha_ =
#line 3156
  1.0f;
  self->mTransitionAlpha_ =
#line 3163
  1.0f;
}

RepackagedAndroidViewView_TransformationInfo *new_RepackagedAndroidViewView_TransformationInfo_init() {
  RepackagedAndroidViewView_TransformationInfo *self = [RepackagedAndroidViewView_TransformationInfo alloc];
  RepackagedAndroidViewView_TransformationInfo_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RepackagedAndroidViewView_TransformationInfo)


#line 3387
@implementation RepackagedAndroidViewView_TintInfo

- (instancetype)init {
  RepackagedAndroidViewView_TintInfo_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", NULL, NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "mTintList_", NULL, 0x0, "Lrepackaged.android.content.res.ColorStateList;", NULL, NULL,  },
    { "mTintMode_", NULL, 0x0, "Lrepackaged.android.graphics.PorterDuff$Mode;", NULL, NULL,  },
    { "mHasTintMode_", NULL, 0x0, "Z", NULL, NULL,  },
    { "mHasTintList_", NULL, 0x0, "Z", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _RepackagedAndroidViewView_TintInfo = { 2, "TintInfo", "repackaged.android.view", "View", 0x8, 1, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_RepackagedAndroidViewView_TintInfo;
}

@end

void RepackagedAndroidViewView_TintInfo_init(RepackagedAndroidViewView_TintInfo *self) {
  (void) NSObject_init(self);
}

RepackagedAndroidViewView_TintInfo *new_RepackagedAndroidViewView_TintInfo_init() {
  RepackagedAndroidViewView_TintInfo *self = [RepackagedAndroidViewView_TintInfo alloc];
  RepackagedAndroidViewView_TintInfo_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RepackagedAndroidViewView_TintInfo)


#line 3394
@implementation RepackagedAndroidViewView_ForegroundInfo

- (instancetype)init {
  RepackagedAndroidViewView_ForegroundInfo_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", NULL, NULL, 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "mDrawable_", NULL, 0x2, "Lrepackaged.android.graphics.drawable.Drawable;", NULL, NULL,  },
    { "mTintInfo_", NULL, 0x2, "Lrepackaged.android.view.View$TintInfo;", NULL, NULL,  },
    { "mGravity_", NULL, 0x2, "I", NULL, NULL,  },
    { "mInsidePadding_", NULL, 0x2, "Z", NULL, NULL,  },
    { "mBoundsChanged_", NULL, 0x2, "Z", NULL, NULL,  },
    { "mSelfBounds_", NULL, 0x12, "Lrepackaged.android.graphics.Rect;", NULL, NULL,  },
    { "mOverlayBounds_", NULL, 0x12, "Lrepackaged.android.graphics.Rect;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _RepackagedAndroidViewView_ForegroundInfo = { 2, "ForegroundInfo", "repackaged.android.view", "View", 0xa, 1, methods, 7, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_RepackagedAndroidViewView_ForegroundInfo;
}

@end

void RepackagedAndroidViewView_ForegroundInfo_init(RepackagedAndroidViewView_ForegroundInfo *self) {
  (void) NSObject_init(self);
  self->mGravity_ =
#line 3397
  RepackagedAndroidViewGravity_FILL;
  self->mInsidePadding_ = YES;
  self->mBoundsChanged_ = YES;
  self->mSelfBounds_ = new_RepackagedAndroidGraphicsRect_init();
  self->mOverlayBounds_ = new_RepackagedAndroidGraphicsRect_init();
}

RepackagedAndroidViewView_ForegroundInfo *new_RepackagedAndroidViewView_ForegroundInfo_init() {
  RepackagedAndroidViewView_ForegroundInfo *self = [RepackagedAndroidViewView_ForegroundInfo alloc];
  RepackagedAndroidViewView_ForegroundInfo_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RepackagedAndroidViewView_ForegroundInfo)


#line 3404
@implementation RepackagedAndroidViewView_ListenerInfo

- (instancetype)init {
  RepackagedAndroidViewView_ListenerInfo_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", NULL, NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "mOnFocusChangeListener_", NULL, 0x4, "Lrepackaged.android.view.View$OnFocusChangeListener;", NULL, NULL,  },
    { "mOnLayoutChangeListeners_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lrepackaged/android/view/View$OnLayoutChangeListener;>;",  },
    { "mOnScrollChangeListener_", NULL, 0x4, "Lrepackaged.android.view.View$OnScrollChangeListener;", NULL, NULL,  },
    { "mOnAttachStateChangeListeners_", NULL, 0x2, "Ljava.util.concurrent.CopyOnWriteArrayList;", NULL, "Ljava/util/concurrent/CopyOnWriteArrayList<Lrepackaged/android/view/View$OnAttachStateChangeListener;>;",  },
    { "mOnClickListener_", NULL, 0x1, "Lrepackaged.android.view.View$OnClickListener;", NULL, NULL,  },
    { "mOnLongClickListener_", NULL, 0x4, "Lrepackaged.android.view.View$OnLongClickListener;", NULL, NULL,  },
    { "mOnContextClickListener_", NULL, 0x4, "Lrepackaged.android.view.View$OnContextClickListener;", NULL, NULL,  },
    { "mOnCreateContextMenuListener_", NULL, 0x4, "Lrepackaged.android.view.View$OnCreateContextMenuListener;", NULL, NULL,  },
    { "mOnKeyListener_", NULL, 0x2, "Lrepackaged.android.view.View$OnKeyListener;", NULL, NULL,  },
    { "mOnTouchListener_", NULL, 0x2, "Lrepackaged.android.view.View$OnTouchListener;", NULL, NULL,  },
    { "mOnHoverListener_", NULL, 0x2, "Lrepackaged.android.view.View$OnHoverListener;", NULL, NULL,  },
    { "mOnGenericMotionListener_", NULL, 0x2, "Lrepackaged.android.view.View$OnGenericMotionListener;", NULL, NULL,  },
    { "mOnDragListener_", NULL, 0x2, "Lrepackaged.android.view.View$OnDragListener;", NULL, NULL,  },
    { "mOnSystemUiVisibilityChangeListener_", NULL, 0x2, "Lrepackaged.android.view.View$OnSystemUiVisibilityChangeListener;", NULL, NULL,  },
    { "mOnApplyWindowInsetsListener_", NULL, 0x0, "Lrepackaged.android.view.View$OnApplyWindowInsetsListener;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _RepackagedAndroidViewView_ListenerInfo = { 2, "ListenerInfo", "repackaged.android.view", "View", 0x8, 1, methods, 15, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_RepackagedAndroidViewView_ListenerInfo;
}

@end

void RepackagedAndroidViewView_ListenerInfo_init(RepackagedAndroidViewView_ListenerInfo *self) {
  (void) NSObject_init(self);
}

RepackagedAndroidViewView_ListenerInfo *new_RepackagedAndroidViewView_ListenerInfo_init() {
  RepackagedAndroidViewView_ListenerInfo *self = [RepackagedAndroidViewView_ListenerInfo alloc];
  RepackagedAndroidViewView_ListenerInfo_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RepackagedAndroidViewView_ListenerInfo)


#line 21334
@implementation RepackagedAndroidViewView_OnClickListener

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "onClickWithRepackagedAndroidViewView:", "onClick", "V", 0x401, NULL, NULL },
  };
  static const J2ObjcClassInfo _RepackagedAndroidViewView_OnClickListener = { 2, "OnClickListener", "repackaged.android.view", "View", 0x609, 1, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_RepackagedAndroidViewView_OnClickListener;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(RepackagedAndroidViewView_OnClickListener)


#line 4434
@implementation RepackagedAndroidViewView_DeclaredOnClickListener


#line 4440
- (instancetype)initWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)hostView
                                     withNSString:(NSString *)methodName {
  RepackagedAndroidViewView_DeclaredOnClickListener_initWithRepackagedAndroidViewView_withNSString_(self, hostView, methodName);
  return self;
}

- (void)onClickWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)v {
  if (mMethod_ == nil) {
    mMethod_ = RepackagedAndroidViewView_DeclaredOnClickListener_resolveMethodWithRepackagedAndroidContentContext_withNSString_(self, RepackagedAndroidViewView_getContext(nil_chk(mHostView_)), mMethodName_);
  }
  
#line 4451
  @try {
    (void) [((JavaLangReflectMethod *) nil_chk(mMethod_)) invokeWithId:RepackagedAndroidViewView_getContext(nil_chk(mHostView_)) withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ v } count:1 type:NSObject_class_()]];
  }
  @catch (
#line 4453
  JavaLangIllegalAccessException *e) {
    @throw new_JavaLangIllegalStateException_initWithNSString_withJavaLangThrowable_(
#line 4455
    @"Could not execute non-public method for android:onClick", e);
  }
  @catch (
#line 4456
  JavaLangReflectInvocationTargetException *e) {
    @throw new_JavaLangIllegalStateException_initWithNSString_withJavaLangThrowable_(
#line 4458
    @"Could not execute method for android:onClick", e);
  }
}


#line 4463
- (JavaLangReflectMethod *)resolveMethodWithRepackagedAndroidContentContext:(id<RepackagedAndroidContentContext>)context
                                                               withNSString:(NSString *)name {
  return RepackagedAndroidViewView_DeclaredOnClickListener_resolveMethodWithRepackagedAndroidContentContext_withNSString_(self, context, name);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithRepackagedAndroidViewView:withNSString:", "DeclaredOnClickListener", NULL, 0x1, NULL, NULL },
    { "onClickWithRepackagedAndroidViewView:", "onClick", "V", 0x1, NULL, NULL },
    { "resolveMethodWithRepackagedAndroidContentContext:withNSString:", "resolveMethod", "Ljava.lang.reflect.Method;", 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "mHostView_", NULL, 0x12, "Lrepackaged.android.view.View;", NULL, NULL,  },
    { "mMethodName_", NULL, 0x12, "Ljava.lang.String;", NULL, NULL,  },
    { "mMethod_", NULL, 0x2, "Ljava.lang.reflect.Method;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _RepackagedAndroidViewView_DeclaredOnClickListener = { 2, "DeclaredOnClickListener", "repackaged.android.view", "View", 0xa, 3, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_RepackagedAndroidViewView_DeclaredOnClickListener;
}

@end


#line 4440
void RepackagedAndroidViewView_DeclaredOnClickListener_initWithRepackagedAndroidViewView_withNSString_(RepackagedAndroidViewView_DeclaredOnClickListener *self, RepackagedAndroidViewView *hostView, NSString *methodName) {
  (void) NSObject_init(self);
  
#line 4441
  self->mHostView_ = hostView;
  self->mMethodName_ = methodName;
}


#line 4440
RepackagedAndroidViewView_DeclaredOnClickListener *new_RepackagedAndroidViewView_DeclaredOnClickListener_initWithRepackagedAndroidViewView_withNSString_(RepackagedAndroidViewView *hostView, NSString *methodName) {
  RepackagedAndroidViewView_DeclaredOnClickListener *self = [RepackagedAndroidViewView_DeclaredOnClickListener alloc];
  RepackagedAndroidViewView_DeclaredOnClickListener_initWithRepackagedAndroidViewView_withNSString_(self, hostView, methodName);
  return self;
}


#line 4463
JavaLangReflectMethod *RepackagedAndroidViewView_DeclaredOnClickListener_resolveMethodWithRepackagedAndroidContentContext_withNSString_(RepackagedAndroidViewView_DeclaredOnClickListener *self, id<RepackagedAndroidContentContext> context, NSString *name) {
  while (context != nil) {
    @try {
      if (![((id<RepackagedAndroidContentContext>) nil_chk(context)) isRestricted]) {
        return [[context getClass] getMethod:self->mMethodName_ parameterTypes:[IOSObjectArray newArrayWithObjects:(id[]){ RepackagedAndroidViewView_class_() } count:1 type:IOSClass_class_()]];
      }
    }
    @catch (
#line 4469
    JavaLangNoSuchMethodException *e) {
    }
    
#line 4473
    if ([context isKindOfClass:[RepackagedAndroidContentContextWrapper class]]) {
      context = [((RepackagedAndroidContentContextWrapper *) nil_chk(((RepackagedAndroidContentContextWrapper *) check_class_cast(context, [RepackagedAndroidContentContextWrapper class])))) getBaseContext];
    }
    else {
      context = nil;
    }
  }
  
#line 4481
  jint id_ = [((RepackagedAndroidViewView *) nil_chk(self->mHostView_)) getId];
  NSString *idText = id_ == RepackagedAndroidViewView_NO_ID ? @"" : JreStrcat("$$C", @" with id '",
#line 4483
  [((RepackagedAndroidContentResResources *) nil_chk([((id<RepackagedAndroidContentContext>) nil_chk(RepackagedAndroidViewView_getContext(self->mHostView_))) getResources])) getResourceEntryNameWithInt:id_], '\'');
  @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$$$@$", @"Could not find method ", self->mMethodName_, @"(View) in a parent or ancestor Context for android:onClick attribute defined on view ",
#line 4486
  [self->mHostView_ getClass], idText));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RepackagedAndroidViewView_DeclaredOnClickListener)


#line 10765
@implementation RepackagedAndroidViewView_OnScrollChangeListener

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "onScrollChangeWithRepackagedAndroidViewView:withInt:withInt:withInt:withInt:", "onScrollChange", "V", 0x401, NULL, NULL },
  };
  static const J2ObjcClassInfo _RepackagedAndroidViewView_OnScrollChangeListener = { 2, "OnScrollChangeListener", "repackaged.android.view", "View", 0x609, 1, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_RepackagedAndroidViewView_OnScrollChangeListener;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(RepackagedAndroidViewView_OnScrollChangeListener)


#line 10782
@implementation RepackagedAndroidViewView_OnLayoutChangeListener

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "onLayoutChangeWithRepackagedAndroidViewView:withInt:withInt:withInt:withInt:withInt:withInt:withInt:withInt:", "onLayoutChange", "V", 0x401, NULL, NULL },
  };
  static const J2ObjcClassInfo _RepackagedAndroidViewView_OnLayoutChangeListener = { 2, "OnLayoutChangeListener", "repackaged.android.view", "View", 0x609, 1, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_RepackagedAndroidViewView_OnLayoutChangeListener;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(RepackagedAndroidViewView_OnLayoutChangeListener)


#line 19462
@implementation RepackagedAndroidViewView_DragShadowBuilder


#line 19471
- (instancetype)initWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)view {
  RepackagedAndroidViewView_DragShadowBuilder_initWithRepackagedAndroidViewView_(self, view);
  return self;
}


#line 19483
- (instancetype)init {
  RepackagedAndroidViewView_DragShadowBuilder_init(self);
  return self;
}


#line 19498
- (RepackagedAndroidViewView *)getView {
  return [((JavaLangRefWeakReference *) nil_chk(mView_)) get];
}


#line 19522
- (void)onProvideShadowMetricsWithRepackagedAndroidGraphicsPoint:(RepackagedAndroidGraphicsPoint *)shadowSize
                              withRepackagedAndroidGraphicsPoint:(RepackagedAndroidGraphicsPoint *)shadowTouchPoint {
  RepackagedAndroidViewView *view = [((JavaLangRefWeakReference *) nil_chk(mView_)) get];
  if (view != nil) {
    [((RepackagedAndroidGraphicsPoint *) nil_chk(shadowSize)) setWithInt:RepackagedAndroidViewView_getWidth(view) withInt:RepackagedAndroidViewView_getHeight(view)];
    [((RepackagedAndroidGraphicsPoint *) nil_chk(shadowTouchPoint)) setWithInt:shadowSize->x_ / 2 withInt:shadowSize->y_ / 2];
  }
  else {
    
#line 19528
    RepackagedAndroidUtilLog_eWithNSString_withNSString_(RepackagedAndroidViewView_get_VIEW_LOG_TAG_(), @"Asked for drag thumb metrics but no view");
  }
}


#line 19539
- (void)onDrawShadowWithRepackagedAndroidGraphicsCanvas:(RepackagedAndroidGraphicsCanvas *)canvas {
  RepackagedAndroidViewView *view = [((JavaLangRefWeakReference *) nil_chk(mView_)) get];
  if (view != nil) {
    [view drawWithRepackagedAndroidGraphicsCanvas:canvas];
  }
  else {
    
#line 19544
    RepackagedAndroidUtilLog_eWithNSString_withNSString_(RepackagedAndroidViewView_get_VIEW_LOG_TAG_(), @"Asked to draw drag shadow but no view");
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithRepackagedAndroidViewView:", "DragShadowBuilder", NULL, 0x1, NULL, NULL },
    { "init", "DragShadowBuilder", NULL, 0x1, NULL, NULL },
    { "getView", NULL, "Lrepackaged.android.view.View;", 0x11, NULL, NULL },
    { "onProvideShadowMetricsWithRepackagedAndroidGraphicsPoint:withRepackagedAndroidGraphicsPoint:", "onProvideShadowMetrics", "V", 0x1, NULL, NULL },
    { "onDrawShadowWithRepackagedAndroidGraphicsCanvas:", "onDrawShadow", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "mView_", NULL, 0x12, "Ljava.lang.ref.WeakReference;", NULL, "Ljava/lang/ref/WeakReference<Lrepackaged/android/view/View;>;",  },
  };
  static const J2ObjcClassInfo _RepackagedAndroidViewView_DragShadowBuilder = { 2, "DragShadowBuilder", "repackaged.android.view", "View", 0x9, 5, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_RepackagedAndroidViewView_DragShadowBuilder;
}

@end


#line 19471
void RepackagedAndroidViewView_DragShadowBuilder_initWithRepackagedAndroidViewView_(RepackagedAndroidViewView_DragShadowBuilder *self, RepackagedAndroidViewView *view) {
  (void) NSObject_init(self);
  
#line 19472
  self->mView_ = new_JavaLangRefWeakReference_initWithId_(view);
}


#line 19471
RepackagedAndroidViewView_DragShadowBuilder *new_RepackagedAndroidViewView_DragShadowBuilder_initWithRepackagedAndroidViewView_(RepackagedAndroidViewView *view) {
  RepackagedAndroidViewView_DragShadowBuilder *self = [RepackagedAndroidViewView_DragShadowBuilder alloc];
  RepackagedAndroidViewView_DragShadowBuilder_initWithRepackagedAndroidViewView_(self, view);
  return self;
}


#line 19483
void RepackagedAndroidViewView_DragShadowBuilder_init(RepackagedAndroidViewView_DragShadowBuilder *self) {
  (void) NSObject_init(self);
  
#line 19484
  self->mView_ = new_JavaLangRefWeakReference_initWithId_(nil);
}


#line 19483
RepackagedAndroidViewView_DragShadowBuilder *new_RepackagedAndroidViewView_DragShadowBuilder_init() {
  RepackagedAndroidViewView_DragShadowBuilder *self = [RepackagedAndroidViewView_DragShadowBuilder alloc];
  RepackagedAndroidViewView_DragShadowBuilder_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RepackagedAndroidViewView_DragShadowBuilder)


#line 20989
@implementation RepackagedAndroidViewView_MeasureSpec


#line 21033
+ (jint)makeMeasureSpecWithInt:(jint)size
                       withInt:(jint)mode {
  return RepackagedAndroidViewView_MeasureSpec_makeMeasureSpecWithInt_withInt_(size, mode);
}


#line 21047
+ (jint)makeSafeMeasureSpecWithInt:(jint)size
                           withInt:(jint)mode {
  return RepackagedAndroidViewView_MeasureSpec_makeSafeMeasureSpecWithInt_withInt_(size, mode);
}


#line 21062
+ (jint)getModeWithInt:(jint)measureSpec {
  return RepackagedAndroidViewView_MeasureSpec_getModeWithInt_(measureSpec);
}


#line 21072
+ (jint)getSizeWithInt:(jint)measureSpec {
  return RepackagedAndroidViewView_MeasureSpec_getSizeWithInt_(measureSpec);
}

+ (jint)adjustWithInt:(jint)measureSpec
              withInt:(jint)delta {
  return RepackagedAndroidViewView_MeasureSpec_adjustWithInt_withInt_(measureSpec, delta);
}


#line 21099
+ (NSString *)toStringWithInt:(jint)measureSpec {
  return RepackagedAndroidViewView_MeasureSpec_toStringWithInt_(measureSpec);
}

- (instancetype)init {
  RepackagedAndroidViewView_MeasureSpec_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "makeMeasureSpecWithInt:withInt:", "makeMeasureSpec", "I", 0x9, NULL, NULL },
    { "makeSafeMeasureSpecWithInt:withInt:", "makeSafeMeasureSpec", "I", 0x9, NULL, NULL },
    { "getModeWithInt:", "getMode", "I", 0x9, NULL, NULL },
    { "getSizeWithInt:", "getSize", "I", 0x9, NULL, NULL },
    { "adjustWithInt:withInt:", "adjust", "I", 0x8, NULL, NULL },
    { "toStringWithInt:", "toString", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "MODE_SHIFT_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_MeasureSpec_MODE_SHIFT },
    { "MODE_MASK_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_MeasureSpec_MODE_MASK },
    { "UNSPECIFIED_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_MeasureSpec_UNSPECIFIED },
    { "EXACTLY_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_MeasureSpec_EXACTLY },
    { "AT_MOST_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_MeasureSpec_AT_MOST },
  };
  static const J2ObjcClassInfo _RepackagedAndroidViewView_MeasureSpec = { 2, "MeasureSpec", "repackaged.android.view", "View", 0x9, 7, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_RepackagedAndroidViewView_MeasureSpec;
}

@end


#line 21033
jint RepackagedAndroidViewView_MeasureSpec_makeMeasureSpecWithInt_withInt_(jint size, jint mode) {
  RepackagedAndroidViewView_MeasureSpec_initialize();
  
#line 21034
  if (RepackagedAndroidViewView_get_sUseBrokenMakeMeasureSpec_()) {
    return size + mode;
  }
  else {
    
#line 21037
    return (size & ~RepackagedAndroidViewView_MeasureSpec_MODE_MASK) | (mode & RepackagedAndroidViewView_MeasureSpec_MODE_MASK);
  }
}

jint RepackagedAndroidViewView_MeasureSpec_makeSafeMeasureSpecWithInt_withInt_(jint size, jint mode) {
  RepackagedAndroidViewView_MeasureSpec_initialize();
  
#line 21048
  if (RepackagedAndroidViewView_get_sUseZeroUnspecifiedMeasureSpec_() && mode == RepackagedAndroidViewView_MeasureSpec_UNSPECIFIED) {
    return 0;
  }
  return RepackagedAndroidViewView_MeasureSpec_makeMeasureSpecWithInt_withInt_(size, mode);
}


#line 21062
jint RepackagedAndroidViewView_MeasureSpec_getModeWithInt_(jint measureSpec) {
  RepackagedAndroidViewView_MeasureSpec_initialize();
  
#line 21063
  return (measureSpec & RepackagedAndroidViewView_MeasureSpec_MODE_MASK);
}


#line 21072
jint RepackagedAndroidViewView_MeasureSpec_getSizeWithInt_(jint measureSpec) {
  RepackagedAndroidViewView_MeasureSpec_initialize();
  
#line 21073
  return (measureSpec & ~RepackagedAndroidViewView_MeasureSpec_MODE_MASK);
}


#line 21076
jint RepackagedAndroidViewView_MeasureSpec_adjustWithInt_withInt_(jint measureSpec, jint delta) {
  RepackagedAndroidViewView_MeasureSpec_initialize();
  
#line 21077
  jint mode = RepackagedAndroidViewView_MeasureSpec_getModeWithInt_(measureSpec);
  jint size = RepackagedAndroidViewView_MeasureSpec_getSizeWithInt_(measureSpec);
  if (mode == RepackagedAndroidViewView_MeasureSpec_UNSPECIFIED) {
    
#line 21081
    return RepackagedAndroidViewView_MeasureSpec_makeMeasureSpecWithInt_withInt_(size, RepackagedAndroidViewView_MeasureSpec_UNSPECIFIED);
  }
  size += delta;
  if (size < 0) {
    RepackagedAndroidUtilLog_eWithNSString_withNSString_(RepackagedAndroidViewView_get_VIEW_LOG_TAG_(), JreStrcat("$I$$$I", @"MeasureSpec.adjust: new size would be negative! (", size, @") spec: ", RepackagedAndroidViewView_MeasureSpec_toStringWithInt_(
#line 21086
    measureSpec), @" delta: ", delta));
    size = 0;
  }
  return RepackagedAndroidViewView_MeasureSpec_makeMeasureSpecWithInt_withInt_(size, mode);
}


#line 21099
NSString *RepackagedAndroidViewView_MeasureSpec_toStringWithInt_(jint measureSpec) {
  RepackagedAndroidViewView_MeasureSpec_initialize();
  
#line 21100
  jint mode = RepackagedAndroidViewView_MeasureSpec_getModeWithInt_(measureSpec);
  jint size = RepackagedAndroidViewView_MeasureSpec_getSizeWithInt_(measureSpec);
  
#line 21103
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_initWithNSString_(@"MeasureSpec: ");
  
#line 21105
  if (mode == RepackagedAndroidViewView_MeasureSpec_UNSPECIFIED)
#line 21106
  (void) [sb appendWithNSString:@"UNSPECIFIED "];
  else if (mode == RepackagedAndroidViewView_MeasureSpec_EXACTLY)
#line 21108
  (void) [sb appendWithNSString:@"EXACTLY "];
  else if (mode == RepackagedAndroidViewView_MeasureSpec_AT_MOST)
#line 21110
  (void) [sb appendWithNSString:@"AT_MOST "];
  else
#line 21112
  (void) [((JavaLangStringBuilder *) nil_chk([sb appendWithInt:mode])) appendWithNSString:@" "];
  
#line 21114
  (void) [sb appendWithInt:size];
  return [sb description];
}

void RepackagedAndroidViewView_MeasureSpec_init(RepackagedAndroidViewView_MeasureSpec *self) {
  (void) NSObject_init(self);
}

RepackagedAndroidViewView_MeasureSpec *new_RepackagedAndroidViewView_MeasureSpec_init() {
  RepackagedAndroidViewView_MeasureSpec *self = [RepackagedAndroidViewView_MeasureSpec alloc];
  RepackagedAndroidViewView_MeasureSpec_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RepackagedAndroidViewView_MeasureSpec)


#line 21119
@implementation RepackagedAndroidViewView_CheckForLongPress


#line 21123
- (void)run {
  if ([this$0_ isPressed] && (this$0_->mParent_ != nil) &&
#line 21125
  mOriginalWindowAttachCount_ == this$0_->mWindowAttachCount_) {
    if ([this$0_ performLongClick]) {
      this$0_->mHasPerformedLongPress_ = YES;
    }
  }
}


#line 21132
- (void)rememberWindowAttachCount {
  mOriginalWindowAttachCount_ = this$0_->mWindowAttachCount_;
}

- (instancetype)initWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)outer$ {
  RepackagedAndroidViewView_CheckForLongPress_initWithRepackagedAndroidViewView_(self, outer$);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "run", NULL, "V", 0x1, NULL, NULL },
    { "rememberWindowAttachCount", NULL, "V", 0x1, NULL, NULL },
    { "initWithRepackagedAndroidViewView:", "init", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lrepackaged.android.view.View;", NULL, NULL,  },
    { "mOriginalWindowAttachCount_", NULL, 0x2, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _RepackagedAndroidViewView_CheckForLongPress = { 2, "CheckForLongPress", "repackaged.android.view", "View", 0x12, 3, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_RepackagedAndroidViewView_CheckForLongPress;
}

@end

void RepackagedAndroidViewView_CheckForLongPress_initWithRepackagedAndroidViewView_(RepackagedAndroidViewView_CheckForLongPress *self, RepackagedAndroidViewView *outer$) {
  self->this$0_ = outer$;
  (void) NSObject_init(self);
}

RepackagedAndroidViewView_CheckForLongPress *new_RepackagedAndroidViewView_CheckForLongPress_initWithRepackagedAndroidViewView_(RepackagedAndroidViewView *outer$) {
  RepackagedAndroidViewView_CheckForLongPress *self = [RepackagedAndroidViewView_CheckForLongPress alloc];
  RepackagedAndroidViewView_CheckForLongPress_initWithRepackagedAndroidViewView_(self, outer$);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RepackagedAndroidViewView_CheckForLongPress)


#line 21137
@implementation RepackagedAndroidViewView_CheckForTap


#line 21142
- (void)run {
  this$0_->mPrivateFlags_ &= ~RepackagedAndroidViewView_PFLAG_PREPRESSED;
  RepackagedAndroidViewView_setPressedWithBoolean_withFloat_withFloat_(this$0_, YES, x_, y_);
  RepackagedAndroidViewView_checkForLongClickWithInt_(this$0_, RepackagedAndroidViewViewConfiguration_getTapTimeout());
}

- (instancetype)initWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)outer$ {
  RepackagedAndroidViewView_CheckForTap_initWithRepackagedAndroidViewView_(self, outer$);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "run", NULL, "V", 0x1, NULL, NULL },
    { "initWithRepackagedAndroidViewView:", "init", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lrepackaged.android.view.View;", NULL, NULL,  },
    { "x_", NULL, 0x1, "F", NULL, NULL,  },
    { "y_", NULL, 0x1, "F", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _RepackagedAndroidViewView_CheckForTap = { 2, "CheckForTap", "repackaged.android.view", "View", 0x12, 2, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_RepackagedAndroidViewView_CheckForTap;
}

@end

void RepackagedAndroidViewView_CheckForTap_initWithRepackagedAndroidViewView_(RepackagedAndroidViewView_CheckForTap *self, RepackagedAndroidViewView *outer$) {
  self->this$0_ = outer$;
  (void) NSObject_init(self);
}

RepackagedAndroidViewView_CheckForTap *new_RepackagedAndroidViewView_CheckForTap_initWithRepackagedAndroidViewView_(RepackagedAndroidViewView *outer$) {
  RepackagedAndroidViewView_CheckForTap *self = [RepackagedAndroidViewView_CheckForTap alloc];
  RepackagedAndroidViewView_CheckForTap_initWithRepackagedAndroidViewView_(self, outer$);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RepackagedAndroidViewView_CheckForTap)


#line 21149
@implementation RepackagedAndroidViewView_PerformClick

- (void)run {
  [this$0_ performClick];
}

- (instancetype)initWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)outer$ {
  RepackagedAndroidViewView_PerformClick_initWithRepackagedAndroidViewView_(self, outer$);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "run", NULL, "V", 0x1, NULL, NULL },
    { "initWithRepackagedAndroidViewView:", "init", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lrepackaged.android.view.View;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _RepackagedAndroidViewView_PerformClick = { 2, "PerformClick", "repackaged.android.view", "View", 0x12, 2, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_RepackagedAndroidViewView_PerformClick;
}

@end

void RepackagedAndroidViewView_PerformClick_initWithRepackagedAndroidViewView_(RepackagedAndroidViewView_PerformClick *self, RepackagedAndroidViewView *outer$) {
  self->this$0_ = outer$;
  (void) NSObject_init(self);
}

RepackagedAndroidViewView_PerformClick *new_RepackagedAndroidViewView_PerformClick_initWithRepackagedAndroidViewView_(RepackagedAndroidViewView *outer$) {
  RepackagedAndroidViewView_PerformClick *self = [RepackagedAndroidViewView_PerformClick alloc];
  RepackagedAndroidViewView_PerformClick_initWithRepackagedAndroidViewView_(self, outer$);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RepackagedAndroidViewView_PerformClick)


#line 21204
@implementation RepackagedAndroidViewView_OnKeyListener

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "onKeyWithRepackagedAndroidViewView:withInt:withRepackagedAndroidViewKeyEvent:", "onKey", "Z", 0x401, NULL, NULL },
  };
  static const J2ObjcClassInfo _RepackagedAndroidViewView_OnKeyListener = { 2, "OnKeyListener", "repackaged.android.view", "View", 0x609, 1, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_RepackagedAndroidViewView_OnKeyListener;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(RepackagedAndroidViewView_OnKeyListener)


#line 21228
@implementation RepackagedAndroidViewView_OnTouchListener

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "onTouchWithRepackagedAndroidViewView:withRepackagedAndroidViewMotionEvent:", "onTouch", "Z", 0x401, NULL, NULL },
  };
  static const J2ObjcClassInfo _RepackagedAndroidViewView_OnTouchListener = { 2, "OnTouchListener", "repackaged.android.view", "View", 0x609, 1, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_RepackagedAndroidViewView_OnTouchListener;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(RepackagedAndroidViewView_OnTouchListener)


#line 21246
@implementation RepackagedAndroidViewView_OnHoverListener

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "onHoverWithRepackagedAndroidViewView:withRepackagedAndroidViewMotionEvent:", "onHover", "Z", 0x401, NULL, NULL },
  };
  static const J2ObjcClassInfo _RepackagedAndroidViewView_OnHoverListener = { 2, "OnHoverListener", "repackaged.android.view", "View", 0x609, 1, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_RepackagedAndroidViewView_OnHoverListener;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(RepackagedAndroidViewView_OnHoverListener)


#line 21264
@implementation RepackagedAndroidViewView_OnGenericMotionListener

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "onGenericMotionWithRepackagedAndroidViewView:withRepackagedAndroidViewMotionEvent:", "onGenericMotion", "Z", 0x401, NULL, NULL },
  };
  static const J2ObjcClassInfo _RepackagedAndroidViewView_OnGenericMotionListener = { 2, "OnGenericMotionListener", "repackaged.android.view", "View", 0x609, 1, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_RepackagedAndroidViewView_OnGenericMotionListener;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(RepackagedAndroidViewView_OnGenericMotionListener)


#line 21280
@implementation RepackagedAndroidViewView_OnLongClickListener

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "onLongClickWithRepackagedAndroidViewView:", "onLongClick", "Z", 0x401, NULL, NULL },
  };
  static const J2ObjcClassInfo _RepackagedAndroidViewView_OnLongClickListener = { 2, "OnLongClickListener", "repackaged.android.view", "View", 0x609, 1, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_RepackagedAndroidViewView_OnLongClickListener;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(RepackagedAndroidViewView_OnLongClickListener)


#line 21303
@implementation RepackagedAndroidViewView_OnDragListener

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "onDragWithRepackagedAndroidViewView:withRepackagedAndroidViewDragEvent:", "onDrag", "Z", 0x401, NULL, NULL },
  };
  static const J2ObjcClassInfo _RepackagedAndroidViewView_OnDragListener = { 2, "OnDragListener", "repackaged.android.view", "View", 0x609, 1, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_RepackagedAndroidViewView_OnDragListener;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(RepackagedAndroidViewView_OnDragListener)


#line 21321
@implementation RepackagedAndroidViewView_OnFocusChangeListener

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "onFocusChangeWithRepackagedAndroidViewView:withBoolean:", "onFocusChange", "V", 0x401, NULL, NULL },
  };
  static const J2ObjcClassInfo _RepackagedAndroidViewView_OnFocusChangeListener = { 2, "OnFocusChangeListener", "repackaged.android.view", "View", 0x609, 1, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_RepackagedAndroidViewView_OnFocusChangeListener;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(RepackagedAndroidViewView_OnFocusChangeListener)


#line 21346
@implementation RepackagedAndroidViewView_OnContextClickListener

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "onContextClickWithRepackagedAndroidViewView:", "onContextClick", "Z", 0x401, NULL, NULL },
  };
  static const J2ObjcClassInfo _RepackagedAndroidViewView_OnContextClickListener = { 2, "OnContextClickListener", "repackaged.android.view", "View", 0x609, 1, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_RepackagedAndroidViewView_OnContextClickListener;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(RepackagedAndroidViewView_OnContextClickListener)

@implementation RepackagedAndroidViewView_OnCreateContextMenuListener

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "onCreateContextMenuWithRepackagedAndroidViewContextMenu:withRepackagedAndroidViewView:withRepackagedAndroidViewContextMenu_ContextMenuInfo:", "onCreateContextMenu", "V", 0x401, NULL, NULL },
  };
  static const J2ObjcClassInfo _RepackagedAndroidViewView_OnCreateContextMenuListener = { 2, "OnCreateContextMenuListener", "repackaged.android.view", "View", 0x609, 1, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_RepackagedAndroidViewView_OnCreateContextMenuListener;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(RepackagedAndroidViewView_OnCreateContextMenuListener)


#line 21381
@implementation RepackagedAndroidViewView_OnSystemUiVisibilityChangeListener

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "onSystemUiVisibilityChangeWithInt:", "onSystemUiVisibilityChange", "V", 0x401, NULL, NULL },
  };
  static const J2ObjcClassInfo _RepackagedAndroidViewView_OnSystemUiVisibilityChangeListener = { 2, "OnSystemUiVisibilityChangeListener", "repackaged.android.view", "View", 0x609, 1, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_RepackagedAndroidViewView_OnSystemUiVisibilityChangeListener;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(RepackagedAndroidViewView_OnSystemUiVisibilityChangeListener)


#line 21398
@implementation RepackagedAndroidViewView_OnAttachStateChangeListener

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "onViewAttachedToWindowWithRepackagedAndroidViewView:", "onViewAttachedToWindow", "V", 0x401, NULL, NULL },
    { "onViewDetachedFromWindowWithRepackagedAndroidViewView:", "onViewDetachedFromWindow", "V", 0x401, NULL, NULL },
  };
  static const J2ObjcClassInfo _RepackagedAndroidViewView_OnAttachStateChangeListener = { 2, "OnAttachStateChangeListener", "repackaged.android.view", "View", 0x609, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_RepackagedAndroidViewView_OnAttachStateChangeListener;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(RepackagedAndroidViewView_OnAttachStateChangeListener)


#line 21423
@implementation RepackagedAndroidViewView_OnApplyWindowInsetsListener

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "onApplyWindowInsetsWithRepackagedAndroidViewView:withRepackagedAndroidViewWindowInsets:", "onApplyWindowInsets", "Lrepackaged.android.view.WindowInsets;", 0x401, NULL, NULL },
  };
  static const J2ObjcClassInfo _RepackagedAndroidViewView_OnApplyWindowInsetsListener = { 2, "OnApplyWindowInsetsListener", "repackaged.android.view", "View", 0x609, 1, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_RepackagedAndroidViewView_OnApplyWindowInsetsListener;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(RepackagedAndroidViewView_OnApplyWindowInsetsListener)


#line 21436
@implementation RepackagedAndroidViewView_UnsetPressedState

- (void)run {
  [this$0_ setPressedWithBoolean:NO];
}

- (instancetype)initWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)outer$ {
  RepackagedAndroidViewView_UnsetPressedState_initWithRepackagedAndroidViewView_(self, outer$);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "run", NULL, "V", 0x1, NULL, NULL },
    { "initWithRepackagedAndroidViewView:", "init", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lrepackaged.android.view.View;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _RepackagedAndroidViewView_UnsetPressedState = { 2, "UnsetPressedState", "repackaged.android.view", "View", 0x12, 2, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_RepackagedAndroidViewView_UnsetPressedState;
}

@end

void RepackagedAndroidViewView_UnsetPressedState_initWithRepackagedAndroidViewView_(RepackagedAndroidViewView_UnsetPressedState *self, RepackagedAndroidViewView *outer$) {
  self->this$0_ = outer$;
  (void) NSObject_init(self);
}

RepackagedAndroidViewView_UnsetPressedState *new_RepackagedAndroidViewView_UnsetPressedState_initWithRepackagedAndroidViewView_(RepackagedAndroidViewView *outer$) {
  RepackagedAndroidViewView_UnsetPressedState *self = [RepackagedAndroidViewView_UnsetPressedState alloc];
  RepackagedAndroidViewView_UnsetPressedState_initWithRepackagedAndroidViewView_(self, outer$);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RepackagedAndroidViewView_UnsetPressedState)

J2OBJC_INITIALIZED_DEFN(RepackagedAndroidViewView_BaseSavedState)

id<RepackagedAndroidOsParcelable_Creator> RepackagedAndroidViewView_BaseSavedState_CREATOR_;


#line 21447
@implementation RepackagedAndroidViewView_BaseSavedState


#line 21455
- (instancetype)initWithRepackagedAndroidOsParcel:(id<RepackagedAndroidOsParcel>)source {
  RepackagedAndroidViewView_BaseSavedState_initWithRepackagedAndroidOsParcel_(self, source);
  return self;
}


#line 21465
- (instancetype)initWithRepackagedAndroidOsParcelable:(id<RepackagedAndroidOsParcelable>)superState {
  RepackagedAndroidViewView_BaseSavedState_initWithRepackagedAndroidOsParcelable_(self, superState);
  return self;
}

- (void)writeToParcelWithRepackagedAndroidOsParcel:(id<RepackagedAndroidOsParcel>)outArg
                                           withInt:(jint)flags {
  [super writeToParcelWithRepackagedAndroidOsParcel:outArg withInt:flags];
  [((id<RepackagedAndroidOsParcel>) nil_chk(outArg)) writeStringWithNSString:mStartActivityRequestWhoSaved_];
}

+ (void)initialize {
  if (self == [RepackagedAndroidViewView_BaseSavedState class]) {
    RepackagedAndroidViewView_BaseSavedState_CREATOR_ = new_RepackagedAndroidViewView_BaseSavedState_$1_init();
    J2OBJC_SET_INITIALIZED(RepackagedAndroidViewView_BaseSavedState)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithRepackagedAndroidOsParcel:", "BaseSavedState", NULL, 0x1, NULL, NULL },
    { "initWithRepackagedAndroidOsParcelable:", "BaseSavedState", NULL, 0x1, NULL, NULL },
    { "writeToParcelWithRepackagedAndroidOsParcel:withInt:", "writeToParcel", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "mStartActivityRequestWhoSaved_", NULL, 0x0, "Ljava.lang.String;", NULL, NULL,  },
    { "CREATOR_", NULL, 0x19, "Lrepackaged.android.os.Parcelable$Creator;", &RepackagedAndroidViewView_BaseSavedState_CREATOR_, "Lrepackaged/android/os/Parcelable$Creator<Lrepackaged/android/view/View$BaseSavedState;>;",  },
  };
  static const J2ObjcClassInfo _RepackagedAndroidViewView_BaseSavedState = { 2, "BaseSavedState", "repackaged.android.view", "View", 0x9, 3, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_RepackagedAndroidViewView_BaseSavedState;
}

@end


#line 21455
void RepackagedAndroidViewView_BaseSavedState_initWithRepackagedAndroidOsParcel_(RepackagedAndroidViewView_BaseSavedState *self, id<RepackagedAndroidOsParcel> source) {
  (void) RepackagedAndroidViewAbsSavedState_initWithRepackagedAndroidOsParcel_(self, source);
  self->mStartActivityRequestWhoSaved_ = [((id<RepackagedAndroidOsParcel>) nil_chk(source)) readString];
}


#line 21455
RepackagedAndroidViewView_BaseSavedState *new_RepackagedAndroidViewView_BaseSavedState_initWithRepackagedAndroidOsParcel_(id<RepackagedAndroidOsParcel> source) {
  RepackagedAndroidViewView_BaseSavedState *self = [RepackagedAndroidViewView_BaseSavedState alloc];
  RepackagedAndroidViewView_BaseSavedState_initWithRepackagedAndroidOsParcel_(self, source);
  return self;
}


#line 21465
void RepackagedAndroidViewView_BaseSavedState_initWithRepackagedAndroidOsParcelable_(RepackagedAndroidViewView_BaseSavedState *self, id<RepackagedAndroidOsParcelable> superState) {
  (void) RepackagedAndroidViewAbsSavedState_initWithRepackagedAndroidOsParcelable_(self, superState);
}


#line 21465
RepackagedAndroidViewView_BaseSavedState *new_RepackagedAndroidViewView_BaseSavedState_initWithRepackagedAndroidOsParcelable_(id<RepackagedAndroidOsParcelable> superState) {
  RepackagedAndroidViewView_BaseSavedState *self = [RepackagedAndroidViewView_BaseSavedState alloc];
  RepackagedAndroidViewView_BaseSavedState_initWithRepackagedAndroidOsParcelable_(self, superState);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RepackagedAndroidViewView_BaseSavedState)

@implementation RepackagedAndroidViewView_BaseSavedState_$1


#line 21477
- (RepackagedAndroidViewView_BaseSavedState *)createFromParcelWithRepackagedAndroidOsParcel:(id<RepackagedAndroidOsParcel>)inArg {
  return new_RepackagedAndroidViewView_BaseSavedState_initWithRepackagedAndroidOsParcel_(inArg);
}

- (IOSObjectArray *)newArrayWithInt:(jint)size {
  return [IOSObjectArray newArrayWithLength:size type:RepackagedAndroidViewView_BaseSavedState_class_()];
}

- (instancetype)init {
  RepackagedAndroidViewView_BaseSavedState_$1_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "createFromParcelWithRepackagedAndroidOsParcel:", "createFromParcel", "Lrepackaged.android.view.View$BaseSavedState;", 0x1, NULL, NULL },
    { "newArrayWithInt:", "newArray", "[Lrepackaged.android.view.View$BaseSavedState;", 0x1, NULL, NULL },
    { "init", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcClassInfo _RepackagedAndroidViewView_BaseSavedState_$1 = { 2, "", "repackaged.android.view", "View$BaseSavedState", 0x8008, 3, methods, 0, NULL, 0, NULL, 0, NULL, NULL, "Ljava/lang/Object;Lrepackaged/android/os/Parcelable$Creator<Lrepackaged/android/view/View$BaseSavedState;>;" };
  return &_RepackagedAndroidViewView_BaseSavedState_$1;
}

@end

void RepackagedAndroidViewView_BaseSavedState_$1_init(RepackagedAndroidViewView_BaseSavedState_$1 *self) {
  (void) NSObject_init(self);
}

RepackagedAndroidViewView_BaseSavedState_$1 *new_RepackagedAndroidViewView_BaseSavedState_$1_init() {
  RepackagedAndroidViewView_BaseSavedState_$1 *self = [RepackagedAndroidViewView_BaseSavedState_$1 alloc];
  RepackagedAndroidViewView_BaseSavedState_$1_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RepackagedAndroidViewView_BaseSavedState_$1)


#line 21491
@implementation RepackagedAndroidViewView_AttachInfo


#line 21875
- (instancetype)initWithRepackagedAndroidViewIWindowSession:(id<RepackagedAndroidViewIWindowSession>)session
                           withRepackagedAndroidViewIWindow:(id<RepackagedAndroidViewIWindow>)window
                           withRepackagedAndroidViewDisplay:(RepackagedAndroidViewDisplay *)display
                      withRepackagedAndroidViewViewRootImpl:(RepackagedAndroidViewViewRootImpl *)viewRootImpl
                             withRepackagedAndroidOsHandler:(id<RepackagedAndroidOsHandler>)handler
         withRepackagedAndroidViewView_AttachInfo_Callbacks:(id<RepackagedAndroidViewView_AttachInfo_Callbacks>)effectPlayer {
  RepackagedAndroidViewView_AttachInfo_initWithRepackagedAndroidViewIWindowSession_withRepackagedAndroidViewIWindow_withRepackagedAndroidViewDisplay_withRepackagedAndroidViewViewRootImpl_withRepackagedAndroidOsHandler_withRepackagedAndroidViewView_AttachInfo_Callbacks_(self, session, window, display, viewRootImpl, handler, effectPlayer);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithRepackagedAndroidViewIWindowSession:withRepackagedAndroidViewIWindow:withRepackagedAndroidViewDisplay:withRepackagedAndroidViewViewRootImpl:withRepackagedAndroidOsHandler:withRepackagedAndroidViewView_AttachInfo_Callbacks:", "AttachInfo", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "mSession_", NULL, 0x10, "Lrepackaged.android.view.IWindowSession;", NULL, NULL,  },
    { "mWindow_", NULL, 0x10, "Lrepackaged.android.view.IWindow;", NULL, NULL,  },
    { "mWindowToken_", NULL, 0x10, "Lrepackaged.android.os.IBinder;", NULL, NULL,  },
    { "mDisplay_", NULL, 0x10, "Lrepackaged.android.view.Display;", NULL, NULL,  },
    { "mRootCallbacks_", NULL, 0x10, "Lrepackaged.android.view.View$AttachInfo$Callbacks;", NULL, NULL,  },
    { "mIWindowId_", NULL, 0x0, "Lrepackaged.android.view.IWindowId;", NULL, NULL,  },
    { "mWindowId_", NULL, 0x0, "Lrepackaged.android.view.WindowId;", NULL, NULL,  },
    { "mRootView_", NULL, 0x0, "Lrepackaged.android.view.View;", NULL, NULL,  },
    { "mPanelParentWindowToken_", NULL, 0x0, "Lrepackaged.android.os.IBinder;", NULL, NULL,  },
    { "mHardwareAccelerated_", NULL, 0x0, "Z", NULL, NULL,  },
    { "mHardwareAccelerationRequested_", NULL, 0x0, "Z", NULL, NULL,  },
    { "mHardwareRenderer_", NULL, 0x0, "Lrepackaged.android.view.HardwareRenderer;", NULL, NULL,  },
    { "mPendingAnimatingRenderNodes_", NULL, 0x0, "Ljava.util.List;", NULL, "Ljava/util/List<Lrepackaged/android/view/RenderNode;>;",  },
    { "mDisplayState_", NULL, 0x0, "I", NULL, NULL,  },
    { "mApplicationScale_", NULL, 0x0, "F", NULL, NULL,  },
    { "mScalingRequired_", NULL, 0x0, "Z", NULL, NULL,  },
    { "mTurnOffWindowResizeAnim_", NULL, 0x0, "Z", NULL, NULL,  },
    { "mWindowLeft_", NULL, 0x0, "I", NULL, NULL,  },
    { "mWindowTop_", NULL, 0x0, "I", NULL, NULL,  },
    { "mUse32BitDrawingCache_", NULL, 0x0, "Z", NULL, NULL,  },
    { "mOverscanInsets_", NULL, 0x10, "Lrepackaged.android.graphics.Rect;", NULL, NULL,  },
    { "mContentInsets_", NULL, 0x10, "Lrepackaged.android.graphics.Rect;", NULL, NULL,  },
    { "mVisibleInsets_", NULL, 0x10, "Lrepackaged.android.graphics.Rect;", NULL, NULL,  },
    { "mStableInsets_", NULL, 0x10, "Lrepackaged.android.graphics.Rect;", NULL, NULL,  },
    { "mOutsets_", NULL, 0x10, "Lrepackaged.android.graphics.Rect;", NULL, NULL,  },
    { "mGivenInternalInsets_", NULL, 0x10, "Lrepackaged.android.view.ViewTreeObserver$InternalInsetsInfo;", NULL, NULL,  },
    { "mHasNonEmptyGivenInternalInsets_", NULL, 0x0, "Z", NULL, NULL,  },
    { "mScrollContainers_", NULL, 0x10, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lrepackaged/android/view/View;>;",  },
    { "mKeyDispatchState_", NULL, 0x10, "Lrepackaged.android.view.KeyEvent$DispatcherState;", NULL, NULL,  },
    { "mHasWindowFocus_", NULL, 0x0, "Z", NULL, NULL,  },
    { "mWindowVisibility_", NULL, 0x0, "I", NULL, NULL,  },
    { "mDrawingTime_", NULL, 0x0, "J", NULL, NULL,  },
    { "mIgnoreDirtyState_", NULL, 0x0, "Z", NULL, NULL,  },
    { "mSetIgnoreDirtyState_", NULL, 0x0, "Z", NULL, NULL,  },
    { "mInTouchMode_", NULL, 0x0, "Z", NULL, NULL,  },
    { "mUnbufferedDispatchRequested_", NULL, 0x0, "Z", NULL, NULL,  },
    { "mRecomputeGlobalAttributes_", NULL, 0x0, "Z", NULL, NULL,  },
    { "mForceReportNewAttributes_", NULL, 0x0, "Z", NULL, NULL,  },
    { "mKeepScreenOn_", NULL, 0x0, "Z", NULL, NULL,  },
    { "mSystemUiVisibility_", NULL, 0x0, "I", NULL, NULL,  },
    { "mDisabledSystemUiVisibility_", NULL, 0x0, "I", NULL, NULL,  },
    { "mGlobalSystemUiVisibility_", NULL, 0x0, "I", NULL, NULL,  },
    { "mHasSystemUiListeners_", NULL, 0x0, "Z", NULL, NULL,  },
    { "mOverscanRequested_", NULL, 0x0, "Z", NULL, NULL,  },
    { "mViewVisibilityChanged_", NULL, 0x0, "Z", NULL, NULL,  },
    { "mViewScrollChanged_", NULL, 0x0, "Z", NULL, NULL,  },
    { "mHighContrastText_", NULL, 0x0, "Z", NULL, NULL,  },
    { "mTransparentLocation_", NULL, 0x10, "[I", NULL, NULL,  },
    { "mInvalidateChildLocation_", NULL, 0x10, "[I", NULL, NULL,  },
    { "mTmpLocation_", NULL, 0x10, "[I", NULL, NULL,  },
    { "mTmpTransformLocation_", NULL, 0x10, "[F", NULL, NULL,  },
    { "mTreeObserver_", NULL, 0x10, "Lrepackaged.android.view.ViewTreeObserver;", NULL, NULL,  },
    { "mCanvas_", NULL, 0x0, "Lrepackaged.android.graphics.Canvas;", NULL, NULL,  },
    { "mViewRootImpl_", NULL, 0x10, "Lrepackaged.android.view.ViewRootImpl;", NULL, NULL,  },
    { "mHandler_", NULL, 0x10, "Lrepackaged.android.os.Handler;", NULL, NULL,  },
    { "mTmpInvalRect_", NULL, 0x10, "Lrepackaged.android.graphics.Rect;", NULL, NULL,  },
    { "mTmpTransformRect_", NULL, 0x10, "Lrepackaged.android.graphics.RectF;", NULL, NULL,  },
    { "mTmpTransformRect1_", NULL, 0x10, "Lrepackaged.android.graphics.RectF;", NULL, NULL,  },
    { "mTmpRectList_", NULL, 0x10, "Ljava.util.List;", NULL, "Ljava/util/List<Lrepackaged/android/graphics/RectF;>;",  },
    { "mTmpMatrix_", NULL, 0x10, "Lrepackaged.android.graphics.Matrix;", NULL, NULL,  },
    { "mTmpTransformation_", NULL, 0x10, "Lrepackaged.android.view.animation.Transformation;", NULL, NULL,  },
    { "mTmpOutline_", NULL, 0x10, "Lrepackaged.android.graphics.Outline;", NULL, NULL,  },
    { "mTempArrayList_", NULL, 0x10, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lrepackaged/android/view/View;>;",  },
    { "mAccessibilityWindowId_", NULL, 0x0, "I", NULL, NULL,  },
    { "mAccessibilityFetchFlags_", NULL, 0x0, "I", NULL, NULL,  },
    { "mAccessibilityFocusDrawable_", NULL, 0x0, "Lrepackaged.android.graphics.drawable.Drawable;", NULL, NULL,  },
    { "mDebugLayout_", NULL, 0x0, "Z", NULL, NULL,  },
    { "mPoint_", NULL, 0x10, "Lrepackaged.android.graphics.Point;", NULL, NULL,  },
    { "mViewRequestingLayout_", NULL, 0x0, "Lrepackaged.android.view.View;", NULL, NULL,  },
  };
  static const char *inner_classes[] = {"Lrepackaged.android.view.View$AttachInfo$Callbacks;", "Lrepackaged.android.view.View$AttachInfo$InvalidateInfo;"};
  static const J2ObjcClassInfo _RepackagedAndroidViewView_AttachInfo = { 2, "AttachInfo", "repackaged.android.view", "View", 0x18, 1, methods, 69, fields, 0, NULL, 2, inner_classes, NULL, NULL };
  return &_RepackagedAndroidViewView_AttachInfo;
}

@end


#line 21875
void RepackagedAndroidViewView_AttachInfo_initWithRepackagedAndroidViewIWindowSession_withRepackagedAndroidViewIWindow_withRepackagedAndroidViewDisplay_withRepackagedAndroidViewViewRootImpl_withRepackagedAndroidOsHandler_withRepackagedAndroidViewView_AttachInfo_Callbacks_(RepackagedAndroidViewView_AttachInfo *self, id<RepackagedAndroidViewIWindowSession> session, id<RepackagedAndroidViewIWindow> window, RepackagedAndroidViewDisplay *display, RepackagedAndroidViewViewRootImpl *viewRootImpl, id<RepackagedAndroidOsHandler> handler, id<RepackagedAndroidViewView_AttachInfo_Callbacks> effectPlayer) {
  (void) NSObject_init(self);
  self->mDisplayState_ =
#line 21562
  RepackagedAndroidViewDisplay_STATE_UNKNOWN;
  self->mOverscanInsets_ = new_RepackagedAndroidGraphicsRect_init();
  self->mContentInsets_ = new_RepackagedAndroidGraphicsRect_init();
  self->mVisibleInsets_ = new_RepackagedAndroidGraphicsRect_init();
  self->mStableInsets_ = new_RepackagedAndroidGraphicsRect_init();
  self->mOutsets_ = new_RepackagedAndroidGraphicsRect_init();
  self->mGivenInternalInsets_ = new_RepackagedAndroidViewViewTreeObserver_InternalInsetsInfo_init();
  self->mScrollContainers_ = new_JavaUtilArrayList_init();
  self->mKeyDispatchState_ = new_RepackagedAndroidViewKeyEvent_DispatcherState_init();
  self->mSetIgnoreDirtyState_ =
#line 21677
  NO;
  self->mTransparentLocation_ = [IOSIntArray newArrayWithLength:
#line 21752
  2];
  self->mInvalidateChildLocation_ = [IOSIntArray newArrayWithLength:
#line 21758
  2];
  self->mTmpLocation_ = [IOSIntArray newArrayWithLength:
#line 21764
  2];
  self->mTmpTransformLocation_ = [IOSFloatArray newArrayWithLength:
#line 21770
  2];
  self->mTreeObserver_ = new_RepackagedAndroidViewViewTreeObserver_init();
  self->mTmpInvalRect_ = new_RepackagedAndroidGraphicsRect_init();
  self->mTmpTransformRect_ = new_RepackagedAndroidGraphicsRectF_init();
  self->mTmpTransformRect1_ = new_RepackagedAndroidGraphicsRectF_init();
  self->mTmpRectList_ = new_JavaUtilArrayList_init();
  self->mTmpMatrix_ = new_RepackagedAndroidGraphicsMatrix_init();
  self->mTmpTransformation_ = new_RepackagedAndroidViewAnimationTransformation_init();
  self->mTmpOutline_ = new_RepackagedAndroidGraphicsOutline_init();
  self->mTempArrayList_ = new_JavaUtilArrayList_initWithInt_(
#line 21833
  24);
  self->mAccessibilityWindowId_ =
#line 21838
  RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_UNDEFINED_ITEM_ID;
  self->mDebugLayout_ = RepackagedAndroidOsSystemProperties_getBooleanWithNSString_withBoolean_(RepackagedAndroidViewView_get_DEBUG_LAYOUT_PROPERTY_(),
#line 21856
  NO);
  self->mPoint_ = new_RepackagedAndroidGraphicsPoint_init();
  
#line 21877
  self->mSession_ = session;
  self->mWindow_ = window;
  self->mWindowToken_ = [((id<RepackagedAndroidViewIWindow>) nil_chk(window)) asBinder];
  self->mDisplay_ = display;
  self->mViewRootImpl_ = viewRootImpl;
  self->mHandler_ = handler;
  self->mRootCallbacks_ = effectPlayer;
}


#line 21875
RepackagedAndroidViewView_AttachInfo *new_RepackagedAndroidViewView_AttachInfo_initWithRepackagedAndroidViewIWindowSession_withRepackagedAndroidViewIWindow_withRepackagedAndroidViewDisplay_withRepackagedAndroidViewViewRootImpl_withRepackagedAndroidOsHandler_withRepackagedAndroidViewView_AttachInfo_Callbacks_(id<RepackagedAndroidViewIWindowSession> session, id<RepackagedAndroidViewIWindow> window, RepackagedAndroidViewDisplay *display, RepackagedAndroidViewViewRootImpl *viewRootImpl, id<RepackagedAndroidOsHandler> handler, id<RepackagedAndroidViewView_AttachInfo_Callbacks> effectPlayer) {
  RepackagedAndroidViewView_AttachInfo *self = [RepackagedAndroidViewView_AttachInfo alloc];
  RepackagedAndroidViewView_AttachInfo_initWithRepackagedAndroidViewIWindowSession_withRepackagedAndroidViewIWindow_withRepackagedAndroidViewDisplay_withRepackagedAndroidViewViewRootImpl_withRepackagedAndroidOsHandler_withRepackagedAndroidViewView_AttachInfo_Callbacks_(self, session, window, display, viewRootImpl, handler, effectPlayer);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RepackagedAndroidViewView_AttachInfo)


#line 21492
@implementation RepackagedAndroidViewView_AttachInfo_Callbacks

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "playSoundEffectWithInt:", "playSoundEffect", "V", 0x401, NULL, NULL },
    { "performHapticFeedbackWithInt:withBoolean:", "performHapticFeedback", "Z", 0x401, NULL, NULL },
  };
  static const J2ObjcClassInfo _RepackagedAndroidViewView_AttachInfo_Callbacks = { 2, "Callbacks", "repackaged.android.view", "View$AttachInfo", 0x608, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_RepackagedAndroidViewView_AttachInfo_Callbacks;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(RepackagedAndroidViewView_AttachInfo_Callbacks)

J2OBJC_INITIALIZED_DEFN(RepackagedAndroidViewView_AttachInfo_InvalidateInfo)


#line 21506
@implementation RepackagedAndroidViewView_AttachInfo_InvalidateInfo


#line 21519
+ (RepackagedAndroidViewView_AttachInfo_InvalidateInfo *)obtain {
  return RepackagedAndroidViewView_AttachInfo_InvalidateInfo_obtain();
}


#line 21524
- (void)recycle {
  target_ = nil;
  [((RepackagedAndroidUtilPools_SynchronizedPool *) nil_chk(RepackagedAndroidViewView_AttachInfo_InvalidateInfo_sPool_)) release__WithId:self];
}

- (instancetype)init {
  RepackagedAndroidViewView_AttachInfo_InvalidateInfo_init(self);
  return self;
}

+ (void)initialize {
  if (self == [RepackagedAndroidViewView_AttachInfo_InvalidateInfo class]) {
    RepackagedAndroidViewView_AttachInfo_InvalidateInfo_sPool_ = new_RepackagedAndroidUtilPools_SynchronizedPool_initWithInt_(
#line 21510
    RepackagedAndroidViewView_AttachInfo_InvalidateInfo_POOL_LIMIT);
    J2OBJC_SET_INITIALIZED(RepackagedAndroidViewView_AttachInfo_InvalidateInfo)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "obtain", NULL, "Lrepackaged.android.view.View$AttachInfo$InvalidateInfo;", 0x9, NULL, NULL },
    { "recycle", NULL, "V", 0x1, NULL, NULL },
    { "init", NULL, NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "POOL_LIMIT_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_AttachInfo_InvalidateInfo_POOL_LIMIT },
    { "sPool_", NULL, 0x1a, "Lrepackaged.android.util.Pools$SynchronizedPool;", &RepackagedAndroidViewView_AttachInfo_InvalidateInfo_sPool_, "Lrepackaged/android/util/Pools$SynchronizedPool<Lrepackaged/android/view/View$AttachInfo$InvalidateInfo;>;",  },
    { "target_", NULL, 0x0, "Lrepackaged.android.view.View;", NULL, NULL,  },
    { "left_", NULL, 0x0, "I", NULL, NULL,  },
    { "top_", NULL, 0x0, "I", NULL, NULL,  },
    { "right_", NULL, 0x0, "I", NULL, NULL,  },
    { "bottom_", NULL, 0x0, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _RepackagedAndroidViewView_AttachInfo_InvalidateInfo = { 2, "InvalidateInfo", "repackaged.android.view", "View$AttachInfo", 0x8, 3, methods, 7, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_RepackagedAndroidViewView_AttachInfo_InvalidateInfo;
}

@end


#line 21519
RepackagedAndroidViewView_AttachInfo_InvalidateInfo *RepackagedAndroidViewView_AttachInfo_InvalidateInfo_obtain() {
  RepackagedAndroidViewView_AttachInfo_InvalidateInfo_initialize();
  
#line 21520
  RepackagedAndroidViewView_AttachInfo_InvalidateInfo *instance = [((RepackagedAndroidUtilPools_SynchronizedPool *) nil_chk(RepackagedAndroidViewView_AttachInfo_InvalidateInfo_sPool_)) acquire];
  return (instance != nil) ? instance : new_RepackagedAndroidViewView_AttachInfo_InvalidateInfo_init();
}

void RepackagedAndroidViewView_AttachInfo_InvalidateInfo_init(RepackagedAndroidViewView_AttachInfo_InvalidateInfo *self) {
  (void) NSObject_init(self);
}

RepackagedAndroidViewView_AttachInfo_InvalidateInfo *new_RepackagedAndroidViewView_AttachInfo_InvalidateInfo_init() {
  RepackagedAndroidViewView_AttachInfo_InvalidateInfo *self = [RepackagedAndroidViewView_AttachInfo_InvalidateInfo alloc];
  RepackagedAndroidViewView_AttachInfo_InvalidateInfo_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RepackagedAndroidViewView_AttachInfo_InvalidateInfo)

J2OBJC_INITIALIZED_DEFN(RepackagedAndroidViewView_ScrollabilityCache)


#line 21892
@implementation RepackagedAndroidViewView_ScrollabilityCache


#line 21943
- (instancetype)initWithRepackagedAndroidViewViewConfiguration:(RepackagedAndroidViewViewConfiguration *)configuration
                                 withRepackagedAndroidViewView:(RepackagedAndroidViewView *)host {
  RepackagedAndroidViewView_ScrollabilityCache_initWithRepackagedAndroidViewViewConfiguration_withRepackagedAndroidViewView_(self, configuration, host);
  return self;
}


#line 21960
- (void)setFadeColorWithInt:(jint)color {
  if (color != mLastColor_) {
    mLastColor_ = color;
    
#line 21964
    if (color != 0) {
      shader_ = new_RepackagedAndroidGraphicsLinearGradient_initWithInt_withInt_withInt_withInt_withInt_withInt_withRepackagedAndroidGraphicsShader_TileModeEnum_(0, 0, 0, 1, color | (jint) 0xFF000000,
#line 21966
      color & (jint) 0x00FFFFFF, RepackagedAndroidGraphicsShader_TileModeEnum_get_CLAMP());
      [((RepackagedAndroidGraphicsPaint *) nil_chk(paint_)) setShaderWithRepackagedAndroidGraphicsShader:shader_];
      
#line 21969
      [paint_ setXfermodeWithRepackagedAndroidGraphicsPorterDuffXfermode:nil];
    }
    else {
      
#line 21971
      shader_ = new_RepackagedAndroidGraphicsLinearGradient_initWithInt_withInt_withInt_withInt_withInt_withInt_withRepackagedAndroidGraphicsShader_TileModeEnum_(0, 0, 0, 1, (jint) 0xFF000000, 0, RepackagedAndroidGraphicsShader_TileModeEnum_get_CLAMP());
      [((RepackagedAndroidGraphicsPaint *) nil_chk(paint_)) setShaderWithRepackagedAndroidGraphicsShader:shader_];
      [paint_ setXfermodeWithRepackagedAndroidGraphicsPorterDuffXfermode:new_RepackagedAndroidGraphicsPorterDuffXfermode_initWithRepackagedAndroidGraphicsPorterDuff_ModeEnum_(RepackagedAndroidGraphicsPorterDuff_ModeEnum_get_DST_OUT())];
    }
  }
}


#line 21978
- (void)run {
  jlong now = RepackagedAndroidViewAnimationAnimationUtils_currentAnimationTimeMillis();
  if (now >= fadeStartTime_) {
    
#line 21985
    jint nextFrame = (jint) now;
    jint framesCount = 0;
    
#line 21988
    RepackagedAndroidGraphicsInterpolator *interpolator = scrollBarInterpolator_;
    
#line 21991
    [((RepackagedAndroidGraphicsInterpolator *) nil_chk(interpolator)) setKeyFrameWithInt:framesCount++ withInt:nextFrame withFloatArray:RepackagedAndroidViewView_ScrollabilityCache_OPAQUE_];
    
#line 21994
    nextFrame += scrollBarFadeDuration_;
    [interpolator setKeyFrameWithInt:framesCount withInt:nextFrame withFloatArray:RepackagedAndroidViewView_ScrollabilityCache_TRANSPARENT_];
    
#line 21997
    state_ = RepackagedAndroidViewView_ScrollabilityCache_FADING;
    
#line 22000
    [((RepackagedAndroidViewView *) nil_chk(host_)) invalidateWithBoolean:YES];
  }
}

+ (void)initialize {
  if (self == [RepackagedAndroidViewView_ScrollabilityCache class]) {
    RepackagedAndroidViewView_ScrollabilityCache_OPAQUE_ = [IOSFloatArray newArrayWithFloats:(jfloat[]){
#line 21926
      255 } count:1];
      RepackagedAndroidViewView_ScrollabilityCache_TRANSPARENT_ = [IOSFloatArray newArrayWithFloats:(jfloat[]){
#line 21927
        0.0f } count:1];
        J2OBJC_SET_INITIALIZED(RepackagedAndroidViewView_ScrollabilityCache)
      }
    }

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithRepackagedAndroidViewViewConfiguration:withRepackagedAndroidViewView:", "ScrollabilityCache", NULL, 0x1, NULL, NULL },
    { "setFadeColorWithInt:", "setFadeColor", "V", 0x1, NULL, NULL },
    { "run", NULL, "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "OFF_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_ScrollabilityCache_OFF },
    { "ON_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_ScrollabilityCache_ON },
    { "FADING_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidViewView_ScrollabilityCache_FADING },
    { "fadeScrollBars_", NULL, 0x1, "Z", NULL, NULL,  },
    { "fadingEdgeLength_", NULL, 0x1, "I", NULL, NULL,  },
    { "scrollBarDefaultDelayBeforeFade_", NULL, 0x1, "I", NULL, NULL,  },
    { "scrollBarFadeDuration_", NULL, 0x1, "I", NULL, NULL,  },
    { "scrollBarSize_", NULL, 0x1, "I", NULL, NULL,  },
    { "scrollBar_", NULL, 0x1, "Lrepackaged.android.widget.ScrollBarDrawable;", NULL, NULL,  },
    { "interpolatorValues_", NULL, 0x1, "[F", NULL, NULL,  },
    { "host_", NULL, 0x1, "Lrepackaged.android.view.View;", NULL, NULL,  },
    { "paint_", NULL, 0x11, "Lrepackaged.android.graphics.Paint;", NULL, NULL,  },
    { "matrix_", NULL, 0x11, "Lrepackaged.android.graphics.Matrix;", NULL, NULL,  },
    { "shader_", NULL, 0x1, "Lrepackaged.android.graphics.Shader;", NULL, NULL,  },
    { "scrollBarInterpolator_", NULL, 0x11, "Lrepackaged.android.graphics.Interpolator;", NULL, NULL,  },
    { "OPAQUE_", NULL, 0x1a, "[F", &RepackagedAndroidViewView_ScrollabilityCache_OPAQUE_, NULL,  },
    { "TRANSPARENT_", NULL, 0x1a, "[F", &RepackagedAndroidViewView_ScrollabilityCache_TRANSPARENT_, NULL,  },
    { "fadeStartTime_", NULL, 0x1, "J", NULL, NULL,  },
    { "state_", NULL, 0x1, "I", NULL, NULL,  },
    { "mLastColor_", NULL, 0x2, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _RepackagedAndroidViewView_ScrollabilityCache = { 2, "ScrollabilityCache", "repackaged.android.view", "View", 0xa, 3, methods, 20, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_RepackagedAndroidViewView_ScrollabilityCache;
}

@end


#line 21943
void RepackagedAndroidViewView_ScrollabilityCache_initWithRepackagedAndroidViewViewConfiguration_withRepackagedAndroidViewView_(RepackagedAndroidViewView_ScrollabilityCache *self, RepackagedAndroidViewViewConfiguration *configuration, RepackagedAndroidViewView *host) {
  (void) NSObject_init(self);
  self->scrollBarInterpolator_ = new_RepackagedAndroidGraphicsInterpolator_initWithInt_withInt_(
#line 21924
  1, 2);
  self->state_ = RepackagedAndroidViewView_ScrollabilityCache_OFF;
  
#line 21944
  self->fadingEdgeLength_ = [((RepackagedAndroidViewViewConfiguration *) nil_chk(configuration)) getScaledFadingEdgeLength];
  self->scrollBarSize_ = [configuration getScaledScrollBarSize];
  self->scrollBarDefaultDelayBeforeFade_ = RepackagedAndroidViewViewConfiguration_getScrollDefaultDelay();
  self->scrollBarFadeDuration_ = RepackagedAndroidViewViewConfiguration_getScrollBarFadeDuration();
  
#line 21949
  self->paint_ = new_RepackagedAndroidGraphicsPaint_init();
  self->matrix_ = new_RepackagedAndroidGraphicsMatrix_init();
  
#line 21953
  self->shader_ = new_RepackagedAndroidGraphicsLinearGradient_initWithInt_withInt_withInt_withInt_withInt_withInt_withRepackagedAndroidGraphicsShader_TileModeEnum_(0, 0, 0, 1, (jint) 0xFF000000, 0, RepackagedAndroidGraphicsShader_TileModeEnum_get_CLAMP());
  [self->paint_ setShaderWithRepackagedAndroidGraphicsShader:self->shader_];
  [self->paint_ setXfermodeWithRepackagedAndroidGraphicsPorterDuffXfermode:new_RepackagedAndroidGraphicsPorterDuffXfermode_initWithRepackagedAndroidGraphicsPorterDuff_ModeEnum_(RepackagedAndroidGraphicsPorterDuff_ModeEnum_get_DST_OUT())];
  
#line 21957
  self->host_ = host;
}


#line 21943
RepackagedAndroidViewView_ScrollabilityCache *new_RepackagedAndroidViewView_ScrollabilityCache_initWithRepackagedAndroidViewViewConfiguration_withRepackagedAndroidViewView_(RepackagedAndroidViewViewConfiguration *configuration, RepackagedAndroidViewView *host) {
  RepackagedAndroidViewView_ScrollabilityCache *self = [RepackagedAndroidViewView_ScrollabilityCache alloc];
  RepackagedAndroidViewView_ScrollabilityCache_initWithRepackagedAndroidViewViewConfiguration_withRepackagedAndroidViewView_(self, configuration, host);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RepackagedAndroidViewView_ScrollabilityCache)


#line 22009
@implementation RepackagedAndroidViewView_SendViewScrolledAccessibilityEvent


#line 22012
- (void)run {
  [this$0_ sendAccessibilityEventWithInt:RepackagedAndroidViewAccessibilityAccessibilityEvent_TYPE_VIEW_SCROLLED];
  mIsPending_ = NO;
}

- (instancetype)initWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)outer$ {
  RepackagedAndroidViewView_SendViewScrolledAccessibilityEvent_initWithRepackagedAndroidViewView_(self, outer$);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "run", NULL, "V", 0x1, NULL, NULL },
    { "initWithRepackagedAndroidViewView:", "init", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lrepackaged.android.view.View;", NULL, NULL,  },
    { "mIsPending_", NULL, 0x41, "Z", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _RepackagedAndroidViewView_SendViewScrolledAccessibilityEvent = { 2, "SendViewScrolledAccessibilityEvent", "repackaged.android.view", "View", 0x2, 2, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_RepackagedAndroidViewView_SendViewScrolledAccessibilityEvent;
}

@end

void RepackagedAndroidViewView_SendViewScrolledAccessibilityEvent_initWithRepackagedAndroidViewView_(RepackagedAndroidViewView_SendViewScrolledAccessibilityEvent *self, RepackagedAndroidViewView *outer$) {
  self->this$0_ = outer$;
  (void) NSObject_init(self);
}

RepackagedAndroidViewView_SendViewScrolledAccessibilityEvent *new_RepackagedAndroidViewView_SendViewScrolledAccessibilityEvent_initWithRepackagedAndroidViewView_(RepackagedAndroidViewView *outer$) {
  RepackagedAndroidViewView_SendViewScrolledAccessibilityEvent *self = [RepackagedAndroidViewView_SendViewScrolledAccessibilityEvent alloc];
  RepackagedAndroidViewView_SendViewScrolledAccessibilityEvent_initWithRepackagedAndroidViewView_(self, outer$);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RepackagedAndroidViewView_SendViewScrolledAccessibilityEvent)


#line 22078
@implementation RepackagedAndroidViewView_AccessibilityDelegate


#line 22094
- (void)sendAccessibilityEventWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)host
                                                    withInt:(jint)eventType {
  [((RepackagedAndroidViewView *) nil_chk(host)) sendAccessibilityEventInternalWithInt:eventType];
}


#line 22114
- (jboolean)performAccessibilityActionWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)host
                                                            withInt:(jint)action
                                      withRepackagedAndroidOsBundle:(RepackagedAndroidOsBundle *)args {
  return [((RepackagedAndroidViewView *) nil_chk(host)) performAccessibilityActionInternalWithInt:action withRepackagedAndroidOsBundle:args];
}


#line 22136
- (void)sendAccessibilityEventUncheckedWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)host
            withRepackagedAndroidViewAccessibilityAccessibilityEvent:(RepackagedAndroidViewAccessibilityAccessibilityEvent *)event {
  [((RepackagedAndroidViewView *) nil_chk(host)) sendAccessibilityEventUncheckedInternalWithRepackagedAndroidViewAccessibilityAccessibilityEvent:event];
}


#line 22157
- (jboolean)dispatchPopulateAccessibilityEventWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)host
                   withRepackagedAndroidViewAccessibilityAccessibilityEvent:(RepackagedAndroidViewAccessibilityAccessibilityEvent *)event {
  return [((RepackagedAndroidViewView *) nil_chk(host)) dispatchPopulateAccessibilityEventInternalWithRepackagedAndroidViewAccessibilityAccessibilityEvent:event];
}


#line 22177
- (void)onPopulateAccessibilityEventWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)host
         withRepackagedAndroidViewAccessibilityAccessibilityEvent:(RepackagedAndroidViewAccessibilityAccessibilityEvent *)event {
  [((RepackagedAndroidViewView *) nil_chk(host)) onPopulateAccessibilityEventInternalWithRepackagedAndroidViewAccessibilityAccessibilityEvent:event];
}


#line 22197
- (void)onInitializeAccessibilityEventWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)host
           withRepackagedAndroidViewAccessibilityAccessibilityEvent:(RepackagedAndroidViewAccessibilityAccessibilityEvent *)event {
  [((RepackagedAndroidViewView *) nil_chk(host)) onInitializeAccessibilityEventInternalWithRepackagedAndroidViewAccessibilityAccessibilityEvent:event];
}


#line 22216
- (void)onInitializeAccessibilityNodeInfoWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)host
           withRepackagedAndroidViewAccessibilityAccessibilityNodeInfo:(RepackagedAndroidViewAccessibilityAccessibilityNodeInfo *)info {
  [((RepackagedAndroidViewView *) nil_chk(host)) onInitializeAccessibilityNodeInfoInternalWithRepackagedAndroidViewAccessibilityAccessibilityNodeInfo:info];
}


#line 22239
- (jboolean)onRequestSendAccessibilityEventWithRepackagedAndroidViewViewGroup:(RepackagedAndroidViewViewGroup *)host
                                                withRepackagedAndroidViewView:(RepackagedAndroidViewView *)child
                     withRepackagedAndroidViewAccessibilityAccessibilityEvent:(RepackagedAndroidViewAccessibilityAccessibilityEvent *)event {
  
#line 22241
  return [((RepackagedAndroidViewViewGroup *) nil_chk(host)) onRequestSendAccessibilityEventInternalWithRepackagedAndroidViewView:child withRepackagedAndroidViewAccessibilityAccessibilityEvent:event];
}


#line 22258
- (RepackagedAndroidViewAccessibilityAccessibilityNodeProvider *)getAccessibilityNodeProviderWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)host {
  return nil;
}


#line 22285
- (RepackagedAndroidViewAccessibilityAccessibilityNodeInfo *)createAccessibilityNodeInfoWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)host {
  return [((RepackagedAndroidViewView *) nil_chk(host)) createAccessibilityNodeInfoInternal];
}

- (instancetype)init {
  RepackagedAndroidViewView_AccessibilityDelegate_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "sendAccessibilityEventWithRepackagedAndroidViewView:withInt:", "sendAccessibilityEvent", "V", 0x1, NULL, NULL },
    { "performAccessibilityActionWithRepackagedAndroidViewView:withInt:withRepackagedAndroidOsBundle:", "performAccessibilityAction", "Z", 0x1, NULL, NULL },
    { "sendAccessibilityEventUncheckedWithRepackagedAndroidViewView:withRepackagedAndroidViewAccessibilityAccessibilityEvent:", "sendAccessibilityEventUnchecked", "V", 0x1, NULL, NULL },
    { "dispatchPopulateAccessibilityEventWithRepackagedAndroidViewView:withRepackagedAndroidViewAccessibilityAccessibilityEvent:", "dispatchPopulateAccessibilityEvent", "Z", 0x1, NULL, NULL },
    { "onPopulateAccessibilityEventWithRepackagedAndroidViewView:withRepackagedAndroidViewAccessibilityAccessibilityEvent:", "onPopulateAccessibilityEvent", "V", 0x1, NULL, NULL },
    { "onInitializeAccessibilityEventWithRepackagedAndroidViewView:withRepackagedAndroidViewAccessibilityAccessibilityEvent:", "onInitializeAccessibilityEvent", "V", 0x1, NULL, NULL },
    { "onInitializeAccessibilityNodeInfoWithRepackagedAndroidViewView:withRepackagedAndroidViewAccessibilityAccessibilityNodeInfo:", "onInitializeAccessibilityNodeInfo", "V", 0x1, NULL, NULL },
    { "onRequestSendAccessibilityEventWithRepackagedAndroidViewViewGroup:withRepackagedAndroidViewView:withRepackagedAndroidViewAccessibilityAccessibilityEvent:", "onRequestSendAccessibilityEvent", "Z", 0x1, NULL, NULL },
    { "getAccessibilityNodeProviderWithRepackagedAndroidViewView:", "getAccessibilityNodeProvider", "Lrepackaged.android.view.accessibility.AccessibilityNodeProvider;", 0x1, NULL, NULL },
    { "createAccessibilityNodeInfoWithRepackagedAndroidViewView:", "createAccessibilityNodeInfo", "Lrepackaged.android.view.accessibility.AccessibilityNodeInfo;", 0x1, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcClassInfo _RepackagedAndroidViewView_AccessibilityDelegate = { 2, "AccessibilityDelegate", "repackaged.android.view", "View", 0x9, 11, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_RepackagedAndroidViewView_AccessibilityDelegate;
}

@end

void RepackagedAndroidViewView_AccessibilityDelegate_init(RepackagedAndroidViewView_AccessibilityDelegate *self) {
  (void) NSObject_init(self);
}

RepackagedAndroidViewView_AccessibilityDelegate *new_RepackagedAndroidViewView_AccessibilityDelegate_init() {
  RepackagedAndroidViewView_AccessibilityDelegate *self = [RepackagedAndroidViewView_AccessibilityDelegate alloc];
  RepackagedAndroidViewView_AccessibilityDelegate_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RepackagedAndroidViewView_AccessibilityDelegate)


#line 22290
@implementation RepackagedAndroidViewView_MatchIdPredicate


#line 22294
- (jboolean)applyWithId:(RepackagedAndroidViewView *)view {
  return ((RepackagedAndroidViewView *) nil_chk(view))->mID_ == mId_;
}

- (instancetype)initWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)outer$ {
  RepackagedAndroidViewView_MatchIdPredicate_initWithRepackagedAndroidViewView_(self, outer$);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "applyWithId:", "apply", "Z", 0x1, NULL, NULL },
    { "initWithRepackagedAndroidViewView:", "init", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "mId_", NULL, 0x1, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _RepackagedAndroidViewView_MatchIdPredicate = { 2, "MatchIdPredicate", "repackaged.android.view", "View", 0x2, 2, methods, 1, fields, 0, NULL, 0, NULL, NULL, "Ljava/lang/Object;Lrepackaged/com/android/internal/util/Predicate<Lrepackaged/android/view/View;>;" };
  return &_RepackagedAndroidViewView_MatchIdPredicate;
}

@end

void RepackagedAndroidViewView_MatchIdPredicate_initWithRepackagedAndroidViewView_(RepackagedAndroidViewView_MatchIdPredicate *self, RepackagedAndroidViewView *outer$) {
  (void) NSObject_init(self);
}

RepackagedAndroidViewView_MatchIdPredicate *new_RepackagedAndroidViewView_MatchIdPredicate_initWithRepackagedAndroidViewView_(RepackagedAndroidViewView *outer$) {
  RepackagedAndroidViewView_MatchIdPredicate *self = [RepackagedAndroidViewView_MatchIdPredicate alloc];
  RepackagedAndroidViewView_MatchIdPredicate_initWithRepackagedAndroidViewView_(self, outer$);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RepackagedAndroidViewView_MatchIdPredicate)


#line 22299
@implementation RepackagedAndroidViewView_MatchLabelForPredicate


#line 22303
- (jboolean)applyWithId:(RepackagedAndroidViewView *)view {
  return ((RepackagedAndroidViewView *) nil_chk(view))->mLabelForId_ == mLabeledId_;
}

- (instancetype)initWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)outer$ {
  RepackagedAndroidViewView_MatchLabelForPredicate_initWithRepackagedAndroidViewView_(self, outer$);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "applyWithId:", "apply", "Z", 0x1, NULL, NULL },
    { "initWithRepackagedAndroidViewView:", "init", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "mLabeledId_", NULL, 0x2, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _RepackagedAndroidViewView_MatchLabelForPredicate = { 2, "MatchLabelForPredicate", "repackaged.android.view", "View", 0x2, 2, methods, 1, fields, 0, NULL, 0, NULL, NULL, "Ljava/lang/Object;Lrepackaged/com/android/internal/util/Predicate<Lrepackaged/android/view/View;>;" };
  return &_RepackagedAndroidViewView_MatchLabelForPredicate;
}

@end

void RepackagedAndroidViewView_MatchLabelForPredicate_initWithRepackagedAndroidViewView_(RepackagedAndroidViewView_MatchLabelForPredicate *self, RepackagedAndroidViewView *outer$) {
  (void) NSObject_init(self);
}

RepackagedAndroidViewView_MatchLabelForPredicate *new_RepackagedAndroidViewView_MatchLabelForPredicate_initWithRepackagedAndroidViewView_(RepackagedAndroidViewView *outer$) {
  RepackagedAndroidViewView_MatchLabelForPredicate *self = [RepackagedAndroidViewView_MatchLabelForPredicate alloc];
  RepackagedAndroidViewView_MatchLabelForPredicate_initWithRepackagedAndroidViewView_(self, outer$);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RepackagedAndroidViewView_MatchLabelForPredicate)


#line 22308
@implementation RepackagedAndroidViewView_SendViewStateChangedAccessibilityEvent


#line 22315
- (void)run {
  mPosted_ = NO;
  mPostedWithDelay_ = NO;
  mLastEventTimeMillis_ = RepackagedAndroidOsSystemClock_uptimeMillis();
  if ([((RepackagedAndroidViewAccessibilityAccessibilityManager *) nil_chk(RepackagedAndroidViewAccessibilityAccessibilityManager_getInstanceWithRepackagedAndroidContentContext_(this$0_->mContext_))) isEnabled]) {
    RepackagedAndroidViewAccessibilityAccessibilityEvent *event = RepackagedAndroidViewAccessibilityAccessibilityEvent_obtain();
    [((RepackagedAndroidViewAccessibilityAccessibilityEvent *) nil_chk(event)) setEventTypeWithInt:RepackagedAndroidViewAccessibilityAccessibilityEvent_TYPE_WINDOW_CONTENT_CHANGED];
    [event setContentChangeTypesWithInt:mChangeTypes_];
    [this$0_ sendAccessibilityEventUncheckedWithRepackagedAndroidViewAccessibilityAccessibilityEvent:event];
  }
  mChangeTypes_ = 0;
}

- (void)runOrPostWithInt:(jint)changeType {
  mChangeTypes_ |= changeType;
  
#line 22333
  if (RepackagedAndroidViewView_inLiveRegion(this$0_)) {
    
#line 22335
    if (mPostedWithDelay_) {
      [this$0_ removeCallbacksWithJavaLangRunnable:self];
      mPostedWithDelay_ = NO;
    }
    
#line 22340
    if (!mPosted_) {
      [this$0_ postWithJavaLangRunnable:self];
      mPosted_ = YES;
    }
    return;
  }
  
#line 22347
  if (mPosted_) {
    return;
  }
  
#line 22351
  jlong timeSinceLastMillis = RepackagedAndroidOsSystemClock_uptimeMillis() - mLastEventTimeMillis_;
  jlong minEventIntevalMillis = RepackagedAndroidViewViewConfiguration_getSendRecurringAccessibilityEventsInterval();
  
#line 22354
  if (timeSinceLastMillis >= minEventIntevalMillis) {
    [this$0_ removeCallbacksWithJavaLangRunnable:self];
    [self run];
  }
  else {
    
#line 22358
    [this$0_ postDelayedWithJavaLangRunnable:self withLong:minEventIntevalMillis - timeSinceLastMillis];
    mPostedWithDelay_ = YES;
  }
}

- (instancetype)initWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)outer$ {
  RepackagedAndroidViewView_SendViewStateChangedAccessibilityEvent_initWithRepackagedAndroidViewView_(self, outer$);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "run", NULL, "V", 0x1, NULL, NULL },
    { "runOrPostWithInt:", "runOrPost", "V", 0x1, NULL, NULL },
    { "initWithRepackagedAndroidViewView:", "init", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lrepackaged.android.view.View;", NULL, NULL,  },
    { "mChangeTypes_", NULL, 0x2, "I", NULL, NULL,  },
    { "mPosted_", NULL, 0x2, "Z", NULL, NULL,  },
    { "mPostedWithDelay_", NULL, 0x2, "Z", NULL, NULL,  },
    { "mLastEventTimeMillis_", NULL, 0x2, "J", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _RepackagedAndroidViewView_SendViewStateChangedAccessibilityEvent = { 2, "SendViewStateChangedAccessibilityEvent", "repackaged.android.view", "View", 0x2, 3, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_RepackagedAndroidViewView_SendViewStateChangedAccessibilityEvent;
}

@end

void RepackagedAndroidViewView_SendViewStateChangedAccessibilityEvent_initWithRepackagedAndroidViewView_(RepackagedAndroidViewView_SendViewStateChangedAccessibilityEvent *self, RepackagedAndroidViewView *outer$) {
  self->this$0_ = outer$;
  (void) NSObject_init(self);
  self->mChangeTypes_ =
#line 22309
  0;
}

RepackagedAndroidViewView_SendViewStateChangedAccessibilityEvent *new_RepackagedAndroidViewView_SendViewStateChangedAccessibilityEvent_initWithRepackagedAndroidViewView_(RepackagedAndroidViewView *outer$) {
  RepackagedAndroidViewView_SendViewStateChangedAccessibilityEvent *self = [RepackagedAndroidViewView_SendViewStateChangedAccessibilityEvent alloc];
  RepackagedAndroidViewView_SendViewStateChangedAccessibilityEvent_initWithRepackagedAndroidViewView_(self, outer$);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RepackagedAndroidViewView_SendViewStateChangedAccessibilityEvent)

@implementation RepackagedAndroidViewView_$13


#line 8142
- (jboolean)applyWithId:(RepackagedAndroidViewView *)t {
  return ((RepackagedAndroidViewView *) nil_chk(t))->mNextFocusForwardId_ == val$id_;
}

- (instancetype)initWithInt:(jint)capture$0 {
  RepackagedAndroidViewView_$13_initWithInt_(self, capture$0);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "applyWithId:", "apply", "Z", 0x1, NULL, NULL },
    { "initWithInt:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "val$id_", NULL, 0x1012, "I", NULL, NULL,  },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "RepackagedAndroidViewView", "findUserSetNextFocusWithRepackagedAndroidViewView:withInt:" };
  static const J2ObjcClassInfo _RepackagedAndroidViewView_$13 = { 2, "", "repackaged.android.view", "View", 0x8008, 2, methods, 1, fields, 0, NULL, 0, NULL, &enclosing_method, "Ljava/lang/Object;Lrepackaged/com/android/internal/util/Predicate<Lrepackaged/android/view/View;>;" };
  return &_RepackagedAndroidViewView_$13;
}

@end

void RepackagedAndroidViewView_$13_initWithInt_(RepackagedAndroidViewView_$13 *self, jint capture$0) {
  self->val$id_ = capture$0;
  (void) NSObject_init(self);
}

RepackagedAndroidViewView_$13 *new_RepackagedAndroidViewView_$13_initWithInt_(jint capture$0) {
  RepackagedAndroidViewView_$13 *self = [RepackagedAndroidViewView_$13 alloc];
  RepackagedAndroidViewView_$13_initWithInt_(self, capture$0);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RepackagedAndroidViewView_$13)

@implementation RepackagedAndroidViewView_$1


#line 20776
- (void)setValueWithId:(RepackagedAndroidViewView *)object
             withFloat:(jfloat)value {
  [((RepackagedAndroidViewView *) nil_chk(object)) setAlphaWithFloat:value];
}

- (JavaLangFloat *)getWithId:(RepackagedAndroidViewView *)object {
  return JavaLangFloat_valueOfWithFloat_([((RepackagedAndroidViewView *) nil_chk(object)) getAlpha]);
}

- (instancetype)initWithNSString:(NSString *)arg$0 {
  RepackagedAndroidViewView_$1_initWithNSString_(self, arg$0);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "setValueWithId:withFloat:", "setValue", "V", 0x1, NULL, NULL },
    { "getWithId:", "get", "Ljava.lang.Float;", 0x1, NULL, NULL },
    { "initWithNSString:", "", NULL, 0x0, NULL, NULL },
  };
  static const char *superclass_type_args[] = {"Lrepackaged.android.view.View;"};
  static const J2ObjcClassInfo _RepackagedAndroidViewView_$1 = { 2, "", "repackaged.android.view", "View", 0x8008, 3, methods, 0, NULL, 1, superclass_type_args, 0, NULL, NULL, "Lrepackaged/android/util/FloatProperty<Lrepackaged/android/view/View;>;" };
  return &_RepackagedAndroidViewView_$1;
}

@end

void RepackagedAndroidViewView_$1_initWithNSString_(RepackagedAndroidViewView_$1 *self, NSString *arg$0) {
  (void) RepackagedAndroidUtilFloatProperty_initWithNSString_(self, arg$0);
}

RepackagedAndroidViewView_$1 *new_RepackagedAndroidViewView_$1_initWithNSString_(NSString *arg$0) {
  RepackagedAndroidViewView_$1 *self = [RepackagedAndroidViewView_$1 alloc];
  RepackagedAndroidViewView_$1_initWithNSString_(self, arg$0);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RepackagedAndroidViewView_$1)

@implementation RepackagedAndroidViewView_$2


#line 20792
- (void)setValueWithId:(RepackagedAndroidViewView *)object
             withFloat:(jfloat)value {
  [((RepackagedAndroidViewView *) nil_chk(object)) setTranslationXWithFloat:value];
}

- (JavaLangFloat *)getWithId:(RepackagedAndroidViewView *)object {
  return JavaLangFloat_valueOfWithFloat_([((RepackagedAndroidViewView *) nil_chk(object)) getTranslationX]);
}

- (instancetype)initWithNSString:(NSString *)arg$0 {
  RepackagedAndroidViewView_$2_initWithNSString_(self, arg$0);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "setValueWithId:withFloat:", "setValue", "V", 0x1, NULL, NULL },
    { "getWithId:", "get", "Ljava.lang.Float;", 0x1, NULL, NULL },
    { "initWithNSString:", "", NULL, 0x0, NULL, NULL },
  };
  static const char *superclass_type_args[] = {"Lrepackaged.android.view.View;"};
  static const J2ObjcClassInfo _RepackagedAndroidViewView_$2 = { 2, "", "repackaged.android.view", "View", 0x8008, 3, methods, 0, NULL, 1, superclass_type_args, 0, NULL, NULL, "Lrepackaged/android/util/FloatProperty<Lrepackaged/android/view/View;>;" };
  return &_RepackagedAndroidViewView_$2;
}

@end

void RepackagedAndroidViewView_$2_initWithNSString_(RepackagedAndroidViewView_$2 *self, NSString *arg$0) {
  (void) RepackagedAndroidUtilFloatProperty_initWithNSString_(self, arg$0);
}

RepackagedAndroidViewView_$2 *new_RepackagedAndroidViewView_$2_initWithNSString_(NSString *arg$0) {
  RepackagedAndroidViewView_$2 *self = [RepackagedAndroidViewView_$2 alloc];
  RepackagedAndroidViewView_$2_initWithNSString_(self, arg$0);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RepackagedAndroidViewView_$2)

@implementation RepackagedAndroidViewView_$3


#line 20808
- (void)setValueWithId:(RepackagedAndroidViewView *)object
             withFloat:(jfloat)value {
  [((RepackagedAndroidViewView *) nil_chk(object)) setTranslationYWithFloat:value];
}

- (JavaLangFloat *)getWithId:(RepackagedAndroidViewView *)object {
  return JavaLangFloat_valueOfWithFloat_([((RepackagedAndroidViewView *) nil_chk(object)) getTranslationY]);
}

- (instancetype)initWithNSString:(NSString *)arg$0 {
  RepackagedAndroidViewView_$3_initWithNSString_(self, arg$0);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "setValueWithId:withFloat:", "setValue", "V", 0x1, NULL, NULL },
    { "getWithId:", "get", "Ljava.lang.Float;", 0x1, NULL, NULL },
    { "initWithNSString:", "", NULL, 0x0, NULL, NULL },
  };
  static const char *superclass_type_args[] = {"Lrepackaged.android.view.View;"};
  static const J2ObjcClassInfo _RepackagedAndroidViewView_$3 = { 2, "", "repackaged.android.view", "View", 0x8008, 3, methods, 0, NULL, 1, superclass_type_args, 0, NULL, NULL, "Lrepackaged/android/util/FloatProperty<Lrepackaged/android/view/View;>;" };
  return &_RepackagedAndroidViewView_$3;
}

@end

void RepackagedAndroidViewView_$3_initWithNSString_(RepackagedAndroidViewView_$3 *self, NSString *arg$0) {
  (void) RepackagedAndroidUtilFloatProperty_initWithNSString_(self, arg$0);
}

RepackagedAndroidViewView_$3 *new_RepackagedAndroidViewView_$3_initWithNSString_(NSString *arg$0) {
  RepackagedAndroidViewView_$3 *self = [RepackagedAndroidViewView_$3 alloc];
  RepackagedAndroidViewView_$3_initWithNSString_(self, arg$0);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RepackagedAndroidViewView_$3)

@implementation RepackagedAndroidViewView_$4


#line 20824
- (void)setValueWithId:(RepackagedAndroidViewView *)object
             withFloat:(jfloat)value {
  [((RepackagedAndroidViewView *) nil_chk(object)) setTranslationZWithFloat:value];
}

- (JavaLangFloat *)getWithId:(RepackagedAndroidViewView *)object {
  return JavaLangFloat_valueOfWithFloat_([((RepackagedAndroidViewView *) nil_chk(object)) getTranslationZ]);
}

- (instancetype)initWithNSString:(NSString *)arg$0 {
  RepackagedAndroidViewView_$4_initWithNSString_(self, arg$0);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "setValueWithId:withFloat:", "setValue", "V", 0x1, NULL, NULL },
    { "getWithId:", "get", "Ljava.lang.Float;", 0x1, NULL, NULL },
    { "initWithNSString:", "", NULL, 0x0, NULL, NULL },
  };
  static const char *superclass_type_args[] = {"Lrepackaged.android.view.View;"};
  static const J2ObjcClassInfo _RepackagedAndroidViewView_$4 = { 2, "", "repackaged.android.view", "View", 0x8008, 3, methods, 0, NULL, 1, superclass_type_args, 0, NULL, NULL, "Lrepackaged/android/util/FloatProperty<Lrepackaged/android/view/View;>;" };
  return &_RepackagedAndroidViewView_$4;
}

@end

void RepackagedAndroidViewView_$4_initWithNSString_(RepackagedAndroidViewView_$4 *self, NSString *arg$0) {
  (void) RepackagedAndroidUtilFloatProperty_initWithNSString_(self, arg$0);
}

RepackagedAndroidViewView_$4 *new_RepackagedAndroidViewView_$4_initWithNSString_(NSString *arg$0) {
  RepackagedAndroidViewView_$4 *self = [RepackagedAndroidViewView_$4 alloc];
  RepackagedAndroidViewView_$4_initWithNSString_(self, arg$0);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RepackagedAndroidViewView_$4)

@implementation RepackagedAndroidViewView_$5


#line 20840
- (void)setValueWithId:(RepackagedAndroidViewView *)object
             withFloat:(jfloat)value {
  [((RepackagedAndroidViewView *) nil_chk(object)) setXWithFloat:value];
}

- (JavaLangFloat *)getWithId:(RepackagedAndroidViewView *)object {
  return JavaLangFloat_valueOfWithFloat_([((RepackagedAndroidViewView *) nil_chk(object)) getX]);
}

- (instancetype)initWithNSString:(NSString *)arg$0 {
  RepackagedAndroidViewView_$5_initWithNSString_(self, arg$0);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "setValueWithId:withFloat:", "setValue", "V", 0x1, NULL, NULL },
    { "getWithId:", "get", "Ljava.lang.Float;", 0x1, NULL, NULL },
    { "initWithNSString:", "", NULL, 0x0, NULL, NULL },
  };
  static const char *superclass_type_args[] = {"Lrepackaged.android.view.View;"};
  static const J2ObjcClassInfo _RepackagedAndroidViewView_$5 = { 2, "", "repackaged.android.view", "View", 0x8008, 3, methods, 0, NULL, 1, superclass_type_args, 0, NULL, NULL, "Lrepackaged/android/util/FloatProperty<Lrepackaged/android/view/View;>;" };
  return &_RepackagedAndroidViewView_$5;
}

@end

void RepackagedAndroidViewView_$5_initWithNSString_(RepackagedAndroidViewView_$5 *self, NSString *arg$0) {
  (void) RepackagedAndroidUtilFloatProperty_initWithNSString_(self, arg$0);
}

RepackagedAndroidViewView_$5 *new_RepackagedAndroidViewView_$5_initWithNSString_(NSString *arg$0) {
  RepackagedAndroidViewView_$5 *self = [RepackagedAndroidViewView_$5 alloc];
  RepackagedAndroidViewView_$5_initWithNSString_(self, arg$0);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RepackagedAndroidViewView_$5)

@implementation RepackagedAndroidViewView_$6


#line 20856
- (void)setValueWithId:(RepackagedAndroidViewView *)object
             withFloat:(jfloat)value {
  [((RepackagedAndroidViewView *) nil_chk(object)) setYWithFloat:value];
}

- (JavaLangFloat *)getWithId:(RepackagedAndroidViewView *)object {
  return JavaLangFloat_valueOfWithFloat_([((RepackagedAndroidViewView *) nil_chk(object)) getY]);
}

- (instancetype)initWithNSString:(NSString *)arg$0 {
  RepackagedAndroidViewView_$6_initWithNSString_(self, arg$0);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "setValueWithId:withFloat:", "setValue", "V", 0x1, NULL, NULL },
    { "getWithId:", "get", "Ljava.lang.Float;", 0x1, NULL, NULL },
    { "initWithNSString:", "", NULL, 0x0, NULL, NULL },
  };
  static const char *superclass_type_args[] = {"Lrepackaged.android.view.View;"};
  static const J2ObjcClassInfo _RepackagedAndroidViewView_$6 = { 2, "", "repackaged.android.view", "View", 0x8008, 3, methods, 0, NULL, 1, superclass_type_args, 0, NULL, NULL, "Lrepackaged/android/util/FloatProperty<Lrepackaged/android/view/View;>;" };
  return &_RepackagedAndroidViewView_$6;
}

@end

void RepackagedAndroidViewView_$6_initWithNSString_(RepackagedAndroidViewView_$6 *self, NSString *arg$0) {
  (void) RepackagedAndroidUtilFloatProperty_initWithNSString_(self, arg$0);
}

RepackagedAndroidViewView_$6 *new_RepackagedAndroidViewView_$6_initWithNSString_(NSString *arg$0) {
  RepackagedAndroidViewView_$6 *self = [RepackagedAndroidViewView_$6 alloc];
  RepackagedAndroidViewView_$6_initWithNSString_(self, arg$0);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RepackagedAndroidViewView_$6)

@implementation RepackagedAndroidViewView_$7


#line 20872
- (void)setValueWithId:(RepackagedAndroidViewView *)object
             withFloat:(jfloat)value {
  [((RepackagedAndroidViewView *) nil_chk(object)) setZWithFloat:value];
}

- (JavaLangFloat *)getWithId:(RepackagedAndroidViewView *)object {
  return JavaLangFloat_valueOfWithFloat_([((RepackagedAndroidViewView *) nil_chk(object)) getZ]);
}

- (instancetype)initWithNSString:(NSString *)arg$0 {
  RepackagedAndroidViewView_$7_initWithNSString_(self, arg$0);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "setValueWithId:withFloat:", "setValue", "V", 0x1, NULL, NULL },
    { "getWithId:", "get", "Ljava.lang.Float;", 0x1, NULL, NULL },
    { "initWithNSString:", "", NULL, 0x0, NULL, NULL },
  };
  static const char *superclass_type_args[] = {"Lrepackaged.android.view.View;"};
  static const J2ObjcClassInfo _RepackagedAndroidViewView_$7 = { 2, "", "repackaged.android.view", "View", 0x8008, 3, methods, 0, NULL, 1, superclass_type_args, 0, NULL, NULL, "Lrepackaged/android/util/FloatProperty<Lrepackaged/android/view/View;>;" };
  return &_RepackagedAndroidViewView_$7;
}

@end

void RepackagedAndroidViewView_$7_initWithNSString_(RepackagedAndroidViewView_$7 *self, NSString *arg$0) {
  (void) RepackagedAndroidUtilFloatProperty_initWithNSString_(self, arg$0);
}

RepackagedAndroidViewView_$7 *new_RepackagedAndroidViewView_$7_initWithNSString_(NSString *arg$0) {
  RepackagedAndroidViewView_$7 *self = [RepackagedAndroidViewView_$7 alloc];
  RepackagedAndroidViewView_$7_initWithNSString_(self, arg$0);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RepackagedAndroidViewView_$7)

@implementation RepackagedAndroidViewView_$8


#line 20888
- (void)setValueWithId:(RepackagedAndroidViewView *)object
             withFloat:(jfloat)value {
  [((RepackagedAndroidViewView *) nil_chk(object)) setRotationWithFloat:value];
}

- (JavaLangFloat *)getWithId:(RepackagedAndroidViewView *)object {
  return JavaLangFloat_valueOfWithFloat_([((RepackagedAndroidViewView *) nil_chk(object)) getRotation]);
}

- (instancetype)initWithNSString:(NSString *)arg$0 {
  RepackagedAndroidViewView_$8_initWithNSString_(self, arg$0);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "setValueWithId:withFloat:", "setValue", "V", 0x1, NULL, NULL },
    { "getWithId:", "get", "Ljava.lang.Float;", 0x1, NULL, NULL },
    { "initWithNSString:", "", NULL, 0x0, NULL, NULL },
  };
  static const char *superclass_type_args[] = {"Lrepackaged.android.view.View;"};
  static const J2ObjcClassInfo _RepackagedAndroidViewView_$8 = { 2, "", "repackaged.android.view", "View", 0x8008, 3, methods, 0, NULL, 1, superclass_type_args, 0, NULL, NULL, "Lrepackaged/android/util/FloatProperty<Lrepackaged/android/view/View;>;" };
  return &_RepackagedAndroidViewView_$8;
}

@end

void RepackagedAndroidViewView_$8_initWithNSString_(RepackagedAndroidViewView_$8 *self, NSString *arg$0) {
  (void) RepackagedAndroidUtilFloatProperty_initWithNSString_(self, arg$0);
}

RepackagedAndroidViewView_$8 *new_RepackagedAndroidViewView_$8_initWithNSString_(NSString *arg$0) {
  RepackagedAndroidViewView_$8 *self = [RepackagedAndroidViewView_$8 alloc];
  RepackagedAndroidViewView_$8_initWithNSString_(self, arg$0);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RepackagedAndroidViewView_$8)

@implementation RepackagedAndroidViewView_$9


#line 20904
- (void)setValueWithId:(RepackagedAndroidViewView *)object
             withFloat:(jfloat)value {
  [((RepackagedAndroidViewView *) nil_chk(object)) setRotationXWithFloat:value];
}

- (JavaLangFloat *)getWithId:(RepackagedAndroidViewView *)object {
  return JavaLangFloat_valueOfWithFloat_([((RepackagedAndroidViewView *) nil_chk(object)) getRotationX]);
}

- (instancetype)initWithNSString:(NSString *)arg$0 {
  RepackagedAndroidViewView_$9_initWithNSString_(self, arg$0);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "setValueWithId:withFloat:", "setValue", "V", 0x1, NULL, NULL },
    { "getWithId:", "get", "Ljava.lang.Float;", 0x1, NULL, NULL },
    { "initWithNSString:", "", NULL, 0x0, NULL, NULL },
  };
  static const char *superclass_type_args[] = {"Lrepackaged.android.view.View;"};
  static const J2ObjcClassInfo _RepackagedAndroidViewView_$9 = { 2, "", "repackaged.android.view", "View", 0x8008, 3, methods, 0, NULL, 1, superclass_type_args, 0, NULL, NULL, "Lrepackaged/android/util/FloatProperty<Lrepackaged/android/view/View;>;" };
  return &_RepackagedAndroidViewView_$9;
}

@end

void RepackagedAndroidViewView_$9_initWithNSString_(RepackagedAndroidViewView_$9 *self, NSString *arg$0) {
  (void) RepackagedAndroidUtilFloatProperty_initWithNSString_(self, arg$0);
}

RepackagedAndroidViewView_$9 *new_RepackagedAndroidViewView_$9_initWithNSString_(NSString *arg$0) {
  RepackagedAndroidViewView_$9 *self = [RepackagedAndroidViewView_$9 alloc];
  RepackagedAndroidViewView_$9_initWithNSString_(self, arg$0);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RepackagedAndroidViewView_$9)

@implementation RepackagedAndroidViewView_$10


#line 20920
- (void)setValueWithId:(RepackagedAndroidViewView *)object
             withFloat:(jfloat)value {
  [((RepackagedAndroidViewView *) nil_chk(object)) setRotationYWithFloat:value];
}

- (JavaLangFloat *)getWithId:(RepackagedAndroidViewView *)object {
  return JavaLangFloat_valueOfWithFloat_([((RepackagedAndroidViewView *) nil_chk(object)) getRotationY]);
}

- (instancetype)initWithNSString:(NSString *)arg$0 {
  RepackagedAndroidViewView_$10_initWithNSString_(self, arg$0);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "setValueWithId:withFloat:", "setValue", "V", 0x1, NULL, NULL },
    { "getWithId:", "get", "Ljava.lang.Float;", 0x1, NULL, NULL },
    { "initWithNSString:", "", NULL, 0x0, NULL, NULL },
  };
  static const char *superclass_type_args[] = {"Lrepackaged.android.view.View;"};
  static const J2ObjcClassInfo _RepackagedAndroidViewView_$10 = { 2, "", "repackaged.android.view", "View", 0x8008, 3, methods, 0, NULL, 1, superclass_type_args, 0, NULL, NULL, "Lrepackaged/android/util/FloatProperty<Lrepackaged/android/view/View;>;" };
  return &_RepackagedAndroidViewView_$10;
}

@end

void RepackagedAndroidViewView_$10_initWithNSString_(RepackagedAndroidViewView_$10 *self, NSString *arg$0) {
  (void) RepackagedAndroidUtilFloatProperty_initWithNSString_(self, arg$0);
}

RepackagedAndroidViewView_$10 *new_RepackagedAndroidViewView_$10_initWithNSString_(NSString *arg$0) {
  RepackagedAndroidViewView_$10 *self = [RepackagedAndroidViewView_$10 alloc];
  RepackagedAndroidViewView_$10_initWithNSString_(self, arg$0);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RepackagedAndroidViewView_$10)

@implementation RepackagedAndroidViewView_$11


#line 20936
- (void)setValueWithId:(RepackagedAndroidViewView *)object
             withFloat:(jfloat)value {
  [((RepackagedAndroidViewView *) nil_chk(object)) setScaleXWithFloat:value];
}

- (JavaLangFloat *)getWithId:(RepackagedAndroidViewView *)object {
  return JavaLangFloat_valueOfWithFloat_([((RepackagedAndroidViewView *) nil_chk(object)) getScaleX]);
}

- (instancetype)initWithNSString:(NSString *)arg$0 {
  RepackagedAndroidViewView_$11_initWithNSString_(self, arg$0);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "setValueWithId:withFloat:", "setValue", "V", 0x1, NULL, NULL },
    { "getWithId:", "get", "Ljava.lang.Float;", 0x1, NULL, NULL },
    { "initWithNSString:", "", NULL, 0x0, NULL, NULL },
  };
  static const char *superclass_type_args[] = {"Lrepackaged.android.view.View;"};
  static const J2ObjcClassInfo _RepackagedAndroidViewView_$11 = { 2, "", "repackaged.android.view", "View", 0x8008, 3, methods, 0, NULL, 1, superclass_type_args, 0, NULL, NULL, "Lrepackaged/android/util/FloatProperty<Lrepackaged/android/view/View;>;" };
  return &_RepackagedAndroidViewView_$11;
}

@end

void RepackagedAndroidViewView_$11_initWithNSString_(RepackagedAndroidViewView_$11 *self, NSString *arg$0) {
  (void) RepackagedAndroidUtilFloatProperty_initWithNSString_(self, arg$0);
}

RepackagedAndroidViewView_$11 *new_RepackagedAndroidViewView_$11_initWithNSString_(NSString *arg$0) {
  RepackagedAndroidViewView_$11 *self = [RepackagedAndroidViewView_$11 alloc];
  RepackagedAndroidViewView_$11_initWithNSString_(self, arg$0);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RepackagedAndroidViewView_$11)

@implementation RepackagedAndroidViewView_$12


#line 20952
- (void)setValueWithId:(RepackagedAndroidViewView *)object
             withFloat:(jfloat)value {
  [((RepackagedAndroidViewView *) nil_chk(object)) setScaleYWithFloat:value];
}

- (JavaLangFloat *)getWithId:(RepackagedAndroidViewView *)object {
  return JavaLangFloat_valueOfWithFloat_([((RepackagedAndroidViewView *) nil_chk(object)) getScaleY]);
}

- (instancetype)initWithNSString:(NSString *)arg$0 {
  RepackagedAndroidViewView_$12_initWithNSString_(self, arg$0);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "setValueWithId:withFloat:", "setValue", "V", 0x1, NULL, NULL },
    { "getWithId:", "get", "Ljava.lang.Float;", 0x1, NULL, NULL },
    { "initWithNSString:", "", NULL, 0x0, NULL, NULL },
  };
  static const char *superclass_type_args[] = {"Lrepackaged.android.view.View;"};
  static const J2ObjcClassInfo _RepackagedAndroidViewView_$12 = { 2, "", "repackaged.android.view", "View", 0x8008, 3, methods, 0, NULL, 1, superclass_type_args, 0, NULL, NULL, "Lrepackaged/android/util/FloatProperty<Lrepackaged/android/view/View;>;" };
  return &_RepackagedAndroidViewView_$12;
}

@end

void RepackagedAndroidViewView_$12_initWithNSString_(RepackagedAndroidViewView_$12 *self, NSString *arg$0) {
  (void) RepackagedAndroidUtilFloatProperty_initWithNSString_(self, arg$0);
}

RepackagedAndroidViewView_$12 *new_RepackagedAndroidViewView_$12_initWithNSString_(NSString *arg$0) {
  RepackagedAndroidViewView_$12 *self = [RepackagedAndroidViewView_$12 alloc];
  RepackagedAndroidViewView_$12_initWithNSString_(self, arg$0);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RepackagedAndroidViewView_$12)
