//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/androidlayouts/repackaged/com/android/internal/util/GrowingArrayUtils.java
//


#include "ArrayUtils.h"
#include "GrowingArrayUtils.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/System.h"

#line 0 "/Users/ramm/git/Ashera/AsheraAndroidParser/androidlayouts/repackaged/com/android/internal/util/GrowingArrayUtils.java"

@interface RepackagedComAndroidInternalUtilGrowingArrayUtils ()

- (instancetype)init;

@end

__attribute__((unused)) static void RepackagedComAndroidInternalUtilGrowingArrayUtils_init(RepackagedComAndroidInternalUtilGrowingArrayUtils *self);

__attribute__((unused)) static RepackagedComAndroidInternalUtilGrowingArrayUtils *new_RepackagedComAndroidInternalUtilGrowingArrayUtils_init() NS_RETURNS_RETAINED;


#line 29
@implementation RepackagedComAndroidInternalUtilGrowingArrayUtils


#line 40
+ (IOSObjectArray *)appendWithNSObjectArray:(IOSObjectArray *)array
                                    withInt:(jint)currentSize
                                     withId:(id)element {
  return RepackagedComAndroidInternalUtilGrowingArrayUtils_appendWithNSObjectArray_withInt_withId_(array, currentSize, element);
}


#line 57
+ (IOSIntArray *)appendWithIntArray:(IOSIntArray *)array
                            withInt:(jint)currentSize
                            withInt:(jint)element {
  return RepackagedComAndroidInternalUtilGrowingArrayUtils_appendWithIntArray_withInt_withInt_(array, currentSize, element);
}


#line 72
+ (IOSLongArray *)appendWithLongArray:(IOSLongArray *)array
                              withInt:(jint)currentSize
                             withLong:(jlong)element {
  return RepackagedComAndroidInternalUtilGrowingArrayUtils_appendWithLongArray_withInt_withLong_(array, currentSize, element);
}


#line 87
+ (IOSBooleanArray *)appendWithBooleanArray:(IOSBooleanArray *)array
                                    withInt:(jint)currentSize
                                withBoolean:(jboolean)element {
  return RepackagedComAndroidInternalUtilGrowingArrayUtils_appendWithBooleanArray_withInt_withBoolean_(array, currentSize, element);
}


#line 110
+ (IOSObjectArray *)insertWithNSObjectArray:(IOSObjectArray *)array
                                    withInt:(jint)currentSize
                                    withInt:(jint)index
                                     withId:(id)element {
  return RepackagedComAndroidInternalUtilGrowingArrayUtils_insertWithNSObjectArray_withInt_withInt_withId_(array, currentSize, index, element);
}


#line 131
+ (IOSIntArray *)insertWithIntArray:(IOSIntArray *)array
                            withInt:(jint)currentSize
                            withInt:(jint)index
                            withInt:(jint)element {
  return RepackagedComAndroidInternalUtilGrowingArrayUtils_insertWithIntArray_withInt_withInt_withInt_(array, currentSize, index, element);
}


#line 150
+ (IOSLongArray *)insertWithLongArray:(IOSLongArray *)array
                              withInt:(jint)currentSize
                              withInt:(jint)index
                             withLong:(jlong)element {
  return RepackagedComAndroidInternalUtilGrowingArrayUtils_insertWithLongArray_withInt_withInt_withLong_(array, currentSize, index, element);
}


#line 169
+ (IOSBooleanArray *)insertWithBooleanArray:(IOSBooleanArray *)array
                                    withInt:(jint)currentSize
                                    withInt:(jint)index
                                withBoolean:(jboolean)element {
  return RepackagedComAndroidInternalUtilGrowingArrayUtils_insertWithBooleanArray_withInt_withInt_withBoolean_(array, currentSize, index, element);
}


#line 190
+ (jint)growSizeWithInt:(jint)currentSize {
  return RepackagedComAndroidInternalUtilGrowingArrayUtils_growSizeWithInt_(currentSize);
}


#line 195
- (instancetype)init {
  RepackagedComAndroidInternalUtilGrowingArrayUtils_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "appendWithNSObjectArray:withInt:withId:", "append", "[Ljava.lang.Object;", 0x9, NULL, "<T:Ljava/lang/Object;>([TT;ITT;)[TT;" },
    { "appendWithIntArray:withInt:withInt:", "append", "[I", 0x9, NULL, NULL },
    { "appendWithLongArray:withInt:withLong:", "append", "[J", 0x9, NULL, NULL },
    { "appendWithBooleanArray:withInt:withBoolean:", "append", "[Z", 0x9, NULL, NULL },
    { "insertWithNSObjectArray:withInt:withInt:withId:", "insert", "[Ljava.lang.Object;", 0x9, NULL, "<T:Ljava/lang/Object;>([TT;IITT;)[TT;" },
    { "insertWithIntArray:withInt:withInt:withInt:", "insert", "[I", 0x9, NULL, NULL },
    { "insertWithLongArray:withInt:withInt:withLong:", "insert", "[J", 0x9, NULL, NULL },
    { "insertWithBooleanArray:withInt:withInt:withBoolean:", "insert", "[Z", 0x9, NULL, NULL },
    { "growSizeWithInt:", "growSize", "I", 0x9, NULL, NULL },
    { "init", "GrowingArrayUtils", NULL, 0x2, NULL, NULL },
  };
  static const J2ObjcClassInfo _RepackagedComAndroidInternalUtilGrowingArrayUtils = { 2, "GrowingArrayUtils", "repackaged.com.android.internal.util", NULL, 0x11, 10, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_RepackagedComAndroidInternalUtilGrowingArrayUtils;
}

@end


#line 40
IOSObjectArray *RepackagedComAndroidInternalUtilGrowingArrayUtils_appendWithNSObjectArray_withInt_withId_(IOSObjectArray *array, jint currentSize, id element) {
  RepackagedComAndroidInternalUtilGrowingArrayUtils_initialize();
  
#line 41
  NSCAssert(currentSize <= ((IOSObjectArray *) nil_chk(array))->size_, @"repackaged/com/android/internal/util/GrowingArrayUtils.java:41 condition failed: assert currentSize <= array.length;");
  
#line 43
  if (currentSize + 1 > array->size_) {
    IOSObjectArray *
#line 45
    newArray = RepackagedComAndroidInternalUtilArrayUtils_newUnpaddedArrayWithIOSClass_withInt_(
#line 46
    (IOSClass *) check_class_cast([[array getClass] getComponentType], [IOSClass class]), RepackagedComAndroidInternalUtilGrowingArrayUtils_growSizeWithInt_(currentSize));
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(array, 0, newArray, 0, currentSize);
    array = newArray;
  }
  (void) IOSObjectArray_Set(nil_chk(array), currentSize, element);
  return array;
}


#line 57
IOSIntArray *RepackagedComAndroidInternalUtilGrowingArrayUtils_appendWithIntArray_withInt_withInt_(IOSIntArray *array, jint currentSize, jint element) {
  RepackagedComAndroidInternalUtilGrowingArrayUtils_initialize();
  
#line 58
  NSCAssert(currentSize <= ((IOSIntArray *) nil_chk(array))->size_, @"repackaged/com/android/internal/util/GrowingArrayUtils.java:58 condition failed: assert currentSize <= array.length;");
  
#line 60
  if (currentSize + 1 > array->size_) {
    IOSIntArray *newArray = RepackagedComAndroidInternalUtilArrayUtils_newUnpaddedIntArrayWithInt_(RepackagedComAndroidInternalUtilGrowingArrayUtils_growSizeWithInt_(currentSize));
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(array, 0, newArray, 0, currentSize);
    array = newArray;
  }
  *IOSIntArray_GetRef(nil_chk(array), currentSize) = element;
  return array;
}


#line 72
IOSLongArray *RepackagedComAndroidInternalUtilGrowingArrayUtils_appendWithLongArray_withInt_withLong_(IOSLongArray *array, jint currentSize, jlong element) {
  RepackagedComAndroidInternalUtilGrowingArrayUtils_initialize();
  
#line 73
  NSCAssert(currentSize <= ((IOSLongArray *) nil_chk(array))->size_, @"repackaged/com/android/internal/util/GrowingArrayUtils.java:73 condition failed: assert currentSize <= array.length;");
  
#line 75
  if (currentSize + 1 > array->size_) {
    IOSLongArray *newArray = RepackagedComAndroidInternalUtilArrayUtils_newUnpaddedLongArrayWithInt_(RepackagedComAndroidInternalUtilGrowingArrayUtils_growSizeWithInt_(currentSize));
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(array, 0, newArray, 0, currentSize);
    array = newArray;
  }
  *IOSLongArray_GetRef(nil_chk(array), currentSize) = element;
  return array;
}


#line 87
IOSBooleanArray *RepackagedComAndroidInternalUtilGrowingArrayUtils_appendWithBooleanArray_withInt_withBoolean_(IOSBooleanArray *array, jint currentSize, jboolean element) {
  RepackagedComAndroidInternalUtilGrowingArrayUtils_initialize();
  
#line 88
  NSCAssert(currentSize <= ((IOSBooleanArray *) nil_chk(array))->size_, @"repackaged/com/android/internal/util/GrowingArrayUtils.java:88 condition failed: assert currentSize <= array.length;");
  
#line 90
  if (currentSize + 1 > array->size_) {
    IOSBooleanArray *newArray = RepackagedComAndroidInternalUtilArrayUtils_newUnpaddedBooleanArrayWithInt_(RepackagedComAndroidInternalUtilGrowingArrayUtils_growSizeWithInt_(currentSize));
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(array, 0, newArray, 0, currentSize);
    array = newArray;
  }
  *IOSBooleanArray_GetRef(nil_chk(array), currentSize) = element;
  return array;
}


#line 110
IOSObjectArray *RepackagedComAndroidInternalUtilGrowingArrayUtils_insertWithNSObjectArray_withInt_withInt_withId_(IOSObjectArray *array, jint currentSize, jint index, id element) {
  RepackagedComAndroidInternalUtilGrowingArrayUtils_initialize();
  
#line 111
  NSCAssert(currentSize <= ((IOSObjectArray *) nil_chk(array))->size_, @"repackaged/com/android/internal/util/GrowingArrayUtils.java:111 condition failed: assert currentSize <= array.length;");
  
#line 113
  if (currentSize + 1 <= array->size_) {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(array, index, array, index + 1, currentSize - index);
    (void) IOSObjectArray_Set(array, index, element);
    return array;
  }
  
#line 119
  IOSObjectArray *
#line 120
  newArray = RepackagedComAndroidInternalUtilArrayUtils_newUnpaddedArrayWithIOSClass_withInt_((IOSClass *) check_class_cast([[array getClass] getComponentType], [IOSClass class]), RepackagedComAndroidInternalUtilGrowingArrayUtils_growSizeWithInt_(
#line 121
  currentSize));
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(array, 0, newArray, 0, index);
  (void) IOSObjectArray_Set(nil_chk(newArray), index, element);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(array, index, newArray, index + 1, array->size_ - index);
  return newArray;
}


#line 131
IOSIntArray *RepackagedComAndroidInternalUtilGrowingArrayUtils_insertWithIntArray_withInt_withInt_withInt_(IOSIntArray *array, jint currentSize, jint index, jint element) {
  RepackagedComAndroidInternalUtilGrowingArrayUtils_initialize();
  
#line 132
  NSCAssert(currentSize <= ((IOSIntArray *) nil_chk(array))->size_, @"repackaged/com/android/internal/util/GrowingArrayUtils.java:132 condition failed: assert currentSize <= array.length;");
  
#line 134
  if (currentSize + 1 <= array->size_) {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(array, index, array, index + 1, currentSize - index);
    *IOSIntArray_GetRef(array, index) = element;
    return array;
  }
  
#line 140
  IOSIntArray *newArray = RepackagedComAndroidInternalUtilArrayUtils_newUnpaddedIntArrayWithInt_(RepackagedComAndroidInternalUtilGrowingArrayUtils_growSizeWithInt_(currentSize));
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(array, 0, newArray, 0, index);
  *IOSIntArray_GetRef(nil_chk(newArray), index) = element;
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(array, index, newArray, index + 1, array->size_ - index);
  return newArray;
}


#line 150
IOSLongArray *RepackagedComAndroidInternalUtilGrowingArrayUtils_insertWithLongArray_withInt_withInt_withLong_(IOSLongArray *array, jint currentSize, jint index, jlong element) {
  RepackagedComAndroidInternalUtilGrowingArrayUtils_initialize();
  
#line 151
  NSCAssert(currentSize <= ((IOSLongArray *) nil_chk(array))->size_, @"repackaged/com/android/internal/util/GrowingArrayUtils.java:151 condition failed: assert currentSize <= array.length;");
  
#line 153
  if (currentSize + 1 <= array->size_) {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(array, index, array, index + 1, currentSize - index);
    *IOSLongArray_GetRef(array, index) = element;
    return array;
  }
  
#line 159
  IOSLongArray *newArray = RepackagedComAndroidInternalUtilArrayUtils_newUnpaddedLongArrayWithInt_(RepackagedComAndroidInternalUtilGrowingArrayUtils_growSizeWithInt_(currentSize));
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(array, 0, newArray, 0, index);
  *IOSLongArray_GetRef(nil_chk(newArray), index) = element;
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(array, index, newArray, index + 1, array->size_ - index);
  return newArray;
}


#line 169
IOSBooleanArray *RepackagedComAndroidInternalUtilGrowingArrayUtils_insertWithBooleanArray_withInt_withInt_withBoolean_(IOSBooleanArray *array, jint currentSize, jint index, jboolean element) {
  RepackagedComAndroidInternalUtilGrowingArrayUtils_initialize();
  
#line 170
  NSCAssert(currentSize <= ((IOSBooleanArray *) nil_chk(array))->size_, @"repackaged/com/android/internal/util/GrowingArrayUtils.java:170 condition failed: assert currentSize <= array.length;");
  
#line 172
  if (currentSize + 1 <= array->size_) {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(array, index, array, index + 1, currentSize - index);
    *IOSBooleanArray_GetRef(array, index) = element;
    return array;
  }
  
#line 178
  IOSBooleanArray *newArray = RepackagedComAndroidInternalUtilArrayUtils_newUnpaddedBooleanArrayWithInt_(RepackagedComAndroidInternalUtilGrowingArrayUtils_growSizeWithInt_(currentSize));
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(array, 0, newArray, 0, index);
  *IOSBooleanArray_GetRef(nil_chk(newArray), index) = element;
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(array, index, newArray, index + 1, array->size_ - index);
  return newArray;
}

jint RepackagedComAndroidInternalUtilGrowingArrayUtils_growSizeWithInt_(jint currentSize) {
  RepackagedComAndroidInternalUtilGrowingArrayUtils_initialize();
  
#line 191
  return currentSize <= 4 ? 8 : currentSize * 2;
}


#line 195
void RepackagedComAndroidInternalUtilGrowingArrayUtils_init(RepackagedComAndroidInternalUtilGrowingArrayUtils *self) {
  (void) NSObject_init(self);
}


#line 195
RepackagedComAndroidInternalUtilGrowingArrayUtils *new_RepackagedComAndroidInternalUtilGrowingArrayUtils_init() {
  RepackagedComAndroidInternalUtilGrowingArrayUtils *self = [RepackagedComAndroidInternalUtilGrowingArrayUtils alloc];
  RepackagedComAndroidInternalUtilGrowingArrayUtils_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RepackagedComAndroidInternalUtilGrowingArrayUtils)
