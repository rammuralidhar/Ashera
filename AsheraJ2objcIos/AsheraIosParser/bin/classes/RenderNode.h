//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/androidlayouts/repackaged/android/view/RenderNode.java
//

#ifndef _RepackagedAndroidViewRenderNode_H_
#define _RepackagedAndroidViewRenderNode_H_

#include "J2ObjC_header.h"

@class RepackagedAndroidGraphicsMatrix;
@class RepackagedAndroidGraphicsOutline;
@class RepackagedAndroidGraphicsPaint;
@class RepackagedAndroidGraphicsRect;
@class RepackagedAndroidViewDisplayListCanvas;
@class RepackagedAndroidViewRenderNodeAnimator;
@class RepackagedAndroidViewView;

#define RepackagedAndroidViewRenderNode_FLAG_CLIP_CHILDREN 1
#define RepackagedAndroidViewRenderNode_STATUS_DONE 0
#define RepackagedAndroidViewRenderNode_STATUS_DRAW 1
#define RepackagedAndroidViewRenderNode_STATUS_INVOKE 2
#define RepackagedAndroidViewRenderNode_STATUS_DREW 4

/**
 @brief <p>A display list records a series of graphics related operations and can replay them later.
 Display lists are usually built by recording operations on a DisplayListCanvas . Replaying the operations from a display list avoids executing application code on every frame, and is thus much more efficient.</p> <p>Display lists are used internally for all views by default, and are not typically used directly. One reason to consider using a display is a custom View implementation that needs to issue a large number of drawing commands. When the view invalidates, all the drawing commands must be reissued, even if large portions of the drawing command stream stay the same frame to frame, which can become a performance bottleneck. To solve this issue, a custom View might split its content into several display lists. A display list is updated only when its content, and only its content, needs to be updated.</p> <p>A text editor might for instance store each paragraph into its own display list. Thus when the user inserts or removes characters, only the display list of the affected paragraph needs to be recorded again.</p> <h3>Hardware acceleration</h3> <p>Display lists can only be replayed using a DisplayListCanvas . They are not supported in software. Always make sure that the repackaged.android.graphics.Canvas you are using to render a display list is hardware accelerated using repackaged.android.graphics.Canvas#isHardwareAccelerated() .</p> <h3>Creating a display list</h3> <pre class="prettyprint"> HardwareRenderer renderer = myView.getHardwareRenderer(); if (renderer != null) { DisplayList displayList = renderer.createDisplayList(); DisplayListCanvas canvas = displayList.start(width, height); try { // Draw onto the canvas // For instance: canvas.drawBitmap(...); } finally { displayList.end(); } } </pre> <h3>Rendering a display list on a View</h3> <pre class="prettyprint"> protected void onDraw(Canvas canvas) { if (canvas.isHardwareAccelerated()) { DisplayListCanvas displayListCanvas = (DisplayListCanvas) canvas; displayListCanvas.drawDisplayList(mDisplayList); } } </pre> <h3>Releasing resources</h3> <p>This step is not mandatory but recommended if you want to release resources held by a display list as soon as possible.</p> <pre class="prettyprint"> // Mark this display list invalid, it cannot be used for drawing anymore, // and release resources held by this display list displayList.clear(); </pre> <h3>Properties</h3> <p>In addition, a display list offers several properties, such as #setScaleX(float) or #setLeft(int) , that can be used to affect all the drawing commands recorded within. For instance, these properties can be used to move around a large number of images without re-issuing all the individual <code>drawBitmap()</code> calls.</p> <pre class="prettyprint"> private void createDisplayList() { mDisplayList = DisplayList.create("MyDisplayList"); DisplayListCanvas canvas = mDisplayList.start(width, height); try { for (Bitmap b : mBitmaps) { canvas.drawBitmap(b, 0.0f, 0.0f, null); canvas.translate(0.0f, b.getHeight()); } } finally { displayList.end(); } } protected void onDraw(Canvas canvas) { if (canvas.isHardwareAccelerated()) { DisplayListCanvas displayListCanvas = (DisplayListCanvas) canvas; displayListCanvas.drawDisplayList(mDisplayList); } } private void moveContentBy(int x) { // This will move all the bitmaps recorded inside the display list // by x pixels to the right and redraw this view. All the commands // recorded in createDisplayList() won't be re-issued, only onDraw() // will be invoked and will execute very quickly mDisplayList.offsetLeftAndRight(x); invalidate(); } </pre> <h3>Threading</h3> <p>Display lists must be created on and manipulated from the UI thread only.</p>
 */
@interface RepackagedAndroidViewRenderNode : NSObject {
 @public
  jlong mNativeRenderNode_;
}

#pragma mark Public

- (void)addAnimatorWithRepackagedAndroidViewRenderNodeAnimator:(RepackagedAndroidViewRenderNodeAnimator *)animator;

/**
 @brief Adopts an existing native render node.
 Note: This will *NOT* incRef() on the native object, however it will decRef() when it is destroyed. The caller should have already incRef'd it
 */
+ (RepackagedAndroidViewRenderNode *)adoptWithLong:(jlong)nativePtr;

/**
 @brief Creates a new RenderNode that can be used to record batches of drawing operations, and store / apply render properties when drawn.
 @param name The name of the RenderNode, used for debugging purpose. May be null.
 @return A new RenderNode.
 */
+ (RepackagedAndroidViewRenderNode *)createWithNSString:(NSString *)name
                          withRepackagedAndroidViewView:(RepackagedAndroidViewView *)owningView;

/**
 @brief Reset native resources.
 This is called when cleaning up the state of display lists during destruction of hardware resources, to ensure that we do not hold onto obsolete resources after related resources are gone.
 */
- (void)destroyDisplayListData;

/**
 @brief Ends the recording for this display list.
 A display list cannot be replayed if recording is not finished. Calling this method marks the display list valid and #isValid() will return true.
 */
- (void)endWithRepackagedAndroidViewDisplayListCanvas:(RepackagedAndroidViewDisplayListCanvas *)canvas;

- (void)endAllAnimators;

/**
 @brief Returns the translucency level of this display list.
 @return A value between 0.0f and 1.0f
 */
- (jfloat)getAlpha;

/**
 @brief Returns the distance in Z of the camera of the display list.
 */
- (jfloat)getCameraDistance;

- (jboolean)getClipToOutline;

/**
 @brief Gets the size of the DisplayList for debug purposes.
 */
- (jint)getDebugSize;

- (jfloat)getElevation;

- (void)getInverseMatrixWithRepackagedAndroidGraphicsMatrix:(RepackagedAndroidGraphicsMatrix *)outMatrix;

- (void)getMatrixWithRepackagedAndroidGraphicsMatrix:(RepackagedAndroidGraphicsMatrix *)outMatrix;

/**
 @brief Returns the pivot value for this display list on the X axis, in pixels.
 */
- (jfloat)getPivotX;

/**
 @brief Returns the pivot value for this display list on the Y axis, in pixels.
 */
- (jfloat)getPivotY;

/**
 @brief Returns the rotation value for this display list around the Z axis, in degrees.
 */
- (jfloat)getRotation;

/**
 @brief Returns the rotation value for this display list around the X axis, in degrees.
 */
- (jfloat)getRotationX;

/**
 @brief Returns the rotation value for this display list around the Y axis, in degrees.
 */
- (jfloat)getRotationY;

/**
 @brief Returns the scale value for this display list on the X axis.
 */
- (jfloat)getScaleX;

/**
 @brief Returns the scale value for this display list on the Y axis.
 */
- (jfloat)getScaleY;

/**
 @brief Returns the translation value for this display list on the X axis, in pixels.
 */
- (jfloat)getTranslationX;

/**
 @brief Returns the translation value for this display list on the Y axis, in pixels.
 */
- (jfloat)getTranslationY;

/**
 @brief Returns the translation value for this display list on the Z axis.
 */
- (jfloat)getTranslationZ;

- (jboolean)hasIdentityMatrix;

/**
 @brief Indicates whether the content of this display list overlaps.
 @return True if this display list renders content which overlaps, false otherwise.
 */
- (jboolean)hasOverlappingRendering;

- (jboolean)hasShadow;

- (jboolean)isPivotExplicitlySet;

/**
 @brief Returns whether the RenderNode's display list content is currently usable.
 If this returns false, the display list should be re-recorded prior to replaying it.
 @return boolean true if the display list is able to be replayed, false otherwise.
 */
- (jboolean)isValid;

/**
 @brief Offsets the left and right positions for the display list
 @param offset The amount that the left and right positions of the display list are offset, in pixels
 */
- (jboolean)offsetLeftAndRightWithInt:(jint)offset;

/**
 @brief Offsets the top and bottom values for the display list
 @param offset The amount that the top and bottom positions of the display list are offset, in pixels
 */
- (jboolean)offsetTopAndBottomWithInt:(jint)offset;

/**
 @brief Outputs the display list to the log.
 This method exists for use by tools to output display lists for selected nodes to the log.
 */
- (void)output;

/**
 @brief Sets the translucency level for the display list.
 @param alpha The translucency of the display list, must be a value between 0.0f and 1.0f
 */
- (jboolean)setAlphaWithFloat:(jfloat)alpha;

/**
 @brief Set the Animation matrix on the display list.
 This matrix exists if an Animation is currently playing on a View, and is set on the display list during at draw() time. When the Animation finishes, the matrix should be cleared by sending <code>null</code> for the matrix parameter.
 @param matrix The matrix, null indicates that the matrix should be cleared.
 */
- (jboolean)setAnimationMatrixWithRepackagedAndroidGraphicsMatrix:(RepackagedAndroidGraphicsMatrix *)matrix;

/**
 @brief Sets the bottom position for the display list.
 @param bottom The bottom position, in pixels, of the display list
 */
- (jboolean)setBottomWithInt:(jint)bottom;

/**
 @brief Sets the camera distance for the display list.
 Refer to View#setCameraDistance(float) for more information on how to use this property.
 @param distance The distance in Z of the camera of the display list
 */
- (jboolean)setCameraDistanceWithFloat:(jfloat)distance;

- (jboolean)setClipBoundsWithRepackagedAndroidGraphicsRect:(RepackagedAndroidGraphicsRect *)rect;

/**
 @brief Set whether the Render node should clip itself to its bounds.
 This property is controlled by the view's parent.
 @param clipToBounds true if the display list should clip to its bounds
 */
- (jboolean)setClipToBoundsWithBoolean:(jboolean)clipToBounds;

/**
 @brief Enables or disables clipping to the outline.
 @param clipToOutline true if clipping to the outline.
 */
- (jboolean)setClipToOutlineWithBoolean:(jboolean)clipToOutline;

- (jboolean)setElevationWithFloat:(jfloat)lift;

/**
 @brief Sets whether the display list renders content which overlaps.
 Non-overlapping rendering can use a fast path for alpha that avoids rendering to an offscreen buffer. By default display lists consider they do not have overlapping content.
 @param hasOverlappingRendering False if the content is guaranteed to be non-overlapping, true otherwise.
 */
- (jboolean)setHasOverlappingRenderingWithBoolean:(jboolean)hasOverlappingRendering;

- (jboolean)setLayerPaintWithRepackagedAndroidGraphicsPaint:(RepackagedAndroidGraphicsPaint *)paint;

- (jboolean)setLayerTypeWithInt:(jint)layerType;

/**
 @brief Sets the left position for the display list.
 @param left The left position, in pixels, of the display list
 */
- (jboolean)setLeftWithInt:(jint)left;

/**
 @brief Sets the left and top positions for the display list
 @param left The left position of the display list, in pixels
 @param top The top position of the display list, in pixels
 @param right The right position of the display list, in pixels
 @param bottom The bottom position of the display list, in pixels
 */
- (jboolean)setLeftTopRightBottomWithInt:(jint)left
                                 withInt:(jint)top
                                 withInt:(jint)right
                                 withInt:(jint)bottom;

/**
 @brief Sets the outline, defining the shape that casts a shadow, and the path to be clipped if setClipToOutline is set.
 Deep copies the data into native to simplify reference ownership.
 */
- (jboolean)setOutlineWithRepackagedAndroidGraphicsOutline:(RepackagedAndroidGraphicsOutline *)outline;

/**
 @brief Sets the pivot value for the display list on the X axis
 @param pivotX The pivot value of the display list on the X axis, in pixels
 */
- (jboolean)setPivotXWithFloat:(jfloat)pivotX;

/**
 @brief Sets the pivot value for the display list on the Y axis
 @param pivotY The pivot value of the display list on the Y axis, in pixels
 */
- (jboolean)setPivotYWithFloat:(jfloat)pivotY;

/**
 @brief Sets whether the display list should be drawn immediately after the closest ancestor display list containing a projection receiver.
 @param shouldProject true if the display list should be projected onto a containing volume.
 */
- (jboolean)setProjectBackwardsWithBoolean:(jboolean)shouldProject;

/**
 @brief Sets whether the display list is a projection receiver - that its parent DisplayList should draw any descendent DisplayLists with ProjectBackwards=true directly on top of it.
 Default value is false.
 */
- (jboolean)setProjectionReceiverWithBoolean:(jboolean)shouldRecieve;

/**
 @brief Controls the RenderNode's circular reveal clip.
 */
- (jboolean)setRevealClipWithBoolean:(jboolean)shouldClip
                           withFloat:(jfloat)x
                           withFloat:(jfloat)y
                           withFloat:(jfloat)radius;

/**
 @brief Sets the right position for the display list.
 @param right The right position, in pixels, of the display list
 */
- (jboolean)setRightWithInt:(jint)right;

/**
 @brief Sets the rotation value for the display list around the Z axis.
 @param rotation The rotation value of the display list, in degrees
 */
- (jboolean)setRotationWithFloat:(jfloat)rotation;

/**
 @brief Sets the rotation value for the display list around the X axis.
 @param rotationX The rotation value of the display list, in degrees
 */
- (jboolean)setRotationXWithFloat:(jfloat)rotationX;

/**
 @brief Sets the rotation value for the display list around the Y axis.
 @param rotationY The rotation value of the display list, in degrees
 */
- (jboolean)setRotationYWithFloat:(jfloat)rotationY;

/**
 @brief Sets the scale value for the display list on the X axis.
 @param scaleX The scale value of the display list
 */
- (jboolean)setScaleXWithFloat:(jfloat)scaleX;

/**
 @brief Sets the scale value for the display list on the Y axis.
 @param scaleY The scale value of the display list
 */
- (jboolean)setScaleYWithFloat:(jfloat)scaleY;

/**
 @brief Set the static matrix on the display list.
 The specified matrix is combined with other transforms (such as #setScaleX(float) , #setRotation(float) , etc.)
 @param matrix A transform matrix to apply to this display list
 */
- (jboolean)setStaticMatrixWithRepackagedAndroidGraphicsMatrix:(RepackagedAndroidGraphicsMatrix *)matrix;

/**
 @brief Sets the top position for the display list.
 @param top The top position, in pixels, of the display list
 */
- (jboolean)setTopWithInt:(jint)top;

/**
 @brief Sets the translation value for the display list on the X axis.
 @param translationX The X axis translation value of the display list, in pixels
 */
- (jboolean)setTranslationXWithFloat:(jfloat)translationX;

/**
 @brief Sets the translation value for the display list on the Y axis.
 @param translationY The Y axis translation value of the display list, in pixels
 */
- (jboolean)setTranslationYWithFloat:(jfloat)translationY;

/**
 @brief Sets the translation value for the display list on the Z axis.
 */
- (jboolean)setTranslationZWithFloat:(jfloat)translationZ;

/**
 @brief Starts recording a display list for the render node.
 All operations performed on the returned canvas are recorded and stored in this display list. Calling this method will mark the render node invalid until #end(DisplayListCanvas) is called. Only valid render nodes can be replayed.
 @param width The width of the recording viewport
 @param height The height of the recording viewport
 @return A canvas to record drawing operations.
 */
- (RepackagedAndroidViewDisplayListCanvas *)startWithInt:(jint)width
                                                 withInt:(jint)height;

#pragma mark Protected

- (void)dealloc;

#pragma mark Package-Private

- (jlong)getNativeDisplayList;

@end

J2OBJC_EMPTY_STATIC_INIT(RepackagedAndroidViewRenderNode)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewRenderNode, FLAG_CLIP_CHILDREN, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewRenderNode, STATUS_DONE, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewRenderNode, STATUS_DRAW, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewRenderNode, STATUS_INVOKE, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewRenderNode, STATUS_DREW, jint)

FOUNDATION_EXPORT RepackagedAndroidViewRenderNode *RepackagedAndroidViewRenderNode_createWithNSString_withRepackagedAndroidViewView_(NSString *name, RepackagedAndroidViewView *owningView);

FOUNDATION_EXPORT RepackagedAndroidViewRenderNode *RepackagedAndroidViewRenderNode_adoptWithLong_(jlong nativePtr);

J2OBJC_TYPE_LITERAL_HEADER(RepackagedAndroidViewRenderNode)

#endif // _RepackagedAndroidViewRenderNode_H_
