//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/androidlayouts/repackaged/android/view/ViewGroup.java
//

#ifndef _RepackagedAndroidViewViewGroup_H_
#define _RepackagedAndroidViewViewGroup_H_

#include "J2ObjC_header.h"
#include "View.h"
#include "ViewManager.h"
#include "ViewParent.h"
#include "java/lang/Comparable.h"

@class IOSFloatArray;
@class IOSIntArray;
@class JavaUtilArrayList;
@class RepackagedAndroidAnimationLayoutTransition;
@class RepackagedAndroidGraphicsBitmap;
@class RepackagedAndroidGraphicsBitmap_Config;
@class RepackagedAndroidGraphicsCanvas;
@class RepackagedAndroidGraphicsInsets;
@class RepackagedAndroidGraphicsPaint;
@class RepackagedAndroidGraphicsPoint;
@class RepackagedAndroidGraphicsPointF;
@class RepackagedAndroidGraphicsRect;
@class RepackagedAndroidGraphicsRectF;
@class RepackagedAndroidGraphicsRegion;
@class RepackagedAndroidOsBundle;
@class RepackagedAndroidUtilSparseArray;
@class RepackagedAndroidViewAccessibilityAccessibilityEvent;
@class RepackagedAndroidViewAccessibilityAccessibilityNodeInfo;
@class RepackagedAndroidViewActionMode;
@class RepackagedAndroidViewAnimationAnimation_AnimationListener;
@class RepackagedAndroidViewAnimationLayoutAnimationController;
@class RepackagedAndroidViewAnimationLayoutAnimationController_AnimationParameters;
@class RepackagedAndroidViewAnimationTransformation;
@class RepackagedAndroidViewDragEvent;
@class RepackagedAndroidViewKeyEvent;
@class RepackagedAndroidViewMotionEvent;
@class RepackagedAndroidViewViewGroupOverlay;
@class RepackagedAndroidViewViewGroup_LayoutParams;
@class RepackagedAndroidViewViewStructure;
@class RepackagedAndroidViewWindowInsets;
@protocol JavaLangCharSequence;
@protocol JavaUtilList;
@protocol JavaUtilMap;
@protocol RepackagedAndroidContentContext;
@protocol RepackagedAndroidContentIntent;
@protocol RepackagedAndroidContentResConfiguration;
@protocol RepackagedAndroidContentResTypedArray;
@protocol RepackagedAndroidUtilAttributeSet;
@protocol RepackagedAndroidViewActionMode_Callback;
@protocol RepackagedAndroidViewAnimationAnimation;
@protocol RepackagedAndroidViewViewGroup_OnHierarchyChangeListener;
@protocol RepackagedAndroidViewViewHierarchyEncoder;
@protocol RepackagedComAndroidInternalUtilPredicate;

#define RepackagedAndroidViewViewGroup_FLAG_CLIP_CHILDREN 1
#define RepackagedAndroidViewViewGroup_FLAG_INVALIDATE_REQUIRED 4
#define RepackagedAndroidViewViewGroup_FLAG_ANIMATION_DONE 16
#define RepackagedAndroidViewViewGroup_FLAG_OPTIMIZE_INVALIDATE 128
#define RepackagedAndroidViewViewGroup_FLAG_CLEAR_TRANSFORMATION 256
#define RepackagedAndroidViewViewGroup_FLAG_USE_CHILD_DRAWING_ORDER 1024
#define RepackagedAndroidViewViewGroup_FLAG_SUPPORT_STATIC_TRANSFORMATIONS 2048
#define RepackagedAndroidViewViewGroup_FOCUS_BEFORE_DESCENDANTS 131072
#define RepackagedAndroidViewViewGroup_FOCUS_AFTER_DESCENDANTS 262144
#define RepackagedAndroidViewViewGroup_FOCUS_BLOCK_DESCENDANTS 393216
#define RepackagedAndroidViewViewGroup_FLAG_DISALLOW_INTERCEPT 524288
#define RepackagedAndroidViewViewGroup_FLAG_IS_TRANSITION_GROUP 16777216
#define RepackagedAndroidViewViewGroup_FLAG_IS_TRANSITION_GROUP_SET 33554432
#define RepackagedAndroidViewViewGroup_FLAG_TOUCHSCREEN_BLOCKS_FOCUS 67108864
#define RepackagedAndroidViewViewGroup_PERSISTENT_NO_CACHE 0
#define RepackagedAndroidViewViewGroup_PERSISTENT_ANIMATION_CACHE 1
#define RepackagedAndroidViewViewGroup_PERSISTENT_SCROLLING_CACHE 2
#define RepackagedAndroidViewViewGroup_PERSISTENT_ALL_CACHES 3
#define RepackagedAndroidViewViewGroup_LAYOUT_MODE_CLIP_BOUNDS 0
#define RepackagedAndroidViewViewGroup_LAYOUT_MODE_OPTICAL_BOUNDS 1
#define RepackagedAndroidViewViewGroup_CLIP_TO_PADDING_MASK 34

/**
 @brief <p> A <code>ViewGroup</code> is a special view that can contain other views (called children.)
 The view group is the base class for layouts and views containers. This class also defines the repackaged.android.view.ViewGroup.LayoutParams class which serves as the base class for layouts parameters. </p> <p> Also see LayoutParams for layout attributes. </p> <div class="special reference"> <h3>Developer Guides</h3> <p>For more information about creating user interface layouts, read the <a href="  guide/topics/ui/declaring-layout.html">XML Layouts</a> developer guide.</p></div> <p>Here is a complete implementation of a custom ViewGroup that implements a simple repackaged.android.widget.FrameLayout along with the ability to stack children in left and right gutters.</p> development/samples/ApiDemos/src/com/example/android/apis/view/CustomLayout.java Complete <p>If you are implementing XML layout attributes as shown in the example, this is the corresponding definition for them that would go in <code>res/values/attrs.xml</code>:</p> development/samples/ApiDemos/res/values/attrs.xml CustomLayout <p>Finally the layout manager can be used in an XML layout like so:</p> development/samples/ApiDemos/res/layout/custom_layout.xml Complete
 ref android.R.styleable#ViewGroup_clipChildren
 ref android.R.styleable#ViewGroup_clipToPadding
 ref android.R.styleable#ViewGroup_layoutAnimation
 ref android.R.styleable#ViewGroup_animationCache
 ref android.R.styleable#ViewGroup_persistentDrawingCache
 ref android.R.styleable#ViewGroup_alwaysDrawnWithCache
 ref android.R.styleable#ViewGroup_addStatesFromChildren
 ref android.R.styleable#ViewGroup_descendantFocusability
 ref android.R.styleable#ViewGroup_animateLayoutChanges
 ref android.R.styleable#ViewGroup_splitMotionEvents
 ref android.R.styleable#ViewGroup_layoutMode
 */
@interface RepackagedAndroidViewViewGroup : RepackagedAndroidViewView < RepackagedAndroidViewViewParent, RepackagedAndroidViewViewManager > {
 @public
  /**
   @brief Views which have been hidden or removed which need to be animated on their way out.
   This field should be made private, so it is hidden from the SDK.
   */
  JavaUtilArrayList *mDisappearingChildren_;
  /**
   @brief Listener used to propagate events indicating when children are added and/or removed from a view group.
   This field should be made private, so it is hidden from the SDK.
   */
  id<RepackagedAndroidViewViewGroup_OnHierarchyChangeListener> mOnHierarchyChangeListener_;
  /**
   @brief Used to track the current invalidation region.
   */
  RepackagedAndroidGraphicsRectF *mInvalidateRegion_;
  /**
   @brief A Transformation used to calculate a correct invalidation area when the application is autoscaled.
   */
  RepackagedAndroidViewAnimationTransformation *mInvalidationTransformation_;
  /**
   @brief Internal flags.
   This field should be made private, so it is hidden from the SDK.
   */
  jint mGroupFlags_;
  /**
   @brief Indicates which types of drawing caches are to be kept in memory.
   This field should be made private, so it is hidden from the SDK.
   */
  jint mPersistentDrawingCache_;
  jboolean mSuppressLayout_;
  RepackagedAndroidGraphicsPaint *mCachePaint_;
}

#pragma mark Public

- (instancetype)initWithRepackagedAndroidContentContext:(id<RepackagedAndroidContentContext>)context;

- (instancetype)initWithRepackagedAndroidContentContext:(id<RepackagedAndroidContentContext>)context
                  withRepackagedAndroidUtilAttributeSet:(id<RepackagedAndroidUtilAttributeSet>)attrs;

- (instancetype)initWithRepackagedAndroidContentContext:(id<RepackagedAndroidContentContext>)context
                  withRepackagedAndroidUtilAttributeSet:(id<RepackagedAndroidUtilAttributeSet>)attrs
                                                withInt:(jint)defStyleAttr;

- (instancetype)initWithRepackagedAndroidContentContext:(id<RepackagedAndroidContentContext>)context
                  withRepackagedAndroidUtilAttributeSet:(id<RepackagedAndroidUtilAttributeSet>)attrs
                                                withInt:(jint)defStyleAttr
                                                withInt:(jint)defStyleRes;

- (void)addChildrenForAccessibilityWithJavaUtilArrayList:(JavaUtilArrayList *)outChildren;

/**
 
 */
- (void)addFocusablesWithJavaUtilArrayList:(JavaUtilArrayList *)views
                                   withInt:(jint)direction
                                   withInt:(jint)focusableMode;

/**
 @brief Returns whether this ViewGroup's drawable states also include its children's drawable states.
 This is used, for example, to make a group appear to be focused when its child EditText or button is focused.
 */
- (jboolean)addStatesFromChildren;

/**
 
 */
- (void)addTouchablesWithJavaUtilArrayList:(JavaUtilArrayList *)views;

/**
 @brief This method adds a view to this container at the specified index purely for the purposes of allowing that view to draw even though it is not a normal child of the container.
 That is, the view does not participate in layout, focus, accessibility, input, or other normal view operations; it is purely an item to be drawn during the normal rendering operation of this container. The index that it is added at is the order in which it will be drawn, with respect to the other views in the container. For example, a transient view added at index 0 will be drawn before all other views in the container because it will be drawn first (including before any real view at index 0). There can be more than one transient view at any particular index; these views will be drawn in the order in which they were added to the list of transient views. The index of transient views can also be greater than the number of normal views in the container; that just means that they will be drawn after all other views are drawn. <p>Note that since transient views do not participate in layout, they must be sized manually or, more typically, they should just use the size that they had before they were removed from their container.</p> <p>Transient views are useful for handling animations of views that have been removed from the container, but which should be animated out after the removal. Adding these views as transient views allows them to participate in drawing without side-effecting the layout of the container.</p> <p>Transient views must always be explicitly #removeTransientView(View) removed from the container when they are no longer needed. For example, a transient view which is added in order to fade it out in its old location should be removed once the animation is complete.</p>
 @param view The view to be added
 @param index The index at which this view should be drawn, must be >= 0. This value is relative to the #getChildAt(int) index values in the normal child list of this container, where any transient view at a particular index will be drawn before any normal child at that same index.
 */
- (void)addTransientViewWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)view
                                              withInt:(jint)index;

/**
 @brief <p>Adds a child view.
 If no layout parameters are already set on the child, the default parameters for this ViewGroup are set on the child.</p> <p><strong>Note:</strong> do not invoke this method from #draw(repackaged.android.graphics.Canvas) , #onDraw(repackaged.android.graphics.Canvas) , #dispatchDraw(repackaged.android.graphics.Canvas) or any related method.</p>
 @param child the child view to add
 */
- (void)addViewWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)child;

/**
 @brief Adds a child view.
 If no layout parameters are already set on the child, the default parameters for this ViewGroup are set on the child. <p><strong>Note:</strong> do not invoke this method from #draw(repackaged.android.graphics.Canvas) , #onDraw(repackaged.android.graphics.Canvas) , #dispatchDraw(repackaged.android.graphics.Canvas) or any related method.</p>
 @param child the child view to add
 @param index the position at which to add the child
 */
- (void)addViewWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)child
                                     withInt:(jint)index;

/**
 @brief Adds a child view with this ViewGroup's default layout parameters and the specified width and height.
 <p><strong>Note:</strong> do not invoke this method from #draw(repackaged.android.graphics.Canvas) , #onDraw(repackaged.android.graphics.Canvas) , #dispatchDraw(repackaged.android.graphics.Canvas) or any related method.</p>
 @param child the child view to add
 */
- (void)addViewWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)child
                                     withInt:(jint)width
                                     withInt:(jint)height;

/**
 @brief Adds a child view with the specified layout parameters.
 <p><strong>Note:</strong> do not invoke this method from #draw(repackaged.android.graphics.Canvas) , #onDraw(repackaged.android.graphics.Canvas) , #dispatchDraw(repackaged.android.graphics.Canvas) or any related method.</p>
 @param child the child view to add
 @param index the position at which to add the child or -1 to add last
 @param params the layout parameters to set on the child
 */
- (void)addViewWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)child
                                     withInt:(jint)index
withRepackagedAndroidViewViewGroup_LayoutParams:(RepackagedAndroidViewViewGroup_LayoutParams *)params;

/**
 @brief Adds a child view with the specified layout parameters.
 <p><strong>Note:</strong> do not invoke this method from #draw(repackaged.android.graphics.Canvas) , #onDraw(repackaged.android.graphics.Canvas) , #dispatchDraw(repackaged.android.graphics.Canvas) or any related method.</p>
 @param child the child view to add
 @param params the layout parameters to set on the child
 */
- (void)addViewWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)child
withRepackagedAndroidViewViewGroup_LayoutParams:(RepackagedAndroidViewViewGroup_LayoutParams *)params;

/**
 
 */
- (void)bringChildToFrontWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)child;

/**
 */
- (void)captureTransitioningViewsWithJavaUtilList:(id<JavaUtilList>)transitioningViews;

/**
 @brief If #addStatesFromChildren is true, refreshes this group's drawable state (to include the states from its children).
 */
- (void)childDrawableStateChangedWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)child;

/**
 @brief Called when a child view has changed whether or not it is tracking transient state.
 */
- (void)childHasTransientStateChangedWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)child
                                                       withBoolean:(jboolean)childHasTransientState;

/**
 
 */
- (void)clearChildFocusWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)child;

/**
 @brief Removes any pending animations for views that have been removed.
 Call this if you don't want animations for exiting views to stack up.
 */
- (void)clearDisappearingChildren;

/**
 
 */
- (void)clearFocus;

/**
 @brief Quick invalidation method called by View.invalidateViewProperty.
 This doesn't set the DRAWN flags and doesn't handle the Animation logic that the default invalidation methods do; all we want to do here is schedule a traversal with the appropriate dirty rect.
 */
- (void)damageChildWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)child
               withRepackagedAndroidGraphicsRect:(RepackagedAndroidGraphicsRect *)dirty;

/**
 @brief Native-calculated damage path Returns false if this path was unable to complete successfully.
 This means it hit a ViewParent it doesn't recognize and needs to fall back to calculating damage area
 */
- (jboolean)damageChildDeferredWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)child;

/**
 */
- (jboolean)dispatchActivityResultWithNSString:(NSString *)who
                                       withInt:(jint)requestCode
                                       withInt:(jint)resultCode
            withRepackagedAndroidContentIntent:(id<RepackagedAndroidContentIntent>)data;

- (RepackagedAndroidViewWindowInsets *)dispatchApplyWindowInsetsWithRepackagedAndroidViewWindowInsets:(RepackagedAndroidViewWindowInsets *)insets;

/**
 
 */
- (void)dispatchConfigurationChangedWithRepackagedAndroidContentResConfiguration:(id<RepackagedAndroidContentResConfiguration>)newConfig;

/**
 
 */
- (void)dispatchDisplayHintWithInt:(jint)hint;

/**
 
 */
- (jboolean)dispatchDragEventWithRepackagedAndroidViewDragEvent:(RepackagedAndroidViewDragEvent *)event;

/**
 @brief Dispatches drawable hotspot changes to child views that meet at least one of the following criteria: <ul> <li>Returns <code>false</code> from both View#isClickable() and View#isLongClickable() </li> <li>Requests duplication of parent state via View#setDuplicateParentStateEnabled(boolean) </li> </ul>
 @param x hotspot x coordinate
 @param y hotspot y coordinate
 */
- (void)dispatchDrawableHotspotChangedWithFloat:(jfloat)x
                                      withFloat:(jfloat)y;

/**
 
 */
- (void)dispatchFinishTemporaryDetach;

/**
 
 */
- (jboolean)dispatchKeyEventWithRepackagedAndroidViewKeyEvent:(RepackagedAndroidViewKeyEvent *)event;

/**
 
 */
- (jboolean)dispatchKeyEventPreImeWithRepackagedAndroidViewKeyEvent:(RepackagedAndroidViewKeyEvent *)event;

/**
 
 */
- (jboolean)dispatchKeyShortcutEventWithRepackagedAndroidViewKeyEvent:(RepackagedAndroidViewKeyEvent *)event;

/**
 */
- (jboolean)dispatchPopulateAccessibilityEventInternalWithRepackagedAndroidViewAccessibilityAccessibilityEvent:(RepackagedAndroidViewAccessibilityAccessibilityEvent *)event;

/**
 @brief Dispatch creation of ViewStructure down the hierarchy.
 This implementation adds in all child views of the view group, in addition to calling the default View implementation.
 */
- (void)dispatchProvideStructureWithRepackagedAndroidViewViewStructure:(RepackagedAndroidViewViewStructure *)structure;

/**
 
 */
- (void)dispatchSetActivatedWithBoolean:(jboolean)activated;

/**
 
 */
- (void)dispatchSetSelectedWithBoolean:(jboolean)selected;

/**
 
 */
- (void)dispatchStartTemporaryDetach;

- (void)dispatchSystemUiVisibilityChangedWithInt:(jint)visible;

/**
 
 */
- (jboolean)dispatchTouchEventWithRepackagedAndroidViewMotionEvent:(RepackagedAndroidViewMotionEvent *)ev;

/**
 
 */
- (jboolean)dispatchTrackballEventWithRepackagedAndroidViewMotionEvent:(RepackagedAndroidViewMotionEvent *)event;

/**
 
 */
- (jboolean)dispatchUnhandledMoveWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)focused
                                                       withInt:(jint)direction;

/**
 
 */
- (void)dispatchWindowFocusChangedWithBoolean:(jboolean)hasFocus;

- (void)dispatchWindowSystemUiVisiblityChangedWithInt:(jint)visible;

/**
 
 */
- (void)dispatchWindowVisibilityChangedWithInt:(jint)visibility;

/**
 @brief This method should always be called following an earlier call to #startViewTransition(View) .
 The given View is finally removed from its parent and will no longer be displayed. Note that this method does not perform the functionality of removing a view from its parent; it just discontinues the display of a View that has previously been removed.
 @return view The View object that has been removed but is being kept around in the visible hierarchy by an earlier call to #startViewTransition(View) .
 */
- (void)endViewTransitionWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)view;

- (RepackagedAndroidViewView *)findFocus;

/**
 */
- (void)findNamedViewsWithJavaUtilMap:(id<JavaUtilMap>)namedElements;

/**
 */
- (RepackagedAndroidViewView *)findViewByAccessibilityIdTraversalWithInt:(jint)accessibilityId;

- (void)findViewsWithTextWithJavaUtilArrayList:(JavaUtilArrayList *)outViews
                      withJavaLangCharSequence:(id<JavaLangCharSequence>)text
                                       withInt:(jint)flags;

/**
 
 */
- (void)focusableViewAvailableWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)v;

/**
 @brief Find the nearest view in the specified direction that wants to take focus.
 @param focused The view that currently has focus
 @param direction One of FOCUS_UP, FOCUS_DOWN, FOCUS_LEFT, and FOCUS_RIGHT, or 0 for not applicable.
 */
- (RepackagedAndroidViewView *)focusSearchWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)focused
                                                                withInt:(jint)direction;

/**
 
 */
- (jboolean)gatherTransparentRegionWithRepackagedAndroidGraphicsRegion:(RepackagedAndroidGraphicsRegion *)region;

/**
 @brief Returns a new set of layout parameters based on the supplied attributes set.
 @param attrs the attributes to build the layout parameters from
 @return an instance of repackaged.android.view.ViewGroup.LayoutParams or one of its descendants
 */
- (RepackagedAndroidViewViewGroup_LayoutParams *)generateLayoutParamsWithRepackagedAndroidUtilAttributeSet:(id<RepackagedAndroidUtilAttributeSet>)attrs;

- (id<JavaLangCharSequence>)getAccessibilityClassName;

/**
 @brief Returns the view at the specified position in the group.
 @param index the position at which to get the view from
 @return the view at the specified position or null if the position does not exist within the group
 */
- (RepackagedAndroidViewView *)getChildAtWithInt:(jint)index;

/**
 @brief Returns the number of children in the group.
 @return a positive integer representing the number of children in the group
 */
- (jint)getChildCount;

/**
 @brief Does the hard part of measureChildren: figuring out the MeasureSpec to pass to a particular child.
 This method figures out the right MeasureSpec for one dimension (height or width) of one child view. The goal is to combine information from our MeasureSpec with the LayoutParams of the child to get the best possible results. For example, if the this view knows its size (because its MeasureSpec has a mode of EXACTLY), and the child has indicated in its LayoutParams that it wants to be the same size as the parent, the parent should ask the child to layout given an exact size.
 @param spec The requirements for this view
 @param padding The padding of this view for the current dimension and margins, if applicable
 @param childDimension How big the child wants to be in the current dimension
 @return a MeasureSpec integer for the child
 */
+ (jint)getChildMeasureSpecWithInt:(jint)spec
                           withInt:(jint)padding
                           withInt:(jint)childDimension;

/**
 
 */
- (jboolean)getChildVisibleRectWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)child
                           withRepackagedAndroidGraphicsRect:(RepackagedAndroidGraphicsRect *)r
                          withRepackagedAndroidGraphicsPoint:(RepackagedAndroidGraphicsPoint *)offset;

/**
 @brief Returns whether this group's children are clipped to their bounds before drawing.
 The default value is true.
 @return True if the group's children will be clipped to their bounds, false otherwise.
 */
- (jboolean)getClipChildren;

/**
 @brief Returns whether this ViewGroup will clip its children to its padding, and resize (but not clip) any EdgeEffect to the padded region, if padding is present.
 <p> By default, children are clipped to the padding of their parent Viewgroup. This clipping behavior is only enabled if padding is non-zero.
 @return true if this ViewGroup clips children to its padding and resizes (but doesn't clip) any EdgeEffect to the padded region, false otherwise.
 ref android.R.styleable#ViewGroup_clipToPadding
 */
- (jboolean)getClipToPadding;

/**
 @brief Gets the descendant focusability of this view group.
 The descendant focusability defines the relationship between this view group and its descendants when looking for a view to take focus in #requestFocus(int,repackaged.android.graphics.Rect) .
 @return one of #FOCUS_BEFORE_DESCENDANTS , #FOCUS_AFTER_DESCENDANTS , #FOCUS_BLOCK_DESCENDANTS .
 */
- (jint)getDescendantFocusability;

/**
 @brief Returns the focused child of this view, if any.
 The child may have focus or contain focus.
 @return the focused child or null.
 */
- (RepackagedAndroidViewView *)getFocusedChild;

/**
 @brief Returns the layout animation controller used to animate the group's children.
 @return the current animation controller
 */
- (RepackagedAndroidViewAnimationLayoutAnimationController *)getLayoutAnimation;

/**
 @brief Returns the animation listener to which layout animation events are sent.
 @return an repackaged.android.view.animation.Animation.AnimationListener
 */
- (RepackagedAndroidViewAnimationAnimation_AnimationListener *)getLayoutAnimationListener;

/**
 @brief Returns the basis of alignment during layout operations on this ViewGroup: either #LAYOUT_MODE_CLIP_BOUNDS or #LAYOUT_MODE_OPTICAL_BOUNDS .
 <p> If no layoutMode was explicitly set, either programmatically or in an XML resource, the method returns the layoutMode of the view's parent ViewGroup if such a parent exists, otherwise the method returns a default value of #LAYOUT_MODE_CLIP_BOUNDS .
 @return the layout mode to use during layout operations
 */
- (jint)getLayoutMode;

/**
 @brief Gets the LayoutTransition object for this ViewGroup.
 If the LayoutTransition object is not null, changes in layout which occur because of children being added to or removed from the ViewGroup will be animated according to the animations defined in that LayoutTransition object. By default, the transition object is null (so layout changes are not animated).
 @return LayoutTranstion The LayoutTransition object that will animated changes in layout. A value of <code>null</code> means no transition will run on layout changes.
 */
- (RepackagedAndroidAnimationLayoutTransition *)getLayoutTransition;

/**
 @brief Return the current axes of nested scrolling for this ViewGroup.
 <p>A ViewGroup returning something other than #SCROLL_AXIS_NONE is currently acting as a nested scrolling parent for one or more descendant views in the hierarchy.</p>
 @return Flags indicating the current axes of nested scrolling
 */
- (jint)getNestedScrollAxes;

/**
 @brief Returns the ViewGroupOverlay for this view group, creating it if it does not yet exist.
 In addition to ViewOverlay 's support for drawables, ViewGroupOverlay allows views to be added to the overlay. These views, like overlay drawables, are visual-only; they do not receive input events and should not be used as anything other than a temporary representation of a view in a parent container, such as might be used by an animation effect. <p>Note: Overlays do not currently work correctly with SurfaceView or TextureView ; contents in overlays for these types of views may not display correctly.</p>
 @return The ViewGroupOverlay object for this view.
 */
- (RepackagedAndroidViewViewGroupOverlay *)getOverlay;

/**
 @brief Returns an integer indicating what types of drawing caches are kept in memory.
 @return one or a combination of #PERSISTENT_NO_CACHE , #PERSISTENT_ANIMATION_CACHE , #PERSISTENT_SCROLLING_CACHE and #PERSISTENT_ALL_CACHES
 */
- (jint)getPersistentDrawingCache;

/**
 @brief Check whether this ViewGroup should ignore focus requests for itself and its children.
 */
- (jboolean)getTouchscreenBlocksFocus;

/**
 @brief Given a valid position within the list of transient views, returns the transient view at that position.
 @param position The position of the view being queried. Must be at least 0 and less than the value returned by #getTransientViewCount() .
 @return The transient view stored in the given position if the position is valid, otherwise null
 */
- (RepackagedAndroidViewView *)getTransientViewWithInt:(jint)position;

/**
 @brief Returns the number of transient views in this container.
 Specific transient views and the index at which they were added can be retrieved via #getTransientView(int) and #getTransientViewIndex(int) .
 @return The number of transient views in this container
 */
- (jint)getTransientViewCount;

/**
 @brief Given a valid position within the list of transient views, returns the index of the transient view at that position.
 @param position The position of the index being queried. Must be at least 0 and less than the value returned by #getTransientViewCount() .
 @return The index of the transient view stored in the given position if the position is valid, otherwise -1
 */
- (jint)getTransientViewIndexWithInt:(jint)position;

/**
 @brief Returns true if this view has or contains focus
 @return true if this view has or contains focus
 */
- (jboolean)hasFocus;

/**
 
 */
- (jboolean)hasFocusable;

- (jboolean)hasTransientState;

/**
 @brief Returns the position in the group of the specified child view.
 @param child the view for which to get the position
 @return a positive integer representing the position of the view in the group, or -1 if the view does not exist in the group
 */
- (jint)indexOfChildWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)child;

/**
 @brief Don't call or override this method.
 It is used for the implementation of the view hierarchy.
 */
- (void)invalidateChildWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)child
                   withRepackagedAndroidGraphicsRect:(RepackagedAndroidGraphicsRect *)dirty;

/**
 @brief Don't call or override this method.
 It is used for the implementation of the view hierarchy. This implementation returns null if this ViewGroup does not have a parent, if this ViewGroup is already fully invalidated or if the dirty rectangle does not intersect with this ViewGroup's bounds.
 */
- (id<RepackagedAndroidViewViewParent>)invalidateChildInParentWithIntArray:(IOSIntArray *)location
                                         withRepackagedAndroidGraphicsRect:(RepackagedAndroidGraphicsRect *)dirty;

/**
 @brief Indicates whether this ViewGroup will always try to draw its children using their drawing cache.
 By default this property is enabled.
 @return true if the animation cache is enabled, false otherwise
 */
- (jboolean)isAlwaysDrawnWithCacheEnabled;

/**
 @brief Indicates whether the children's drawing cache is used during a layout animation.
 By default, the drawing cache is enabled but this will prevent nested layout animations from working. To nest animations, you must disable the cache.
 @return true if the animation cache is enabled, false otherwise
 */
- (jboolean)isAnimationCacheEnabled;

/**
 @brief Returns whether layout calls on this container are currently being suppressed, due to an earlier call to #suppressLayout(boolean) .
 @return true if layout calls are currently suppressed, false otherwise.
 */
- (jboolean)isLayoutSuppressed;

/**
 @brief Returns true if MotionEvents dispatched to this ViewGroup can be split to multiple children.
 @return true if MotionEvents dispatched to this ViewGroup can be split to multiple children.
 */
- (jboolean)isMotionEventSplittingEnabled;

/**
 @brief Returns true if this ViewGroup should be considered as a single entity for removal when executing an Activity transition.
 If this is false, child elements will move individually during the transition.
 @return True if the ViewGroup should be acted on together during an Activity transition. The default value is true when there is a non-null background or if #getTransitionName() is not null or if a non-null repackaged.android.view.ViewOutlineProvider other than repackaged.android.view.ViewOutlineProvider#BACKGROUND was given to #setOutlineProvider(ViewOutlineProvider) and false otherwise.
 */
- (jboolean)isTransitionGroup;

- (void)jumpDrawablesToCurrentState;

/**
 
 */
- (void)layoutWithInt:(jint)l
              withInt:(jint)t
              withInt:(jint)r
              withInt:(jint)b;

/**
 */
- (void)makeOptionalFitsSystemWindows;

- (void)notifySubtreeAccessibilityStateChangedWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)child
                                              withRepackagedAndroidViewView:(RepackagedAndroidViewView *)source
                                                                    withInt:(jint)changeType;

/**
 @brief Offset the vertical location of all children of this view by the specified number of pixels.
 @param offset the number of pixels to offset
 */
- (void)offsetChildrenTopAndBottomWithInt:(jint)offset;

/**
 @brief Offset a rectangle that is in a descendant's coordinate space into our coordinate space.
 @param descendant A descendant of this view
 @param rect A rectangle defined in descendant's coordinate space.
 */
- (void)offsetDescendantRectToMyCoordsWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)descendant
                                  withRepackagedAndroidGraphicsRect:(RepackagedAndroidGraphicsRect *)rect;

/**
 @brief Offset a rectangle that is in our coordinate space into an ancestor's coordinate space.
 @param descendant A descendant of this view
 @param rect A rectangle defined in descendant's coordinate space.
 */
- (void)offsetRectIntoDescendantCoordsWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)descendant
                                  withRepackagedAndroidGraphicsRect:(RepackagedAndroidGraphicsRect *)rect;

/**
 */
- (void)onInitializeAccessibilityNodeInfoInternalWithRepackagedAndroidViewAccessibilityAccessibilityNodeInfo:(RepackagedAndroidViewAccessibilityAccessibilityNodeInfo *)info;

/**
 @brief Implement this method to intercept hover events before they are handled by child views.
 <p> This method is called before dispatching a hover event to a child of the view group or to the view group's own #onHoverEvent to allow the view group a chance to intercept the hover event. This method can also be used to watch all pointer motions that occur within the bounds of the view group even when the pointer is hovering over a child of the view group rather than over the view group itself. </p><p> The view group can prevent its children from receiving hover events by implementing this method and returning <code>true</code> to indicate that it would like to intercept hover events.  The view group must continuously return <code>true</code> from #onInterceptHoverEvent for as long as it wishes to continue intercepting hover events from its children. </p><p> Interception preserves the invariant that at most one view can be hovered at a time by transferring hover focus from the currently hovered child to the view group or vice-versa as needed. </p><p> If this method returns <code>true</code> and a child is already hovered, then the child view will first receive a hover exit event and then the view group itself will receive a hover enter event in #onHoverEvent . Likewise, if this method had previously returned <code>true</code> to intercept hover events and instead returns <code>false</code> while the pointer is hovering within the bounds of one of a child, then the view group will first receive a hover exit event in #onHoverEvent and then the hovered child will receive a hover enter event. </p><p> The default implementation always returns false. </p>
 @param event The motion event that describes the hover.
 @return True if the view group would like to intercept the hover event and prevent its children from receiving it.
 */
- (jboolean)onInterceptHoverEventWithRepackagedAndroidViewMotionEvent:(RepackagedAndroidViewMotionEvent *)event;

/**
 @brief Implement this method to intercept all touch screen motion events.
 This allows you to watch events as they are dispatched to your children, and take ownership of the current gesture at any point. <p>Using this function takes some care, as it has a fairly complicated interaction with View#onTouchEvent(MotionEvent) View.onTouchEvent(MotionEvent) , and using it requires implementing that method as well as this one in the correct way.  Events will be received in the following order: <ol> <li> You will receive the down event here. <li> The down event will be handled either by a child of this view group, or given to your own onTouchEvent() method to handle; this means you should implement onTouchEvent() to return true, so you will continue to see the rest of the gesture (instead of looking for a parent view to handle it).  Also, by returning true from onTouchEvent(), you will not receive any following events in onInterceptTouchEvent() and all touch processing must happen in onTouchEvent() like normal. <li> For as long as you return false from this function, each following event (up to and including the final up) will be delivered first here and then to the target's onTouchEvent(). <li> If you return true from here, you will not receive any following events: the target view will receive the same event but with the action MotionEvent#ACTION_CANCEL , and all further events will be delivered to your onTouchEvent() method and no longer appear here. </ol>
 @param ev The motion event being dispatched down the hierarchy.
 @return Return true to steal motion events from the children and have them dispatched to this ViewGroup through onTouchEvent(). The current target will receive an ACTION_CANCEL event, and no further messages will be delivered here.
 */
- (jboolean)onInterceptTouchEventWithRepackagedAndroidViewMotionEvent:(RepackagedAndroidViewMotionEvent *)ev;

/**
 */
- (jboolean)onNestedFlingWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)target
                                             withFloat:(jfloat)velocityX
                                             withFloat:(jfloat)velocityY
                                           withBoolean:(jboolean)consumed;

/**
 */
- (jboolean)onNestedPreFlingWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)target
                                                withFloat:(jfloat)velocityX
                                                withFloat:(jfloat)velocityY;

/**
 @brief <p>Subclasses should always call <code>super.onNestedPrePerformAccessibilityAction</code></p>
 @param target The target view dispatching this action
 @param action Action being performed; see repackaged.android.view.accessibility.AccessibilityNodeInfo
 @param args Optional action arguments
 @return false by default. Subclasses should return true if they handle the event.
 */
- (jboolean)onNestedPrePerformAccessibilityActionWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)target
                                                                       withInt:(jint)action
                                                 withRepackagedAndroidOsBundle:(RepackagedAndroidOsBundle *)args;

/**
 */
- (void)onNestedPreScrollWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)target
                                               withInt:(jint)dx
                                               withInt:(jint)dy
                                          withIntArray:(IOSIntArray *)consumed;

/**
 */
- (void)onNestedScrollWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)target
                                            withInt:(jint)dxConsumed
                                            withInt:(jint)dyConsumed
                                            withInt:(jint)dxUnconsumed
                                            withInt:(jint)dyUnconsumed;

/**
 */
- (void)onNestedScrollAcceptedWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)child
                              withRepackagedAndroidViewView:(RepackagedAndroidViewView *)target
                                                    withInt:(jint)axes;

/**
 @brief Called when a child has requested sending an AccessibilityEvent and gives an opportunity to its parent to augment the event.
 <p> If an repackaged.android.view.View.AccessibilityDelegate has been specified via calling repackaged.android.view.View#setAccessibilityDelegate(repackaged.android.view.View.AccessibilityDelegate) its repackaged.android.view.View.AccessibilityDelegate#onRequestSendAccessibilityEvent(ViewGroup,View,AccessibilityEvent) is responsible for handling this call. </p>
 @param child The child which requests sending the event.
 @param event The event to be sent.
 @return True if the event should be sent.
 */
- (jboolean)onRequestSendAccessibilityEventWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)child
                withRepackagedAndroidViewAccessibilityAccessibilityEvent:(RepackagedAndroidViewAccessibilityAccessibilityEvent *)event;

/**
 */
- (jboolean)onRequestSendAccessibilityEventInternalWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)child
                        withRepackagedAndroidViewAccessibilityAccessibilityEvent:(RepackagedAndroidViewAccessibilityAccessibilityEvent *)event;

/**
 */
- (jboolean)onStartNestedScrollWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)child
                               withRepackagedAndroidViewView:(RepackagedAndroidViewView *)target
                                                     withInt:(jint)nestedScrollAxes;

/**
 <p>The default implementation of onStopNestedScroll calls #stopNestedScroll() to halt any recursive nested scrolling in progress.</p>
 */
- (void)onStopNestedScrollWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)child;

/**
 @brief Called when a new child is added to this ViewGroup.
 Overrides should always call super.onViewAdded.
 @param child the added child view
 */
- (void)onViewAddedWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)child;

/**
 @brief Called when a child view is removed from this ViewGroup.
 Overrides should always call super.onViewRemoved.
 @param child the removed child view
 */
- (void)onViewRemovedWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)child;

/**
 
 */
- (void)recomputeViewAttributesWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)child;

/**
 @brief Call this method to remove all child views from the ViewGroup.
 <p><strong>Note:</strong> do not invoke this method from #draw(repackaged.android.graphics.Canvas) , #onDraw(repackaged.android.graphics.Canvas) , #dispatchDraw(repackaged.android.graphics.Canvas) or any related method.</p>
 */
- (void)removeAllViews;

/**
 @brief Called by a ViewGroup subclass to remove child views from itself, when it must first know its size on screen before it can calculate how many child views it will render.
 An example is a Gallery or a ListView, which may "have" 50 children, but actually only render the number of children that can currently fit inside the object on screen. Do not call this method unless you are extending ViewGroup and understand the view measuring and layout pipeline. <p><strong>Note:</strong> do not invoke this method from #draw(repackaged.android.graphics.Canvas) , #onDraw(repackaged.android.graphics.Canvas) , #dispatchDraw(repackaged.android.graphics.Canvas) or any related method.</p>
 */
- (void)removeAllViewsInLayout;

/**
 @brief Removes a view from the list of transient views in this container.
 If there is no such transient view, this method does nothing.
 @param view The transient view to be removed
 */
- (void)removeTransientViewWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)view;

/**
 @brief <p><strong>Note:</strong> do not invoke this method from #draw(repackaged.android.graphics.Canvas) , #onDraw(repackaged.android.graphics.Canvas) , #dispatchDraw(repackaged.android.graphics.Canvas) or any related method.
 </p>
 */
- (void)removeViewWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)view;

/**
 @brief Removes the view at the specified position in the group.
 <p><strong>Note:</strong> do not invoke this method from #draw(repackaged.android.graphics.Canvas) , #onDraw(repackaged.android.graphics.Canvas) , #dispatchDraw(repackaged.android.graphics.Canvas) or any related method.</p>
 @param index the position in the group of the view to remove
 */
- (void)removeViewAtWithInt:(jint)index;

/**
 @brief Removes a view during layout.
 This is useful if in your onLayout() method, you need to remove more views. <p><strong>Note:</strong> do not invoke this method from #draw(repackaged.android.graphics.Canvas) , #onDraw(repackaged.android.graphics.Canvas) , #dispatchDraw(repackaged.android.graphics.Canvas) or any related method.</p>
 @param view the view to remove from the group
 */
- (void)removeViewInLayoutWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)view;

/**
 @brief Removes the specified range of views from the group.
 <p><strong>Note:</strong> do not invoke this method from #draw(repackaged.android.graphics.Canvas) , #onDraw(repackaged.android.graphics.Canvas) , #dispatchDraw(repackaged.android.graphics.Canvas) or any related method.</p>
 @param start the first position in the group of the range of views to remove
 @param count the number of views to remove
 */
- (void)removeViewsWithInt:(jint)start
                   withInt:(jint)count;

/**
 @brief Removes a range of views during layout.
 This is useful if in your onLayout() method, you need to remove more views. <p><strong>Note:</strong> do not invoke this method from #draw(repackaged.android.graphics.Canvas) , #onDraw(repackaged.android.graphics.Canvas) , #dispatchDraw(repackaged.android.graphics.Canvas) or any related method.</p>
 @param start the index of the first view to remove from the group
 @param count the number of views to remove from the group
 */
- (void)removeViewsInLayoutWithInt:(jint)start
                           withInt:(jint)count;

/**
 
 */
- (void)requestChildFocusWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)child
                         withRepackagedAndroidViewView:(RepackagedAndroidViewView *)focused;

/**
 
 */
- (jboolean)requestChildRectangleOnScreenWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)child
                                     withRepackagedAndroidGraphicsRect:(RepackagedAndroidGraphicsRect *)rectangle
                                                           withBoolean:(jboolean)immediate;

/**
 
 */
- (void)requestDisallowInterceptTouchEventWithBoolean:(jboolean)disallowIntercept;

/**
 @brief Looks for a view to give focus to respecting the setting specified by #getDescendantFocusability() .
 Uses #onRequestFocusInDescendants(int,repackaged.android.graphics.Rect) to find focus within the children of this group when appropriate.
 */
- (jboolean)requestFocusWithInt:(jint)direction
withRepackagedAndroidGraphicsRect:(RepackagedAndroidGraphicsRect *)previouslyFocusedRect;

/**
 
 */
- (jboolean)requestSendAccessibilityEventWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)child
              withRepackagedAndroidViewAccessibilityAccessibilityEvent:(RepackagedAndroidViewAccessibilityAccessibilityEvent *)event;

/**
 @brief This method is called by LayoutTransition when there are 'changing' animations that need to start after the layout/setup phase.
 The request is forwarded to the ViewAncestor, who starts all pending transitions prior to the drawing phase in the current traversal.
 @param transition The LayoutTransition to be started on the next traversal.
 */
- (void)requestTransitionStartWithRepackagedAndroidAnimationLayoutTransition:(RepackagedAndroidAnimationLayoutTransition *)transition;

/**
 
 */
- (void)requestTransparentRegionWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)child;

/**
 */
- (void)resetResolvedLayoutDirection;

/**
 */
- (void)resetResolvedPadding;

/**
 */
- (void)resetResolvedTextAlignment;

/**
 */
- (void)resetResolvedTextDirection;

/**
 */
- (jboolean)resolveLayoutDirection;

/**
 */
- (void)resolveLayoutParams;

/**
 */
- (void)resolvePadding;

/**
 */
- (jboolean)resolveRtlPropertiesIfNeeded;

/**
 */
- (jboolean)resolveTextAlignment;

/**
 */
- (jboolean)resolveTextDirection;

/**
 @brief Schedules the layout animation to be played after the next layout pass of this view group.
 This can be used to restart the layout animation when the content of the view group changes or when the activity is paused and resumed.
 */
- (void)scheduleLayoutAnimation;

/**
 @brief Sets whether this ViewGroup's drawable states also include its children's drawable states.
 This is used, for example, to make a group appear to be focused when its child EditText or button is focused.
 */
- (void)setAddStatesFromChildrenWithBoolean:(jboolean)addsStates;

/**
 @brief Indicates whether this ViewGroup will always try to draw its children using their drawing cache.
 This property can be set to true when the cache rendering is slightly different from the children's normal rendering. Renderings can be different, for instance, when the cache's quality is set to low. When this property is disabled, the ViewGroup will use the drawing cache of its children only when asked to. It's usually the task of subclasses to tell ViewGroup when to start using the drawing cache and when to stop using it.
 @param always true to always draw with the drawing cache, false otherwise
 */
- (void)setAlwaysDrawnWithCacheEnabledWithBoolean:(jboolean)always;

/**
 @brief Enables or disables the children's drawing cache during a layout animation.
 By default, the drawing cache is enabled but this will prevent nested layout animations from working. To nest animations, you must disable the cache.
 @param enabled true to enable the animation cache, false otherwise
 */
- (void)setAnimationCacheEnabledWithBoolean:(jboolean)enabled;

/**
 @brief By default, children are clipped to their bounds before drawing.
 This allows view groups to override this behavior for animations, etc.
 @param clipChildren true to clip children to their bounds, false otherwise
 ref android.R.styleable#ViewGroup_clipChildren
 */
- (void)setClipChildrenWithBoolean:(jboolean)clipChildren;

/**
 @brief Sets whether this ViewGroup will clip its children to its padding and resize (but not clip) any EdgeEffect to the padded region, if padding is present.
 <p> By default, children are clipped to the padding of their parent ViewGroup. This clipping behavior is only enabled if padding is non-zero.
 @param clipToPadding true to clip children to the padding of the group, and resize (but not clip) any EdgeEffect to the padded region. False otherwise.
 ref android.R.styleable#ViewGroup_clipToPadding
 */
- (void)setClipToPaddingWithBoolean:(jboolean)clipToPadding;

/**
 @brief Set the descendant focusability of this view group.
 This defines the relationship between this view group and its descendants when looking for a view to take focus in #requestFocus(int,repackaged.android.graphics.Rect) .
 @param focusability one of #FOCUS_BEFORE_DESCENDANTS , #FOCUS_AFTER_DESCENDANTS , #FOCUS_BLOCK_DESCENDANTS .
 */
- (void)setDescendantFocusabilityWithInt:(jint)focusability;

/**
 @brief Sets the layout animation controller used to animate the group's children after the first layout.
 @param controller the animation controller
 */
- (void)setLayoutAnimationWithRepackagedAndroidViewAnimationLayoutAnimationController:(RepackagedAndroidViewAnimationLayoutAnimationController *)controller;

/**
 @brief Specifies the animation listener to which layout animation events must be sent.
 Only repackaged.android.view.animation.Animation.AnimationListener#onAnimationStart(Animation) and repackaged.android.view.animation.Animation.AnimationListener#onAnimationEnd(Animation) are invoked.
 @param animationListener the layout animation listener
 */
- (void)setLayoutAnimationListenerWithRepackagedAndroidViewAnimationAnimation_AnimationListener:(RepackagedAndroidViewAnimationAnimation_AnimationListener *)animationListener;

/**
 @brief Sets the basis of alignment during the layout of this ViewGroup.
 Valid values are either #LAYOUT_MODE_CLIP_BOUNDS or #LAYOUT_MODE_OPTICAL_BOUNDS .
 @param layoutMode the layout mode to use during layout operations
 ref android.R.styleable#ViewGroup_layoutMode
 */
- (void)setLayoutModeWithInt:(jint)layoutMode;

/**
 @brief Sets the LayoutTransition object for this ViewGroup.
 If the LayoutTransition object is not null, changes in layout which occur because of children being added to or removed from the ViewGroup will be animated according to the animations defined in that LayoutTransition object. By default, the transition object is null (so layout changes are not animated). <p>Replacing a non-null transition will cause that previous transition to be canceled, if it is currently running, to restore this container to its correct post-transition state.</p>
 @param transition The LayoutTransition object that will animated changes in layout. A value of <code>null</code> means no transition will run on layout changes.
 ref android.R.styleable#ViewGroup_animateLayoutChanges
 */
- (void)setLayoutTransitionWithRepackagedAndroidAnimationLayoutTransition:(RepackagedAndroidAnimationLayoutTransition *)transition;

/**
 @brief Enable or disable the splitting of MotionEvents to multiple children during touch event dispatch.
 This behavior is enabled by default for applications that target an SDK version of Build.VERSION_CODES#HONEYCOMB or newer. <p>When this option is enabled MotionEvents may be split and dispatched to different child views depending on where each pointer initially went down. This allows for user interactions such as scrolling two panes of content independently, chording of buttons, and performing independent gestures on different pieces of content.
 @param split <code>true</code> to allow MotionEvents to be split and dispatched to multiple child views. <code>false</code> to only allow one child view to be the target of any MotionEvent received by this ViewGroup.
 ref android.R.styleable#ViewGroup_splitMotionEvents
 */
- (void)setMotionEventSplittingEnabledWithBoolean:(jboolean)split;

/**
 @brief Register a callback to be invoked when a child is added to or removed from this view.
 @param listener the callback to invoke on hierarchy change
 */
- (void)setOnHierarchyChangeListenerWithRepackagedAndroidViewViewGroup_OnHierarchyChangeListener:(id<RepackagedAndroidViewViewGroup_OnHierarchyChangeListener>)listener;

/**
 @brief Indicates what types of drawing caches should be kept in memory after they have been created.
 @param drawingCacheToKeep one or a combination of #PERSISTENT_NO_CACHE , #PERSISTENT_ANIMATION_CACHE , #PERSISTENT_SCROLLING_CACHE and #PERSISTENT_ALL_CACHES
 */
- (void)setPersistentDrawingCacheWithInt:(jint)drawingCacheToKeep;

/**
 @brief Set whether this ViewGroup should ignore focus requests for itself and its children.
 If this option is enabled and the ViewGroup or a descendant currently has focus, focus will proceed forward.
 @param touchscreenBlocksFocus true to enable blocking focus in the presence of a touchscreen
 */
- (void)setTouchscreenBlocksFocusWithBoolean:(jboolean)touchscreenBlocksFocus;

/**
 @brief Changes whether or not this ViewGroup should be treated as a single entity during Activity Transitions.
 @param isTransitionGroup Whether or not the ViewGroup should be treated as a unit in Activity transitions. If false, the ViewGroup won't transition, only its children. If true, the entire ViewGroup will transition together.
 */
- (void)setTransitionGroupWithBoolean:(jboolean)isTransitionGroup;

/**
 @brief Return true if the pressed state should be delayed for children or descendants of this ViewGroup.
 Generally, this should be done for containers that can scroll, such as a List. This prevents the pressed state from appearing when the user is actually trying to scroll the content. The default implementation returns true for compatibility reasons. Subclasses that do not scroll should generally override this method and return false.
 */
- (jboolean)shouldDelayChildPressedState;

/**
 
 */
- (jboolean)showContextMenuForChildWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)originalView;

/**
 
 */
- (RepackagedAndroidViewActionMode *)startActionModeForChildWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)originalView
                                             withRepackagedAndroidViewActionMode_Callback:(id<RepackagedAndroidViewActionMode_Callback>)callback;

/**
 
 */
- (RepackagedAndroidViewActionMode *)startActionModeForChildWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)originalView
                                             withRepackagedAndroidViewActionMode_Callback:(id<RepackagedAndroidViewActionMode_Callback>)callback
                                                                                  withInt:(jint)type;

/**
 @brief Runs the layout animation.
 Calling this method triggers a relayout of this view group.
 */
- (void)startLayoutAnimation;

/**
 @brief This method tells the ViewGroup that the given View object, which should have this ViewGroup as its parent, should be kept around  (re-displayed when the ViewGroup draws its children) even if it is removed from its parent.
 This allows animations, such as those used by android.app.Fragment and repackaged.android.animation.LayoutTransition to animate the removal of views. A call to this method should always be accompanied by a later call to #endViewTransition(View) , such as after an animation on the View has finished, so that the View finally gets removed.
 @param view The View object to be kept visible even if it gets removed from its parent.
 */
- (void)startViewTransitionWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)view;

/**
 @brief Tells this ViewGroup to suppress all layout() calls until layout suppression is disabled with a later call to suppressLayout(false).
 When layout suppression is disabled, a requestLayout() call is sent if layout() was attempted while layout was being suppressed.
 */
- (void)suppressLayoutWithBoolean:(jboolean)suppress;

/**
 */
- (void)transformPointToViewLocalWithFloatArray:(IOSFloatArray *)point
                  withRepackagedAndroidViewView:(RepackagedAndroidViewView *)child;

/**
 
 */
- (void)updateViewLayoutWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)view
      withRepackagedAndroidViewViewGroup_LayoutParams:(RepackagedAndroidViewViewGroup_LayoutParams *)params;

#pragma mark Protected

/**
 @brief Adds a view during layout.
 This is useful if in your onLayout() method, you need to add more views (as does the list view for example). If index is negative, it means put it at the end of the list.
 @param child the view to add to the group
 @param index the index at which the child must be added or -1 to add last
 @param params the layout parameters to associate with the child
 @return true if the child was added, false otherwise
 */
- (jboolean)addViewInLayoutWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)child
                                                 withInt:(jint)index
         withRepackagedAndroidViewViewGroup_LayoutParams:(RepackagedAndroidViewViewGroup_LayoutParams *)params;

/**
 @brief Adds a view during layout.
 This is useful if in your onLayout() method, you need to add more views (as does the list view for example). If index is negative, it means put it at the end of the list.
 @param child the view to add to the group
 @param index the index at which the child must be added or -1 to add last
 @param params the layout parameters to associate with the child
 @param preventRequestLayout if true, calling this method will not trigger a layout request on child
 @return true if the child was added, false otherwise
 */
- (jboolean)addViewInLayoutWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)child
                                                 withInt:(jint)index
         withRepackagedAndroidViewViewGroup_LayoutParams:(RepackagedAndroidViewViewGroup_LayoutParams *)params
                                             withBoolean:(jboolean)preventRequestLayout;

/**
 @brief Subclasses should override this method to set layout animation parameters on the supplied child.
 @param child the child to associate with animation parameters
 @param params the child's layout parameters which hold the animation parameters
 @param index the index of the child in the view group
 @param count the number of children in the view group
 */
- (void)attachLayoutAnimationParametersWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)child
                     withRepackagedAndroidViewViewGroup_LayoutParams:(RepackagedAndroidViewViewGroup_LayoutParams *)params
                                                             withInt:(jint)index
                                                             withInt:(jint)count;

/**
 @brief Attaches a view to this view group.
 Attaching a view assigns this group as the parent, sets the layout parameters and puts the view in the list of children so that it can be retrieved by calling #getChildAt(int) . <p> This method is intended to be lightweight and makes no assumptions about whether the parent or child should be redrawn. Proper use of this method will include also making any appropriate #requestLayout() or #invalidate() calls. For example, callers can #post(Runnable) post a Runnable which performs a #requestLayout() on the next frame, after all detach/attach calls are finished, causing layout to be run prior to redrawing the view hierarchy. <p> This method should be called only for views which were detached from their parent.
 @param child the child to attach
 @param index the index at which the child should be attached
 @param params the layout parameters of the child
 */
- (void)attachViewToParentWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)child
                                                withInt:(jint)index
        withRepackagedAndroidViewViewGroup_LayoutParams:(RepackagedAndroidViewViewGroup_LayoutParams *)params;

/**
 @brief Indicates whether the view group has the ability to animate its children after the first layout.
 @return true if the children can be animated, false otherwise
 */
- (jboolean)canAnimate;

/**
 
 */
- (jboolean)checkLayoutParamsWithRepackagedAndroidViewViewGroup_LayoutParams:(RepackagedAndroidViewViewGroup_LayoutParams *)p;

/**
 @brief Prevents the specified child to be laid out during the next layout pass.
 @param child the child on which to perform the cleanup
 */
- (void)cleanupLayoutStateWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)child;

/**
 @brief Quick invalidation method that simply transforms the dirty rect into the parent's coordinate system, pruning the invalidation if the parent has already been invalidated.
 */
- (id<RepackagedAndroidViewViewParent>)damageChildInParentWithInt:(jint)left
                                                          withInt:(jint)top
                                withRepackagedAndroidGraphicsRect:(RepackagedAndroidGraphicsRect *)dirty;

/**
 
 */
- (void)debugWithInt:(jint)depth;

/**
 @brief Detaches all views from the parent.
 Detaching a view should be followed either by a call to #attachViewToParent(View,int,repackaged.android.view.ViewGroup.LayoutParams) or a call to #removeDetachedView(View,boolean) . Detachment should only be temporary; reattachment or removal should happen within the same drawing cycle as detachment. When a view is detached, its parent is null and cannot be retrieved by a call to #getChildAt(int) .
 */
- (void)detachAllViewsFromParent;

/**
 @brief Detaches a view from its parent.
 Detaching a view should be followed either by a call to #attachViewToParent(View,int,repackaged.android.view.ViewGroup.LayoutParams) or a call to #removeDetachedView(View,boolean) . Detachment should only be temporary; reattachment or removal should happen within the same drawing cycle as detachment. When a view is detached, its parent is null and cannot be retrieved by a call to #getChildAt(int) .
 @param index the index of the child to detach
 */
- (void)detachViewFromParentWithInt:(jint)index;

/**
 @brief Detaches a view from its parent.
 Detaching a view should be followed either by a call to #attachViewToParent(View,int,repackaged.android.view.ViewGroup.LayoutParams) or a call to #removeDetachedView(View,boolean) . Detachment should only be temporary; reattachment or removal should happen within the same drawing cycle as detachment. When a view is detached, its parent is null and cannot be retrieved by a call to #getChildAt(int) .
 @param child the child to detach
 */
- (void)detachViewFromParentWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)child;

/**
 @brief Detaches a range of views from their parents.
 Detaching a view should be followed either by a call to #attachViewToParent(View,int,repackaged.android.view.ViewGroup.LayoutParams) or a call to #removeDetachedView(View,boolean) . Detachment should only be temporary; reattachment or removal should happen within the same drawing cycle as detachment. When a view is detached, its parent is null and cannot be retrieved by a call to #getChildAt(int) .
 @param start the first index of the childrend range to detach
 @param count the number of children to detach
 */
- (void)detachViewsFromParentWithInt:(jint)start
                             withInt:(jint)count;

/**
 
 */
- (void)dispatchDrawWithRepackagedAndroidGraphicsCanvas:(RepackagedAndroidGraphicsCanvas *)canvas;

/**
 @brief Perform dispatching of a #saveHierarchyState(repackaged.android.util.SparseArray) freeze()} to only this view, not to its children.
 For use when overriding #dispatchSaveInstanceState(repackaged.android.util.SparseArray) dispatchFreeze()} to allow subclasses to freeze their own state but not the state of their children.
 @param container the container
 */
- (void)dispatchFreezeSelfOnlyWithRepackagedAndroidUtilSparseArray:(RepackagedAndroidUtilSparseArray *)container;

/**
 
 */
- (jboolean)dispatchGenericFocusedEventWithRepackagedAndroidViewMotionEvent:(RepackagedAndroidViewMotionEvent *)event;

/**
 
 */
- (jboolean)dispatchGenericPointerEventWithRepackagedAndroidViewMotionEvent:(RepackagedAndroidViewMotionEvent *)event;

/**
 @brief This method is used to cause children of this ViewGroup to restore or recreate their display lists.
 It is called by getDisplayList() when the parent ViewGroup does not need to recreate its own display list, which would happen if it went through the normal draw/dispatchDraw mechanisms.
 */
- (void)dispatchGetDisplayList;

/**
 
 */
- (jboolean)dispatchHoverEventWithRepackagedAndroidViewMotionEvent:(RepackagedAndroidViewMotionEvent *)event;

/**
 
 */
- (void)dispatchRestoreInstanceStateWithRepackagedAndroidUtilSparseArray:(RepackagedAndroidUtilSparseArray *)container;

/**
 
 */
- (void)dispatchSaveInstanceStateWithRepackagedAndroidUtilSparseArray:(RepackagedAndroidUtilSparseArray *)container;

- (void)dispatchSetPressedWithBoolean:(jboolean)pressed;

/**
 @brief Perform dispatching of a #restoreHierarchyState(repackaged.android.util.SparseArray) to only this view, not to its children.
 For use when overriding #dispatchRestoreInstanceState(repackaged.android.util.SparseArray) to allow subclasses to thaw their own state but not the state of their children.
 @param container the container
 */
- (void)dispatchThawSelfOnlyWithRepackagedAndroidUtilSparseArray:(RepackagedAndroidUtilSparseArray *)container;

/**
 
 */
- (void)dispatchVisibilityChangedWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)changedView
                                                       withInt:(jint)visibility;

- (void)drawableStateChanged;

/**
 @brief Draw one child of this View Group.
 This method is responsible for getting the canvas in the right state. This includes clipping, translating so that the child's scrolled origin is at 0, 0, and applying any animation transformations.
 @param canvas The canvas on which to draw the child
 @param child Who to draw
 @param drawingTime The time at which draw is occurring
 @return True if an invalidate() was issued
 */
- (jboolean)drawChildWithRepackagedAndroidGraphicsCanvas:(RepackagedAndroidGraphicsCanvas *)canvas
                           withRepackagedAndroidViewView:(RepackagedAndroidViewView *)child
                                                withLong:(jlong)drawingTime;

/**
 */
- (void)encodePropertiesWithRepackagedAndroidViewViewHierarchyEncoder:(id<RepackagedAndroidViewViewHierarchyEncoder>)encoder;

/**
 
 */
- (RepackagedAndroidViewView *)findViewByPredicateTraversalWithRepackagedComAndroidInternalUtilPredicate:(id<RepackagedComAndroidInternalUtilPredicate>)predicate
                                                                           withRepackagedAndroidViewView:(RepackagedAndroidViewView *)childToSkip;

/**
 
 */
- (RepackagedAndroidViewView *)findViewTraversalWithInt:(jint)id_;

/**
 
 */
- (RepackagedAndroidViewView *)findViewWithTagTraversalWithId:(id)tag;

/**
 @brief Returns a set of default layout parameters.
 These parameters are requested when the View passed to #addView(View) has no layout parameters already set. If null is returned, an exception is thrown from addView.
 @return a set of default layout parameters or null
 */
- (RepackagedAndroidViewViewGroup_LayoutParams *)generateDefaultLayoutParams;

/**
 @brief Returns a safe set of layout parameters based on the supplied layout params.
 When a ViewGroup is passed a View whose layout params do not pass the test of #checkLayoutParams(repackaged.android.view.ViewGroup.LayoutParams) , this method is invoked. This method should return a new set of layout params suitable for this ViewGroup, possibly by copying the appropriate attributes from the specified set of layout params.
 @param p The layout parameters to convert into a suitable set of layout parameters for this ViewGroup.
 @return an instance of repackaged.android.view.ViewGroup.LayoutParams or one of its descendants
 */
- (RepackagedAndroidViewViewGroup_LayoutParams *)generateLayoutParamsWithRepackagedAndroidViewViewGroup_LayoutParams:(RepackagedAndroidViewViewGroup_LayoutParams *)p;

/**
 @brief Returns the index of the child to draw for this iteration.
 Override this if you want to change the drawing order of children. By default, it returns i. <p> NOTE: In order for this method to be called, you must enable child ordering first by calling #setChildrenDrawingOrderEnabled(boolean) .
 @param i The current iteration.
 @return The index of the child to draw this iteration.
 */
- (jint)getChildDrawingOrderWithInt:(jint)childCount
                            withInt:(jint)i;

/**
 @brief Sets  <code>t</code> to be the static transformation of the child, if set, returning a boolean to indicate whether a static transform was set.
 The default implementation simply returns <code>false</code>; subclasses may override this method for different behavior. #setStaticTransformationsEnabled(boolean) must be set to true for this method to be called.
 @param child The child view whose static transform is being requested
 @param t The Transformation which will hold the result
 @return true if the transformation was set, false otherwise
 */
- (jboolean)getChildStaticTransformationWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)child
                     withRepackagedAndroidViewAnimationTransformation:(RepackagedAndroidViewAnimationTransformation *)t;

/**
 */
- (jboolean)hasHoveredChild;

/**
 */
- (void)internalSetPaddingWithInt:(jint)left
                          withInt:(jint)top
                          withInt:(jint)right
                          withInt:(jint)bottom;

/**
 @brief Indicates whether the ViewGroup is drawing its children in the order defined by #getChildDrawingOrder(int,int) .
 @return true if children drawing order is defined by #getChildDrawingOrder(int,int) , false otherwise
 */
- (jboolean)isChildrenDrawingOrderEnabled;

/**
 @brief Indicates whether the ViewGroup is currently drawing its children using their drawing cache.
 @return true if children should be drawn with their cache, false otherwise
 */
- (jboolean)isChildrenDrawnWithCacheEnabled;

/**
 @brief Returns true if a child view contains the specified point when transformed into its coordinate space.
 Child must not be null.
 */
- (jboolean)isTransformedTouchPointInViewWithFloat:(jfloat)x
                                         withFloat:(jfloat)y
                     withRepackagedAndroidViewView:(RepackagedAndroidViewView *)child
               withRepackagedAndroidGraphicsPointF:(RepackagedAndroidGraphicsPointF *)outLocalPoint;

/**
 @brief Ask one of the children of this view to measure itself, taking into account both the MeasureSpec requirements for this view and its padding.
 The heavy lifting is done in getChildMeasureSpec.
 @param child The child to measure
 @param parentWidthMeasureSpec The width requirements for this view
 @param parentHeightMeasureSpec The height requirements for this view
 */
- (void)measureChildWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)child
                                          withInt:(jint)parentWidthMeasureSpec
                                          withInt:(jint)parentHeightMeasureSpec;

/**
 @brief Ask all of the children of this view to measure themselves, taking into account both the MeasureSpec requirements for this view and its padding.
 We skip children that are in the GONE state The heavy lifting is done in getChildMeasureSpec.
 @param widthMeasureSpec The width requirements for this view
 @param heightMeasureSpec The height requirements for this view
 */
- (void)measureChildrenWithInt:(jint)widthMeasureSpec
                       withInt:(jint)heightMeasureSpec;

/**
 @brief Ask one of the children of this view to measure itself, taking into account both the MeasureSpec requirements for this view and its padding and margins.
 The child must have MarginLayoutParams The heavy lifting is done in getChildMeasureSpec.
 @param child The child to measure
 @param parentWidthMeasureSpec The width requirements for this view
 @param widthUsed Extra space that has been used up by the parent horizontally (possibly by other children of the parent)
 @param parentHeightMeasureSpec The height requirements for this view
 @param heightUsed Extra space that has been used up by the parent vertically (possibly by other children of the parent)
 */
- (void)measureChildWithMarginsWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)child
                                                     withInt:(jint)parentWidthMeasureSpec
                                                     withInt:(jint)widthUsed
                                                     withInt:(jint)parentHeightMeasureSpec
                                                     withInt:(jint)heightUsed;

- (void)onAttachedToWindow;

/**
 @brief Called when a view's visibility has changed.
 Notify the parent to take any appropriate action.
 @param child The view whose visibility has changed
 @param oldVisibility The previous visibility value (GONE, INVISIBLE, or VISIBLE).
 @param newVisibility The new visibility value (GONE, INVISIBLE, or VISIBLE).
 */
- (void)onChildVisibilityChangedWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)child
                                                      withInt:(jint)oldVisibility
                                                      withInt:(jint)newVisibility;

- (IOSIntArray *)onCreateDrawableStateWithInt:(jint)extraSpace;

/**
 */
- (void)onDebugDrawWithRepackagedAndroidGraphicsCanvas:(RepackagedAndroidGraphicsCanvas *)canvas;

/**
 */
- (void)onDebugDrawMarginsWithRepackagedAndroidGraphicsCanvas:(RepackagedAndroidGraphicsCanvas *)canvas
                           withRepackagedAndroidGraphicsPaint:(RepackagedAndroidGraphicsPaint *)paint;

- (void)onDetachedFromWindow;

/**
 
 */
- (void)onLayoutWithBoolean:(jboolean)changed
                    withInt:(jint)l
                    withInt:(jint)t
                    withInt:(jint)r
                    withInt:(jint)b;

/**
 @brief Look for a descendant to call View#requestFocus on.
 Called by ViewGroup#requestFocus(int,repackaged.android.graphics.Rect) when it wants to request focus within its children.  Override this to customize how your ViewGroup requests focus within its children.
 @param direction One of FOCUS_UP, FOCUS_DOWN, FOCUS_LEFT, and FOCUS_RIGHT
 @param previouslyFocusedRect The rectangle (in this View's coordinate system) to give a finer grained hint about where focus is coming from.  May be null if there is no hint.
 @return Whether focus was taken.
 */
- (jboolean)onRequestFocusInDescendantsWithInt:(jint)direction
             withRepackagedAndroidGraphicsRect:(RepackagedAndroidGraphicsRect *)previouslyFocusedRect;

/**
 */
- (void)onSetLayoutParamsWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)child
       withRepackagedAndroidViewViewGroup_LayoutParams:(RepackagedAndroidViewViewGroup_LayoutParams *)layoutParams;

/**
 @brief Finishes the removal of a detached view.
 This method will dispatch the detached from window event and notify the hierarchy change listener. <p> This method is intended to be lightweight and makes no assumptions about whether the parent or child should be redrawn. Proper use of this method will include also making any appropriate #requestLayout() or #invalidate() calls. For example, callers can #post(Runnable) post a Runnable which performs a #requestLayout() on the next frame, after all detach/remove calls are finished, causing layout to be run prior to redrawing the view hierarchy.
 @param child the child to be definitely removed from the view hierarchy
 @param animate if true and the view has an animation, the view is placed in the disappearing views list, otherwise, it is detached from the window
 */
- (void)removeDetachedViewWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)child
                                            withBoolean:(jboolean)animate;

/**
 */
- (void)resetResolvedDrawables;

/**
 */
- (void)resolveDrawables;

/**
 @brief Enables or disables the drawing cache for each child of this view group.
 @param enabled true to enable the cache, false to dispose of it
 */
- (void)setChildrenDrawingCacheEnabledWithBoolean:(jboolean)enabled;

/**
 @brief Tells the ViewGroup whether to draw its children in the order defined by the method #getChildDrawingOrder(int,int) .
 <p> Note that View#getZ() Z reordering, done by #dispatchDraw(Canvas) , will override custom child ordering done via this method.
 @param enabled true if the order of the children when drawing is determined by #getChildDrawingOrder(int,int) , false otherwise
 */
- (void)setChildrenDrawingOrderEnabledWithBoolean:(jboolean)enabled;

/**
 @brief Tells the ViewGroup to draw its children using their drawing cache.
 This property is ignored when #isAlwaysDrawnWithCacheEnabled() is true. A child's drawing cache will be used only if it has been enabled. Subclasses should call this method to start and stop using the drawing cache when they perform performance sensitive operations, like scrolling or animating.
 @param enabled true if children should be drawn with their cache, false otherwise
 */
- (void)setChildrenDrawnWithCacheEnabledWithBoolean:(jboolean)enabled;

/**
 @brief When this property is set to true, this ViewGroup supports static transformations on children; this causes #getChildStaticTransformation(View,repackaged.android.view.animation.Transformation) to be invoked when a child is drawn.
 Any subclass overriding #getChildStaticTransformation(View,repackaged.android.view.animation.Transformation) should set this property to true.
 @param enabled True to enable static transformations on children, false otherwise.
 */
- (void)setStaticTransformationsEnabledWithBoolean:(jboolean)enabled;

#pragma mark Package-Private

/**
 @brief Populates (and returns) mPreSortedChildren with a pre-ordered list of the View's children, sorted first by Z, then by child drawing order (if applicable).
 This list must be cleared after use to avoid leaking child Views. Uses a stable, insertion sort which is commonly O(n) for ViewGroups with very few elevated children.
 */
- (JavaUtilArrayList *)buildOrderedChildList;

- (RepackagedAndroidGraphicsInsets *)computeOpticalInsets;

- (RepackagedAndroidGraphicsBitmap *)createSnapshotWithRepackagedAndroidGraphicsBitmap_Config:(RepackagedAndroidGraphicsBitmap_Config *)quality
                                                                                      withInt:(jint)backgroundColor
                                                                                  withBoolean:(jboolean)skipChildren;

/**
 
 */
- (void)dispatchAttachedToWindowWithRepackagedAndroidViewView_AttachInfo:(RepackagedAndroidViewView_AttachInfo *)info
                                                                 withInt:(jint)visibility;

- (void)dispatchCancelPendingInputEvents;

- (void)dispatchCollectViewAttributesWithRepackagedAndroidViewView_AttachInfo:(RepackagedAndroidViewView_AttachInfo *)attachInfo
                                                                      withInt:(jint)visibility;

/**
 
 */
- (void)dispatchDetachedFromWindow;

- (void)dispatchScreenStateChangedWithInt:(jint)screenState;

- (void)dispatchViewAddedWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)child;

- (void)dispatchViewRemovedWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)child;

- (RepackagedAndroidViewView *)findFrontmostDroppableChildAtWithFloat:(jfloat)x
                                                            withFloat:(jfloat)y
                                  withRepackagedAndroidGraphicsPointF:(RepackagedAndroidGraphicsPointF *)outLocalPoint;

/**
 @brief Cleanup a view when its animation is done.
 This may mean removing it from the list of disappearing views.
 @param view The view whose animation has finished
 @param animation The animation, cannot be null
 */
- (void)finishAnimatingViewWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)view
             withRepackagedAndroidViewAnimationAnimation:(id<RepackagedAndroidViewAnimationAnimation>)animation;

- (RepackagedAndroidViewAnimationTransformation *)getChildTransformation;

- (RepackagedAndroidViewView *)getDeepestFocusedChild;

- (void)getScrollIndicatorBoundsWithRepackagedAndroidGraphicsRect:(RepackagedAndroidGraphicsRect *)outArg;

/**
 
 */
- (void)handleFocusGainInternalWithInt:(jint)direction
     withRepackagedAndroidGraphicsRect:(RepackagedAndroidGraphicsRect *)previouslyFocusedRect;

/**
 @brief Recursively traverse the view hierarchy, resetting the layoutMode of any descendants that had inherited a different layoutMode from a previous parent.
 Recursion terminates when a descendant's mode is: <ul> <li>Undefined</li> <li>The same as the root node's</li> <li>A mode that had been explicitly set</li> <ul/> The first two clauses are optimizations.
 @param layoutModeOfRoot
 */
- (void)invalidateInheritedLayoutModeWithInt:(jint)layoutModeOfRoot;

/**
 @brief Return true if this ViewGroup is laying out using optical bounds.
 */
- (jboolean)isLayoutModeOptical;

/**
 @brief Utility function called by View during invalidation to determine whether a view that is invisible or gone should still be invalidated because it is being transitioned (and therefore still needs to be drawn).
 */
- (jboolean)isViewTransitioningWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)view;

- (jboolean)notifyChildOfDragWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)child;

/**
 @brief Helper method that offsets a rect either from parent to descendant or descendant to parent.
 */
- (void)offsetRectBetweenParentAndChildWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)descendant
                                   withRepackagedAndroidGraphicsRect:(RepackagedAndroidGraphicsRect *)rect
                                                         withBoolean:(jboolean)offsetFromChildToParent
                                                         withBoolean:(jboolean)clipToBounds;

- (void)resetSubtreeAccessibilityStateChanged;

- (jboolean)shouldBlockFocusForTouchscreen;

/**
 
 */
- (void)unFocusWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)focused;

- (jboolean)updateLocalSystemUiVisibilityWithInt:(jint)localValue
                                         withInt:(jint)localChanges;

@end

J2OBJC_STATIC_INIT(RepackagedAndroidViewViewGroup)

J2OBJC_FIELD_SETTER(RepackagedAndroidViewViewGroup, mDisappearingChildren_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(RepackagedAndroidViewViewGroup, mOnHierarchyChangeListener_, id<RepackagedAndroidViewViewGroup_OnHierarchyChangeListener>)
J2OBJC_FIELD_SETTER(RepackagedAndroidViewViewGroup, mInvalidateRegion_, RepackagedAndroidGraphicsRectF *)
J2OBJC_FIELD_SETTER(RepackagedAndroidViewViewGroup, mInvalidationTransformation_, RepackagedAndroidViewAnimationTransformation *)
J2OBJC_FIELD_SETTER(RepackagedAndroidViewViewGroup, mCachePaint_, RepackagedAndroidGraphicsPaint *)

FOUNDATION_EXPORT jboolean RepackagedAndroidViewViewGroup_DEBUG_DRAW_;
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewViewGroup, DEBUG_DRAW_, jboolean)
J2OBJC_STATIC_FIELD_REF_GETTER(RepackagedAndroidViewViewGroup, DEBUG_DRAW_, jboolean)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewViewGroup, FLAG_CLIP_CHILDREN, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewViewGroup, FLAG_INVALIDATE_REQUIRED, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewViewGroup, FLAG_ANIMATION_DONE, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewViewGroup, FLAG_OPTIMIZE_INVALIDATE, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewViewGroup, FLAG_CLEAR_TRANSFORMATION, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewViewGroup, FLAG_USE_CHILD_DRAWING_ORDER, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewViewGroup, FLAG_SUPPORT_STATIC_TRANSFORMATIONS, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewViewGroup, FOCUS_BEFORE_DESCENDANTS, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewViewGroup, FOCUS_AFTER_DESCENDANTS, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewViewGroup, FOCUS_BLOCK_DESCENDANTS, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewViewGroup, FLAG_DISALLOW_INTERCEPT, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewViewGroup, FLAG_IS_TRANSITION_GROUP, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewViewGroup, FLAG_IS_TRANSITION_GROUP_SET, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewViewGroup, FLAG_TOUCHSCREEN_BLOCKS_FOCUS, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewViewGroup, PERSISTENT_NO_CACHE, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewViewGroup, PERSISTENT_ANIMATION_CACHE, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewViewGroup, PERSISTENT_SCROLLING_CACHE, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewViewGroup, PERSISTENT_ALL_CACHES, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewViewGroup, LAYOUT_MODE_CLIP_BOUNDS, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewViewGroup, LAYOUT_MODE_OPTICAL_BOUNDS, jint)

FOUNDATION_EXPORT jint RepackagedAndroidViewViewGroup_LAYOUT_MODE_DEFAULT_;
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewViewGroup, LAYOUT_MODE_DEFAULT_, jint)
J2OBJC_STATIC_FIELD_REF_GETTER(RepackagedAndroidViewViewGroup, LAYOUT_MODE_DEFAULT_, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewViewGroup, CLIP_TO_PADDING_MASK, jint)

FOUNDATION_EXPORT void RepackagedAndroidViewViewGroup_initWithRepackagedAndroidContentContext_(RepackagedAndroidViewViewGroup *self, id<RepackagedAndroidContentContext> context);

FOUNDATION_EXPORT void RepackagedAndroidViewViewGroup_initWithRepackagedAndroidContentContext_withRepackagedAndroidUtilAttributeSet_(RepackagedAndroidViewViewGroup *self, id<RepackagedAndroidContentContext> context, id<RepackagedAndroidUtilAttributeSet> attrs);

FOUNDATION_EXPORT void RepackagedAndroidViewViewGroup_initWithRepackagedAndroidContentContext_withRepackagedAndroidUtilAttributeSet_withInt_(RepackagedAndroidViewViewGroup *self, id<RepackagedAndroidContentContext> context, id<RepackagedAndroidUtilAttributeSet> attrs, jint defStyleAttr);

FOUNDATION_EXPORT void RepackagedAndroidViewViewGroup_initWithRepackagedAndroidContentContext_withRepackagedAndroidUtilAttributeSet_withInt_withInt_(RepackagedAndroidViewViewGroup *self, id<RepackagedAndroidContentContext> context, id<RepackagedAndroidUtilAttributeSet> attrs, jint defStyleAttr, jint defStyleRes);

FOUNDATION_EXPORT jint RepackagedAndroidViewViewGroup_getChildMeasureSpecWithInt_withInt_withInt_(jint spec, jint padding, jint childDimension);

J2OBJC_TYPE_LITERAL_HEADER(RepackagedAndroidViewViewGroup)

/**
 @brief Interface definition for a callback to be invoked when the hierarchy within this view changed.
 The hierarchy changes whenever a child is added to or removed from this view.
 */
@protocol RepackagedAndroidViewViewGroup_OnHierarchyChangeListener < NSObject, JavaObject >

/**
 @brief Called when a new child is added to a parent view.
 @param parent the view in which a child was added
 @param child the new child view added in the hierarchy
 */
- (void)onChildViewAddedWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)parent
                        withRepackagedAndroidViewView:(RepackagedAndroidViewView *)child;

/**
 @brief Called when a child is removed from a parent view.
 @param parent the view from which the child was removed
 @param child the child removed from the hierarchy
 */
- (void)onChildViewRemovedWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)parent
                          withRepackagedAndroidViewView:(RepackagedAndroidViewView *)child;

@end

J2OBJC_EMPTY_STATIC_INIT(RepackagedAndroidViewViewGroup_OnHierarchyChangeListener)

J2OBJC_TYPE_LITERAL_HEADER(RepackagedAndroidViewViewGroup_OnHierarchyChangeListener)

#define RepackagedAndroidViewViewGroup_LayoutParams_FILL_PARENT -1
#define RepackagedAndroidViewViewGroup_LayoutParams_MATCH_PARENT -1
#define RepackagedAndroidViewViewGroup_LayoutParams_WRAP_CONTENT -2

/**
 @brief LayoutParams are used by views to tell their parents how they want to be laid out.
 See android.R.styleable#ViewGroup_Layout ViewGroup Layout Attributes for a list of all child view attributes that this class supports. <p> The base LayoutParams class just describes how big the view wants to be for both width and height. For each dimension, it can specify one of: <ul> <li>FILL_PARENT (renamed MATCH_PARENT in API Level 8 and higher), which means that the view wants to be as big as its parent (minus padding) <li> WRAP_CONTENT, which means that the view wants to be just big enough to enclose its content (plus padding) <li> an exact number </ul> There are subclasses of LayoutParams for different subclasses of ViewGroup. For example, AbsoluteLayout has its own subclass of LayoutParams which adds an X and Y value.</p> <div class="special reference"> <h3>Developer Guides</h3> <p>For more information about creating user interface layouts, read the <a href="  guide/topics/ui/declaring-layout.html">XML Layouts</a> developer guide.</p></div>
 ref android.R.styleable#ViewGroup_Layout_layout_height
 ref android.R.styleable#ViewGroup_Layout_layout_width
 */
@interface RepackagedAndroidViewViewGroup_LayoutParams : NSObject {
 @public
  /**
   @brief Information about how wide the view wants to be.
   Can be one of the constants FILL_PARENT (replaced by MATCH_PARENT in API Level 8) or WRAP_CONTENT, or an exact size.
   */
  jint width_;
  /**
   @brief Information about how tall the view wants to be.
   Can be one of the constants FILL_PARENT (replaced by MATCH_PARENT in API Level 8) or WRAP_CONTENT, or an exact size.
   */
  jint height_;
  /**
   @brief Used to animate layouts.
   */
  RepackagedAndroidViewAnimationLayoutAnimationController_AnimationParameters *layoutAnimationParameters_;
}

#pragma mark Public

/**
 @brief Creates a new set of layout parameters.
 The values are extracted from the supplied attributes set and context. The XML attributes mapped to this set of layout parameters are: <ul> <li><code>layout_width</code>: the width, either an exact value, #WRAP_CONTENT , or #FILL_PARENT (replaced by #MATCH_PARENT in API Level 8)</li> <li><code>layout_height</code>: the height, either an exact value, #WRAP_CONTENT , or #FILL_PARENT (replaced by #MATCH_PARENT in API Level 8)</li> </ul>
 @param c the application environment
 @param attrs the set of attributes from which to extract the layout parameters' values
 */
- (instancetype)initWithRepackagedAndroidContentContext:(id<RepackagedAndroidContentContext>)c
                  withRepackagedAndroidUtilAttributeSet:(id<RepackagedAndroidUtilAttributeSet>)attrs;

/**
 @brief Creates a new set of layout parameters with the specified width and height.
 @param width the width, either #WRAP_CONTENT , #FILL_PARENT (replaced by #MATCH_PARENT in API Level 8), or a fixed size in pixels
 @param height the height, either #WRAP_CONTENT , #FILL_PARENT (replaced by #MATCH_PARENT in API Level 8), or a fixed size in pixels
 */
- (instancetype)initWithInt:(jint)width
                    withInt:(jint)height;

/**
 @brief Copy constructor.
 Clones the width and height values of the source.
 @param source The layout params to copy from.
 */
- (instancetype)initWithRepackagedAndroidViewViewGroup_LayoutParams:(RepackagedAndroidViewViewGroup_LayoutParams *)source;

/**
 @brief Returns a String representation of this set of layout parameters.
 @param output the String to prepend to the internal representation
 @return a String with the following format: output + "ViewGroup.LayoutParams={ width=WIDTH, height=HEIGHT }"
 */
- (NSString *)debugWithNSString:(NSString *)output;

/**
 @brief Use <code>canvas</code> to draw suitable debugging annotations for these LayoutParameters.
 @param view the view that contains these layout parameters
 @param canvas the canvas on which to draw
 */
- (void)onDebugDrawWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)view
             withRepackagedAndroidGraphicsCanvas:(RepackagedAndroidGraphicsCanvas *)canvas
              withRepackagedAndroidGraphicsPaint:(RepackagedAndroidGraphicsPaint *)paint;

/**
 @brief Resolve layout parameters depending on the layout direction.
 Subclasses that care about layoutDirection changes should override this method. The default implementation does nothing.
 @param layoutDirection the direction of the layout View#LAYOUT_DIRECTION_LTR View#LAYOUT_DIRECTION_RTL
 */
- (void)resolveLayoutDirectionWithInt:(jint)layoutDirection;

#pragma mark Protected

/**
 */
- (void)encodePropertiesWithRepackagedAndroidViewViewHierarchyEncoder:(id<RepackagedAndroidViewViewHierarchyEncoder>)encoder;

/**
 @brief Extracts the layout parameters from the supplied attributes.
 @param a the style attributes to extract the parameters from
 @param widthAttr the identifier of the width attribute
 @param heightAttr the identifier of the height attribute
 */
- (void)setBaseAttributesWithRepackagedAndroidContentResTypedArray:(id<RepackagedAndroidContentResTypedArray>)a
                                                           withInt:(jint)widthAttr
                                                           withInt:(jint)heightAttr;

/**
 @brief Converts the specified size to a readable String.
 @param size the size to convert
 @return a String instance representing the supplied size
 */
+ (NSString *)sizeToStringWithInt:(jint)size;

#pragma mark Package-Private

/**
 @brief Used internally by MarginLayoutParams.
 */
- (instancetype)init;

/**
 */
- (void)encodeWithRepackagedAndroidViewViewHierarchyEncoder:(id<RepackagedAndroidViewViewHierarchyEncoder>)encoder;

@end

J2OBJC_EMPTY_STATIC_INIT(RepackagedAndroidViewViewGroup_LayoutParams)

J2OBJC_FIELD_SETTER(RepackagedAndroidViewViewGroup_LayoutParams, layoutAnimationParameters_, RepackagedAndroidViewAnimationLayoutAnimationController_AnimationParameters *)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewViewGroup_LayoutParams, FILL_PARENT, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewViewGroup_LayoutParams, MATCH_PARENT, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewViewGroup_LayoutParams, WRAP_CONTENT, jint)

FOUNDATION_EXPORT void RepackagedAndroidViewViewGroup_LayoutParams_initWithRepackagedAndroidContentContext_withRepackagedAndroidUtilAttributeSet_(RepackagedAndroidViewViewGroup_LayoutParams *self, id<RepackagedAndroidContentContext> c, id<RepackagedAndroidUtilAttributeSet> attrs);

FOUNDATION_EXPORT RepackagedAndroidViewViewGroup_LayoutParams *new_RepackagedAndroidViewViewGroup_LayoutParams_initWithRepackagedAndroidContentContext_withRepackagedAndroidUtilAttributeSet_(id<RepackagedAndroidContentContext> c, id<RepackagedAndroidUtilAttributeSet> attrs) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void RepackagedAndroidViewViewGroup_LayoutParams_initWithInt_withInt_(RepackagedAndroidViewViewGroup_LayoutParams *self, jint width, jint height);

FOUNDATION_EXPORT RepackagedAndroidViewViewGroup_LayoutParams *new_RepackagedAndroidViewViewGroup_LayoutParams_initWithInt_withInt_(jint width, jint height) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void RepackagedAndroidViewViewGroup_LayoutParams_initWithRepackagedAndroidViewViewGroup_LayoutParams_(RepackagedAndroidViewViewGroup_LayoutParams *self, RepackagedAndroidViewViewGroup_LayoutParams *source);

FOUNDATION_EXPORT RepackagedAndroidViewViewGroup_LayoutParams *new_RepackagedAndroidViewViewGroup_LayoutParams_initWithRepackagedAndroidViewViewGroup_LayoutParams_(RepackagedAndroidViewViewGroup_LayoutParams *source) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void RepackagedAndroidViewViewGroup_LayoutParams_init(RepackagedAndroidViewViewGroup_LayoutParams *self);

FOUNDATION_EXPORT RepackagedAndroidViewViewGroup_LayoutParams *new_RepackagedAndroidViewViewGroup_LayoutParams_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT NSString *RepackagedAndroidViewViewGroup_LayoutParams_sizeToStringWithInt_(jint size);

J2OBJC_TYPE_LITERAL_HEADER(RepackagedAndroidViewViewGroup_LayoutParams)

#define RepackagedAndroidViewViewGroup_MarginLayoutParams_DEFAULT_MARGIN_RELATIVE ((jint) 0x80000000)

/**
 @brief Per-child layout information for layouts that support margins.
 See android.R.styleable#ViewGroup_MarginLayout ViewGroup Margin Layout Attributes for a list of all child view attributes that this class supports.
 */
@interface RepackagedAndroidViewViewGroup_MarginLayoutParams : RepackagedAndroidViewViewGroup_LayoutParams {
 @public
  /**
   @brief The left margin in pixels of the child.
   Margin values should be positive. Call ViewGroup#setLayoutParams(LayoutParams) after reassigning a new value to this field.
   */
  jint leftMargin_;
  /**
   @brief The top margin in pixels of the child.
   Margin values should be positive. Call ViewGroup#setLayoutParams(LayoutParams) after reassigning a new value to this field.
   */
  jint topMargin_;
  /**
   @brief The right margin in pixels of the child.
   Margin values should be positive. Call ViewGroup#setLayoutParams(LayoutParams) after reassigning a new value to this field.
   */
  jint rightMargin_;
  /**
   @brief The bottom margin in pixels of the child.
   Margin values should be positive. Call ViewGroup#setLayoutParams(LayoutParams) after reassigning a new value to this field.
   */
  jint bottomMargin_;
  /**
   @brief Bit  0: layout direction Bit  1: layout direction Bit  2: left margin undefined Bit  3: right margin undefined Bit  4: is RTL compatibility mode Bit  5: need resolution Bit 6 to 7 not used
   */
  jbyte mMarginFlags_;
}

#pragma mark Public

/**
 @brief Creates a new set of layout parameters.
 The values are extracted from the supplied attributes set and context.
 @param c the application environment
 @param attrs the set of attributes from which to extract the layout parameters' values
 */
- (instancetype)initWithRepackagedAndroidContentContext:(id<RepackagedAndroidContentContext>)c
                  withRepackagedAndroidUtilAttributeSet:(id<RepackagedAndroidUtilAttributeSet>)attrs;

/**
 
 */
- (instancetype)initWithInt:(jint)width
                    withInt:(jint)height;

/**
 
 */
- (instancetype)initWithRepackagedAndroidViewViewGroup_LayoutParams:(RepackagedAndroidViewViewGroup_LayoutParams *)source;

/**
 @brief Copy constructor.
 Clones the width, height and margin values of the source.
 @param source The layout params to copy from.
 */
- (instancetype)initWithRepackagedAndroidViewViewGroup_MarginLayoutParams:(RepackagedAndroidViewViewGroup_MarginLayoutParams *)source;

/**
 Used internally.
 */
- (void)copyMarginsFromWithRepackagedAndroidViewViewGroup_MarginLayoutParams:(RepackagedAndroidViewViewGroup_MarginLayoutParams *)source OBJC_METHOD_FAMILY_NONE;

/**
 @brief Retuns the layout direction.
 Can be either View#LAYOUT_DIRECTION_LTR or View#LAYOUT_DIRECTION_RTL .
 @return the layout direction.
 */
- (jint)getLayoutDirection;

/**
 @brief Returns the end margin in pixels.
 ref android.R.styleable#ViewGroup_MarginLayout_layout_marginEnd
 @return the end margin in pixels.
 */
- (jint)getMarginEnd;

/**
 @brief Returns the start margin in pixels.
 ref android.R.styleable#ViewGroup_MarginLayout_layout_marginStart
 @return the start margin in pixels.
 */
- (jint)getMarginStart;

/**
 */
- (jboolean)isLayoutRtl;

/**
 @brief Check if margins are relative.
 ref android.R.styleable#ViewGroup_MarginLayout_layout_marginStart
 ref android.R.styleable#ViewGroup_MarginLayout_layout_marginEnd
 @return true if either marginStart or marginEnd has been set.
 */
- (jboolean)isMarginRelative;

/**
 */
- (void)onDebugDrawWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)view
             withRepackagedAndroidGraphicsCanvas:(RepackagedAndroidGraphicsCanvas *)canvas
              withRepackagedAndroidGraphicsPaint:(RepackagedAndroidGraphicsPaint *)paint;

/**
 @brief This will be called by repackaged.android.view.View#requestLayout() .
 Left and Right margins may be overridden depending on layout direction.
 */
- (void)resolveLayoutDirectionWithInt:(jint)layoutDirection;

/**
 @brief Set the layout direction
 @param layoutDirection the layout direction. Should be either View#LAYOUT_DIRECTION_LTR or View#LAYOUT_DIRECTION_RTL .
 */
- (void)setLayoutDirectionWithInt:(jint)layoutDirection;

/**
 @brief Sets the relative end margin.
 Margin values should be positive.
 @param end the end margin size
 ref android.R.styleable#ViewGroup_MarginLayout_layout_marginEnd
 */
- (void)setMarginEndWithInt:(jint)end;

/**
 @brief Sets the margins, in pixels.
 A call to repackaged.android.view.View#requestLayout() needs to be done so that the new margins are taken into account. Left and right margins may be overriden by repackaged.android.view.View#requestLayout() depending on layout direction. Margin values should be positive.
 @param left the left margin size
 @param top the top margin size
 @param right the right margin size
 @param bottom the bottom margin size
 ref android.R.styleable#ViewGroup_MarginLayout_layout_marginLeft
 ref android.R.styleable#ViewGroup_MarginLayout_layout_marginTop
 ref android.R.styleable#ViewGroup_MarginLayout_layout_marginRight
 ref android.R.styleable#ViewGroup_MarginLayout_layout_marginBottom
 */
- (void)setMarginsWithInt:(jint)left
                  withInt:(jint)top
                  withInt:(jint)right
                  withInt:(jint)bottom;

/**
 @brief Sets the relative margins, in pixels.
 A call to repackaged.android.view.View#requestLayout() needs to be done so that the new relative margins are taken into account. Left and right margins may be overriden by repackaged.android.view.View#requestLayout() depending on layout direction. Margin values should be positive.
 @param start the start margin size
 @param top the top margin size
 @param end the right margin size
 @param bottom the bottom margin size
 ref android.R.styleable#ViewGroup_MarginLayout_layout_marginStart
 ref android.R.styleable#ViewGroup_MarginLayout_layout_marginTop
 ref android.R.styleable#ViewGroup_MarginLayout_layout_marginEnd
 ref android.R.styleable#ViewGroup_MarginLayout_layout_marginBottom
 */
- (void)setMarginsRelativeWithInt:(jint)start
                          withInt:(jint)top
                          withInt:(jint)end
                          withInt:(jint)bottom;

/**
 @brief Sets the relative start margin.
 Margin values should be positive.
 @param start the start margin size
 ref android.R.styleable#ViewGroup_MarginLayout_layout_marginStart
 */
- (void)setMarginStartWithInt:(jint)start;

#pragma mark Protected

/**
 */
- (void)encodePropertiesWithRepackagedAndroidViewViewHierarchyEncoder:(id<RepackagedAndroidViewViewHierarchyEncoder>)encoder;

@end

J2OBJC_EMPTY_STATIC_INIT(RepackagedAndroidViewViewGroup_MarginLayoutParams)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewViewGroup_MarginLayoutParams, DEFAULT_MARGIN_RELATIVE, jint)

FOUNDATION_EXPORT void RepackagedAndroidViewViewGroup_MarginLayoutParams_initWithRepackagedAndroidContentContext_withRepackagedAndroidUtilAttributeSet_(RepackagedAndroidViewViewGroup_MarginLayoutParams *self, id<RepackagedAndroidContentContext> c, id<RepackagedAndroidUtilAttributeSet> attrs);

FOUNDATION_EXPORT RepackagedAndroidViewViewGroup_MarginLayoutParams *new_RepackagedAndroidViewViewGroup_MarginLayoutParams_initWithRepackagedAndroidContentContext_withRepackagedAndroidUtilAttributeSet_(id<RepackagedAndroidContentContext> c, id<RepackagedAndroidUtilAttributeSet> attrs) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void RepackagedAndroidViewViewGroup_MarginLayoutParams_initWithInt_withInt_(RepackagedAndroidViewViewGroup_MarginLayoutParams *self, jint width, jint height);

FOUNDATION_EXPORT RepackagedAndroidViewViewGroup_MarginLayoutParams *new_RepackagedAndroidViewViewGroup_MarginLayoutParams_initWithInt_withInt_(jint width, jint height) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void RepackagedAndroidViewViewGroup_MarginLayoutParams_initWithRepackagedAndroidViewViewGroup_MarginLayoutParams_(RepackagedAndroidViewViewGroup_MarginLayoutParams *self, RepackagedAndroidViewViewGroup_MarginLayoutParams *source);

FOUNDATION_EXPORT RepackagedAndroidViewViewGroup_MarginLayoutParams *new_RepackagedAndroidViewViewGroup_MarginLayoutParams_initWithRepackagedAndroidViewViewGroup_MarginLayoutParams_(RepackagedAndroidViewViewGroup_MarginLayoutParams *source) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void RepackagedAndroidViewViewGroup_MarginLayoutParams_initWithRepackagedAndroidViewViewGroup_LayoutParams_(RepackagedAndroidViewViewGroup_MarginLayoutParams *self, RepackagedAndroidViewViewGroup_LayoutParams *source);

FOUNDATION_EXPORT RepackagedAndroidViewViewGroup_MarginLayoutParams *new_RepackagedAndroidViewViewGroup_MarginLayoutParams_initWithRepackagedAndroidViewViewGroup_LayoutParams_(RepackagedAndroidViewViewGroup_LayoutParams *source) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(RepackagedAndroidViewViewGroup_MarginLayoutParams)

/**
 @brief Pooled class that orderes the children of a ViewGroup from start to end based on how they are laid out and the layout direction.
 */
@interface RepackagedAndroidViewViewGroup_ChildListForAccessibility : NSObject

#pragma mark Public

- (RepackagedAndroidViewView *)getChildAtWithInt:(jint)index;

- (jint)getChildCount;

- (jint)getChildIndexWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)child;

+ (RepackagedAndroidViewViewGroup_ChildListForAccessibility *)obtainWithRepackagedAndroidViewViewGroup:(RepackagedAndroidViewViewGroup *)parent
                                                                                           withBoolean:(jboolean)sort;

- (void)recycle;

#pragma mark Package-Private

- (instancetype)init;

@end

J2OBJC_STATIC_INIT(RepackagedAndroidViewViewGroup_ChildListForAccessibility)

FOUNDATION_EXPORT RepackagedAndroidViewViewGroup_ChildListForAccessibility *RepackagedAndroidViewViewGroup_ChildListForAccessibility_obtainWithRepackagedAndroidViewViewGroup_withBoolean_(RepackagedAndroidViewViewGroup *parent, jboolean sort);

FOUNDATION_EXPORT void RepackagedAndroidViewViewGroup_ChildListForAccessibility_init(RepackagedAndroidViewViewGroup_ChildListForAccessibility *self);

FOUNDATION_EXPORT RepackagedAndroidViewViewGroup_ChildListForAccessibility *new_RepackagedAndroidViewViewGroup_ChildListForAccessibility_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(RepackagedAndroidViewViewGroup_ChildListForAccessibility)

#define RepackagedAndroidViewViewGroup_ViewLocationHolder_COMPARISON_STRATEGY_STRIPE 1
#define RepackagedAndroidViewViewGroup_ViewLocationHolder_COMPARISON_STRATEGY_LOCATION 2

/**
 @brief Pooled class that holds a View and its location with respect to a specified root.
 This enables sorting of views based on their coordinates without recomputing the position relative to the root on every comparison.
 */
@interface RepackagedAndroidViewViewGroup_ViewLocationHolder : NSObject < JavaLangComparable > {
 @public
  RepackagedAndroidViewView *mView_;
}

#pragma mark Public

- (jint)compareToWithId:(RepackagedAndroidViewViewGroup_ViewLocationHolder *)another;

+ (RepackagedAndroidViewViewGroup_ViewLocationHolder *)obtainWithRepackagedAndroidViewViewGroup:(RepackagedAndroidViewViewGroup *)root
                                                                  withRepackagedAndroidViewView:(RepackagedAndroidViewView *)view;

- (void)recycle;

+ (void)setComparisonStrategyWithInt:(jint)strategy;

#pragma mark Package-Private

- (instancetype)init;

@end

J2OBJC_STATIC_INIT(RepackagedAndroidViewViewGroup_ViewLocationHolder)

J2OBJC_FIELD_SETTER(RepackagedAndroidViewViewGroup_ViewLocationHolder, mView_, RepackagedAndroidViewView *)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewViewGroup_ViewLocationHolder, COMPARISON_STRATEGY_STRIPE, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewViewGroup_ViewLocationHolder, COMPARISON_STRATEGY_LOCATION, jint)

FOUNDATION_EXPORT RepackagedAndroidViewViewGroup_ViewLocationHolder *RepackagedAndroidViewViewGroup_ViewLocationHolder_obtainWithRepackagedAndroidViewViewGroup_withRepackagedAndroidViewView_(RepackagedAndroidViewViewGroup *root, RepackagedAndroidViewView *view);

FOUNDATION_EXPORT void RepackagedAndroidViewViewGroup_ViewLocationHolder_setComparisonStrategyWithInt_(jint strategy);

FOUNDATION_EXPORT void RepackagedAndroidViewViewGroup_ViewLocationHolder_init(RepackagedAndroidViewViewGroup_ViewLocationHolder *self);

FOUNDATION_EXPORT RepackagedAndroidViewViewGroup_ViewLocationHolder *new_RepackagedAndroidViewViewGroup_ViewLocationHolder_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(RepackagedAndroidViewViewGroup_ViewLocationHolder)

#endif // _RepackagedAndroidViewViewGroup_H_
