//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/androidlayouts/repackaged/android/view/ViewStructure.java
//

#ifndef _RepackagedAndroidViewViewStructure_H_
#define _RepackagedAndroidViewViewStructure_H_

#include "J2ObjC_header.h"

@class IOSIntArray;
@class RepackagedAndroidGraphicsMatrix;
@class RepackagedAndroidGraphicsRect;
@class RepackagedAndroidOsBundle;
@protocol JavaLangCharSequence;

/**
 @brief Container for storing additional per-view data generated by View#onProvideStructure View.onProvideStructure .
 */
@interface RepackagedAndroidViewViewStructure : NSObject

#pragma mark Public

- (instancetype)init;

/**
 @brief Add to this view's child count.
 This increases the current child count by <var>num</var> children beyond what was last set by #setChildCount or #addChildCount .  The index at which the new child starts in the child array is returned.
 @param num The number of new children to add.
 @return Returns the index in the child array at which the new children start.
 */
- (jint)addChildCountWithInt:(jint)num;

/**
 @brief Call when done populating a ViewStructure returned by #asyncNewChild .
 */
- (void)asyncCommit;

/**
 @brief Like #newChild , but allows the caller to asynchronously populate the returned child.
 It can transfer the returned ViewStructure to another thread for it to build its content (and children etc).  Once done, some thread must call #asyncCommit to tell the containing ViewStructure that the async population is done.
 @return Returns an fresh ViewStructure ready to be filled in.
 */
- (RepackagedAndroidViewViewStructure *)asyncNewChildWithInt:(jint)index;

/**
 @brief Return the child count as set by #setChildCount .
 */
- (jint)getChildCount;

/**
 @brief Get extra data associated with this view structure; the returned Bundle is mutable, allowing you to view and modify its contents.
 Keys placed in the Bundle should use an appropriate namespace prefix (such as com.google.MY_KEY) to avoid conflicts.
 */
- (RepackagedAndroidOsBundle *)getExtras;

/**
 @brief Retrieve the last hint set by #setHint .
 */
- (id<JavaLangCharSequence>)getHint;

/**
 */
- (RepackagedAndroidGraphicsRect *)getTempRect;

/**
 @brief Retrieve the last #setText(CharSequence) .
 */
- (id<JavaLangCharSequence>)getText;

/**
 @brief Retrieve the last selection end set by #setText(CharSequence,int,int) .
 */
- (jint)getTextSelectionEnd;

/**
 @brief Retrieve the last selection start set by #setText(CharSequence,int,int) .
 */
- (jint)getTextSelectionStart;

/**
 @brief Returns true if #getExtras has been used to create extra content.
 */
- (jboolean)hasExtras;

/**
 @brief Create a new child ViewStructure in this view, putting into the list of children at <var>index</var>.
 @return Returns an fresh ViewStructure ready to be filled in.
 */
- (RepackagedAndroidViewViewStructure *)newChildWithInt:(jint)index OBJC_METHOD_FAMILY_NONE;

/**
 @brief Set the accessibility focused state of this view, as per View#isAccessibilityFocused View.isAccessibilityFocused() .
 */
- (void)setAccessibilityFocusedWithBoolean:(jboolean)state;

/**
 @brief Set the activated state of this view, as per View#isActivated View.isActivated() .
 */
- (void)setActivatedWithBoolean:(jboolean)state;

/**
 @brief Set an alpha transformation that is applied to this view, as per View#getAlpha View.getAlpha() .
 Value ranges from 0 (completely transparent) to 1 (completely opaque); the default is 1, which means no transformation.
 */
- (void)setAlphaWithFloat:(jfloat)alpha;

/**
 */
- (void)setAssistBlockedWithBoolean:(jboolean)state;

/**
 @brief Set the checkable state of this view, such as whether it implements the repackaged.android.widget.Checkable interface.
 */
- (void)setCheckableWithBoolean:(jboolean)state;

/**
 @brief Set the checked state of this view, such as repackaged.android.widget.Checkable#isChecked Checkable.isChecked() .
 */
- (void)setCheckedWithBoolean:(jboolean)state;

/**
 @brief Set the number of children of this view, which defines the range of indices you can use with #newChild and #asyncNewChild .
 Calling this method again resets all of the child state of the view, removing any children that had previously been added.
 */
- (void)setChildCountWithInt:(jint)num;

/**
 @brief Set the class name of the view, as per View#getAccessibilityClassName View.getAccessibilityClassName() .
 */
- (void)setClassNameWithNSString:(NSString *)className_;

/**
 @brief Set the clickable state of this view, as per View#isClickable View.isClickable() .
 */
- (void)setClickableWithBoolean:(jboolean)state;

/**
 @brief Set the content description of the view, as per View#getContentDescription View.getContentDescription() .
 */
- (void)setContentDescriptionWithJavaLangCharSequence:(id<JavaLangCharSequence>)contentDescription;

/**
 @brief Set the context clickable state of this view, as per View#isContextClickable View.isContextClickable() .
 */
- (void)setContextClickableWithBoolean:(jboolean)state;

/**
 @brief Set the basic dimensions of this view.
 @param left The view's left position, in pixels relative to its parent's left edge.
 @param top The view's top position, in pixels relative to its parent's top edge.
 @param scrollX How much the view's x coordinate space has been scrolled, in pixels.
 @param scrollY How much the view's y coordinate space has been scrolled, in pixels.
 @param width The view's visible width, in pixels.  This is the width visible on screen, not the total data width of a scrollable view.
 @param height The view's visible height, in pixels.  This is the height visible on screen, not the total data height of a scrollable view.
 */
- (void)setDimensWithInt:(jint)left
                 withInt:(jint)top
                 withInt:(jint)scrollX
                 withInt:(jint)scrollY
                 withInt:(jint)width
                 withInt:(jint)height;

/**
 @brief Set the visual elevation (shadow) of the view, as per View#getZ View.getZ() .
 Note this is <em>not</em> related to the physical Z-ordering of this view relative to its other siblings (that is how they overlap when drawing), it is only the visual representation for shadowing.
 */
- (void)setElevationWithFloat:(jfloat)elevation;

/**
 @brief Set the enabled state of this view, as per View#isEnabled View.isEnabled() .
 */
- (void)setEnabledWithBoolean:(jboolean)state;

/**
 @brief Set the focusable state of this view, as per View#isFocusable View.isFocusable() .
 */
- (void)setFocusableWithBoolean:(jboolean)state;

/**
 @brief Set the focused state of this view, as per View#isFocused View.isFocused() .
 */
- (void)setFocusedWithBoolean:(jboolean)state;

/**
 @brief Set optional hint text associated with this view; this is for example the text that is shown by an EditText when it is empty to indicate to the user the kind of text to input.
 */
- (void)setHintWithJavaLangCharSequence:(id<JavaLangCharSequence>)hint;

/**
 @brief Set the identifier for this view.
 @param id The view's identifier, as per View#getId View.getId() .
 @param packageName The package name of the view's identifier, or null if there is none.
 @param typeName The type name of the view's identifier, or null if there is none.
 @param entryName The entry name of the view's identifier, or null if there is none.
 */
- (void)setIdWithInt:(jint)id_
        withNSString:(NSString *)packageName
        withNSString:(NSString *)typeName
        withNSString:(NSString *)entryName;

/**
 @brief Set the long clickable state of this view, as per View#isLongClickable View.isLongClickable() .
 */
- (void)setLongClickableWithBoolean:(jboolean)state;

/**
 @brief Set the selected state of this view, as per View#isSelected View.isSelected() .
 */
- (void)setSelectedWithBoolean:(jboolean)state;

/**
 @brief Set the text that is associated with this view.
 There is no selection associated with the text.  The text may have style spans to supply additional display and semantic information.
 */
- (void)setTextWithJavaLangCharSequence:(id<JavaLangCharSequence>)text;

/**
 @brief Like #setText(CharSequence) but with an active selection extending from <var>selectionStart</var> through <var>selectionEnd</var>.
 */
- (void)setTextWithJavaLangCharSequence:(id<JavaLangCharSequence>)text
                                withInt:(jint)selectionStart
                                withInt:(jint)selectionEnd;

/**
 @brief Set line information for test that was previously supplied through #setText(CharSequence) .
 This provides the line breaking of the text as it is shown on screen.  This function takes ownership of the provided arrays; you should not make further modification to them.
 @param charOffsets The offset in to #setText where a line starts.
 @param baselines The baseline where the line is drawn on screen.
 */
- (void)setTextLinesWithIntArray:(IOSIntArray *)charOffsets
                    withIntArray:(IOSIntArray *)baselines;

/**
 @brief Explicitly set default global style information for text that was previously set with #setText .
 @param size The size, in pixels, of the text.
 @param fgColor The foreground color, packed as 0xAARRGGBB.
 @param bgColor The background color, packed as 0xAARRGGBB.
 @param style Style flags, as defined by android.app.assist.AssistStructure.ViewNode .
 */
- (void)setTextStyleWithFloat:(jfloat)size
                      withInt:(jint)fgColor
                      withInt:(jint)bgColor
                      withInt:(jint)style;

/**
 @brief Set the transformation matrix associated with this view, as per View#getMatrix View.getMatrix() , or null if there is none.
 */
- (void)setTransformationWithRepackagedAndroidGraphicsMatrix:(RepackagedAndroidGraphicsMatrix *)matrix;

/**
 @brief Set the visibility state of this view, as per View#getVisibility View.getVisibility() .
 */
- (void)setVisibilityWithInt:(jint)visibility;

@end

J2OBJC_EMPTY_STATIC_INIT(RepackagedAndroidViewViewStructure)

FOUNDATION_EXPORT void RepackagedAndroidViewViewStructure_init(RepackagedAndroidViewViewStructure *self);

J2OBJC_TYPE_LITERAL_HEADER(RepackagedAndroidViewViewStructure)

#endif // _RepackagedAndroidViewViewStructure_H_
