//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/FMParser.java
//


#include "AddConcatExpression.h"
#include "AndExpression.h"
#include "ArithmeticEngine.h"
#include "ArithmeticExpression.h"
#include "Assignment.h"
#include "AssignmentInstruction.h"
#include "AttemptBlock.h"
#include "BlockAssignment.h"
#include "BodyInstruction.h"
#include "BooleanLiteral.h"
#include "BreakInstruction.h"
#include "BuiltIn.h"
#include "BuiltInForLoopVariable.h"
#include "BuiltInWithParseTimeParameters.h"
#include "BuiltinVariable.h"
#include "Case.h"
#include "Comment.h"
#include "ComparisonExpression.h"
#include "CompressedBlock.h"
#include "ConditionalBlock.h"
#include "Configuration.h"
#include "DeepUnwrap.h"
#include "DefaultToExpression.h"
#include "DollarVariable.h"
#include "Dot.h"
#include "DynamicKeyName.h"
#include "ElseOfList.h"
#include "EscapeBlock.h"
#include "ExistsExpression.h"
#include "Expression.h"
#include "FMParser.h"
#include "FMParserConstants.h"
#include "FMParserTokenManager.h"
#include "FallbackInstruction.h"
#include "FlushInstruction.h"
#include "HashLiteral.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "Identifier.h"
#include "IfBlock.h"
#include "Include.h"
#include "Items.h"
#include "IteratorBlock.h"
#include "J2ObjC_source.h"
#include "LibraryLoad.h"
#include "ListElseContainer.h"
#include "ListLiteral.h"
#include "Macro.h"
#include "MethodCall.h"
#include "MixedContent.h"
#include "NoEscapeBlock.h"
#include "NonStringException.h"
#include "NotExpression.h"
#include "NumberLiteral.h"
#include "NumericalOutput.h"
#include "OrExpression.h"
#include "ParentheticalExpression.h"
#include "ParseException.h"
#include "PropertySetting.h"
#include "Range.h"
#include "RecoveryBlock.h"
#include "RecurseNode.h"
#include "ReturnInstruction.h"
#include "Sep.h"
#include "SimpleCharStream.h"
#include "SpecialBuiltIn.h"
#include "StopInstruction.h"
#include "StringLiteral.h"
#include "StringUtil.h"
#include "SwitchBlock.h"
#include "Template.h"
#include "TemplateBooleanModel.h"
#include "TemplateCollectionModel.h"
#include "TemplateElement.h"
#include "TemplateHashModelEx.h"
#include "TemplateModel.h"
#include "TemplateModelException.h"
#include "TemplateModelIterator.h"
#include "TemplateScalarModel.h"
#include "TextBlock.h"
#include "Token.h"
#include "TransformBlock.h"
#include "TrimInstruction.h"
#include "UnaryPlusMinusExpression.h"
#include "UnifiedCall.h"
#include "VisitNode.h"
#include "_TemplateAPI.h"
#include "java/io/InputStream.h"
#include "java/io/Reader.h"
#include "java/io/StringReader.h"
#include "java/io/UnsupportedEncodingException.h"
#include "java/lang/AssertionError.h"
#include "java/lang/Character.h"
#include "java/lang/Error.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuffer.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"
#include "java/util/Iterator.h"
#include "java/util/LinkedList.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/StringTokenizer.h"

@class FreemarkerCoreFMParser_LookaheadSuccess;
@class FreemarkerCoreFMParser_ParserIteratorBlockContext;

#line 0 "/Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/FMParser.java"

#define FreemarkerCoreFMParser_ITERATOR_BLOCK_KIND_LIST 0
#define FreemarkerCoreFMParser_ITERATOR_BLOCK_KIND_FOREACH 1
#define FreemarkerCoreFMParser_ITERATOR_BLOCK_KIND_ITEMS 2
#define FreemarkerCoreFMParser_ITERATOR_BLOCK_KIND_USER_DIRECTIVE 3

@interface FreemarkerCoreFMParser () {
 @public
  /**
   @brief Necessary for adding macros and setting location info.
   */
  FreemarkerTemplateTemplate *template__;
  jboolean stripWhitespace_, stripText_;
  /**
   @brief Keeps track of #list and #foreach nesting.
   */
  id<JavaUtilList> iteratorBlockContexts_;
  /**
   @brief Keeps track of the nesting depth of directives that support #break.
   */
  jint breakableDirectiveNesting_;
  /**
   @brief Keeps track of the flags of the innermost parent #list or #foreach directive.
   */
  jint parentListAndForeachFlags_;
  jboolean inMacro_, inFunction_;
  JavaUtilLinkedList *escapes_;
  jint mixedContentNesting_;
  jint incompatibleImprovements_;
  jint jj_ntk_;
  FreemarkerCoreToken *jj_scanpos_, *jj_lastpos_;
  jint jj_la_;
  jint jj_gen_;
  IOSIntArray *jj_la1_;
  IOSObjectArray *jj_2_rtns_;
  jboolean jj_rescan_;
  jint jj_gc_;
  FreemarkerCoreFMParser_LookaheadSuccess *jj_ls_;
  id<JavaUtilList> jj_expentries_;
  IOSIntArray *jj_expentry_;
  jint jj_kind_;
  IOSIntArray *jj_lasttokens_;
  jint jj_endpos_;
}

/**
 @brief Throw an exception if the expression passed in is a String Literal
 */
- (void)notStringLiteralWithFreemarkerCoreExpression:(FreemarkerCoreExpression *)exp
                                        withNSString:(NSString *)expected;

/**
 @brief Throw an exception if the expression passed in is a Number Literal
 */
- (void)notNumberLiteralWithFreemarkerCoreExpression:(FreemarkerCoreExpression *)exp
                                        withNSString:(NSString *)expected;

/**
 @brief Throw an exception if the expression passed in is a boolean Literal
 */
- (void)notBooleanLiteralWithFreemarkerCoreExpression:(FreemarkerCoreExpression *)exp
                                         withNSString:(NSString *)expected;

/**
 @brief Throw an exception if the expression passed in is a Hash Literal
 */
- (void)notHashLiteralWithFreemarkerCoreExpression:(FreemarkerCoreExpression *)exp
                                      withNSString:(NSString *)expected;

/**
 @brief Throw an exception if the expression passed in is a List Literal
 */
- (void)notListLiteralWithFreemarkerCoreExpression:(FreemarkerCoreExpression *)exp
                                      withNSString:(NSString *)expected;

/**
 @brief Throw an exception if the expression passed in is a literal other than of the numerical type
 */
- (void)numberLiteralOnlyWithFreemarkerCoreExpression:(FreemarkerCoreExpression *)exp;

/**
 @brief Throw an exception if the expression passed in is not a string.
 */
- (void)stringLiteralOnlyWithFreemarkerCoreExpression:(FreemarkerCoreExpression *)exp;

/**
 @brief Throw an exception if the expression passed in is a literal other than of the boolean type
 */
- (void)booleanLiteralOnlyWithFreemarkerCoreExpression:(FreemarkerCoreExpression *)exp;

- (FreemarkerCoreExpression *)escapedExpressionWithFreemarkerCoreExpression:(FreemarkerCoreExpression *)exp;

- (jboolean)getBooleanWithFreemarkerCoreExpression:(FreemarkerCoreExpression *)exp;

- (FreemarkerCoreFMParser_ParserIteratorBlockContext *)pushIteratorBlockContext;

- (void)popIteratorBlockContext;

- (FreemarkerCoreFMParser_ParserIteratorBlockContext *)peekIteratorBlockContext;

- (void)checkLoopVariableBuiltInLHOWithNSString:(NSString *)loopVarName
                   withFreemarkerCoreExpression:(FreemarkerCoreExpression *)lhoExp
                        withFreemarkerCoreToken:(FreemarkerCoreToken *)biName;

- (NSString *)forEachDirectiveSymbol;

- (jboolean)jj_2_1WithInt:(jint)xla;

- (jboolean)jj_2_2WithInt:(jint)xla;

- (jboolean)jj_2_3WithInt:(jint)xla;

- (jboolean)jj_2_4WithInt:(jint)xla;

- (jboolean)jj_2_5WithInt:(jint)xla;

- (jboolean)jj_2_6WithInt:(jint)xla;

- (jboolean)jj_2_7WithInt:(jint)xla;

- (jboolean)jj_2_8WithInt:(jint)xla;

- (jboolean)jj_2_9WithInt:(jint)xla;

- (jboolean)jj_2_10WithInt:(jint)xla;

- (jboolean)jj_2_11WithInt:(jint)xla;

- (jboolean)jj_2_12WithInt:(jint)xla;

- (jboolean)jj_2_13WithInt:(jint)xla;

- (jboolean)jj_2_14WithInt:(jint)xla;

- (jboolean)jj_2_15WithInt:(jint)xla;

- (jboolean)jj_2_16WithInt:(jint)xla;

- (jboolean)jj_2_17WithInt:(jint)xla;

- (jboolean)jj_2_18WithInt:(jint)xla;

- (jboolean)jj_2_19WithInt:(jint)xla;

- (jboolean)jj_2_20WithInt:(jint)xla;

- (jboolean)jj_2_21WithInt:(jint)xla;

- (jboolean)jj_2_22WithInt:(jint)xla;

- (jboolean)jj_2_23WithInt:(jint)xla;

- (jboolean)jj_2_24WithInt:(jint)xla;

- (jboolean)jj_2_25WithInt:(jint)xla;

- (jboolean)jj_2_26WithInt:(jint)xla;

- (jboolean)jj_2_27WithInt:(jint)xla;

- (jboolean)jj_2_28WithInt:(jint)xla;

- (jboolean)jj_2_29WithInt:(jint)xla;

- (jboolean)jj_2_30WithInt:(jint)xla;

- (jboolean)jj_2_31WithInt:(jint)xla;

- (jboolean)jj_2_32WithInt:(jint)xla;

- (jboolean)jj_2_33WithInt:(jint)xla;

- (jboolean)jj_2_34WithInt:(jint)xla;

- (jboolean)jj_2_35WithInt:(jint)xla;

- (jboolean)jj_2_36WithInt:(jint)xla;

- (jboolean)jj_2_37WithInt:(jint)xla;

- (jboolean)jj_2_38WithInt:(jint)xla;

- (jboolean)jj_2_39WithInt:(jint)xla;

- (jboolean)jj_2_40WithInt:(jint)xla;

- (jboolean)jj_2_41WithInt:(jint)xla;

- (jboolean)jj_2_42WithInt:(jint)xla;

- (jboolean)jj_2_43WithInt:(jint)xla;

- (jboolean)jj_2_44WithInt:(jint)xla;

- (jboolean)jj_2_45WithInt:(jint)xla;

- (jboolean)jj_2_46WithInt:(jint)xla;

- (jboolean)jj_2_47WithInt:(jint)xla;

- (jboolean)jj_2_48WithInt:(jint)xla;

- (jboolean)jj_2_49WithInt:(jint)xla;

- (jboolean)jj_2_50WithInt:(jint)xla;

- (jboolean)jj_2_51WithInt:(jint)xla;

- (jboolean)jj_2_52WithInt:(jint)xla;

- (jboolean)jj_2_53WithInt:(jint)xla;

- (jboolean)jj_2_54WithInt:(jint)xla;

- (jboolean)jj_2_55WithInt:(jint)xla;

- (jboolean)jj_2_56WithInt:(jint)xla;

- (jboolean)jj_2_57WithInt:(jint)xla;

- (jboolean)jj_2_58WithInt:(jint)xla;

- (jboolean)jj_2_59WithInt:(jint)xla;

- (jboolean)jj_2_60WithInt:(jint)xla;

- (jboolean)jj_2_61WithInt:(jint)xla;

- (jboolean)jj_2_62WithInt:(jint)xla;

- (jboolean)jj_2_63WithInt:(jint)xla;

- (jboolean)jj_2_64WithInt:(jint)xla;

- (jboolean)jj_2_65WithInt:(jint)xla;

- (jboolean)jj_2_66WithInt:(jint)xla;

- (jboolean)jj_2_67WithInt:(jint)xla;

- (jboolean)jj_2_68WithInt:(jint)xla;

- (jboolean)jj_2_69WithInt:(jint)xla;

- (jboolean)jj_2_70WithInt:(jint)xla;

- (jboolean)jj_2_71WithInt:(jint)xla;

- (jboolean)jj_2_72WithInt:(jint)xla;

- (jboolean)jj_2_73WithInt:(jint)xla;

- (jboolean)jj_2_74WithInt:(jint)xla;

- (jboolean)jj_2_75WithInt:(jint)xla;

- (jboolean)jj_2_76WithInt:(jint)xla;

- (jboolean)jj_2_77WithInt:(jint)xla;

- (jboolean)jj_2_78WithInt:(jint)xla;

- (jboolean)jj_2_79WithInt:(jint)xla;

- (jboolean)jj_2_80WithInt:(jint)xla;

- (jboolean)jj_2_81WithInt:(jint)xla;

- (jboolean)jj_2_82WithInt:(jint)xla;

- (jboolean)jj_2_83WithInt:(jint)xla;

- (jboolean)jj_2_84WithInt:(jint)xla;

- (jboolean)jj_2_85WithInt:(jint)xla;

- (jboolean)jj_2_86WithInt:(jint)xla;

- (jboolean)jj_2_87WithInt:(jint)xla;

- (jboolean)jj_2_88WithInt:(jint)xla;

- (jboolean)jj_2_89WithInt:(jint)xla;

- (jboolean)jj_2_90WithInt:(jint)xla;

- (jboolean)jj_2_91WithInt:(jint)xla;

- (jboolean)jj_2_92WithInt:(jint)xla;

- (jboolean)jj_2_93WithInt:(jint)xla;

- (jboolean)jj_2_94WithInt:(jint)xla;

- (jboolean)jj_2_95WithInt:(jint)xla;

- (jboolean)jj_2_96WithInt:(jint)xla;

- (jboolean)jj_2_97WithInt:(jint)xla;

- (jboolean)jj_2_98WithInt:(jint)xla;

- (jboolean)jj_2_99WithInt:(jint)xla;

- (jboolean)jj_2_100WithInt:(jint)xla;

- (jboolean)jj_2_101WithInt:(jint)xla;

- (jboolean)jj_2_102WithInt:(jint)xla;

- (jboolean)jj_2_103WithInt:(jint)xla;

- (jboolean)jj_2_104WithInt:(jint)xla;

- (jboolean)jj_2_105WithInt:(jint)xla;

- (jboolean)jj_2_106WithInt:(jint)xla;

- (jboolean)jj_2_107WithInt:(jint)xla;

- (jboolean)jj_2_108WithInt:(jint)xla;

- (jboolean)jj_2_109WithInt:(jint)xla;

- (jboolean)jj_2_110WithInt:(jint)xla;

- (jboolean)jj_2_111WithInt:(jint)xla;

- (jboolean)jj_2_112WithInt:(jint)xla;

- (jboolean)jj_2_113WithInt:(jint)xla;

- (jboolean)jj_2_114WithInt:(jint)xla;

- (jboolean)jj_2_115WithInt:(jint)xla;

- (jboolean)jj_2_116WithInt:(jint)xla;

- (jboolean)jj_2_117WithInt:(jint)xla;

- (jboolean)jj_2_118WithInt:(jint)xla;

- (jboolean)jj_2_119WithInt:(jint)xla;

- (jboolean)jj_2_120WithInt:(jint)xla;

- (jboolean)jj_2_121WithInt:(jint)xla;

- (jboolean)jj_2_122WithInt:(jint)xla;

- (jboolean)jj_2_123WithInt:(jint)xla;

- (jboolean)jj_2_124WithInt:(jint)xla;

- (jboolean)jj_2_125WithInt:(jint)xla;

- (jboolean)jj_2_126WithInt:(jint)xla;

- (jboolean)jj_2_127WithInt:(jint)xla;

- (jboolean)jj_2_128WithInt:(jint)xla;

- (jboolean)jj_2_129WithInt:(jint)xla;

- (jboolean)jj_2_130WithInt:(jint)xla;

- (jboolean)jj_2_131WithInt:(jint)xla;

- (jboolean)jj_2_132WithInt:(jint)xla;

- (jboolean)jj_2_133WithInt:(jint)xla;

- (jboolean)jj_2_134WithInt:(jint)xla;

- (jboolean)jj_2_135WithInt:(jint)xla;

- (jboolean)jj_2_136WithInt:(jint)xla;

- (jboolean)jj_2_137WithInt:(jint)xla;

- (jboolean)jj_2_138WithInt:(jint)xla;

- (jboolean)jj_2_139WithInt:(jint)xla;

- (jboolean)jj_2_140WithInt:(jint)xla;

- (jboolean)jj_2_141WithInt:(jint)xla;

- (jboolean)jj_2_142WithInt:(jint)xla;

- (jboolean)jj_2_143WithInt:(jint)xla;

- (jboolean)jj_2_144WithInt:(jint)xla;

- (jboolean)jj_2_145WithInt:(jint)xla;

- (jboolean)jj_2_146WithInt:(jint)xla;

- (jboolean)jj_2_147WithInt:(jint)xla;

- (jboolean)jj_2_148WithInt:(jint)xla;

- (jboolean)jj_2_149WithInt:(jint)xla;

- (jboolean)jj_2_150WithInt:(jint)xla;

- (jboolean)jj_2_151WithInt:(jint)xla;

- (jboolean)jj_2_152WithInt:(jint)xla;

- (jboolean)jj_2_153WithInt:(jint)xla;

- (jboolean)jj_2_154WithInt:(jint)xla;

- (jboolean)jj_2_155WithInt:(jint)xla;

- (jboolean)jj_2_156WithInt:(jint)xla;

- (jboolean)jj_2_157WithInt:(jint)xla;

- (jboolean)jj_2_158WithInt:(jint)xla;

- (jboolean)jj_2_159WithInt:(jint)xla;

- (jboolean)jj_2_160WithInt:(jint)xla;

- (jboolean)jj_2_161WithInt:(jint)xla;

- (jboolean)jj_2_162WithInt:(jint)xla;

- (jboolean)jj_2_163WithInt:(jint)xla;

- (jboolean)jj_2_164WithInt:(jint)xla;

- (jboolean)jj_2_165WithInt:(jint)xla;

- (jboolean)jj_2_166WithInt:(jint)xla;

- (jboolean)jj_2_167WithInt:(jint)xla;

- (jboolean)jj_2_168WithInt:(jint)xla;

- (jboolean)jj_2_169WithInt:(jint)xla;

- (jboolean)jj_2_170WithInt:(jint)xla;

- (jboolean)jj_2_171WithInt:(jint)xla;

- (jboolean)jj_2_172WithInt:(jint)xla;

- (jboolean)jj_2_173WithInt:(jint)xla;

- (jboolean)jj_2_174WithInt:(jint)xla;

- (jboolean)jj_2_175WithInt:(jint)xla;

- (jboolean)jj_2_176WithInt:(jint)xla;

- (jboolean)jj_2_177WithInt:(jint)xla;

- (jboolean)jj_2_178WithInt:(jint)xla;

- (jboolean)jj_2_179WithInt:(jint)xla;

- (jboolean)jj_2_180WithInt:(jint)xla;

- (jboolean)jj_2_181WithInt:(jint)xla;

- (jboolean)jj_2_182WithInt:(jint)xla;

- (jboolean)jj_2_183WithInt:(jint)xla;

- (jboolean)jj_2_184WithInt:(jint)xla;

- (jboolean)jj_2_185WithInt:(jint)xla;

- (jboolean)jj_2_186WithInt:(jint)xla;

- (jboolean)jj_2_187WithInt:(jint)xla;

- (jboolean)jj_2_188WithInt:(jint)xla;

- (jboolean)jj_2_189WithInt:(jint)xla;

- (jboolean)jj_2_190WithInt:(jint)xla;

- (jboolean)jj_2_191WithInt:(jint)xla;

- (jboolean)jj_2_192WithInt:(jint)xla;

- (jboolean)jj_2_193WithInt:(jint)xla;

- (jboolean)jj_2_194WithInt:(jint)xla;

- (jboolean)jj_2_195WithInt:(jint)xla;

- (jboolean)jj_2_196WithInt:(jint)xla;

- (jboolean)jj_2_197WithInt:(jint)xla;

- (jboolean)jj_2_198WithInt:(jint)xla;

- (jboolean)jj_2_199WithInt:(jint)xla;

- (jboolean)jj_2_200WithInt:(jint)xla;

- (jboolean)jj_2_201WithInt:(jint)xla;

- (jboolean)jj_2_202WithInt:(jint)xla;

- (jboolean)jj_2_203WithInt:(jint)xla;

- (jboolean)jj_2_204WithInt:(jint)xla;

- (jboolean)jj_2_205WithInt:(jint)xla;

- (jboolean)jj_2_206WithInt:(jint)xla;

- (jboolean)jj_2_207WithInt:(jint)xla;

- (jboolean)jj_2_208WithInt:(jint)xla;

- (jboolean)jj_2_209WithInt:(jint)xla;

- (jboolean)jj_2_210WithInt:(jint)xla;

- (jboolean)jj_2_211WithInt:(jint)xla;

- (jboolean)jj_2_212WithInt:(jint)xla;

- (jboolean)jj_2_213WithInt:(jint)xla;

- (jboolean)jj_2_214WithInt:(jint)xla;

- (jboolean)jj_2_215WithInt:(jint)xla;

- (jboolean)jj_2_216WithInt:(jint)xla;

- (jboolean)jj_2_217WithInt:(jint)xla;

- (jboolean)jj_2_218WithInt:(jint)xla;

- (jboolean)jj_2_219WithInt:(jint)xla;

- (jboolean)jj_2_220WithInt:(jint)xla;

- (jboolean)jj_2_221WithInt:(jint)xla;

- (jboolean)jj_2_222WithInt:(jint)xla;

- (jboolean)jj_2_223WithInt:(jint)xla;

- (jboolean)jj_2_224WithInt:(jint)xla;

- (jboolean)jj_2_225WithInt:(jint)xla;

- (jboolean)jj_3_21;

- (jboolean)jj_3_151;

- (jboolean)jj_3_20;

- (jboolean)jj_3_19;

- (jboolean)jj_3_145;

- (jboolean)jj_3_149;

- (jboolean)jj_3_144;

- (jboolean)jj_3_82;

- (jboolean)jj_3_150;

- (jboolean)jj_3R_94;

- (jboolean)jj_3R_51;

- (jboolean)jj_3R_84;

- (jboolean)jj_3_143;

- (jboolean)jj_3R_58;

- (jboolean)jj_3R_90;

- (jboolean)jj_3_18;

- (jboolean)jj_3_17;

- (jboolean)jj_3_16;

- (jboolean)jj_3_225;

- (jboolean)jj_3_81;

- (jboolean)jj_3_80;

- (jboolean)jj_3R_85;

- (jboolean)jj_3R_57;

- (jboolean)jj_3R_78;

- (jboolean)jj_3R_34;

- (jboolean)jj_3_223;

- (jboolean)jj_3_15;

- (jboolean)jj_3_79;

- (jboolean)jj_3_14;

- (jboolean)jj_3_142;

- (jboolean)jj_3_224;

- (jboolean)jj_3R_31;

- (jboolean)jj_3_141;

- (jboolean)jj_3_78;

- (jboolean)jj_3_13;

- (jboolean)jj_3_140;

- (jboolean)jj_3R_32;

- (jboolean)jj_3R_50;

- (jboolean)jj_3_12;

- (jboolean)jj_3_11;

- (jboolean)jj_3_10;

- (jboolean)jj_3R_93;

- (jboolean)jj_3_139;

- (jboolean)jj_3_138;

- (jboolean)jj_3_137;

- (jboolean)jj_3_136;

- (jboolean)jj_3_135;

- (jboolean)jj_3_9;

- (jboolean)jj_3R_29;

- (jboolean)jj_3_134;

- (jboolean)jj_3_133;

- (jboolean)jj_3R_83;

- (jboolean)jj_3_8;

- (jboolean)jj_3R_56;

- (jboolean)jj_3_7;

- (jboolean)jj_3_6;

- (jboolean)jj_3_5;

- (jboolean)jj_3_4;

- (jboolean)jj_3_3;

- (jboolean)jj_3_2;

- (jboolean)jj_3_1;

- (jboolean)jj_3_220;

- (jboolean)jj_3R_33;

- (jboolean)jj_3_77;

- (jboolean)jj_3R_81;

- (jboolean)jj_3_222;

- (jboolean)jj_3R_55;

- (jboolean)jj_3_221;

- (jboolean)jj_3R_42;

- (jboolean)jj_3_219;

- (jboolean)jj_3R_80;

- (jboolean)jj_3R_87;

- (jboolean)jj_3R_44;

- (jboolean)jj_3_75;

- (jboolean)jj_3_74;

- (jboolean)jj_3_73;

- (jboolean)jj_3_132;

- (jboolean)jj_3_217;

- (jboolean)jj_3_72;

- (jboolean)jj_3_216;

- (jboolean)jj_3_131;

- (jboolean)jj_3_209;

- (jboolean)jj_3_215;

- (jboolean)jj_3R_54;

- (jboolean)jj_3_71;

- (jboolean)jj_3_218;

- (jboolean)jj_3_76;

- (jboolean)jj_3_128;

- (jboolean)jj_3R_24;

- (jboolean)jj_3_119;

- (jboolean)jj_3_127;

- (jboolean)jj_3_126;

- (jboolean)jj_3_208;

- (jboolean)jj_3_70;

- (jboolean)jj_3_118;

- (jboolean)jj_3_69;

- (jboolean)jj_3_214;

- (jboolean)jj_3_213;

- (jboolean)jj_3_212;

- (jboolean)jj_3R_26;

- (jboolean)jj_3_125;

- (jboolean)jj_3_211;

- (jboolean)jj_3R_100;

- (jboolean)jj_3_117;

- (jboolean)jj_3_130;

- (jboolean)jj_3_207;

- (jboolean)jj_3R_97;

- (jboolean)jj_3_107;

- (jboolean)jj_3_116;

- (jboolean)jj_3_121;

- (jboolean)jj_3_68;

- (jboolean)jj_3_124;

- (jboolean)jj_3_106;

- (jboolean)jj_3_206;

- (jboolean)jj_3_210;

- (jboolean)jj_3_67;

- (jboolean)jj_3R_89;

- (jboolean)jj_3R_25;

- (jboolean)jj_3_115;

- (jboolean)jj_3_120;

- (jboolean)jj_3_123;

- (jboolean)jj_3_105;

- (jboolean)jj_3_114;

- (jboolean)jj_3R_38;

- (jboolean)jj_3_122;

- (jboolean)jj_3_204;

- (jboolean)jj_3_205;

- (jboolean)jj_3_203;

- (jboolean)jj_3_104;

- (jboolean)jj_3_202;

- (jboolean)jj_3_113;

- (jboolean)jj_3R_91;

- (jboolean)jj_3_112;

- (jboolean)jj_3_109;

- (jboolean)jj_3R_48;

- (jboolean)jj_3R_79;

- (jboolean)jj_3_103;

- (jboolean)jj_3R_37;

- (jboolean)jj_3_108;

- (jboolean)jj_3_102;

- (jboolean)jj_3_111;

- (jboolean)jj_3_201;

- (jboolean)jj_3_200;

- (jboolean)jj_3_65;

- (jboolean)jj_3_199;

- (jboolean)jj_3_62;

- (jboolean)jj_3_198;

- (jboolean)jj_3_61;

- (jboolean)jj_3_197;

- (jboolean)jj_3_60;

- (jboolean)jj_3_196;

- (jboolean)jj_3_59;

- (jboolean)jj_3_110;

- (jboolean)jj_3_195;

- (jboolean)jj_3_58;

- (jboolean)jj_3_194;

- (jboolean)jj_3_57;

- (jboolean)jj_3_193;

- (jboolean)jj_3_56;

- (jboolean)jj_3_64;

- (jboolean)jj_3_192;

- (jboolean)jj_3_55;

- (jboolean)jj_3_191;

- (jboolean)jj_3_54;

- (jboolean)jj_3_190;

- (jboolean)jj_3_189;

- (jboolean)jj_3_129;

- (jboolean)jj_3_66;

- (jboolean)jj_3_188;

- (jboolean)jj_3_63;

- (jboolean)jj_3_187;

- (jboolean)jj_3_186;

- (jboolean)jj_3_185;

- (jboolean)jj_3R_36;

- (jboolean)jj_3_184;

- (jboolean)jj_3_183;

- (jboolean)jj_3_182;

- (jboolean)jj_3_101;

- (jboolean)jj_3_181;

- (jboolean)jj_3_180;

- (jboolean)jj_3_100;

- (jboolean)jj_3_99;

- (jboolean)jj_3_179;

- (jboolean)jj_3_178;

- (jboolean)jj_3_177;

- (jboolean)jj_3R_53;

- (jboolean)jj_3_176;

- (jboolean)jj_3_175;

- (jboolean)jj_3_174;

- (jboolean)jj_3_173;

- (jboolean)jj_3R_106;

- (jboolean)jj_3R_82;

- (jboolean)jj_3_98;

- (jboolean)jj_3_97;

- (jboolean)jj_3_96;

- (jboolean)jj_3_95;

- (jboolean)jj_3R_71;

- (jboolean)jj_3R_66;

- (jboolean)jj_3R_39;

- (jboolean)jj_3R_70;

- (jboolean)jj_3_172;

- (jboolean)jj_3_171;

- (jboolean)jj_3R_46;

- (jboolean)jj_3_51;

- (jboolean)jj_3R_41;

- (jboolean)jj_3_94;

- (jboolean)jj_3R_43;

- (jboolean)jj_3_93;

- (jboolean)jj_3_53;

- (jboolean)jj_3R_72;

- (jboolean)jj_3R_74;

- (jboolean)jj_3_52;

- (jboolean)jj_3R_40;

- (jboolean)jj_3_92;

- (jboolean)jj_3_91;

- (jboolean)jj_3_50;

- (jboolean)jj_3_49;

- (jboolean)jj_3R_69;

- (jboolean)jj_3_48;

- (jboolean)jj_3_47;

- (jboolean)jj_3_46;

- (jboolean)jj_3_45;

- (jboolean)jj_3R_73;

- (jboolean)jj_3R_92;

- (jboolean)jj_3_170;

- (jboolean)jj_3_169;

- (jboolean)jj_3_90;

- (jboolean)jj_3_89;

- (jboolean)jj_3_168;

- (jboolean)jj_3R_49;

- (jboolean)jj_3R_68;

- (jboolean)jj_3R_30;

- (jboolean)jj_3_44;

- (jboolean)jj_3_43;

- (jboolean)jj_3_167;

- (jboolean)jj_3R_88;

- (jboolean)jj_3R_67;

- (jboolean)jj_3_166;

- (jboolean)jj_3R_28;

- (jboolean)jj_3R_65;

- (jboolean)jj_3_42;

- (jboolean)jj_3R_77;

- (jboolean)jj_3_41;

- (jboolean)jj_3R_23;

- (jboolean)jj_3_86;

- (jboolean)jj_3_85;

- (jboolean)jj_3_165;

- (jboolean)jj_3_164;

- (jboolean)jj_3R_27;

- (jboolean)jj_3_88;

- (jboolean)jj_3_163;

- (jboolean)jj_3_87;

- (jboolean)jj_3_162;

- (jboolean)jj_3R_76;

- (jboolean)jj_3_40;

- (jboolean)jj_3R_64;

- (jboolean)jj_3R_96;

- (jboolean)jj_3_84;

- (jboolean)jj_3R_86;

- (jboolean)jj_3R_63;

- (jboolean)jj_3R_75;

- (jboolean)jj_3_39;

- (jboolean)jj_3_161;

- (jboolean)jj_3_160;

- (jboolean)jj_3R_99;

- (jboolean)jj_3R_62;

- (jboolean)jj_3R_95;

- (jboolean)jj_3_158;

- (jboolean)jj_3_157;

- (jboolean)jj_3_36;

- (jboolean)jj_3R_60;

- (jboolean)jj_3_159;

- (jboolean)jj_3R_47;

- (jboolean)jj_3R_35;

- (jboolean)jj_3_35;

- (jboolean)jj_3_34;

- (jboolean)jj_3_38;

- (jboolean)jj_3_156;

- (jboolean)jj_3_37;

- (jboolean)jj_3R_105;

- (jboolean)jj_3_153;

- (jboolean)jj_3R_103;

- (jboolean)jj_3R_59;

- (jboolean)jj_3_154;

- (jboolean)jj_3_155;

- (jboolean)jj_3_32;

- (jboolean)jj_3_31;

- (jboolean)jj_3_30;

- (jboolean)jj_3_33;

- (jboolean)jj_3_29;

- (jboolean)jj_3R_61;

- (jboolean)jj_3_28;

- (jboolean)jj_3_27;

- (jboolean)jj_3R_104;

- (jboolean)jj_3R_52;

- (jboolean)jj_3R_101;

- (jboolean)jj_3R_45;

- (jboolean)jj_3_26;

- (jboolean)jj_3_25;

- (jboolean)jj_3_24;

- (jboolean)jj_3_23;

- (jboolean)jj_3R_102;

- (jboolean)jj_3R_98;

- (jboolean)jj_3_83;

- (jboolean)jj_3_148;

- (jboolean)jj_3_22;

- (jboolean)jj_3_147;

- (jboolean)jj_3_146;

- (jboolean)jj_3_152;

+ (void)jj_la1_init_0;

+ (void)jj_la1_init_1;

+ (void)jj_la1_init_2;

+ (void)jj_la1_init_3;

+ (void)jj_la1_init_4;

- (FreemarkerCoreToken *)jj_consume_tokenWithInt:(jint)kind;

- (jboolean)jj_scan_tokenWithInt:(jint)kind;

- (jint)jj_ntk_f;

- (void)jj_add_error_tokenWithInt:(jint)kind
                          withInt:(jint)pos;

- (void)jj_rescan_token;

- (void)jj_saveWithInt:(jint)index
               withInt:(jint)xla;

@end

J2OBJC_FIELD_SETTER(FreemarkerCoreFMParser, template__, FreemarkerTemplateTemplate *)
J2OBJC_FIELD_SETTER(FreemarkerCoreFMParser, iteratorBlockContexts_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(FreemarkerCoreFMParser, escapes_, JavaUtilLinkedList *)
J2OBJC_FIELD_SETTER(FreemarkerCoreFMParser, jj_scanpos_, FreemarkerCoreToken *)
J2OBJC_FIELD_SETTER(FreemarkerCoreFMParser, jj_lastpos_, FreemarkerCoreToken *)
J2OBJC_FIELD_SETTER(FreemarkerCoreFMParser, jj_la1_, IOSIntArray *)
J2OBJC_FIELD_SETTER(FreemarkerCoreFMParser, jj_2_rtns_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(FreemarkerCoreFMParser, jj_ls_, FreemarkerCoreFMParser_LookaheadSuccess *)
J2OBJC_FIELD_SETTER(FreemarkerCoreFMParser, jj_expentries_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(FreemarkerCoreFMParser, jj_expentry_, IOSIntArray *)
J2OBJC_FIELD_SETTER(FreemarkerCoreFMParser, jj_lasttokens_, IOSIntArray *)

J2OBJC_STATIC_FIELD_GETTER(FreemarkerCoreFMParser, ITERATOR_BLOCK_KIND_LIST, jint)

J2OBJC_STATIC_FIELD_GETTER(FreemarkerCoreFMParser, ITERATOR_BLOCK_KIND_FOREACH, jint)

J2OBJC_STATIC_FIELD_GETTER(FreemarkerCoreFMParser, ITERATOR_BLOCK_KIND_ITEMS, jint)

J2OBJC_STATIC_FIELD_GETTER(FreemarkerCoreFMParser, ITERATOR_BLOCK_KIND_USER_DIRECTIVE, jint)

static IOSIntArray *FreemarkerCoreFMParser_jj_la1_0_;
J2OBJC_STATIC_FIELD_GETTER(FreemarkerCoreFMParser, jj_la1_0_, IOSIntArray *)
J2OBJC_STATIC_FIELD_SETTER(FreemarkerCoreFMParser, jj_la1_0_, IOSIntArray *)

static IOSIntArray *FreemarkerCoreFMParser_jj_la1_1_;
J2OBJC_STATIC_FIELD_GETTER(FreemarkerCoreFMParser, jj_la1_1_, IOSIntArray *)
J2OBJC_STATIC_FIELD_SETTER(FreemarkerCoreFMParser, jj_la1_1_, IOSIntArray *)

static IOSIntArray *FreemarkerCoreFMParser_jj_la1_2_;
J2OBJC_STATIC_FIELD_GETTER(FreemarkerCoreFMParser, jj_la1_2_, IOSIntArray *)
J2OBJC_STATIC_FIELD_SETTER(FreemarkerCoreFMParser, jj_la1_2_, IOSIntArray *)

static IOSIntArray *FreemarkerCoreFMParser_jj_la1_3_;
J2OBJC_STATIC_FIELD_GETTER(FreemarkerCoreFMParser, jj_la1_3_, IOSIntArray *)
J2OBJC_STATIC_FIELD_SETTER(FreemarkerCoreFMParser, jj_la1_3_, IOSIntArray *)

static IOSIntArray *FreemarkerCoreFMParser_jj_la1_4_;
J2OBJC_STATIC_FIELD_GETTER(FreemarkerCoreFMParser, jj_la1_4_, IOSIntArray *)
J2OBJC_STATIC_FIELD_SETTER(FreemarkerCoreFMParser, jj_la1_4_, IOSIntArray *)

__attribute__((unused)) static void FreemarkerCoreFMParser_notStringLiteralWithFreemarkerCoreExpression_withNSString_(FreemarkerCoreFMParser *self, FreemarkerCoreExpression *exp, NSString *expected);

__attribute__((unused)) static void FreemarkerCoreFMParser_notNumberLiteralWithFreemarkerCoreExpression_withNSString_(FreemarkerCoreFMParser *self, FreemarkerCoreExpression *exp, NSString *expected);

__attribute__((unused)) static void FreemarkerCoreFMParser_notBooleanLiteralWithFreemarkerCoreExpression_withNSString_(FreemarkerCoreFMParser *self, FreemarkerCoreExpression *exp, NSString *expected);

__attribute__((unused)) static void FreemarkerCoreFMParser_notHashLiteralWithFreemarkerCoreExpression_withNSString_(FreemarkerCoreFMParser *self, FreemarkerCoreExpression *exp, NSString *expected);

__attribute__((unused)) static void FreemarkerCoreFMParser_notListLiteralWithFreemarkerCoreExpression_withNSString_(FreemarkerCoreFMParser *self, FreemarkerCoreExpression *exp, NSString *expected);

__attribute__((unused)) static void FreemarkerCoreFMParser_numberLiteralOnlyWithFreemarkerCoreExpression_(FreemarkerCoreFMParser *self, FreemarkerCoreExpression *exp);

__attribute__((unused)) static void FreemarkerCoreFMParser_stringLiteralOnlyWithFreemarkerCoreExpression_(FreemarkerCoreFMParser *self, FreemarkerCoreExpression *exp);

__attribute__((unused)) static void FreemarkerCoreFMParser_booleanLiteralOnlyWithFreemarkerCoreExpression_(FreemarkerCoreFMParser *self, FreemarkerCoreExpression *exp);

__attribute__((unused)) static FreemarkerCoreExpression *FreemarkerCoreFMParser_escapedExpressionWithFreemarkerCoreExpression_(FreemarkerCoreFMParser *self, FreemarkerCoreExpression *exp);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_getBooleanWithFreemarkerCoreExpression_(FreemarkerCoreFMParser *self, FreemarkerCoreExpression *exp);

__attribute__((unused)) static FreemarkerCoreFMParser_ParserIteratorBlockContext *FreemarkerCoreFMParser_pushIteratorBlockContext(FreemarkerCoreFMParser *self);

__attribute__((unused)) static void FreemarkerCoreFMParser_popIteratorBlockContext(FreemarkerCoreFMParser *self);

__attribute__((unused)) static FreemarkerCoreFMParser_ParserIteratorBlockContext *FreemarkerCoreFMParser_peekIteratorBlockContext(FreemarkerCoreFMParser *self);

__attribute__((unused)) static void FreemarkerCoreFMParser_checkLoopVariableBuiltInLHOWithNSString_withFreemarkerCoreExpression_withFreemarkerCoreToken_(FreemarkerCoreFMParser *self, NSString *loopVarName, FreemarkerCoreExpression *lhoExp, FreemarkerCoreToken *biName);

__attribute__((unused)) static NSString *FreemarkerCoreFMParser_forEachDirectiveSymbol(FreemarkerCoreFMParser *self);

__attribute__((unused)) static FreemarkerCoreExpression *FreemarkerCoreFMParser_Expression(FreemarkerCoreFMParser *self);

__attribute__((unused)) static FreemarkerCoreExpression *FreemarkerCoreFMParser_PrimaryExpression(FreemarkerCoreFMParser *self);

__attribute__((unused)) static FreemarkerCoreExpression *FreemarkerCoreFMParser_Parenthesis(FreemarkerCoreFMParser *self);

__attribute__((unused)) static FreemarkerCoreExpression *FreemarkerCoreFMParser_UnaryExpression(FreemarkerCoreFMParser *self);

__attribute__((unused)) static FreemarkerCoreExpression *FreemarkerCoreFMParser_NotExpression(FreemarkerCoreFMParser *self);

__attribute__((unused)) static FreemarkerCoreExpression *FreemarkerCoreFMParser_UnaryPlusMinusExpression(FreemarkerCoreFMParser *self);

__attribute__((unused)) static FreemarkerCoreExpression *FreemarkerCoreFMParser_AdditiveExpression(FreemarkerCoreFMParser *self);

__attribute__((unused)) static FreemarkerCoreExpression *FreemarkerCoreFMParser_MultiplicativeExpression(FreemarkerCoreFMParser *self);

__attribute__((unused)) static FreemarkerCoreExpression *FreemarkerCoreFMParser_EqualityExpression(FreemarkerCoreFMParser *self);

__attribute__((unused)) static FreemarkerCoreExpression *FreemarkerCoreFMParser_RelationalExpression(FreemarkerCoreFMParser *self);

__attribute__((unused)) static FreemarkerCoreExpression *FreemarkerCoreFMParser_RangeExpression(FreemarkerCoreFMParser *self);

__attribute__((unused)) static FreemarkerCoreExpression *FreemarkerCoreFMParser_AndExpression(FreemarkerCoreFMParser *self);

__attribute__((unused)) static FreemarkerCoreExpression *FreemarkerCoreFMParser_OrExpression(FreemarkerCoreFMParser *self);

__attribute__((unused)) static FreemarkerCoreListLiteral *FreemarkerCoreFMParser_ListLiteral(FreemarkerCoreFMParser *self);

__attribute__((unused)) static FreemarkerCoreExpression *FreemarkerCoreFMParser_NumberLiteral(FreemarkerCoreFMParser *self);

__attribute__((unused)) static FreemarkerCoreIdentifier *FreemarkerCoreFMParser_Identifier(FreemarkerCoreFMParser *self);

__attribute__((unused)) static FreemarkerCoreExpression *FreemarkerCoreFMParser_IdentifierOrStringLiteral(FreemarkerCoreFMParser *self);

__attribute__((unused)) static FreemarkerCoreBuiltinVariable *FreemarkerCoreFMParser_BuiltinVariable(FreemarkerCoreFMParser *self);

__attribute__((unused)) static FreemarkerCoreExpression *FreemarkerCoreFMParser_AddSubExpressionWithFreemarkerCoreExpression_(FreemarkerCoreFMParser *self, FreemarkerCoreExpression *exp);

__attribute__((unused)) static FreemarkerCoreExpression *FreemarkerCoreFMParser_DefaultToWithFreemarkerCoreExpression_(FreemarkerCoreFMParser *self, FreemarkerCoreExpression *exp);

__attribute__((unused)) static FreemarkerCoreExpression *FreemarkerCoreFMParser_ExistsWithFreemarkerCoreExpression_(FreemarkerCoreFMParser *self, FreemarkerCoreExpression *exp);

__attribute__((unused)) static FreemarkerCoreExpression *FreemarkerCoreFMParser_BuiltInWithFreemarkerCoreExpression_(FreemarkerCoreFMParser *self, FreemarkerCoreExpression *lhoExp);

__attribute__((unused)) static FreemarkerCoreExpression *FreemarkerCoreFMParser_DotVariableWithFreemarkerCoreExpression_(FreemarkerCoreFMParser *self, FreemarkerCoreExpression *exp);

__attribute__((unused)) static FreemarkerCoreExpression *FreemarkerCoreFMParser_DynamicKeyWithFreemarkerCoreExpression_(FreemarkerCoreFMParser *self, FreemarkerCoreExpression *exp);

__attribute__((unused)) static FreemarkerCoreMethodCall *FreemarkerCoreFMParser_MethodArgsWithFreemarkerCoreExpression_(FreemarkerCoreFMParser *self, FreemarkerCoreExpression *exp);

__attribute__((unused)) static FreemarkerCoreStringLiteral *FreemarkerCoreFMParser_StringLiteralWithBoolean_(FreemarkerCoreFMParser *self, jboolean interpolate);

__attribute__((unused)) static FreemarkerCoreExpression *FreemarkerCoreFMParser_BooleanLiteral(FreemarkerCoreFMParser *self);

__attribute__((unused)) static FreemarkerCoreHashLiteral *FreemarkerCoreFMParser_HashLiteral(FreemarkerCoreFMParser *self);

__attribute__((unused)) static FreemarkerCoreDollarVariable *FreemarkerCoreFMParser_StringOutput(FreemarkerCoreFMParser *self);

__attribute__((unused)) static FreemarkerCoreNumericalOutput *FreemarkerCoreFMParser_NumericalOutput(FreemarkerCoreFMParser *self);

__attribute__((unused)) static FreemarkerCoreTemplateElement *FreemarkerCoreFMParser_If(FreemarkerCoreFMParser *self);

__attribute__((unused)) static FreemarkerCoreAttemptBlock *FreemarkerCoreFMParser_Attempt(FreemarkerCoreFMParser *self);

__attribute__((unused)) static FreemarkerCoreRecoveryBlock *FreemarkerCoreFMParser_Recover(FreemarkerCoreFMParser *self);

__attribute__((unused)) static FreemarkerCoreTemplateElement *FreemarkerCoreFMParser_List(FreemarkerCoreFMParser *self);

__attribute__((unused)) static FreemarkerCoreElseOfList *FreemarkerCoreFMParser_ElseOfList(FreemarkerCoreFMParser *self);

__attribute__((unused)) static FreemarkerCoreIteratorBlock *FreemarkerCoreFMParser_ForEach(FreemarkerCoreFMParser *self);

__attribute__((unused)) static FreemarkerCoreItems *FreemarkerCoreFMParser_Items(FreemarkerCoreFMParser *self);

__attribute__((unused)) static FreemarkerCoreSep *FreemarkerCoreFMParser_Sep(FreemarkerCoreFMParser *self);

__attribute__((unused)) static FreemarkerCoreVisitNode *FreemarkerCoreFMParser_Visit(FreemarkerCoreFMParser *self);

__attribute__((unused)) static FreemarkerCoreRecurseNode *FreemarkerCoreFMParser_Recurse(FreemarkerCoreFMParser *self);

__attribute__((unused)) static FreemarkerCoreFallbackInstruction *FreemarkerCoreFMParser_FallBack(FreemarkerCoreFMParser *self);

__attribute__((unused)) static FreemarkerCoreBreakInstruction *FreemarkerCoreFMParser_Break(FreemarkerCoreFMParser *self);

__attribute__((unused)) static FreemarkerCoreReturnInstruction *FreemarkerCoreFMParser_Return(FreemarkerCoreFMParser *self);

__attribute__((unused)) static FreemarkerCoreStopInstruction *FreemarkerCoreFMParser_Stop(FreemarkerCoreFMParser *self);

__attribute__((unused)) static FreemarkerCoreTemplateElement *FreemarkerCoreFMParser_Nested(FreemarkerCoreFMParser *self);

__attribute__((unused)) static FreemarkerCoreTemplateElement *FreemarkerCoreFMParser_Flush(FreemarkerCoreFMParser *self);

__attribute__((unused)) static FreemarkerCoreTemplateElement *FreemarkerCoreFMParser_Trim(FreemarkerCoreFMParser *self);

__attribute__((unused)) static FreemarkerCoreTemplateElement *FreemarkerCoreFMParser_Assign(FreemarkerCoreFMParser *self);

__attribute__((unused)) static FreemarkerCoreInclude *FreemarkerCoreFMParser_Include(FreemarkerCoreFMParser *self);

__attribute__((unused)) static FreemarkerCoreLibraryLoad *FreemarkerCoreFMParser_Import(FreemarkerCoreFMParser *self);

__attribute__((unused)) static FreemarkerCoreMacro *FreemarkerCoreFMParser_Macro(FreemarkerCoreFMParser *self);

__attribute__((unused)) static FreemarkerCoreCompressedBlock *FreemarkerCoreFMParser_Compress(FreemarkerCoreFMParser *self);

__attribute__((unused)) static FreemarkerCoreTemplateElement *FreemarkerCoreFMParser_UnifiedMacroTransform(FreemarkerCoreFMParser *self);

__attribute__((unused)) static FreemarkerCoreTemplateElement *FreemarkerCoreFMParser_Call(FreemarkerCoreFMParser *self);

__attribute__((unused)) static JavaUtilHashMap *FreemarkerCoreFMParser_NamedArgs(FreemarkerCoreFMParser *self);

__attribute__((unused)) static JavaUtilArrayList *FreemarkerCoreFMParser_PositionalArgs(FreemarkerCoreFMParser *self);

__attribute__((unused)) static FreemarkerCoreComment *FreemarkerCoreFMParser_Comment(FreemarkerCoreFMParser *self);

__attribute__((unused)) static FreemarkerCoreTextBlock *FreemarkerCoreFMParser_NoParse(FreemarkerCoreFMParser *self);

__attribute__((unused)) static FreemarkerCoreTransformBlock *FreemarkerCoreFMParser_Transform(FreemarkerCoreFMParser *self);

__attribute__((unused)) static FreemarkerCoreSwitchBlock *FreemarkerCoreFMParser_Switch(FreemarkerCoreFMParser *self);

__attribute__((unused)) static FreemarkerCoreCase *FreemarkerCoreFMParser_Case(FreemarkerCoreFMParser *self);

__attribute__((unused)) static FreemarkerCoreEscapeBlock *FreemarkerCoreFMParser_Escape(FreemarkerCoreFMParser *self);

__attribute__((unused)) static FreemarkerCoreNoEscapeBlock *FreemarkerCoreFMParser_NoEscape(FreemarkerCoreFMParser *self);

__attribute__((unused)) static FreemarkerCoreToken *FreemarkerCoreFMParser_LooseDirectiveEnd(FreemarkerCoreFMParser *self);

__attribute__((unused)) static FreemarkerCorePropertySetting *FreemarkerCoreFMParser_Setting(FreemarkerCoreFMParser *self);

__attribute__((unused)) static FreemarkerCoreTemplateElement *FreemarkerCoreFMParser_FreemarkerDirective(FreemarkerCoreFMParser *self);

__attribute__((unused)) static FreemarkerCoreTextBlock *FreemarkerCoreFMParser_PCData(FreemarkerCoreFMParser *self);

__attribute__((unused)) static FreemarkerCoreToken *FreemarkerCoreFMParser_UnparsedContentWithFreemarkerCoreToken_withJavaLangStringBuffer_(FreemarkerCoreFMParser *self, FreemarkerCoreToken *start, JavaLangStringBuffer *buf);

__attribute__((unused)) static FreemarkerCoreMixedContent *FreemarkerCoreFMParser_MixedContent(FreemarkerCoreFMParser *self);

__attribute__((unused)) static FreemarkerCoreTemplateElement *FreemarkerCoreFMParser_OptionalBlock(FreemarkerCoreFMParser *self);

__attribute__((unused)) static void FreemarkerCoreFMParser_HeaderElement(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_1WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_2WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_3WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_4WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_5WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_6WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_7WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_8WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_9WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_10WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_11WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_12WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_13WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_14WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_15WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_16WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_17WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_18WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_19WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_20WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_21WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_22WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_23WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_24WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_25WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_26WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_27WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_28WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_29WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_30WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_31WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_32WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_33WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_34WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_35WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_36WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_37WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_38WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_39WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_40WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_41WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_42WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_43WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_44WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_45WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_46WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_47WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_48WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_49WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_50WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_51WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_52WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_53WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_54WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_55WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_56WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_57WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_58WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_59WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_60WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_61WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_62WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_63WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_64WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_65WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_66WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_67WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_68WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_69WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_70WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_71WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_72WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_73WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_74WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_75WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_76WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_77WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_78WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_79WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_80WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_81WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_82WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_83WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_84WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_85WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_86WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_87WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_88WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_89WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_90WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_91WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_92WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_93WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_94WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_95WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_96WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_97WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_98WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_99WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_100WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_101WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_102WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_103WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_104WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_105WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_106WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_107WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_108WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_109WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_110WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_111WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_112WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_113WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_114WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_115WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_116WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_117WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_118WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_119WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_120WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_121WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_122WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_123WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_124WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_125WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_126WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_127WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_128WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_129WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_130WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_131WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_132WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_133WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_134WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_135WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_136WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_137WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_138WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_139WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_140WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_141WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_142WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_143WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_144WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_145WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_146WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_147WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_148WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_149WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_150WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_151WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_152WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_153WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_154WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_155WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_156WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_157WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_158WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_159WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_160WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_161WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_162WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_163WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_164WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_165WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_166WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_167WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_168WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_169WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_170WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_171WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_172WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_173WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_174WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_175WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_176WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_177WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_178WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_179WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_180WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_181WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_182WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_183WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_184WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_185WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_186WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_187WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_188WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_189WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_190WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_191WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_192WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_193WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_194WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_195WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_196WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_197WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_198WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_199WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_200WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_201WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_202WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_203WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_204WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_205WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_206WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_207WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_208WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_209WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_210WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_211WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_212WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_213WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_214WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_215WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_216WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_217WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_218WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_219WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_220WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_221WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_222WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_223WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_224WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_2_225WithInt_(FreemarkerCoreFMParser *self, jint xla);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_21(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_151(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_20(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_19(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_145(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_149(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_144(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_82(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_150(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3R_94(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3R_51(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3R_84(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_143(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3R_58(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3R_90(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_18(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_17(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_16(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_225(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_81(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_80(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3R_85(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3R_57(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3R_78(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3R_34(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_223(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_15(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_79(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_14(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_142(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_224(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3R_31(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_141(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_78(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_13(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_140(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3R_32(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3R_50(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_12(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_11(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_10(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3R_93(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_139(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_138(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_137(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_136(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_135(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_9(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3R_29(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_134(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_133(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3R_83(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_8(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3R_56(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_7(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_6(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_5(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_4(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_3(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_2(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_1(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_220(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3R_33(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_77(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3R_81(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_222(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3R_55(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_221(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3R_42(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_219(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3R_80(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3R_87(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3R_44(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_75(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_74(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_73(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_132(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_217(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_72(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_216(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_131(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_209(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_215(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3R_54(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_71(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_218(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_76(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_128(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3R_24(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_119(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_127(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_126(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_208(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_70(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_118(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_69(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_214(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_213(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_212(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3R_26(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_125(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_211(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3R_100(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_117(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_130(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_207(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3R_97(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_107(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_116(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_121(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_68(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_124(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_106(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_206(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_210(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_67(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3R_89(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3R_25(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_115(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_120(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_123(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_105(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_114(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3R_38(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_122(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_204(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_205(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_203(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_104(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_202(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_113(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3R_91(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_112(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_109(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3R_48(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3R_79(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_103(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3R_37(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_108(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_102(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_111(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_201(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_200(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_65(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_199(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_62(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_198(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_61(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_197(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_60(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_196(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_59(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_110(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_195(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_58(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_194(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_57(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_193(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_56(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_64(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_192(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_55(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_191(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_54(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_190(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_189(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_129(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_66(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_188(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_63(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_187(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_186(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_185(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3R_36(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_184(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_183(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_182(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_101(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_181(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_180(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_100(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_99(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_179(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_178(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_177(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3R_53(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_176(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_175(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_174(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_173(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3R_106(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3R_82(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_98(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_97(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_96(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_95(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3R_71(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3R_66(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3R_39(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3R_70(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_172(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_171(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3R_46(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_51(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3R_41(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_94(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3R_43(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_93(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_53(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3R_72(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3R_74(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_52(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3R_40(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_92(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_91(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_50(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_49(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3R_69(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_48(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_47(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_46(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_45(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3R_73(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3R_92(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_170(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_169(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_90(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_89(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_168(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3R_49(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3R_68(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3R_30(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_44(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_43(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_167(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3R_88(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3R_67(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_166(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3R_28(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3R_65(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_42(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3R_77(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_41(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3R_23(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_86(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_85(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_165(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_164(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3R_27(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_88(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_163(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_87(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_162(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3R_76(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_40(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3R_64(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3R_96(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_84(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3R_86(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3R_63(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3R_75(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_39(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_161(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_160(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3R_99(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3R_62(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3R_95(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_158(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_157(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_36(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3R_60(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_159(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3R_47(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3R_35(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_35(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_34(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_38(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_156(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_37(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3R_105(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_153(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3R_103(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3R_59(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_154(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_155(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_32(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_31(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_30(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_33(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_29(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3R_61(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_28(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_27(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3R_104(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3R_52(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3R_101(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3R_45(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_26(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_25(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_24(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_23(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3R_102(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3R_98(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_83(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_148(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_22(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_147(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_146(FreemarkerCoreFMParser *self);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_3_152(FreemarkerCoreFMParser *self);

__attribute__((unused)) static void FreemarkerCoreFMParser_jj_la1_init_0();

__attribute__((unused)) static void FreemarkerCoreFMParser_jj_la1_init_1();

__attribute__((unused)) static void FreemarkerCoreFMParser_jj_la1_init_2();

__attribute__((unused)) static void FreemarkerCoreFMParser_jj_la1_init_3();

__attribute__((unused)) static void FreemarkerCoreFMParser_jj_la1_init_4();

__attribute__((unused)) static FreemarkerCoreToken *FreemarkerCoreFMParser_jj_consume_tokenWithInt_(FreemarkerCoreFMParser *self, jint kind);

__attribute__((unused)) static jboolean FreemarkerCoreFMParser_jj_scan_tokenWithInt_(FreemarkerCoreFMParser *self, jint kind);

__attribute__((unused)) static jint FreemarkerCoreFMParser_jj_ntk_f(FreemarkerCoreFMParser *self);

__attribute__((unused)) static void FreemarkerCoreFMParser_jj_add_error_tokenWithInt_withInt_(FreemarkerCoreFMParser *self, jint kind, jint pos);

__attribute__((unused)) static void FreemarkerCoreFMParser_jj_rescan_token(FreemarkerCoreFMParser *self);

__attribute__((unused)) static void FreemarkerCoreFMParser_jj_saveWithInt_withInt_(FreemarkerCoreFMParser *self, jint index, jint xla);

@interface FreemarkerCoreFMParser_ParserIteratorBlockContext : NSObject {
 @public
  NSString *loopVarName_;
  jint kind_;
}

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(FreemarkerCoreFMParser_ParserIteratorBlockContext)

J2OBJC_FIELD_SETTER(FreemarkerCoreFMParser_ParserIteratorBlockContext, loopVarName_, NSString *)

__attribute__((unused)) static void FreemarkerCoreFMParser_ParserIteratorBlockContext_init(FreemarkerCoreFMParser_ParserIteratorBlockContext *self);

__attribute__((unused)) static FreemarkerCoreFMParser_ParserIteratorBlockContext *new_FreemarkerCoreFMParser_ParserIteratorBlockContext_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerCoreFMParser_ParserIteratorBlockContext)

@interface FreemarkerCoreFMParser_LookaheadSuccess : JavaLangError

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(FreemarkerCoreFMParser_LookaheadSuccess)

__attribute__((unused)) static void FreemarkerCoreFMParser_LookaheadSuccess_init(FreemarkerCoreFMParser_LookaheadSuccess *self);

__attribute__((unused)) static FreemarkerCoreFMParser_LookaheadSuccess *new_FreemarkerCoreFMParser_LookaheadSuccess_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerCoreFMParser_LookaheadSuccess)

J2OBJC_INITIALIZED_DEFN(FreemarkerCoreFMParser)


#line 14
@implementation FreemarkerCoreFMParser


#line 54
+ (FreemarkerCoreFMParser *)createExpressionParserWithNSString:(NSString *)s {
  return FreemarkerCoreFMParser_createExpressionParserWithNSString_(s);
}


#line 75
- (instancetype)initWithFreemarkerTemplateTemplate:(FreemarkerTemplateTemplate *)template_
                                  withJavaIoReader:(JavaIoReader *)reader
                                       withBoolean:(jboolean)strictEscapeSyntax
                                       withBoolean:(jboolean)stripWhitespace {
  FreemarkerCoreFMParser_initWithFreemarkerTemplateTemplate_withJavaIoReader_withBoolean_withBoolean_(self, template_, reader, strictEscapeSyntax, stripWhitespace);
  return self;
}


#line 86
- (instancetype)initWithFreemarkerTemplateTemplate:(FreemarkerTemplateTemplate *)template_
                                  withJavaIoReader:(JavaIoReader *)reader
                                       withBoolean:(jboolean)strictEscapeSyntax
                                       withBoolean:(jboolean)stripWhitespace
                                           withInt:(jint)tagSyntax {
  FreemarkerCoreFMParser_initWithFreemarkerTemplateTemplate_withJavaIoReader_withBoolean_withBoolean_withInt_(self, template_, reader, strictEscapeSyntax, stripWhitespace, tagSyntax);
  return self;
}


#line 94
- (instancetype)initWithFreemarkerTemplateTemplate:(FreemarkerTemplateTemplate *)template_
                                  withJavaIoReader:(JavaIoReader *)reader
                                       withBoolean:(jboolean)strictEscapeSyntax
                                       withBoolean:(jboolean)stripWhitespace
                                           withInt:(jint)tagSyntax
                                           withInt:(jint)incompatibleImprovements {
  FreemarkerCoreFMParser_initWithFreemarkerTemplateTemplate_withJavaIoReader_withBoolean_withBoolean_withInt_withInt_(self, template_, reader, strictEscapeSyntax, stripWhitespace, tagSyntax, incompatibleImprovements);
  return self;
}


#line 103
- (instancetype)initWithFreemarkerTemplateTemplate:(FreemarkerTemplateTemplate *)template_
                                  withJavaIoReader:(JavaIoReader *)reader
                                       withBoolean:(jboolean)strictEscapeSyntax
                                       withBoolean:(jboolean)stripWhitespace
                                           withInt:(jint)tagSyntax
                                           withInt:(jint)namingConvention
                                           withInt:(jint)incompatibleImprovements {
  FreemarkerCoreFMParser_initWithFreemarkerTemplateTemplate_withJavaIoReader_withBoolean_withBoolean_withInt_withInt_withInt_(self, template_, reader, strictEscapeSyntax, stripWhitespace, tagSyntax, namingConvention, incompatibleImprovements);
  return self;
}


#line 139
- (instancetype)initWithNSString:(NSString *)template_ {
  FreemarkerCoreFMParser_initWithNSString_(self, template_);
  return self;
}


#line 143
- (void)setTemplateWithFreemarkerTemplateTemplate:(FreemarkerTemplateTemplate *)template_ {
  
#line 145
  self->template__ = template_;
}


#line 148
- (FreemarkerTemplateTemplate *)getTemplate {
  
#line 150
  return template__;
}


#line 156
- (jint)_getLastTagSyntax {
  return ((FreemarkerCoreFMParserTokenManager *) nil_chk(token_source_))->squBracTagSyntax_ ?
#line 158
  FreemarkerTemplateConfiguration_SQUARE_BRACKET_TAG_SYNTAX :
#line 159
  FreemarkerTemplateConfiguration_ANGLE_BRACKET_TAG_SYNTAX;
}


#line 167
- (jint)_getLastNamingConvention {
  return ((FreemarkerCoreFMParserTokenManager *) nil_chk(token_source_))->namingConvention_;
}


#line 174
- (void)notStringLiteralWithFreemarkerCoreExpression:(FreemarkerCoreExpression *)exp
                                        withNSString:(NSString *)expected {
  FreemarkerCoreFMParser_notStringLiteralWithFreemarkerCoreExpression_withNSString_(self, exp, expected);
}


#line 185
- (void)notNumberLiteralWithFreemarkerCoreExpression:(FreemarkerCoreExpression *)exp
                                        withNSString:(NSString *)expected {
  FreemarkerCoreFMParser_notNumberLiteralWithFreemarkerCoreExpression_withNSString_(self, exp, expected);
}


#line 196
- (void)notBooleanLiteralWithFreemarkerCoreExpression:(FreemarkerCoreExpression *)exp
                                         withNSString:(NSString *)expected {
  FreemarkerCoreFMParser_notBooleanLiteralWithFreemarkerCoreExpression_withNSString_(self, exp, expected);
}


#line 205
- (void)notHashLiteralWithFreemarkerCoreExpression:(FreemarkerCoreExpression *)exp
                                      withNSString:(NSString *)expected {
  FreemarkerCoreFMParser_notHashLiteralWithFreemarkerCoreExpression_withNSString_(self, exp, expected);
}


#line 216
- (void)notListLiteralWithFreemarkerCoreExpression:(FreemarkerCoreExpression *)exp
                                      withNSString:(NSString *)expected {
  FreemarkerCoreFMParser_notListLiteralWithFreemarkerCoreExpression_withNSString_(self, exp, expected);
}


#line 229
- (void)numberLiteralOnlyWithFreemarkerCoreExpression:(FreemarkerCoreExpression *)exp {
  FreemarkerCoreFMParser_numberLiteralOnlyWithFreemarkerCoreExpression_(self, exp);
}


#line 239
- (void)stringLiteralOnlyWithFreemarkerCoreExpression:(FreemarkerCoreExpression *)exp {
  FreemarkerCoreFMParser_stringLiteralOnlyWithFreemarkerCoreExpression_(self, exp);
}


#line 249
- (void)booleanLiteralOnlyWithFreemarkerCoreExpression:(FreemarkerCoreExpression *)exp {
  FreemarkerCoreFMParser_booleanLiteralOnlyWithFreemarkerCoreExpression_(self, exp);
}


#line 256
- (FreemarkerCoreExpression *)escapedExpressionWithFreemarkerCoreExpression:(FreemarkerCoreExpression *)exp {
  return FreemarkerCoreFMParser_escapedExpressionWithFreemarkerCoreExpression_(self, exp);
}


#line 264
- (jboolean)getBooleanWithFreemarkerCoreExpression:(FreemarkerCoreExpression *)exp {
  return FreemarkerCoreFMParser_getBooleanWithFreemarkerCoreExpression_(self, exp);
}


#line 293
- (FreemarkerCoreFMParser_ParserIteratorBlockContext *)pushIteratorBlockContext {
  return FreemarkerCoreFMParser_pushIteratorBlockContext(self);
}


#line 302
- (void)popIteratorBlockContext {
  FreemarkerCoreFMParser_popIteratorBlockContext(self);
}

- (FreemarkerCoreFMParser_ParserIteratorBlockContext *)peekIteratorBlockContext {
  return FreemarkerCoreFMParser_peekIteratorBlockContext(self);
}


#line 311
- (void)checkLoopVariableBuiltInLHOWithNSString:(NSString *)loopVarName
                   withFreemarkerCoreExpression:(FreemarkerCoreExpression *)lhoExp
                        withFreemarkerCoreToken:(FreemarkerCoreToken *)biName {
  FreemarkerCoreFMParser_checkLoopVariableBuiltInLHOWithNSString_withFreemarkerCoreExpression_withFreemarkerCoreToken_(self, loopVarName, lhoExp, biName);
}


#line 333
- (NSString *)forEachDirectiveSymbol {
  return FreemarkerCoreFMParser_forEachDirectiveSymbol(self);
}


#line 347
- (FreemarkerCoreExpression *)Expression {
  return FreemarkerCoreFMParser_Expression(self);
}


#line 358
- (FreemarkerCoreExpression *)PrimaryExpression {
  return FreemarkerCoreFMParser_PrimaryExpression(self);
}


#line 392
- (FreemarkerCoreExpression *)Parenthesis {
  return FreemarkerCoreFMParser_Parenthesis(self);
}


#line 408
- (FreemarkerCoreExpression *)UnaryExpression {
  return FreemarkerCoreFMParser_UnaryExpression(self);
}


#line 425
- (FreemarkerCoreExpression *)NotExpression {
  return FreemarkerCoreFMParser_NotExpression(self);
}


#line 449
- (FreemarkerCoreExpression *)UnaryPlusMinusExpression {
  return FreemarkerCoreFMParser_UnaryPlusMinusExpression(self);
}


#line 468
- (FreemarkerCoreExpression *)AdditiveExpression {
  return FreemarkerCoreFMParser_AdditiveExpression(self);
}


#line 510
- (FreemarkerCoreExpression *)MultiplicativeExpression {
  return FreemarkerCoreFMParser_MultiplicativeExpression(self);
}


#line 545
- (FreemarkerCoreExpression *)EqualityExpression {
  return FreemarkerCoreFMParser_EqualityExpression(self);
}


#line 574
- (FreemarkerCoreExpression *)RelationalExpression {
  return FreemarkerCoreFMParser_RelationalExpression(self);
}


#line 611
- (FreemarkerCoreExpression *)RangeExpression {
  return FreemarkerCoreFMParser_RangeExpression(self);
}


#line 667
- (FreemarkerCoreExpression *)AndExpression {
  return FreemarkerCoreFMParser_AndExpression(self);
}


#line 689
- (FreemarkerCoreExpression *)OrExpression {
  return FreemarkerCoreFMParser_OrExpression(self);
}


#line 711
- (FreemarkerCoreListLiteral *)ListLiteral {
  return FreemarkerCoreFMParser_ListLiteral(self);
}


#line 722
- (FreemarkerCoreExpression *)NumberLiteral {
  return FreemarkerCoreFMParser_NumberLiteral(self);
}


#line 739
- (FreemarkerCoreIdentifier *)Identifier {
  return FreemarkerCoreFMParser_Identifier(self);
}


#line 747
- (FreemarkerCoreExpression *)IdentifierOrStringLiteral {
  return FreemarkerCoreFMParser_IdentifierOrStringLiteral(self);
}


#line 760
- (FreemarkerCoreBuiltinVariable *)BuiltinVariable {
  return FreemarkerCoreFMParser_BuiltinVariable(self);
}


#line 776
- (FreemarkerCoreExpression *)AddSubExpressionWithFreemarkerCoreExpression:(FreemarkerCoreExpression *)exp {
  return FreemarkerCoreFMParser_AddSubExpressionWithFreemarkerCoreExpression_(self, exp);
}


#line 797
- (FreemarkerCoreExpression *)DefaultToWithFreemarkerCoreExpression:(FreemarkerCoreExpression *)exp {
  return FreemarkerCoreFMParser_DefaultToWithFreemarkerCoreExpression_(self, exp);
}


#line 822
- (FreemarkerCoreExpression *)ExistsWithFreemarkerCoreExpression:(FreemarkerCoreExpression *)exp {
  return FreemarkerCoreFMParser_ExistsWithFreemarkerCoreExpression_(self, exp);
}


#line 830
- (FreemarkerCoreExpression *)BuiltInWithFreemarkerCoreExpression:(FreemarkerCoreExpression *)lhoExp {
  return FreemarkerCoreFMParser_BuiltInWithFreemarkerCoreExpression_(self, lhoExp);
}


#line 875
- (FreemarkerCoreExpression *)DotVariableWithFreemarkerCoreExpression:(FreemarkerCoreExpression *)exp {
  return FreemarkerCoreFMParser_DotVariableWithFreemarkerCoreExpression_(self, exp);
}


#line 926
- (FreemarkerCoreExpression *)DynamicKeyWithFreemarkerCoreExpression:(FreemarkerCoreExpression *)exp {
  return FreemarkerCoreFMParser_DynamicKeyWithFreemarkerCoreExpression_(self, exp);
}


#line 942
- (FreemarkerCoreMethodCall *)MethodArgsWithFreemarkerCoreExpression:(FreemarkerCoreExpression *)exp {
  return FreemarkerCoreFMParser_MethodArgsWithFreemarkerCoreExpression_(self, exp);
}


#line 954
- (FreemarkerCoreStringLiteral *)StringLiteralWithBoolean:(jboolean)interpolate {
  return FreemarkerCoreFMParser_StringLiteralWithBoolean_(self, interpolate);
}


#line 989
- (FreemarkerCoreExpression *)BooleanLiteral {
  return FreemarkerCoreFMParser_BooleanLiteral(self);
}


#line 1006
- (FreemarkerCoreHashLiteral *)HashLiteral {
  return FreemarkerCoreFMParser_HashLiteral(self);
}


#line 1061
- (FreemarkerCoreDollarVariable *)StringOutput {
  return FreemarkerCoreFMParser_StringOutput(self);
}


#line 1074
- (FreemarkerCoreNumericalOutput *)NumericalOutput {
  return FreemarkerCoreFMParser_NumericalOutput(self);
}


#line 1149
- (FreemarkerCoreTemplateElement *)If {
  return FreemarkerCoreFMParser_If(self);
}


#line 1191
- (FreemarkerCoreAttemptBlock *)Attempt {
  return FreemarkerCoreFMParser_Attempt(self);
}


#line 1211
- (FreemarkerCoreRecoveryBlock *)Recover {
  return FreemarkerCoreFMParser_Recover(self);
}


#line 1221
- (FreemarkerCoreTemplateElement *)List {
  return FreemarkerCoreFMParser_List(self);
}


#line 1269
- (FreemarkerCoreElseOfList *)ElseOfList {
  return FreemarkerCoreFMParser_ElseOfList(self);
}


#line 1279
- (FreemarkerCoreIteratorBlock *)ForEach {
  return FreemarkerCoreFMParser_ForEach(self);
}


#line 1302
- (FreemarkerCoreItems *)Items {
  return FreemarkerCoreFMParser_Items(self);
}


#line 1338
- (FreemarkerCoreSep *)Sep {
  return FreemarkerCoreFMParser_Sep(self);
}


#line 1366
- (FreemarkerCoreVisitNode *)Visit {
  return FreemarkerCoreFMParser_Visit(self);
}


#line 1383
- (FreemarkerCoreRecurseNode *)Recurse {
  return FreemarkerCoreFMParser_Recurse(self);
}


#line 1412
- (FreemarkerCoreFallbackInstruction *)FallBack {
  return FreemarkerCoreFMParser_FallBack(self);
}


#line 1426
- (FreemarkerCoreBreakInstruction *)Break {
  return FreemarkerCoreFMParser_Break(self);
}


#line 1443
- (FreemarkerCoreReturnInstruction *)Return {
  return FreemarkerCoreFMParser_Return(self);
}


#line 1476
- (FreemarkerCoreStopInstruction *)Stop {
  return FreemarkerCoreFMParser_Stop(self);
}


#line 1494
- (FreemarkerCoreTemplateElement *)Nested {
  return FreemarkerCoreFMParser_Nested(self);
}


#line 1518
- (FreemarkerCoreTemplateElement *)Flush {
  return FreemarkerCoreFMParser_Flush(self);
}


#line 1526
- (FreemarkerCoreTemplateElement *)Trim {
  return FreemarkerCoreFMParser_Trim(self);
}


#line 1549
- (FreemarkerCoreTemplateElement *)Assign {
  return FreemarkerCoreFMParser_Assign(self);
}


#line 1743
- (FreemarkerCoreInclude *)Include {
  return FreemarkerCoreFMParser_Include(self);
}


#line 1791
- (FreemarkerCoreLibraryLoad *)Import {
  return FreemarkerCoreFMParser_Import(self);
}


#line 1805
- (FreemarkerCoreMacro *)Macro {
  return FreemarkerCoreFMParser_Macro(self);
}


#line 1930
- (FreemarkerCoreCompressedBlock *)Compress {
  return FreemarkerCoreFMParser_Compress(self);
}


#line 1941
- (FreemarkerCoreTemplateElement *)UnifiedMacroTransform {
  return FreemarkerCoreFMParser_UnifiedMacroTransform(self);
}


#line 2058
- (FreemarkerCoreTemplateElement *)Call {
  return FreemarkerCoreFMParser_Call(self);
}


#line 2093
- (JavaUtilHashMap *)NamedArgs {
  return FreemarkerCoreFMParser_NamedArgs(self);
}


#line 2115
- (JavaUtilArrayList *)PositionalArgs {
  return FreemarkerCoreFMParser_PositionalArgs(self);
}


#line 2142
- (FreemarkerCoreComment *)Comment {
  return FreemarkerCoreFMParser_Comment(self);
}


#line 2159
- (FreemarkerCoreTextBlock *)NoParse {
  return FreemarkerCoreFMParser_NoParse(self);
}


#line 2169
- (FreemarkerCoreTransformBlock *)Transform {
  return FreemarkerCoreFMParser_Transform(self);
}


#line 2209
- (FreemarkerCoreSwitchBlock *)Switch {
  return FreemarkerCoreFMParser_Switch(self);
}


#line 2248
- (FreemarkerCoreCase *)Case {
  return FreemarkerCoreFMParser_Case(self);
}


#line 2274
- (FreemarkerCoreEscapeBlock *)Escape {
  return FreemarkerCoreFMParser_Escape(self);
}


#line 2293
- (FreemarkerCoreNoEscapeBlock *)NoEscape {
  return FreemarkerCoreFMParser_NoEscape(self);
}


#line 2312
- (FreemarkerCoreToken *)LooseDirectiveEnd {
  return FreemarkerCoreFMParser_LooseDirectiveEnd(self);
}


#line 2325
- (FreemarkerCorePropertySetting *)Setting {
  return FreemarkerCoreFMParser_Setting(self);
}


#line 2342
- (FreemarkerCoreTemplateElement *)FreemarkerDirective {
  return FreemarkerCoreFMParser_FreemarkerDirective(self);
}


#line 2414
- (FreemarkerCoreTextBlock *)PCData {
  return FreemarkerCoreFMParser_PCData(self);
}


#line 2452
- (FreemarkerCoreToken *)UnparsedContentWithFreemarkerCoreToken:(FreemarkerCoreToken *)start
                                       withJavaLangStringBuffer:(JavaLangStringBuffer *)buf {
  return FreemarkerCoreFMParser_UnparsedContentWithFreemarkerCoreToken_withJavaLangStringBuffer_(self, start, buf);
}


#line 2483
- (FreemarkerCoreMixedContent *)MixedContent {
  return FreemarkerCoreFMParser_MixedContent(self);
}


#line 2568
- (FreemarkerCoreTemplateElement *)FreeMarkerText {
  
#line 2568
  FreemarkerCoreMixedContent *nodes = new_FreemarkerCoreMixedContent_init();
  FreemarkerCoreTemplateElement *elem, *begin = nil;
  
#line 2571
  while (YES) {
    if (FreemarkerCoreFMParser_jj_2_215WithInt_(self, 2)) {
      elem = FreemarkerCoreFMParser_PCData(self);
    }
    else
#line 2574
    if (FreemarkerCoreFMParser_jj_2_216WithInt_(self, 2)) {
      elem = FreemarkerCoreFMParser_StringOutput(self);
    }
    else
#line 2576
    if (FreemarkerCoreFMParser_jj_2_217WithInt_(self, 2)) {
      elem = FreemarkerCoreFMParser_NumericalOutput(self);
    }
    else {
      
#line 2579
      (void) FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, -1);
      @throw new_FreemarkerCoreParseException_init();
    }
    if (begin == nil) {
      begin = elem;
    }
    [nodes addElementWithFreemarkerCoreTemplateElement:elem];
    if (FreemarkerCoreFMParser_jj_2_218WithInt_(self, 2)) {
      ;
    }
    else {
      
#line 2589
      goto break_label_20;
    }
  }
  break_label_20: ;
  
#line 2592
  [nodes setLocationWithFreemarkerTemplateTemplate:template__ withFreemarkerCoreTemplateObject:begin withFreemarkerCoreTemplateObject:elem];
  {
    
#line 2593
    if (![@"" isEqual:nil]) return nodes;
  }
  
#line 2594
  @throw new_JavaLangError_initWithNSString_(@"Missing return statement in function");
}


#line 2602
- (FreemarkerCoreTemplateElement *)OptionalBlock {
  return FreemarkerCoreFMParser_OptionalBlock(self);
}


#line 2661
- (void)HeaderElement {
  FreemarkerCoreFMParser_HeaderElement(self);
}


#line 2777
- (id<JavaUtilMap>)ParamList {
  
#line 2777
  FreemarkerCoreIdentifier *id_;
  FreemarkerCoreExpression *exp;
  id<JavaUtilMap> result = new_JavaUtilHashMap_init();
  
#line 2781
  while (YES) {
    id_ = FreemarkerCoreFMParser_Identifier(self);
    (void) FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_EQUALS);
    exp = FreemarkerCoreFMParser_Expression(self);
    (void) [result putWithId:[((FreemarkerCoreIdentifier *) nil_chk(id_)) description] withId:exp];
    if (FreemarkerCoreFMParser_jj_2_223WithInt_(self, 2)) {
      (void) FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_COMMA);
    }
    else {
      
#line 2789
      ;
    }
    if (FreemarkerCoreFMParser_jj_2_224WithInt_(self, 2)) {
      ;
    }
    else {
      
#line 2794
      goto break_label_22;
    }
  }
  break_label_22: ;
  {
    
#line 2797
    if (![@"" isEqual:nil]) return result;
  }
  
#line 2798
  @throw new_JavaLangError_initWithNSString_(@"Missing return statement in function");
}


#line 2805
- (FreemarkerCoreTemplateElement *)Root {
  
#line 2805
  FreemarkerCoreTemplateElement *doc;
  if (FreemarkerCoreFMParser_jj_2_225WithInt_(self, 2147483647)) {
    FreemarkerCoreFMParser_HeaderElement(self);
  }
  else {
    
#line 2809
    ;
  }
  doc = FreemarkerCoreFMParser_OptionalBlock(self);
  (void) FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, 0);
  [((FreemarkerCoreTemplateElement *) nil_chk(doc)) setFieldsForRootElement];
  doc = [doc postParseCleanupWithBoolean:stripWhitespace_];
  
#line 2816
  [((FreemarkerCoreTemplateElement *) nil_chk(doc)) setFieldsForRootElement];
  {
    
#line 2817
    if (![@"" isEqual:nil]) return doc;
  }
  
#line 2818
  @throw new_JavaLangError_initWithNSString_(@"Missing return statement in function");
}


#line 2821
- (jboolean)jj_2_1WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_1WithInt_(self, xla);
}


#line 2829
- (jboolean)jj_2_2WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_2WithInt_(self, xla);
}


#line 2837
- (jboolean)jj_2_3WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_3WithInt_(self, xla);
}


#line 2845
- (jboolean)jj_2_4WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_4WithInt_(self, xla);
}


#line 2853
- (jboolean)jj_2_5WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_5WithInt_(self, xla);
}


#line 2861
- (jboolean)jj_2_6WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_6WithInt_(self, xla);
}


#line 2869
- (jboolean)jj_2_7WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_7WithInt_(self, xla);
}


#line 2877
- (jboolean)jj_2_8WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_8WithInt_(self, xla);
}


#line 2885
- (jboolean)jj_2_9WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_9WithInt_(self, xla);
}


#line 2893
- (jboolean)jj_2_10WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_10WithInt_(self, xla);
}


#line 2901
- (jboolean)jj_2_11WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_11WithInt_(self, xla);
}


#line 2909
- (jboolean)jj_2_12WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_12WithInt_(self, xla);
}


#line 2917
- (jboolean)jj_2_13WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_13WithInt_(self, xla);
}


#line 2925
- (jboolean)jj_2_14WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_14WithInt_(self, xla);
}


#line 2933
- (jboolean)jj_2_15WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_15WithInt_(self, xla);
}


#line 2941
- (jboolean)jj_2_16WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_16WithInt_(self, xla);
}


#line 2949
- (jboolean)jj_2_17WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_17WithInt_(self, xla);
}


#line 2957
- (jboolean)jj_2_18WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_18WithInt_(self, xla);
}


#line 2965
- (jboolean)jj_2_19WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_19WithInt_(self, xla);
}


#line 2973
- (jboolean)jj_2_20WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_20WithInt_(self, xla);
}


#line 2981
- (jboolean)jj_2_21WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_21WithInt_(self, xla);
}


#line 2989
- (jboolean)jj_2_22WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_22WithInt_(self, xla);
}


#line 2997
- (jboolean)jj_2_23WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_23WithInt_(self, xla);
}


#line 3005
- (jboolean)jj_2_24WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_24WithInt_(self, xla);
}


#line 3013
- (jboolean)jj_2_25WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_25WithInt_(self, xla);
}


#line 3021
- (jboolean)jj_2_26WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_26WithInt_(self, xla);
}


#line 3029
- (jboolean)jj_2_27WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_27WithInt_(self, xla);
}


#line 3037
- (jboolean)jj_2_28WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_28WithInt_(self, xla);
}


#line 3045
- (jboolean)jj_2_29WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_29WithInt_(self, xla);
}


#line 3053
- (jboolean)jj_2_30WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_30WithInt_(self, xla);
}


#line 3061
- (jboolean)jj_2_31WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_31WithInt_(self, xla);
}


#line 3069
- (jboolean)jj_2_32WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_32WithInt_(self, xla);
}


#line 3077
- (jboolean)jj_2_33WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_33WithInt_(self, xla);
}


#line 3085
- (jboolean)jj_2_34WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_34WithInt_(self, xla);
}


#line 3093
- (jboolean)jj_2_35WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_35WithInt_(self, xla);
}


#line 3101
- (jboolean)jj_2_36WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_36WithInt_(self, xla);
}


#line 3109
- (jboolean)jj_2_37WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_37WithInt_(self, xla);
}


#line 3117
- (jboolean)jj_2_38WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_38WithInt_(self, xla);
}


#line 3125
- (jboolean)jj_2_39WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_39WithInt_(self, xla);
}


#line 3133
- (jboolean)jj_2_40WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_40WithInt_(self, xla);
}


#line 3141
- (jboolean)jj_2_41WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_41WithInt_(self, xla);
}


#line 3149
- (jboolean)jj_2_42WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_42WithInt_(self, xla);
}


#line 3157
- (jboolean)jj_2_43WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_43WithInt_(self, xla);
}


#line 3165
- (jboolean)jj_2_44WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_44WithInt_(self, xla);
}


#line 3173
- (jboolean)jj_2_45WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_45WithInt_(self, xla);
}


#line 3181
- (jboolean)jj_2_46WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_46WithInt_(self, xla);
}


#line 3189
- (jboolean)jj_2_47WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_47WithInt_(self, xla);
}


#line 3197
- (jboolean)jj_2_48WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_48WithInt_(self, xla);
}


#line 3205
- (jboolean)jj_2_49WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_49WithInt_(self, xla);
}


#line 3213
- (jboolean)jj_2_50WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_50WithInt_(self, xla);
}


#line 3221
- (jboolean)jj_2_51WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_51WithInt_(self, xla);
}


#line 3229
- (jboolean)jj_2_52WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_52WithInt_(self, xla);
}


#line 3237
- (jboolean)jj_2_53WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_53WithInt_(self, xla);
}


#line 3245
- (jboolean)jj_2_54WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_54WithInt_(self, xla);
}


#line 3253
- (jboolean)jj_2_55WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_55WithInt_(self, xla);
}


#line 3261
- (jboolean)jj_2_56WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_56WithInt_(self, xla);
}


#line 3269
- (jboolean)jj_2_57WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_57WithInt_(self, xla);
}


#line 3277
- (jboolean)jj_2_58WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_58WithInt_(self, xla);
}


#line 3285
- (jboolean)jj_2_59WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_59WithInt_(self, xla);
}


#line 3293
- (jboolean)jj_2_60WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_60WithInt_(self, xla);
}


#line 3301
- (jboolean)jj_2_61WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_61WithInt_(self, xla);
}


#line 3309
- (jboolean)jj_2_62WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_62WithInt_(self, xla);
}


#line 3317
- (jboolean)jj_2_63WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_63WithInt_(self, xla);
}


#line 3325
- (jboolean)jj_2_64WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_64WithInt_(self, xla);
}


#line 3333
- (jboolean)jj_2_65WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_65WithInt_(self, xla);
}


#line 3341
- (jboolean)jj_2_66WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_66WithInt_(self, xla);
}


#line 3349
- (jboolean)jj_2_67WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_67WithInt_(self, xla);
}


#line 3357
- (jboolean)jj_2_68WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_68WithInt_(self, xla);
}


#line 3365
- (jboolean)jj_2_69WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_69WithInt_(self, xla);
}


#line 3373
- (jboolean)jj_2_70WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_70WithInt_(self, xla);
}


#line 3381
- (jboolean)jj_2_71WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_71WithInt_(self, xla);
}


#line 3389
- (jboolean)jj_2_72WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_72WithInt_(self, xla);
}


#line 3397
- (jboolean)jj_2_73WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_73WithInt_(self, xla);
}


#line 3405
- (jboolean)jj_2_74WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_74WithInt_(self, xla);
}


#line 3413
- (jboolean)jj_2_75WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_75WithInt_(self, xla);
}


#line 3421
- (jboolean)jj_2_76WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_76WithInt_(self, xla);
}


#line 3429
- (jboolean)jj_2_77WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_77WithInt_(self, xla);
}


#line 3437
- (jboolean)jj_2_78WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_78WithInt_(self, xla);
}


#line 3445
- (jboolean)jj_2_79WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_79WithInt_(self, xla);
}


#line 3453
- (jboolean)jj_2_80WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_80WithInt_(self, xla);
}


#line 3461
- (jboolean)jj_2_81WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_81WithInt_(self, xla);
}


#line 3469
- (jboolean)jj_2_82WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_82WithInt_(self, xla);
}


#line 3477
- (jboolean)jj_2_83WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_83WithInt_(self, xla);
}


#line 3485
- (jboolean)jj_2_84WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_84WithInt_(self, xla);
}


#line 3493
- (jboolean)jj_2_85WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_85WithInt_(self, xla);
}


#line 3501
- (jboolean)jj_2_86WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_86WithInt_(self, xla);
}


#line 3509
- (jboolean)jj_2_87WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_87WithInt_(self, xla);
}


#line 3517
- (jboolean)jj_2_88WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_88WithInt_(self, xla);
}


#line 3525
- (jboolean)jj_2_89WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_89WithInt_(self, xla);
}


#line 3533
- (jboolean)jj_2_90WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_90WithInt_(self, xla);
}


#line 3541
- (jboolean)jj_2_91WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_91WithInt_(self, xla);
}


#line 3549
- (jboolean)jj_2_92WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_92WithInt_(self, xla);
}


#line 3557
- (jboolean)jj_2_93WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_93WithInt_(self, xla);
}


#line 3565
- (jboolean)jj_2_94WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_94WithInt_(self, xla);
}


#line 3573
- (jboolean)jj_2_95WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_95WithInt_(self, xla);
}


#line 3581
- (jboolean)jj_2_96WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_96WithInt_(self, xla);
}


#line 3589
- (jboolean)jj_2_97WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_97WithInt_(self, xla);
}


#line 3597
- (jboolean)jj_2_98WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_98WithInt_(self, xla);
}


#line 3605
- (jboolean)jj_2_99WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_99WithInt_(self, xla);
}


#line 3613
- (jboolean)jj_2_100WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_100WithInt_(self, xla);
}


#line 3621
- (jboolean)jj_2_101WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_101WithInt_(self, xla);
}


#line 3629
- (jboolean)jj_2_102WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_102WithInt_(self, xla);
}


#line 3637
- (jboolean)jj_2_103WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_103WithInt_(self, xla);
}


#line 3645
- (jboolean)jj_2_104WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_104WithInt_(self, xla);
}


#line 3653
- (jboolean)jj_2_105WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_105WithInt_(self, xla);
}


#line 3661
- (jboolean)jj_2_106WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_106WithInt_(self, xla);
}


#line 3669
- (jboolean)jj_2_107WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_107WithInt_(self, xla);
}


#line 3677
- (jboolean)jj_2_108WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_108WithInt_(self, xla);
}


#line 3685
- (jboolean)jj_2_109WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_109WithInt_(self, xla);
}


#line 3693
- (jboolean)jj_2_110WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_110WithInt_(self, xla);
}


#line 3701
- (jboolean)jj_2_111WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_111WithInt_(self, xla);
}


#line 3709
- (jboolean)jj_2_112WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_112WithInt_(self, xla);
}


#line 3717
- (jboolean)jj_2_113WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_113WithInt_(self, xla);
}


#line 3725
- (jboolean)jj_2_114WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_114WithInt_(self, xla);
}


#line 3733
- (jboolean)jj_2_115WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_115WithInt_(self, xla);
}


#line 3741
- (jboolean)jj_2_116WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_116WithInt_(self, xla);
}


#line 3749
- (jboolean)jj_2_117WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_117WithInt_(self, xla);
}


#line 3757
- (jboolean)jj_2_118WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_118WithInt_(self, xla);
}


#line 3765
- (jboolean)jj_2_119WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_119WithInt_(self, xla);
}


#line 3773
- (jboolean)jj_2_120WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_120WithInt_(self, xla);
}


#line 3781
- (jboolean)jj_2_121WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_121WithInt_(self, xla);
}


#line 3789
- (jboolean)jj_2_122WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_122WithInt_(self, xla);
}


#line 3797
- (jboolean)jj_2_123WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_123WithInt_(self, xla);
}


#line 3805
- (jboolean)jj_2_124WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_124WithInt_(self, xla);
}


#line 3813
- (jboolean)jj_2_125WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_125WithInt_(self, xla);
}


#line 3821
- (jboolean)jj_2_126WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_126WithInt_(self, xla);
}


#line 3829
- (jboolean)jj_2_127WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_127WithInt_(self, xla);
}


#line 3837
- (jboolean)jj_2_128WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_128WithInt_(self, xla);
}


#line 3845
- (jboolean)jj_2_129WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_129WithInt_(self, xla);
}


#line 3853
- (jboolean)jj_2_130WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_130WithInt_(self, xla);
}


#line 3861
- (jboolean)jj_2_131WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_131WithInt_(self, xla);
}


#line 3869
- (jboolean)jj_2_132WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_132WithInt_(self, xla);
}


#line 3877
- (jboolean)jj_2_133WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_133WithInt_(self, xla);
}


#line 3885
- (jboolean)jj_2_134WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_134WithInt_(self, xla);
}


#line 3893
- (jboolean)jj_2_135WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_135WithInt_(self, xla);
}


#line 3901
- (jboolean)jj_2_136WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_136WithInt_(self, xla);
}


#line 3909
- (jboolean)jj_2_137WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_137WithInt_(self, xla);
}


#line 3917
- (jboolean)jj_2_138WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_138WithInt_(self, xla);
}


#line 3925
- (jboolean)jj_2_139WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_139WithInt_(self, xla);
}


#line 3933
- (jboolean)jj_2_140WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_140WithInt_(self, xla);
}


#line 3941
- (jboolean)jj_2_141WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_141WithInt_(self, xla);
}


#line 3949
- (jboolean)jj_2_142WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_142WithInt_(self, xla);
}


#line 3957
- (jboolean)jj_2_143WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_143WithInt_(self, xla);
}


#line 3965
- (jboolean)jj_2_144WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_144WithInt_(self, xla);
}


#line 3973
- (jboolean)jj_2_145WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_145WithInt_(self, xla);
}


#line 3981
- (jboolean)jj_2_146WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_146WithInt_(self, xla);
}


#line 3989
- (jboolean)jj_2_147WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_147WithInt_(self, xla);
}


#line 3997
- (jboolean)jj_2_148WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_148WithInt_(self, xla);
}


#line 4005
- (jboolean)jj_2_149WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_149WithInt_(self, xla);
}


#line 4013
- (jboolean)jj_2_150WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_150WithInt_(self, xla);
}


#line 4021
- (jboolean)jj_2_151WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_151WithInt_(self, xla);
}


#line 4029
- (jboolean)jj_2_152WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_152WithInt_(self, xla);
}


#line 4037
- (jboolean)jj_2_153WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_153WithInt_(self, xla);
}


#line 4045
- (jboolean)jj_2_154WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_154WithInt_(self, xla);
}


#line 4053
- (jboolean)jj_2_155WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_155WithInt_(self, xla);
}


#line 4061
- (jboolean)jj_2_156WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_156WithInt_(self, xla);
}


#line 4069
- (jboolean)jj_2_157WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_157WithInt_(self, xla);
}


#line 4077
- (jboolean)jj_2_158WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_158WithInt_(self, xla);
}


#line 4085
- (jboolean)jj_2_159WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_159WithInt_(self, xla);
}


#line 4093
- (jboolean)jj_2_160WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_160WithInt_(self, xla);
}


#line 4101
- (jboolean)jj_2_161WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_161WithInt_(self, xla);
}


#line 4109
- (jboolean)jj_2_162WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_162WithInt_(self, xla);
}


#line 4117
- (jboolean)jj_2_163WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_163WithInt_(self, xla);
}


#line 4125
- (jboolean)jj_2_164WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_164WithInt_(self, xla);
}


#line 4133
- (jboolean)jj_2_165WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_165WithInt_(self, xla);
}


#line 4141
- (jboolean)jj_2_166WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_166WithInt_(self, xla);
}


#line 4149
- (jboolean)jj_2_167WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_167WithInt_(self, xla);
}


#line 4157
- (jboolean)jj_2_168WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_168WithInt_(self, xla);
}


#line 4165
- (jboolean)jj_2_169WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_169WithInt_(self, xla);
}


#line 4173
- (jboolean)jj_2_170WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_170WithInt_(self, xla);
}


#line 4181
- (jboolean)jj_2_171WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_171WithInt_(self, xla);
}


#line 4189
- (jboolean)jj_2_172WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_172WithInt_(self, xla);
}


#line 4197
- (jboolean)jj_2_173WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_173WithInt_(self, xla);
}


#line 4205
- (jboolean)jj_2_174WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_174WithInt_(self, xla);
}


#line 4213
- (jboolean)jj_2_175WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_175WithInt_(self, xla);
}


#line 4221
- (jboolean)jj_2_176WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_176WithInt_(self, xla);
}


#line 4229
- (jboolean)jj_2_177WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_177WithInt_(self, xla);
}


#line 4237
- (jboolean)jj_2_178WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_178WithInt_(self, xla);
}


#line 4245
- (jboolean)jj_2_179WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_179WithInt_(self, xla);
}


#line 4253
- (jboolean)jj_2_180WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_180WithInt_(self, xla);
}


#line 4261
- (jboolean)jj_2_181WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_181WithInt_(self, xla);
}


#line 4269
- (jboolean)jj_2_182WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_182WithInt_(self, xla);
}


#line 4277
- (jboolean)jj_2_183WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_183WithInt_(self, xla);
}


#line 4285
- (jboolean)jj_2_184WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_184WithInt_(self, xla);
}


#line 4293
- (jboolean)jj_2_185WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_185WithInt_(self, xla);
}


#line 4301
- (jboolean)jj_2_186WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_186WithInt_(self, xla);
}


#line 4309
- (jboolean)jj_2_187WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_187WithInt_(self, xla);
}


#line 4317
- (jboolean)jj_2_188WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_188WithInt_(self, xla);
}


#line 4325
- (jboolean)jj_2_189WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_189WithInt_(self, xla);
}


#line 4333
- (jboolean)jj_2_190WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_190WithInt_(self, xla);
}


#line 4341
- (jboolean)jj_2_191WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_191WithInt_(self, xla);
}


#line 4349
- (jboolean)jj_2_192WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_192WithInt_(self, xla);
}


#line 4357
- (jboolean)jj_2_193WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_193WithInt_(self, xla);
}


#line 4365
- (jboolean)jj_2_194WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_194WithInt_(self, xla);
}


#line 4373
- (jboolean)jj_2_195WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_195WithInt_(self, xla);
}


#line 4381
- (jboolean)jj_2_196WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_196WithInt_(self, xla);
}


#line 4389
- (jboolean)jj_2_197WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_197WithInt_(self, xla);
}


#line 4397
- (jboolean)jj_2_198WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_198WithInt_(self, xla);
}


#line 4405
- (jboolean)jj_2_199WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_199WithInt_(self, xla);
}


#line 4413
- (jboolean)jj_2_200WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_200WithInt_(self, xla);
}


#line 4421
- (jboolean)jj_2_201WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_201WithInt_(self, xla);
}


#line 4429
- (jboolean)jj_2_202WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_202WithInt_(self, xla);
}


#line 4437
- (jboolean)jj_2_203WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_203WithInt_(self, xla);
}


#line 4445
- (jboolean)jj_2_204WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_204WithInt_(self, xla);
}


#line 4453
- (jboolean)jj_2_205WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_205WithInt_(self, xla);
}


#line 4461
- (jboolean)jj_2_206WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_206WithInt_(self, xla);
}


#line 4469
- (jboolean)jj_2_207WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_207WithInt_(self, xla);
}


#line 4477
- (jboolean)jj_2_208WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_208WithInt_(self, xla);
}


#line 4485
- (jboolean)jj_2_209WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_209WithInt_(self, xla);
}


#line 4493
- (jboolean)jj_2_210WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_210WithInt_(self, xla);
}


#line 4501
- (jboolean)jj_2_211WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_211WithInt_(self, xla);
}


#line 4509
- (jboolean)jj_2_212WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_212WithInt_(self, xla);
}


#line 4517
- (jboolean)jj_2_213WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_213WithInt_(self, xla);
}


#line 4525
- (jboolean)jj_2_214WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_214WithInt_(self, xla);
}


#line 4533
- (jboolean)jj_2_215WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_215WithInt_(self, xla);
}


#line 4541
- (jboolean)jj_2_216WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_216WithInt_(self, xla);
}


#line 4549
- (jboolean)jj_2_217WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_217WithInt_(self, xla);
}


#line 4557
- (jboolean)jj_2_218WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_218WithInt_(self, xla);
}


#line 4565
- (jboolean)jj_2_219WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_219WithInt_(self, xla);
}


#line 4573
- (jboolean)jj_2_220WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_220WithInt_(self, xla);
}


#line 4581
- (jboolean)jj_2_221WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_221WithInt_(self, xla);
}


#line 4589
- (jboolean)jj_2_222WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_222WithInt_(self, xla);
}


#line 4597
- (jboolean)jj_2_223WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_223WithInt_(self, xla);
}


#line 4605
- (jboolean)jj_2_224WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_224WithInt_(self, xla);
}


#line 4613
- (jboolean)jj_2_225WithInt:(jint)xla {
  return FreemarkerCoreFMParser_jj_2_225WithInt_(self, xla);
}


#line 4621
- (jboolean)jj_3_21 {
  return FreemarkerCoreFMParser_jj_3_21(self);
}


#line 4627
- (jboolean)jj_3_151 {
  return FreemarkerCoreFMParser_jj_3_151(self);
}


#line 4633
- (jboolean)jj_3_20 {
  return FreemarkerCoreFMParser_jj_3_20(self);
}


#line 4639
- (jboolean)jj_3_19 {
  return FreemarkerCoreFMParser_jj_3_19(self);
}


#line 4653
- (jboolean)jj_3_145 {
  return FreemarkerCoreFMParser_jj_3_145(self);
}


#line 4659
- (jboolean)jj_3_149 {
  return FreemarkerCoreFMParser_jj_3_149(self);
}


#line 4672
- (jboolean)jj_3_144 {
  return FreemarkerCoreFMParser_jj_3_144(self);
}


#line 4679
- (jboolean)jj_3_82 {
  return FreemarkerCoreFMParser_jj_3_82(self);
}


#line 4686
- (jboolean)jj_3_150 {
  return FreemarkerCoreFMParser_jj_3_150(self);
}


#line 4695
- (jboolean)jj_3R_94 {
  return FreemarkerCoreFMParser_jj_3R_94(self);
}


#line 4710
- (jboolean)jj_3R_51 {
  return FreemarkerCoreFMParser_jj_3R_51(self);
}


#line 4717
- (jboolean)jj_3R_84 {
  return FreemarkerCoreFMParser_jj_3R_84(self);
}


#line 4728
- (jboolean)jj_3_143 {
  return FreemarkerCoreFMParser_jj_3_143(self);
}


#line 4734
- (jboolean)jj_3R_58 {
  return FreemarkerCoreFMParser_jj_3R_58(self);
}


#line 4741
- (jboolean)jj_3R_90 {
  return FreemarkerCoreFMParser_jj_3R_90(self);
}


#line 4747
- (jboolean)jj_3_18 {
  return FreemarkerCoreFMParser_jj_3_18(self);
}


#line 4753
- (jboolean)jj_3_17 {
  return FreemarkerCoreFMParser_jj_3_17(self);
}


#line 4759
- (jboolean)jj_3_16 {
  return FreemarkerCoreFMParser_jj_3_16(self);
}


#line 4770
- (jboolean)jj_3_225 {
  return FreemarkerCoreFMParser_jj_3_225(self);
}


#line 4783
- (jboolean)jj_3_81 {
  return FreemarkerCoreFMParser_jj_3_81(self);
}


#line 4789
- (jboolean)jj_3_80 {
  return FreemarkerCoreFMParser_jj_3_80(self);
}


#line 4795
- (jboolean)jj_3R_85 {
  return FreemarkerCoreFMParser_jj_3R_85(self);
}


#line 4807
- (jboolean)jj_3R_57 {
  return FreemarkerCoreFMParser_jj_3R_57(self);
}


#line 4815
- (jboolean)jj_3R_78 {
  return FreemarkerCoreFMParser_jj_3R_78(self);
}


#line 4823
- (jboolean)jj_3R_34 {
  return FreemarkerCoreFMParser_jj_3R_34(self);
}


#line 4834
- (jboolean)jj_3_223 {
  return FreemarkerCoreFMParser_jj_3_223(self);
}


#line 4840
- (jboolean)jj_3_15 {
  return FreemarkerCoreFMParser_jj_3_15(self);
}


#line 4846
- (jboolean)jj_3_79 {
  return FreemarkerCoreFMParser_jj_3_79(self);
}


#line 4853
- (jboolean)jj_3_14 {
  return FreemarkerCoreFMParser_jj_3_14(self);
}


#line 4859
- (jboolean)jj_3_142 {
  return FreemarkerCoreFMParser_jj_3_142(self);
}


#line 4865
- (jboolean)jj_3_224 {
  return FreemarkerCoreFMParser_jj_3_224(self);
}


#line 4872
- (jboolean)jj_3R_31 {
  return FreemarkerCoreFMParser_jj_3R_31(self);
}


#line 4884
- (jboolean)jj_3_141 {
  return FreemarkerCoreFMParser_jj_3_141(self);
}


#line 4890
- (jboolean)jj_3_78 {
  return FreemarkerCoreFMParser_jj_3_78(self);
}


#line 4897
- (jboolean)jj_3_13 {
  return FreemarkerCoreFMParser_jj_3_13(self);
}


#line 4903
- (jboolean)jj_3_140 {
  return FreemarkerCoreFMParser_jj_3_140(self);
}


#line 4909
- (jboolean)jj_3R_32 {
  return FreemarkerCoreFMParser_jj_3R_32(self);
}


#line 4921
- (jboolean)jj_3R_50 {
  return FreemarkerCoreFMParser_jj_3R_50(self);
}


#line 4928
- (jboolean)jj_3_12 {
  return FreemarkerCoreFMParser_jj_3_12(self);
}


#line 4934
- (jboolean)jj_3_11 {
  return FreemarkerCoreFMParser_jj_3_11(self);
}


#line 4940
- (jboolean)jj_3_10 {
  return FreemarkerCoreFMParser_jj_3_10(self);
}


#line 4946
- (jboolean)jj_3R_93 {
  return FreemarkerCoreFMParser_jj_3R_93(self);
}


#line 4960
- (jboolean)jj_3_139 {
  return FreemarkerCoreFMParser_jj_3_139(self);
}


#line 4966
- (jboolean)jj_3_138 {
  return FreemarkerCoreFMParser_jj_3_138(self);
}


#line 4973
- (jboolean)jj_3_137 {
  return FreemarkerCoreFMParser_jj_3_137(self);
}


#line 4979
- (jboolean)jj_3_136 {
  return FreemarkerCoreFMParser_jj_3_136(self);
}


#line 4992
- (jboolean)jj_3_135 {
  return FreemarkerCoreFMParser_jj_3_135(self);
}


#line 4998
- (jboolean)jj_3_9 {
  return FreemarkerCoreFMParser_jj_3_9(self);
}


#line 5024
- (jboolean)jj_3R_29 {
  return FreemarkerCoreFMParser_jj_3R_29(self);
}


#line 5032
- (jboolean)jj_3_134 {
  return FreemarkerCoreFMParser_jj_3_134(self);
}


#line 5038
- (jboolean)jj_3_133 {
  return FreemarkerCoreFMParser_jj_3_133(self);
}


#line 5044
- (jboolean)jj_3R_83 {
  return FreemarkerCoreFMParser_jj_3R_83(self);
}


#line 5050
- (jboolean)jj_3_8 {
  return FreemarkerCoreFMParser_jj_3_8(self);
}


#line 5056
- (jboolean)jj_3R_56 {
  return FreemarkerCoreFMParser_jj_3R_56(self);
}


#line 5068
- (jboolean)jj_3_7 {
  return FreemarkerCoreFMParser_jj_3_7(self);
}


#line 5074
- (jboolean)jj_3_6 {
  return FreemarkerCoreFMParser_jj_3_6(self);
}


#line 5080
- (jboolean)jj_3_5 {
  return FreemarkerCoreFMParser_jj_3_5(self);
}


#line 5086
- (jboolean)jj_3_4 {
  return FreemarkerCoreFMParser_jj_3_4(self);
}


#line 5092
- (jboolean)jj_3_3 {
  return FreemarkerCoreFMParser_jj_3_3(self);
}


#line 5098
- (jboolean)jj_3_2 {
  return FreemarkerCoreFMParser_jj_3_2(self);
}


#line 5104
- (jboolean)jj_3_1 {
  return FreemarkerCoreFMParser_jj_3_1(self);
}


#line 5110
- (jboolean)jj_3_220 {
  return FreemarkerCoreFMParser_jj_3_220(self);
}


#line 5117
- (jboolean)jj_3R_33 {
  return FreemarkerCoreFMParser_jj_3R_33(self);
}


#line 5150
- (jboolean)jj_3_77 {
  return FreemarkerCoreFMParser_jj_3_77(self);
}


#line 5157
- (jboolean)jj_3R_81 {
  return FreemarkerCoreFMParser_jj_3R_81(self);
}


#line 5164
- (jboolean)jj_3_222 {
  return FreemarkerCoreFMParser_jj_3_222(self);
}


#line 5176
- (jboolean)jj_3R_55 {
  return FreemarkerCoreFMParser_jj_3R_55(self);
}


#line 5183
- (jboolean)jj_3_221 {
  return FreemarkerCoreFMParser_jj_3_221(self);
}


#line 5189
- (jboolean)jj_3R_42 {
  return FreemarkerCoreFMParser_jj_3R_42(self);
}


#line 5195
- (jboolean)jj_3_219 {
  return FreemarkerCoreFMParser_jj_3_219(self);
}


#line 5201
- (jboolean)jj_3R_80 {
  return FreemarkerCoreFMParser_jj_3R_80(self);
}


#line 5208
- (jboolean)jj_3R_87 {
  return FreemarkerCoreFMParser_jj_3R_87(self);
}


#line 5214
- (jboolean)jj_3R_44 {
  return FreemarkerCoreFMParser_jj_3R_44(self);
}


#line 5222
- (jboolean)jj_3_75 {
  return FreemarkerCoreFMParser_jj_3_75(self);
}


#line 5228
- (jboolean)jj_3_74 {
  return FreemarkerCoreFMParser_jj_3_74(self);
}


#line 5234
- (jboolean)jj_3_73 {
  return FreemarkerCoreFMParser_jj_3_73(self);
}


#line 5248
- (jboolean)jj_3_132 {
  return FreemarkerCoreFMParser_jj_3_132(self);
}


#line 5255
- (jboolean)jj_3_217 {
  return FreemarkerCoreFMParser_jj_3_217(self);
}


#line 5261
- (jboolean)jj_3_72 {
  return FreemarkerCoreFMParser_jj_3_72(self);
}


#line 5267
- (jboolean)jj_3_216 {
  return FreemarkerCoreFMParser_jj_3_216(self);
}


#line 5273
- (jboolean)jj_3_131 {
  return FreemarkerCoreFMParser_jj_3_131(self);
}


#line 5279
- (jboolean)jj_3_209 {
  return FreemarkerCoreFMParser_jj_3_209(self);
}


#line 5285
- (jboolean)jj_3_215 {
  return FreemarkerCoreFMParser_jj_3_215(self);
}


#line 5291
- (jboolean)jj_3R_54 {
  return FreemarkerCoreFMParser_jj_3R_54(self);
}


#line 5298
- (jboolean)jj_3_71 {
  return FreemarkerCoreFMParser_jj_3_71(self);
}


#line 5304
- (jboolean)jj_3_218 {
  return FreemarkerCoreFMParser_jj_3_218(self);
}


#line 5318
- (jboolean)jj_3_76 {
  return FreemarkerCoreFMParser_jj_3_76(self);
}


#line 5335
- (jboolean)jj_3_128 {
  return FreemarkerCoreFMParser_jj_3_128(self);
}


#line 5341
- (jboolean)jj_3R_24 {
  return FreemarkerCoreFMParser_jj_3R_24(self);
}


#line 5351
- (jboolean)jj_3_119 {
  return FreemarkerCoreFMParser_jj_3_119(self);
}


#line 5357
- (jboolean)jj_3_127 {
  return FreemarkerCoreFMParser_jj_3_127(self);
}


#line 5363
- (jboolean)jj_3_126 {
  return FreemarkerCoreFMParser_jj_3_126(self);
}


#line 5369
- (jboolean)jj_3_208 {
  return FreemarkerCoreFMParser_jj_3_208(self);
}


#line 5375
- (jboolean)jj_3_70 {
  return FreemarkerCoreFMParser_jj_3_70(self);
}


#line 5381
- (jboolean)jj_3_118 {
  return FreemarkerCoreFMParser_jj_3_118(self);
}


#line 5387
- (jboolean)jj_3_69 {
  return FreemarkerCoreFMParser_jj_3_69(self);
}


#line 5393
- (jboolean)jj_3_214 {
  return FreemarkerCoreFMParser_jj_3_214(self);
}


#line 5399
- (jboolean)jj_3_213 {
  return FreemarkerCoreFMParser_jj_3_213(self);
}


#line 5405
- (jboolean)jj_3_212 {
  return FreemarkerCoreFMParser_jj_3_212(self);
}


#line 5411
- (jboolean)jj_3R_26 {
  return FreemarkerCoreFMParser_jj_3R_26(self);
}


#line 5422
- (jboolean)jj_3_125 {
  return FreemarkerCoreFMParser_jj_3_125(self);
}


#line 5429
- (jboolean)jj_3_211 {
  return FreemarkerCoreFMParser_jj_3_211(self);
}


#line 5435
- (jboolean)jj_3R_100 {
  return FreemarkerCoreFMParser_jj_3R_100(self);
}


#line 5452
- (jboolean)jj_3_117 {
  return FreemarkerCoreFMParser_jj_3_117(self);
}


#line 5458
- (jboolean)jj_3_130 {
  return FreemarkerCoreFMParser_jj_3_130(self);
}


#line 5476
- (jboolean)jj_3_207 {
  return FreemarkerCoreFMParser_jj_3_207(self);
}


#line 5482
- (jboolean)jj_3R_97 {
  return FreemarkerCoreFMParser_jj_3R_97(self);
}


#line 5493
- (jboolean)jj_3_107 {
  return FreemarkerCoreFMParser_jj_3_107(self);
}


#line 5499
- (jboolean)jj_3_116 {
  return FreemarkerCoreFMParser_jj_3_116(self);
}


#line 5505
- (jboolean)jj_3_121 {
  return FreemarkerCoreFMParser_jj_3_121(self);
}


#line 5511
- (jboolean)jj_3_68 {
  return FreemarkerCoreFMParser_jj_3_68(self);
}


#line 5517
- (jboolean)jj_3_124 {
  return FreemarkerCoreFMParser_jj_3_124(self);
}


#line 5524
- (jboolean)jj_3_106 {
  return FreemarkerCoreFMParser_jj_3_106(self);
}


#line 5530
- (jboolean)jj_3_206 {
  return FreemarkerCoreFMParser_jj_3_206(self);
}


#line 5536
- (jboolean)jj_3_210 {
  return FreemarkerCoreFMParser_jj_3_210(self);
}


#line 5553
- (jboolean)jj_3_67 {
  return FreemarkerCoreFMParser_jj_3_67(self);
}


#line 5559
- (jboolean)jj_3R_89 {
  return FreemarkerCoreFMParser_jj_3R_89(self);
}


#line 5570
- (jboolean)jj_3R_25 {
  return FreemarkerCoreFMParser_jj_3R_25(self);
}


#line 5581
- (jboolean)jj_3_115 {
  return FreemarkerCoreFMParser_jj_3_115(self);
}


#line 5587
- (jboolean)jj_3_120 {
  return FreemarkerCoreFMParser_jj_3_120(self);
}


#line 5593
- (jboolean)jj_3_123 {
  return FreemarkerCoreFMParser_jj_3_123(self);
}


#line 5604
- (jboolean)jj_3_105 {
  return FreemarkerCoreFMParser_jj_3_105(self);
}


#line 5610
- (jboolean)jj_3_114 {
  return FreemarkerCoreFMParser_jj_3_114(self);
}


#line 5616
- (jboolean)jj_3R_38 {
  return FreemarkerCoreFMParser_jj_3R_38(self);
}


#line 5624
- (jboolean)jj_3_122 {
  return FreemarkerCoreFMParser_jj_3_122(self);
}


#line 5648
- (jboolean)jj_3_204 {
  return FreemarkerCoreFMParser_jj_3_204(self);
}


#line 5654
- (jboolean)jj_3_205 {
  return FreemarkerCoreFMParser_jj_3_205(self);
}


#line 5668
- (jboolean)jj_3_203 {
  return FreemarkerCoreFMParser_jj_3_203(self);
}


#line 5674
- (jboolean)jj_3_104 {
  return FreemarkerCoreFMParser_jj_3_104(self);
}


#line 5680
- (jboolean)jj_3_202 {
  return FreemarkerCoreFMParser_jj_3_202(self);
}


#line 5686
- (jboolean)jj_3_113 {
  return FreemarkerCoreFMParser_jj_3_113(self);
}


#line 5692
- (jboolean)jj_3R_91 {
  return FreemarkerCoreFMParser_jj_3R_91(self);
}


#line 5706
- (jboolean)jj_3_112 {
  return FreemarkerCoreFMParser_jj_3_112(self);
}


#line 5742
- (jboolean)jj_3_109 {
  return FreemarkerCoreFMParser_jj_3_109(self);
}


#line 5748
- (jboolean)jj_3R_48 {
  return FreemarkerCoreFMParser_jj_3R_48(self);
}


#line 5757
- (jboolean)jj_3R_79 {
  return FreemarkerCoreFMParser_jj_3R_79(self);
}


#line 5768
- (jboolean)jj_3_103 {
  return FreemarkerCoreFMParser_jj_3_103(self);
}


#line 5774
- (jboolean)jj_3R_37 {
  return FreemarkerCoreFMParser_jj_3R_37(self);
}


#line 5782
- (jboolean)jj_3_108 {
  return FreemarkerCoreFMParser_jj_3_108(self);
}


#line 5788
- (jboolean)jj_3_102 {
  return FreemarkerCoreFMParser_jj_3_102(self);
}


#line 5794
- (jboolean)jj_3_111 {
  return FreemarkerCoreFMParser_jj_3_111(self);
}


#line 5805
- (jboolean)jj_3_201 {
  return FreemarkerCoreFMParser_jj_3_201(self);
}


#line 5811
- (jboolean)jj_3_200 {
  return FreemarkerCoreFMParser_jj_3_200(self);
}


#line 5817
- (jboolean)jj_3_65 {
  return FreemarkerCoreFMParser_jj_3_65(self);
}


#line 5823
- (jboolean)jj_3_199 {
  return FreemarkerCoreFMParser_jj_3_199(self);
}


#line 5829
- (jboolean)jj_3_62 {
  return FreemarkerCoreFMParser_jj_3_62(self);
}


#line 5835
- (jboolean)jj_3_198 {
  return FreemarkerCoreFMParser_jj_3_198(self);
}


#line 5841
- (jboolean)jj_3_61 {
  return FreemarkerCoreFMParser_jj_3_61(self);
}


#line 5847
- (jboolean)jj_3_197 {
  return FreemarkerCoreFMParser_jj_3_197(self);
}


#line 5853
- (jboolean)jj_3_60 {
  return FreemarkerCoreFMParser_jj_3_60(self);
}


#line 5859
- (jboolean)jj_3_196 {
  return FreemarkerCoreFMParser_jj_3_196(self);
}


#line 5865
- (jboolean)jj_3_59 {
  return FreemarkerCoreFMParser_jj_3_59(self);
}


#line 5871
- (jboolean)jj_3_110 {
  return FreemarkerCoreFMParser_jj_3_110(self);
}


#line 5895
- (jboolean)jj_3_195 {
  return FreemarkerCoreFMParser_jj_3_195(self);
}


#line 5901
- (jboolean)jj_3_58 {
  return FreemarkerCoreFMParser_jj_3_58(self);
}


#line 5907
- (jboolean)jj_3_194 {
  return FreemarkerCoreFMParser_jj_3_194(self);
}


#line 5913
- (jboolean)jj_3_57 {
  return FreemarkerCoreFMParser_jj_3_57(self);
}


#line 5919
- (jboolean)jj_3_193 {
  return FreemarkerCoreFMParser_jj_3_193(self);
}


#line 5925
- (jboolean)jj_3_56 {
  return FreemarkerCoreFMParser_jj_3_56(self);
}


#line 5931
- (jboolean)jj_3_64 {
  return FreemarkerCoreFMParser_jj_3_64(self);
}


#line 5937
- (jboolean)jj_3_192 {
  return FreemarkerCoreFMParser_jj_3_192(self);
}


#line 5943
- (jboolean)jj_3_55 {
  return FreemarkerCoreFMParser_jj_3_55(self);
}


#line 5949
- (jboolean)jj_3_191 {
  return FreemarkerCoreFMParser_jj_3_191(self);
}


#line 5955
- (jboolean)jj_3_54 {
  return FreemarkerCoreFMParser_jj_3_54(self);
}


#line 5961
- (jboolean)jj_3_190 {
  return FreemarkerCoreFMParser_jj_3_190(self);
}


#line 5967
- (jboolean)jj_3_189 {
  return FreemarkerCoreFMParser_jj_3_189(self);
}


#line 5973
- (jboolean)jj_3_129 {
  return FreemarkerCoreFMParser_jj_3_129(self);
}


#line 5991
- (jboolean)jj_3_66 {
  return FreemarkerCoreFMParser_jj_3_66(self);
}


#line 6023
- (jboolean)jj_3_188 {
  return FreemarkerCoreFMParser_jj_3_188(self);
}


#line 6029
- (jboolean)jj_3_63 {
  return FreemarkerCoreFMParser_jj_3_63(self);
}


#line 6035
- (jboolean)jj_3_187 {
  return FreemarkerCoreFMParser_jj_3_187(self);
}


#line 6041
- (jboolean)jj_3_186 {
  return FreemarkerCoreFMParser_jj_3_186(self);
}


#line 6047
- (jboolean)jj_3_185 {
  return FreemarkerCoreFMParser_jj_3_185(self);
}


#line 6053
- (jboolean)jj_3R_36 {
  return FreemarkerCoreFMParser_jj_3R_36(self);
}


#line 6071
- (jboolean)jj_3_184 {
  return FreemarkerCoreFMParser_jj_3_184(self);
}


#line 6077
- (jboolean)jj_3_183 {
  return FreemarkerCoreFMParser_jj_3_183(self);
}


#line 6083
- (jboolean)jj_3_182 {
  return FreemarkerCoreFMParser_jj_3_182(self);
}


#line 6089
- (jboolean)jj_3_101 {
  return FreemarkerCoreFMParser_jj_3_101(self);
}


#line 6095
- (jboolean)jj_3_181 {
  return FreemarkerCoreFMParser_jj_3_181(self);
}


#line 6101
- (jboolean)jj_3_180 {
  return FreemarkerCoreFMParser_jj_3_180(self);
}


#line 6107
- (jboolean)jj_3_100 {
  return FreemarkerCoreFMParser_jj_3_100(self);
}


#line 6113
- (jboolean)jj_3_99 {
  return FreemarkerCoreFMParser_jj_3_99(self);
}


#line 6119
- (jboolean)jj_3_179 {
  return FreemarkerCoreFMParser_jj_3_179(self);
}


#line 6125
- (jboolean)jj_3_178 {
  return FreemarkerCoreFMParser_jj_3_178(self);
}


#line 6131
- (jboolean)jj_3_177 {
  return FreemarkerCoreFMParser_jj_3_177(self);
}


#line 6137
- (jboolean)jj_3R_53 {
  return FreemarkerCoreFMParser_jj_3R_53(self);
}


#line 6152
- (jboolean)jj_3_176 {
  return FreemarkerCoreFMParser_jj_3_176(self);
}


#line 6158
- (jboolean)jj_3_175 {
  return FreemarkerCoreFMParser_jj_3_175(self);
}


#line 6164
- (jboolean)jj_3_174 {
  return FreemarkerCoreFMParser_jj_3_174(self);
}


#line 6170
- (jboolean)jj_3_173 {
  return FreemarkerCoreFMParser_jj_3_173(self);
}


#line 6176
- (jboolean)jj_3R_106 {
  return FreemarkerCoreFMParser_jj_3R_106(self);
}


#line 6184
- (jboolean)jj_3R_82 {
  return FreemarkerCoreFMParser_jj_3R_82(self);
}


#line 6276
- (jboolean)jj_3_98 {
  return FreemarkerCoreFMParser_jj_3_98(self);
}


#line 6282
- (jboolean)jj_3_97 {
  return FreemarkerCoreFMParser_jj_3_97(self);
}


#line 6288
- (jboolean)jj_3_96 {
  return FreemarkerCoreFMParser_jj_3_96(self);
}


#line 6294
- (jboolean)jj_3_95 {
  return FreemarkerCoreFMParser_jj_3_95(self);
}


#line 6300
- (jboolean)jj_3R_71 {
  return FreemarkerCoreFMParser_jj_3R_71(self);
}


#line 6317
- (jboolean)jj_3R_66 {
  return FreemarkerCoreFMParser_jj_3R_66(self);
}


#line 6324
- (jboolean)jj_3R_39 {
  return FreemarkerCoreFMParser_jj_3R_39(self);
}


#line 6334
- (jboolean)jj_3R_70 {
  return FreemarkerCoreFMParser_jj_3R_70(self);
}


#line 6340
- (jboolean)jj_3_172 {
  return FreemarkerCoreFMParser_jj_3_172(self);
}


#line 6346
- (jboolean)jj_3_171 {
  return FreemarkerCoreFMParser_jj_3_171(self);
}


#line 6352
- (jboolean)jj_3R_46 {
  return FreemarkerCoreFMParser_jj_3R_46(self);
}


#line 6363
- (jboolean)jj_3_51 {
  return FreemarkerCoreFMParser_jj_3_51(self);
}


#line 6369
- (jboolean)jj_3R_41 {
  return FreemarkerCoreFMParser_jj_3R_41(self);
}


#line 6375
- (jboolean)jj_3_94 {
  return FreemarkerCoreFMParser_jj_3_94(self);
}


#line 6383
- (jboolean)jj_3R_43 {
  return FreemarkerCoreFMParser_jj_3R_43(self);
}


#line 6389
- (jboolean)jj_3_93 {
  return FreemarkerCoreFMParser_jj_3_93(self);
}


#line 6395
- (jboolean)jj_3_53 {
  return FreemarkerCoreFMParser_jj_3_53(self);
}


#line 6404
- (jboolean)jj_3R_72 {
  return FreemarkerCoreFMParser_jj_3R_72(self);
}


#line 6415
- (jboolean)jj_3R_74 {
  return FreemarkerCoreFMParser_jj_3R_74(self);
}


#line 6423
- (jboolean)jj_3_52 {
  return FreemarkerCoreFMParser_jj_3_52(self);
}


#line 6429
- (jboolean)jj_3R_40 {
  return FreemarkerCoreFMParser_jj_3R_40(self);
}


#line 6440
- (jboolean)jj_3_92 {
  return FreemarkerCoreFMParser_jj_3_92(self);
}


#line 6447
- (jboolean)jj_3_91 {
  return FreemarkerCoreFMParser_jj_3_91(self);
}


#line 6453
- (jboolean)jj_3_50 {
  return FreemarkerCoreFMParser_jj_3_50(self);
}


#line 6459
- (jboolean)jj_3_49 {
  return FreemarkerCoreFMParser_jj_3_49(self);
}


#line 6465
- (jboolean)jj_3R_69 {
  return FreemarkerCoreFMParser_jj_3R_69(self);
}


#line 6476
- (jboolean)jj_3_48 {
  return FreemarkerCoreFMParser_jj_3_48(self);
}


#line 6482
- (jboolean)jj_3_47 {
  return FreemarkerCoreFMParser_jj_3_47(self);
}


#line 6488
- (jboolean)jj_3_46 {
  return FreemarkerCoreFMParser_jj_3_46(self);
}


#line 6494
- (jboolean)jj_3_45 {
  return FreemarkerCoreFMParser_jj_3_45(self);
}


#line 6500
- (jboolean)jj_3R_73 {
  return FreemarkerCoreFMParser_jj_3R_73(self);
}


#line 6507
- (jboolean)jj_3R_92 {
  return FreemarkerCoreFMParser_jj_3R_92(self);
}


#line 6530
- (jboolean)jj_3_170 {
  return FreemarkerCoreFMParser_jj_3_170(self);
}


#line 6536
- (jboolean)jj_3_169 {
  return FreemarkerCoreFMParser_jj_3_169(self);
}


#line 6543
- (jboolean)jj_3_90 {
  return FreemarkerCoreFMParser_jj_3_90(self);
}


#line 6550
- (jboolean)jj_3_89 {
  return FreemarkerCoreFMParser_jj_3_89(self);
}


#line 6556
- (jboolean)jj_3_168 {
  return FreemarkerCoreFMParser_jj_3_168(self);
}


#line 6562
- (jboolean)jj_3R_49 {
  return FreemarkerCoreFMParser_jj_3R_49(self);
}


#line 6576
- (jboolean)jj_3R_68 {
  return FreemarkerCoreFMParser_jj_3R_68(self);
}


#line 6587
- (jboolean)jj_3R_30 {
  return FreemarkerCoreFMParser_jj_3R_30(self);
}


#line 6594
- (jboolean)jj_3_44 {
  return FreemarkerCoreFMParser_jj_3_44(self);
}


#line 6600
- (jboolean)jj_3_43 {
  return FreemarkerCoreFMParser_jj_3_43(self);
}


#line 6606
- (jboolean)jj_3_167 {
  return FreemarkerCoreFMParser_jj_3_167(self);
}


#line 6612
- (jboolean)jj_3R_88 {
  return FreemarkerCoreFMParser_jj_3R_88(self);
}


#line 6623
- (jboolean)jj_3R_67 {
  return FreemarkerCoreFMParser_jj_3R_67(self);
}


#line 6629
- (jboolean)jj_3_166 {
  return FreemarkerCoreFMParser_jj_3_166(self);
}


#line 6635
- (jboolean)jj_3R_28 {
  return FreemarkerCoreFMParser_jj_3R_28(self);
}


#line 6641
- (jboolean)jj_3R_65 {
  return FreemarkerCoreFMParser_jj_3R_65(self);
}


#line 6648
- (jboolean)jj_3_42 {
  return FreemarkerCoreFMParser_jj_3_42(self);
}


#line 6654
- (jboolean)jj_3R_77 {
  return FreemarkerCoreFMParser_jj_3R_77(self);
}


#line 6660
- (jboolean)jj_3_41 {
  return FreemarkerCoreFMParser_jj_3_41(self);
}


#line 6666
- (jboolean)jj_3R_23 {
  return FreemarkerCoreFMParser_jj_3R_23(self);
}


#line 6677
- (jboolean)jj_3_86 {
  return FreemarkerCoreFMParser_jj_3_86(self);
}


#line 6684
- (jboolean)jj_3_85 {
  return FreemarkerCoreFMParser_jj_3_85(self);
}


#line 6690
- (jboolean)jj_3_165 {
  return FreemarkerCoreFMParser_jj_3_165(self);
}


#line 6698
- (jboolean)jj_3_164 {
  return FreemarkerCoreFMParser_jj_3_164(self);
}


#line 6704
- (jboolean)jj_3R_27 {
  return FreemarkerCoreFMParser_jj_3R_27(self);
}


#line 6712
- (jboolean)jj_3_88 {
  return FreemarkerCoreFMParser_jj_3_88(self);
}


#line 6724
- (jboolean)jj_3_163 {
  return FreemarkerCoreFMParser_jj_3_163(self);
}


#line 6731
- (jboolean)jj_3_87 {
  return FreemarkerCoreFMParser_jj_3_87(self);
}


#line 6737
- (jboolean)jj_3_162 {
  return FreemarkerCoreFMParser_jj_3_162(self);
}


#line 6743
- (jboolean)jj_3R_76 {
  return FreemarkerCoreFMParser_jj_3R_76(self);
}


#line 6754
- (jboolean)jj_3_40 {
  return FreemarkerCoreFMParser_jj_3_40(self);
}


#line 6760
- (jboolean)jj_3R_64 {
  return FreemarkerCoreFMParser_jj_3R_64(self);
}


#line 6767
- (jboolean)jj_3R_96 {
  return FreemarkerCoreFMParser_jj_3R_96(self);
}


#line 6774
- (jboolean)jj_3_84 {
  return FreemarkerCoreFMParser_jj_3_84(self);
}


#line 6781
- (jboolean)jj_3R_86 {
  return FreemarkerCoreFMParser_jj_3R_86(self);
}


#line 6792
- (jboolean)jj_3R_63 {
  return FreemarkerCoreFMParser_jj_3R_63(self);
}


#line 6799
- (jboolean)jj_3R_75 {
  return FreemarkerCoreFMParser_jj_3R_75(self);
}


#line 6806
- (jboolean)jj_3_39 {
  return FreemarkerCoreFMParser_jj_3_39(self);
}


#line 6812
- (jboolean)jj_3_161 {
  return FreemarkerCoreFMParser_jj_3_161(self);
}


#line 6818
- (jboolean)jj_3_160 {
  return FreemarkerCoreFMParser_jj_3_160(self);
}


#line 6824
- (jboolean)jj_3R_99 {
  return FreemarkerCoreFMParser_jj_3R_99(self);
}


#line 6831
- (jboolean)jj_3R_62 {
  return FreemarkerCoreFMParser_jj_3R_62(self);
}


#line 6843
- (jboolean)jj_3R_95 {
  return FreemarkerCoreFMParser_jj_3R_95(self);
}


#line 6854
- (jboolean)jj_3_158 {
  return FreemarkerCoreFMParser_jj_3_158(self);
}


#line 6860
- (jboolean)jj_3_157 {
  return FreemarkerCoreFMParser_jj_3_157(self);
}


#line 6869
- (jboolean)jj_3_36 {
  return FreemarkerCoreFMParser_jj_3_36(self);
}


#line 6875
- (jboolean)jj_3R_60 {
  return FreemarkerCoreFMParser_jj_3R_60(self);
}


#line 6885
- (jboolean)jj_3_159 {
  return FreemarkerCoreFMParser_jj_3_159(self);
}


#line 6896
- (jboolean)jj_3R_47 {
  return FreemarkerCoreFMParser_jj_3R_47(self);
}


#line 6904
- (jboolean)jj_3R_35 {
  return FreemarkerCoreFMParser_jj_3R_35(self);
}


#line 6910
- (jboolean)jj_3_35 {
  return FreemarkerCoreFMParser_jj_3_35(self);
}


#line 6916
- (jboolean)jj_3_34 {
  return FreemarkerCoreFMParser_jj_3_34(self);
}


#line 6922
- (jboolean)jj_3_38 {
  return FreemarkerCoreFMParser_jj_3_38(self);
}


#line 6931
- (jboolean)jj_3_156 {
  return FreemarkerCoreFMParser_jj_3_156(self);
}


#line 6938
- (jboolean)jj_3_37 {
  return FreemarkerCoreFMParser_jj_3_37(self);
}


#line 6950
- (jboolean)jj_3R_105 {
  return FreemarkerCoreFMParser_jj_3R_105(self);
}


#line 6961
- (jboolean)jj_3_153 {
  return FreemarkerCoreFMParser_jj_3_153(self);
}


#line 6967
- (jboolean)jj_3R_103 {
  return FreemarkerCoreFMParser_jj_3R_103(self);
}


#line 6976
- (jboolean)jj_3R_59 {
  return FreemarkerCoreFMParser_jj_3R_59(self);
}


#line 6983
- (jboolean)jj_3_154 {
  return FreemarkerCoreFMParser_jj_3_154(self);
}


#line 6989
- (jboolean)jj_3_155 {
  return FreemarkerCoreFMParser_jj_3_155(self);
}


#line 6996
- (jboolean)jj_3_32 {
  return FreemarkerCoreFMParser_jj_3_32(self);
}


#line 7002
- (jboolean)jj_3_31 {
  return FreemarkerCoreFMParser_jj_3_31(self);
}


#line 7008
- (jboolean)jj_3_30 {
  return FreemarkerCoreFMParser_jj_3_30(self);
}


#line 7014
- (jboolean)jj_3_33 {
  return FreemarkerCoreFMParser_jj_3_33(self);
}


#line 7040
- (jboolean)jj_3_29 {
  return FreemarkerCoreFMParser_jj_3_29(self);
}


#line 7046
- (jboolean)jj_3R_61 {
  return FreemarkerCoreFMParser_jj_3R_61(self);
}


#line 7053
- (jboolean)jj_3_28 {
  return FreemarkerCoreFMParser_jj_3_28(self);
}


#line 7059
- (jboolean)jj_3_27 {
  return FreemarkerCoreFMParser_jj_3_27(self);
}


#line 7065
- (jboolean)jj_3R_104 {
  return FreemarkerCoreFMParser_jj_3R_104(self);
}


#line 7089
- (jboolean)jj_3R_52 {
  return FreemarkerCoreFMParser_jj_3R_52(self);
}


#line 7096
- (jboolean)jj_3R_101 {
  return FreemarkerCoreFMParser_jj_3R_101(self);
}


#line 7105
- (jboolean)jj_3R_45 {
  return FreemarkerCoreFMParser_jj_3R_45(self);
}


#line 7112
- (jboolean)jj_3_26 {
  return FreemarkerCoreFMParser_jj_3_26(self);
}


#line 7126
- (jboolean)jj_3_25 {
  return FreemarkerCoreFMParser_jj_3_25(self);
}


#line 7132
- (jboolean)jj_3_24 {
  return FreemarkerCoreFMParser_jj_3_24(self);
}


#line 7138
- (jboolean)jj_3_23 {
  return FreemarkerCoreFMParser_jj_3_23(self);
}


#line 7144
- (jboolean)jj_3R_102 {
  return FreemarkerCoreFMParser_jj_3R_102(self);
}


#line 7159
- (jboolean)jj_3R_98 {
  return FreemarkerCoreFMParser_jj_3R_98(self);
}


#line 7168
- (jboolean)jj_3_83 {
  return FreemarkerCoreFMParser_jj_3_83(self);
}


#line 7174
- (jboolean)jj_3_148 {
  return FreemarkerCoreFMParser_jj_3_148(self);
}


#line 7180
- (jboolean)jj_3_22 {
  return FreemarkerCoreFMParser_jj_3_22(self);
}


#line 7186
- (jboolean)jj_3_147 {
  return FreemarkerCoreFMParser_jj_3_147(self);
}


#line 7192
- (jboolean)jj_3_146 {
  return FreemarkerCoreFMParser_jj_3_146(self);
}


#line 7204
- (jboolean)jj_3_152 {
  return FreemarkerCoreFMParser_jj_3_152(self);
}


#line 7236
+ (void)jj_la1_init_0 {
  FreemarkerCoreFMParser_jj_la1_init_0();
}


#line 7239
+ (void)jj_la1_init_1 {
  FreemarkerCoreFMParser_jj_la1_init_1();
}


#line 7242
+ (void)jj_la1_init_2 {
  FreemarkerCoreFMParser_jj_la1_init_2();
}


#line 7245
+ (void)jj_la1_init_3 {
  FreemarkerCoreFMParser_jj_la1_init_3();
}


#line 7248
+ (void)jj_la1_init_4 {
  FreemarkerCoreFMParser_jj_la1_init_4();
}


#line 7256
- (instancetype)initWithJavaIoInputStream:(JavaIoInputStream *)stream {
  FreemarkerCoreFMParser_initWithJavaIoInputStream_(self, stream);
  return self;
}


#line 7260
- (instancetype)initWithJavaIoInputStream:(JavaIoInputStream *)stream
                             withNSString:(NSString *)encoding {
  FreemarkerCoreFMParser_initWithJavaIoInputStream_withNSString_(self, stream, encoding);
  return self;
}


#line 7271
- (void)ReInitWithJavaIoInputStream:(JavaIoInputStream *)stream {
  [self ReInitWithJavaIoInputStream:stream withNSString:nil];
}

- (void)ReInitWithJavaIoInputStream:(JavaIoInputStream *)stream
                       withNSString:(NSString *)encoding {
  @try {
    
#line 7276
    [((FreemarkerCoreSimpleCharStream *) nil_chk(jj_input_stream_)) ReInitWithJavaIoInputStream:stream withNSString:encoding withInt:1 withInt:1];
  }
  @catch (
#line 7276
  JavaIoUnsupportedEncodingException *e) {
    
#line 7276
    @throw new_JavaLangRuntimeException_initWithJavaLangThrowable_(e);
  }
  
#line 7277
  [((FreemarkerCoreFMParserTokenManager *) nil_chk(token_source_)) ReInitWithFreemarkerCoreSimpleCharStream:jj_input_stream_];
  token_ = new_FreemarkerCoreToken_init();
  jj_ntk_ = -1;
  jj_gen_ = 0;
  for (jint i = 0; i < 4; i++) *IOSIntArray_GetRef(nil_chk(jj_la1_), i) = -1;
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(jj_2_rtns_))->size_; i++) (void) IOSObjectArray_Set(jj_2_rtns_, i, new_FreemarkerCoreFMParser_JJCalls_init());
}


#line 7286
- (instancetype)initWithJavaIoReader:(JavaIoReader *)stream {
  FreemarkerCoreFMParser_initWithJavaIoReader_(self, stream);
  return self;
}


#line 7297
- (void)ReInitWithJavaIoReader:(JavaIoReader *)stream {
  [((FreemarkerCoreSimpleCharStream *) nil_chk(jj_input_stream_)) ReInitWithJavaIoReader:stream withInt:1 withInt:1];
  [((FreemarkerCoreFMParserTokenManager *) nil_chk(token_source_)) ReInitWithFreemarkerCoreSimpleCharStream:jj_input_stream_];
  token_ = new_FreemarkerCoreToken_init();
  jj_ntk_ = -1;
  jj_gen_ = 0;
  for (jint i = 0; i < 4; i++) *IOSIntArray_GetRef(nil_chk(jj_la1_), i) = -1;
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(jj_2_rtns_))->size_; i++) (void) IOSObjectArray_Set(jj_2_rtns_, i, new_FreemarkerCoreFMParser_JJCalls_init());
}


#line 7308
- (instancetype)initWithFreemarkerCoreFMParserTokenManager:(FreemarkerCoreFMParserTokenManager *)tm {
  FreemarkerCoreFMParser_initWithFreemarkerCoreFMParserTokenManager_(self, tm);
  return self;
}


#line 7318
- (void)ReInitWithFreemarkerCoreFMParserTokenManager:(FreemarkerCoreFMParserTokenManager *)tm {
  token_source_ = tm;
  token_ = new_FreemarkerCoreToken_init();
  jj_ntk_ = -1;
  jj_gen_ = 0;
  for (jint i = 0; i < 4; i++) *IOSIntArray_GetRef(nil_chk(jj_la1_), i) = -1;
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(jj_2_rtns_))->size_; i++) (void) IOSObjectArray_Set(jj_2_rtns_, i, new_FreemarkerCoreFMParser_JJCalls_init());
}

- (FreemarkerCoreToken *)jj_consume_tokenWithInt:(jint)kind {
  return FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, kind);
}


#line 7354
- (jboolean)jj_scan_tokenWithInt:(jint)kind {
  return FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, kind);
}


#line 7377
- (FreemarkerCoreToken *)getNextToken {
  if (((FreemarkerCoreToken *) nil_chk(token_))->next_ != nil) token_ = token_->next_;
  else token_ = token_->next_ = [((FreemarkerCoreFMParserTokenManager *) nil_chk(token_source_)) getNextToken];
  jj_ntk_ = -1;
  jj_gen_++;
  return token_;
}


#line 7386
- (FreemarkerCoreToken *)getTokenWithInt:(jint)index {
  FreemarkerCoreToken *t = token_;
  for (jint i = 0; i < index; i++) {
    if (((FreemarkerCoreToken *) nil_chk(t))->next_ != nil) t = t->next_;
    else t = t->next_ = [((FreemarkerCoreFMParserTokenManager *) nil_chk(token_source_)) getNextToken];
  }
  return t;
}

- (jint)jj_ntk_f {
  return FreemarkerCoreFMParser_jj_ntk_f(self);
}


#line 7408
- (void)jj_add_error_tokenWithInt:(jint)kind
                          withInt:(jint)pos {
  FreemarkerCoreFMParser_jj_add_error_tokenWithInt_withInt_(self, kind, pos);
}


#line 7434
- (FreemarkerCoreParseException *)generateParseException {
  [((id<JavaUtilList>) nil_chk(jj_expentries_)) clear];
  IOSBooleanArray *la1tokens = [IOSBooleanArray newArrayWithLength:149];
  if (jj_kind_ >= 0) {
    *IOSBooleanArray_GetRef(la1tokens, jj_kind_) = YES;
    jj_kind_ = -1;
  }
  for (jint i = 0; i < 4; i++) {
    if (IOSIntArray_Get(nil_chk(jj_la1_), i) == jj_gen_) {
      for (jint j = 0; j < 32; j++) {
        if ((IOSIntArray_Get(nil_chk(FreemarkerCoreFMParser_jj_la1_0_), i) & (LShift32(1, j))) != 0) {
          *IOSBooleanArray_GetRef(la1tokens, j) = YES;
        }
        if ((IOSIntArray_Get(nil_chk(FreemarkerCoreFMParser_jj_la1_1_), i) & (LShift32(1, j))) != 0) {
          *IOSBooleanArray_GetRef(la1tokens, 32 + j) = YES;
        }
        if ((IOSIntArray_Get(nil_chk(FreemarkerCoreFMParser_jj_la1_2_), i) & (LShift32(1, j))) != 0) {
          *IOSBooleanArray_GetRef(la1tokens, 64 + j) = YES;
        }
        if ((IOSIntArray_Get(nil_chk(FreemarkerCoreFMParser_jj_la1_3_), i) & (LShift32(1, j))) != 0) {
          *IOSBooleanArray_GetRef(la1tokens, 96 + j) = YES;
        }
        if ((IOSIntArray_Get(nil_chk(FreemarkerCoreFMParser_jj_la1_4_), i) & (LShift32(1, j))) != 0) {
          *IOSBooleanArray_GetRef(la1tokens, 128 + j) = YES;
        }
      }
    }
  }
  for (jint i = 0; i < 149; i++) {
    if (IOSBooleanArray_Get(la1tokens, i)) {
      jj_expentry_ = [IOSIntArray newArrayWithLength:1];
      *IOSIntArray_GetRef(jj_expentry_, 0) = i;
      [jj_expentries_ addWithId:jj_expentry_];
    }
  }
  jj_endpos_ = 0;
  FreemarkerCoreFMParser_jj_rescan_token(self);
  FreemarkerCoreFMParser_jj_add_error_tokenWithInt_withInt_(self, 0, 0);
  IOSObjectArray *exptokseq = [IOSObjectArray newArrayWithLength:[jj_expentries_ size] type:IOSClass_intArray(1)];
  for (jint i = 0; i < [jj_expentries_ size]; i++) {
    (void) IOSObjectArray_Set(exptokseq, i, [jj_expentries_ getWithInt:i]);
  }
  return new_FreemarkerCoreParseException_initWithFreemarkerCoreToken_withIntArray2_withNSStringArray_(token_, exptokseq, FreemarkerCoreFMParserConstants_get_tokenImage_());
}


#line 7480
- (void)enable_tracing {
}


#line 7484
- (void)disable_tracing {
}

- (void)jj_rescan_token {
  FreemarkerCoreFMParser_jj_rescan_token(self);
}


#line 7730
- (void)jj_saveWithInt:(jint)index
               withInt:(jint)xla {
  FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, index, xla);
}

+ (void)initialize {
  if (self == [FreemarkerCoreFMParser class]) {
    {
      
#line 7230
      FreemarkerCoreFMParser_jj_la1_init_0();
      FreemarkerCoreFMParser_jj_la1_init_1();
      FreemarkerCoreFMParser_jj_la1_init_2();
      FreemarkerCoreFMParser_jj_la1_init_3();
      FreemarkerCoreFMParser_jj_la1_init_4();
    }
    J2OBJC_SET_INITIALIZED(FreemarkerCoreFMParser)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "createExpressionParserWithNSString:", "createExpressionParser", "Lfreemarker.core.FMParser;", 0x9, NULL, NULL },
    { "initWithFreemarkerTemplateTemplate:withJavaIoReader:withBoolean:withBoolean:", "FMParser", NULL, 0x1, NULL, NULL },
    { "initWithFreemarkerTemplateTemplate:withJavaIoReader:withBoolean:withBoolean:withInt:", "FMParser", NULL, 0x1, NULL, NULL },
    { "initWithFreemarkerTemplateTemplate:withJavaIoReader:withBoolean:withBoolean:withInt:withInt:", "FMParser", NULL, 0x1, NULL, NULL },
    { "initWithFreemarkerTemplateTemplate:withJavaIoReader:withBoolean:withBoolean:withInt:withInt:withInt:", "FMParser", NULL, 0x1, NULL, NULL },
    { "initWithNSString:", "FMParser", NULL, 0x1, NULL, NULL },
    { "setTemplateWithFreemarkerTemplateTemplate:", "setTemplate", "V", 0x0, NULL, NULL },
    { "getTemplate", NULL, "Lfreemarker.template.Template;", 0x0, NULL, NULL },
    { "_getLastTagSyntax", NULL, "I", 0x1, NULL, NULL },
    { "_getLastNamingConvention", NULL, "I", 0x1, NULL, NULL },
    { "notStringLiteralWithFreemarkerCoreExpression:withNSString:", "notStringLiteral", "V", 0x2, "Lfreemarker.core.ParseException;", NULL },
    { "notNumberLiteralWithFreemarkerCoreExpression:withNSString:", "notNumberLiteral", "V", 0x2, "Lfreemarker.core.ParseException;", NULL },
    { "notBooleanLiteralWithFreemarkerCoreExpression:withNSString:", "notBooleanLiteral", "V", 0x2, "Lfreemarker.core.ParseException;", NULL },
    { "notHashLiteralWithFreemarkerCoreExpression:withNSString:", "notHashLiteral", "V", 0x2, "Lfreemarker.core.ParseException;", NULL },
    { "notListLiteralWithFreemarkerCoreExpression:withNSString:", "notListLiteral", "V", 0x2, "Lfreemarker.core.ParseException;", NULL },
    { "numberLiteralOnlyWithFreemarkerCoreExpression:", "numberLiteralOnly", "V", 0x2, "Lfreemarker.core.ParseException;", NULL },
    { "stringLiteralOnlyWithFreemarkerCoreExpression:", "stringLiteralOnly", "V", 0x2, "Lfreemarker.core.ParseException;", NULL },
    { "booleanLiteralOnlyWithFreemarkerCoreExpression:", "booleanLiteralOnly", "V", 0x2, "Lfreemarker.core.ParseException;", NULL },
    { "escapedExpressionWithFreemarkerCoreExpression:", "escapedExpression", "Lfreemarker.core.Expression;", 0x2, NULL, NULL },
    { "getBooleanWithFreemarkerCoreExpression:", "getBoolean", "Z", 0x2, "Lfreemarker.core.ParseException;", NULL },
    { "pushIteratorBlockContext", NULL, "Lfreemarker.core.FMParser$ParserIteratorBlockContext;", 0x2, NULL, NULL },
    { "popIteratorBlockContext", NULL, "V", 0x2, NULL, NULL },
    { "peekIteratorBlockContext", NULL, "Lfreemarker.core.FMParser$ParserIteratorBlockContext;", 0x2, NULL, NULL },
    { "checkLoopVariableBuiltInLHOWithNSString:withFreemarkerCoreExpression:withFreemarkerCoreToken:", "checkLoopVariableBuiltInLHO", "V", 0x2, "Lfreemarker.core.ParseException;", NULL },
    { "forEachDirectiveSymbol", NULL, "Ljava.lang.String;", 0x2, NULL, NULL },
    { "Expression", NULL, "Lfreemarker.core.Expression;", 0x11, "Lfreemarker.core.ParseException;", NULL },
    { "PrimaryExpression", NULL, "Lfreemarker.core.Expression;", 0x11, "Lfreemarker.core.ParseException;", NULL },
    { "Parenthesis", NULL, "Lfreemarker.core.Expression;", 0x11, "Lfreemarker.core.ParseException;", NULL },
    { "UnaryExpression", NULL, "Lfreemarker.core.Expression;", 0x11, "Lfreemarker.core.ParseException;", NULL },
    { "NotExpression", NULL, "Lfreemarker.core.Expression;", 0x11, "Lfreemarker.core.ParseException;", NULL },
    { "UnaryPlusMinusExpression", NULL, "Lfreemarker.core.Expression;", 0x11, "Lfreemarker.core.ParseException;", NULL },
    { "AdditiveExpression", NULL, "Lfreemarker.core.Expression;", 0x11, "Lfreemarker.core.ParseException;", NULL },
    { "MultiplicativeExpression", NULL, "Lfreemarker.core.Expression;", 0x11, "Lfreemarker.core.ParseException;", NULL },
    { "EqualityExpression", NULL, "Lfreemarker.core.Expression;", 0x11, "Lfreemarker.core.ParseException;", NULL },
    { "RelationalExpression", NULL, "Lfreemarker.core.Expression;", 0x11, "Lfreemarker.core.ParseException;", NULL },
    { "RangeExpression", NULL, "Lfreemarker.core.Expression;", 0x11, "Lfreemarker.core.ParseException;", NULL },
    { "AndExpression", NULL, "Lfreemarker.core.Expression;", 0x11, "Lfreemarker.core.ParseException;", NULL },
    { "OrExpression", NULL, "Lfreemarker.core.Expression;", 0x11, "Lfreemarker.core.ParseException;", NULL },
    { "ListLiteral", NULL, "Lfreemarker.core.ListLiteral;", 0x11, "Lfreemarker.core.ParseException;", NULL },
    { "NumberLiteral", NULL, "Lfreemarker.core.Expression;", 0x11, "Lfreemarker.core.ParseException;", NULL },
    { "Identifier", NULL, "Lfreemarker.core.Identifier;", 0x11, "Lfreemarker.core.ParseException;", NULL },
    { "IdentifierOrStringLiteral", NULL, "Lfreemarker.core.Expression;", 0x11, "Lfreemarker.core.ParseException;", NULL },
    { "BuiltinVariable", NULL, "Lfreemarker.core.BuiltinVariable;", 0x11, "Lfreemarker.core.ParseException;", NULL },
    { "AddSubExpressionWithFreemarkerCoreExpression:", "AddSubExpression", "Lfreemarker.core.Expression;", 0x11, "Lfreemarker.core.ParseException;", NULL },
    { "DefaultToWithFreemarkerCoreExpression:", "DefaultTo", "Lfreemarker.core.Expression;", 0x11, "Lfreemarker.core.ParseException;", NULL },
    { "ExistsWithFreemarkerCoreExpression:", "Exists", "Lfreemarker.core.Expression;", 0x11, "Lfreemarker.core.ParseException;", NULL },
    { "BuiltInWithFreemarkerCoreExpression:", "BuiltIn", "Lfreemarker.core.Expression;", 0x11, "Lfreemarker.core.ParseException;", NULL },
    { "DotVariableWithFreemarkerCoreExpression:", "DotVariable", "Lfreemarker.core.Expression;", 0x11, "Lfreemarker.core.ParseException;", NULL },
    { "DynamicKeyWithFreemarkerCoreExpression:", "DynamicKey", "Lfreemarker.core.Expression;", 0x11, "Lfreemarker.core.ParseException;", NULL },
    { "MethodArgsWithFreemarkerCoreExpression:", "MethodArgs", "Lfreemarker.core.MethodCall;", 0x11, "Lfreemarker.core.ParseException;", NULL },
    { "StringLiteralWithBoolean:", "StringLiteral", "Lfreemarker.core.StringLiteral;", 0x11, "Lfreemarker.core.ParseException;", NULL },
    { "BooleanLiteral", NULL, "Lfreemarker.core.Expression;", 0x11, "Lfreemarker.core.ParseException;", NULL },
    { "HashLiteral", NULL, "Lfreemarker.core.HashLiteral;", 0x11, "Lfreemarker.core.ParseException;", NULL },
    { "StringOutput", NULL, "Lfreemarker.core.DollarVariable;", 0x11, "Lfreemarker.core.ParseException;", NULL },
    { "NumericalOutput", NULL, "Lfreemarker.core.NumericalOutput;", 0x11, "Lfreemarker.core.ParseException;", NULL },
    { "If", NULL, "Lfreemarker.core.TemplateElement;", 0x11, "Lfreemarker.core.ParseException;", NULL },
    { "Attempt", NULL, "Lfreemarker.core.AttemptBlock;", 0x11, "Lfreemarker.core.ParseException;", NULL },
    { "Recover", NULL, "Lfreemarker.core.RecoveryBlock;", 0x11, "Lfreemarker.core.ParseException;", NULL },
    { "List", NULL, "Lfreemarker.core.TemplateElement;", 0x11, "Lfreemarker.core.ParseException;", NULL },
    { "ElseOfList", NULL, "Lfreemarker.core.ElseOfList;", 0x11, "Lfreemarker.core.ParseException;", NULL },
    { "ForEach", NULL, "Lfreemarker.core.IteratorBlock;", 0x11, "Lfreemarker.core.ParseException;", NULL },
    { "Items", NULL, "Lfreemarker.core.Items;", 0x11, "Lfreemarker.core.ParseException;", NULL },
    { "Sep", NULL, "Lfreemarker.core.Sep;", 0x11, "Lfreemarker.core.ParseException;", NULL },
    { "Visit", NULL, "Lfreemarker.core.VisitNode;", 0x11, "Lfreemarker.core.ParseException;", NULL },
    { "Recurse", NULL, "Lfreemarker.core.RecurseNode;", 0x11, "Lfreemarker.core.ParseException;", NULL },
    { "FallBack", NULL, "Lfreemarker.core.FallbackInstruction;", 0x11, "Lfreemarker.core.ParseException;", NULL },
    { "Break", NULL, "Lfreemarker.core.BreakInstruction;", 0x11, "Lfreemarker.core.ParseException;", NULL },
    { "Return", NULL, "Lfreemarker.core.ReturnInstruction;", 0x11, "Lfreemarker.core.ParseException;", NULL },
    { "Stop", NULL, "Lfreemarker.core.StopInstruction;", 0x11, "Lfreemarker.core.ParseException;", NULL },
    { "Nested", NULL, "Lfreemarker.core.TemplateElement;", 0x11, "Lfreemarker.core.ParseException;", NULL },
    { "Flush", NULL, "Lfreemarker.core.TemplateElement;", 0x11, "Lfreemarker.core.ParseException;", NULL },
    { "Trim", NULL, "Lfreemarker.core.TemplateElement;", 0x11, "Lfreemarker.core.ParseException;", NULL },
    { "Assign", NULL, "Lfreemarker.core.TemplateElement;", 0x11, "Lfreemarker.core.ParseException;", NULL },
    { "Include", NULL, "Lfreemarker.core.Include;", 0x11, "Lfreemarker.core.ParseException;", NULL },
    { "Import", NULL, "Lfreemarker.core.LibraryLoad;", 0x11, "Lfreemarker.core.ParseException;", NULL },
    { "Macro", NULL, "Lfreemarker.core.Macro;", 0x11, "Lfreemarker.core.ParseException;", NULL },
    { "Compress", NULL, "Lfreemarker.core.CompressedBlock;", 0x11, "Lfreemarker.core.ParseException;", NULL },
    { "UnifiedMacroTransform", NULL, "Lfreemarker.core.TemplateElement;", 0x11, "Lfreemarker.core.ParseException;", NULL },
    { "Call", NULL, "Lfreemarker.core.TemplateElement;", 0x11, "Lfreemarker.core.ParseException;", NULL },
    { "NamedArgs", NULL, "Ljava.util.HashMap;", 0x11, "Lfreemarker.core.ParseException;", NULL },
    { "PositionalArgs", NULL, "Ljava.util.ArrayList;", 0x11, "Lfreemarker.core.ParseException;", NULL },
    { "Comment", NULL, "Lfreemarker.core.Comment;", 0x11, "Lfreemarker.core.ParseException;", NULL },
    { "NoParse", NULL, "Lfreemarker.core.TextBlock;", 0x11, "Lfreemarker.core.ParseException;", NULL },
    { "Transform", NULL, "Lfreemarker.core.TransformBlock;", 0x11, "Lfreemarker.core.ParseException;", NULL },
    { "Switch", NULL, "Lfreemarker.core.SwitchBlock;", 0x11, "Lfreemarker.core.ParseException;", NULL },
    { "Case", NULL, "Lfreemarker.core.Case;", 0x11, "Lfreemarker.core.ParseException;", NULL },
    { "Escape", NULL, "Lfreemarker.core.EscapeBlock;", 0x11, "Lfreemarker.core.ParseException;", NULL },
    { "NoEscape", NULL, "Lfreemarker.core.NoEscapeBlock;", 0x11, "Lfreemarker.core.ParseException;", NULL },
    { "LooseDirectiveEnd", NULL, "Lfreemarker.core.Token;", 0x11, "Lfreemarker.core.ParseException;", NULL },
    { "Setting", NULL, "Lfreemarker.core.PropertySetting;", 0x11, "Lfreemarker.core.ParseException;", NULL },
    { "FreemarkerDirective", NULL, "Lfreemarker.core.TemplateElement;", 0x11, "Lfreemarker.core.ParseException;", NULL },
    { "PCData", NULL, "Lfreemarker.core.TextBlock;", 0x11, "Lfreemarker.core.ParseException;", NULL },
    { "UnparsedContentWithFreemarkerCoreToken:withJavaLangStringBuffer:", "UnparsedContent", "Lfreemarker.core.Token;", 0x11, "Lfreemarker.core.ParseException;", NULL },
    { "MixedContent", NULL, "Lfreemarker.core.MixedContent;", 0x11, "Lfreemarker.core.ParseException;", NULL },
    { "FreeMarkerText", NULL, "Lfreemarker.core.TemplateElement;", 0x11, "Lfreemarker.core.ParseException;", NULL },
    { "OptionalBlock", NULL, "Lfreemarker.core.TemplateElement;", 0x11, "Lfreemarker.core.ParseException;", NULL },
    { "HeaderElement", NULL, "V", 0x11, "Lfreemarker.core.ParseException;", NULL },
    { "ParamList", NULL, "Ljava.util.Map;", 0x11, "Lfreemarker.core.ParseException;", NULL },
    { "Root", NULL, "Lfreemarker.core.TemplateElement;", 0x11, "Lfreemarker.core.ParseException;", NULL },
    { "jj_2_1WithInt:", "jj_2_1", "Z", 0x2, NULL, NULL },
    { "jj_2_2WithInt:", "jj_2_2", "Z", 0x2, NULL, NULL },
    { "jj_2_3WithInt:", "jj_2_3", "Z", 0x2, NULL, NULL },
    { "jj_2_4WithInt:", "jj_2_4", "Z", 0x2, NULL, NULL },
    { "jj_2_5WithInt:", "jj_2_5", "Z", 0x2, NULL, NULL },
    { "jj_2_6WithInt:", "jj_2_6", "Z", 0x2, NULL, NULL },
    { "jj_2_7WithInt:", "jj_2_7", "Z", 0x2, NULL, NULL },
    { "jj_2_8WithInt:", "jj_2_8", "Z", 0x2, NULL, NULL },
    { "jj_2_9WithInt:", "jj_2_9", "Z", 0x2, NULL, NULL },
    { "jj_2_10WithInt:", "jj_2_10", "Z", 0x2, NULL, NULL },
    { "jj_2_11WithInt:", "jj_2_11", "Z", 0x2, NULL, NULL },
    { "jj_2_12WithInt:", "jj_2_12", "Z", 0x2, NULL, NULL },
    { "jj_2_13WithInt:", "jj_2_13", "Z", 0x2, NULL, NULL },
    { "jj_2_14WithInt:", "jj_2_14", "Z", 0x2, NULL, NULL },
    { "jj_2_15WithInt:", "jj_2_15", "Z", 0x2, NULL, NULL },
    { "jj_2_16WithInt:", "jj_2_16", "Z", 0x2, NULL, NULL },
    { "jj_2_17WithInt:", "jj_2_17", "Z", 0x2, NULL, NULL },
    { "jj_2_18WithInt:", "jj_2_18", "Z", 0x2, NULL, NULL },
    { "jj_2_19WithInt:", "jj_2_19", "Z", 0x2, NULL, NULL },
    { "jj_2_20WithInt:", "jj_2_20", "Z", 0x2, NULL, NULL },
    { "jj_2_21WithInt:", "jj_2_21", "Z", 0x2, NULL, NULL },
    { "jj_2_22WithInt:", "jj_2_22", "Z", 0x2, NULL, NULL },
    { "jj_2_23WithInt:", "jj_2_23", "Z", 0x2, NULL, NULL },
    { "jj_2_24WithInt:", "jj_2_24", "Z", 0x2, NULL, NULL },
    { "jj_2_25WithInt:", "jj_2_25", "Z", 0x2, NULL, NULL },
    { "jj_2_26WithInt:", "jj_2_26", "Z", 0x2, NULL, NULL },
    { "jj_2_27WithInt:", "jj_2_27", "Z", 0x2, NULL, NULL },
    { "jj_2_28WithInt:", "jj_2_28", "Z", 0x2, NULL, NULL },
    { "jj_2_29WithInt:", "jj_2_29", "Z", 0x2, NULL, NULL },
    { "jj_2_30WithInt:", "jj_2_30", "Z", 0x2, NULL, NULL },
    { "jj_2_31WithInt:", "jj_2_31", "Z", 0x2, NULL, NULL },
    { "jj_2_32WithInt:", "jj_2_32", "Z", 0x2, NULL, NULL },
    { "jj_2_33WithInt:", "jj_2_33", "Z", 0x2, NULL, NULL },
    { "jj_2_34WithInt:", "jj_2_34", "Z", 0x2, NULL, NULL },
    { "jj_2_35WithInt:", "jj_2_35", "Z", 0x2, NULL, NULL },
    { "jj_2_36WithInt:", "jj_2_36", "Z", 0x2, NULL, NULL },
    { "jj_2_37WithInt:", "jj_2_37", "Z", 0x2, NULL, NULL },
    { "jj_2_38WithInt:", "jj_2_38", "Z", 0x2, NULL, NULL },
    { "jj_2_39WithInt:", "jj_2_39", "Z", 0x2, NULL, NULL },
    { "jj_2_40WithInt:", "jj_2_40", "Z", 0x2, NULL, NULL },
    { "jj_2_41WithInt:", "jj_2_41", "Z", 0x2, NULL, NULL },
    { "jj_2_42WithInt:", "jj_2_42", "Z", 0x2, NULL, NULL },
    { "jj_2_43WithInt:", "jj_2_43", "Z", 0x2, NULL, NULL },
    { "jj_2_44WithInt:", "jj_2_44", "Z", 0x2, NULL, NULL },
    { "jj_2_45WithInt:", "jj_2_45", "Z", 0x2, NULL, NULL },
    { "jj_2_46WithInt:", "jj_2_46", "Z", 0x2, NULL, NULL },
    { "jj_2_47WithInt:", "jj_2_47", "Z", 0x2, NULL, NULL },
    { "jj_2_48WithInt:", "jj_2_48", "Z", 0x2, NULL, NULL },
    { "jj_2_49WithInt:", "jj_2_49", "Z", 0x2, NULL, NULL },
    { "jj_2_50WithInt:", "jj_2_50", "Z", 0x2, NULL, NULL },
    { "jj_2_51WithInt:", "jj_2_51", "Z", 0x2, NULL, NULL },
    { "jj_2_52WithInt:", "jj_2_52", "Z", 0x2, NULL, NULL },
    { "jj_2_53WithInt:", "jj_2_53", "Z", 0x2, NULL, NULL },
    { "jj_2_54WithInt:", "jj_2_54", "Z", 0x2, NULL, NULL },
    { "jj_2_55WithInt:", "jj_2_55", "Z", 0x2, NULL, NULL },
    { "jj_2_56WithInt:", "jj_2_56", "Z", 0x2, NULL, NULL },
    { "jj_2_57WithInt:", "jj_2_57", "Z", 0x2, NULL, NULL },
    { "jj_2_58WithInt:", "jj_2_58", "Z", 0x2, NULL, NULL },
    { "jj_2_59WithInt:", "jj_2_59", "Z", 0x2, NULL, NULL },
    { "jj_2_60WithInt:", "jj_2_60", "Z", 0x2, NULL, NULL },
    { "jj_2_61WithInt:", "jj_2_61", "Z", 0x2, NULL, NULL },
    { "jj_2_62WithInt:", "jj_2_62", "Z", 0x2, NULL, NULL },
    { "jj_2_63WithInt:", "jj_2_63", "Z", 0x2, NULL, NULL },
    { "jj_2_64WithInt:", "jj_2_64", "Z", 0x2, NULL, NULL },
    { "jj_2_65WithInt:", "jj_2_65", "Z", 0x2, NULL, NULL },
    { "jj_2_66WithInt:", "jj_2_66", "Z", 0x2, NULL, NULL },
    { "jj_2_67WithInt:", "jj_2_67", "Z", 0x2, NULL, NULL },
    { "jj_2_68WithInt:", "jj_2_68", "Z", 0x2, NULL, NULL },
    { "jj_2_69WithInt:", "jj_2_69", "Z", 0x2, NULL, NULL },
    { "jj_2_70WithInt:", "jj_2_70", "Z", 0x2, NULL, NULL },
    { "jj_2_71WithInt:", "jj_2_71", "Z", 0x2, NULL, NULL },
    { "jj_2_72WithInt:", "jj_2_72", "Z", 0x2, NULL, NULL },
    { "jj_2_73WithInt:", "jj_2_73", "Z", 0x2, NULL, NULL },
    { "jj_2_74WithInt:", "jj_2_74", "Z", 0x2, NULL, NULL },
    { "jj_2_75WithInt:", "jj_2_75", "Z", 0x2, NULL, NULL },
    { "jj_2_76WithInt:", "jj_2_76", "Z", 0x2, NULL, NULL },
    { "jj_2_77WithInt:", "jj_2_77", "Z", 0x2, NULL, NULL },
    { "jj_2_78WithInt:", "jj_2_78", "Z", 0x2, NULL, NULL },
    { "jj_2_79WithInt:", "jj_2_79", "Z", 0x2, NULL, NULL },
    { "jj_2_80WithInt:", "jj_2_80", "Z", 0x2, NULL, NULL },
    { "jj_2_81WithInt:", "jj_2_81", "Z", 0x2, NULL, NULL },
    { "jj_2_82WithInt:", "jj_2_82", "Z", 0x2, NULL, NULL },
    { "jj_2_83WithInt:", "jj_2_83", "Z", 0x2, NULL, NULL },
    { "jj_2_84WithInt:", "jj_2_84", "Z", 0x2, NULL, NULL },
    { "jj_2_85WithInt:", "jj_2_85", "Z", 0x2, NULL, NULL },
    { "jj_2_86WithInt:", "jj_2_86", "Z", 0x2, NULL, NULL },
    { "jj_2_87WithInt:", "jj_2_87", "Z", 0x2, NULL, NULL },
    { "jj_2_88WithInt:", "jj_2_88", "Z", 0x2, NULL, NULL },
    { "jj_2_89WithInt:", "jj_2_89", "Z", 0x2, NULL, NULL },
    { "jj_2_90WithInt:", "jj_2_90", "Z", 0x2, NULL, NULL },
    { "jj_2_91WithInt:", "jj_2_91", "Z", 0x2, NULL, NULL },
    { "jj_2_92WithInt:", "jj_2_92", "Z", 0x2, NULL, NULL },
    { "jj_2_93WithInt:", "jj_2_93", "Z", 0x2, NULL, NULL },
    { "jj_2_94WithInt:", "jj_2_94", "Z", 0x2, NULL, NULL },
    { "jj_2_95WithInt:", "jj_2_95", "Z", 0x2, NULL, NULL },
    { "jj_2_96WithInt:", "jj_2_96", "Z", 0x2, NULL, NULL },
    { "jj_2_97WithInt:", "jj_2_97", "Z", 0x2, NULL, NULL },
    { "jj_2_98WithInt:", "jj_2_98", "Z", 0x2, NULL, NULL },
    { "jj_2_99WithInt:", "jj_2_99", "Z", 0x2, NULL, NULL },
    { "jj_2_100WithInt:", "jj_2_100", "Z", 0x2, NULL, NULL },
    { "jj_2_101WithInt:", "jj_2_101", "Z", 0x2, NULL, NULL },
    { "jj_2_102WithInt:", "jj_2_102", "Z", 0x2, NULL, NULL },
    { "jj_2_103WithInt:", "jj_2_103", "Z", 0x2, NULL, NULL },
    { "jj_2_104WithInt:", "jj_2_104", "Z", 0x2, NULL, NULL },
    { "jj_2_105WithInt:", "jj_2_105", "Z", 0x2, NULL, NULL },
    { "jj_2_106WithInt:", "jj_2_106", "Z", 0x2, NULL, NULL },
    { "jj_2_107WithInt:", "jj_2_107", "Z", 0x2, NULL, NULL },
    { "jj_2_108WithInt:", "jj_2_108", "Z", 0x2, NULL, NULL },
    { "jj_2_109WithInt:", "jj_2_109", "Z", 0x2, NULL, NULL },
    { "jj_2_110WithInt:", "jj_2_110", "Z", 0x2, NULL, NULL },
    { "jj_2_111WithInt:", "jj_2_111", "Z", 0x2, NULL, NULL },
    { "jj_2_112WithInt:", "jj_2_112", "Z", 0x2, NULL, NULL },
    { "jj_2_113WithInt:", "jj_2_113", "Z", 0x2, NULL, NULL },
    { "jj_2_114WithInt:", "jj_2_114", "Z", 0x2, NULL, NULL },
    { "jj_2_115WithInt:", "jj_2_115", "Z", 0x2, NULL, NULL },
    { "jj_2_116WithInt:", "jj_2_116", "Z", 0x2, NULL, NULL },
    { "jj_2_117WithInt:", "jj_2_117", "Z", 0x2, NULL, NULL },
    { "jj_2_118WithInt:", "jj_2_118", "Z", 0x2, NULL, NULL },
    { "jj_2_119WithInt:", "jj_2_119", "Z", 0x2, NULL, NULL },
    { "jj_2_120WithInt:", "jj_2_120", "Z", 0x2, NULL, NULL },
    { "jj_2_121WithInt:", "jj_2_121", "Z", 0x2, NULL, NULL },
    { "jj_2_122WithInt:", "jj_2_122", "Z", 0x2, NULL, NULL },
    { "jj_2_123WithInt:", "jj_2_123", "Z", 0x2, NULL, NULL },
    { "jj_2_124WithInt:", "jj_2_124", "Z", 0x2, NULL, NULL },
    { "jj_2_125WithInt:", "jj_2_125", "Z", 0x2, NULL, NULL },
    { "jj_2_126WithInt:", "jj_2_126", "Z", 0x2, NULL, NULL },
    { "jj_2_127WithInt:", "jj_2_127", "Z", 0x2, NULL, NULL },
    { "jj_2_128WithInt:", "jj_2_128", "Z", 0x2, NULL, NULL },
    { "jj_2_129WithInt:", "jj_2_129", "Z", 0x2, NULL, NULL },
    { "jj_2_130WithInt:", "jj_2_130", "Z", 0x2, NULL, NULL },
    { "jj_2_131WithInt:", "jj_2_131", "Z", 0x2, NULL, NULL },
    { "jj_2_132WithInt:", "jj_2_132", "Z", 0x2, NULL, NULL },
    { "jj_2_133WithInt:", "jj_2_133", "Z", 0x2, NULL, NULL },
    { "jj_2_134WithInt:", "jj_2_134", "Z", 0x2, NULL, NULL },
    { "jj_2_135WithInt:", "jj_2_135", "Z", 0x2, NULL, NULL },
    { "jj_2_136WithInt:", "jj_2_136", "Z", 0x2, NULL, NULL },
    { "jj_2_137WithInt:", "jj_2_137", "Z", 0x2, NULL, NULL },
    { "jj_2_138WithInt:", "jj_2_138", "Z", 0x2, NULL, NULL },
    { "jj_2_139WithInt:", "jj_2_139", "Z", 0x2, NULL, NULL },
    { "jj_2_140WithInt:", "jj_2_140", "Z", 0x2, NULL, NULL },
    { "jj_2_141WithInt:", "jj_2_141", "Z", 0x2, NULL, NULL },
    { "jj_2_142WithInt:", "jj_2_142", "Z", 0x2, NULL, NULL },
    { "jj_2_143WithInt:", "jj_2_143", "Z", 0x2, NULL, NULL },
    { "jj_2_144WithInt:", "jj_2_144", "Z", 0x2, NULL, NULL },
    { "jj_2_145WithInt:", "jj_2_145", "Z", 0x2, NULL, NULL },
    { "jj_2_146WithInt:", "jj_2_146", "Z", 0x2, NULL, NULL },
    { "jj_2_147WithInt:", "jj_2_147", "Z", 0x2, NULL, NULL },
    { "jj_2_148WithInt:", "jj_2_148", "Z", 0x2, NULL, NULL },
    { "jj_2_149WithInt:", "jj_2_149", "Z", 0x2, NULL, NULL },
    { "jj_2_150WithInt:", "jj_2_150", "Z", 0x2, NULL, NULL },
    { "jj_2_151WithInt:", "jj_2_151", "Z", 0x2, NULL, NULL },
    { "jj_2_152WithInt:", "jj_2_152", "Z", 0x2, NULL, NULL },
    { "jj_2_153WithInt:", "jj_2_153", "Z", 0x2, NULL, NULL },
    { "jj_2_154WithInt:", "jj_2_154", "Z", 0x2, NULL, NULL },
    { "jj_2_155WithInt:", "jj_2_155", "Z", 0x2, NULL, NULL },
    { "jj_2_156WithInt:", "jj_2_156", "Z", 0x2, NULL, NULL },
    { "jj_2_157WithInt:", "jj_2_157", "Z", 0x2, NULL, NULL },
    { "jj_2_158WithInt:", "jj_2_158", "Z", 0x2, NULL, NULL },
    { "jj_2_159WithInt:", "jj_2_159", "Z", 0x2, NULL, NULL },
    { "jj_2_160WithInt:", "jj_2_160", "Z", 0x2, NULL, NULL },
    { "jj_2_161WithInt:", "jj_2_161", "Z", 0x2, NULL, NULL },
    { "jj_2_162WithInt:", "jj_2_162", "Z", 0x2, NULL, NULL },
    { "jj_2_163WithInt:", "jj_2_163", "Z", 0x2, NULL, NULL },
    { "jj_2_164WithInt:", "jj_2_164", "Z", 0x2, NULL, NULL },
    { "jj_2_165WithInt:", "jj_2_165", "Z", 0x2, NULL, NULL },
    { "jj_2_166WithInt:", "jj_2_166", "Z", 0x2, NULL, NULL },
    { "jj_2_167WithInt:", "jj_2_167", "Z", 0x2, NULL, NULL },
    { "jj_2_168WithInt:", "jj_2_168", "Z", 0x2, NULL, NULL },
    { "jj_2_169WithInt:", "jj_2_169", "Z", 0x2, NULL, NULL },
    { "jj_2_170WithInt:", "jj_2_170", "Z", 0x2, NULL, NULL },
    { "jj_2_171WithInt:", "jj_2_171", "Z", 0x2, NULL, NULL },
    { "jj_2_172WithInt:", "jj_2_172", "Z", 0x2, NULL, NULL },
    { "jj_2_173WithInt:", "jj_2_173", "Z", 0x2, NULL, NULL },
    { "jj_2_174WithInt:", "jj_2_174", "Z", 0x2, NULL, NULL },
    { "jj_2_175WithInt:", "jj_2_175", "Z", 0x2, NULL, NULL },
    { "jj_2_176WithInt:", "jj_2_176", "Z", 0x2, NULL, NULL },
    { "jj_2_177WithInt:", "jj_2_177", "Z", 0x2, NULL, NULL },
    { "jj_2_178WithInt:", "jj_2_178", "Z", 0x2, NULL, NULL },
    { "jj_2_179WithInt:", "jj_2_179", "Z", 0x2, NULL, NULL },
    { "jj_2_180WithInt:", "jj_2_180", "Z", 0x2, NULL, NULL },
    { "jj_2_181WithInt:", "jj_2_181", "Z", 0x2, NULL, NULL },
    { "jj_2_182WithInt:", "jj_2_182", "Z", 0x2, NULL, NULL },
    { "jj_2_183WithInt:", "jj_2_183", "Z", 0x2, NULL, NULL },
    { "jj_2_184WithInt:", "jj_2_184", "Z", 0x2, NULL, NULL },
    { "jj_2_185WithInt:", "jj_2_185", "Z", 0x2, NULL, NULL },
    { "jj_2_186WithInt:", "jj_2_186", "Z", 0x2, NULL, NULL },
    { "jj_2_187WithInt:", "jj_2_187", "Z", 0x2, NULL, NULL },
    { "jj_2_188WithInt:", "jj_2_188", "Z", 0x2, NULL, NULL },
    { "jj_2_189WithInt:", "jj_2_189", "Z", 0x2, NULL, NULL },
    { "jj_2_190WithInt:", "jj_2_190", "Z", 0x2, NULL, NULL },
    { "jj_2_191WithInt:", "jj_2_191", "Z", 0x2, NULL, NULL },
    { "jj_2_192WithInt:", "jj_2_192", "Z", 0x2, NULL, NULL },
    { "jj_2_193WithInt:", "jj_2_193", "Z", 0x2, NULL, NULL },
    { "jj_2_194WithInt:", "jj_2_194", "Z", 0x2, NULL, NULL },
    { "jj_2_195WithInt:", "jj_2_195", "Z", 0x2, NULL, NULL },
    { "jj_2_196WithInt:", "jj_2_196", "Z", 0x2, NULL, NULL },
    { "jj_2_197WithInt:", "jj_2_197", "Z", 0x2, NULL, NULL },
    { "jj_2_198WithInt:", "jj_2_198", "Z", 0x2, NULL, NULL },
    { "jj_2_199WithInt:", "jj_2_199", "Z", 0x2, NULL, NULL },
    { "jj_2_200WithInt:", "jj_2_200", "Z", 0x2, NULL, NULL },
    { "jj_2_201WithInt:", "jj_2_201", "Z", 0x2, NULL, NULL },
    { "jj_2_202WithInt:", "jj_2_202", "Z", 0x2, NULL, NULL },
    { "jj_2_203WithInt:", "jj_2_203", "Z", 0x2, NULL, NULL },
    { "jj_2_204WithInt:", "jj_2_204", "Z", 0x2, NULL, NULL },
    { "jj_2_205WithInt:", "jj_2_205", "Z", 0x2, NULL, NULL },
    { "jj_2_206WithInt:", "jj_2_206", "Z", 0x2, NULL, NULL },
    { "jj_2_207WithInt:", "jj_2_207", "Z", 0x2, NULL, NULL },
    { "jj_2_208WithInt:", "jj_2_208", "Z", 0x2, NULL, NULL },
    { "jj_2_209WithInt:", "jj_2_209", "Z", 0x2, NULL, NULL },
    { "jj_2_210WithInt:", "jj_2_210", "Z", 0x2, NULL, NULL },
    { "jj_2_211WithInt:", "jj_2_211", "Z", 0x2, NULL, NULL },
    { "jj_2_212WithInt:", "jj_2_212", "Z", 0x2, NULL, NULL },
    { "jj_2_213WithInt:", "jj_2_213", "Z", 0x2, NULL, NULL },
    { "jj_2_214WithInt:", "jj_2_214", "Z", 0x2, NULL, NULL },
    { "jj_2_215WithInt:", "jj_2_215", "Z", 0x2, NULL, NULL },
    { "jj_2_216WithInt:", "jj_2_216", "Z", 0x2, NULL, NULL },
    { "jj_2_217WithInt:", "jj_2_217", "Z", 0x2, NULL, NULL },
    { "jj_2_218WithInt:", "jj_2_218", "Z", 0x2, NULL, NULL },
    { "jj_2_219WithInt:", "jj_2_219", "Z", 0x2, NULL, NULL },
    { "jj_2_220WithInt:", "jj_2_220", "Z", 0x2, NULL, NULL },
    { "jj_2_221WithInt:", "jj_2_221", "Z", 0x2, NULL, NULL },
    { "jj_2_222WithInt:", "jj_2_222", "Z", 0x2, NULL, NULL },
    { "jj_2_223WithInt:", "jj_2_223", "Z", 0x2, NULL, NULL },
    { "jj_2_224WithInt:", "jj_2_224", "Z", 0x2, NULL, NULL },
    { "jj_2_225WithInt:", "jj_2_225", "Z", 0x2, NULL, NULL },
    { "jj_3_21", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_151", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_20", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_19", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_145", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_149", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_144", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_82", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_150", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_94", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_51", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_84", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_143", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_58", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_90", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_18", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_17", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_16", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_225", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_81", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_80", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_85", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_57", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_78", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_34", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_223", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_15", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_79", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_14", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_142", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_224", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_31", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_141", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_78", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_13", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_140", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_32", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_50", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_12", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_11", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_10", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_93", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_139", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_138", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_137", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_136", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_135", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_9", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_29", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_134", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_133", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_83", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_8", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_56", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_7", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_6", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_5", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_4", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_3", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_2", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_1", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_220", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_33", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_77", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_81", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_222", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_55", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_221", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_42", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_219", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_80", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_87", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_44", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_75", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_74", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_73", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_132", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_217", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_72", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_216", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_131", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_209", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_215", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_54", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_71", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_218", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_76", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_128", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_24", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_119", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_127", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_126", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_208", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_70", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_118", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_69", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_214", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_213", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_212", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_26", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_125", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_211", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_100", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_117", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_130", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_207", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_97", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_107", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_116", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_121", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_68", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_124", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_106", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_206", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_210", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_67", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_89", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_25", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_115", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_120", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_123", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_105", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_114", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_38", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_122", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_204", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_205", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_203", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_104", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_202", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_113", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_91", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_112", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_109", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_48", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_79", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_103", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_37", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_108", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_102", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_111", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_201", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_200", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_65", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_199", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_62", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_198", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_61", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_197", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_60", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_196", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_59", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_110", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_195", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_58", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_194", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_57", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_193", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_56", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_64", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_192", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_55", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_191", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_54", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_190", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_189", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_129", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_66", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_188", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_63", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_187", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_186", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_185", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_36", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_184", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_183", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_182", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_101", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_181", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_180", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_100", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_99", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_179", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_178", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_177", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_53", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_176", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_175", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_174", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_173", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_106", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_82", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_98", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_97", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_96", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_95", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_71", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_66", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_39", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_70", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_172", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_171", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_46", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_51", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_41", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_94", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_43", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_93", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_53", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_72", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_74", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_52", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_40", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_92", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_91", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_50", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_49", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_69", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_48", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_47", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_46", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_45", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_73", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_92", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_170", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_169", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_90", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_89", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_168", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_49", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_68", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_30", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_44", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_43", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_167", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_88", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_67", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_166", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_28", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_65", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_42", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_77", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_41", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_23", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_86", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_85", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_165", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_164", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_27", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_88", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_163", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_87", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_162", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_76", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_40", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_64", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_96", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_84", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_86", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_63", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_75", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_39", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_161", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_160", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_99", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_62", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_95", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_158", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_157", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_36", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_60", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_159", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_47", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_35", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_35", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_34", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_38", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_156", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_37", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_105", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_153", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_103", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_59", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_154", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_155", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_32", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_31", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_30", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_33", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_29", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_61", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_28", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_27", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_104", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_52", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_101", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_45", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_26", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_25", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_24", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_23", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_102", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_98", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_83", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_148", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_22", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_147", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_146", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_152", NULL, "Z", 0x2, NULL, NULL },
    { "jj_la1_init_0", NULL, "V", 0xa, NULL, NULL },
    { "jj_la1_init_1", NULL, "V", 0xa, NULL, NULL },
    { "jj_la1_init_2", NULL, "V", 0xa, NULL, NULL },
    { "jj_la1_init_3", NULL, "V", 0xa, NULL, NULL },
    { "jj_la1_init_4", NULL, "V", 0xa, NULL, NULL },
    { "initWithJavaIoInputStream:", "FMParser", NULL, 0x1, NULL, NULL },
    { "initWithJavaIoInputStream:withNSString:", "FMParser", NULL, 0x1, NULL, NULL },
    { "ReInitWithJavaIoInputStream:", "ReInit", "V", 0x1, NULL, NULL },
    { "ReInitWithJavaIoInputStream:withNSString:", "ReInit", "V", 0x1, NULL, NULL },
    { "initWithJavaIoReader:", "FMParser", NULL, 0x1, NULL, NULL },
    { "ReInitWithJavaIoReader:", "ReInit", "V", 0x1, NULL, NULL },
    { "initWithFreemarkerCoreFMParserTokenManager:", "FMParser", NULL, 0x1, NULL, NULL },
    { "ReInitWithFreemarkerCoreFMParserTokenManager:", "ReInit", "V", 0x1, NULL, NULL },
    { "jj_consume_tokenWithInt:", "jj_consume_token", "Lfreemarker.core.Token;", 0x2, "Lfreemarker.core.ParseException;", NULL },
    { "jj_scan_tokenWithInt:", "jj_scan_token", "Z", 0x2, NULL, NULL },
    { "getNextToken", NULL, "Lfreemarker.core.Token;", 0x11, NULL, NULL },
    { "getTokenWithInt:", "getToken", "Lfreemarker.core.Token;", 0x11, NULL, NULL },
    { "jj_ntk_f", NULL, "I", 0x2, NULL, NULL },
    { "jj_add_error_tokenWithInt:withInt:", "jj_add_error_token", "V", 0x2, NULL, NULL },
    { "generateParseException", NULL, "Lfreemarker.core.ParseException;", 0x1, NULL, NULL },
    { "enable_tracing", NULL, "V", 0x11, NULL, NULL },
    { "disable_tracing", NULL, "V", 0x11, NULL, NULL },
    { "jj_rescan_token", NULL, "V", 0x2, NULL, NULL },
    { "jj_saveWithInt:withInt:", "jj_save", "V", 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "ITERATOR_BLOCK_KIND_LIST_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = FreemarkerCoreFMParser_ITERATOR_BLOCK_KIND_LIST },
    { "ITERATOR_BLOCK_KIND_FOREACH_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = FreemarkerCoreFMParser_ITERATOR_BLOCK_KIND_FOREACH },
    { "ITERATOR_BLOCK_KIND_ITEMS_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = FreemarkerCoreFMParser_ITERATOR_BLOCK_KIND_ITEMS },
    { "ITERATOR_BLOCK_KIND_USER_DIRECTIVE_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = FreemarkerCoreFMParser_ITERATOR_BLOCK_KIND_USER_DIRECTIVE },
    { "template__", "template", 0x2, "Lfreemarker.template.Template;", NULL, NULL,  },
    { "stripWhitespace_", NULL, 0x2, "Z", NULL, NULL,  },
    { "stripText_", NULL, 0x2, "Z", NULL, NULL,  },
    { "iteratorBlockContexts_", NULL, 0x2, "Ljava.util.List;", NULL, NULL,  },
    { "breakableDirectiveNesting_", NULL, 0x2, "I", NULL, NULL,  },
    { "parentListAndForeachFlags_", NULL, 0x2, "I", NULL, NULL,  },
    { "inMacro_", NULL, 0x2, "Z", NULL, NULL,  },
    { "inFunction_", NULL, 0x2, "Z", NULL, NULL,  },
    { "escapes_", NULL, 0x2, "Ljava.util.LinkedList;", NULL, NULL,  },
    { "mixedContentNesting_", NULL, 0x2, "I", NULL, NULL,  },
    { "incompatibleImprovements_", NULL, 0x2, "I", NULL, NULL,  },
    { "token_source_", NULL, 0x1, "Lfreemarker.core.FMParserTokenManager;", NULL, NULL,  },
    { "jj_input_stream_", NULL, 0x0, "Lfreemarker.core.SimpleCharStream;", NULL, NULL,  },
    { "token_", NULL, 0x1, "Lfreemarker.core.Token;", NULL, NULL,  },
    { "jj_nt_", NULL, 0x1, "Lfreemarker.core.Token;", NULL, NULL,  },
    { "jj_ntk_", NULL, 0x2, "I", NULL, NULL,  },
    { "jj_scanpos_", NULL, 0x2, "Lfreemarker.core.Token;", NULL, NULL,  },
    { "jj_lastpos_", NULL, 0x2, "Lfreemarker.core.Token;", NULL, NULL,  },
    { "jj_la_", NULL, 0x2, "I", NULL, NULL,  },
    { "jj_gen_", NULL, 0x2, "I", NULL, NULL,  },
    { "jj_la1_", NULL, 0x12, "[I", NULL, NULL,  },
    { "jj_la1_0_", NULL, 0xa, "[I", &FreemarkerCoreFMParser_jj_la1_0_, NULL,  },
    { "jj_la1_1_", NULL, 0xa, "[I", &FreemarkerCoreFMParser_jj_la1_1_, NULL,  },
    { "jj_la1_2_", NULL, 0xa, "[I", &FreemarkerCoreFMParser_jj_la1_2_, NULL,  },
    { "jj_la1_3_", NULL, 0xa, "[I", &FreemarkerCoreFMParser_jj_la1_3_, NULL,  },
    { "jj_la1_4_", NULL, 0xa, "[I", &FreemarkerCoreFMParser_jj_la1_4_, NULL,  },
    { "jj_2_rtns_", NULL, 0x12, "[Lfreemarker.core.FMParser$JJCalls;", NULL, NULL,  },
    { "jj_rescan_", NULL, 0x2, "Z", NULL, NULL,  },
    { "jj_gc_", NULL, 0x2, "I", NULL, NULL,  },
    { "jj_ls_", NULL, 0x12, "Lfreemarker.core.FMParser$LookaheadSuccess;", NULL, NULL,  },
    { "jj_expentries_", NULL, 0x2, "Ljava.util.List;", NULL, "Ljava/util/List<L[I;>;",  },
    { "jj_expentry_", NULL, 0x2, "[I", NULL, NULL,  },
    { "jj_kind_", NULL, 0x2, "I", NULL, NULL,  },
    { "jj_lasttokens_", NULL, 0x2, "[I", NULL, NULL,  },
    { "jj_endpos_", NULL, 0x2, "I", NULL, NULL,  },
  };
  static const char *inner_classes[] = {"Lfreemarker.core.FMParser$ParserIteratorBlockContext;", "Lfreemarker.core.FMParser$LookaheadSuccess;", "Lfreemarker.core.FMParser$JJCalls;"};
  static const J2ObjcClassInfo _FreemarkerCoreFMParser = { 2, "FMParser", "freemarker.core", NULL, 0x1, 657, methods, 39, fields, 0, NULL, 3, inner_classes, NULL, NULL };
  return &_FreemarkerCoreFMParser;
}

@end


#line 54
FreemarkerCoreFMParser *FreemarkerCoreFMParser_createExpressionParserWithNSString_(NSString *s) {
  FreemarkerCoreFMParser_initialize();
  
#line 55
  FreemarkerCoreSimpleCharStream *scs = new_FreemarkerCoreSimpleCharStream_initWithJavaIoReader_withInt_withInt_withInt_(new_JavaIoStringReader_initWithNSString_(s), 1, 1, ((jint) [((NSString *) nil_chk(s)) length]));
  FreemarkerCoreFMParserTokenManager *token_source = new_FreemarkerCoreFMParserTokenManager_initWithFreemarkerCoreSimpleCharStream_(scs);
  [token_source SwitchToWithInt:FreemarkerCoreFMParserConstants_FM_EXPRESSION];
  FreemarkerCoreFMParser *parser = new_FreemarkerCoreFMParser_initWithFreemarkerCoreFMParserTokenManager_(token_source);
  [token_source setParserWithFreemarkerCoreFMParser:parser];
  return parser;
}


#line 75
void FreemarkerCoreFMParser_initWithFreemarkerTemplateTemplate_withJavaIoReader_withBoolean_withBoolean_(FreemarkerCoreFMParser *self, FreemarkerTemplateTemplate *template_, JavaIoReader *reader, jboolean strictEscapeSyntax, jboolean stripWhitespace) {
  (void) FreemarkerCoreFMParser_initWithJavaIoReader_(self, reader);
  [self setTemplateWithFreemarkerTemplateTemplate:template_];
  [((FreemarkerCoreFMParserTokenManager *) nil_chk(self->token_source_)) setParserWithFreemarkerCoreFMParser:self];
  self->token_source_->strictEscapeSyntax_ = strictEscapeSyntax;
  self->stripWhitespace_ = stripWhitespace;
}


#line 75
FreemarkerCoreFMParser *new_FreemarkerCoreFMParser_initWithFreemarkerTemplateTemplate_withJavaIoReader_withBoolean_withBoolean_(FreemarkerTemplateTemplate *template_, JavaIoReader *reader, jboolean strictEscapeSyntax, jboolean stripWhitespace) {
  FreemarkerCoreFMParser *self = [FreemarkerCoreFMParser alloc];
  FreemarkerCoreFMParser_initWithFreemarkerTemplateTemplate_withJavaIoReader_withBoolean_withBoolean_(self, template_, reader, strictEscapeSyntax, stripWhitespace);
  return self;
}


#line 86
void FreemarkerCoreFMParser_initWithFreemarkerTemplateTemplate_withJavaIoReader_withBoolean_withBoolean_withInt_(FreemarkerCoreFMParser *self, FreemarkerTemplateTemplate *template_, JavaIoReader *reader, jboolean strictEscapeSyntax, jboolean stripWhitespace, jint tagSyntax) {
  (void) FreemarkerCoreFMParser_initWithFreemarkerTemplateTemplate_withJavaIoReader_withBoolean_withBoolean_withInt_withInt_(self, template_, reader, strictEscapeSyntax, stripWhitespace, tagSyntax, FreemarkerTemplateConfiguration_get_PARSED_DEFAULT_INCOMPATIBLE_ENHANCEMENTS_());
}


#line 86
FreemarkerCoreFMParser *new_FreemarkerCoreFMParser_initWithFreemarkerTemplateTemplate_withJavaIoReader_withBoolean_withBoolean_withInt_(FreemarkerTemplateTemplate *template_, JavaIoReader *reader, jboolean strictEscapeSyntax, jboolean stripWhitespace, jint tagSyntax) {
  FreemarkerCoreFMParser *self = [FreemarkerCoreFMParser alloc];
  FreemarkerCoreFMParser_initWithFreemarkerTemplateTemplate_withJavaIoReader_withBoolean_withBoolean_withInt_(self, template_, reader, strictEscapeSyntax, stripWhitespace, tagSyntax);
  return self;
}


#line 94
void FreemarkerCoreFMParser_initWithFreemarkerTemplateTemplate_withJavaIoReader_withBoolean_withBoolean_withInt_withInt_(FreemarkerCoreFMParser *self, FreemarkerTemplateTemplate *template_, JavaIoReader *reader, jboolean strictEscapeSyntax, jboolean stripWhitespace, jint tagSyntax, jint incompatibleImprovements) {
  (void) FreemarkerCoreFMParser_initWithFreemarkerTemplateTemplate_withJavaIoReader_withBoolean_withBoolean_withInt_withInt_withInt_(self,
#line 96
  template_, reader, strictEscapeSyntax, stripWhitespace,
#line 97
  tagSyntax, FreemarkerTemplateConfiguration_AUTO_DETECT_NAMING_CONVENTION, incompatibleImprovements);
}


#line 94
FreemarkerCoreFMParser *new_FreemarkerCoreFMParser_initWithFreemarkerTemplateTemplate_withJavaIoReader_withBoolean_withBoolean_withInt_withInt_(FreemarkerTemplateTemplate *template_, JavaIoReader *reader, jboolean strictEscapeSyntax, jboolean stripWhitespace, jint tagSyntax, jint incompatibleImprovements) {
  FreemarkerCoreFMParser *self = [FreemarkerCoreFMParser alloc];
  FreemarkerCoreFMParser_initWithFreemarkerTemplateTemplate_withJavaIoReader_withBoolean_withBoolean_withInt_withInt_(self, template_, reader, strictEscapeSyntax, stripWhitespace, tagSyntax, incompatibleImprovements);
  return self;
}


#line 103
void FreemarkerCoreFMParser_initWithFreemarkerTemplateTemplate_withJavaIoReader_withBoolean_withBoolean_withInt_withInt_withInt_(FreemarkerCoreFMParser *self, FreemarkerTemplateTemplate *template_, JavaIoReader *reader, jboolean strictEscapeSyntax, jboolean stripWhitespace, jint tagSyntax, jint namingConvention, jint incompatibleImprovements) {
  (void) FreemarkerCoreFMParser_initWithFreemarkerTemplateTemplate_withJavaIoReader_withBoolean_withBoolean_(self,
#line 105
  template_, reader, strictEscapeSyntax, stripWhitespace);
  
#line 107
  switch (tagSyntax) {
    case FreemarkerTemplateConfiguration_AUTO_DETECT_TAG_SYNTAX:
    ((FreemarkerCoreFMParserTokenManager *) nil_chk(self->token_source_))->autodetectTagSyntax_ = YES;
    break;
    case FreemarkerTemplateConfiguration_ANGLE_BRACKET_TAG_SYNTAX:
    ((FreemarkerCoreFMParserTokenManager *) nil_chk(self->token_source_))->squBracTagSyntax_ = NO;
    break;
    case FreemarkerTemplateConfiguration_SQUARE_BRACKET_TAG_SYNTAX:
    ((FreemarkerCoreFMParserTokenManager *) nil_chk(self->token_source_))->squBracTagSyntax_ = YES;
    break;
    default:
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Illegal argument for tagSyntax");
  }
  
#line 121
  switch (namingConvention) {
    case FreemarkerTemplateConfiguration_AUTO_DETECT_NAMING_CONVENTION:
    case FreemarkerTemplateConfiguration_CAMEL_CASE_NAMING_CONVENTION:
    case FreemarkerTemplateConfiguration_LEGACY_NAMING_CONVENTION:
    ((FreemarkerCoreFMParserTokenManager *) nil_chk(self->token_source_))->initialNamingConvention_ = namingConvention;
    self->token_source_->namingConvention_ = namingConvention;
    break;
    default:
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Illegal argument for namingConvention");
  }
  
#line 132
  ((FreemarkerCoreFMParserTokenManager *) nil_chk(self->token_source_))->incompatibleImprovements_ = incompatibleImprovements;
  self->incompatibleImprovements_ = incompatibleImprovements;
}


#line 103
FreemarkerCoreFMParser *new_FreemarkerCoreFMParser_initWithFreemarkerTemplateTemplate_withJavaIoReader_withBoolean_withBoolean_withInt_withInt_withInt_(FreemarkerTemplateTemplate *template_, JavaIoReader *reader, jboolean strictEscapeSyntax, jboolean stripWhitespace, jint tagSyntax, jint namingConvention, jint incompatibleImprovements) {
  FreemarkerCoreFMParser *self = [FreemarkerCoreFMParser alloc];
  FreemarkerCoreFMParser_initWithFreemarkerTemplateTemplate_withJavaIoReader_withBoolean_withBoolean_withInt_withInt_withInt_(self, template_, reader, strictEscapeSyntax, stripWhitespace, tagSyntax, namingConvention, incompatibleImprovements);
  return self;
}


#line 139
void FreemarkerCoreFMParser_initWithNSString_(FreemarkerCoreFMParser *self, NSString *template_) {
  (void) FreemarkerCoreFMParser_initWithFreemarkerTemplateTemplate_withJavaIoReader_withBoolean_withBoolean_(self, nil, new_JavaIoStringReader_initWithNSString_(template_), YES, YES);
}


#line 139
FreemarkerCoreFMParser *new_FreemarkerCoreFMParser_initWithNSString_(NSString *template_) {
  FreemarkerCoreFMParser *self = [FreemarkerCoreFMParser alloc];
  FreemarkerCoreFMParser_initWithNSString_(self, template_);
  return self;
}


#line 174
void FreemarkerCoreFMParser_notStringLiteralWithFreemarkerCoreExpression_withNSString_(FreemarkerCoreFMParser *self, FreemarkerCoreExpression *exp, NSString *expected) {
  if ([exp isKindOfClass:[FreemarkerCoreStringLiteral class]]) {
    @throw new_FreemarkerCoreParseException_initWithNSString_withId_(JreStrcat("$@$$", @"Found string literal: ",
#line 177
    exp, @". Expecting: ", expected),
#line 178
    exp);
  }
}


#line 185
void FreemarkerCoreFMParser_notNumberLiteralWithFreemarkerCoreExpression_withNSString_(FreemarkerCoreFMParser *self, FreemarkerCoreExpression *exp, NSString *expected) {
  if ([exp isKindOfClass:[FreemarkerCoreNumberLiteral class]]) {
    @throw new_FreemarkerCoreParseException_initWithNSString_withId_(JreStrcat("$$$$", @"Found number literal: ",
#line 188
    [((FreemarkerCoreExpression *) nil_chk(exp)) getCanonicalForm], @". Expecting ", expected),
#line 189
    exp);
  }
}


#line 196
void FreemarkerCoreFMParser_notBooleanLiteralWithFreemarkerCoreExpression_withNSString_(FreemarkerCoreFMParser *self, FreemarkerCoreExpression *exp, NSString *expected) {
  if ([exp isKindOfClass:[FreemarkerCoreBooleanLiteral class]]) {
    @throw new_FreemarkerCoreParseException_initWithNSString_withId_(JreStrcat("$$$$", @"Found: ", [((FreemarkerCoreExpression *) nil_chk(exp)) getCanonicalForm], @". Expecting ", expected), exp);
  }
}


#line 205
void FreemarkerCoreFMParser_notHashLiteralWithFreemarkerCoreExpression_withNSString_(FreemarkerCoreFMParser *self, FreemarkerCoreExpression *exp, NSString *expected) {
  if ([exp isKindOfClass:[FreemarkerCoreHashLiteral class]]) {
    @throw new_FreemarkerCoreParseException_initWithNSString_withId_(JreStrcat("$$$$", @"Found hash literal: ",
#line 208
    [((FreemarkerCoreExpression *) nil_chk(exp)) getCanonicalForm], @". Expecting ", expected),
#line 209
    exp);
  }
}


#line 216
void FreemarkerCoreFMParser_notListLiteralWithFreemarkerCoreExpression_withNSString_(FreemarkerCoreFMParser *self, FreemarkerCoreExpression *exp, NSString *expected) {
  
#line 219
  if ([exp isKindOfClass:[FreemarkerCoreListLiteral class]]) {
    @throw new_FreemarkerCoreParseException_initWithNSString_withId_(JreStrcat("$$$$", @"Found list literal: ",
#line 221
    [((FreemarkerCoreExpression *) nil_chk(exp)) getCanonicalForm], @". Expecting ", expected),
#line 222
    exp);
  }
}


#line 229
void FreemarkerCoreFMParser_numberLiteralOnlyWithFreemarkerCoreExpression_(FreemarkerCoreFMParser *self, FreemarkerCoreExpression *exp) {
  FreemarkerCoreFMParser_notStringLiteralWithFreemarkerCoreExpression_withNSString_(self, exp, @"number");
  FreemarkerCoreFMParser_notListLiteralWithFreemarkerCoreExpression_withNSString_(self, exp, @"number");
  FreemarkerCoreFMParser_notHashLiteralWithFreemarkerCoreExpression_withNSString_(self, exp, @"number");
  FreemarkerCoreFMParser_notBooleanLiteralWithFreemarkerCoreExpression_withNSString_(self, exp, @"number");
}


#line 239
void FreemarkerCoreFMParser_stringLiteralOnlyWithFreemarkerCoreExpression_(FreemarkerCoreFMParser *self, FreemarkerCoreExpression *exp) {
  FreemarkerCoreFMParser_notNumberLiteralWithFreemarkerCoreExpression_withNSString_(self, exp, @"string");
  FreemarkerCoreFMParser_notListLiteralWithFreemarkerCoreExpression_withNSString_(self, exp, @"string");
  FreemarkerCoreFMParser_notHashLiteralWithFreemarkerCoreExpression_withNSString_(self, exp, @"string");
  FreemarkerCoreFMParser_notBooleanLiteralWithFreemarkerCoreExpression_withNSString_(self, exp, @"string");
}


#line 249
void FreemarkerCoreFMParser_booleanLiteralOnlyWithFreemarkerCoreExpression_(FreemarkerCoreFMParser *self, FreemarkerCoreExpression *exp) {
  FreemarkerCoreFMParser_notStringLiteralWithFreemarkerCoreExpression_withNSString_(self, exp, @"boolean (true/false)");
  FreemarkerCoreFMParser_notListLiteralWithFreemarkerCoreExpression_withNSString_(self, exp, @"boolean (true/false)");
  FreemarkerCoreFMParser_notHashLiteralWithFreemarkerCoreExpression_withNSString_(self, exp, @"boolean (true/false)");
  FreemarkerCoreFMParser_notNumberLiteralWithFreemarkerCoreExpression_withNSString_(self, exp, @"boolean (true/false)");
}

FreemarkerCoreExpression *FreemarkerCoreFMParser_escapedExpressionWithFreemarkerCoreExpression_(FreemarkerCoreFMParser *self, FreemarkerCoreExpression *exp) {
  if (![((JavaUtilLinkedList *) nil_chk(self->escapes_)) isEmpty]) {
    return [((FreemarkerCoreEscapeBlock *) nil_chk(((FreemarkerCoreEscapeBlock *) check_class_cast([self->escapes_ getFirst], [FreemarkerCoreEscapeBlock class])))) doEscapeWithFreemarkerCoreExpression:exp];
  }
  else {
    
#line 260
    return exp;
  }
}


#line 264
jboolean FreemarkerCoreFMParser_getBooleanWithFreemarkerCoreExpression_(FreemarkerCoreFMParser *self, FreemarkerCoreExpression *exp) {
  id<FreemarkerTemplateTemplateModel> tm = nil;
  @try {
    tm = [((FreemarkerCoreExpression *) nil_chk(exp)) evalWithFreemarkerCoreEnvironment:nil];
  }
  @catch (
#line 268
  JavaLangException *e) {
    @throw new_FreemarkerCoreParseException_initWithNSString_withId_withId_(JreStrcat("$$$", [((JavaLangException *) nil_chk(e)) getMessage], @"\nCould not evaluate expression: ",
#line 271
    [((FreemarkerCoreExpression *) nil_chk(exp)) getCanonicalForm]),
#line 272
    exp,
#line 273
    e);
  }
  if ([FreemarkerTemplateTemplateBooleanModel_class_() isInstance:tm]) {
    @try {
      return [((id<FreemarkerTemplateTemplateBooleanModel>) nil_chk(((id<FreemarkerTemplateTemplateBooleanModel>) check_protocol_cast(tm, @protocol(FreemarkerTemplateTemplateBooleanModel))))) getAsBoolean];
    }
    @catch (
#line 278
    FreemarkerTemplateTemplateModelException *tme) {
    }
  }
  if ([FreemarkerTemplateTemplateScalarModel_class_() isInstance:tm]) {
    @try {
      return FreemarkerTemplateUtilityStringUtil_getYesNoWithNSString_([((id<FreemarkerTemplateTemplateScalarModel>) nil_chk(((id<FreemarkerTemplateTemplateScalarModel>) check_protocol_cast(tm, @protocol(FreemarkerTemplateTemplateScalarModel))))) getAsString]);
    }
    @catch (
#line 284
    JavaLangException *e) {
      @throw new_FreemarkerCoreParseException_initWithNSString_withId_(JreStrcat("$$$", [((JavaLangException *) nil_chk(e)) getMessage], @"\nExpecting boolean (true/false), found: ",
#line 286
      [((FreemarkerCoreExpression *) nil_chk(exp)) getCanonicalForm]),
#line 287
      exp);
    }
  }
  @throw new_FreemarkerCoreParseException_initWithNSString_withId_(@"Expecting boolean (true/false) parameter", exp);
}


#line 293
FreemarkerCoreFMParser_ParserIteratorBlockContext *FreemarkerCoreFMParser_pushIteratorBlockContext(FreemarkerCoreFMParser *self) {
  if (self->iteratorBlockContexts_ == nil) {
    self->iteratorBlockContexts_ = new_JavaUtilArrayList_initWithInt_(4);
  }
  FreemarkerCoreFMParser_ParserIteratorBlockContext *newCtx = new_FreemarkerCoreFMParser_ParserIteratorBlockContext_init();
  [((id<JavaUtilList>) nil_chk(self->iteratorBlockContexts_)) addWithId:newCtx];
  return newCtx;
}

void FreemarkerCoreFMParser_popIteratorBlockContext(FreemarkerCoreFMParser *self) {
  (void) [self->iteratorBlockContexts_ removeWithInt:[((id<JavaUtilList>) nil_chk(self->iteratorBlockContexts_)) size] - 1];
}

FreemarkerCoreFMParser_ParserIteratorBlockContext *FreemarkerCoreFMParser_peekIteratorBlockContext(FreemarkerCoreFMParser *self) {
  jint size = self->iteratorBlockContexts_ != nil ? [self->iteratorBlockContexts_ size] : 0;
  return size != 0 ? (FreemarkerCoreFMParser_ParserIteratorBlockContext *) check_class_cast([((id<JavaUtilList>) nil_chk(self->iteratorBlockContexts_)) getWithInt:size - 1], [FreemarkerCoreFMParser_ParserIteratorBlockContext class]) : nil;
}

void FreemarkerCoreFMParser_checkLoopVariableBuiltInLHOWithNSString_withFreemarkerCoreExpression_withFreemarkerCoreToken_(FreemarkerCoreFMParser *self, NSString *loopVarName, FreemarkerCoreExpression *lhoExp, FreemarkerCoreToken *biName) {
  
#line 313
  jint size = self->iteratorBlockContexts_ != nil ? [self->iteratorBlockContexts_ size] : 0;
  for (jint i = size - 1; i >= 0; i--) {
    FreemarkerCoreFMParser_ParserIteratorBlockContext *ctx = (FreemarkerCoreFMParser_ParserIteratorBlockContext *) check_class_cast([((id<JavaUtilList>) nil_chk(self->iteratorBlockContexts_)) getWithInt:i], [FreemarkerCoreFMParser_ParserIteratorBlockContext class]);
    if ([((NSString *) nil_chk(loopVarName)) isEqual:((FreemarkerCoreFMParser_ParserIteratorBlockContext *) nil_chk(ctx))->loopVarName_]) {
      if (ctx->kind_ == FreemarkerCoreFMParser_ITERATOR_BLOCK_KIND_USER_DIRECTIVE) {
        @throw new_FreemarkerCoreParseException_initWithNSString_withId_(JreStrcat("$$$$", @"The left hand operand of ?", ((FreemarkerCoreToken *) nil_chk(
#line 319
        biName))->image_, @" can't be the loop variable of an user defined directive: ",
#line 321
        loopVarName),
#line 322
        lhoExp);
      }
      return;
    }
  }
  @throw new_FreemarkerCoreParseException_initWithNSString_withId_(JreStrcat("$$$$", @"The left hand operand of ?", ((FreemarkerCoreToken *) nil_chk(
#line 328
  biName))->image_, @" must be a loop variable, but there's no loop variable in scope with this name: ",
#line 329
  loopVarName),
#line 330
  lhoExp);
}


#line 333
NSString *FreemarkerCoreFMParser_forEachDirectiveSymbol(FreemarkerCoreFMParser *self) {
  
#line 335
  return ((FreemarkerCoreFMParserTokenManager *) nil_chk(self->token_source_))->namingConvention_ == FreemarkerTemplateConfiguration_CAMEL_CASE_NAMING_CONVENTION ? @"#forEach" : @"#foreach";
}


#line 347
FreemarkerCoreExpression *FreemarkerCoreFMParser_Expression(FreemarkerCoreFMParser *self) {
  
#line 347
  FreemarkerCoreExpression *exp;
  exp = FreemarkerCoreFMParser_OrExpression(self);
  {
    
#line 349
    if (![@"" isEqual:nil]) return exp;
  }
  
#line 350
  @throw new_JavaLangError_initWithNSString_(@"Missing return statement in function");
}


#line 358
FreemarkerCoreExpression *FreemarkerCoreFMParser_PrimaryExpression(FreemarkerCoreFMParser *self) {
  
#line 358
  FreemarkerCoreExpression *exp;
  if (FreemarkerCoreFMParser_jj_2_1WithInt_(self, 2)) {
    exp = FreemarkerCoreFMParser_NumberLiteral(self);
  }
  else
#line 361
  if (FreemarkerCoreFMParser_jj_2_2WithInt_(self, 2)) {
    exp = FreemarkerCoreFMParser_HashLiteral(self);
  }
  else
#line 363
  if (FreemarkerCoreFMParser_jj_2_3WithInt_(self, 2)) {
    exp = FreemarkerCoreFMParser_StringLiteralWithBoolean_(self, YES);
  }
  else
#line 365
  if (FreemarkerCoreFMParser_jj_2_4WithInt_(self, 2)) {
    exp = FreemarkerCoreFMParser_BooleanLiteral(self);
  }
  else
#line 367
  if (FreemarkerCoreFMParser_jj_2_5WithInt_(self, 2)) {
    exp = FreemarkerCoreFMParser_ListLiteral(self);
  }
  else
#line 369
  if (FreemarkerCoreFMParser_jj_2_6WithInt_(self, 2)) {
    exp = FreemarkerCoreFMParser_Identifier(self);
  }
  else
#line 371
  if (FreemarkerCoreFMParser_jj_2_7WithInt_(self, 2)) {
    exp = FreemarkerCoreFMParser_Parenthesis(self);
  }
  else
#line 373
  if (FreemarkerCoreFMParser_jj_2_8WithInt_(self, 2)) {
    exp = FreemarkerCoreFMParser_BuiltinVariable(self);
  }
  else {
    
#line 376
    (void) FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, -1);
    @throw new_FreemarkerCoreParseException_init();
  }
  
#line 380
  while (YES) {
    if (FreemarkerCoreFMParser_jj_2_9WithInt_(self, 2147483647)) {
      ;
    }
    else {
      
#line 384
      goto break_label_1;
    }
    exp = FreemarkerCoreFMParser_AddSubExpressionWithFreemarkerCoreExpression_(self, exp);
  }
  break_label_1: ;
  {
    
#line 388
    if (![@"" isEqual:nil]) return exp;
  }
  
#line 389
  @throw new_JavaLangError_initWithNSString_(@"Missing return statement in function");
}


#line 392
FreemarkerCoreExpression *FreemarkerCoreFMParser_Parenthesis(FreemarkerCoreFMParser *self) {
  
#line 392
  FreemarkerCoreExpression *exp, *result;
  FreemarkerCoreToken *start, *end;
  start = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_OPEN_PAREN);
  exp = FreemarkerCoreFMParser_Expression(self);
  end = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_CLOSE_PAREN);
  result = new_FreemarkerCoreParentheticalExpression_initWithFreemarkerCoreExpression_(exp);
  [result setLocationWithFreemarkerTemplateTemplate:self->template__ withFreemarkerCoreToken:start withFreemarkerCoreToken:end];
  {
    
#line 399
    if (![@"" isEqual:nil]) return result;
  }
  
#line 400
  @throw new_JavaLangError_initWithNSString_(@"Missing return statement in function");
}


#line 408
FreemarkerCoreExpression *FreemarkerCoreFMParser_UnaryExpression(FreemarkerCoreFMParser *self) {
  
#line 408
  FreemarkerCoreExpression *exp, *result;
  jboolean haveNot = NO;
  FreemarkerCoreToken *t = nil, *start = nil;
  if (FreemarkerCoreFMParser_jj_2_10WithInt_(self, 2)) {
    result = FreemarkerCoreFMParser_UnaryPlusMinusExpression(self);
  }
  else
#line 413
  if (FreemarkerCoreFMParser_jj_2_11WithInt_(self, 2)) {
    result = FreemarkerCoreFMParser_NotExpression(self);
  }
  else
#line 415
  if (FreemarkerCoreFMParser_jj_2_12WithInt_(self, 2)) {
    result = FreemarkerCoreFMParser_PrimaryExpression(self);
  }
  else {
    
#line 418
    (void) FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, -1);
    @throw new_FreemarkerCoreParseException_init();
  }
  {
    
#line 421
    if (![@"" isEqual:nil]) return result;
  }
  
#line 422
  @throw new_JavaLangError_initWithNSString_(@"Missing return statement in function");
}


#line 425
FreemarkerCoreExpression *FreemarkerCoreFMParser_NotExpression(FreemarkerCoreFMParser *self) {
  
#line 425
  FreemarkerCoreToken *t;
  FreemarkerCoreExpression *exp, *result = nil;
  JavaUtilArrayList *nots = new_JavaUtilArrayList_init();
  
#line 429
  while (YES) {
    t = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_EXCLAM);
    [nots addWithId:t];
    if (FreemarkerCoreFMParser_jj_2_13WithInt_(self, 2)) {
      ;
    }
    else {
      
#line 435
      goto break_label_2;
    }
  }
  break_label_2: ;
  
#line 438
  exp = FreemarkerCoreFMParser_PrimaryExpression(self);
  for (jint i = 0; i < [nots size]; i++) {
    result = new_FreemarkerCoreNotExpression_initWithFreemarkerCoreExpression_(exp);
    FreemarkerCoreToken *tok = (FreemarkerCoreToken *) check_class_cast([nots getWithInt:[nots size] - i - 1], [FreemarkerCoreToken class]);
    [result setLocationWithFreemarkerTemplateTemplate:self->template__ withFreemarkerCoreToken:tok withFreemarkerCoreTemplateObject:exp];
    exp = result;
  }
  {
    
#line 445
    if (![@"" isEqual:nil]) return result;
  }
  
#line 446
  @throw new_JavaLangError_initWithNSString_(@"Missing return statement in function");
}


#line 449
FreemarkerCoreExpression *FreemarkerCoreFMParser_UnaryPlusMinusExpression(FreemarkerCoreFMParser *self) {
  
#line 449
  FreemarkerCoreExpression *exp, *result;
  jboolean isMinus = NO;
  FreemarkerCoreToken *t;
  if (FreemarkerCoreFMParser_jj_2_14WithInt_(self, 2)) {
    t = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_PLUS);
  }
  else
#line 454
  if (FreemarkerCoreFMParser_jj_2_15WithInt_(self, 2)) {
    t = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_MINUS);
    isMinus = YES;
  }
  else {
    
#line 458
    (void) FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, -1);
    @throw new_FreemarkerCoreParseException_init();
  }
  exp = FreemarkerCoreFMParser_PrimaryExpression(self);
  result = new_FreemarkerCoreUnaryPlusMinusExpression_initWithFreemarkerCoreExpression_withBoolean_(exp, isMinus);
  [result setLocationWithFreemarkerTemplateTemplate:self->template__ withFreemarkerCoreToken:t withFreemarkerCoreTemplateObject:exp];
  {
    
#line 464
    if (![@"" isEqual:nil]) return result;
  }
  
#line 465
  @throw new_JavaLangError_initWithNSString_(@"Missing return statement in function");
}


#line 468
FreemarkerCoreExpression *FreemarkerCoreFMParser_AdditiveExpression(FreemarkerCoreFMParser *self) {
  
#line 468
  FreemarkerCoreExpression *lhs, *rhs, *result;
  jboolean plus;
  lhs = FreemarkerCoreFMParser_MultiplicativeExpression(self);
  result = lhs;
  
#line 473
  while (YES) {
    if (FreemarkerCoreFMParser_jj_2_16WithInt_(self, 2147483647)) {
      ;
    }
    else {
      
#line 477
      goto break_label_3;
    }
    if (FreemarkerCoreFMParser_jj_2_17WithInt_(self, 2)) {
      (void) FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_PLUS);
      plus = YES;
    }
    else
#line 482
    if (FreemarkerCoreFMParser_jj_2_18WithInt_(self, 2)) {
      (void) FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_MINUS);
      plus = NO;
    }
    else {
      
#line 486
      (void) FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, -1);
      @throw new_FreemarkerCoreParseException_init();
    }
    rhs = FreemarkerCoreFMParser_MultiplicativeExpression(self);
    if (plus) {
      
#line 493
      result = new_FreemarkerCoreAddConcatExpression_initWithFreemarkerCoreExpression_withFreemarkerCoreExpression_(lhs, rhs);
    }
    else {
      
#line 495
      FreemarkerCoreFMParser_numberLiteralOnlyWithFreemarkerCoreExpression_(self, lhs);
      FreemarkerCoreFMParser_numberLiteralOnlyWithFreemarkerCoreExpression_(self, rhs);
      result = new_FreemarkerCoreArithmeticExpression_initWithFreemarkerCoreExpression_withFreemarkerCoreExpression_withInt_(lhs, rhs, FreemarkerCoreArithmeticExpression_TYPE_SUBSTRACTION);
    }
    [((FreemarkerCoreExpression *) nil_chk(result)) setLocationWithFreemarkerTemplateTemplate:self->template__ withFreemarkerCoreTemplateObject:lhs withFreemarkerCoreTemplateObject:rhs];
    lhs = result;
  }
  break_label_3: ;
  {
    
#line 502
    if (![@"" isEqual:nil]) return result;
  }
  
#line 503
  @throw new_JavaLangError_initWithNSString_(@"Missing return statement in function");
}


#line 510
FreemarkerCoreExpression *FreemarkerCoreFMParser_MultiplicativeExpression(FreemarkerCoreFMParser *self) {
  
#line 510
  FreemarkerCoreExpression *lhs, *rhs, *result;
  jint operation = FreemarkerCoreArithmeticExpression_TYPE_MULTIPLICATION;
  lhs = FreemarkerCoreFMParser_UnaryExpression(self);
  result = lhs;
  
#line 515
  while (YES) {
    if (FreemarkerCoreFMParser_jj_2_19WithInt_(self, 2147483647)) {
      ;
    }
    else {
      
#line 519
      goto break_label_4;
    }
    if (FreemarkerCoreFMParser_jj_2_20WithInt_(self, 2)) {
      (void) FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_TIMES);
      operation = FreemarkerCoreArithmeticExpression_TYPE_MULTIPLICATION;
    }
    else
#line 524
    if (FreemarkerCoreFMParser_jj_2_21WithInt_(self, 2)) {
      (void) FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_DIVIDE);
      operation = FreemarkerCoreArithmeticExpression_TYPE_DIVISION;
    }
    else
#line 527
    if (FreemarkerCoreFMParser_jj_2_22WithInt_(self, 2)) {
      (void) FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_PERCENT);
      operation = FreemarkerCoreArithmeticExpression_TYPE_MODULO;
    }
    else {
      
#line 531
      (void) FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, -1);
      @throw new_FreemarkerCoreParseException_init();
    }
    rhs = FreemarkerCoreFMParser_UnaryExpression(self);
    FreemarkerCoreFMParser_numberLiteralOnlyWithFreemarkerCoreExpression_(self, lhs);
    FreemarkerCoreFMParser_numberLiteralOnlyWithFreemarkerCoreExpression_(self, rhs);
    result = new_FreemarkerCoreArithmeticExpression_initWithFreemarkerCoreExpression_withFreemarkerCoreExpression_withInt_(lhs, rhs, operation);
    [result setLocationWithFreemarkerTemplateTemplate:self->template__ withFreemarkerCoreTemplateObject:lhs withFreemarkerCoreTemplateObject:rhs];
    lhs = result;
  }
  break_label_4: ;
  {
    
#line 541
    if (![@"" isEqual:nil]) return result;
  }
  
#line 542
  @throw new_JavaLangError_initWithNSString_(@"Missing return statement in function");
}


#line 545
FreemarkerCoreExpression *FreemarkerCoreFMParser_EqualityExpression(FreemarkerCoreFMParser *self) {
  
#line 545
  FreemarkerCoreExpression *lhs, *rhs, *result;
  FreemarkerCoreToken *t;
  lhs = FreemarkerCoreFMParser_RelationalExpression(self);
  result = lhs;
  if (FreemarkerCoreFMParser_jj_2_26WithInt_(self, 2147483647)) {
    if (FreemarkerCoreFMParser_jj_2_23WithInt_(self, 2)) {
      t = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_NOT_EQUALS);
    }
    else
#line 552
    if (FreemarkerCoreFMParser_jj_2_24WithInt_(self, 2)) {
      t = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_EQUALS);
    }
    else
#line 554
    if (FreemarkerCoreFMParser_jj_2_25WithInt_(self, 2)) {
      t = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_DOUBLE_EQUALS);
    }
    else {
      
#line 557
      (void) FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, -1);
      @throw new_FreemarkerCoreParseException_init();
    }
    rhs = FreemarkerCoreFMParser_RelationalExpression(self);
    FreemarkerCoreFMParser_notHashLiteralWithFreemarkerCoreExpression_withNSString_(self, lhs, @"scalar");
    FreemarkerCoreFMParser_notHashLiteralWithFreemarkerCoreExpression_withNSString_(self, rhs, @"scalar");
    FreemarkerCoreFMParser_notListLiteralWithFreemarkerCoreExpression_withNSString_(self, lhs, @"scalar");
    FreemarkerCoreFMParser_notListLiteralWithFreemarkerCoreExpression_withNSString_(self, rhs, @"scalar");
    result = new_FreemarkerCoreComparisonExpression_initWithFreemarkerCoreExpression_withFreemarkerCoreExpression_withNSString_(lhs, rhs, ((FreemarkerCoreToken *) nil_chk(t))->image_);
    [result setLocationWithFreemarkerTemplateTemplate:self->template__ withFreemarkerCoreTemplateObject:lhs withFreemarkerCoreTemplateObject:rhs];
  }
  else {
    
#line 568
    ;
  }
  {
    
#line 570
    if (![@"" isEqual:nil]) return result;
  }
  
#line 571
  @throw new_JavaLangError_initWithNSString_(@"Missing return statement in function");
}


#line 574
FreemarkerCoreExpression *FreemarkerCoreFMParser_RelationalExpression(FreemarkerCoreFMParser *self) {
  
#line 574
  FreemarkerCoreExpression *lhs, *rhs, *result;
  FreemarkerCoreToken *t;
  lhs = FreemarkerCoreFMParser_RangeExpression(self);
  result = lhs;
  if (FreemarkerCoreFMParser_jj_2_33WithInt_(self, 2147483647)) {
    if (FreemarkerCoreFMParser_jj_2_27WithInt_(self, 2)) {
      t = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_NATURAL_GTE);
    }
    else
#line 581
    if (FreemarkerCoreFMParser_jj_2_28WithInt_(self, 2)) {
      t = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_ESCAPED_GTE);
    }
    else
#line 583
    if (FreemarkerCoreFMParser_jj_2_29WithInt_(self, 2)) {
      t = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_NATURAL_GT);
    }
    else
#line 585
    if (FreemarkerCoreFMParser_jj_2_30WithInt_(self, 2)) {
      t = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_ESCAPED_GT);
    }
    else
#line 587
    if (FreemarkerCoreFMParser_jj_2_31WithInt_(self, 2)) {
      t = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_LESS_THAN_EQUALS);
    }
    else
#line 589
    if (FreemarkerCoreFMParser_jj_2_32WithInt_(self, 2)) {
      t = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_LESS_THAN);
    }
    else {
      
#line 592
      (void) FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, -1);
      @throw new_FreemarkerCoreParseException_init();
    }
    rhs = FreemarkerCoreFMParser_RangeExpression(self);
    FreemarkerCoreFMParser_notHashLiteralWithFreemarkerCoreExpression_withNSString_(self, lhs, @"scalar");
    FreemarkerCoreFMParser_notHashLiteralWithFreemarkerCoreExpression_withNSString_(self, rhs, @"scalar");
    FreemarkerCoreFMParser_notListLiteralWithFreemarkerCoreExpression_withNSString_(self, lhs, @"scalar");
    FreemarkerCoreFMParser_notListLiteralWithFreemarkerCoreExpression_withNSString_(self, rhs, @"scalar");
    FreemarkerCoreFMParser_notStringLiteralWithFreemarkerCoreExpression_withNSString_(self, lhs, @"number");
    FreemarkerCoreFMParser_notStringLiteralWithFreemarkerCoreExpression_withNSString_(self, rhs, @"number");
    result = new_FreemarkerCoreComparisonExpression_initWithFreemarkerCoreExpression_withFreemarkerCoreExpression_withNSString_(lhs, rhs, ((FreemarkerCoreToken *) nil_chk(t))->image_);
    [result setLocationWithFreemarkerTemplateTemplate:self->template__ withFreemarkerCoreTemplateObject:lhs withFreemarkerCoreTemplateObject:rhs];
  }
  else {
    
#line 605
    ;
  }
  {
    
#line 607
    if (![@"" isEqual:nil]) return result;
  }
  
#line 608
  @throw new_JavaLangError_initWithNSString_(@"Missing return statement in function");
}


#line 611
FreemarkerCoreExpression *FreemarkerCoreFMParser_RangeExpression(FreemarkerCoreFMParser *self) {
  
#line 611
  FreemarkerCoreExpression *lhs, *rhs = nil, *result;
  jint endType;
  FreemarkerCoreToken *dotDot = nil;
  lhs = FreemarkerCoreFMParser_AdditiveExpression(self);
  result = lhs;
  switch ((self->jj_ntk_ == -1) ? FreemarkerCoreFMParser_jj_ntk_f(self) : self->jj_ntk_) {
    case FreemarkerCoreFMParserConstants_DOT_DOT:
    case FreemarkerCoreFMParserConstants_DOT_DOT_LESS:
    case FreemarkerCoreFMParserConstants_DOT_DOT_ASTERISK:
    {
      
#line 620
      if (FreemarkerCoreFMParser_jj_2_37WithInt_(self, 2)) {
        if (FreemarkerCoreFMParser_jj_2_34WithInt_(self, 2)) {
          (void) FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_DOT_DOT_LESS);
          endType = FreemarkerCoreRange_END_EXCLUSIVE;
        }
        else
#line 624
        if (FreemarkerCoreFMParser_jj_2_35WithInt_(self, 2)) {
          (void) FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_DOT_DOT_ASTERISK);
          endType = FreemarkerCoreRange_END_SIZE_LIMITED;
        }
        else {
          
#line 628
          (void) FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, -1);
          @throw new_FreemarkerCoreParseException_init();
        }
        rhs = FreemarkerCoreFMParser_AdditiveExpression(self);
      }
      else
#line 632
      if (FreemarkerCoreFMParser_jj_2_38WithInt_(self, 2)) {
        dotDot = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_DOT_DOT);
        endType = FreemarkerCoreRange_END_UNBOUND;
        if (FreemarkerCoreFMParser_jj_2_36WithInt_(self, 2147483647)) {
          rhs = FreemarkerCoreFMParser_AdditiveExpression(self);
          endType = FreemarkerCoreRange_END_INCLUSIVE;
        }
        else {
          
#line 639
          ;
        }
      }
      else {
        
#line 642
        (void) FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, -1);
        @throw new_FreemarkerCoreParseException_init();
      }
      FreemarkerCoreFMParser_numberLiteralOnlyWithFreemarkerCoreExpression_(self, lhs);
      if (rhs != nil) {
        FreemarkerCoreFMParser_numberLiteralOnlyWithFreemarkerCoreExpression_(self, rhs);
      }
      
#line 650
      FreemarkerCoreRange *range = new_FreemarkerCoreRange_initWithFreemarkerCoreExpression_withFreemarkerCoreExpression_withInt_(lhs, rhs, endType);
      if (rhs != nil) {
        [range setLocationWithFreemarkerTemplateTemplate:self->template__ withFreemarkerCoreTemplateObject:lhs withFreemarkerCoreTemplateObject:rhs];
      }
      else {
        
#line 654
        [range setLocationWithFreemarkerTemplateTemplate:self->template__ withFreemarkerCoreTemplateObject:lhs withFreemarkerCoreToken:dotDot];
      }
      result = range;
      break;
    }
    default:
    *IOSIntArray_GetRef(nil_chk(self->jj_la1_), 0) = self->jj_gen_;
    ;
  }
  {
    
#line 663
    if (![@"" isEqual:nil]) return result;
  }
  
#line 664
  @throw new_JavaLangError_initWithNSString_(@"Missing return statement in function");
}


#line 667
FreemarkerCoreExpression *FreemarkerCoreFMParser_AndExpression(FreemarkerCoreFMParser *self) {
  
#line 667
  FreemarkerCoreExpression *lhs, *rhs, *result;
  lhs = FreemarkerCoreFMParser_EqualityExpression(self);
  result = lhs;
  
#line 671
  while (YES) {
    if (FreemarkerCoreFMParser_jj_2_39WithInt_(self, 2147483647)) {
      ;
    }
    else {
      
#line 675
      goto break_label_5;
    }
    (void) FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_AND);
    rhs = FreemarkerCoreFMParser_EqualityExpression(self);
    FreemarkerCoreFMParser_booleanLiteralOnlyWithFreemarkerCoreExpression_(self, lhs);
    FreemarkerCoreFMParser_booleanLiteralOnlyWithFreemarkerCoreExpression_(self, rhs);
    result = new_FreemarkerCoreAndExpression_initWithFreemarkerCoreExpression_withFreemarkerCoreExpression_(lhs, rhs);
    [result setLocationWithFreemarkerTemplateTemplate:self->template__ withFreemarkerCoreTemplateObject:lhs withFreemarkerCoreTemplateObject:rhs];
    lhs = result;
  }
  break_label_5: ;
  {
    
#line 685
    if (![@"" isEqual:nil]) return result;
  }
  
#line 686
  @throw new_JavaLangError_initWithNSString_(@"Missing return statement in function");
}


#line 689
FreemarkerCoreExpression *FreemarkerCoreFMParser_OrExpression(FreemarkerCoreFMParser *self) {
  
#line 689
  FreemarkerCoreExpression *lhs, *rhs, *result;
  lhs = FreemarkerCoreFMParser_AndExpression(self);
  result = lhs;
  
#line 693
  while (YES) {
    if (FreemarkerCoreFMParser_jj_2_40WithInt_(self, 2147483647)) {
      ;
    }
    else {
      
#line 697
      goto break_label_6;
    }
    (void) FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_OR);
    rhs = FreemarkerCoreFMParser_AndExpression(self);
    FreemarkerCoreFMParser_booleanLiteralOnlyWithFreemarkerCoreExpression_(self, lhs);
    FreemarkerCoreFMParser_booleanLiteralOnlyWithFreemarkerCoreExpression_(self, rhs);
    result = new_FreemarkerCoreOrExpression_initWithFreemarkerCoreExpression_withFreemarkerCoreExpression_(lhs, rhs);
    [result setLocationWithFreemarkerTemplateTemplate:self->template__ withFreemarkerCoreTemplateObject:lhs withFreemarkerCoreTemplateObject:rhs];
    lhs = result;
  }
  break_label_6: ;
  {
    
#line 707
    if (![@"" isEqual:nil]) return result;
  }
  
#line 708
  @throw new_JavaLangError_initWithNSString_(@"Missing return statement in function");
}


#line 711
FreemarkerCoreListLiteral *FreemarkerCoreFMParser_ListLiteral(FreemarkerCoreFMParser *self) {
  
#line 711
  JavaUtilArrayList *values = new_JavaUtilArrayList_init();
  FreemarkerCoreToken *begin, *end;
  begin = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_OPEN_BRACKET);
  values = FreemarkerCoreFMParser_PositionalArgs(self);
  end = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_CLOSE_BRACKET);
  FreemarkerCoreListLiteral *result = new_FreemarkerCoreListLiteral_initWithJavaUtilArrayList_(values);
  [result setLocationWithFreemarkerTemplateTemplate:self->template__ withFreemarkerCoreToken:begin withFreemarkerCoreToken:end];
  {
    
#line 718
    if (![@"" isEqual:nil]) return result;
  }
  
#line 719
  @throw new_JavaLangError_initWithNSString_(@"Missing return statement in function");
}


#line 722
FreemarkerCoreExpression *FreemarkerCoreFMParser_NumberLiteral(FreemarkerCoreFMParser *self) {
  
#line 722
  FreemarkerCoreToken *op = nil, *t;
  if (FreemarkerCoreFMParser_jj_2_41WithInt_(self, 2)) {
    t = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_INTEGER);
  }
  else
#line 725
  if (FreemarkerCoreFMParser_jj_2_42WithInt_(self, 2)) {
    t = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_DECIMAL);
  }
  else {
    
#line 728
    (void) FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, -1);
    @throw new_FreemarkerCoreParseException_init();
  }
  NSString *s = ((FreemarkerCoreToken *) nil_chk(t))->image_;
  FreemarkerCoreExpression *result = new_FreemarkerCoreNumberLiteral_initWithNSNumber_([((FreemarkerCoreArithmeticEngine *) nil_chk([((FreemarkerTemplateTemplate *) nil_chk(self->template__)) getArithmeticEngine])) toNumberWithNSString:s]);
  FreemarkerCoreToken *startToken = (op != nil) ? op : t;
  [result setLocationWithFreemarkerTemplateTemplate:self->template__ withFreemarkerCoreToken:startToken withFreemarkerCoreToken:t];
  {
    
#line 735
    if (![@"" isEqual:nil]) return result;
  }
  
#line 736
  @throw new_JavaLangError_initWithNSString_(@"Missing return statement in function");
}


#line 739
FreemarkerCoreIdentifier *FreemarkerCoreFMParser_Identifier(FreemarkerCoreFMParser *self) {
  
#line 739
  FreemarkerCoreToken *t;
  t = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_ID);
  FreemarkerCoreIdentifier *id_ = new_FreemarkerCoreIdentifier_initWithNSString_(((FreemarkerCoreToken *) nil_chk(t))->image_);
  [id_ setLocationWithFreemarkerTemplateTemplate:self->template__ withFreemarkerCoreToken:t withFreemarkerCoreToken:t];
  {
    
#line 743
    if (![@"" isEqual:nil]) return id_;
  }
  
#line 744
  @throw new_JavaLangError_initWithNSString_(@"Missing return statement in function");
}


#line 747
FreemarkerCoreExpression *FreemarkerCoreFMParser_IdentifierOrStringLiteral(FreemarkerCoreFMParser *self) {
  
#line 747
  FreemarkerCoreExpression *exp;
  if (FreemarkerCoreFMParser_jj_2_43WithInt_(self, 2)) {
    exp = FreemarkerCoreFMParser_Identifier(self);
  }
  else
#line 750
  if (FreemarkerCoreFMParser_jj_2_44WithInt_(self, 2)) {
    exp = FreemarkerCoreFMParser_StringLiteralWithBoolean_(self, NO);
  }
  else {
    
#line 753
    (void) FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, -1);
    @throw new_FreemarkerCoreParseException_init();
  }
  {
    
#line 756
    if (![@"" isEqual:nil]) return exp;
  }
  
#line 757
  @throw new_JavaLangError_initWithNSString_(@"Missing return statement in function");
}


#line 760
FreemarkerCoreBuiltinVariable *FreemarkerCoreFMParser_BuiltinVariable(FreemarkerCoreFMParser *self) {
  
#line 760
  FreemarkerCoreToken *dot, *name;
  dot = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_DOT);
  name = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_ID);
  FreemarkerCoreBuiltinVariable *result = nil;
  [((FreemarkerCoreFMParserTokenManager *) nil_chk(self->token_source_)) checkNamingConventionWithFreemarkerCoreToken:name];
  result = new_FreemarkerCoreBuiltinVariable_initWithFreemarkerCoreToken_withFreemarkerCoreFMParserTokenManager_(name, self->token_source_);
  [result setLocationWithFreemarkerTemplateTemplate:self->template__ withFreemarkerCoreToken:dot withFreemarkerCoreToken:name];
  {
    
#line 767
    if (![@"" isEqual:nil]) return result;
  }
  
#line 768
  @throw new_JavaLangError_initWithNSString_(@"Missing return statement in function");
}


#line 776
FreemarkerCoreExpression *FreemarkerCoreFMParser_AddSubExpressionWithFreemarkerCoreExpression_(FreemarkerCoreFMParser *self, FreemarkerCoreExpression *exp) {
  
#line 776
  FreemarkerCoreExpression *result = nil;
  if (FreemarkerCoreFMParser_jj_2_45WithInt_(self, 2)) {
    result = FreemarkerCoreFMParser_DotVariableWithFreemarkerCoreExpression_(self, exp);
  }
  else
#line 779
  if (FreemarkerCoreFMParser_jj_2_46WithInt_(self, 2)) {
    result = FreemarkerCoreFMParser_DynamicKeyWithFreemarkerCoreExpression_(self, exp);
  }
  else
#line 781
  if (FreemarkerCoreFMParser_jj_2_47WithInt_(self, 2)) {
    result = FreemarkerCoreFMParser_MethodArgsWithFreemarkerCoreExpression_(self, exp);
  }
  else
#line 783
  if (FreemarkerCoreFMParser_jj_2_48WithInt_(self, 2)) {
    result = FreemarkerCoreFMParser_BuiltInWithFreemarkerCoreExpression_(self, exp);
  }
  else
#line 785
  if (FreemarkerCoreFMParser_jj_2_49WithInt_(self, 2)) {
    result = FreemarkerCoreFMParser_DefaultToWithFreemarkerCoreExpression_(self, exp);
  }
  else
#line 787
  if (FreemarkerCoreFMParser_jj_2_50WithInt_(self, 2)) {
    result = FreemarkerCoreFMParser_ExistsWithFreemarkerCoreExpression_(self, exp);
  }
  else {
    
#line 790
    (void) FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, -1);
    @throw new_FreemarkerCoreParseException_init();
  }
  {
    
#line 793
    if (![@"" isEqual:nil]) return result;
  }
  
#line 794
  @throw new_JavaLangError_initWithNSString_(@"Missing return statement in function");
}


#line 797
FreemarkerCoreExpression *FreemarkerCoreFMParser_DefaultToWithFreemarkerCoreExpression_(FreemarkerCoreFMParser *self, FreemarkerCoreExpression *exp) {
  
#line 797
  FreemarkerCoreExpression *rhs = nil;
  FreemarkerCoreToken *t;
  if (FreemarkerCoreFMParser_jj_2_52WithInt_(self, 2)) {
    t = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_TERMINATING_EXCLAM);
  }
  else
#line 801
  if (FreemarkerCoreFMParser_jj_2_53WithInt_(self, 2)) {
    t = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_EXCLAM);
    if (FreemarkerCoreFMParser_jj_2_51WithInt_(self, 2147483647)) {
      rhs = FreemarkerCoreFMParser_Expression(self);
    }
    else {
      
#line 806
      ;
    }
  }
  else {
    
#line 809
    (void) FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, -1);
    @throw new_FreemarkerCoreParseException_init();
  }
  FreemarkerCoreDefaultToExpression *result = new_FreemarkerCoreDefaultToExpression_initWithFreemarkerCoreExpression_withFreemarkerCoreExpression_(exp, rhs);
  if (rhs == nil) {
    [result setLocationWithFreemarkerTemplateTemplate:self->template__ withFreemarkerCoreTemplateObject:exp withFreemarkerCoreToken:t];
  }
  else {
    
#line 816
    [result setLocationWithFreemarkerTemplateTemplate:self->template__ withFreemarkerCoreTemplateObject:exp withFreemarkerCoreTemplateObject:rhs];
  }
  {
    
#line 818
    if (![@"" isEqual:nil]) return result;
  }
  
#line 819
  @throw new_JavaLangError_initWithNSString_(@"Missing return statement in function");
}


#line 822
FreemarkerCoreExpression *FreemarkerCoreFMParser_ExistsWithFreemarkerCoreExpression_(FreemarkerCoreFMParser *self, FreemarkerCoreExpression *exp) {
  
#line 822
  FreemarkerCoreToken *t;
  t = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_EXISTS);
  FreemarkerCoreExistsExpression *result = new_FreemarkerCoreExistsExpression_initWithFreemarkerCoreExpression_(exp);
  [result setLocationWithFreemarkerTemplateTemplate:self->template__ withFreemarkerCoreTemplateObject:exp withFreemarkerCoreToken:t];
  {
    
#line 826
    if (![@"" isEqual:nil]) return result;
  }
  
#line 827
  @throw new_JavaLangError_initWithNSString_(@"Missing return statement in function");
}


#line 830
FreemarkerCoreExpression *FreemarkerCoreFMParser_BuiltInWithFreemarkerCoreExpression_(FreemarkerCoreFMParser *self, FreemarkerCoreExpression *lhoExp) {
  
#line 830
  FreemarkerCoreToken *t = nil;
  FreemarkerCoreBuiltIn *result;
  JavaUtilArrayList *args = nil;
  FreemarkerCoreToken *openParen;
  FreemarkerCoreToken *closeParen;
  (void) FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_BUILT_IN);
  t = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_ID);
  [((FreemarkerCoreFMParserTokenManager *) nil_chk(self->token_source_)) checkNamingConventionWithFreemarkerCoreToken:t];
  result = FreemarkerCoreBuiltIn_newBuiltInWithInt_withFreemarkerCoreExpression_withFreemarkerCoreToken_withFreemarkerCoreFMParserTokenManager_(self->incompatibleImprovements_, lhoExp, t, self->token_source_);
  [((FreemarkerCoreBuiltIn *) nil_chk(result)) setLocationWithFreemarkerTemplateTemplate:self->template__ withFreemarkerCoreTemplateObject:lhoExp withFreemarkerCoreToken:t];
  
#line 841
  if (!([result isKindOfClass:[FreemarkerCoreSpecialBuiltIn class]])) {
    {
      
#line 842
      if (![@"" isEqual:nil]) return result;
    }
  }
  if ([result isKindOfClass:[FreemarkerCoreBuiltInForLoopVariable class]]) {
    if (!([lhoExp isKindOfClass:[FreemarkerCoreIdentifier class]])) {
      {
        
#line 847
        @throw new_FreemarkerCoreParseException_initWithNSString_withId_(JreStrcat("$$$", @"Expression used as the left hand operand of ?", ((FreemarkerCoreToken *) nil_chk(
#line 848
        t))->image_, @" must be a simple loop variable name."),
#line 849
        lhoExp);
      }
    }
    
#line 851
    NSString *loopVarName = [((FreemarkerCoreIdentifier *) nil_chk(((FreemarkerCoreIdentifier *) check_class_cast(lhoExp, [FreemarkerCoreIdentifier class])))) getName];
    FreemarkerCoreFMParser_checkLoopVariableBuiltInLHOWithNSString_withFreemarkerCoreExpression_withFreemarkerCoreToken_(self, loopVarName, lhoExp, t);
    [((FreemarkerCoreBuiltInForLoopVariable *) check_class_cast(result, [FreemarkerCoreBuiltInForLoopVariable class])) bindToLoopVariableWithNSString:loopVarName];
    {
      if (![@"" isEqual:nil]) return result;
    }
  }
  
#line 857
  if ([result isKindOfClass:[FreemarkerCoreBuiltInWithParseTimeParameters class]]) {
    openParen = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_OPEN_PAREN);
    args = FreemarkerCoreFMParser_PositionalArgs(self);
    closeParen = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_CLOSE_PAREN);
    [result setLocationWithFreemarkerTemplateTemplate:self->template__ withFreemarkerCoreTemplateObject:lhoExp withFreemarkerCoreToken:closeParen];
    [((FreemarkerCoreBuiltInWithParseTimeParameters *) check_class_cast(result, [FreemarkerCoreBuiltInWithParseTimeParameters class])) bindToParametersWithJavaUtilList:args withFreemarkerCoreToken:openParen withFreemarkerCoreToken:closeParen];
    {
      
#line 863
      if (![@"" isEqual:nil]) return result;
    }
  }
  else {
    
#line 865
    ;
  }
  {
    @throw new_JavaLangAssertionError_initWithId_(JreStrcat("$$$@", @"Unhandled ", [FreemarkerCoreSpecialBuiltIn_class_() getName], @" subclass: ", [result getClass]));
  }
  
#line 869
  @throw new_JavaLangError_initWithNSString_(@"Missing return statement in function");
}


#line 875
FreemarkerCoreExpression *FreemarkerCoreFMParser_DotVariableWithFreemarkerCoreExpression_(FreemarkerCoreFMParser *self, FreemarkerCoreExpression *exp) {
  
#line 875
  FreemarkerCoreToken *t;
  (void) FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_DOT);
  if (FreemarkerCoreFMParser_jj_2_63WithInt_(self, 2)) {
    t = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_ID);
  }
  else
#line 879
  if (FreemarkerCoreFMParser_jj_2_64WithInt_(self, 2)) {
    t = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_TIMES);
  }
  else
#line 881
  if (FreemarkerCoreFMParser_jj_2_65WithInt_(self, 2)) {
    t = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_DOUBLE_STAR);
  }
  else
#line 883
  if (FreemarkerCoreFMParser_jj_2_66WithInt_(self, 2)) {
    if (FreemarkerCoreFMParser_jj_2_54WithInt_(self, 2)) {
      t = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_LESS_THAN);
    }
    else
#line 886
    if (FreemarkerCoreFMParser_jj_2_55WithInt_(self, 2)) {
      t = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_LESS_THAN_EQUALS);
    }
    else
#line 888
    if (FreemarkerCoreFMParser_jj_2_56WithInt_(self, 2)) {
      t = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_ESCAPED_GT);
    }
    else
#line 890
    if (FreemarkerCoreFMParser_jj_2_57WithInt_(self, 2)) {
      t = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_ESCAPED_GTE);
    }
    else
#line 892
    if (FreemarkerCoreFMParser_jj_2_58WithInt_(self, 2)) {
      t = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_FALSE);
    }
    else
#line 894
    if (FreemarkerCoreFMParser_jj_2_59WithInt_(self, 2)) {
      t = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_TRUE);
    }
    else
#line 896
    if (FreemarkerCoreFMParser_jj_2_60WithInt_(self, 2)) {
      t = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_IN);
    }
    else
#line 898
    if (FreemarkerCoreFMParser_jj_2_61WithInt_(self, 2)) {
      t = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_AS);
    }
    else
#line 900
    if (FreemarkerCoreFMParser_jj_2_62WithInt_(self, 2)) {
      t = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_USING);
    }
    else {
      
#line 903
      (void) FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, -1);
      @throw new_FreemarkerCoreParseException_init();
    }
    if (!JavaLangCharacter_isLetterWithChar_([((NSString *) nil_chk(((FreemarkerCoreToken *) nil_chk(t))->image_)) charAtWithInt:0])) {
      {
        
#line 907
        @throw new_FreemarkerCoreParseException_initWithNSString_withId_withId_(JreStrcat("$$", t->image_, @" is not a valid identifier."), self->template__, t);
      }
    }
  }
  else {
    
#line 910
    (void) FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, -1);
    @throw new_FreemarkerCoreParseException_init();
  }
  FreemarkerCoreFMParser_notListLiteralWithFreemarkerCoreExpression_withNSString_(self, exp, @"hash");
  FreemarkerCoreFMParser_notStringLiteralWithFreemarkerCoreExpression_withNSString_(self, exp, @"hash");
  FreemarkerCoreFMParser_notBooleanLiteralWithFreemarkerCoreExpression_withNSString_(self, exp, @"hash");
  FreemarkerCoreDot *dot = new_FreemarkerCoreDot_initWithFreemarkerCoreExpression_withNSString_(exp, ((FreemarkerCoreToken *) nil_chk(t))->image_);
  [dot setLocationWithFreemarkerTemplateTemplate:self->template__ withFreemarkerCoreTemplateObject:exp withFreemarkerCoreToken:t];
  {
    
#line 918
    if (![@"" isEqual:nil]) return dot;
  }
  
#line 919
  @throw new_JavaLangError_initWithNSString_(@"Missing return statement in function");
}


#line 926
FreemarkerCoreExpression *FreemarkerCoreFMParser_DynamicKeyWithFreemarkerCoreExpression_(FreemarkerCoreFMParser *self, FreemarkerCoreExpression *exp) {
  
#line 926
  FreemarkerCoreExpression *arg;
  FreemarkerCoreToken *t;
  (void) FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_OPEN_BRACKET);
  arg = FreemarkerCoreFMParser_Expression(self);
  t = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_CLOSE_BRACKET);
  FreemarkerCoreFMParser_notBooleanLiteralWithFreemarkerCoreExpression_withNSString_(self, exp, @"list or hash");
  FreemarkerCoreFMParser_notNumberLiteralWithFreemarkerCoreExpression_withNSString_(self, exp, @"list or hash");
  FreemarkerCoreDynamicKeyName *dkn = new_FreemarkerCoreDynamicKeyName_initWithFreemarkerCoreExpression_withFreemarkerCoreExpression_(exp, arg);
  [dkn setLocationWithFreemarkerTemplateTemplate:self->template__ withFreemarkerCoreTemplateObject:exp withFreemarkerCoreToken:t];
  {
    
#line 935
    if (![@"" isEqual:nil]) return dkn;
  }
  
#line 936
  @throw new_JavaLangError_initWithNSString_(@"Missing return statement in function");
}


#line 942
FreemarkerCoreMethodCall *FreemarkerCoreFMParser_MethodArgsWithFreemarkerCoreExpression_(FreemarkerCoreFMParser *self, FreemarkerCoreExpression *exp) {
  
#line 942
  JavaUtilArrayList *args = new_JavaUtilArrayList_init();
  FreemarkerCoreToken *end;
  (void) FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_OPEN_PAREN);
  args = FreemarkerCoreFMParser_PositionalArgs(self);
  end = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_CLOSE_PAREN);
  [((JavaUtilArrayList *) nil_chk(args)) trimToSize];
  FreemarkerCoreMethodCall *result = new_FreemarkerCoreMethodCall_initWithFreemarkerCoreExpression_withJavaUtilArrayList_(exp, args);
  [result setLocationWithFreemarkerTemplateTemplate:self->template__ withFreemarkerCoreTemplateObject:exp withFreemarkerCoreToken:end];
  {
    
#line 950
    if (![@"" isEqual:nil]) return result;
  }
  
#line 951
  @throw new_JavaLangError_initWithNSString_(@"Missing return statement in function");
}


#line 954
FreemarkerCoreStringLiteral *FreemarkerCoreFMParser_StringLiteralWithBoolean_(FreemarkerCoreFMParser *self, jboolean interpolate) {
  
#line 954
  FreemarkerCoreToken *t;
  jboolean raw = NO;
  if (FreemarkerCoreFMParser_jj_2_67WithInt_(self, 2)) {
    t = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_STRING_LITERAL);
  }
  else
#line 958
  if (FreemarkerCoreFMParser_jj_2_68WithInt_(self, 2)) {
    t = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_RAW_STRING);
    raw = YES;
  }
  else {
    
#line 962
    (void) FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, -1);
    @throw new_FreemarkerCoreParseException_init();
  }
  NSString *s = ((FreemarkerCoreToken *) nil_chk(t))->image_;
  
#line 967
  s = [s substring:1 endIndex:((jint) [((NSString *) nil_chk(s)) length]) - 1];
  if (raw) {
    s = [((NSString *) nil_chk(s)) substring:1];
  }
  else
#line 970
  @try {
    s = FreemarkerTemplateUtilityStringUtil_FTLStringLiteralDecWithNSString_(s);
  }
  @catch (
#line 972
  FreemarkerCoreParseException *pe) {
    ((FreemarkerCoreParseException *) nil_chk(pe))->lineNumber_ = t->beginLine_;
    pe->columnNumber_ = t->beginColumn_;
    pe->endLineNumber_ = t->endLine_;
    pe->endColumnNumber_ = t->endColumn_;
    {
      
#line 977
      @throw pe;
    }
  }
  
#line 979
  FreemarkerCoreStringLiteral *result = new_FreemarkerCoreStringLiteral_initWithNSString_(s);
  [result setLocationWithFreemarkerTemplateTemplate:self->template__ withFreemarkerCoreToken:t withFreemarkerCoreToken:t];
  if (interpolate && !raw) {
    
#line 983
    if ([((NSString *) nil_chk(t->image_)) indexOfString:@"${"] >= 0 || [t->image_ indexOfString:@"#{"] >= 0) [result parseValueWithFreemarkerCoreFMParserTokenManager:self->token_source_];
  }
  {
    
#line 985
    if (![@"" isEqual:nil]) return result;
  }
  
#line 986
  @throw new_JavaLangError_initWithNSString_(@"Missing return statement in function");
}


#line 989
FreemarkerCoreExpression *FreemarkerCoreFMParser_BooleanLiteral(FreemarkerCoreFMParser *self) {
  
#line 989
  FreemarkerCoreToken *t;
  FreemarkerCoreExpression *result;
  if (FreemarkerCoreFMParser_jj_2_69WithInt_(self, 2)) {
    t = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_FALSE);
    result = new_FreemarkerCoreBooleanLiteral_initWithBoolean_(NO);
  }
  else
#line 994
  if (FreemarkerCoreFMParser_jj_2_70WithInt_(self, 2)) {
    t = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_TRUE);
    result = new_FreemarkerCoreBooleanLiteral_initWithBoolean_(YES);
  }
  else {
    
#line 998
    (void) FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, -1);
    @throw new_FreemarkerCoreParseException_init();
  }
  [((FreemarkerCoreExpression *) nil_chk(result)) setLocationWithFreemarkerTemplateTemplate:self->template__ withFreemarkerCoreToken:t withFreemarkerCoreToken:t];
  {
    
#line 1002
    if (![@"" isEqual:nil]) return result;
  }
  
#line 1003
  @throw new_JavaLangError_initWithNSString_(@"Missing return statement in function");
}


#line 1006
FreemarkerCoreHashLiteral *FreemarkerCoreFMParser_HashLiteral(FreemarkerCoreFMParser *self) {
  
#line 1006
  FreemarkerCoreToken *begin, *end;
  FreemarkerCoreExpression *key, *value;
  JavaUtilArrayList *keys = new_JavaUtilArrayList_init();
  JavaUtilArrayList *values = new_JavaUtilArrayList_init();
  begin = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_OPENING_CURLY_BRACKET);
  if (FreemarkerCoreFMParser_jj_2_76WithInt_(self, 2)) {
    key = FreemarkerCoreFMParser_Expression(self);
    if (FreemarkerCoreFMParser_jj_2_71WithInt_(self, 2)) {
      (void) FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_COMMA);
    }
    else
#line 1015
    if (FreemarkerCoreFMParser_jj_2_72WithInt_(self, 2)) {
      (void) FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_COLON);
    }
    else {
      
#line 1018
      (void) FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, -1);
      @throw new_FreemarkerCoreParseException_init();
    }
    value = FreemarkerCoreFMParser_Expression(self);
    FreemarkerCoreFMParser_stringLiteralOnlyWithFreemarkerCoreExpression_(self, key);
    [keys addWithId:key];
    [values addWithId:value];
    
#line 1026
    while (YES) {
      if (FreemarkerCoreFMParser_jj_2_73WithInt_(self, 2)) {
        ;
      }
      else {
        
#line 1030
        goto break_label_7;
      }
      (void) FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_COMMA);
      key = FreemarkerCoreFMParser_Expression(self);
      if (FreemarkerCoreFMParser_jj_2_74WithInt_(self, 2)) {
        (void) FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_COMMA);
      }
      else
#line 1036
      if (FreemarkerCoreFMParser_jj_2_75WithInt_(self, 2)) {
        (void) FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_COLON);
      }
      else {
        
#line 1039
        (void) FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, -1);
        @throw new_FreemarkerCoreParseException_init();
      }
      value = FreemarkerCoreFMParser_Expression(self);
      FreemarkerCoreFMParser_stringLiteralOnlyWithFreemarkerCoreExpression_(self, key);
      [keys addWithId:key];
      [values addWithId:value];
    }
    break_label_7: ;
  }
  else {
    
#line 1048
    ;
  }
  end = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_CLOSING_CURLY_BRACKET);
  FreemarkerCoreHashLiteral *result = new_FreemarkerCoreHashLiteral_initWithJavaUtilArrayList_withJavaUtilArrayList_(keys, values);
  [result setLocationWithFreemarkerTemplateTemplate:self->template__ withFreemarkerCoreToken:begin withFreemarkerCoreToken:end];
  {
    
#line 1053
    if (![@"" isEqual:nil]) return result;
  }
  
#line 1054
  @throw new_JavaLangError_initWithNSString_(@"Missing return statement in function");
}


#line 1061
FreemarkerCoreDollarVariable *FreemarkerCoreFMParser_StringOutput(FreemarkerCoreFMParser *self) {
  
#line 1061
  FreemarkerCoreExpression *exp;
  FreemarkerCoreToken *begin, *end;
  begin = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_DOLLAR_INTERPOLATION_OPENING);
  exp = FreemarkerCoreFMParser_Expression(self);
  FreemarkerCoreFMParser_notHashLiteralWithFreemarkerCoreExpression_withNSString_(self, exp, FreemarkerCoreNonStringException_get_STRING_COERCABLE_TYPES_DESC_());
  FreemarkerCoreFMParser_notListLiteralWithFreemarkerCoreExpression_withNSString_(self, exp, FreemarkerCoreNonStringException_get_STRING_COERCABLE_TYPES_DESC_());
  end = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_CLOSING_CURLY_BRACKET);
  FreemarkerCoreDollarVariable *result = new_FreemarkerCoreDollarVariable_initWithFreemarkerCoreExpression_withFreemarkerCoreExpression_(exp, FreemarkerCoreFMParser_escapedExpressionWithFreemarkerCoreExpression_(self, exp));
  [result setLocationWithFreemarkerTemplateTemplate:self->template__ withFreemarkerCoreToken:begin withFreemarkerCoreToken:end];
  {
    
#line 1070
    if (![@"" isEqual:nil]) return result;
  }
  
#line 1071
  @throw new_JavaLangError_initWithNSString_(@"Missing return statement in function");
}


#line 1074
FreemarkerCoreNumericalOutput *FreemarkerCoreFMParser_NumericalOutput(FreemarkerCoreFMParser *self) {
  
#line 1074
  FreemarkerCoreExpression *exp;
  FreemarkerCoreToken *fmt = nil, *begin, *end;
  begin = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_HASH_INTERPOLATION_OPENING);
  exp = FreemarkerCoreFMParser_Expression(self);
  FreemarkerCoreFMParser_numberLiteralOnlyWithFreemarkerCoreExpression_(self, exp);
  if (FreemarkerCoreFMParser_jj_2_77WithInt_(self, 2)) {
    (void) FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_SEMICOLON);
    fmt = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_ID);
  }
  else {
    
#line 1083
    ;
  }
  end = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_CLOSING_CURLY_BRACKET);
  FreemarkerCoreNumericalOutput *result;
  if (fmt != nil) {
    jint minFrac = -1;
    jint maxFrac = -1;
    
#line 1091
    JavaUtilStringTokenizer *st = new_JavaUtilStringTokenizer_initWithNSString_withNSString_withBoolean_(fmt->image_, @"mM", YES);
    jchar type = '-';
    while ([st hasMoreTokens]) {
      NSString *token = [st nextToken];
      @try {
        if (type != '-') {
          switch (type) {
            case 'm':
            if (minFrac != -1) {
              
#line 1099
              @throw new_FreemarkerCoreParseException_initWithNSString_withId_withId_(@"Invalid formatting string", self->template__, fmt);
            }
            
#line 1100
            minFrac = JavaLangInteger_parseIntWithNSString_(token);
            break;
            case 'M':
            if (maxFrac != -1) {
              
#line 1103
              @throw new_FreemarkerCoreParseException_initWithNSString_withId_withId_(@"Invalid formatting string", self->template__, fmt);
            }
            
#line 1104
            maxFrac = JavaLangInteger_parseIntWithNSString_(token);
            break;
            default:
            {
              
#line 1107
              @throw new_FreemarkerCoreParseException_initWithNSString_withId_withId_(@"Invalid formatting string", self->template__, fmt);
            }
          }
          
#line 1109
          type = '-';
        }
        else
#line 1110
        if ([((NSString *) nil_chk(token)) isEqual:@"m"]) {
          type = 'm';
        }
        else
#line 1112
        if ([token isEqual:@"M"]) {
          type = 'M';
        }
        else {
          {
            
#line 1115
            @throw new_FreemarkerCoreParseException_init();
          }
        }
      }
      @catch (
#line 1117
      FreemarkerCoreParseException *e) {
        {
          
#line 1118
          @throw new_FreemarkerCoreParseException_initWithNSString_withId_withId_(JreStrcat("$$", @"Invalid format specifier ", fmt->image_), self->template__, fmt);
        }
      }
      @catch (
#line 1119
      JavaLangNumberFormatException *e) {
        {
          
#line 1120
          @throw new_FreemarkerCoreParseException_initWithNSString_withId_withId_(JreStrcat("$$", @"Invalid number in the format specifier ", fmt->image_), self->template__, fmt);
        }
      }
    }
    if (maxFrac == -1) {
      if (minFrac == -1) {
        {
          
#line 1126
          @throw new_FreemarkerCoreParseException_initWithNSString_withId_withId_(
#line 1127
          @"Invalid format specification, at least one of m and M must be specified!", self->template__, fmt);
        }
      }
      
#line 1129
      maxFrac = minFrac;
    }
    else
#line 1130
    if (minFrac == -1) {
      minFrac = 0;
    }
    if (minFrac > maxFrac) {
      {
        
#line 1134
        @throw new_FreemarkerCoreParseException_initWithNSString_withId_withId_(
#line 1135
        @"Invalid format specification, min cannot be greater than max!", self->template__, fmt);
      }
    }
    
#line 1137
    if (minFrac > 50 || maxFrac > 50) {
      {
        
#line 1138
        @throw new_FreemarkerCoreParseException_initWithNSString_withId_withId_(@"Cannot specify more than 50 fraction digits", self->template__, fmt);
      }
    }
    
#line 1140
    result = new_FreemarkerCoreNumericalOutput_initWithFreemarkerCoreExpression_withInt_withInt_(exp, minFrac, maxFrac);
  }
  else {
    
#line 1142
    result = new_FreemarkerCoreNumericalOutput_initWithFreemarkerCoreExpression_(exp);
  }
  [((FreemarkerCoreNumericalOutput *) nil_chk(result)) setLocationWithFreemarkerTemplateTemplate:self->template__ withFreemarkerCoreToken:begin withFreemarkerCoreToken:end];
  {
    
#line 1145
    if (![@"" isEqual:nil]) return result;
  }
  
#line 1146
  @throw new_JavaLangError_initWithNSString_(@"Missing return statement in function");
}


#line 1149
FreemarkerCoreTemplateElement *FreemarkerCoreFMParser_If(FreemarkerCoreFMParser *self) {
  
#line 1149
  FreemarkerCoreToken *start, *end, *t;
  FreemarkerCoreExpression *condition;
  FreemarkerCoreTemplateElement *block;
  FreemarkerCoreIfBlock *ifBlock;
  FreemarkerCoreConditionalBlock *cblock;
  start = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_IF);
  condition = FreemarkerCoreFMParser_Expression(self);
  (void) FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_DIRECTIVE_END);
  block = FreemarkerCoreFMParser_OptionalBlock(self);
  cblock = new_FreemarkerCoreConditionalBlock_initWithFreemarkerCoreExpression_withFreemarkerCoreTemplateElement_withInt_(condition, block, FreemarkerCoreConditionalBlock_TYPE_IF);
  [cblock setLocationWithFreemarkerTemplateTemplate:self->template__ withFreemarkerCoreToken:start withFreemarkerCoreTemplateObject:block];
  ifBlock = new_FreemarkerCoreIfBlock_initWithFreemarkerCoreConditionalBlock_(cblock);
  
#line 1162
  while (YES) {
    if (FreemarkerCoreFMParser_jj_2_78WithInt_(self, 2)) {
      ;
    }
    else {
      
#line 1166
      goto break_label_8;
    }
    t = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_ELSE_IF);
    condition = FreemarkerCoreFMParser_Expression(self);
    (void) FreemarkerCoreFMParser_LooseDirectiveEnd(self);
    block = FreemarkerCoreFMParser_OptionalBlock(self);
    cblock = new_FreemarkerCoreConditionalBlock_initWithFreemarkerCoreExpression_withFreemarkerCoreTemplateElement_withInt_(condition, block, FreemarkerCoreConditionalBlock_TYPE_ELSE_IF);
    [cblock setLocationWithFreemarkerTemplateTemplate:self->template__ withFreemarkerCoreToken:t withFreemarkerCoreTemplateObject:block];
    [ifBlock addBlockWithFreemarkerCoreConditionalBlock:cblock];
  }
  break_label_8: ;
  
#line 1176
  if (FreemarkerCoreFMParser_jj_2_79WithInt_(self, 2)) {
    t = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_ELSE);
    block = FreemarkerCoreFMParser_OptionalBlock(self);
    cblock = new_FreemarkerCoreConditionalBlock_initWithFreemarkerCoreExpression_withFreemarkerCoreTemplateElement_withInt_(nil, block, FreemarkerCoreConditionalBlock_TYPE_ELSE);
    [cblock setLocationWithFreemarkerTemplateTemplate:self->template__ withFreemarkerCoreToken:t withFreemarkerCoreTemplateObject:block];
    [ifBlock addBlockWithFreemarkerCoreConditionalBlock:cblock];
  }
  else {
    
#line 1183
    ;
  }
  end = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_END_IF);
  [ifBlock setLocationWithFreemarkerTemplateTemplate:self->template__ withFreemarkerCoreToken:start withFreemarkerCoreToken:end];
  {
    
#line 1187
    if (![@"" isEqual:nil]) return ifBlock;
  }
  
#line 1188
  @throw new_JavaLangError_initWithNSString_(@"Missing return statement in function");
}


#line 1191
FreemarkerCoreAttemptBlock *FreemarkerCoreFMParser_Attempt(FreemarkerCoreFMParser *self) {
  
#line 1191
  FreemarkerCoreToken *start, *end;
  FreemarkerCoreTemplateElement *block;
  FreemarkerCoreRecoveryBlock *recoveryBlock;
  start = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_ATTEMPT);
  block = FreemarkerCoreFMParser_OptionalBlock(self);
  recoveryBlock = FreemarkerCoreFMParser_Recover(self);
  if (FreemarkerCoreFMParser_jj_2_80WithInt_(self, 2)) {
    end = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_END_RECOVER);
  }
  else
#line 1199
  if (FreemarkerCoreFMParser_jj_2_81WithInt_(self, 2)) {
    end = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_END_ATTEMPT);
  }
  else {
    
#line 1202
    (void) FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, -1);
    @throw new_FreemarkerCoreParseException_init();
  }
  FreemarkerCoreAttemptBlock *result = new_FreemarkerCoreAttemptBlock_initWithFreemarkerCoreTemplateElement_withFreemarkerCoreRecoveryBlock_(block, recoveryBlock);
  [result setLocationWithFreemarkerTemplateTemplate:self->template__ withFreemarkerCoreToken:start withFreemarkerCoreToken:end];
  {
    
#line 1207
    if (![@"" isEqual:nil]) return result;
  }
  
#line 1208
  @throw new_JavaLangError_initWithNSString_(@"Missing return statement in function");
}


#line 1211
FreemarkerCoreRecoveryBlock *FreemarkerCoreFMParser_Recover(FreemarkerCoreFMParser *self) {
  
#line 1211
  FreemarkerCoreToken *start;
  FreemarkerCoreTemplateElement *block;
  start = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_RECOVER);
  block = FreemarkerCoreFMParser_OptionalBlock(self);
  FreemarkerCoreRecoveryBlock *result = new_FreemarkerCoreRecoveryBlock_initWithFreemarkerCoreTemplateElement_(block);
  [result setLocationWithFreemarkerTemplateTemplate:self->template__ withFreemarkerCoreToken:start withFreemarkerCoreTemplateObject:block];
  {
    
#line 1217
    if (![@"" isEqual:nil]) return result;
  }
  
#line 1218
  @throw new_JavaLangError_initWithNSString_(@"Missing return statement in function");
}


#line 1221
FreemarkerCoreTemplateElement *FreemarkerCoreFMParser_List(FreemarkerCoreFMParser *self) {
  
#line 1221
  FreemarkerCoreExpression *exp;
  FreemarkerCoreToken *loopVar = nil, *start, *end;
  FreemarkerCoreTemplateElement *mainBlock;
  FreemarkerCoreElseOfList *elseOfList = nil;
  FreemarkerCoreFMParser_ParserIteratorBlockContext *iterCtx;
  start = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_LIST);
  exp = FreemarkerCoreFMParser_Expression(self);
  if (FreemarkerCoreFMParser_jj_2_82WithInt_(self, 2)) {
    (void) FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_AS);
    loopVar = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_ID);
  }
  else {
    
#line 1232
    ;
  }
  (void) FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_DIRECTIVE_END);
  iterCtx = FreemarkerCoreFMParser_pushIteratorBlockContext(self);
  if (loopVar != nil) {
    ((FreemarkerCoreFMParser_ParserIteratorBlockContext *) nil_chk(iterCtx))->loopVarName_ = loopVar->image_;
    self->breakableDirectiveNesting_++;
  }
  mainBlock = FreemarkerCoreFMParser_OptionalBlock(self);
  if (loopVar != nil) {
    self->breakableDirectiveNesting_--;
  }
  else
#line 1243
  if (((FreemarkerCoreFMParser_ParserIteratorBlockContext *) nil_chk(iterCtx))->kind_ != FreemarkerCoreFMParser_ITERATOR_BLOCK_KIND_ITEMS) {
    {
      
#line 1244
      @throw new_FreemarkerCoreParseException_initWithNSString_withId_withId_(
#line 1245
      @"#list must have either \"as loopVar\" parameter or nested #items that belongs to it.", self->template__,
#line 1246
      start);
    }
  }
  
#line 1248
  FreemarkerCoreFMParser_popIteratorBlockContext(self);
  if (FreemarkerCoreFMParser_jj_2_83WithInt_(self, 2)) {
    elseOfList = FreemarkerCoreFMParser_ElseOfList(self);
  }
  else {
    
#line 1252
    ;
  }
  end = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_END_LIST);
  FreemarkerCoreIteratorBlock *list = new_FreemarkerCoreIteratorBlock_initWithFreemarkerCoreExpression_withNSString_withFreemarkerCoreTemplateElement_withBoolean_(exp, loopVar != nil ? loopVar->image_ : nil, mainBlock, NO);
  [list setLocationWithFreemarkerTemplateTemplate:self->template__ withFreemarkerCoreToken:start withFreemarkerCoreToken:end];
  
#line 1258
  FreemarkerCoreTemplateElement *result;
  if (elseOfList == nil) {
    result = list;
  }
  else {
    
#line 1262
    result = new_FreemarkerCoreListElseContainer_initWithFreemarkerCoreIteratorBlock_withFreemarkerCoreElseOfList_(list, elseOfList);
    [result setLocationWithFreemarkerTemplateTemplate:self->template__ withFreemarkerCoreToken:start withFreemarkerCoreToken:end];
  }
  {
    
#line 1265
    if (![@"" isEqual:nil]) return result;
  }
  
#line 1266
  @throw new_JavaLangError_initWithNSString_(@"Missing return statement in function");
}


#line 1269
FreemarkerCoreElseOfList *FreemarkerCoreFMParser_ElseOfList(FreemarkerCoreFMParser *self) {
  
#line 1269
  FreemarkerCoreToken *start;
  FreemarkerCoreTemplateElement *block;
  start = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_ELSE);
  block = FreemarkerCoreFMParser_OptionalBlock(self);
  FreemarkerCoreElseOfList *result = new_FreemarkerCoreElseOfList_initWithFreemarkerCoreTemplateElement_(block);
  [result setLocationWithFreemarkerTemplateTemplate:self->template__ withFreemarkerCoreToken:start withFreemarkerCoreTemplateObject:block];
  {
    
#line 1275
    if (![@"" isEqual:nil]) return result;
  }
  
#line 1276
  @throw new_JavaLangError_initWithNSString_(@"Missing return statement in function");
}


#line 1279
FreemarkerCoreIteratorBlock *FreemarkerCoreFMParser_ForEach(FreemarkerCoreFMParser *self) {
  
#line 1279
  FreemarkerCoreExpression *exp;
  FreemarkerCoreToken *loopVar, *start, *end;
  FreemarkerCoreTemplateElement *block;
  start = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_FOREACH);
  loopVar = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_ID);
  (void) FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_IN);
  exp = FreemarkerCoreFMParser_Expression(self);
  (void) FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_DIRECTIVE_END);
  FreemarkerCoreFMParser_ParserIteratorBlockContext *iterCtx = FreemarkerCoreFMParser_pushIteratorBlockContext(self);
  ((FreemarkerCoreFMParser_ParserIteratorBlockContext *) nil_chk(iterCtx))->loopVarName_ = ((FreemarkerCoreToken *) nil_chk(loopVar))->image_;
  iterCtx->kind_ = FreemarkerCoreFMParser_ITERATOR_BLOCK_KIND_FOREACH;
  self->breakableDirectiveNesting_++;
  block = FreemarkerCoreFMParser_OptionalBlock(self);
  end = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_END_FOREACH);
  self->breakableDirectiveNesting_--;
  FreemarkerCoreFMParser_popIteratorBlockContext(self);
  
#line 1296
  FreemarkerCoreIteratorBlock *result = new_FreemarkerCoreIteratorBlock_initWithFreemarkerCoreExpression_withNSString_withFreemarkerCoreTemplateElement_withBoolean_(exp, loopVar->image_, block, YES);
  [result setLocationWithFreemarkerTemplateTemplate:self->template__ withFreemarkerCoreToken:start withFreemarkerCoreToken:end];
  {
    
#line 1298
    if (![@"" isEqual:nil]) return result;
  }
  
#line 1299
  @throw new_JavaLangError_initWithNSString_(@"Missing return statement in function");
}


#line 1302
FreemarkerCoreItems *FreemarkerCoreFMParser_Items(FreemarkerCoreFMParser *self) {
  
#line 1302
  FreemarkerCoreToken *loopVar, *start, *end;
  FreemarkerCoreTemplateElement *block;
  FreemarkerCoreFMParser_ParserIteratorBlockContext *iterCtx;
  start = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_ITEMS);
  loopVar = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_ID);
  (void) FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_DIRECTIVE_END);
  iterCtx = FreemarkerCoreFMParser_peekIteratorBlockContext(self);
  if (iterCtx == nil) {
    {
      
#line 1310
      @throw new_FreemarkerCoreParseException_initWithNSString_withId_withId_(@"#items must be inside a #list block.", self->template__, start);
    }
  }
  
#line 1312
  if (((FreemarkerCoreFMParser_ParserIteratorBlockContext *) nil_chk(iterCtx))->loopVarName_ != nil) {
    NSString *msg;
    if (iterCtx->kind_ == FreemarkerCoreFMParser_ITERATOR_BLOCK_KIND_FOREACH) {
      msg = JreStrcat("$$", FreemarkerCoreFMParser_forEachDirectiveSymbol(self), @" doesn't support nested #items.");
    }
    else
#line 1316
    if (iterCtx->kind_ == FreemarkerCoreFMParser_ITERATOR_BLOCK_KIND_ITEMS) {
      msg = @"Can't nest #items into each other that belong to the same #list.";
    }
    else {
      
#line 1319
      msg = @"The parent #list of the #items must not have \"as loopVar\" parameter.";
    }
    {
      
#line 1321
      @throw new_FreemarkerCoreParseException_initWithNSString_withId_withId_(msg, self->template__, start);
    }
  }
  
#line 1323
  iterCtx->kind_ = FreemarkerCoreFMParser_ITERATOR_BLOCK_KIND_ITEMS;
  iterCtx->loopVarName_ = ((FreemarkerCoreToken *) nil_chk(loopVar))->image_;
  
#line 1326
  self->breakableDirectiveNesting_++;
  block = FreemarkerCoreFMParser_OptionalBlock(self);
  end = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_END_ITEMS);
  self->breakableDirectiveNesting_--;
  iterCtx->loopVarName_ = nil;
  
#line 1332
  FreemarkerCoreItems *result = new_FreemarkerCoreItems_initWithNSString_withFreemarkerCoreTemplateElement_(loopVar->image_, block);
  [result setLocationWithFreemarkerTemplateTemplate:self->template__ withFreemarkerCoreToken:start withFreemarkerCoreToken:end];
  {
    
#line 1334
    if (![@"" isEqual:nil]) return result;
  }
  
#line 1335
  @throw new_JavaLangError_initWithNSString_(@"Missing return statement in function");
}


#line 1338
FreemarkerCoreSep *FreemarkerCoreFMParser_Sep(FreemarkerCoreFMParser *self) {
  
#line 1338
  FreemarkerCoreToken *loopVar, *start, *end = nil;
  FreemarkerCoreTemplateElement *block;
  start = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_SEP);
  if (FreemarkerCoreFMParser_peekIteratorBlockContext(self) == nil) {
    {
      
#line 1342
      @throw new_FreemarkerCoreParseException_initWithNSString_withId_withId_(JreStrcat("$$$", @"#sep must be inside a #list (or ", FreemarkerCoreFMParser_forEachDirectiveSymbol(self), @") block."), self->template__,
#line 1344
      start);
    }
  }
  
#line 1346
  block = FreemarkerCoreFMParser_OptionalBlock(self);
  switch ((self->jj_ntk_ == -1) ? FreemarkerCoreFMParser_jj_ntk_f(self) : self->jj_ntk_) {
    case FreemarkerCoreFMParserConstants_END_SEP:
    {
      
#line 1349
      end = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_END_SEP);
      break;
    }
    default:
    *IOSIntArray_GetRef(nil_chk(self->jj_la1_), 1) = self->jj_gen_;
    ;
  }
  FreemarkerCoreSep *result = new_FreemarkerCoreSep_initWithFreemarkerCoreTemplateElement_(block);
  if (end != nil) {
    [result setLocationWithFreemarkerTemplateTemplate:self->template__ withFreemarkerCoreToken:start withFreemarkerCoreToken:end];
  }
  else {
    
#line 1360
    [result setLocationWithFreemarkerTemplateTemplate:self->template__ withFreemarkerCoreToken:start withFreemarkerCoreTemplateObject:block];
  }
  {
    
#line 1362
    if (![@"" isEqual:nil]) return result;
  }
  
#line 1363
  @throw new_JavaLangError_initWithNSString_(@"Missing return statement in function");
}


#line 1366
FreemarkerCoreVisitNode *FreemarkerCoreFMParser_Visit(FreemarkerCoreFMParser *self) {
  
#line 1366
  FreemarkerCoreToken *start, *end;
  FreemarkerCoreExpression *targetNode, *namespaces = nil;
  start = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_VISIT);
  targetNode = FreemarkerCoreFMParser_Expression(self);
  if (FreemarkerCoreFMParser_jj_2_84WithInt_(self, 2)) {
    (void) FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_USING);
    namespaces = FreemarkerCoreFMParser_Expression(self);
  }
  else {
    
#line 1374
    ;
  }
  end = FreemarkerCoreFMParser_LooseDirectiveEnd(self);
  FreemarkerCoreVisitNode *result = new_FreemarkerCoreVisitNode_initWithFreemarkerCoreExpression_withFreemarkerCoreExpression_(targetNode, namespaces);
  [result setLocationWithFreemarkerTemplateTemplate:self->template__ withFreemarkerCoreToken:start withFreemarkerCoreToken:end];
  {
    
#line 1379
    if (![@"" isEqual:nil]) return result;
  }
  
#line 1380
  @throw new_JavaLangError_initWithNSString_(@"Missing return statement in function");
}


#line 1383
FreemarkerCoreRecurseNode *FreemarkerCoreFMParser_Recurse(FreemarkerCoreFMParser *self) {
  
#line 1383
  FreemarkerCoreToken *start, *end = nil;
  FreemarkerCoreExpression *node = nil, *namespaces = nil;
  if (FreemarkerCoreFMParser_jj_2_87WithInt_(self, 2)) {
    start = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_SIMPLE_RECURSE);
  }
  else
#line 1387
  if (FreemarkerCoreFMParser_jj_2_88WithInt_(self, 2)) {
    start = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_RECURSE);
    if (FreemarkerCoreFMParser_jj_2_85WithInt_(self, 2)) {
      node = FreemarkerCoreFMParser_Expression(self);
    }
    else {
      
#line 1392
      ;
    }
    if (FreemarkerCoreFMParser_jj_2_86WithInt_(self, 2)) {
      (void) FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_USING);
      namespaces = FreemarkerCoreFMParser_Expression(self);
    }
    else {
      
#line 1398
      ;
    }
    end = FreemarkerCoreFMParser_LooseDirectiveEnd(self);
  }
  else {
    
#line 1402
    (void) FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, -1);
    @throw new_FreemarkerCoreParseException_init();
  }
  if (end == nil) end = start;
  FreemarkerCoreRecurseNode *result = new_FreemarkerCoreRecurseNode_initWithFreemarkerCoreExpression_withFreemarkerCoreExpression_(node, namespaces);
  [result setLocationWithFreemarkerTemplateTemplate:self->template__ withFreemarkerCoreToken:start withFreemarkerCoreToken:end];
  {
    
#line 1408
    if (![@"" isEqual:nil]) return result;
  }
  
#line 1409
  @throw new_JavaLangError_initWithNSString_(@"Missing return statement in function");
}


#line 1412
FreemarkerCoreFallbackInstruction *FreemarkerCoreFMParser_FallBack(FreemarkerCoreFMParser *self) {
  
#line 1412
  FreemarkerCoreToken *tok;
  tok = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_FALLBACK);
  if (!self->inMacro_) {
    {
      
#line 1415
      @throw new_FreemarkerCoreParseException_initWithNSString_withId_withId_(@"Cannot fall back outside a macro.", self->template__, tok);
    }
  }
  
#line 1417
  FreemarkerCoreFallbackInstruction *result = new_FreemarkerCoreFallbackInstruction_init();
  [result setLocationWithFreemarkerTemplateTemplate:self->template__ withFreemarkerCoreToken:tok withFreemarkerCoreToken:tok];
  {
    
#line 1419
    if (![@"" isEqual:nil]) return result;
  }
  
#line 1420
  @throw new_JavaLangError_initWithNSString_(@"Missing return statement in function");
}


#line 1426
FreemarkerCoreBreakInstruction *FreemarkerCoreFMParser_Break(FreemarkerCoreFMParser *self) {
  
#line 1426
  FreemarkerCoreToken *start;
  start = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_BREAK);
  if (self->breakableDirectiveNesting_ < 1) {
    {
      
#line 1429
      @throw new_FreemarkerCoreParseException_initWithNSString_withId_withId_(JreStrcat("$$$C", ((FreemarkerCoreToken *) nil_chk(start))->image_, @" must be nested inside a directive that supports it:  #list with \"as\", #items, #switch (or the deprecated ", FreemarkerCoreFMParser_forEachDirectiveSymbol(self), ')'), self->template__,
#line 1431
      start);
    }
  }
  
#line 1433
  FreemarkerCoreBreakInstruction *result = new_FreemarkerCoreBreakInstruction_init();
  [result setLocationWithFreemarkerTemplateTemplate:self->template__ withFreemarkerCoreToken:start withFreemarkerCoreToken:start];
  {
    
#line 1435
    if (![@"" isEqual:nil]) return result;
  }
  
#line 1436
  @throw new_JavaLangError_initWithNSString_(@"Missing return statement in function");
}


#line 1443
FreemarkerCoreReturnInstruction *FreemarkerCoreFMParser_Return(FreemarkerCoreFMParser *self) {
  
#line 1443
  FreemarkerCoreToken *start, *end = nil;
  FreemarkerCoreExpression *exp = nil;
  if (FreemarkerCoreFMParser_jj_2_89WithInt_(self, 2)) {
    start = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_SIMPLE_RETURN);
    end = start;
  }
  else
#line 1448
  if (FreemarkerCoreFMParser_jj_2_90WithInt_(self, 2)) {
    start = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_RETURN);
    exp = FreemarkerCoreFMParser_Expression(self);
    end = FreemarkerCoreFMParser_LooseDirectiveEnd(self);
  }
  else {
    
#line 1453
    (void) FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, -1);
    @throw new_FreemarkerCoreParseException_init();
  }
  if (self->inMacro_) {
    if (exp != nil) {
      {
        
#line 1458
        @throw new_FreemarkerCoreParseException_initWithNSString_withId_withId_(@"A macro cannot return a value", self->template__, start);
      }
    }
  }
  else
#line 1460
  if (self->inFunction_) {
    if (exp == nil) {
      {
        
#line 1462
        @throw new_FreemarkerCoreParseException_initWithNSString_withId_withId_(@"A function must return a value", self->template__, start);
      }
    }
  }
  else {
    
#line 1465
    if (exp == nil) {
      {
        
#line 1466
        @throw new_FreemarkerCoreParseException_initWithNSString_withId_withId_(
#line 1467
        @"A return instruction can only occur inside a macro or function", self->template__, start);
      }
    }
  }
  
#line 1470
  FreemarkerCoreReturnInstruction *result = new_FreemarkerCoreReturnInstruction_initWithFreemarkerCoreExpression_(exp);
  [result setLocationWithFreemarkerTemplateTemplate:self->template__ withFreemarkerCoreToken:start withFreemarkerCoreToken:end];
  {
    
#line 1472
    if (![@"" isEqual:nil]) return result;
  }
  
#line 1473
  @throw new_JavaLangError_initWithNSString_(@"Missing return statement in function");
}


#line 1476
FreemarkerCoreStopInstruction *FreemarkerCoreFMParser_Stop(FreemarkerCoreFMParser *self) {
  
#line 1476
  FreemarkerCoreToken *start = nil;
  FreemarkerCoreExpression *exp = nil;
  if (FreemarkerCoreFMParser_jj_2_91WithInt_(self, 2)) {
    start = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_HALT);
  }
  else
#line 1480
  if (FreemarkerCoreFMParser_jj_2_92WithInt_(self, 2)) {
    start = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_STOP);
    exp = FreemarkerCoreFMParser_Expression(self);
    (void) FreemarkerCoreFMParser_LooseDirectiveEnd(self);
  }
  else {
    
#line 1485
    (void) FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, -1);
    @throw new_FreemarkerCoreParseException_init();
  }
  FreemarkerCoreStopInstruction *result = new_FreemarkerCoreStopInstruction_initWithFreemarkerCoreExpression_(exp);
  [result setLocationWithFreemarkerTemplateTemplate:self->template__ withFreemarkerCoreToken:start withFreemarkerCoreToken:start];
  {
    
#line 1490
    if (![@"" isEqual:nil]) return result;
  }
  
#line 1491
  @throw new_JavaLangError_initWithNSString_(@"Missing return statement in function");
}


#line 1494
FreemarkerCoreTemplateElement *FreemarkerCoreFMParser_Nested(FreemarkerCoreFMParser *self) {
  
#line 1494
  FreemarkerCoreToken *t, *end;
  JavaUtilArrayList *bodyParameters;
  FreemarkerCoreBodyInstruction *result = nil;
  if (FreemarkerCoreFMParser_jj_2_93WithInt_(self, 2)) {
    t = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_SIMPLE_NESTED);
    result = new_FreemarkerCoreBodyInstruction_initWithJavaUtilList_(nil);
    [result setLocationWithFreemarkerTemplateTemplate:self->template__ withFreemarkerCoreToken:t withFreemarkerCoreToken:t];
  }
  else
#line 1501
  if (FreemarkerCoreFMParser_jj_2_94WithInt_(self, 2)) {
    t = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_NESTED);
    bodyParameters = FreemarkerCoreFMParser_PositionalArgs(self);
    end = FreemarkerCoreFMParser_LooseDirectiveEnd(self);
    result = new_FreemarkerCoreBodyInstruction_initWithJavaUtilList_(bodyParameters);
    [result setLocationWithFreemarkerTemplateTemplate:self->template__ withFreemarkerCoreToken:t withFreemarkerCoreToken:end];
  }
  else {
    
#line 1508
    (void) FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, -1);
    @throw new_FreemarkerCoreParseException_init();
  }
  if (!self->inMacro_) {
    {
      
#line 1512
      @throw new_FreemarkerCoreParseException_initWithNSString_withId_withId_(JreStrcat("$$$", @"Cannot use a ", ((FreemarkerCoreToken *) nil_chk(t))->image_, @" instruction outside a macro."), self->template__, t);
    }
  }
  {
    
#line 1514
    if (![@"" isEqual:nil]) return result;
  }
  
#line 1515
  @throw new_JavaLangError_initWithNSString_(@"Missing return statement in function");
}


#line 1518
FreemarkerCoreTemplateElement *FreemarkerCoreFMParser_Flush(FreemarkerCoreFMParser *self) {
  
#line 1518
  FreemarkerCoreToken *t;
  t = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_FLUSH);
  FreemarkerCoreFlushInstruction *result = new_FreemarkerCoreFlushInstruction_init();
  [result setLocationWithFreemarkerTemplateTemplate:self->template__ withFreemarkerCoreToken:t withFreemarkerCoreToken:t];
  {
    
#line 1522
    if (![@"" isEqual:nil]) return result;
  }
  
#line 1523
  @throw new_JavaLangError_initWithNSString_(@"Missing return statement in function");
}


#line 1526
FreemarkerCoreTemplateElement *FreemarkerCoreFMParser_Trim(FreemarkerCoreFMParser *self) {
  
#line 1526
  FreemarkerCoreToken *t;
  FreemarkerCoreTrimInstruction *result = nil;
  if (FreemarkerCoreFMParser_jj_2_95WithInt_(self, 2)) {
    t = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_TRIM);
    result = new_FreemarkerCoreTrimInstruction_initWithBoolean_withBoolean_(YES, YES);
  }
  else
#line 1531
  if (FreemarkerCoreFMParser_jj_2_96WithInt_(self, 2)) {
    t = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_LTRIM);
    result = new_FreemarkerCoreTrimInstruction_initWithBoolean_withBoolean_(YES, NO);
  }
  else
#line 1534
  if (FreemarkerCoreFMParser_jj_2_97WithInt_(self, 2)) {
    t = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_RTRIM);
    result = new_FreemarkerCoreTrimInstruction_initWithBoolean_withBoolean_(NO, YES);
  }
  else
#line 1537
  if (FreemarkerCoreFMParser_jj_2_98WithInt_(self, 2)) {
    t = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_NOTRIM);
    result = new_FreemarkerCoreTrimInstruction_initWithBoolean_withBoolean_(NO, NO);
  }
  else {
    
#line 1541
    (void) FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, -1);
    @throw new_FreemarkerCoreParseException_init();
  }
  [((FreemarkerCoreTrimInstruction *) nil_chk(result)) setLocationWithFreemarkerTemplateTemplate:self->template__ withFreemarkerCoreToken:t withFreemarkerCoreToken:t];
  {
    
#line 1545
    if (![@"" isEqual:nil]) return result;
  }
  
#line 1546
  @throw new_JavaLangError_initWithNSString_(@"Missing return statement in function");
}


#line 1549
FreemarkerCoreTemplateElement *FreemarkerCoreFMParser_Assign(FreemarkerCoreFMParser *self) {
  
#line 1549
  FreemarkerCoreToken *start, *end;
  jint scope;
  FreemarkerCoreToken *id_ = nil;
  FreemarkerCoreToken *equalsOp;
  FreemarkerCoreExpression *nameExp, *exp, *nsExp = nil;
  NSString *varName;
  JavaUtilArrayList *assignments = new_JavaUtilArrayList_init();
  FreemarkerCoreAssignment *ass;
  FreemarkerCoreTemplateElement *block;
  if (FreemarkerCoreFMParser_jj_2_99WithInt_(self, 2)) {
    start = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_ASSIGN);
    scope = FreemarkerCoreAssignment_NAMESPACE;
  }
  else
#line 1561
  if (FreemarkerCoreFMParser_jj_2_100WithInt_(self, 2)) {
    start = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_GLOBALASSIGN);
    scope = FreemarkerCoreAssignment_GLOBAL;
  }
  else
#line 1564
  if (FreemarkerCoreFMParser_jj_2_101WithInt_(self, 2)) {
    start = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_LOCALASSIGN);
    scope = FreemarkerCoreAssignment_LOCAL;
    scope = FreemarkerCoreAssignment_LOCAL;
    if (!self->inMacro_ && !self->inFunction_) {
      {
        
#line 1569
        @throw new_FreemarkerCoreParseException_initWithNSString_withId_withId_(@"Local variable assigned outside a macro.", self->template__, start);
      }
    }
  }
  else {
    
#line 1572
    (void) FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, -1);
    @throw new_FreemarkerCoreParseException_init();
  }
  nameExp = FreemarkerCoreFMParser_IdentifierOrStringLiteral(self);
  varName = ([nameExp isKindOfClass:[FreemarkerCoreStringLiteral class]]) ?
#line 1577
  [((FreemarkerCoreStringLiteral *) nil_chk(((FreemarkerCoreStringLiteral *) check_class_cast(nameExp, [FreemarkerCoreStringLiteral class])))) getAsString] :
#line 1578
  [((FreemarkerCoreIdentifier *) nil_chk(((FreemarkerCoreIdentifier *) check_class_cast(nameExp, [FreemarkerCoreIdentifier class])))) getName];
  if (FreemarkerCoreFMParser_jj_2_129WithInt_(self, 2)) {
    if (FreemarkerCoreFMParser_jj_2_110WithInt_(self, 2)) {
      if (FreemarkerCoreFMParser_jj_2_102WithInt_(self, 2)) {
        (void) FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_EQUALS);
      }
      else
#line 1583
      if (FreemarkerCoreFMParser_jj_2_103WithInt_(self, 2)) {
        (void) FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_PLUS_EQUALS);
      }
      else
#line 1585
      if (FreemarkerCoreFMParser_jj_2_104WithInt_(self, 2)) {
        (void) FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_MINUS_EQUALS);
      }
      else
#line 1587
      if (FreemarkerCoreFMParser_jj_2_105WithInt_(self, 2)) {
        (void) FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_TIMES_EQUALS);
      }
      else
#line 1589
      if (FreemarkerCoreFMParser_jj_2_106WithInt_(self, 2)) {
        (void) FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_DIV_EQUALS);
      }
      else
#line 1591
      if (FreemarkerCoreFMParser_jj_2_107WithInt_(self, 2)) {
        (void) FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_MOD_EQUALS);
      }
      else {
        
#line 1594
        (void) FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, -1);
        @throw new_FreemarkerCoreParseException_init();
      }
      equalsOp = self->token_;
      exp = FreemarkerCoreFMParser_Expression(self);
    }
    else
#line 1599
    if (FreemarkerCoreFMParser_jj_2_111WithInt_(self, 2)) {
      if (FreemarkerCoreFMParser_jj_2_108WithInt_(self, 2)) {
        (void) FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_PLUS_PLUS);
      }
      else
#line 1602
      if (FreemarkerCoreFMParser_jj_2_109WithInt_(self, 2)) {
        (void) FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_MINUS_MINUS);
      }
      else {
        
#line 1605
        (void) FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, -1);
        @throw new_FreemarkerCoreParseException_init();
      }
      equalsOp = self->token_;
      exp = nil;
    }
    else {
      
#line 1611
      (void) FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, -1);
      @throw new_FreemarkerCoreParseException_init();
    }
    ass = new_FreemarkerCoreAssignment_initWithNSString_withInt_withFreemarkerCoreExpression_withInt_(varName, ((FreemarkerCoreToken *) nil_chk(equalsOp))->kind_, exp, scope);
    if (exp != nil) {
      [ass setLocationWithFreemarkerTemplateTemplate:self->template__ withFreemarkerCoreTemplateObject:nameExp withFreemarkerCoreTemplateObject:exp];
    }
    else {
      
#line 1618
      [ass setLocationWithFreemarkerTemplateTemplate:self->template__ withFreemarkerCoreTemplateObject:nameExp withFreemarkerCoreToken:equalsOp];
    }
    [assignments addWithId:ass];
    
#line 1622
    while (YES) {
      if (FreemarkerCoreFMParser_jj_2_112WithInt_(self, 2147483647)) {
        ;
      }
      else {
        
#line 1626
        goto break_label_9;
      }
      if (FreemarkerCoreFMParser_jj_2_113WithInt_(self, 2)) {
        (void) FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_COMMA);
      }
      else {
        
#line 1631
        ;
      }
      nameExp = FreemarkerCoreFMParser_IdentifierOrStringLiteral(self);
      varName = ([nameExp isKindOfClass:[FreemarkerCoreStringLiteral class]]) ?
#line 1635
      [((FreemarkerCoreStringLiteral *) nil_chk(((FreemarkerCoreStringLiteral *) check_class_cast(nameExp, [FreemarkerCoreStringLiteral class])))) getAsString] :
#line 1636
      [((FreemarkerCoreIdentifier *) nil_chk(((FreemarkerCoreIdentifier *) check_class_cast(nameExp, [FreemarkerCoreIdentifier class])))) getName];
      if (FreemarkerCoreFMParser_jj_2_122WithInt_(self, 2)) {
        if (FreemarkerCoreFMParser_jj_2_114WithInt_(self, 2)) {
          (void) FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_EQUALS);
        }
        else
#line 1640
        if (FreemarkerCoreFMParser_jj_2_115WithInt_(self, 2)) {
          (void) FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_PLUS_EQUALS);
        }
        else
#line 1642
        if (FreemarkerCoreFMParser_jj_2_116WithInt_(self, 2)) {
          (void) FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_MINUS_EQUALS);
        }
        else
#line 1644
        if (FreemarkerCoreFMParser_jj_2_117WithInt_(self, 2)) {
          (void) FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_TIMES_EQUALS);
        }
        else
#line 1646
        if (FreemarkerCoreFMParser_jj_2_118WithInt_(self, 2)) {
          (void) FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_DIV_EQUALS);
        }
        else
#line 1648
        if (FreemarkerCoreFMParser_jj_2_119WithInt_(self, 2)) {
          (void) FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_MOD_EQUALS);
        }
        else {
          
#line 1651
          (void) FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, -1);
          @throw new_FreemarkerCoreParseException_init();
        }
        equalsOp = self->token_;
        exp = FreemarkerCoreFMParser_Expression(self);
      }
      else
#line 1656
      if (FreemarkerCoreFMParser_jj_2_123WithInt_(self, 2)) {
        if (FreemarkerCoreFMParser_jj_2_120WithInt_(self, 2)) {
          (void) FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_PLUS_PLUS);
        }
        else
#line 1659
        if (FreemarkerCoreFMParser_jj_2_121WithInt_(self, 2)) {
          (void) FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_MINUS_MINUS);
        }
        else {
          
#line 1662
          (void) FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, -1);
          @throw new_FreemarkerCoreParseException_init();
        }
        equalsOp = self->token_;
        exp = nil;
      }
      else {
        
#line 1668
        (void) FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, -1);
        @throw new_FreemarkerCoreParseException_init();
      }
      ass = new_FreemarkerCoreAssignment_initWithNSString_withInt_withFreemarkerCoreExpression_withInt_(varName, ((FreemarkerCoreToken *) nil_chk(equalsOp))->kind_, exp, scope);
      if (exp != nil) {
        [ass setLocationWithFreemarkerTemplateTemplate:self->template__ withFreemarkerCoreTemplateObject:nameExp withFreemarkerCoreTemplateObject:exp];
      }
      else {
        
#line 1675
        [ass setLocationWithFreemarkerTemplateTemplate:self->template__ withFreemarkerCoreTemplateObject:nameExp withFreemarkerCoreToken:equalsOp];
      }
      [assignments addWithId:ass];
    }
    break_label_9: ;
    
#line 1679
    if (FreemarkerCoreFMParser_jj_2_124WithInt_(self, 2)) {
      id_ = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_IN);
      nsExp = FreemarkerCoreFMParser_Expression(self);
      if (scope != FreemarkerCoreAssignment_NAMESPACE) {
        {
          
#line 1683
          @throw new_FreemarkerCoreParseException_initWithNSString_withId_withId_(@"Cannot assign to namespace here.", self->template__, id_);
        }
      }
    }
    else {
      
#line 1686
      ;
    }
    end = FreemarkerCoreFMParser_LooseDirectiveEnd(self);
    if ([assignments size] == 1) {
      FreemarkerCoreAssignment *a = (FreemarkerCoreAssignment *) check_class_cast([assignments getWithInt:0], [FreemarkerCoreAssignment class]);
      [((FreemarkerCoreAssignment *) nil_chk(a)) setNamespaceExpWithFreemarkerCoreExpression:nsExp];
      [a setLocationWithFreemarkerTemplateTemplate:self->template__ withFreemarkerCoreToken:start withFreemarkerCoreToken:end];
      {
        
#line 1693
        if (![@"" isEqual:nil]) return a;
      }
    }
    else {
      
#line 1695
      FreemarkerCoreAssignmentInstruction *ai = new_FreemarkerCoreAssignmentInstruction_initWithInt_(scope);
      for (jint i = 0; i < [assignments size]; i++) {
        [ai addAssignmentWithFreemarkerCoreAssignment:(FreemarkerCoreAssignment *) check_class_cast([assignments getWithInt:i], [FreemarkerCoreAssignment class])];
      }
      [ai setNamespaceExpWithFreemarkerCoreExpression:nsExp];
      [ai setLocationWithFreemarkerTemplateTemplate:self->template__ withFreemarkerCoreToken:start withFreemarkerCoreToken:end];
      {
        
#line 1701
        if (![@"" isEqual:nil]) return ai;
      }
    }
  }
  else
#line 1703
  if (FreemarkerCoreFMParser_jj_2_130WithInt_(self, 2)) {
    if (FreemarkerCoreFMParser_jj_2_125WithInt_(self, 2)) {
      id_ = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_IN);
      nsExp = FreemarkerCoreFMParser_Expression(self);
      if (scope != FreemarkerCoreAssignment_NAMESPACE) {
        {
          
#line 1708
          @throw new_FreemarkerCoreParseException_initWithNSString_withId_withId_(@"Cannot assign to namespace here.", self->template__, id_);
        }
      }
    }
    else {
      
#line 1711
      ;
    }
    (void) FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_DIRECTIVE_END);
    block = FreemarkerCoreFMParser_OptionalBlock(self);
    if (FreemarkerCoreFMParser_jj_2_126WithInt_(self, 2)) {
      end = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_END_LOCAL);
      if (scope != FreemarkerCoreAssignment_LOCAL) {
        {
          
#line 1718
          @throw new_FreemarkerCoreParseException_initWithNSString_withId_withId_(@"Mismatched assignment tags.", self->template__, end);
        }
      }
    }
    else
#line 1720
    if (FreemarkerCoreFMParser_jj_2_127WithInt_(self, 2)) {
      end = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_END_ASSIGN);
      if (scope != FreemarkerCoreAssignment_NAMESPACE) {
        {
          
#line 1723
          @throw new_FreemarkerCoreParseException_initWithNSString_withId_withId_(@"Mismatched assignment tags.", self->template__, end);
        }
      }
    }
    else
#line 1725
    if (FreemarkerCoreFMParser_jj_2_128WithInt_(self, 2)) {
      end = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_END_GLOBAL);
      if (scope != FreemarkerCoreAssignment_GLOBAL) {
        
#line 1727
        @throw new_FreemarkerCoreParseException_initWithNSString_withId_withId_(
#line 1728
        @"Mismatched assignment tags", self->template__, end);
      }
    }
    else {
      
#line 1730
      (void) FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, -1);
      @throw new_FreemarkerCoreParseException_init();
    }
    FreemarkerCoreBlockAssignment *ba = new_FreemarkerCoreBlockAssignment_initWithFreemarkerCoreTemplateElement_withNSString_withInt_withFreemarkerCoreExpression_(block, varName, scope, nsExp);
    [ba setLocationWithFreemarkerTemplateTemplate:self->template__ withFreemarkerCoreToken:start withFreemarkerCoreToken:end];
    {
      
#line 1735
      if (![@"" isEqual:nil]) return ba;
    }
  }
  else {
    
#line 1737
    (void) FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, -1);
    @throw new_FreemarkerCoreParseException_init();
  }
  @throw new_JavaLangError_initWithNSString_(@"Missing return statement in function");
}


#line 1743
FreemarkerCoreInclude *FreemarkerCoreFMParser_Include(FreemarkerCoreFMParser *self) {
  
#line 1743
  FreemarkerCoreExpression *nameExp;
  FreemarkerCoreToken *att, *start, *end;
  FreemarkerCoreExpression *exp, *parseExp = nil, *encodingExp = nil, *ignoreMissingExp = nil;
  start = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants__INCLUDE);
  nameExp = FreemarkerCoreFMParser_Expression(self);
  if (FreemarkerCoreFMParser_jj_2_131WithInt_(self, 2)) {
    (void) FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_SEMICOLON);
  }
  else {
    
#line 1751
    ;
  }
  
#line 1754
  while (YES) {
    if (FreemarkerCoreFMParser_jj_2_132WithInt_(self, 2)) {
      ;
    }
    else {
      
#line 1758
      goto break_label_10;
    }
    att = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_ID);
    (void) FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_EQUALS);
    exp = FreemarkerCoreFMParser_Expression(self);
    NSString *attString = ((FreemarkerCoreToken *) nil_chk(att))->image_;
    if ([((NSString *) nil_chk(attString)) equalsIgnoreCase:@"parse"]) {
      parseExp = exp;
    }
    else
#line 1766
    if ([attString equalsIgnoreCase:@"encoding"]) {
      encodingExp = exp;
    }
    else
#line 1768
    if ([attString equalsIgnoreCase:@"ignore_missing"] || [attString isEqual:@"ignoreMissing"]) {
      [((FreemarkerCoreFMParserTokenManager *) nil_chk(self->token_source_)) checkNamingConventionWithFreemarkerCoreToken:att];
      ignoreMissingExp = exp;
    }
    else {
      
#line 1772
      NSString *correctedName = [attString isEqual:@"ignoreMissing"] ? @"ignore_missing" : nil;
      {
        
#line 1773
        @throw new_FreemarkerCoreParseException_initWithNSString_withId_withId_(JreStrcat("$$$$", @"Unsupported named #include parameter: \"",
#line 1774
        attString, @"\". Supported parameters are: \"parse\", \"encoding\", \"ignore_missing\".",
#line 1776
        (correctedName == nil ?
#line 1777
        @"" : @" Supporting camelCase parameter names is planned for FreeMarker 2.4.0; check if an update is available, and if it indeed supports camel case.")), self->template__,
#line 1781
        att);
      }
    }
  }
  break_label_10: ;
  
#line 1784
  end = FreemarkerCoreFMParser_LooseDirectiveEnd(self);
  FreemarkerCoreInclude *result = new_FreemarkerCoreInclude_initWithFreemarkerTemplateTemplate_withFreemarkerCoreExpression_withFreemarkerCoreExpression_withFreemarkerCoreExpression_withFreemarkerCoreExpression_(self->template__, nameExp, encodingExp, parseExp, ignoreMissingExp);
  [result setLocationWithFreemarkerTemplateTemplate:self->template__ withFreemarkerCoreToken:start withFreemarkerCoreToken:end];
  {
    
#line 1787
    if (![@"" isEqual:nil]) return result;
  }
  
#line 1788
  @throw new_JavaLangError_initWithNSString_(@"Missing return statement in function");
}


#line 1791
FreemarkerCoreLibraryLoad *FreemarkerCoreFMParser_Import(FreemarkerCoreFMParser *self) {
  
#line 1791
  FreemarkerCoreToken *start, *end, *ns;
  FreemarkerCoreExpression *nameExp;
  start = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_IMPORT);
  nameExp = FreemarkerCoreFMParser_Expression(self);
  (void) FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_AS);
  ns = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_ID);
  end = FreemarkerCoreFMParser_LooseDirectiveEnd(self);
  FreemarkerCoreLibraryLoad *result = new_FreemarkerCoreLibraryLoad_initWithFreemarkerTemplateTemplate_withFreemarkerCoreExpression_withNSString_(self->template__, nameExp, ((FreemarkerCoreToken *) nil_chk(ns))->image_);
  [result setLocationWithFreemarkerTemplateTemplate:self->template__ withFreemarkerCoreToken:start withFreemarkerCoreToken:end];
  [((FreemarkerTemplateTemplate *) nil_chk(self->template__)) addImportWithFreemarkerCoreLibraryLoad:result];
  {
    
#line 1801
    if (![@"" isEqual:nil]) return result;
  }
  
#line 1802
  @throw new_JavaLangError_initWithNSString_(@"Missing return statement in function");
}


#line 1805
FreemarkerCoreMacro *FreemarkerCoreFMParser_Macro(FreemarkerCoreFMParser *self) {
  
#line 1805
  FreemarkerCoreToken *arg, *start, *end;
  FreemarkerCoreExpression *nameExp;
  NSString *name;
  JavaUtilArrayList *argNames = new_JavaUtilArrayList_init();
  JavaUtilHashMap *args = new_JavaUtilHashMap_init();
  JavaUtilArrayList *defNames = new_JavaUtilArrayList_init();
  FreemarkerCoreExpression *defValue = nil;
  id<JavaUtilList> lastIteratorBlockContexts;
  jint lastBreakableDirectiveNesting;
  FreemarkerCoreTemplateElement *block;
  jboolean isFunction = NO, hasDefaults = NO;
  jboolean isCatchAll = NO;
  NSString *catchAll = nil;
  if (FreemarkerCoreFMParser_jj_2_133WithInt_(self, 2)) {
    start = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_MACRO);
  }
  else
#line 1820
  if (FreemarkerCoreFMParser_jj_2_134WithInt_(self, 2)) {
    start = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_FUNCTION);
    isFunction = YES;
  }
  else {
    
#line 1824
    (void) FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, -1);
    @throw new_FreemarkerCoreParseException_init();
  }
  if (self->inMacro_ || self->inFunction_) {
    {
      
#line 1828
      @throw new_FreemarkerCoreParseException_initWithNSString_withId_withId_(@"Macros cannot be nested.", self->template__, start);
    }
  }
  
#line 1830
  if (isFunction) self->inFunction_ = YES;
  else
#line 1830
  self->inMacro_ = YES;
  nameExp = FreemarkerCoreFMParser_IdentifierOrStringLiteral(self);
  name = ([nameExp isKindOfClass:[FreemarkerCoreStringLiteral class]]) ?
#line 1833
  [((FreemarkerCoreStringLiteral *) nil_chk(((FreemarkerCoreStringLiteral *) check_class_cast(nameExp, [FreemarkerCoreStringLiteral class])))) getAsString] :
#line 1834
  [((FreemarkerCoreIdentifier *) nil_chk(((FreemarkerCoreIdentifier *) check_class_cast(nameExp, [FreemarkerCoreIdentifier class])))) getName];
  if (FreemarkerCoreFMParser_jj_2_135WithInt_(self, 2)) {
    (void) FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_OPEN_PAREN);
  }
  else {
    
#line 1838
    ;
  }
  
#line 1841
  while (YES) {
    if (FreemarkerCoreFMParser_jj_2_136WithInt_(self, 2)) {
      ;
    }
    else {
      
#line 1845
      goto break_label_11;
    }
    arg = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_ID);
    defValue = nil;
    if (FreemarkerCoreFMParser_jj_2_137WithInt_(self, 2)) {
      (void) FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_ELLIPSIS);
      isCatchAll = YES;
    }
    else {
      
#line 1853
      ;
    }
    if (FreemarkerCoreFMParser_jj_2_138WithInt_(self, 2)) {
      (void) FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_EQUALS);
      defValue = FreemarkerCoreFMParser_Expression(self);
      [defNames addWithId:((FreemarkerCoreToken *) nil_chk(arg))->image_];
      hasDefaults = YES;
    }
    else {
      
#line 1861
      ;
    }
    if (FreemarkerCoreFMParser_jj_2_139WithInt_(self, 2)) {
      (void) FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_COMMA);
    }
    else {
      
#line 1866
      ;
    }
    if (catchAll != nil) {
      {
        
#line 1869
        @throw new_FreemarkerCoreParseException_initWithNSString_withId_withId_(
#line 1870
        @"There may only be one \"catch-all\" parameter in a macro declaration, and it must be the last parameter.", self->template__,
#line 1871
        arg);
      }
    }
    
#line 1873
    if (isCatchAll) {
      if (defValue != nil) {
        {
          
#line 1875
          @throw new_FreemarkerCoreParseException_initWithNSString_withId_withId_(
#line 1876
          @"\"Catch-all\" macro parameter may not have a default value.", self->template__,
#line 1877
          arg);
        }
      }
      
#line 1879
      catchAll = ((FreemarkerCoreToken *) nil_chk(arg))->image_;
    }
    else {
      
#line 1881
      [argNames addWithId:((FreemarkerCoreToken *) nil_chk(arg))->image_];
      if (hasDefaults && defValue == nil) {
        {
          
#line 1883
          @throw new_FreemarkerCoreParseException_initWithNSString_withId_withId_(@"In a macro declaration, parameters without a default value must all occur before the parameters with default values.", self->template__,
#line 1886
          arg);
        }
      }
      
#line 1888
      (void) [args putWithId:arg->image_ withId:defValue];
    }
  }
  break_label_11: ;
  
#line 1891
  if (FreemarkerCoreFMParser_jj_2_140WithInt_(self, 2)) {
    (void) FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_CLOSE_PAREN);
  }
  else {
    
#line 1894
    ;
  }
  (void) FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_DIRECTIVE_END);
  
#line 1898
  lastIteratorBlockContexts = self->iteratorBlockContexts_;
  self->iteratorBlockContexts_ = nil;
  if (self->incompatibleImprovements_ >= FreemarkerTemplate_TemplateAPI_get_VERSION_INT_2_3_23_()) {
    lastBreakableDirectiveNesting = self->breakableDirectiveNesting_;
    self->breakableDirectiveNesting_ = 0;
  }
  else {
    
#line 1904
    lastBreakableDirectiveNesting = 0;
  }
  block = FreemarkerCoreFMParser_OptionalBlock(self);
  if (FreemarkerCoreFMParser_jj_2_141WithInt_(self, 2)) {
    end = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_END_MACRO);
    if (isFunction) {
      
#line 1909
      @throw new_FreemarkerCoreParseException_initWithNSString_withId_withId_(@"Expected function end tag here.", self->template__, start);
    }
  }
  else
#line 1910
  if (FreemarkerCoreFMParser_jj_2_142WithInt_(self, 2)) {
    end = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_END_FUNCTION);
    if (!isFunction) {
      
#line 1912
      @throw new_FreemarkerCoreParseException_initWithNSString_withId_withId_(@"Expected macro end tag here.", self->template__, start);
    }
  }
  else {
    
#line 1914
    (void) FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, -1);
    @throw new_FreemarkerCoreParseException_init();
  }
  self->iteratorBlockContexts_ = lastIteratorBlockContexts;
  if (self->incompatibleImprovements_ >= FreemarkerTemplate_TemplateAPI_get_VERSION_INT_2_3_23_()) {
    self->breakableDirectiveNesting_ = lastBreakableDirectiveNesting;
  }
  
#line 1922
  self->inMacro_ = self->inFunction_ = NO;
  FreemarkerCoreMacro *result = new_FreemarkerCoreMacro_initWithNSString_withJavaUtilList_withJavaUtilMap_withNSString_withBoolean_withFreemarkerCoreTemplateElement_(name, argNames, args, catchAll, isFunction, block);
  [result setLocationWithFreemarkerTemplateTemplate:self->template__ withFreemarkerCoreToken:start withFreemarkerCoreToken:end];
  [((FreemarkerTemplateTemplate *) nil_chk(self->template__)) addMacroWithFreemarkerCoreMacro:result];
  {
    
#line 1926
    if (![@"" isEqual:nil]) return result;
  }
  
#line 1927
  @throw new_JavaLangError_initWithNSString_(@"Missing return statement in function");
}


#line 1930
FreemarkerCoreCompressedBlock *FreemarkerCoreFMParser_Compress(FreemarkerCoreFMParser *self) {
  
#line 1930
  FreemarkerCoreTemplateElement *block;
  FreemarkerCoreToken *start, *end;
  start = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_COMPRESS);
  block = FreemarkerCoreFMParser_OptionalBlock(self);
  end = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_END_COMPRESS);
  FreemarkerCoreCompressedBlock *cb = new_FreemarkerCoreCompressedBlock_initWithFreemarkerCoreTemplateElement_(block);
  [cb setLocationWithFreemarkerTemplateTemplate:self->template__ withFreemarkerCoreToken:start withFreemarkerCoreToken:end];
  {
    
#line 1937
    if (![@"" isEqual:nil]) return cb;
  }
  
#line 1938
  @throw new_JavaLangError_initWithNSString_(@"Missing return statement in function");
}


#line 1941
FreemarkerCoreTemplateElement *FreemarkerCoreFMParser_UnifiedMacroTransform(FreemarkerCoreFMParser *self) {
  
#line 1941
  FreemarkerCoreToken *start = nil, *end, *t;
  JavaUtilHashMap *namedArgs = nil;
  JavaUtilArrayList *positionalArgs = nil, *bodyParameters = nil;
  FreemarkerCoreExpression *startTagNameExp;
  FreemarkerCoreTemplateElement *nestedBlock = nil;
  FreemarkerCoreExpression *exp;
  jint pushedCtxCount = 0;
  start = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_UNIFIED_CALL);
  exp = FreemarkerCoreFMParser_Expression(self);
  if ([exp isKindOfClass:[FreemarkerCoreIdentifier class]] || ([exp isKindOfClass:[FreemarkerCoreDot class]] && [((FreemarkerCoreDot *) nil_chk(((FreemarkerCoreDot *) check_class_cast(exp, [FreemarkerCoreDot class])))) onlyHasIdentifiers])) {
    startTagNameExp = exp;
  }
  else {
    
#line 1953
    startTagNameExp = nil;
  }
  if (FreemarkerCoreFMParser_jj_2_143WithInt_(self, 2)) {
    (void) FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_TERMINATING_WHITESPACE);
  }
  else {
    
#line 1958
    ;
  }
  if (FreemarkerCoreFMParser_jj_2_144WithInt_(self, 2147483647)) {
    namedArgs = FreemarkerCoreFMParser_NamedArgs(self);
  }
  else {
    
#line 1963
    positionalArgs = FreemarkerCoreFMParser_PositionalArgs(self);
  }
  if (FreemarkerCoreFMParser_jj_2_150WithInt_(self, 2)) {
    (void) FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_SEMICOLON);
    bodyParameters = new_JavaUtilArrayList_initWithInt_(4);
    if (FreemarkerCoreFMParser_jj_2_149WithInt_(self, 2)) {
      if (FreemarkerCoreFMParser_jj_2_145WithInt_(self, 2)) {
        (void) FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_TERMINATING_WHITESPACE);
      }
      else {
        
#line 1972
        ;
      }
      t = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_ID);
      [bodyParameters addWithId:((FreemarkerCoreToken *) nil_chk(t))->image_];
      
#line 1977
      while (YES) {
        if (FreemarkerCoreFMParser_jj_2_146WithInt_(self, 2)) {
          ;
        }
        else {
          
#line 1981
          goto break_label_12;
        }
        if (FreemarkerCoreFMParser_jj_2_147WithInt_(self, 2)) {
          (void) FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_TERMINATING_WHITESPACE);
        }
        else {
          
#line 1986
          ;
        }
        (void) FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_COMMA);
        if (FreemarkerCoreFMParser_jj_2_148WithInt_(self, 2)) {
          (void) FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_TERMINATING_WHITESPACE);
        }
        else {
          
#line 1992
          ;
        }
        t = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_ID);
        [bodyParameters addWithId:((FreemarkerCoreToken *) nil_chk(t))->image_];
      }
      break_label_12: ;
    }
    else {
      
#line 1998
      ;
    }
  }
  else {
    
#line 2001
    ;
  }
  if (FreemarkerCoreFMParser_jj_2_151WithInt_(self, 2)) {
    end = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_EMPTY_DIRECTIVE_END);
  }
  else
#line 2005
  if (FreemarkerCoreFMParser_jj_2_152WithInt_(self, 2)) {
    (void) FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_DIRECTIVE_END);
    if (bodyParameters != nil && self->iteratorBlockContexts_ != nil && ![self->iteratorBlockContexts_ isEmpty]) {
      
#line 2009
      jint ctxsLen = [self->iteratorBlockContexts_ size];
      jint bodyParsLen = [bodyParameters size];
      for (jint bodyParIdx = 0; bodyParIdx < bodyParsLen; bodyParIdx++) {
        NSString *bodyParName = (NSString *) check_class_cast([bodyParameters getWithInt:bodyParIdx], [NSString class]);
        for (jint ctxIdx = ctxsLen - 1; ctxIdx >= 0; ctxIdx--) {
          FreemarkerCoreFMParser_ParserIteratorBlockContext *ctx =
#line 2015
          (FreemarkerCoreFMParser_ParserIteratorBlockContext *) check_class_cast([self->iteratorBlockContexts_ getWithInt:ctxIdx], [FreemarkerCoreFMParser_ParserIteratorBlockContext class]);
          if (((FreemarkerCoreFMParser_ParserIteratorBlockContext *) nil_chk(ctx))->loopVarName_ != nil && [ctx->loopVarName_ isEqual:bodyParName]) {
            
#line 2018
            if (ctx->kind_ != FreemarkerCoreFMParser_ITERATOR_BLOCK_KIND_USER_DIRECTIVE) {
              FreemarkerCoreFMParser_ParserIteratorBlockContext *shadowingCtx = FreemarkerCoreFMParser_pushIteratorBlockContext(self);
              ((FreemarkerCoreFMParser_ParserIteratorBlockContext *) nil_chk(shadowingCtx))->loopVarName_ = bodyParName;
              shadowingCtx->kind_ = FreemarkerCoreFMParser_ITERATOR_BLOCK_KIND_USER_DIRECTIVE;
              pushedCtxCount++;
            }
            goto break_walkCtxSack;
          }
        }
        break_walkCtxSack: ;
      }
    }
    
#line 2029
    nestedBlock = FreemarkerCoreFMParser_OptionalBlock(self);
    end = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_UNIFIED_CALL_END);
    for (jint i = 0; i < pushedCtxCount; i++) {
      FreemarkerCoreFMParser_popIteratorBlockContext(self);
    }
    
#line 2035
    NSString *endTagName = [((NSString *) nil_chk([((FreemarkerCoreToken *) nil_chk(end))->image_ substring:3 endIndex:((jint) [((NSString *) nil_chk(end->image_)) length]) - 1])) trim];
    if (((jint) [((NSString *) nil_chk(endTagName)) length]) > 0) {
      if (startTagNameExp == nil) {
        {
          
#line 2038
          @throw new_FreemarkerCoreParseException_initWithNSString_withId_withId_(@"Expecting </@>", self->template__, end);
        }
      }
      else {
        
#line 2040
        NSString *startTagName = [startTagNameExp getCanonicalForm];
        if (![endTagName isEqual:startTagName]) {
          {
            
#line 2042
            @throw new_FreemarkerCoreParseException_initWithNSString_withId_withId_(JreStrcat("$$C", @"Expecting </@> or </@", startTagName, '>'), self->template__, end);
          }
        }
      }
    }
  }
  else {
    
#line 2047
    (void) FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, -1);
    @throw new_FreemarkerCoreParseException_init();
  }
  FreemarkerCoreTemplateElement *result = (positionalArgs != nil) ? new_FreemarkerCoreUnifiedCall_initWithFreemarkerCoreExpression_withJavaUtilList_withFreemarkerCoreTemplateElement_withJavaUtilList_(
#line 2051
  exp, positionalArgs, nestedBlock, bodyParameters) : new_FreemarkerCoreUnifiedCall_initWithFreemarkerCoreExpression_withJavaUtilMap_withFreemarkerCoreTemplateElement_withJavaUtilList_(
#line 2052
  exp, namedArgs, nestedBlock, bodyParameters);
  [result setLocationWithFreemarkerTemplateTemplate:self->template__ withFreemarkerCoreToken:start withFreemarkerCoreToken:end];
  {
    
#line 2054
    if (![@"" isEqual:nil]) return result;
  }
  
#line 2055
  @throw new_JavaLangError_initWithNSString_(@"Missing return statement in function");
}


#line 2058
FreemarkerCoreTemplateElement *FreemarkerCoreFMParser_Call(FreemarkerCoreFMParser *self) {
  
#line 2058
  FreemarkerCoreToken *start, *end, *id_;
  JavaUtilHashMap *namedArgs = nil;
  JavaUtilArrayList *positionalArgs = nil;
  NSString *macroName = nil;
  start = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_CALL);
  id_ = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_ID);
  macroName = ((FreemarkerCoreToken *) nil_chk(id_))->image_;
  if (FreemarkerCoreFMParser_jj_2_155WithInt_(self, 2147483647)) {
    namedArgs = FreemarkerCoreFMParser_NamedArgs(self);
  }
  else {
    
#line 2068
    if (FreemarkerCoreFMParser_jj_2_153WithInt_(self, 2147483647)) {
      (void) FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_OPEN_PAREN);
    }
    else {
      
#line 2071
      ;
    }
    positionalArgs = FreemarkerCoreFMParser_PositionalArgs(self);
    if (FreemarkerCoreFMParser_jj_2_154WithInt_(self, 2)) {
      (void) FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_CLOSE_PAREN);
    }
    else {
      
#line 2077
      ;
    }
  }
  end = FreemarkerCoreFMParser_LooseDirectiveEnd(self);
  FreemarkerCoreUnifiedCall *result = nil;
  if (positionalArgs != nil) {
    result = new_FreemarkerCoreUnifiedCall_initWithFreemarkerCoreExpression_withJavaUtilList_withFreemarkerCoreTemplateElement_withJavaUtilList_(new_FreemarkerCoreIdentifier_initWithNSString_(macroName), positionalArgs, nil, nil);
  }
  else {
    
#line 2085
    result = new_FreemarkerCoreUnifiedCall_initWithFreemarkerCoreExpression_withJavaUtilMap_withFreemarkerCoreTemplateElement_withJavaUtilList_(new_FreemarkerCoreIdentifier_initWithNSString_(macroName), namedArgs, nil, nil);
  }
  ((FreemarkerCoreUnifiedCall *) nil_chk(result))->legacySyntax_ = YES;
  [result setLocationWithFreemarkerTemplateTemplate:self->template__ withFreemarkerCoreToken:start withFreemarkerCoreToken:end];
  {
    
#line 2089
    if (![@"" isEqual:nil]) return result;
  }
  
#line 2090
  @throw new_JavaLangError_initWithNSString_(@"Missing return statement in function");
}


#line 2093
JavaUtilHashMap *FreemarkerCoreFMParser_NamedArgs(FreemarkerCoreFMParser *self) {
  
#line 2093
  JavaUtilHashMap *result = new_JavaUtilHashMap_init();
  FreemarkerCoreToken *t;
  FreemarkerCoreExpression *exp;
  
#line 2097
  while (YES) {
    t = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_ID);
    (void) FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_EQUALS);
    [((FreemarkerCoreFMParserTokenManager *) nil_chk(self->token_source_)) SwitchToWithInt:FreemarkerCoreFMParserConstants_NAMED_PARAMETER_EXPRESSION];
    self->token_source_->inInvocation_ = YES;
    exp = FreemarkerCoreFMParser_Expression(self);
    (void) [result putWithId:((FreemarkerCoreToken *) nil_chk(t))->image_ withId:exp];
    if (FreemarkerCoreFMParser_jj_2_156WithInt_(self, 2)) {
      ;
    }
    else {
      
#line 2107
      goto break_label_13;
    }
  }
  break_label_13: ;
  
#line 2110
  ((FreemarkerCoreFMParserTokenManager *) nil_chk(self->token_source_))->inInvocation_ = NO;
  {
    
#line 2111
    if (![@"" isEqual:nil]) return result;
  }
  
#line 2112
  @throw new_JavaLangError_initWithNSString_(@"Missing return statement in function");
}


#line 2115
JavaUtilArrayList *FreemarkerCoreFMParser_PositionalArgs(FreemarkerCoreFMParser *self) {
  
#line 2115
  JavaUtilArrayList *result = new_JavaUtilArrayList_init();
  FreemarkerCoreExpression *arg;
  if (FreemarkerCoreFMParser_jj_2_159WithInt_(self, 2)) {
    arg = FreemarkerCoreFMParser_Expression(self);
    [result addWithId:arg];
    
#line 2121
    while (YES) {
      if (FreemarkerCoreFMParser_jj_2_157WithInt_(self, 2)) {
        ;
      }
      else {
        
#line 2125
        goto break_label_14;
      }
      if (FreemarkerCoreFMParser_jj_2_158WithInt_(self, 2)) {
        (void) FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_COMMA);
      }
      else {
        
#line 2130
        ;
      }
      arg = FreemarkerCoreFMParser_Expression(self);
      [result addWithId:arg];
    }
    break_label_14: ;
  }
  else {
    
#line 2136
    ;
  }
  {
    
#line 2138
    if (![@"" isEqual:nil]) return result;
  }
  
#line 2139
  @throw new_JavaLangError_initWithNSString_(@"Missing return statement in function");
}


#line 2142
FreemarkerCoreComment *FreemarkerCoreFMParser_Comment(FreemarkerCoreFMParser *self) {
  
#line 2142
  FreemarkerCoreToken *start, *end;
  JavaLangStringBuffer *buf = new_JavaLangStringBuffer_init();
  if (FreemarkerCoreFMParser_jj_2_160WithInt_(self, 2)) {
    start = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_COMMENT);
  }
  else
#line 2146
  if (FreemarkerCoreFMParser_jj_2_161WithInt_(self, 2)) {
    start = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_TERSE_COMMENT);
  }
  else {
    
#line 2149
    (void) FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, -1);
    @throw new_FreemarkerCoreParseException_init();
  }
  end = FreemarkerCoreFMParser_UnparsedContentWithFreemarkerCoreToken_withJavaLangStringBuffer_(self, start, buf);
  FreemarkerCoreComment *result = new_FreemarkerCoreComment_initWithNSString_([buf description]);
  [result setLocationWithFreemarkerTemplateTemplate:self->template__ withFreemarkerCoreToken:start withFreemarkerCoreToken:end];
  {
    
#line 2155
    if (![@"" isEqual:nil]) return result;
  }
  
#line 2156
  @throw new_JavaLangError_initWithNSString_(@"Missing return statement in function");
}


#line 2159
FreemarkerCoreTextBlock *FreemarkerCoreFMParser_NoParse(FreemarkerCoreFMParser *self) {
  
#line 2159
  FreemarkerCoreToken *start, *end;
  JavaLangStringBuffer *buf = new_JavaLangStringBuffer_init();
  start = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_NOPARSE);
  end = FreemarkerCoreFMParser_UnparsedContentWithFreemarkerCoreToken_withJavaLangStringBuffer_(self, start, buf);
  FreemarkerCoreTextBlock *result = new_FreemarkerCoreTextBlock_initWithNSString_withBoolean_([buf description], YES);
  [result setLocationWithFreemarkerTemplateTemplate:self->template__ withFreemarkerCoreToken:start withFreemarkerCoreToken:end];
  {
    
#line 2165
    if (![@"" isEqual:nil]) return result;
  }
  
#line 2166
  @throw new_JavaLangError_initWithNSString_(@"Missing return statement in function");
}


#line 2169
FreemarkerCoreTransformBlock *FreemarkerCoreFMParser_Transform(FreemarkerCoreFMParser *self) {
  
#line 2169
  FreemarkerCoreToken *start, *end, *argName;
  FreemarkerCoreExpression *exp, *argExp;
  FreemarkerCoreTemplateElement *content = nil;
  JavaUtilHashMap *args = nil;
  start = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_TRANSFORM);
  exp = FreemarkerCoreFMParser_Expression(self);
  if (FreemarkerCoreFMParser_jj_2_162WithInt_(self, 2)) {
    (void) FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_SEMICOLON);
  }
  else {
    
#line 2178
    ;
  }
  
#line 2181
  while (YES) {
    if (FreemarkerCoreFMParser_jj_2_163WithInt_(self, 2)) {
      ;
    }
    else {
      
#line 2185
      goto break_label_15;
    }
    argName = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_ID);
    (void) FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_EQUALS);
    argExp = FreemarkerCoreFMParser_Expression(self);
    if (args == nil) args = new_JavaUtilHashMap_init();
    (void) [((JavaUtilHashMap *) nil_chk(args)) putWithId:((FreemarkerCoreToken *) nil_chk(argName))->image_ withId:argExp];
  }
  break_label_15: ;
  
#line 2193
  if (FreemarkerCoreFMParser_jj_2_164WithInt_(self, 2)) {
    end = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_EMPTY_DIRECTIVE_END);
  }
  else
#line 2195
  if (FreemarkerCoreFMParser_jj_2_165WithInt_(self, 2)) {
    (void) FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_DIRECTIVE_END);
    content = FreemarkerCoreFMParser_OptionalBlock(self);
    end = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_END_TRANSFORM);
  }
  else {
    
#line 2200
    (void) FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, -1);
    @throw new_FreemarkerCoreParseException_init();
  }
  FreemarkerCoreTransformBlock *result = new_FreemarkerCoreTransformBlock_initWithFreemarkerCoreExpression_withJavaUtilMap_withFreemarkerCoreTemplateElement_(exp, args, content);
  [result setLocationWithFreemarkerTemplateTemplate:self->template__ withFreemarkerCoreToken:start withFreemarkerCoreToken:end];
  {
    
#line 2205
    if (![@"" isEqual:nil]) return result;
  }
  
#line 2206
  @throw new_JavaLangError_initWithNSString_(@"Missing return statement in function");
}


#line 2209
FreemarkerCoreSwitchBlock *FreemarkerCoreFMParser_Switch(FreemarkerCoreFMParser *self) {
  
#line 2209
  FreemarkerCoreSwitchBlock *switchBlock;
  FreemarkerCoreCase *caseIns;
  FreemarkerCoreExpression *switchExp;
  FreemarkerCoreToken *start, *end;
  jboolean defaultFound = NO;
  start = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_SWITCH);
  switchExp = FreemarkerCoreFMParser_Expression(self);
  (void) FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_DIRECTIVE_END);
  self->breakableDirectiveNesting_++;
  switchBlock = new_FreemarkerCoreSwitchBlock_initWithFreemarkerCoreExpression_(switchExp);
  
#line 2220
  while (YES) {
    if (FreemarkerCoreFMParser_jj_2_166WithInt_(self, 2)) {
      ;
    }
    else {
      
#line 2224
      goto break_label_16;
    }
    caseIns = FreemarkerCoreFMParser_Case(self);
    if (((FreemarkerCoreCase *) nil_chk(caseIns))->condition_ == nil) {
      if (defaultFound) {
        {
          
#line 2229
          @throw new_FreemarkerCoreParseException_initWithNSString_withId_withId_(
#line 2230
          @"You can only have one default case in a switch statement", self->template__, start);
        }
      }
      
#line 2232
      defaultFound = YES;
    }
    [switchBlock addCaseWithFreemarkerCoreCase:caseIns];
  }
  break_label_16: ;
  
#line 2236
  if (FreemarkerCoreFMParser_jj_2_167WithInt_(self, 2)) {
    (void) FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_STATIC_TEXT_WS);
  }
  else {
    
#line 2239
    ;
  }
  end = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_END_SWITCH);
  self->breakableDirectiveNesting_--;
  [switchBlock setLocationWithFreemarkerTemplateTemplate:self->template__ withFreemarkerCoreToken:start withFreemarkerCoreToken:end];
  {
    
#line 2244
    if (![@"" isEqual:nil]) return switchBlock;
  }
  
#line 2245
  @throw new_JavaLangError_initWithNSString_(@"Missing return statement in function");
}


#line 2248
FreemarkerCoreCase *FreemarkerCoreFMParser_Case(FreemarkerCoreFMParser *self) {
  
#line 2248
  FreemarkerCoreExpression *exp;
  FreemarkerCoreTemplateElement *block;
  FreemarkerCoreToken *start;
  if (FreemarkerCoreFMParser_jj_2_168WithInt_(self, 2)) {
    (void) FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_STATIC_TEXT_WS);
  }
  else {
    
#line 2254
    ;
  }
  if (FreemarkerCoreFMParser_jj_2_169WithInt_(self, 2)) {
    start = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_CASE);
    exp = FreemarkerCoreFMParser_Expression(self);
    (void) FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_DIRECTIVE_END);
  }
  else
#line 2260
  if (FreemarkerCoreFMParser_jj_2_170WithInt_(self, 2)) {
    start = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_DEFAUL);
    exp = nil;
  }
  else {
    
#line 2264
    (void) FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, -1);
    @throw new_FreemarkerCoreParseException_init();
  }
  block = FreemarkerCoreFMParser_OptionalBlock(self);
  FreemarkerCoreCase *result = new_FreemarkerCoreCase_initWithFreemarkerCoreExpression_withFreemarkerCoreTemplateElement_(exp, block);
  [result setLocationWithFreemarkerTemplateTemplate:self->template__ withFreemarkerCoreToken:start withFreemarkerCoreTemplateObject:block];
  {
    
#line 2270
    if (![@"" isEqual:nil]) return result;
  }
  
#line 2271
  @throw new_JavaLangError_initWithNSString_(@"Missing return statement in function");
}


#line 2274
FreemarkerCoreEscapeBlock *FreemarkerCoreFMParser_Escape(FreemarkerCoreFMParser *self) {
  
#line 2274
  FreemarkerCoreToken *variable, *start, *end;
  FreemarkerCoreExpression *escapeExpr;
  FreemarkerCoreTemplateElement *content;
  start = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_ESCAPE);
  variable = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_ID);
  (void) FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_AS);
  escapeExpr = FreemarkerCoreFMParser_Expression(self);
  (void) FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_DIRECTIVE_END);
  FreemarkerCoreEscapeBlock *result = new_FreemarkerCoreEscapeBlock_initWithNSString_withFreemarkerCoreExpression_withFreemarkerCoreExpression_(((FreemarkerCoreToken *) nil_chk(variable))->image_, escapeExpr, FreemarkerCoreFMParser_escapedExpressionWithFreemarkerCoreExpression_(self, escapeExpr));
  [((JavaUtilLinkedList *) nil_chk(self->escapes_)) addFirstWithId:result];
  content = FreemarkerCoreFMParser_OptionalBlock(self);
  [result setContentWithFreemarkerCoreTemplateElement:content];
  (void) [self->escapes_ removeFirst];
  end = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_END_ESCAPE);
  [result setLocationWithFreemarkerTemplateTemplate:self->template__ withFreemarkerCoreToken:start withFreemarkerCoreToken:end];
  {
    
#line 2289
    if (![@"" isEqual:nil]) return result;
  }
  
#line 2290
  @throw new_JavaLangError_initWithNSString_(@"Missing return statement in function");
}


#line 2293
FreemarkerCoreNoEscapeBlock *FreemarkerCoreFMParser_NoEscape(FreemarkerCoreFMParser *self) {
  
#line 2293
  FreemarkerCoreToken *start, *end;
  FreemarkerCoreTemplateElement *content;
  start = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_NOESCAPE);
  if ([((JavaUtilLinkedList *) nil_chk(self->escapes_)) isEmpty]) {
    {
      
#line 2297
      @throw new_FreemarkerCoreParseException_initWithNSString_withId_withId_(@"#noescape with no matching #escape encountered.", self->template__, start);
    }
  }
  
#line 2299
  id escape = [self->escapes_ removeFirst];
  content = FreemarkerCoreFMParser_OptionalBlock(self);
  end = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_END_NOESCAPE);
  [self->escapes_ addFirstWithId:escape];
  FreemarkerCoreNoEscapeBlock *result = new_FreemarkerCoreNoEscapeBlock_initWithFreemarkerCoreTemplateElement_(content);
  [result setLocationWithFreemarkerTemplateTemplate:self->template__ withFreemarkerCoreToken:start withFreemarkerCoreToken:end];
  {
    
#line 2305
    if (![@"" isEqual:nil]) return result;
  }
  
#line 2306
  @throw new_JavaLangError_initWithNSString_(@"Missing return statement in function");
}


#line 2312
FreemarkerCoreToken *FreemarkerCoreFMParser_LooseDirectiveEnd(FreemarkerCoreFMParser *self) {
  
#line 2312
  FreemarkerCoreToken *t;
  if (FreemarkerCoreFMParser_jj_2_171WithInt_(self, 2)) {
    t = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_DIRECTIVE_END);
  }
  else
#line 2315
  if (FreemarkerCoreFMParser_jj_2_172WithInt_(self, 2)) {
    t = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_EMPTY_DIRECTIVE_END);
  }
  else {
    
#line 2318
    (void) FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, -1);
    @throw new_FreemarkerCoreParseException_init();
  }
  {
    
#line 2321
    if (![@"" isEqual:nil]) return t;
  }
  
#line 2322
  @throw new_JavaLangError_initWithNSString_(@"Missing return statement in function");
}


#line 2325
FreemarkerCorePropertySetting *FreemarkerCoreFMParser_Setting(FreemarkerCoreFMParser *self) {
  
#line 2325
  FreemarkerCoreToken *start, *end, *key;
  FreemarkerCoreExpression *value;
  start = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_SETTING);
  key = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_ID);
  (void) FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_EQUALS);
  value = FreemarkerCoreFMParser_Expression(self);
  end = FreemarkerCoreFMParser_LooseDirectiveEnd(self);
  [((FreemarkerCoreFMParserTokenManager *) nil_chk(self->token_source_)) checkNamingConventionWithFreemarkerCoreToken:key];
  FreemarkerCorePropertySetting *result = new_FreemarkerCorePropertySetting_initWithFreemarkerCoreToken_withFreemarkerCoreFMParserTokenManager_withFreemarkerCoreExpression_withFreemarkerTemplateConfiguration_(key, self->token_source_, value, [((FreemarkerTemplateTemplate *) nil_chk(self->template__)) getConfiguration]);
  [result setLocationWithFreemarkerTemplateTemplate:self->template__ withFreemarkerCoreToken:start withFreemarkerCoreToken:end];
  {
    
#line 2335
    if (![@"" isEqual:nil]) return result;
  }
  
#line 2336
  @throw new_JavaLangError_initWithNSString_(@"Missing return statement in function");
}


#line 2342
FreemarkerCoreTemplateElement *FreemarkerCoreFMParser_FreemarkerDirective(FreemarkerCoreFMParser *self) {
  
#line 2342
  FreemarkerCoreTemplateElement *tp;
  if (FreemarkerCoreFMParser_jj_2_173WithInt_(self, 2)) {
    tp = FreemarkerCoreFMParser_If(self);
  }
  else
#line 2345
  if (FreemarkerCoreFMParser_jj_2_174WithInt_(self, 2)) {
    tp = FreemarkerCoreFMParser_List(self);
  }
  else
#line 2347
  if (FreemarkerCoreFMParser_jj_2_175WithInt_(self, 2)) {
    tp = FreemarkerCoreFMParser_ForEach(self);
  }
  else
#line 2349
  if (FreemarkerCoreFMParser_jj_2_176WithInt_(self, 2)) {
    tp = FreemarkerCoreFMParser_Assign(self);
  }
  else
#line 2351
  if (FreemarkerCoreFMParser_jj_2_177WithInt_(self, 2)) {
    tp = FreemarkerCoreFMParser_Include(self);
  }
  else
#line 2353
  if (FreemarkerCoreFMParser_jj_2_178WithInt_(self, 2)) {
    tp = FreemarkerCoreFMParser_Import(self);
  }
  else
#line 2355
  if (FreemarkerCoreFMParser_jj_2_179WithInt_(self, 2)) {
    tp = FreemarkerCoreFMParser_Macro(self);
  }
  else
#line 2357
  if (FreemarkerCoreFMParser_jj_2_180WithInt_(self, 2)) {
    tp = FreemarkerCoreFMParser_Compress(self);
  }
  else
#line 2359
  if (FreemarkerCoreFMParser_jj_2_181WithInt_(self, 2)) {
    tp = FreemarkerCoreFMParser_UnifiedMacroTransform(self);
  }
  else
#line 2361
  if (FreemarkerCoreFMParser_jj_2_182WithInt_(self, 2)) {
    tp = FreemarkerCoreFMParser_Items(self);
  }
  else
#line 2363
  if (FreemarkerCoreFMParser_jj_2_183WithInt_(self, 2)) {
    tp = FreemarkerCoreFMParser_Sep(self);
  }
  else
#line 2365
  if (FreemarkerCoreFMParser_jj_2_184WithInt_(self, 2)) {
    tp = FreemarkerCoreFMParser_Call(self);
  }
  else
#line 2367
  if (FreemarkerCoreFMParser_jj_2_185WithInt_(self, 2)) {
    tp = FreemarkerCoreFMParser_Comment(self);
  }
  else
#line 2369
  if (FreemarkerCoreFMParser_jj_2_186WithInt_(self, 2)) {
    tp = FreemarkerCoreFMParser_NoParse(self);
  }
  else
#line 2371
  if (FreemarkerCoreFMParser_jj_2_187WithInt_(self, 2)) {
    tp = FreemarkerCoreFMParser_Transform(self);
  }
  else
#line 2373
  if (FreemarkerCoreFMParser_jj_2_188WithInt_(self, 2)) {
    tp = FreemarkerCoreFMParser_Switch(self);
  }
  else
#line 2375
  if (FreemarkerCoreFMParser_jj_2_189WithInt_(self, 2)) {
    tp = FreemarkerCoreFMParser_Setting(self);
  }
  else
#line 2377
  if (FreemarkerCoreFMParser_jj_2_190WithInt_(self, 2)) {
    tp = FreemarkerCoreFMParser_Break(self);
  }
  else
#line 2379
  if (FreemarkerCoreFMParser_jj_2_191WithInt_(self, 2)) {
    tp = FreemarkerCoreFMParser_Return(self);
  }
  else
#line 2381
  if (FreemarkerCoreFMParser_jj_2_192WithInt_(self, 2)) {
    tp = FreemarkerCoreFMParser_Stop(self);
  }
  else
#line 2383
  if (FreemarkerCoreFMParser_jj_2_193WithInt_(self, 2)) {
    tp = FreemarkerCoreFMParser_Flush(self);
  }
  else
#line 2385
  if (FreemarkerCoreFMParser_jj_2_194WithInt_(self, 2)) {
    tp = FreemarkerCoreFMParser_Trim(self);
  }
  else
#line 2387
  if (FreemarkerCoreFMParser_jj_2_195WithInt_(self, 2)) {
    tp = FreemarkerCoreFMParser_Nested(self);
  }
  else
#line 2389
  if (FreemarkerCoreFMParser_jj_2_196WithInt_(self, 2)) {
    tp = FreemarkerCoreFMParser_Escape(self);
  }
  else
#line 2391
  if (FreemarkerCoreFMParser_jj_2_197WithInt_(self, 2)) {
    tp = FreemarkerCoreFMParser_NoEscape(self);
  }
  else
#line 2393
  if (FreemarkerCoreFMParser_jj_2_198WithInt_(self, 2)) {
    tp = FreemarkerCoreFMParser_Visit(self);
  }
  else
#line 2395
  if (FreemarkerCoreFMParser_jj_2_199WithInt_(self, 2)) {
    tp = FreemarkerCoreFMParser_Recurse(self);
  }
  else
#line 2397
  if (FreemarkerCoreFMParser_jj_2_200WithInt_(self, 2)) {
    tp = FreemarkerCoreFMParser_FallBack(self);
  }
  else
#line 2399
  if (FreemarkerCoreFMParser_jj_2_201WithInt_(self, 2)) {
    tp = FreemarkerCoreFMParser_Attempt(self);
  }
  else {
    
#line 2402
    (void) FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, -1);
    @throw new_FreemarkerCoreParseException_init();
  }
  {
    
#line 2405
    if (![@"" isEqual:nil]) return tp;
  }
  
#line 2406
  @throw new_JavaLangError_initWithNSString_(@"Missing return statement in function");
}


#line 2414
FreemarkerCoreTextBlock *FreemarkerCoreFMParser_PCData(FreemarkerCoreFMParser *self) {
  
#line 2414
  JavaLangStringBuffer *buf = new_JavaLangStringBuffer_init();
  FreemarkerCoreToken *t = nil, *start = nil, *prevToken = nil;
  
#line 2417
  while (YES) {
    if (FreemarkerCoreFMParser_jj_2_202WithInt_(self, 2)) {
      prevToken = t;
      t = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_STATIC_TEXT_WS);
    }
    else
#line 2421
    if (FreemarkerCoreFMParser_jj_2_203WithInt_(self, 2)) {
      t = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_STATIC_TEXT_NON_WS);
    }
    else
#line 2423
    if (FreemarkerCoreFMParser_jj_2_204WithInt_(self, 2)) {
      t = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_STATIC_TEXT_FALSE_ALARM);
    }
    else {
      
#line 2426
      (void) FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, -1);
      @throw new_FreemarkerCoreParseException_init();
    }
    (void) [buf appendWithNSString:((FreemarkerCoreToken *) nil_chk(t))->image_];
    if (start == nil) start = t;
    if (prevToken != nil) prevToken->next_ = nil;
    if (FreemarkerCoreFMParser_jj_2_205WithInt_(self, 2147483647)) {
      ;
    }
    else {
      
#line 2435
      goto break_label_17;
    }
  }
  break_label_17: ;
  
#line 2438
  if (self->stripText_ && self->mixedContentNesting_ == 1) {
    
#line 2438
    if (![@"" isEqual:nil]) return FreemarkerCoreTextBlock_get_EMPTY_BLOCK_();
  }
  FreemarkerCoreTextBlock *result = new_FreemarkerCoreTextBlock_initWithNSString_withBoolean_([buf description], NO);
  [result setLocationWithFreemarkerTemplateTemplate:self->template__ withFreemarkerCoreToken:start withFreemarkerCoreToken:t];
  {
    
#line 2442
    if (![@"" isEqual:nil]) return result;
  }
  
#line 2443
  @throw new_JavaLangError_initWithNSString_(@"Missing return statement in function");
}


#line 2452
FreemarkerCoreToken *FreemarkerCoreFMParser_UnparsedContentWithFreemarkerCoreToken_withJavaLangStringBuffer_(FreemarkerCoreFMParser *self, FreemarkerCoreToken *start, JavaLangStringBuffer *buf) {
  
#line 2452
  FreemarkerCoreToken *t;
  
#line 2454
  while (YES) {
    if (FreemarkerCoreFMParser_jj_2_206WithInt_(self, 2)) {
      t = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_KEEP_GOING);
    }
    else
#line 2457
    if (FreemarkerCoreFMParser_jj_2_207WithInt_(self, 2)) {
      t = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_MAYBE_END);
    }
    else
#line 2459
    if (FreemarkerCoreFMParser_jj_2_208WithInt_(self, 2)) {
      t = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_TERSE_COMMENT_END);
    }
    else
#line 2461
    if (FreemarkerCoreFMParser_jj_2_209WithInt_(self, 2)) {
      t = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_LONE_LESS_THAN_OR_DASH);
    }
    else {
      
#line 2464
      (void) FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, -1);
      @throw new_FreemarkerCoreParseException_init();
    }
    (void) [((JavaLangStringBuffer *) nil_chk(buf)) appendWithNSString:((FreemarkerCoreToken *) nil_chk(t))->image_];
    if (FreemarkerCoreFMParser_jj_2_210WithInt_(self, 2)) {
      ;
    }
    else {
      
#line 2471
      goto break_label_18;
    }
  }
  break_label_18: ;
  
#line 2474
  [buf setLengthWithInt:[((JavaLangStringBuffer *) nil_chk(buf)) length] - ((jint) [((NSString *) nil_chk(((FreemarkerCoreToken *) nil_chk(t))->image_)) length])];
  if (![t->image_ hasSuffix:@";"] &&
#line 2476
  FreemarkerTemplate_TemplateAPI_getTemplateLanguageVersionAsIntWithFreemarkerTemplateTemplate_(self->template__) >= FreemarkerTemplate_TemplateAPI_get_VERSION_INT_2_3_21_()) {
    {
      
#line 2477
      @throw new_FreemarkerCoreParseException_initWithNSString_withId_withId_(JreStrcat("$$C", @"Unclosed \"", ((FreemarkerCoreToken *) nil_chk(start))->image_, '"'), self->template__, start);
    }
  }
  {
    
#line 2479
    if (![@"" isEqual:nil]) return t;
  }
  
#line 2480
  @throw new_JavaLangError_initWithNSString_(@"Missing return statement in function");
}


#line 2483
FreemarkerCoreMixedContent *FreemarkerCoreFMParser_MixedContent(FreemarkerCoreFMParser *self) {
  
#line 2483
  FreemarkerCoreMixedContent *mixedContent = new_FreemarkerCoreMixedContent_init();
  FreemarkerCoreTemplateElement *elem, *begin = nil;
  self->mixedContentNesting_++;
  
#line 2487
  while (YES) {
    if (FreemarkerCoreFMParser_jj_2_211WithInt_(self, 2)) {
      elem = FreemarkerCoreFMParser_PCData(self);
    }
    else
#line 2490
    if (FreemarkerCoreFMParser_jj_2_212WithInt_(self, 2)) {
      elem = FreemarkerCoreFMParser_StringOutput(self);
    }
    else
#line 2492
    if (FreemarkerCoreFMParser_jj_2_213WithInt_(self, 2)) {
      elem = FreemarkerCoreFMParser_NumericalOutput(self);
    }
    else
#line 2494
    if (FreemarkerCoreFMParser_jj_2_214WithInt_(self, 2)) {
      elem = FreemarkerCoreFMParser_FreemarkerDirective(self);
    }
    else {
      
#line 2497
      (void) FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, -1);
      @throw new_FreemarkerCoreParseException_init();
    }
    if (begin == nil) {
      begin = elem;
    }
    [mixedContent addElementWithFreemarkerCoreTemplateElement:elem];
    switch ((self->jj_ntk_ == -1) ? FreemarkerCoreFMParser_jj_ntk_f(self) : self->jj_ntk_) {
      case FreemarkerCoreFMParserConstants_ATTEMPT:
      case FreemarkerCoreFMParserConstants_IF:
      case FreemarkerCoreFMParserConstants_LIST:
      case FreemarkerCoreFMParserConstants_ITEMS:
      case FreemarkerCoreFMParserConstants_SEP:
      case FreemarkerCoreFMParserConstants_FOREACH:
      case FreemarkerCoreFMParserConstants_SWITCH:
      case FreemarkerCoreFMParserConstants_ASSIGN:
      case FreemarkerCoreFMParserConstants_GLOBALASSIGN:
      case FreemarkerCoreFMParserConstants_LOCALASSIGN:
      case FreemarkerCoreFMParserConstants__INCLUDE:
      case FreemarkerCoreFMParserConstants_IMPORT:
      case FreemarkerCoreFMParserConstants_FUNCTION:
      case FreemarkerCoreFMParserConstants_MACRO:
      case FreemarkerCoreFMParserConstants_TRANSFORM:
      case FreemarkerCoreFMParserConstants_VISIT:
      case FreemarkerCoreFMParserConstants_STOP:
      case FreemarkerCoreFMParserConstants_RETURN:
      case FreemarkerCoreFMParserConstants_CALL:
      case FreemarkerCoreFMParserConstants_SETTING:
      case FreemarkerCoreFMParserConstants_COMPRESS:
      case FreemarkerCoreFMParserConstants_COMMENT:
      case FreemarkerCoreFMParserConstants_TERSE_COMMENT:
      case FreemarkerCoreFMParserConstants_NOPARSE:
      case FreemarkerCoreFMParserConstants_BREAK:
      case FreemarkerCoreFMParserConstants_SIMPLE_RETURN:
      case FreemarkerCoreFMParserConstants_HALT:
      case FreemarkerCoreFMParserConstants_FLUSH:
      case FreemarkerCoreFMParserConstants_TRIM:
      case FreemarkerCoreFMParserConstants_LTRIM:
      case FreemarkerCoreFMParserConstants_RTRIM:
      case FreemarkerCoreFMParserConstants_NOTRIM:
      case FreemarkerCoreFMParserConstants_SIMPLE_NESTED:
      case FreemarkerCoreFMParserConstants_NESTED:
      case FreemarkerCoreFMParserConstants_SIMPLE_RECURSE:
      case FreemarkerCoreFMParserConstants_RECURSE:
      case FreemarkerCoreFMParserConstants_FALLBACK:
      case FreemarkerCoreFMParserConstants_ESCAPE:
      case FreemarkerCoreFMParserConstants_NOESCAPE:
      case FreemarkerCoreFMParserConstants_UNIFIED_CALL:
      case FreemarkerCoreFMParserConstants_STATIC_TEXT_WS:
      case FreemarkerCoreFMParserConstants_STATIC_TEXT_NON_WS:
      case FreemarkerCoreFMParserConstants_STATIC_TEXT_FALSE_ALARM:
      case FreemarkerCoreFMParserConstants_DOLLAR_INTERPOLATION_OPENING:
      case FreemarkerCoreFMParserConstants_HASH_INTERPOLATION_OPENING:
      {
        
#line 2550
        ;
        break;
      }
      default:
      *IOSIntArray_GetRef(nil_chk(self->jj_la1_), 2) = self->jj_gen_;
      goto break_label_19;
    }
  }
  break_label_19: ;
  
#line 2558
  self->mixedContentNesting_--;
  [mixedContent setLocationWithFreemarkerTemplateTemplate:self->template__ withFreemarkerCoreTemplateObject:begin withFreemarkerCoreTemplateObject:elem];
  {
    
#line 2560
    if (![@"" isEqual:nil]) return mixedContent;
  }
  
#line 2561
  @throw new_JavaLangError_initWithNSString_(@"Missing return statement in function");
}


#line 2602
FreemarkerCoreTemplateElement *FreemarkerCoreFMParser_OptionalBlock(FreemarkerCoreFMParser *self) {
  
#line 2602
  FreemarkerCoreTemplateElement *tp = FreemarkerCoreTextBlock_get_EMPTY_BLOCK_();
  switch ((self->jj_ntk_ == -1) ? FreemarkerCoreFMParser_jj_ntk_f(self) : self->jj_ntk_) {
    case FreemarkerCoreFMParserConstants_ATTEMPT:
    case FreemarkerCoreFMParserConstants_IF:
    case FreemarkerCoreFMParserConstants_LIST:
    case FreemarkerCoreFMParserConstants_ITEMS:
    case FreemarkerCoreFMParserConstants_SEP:
    case FreemarkerCoreFMParserConstants_FOREACH:
    case FreemarkerCoreFMParserConstants_SWITCH:
    case FreemarkerCoreFMParserConstants_ASSIGN:
    case FreemarkerCoreFMParserConstants_GLOBALASSIGN:
    case FreemarkerCoreFMParserConstants_LOCALASSIGN:
    case FreemarkerCoreFMParserConstants__INCLUDE:
    case FreemarkerCoreFMParserConstants_IMPORT:
    case FreemarkerCoreFMParserConstants_FUNCTION:
    case FreemarkerCoreFMParserConstants_MACRO:
    case FreemarkerCoreFMParserConstants_TRANSFORM:
    case FreemarkerCoreFMParserConstants_VISIT:
    case FreemarkerCoreFMParserConstants_STOP:
    case FreemarkerCoreFMParserConstants_RETURN:
    case FreemarkerCoreFMParserConstants_CALL:
    case FreemarkerCoreFMParserConstants_SETTING:
    case FreemarkerCoreFMParserConstants_COMPRESS:
    case FreemarkerCoreFMParserConstants_COMMENT:
    case FreemarkerCoreFMParserConstants_TERSE_COMMENT:
    case FreemarkerCoreFMParserConstants_NOPARSE:
    case FreemarkerCoreFMParserConstants_BREAK:
    case FreemarkerCoreFMParserConstants_SIMPLE_RETURN:
    case FreemarkerCoreFMParserConstants_HALT:
    case FreemarkerCoreFMParserConstants_FLUSH:
    case FreemarkerCoreFMParserConstants_TRIM:
    case FreemarkerCoreFMParserConstants_LTRIM:
    case FreemarkerCoreFMParserConstants_RTRIM:
    case FreemarkerCoreFMParserConstants_NOTRIM:
    case FreemarkerCoreFMParserConstants_SIMPLE_NESTED:
    case FreemarkerCoreFMParserConstants_NESTED:
    case FreemarkerCoreFMParserConstants_SIMPLE_RECURSE:
    case FreemarkerCoreFMParserConstants_RECURSE:
    case FreemarkerCoreFMParserConstants_FALLBACK:
    case FreemarkerCoreFMParserConstants_ESCAPE:
    case FreemarkerCoreFMParserConstants_NOESCAPE:
    case FreemarkerCoreFMParserConstants_UNIFIED_CALL:
    case FreemarkerCoreFMParserConstants_STATIC_TEXT_WS:
    case FreemarkerCoreFMParserConstants_STATIC_TEXT_NON_WS:
    case FreemarkerCoreFMParserConstants_STATIC_TEXT_FALSE_ALARM:
    case FreemarkerCoreFMParserConstants_DOLLAR_INTERPOLATION_OPENING:
    case FreemarkerCoreFMParserConstants_HASH_INTERPOLATION_OPENING:
    {
      tp = FreemarkerCoreFMParser_MixedContent(self);
      break;
    }
    default:
    *IOSIntArray_GetRef(nil_chk(self->jj_la1_), 3) = self->jj_gen_;
    ;
  }
  {
    
#line 2657
    if (![@"" isEqual:nil]) return tp;
  }
  
#line 2658
  @throw new_JavaLangError_initWithNSString_(@"Missing return statement in function");
}


#line 2661
void FreemarkerCoreFMParser_HeaderElement(FreemarkerCoreFMParser *self) {
  
#line 2661
  FreemarkerCoreToken *key;
  FreemarkerCoreExpression *exp = nil;
  if (FreemarkerCoreFMParser_jj_2_219WithInt_(self, 2)) {
    (void) FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_STATIC_TEXT_WS);
  }
  else {
    
#line 2666
    ;
  }
  if (FreemarkerCoreFMParser_jj_2_221WithInt_(self, 2)) {
    (void) FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_TRIVIAL_FTL_HEADER);
  }
  else
#line 2670
  if (FreemarkerCoreFMParser_jj_2_222WithInt_(self, 2)) {
    (void) FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_FTL_HEADER);
    
#line 2673
    while (YES) {
      if (FreemarkerCoreFMParser_jj_2_220WithInt_(self, 2)) {
        ;
      }
      else {
        
#line 2677
        goto break_label_21;
      }
      key = FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_ID);
      (void) FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, FreemarkerCoreFMParserConstants_EQUALS);
      exp = FreemarkerCoreFMParser_Expression(self);
      [((FreemarkerCoreFMParserTokenManager *) nil_chk(self->token_source_)) checkNamingConventionWithFreemarkerCoreToken:key];
      
#line 2684
      NSString *ks = ((FreemarkerCoreToken *) nil_chk(key))->image_;
      id<FreemarkerTemplateTemplateModel> value = nil;
      @try {
        value = [((FreemarkerCoreExpression *) nil_chk(exp)) evalWithFreemarkerCoreEnvironment:nil];
      }
      @catch (
#line 2688
      JavaLangException *e) {
        {
          
#line 2689
          @throw new_FreemarkerCoreParseException_initWithNSString_withId_withId_(JreStrcat("$$$$", @"Could not evaluate expression: ",
#line 2690
          [((FreemarkerCoreExpression *) nil_chk(exp)) getCanonicalForm], @" \nUnderlying cause: ",
#line 2691
          [((JavaLangException *) nil_chk(e)) getMessage]),
#line 2692
          exp, e);
        }
      }
      
#line 2694
      NSString *vs = nil;
      if ([FreemarkerTemplateTemplateScalarModel_class_() isInstance:value]) {
        @try {
          vs = [((id<FreemarkerTemplateTemplateScalarModel>) nil_chk(((id<FreemarkerTemplateTemplateScalarModel>) check_protocol_cast(exp, @protocol(FreemarkerTemplateTemplateScalarModel))))) getAsString];
        }
        @catch (
#line 2698
        FreemarkerTemplateTemplateModelException *tme) {
        }
      }
      
#line 2700
      if (self->template__ != nil) {
        if ([((NSString *) nil_chk(ks)) equalsIgnoreCase:@"encoding"]) {
          if (vs == nil) {
            {
              
#line 2703
              @throw new_FreemarkerCoreParseException_initWithNSString_withId_(@"Expecting an encoding string.", exp);
            }
          }
          
#line 2705
          NSString *encoding = [self->template__ getEncoding];
          if (encoding != nil && ![encoding equalsIgnoreCase:vs]) {
            {
              
#line 2707
              @throw new_FreemarkerTemplateTemplate_WrongEncodingException_initWithNSString_withNSString_(vs, encoding);
            }
          }
        }
        else
#line 2709
        if ([ks equalsIgnoreCase:@"STRIP_WHITESPACE"] || [ks isEqual:@"stripWhitespace"]) {
          self->stripWhitespace_ = FreemarkerCoreFMParser_getBooleanWithFreemarkerCoreExpression_(self, exp);
        }
        else
#line 2711
        if ([ks equalsIgnoreCase:@"STRIP_TEXT"] || [ks isEqual:@"stripText"]) {
          self->stripText_ = FreemarkerCoreFMParser_getBooleanWithFreemarkerCoreExpression_(self, exp);
        }
        else
#line 2713
        if ([ks equalsIgnoreCase:@"STRICT_SYNTAX"] || [ks isEqual:@"strictSyntax"]) {
          self->token_source_->strictEscapeSyntax_ = FreemarkerCoreFMParser_getBooleanWithFreemarkerCoreExpression_(self, exp);
        }
        else
#line 2715
        if ([ks equalsIgnoreCase:@"ns_prefixes"] || [ks isEqual:@"nsPrefixes"]) {
          if (!([FreemarkerTemplateTemplateHashModelEx_class_() isInstance:value])) {
            {
              
#line 2717
              @throw new_FreemarkerCoreParseException_initWithNSString_withId_(@"Expecting a hash of prefixes to namespace URI's.", exp);
            }
          }
          
#line 2719
          id<FreemarkerTemplateTemplateHashModelEx> prefixMap = (id<FreemarkerTemplateTemplateHashModelEx>) check_protocol_cast(value, @protocol(FreemarkerTemplateTemplateHashModelEx));
          @try {
            id<FreemarkerTemplateTemplateCollectionModel> keys = [((id<FreemarkerTemplateTemplateHashModelEx>) nil_chk(prefixMap)) keys];
            for (id<FreemarkerTemplateTemplateModelIterator> it = [((id<FreemarkerTemplateTemplateCollectionModel>) nil_chk(keys)) iterator]; [((id<FreemarkerTemplateTemplateModelIterator>) nil_chk(it)) hasNext]; ) {
              NSString *prefix = [((id<FreemarkerTemplateTemplateScalarModel>) nil_chk(((id<FreemarkerTemplateTemplateScalarModel>) check_protocol_cast([it next], @protocol(FreemarkerTemplateTemplateScalarModel))))) getAsString];
              id<FreemarkerTemplateTemplateModel> valueModel = [prefixMap getWithNSString:prefix];
              if (!([FreemarkerTemplateTemplateScalarModel_class_() isInstance:valueModel])) {
                {
                  
#line 2726
                  @throw new_FreemarkerCoreParseException_initWithNSString_withId_(@"Non-string value in prefix to namespace hash.", exp);
                }
              }
              
#line 2728
              NSString *nsURI = [((id<FreemarkerTemplateTemplateScalarModel>) nil_chk(((id<FreemarkerTemplateTemplateScalarModel>) check_protocol_cast(valueModel, @protocol(FreemarkerTemplateTemplateScalarModel))))) getAsString];
              @try {
                [self->template__ addPrefixNSMappingWithNSString:prefix withNSString:nsURI];
              }
              @catch (
#line 2731
              JavaLangIllegalArgumentException *iae) {
                {
                  
#line 2732
                  @throw new_FreemarkerCoreParseException_initWithNSString_withId_([((JavaLangIllegalArgumentException *) nil_chk(iae)) getMessage], exp);
                }
              }
            }
          }
          @catch (
#line 2735
          FreemarkerTemplateTemplateModelException *tme) {
          }
        }
        else
#line 2737
        if ([ks equalsIgnoreCase:@"attributes"]) {
          if (!([FreemarkerTemplateTemplateHashModelEx_class_() isInstance:value])) {
            {
              
#line 2739
              @throw new_FreemarkerCoreParseException_initWithNSString_withId_(@"Expecting a hash of attribute names to values.", exp);
            }
          }
          
#line 2741
          id<FreemarkerTemplateTemplateHashModelEx> attributeMap = (id<FreemarkerTemplateTemplateHashModelEx>) check_protocol_cast(value, @protocol(FreemarkerTemplateTemplateHashModelEx));
          @try {
            id<FreemarkerTemplateTemplateCollectionModel> keys = [((id<FreemarkerTemplateTemplateHashModelEx>) nil_chk(attributeMap)) keys];
            for (id<FreemarkerTemplateTemplateModelIterator> it = [((id<FreemarkerTemplateTemplateCollectionModel>) nil_chk(keys)) iterator]; [((id<FreemarkerTemplateTemplateModelIterator>) nil_chk(it)) hasNext]; ) {
              NSString *attName = [((id<FreemarkerTemplateTemplateScalarModel>) nil_chk(((id<FreemarkerTemplateTemplateScalarModel>) check_protocol_cast([it next], @protocol(FreemarkerTemplateTemplateScalarModel))))) getAsString];
              id attValue = FreemarkerTemplateUtilityDeepUnwrap_unwrapWithFreemarkerTemplateTemplateModel_([attributeMap getWithNSString:attName]);
              [self->template__ setCustomAttributeWithNSString:attName withId:attValue];
            }
          }
          @catch (
#line 2749
          FreemarkerTemplateTemplateModelException *tme) {
          }
        }
        else {
          
#line 2752
          NSString *correctName;
          if ([ks isEqual:@"charset"]) {
            correctName = @"encoding";
          }
          else
#line 2755
          if ([ks isEqual:@"xmlns"]) {
            
#line 2757
            correctName =
#line 2758
            self->token_source_->namingConvention_ == FreemarkerTemplateConfiguration_CAMEL_CASE_NAMING_CONVENTION ?
#line 2759
            @"nsPrefixes" : @"ns_prefixes";
          }
          else {
            
#line 2761
            correctName = nil;
          }
          {
            
#line 2763
            @throw new_FreemarkerCoreParseException_initWithNSString_withId_withId_(JreStrcat("$$$", @"Unknown FTL header parameter: ",
#line 2764
            key->image_,
#line 2765
            (correctName == nil ? @"" : JreStrcat("$$C", @". Did you mean ", correctName, '?'))), self->template__,
#line 2766
            key);
          }
        }
      }
    }
    break_label_21: ;
    
#line 2770
    (void) FreemarkerCoreFMParser_LooseDirectiveEnd(self);
  }
  else {
    
#line 2772
    (void) FreemarkerCoreFMParser_jj_consume_tokenWithInt_(self, -1);
    @throw new_FreemarkerCoreParseException_init();
  }
}


#line 2821
jboolean FreemarkerCoreFMParser_jj_2_1WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 2823
  self->jj_la_ = xla;
  
#line 2823
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 2824
    return !FreemarkerCoreFMParser_jj_3_1(self);
  }
  @catch (
#line 2825
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 2825
    return YES;
  }
  @finally {
    
#line 2826
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 0, xla);
  }
}


#line 2829
jboolean FreemarkerCoreFMParser_jj_2_2WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 2831
  self->jj_la_ = xla;
  
#line 2831
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 2832
    return !FreemarkerCoreFMParser_jj_3_2(self);
  }
  @catch (
#line 2833
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 2833
    return YES;
  }
  @finally {
    
#line 2834
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 1, xla);
  }
}


#line 2837
jboolean FreemarkerCoreFMParser_jj_2_3WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 2839
  self->jj_la_ = xla;
  
#line 2839
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 2840
    return !FreemarkerCoreFMParser_jj_3_3(self);
  }
  @catch (
#line 2841
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 2841
    return YES;
  }
  @finally {
    
#line 2842
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 2, xla);
  }
}


#line 2845
jboolean FreemarkerCoreFMParser_jj_2_4WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 2847
  self->jj_la_ = xla;
  
#line 2847
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 2848
    return !FreemarkerCoreFMParser_jj_3_4(self);
  }
  @catch (
#line 2849
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 2849
    return YES;
  }
  @finally {
    
#line 2850
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 3, xla);
  }
}


#line 2853
jboolean FreemarkerCoreFMParser_jj_2_5WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 2855
  self->jj_la_ = xla;
  
#line 2855
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 2856
    return !FreemarkerCoreFMParser_jj_3_5(self);
  }
  @catch (
#line 2857
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 2857
    return YES;
  }
  @finally {
    
#line 2858
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 4, xla);
  }
}


#line 2861
jboolean FreemarkerCoreFMParser_jj_2_6WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 2863
  self->jj_la_ = xla;
  
#line 2863
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 2864
    return !FreemarkerCoreFMParser_jj_3_6(self);
  }
  @catch (
#line 2865
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 2865
    return YES;
  }
  @finally {
    
#line 2866
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 5, xla);
  }
}


#line 2869
jboolean FreemarkerCoreFMParser_jj_2_7WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 2871
  self->jj_la_ = xla;
  
#line 2871
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 2872
    return !FreemarkerCoreFMParser_jj_3_7(self);
  }
  @catch (
#line 2873
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 2873
    return YES;
  }
  @finally {
    
#line 2874
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 6, xla);
  }
}


#line 2877
jboolean FreemarkerCoreFMParser_jj_2_8WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 2879
  self->jj_la_ = xla;
  
#line 2879
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 2880
    return !FreemarkerCoreFMParser_jj_3_8(self);
  }
  @catch (
#line 2881
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 2881
    return YES;
  }
  @finally {
    
#line 2882
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 7, xla);
  }
}


#line 2885
jboolean FreemarkerCoreFMParser_jj_2_9WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 2887
  self->jj_la_ = xla;
  
#line 2887
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 2888
    return !FreemarkerCoreFMParser_jj_3_9(self);
  }
  @catch (
#line 2889
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 2889
    return YES;
  }
  @finally {
    
#line 2890
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 8, xla);
  }
}


#line 2893
jboolean FreemarkerCoreFMParser_jj_2_10WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 2895
  self->jj_la_ = xla;
  
#line 2895
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 2896
    return !FreemarkerCoreFMParser_jj_3_10(self);
  }
  @catch (
#line 2897
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 2897
    return YES;
  }
  @finally {
    
#line 2898
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 9, xla);
  }
}


#line 2901
jboolean FreemarkerCoreFMParser_jj_2_11WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 2903
  self->jj_la_ = xla;
  
#line 2903
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 2904
    return !FreemarkerCoreFMParser_jj_3_11(self);
  }
  @catch (
#line 2905
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 2905
    return YES;
  }
  @finally {
    
#line 2906
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 10, xla);
  }
}


#line 2909
jboolean FreemarkerCoreFMParser_jj_2_12WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 2911
  self->jj_la_ = xla;
  
#line 2911
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 2912
    return !FreemarkerCoreFMParser_jj_3_12(self);
  }
  @catch (
#line 2913
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 2913
    return YES;
  }
  @finally {
    
#line 2914
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 11, xla);
  }
}


#line 2917
jboolean FreemarkerCoreFMParser_jj_2_13WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 2919
  self->jj_la_ = xla;
  
#line 2919
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 2920
    return !FreemarkerCoreFMParser_jj_3_13(self);
  }
  @catch (
#line 2921
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 2921
    return YES;
  }
  @finally {
    
#line 2922
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 12, xla);
  }
}


#line 2925
jboolean FreemarkerCoreFMParser_jj_2_14WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 2927
  self->jj_la_ = xla;
  
#line 2927
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 2928
    return !FreemarkerCoreFMParser_jj_3_14(self);
  }
  @catch (
#line 2929
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 2929
    return YES;
  }
  @finally {
    
#line 2930
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 13, xla);
  }
}


#line 2933
jboolean FreemarkerCoreFMParser_jj_2_15WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 2935
  self->jj_la_ = xla;
  
#line 2935
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 2936
    return !FreemarkerCoreFMParser_jj_3_15(self);
  }
  @catch (
#line 2937
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 2937
    return YES;
  }
  @finally {
    
#line 2938
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 14, xla);
  }
}


#line 2941
jboolean FreemarkerCoreFMParser_jj_2_16WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 2943
  self->jj_la_ = xla;
  
#line 2943
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 2944
    return !FreemarkerCoreFMParser_jj_3_16(self);
  }
  @catch (
#line 2945
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 2945
    return YES;
  }
  @finally {
    
#line 2946
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 15, xla);
  }
}


#line 2949
jboolean FreemarkerCoreFMParser_jj_2_17WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 2951
  self->jj_la_ = xla;
  
#line 2951
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 2952
    return !FreemarkerCoreFMParser_jj_3_17(self);
  }
  @catch (
#line 2953
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 2953
    return YES;
  }
  @finally {
    
#line 2954
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 16, xla);
  }
}


#line 2957
jboolean FreemarkerCoreFMParser_jj_2_18WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 2959
  self->jj_la_ = xla;
  
#line 2959
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 2960
    return !FreemarkerCoreFMParser_jj_3_18(self);
  }
  @catch (
#line 2961
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 2961
    return YES;
  }
  @finally {
    
#line 2962
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 17, xla);
  }
}


#line 2965
jboolean FreemarkerCoreFMParser_jj_2_19WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 2967
  self->jj_la_ = xla;
  
#line 2967
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 2968
    return !FreemarkerCoreFMParser_jj_3_19(self);
  }
  @catch (
#line 2969
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 2969
    return YES;
  }
  @finally {
    
#line 2970
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 18, xla);
  }
}


#line 2973
jboolean FreemarkerCoreFMParser_jj_2_20WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 2975
  self->jj_la_ = xla;
  
#line 2975
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 2976
    return !FreemarkerCoreFMParser_jj_3_20(self);
  }
  @catch (
#line 2977
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 2977
    return YES;
  }
  @finally {
    
#line 2978
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 19, xla);
  }
}


#line 2981
jboolean FreemarkerCoreFMParser_jj_2_21WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 2983
  self->jj_la_ = xla;
  
#line 2983
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 2984
    return !FreemarkerCoreFMParser_jj_3_21(self);
  }
  @catch (
#line 2985
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 2985
    return YES;
  }
  @finally {
    
#line 2986
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 20, xla);
  }
}


#line 2989
jboolean FreemarkerCoreFMParser_jj_2_22WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 2991
  self->jj_la_ = xla;
  
#line 2991
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 2992
    return !FreemarkerCoreFMParser_jj_3_22(self);
  }
  @catch (
#line 2993
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 2993
    return YES;
  }
  @finally {
    
#line 2994
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 21, xla);
  }
}


#line 2997
jboolean FreemarkerCoreFMParser_jj_2_23WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 2999
  self->jj_la_ = xla;
  
#line 2999
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 3000
    return !FreemarkerCoreFMParser_jj_3_23(self);
  }
  @catch (
#line 3001
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 3001
    return YES;
  }
  @finally {
    
#line 3002
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 22, xla);
  }
}


#line 3005
jboolean FreemarkerCoreFMParser_jj_2_24WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 3007
  self->jj_la_ = xla;
  
#line 3007
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 3008
    return !FreemarkerCoreFMParser_jj_3_24(self);
  }
  @catch (
#line 3009
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 3009
    return YES;
  }
  @finally {
    
#line 3010
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 23, xla);
  }
}


#line 3013
jboolean FreemarkerCoreFMParser_jj_2_25WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 3015
  self->jj_la_ = xla;
  
#line 3015
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 3016
    return !FreemarkerCoreFMParser_jj_3_25(self);
  }
  @catch (
#line 3017
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 3017
    return YES;
  }
  @finally {
    
#line 3018
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 24, xla);
  }
}


#line 3021
jboolean FreemarkerCoreFMParser_jj_2_26WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 3023
  self->jj_la_ = xla;
  
#line 3023
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 3024
    return !FreemarkerCoreFMParser_jj_3_26(self);
  }
  @catch (
#line 3025
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 3025
    return YES;
  }
  @finally {
    
#line 3026
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 25, xla);
  }
}


#line 3029
jboolean FreemarkerCoreFMParser_jj_2_27WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 3031
  self->jj_la_ = xla;
  
#line 3031
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 3032
    return !FreemarkerCoreFMParser_jj_3_27(self);
  }
  @catch (
#line 3033
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 3033
    return YES;
  }
  @finally {
    
#line 3034
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 26, xla);
  }
}


#line 3037
jboolean FreemarkerCoreFMParser_jj_2_28WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 3039
  self->jj_la_ = xla;
  
#line 3039
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 3040
    return !FreemarkerCoreFMParser_jj_3_28(self);
  }
  @catch (
#line 3041
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 3041
    return YES;
  }
  @finally {
    
#line 3042
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 27, xla);
  }
}


#line 3045
jboolean FreemarkerCoreFMParser_jj_2_29WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 3047
  self->jj_la_ = xla;
  
#line 3047
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 3048
    return !FreemarkerCoreFMParser_jj_3_29(self);
  }
  @catch (
#line 3049
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 3049
    return YES;
  }
  @finally {
    
#line 3050
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 28, xla);
  }
}


#line 3053
jboolean FreemarkerCoreFMParser_jj_2_30WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 3055
  self->jj_la_ = xla;
  
#line 3055
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 3056
    return !FreemarkerCoreFMParser_jj_3_30(self);
  }
  @catch (
#line 3057
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 3057
    return YES;
  }
  @finally {
    
#line 3058
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 29, xla);
  }
}


#line 3061
jboolean FreemarkerCoreFMParser_jj_2_31WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 3063
  self->jj_la_ = xla;
  
#line 3063
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 3064
    return !FreemarkerCoreFMParser_jj_3_31(self);
  }
  @catch (
#line 3065
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 3065
    return YES;
  }
  @finally {
    
#line 3066
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 30, xla);
  }
}


#line 3069
jboolean FreemarkerCoreFMParser_jj_2_32WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 3071
  self->jj_la_ = xla;
  
#line 3071
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 3072
    return !FreemarkerCoreFMParser_jj_3_32(self);
  }
  @catch (
#line 3073
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 3073
    return YES;
  }
  @finally {
    
#line 3074
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 31, xla);
  }
}


#line 3077
jboolean FreemarkerCoreFMParser_jj_2_33WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 3079
  self->jj_la_ = xla;
  
#line 3079
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 3080
    return !FreemarkerCoreFMParser_jj_3_33(self);
  }
  @catch (
#line 3081
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 3081
    return YES;
  }
  @finally {
    
#line 3082
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 32, xla);
  }
}


#line 3085
jboolean FreemarkerCoreFMParser_jj_2_34WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 3087
  self->jj_la_ = xla;
  
#line 3087
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 3088
    return !FreemarkerCoreFMParser_jj_3_34(self);
  }
  @catch (
#line 3089
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 3089
    return YES;
  }
  @finally {
    
#line 3090
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 33, xla);
  }
}


#line 3093
jboolean FreemarkerCoreFMParser_jj_2_35WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 3095
  self->jj_la_ = xla;
  
#line 3095
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 3096
    return !FreemarkerCoreFMParser_jj_3_35(self);
  }
  @catch (
#line 3097
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 3097
    return YES;
  }
  @finally {
    
#line 3098
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 34, xla);
  }
}


#line 3101
jboolean FreemarkerCoreFMParser_jj_2_36WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 3103
  self->jj_la_ = xla;
  
#line 3103
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 3104
    return !FreemarkerCoreFMParser_jj_3_36(self);
  }
  @catch (
#line 3105
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 3105
    return YES;
  }
  @finally {
    
#line 3106
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 35, xla);
  }
}


#line 3109
jboolean FreemarkerCoreFMParser_jj_2_37WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 3111
  self->jj_la_ = xla;
  
#line 3111
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 3112
    return !FreemarkerCoreFMParser_jj_3_37(self);
  }
  @catch (
#line 3113
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 3113
    return YES;
  }
  @finally {
    
#line 3114
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 36, xla);
  }
}


#line 3117
jboolean FreemarkerCoreFMParser_jj_2_38WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 3119
  self->jj_la_ = xla;
  
#line 3119
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 3120
    return !FreemarkerCoreFMParser_jj_3_38(self);
  }
  @catch (
#line 3121
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 3121
    return YES;
  }
  @finally {
    
#line 3122
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 37, xla);
  }
}


#line 3125
jboolean FreemarkerCoreFMParser_jj_2_39WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 3127
  self->jj_la_ = xla;
  
#line 3127
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 3128
    return !FreemarkerCoreFMParser_jj_3_39(self);
  }
  @catch (
#line 3129
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 3129
    return YES;
  }
  @finally {
    
#line 3130
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 38, xla);
  }
}


#line 3133
jboolean FreemarkerCoreFMParser_jj_2_40WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 3135
  self->jj_la_ = xla;
  
#line 3135
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 3136
    return !FreemarkerCoreFMParser_jj_3_40(self);
  }
  @catch (
#line 3137
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 3137
    return YES;
  }
  @finally {
    
#line 3138
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 39, xla);
  }
}


#line 3141
jboolean FreemarkerCoreFMParser_jj_2_41WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 3143
  self->jj_la_ = xla;
  
#line 3143
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 3144
    return !FreemarkerCoreFMParser_jj_3_41(self);
  }
  @catch (
#line 3145
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 3145
    return YES;
  }
  @finally {
    
#line 3146
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 40, xla);
  }
}


#line 3149
jboolean FreemarkerCoreFMParser_jj_2_42WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 3151
  self->jj_la_ = xla;
  
#line 3151
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 3152
    return !FreemarkerCoreFMParser_jj_3_42(self);
  }
  @catch (
#line 3153
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 3153
    return YES;
  }
  @finally {
    
#line 3154
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 41, xla);
  }
}


#line 3157
jboolean FreemarkerCoreFMParser_jj_2_43WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 3159
  self->jj_la_ = xla;
  
#line 3159
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 3160
    return !FreemarkerCoreFMParser_jj_3_43(self);
  }
  @catch (
#line 3161
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 3161
    return YES;
  }
  @finally {
    
#line 3162
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 42, xla);
  }
}


#line 3165
jboolean FreemarkerCoreFMParser_jj_2_44WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 3167
  self->jj_la_ = xla;
  
#line 3167
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 3168
    return !FreemarkerCoreFMParser_jj_3_44(self);
  }
  @catch (
#line 3169
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 3169
    return YES;
  }
  @finally {
    
#line 3170
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 43, xla);
  }
}


#line 3173
jboolean FreemarkerCoreFMParser_jj_2_45WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 3175
  self->jj_la_ = xla;
  
#line 3175
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 3176
    return !FreemarkerCoreFMParser_jj_3_45(self);
  }
  @catch (
#line 3177
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 3177
    return YES;
  }
  @finally {
    
#line 3178
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 44, xla);
  }
}


#line 3181
jboolean FreemarkerCoreFMParser_jj_2_46WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 3183
  self->jj_la_ = xla;
  
#line 3183
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 3184
    return !FreemarkerCoreFMParser_jj_3_46(self);
  }
  @catch (
#line 3185
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 3185
    return YES;
  }
  @finally {
    
#line 3186
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 45, xla);
  }
}


#line 3189
jboolean FreemarkerCoreFMParser_jj_2_47WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 3191
  self->jj_la_ = xla;
  
#line 3191
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 3192
    return !FreemarkerCoreFMParser_jj_3_47(self);
  }
  @catch (
#line 3193
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 3193
    return YES;
  }
  @finally {
    
#line 3194
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 46, xla);
  }
}


#line 3197
jboolean FreemarkerCoreFMParser_jj_2_48WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 3199
  self->jj_la_ = xla;
  
#line 3199
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 3200
    return !FreemarkerCoreFMParser_jj_3_48(self);
  }
  @catch (
#line 3201
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 3201
    return YES;
  }
  @finally {
    
#line 3202
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 47, xla);
  }
}


#line 3205
jboolean FreemarkerCoreFMParser_jj_2_49WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 3207
  self->jj_la_ = xla;
  
#line 3207
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 3208
    return !FreemarkerCoreFMParser_jj_3_49(self);
  }
  @catch (
#line 3209
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 3209
    return YES;
  }
  @finally {
    
#line 3210
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 48, xla);
  }
}


#line 3213
jboolean FreemarkerCoreFMParser_jj_2_50WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 3215
  self->jj_la_ = xla;
  
#line 3215
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 3216
    return !FreemarkerCoreFMParser_jj_3_50(self);
  }
  @catch (
#line 3217
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 3217
    return YES;
  }
  @finally {
    
#line 3218
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 49, xla);
  }
}


#line 3221
jboolean FreemarkerCoreFMParser_jj_2_51WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 3223
  self->jj_la_ = xla;
  
#line 3223
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 3224
    return !FreemarkerCoreFMParser_jj_3_51(self);
  }
  @catch (
#line 3225
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 3225
    return YES;
  }
  @finally {
    
#line 3226
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 50, xla);
  }
}


#line 3229
jboolean FreemarkerCoreFMParser_jj_2_52WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 3231
  self->jj_la_ = xla;
  
#line 3231
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 3232
    return !FreemarkerCoreFMParser_jj_3_52(self);
  }
  @catch (
#line 3233
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 3233
    return YES;
  }
  @finally {
    
#line 3234
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 51, xla);
  }
}


#line 3237
jboolean FreemarkerCoreFMParser_jj_2_53WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 3239
  self->jj_la_ = xla;
  
#line 3239
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 3240
    return !FreemarkerCoreFMParser_jj_3_53(self);
  }
  @catch (
#line 3241
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 3241
    return YES;
  }
  @finally {
    
#line 3242
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 52, xla);
  }
}


#line 3245
jboolean FreemarkerCoreFMParser_jj_2_54WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 3247
  self->jj_la_ = xla;
  
#line 3247
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 3248
    return !FreemarkerCoreFMParser_jj_3_54(self);
  }
  @catch (
#line 3249
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 3249
    return YES;
  }
  @finally {
    
#line 3250
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 53, xla);
  }
}


#line 3253
jboolean FreemarkerCoreFMParser_jj_2_55WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 3255
  self->jj_la_ = xla;
  
#line 3255
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 3256
    return !FreemarkerCoreFMParser_jj_3_55(self);
  }
  @catch (
#line 3257
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 3257
    return YES;
  }
  @finally {
    
#line 3258
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 54, xla);
  }
}


#line 3261
jboolean FreemarkerCoreFMParser_jj_2_56WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 3263
  self->jj_la_ = xla;
  
#line 3263
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 3264
    return !FreemarkerCoreFMParser_jj_3_56(self);
  }
  @catch (
#line 3265
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 3265
    return YES;
  }
  @finally {
    
#line 3266
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 55, xla);
  }
}


#line 3269
jboolean FreemarkerCoreFMParser_jj_2_57WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 3271
  self->jj_la_ = xla;
  
#line 3271
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 3272
    return !FreemarkerCoreFMParser_jj_3_57(self);
  }
  @catch (
#line 3273
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 3273
    return YES;
  }
  @finally {
    
#line 3274
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 56, xla);
  }
}


#line 3277
jboolean FreemarkerCoreFMParser_jj_2_58WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 3279
  self->jj_la_ = xla;
  
#line 3279
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 3280
    return !FreemarkerCoreFMParser_jj_3_58(self);
  }
  @catch (
#line 3281
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 3281
    return YES;
  }
  @finally {
    
#line 3282
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 57, xla);
  }
}


#line 3285
jboolean FreemarkerCoreFMParser_jj_2_59WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 3287
  self->jj_la_ = xla;
  
#line 3287
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 3288
    return !FreemarkerCoreFMParser_jj_3_59(self);
  }
  @catch (
#line 3289
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 3289
    return YES;
  }
  @finally {
    
#line 3290
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 58, xla);
  }
}


#line 3293
jboolean FreemarkerCoreFMParser_jj_2_60WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 3295
  self->jj_la_ = xla;
  
#line 3295
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 3296
    return !FreemarkerCoreFMParser_jj_3_60(self);
  }
  @catch (
#line 3297
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 3297
    return YES;
  }
  @finally {
    
#line 3298
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 59, xla);
  }
}


#line 3301
jboolean FreemarkerCoreFMParser_jj_2_61WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 3303
  self->jj_la_ = xla;
  
#line 3303
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 3304
    return !FreemarkerCoreFMParser_jj_3_61(self);
  }
  @catch (
#line 3305
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 3305
    return YES;
  }
  @finally {
    
#line 3306
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 60, xla);
  }
}


#line 3309
jboolean FreemarkerCoreFMParser_jj_2_62WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 3311
  self->jj_la_ = xla;
  
#line 3311
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 3312
    return !FreemarkerCoreFMParser_jj_3_62(self);
  }
  @catch (
#line 3313
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 3313
    return YES;
  }
  @finally {
    
#line 3314
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 61, xla);
  }
}


#line 3317
jboolean FreemarkerCoreFMParser_jj_2_63WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 3319
  self->jj_la_ = xla;
  
#line 3319
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 3320
    return !FreemarkerCoreFMParser_jj_3_63(self);
  }
  @catch (
#line 3321
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 3321
    return YES;
  }
  @finally {
    
#line 3322
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 62, xla);
  }
}


#line 3325
jboolean FreemarkerCoreFMParser_jj_2_64WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 3327
  self->jj_la_ = xla;
  
#line 3327
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 3328
    return !FreemarkerCoreFMParser_jj_3_64(self);
  }
  @catch (
#line 3329
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 3329
    return YES;
  }
  @finally {
    
#line 3330
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 63, xla);
  }
}


#line 3333
jboolean FreemarkerCoreFMParser_jj_2_65WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 3335
  self->jj_la_ = xla;
  
#line 3335
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 3336
    return !FreemarkerCoreFMParser_jj_3_65(self);
  }
  @catch (
#line 3337
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 3337
    return YES;
  }
  @finally {
    
#line 3338
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 64, xla);
  }
}


#line 3341
jboolean FreemarkerCoreFMParser_jj_2_66WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 3343
  self->jj_la_ = xla;
  
#line 3343
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 3344
    return !FreemarkerCoreFMParser_jj_3_66(self);
  }
  @catch (
#line 3345
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 3345
    return YES;
  }
  @finally {
    
#line 3346
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 65, xla);
  }
}


#line 3349
jboolean FreemarkerCoreFMParser_jj_2_67WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 3351
  self->jj_la_ = xla;
  
#line 3351
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 3352
    return !FreemarkerCoreFMParser_jj_3_67(self);
  }
  @catch (
#line 3353
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 3353
    return YES;
  }
  @finally {
    
#line 3354
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 66, xla);
  }
}


#line 3357
jboolean FreemarkerCoreFMParser_jj_2_68WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 3359
  self->jj_la_ = xla;
  
#line 3359
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 3360
    return !FreemarkerCoreFMParser_jj_3_68(self);
  }
  @catch (
#line 3361
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 3361
    return YES;
  }
  @finally {
    
#line 3362
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 67, xla);
  }
}


#line 3365
jboolean FreemarkerCoreFMParser_jj_2_69WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 3367
  self->jj_la_ = xla;
  
#line 3367
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 3368
    return !FreemarkerCoreFMParser_jj_3_69(self);
  }
  @catch (
#line 3369
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 3369
    return YES;
  }
  @finally {
    
#line 3370
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 68, xla);
  }
}


#line 3373
jboolean FreemarkerCoreFMParser_jj_2_70WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 3375
  self->jj_la_ = xla;
  
#line 3375
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 3376
    return !FreemarkerCoreFMParser_jj_3_70(self);
  }
  @catch (
#line 3377
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 3377
    return YES;
  }
  @finally {
    
#line 3378
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 69, xla);
  }
}


#line 3381
jboolean FreemarkerCoreFMParser_jj_2_71WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 3383
  self->jj_la_ = xla;
  
#line 3383
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 3384
    return !FreemarkerCoreFMParser_jj_3_71(self);
  }
  @catch (
#line 3385
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 3385
    return YES;
  }
  @finally {
    
#line 3386
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 70, xla);
  }
}


#line 3389
jboolean FreemarkerCoreFMParser_jj_2_72WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 3391
  self->jj_la_ = xla;
  
#line 3391
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 3392
    return !FreemarkerCoreFMParser_jj_3_72(self);
  }
  @catch (
#line 3393
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 3393
    return YES;
  }
  @finally {
    
#line 3394
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 71, xla);
  }
}


#line 3397
jboolean FreemarkerCoreFMParser_jj_2_73WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 3399
  self->jj_la_ = xla;
  
#line 3399
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 3400
    return !FreemarkerCoreFMParser_jj_3_73(self);
  }
  @catch (
#line 3401
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 3401
    return YES;
  }
  @finally {
    
#line 3402
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 72, xla);
  }
}


#line 3405
jboolean FreemarkerCoreFMParser_jj_2_74WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 3407
  self->jj_la_ = xla;
  
#line 3407
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 3408
    return !FreemarkerCoreFMParser_jj_3_74(self);
  }
  @catch (
#line 3409
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 3409
    return YES;
  }
  @finally {
    
#line 3410
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 73, xla);
  }
}


#line 3413
jboolean FreemarkerCoreFMParser_jj_2_75WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 3415
  self->jj_la_ = xla;
  
#line 3415
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 3416
    return !FreemarkerCoreFMParser_jj_3_75(self);
  }
  @catch (
#line 3417
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 3417
    return YES;
  }
  @finally {
    
#line 3418
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 74, xla);
  }
}


#line 3421
jboolean FreemarkerCoreFMParser_jj_2_76WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 3423
  self->jj_la_ = xla;
  
#line 3423
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 3424
    return !FreemarkerCoreFMParser_jj_3_76(self);
  }
  @catch (
#line 3425
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 3425
    return YES;
  }
  @finally {
    
#line 3426
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 75, xla);
  }
}


#line 3429
jboolean FreemarkerCoreFMParser_jj_2_77WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 3431
  self->jj_la_ = xla;
  
#line 3431
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 3432
    return !FreemarkerCoreFMParser_jj_3_77(self);
  }
  @catch (
#line 3433
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 3433
    return YES;
  }
  @finally {
    
#line 3434
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 76, xla);
  }
}


#line 3437
jboolean FreemarkerCoreFMParser_jj_2_78WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 3439
  self->jj_la_ = xla;
  
#line 3439
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 3440
    return !FreemarkerCoreFMParser_jj_3_78(self);
  }
  @catch (
#line 3441
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 3441
    return YES;
  }
  @finally {
    
#line 3442
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 77, xla);
  }
}


#line 3445
jboolean FreemarkerCoreFMParser_jj_2_79WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 3447
  self->jj_la_ = xla;
  
#line 3447
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 3448
    return !FreemarkerCoreFMParser_jj_3_79(self);
  }
  @catch (
#line 3449
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 3449
    return YES;
  }
  @finally {
    
#line 3450
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 78, xla);
  }
}


#line 3453
jboolean FreemarkerCoreFMParser_jj_2_80WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 3455
  self->jj_la_ = xla;
  
#line 3455
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 3456
    return !FreemarkerCoreFMParser_jj_3_80(self);
  }
  @catch (
#line 3457
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 3457
    return YES;
  }
  @finally {
    
#line 3458
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 79, xla);
  }
}


#line 3461
jboolean FreemarkerCoreFMParser_jj_2_81WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 3463
  self->jj_la_ = xla;
  
#line 3463
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 3464
    return !FreemarkerCoreFMParser_jj_3_81(self);
  }
  @catch (
#line 3465
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 3465
    return YES;
  }
  @finally {
    
#line 3466
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 80, xla);
  }
}


#line 3469
jboolean FreemarkerCoreFMParser_jj_2_82WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 3471
  self->jj_la_ = xla;
  
#line 3471
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 3472
    return !FreemarkerCoreFMParser_jj_3_82(self);
  }
  @catch (
#line 3473
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 3473
    return YES;
  }
  @finally {
    
#line 3474
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 81, xla);
  }
}


#line 3477
jboolean FreemarkerCoreFMParser_jj_2_83WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 3479
  self->jj_la_ = xla;
  
#line 3479
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 3480
    return !FreemarkerCoreFMParser_jj_3_83(self);
  }
  @catch (
#line 3481
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 3481
    return YES;
  }
  @finally {
    
#line 3482
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 82, xla);
  }
}


#line 3485
jboolean FreemarkerCoreFMParser_jj_2_84WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 3487
  self->jj_la_ = xla;
  
#line 3487
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 3488
    return !FreemarkerCoreFMParser_jj_3_84(self);
  }
  @catch (
#line 3489
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 3489
    return YES;
  }
  @finally {
    
#line 3490
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 83, xla);
  }
}


#line 3493
jboolean FreemarkerCoreFMParser_jj_2_85WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 3495
  self->jj_la_ = xla;
  
#line 3495
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 3496
    return !FreemarkerCoreFMParser_jj_3_85(self);
  }
  @catch (
#line 3497
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 3497
    return YES;
  }
  @finally {
    
#line 3498
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 84, xla);
  }
}


#line 3501
jboolean FreemarkerCoreFMParser_jj_2_86WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 3503
  self->jj_la_ = xla;
  
#line 3503
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 3504
    return !FreemarkerCoreFMParser_jj_3_86(self);
  }
  @catch (
#line 3505
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 3505
    return YES;
  }
  @finally {
    
#line 3506
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 85, xla);
  }
}


#line 3509
jboolean FreemarkerCoreFMParser_jj_2_87WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 3511
  self->jj_la_ = xla;
  
#line 3511
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 3512
    return !FreemarkerCoreFMParser_jj_3_87(self);
  }
  @catch (
#line 3513
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 3513
    return YES;
  }
  @finally {
    
#line 3514
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 86, xla);
  }
}


#line 3517
jboolean FreemarkerCoreFMParser_jj_2_88WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 3519
  self->jj_la_ = xla;
  
#line 3519
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 3520
    return !FreemarkerCoreFMParser_jj_3_88(self);
  }
  @catch (
#line 3521
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 3521
    return YES;
  }
  @finally {
    
#line 3522
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 87, xla);
  }
}


#line 3525
jboolean FreemarkerCoreFMParser_jj_2_89WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 3527
  self->jj_la_ = xla;
  
#line 3527
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 3528
    return !FreemarkerCoreFMParser_jj_3_89(self);
  }
  @catch (
#line 3529
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 3529
    return YES;
  }
  @finally {
    
#line 3530
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 88, xla);
  }
}


#line 3533
jboolean FreemarkerCoreFMParser_jj_2_90WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 3535
  self->jj_la_ = xla;
  
#line 3535
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 3536
    return !FreemarkerCoreFMParser_jj_3_90(self);
  }
  @catch (
#line 3537
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 3537
    return YES;
  }
  @finally {
    
#line 3538
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 89, xla);
  }
}


#line 3541
jboolean FreemarkerCoreFMParser_jj_2_91WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 3543
  self->jj_la_ = xla;
  
#line 3543
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 3544
    return !FreemarkerCoreFMParser_jj_3_91(self);
  }
  @catch (
#line 3545
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 3545
    return YES;
  }
  @finally {
    
#line 3546
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 90, xla);
  }
}


#line 3549
jboolean FreemarkerCoreFMParser_jj_2_92WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 3551
  self->jj_la_ = xla;
  
#line 3551
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 3552
    return !FreemarkerCoreFMParser_jj_3_92(self);
  }
  @catch (
#line 3553
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 3553
    return YES;
  }
  @finally {
    
#line 3554
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 91, xla);
  }
}


#line 3557
jboolean FreemarkerCoreFMParser_jj_2_93WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 3559
  self->jj_la_ = xla;
  
#line 3559
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 3560
    return !FreemarkerCoreFMParser_jj_3_93(self);
  }
  @catch (
#line 3561
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 3561
    return YES;
  }
  @finally {
    
#line 3562
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 92, xla);
  }
}


#line 3565
jboolean FreemarkerCoreFMParser_jj_2_94WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 3567
  self->jj_la_ = xla;
  
#line 3567
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 3568
    return !FreemarkerCoreFMParser_jj_3_94(self);
  }
  @catch (
#line 3569
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 3569
    return YES;
  }
  @finally {
    
#line 3570
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 93, xla);
  }
}


#line 3573
jboolean FreemarkerCoreFMParser_jj_2_95WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 3575
  self->jj_la_ = xla;
  
#line 3575
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 3576
    return !FreemarkerCoreFMParser_jj_3_95(self);
  }
  @catch (
#line 3577
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 3577
    return YES;
  }
  @finally {
    
#line 3578
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 94, xla);
  }
}


#line 3581
jboolean FreemarkerCoreFMParser_jj_2_96WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 3583
  self->jj_la_ = xla;
  
#line 3583
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 3584
    return !FreemarkerCoreFMParser_jj_3_96(self);
  }
  @catch (
#line 3585
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 3585
    return YES;
  }
  @finally {
    
#line 3586
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 95, xla);
  }
}


#line 3589
jboolean FreemarkerCoreFMParser_jj_2_97WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 3591
  self->jj_la_ = xla;
  
#line 3591
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 3592
    return !FreemarkerCoreFMParser_jj_3_97(self);
  }
  @catch (
#line 3593
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 3593
    return YES;
  }
  @finally {
    
#line 3594
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 96, xla);
  }
}


#line 3597
jboolean FreemarkerCoreFMParser_jj_2_98WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 3599
  self->jj_la_ = xla;
  
#line 3599
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 3600
    return !FreemarkerCoreFMParser_jj_3_98(self);
  }
  @catch (
#line 3601
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 3601
    return YES;
  }
  @finally {
    
#line 3602
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 97, xla);
  }
}


#line 3605
jboolean FreemarkerCoreFMParser_jj_2_99WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 3607
  self->jj_la_ = xla;
  
#line 3607
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 3608
    return !FreemarkerCoreFMParser_jj_3_99(self);
  }
  @catch (
#line 3609
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 3609
    return YES;
  }
  @finally {
    
#line 3610
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 98, xla);
  }
}


#line 3613
jboolean FreemarkerCoreFMParser_jj_2_100WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 3615
  self->jj_la_ = xla;
  
#line 3615
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 3616
    return !FreemarkerCoreFMParser_jj_3_100(self);
  }
  @catch (
#line 3617
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 3617
    return YES;
  }
  @finally {
    
#line 3618
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 99, xla);
  }
}


#line 3621
jboolean FreemarkerCoreFMParser_jj_2_101WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 3623
  self->jj_la_ = xla;
  
#line 3623
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 3624
    return !FreemarkerCoreFMParser_jj_3_101(self);
  }
  @catch (
#line 3625
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 3625
    return YES;
  }
  @finally {
    
#line 3626
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 100, xla);
  }
}


#line 3629
jboolean FreemarkerCoreFMParser_jj_2_102WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 3631
  self->jj_la_ = xla;
  
#line 3631
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 3632
    return !FreemarkerCoreFMParser_jj_3_102(self);
  }
  @catch (
#line 3633
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 3633
    return YES;
  }
  @finally {
    
#line 3634
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 101, xla);
  }
}


#line 3637
jboolean FreemarkerCoreFMParser_jj_2_103WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 3639
  self->jj_la_ = xla;
  
#line 3639
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 3640
    return !FreemarkerCoreFMParser_jj_3_103(self);
  }
  @catch (
#line 3641
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 3641
    return YES;
  }
  @finally {
    
#line 3642
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 102, xla);
  }
}


#line 3645
jboolean FreemarkerCoreFMParser_jj_2_104WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 3647
  self->jj_la_ = xla;
  
#line 3647
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 3648
    return !FreemarkerCoreFMParser_jj_3_104(self);
  }
  @catch (
#line 3649
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 3649
    return YES;
  }
  @finally {
    
#line 3650
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 103, xla);
  }
}


#line 3653
jboolean FreemarkerCoreFMParser_jj_2_105WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 3655
  self->jj_la_ = xla;
  
#line 3655
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 3656
    return !FreemarkerCoreFMParser_jj_3_105(self);
  }
  @catch (
#line 3657
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 3657
    return YES;
  }
  @finally {
    
#line 3658
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 104, xla);
  }
}


#line 3661
jboolean FreemarkerCoreFMParser_jj_2_106WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 3663
  self->jj_la_ = xla;
  
#line 3663
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 3664
    return !FreemarkerCoreFMParser_jj_3_106(self);
  }
  @catch (
#line 3665
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 3665
    return YES;
  }
  @finally {
    
#line 3666
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 105, xla);
  }
}


#line 3669
jboolean FreemarkerCoreFMParser_jj_2_107WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 3671
  self->jj_la_ = xla;
  
#line 3671
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 3672
    return !FreemarkerCoreFMParser_jj_3_107(self);
  }
  @catch (
#line 3673
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 3673
    return YES;
  }
  @finally {
    
#line 3674
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 106, xla);
  }
}


#line 3677
jboolean FreemarkerCoreFMParser_jj_2_108WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 3679
  self->jj_la_ = xla;
  
#line 3679
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 3680
    return !FreemarkerCoreFMParser_jj_3_108(self);
  }
  @catch (
#line 3681
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 3681
    return YES;
  }
  @finally {
    
#line 3682
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 107, xla);
  }
}


#line 3685
jboolean FreemarkerCoreFMParser_jj_2_109WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 3687
  self->jj_la_ = xla;
  
#line 3687
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 3688
    return !FreemarkerCoreFMParser_jj_3_109(self);
  }
  @catch (
#line 3689
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 3689
    return YES;
  }
  @finally {
    
#line 3690
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 108, xla);
  }
}


#line 3693
jboolean FreemarkerCoreFMParser_jj_2_110WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 3695
  self->jj_la_ = xla;
  
#line 3695
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 3696
    return !FreemarkerCoreFMParser_jj_3_110(self);
  }
  @catch (
#line 3697
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 3697
    return YES;
  }
  @finally {
    
#line 3698
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 109, xla);
  }
}


#line 3701
jboolean FreemarkerCoreFMParser_jj_2_111WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 3703
  self->jj_la_ = xla;
  
#line 3703
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 3704
    return !FreemarkerCoreFMParser_jj_3_111(self);
  }
  @catch (
#line 3705
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 3705
    return YES;
  }
  @finally {
    
#line 3706
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 110, xla);
  }
}


#line 3709
jboolean FreemarkerCoreFMParser_jj_2_112WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 3711
  self->jj_la_ = xla;
  
#line 3711
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 3712
    return !FreemarkerCoreFMParser_jj_3_112(self);
  }
  @catch (
#line 3713
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 3713
    return YES;
  }
  @finally {
    
#line 3714
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 111, xla);
  }
}


#line 3717
jboolean FreemarkerCoreFMParser_jj_2_113WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 3719
  self->jj_la_ = xla;
  
#line 3719
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 3720
    return !FreemarkerCoreFMParser_jj_3_113(self);
  }
  @catch (
#line 3721
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 3721
    return YES;
  }
  @finally {
    
#line 3722
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 112, xla);
  }
}


#line 3725
jboolean FreemarkerCoreFMParser_jj_2_114WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 3727
  self->jj_la_ = xla;
  
#line 3727
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 3728
    return !FreemarkerCoreFMParser_jj_3_114(self);
  }
  @catch (
#line 3729
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 3729
    return YES;
  }
  @finally {
    
#line 3730
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 113, xla);
  }
}


#line 3733
jboolean FreemarkerCoreFMParser_jj_2_115WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 3735
  self->jj_la_ = xla;
  
#line 3735
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 3736
    return !FreemarkerCoreFMParser_jj_3_115(self);
  }
  @catch (
#line 3737
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 3737
    return YES;
  }
  @finally {
    
#line 3738
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 114, xla);
  }
}


#line 3741
jboolean FreemarkerCoreFMParser_jj_2_116WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 3743
  self->jj_la_ = xla;
  
#line 3743
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 3744
    return !FreemarkerCoreFMParser_jj_3_116(self);
  }
  @catch (
#line 3745
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 3745
    return YES;
  }
  @finally {
    
#line 3746
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 115, xla);
  }
}


#line 3749
jboolean FreemarkerCoreFMParser_jj_2_117WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 3751
  self->jj_la_ = xla;
  
#line 3751
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 3752
    return !FreemarkerCoreFMParser_jj_3_117(self);
  }
  @catch (
#line 3753
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 3753
    return YES;
  }
  @finally {
    
#line 3754
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 116, xla);
  }
}


#line 3757
jboolean FreemarkerCoreFMParser_jj_2_118WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 3759
  self->jj_la_ = xla;
  
#line 3759
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 3760
    return !FreemarkerCoreFMParser_jj_3_118(self);
  }
  @catch (
#line 3761
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 3761
    return YES;
  }
  @finally {
    
#line 3762
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 117, xla);
  }
}


#line 3765
jboolean FreemarkerCoreFMParser_jj_2_119WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 3767
  self->jj_la_ = xla;
  
#line 3767
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 3768
    return !FreemarkerCoreFMParser_jj_3_119(self);
  }
  @catch (
#line 3769
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 3769
    return YES;
  }
  @finally {
    
#line 3770
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 118, xla);
  }
}


#line 3773
jboolean FreemarkerCoreFMParser_jj_2_120WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 3775
  self->jj_la_ = xla;
  
#line 3775
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 3776
    return !FreemarkerCoreFMParser_jj_3_120(self);
  }
  @catch (
#line 3777
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 3777
    return YES;
  }
  @finally {
    
#line 3778
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 119, xla);
  }
}


#line 3781
jboolean FreemarkerCoreFMParser_jj_2_121WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 3783
  self->jj_la_ = xla;
  
#line 3783
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 3784
    return !FreemarkerCoreFMParser_jj_3_121(self);
  }
  @catch (
#line 3785
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 3785
    return YES;
  }
  @finally {
    
#line 3786
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 120, xla);
  }
}


#line 3789
jboolean FreemarkerCoreFMParser_jj_2_122WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 3791
  self->jj_la_ = xla;
  
#line 3791
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 3792
    return !FreemarkerCoreFMParser_jj_3_122(self);
  }
  @catch (
#line 3793
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 3793
    return YES;
  }
  @finally {
    
#line 3794
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 121, xla);
  }
}


#line 3797
jboolean FreemarkerCoreFMParser_jj_2_123WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 3799
  self->jj_la_ = xla;
  
#line 3799
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 3800
    return !FreemarkerCoreFMParser_jj_3_123(self);
  }
  @catch (
#line 3801
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 3801
    return YES;
  }
  @finally {
    
#line 3802
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 122, xla);
  }
}


#line 3805
jboolean FreemarkerCoreFMParser_jj_2_124WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 3807
  self->jj_la_ = xla;
  
#line 3807
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 3808
    return !FreemarkerCoreFMParser_jj_3_124(self);
  }
  @catch (
#line 3809
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 3809
    return YES;
  }
  @finally {
    
#line 3810
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 123, xla);
  }
}


#line 3813
jboolean FreemarkerCoreFMParser_jj_2_125WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 3815
  self->jj_la_ = xla;
  
#line 3815
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 3816
    return !FreemarkerCoreFMParser_jj_3_125(self);
  }
  @catch (
#line 3817
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 3817
    return YES;
  }
  @finally {
    
#line 3818
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 124, xla);
  }
}


#line 3821
jboolean FreemarkerCoreFMParser_jj_2_126WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 3823
  self->jj_la_ = xla;
  
#line 3823
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 3824
    return !FreemarkerCoreFMParser_jj_3_126(self);
  }
  @catch (
#line 3825
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 3825
    return YES;
  }
  @finally {
    
#line 3826
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 125, xla);
  }
}


#line 3829
jboolean FreemarkerCoreFMParser_jj_2_127WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 3831
  self->jj_la_ = xla;
  
#line 3831
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 3832
    return !FreemarkerCoreFMParser_jj_3_127(self);
  }
  @catch (
#line 3833
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 3833
    return YES;
  }
  @finally {
    
#line 3834
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 126, xla);
  }
}


#line 3837
jboolean FreemarkerCoreFMParser_jj_2_128WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 3839
  self->jj_la_ = xla;
  
#line 3839
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 3840
    return !FreemarkerCoreFMParser_jj_3_128(self);
  }
  @catch (
#line 3841
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 3841
    return YES;
  }
  @finally {
    
#line 3842
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 127, xla);
  }
}


#line 3845
jboolean FreemarkerCoreFMParser_jj_2_129WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 3847
  self->jj_la_ = xla;
  
#line 3847
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 3848
    return !FreemarkerCoreFMParser_jj_3_129(self);
  }
  @catch (
#line 3849
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 3849
    return YES;
  }
  @finally {
    
#line 3850
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 128, xla);
  }
}


#line 3853
jboolean FreemarkerCoreFMParser_jj_2_130WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 3855
  self->jj_la_ = xla;
  
#line 3855
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 3856
    return !FreemarkerCoreFMParser_jj_3_130(self);
  }
  @catch (
#line 3857
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 3857
    return YES;
  }
  @finally {
    
#line 3858
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 129, xla);
  }
}


#line 3861
jboolean FreemarkerCoreFMParser_jj_2_131WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 3863
  self->jj_la_ = xla;
  
#line 3863
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 3864
    return !FreemarkerCoreFMParser_jj_3_131(self);
  }
  @catch (
#line 3865
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 3865
    return YES;
  }
  @finally {
    
#line 3866
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 130, xla);
  }
}


#line 3869
jboolean FreemarkerCoreFMParser_jj_2_132WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 3871
  self->jj_la_ = xla;
  
#line 3871
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 3872
    return !FreemarkerCoreFMParser_jj_3_132(self);
  }
  @catch (
#line 3873
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 3873
    return YES;
  }
  @finally {
    
#line 3874
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 131, xla);
  }
}


#line 3877
jboolean FreemarkerCoreFMParser_jj_2_133WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 3879
  self->jj_la_ = xla;
  
#line 3879
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 3880
    return !FreemarkerCoreFMParser_jj_3_133(self);
  }
  @catch (
#line 3881
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 3881
    return YES;
  }
  @finally {
    
#line 3882
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 132, xla);
  }
}


#line 3885
jboolean FreemarkerCoreFMParser_jj_2_134WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 3887
  self->jj_la_ = xla;
  
#line 3887
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 3888
    return !FreemarkerCoreFMParser_jj_3_134(self);
  }
  @catch (
#line 3889
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 3889
    return YES;
  }
  @finally {
    
#line 3890
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 133, xla);
  }
}


#line 3893
jboolean FreemarkerCoreFMParser_jj_2_135WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 3895
  self->jj_la_ = xla;
  
#line 3895
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 3896
    return !FreemarkerCoreFMParser_jj_3_135(self);
  }
  @catch (
#line 3897
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 3897
    return YES;
  }
  @finally {
    
#line 3898
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 134, xla);
  }
}


#line 3901
jboolean FreemarkerCoreFMParser_jj_2_136WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 3903
  self->jj_la_ = xla;
  
#line 3903
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 3904
    return !FreemarkerCoreFMParser_jj_3_136(self);
  }
  @catch (
#line 3905
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 3905
    return YES;
  }
  @finally {
    
#line 3906
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 135, xla);
  }
}


#line 3909
jboolean FreemarkerCoreFMParser_jj_2_137WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 3911
  self->jj_la_ = xla;
  
#line 3911
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 3912
    return !FreemarkerCoreFMParser_jj_3_137(self);
  }
  @catch (
#line 3913
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 3913
    return YES;
  }
  @finally {
    
#line 3914
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 136, xla);
  }
}


#line 3917
jboolean FreemarkerCoreFMParser_jj_2_138WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 3919
  self->jj_la_ = xla;
  
#line 3919
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 3920
    return !FreemarkerCoreFMParser_jj_3_138(self);
  }
  @catch (
#line 3921
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 3921
    return YES;
  }
  @finally {
    
#line 3922
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 137, xla);
  }
}


#line 3925
jboolean FreemarkerCoreFMParser_jj_2_139WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 3927
  self->jj_la_ = xla;
  
#line 3927
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 3928
    return !FreemarkerCoreFMParser_jj_3_139(self);
  }
  @catch (
#line 3929
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 3929
    return YES;
  }
  @finally {
    
#line 3930
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 138, xla);
  }
}


#line 3933
jboolean FreemarkerCoreFMParser_jj_2_140WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 3935
  self->jj_la_ = xla;
  
#line 3935
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 3936
    return !FreemarkerCoreFMParser_jj_3_140(self);
  }
  @catch (
#line 3937
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 3937
    return YES;
  }
  @finally {
    
#line 3938
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 139, xla);
  }
}


#line 3941
jboolean FreemarkerCoreFMParser_jj_2_141WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 3943
  self->jj_la_ = xla;
  
#line 3943
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 3944
    return !FreemarkerCoreFMParser_jj_3_141(self);
  }
  @catch (
#line 3945
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 3945
    return YES;
  }
  @finally {
    
#line 3946
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 140, xla);
  }
}


#line 3949
jboolean FreemarkerCoreFMParser_jj_2_142WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 3951
  self->jj_la_ = xla;
  
#line 3951
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 3952
    return !FreemarkerCoreFMParser_jj_3_142(self);
  }
  @catch (
#line 3953
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 3953
    return YES;
  }
  @finally {
    
#line 3954
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 141, xla);
  }
}


#line 3957
jboolean FreemarkerCoreFMParser_jj_2_143WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 3959
  self->jj_la_ = xla;
  
#line 3959
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 3960
    return !FreemarkerCoreFMParser_jj_3_143(self);
  }
  @catch (
#line 3961
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 3961
    return YES;
  }
  @finally {
    
#line 3962
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 142, xla);
  }
}


#line 3965
jboolean FreemarkerCoreFMParser_jj_2_144WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 3967
  self->jj_la_ = xla;
  
#line 3967
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 3968
    return !FreemarkerCoreFMParser_jj_3_144(self);
  }
  @catch (
#line 3969
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 3969
    return YES;
  }
  @finally {
    
#line 3970
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 143, xla);
  }
}


#line 3973
jboolean FreemarkerCoreFMParser_jj_2_145WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 3975
  self->jj_la_ = xla;
  
#line 3975
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 3976
    return !FreemarkerCoreFMParser_jj_3_145(self);
  }
  @catch (
#line 3977
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 3977
    return YES;
  }
  @finally {
    
#line 3978
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 144, xla);
  }
}


#line 3981
jboolean FreemarkerCoreFMParser_jj_2_146WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 3983
  self->jj_la_ = xla;
  
#line 3983
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 3984
    return !FreemarkerCoreFMParser_jj_3_146(self);
  }
  @catch (
#line 3985
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 3985
    return YES;
  }
  @finally {
    
#line 3986
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 145, xla);
  }
}


#line 3989
jboolean FreemarkerCoreFMParser_jj_2_147WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 3991
  self->jj_la_ = xla;
  
#line 3991
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 3992
    return !FreemarkerCoreFMParser_jj_3_147(self);
  }
  @catch (
#line 3993
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 3993
    return YES;
  }
  @finally {
    
#line 3994
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 146, xla);
  }
}


#line 3997
jboolean FreemarkerCoreFMParser_jj_2_148WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 3999
  self->jj_la_ = xla;
  
#line 3999
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 4000
    return !FreemarkerCoreFMParser_jj_3_148(self);
  }
  @catch (
#line 4001
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 4001
    return YES;
  }
  @finally {
    
#line 4002
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 147, xla);
  }
}


#line 4005
jboolean FreemarkerCoreFMParser_jj_2_149WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 4007
  self->jj_la_ = xla;
  
#line 4007
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 4008
    return !FreemarkerCoreFMParser_jj_3_149(self);
  }
  @catch (
#line 4009
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 4009
    return YES;
  }
  @finally {
    
#line 4010
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 148, xla);
  }
}


#line 4013
jboolean FreemarkerCoreFMParser_jj_2_150WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 4015
  self->jj_la_ = xla;
  
#line 4015
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 4016
    return !FreemarkerCoreFMParser_jj_3_150(self);
  }
  @catch (
#line 4017
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 4017
    return YES;
  }
  @finally {
    
#line 4018
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 149, xla);
  }
}


#line 4021
jboolean FreemarkerCoreFMParser_jj_2_151WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 4023
  self->jj_la_ = xla;
  
#line 4023
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 4024
    return !FreemarkerCoreFMParser_jj_3_151(self);
  }
  @catch (
#line 4025
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 4025
    return YES;
  }
  @finally {
    
#line 4026
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 150, xla);
  }
}


#line 4029
jboolean FreemarkerCoreFMParser_jj_2_152WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 4031
  self->jj_la_ = xla;
  
#line 4031
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 4032
    return !FreemarkerCoreFMParser_jj_3_152(self);
  }
  @catch (
#line 4033
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 4033
    return YES;
  }
  @finally {
    
#line 4034
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 151, xla);
  }
}


#line 4037
jboolean FreemarkerCoreFMParser_jj_2_153WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 4039
  self->jj_la_ = xla;
  
#line 4039
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 4040
    return !FreemarkerCoreFMParser_jj_3_153(self);
  }
  @catch (
#line 4041
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 4041
    return YES;
  }
  @finally {
    
#line 4042
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 152, xla);
  }
}


#line 4045
jboolean FreemarkerCoreFMParser_jj_2_154WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 4047
  self->jj_la_ = xla;
  
#line 4047
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 4048
    return !FreemarkerCoreFMParser_jj_3_154(self);
  }
  @catch (
#line 4049
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 4049
    return YES;
  }
  @finally {
    
#line 4050
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 153, xla);
  }
}


#line 4053
jboolean FreemarkerCoreFMParser_jj_2_155WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 4055
  self->jj_la_ = xla;
  
#line 4055
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 4056
    return !FreemarkerCoreFMParser_jj_3_155(self);
  }
  @catch (
#line 4057
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 4057
    return YES;
  }
  @finally {
    
#line 4058
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 154, xla);
  }
}


#line 4061
jboolean FreemarkerCoreFMParser_jj_2_156WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 4063
  self->jj_la_ = xla;
  
#line 4063
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 4064
    return !FreemarkerCoreFMParser_jj_3_156(self);
  }
  @catch (
#line 4065
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 4065
    return YES;
  }
  @finally {
    
#line 4066
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 155, xla);
  }
}


#line 4069
jboolean FreemarkerCoreFMParser_jj_2_157WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 4071
  self->jj_la_ = xla;
  
#line 4071
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 4072
    return !FreemarkerCoreFMParser_jj_3_157(self);
  }
  @catch (
#line 4073
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 4073
    return YES;
  }
  @finally {
    
#line 4074
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 156, xla);
  }
}


#line 4077
jboolean FreemarkerCoreFMParser_jj_2_158WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 4079
  self->jj_la_ = xla;
  
#line 4079
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 4080
    return !FreemarkerCoreFMParser_jj_3_158(self);
  }
  @catch (
#line 4081
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 4081
    return YES;
  }
  @finally {
    
#line 4082
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 157, xla);
  }
}


#line 4085
jboolean FreemarkerCoreFMParser_jj_2_159WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 4087
  self->jj_la_ = xla;
  
#line 4087
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 4088
    return !FreemarkerCoreFMParser_jj_3_159(self);
  }
  @catch (
#line 4089
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 4089
    return YES;
  }
  @finally {
    
#line 4090
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 158, xla);
  }
}


#line 4093
jboolean FreemarkerCoreFMParser_jj_2_160WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 4095
  self->jj_la_ = xla;
  
#line 4095
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 4096
    return !FreemarkerCoreFMParser_jj_3_160(self);
  }
  @catch (
#line 4097
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 4097
    return YES;
  }
  @finally {
    
#line 4098
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 159, xla);
  }
}


#line 4101
jboolean FreemarkerCoreFMParser_jj_2_161WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 4103
  self->jj_la_ = xla;
  
#line 4103
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 4104
    return !FreemarkerCoreFMParser_jj_3_161(self);
  }
  @catch (
#line 4105
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 4105
    return YES;
  }
  @finally {
    
#line 4106
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 160, xla);
  }
}


#line 4109
jboolean FreemarkerCoreFMParser_jj_2_162WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 4111
  self->jj_la_ = xla;
  
#line 4111
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 4112
    return !FreemarkerCoreFMParser_jj_3_162(self);
  }
  @catch (
#line 4113
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 4113
    return YES;
  }
  @finally {
    
#line 4114
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 161, xla);
  }
}


#line 4117
jboolean FreemarkerCoreFMParser_jj_2_163WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 4119
  self->jj_la_ = xla;
  
#line 4119
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 4120
    return !FreemarkerCoreFMParser_jj_3_163(self);
  }
  @catch (
#line 4121
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 4121
    return YES;
  }
  @finally {
    
#line 4122
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 162, xla);
  }
}


#line 4125
jboolean FreemarkerCoreFMParser_jj_2_164WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 4127
  self->jj_la_ = xla;
  
#line 4127
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 4128
    return !FreemarkerCoreFMParser_jj_3_164(self);
  }
  @catch (
#line 4129
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 4129
    return YES;
  }
  @finally {
    
#line 4130
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 163, xla);
  }
}


#line 4133
jboolean FreemarkerCoreFMParser_jj_2_165WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 4135
  self->jj_la_ = xla;
  
#line 4135
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 4136
    return !FreemarkerCoreFMParser_jj_3_165(self);
  }
  @catch (
#line 4137
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 4137
    return YES;
  }
  @finally {
    
#line 4138
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 164, xla);
  }
}


#line 4141
jboolean FreemarkerCoreFMParser_jj_2_166WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 4143
  self->jj_la_ = xla;
  
#line 4143
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 4144
    return !FreemarkerCoreFMParser_jj_3_166(self);
  }
  @catch (
#line 4145
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 4145
    return YES;
  }
  @finally {
    
#line 4146
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 165, xla);
  }
}


#line 4149
jboolean FreemarkerCoreFMParser_jj_2_167WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 4151
  self->jj_la_ = xla;
  
#line 4151
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 4152
    return !FreemarkerCoreFMParser_jj_3_167(self);
  }
  @catch (
#line 4153
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 4153
    return YES;
  }
  @finally {
    
#line 4154
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 166, xla);
  }
}


#line 4157
jboolean FreemarkerCoreFMParser_jj_2_168WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 4159
  self->jj_la_ = xla;
  
#line 4159
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 4160
    return !FreemarkerCoreFMParser_jj_3_168(self);
  }
  @catch (
#line 4161
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 4161
    return YES;
  }
  @finally {
    
#line 4162
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 167, xla);
  }
}


#line 4165
jboolean FreemarkerCoreFMParser_jj_2_169WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 4167
  self->jj_la_ = xla;
  
#line 4167
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 4168
    return !FreemarkerCoreFMParser_jj_3_169(self);
  }
  @catch (
#line 4169
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 4169
    return YES;
  }
  @finally {
    
#line 4170
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 168, xla);
  }
}


#line 4173
jboolean FreemarkerCoreFMParser_jj_2_170WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 4175
  self->jj_la_ = xla;
  
#line 4175
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 4176
    return !FreemarkerCoreFMParser_jj_3_170(self);
  }
  @catch (
#line 4177
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 4177
    return YES;
  }
  @finally {
    
#line 4178
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 169, xla);
  }
}


#line 4181
jboolean FreemarkerCoreFMParser_jj_2_171WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 4183
  self->jj_la_ = xla;
  
#line 4183
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 4184
    return !FreemarkerCoreFMParser_jj_3_171(self);
  }
  @catch (
#line 4185
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 4185
    return YES;
  }
  @finally {
    
#line 4186
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 170, xla);
  }
}


#line 4189
jboolean FreemarkerCoreFMParser_jj_2_172WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 4191
  self->jj_la_ = xla;
  
#line 4191
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 4192
    return !FreemarkerCoreFMParser_jj_3_172(self);
  }
  @catch (
#line 4193
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 4193
    return YES;
  }
  @finally {
    
#line 4194
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 171, xla);
  }
}


#line 4197
jboolean FreemarkerCoreFMParser_jj_2_173WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 4199
  self->jj_la_ = xla;
  
#line 4199
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 4200
    return !FreemarkerCoreFMParser_jj_3_173(self);
  }
  @catch (
#line 4201
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 4201
    return YES;
  }
  @finally {
    
#line 4202
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 172, xla);
  }
}


#line 4205
jboolean FreemarkerCoreFMParser_jj_2_174WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 4207
  self->jj_la_ = xla;
  
#line 4207
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 4208
    return !FreemarkerCoreFMParser_jj_3_174(self);
  }
  @catch (
#line 4209
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 4209
    return YES;
  }
  @finally {
    
#line 4210
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 173, xla);
  }
}


#line 4213
jboolean FreemarkerCoreFMParser_jj_2_175WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 4215
  self->jj_la_ = xla;
  
#line 4215
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 4216
    return !FreemarkerCoreFMParser_jj_3_175(self);
  }
  @catch (
#line 4217
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 4217
    return YES;
  }
  @finally {
    
#line 4218
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 174, xla);
  }
}


#line 4221
jboolean FreemarkerCoreFMParser_jj_2_176WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 4223
  self->jj_la_ = xla;
  
#line 4223
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 4224
    return !FreemarkerCoreFMParser_jj_3_176(self);
  }
  @catch (
#line 4225
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 4225
    return YES;
  }
  @finally {
    
#line 4226
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 175, xla);
  }
}


#line 4229
jboolean FreemarkerCoreFMParser_jj_2_177WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 4231
  self->jj_la_ = xla;
  
#line 4231
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 4232
    return !FreemarkerCoreFMParser_jj_3_177(self);
  }
  @catch (
#line 4233
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 4233
    return YES;
  }
  @finally {
    
#line 4234
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 176, xla);
  }
}


#line 4237
jboolean FreemarkerCoreFMParser_jj_2_178WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 4239
  self->jj_la_ = xla;
  
#line 4239
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 4240
    return !FreemarkerCoreFMParser_jj_3_178(self);
  }
  @catch (
#line 4241
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 4241
    return YES;
  }
  @finally {
    
#line 4242
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 177, xla);
  }
}


#line 4245
jboolean FreemarkerCoreFMParser_jj_2_179WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 4247
  self->jj_la_ = xla;
  
#line 4247
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 4248
    return !FreemarkerCoreFMParser_jj_3_179(self);
  }
  @catch (
#line 4249
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 4249
    return YES;
  }
  @finally {
    
#line 4250
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 178, xla);
  }
}


#line 4253
jboolean FreemarkerCoreFMParser_jj_2_180WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 4255
  self->jj_la_ = xla;
  
#line 4255
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 4256
    return !FreemarkerCoreFMParser_jj_3_180(self);
  }
  @catch (
#line 4257
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 4257
    return YES;
  }
  @finally {
    
#line 4258
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 179, xla);
  }
}


#line 4261
jboolean FreemarkerCoreFMParser_jj_2_181WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 4263
  self->jj_la_ = xla;
  
#line 4263
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 4264
    return !FreemarkerCoreFMParser_jj_3_181(self);
  }
  @catch (
#line 4265
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 4265
    return YES;
  }
  @finally {
    
#line 4266
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 180, xla);
  }
}


#line 4269
jboolean FreemarkerCoreFMParser_jj_2_182WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 4271
  self->jj_la_ = xla;
  
#line 4271
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 4272
    return !FreemarkerCoreFMParser_jj_3_182(self);
  }
  @catch (
#line 4273
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 4273
    return YES;
  }
  @finally {
    
#line 4274
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 181, xla);
  }
}


#line 4277
jboolean FreemarkerCoreFMParser_jj_2_183WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 4279
  self->jj_la_ = xla;
  
#line 4279
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 4280
    return !FreemarkerCoreFMParser_jj_3_183(self);
  }
  @catch (
#line 4281
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 4281
    return YES;
  }
  @finally {
    
#line 4282
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 182, xla);
  }
}


#line 4285
jboolean FreemarkerCoreFMParser_jj_2_184WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 4287
  self->jj_la_ = xla;
  
#line 4287
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 4288
    return !FreemarkerCoreFMParser_jj_3_184(self);
  }
  @catch (
#line 4289
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 4289
    return YES;
  }
  @finally {
    
#line 4290
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 183, xla);
  }
}


#line 4293
jboolean FreemarkerCoreFMParser_jj_2_185WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 4295
  self->jj_la_ = xla;
  
#line 4295
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 4296
    return !FreemarkerCoreFMParser_jj_3_185(self);
  }
  @catch (
#line 4297
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 4297
    return YES;
  }
  @finally {
    
#line 4298
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 184, xla);
  }
}


#line 4301
jboolean FreemarkerCoreFMParser_jj_2_186WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 4303
  self->jj_la_ = xla;
  
#line 4303
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 4304
    return !FreemarkerCoreFMParser_jj_3_186(self);
  }
  @catch (
#line 4305
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 4305
    return YES;
  }
  @finally {
    
#line 4306
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 185, xla);
  }
}


#line 4309
jboolean FreemarkerCoreFMParser_jj_2_187WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 4311
  self->jj_la_ = xla;
  
#line 4311
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 4312
    return !FreemarkerCoreFMParser_jj_3_187(self);
  }
  @catch (
#line 4313
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 4313
    return YES;
  }
  @finally {
    
#line 4314
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 186, xla);
  }
}


#line 4317
jboolean FreemarkerCoreFMParser_jj_2_188WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 4319
  self->jj_la_ = xla;
  
#line 4319
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 4320
    return !FreemarkerCoreFMParser_jj_3_188(self);
  }
  @catch (
#line 4321
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 4321
    return YES;
  }
  @finally {
    
#line 4322
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 187, xla);
  }
}


#line 4325
jboolean FreemarkerCoreFMParser_jj_2_189WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 4327
  self->jj_la_ = xla;
  
#line 4327
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 4328
    return !FreemarkerCoreFMParser_jj_3_189(self);
  }
  @catch (
#line 4329
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 4329
    return YES;
  }
  @finally {
    
#line 4330
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 188, xla);
  }
}


#line 4333
jboolean FreemarkerCoreFMParser_jj_2_190WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 4335
  self->jj_la_ = xla;
  
#line 4335
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 4336
    return !FreemarkerCoreFMParser_jj_3_190(self);
  }
  @catch (
#line 4337
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 4337
    return YES;
  }
  @finally {
    
#line 4338
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 189, xla);
  }
}


#line 4341
jboolean FreemarkerCoreFMParser_jj_2_191WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 4343
  self->jj_la_ = xla;
  
#line 4343
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 4344
    return !FreemarkerCoreFMParser_jj_3_191(self);
  }
  @catch (
#line 4345
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 4345
    return YES;
  }
  @finally {
    
#line 4346
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 190, xla);
  }
}


#line 4349
jboolean FreemarkerCoreFMParser_jj_2_192WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 4351
  self->jj_la_ = xla;
  
#line 4351
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 4352
    return !FreemarkerCoreFMParser_jj_3_192(self);
  }
  @catch (
#line 4353
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 4353
    return YES;
  }
  @finally {
    
#line 4354
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 191, xla);
  }
}


#line 4357
jboolean FreemarkerCoreFMParser_jj_2_193WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 4359
  self->jj_la_ = xla;
  
#line 4359
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 4360
    return !FreemarkerCoreFMParser_jj_3_193(self);
  }
  @catch (
#line 4361
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 4361
    return YES;
  }
  @finally {
    
#line 4362
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 192, xla);
  }
}


#line 4365
jboolean FreemarkerCoreFMParser_jj_2_194WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 4367
  self->jj_la_ = xla;
  
#line 4367
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 4368
    return !FreemarkerCoreFMParser_jj_3_194(self);
  }
  @catch (
#line 4369
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 4369
    return YES;
  }
  @finally {
    
#line 4370
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 193, xla);
  }
}


#line 4373
jboolean FreemarkerCoreFMParser_jj_2_195WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 4375
  self->jj_la_ = xla;
  
#line 4375
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 4376
    return !FreemarkerCoreFMParser_jj_3_195(self);
  }
  @catch (
#line 4377
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 4377
    return YES;
  }
  @finally {
    
#line 4378
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 194, xla);
  }
}


#line 4381
jboolean FreemarkerCoreFMParser_jj_2_196WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 4383
  self->jj_la_ = xla;
  
#line 4383
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 4384
    return !FreemarkerCoreFMParser_jj_3_196(self);
  }
  @catch (
#line 4385
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 4385
    return YES;
  }
  @finally {
    
#line 4386
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 195, xla);
  }
}


#line 4389
jboolean FreemarkerCoreFMParser_jj_2_197WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 4391
  self->jj_la_ = xla;
  
#line 4391
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 4392
    return !FreemarkerCoreFMParser_jj_3_197(self);
  }
  @catch (
#line 4393
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 4393
    return YES;
  }
  @finally {
    
#line 4394
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 196, xla);
  }
}


#line 4397
jboolean FreemarkerCoreFMParser_jj_2_198WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 4399
  self->jj_la_ = xla;
  
#line 4399
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 4400
    return !FreemarkerCoreFMParser_jj_3_198(self);
  }
  @catch (
#line 4401
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 4401
    return YES;
  }
  @finally {
    
#line 4402
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 197, xla);
  }
}


#line 4405
jboolean FreemarkerCoreFMParser_jj_2_199WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 4407
  self->jj_la_ = xla;
  
#line 4407
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 4408
    return !FreemarkerCoreFMParser_jj_3_199(self);
  }
  @catch (
#line 4409
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 4409
    return YES;
  }
  @finally {
    
#line 4410
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 198, xla);
  }
}


#line 4413
jboolean FreemarkerCoreFMParser_jj_2_200WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 4415
  self->jj_la_ = xla;
  
#line 4415
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 4416
    return !FreemarkerCoreFMParser_jj_3_200(self);
  }
  @catch (
#line 4417
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 4417
    return YES;
  }
  @finally {
    
#line 4418
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 199, xla);
  }
}


#line 4421
jboolean FreemarkerCoreFMParser_jj_2_201WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 4423
  self->jj_la_ = xla;
  
#line 4423
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 4424
    return !FreemarkerCoreFMParser_jj_3_201(self);
  }
  @catch (
#line 4425
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 4425
    return YES;
  }
  @finally {
    
#line 4426
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 200, xla);
  }
}


#line 4429
jboolean FreemarkerCoreFMParser_jj_2_202WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 4431
  self->jj_la_ = xla;
  
#line 4431
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 4432
    return !FreemarkerCoreFMParser_jj_3_202(self);
  }
  @catch (
#line 4433
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 4433
    return YES;
  }
  @finally {
    
#line 4434
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 201, xla);
  }
}


#line 4437
jboolean FreemarkerCoreFMParser_jj_2_203WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 4439
  self->jj_la_ = xla;
  
#line 4439
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 4440
    return !FreemarkerCoreFMParser_jj_3_203(self);
  }
  @catch (
#line 4441
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 4441
    return YES;
  }
  @finally {
    
#line 4442
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 202, xla);
  }
}


#line 4445
jboolean FreemarkerCoreFMParser_jj_2_204WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 4447
  self->jj_la_ = xla;
  
#line 4447
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 4448
    return !FreemarkerCoreFMParser_jj_3_204(self);
  }
  @catch (
#line 4449
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 4449
    return YES;
  }
  @finally {
    
#line 4450
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 203, xla);
  }
}


#line 4453
jboolean FreemarkerCoreFMParser_jj_2_205WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 4455
  self->jj_la_ = xla;
  
#line 4455
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 4456
    return !FreemarkerCoreFMParser_jj_3_205(self);
  }
  @catch (
#line 4457
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 4457
    return YES;
  }
  @finally {
    
#line 4458
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 204, xla);
  }
}


#line 4461
jboolean FreemarkerCoreFMParser_jj_2_206WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 4463
  self->jj_la_ = xla;
  
#line 4463
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 4464
    return !FreemarkerCoreFMParser_jj_3_206(self);
  }
  @catch (
#line 4465
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 4465
    return YES;
  }
  @finally {
    
#line 4466
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 205, xla);
  }
}


#line 4469
jboolean FreemarkerCoreFMParser_jj_2_207WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 4471
  self->jj_la_ = xla;
  
#line 4471
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 4472
    return !FreemarkerCoreFMParser_jj_3_207(self);
  }
  @catch (
#line 4473
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 4473
    return YES;
  }
  @finally {
    
#line 4474
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 206, xla);
  }
}


#line 4477
jboolean FreemarkerCoreFMParser_jj_2_208WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 4479
  self->jj_la_ = xla;
  
#line 4479
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 4480
    return !FreemarkerCoreFMParser_jj_3_208(self);
  }
  @catch (
#line 4481
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 4481
    return YES;
  }
  @finally {
    
#line 4482
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 207, xla);
  }
}


#line 4485
jboolean FreemarkerCoreFMParser_jj_2_209WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 4487
  self->jj_la_ = xla;
  
#line 4487
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 4488
    return !FreemarkerCoreFMParser_jj_3_209(self);
  }
  @catch (
#line 4489
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 4489
    return YES;
  }
  @finally {
    
#line 4490
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 208, xla);
  }
}


#line 4493
jboolean FreemarkerCoreFMParser_jj_2_210WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 4495
  self->jj_la_ = xla;
  
#line 4495
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 4496
    return !FreemarkerCoreFMParser_jj_3_210(self);
  }
  @catch (
#line 4497
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 4497
    return YES;
  }
  @finally {
    
#line 4498
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 209, xla);
  }
}


#line 4501
jboolean FreemarkerCoreFMParser_jj_2_211WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 4503
  self->jj_la_ = xla;
  
#line 4503
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 4504
    return !FreemarkerCoreFMParser_jj_3_211(self);
  }
  @catch (
#line 4505
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 4505
    return YES;
  }
  @finally {
    
#line 4506
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 210, xla);
  }
}


#line 4509
jboolean FreemarkerCoreFMParser_jj_2_212WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 4511
  self->jj_la_ = xla;
  
#line 4511
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 4512
    return !FreemarkerCoreFMParser_jj_3_212(self);
  }
  @catch (
#line 4513
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 4513
    return YES;
  }
  @finally {
    
#line 4514
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 211, xla);
  }
}


#line 4517
jboolean FreemarkerCoreFMParser_jj_2_213WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 4519
  self->jj_la_ = xla;
  
#line 4519
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 4520
    return !FreemarkerCoreFMParser_jj_3_213(self);
  }
  @catch (
#line 4521
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 4521
    return YES;
  }
  @finally {
    
#line 4522
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 212, xla);
  }
}


#line 4525
jboolean FreemarkerCoreFMParser_jj_2_214WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 4527
  self->jj_la_ = xla;
  
#line 4527
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 4528
    return !FreemarkerCoreFMParser_jj_3_214(self);
  }
  @catch (
#line 4529
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 4529
    return YES;
  }
  @finally {
    
#line 4530
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 213, xla);
  }
}


#line 4533
jboolean FreemarkerCoreFMParser_jj_2_215WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 4535
  self->jj_la_ = xla;
  
#line 4535
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 4536
    return !FreemarkerCoreFMParser_jj_3_215(self);
  }
  @catch (
#line 4537
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 4537
    return YES;
  }
  @finally {
    
#line 4538
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 214, xla);
  }
}


#line 4541
jboolean FreemarkerCoreFMParser_jj_2_216WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 4543
  self->jj_la_ = xla;
  
#line 4543
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 4544
    return !FreemarkerCoreFMParser_jj_3_216(self);
  }
  @catch (
#line 4545
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 4545
    return YES;
  }
  @finally {
    
#line 4546
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 215, xla);
  }
}


#line 4549
jboolean FreemarkerCoreFMParser_jj_2_217WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 4551
  self->jj_la_ = xla;
  
#line 4551
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 4552
    return !FreemarkerCoreFMParser_jj_3_217(self);
  }
  @catch (
#line 4553
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 4553
    return YES;
  }
  @finally {
    
#line 4554
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 216, xla);
  }
}


#line 4557
jboolean FreemarkerCoreFMParser_jj_2_218WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 4559
  self->jj_la_ = xla;
  
#line 4559
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 4560
    return !FreemarkerCoreFMParser_jj_3_218(self);
  }
  @catch (
#line 4561
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 4561
    return YES;
  }
  @finally {
    
#line 4562
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 217, xla);
  }
}


#line 4565
jboolean FreemarkerCoreFMParser_jj_2_219WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 4567
  self->jj_la_ = xla;
  
#line 4567
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 4568
    return !FreemarkerCoreFMParser_jj_3_219(self);
  }
  @catch (
#line 4569
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 4569
    return YES;
  }
  @finally {
    
#line 4570
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 218, xla);
  }
}


#line 4573
jboolean FreemarkerCoreFMParser_jj_2_220WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 4575
  self->jj_la_ = xla;
  
#line 4575
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 4576
    return !FreemarkerCoreFMParser_jj_3_220(self);
  }
  @catch (
#line 4577
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 4577
    return YES;
  }
  @finally {
    
#line 4578
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 219, xla);
  }
}


#line 4581
jboolean FreemarkerCoreFMParser_jj_2_221WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 4583
  self->jj_la_ = xla;
  
#line 4583
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 4584
    return !FreemarkerCoreFMParser_jj_3_221(self);
  }
  @catch (
#line 4585
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 4585
    return YES;
  }
  @finally {
    
#line 4586
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 220, xla);
  }
}


#line 4589
jboolean FreemarkerCoreFMParser_jj_2_222WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 4591
  self->jj_la_ = xla;
  
#line 4591
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 4592
    return !FreemarkerCoreFMParser_jj_3_222(self);
  }
  @catch (
#line 4593
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 4593
    return YES;
  }
  @finally {
    
#line 4594
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 221, xla);
  }
}


#line 4597
jboolean FreemarkerCoreFMParser_jj_2_223WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 4599
  self->jj_la_ = xla;
  
#line 4599
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 4600
    return !FreemarkerCoreFMParser_jj_3_223(self);
  }
  @catch (
#line 4601
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 4601
    return YES;
  }
  @finally {
    
#line 4602
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 222, xla);
  }
}


#line 4605
jboolean FreemarkerCoreFMParser_jj_2_224WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 4607
  self->jj_la_ = xla;
  
#line 4607
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 4608
    return !FreemarkerCoreFMParser_jj_3_224(self);
  }
  @catch (
#line 4609
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 4609
    return YES;
  }
  @finally {
    
#line 4610
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 223, xla);
  }
}


#line 4613
jboolean FreemarkerCoreFMParser_jj_2_225WithInt_(FreemarkerCoreFMParser *self, jint xla) {
  
#line 4615
  self->jj_la_ = xla;
  
#line 4615
  self->jj_lastpos_ = self->jj_scanpos_ = self->token_;
  @try {
    
#line 4616
    return !FreemarkerCoreFMParser_jj_3_225(self);
  }
  @catch (
#line 4617
  FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    
#line 4617
    return YES;
  }
  @finally {
    
#line 4618
    FreemarkerCoreFMParser_jj_saveWithInt_withInt_(self, 224, xla);
  }
}


#line 4621
jboolean FreemarkerCoreFMParser_jj_3_21(FreemarkerCoreFMParser *self) {
  
#line 4623
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_DIVIDE)) return YES;
  return NO;
}


#line 4627
jboolean FreemarkerCoreFMParser_jj_3_151(FreemarkerCoreFMParser *self) {
  
#line 4629
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_EMPTY_DIRECTIVE_END)) return YES;
  return NO;
}


#line 4633
jboolean FreemarkerCoreFMParser_jj_3_20(FreemarkerCoreFMParser *self) {
  
#line 4635
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_TIMES)) return YES;
  return NO;
}


#line 4639
jboolean FreemarkerCoreFMParser_jj_3_19(FreemarkerCoreFMParser *self) {
  
#line 4641
  FreemarkerCoreToken *xsp;
  xsp = self->jj_scanpos_;
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, 113)) {
    self->jj_scanpos_ = xsp;
    if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, 116)) {
      self->jj_scanpos_ = xsp;
      if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, 117)) return YES;
    }
  }
  return NO;
}


#line 4653
jboolean FreemarkerCoreFMParser_jj_3_145(FreemarkerCoreFMParser *self) {
  
#line 4655
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_TERMINATING_WHITESPACE)) return YES;
  return NO;
}


#line 4659
jboolean FreemarkerCoreFMParser_jj_3_149(FreemarkerCoreFMParser *self) {
  
#line 4661
  FreemarkerCoreToken *xsp;
  xsp = self->jj_scanpos_;
  if (FreemarkerCoreFMParser_jj_3_145(self)) self->jj_scanpos_ = xsp;
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_ID)) return YES;
  while (YES) {
    xsp = self->jj_scanpos_;
    if (FreemarkerCoreFMParser_jj_3_146(self)) {
      
#line 4667
      self->jj_scanpos_ = xsp;
      
#line 4667
      break;
    }
  }
  
#line 4669
  return NO;
}


#line 4672
jboolean FreemarkerCoreFMParser_jj_3_144(FreemarkerCoreFMParser *self) {
  
#line 4674
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_ID)) return YES;
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_EQUALS)) return YES;
  return NO;
}


#line 4679
jboolean FreemarkerCoreFMParser_jj_3_82(FreemarkerCoreFMParser *self) {
  
#line 4681
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_AS)) return YES;
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_ID)) return YES;
  return NO;
}


#line 4686
jboolean FreemarkerCoreFMParser_jj_3_150(FreemarkerCoreFMParser *self) {
  
#line 4688
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_SEMICOLON)) return YES;
  FreemarkerCoreToken *xsp;
  xsp = self->jj_scanpos_;
  if (FreemarkerCoreFMParser_jj_3_149(self)) self->jj_scanpos_ = xsp;
  return NO;
}


#line 4695
jboolean FreemarkerCoreFMParser_jj_3R_94(FreemarkerCoreFMParser *self) {
  
#line 4697
  FreemarkerCoreToken *xsp;
  xsp = self->jj_scanpos_;
  if (FreemarkerCoreFMParser_jj_3_20(self)) {
    self->jj_scanpos_ = xsp;
    if (FreemarkerCoreFMParser_jj_3_21(self)) {
      self->jj_scanpos_ = xsp;
      if (FreemarkerCoreFMParser_jj_3_22(self)) return YES;
    }
  }
  if (FreemarkerCoreFMParser_jj_3R_93(self)) return YES;
  return NO;
}


#line 4710
jboolean FreemarkerCoreFMParser_jj_3R_51(FreemarkerCoreFMParser *self) {
  
#line 4712
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_LIST)) return YES;
  if (FreemarkerCoreFMParser_jj_3R_42(self)) return YES;
  return NO;
}


#line 4717
jboolean FreemarkerCoreFMParser_jj_3R_84(FreemarkerCoreFMParser *self) {
  
#line 4719
  if (FreemarkerCoreFMParser_jj_3R_93(self)) return YES;
  FreemarkerCoreToken *xsp;
  while (YES) {
    xsp = self->jj_scanpos_;
    if (FreemarkerCoreFMParser_jj_3R_94(self)) {
      
#line 4723
      self->jj_scanpos_ = xsp;
      
#line 4723
      break;
    }
  }
  
#line 4725
  return NO;
}


#line 4728
jboolean FreemarkerCoreFMParser_jj_3_143(FreemarkerCoreFMParser *self) {
  
#line 4730
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_TERMINATING_WHITESPACE)) return YES;
  return NO;
}


#line 4734
jboolean FreemarkerCoreFMParser_jj_3R_58(FreemarkerCoreFMParser *self) {
  
#line 4736
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_UNIFIED_CALL)) return YES;
  if (FreemarkerCoreFMParser_jj_3R_42(self)) return YES;
  return NO;
}


#line 4741
jboolean FreemarkerCoreFMParser_jj_3R_90(FreemarkerCoreFMParser *self) {
  
#line 4743
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_RECOVER)) return YES;
  return NO;
}


#line 4747
jboolean FreemarkerCoreFMParser_jj_3_18(FreemarkerCoreFMParser *self) {
  
#line 4749
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_MINUS)) return YES;
  return NO;
}


#line 4753
jboolean FreemarkerCoreFMParser_jj_3_17(FreemarkerCoreFMParser *self) {
  
#line 4755
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_PLUS)) return YES;
  return NO;
}


#line 4759
jboolean FreemarkerCoreFMParser_jj_3_16(FreemarkerCoreFMParser *self) {
  
#line 4761
  FreemarkerCoreToken *xsp;
  xsp = self->jj_scanpos_;
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, 111)) {
    self->jj_scanpos_ = xsp;
    if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, 112)) return YES;
  }
  return NO;
}


#line 4770
jboolean FreemarkerCoreFMParser_jj_3_225(FreemarkerCoreFMParser *self) {
  
#line 4772
  FreemarkerCoreToken *xsp;
  xsp = self->jj_scanpos_;
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, 72)) self->jj_scanpos_ = xsp;
  xsp = self->jj_scanpos_;
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, 70)) {
    self->jj_scanpos_ = xsp;
    if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, 69)) return YES;
  }
  return NO;
}


#line 4783
jboolean FreemarkerCoreFMParser_jj_3_81(FreemarkerCoreFMParser *self) {
  
#line 4785
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_END_ATTEMPT)) return YES;
  return NO;
}


#line 4789
jboolean FreemarkerCoreFMParser_jj_3_80(FreemarkerCoreFMParser *self) {
  
#line 4791
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_END_RECOVER)) return YES;
  return NO;
}


#line 4795
jboolean FreemarkerCoreFMParser_jj_3R_85(FreemarkerCoreFMParser *self) {
  
#line 4797
  FreemarkerCoreToken *xsp;
  xsp = self->jj_scanpos_;
  if (FreemarkerCoreFMParser_jj_3_17(self)) {
    self->jj_scanpos_ = xsp;
    if (FreemarkerCoreFMParser_jj_3_18(self)) return YES;
  }
  if (FreemarkerCoreFMParser_jj_3R_84(self)) return YES;
  return NO;
}


#line 4807
jboolean FreemarkerCoreFMParser_jj_3R_57(FreemarkerCoreFMParser *self) {
  
#line 4809
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_COMPRESS)) return YES;
  if (FreemarkerCoreFMParser_jj_3R_44(self)) return YES;
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_END_COMPRESS)) return YES;
  return NO;
}


#line 4815
jboolean FreemarkerCoreFMParser_jj_3R_78(FreemarkerCoreFMParser *self) {
  
#line 4817
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_ATTEMPT)) return YES;
  if (FreemarkerCoreFMParser_jj_3R_44(self)) return YES;
  if (FreemarkerCoreFMParser_jj_3R_90(self)) return YES;
  return NO;
}


#line 4823
jboolean FreemarkerCoreFMParser_jj_3R_34(FreemarkerCoreFMParser *self) {
  
#line 4825
  if (FreemarkerCoreFMParser_jj_3R_84(self)) return YES;
  FreemarkerCoreToken *xsp;
  while (YES) {
    xsp = self->jj_scanpos_;
    if (FreemarkerCoreFMParser_jj_3R_85(self)) {
      
#line 4829
      self->jj_scanpos_ = xsp;
      
#line 4829
      break;
    }
  }
  
#line 4831
  return NO;
}


#line 4834
jboolean FreemarkerCoreFMParser_jj_3_223(FreemarkerCoreFMParser *self) {
  
#line 4836
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_COMMA)) return YES;
  return NO;
}


#line 4840
jboolean FreemarkerCoreFMParser_jj_3_15(FreemarkerCoreFMParser *self) {
  
#line 4842
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_MINUS)) return YES;
  return NO;
}


#line 4846
jboolean FreemarkerCoreFMParser_jj_3_79(FreemarkerCoreFMParser *self) {
  
#line 4848
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_ELSE)) return YES;
  if (FreemarkerCoreFMParser_jj_3R_44(self)) return YES;
  return NO;
}


#line 4853
jboolean FreemarkerCoreFMParser_jj_3_14(FreemarkerCoreFMParser *self) {
  
#line 4855
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_PLUS)) return YES;
  return NO;
}


#line 4859
jboolean FreemarkerCoreFMParser_jj_3_142(FreemarkerCoreFMParser *self) {
  
#line 4861
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_END_FUNCTION)) return YES;
  return NO;
}


#line 4865
jboolean FreemarkerCoreFMParser_jj_3_224(FreemarkerCoreFMParser *self) {
  
#line 4867
  if (FreemarkerCoreFMParser_jj_3R_28(self)) return YES;
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_EQUALS)) return YES;
  return NO;
}


#line 4872
jboolean FreemarkerCoreFMParser_jj_3R_31(FreemarkerCoreFMParser *self) {
  
#line 4874
  FreemarkerCoreToken *xsp;
  xsp = self->jj_scanpos_;
  if (FreemarkerCoreFMParser_jj_3_14(self)) {
    self->jj_scanpos_ = xsp;
    if (FreemarkerCoreFMParser_jj_3_15(self)) return YES;
  }
  if (FreemarkerCoreFMParser_jj_3R_33(self)) return YES;
  return NO;
}


#line 4884
jboolean FreemarkerCoreFMParser_jj_3_141(FreemarkerCoreFMParser *self) {
  
#line 4886
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_END_MACRO)) return YES;
  return NO;
}


#line 4890
jboolean FreemarkerCoreFMParser_jj_3_78(FreemarkerCoreFMParser *self) {
  
#line 4892
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_ELSE_IF)) return YES;
  if (FreemarkerCoreFMParser_jj_3R_42(self)) return YES;
  return NO;
}


#line 4897
jboolean FreemarkerCoreFMParser_jj_3_13(FreemarkerCoreFMParser *self) {
  
#line 4899
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_EXCLAM)) return YES;
  return NO;
}


#line 4903
jboolean FreemarkerCoreFMParser_jj_3_140(FreemarkerCoreFMParser *self) {
  
#line 4905
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_CLOSE_PAREN)) return YES;
  return NO;
}


#line 4909
jboolean FreemarkerCoreFMParser_jj_3R_32(FreemarkerCoreFMParser *self) {
  
#line 4911
  FreemarkerCoreToken *xsp;
  if (FreemarkerCoreFMParser_jj_3_13(self)) return YES;
  while (YES) {
    xsp = self->jj_scanpos_;
    if (FreemarkerCoreFMParser_jj_3_13(self)) {
      
#line 4915
      self->jj_scanpos_ = xsp;
      
#line 4915
      break;
    }
  }
  
#line 4917
  if (FreemarkerCoreFMParser_jj_3R_33(self)) return YES;
  return NO;
}


#line 4921
jboolean FreemarkerCoreFMParser_jj_3R_50(FreemarkerCoreFMParser *self) {
  
#line 4923
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_IF)) return YES;
  if (FreemarkerCoreFMParser_jj_3R_42(self)) return YES;
  return NO;
}


#line 4928
jboolean FreemarkerCoreFMParser_jj_3_12(FreemarkerCoreFMParser *self) {
  
#line 4930
  if (FreemarkerCoreFMParser_jj_3R_33(self)) return YES;
  return NO;
}


#line 4934
jboolean FreemarkerCoreFMParser_jj_3_11(FreemarkerCoreFMParser *self) {
  
#line 4936
  if (FreemarkerCoreFMParser_jj_3R_32(self)) return YES;
  return NO;
}


#line 4940
jboolean FreemarkerCoreFMParser_jj_3_10(FreemarkerCoreFMParser *self) {
  
#line 4942
  if (FreemarkerCoreFMParser_jj_3R_31(self)) return YES;
  return NO;
}


#line 4946
jboolean FreemarkerCoreFMParser_jj_3R_93(FreemarkerCoreFMParser *self) {
  
#line 4948
  FreemarkerCoreToken *xsp;
  xsp = self->jj_scanpos_;
  if (FreemarkerCoreFMParser_jj_3_10(self)) {
    self->jj_scanpos_ = xsp;
    if (FreemarkerCoreFMParser_jj_3_11(self)) {
      self->jj_scanpos_ = xsp;
      if (FreemarkerCoreFMParser_jj_3_12(self)) return YES;
    }
  }
  return NO;
}


#line 4960
jboolean FreemarkerCoreFMParser_jj_3_139(FreemarkerCoreFMParser *self) {
  
#line 4962
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_COMMA)) return YES;
  return NO;
}


#line 4966
jboolean FreemarkerCoreFMParser_jj_3_138(FreemarkerCoreFMParser *self) {
  
#line 4968
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_EQUALS)) return YES;
  if (FreemarkerCoreFMParser_jj_3R_42(self)) return YES;
  return NO;
}


#line 4973
jboolean FreemarkerCoreFMParser_jj_3_137(FreemarkerCoreFMParser *self) {
  
#line 4975
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_ELLIPSIS)) return YES;
  return NO;
}


#line 4979
jboolean FreemarkerCoreFMParser_jj_3_136(FreemarkerCoreFMParser *self) {
  
#line 4981
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_ID)) return YES;
  FreemarkerCoreToken *xsp;
  xsp = self->jj_scanpos_;
  if (FreemarkerCoreFMParser_jj_3_137(self)) self->jj_scanpos_ = xsp;
  xsp = self->jj_scanpos_;
  if (FreemarkerCoreFMParser_jj_3_138(self)) self->jj_scanpos_ = xsp;
  xsp = self->jj_scanpos_;
  if (FreemarkerCoreFMParser_jj_3_139(self)) self->jj_scanpos_ = xsp;
  return NO;
}


#line 4992
jboolean FreemarkerCoreFMParser_jj_3_135(FreemarkerCoreFMParser *self) {
  
#line 4994
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_OPEN_PAREN)) return YES;
  return NO;
}


#line 4998
jboolean FreemarkerCoreFMParser_jj_3_9(FreemarkerCoreFMParser *self) {
  
#line 5000
  FreemarkerCoreToken *xsp;
  xsp = self->jj_scanpos_;
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, 91)) {
    self->jj_scanpos_ = xsp;
    if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, 124)) {
      self->jj_scanpos_ = xsp;
      if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, 126)) {
        self->jj_scanpos_ = xsp;
        if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, 95)) {
          self->jj_scanpos_ = xsp;
          if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, 120)) {
            self->jj_scanpos_ = xsp;
            if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, 144)) {
              self->jj_scanpos_ = xsp;
              if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, 96)) return YES;
            }
          }
        }
      }
    }
  }
  return NO;
}


#line 5024
jboolean FreemarkerCoreFMParser_jj_3R_29(FreemarkerCoreFMParser *self) {
  
#line 5026
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_OPEN_PAREN)) return YES;
  if (FreemarkerCoreFMParser_jj_3R_42(self)) return YES;
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_CLOSE_PAREN)) return YES;
  return NO;
}


#line 5032
jboolean FreemarkerCoreFMParser_jj_3_134(FreemarkerCoreFMParser *self) {
  
#line 5034
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_FUNCTION)) return YES;
  return NO;
}


#line 5038
jboolean FreemarkerCoreFMParser_jj_3_133(FreemarkerCoreFMParser *self) {
  
#line 5040
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_MACRO)) return YES;
  return NO;
}


#line 5044
jboolean FreemarkerCoreFMParser_jj_3R_83(FreemarkerCoreFMParser *self) {
  
#line 5046
  if (FreemarkerCoreFMParser_jj_3R_92(self)) return YES;
  return NO;
}


#line 5050
jboolean FreemarkerCoreFMParser_jj_3_8(FreemarkerCoreFMParser *self) {
  
#line 5052
  if (FreemarkerCoreFMParser_jj_3R_30(self)) return YES;
  return NO;
}


#line 5056
jboolean FreemarkerCoreFMParser_jj_3R_56(FreemarkerCoreFMParser *self) {
  
#line 5058
  FreemarkerCoreToken *xsp;
  xsp = self->jj_scanpos_;
  if (FreemarkerCoreFMParser_jj_3_133(self)) {
    self->jj_scanpos_ = xsp;
    if (FreemarkerCoreFMParser_jj_3_134(self)) return YES;
  }
  if (FreemarkerCoreFMParser_jj_3R_88(self)) return YES;
  return NO;
}


#line 5068
jboolean FreemarkerCoreFMParser_jj_3_7(FreemarkerCoreFMParser *self) {
  
#line 5070
  if (FreemarkerCoreFMParser_jj_3R_29(self)) return YES;
  return NO;
}


#line 5074
jboolean FreemarkerCoreFMParser_jj_3_6(FreemarkerCoreFMParser *self) {
  
#line 5076
  if (FreemarkerCoreFMParser_jj_3R_28(self)) return YES;
  return NO;
}


#line 5080
jboolean FreemarkerCoreFMParser_jj_3_5(FreemarkerCoreFMParser *self) {
  
#line 5082
  if (FreemarkerCoreFMParser_jj_3R_27(self)) return YES;
  return NO;
}


#line 5086
jboolean FreemarkerCoreFMParser_jj_3_4(FreemarkerCoreFMParser *self) {
  
#line 5088
  if (FreemarkerCoreFMParser_jj_3R_26(self)) return YES;
  return NO;
}


#line 5092
jboolean FreemarkerCoreFMParser_jj_3_3(FreemarkerCoreFMParser *self) {
  
#line 5094
  if (FreemarkerCoreFMParser_jj_3R_25(self)) return YES;
  return NO;
}


#line 5098
jboolean FreemarkerCoreFMParser_jj_3_2(FreemarkerCoreFMParser *self) {
  
#line 5100
  if (FreemarkerCoreFMParser_jj_3R_24(self)) return YES;
  return NO;
}


#line 5104
jboolean FreemarkerCoreFMParser_jj_3_1(FreemarkerCoreFMParser *self) {
  
#line 5106
  if (FreemarkerCoreFMParser_jj_3R_23(self)) return YES;
  return NO;
}


#line 5110
jboolean FreemarkerCoreFMParser_jj_3_220(FreemarkerCoreFMParser *self) {
  
#line 5112
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_ID)) return YES;
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_EQUALS)) return YES;
  return NO;
}


#line 5117
jboolean FreemarkerCoreFMParser_jj_3R_33(FreemarkerCoreFMParser *self) {
  
#line 5119
  FreemarkerCoreToken *xsp;
  xsp = self->jj_scanpos_;
  if (FreemarkerCoreFMParser_jj_3_1(self)) {
    self->jj_scanpos_ = xsp;
    if (FreemarkerCoreFMParser_jj_3_2(self)) {
      self->jj_scanpos_ = xsp;
      if (FreemarkerCoreFMParser_jj_3_3(self)) {
        self->jj_scanpos_ = xsp;
        if (FreemarkerCoreFMParser_jj_3_4(self)) {
          self->jj_scanpos_ = xsp;
          if (FreemarkerCoreFMParser_jj_3_5(self)) {
            self->jj_scanpos_ = xsp;
            if (FreemarkerCoreFMParser_jj_3_6(self)) {
              self->jj_scanpos_ = xsp;
              if (FreemarkerCoreFMParser_jj_3_7(self)) {
                self->jj_scanpos_ = xsp;
                if (FreemarkerCoreFMParser_jj_3_8(self)) return YES;
              }
            }
          }
        }
      }
    }
  }
  while (YES) {
    xsp = self->jj_scanpos_;
    if (FreemarkerCoreFMParser_jj_3R_83(self)) {
      
#line 5145
      self->jj_scanpos_ = xsp;
      
#line 5145
      break;
    }
  }
  
#line 5147
  return NO;
}


#line 5150
jboolean FreemarkerCoreFMParser_jj_3_77(FreemarkerCoreFMParser *self) {
  
#line 5152
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_SEMICOLON)) return YES;
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_ID)) return YES;
  return NO;
}


#line 5157
jboolean FreemarkerCoreFMParser_jj_3R_81(FreemarkerCoreFMParser *self) {
  
#line 5159
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_HASH_INTERPOLATION_OPENING)) return YES;
  if (FreemarkerCoreFMParser_jj_3R_42(self)) return YES;
  return NO;
}


#line 5164
jboolean FreemarkerCoreFMParser_jj_3_222(FreemarkerCoreFMParser *self) {
  
#line 5166
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_FTL_HEADER)) return YES;
  FreemarkerCoreToken *xsp;
  while (YES) {
    xsp = self->jj_scanpos_;
    if (FreemarkerCoreFMParser_jj_3_220(self)) {
      
#line 5170
      self->jj_scanpos_ = xsp;
      
#line 5170
      break;
    }
  }
  
#line 5172
  if (FreemarkerCoreFMParser_jj_3R_46(self)) return YES;
  return NO;
}


#line 5176
jboolean FreemarkerCoreFMParser_jj_3R_55(FreemarkerCoreFMParser *self) {
  
#line 5178
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_IMPORT)) return YES;
  if (FreemarkerCoreFMParser_jj_3R_42(self)) return YES;
  return NO;
}


#line 5183
jboolean FreemarkerCoreFMParser_jj_3_221(FreemarkerCoreFMParser *self) {
  
#line 5185
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_TRIVIAL_FTL_HEADER)) return YES;
  return NO;
}


#line 5189
jboolean FreemarkerCoreFMParser_jj_3R_42(FreemarkerCoreFMParser *self) {
  
#line 5191
  if (FreemarkerCoreFMParser_jj_3R_86(self)) return YES;
  return NO;
}


#line 5195
jboolean FreemarkerCoreFMParser_jj_3_219(FreemarkerCoreFMParser *self) {
  
#line 5197
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_STATIC_TEXT_WS)) return YES;
  return NO;
}


#line 5201
jboolean FreemarkerCoreFMParser_jj_3R_80(FreemarkerCoreFMParser *self) {
  
#line 5203
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_DOLLAR_INTERPOLATION_OPENING)) return YES;
  if (FreemarkerCoreFMParser_jj_3R_42(self)) return YES;
  return NO;
}


#line 5208
jboolean FreemarkerCoreFMParser_jj_3R_87(FreemarkerCoreFMParser *self) {
  
#line 5210
  if (FreemarkerCoreFMParser_jj_3R_97(self)) return YES;
  return NO;
}


#line 5214
jboolean FreemarkerCoreFMParser_jj_3R_44(FreemarkerCoreFMParser *self) {
  
#line 5216
  FreemarkerCoreToken *xsp;
  xsp = self->jj_scanpos_;
  if (FreemarkerCoreFMParser_jj_3R_87(self)) self->jj_scanpos_ = xsp;
  return NO;
}


#line 5222
jboolean FreemarkerCoreFMParser_jj_3_75(FreemarkerCoreFMParser *self) {
  
#line 5224
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_COLON)) return YES;
  return NO;
}


#line 5228
jboolean FreemarkerCoreFMParser_jj_3_74(FreemarkerCoreFMParser *self) {
  
#line 5230
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_COMMA)) return YES;
  return NO;
}


#line 5234
jboolean FreemarkerCoreFMParser_jj_3_73(FreemarkerCoreFMParser *self) {
  
#line 5236
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_COMMA)) return YES;
  if (FreemarkerCoreFMParser_jj_3R_42(self)) return YES;
  FreemarkerCoreToken *xsp;
  xsp = self->jj_scanpos_;
  if (FreemarkerCoreFMParser_jj_3_74(self)) {
    self->jj_scanpos_ = xsp;
    if (FreemarkerCoreFMParser_jj_3_75(self)) return YES;
  }
  if (FreemarkerCoreFMParser_jj_3R_42(self)) return YES;
  return NO;
}


#line 5248
jboolean FreemarkerCoreFMParser_jj_3_132(FreemarkerCoreFMParser *self) {
  
#line 5250
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_ID)) return YES;
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_EQUALS)) return YES;
  return NO;
}


#line 5255
jboolean FreemarkerCoreFMParser_jj_3_217(FreemarkerCoreFMParser *self) {
  
#line 5257
  if (FreemarkerCoreFMParser_jj_3R_81(self)) return YES;
  return NO;
}


#line 5261
jboolean FreemarkerCoreFMParser_jj_3_72(FreemarkerCoreFMParser *self) {
  
#line 5263
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_COLON)) return YES;
  return NO;
}


#line 5267
jboolean FreemarkerCoreFMParser_jj_3_216(FreemarkerCoreFMParser *self) {
  
#line 5269
  if (FreemarkerCoreFMParser_jj_3R_80(self)) return YES;
  return NO;
}


#line 5273
jboolean FreemarkerCoreFMParser_jj_3_131(FreemarkerCoreFMParser *self) {
  
#line 5275
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_SEMICOLON)) return YES;
  return NO;
}


#line 5279
jboolean FreemarkerCoreFMParser_jj_3_209(FreemarkerCoreFMParser *self) {
  
#line 5281
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_LONE_LESS_THAN_OR_DASH)) return YES;
  return NO;
}


#line 5285
jboolean FreemarkerCoreFMParser_jj_3_215(FreemarkerCoreFMParser *self) {
  
#line 5287
  if (FreemarkerCoreFMParser_jj_3R_79(self)) return YES;
  return NO;
}


#line 5291
jboolean FreemarkerCoreFMParser_jj_3R_54(FreemarkerCoreFMParser *self) {
  
#line 5293
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants__INCLUDE)) return YES;
  if (FreemarkerCoreFMParser_jj_3R_42(self)) return YES;
  return NO;
}


#line 5298
jboolean FreemarkerCoreFMParser_jj_3_71(FreemarkerCoreFMParser *self) {
  
#line 5300
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_COMMA)) return YES;
  return NO;
}


#line 5304
jboolean FreemarkerCoreFMParser_jj_3_218(FreemarkerCoreFMParser *self) {
  
#line 5306
  FreemarkerCoreToken *xsp;
  xsp = self->jj_scanpos_;
  if (FreemarkerCoreFMParser_jj_3_215(self)) {
    self->jj_scanpos_ = xsp;
    if (FreemarkerCoreFMParser_jj_3_216(self)) {
      self->jj_scanpos_ = xsp;
      if (FreemarkerCoreFMParser_jj_3_217(self)) return YES;
    }
  }
  return NO;
}


#line 5318
jboolean FreemarkerCoreFMParser_jj_3_76(FreemarkerCoreFMParser *self) {
  
#line 5320
  if (FreemarkerCoreFMParser_jj_3R_42(self)) return YES;
  FreemarkerCoreToken *xsp;
  xsp = self->jj_scanpos_;
  if (FreemarkerCoreFMParser_jj_3_71(self)) {
    self->jj_scanpos_ = xsp;
    if (FreemarkerCoreFMParser_jj_3_72(self)) return YES;
  }
  if (FreemarkerCoreFMParser_jj_3R_42(self)) return YES;
  while (YES) {
    xsp = self->jj_scanpos_;
    if (FreemarkerCoreFMParser_jj_3_73(self)) {
      
#line 5330
      self->jj_scanpos_ = xsp;
      
#line 5330
      break;
    }
  }
  
#line 5332
  return NO;
}


#line 5335
jboolean FreemarkerCoreFMParser_jj_3_128(FreemarkerCoreFMParser *self) {
  
#line 5337
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_END_GLOBAL)) return YES;
  return NO;
}


#line 5341
jboolean FreemarkerCoreFMParser_jj_3R_24(FreemarkerCoreFMParser *self) {
  
#line 5343
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_OPENING_CURLY_BRACKET)) return YES;
  FreemarkerCoreToken *xsp;
  xsp = self->jj_scanpos_;
  if (FreemarkerCoreFMParser_jj_3_76(self)) self->jj_scanpos_ = xsp;
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_CLOSING_CURLY_BRACKET)) return YES;
  return NO;
}


#line 5351
jboolean FreemarkerCoreFMParser_jj_3_119(FreemarkerCoreFMParser *self) {
  
#line 5353
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_MOD_EQUALS)) return YES;
  return NO;
}


#line 5357
jboolean FreemarkerCoreFMParser_jj_3_127(FreemarkerCoreFMParser *self) {
  
#line 5359
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_END_ASSIGN)) return YES;
  return NO;
}


#line 5363
jboolean FreemarkerCoreFMParser_jj_3_126(FreemarkerCoreFMParser *self) {
  
#line 5365
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_END_LOCAL)) return YES;
  return NO;
}


#line 5369
jboolean FreemarkerCoreFMParser_jj_3_208(FreemarkerCoreFMParser *self) {
  
#line 5371
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_TERSE_COMMENT_END)) return YES;
  return NO;
}


#line 5375
jboolean FreemarkerCoreFMParser_jj_3_70(FreemarkerCoreFMParser *self) {
  
#line 5377
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_TRUE)) return YES;
  return NO;
}


#line 5381
jboolean FreemarkerCoreFMParser_jj_3_118(FreemarkerCoreFMParser *self) {
  
#line 5383
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_DIV_EQUALS)) return YES;
  return NO;
}


#line 5387
jboolean FreemarkerCoreFMParser_jj_3_69(FreemarkerCoreFMParser *self) {
  
#line 5389
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_FALSE)) return YES;
  return NO;
}


#line 5393
jboolean FreemarkerCoreFMParser_jj_3_214(FreemarkerCoreFMParser *self) {
  
#line 5395
  if (FreemarkerCoreFMParser_jj_3R_82(self)) return YES;
  return NO;
}


#line 5399
jboolean FreemarkerCoreFMParser_jj_3_213(FreemarkerCoreFMParser *self) {
  
#line 5401
  if (FreemarkerCoreFMParser_jj_3R_81(self)) return YES;
  return NO;
}


#line 5405
jboolean FreemarkerCoreFMParser_jj_3_212(FreemarkerCoreFMParser *self) {
  
#line 5407
  if (FreemarkerCoreFMParser_jj_3R_80(self)) return YES;
  return NO;
}


#line 5411
jboolean FreemarkerCoreFMParser_jj_3R_26(FreemarkerCoreFMParser *self) {
  
#line 5413
  FreemarkerCoreToken *xsp;
  xsp = self->jj_scanpos_;
  if (FreemarkerCoreFMParser_jj_3_69(self)) {
    self->jj_scanpos_ = xsp;
    if (FreemarkerCoreFMParser_jj_3_70(self)) return YES;
  }
  return NO;
}


#line 5422
jboolean FreemarkerCoreFMParser_jj_3_125(FreemarkerCoreFMParser *self) {
  
#line 5424
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_IN)) return YES;
  if (FreemarkerCoreFMParser_jj_3R_42(self)) return YES;
  return NO;
}


#line 5429
jboolean FreemarkerCoreFMParser_jj_3_211(FreemarkerCoreFMParser *self) {
  
#line 5431
  if (FreemarkerCoreFMParser_jj_3R_79(self)) return YES;
  return NO;
}


#line 5435
jboolean FreemarkerCoreFMParser_jj_3R_100(FreemarkerCoreFMParser *self) {
  
#line 5437
  FreemarkerCoreToken *xsp;
  xsp = self->jj_scanpos_;
  if (FreemarkerCoreFMParser_jj_3_211(self)) {
    self->jj_scanpos_ = xsp;
    if (FreemarkerCoreFMParser_jj_3_212(self)) {
      self->jj_scanpos_ = xsp;
      if (FreemarkerCoreFMParser_jj_3_213(self)) {
        self->jj_scanpos_ = xsp;
        if (FreemarkerCoreFMParser_jj_3_214(self)) return YES;
      }
    }
  }
  return NO;
}


#line 5452
jboolean FreemarkerCoreFMParser_jj_3_117(FreemarkerCoreFMParser *self) {
  
#line 5454
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_TIMES_EQUALS)) return YES;
  return NO;
}


#line 5458
jboolean FreemarkerCoreFMParser_jj_3_130(FreemarkerCoreFMParser *self) {
  
#line 5460
  FreemarkerCoreToken *xsp;
  xsp = self->jj_scanpos_;
  if (FreemarkerCoreFMParser_jj_3_125(self)) self->jj_scanpos_ = xsp;
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_DIRECTIVE_END)) return YES;
  if (FreemarkerCoreFMParser_jj_3R_44(self)) return YES;
  xsp = self->jj_scanpos_;
  if (FreemarkerCoreFMParser_jj_3_126(self)) {
    self->jj_scanpos_ = xsp;
    if (FreemarkerCoreFMParser_jj_3_127(self)) {
      self->jj_scanpos_ = xsp;
      if (FreemarkerCoreFMParser_jj_3_128(self)) return YES;
    }
  }
  return NO;
}


#line 5476
jboolean FreemarkerCoreFMParser_jj_3_207(FreemarkerCoreFMParser *self) {
  
#line 5478
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_MAYBE_END)) return YES;
  return NO;
}


#line 5482
jboolean FreemarkerCoreFMParser_jj_3R_97(FreemarkerCoreFMParser *self) {
  
#line 5484
  FreemarkerCoreToken *xsp;
  if (FreemarkerCoreFMParser_jj_3R_100(self)) return YES;
  while (YES) {
    xsp = self->jj_scanpos_;
    if (FreemarkerCoreFMParser_jj_3R_100(self)) {
      
#line 5488
      self->jj_scanpos_ = xsp;
      
#line 5488
      break;
    }
  }
  
#line 5490
  return NO;
}


#line 5493
jboolean FreemarkerCoreFMParser_jj_3_107(FreemarkerCoreFMParser *self) {
  
#line 5495
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_MOD_EQUALS)) return YES;
  return NO;
}


#line 5499
jboolean FreemarkerCoreFMParser_jj_3_116(FreemarkerCoreFMParser *self) {
  
#line 5501
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_MINUS_EQUALS)) return YES;
  return NO;
}


#line 5505
jboolean FreemarkerCoreFMParser_jj_3_121(FreemarkerCoreFMParser *self) {
  
#line 5507
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_MINUS_MINUS)) return YES;
  return NO;
}


#line 5511
jboolean FreemarkerCoreFMParser_jj_3_68(FreemarkerCoreFMParser *self) {
  
#line 5513
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_RAW_STRING)) return YES;
  return NO;
}


#line 5517
jboolean FreemarkerCoreFMParser_jj_3_124(FreemarkerCoreFMParser *self) {
  
#line 5519
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_IN)) return YES;
  if (FreemarkerCoreFMParser_jj_3R_42(self)) return YES;
  return NO;
}


#line 5524
jboolean FreemarkerCoreFMParser_jj_3_106(FreemarkerCoreFMParser *self) {
  
#line 5526
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_DIV_EQUALS)) return YES;
  return NO;
}


#line 5530
jboolean FreemarkerCoreFMParser_jj_3_206(FreemarkerCoreFMParser *self) {
  
#line 5532
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_KEEP_GOING)) return YES;
  return NO;
}


#line 5536
jboolean FreemarkerCoreFMParser_jj_3_210(FreemarkerCoreFMParser *self) {
  
#line 5538
  FreemarkerCoreToken *xsp;
  xsp = self->jj_scanpos_;
  if (FreemarkerCoreFMParser_jj_3_206(self)) {
    self->jj_scanpos_ = xsp;
    if (FreemarkerCoreFMParser_jj_3_207(self)) {
      self->jj_scanpos_ = xsp;
      if (FreemarkerCoreFMParser_jj_3_208(self)) {
        self->jj_scanpos_ = xsp;
        if (FreemarkerCoreFMParser_jj_3_209(self)) return YES;
      }
    }
  }
  return NO;
}


#line 5553
jboolean FreemarkerCoreFMParser_jj_3_67(FreemarkerCoreFMParser *self) {
  
#line 5555
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_STRING_LITERAL)) return YES;
  return NO;
}


#line 5559
jboolean FreemarkerCoreFMParser_jj_3R_89(FreemarkerCoreFMParser *self) {
  
#line 5561
  FreemarkerCoreToken *xsp;
  if (FreemarkerCoreFMParser_jj_3_210(self)) return YES;
  while (YES) {
    xsp = self->jj_scanpos_;
    if (FreemarkerCoreFMParser_jj_3_210(self)) {
      
#line 5565
      self->jj_scanpos_ = xsp;
      
#line 5565
      break;
    }
  }
  
#line 5567
  return NO;
}


#line 5570
jboolean FreemarkerCoreFMParser_jj_3R_25(FreemarkerCoreFMParser *self) {
  
#line 5572
  FreemarkerCoreToken *xsp;
  xsp = self->jj_scanpos_;
  if (FreemarkerCoreFMParser_jj_3_67(self)) {
    self->jj_scanpos_ = xsp;
    if (FreemarkerCoreFMParser_jj_3_68(self)) return YES;
  }
  return NO;
}


#line 5581
jboolean FreemarkerCoreFMParser_jj_3_115(FreemarkerCoreFMParser *self) {
  
#line 5583
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_PLUS_EQUALS)) return YES;
  return NO;
}


#line 5587
jboolean FreemarkerCoreFMParser_jj_3_120(FreemarkerCoreFMParser *self) {
  
#line 5589
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_PLUS_PLUS)) return YES;
  return NO;
}


#line 5593
jboolean FreemarkerCoreFMParser_jj_3_123(FreemarkerCoreFMParser *self) {
  
#line 5595
  FreemarkerCoreToken *xsp;
  xsp = self->jj_scanpos_;
  if (FreemarkerCoreFMParser_jj_3_120(self)) {
    self->jj_scanpos_ = xsp;
    if (FreemarkerCoreFMParser_jj_3_121(self)) return YES;
  }
  return NO;
}


#line 5604
jboolean FreemarkerCoreFMParser_jj_3_105(FreemarkerCoreFMParser *self) {
  
#line 5606
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_TIMES_EQUALS)) return YES;
  return NO;
}


#line 5610
jboolean FreemarkerCoreFMParser_jj_3_114(FreemarkerCoreFMParser *self) {
  
#line 5612
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_EQUALS)) return YES;
  return NO;
}


#line 5616
jboolean FreemarkerCoreFMParser_jj_3R_38(FreemarkerCoreFMParser *self) {
  
#line 5618
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_OPEN_PAREN)) return YES;
  if (FreemarkerCoreFMParser_jj_3R_47(self)) return YES;
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_CLOSE_PAREN)) return YES;
  return NO;
}


#line 5624
jboolean FreemarkerCoreFMParser_jj_3_122(FreemarkerCoreFMParser *self) {
  
#line 5626
  FreemarkerCoreToken *xsp;
  xsp = self->jj_scanpos_;
  if (FreemarkerCoreFMParser_jj_3_114(self)) {
    self->jj_scanpos_ = xsp;
    if (FreemarkerCoreFMParser_jj_3_115(self)) {
      self->jj_scanpos_ = xsp;
      if (FreemarkerCoreFMParser_jj_3_116(self)) {
        self->jj_scanpos_ = xsp;
        if (FreemarkerCoreFMParser_jj_3_117(self)) {
          self->jj_scanpos_ = xsp;
          if (FreemarkerCoreFMParser_jj_3_118(self)) {
            self->jj_scanpos_ = xsp;
            if (FreemarkerCoreFMParser_jj_3_119(self)) return YES;
          }
        }
      }
    }
  }
  if (FreemarkerCoreFMParser_jj_3R_42(self)) return YES;
  return NO;
}


#line 5648
jboolean FreemarkerCoreFMParser_jj_3_204(FreemarkerCoreFMParser *self) {
  
#line 5650
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_STATIC_TEXT_FALSE_ALARM)) return YES;
  return NO;
}


#line 5654
jboolean FreemarkerCoreFMParser_jj_3_205(FreemarkerCoreFMParser *self) {
  
#line 5656
  FreemarkerCoreToken *xsp;
  xsp = self->jj_scanpos_;
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, 72)) {
    self->jj_scanpos_ = xsp;
    if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, 73)) {
      self->jj_scanpos_ = xsp;
      if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, 74)) return YES;
    }
  }
  return NO;
}


#line 5668
jboolean FreemarkerCoreFMParser_jj_3_203(FreemarkerCoreFMParser *self) {
  
#line 5670
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_STATIC_TEXT_NON_WS)) return YES;
  return NO;
}


#line 5674
jboolean FreemarkerCoreFMParser_jj_3_104(FreemarkerCoreFMParser *self) {
  
#line 5676
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_MINUS_EQUALS)) return YES;
  return NO;
}


#line 5680
jboolean FreemarkerCoreFMParser_jj_3_202(FreemarkerCoreFMParser *self) {
  
#line 5682
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_STATIC_TEXT_WS)) return YES;
  return NO;
}


#line 5686
jboolean FreemarkerCoreFMParser_jj_3_113(FreemarkerCoreFMParser *self) {
  
#line 5688
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_COMMA)) return YES;
  return NO;
}


#line 5692
jboolean FreemarkerCoreFMParser_jj_3R_91(FreemarkerCoreFMParser *self) {
  
#line 5694
  FreemarkerCoreToken *xsp;
  xsp = self->jj_scanpos_;
  if (FreemarkerCoreFMParser_jj_3_202(self)) {
    self->jj_scanpos_ = xsp;
    if (FreemarkerCoreFMParser_jj_3_203(self)) {
      self->jj_scanpos_ = xsp;
      if (FreemarkerCoreFMParser_jj_3_204(self)) return YES;
    }
  }
  return NO;
}


#line 5706
jboolean FreemarkerCoreFMParser_jj_3_112(FreemarkerCoreFMParser *self) {
  
#line 5708
  FreemarkerCoreToken *xsp;
  xsp = self->jj_scanpos_;
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, 121)) self->jj_scanpos_ = xsp;
  xsp = self->jj_scanpos_;
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, 133)) {
    self->jj_scanpos_ = xsp;
    if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, 85)) return YES;
  }
  xsp = self->jj_scanpos_;
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, 97)) {
    self->jj_scanpos_ = xsp;
    if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, 100)) {
      self->jj_scanpos_ = xsp;
      if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, 101)) {
        self->jj_scanpos_ = xsp;
        if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, 102)) {
          self->jj_scanpos_ = xsp;
          if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, 103)) {
            self->jj_scanpos_ = xsp;
            if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, 104)) {
              self->jj_scanpos_ = xsp;
              if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, 105)) {
                self->jj_scanpos_ = xsp;
                if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, 106)) return YES;
              }
            }
          }
        }
      }
    }
  }
  return NO;
}


#line 5742
jboolean FreemarkerCoreFMParser_jj_3_109(FreemarkerCoreFMParser *self) {
  
#line 5744
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_MINUS_MINUS)) return YES;
  return NO;
}


#line 5748
jboolean FreemarkerCoreFMParser_jj_3R_48(FreemarkerCoreFMParser *self) {
  
#line 5750
  FreemarkerCoreToken *xsp;
  xsp = self->jj_scanpos_;
  if (FreemarkerCoreFMParser_jj_3_113(self)) self->jj_scanpos_ = xsp;
  if (FreemarkerCoreFMParser_jj_3R_88(self)) return YES;
  return NO;
}


#line 5757
jboolean FreemarkerCoreFMParser_jj_3R_79(FreemarkerCoreFMParser *self) {
  
#line 5759
  FreemarkerCoreToken *xsp;
  if (FreemarkerCoreFMParser_jj_3R_91(self)) return YES;
  while (YES) {
    xsp = self->jj_scanpos_;
    if (FreemarkerCoreFMParser_jj_3R_91(self)) {
      
#line 5763
      self->jj_scanpos_ = xsp;
      
#line 5763
      break;
    }
  }
  
#line 5765
  return NO;
}


#line 5768
jboolean FreemarkerCoreFMParser_jj_3_103(FreemarkerCoreFMParser *self) {
  
#line 5770
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_PLUS_EQUALS)) return YES;
  return NO;
}


#line 5774
jboolean FreemarkerCoreFMParser_jj_3R_37(FreemarkerCoreFMParser *self) {
  
#line 5776
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_OPEN_BRACKET)) return YES;
  if (FreemarkerCoreFMParser_jj_3R_42(self)) return YES;
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_CLOSE_BRACKET)) return YES;
  return NO;
}


#line 5782
jboolean FreemarkerCoreFMParser_jj_3_108(FreemarkerCoreFMParser *self) {
  
#line 5784
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_PLUS_PLUS)) return YES;
  return NO;
}


#line 5788
jboolean FreemarkerCoreFMParser_jj_3_102(FreemarkerCoreFMParser *self) {
  
#line 5790
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_EQUALS)) return YES;
  return NO;
}


#line 5794
jboolean FreemarkerCoreFMParser_jj_3_111(FreemarkerCoreFMParser *self) {
  
#line 5796
  FreemarkerCoreToken *xsp;
  xsp = self->jj_scanpos_;
  if (FreemarkerCoreFMParser_jj_3_108(self)) {
    self->jj_scanpos_ = xsp;
    if (FreemarkerCoreFMParser_jj_3_109(self)) return YES;
  }
  return NO;
}


#line 5805
jboolean FreemarkerCoreFMParser_jj_3_201(FreemarkerCoreFMParser *self) {
  
#line 5807
  if (FreemarkerCoreFMParser_jj_3R_78(self)) return YES;
  return NO;
}


#line 5811
jboolean FreemarkerCoreFMParser_jj_3_200(FreemarkerCoreFMParser *self) {
  
#line 5813
  if (FreemarkerCoreFMParser_jj_3R_77(self)) return YES;
  return NO;
}


#line 5817
jboolean FreemarkerCoreFMParser_jj_3_65(FreemarkerCoreFMParser *self) {
  
#line 5819
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_DOUBLE_STAR)) return YES;
  return NO;
}


#line 5823
jboolean FreemarkerCoreFMParser_jj_3_199(FreemarkerCoreFMParser *self) {
  
#line 5825
  if (FreemarkerCoreFMParser_jj_3R_76(self)) return YES;
  return NO;
}


#line 5829
jboolean FreemarkerCoreFMParser_jj_3_62(FreemarkerCoreFMParser *self) {
  
#line 5831
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_USING)) return YES;
  return NO;
}


#line 5835
jboolean FreemarkerCoreFMParser_jj_3_198(FreemarkerCoreFMParser *self) {
  
#line 5837
  if (FreemarkerCoreFMParser_jj_3R_75(self)) return YES;
  return NO;
}


#line 5841
jboolean FreemarkerCoreFMParser_jj_3_61(FreemarkerCoreFMParser *self) {
  
#line 5843
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_AS)) return YES;
  return NO;
}


#line 5847
jboolean FreemarkerCoreFMParser_jj_3_197(FreemarkerCoreFMParser *self) {
  
#line 5849
  if (FreemarkerCoreFMParser_jj_3R_74(self)) return YES;
  return NO;
}


#line 5853
jboolean FreemarkerCoreFMParser_jj_3_60(FreemarkerCoreFMParser *self) {
  
#line 5855
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_IN)) return YES;
  return NO;
}


#line 5859
jboolean FreemarkerCoreFMParser_jj_3_196(FreemarkerCoreFMParser *self) {
  
#line 5861
  if (FreemarkerCoreFMParser_jj_3R_73(self)) return YES;
  return NO;
}


#line 5865
jboolean FreemarkerCoreFMParser_jj_3_59(FreemarkerCoreFMParser *self) {
  
#line 5867
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_TRUE)) return YES;
  return NO;
}


#line 5871
jboolean FreemarkerCoreFMParser_jj_3_110(FreemarkerCoreFMParser *self) {
  
#line 5873
  FreemarkerCoreToken *xsp;
  xsp = self->jj_scanpos_;
  if (FreemarkerCoreFMParser_jj_3_102(self)) {
    self->jj_scanpos_ = xsp;
    if (FreemarkerCoreFMParser_jj_3_103(self)) {
      self->jj_scanpos_ = xsp;
      if (FreemarkerCoreFMParser_jj_3_104(self)) {
        self->jj_scanpos_ = xsp;
        if (FreemarkerCoreFMParser_jj_3_105(self)) {
          self->jj_scanpos_ = xsp;
          if (FreemarkerCoreFMParser_jj_3_106(self)) {
            self->jj_scanpos_ = xsp;
            if (FreemarkerCoreFMParser_jj_3_107(self)) return YES;
          }
        }
      }
    }
  }
  if (FreemarkerCoreFMParser_jj_3R_42(self)) return YES;
  return NO;
}


#line 5895
jboolean FreemarkerCoreFMParser_jj_3_195(FreemarkerCoreFMParser *self) {
  
#line 5897
  if (FreemarkerCoreFMParser_jj_3R_72(self)) return YES;
  return NO;
}


#line 5901
jboolean FreemarkerCoreFMParser_jj_3_58(FreemarkerCoreFMParser *self) {
  
#line 5903
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_FALSE)) return YES;
  return NO;
}


#line 5907
jboolean FreemarkerCoreFMParser_jj_3_194(FreemarkerCoreFMParser *self) {
  
#line 5909
  if (FreemarkerCoreFMParser_jj_3R_71(self)) return YES;
  return NO;
}


#line 5913
jboolean FreemarkerCoreFMParser_jj_3_57(FreemarkerCoreFMParser *self) {
  
#line 5915
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_ESCAPED_GTE)) return YES;
  return NO;
}


#line 5919
jboolean FreemarkerCoreFMParser_jj_3_193(FreemarkerCoreFMParser *self) {
  
#line 5921
  if (FreemarkerCoreFMParser_jj_3R_70(self)) return YES;
  return NO;
}


#line 5925
jboolean FreemarkerCoreFMParser_jj_3_56(FreemarkerCoreFMParser *self) {
  
#line 5927
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_ESCAPED_GT)) return YES;
  return NO;
}


#line 5931
jboolean FreemarkerCoreFMParser_jj_3_64(FreemarkerCoreFMParser *self) {
  
#line 5933
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_TIMES)) return YES;
  return NO;
}


#line 5937
jboolean FreemarkerCoreFMParser_jj_3_192(FreemarkerCoreFMParser *self) {
  
#line 5939
  if (FreemarkerCoreFMParser_jj_3R_69(self)) return YES;
  return NO;
}


#line 5943
jboolean FreemarkerCoreFMParser_jj_3_55(FreemarkerCoreFMParser *self) {
  
#line 5945
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_LESS_THAN_EQUALS)) return YES;
  return NO;
}


#line 5949
jboolean FreemarkerCoreFMParser_jj_3_191(FreemarkerCoreFMParser *self) {
  
#line 5951
  if (FreemarkerCoreFMParser_jj_3R_68(self)) return YES;
  return NO;
}


#line 5955
jboolean FreemarkerCoreFMParser_jj_3_54(FreemarkerCoreFMParser *self) {
  
#line 5957
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_LESS_THAN)) return YES;
  return NO;
}


#line 5961
jboolean FreemarkerCoreFMParser_jj_3_190(FreemarkerCoreFMParser *self) {
  
#line 5963
  if (FreemarkerCoreFMParser_jj_3R_67(self)) return YES;
  return NO;
}


#line 5967
jboolean FreemarkerCoreFMParser_jj_3_189(FreemarkerCoreFMParser *self) {
  
#line 5969
  if (FreemarkerCoreFMParser_jj_3R_66(self)) return YES;
  return NO;
}


#line 5973
jboolean FreemarkerCoreFMParser_jj_3_129(FreemarkerCoreFMParser *self) {
  
#line 5975
  FreemarkerCoreToken *xsp;
  xsp = self->jj_scanpos_;
  if (FreemarkerCoreFMParser_jj_3_110(self)) {
    self->jj_scanpos_ = xsp;
    if (FreemarkerCoreFMParser_jj_3_111(self)) return YES;
  }
  while (YES) {
    xsp = self->jj_scanpos_;
    if (FreemarkerCoreFMParser_jj_3R_48(self)) {
      
#line 5983
      self->jj_scanpos_ = xsp;
      
#line 5983
      break;
    }
  }
  
#line 5985
  xsp = self->jj_scanpos_;
  if (FreemarkerCoreFMParser_jj_3_124(self)) self->jj_scanpos_ = xsp;
  if (FreemarkerCoreFMParser_jj_3R_46(self)) return YES;
  return NO;
}


#line 5991
jboolean FreemarkerCoreFMParser_jj_3_66(FreemarkerCoreFMParser *self) {
  
#line 5993
  FreemarkerCoreToken *xsp;
  xsp = self->jj_scanpos_;
  if (FreemarkerCoreFMParser_jj_3_54(self)) {
    self->jj_scanpos_ = xsp;
    if (FreemarkerCoreFMParser_jj_3_55(self)) {
      self->jj_scanpos_ = xsp;
      if (FreemarkerCoreFMParser_jj_3_56(self)) {
        self->jj_scanpos_ = xsp;
        if (FreemarkerCoreFMParser_jj_3_57(self)) {
          self->jj_scanpos_ = xsp;
          if (FreemarkerCoreFMParser_jj_3_58(self)) {
            self->jj_scanpos_ = xsp;
            if (FreemarkerCoreFMParser_jj_3_59(self)) {
              self->jj_scanpos_ = xsp;
              if (FreemarkerCoreFMParser_jj_3_60(self)) {
                self->jj_scanpos_ = xsp;
                if (FreemarkerCoreFMParser_jj_3_61(self)) {
                  self->jj_scanpos_ = xsp;
                  if (FreemarkerCoreFMParser_jj_3_62(self)) return YES;
                }
              }
            }
          }
        }
      }
    }
  }
  return NO;
}


#line 6023
jboolean FreemarkerCoreFMParser_jj_3_188(FreemarkerCoreFMParser *self) {
  
#line 6025
  if (FreemarkerCoreFMParser_jj_3R_65(self)) return YES;
  return NO;
}


#line 6029
jboolean FreemarkerCoreFMParser_jj_3_63(FreemarkerCoreFMParser *self) {
  
#line 6031
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_ID)) return YES;
  return NO;
}


#line 6035
jboolean FreemarkerCoreFMParser_jj_3_187(FreemarkerCoreFMParser *self) {
  
#line 6037
  if (FreemarkerCoreFMParser_jj_3R_64(self)) return YES;
  return NO;
}


#line 6041
jboolean FreemarkerCoreFMParser_jj_3_186(FreemarkerCoreFMParser *self) {
  
#line 6043
  if (FreemarkerCoreFMParser_jj_3R_63(self)) return YES;
  return NO;
}


#line 6047
jboolean FreemarkerCoreFMParser_jj_3_185(FreemarkerCoreFMParser *self) {
  
#line 6049
  if (FreemarkerCoreFMParser_jj_3R_62(self)) return YES;
  return NO;
}


#line 6053
jboolean FreemarkerCoreFMParser_jj_3R_36(FreemarkerCoreFMParser *self) {
  
#line 6055
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_DOT)) return YES;
  FreemarkerCoreToken *xsp;
  xsp = self->jj_scanpos_;
  if (FreemarkerCoreFMParser_jj_3_63(self)) {
    self->jj_scanpos_ = xsp;
    if (FreemarkerCoreFMParser_jj_3_64(self)) {
      self->jj_scanpos_ = xsp;
      if (FreemarkerCoreFMParser_jj_3_65(self)) {
        self->jj_scanpos_ = xsp;
        if (FreemarkerCoreFMParser_jj_3_66(self)) return YES;
      }
    }
  }
  return NO;
}


#line 6071
jboolean FreemarkerCoreFMParser_jj_3_184(FreemarkerCoreFMParser *self) {
  
#line 6073
  if (FreemarkerCoreFMParser_jj_3R_61(self)) return YES;
  return NO;
}


#line 6077
jboolean FreemarkerCoreFMParser_jj_3_183(FreemarkerCoreFMParser *self) {
  
#line 6079
  if (FreemarkerCoreFMParser_jj_3R_60(self)) return YES;
  return NO;
}


#line 6083
jboolean FreemarkerCoreFMParser_jj_3_182(FreemarkerCoreFMParser *self) {
  
#line 6085
  if (FreemarkerCoreFMParser_jj_3R_59(self)) return YES;
  return NO;
}


#line 6089
jboolean FreemarkerCoreFMParser_jj_3_101(FreemarkerCoreFMParser *self) {
  
#line 6091
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_LOCALASSIGN)) return YES;
  return NO;
}


#line 6095
jboolean FreemarkerCoreFMParser_jj_3_181(FreemarkerCoreFMParser *self) {
  
#line 6097
  if (FreemarkerCoreFMParser_jj_3R_58(self)) return YES;
  return NO;
}


#line 6101
jboolean FreemarkerCoreFMParser_jj_3_180(FreemarkerCoreFMParser *self) {
  
#line 6103
  if (FreemarkerCoreFMParser_jj_3R_57(self)) return YES;
  return NO;
}


#line 6107
jboolean FreemarkerCoreFMParser_jj_3_100(FreemarkerCoreFMParser *self) {
  
#line 6109
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_GLOBALASSIGN)) return YES;
  return NO;
}


#line 6113
jboolean FreemarkerCoreFMParser_jj_3_99(FreemarkerCoreFMParser *self) {
  
#line 6115
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_ASSIGN)) return YES;
  return NO;
}


#line 6119
jboolean FreemarkerCoreFMParser_jj_3_179(FreemarkerCoreFMParser *self) {
  
#line 6121
  if (FreemarkerCoreFMParser_jj_3R_56(self)) return YES;
  return NO;
}


#line 6125
jboolean FreemarkerCoreFMParser_jj_3_178(FreemarkerCoreFMParser *self) {
  
#line 6127
  if (FreemarkerCoreFMParser_jj_3R_55(self)) return YES;
  return NO;
}


#line 6131
jboolean FreemarkerCoreFMParser_jj_3_177(FreemarkerCoreFMParser *self) {
  
#line 6133
  if (FreemarkerCoreFMParser_jj_3R_54(self)) return YES;
  return NO;
}


#line 6137
jboolean FreemarkerCoreFMParser_jj_3R_53(FreemarkerCoreFMParser *self) {
  
#line 6139
  FreemarkerCoreToken *xsp;
  xsp = self->jj_scanpos_;
  if (FreemarkerCoreFMParser_jj_3_99(self)) {
    self->jj_scanpos_ = xsp;
    if (FreemarkerCoreFMParser_jj_3_100(self)) {
      self->jj_scanpos_ = xsp;
      if (FreemarkerCoreFMParser_jj_3_101(self)) return YES;
    }
  }
  if (FreemarkerCoreFMParser_jj_3R_88(self)) return YES;
  return NO;
}


#line 6152
jboolean FreemarkerCoreFMParser_jj_3_176(FreemarkerCoreFMParser *self) {
  
#line 6154
  if (FreemarkerCoreFMParser_jj_3R_53(self)) return YES;
  return NO;
}


#line 6158
jboolean FreemarkerCoreFMParser_jj_3_175(FreemarkerCoreFMParser *self) {
  
#line 6160
  if (FreemarkerCoreFMParser_jj_3R_52(self)) return YES;
  return NO;
}


#line 6164
jboolean FreemarkerCoreFMParser_jj_3_174(FreemarkerCoreFMParser *self) {
  
#line 6166
  if (FreemarkerCoreFMParser_jj_3R_51(self)) return YES;
  return NO;
}


#line 6170
jboolean FreemarkerCoreFMParser_jj_3_173(FreemarkerCoreFMParser *self) {
  
#line 6172
  if (FreemarkerCoreFMParser_jj_3R_50(self)) return YES;
  return NO;
}


#line 6176
jboolean FreemarkerCoreFMParser_jj_3R_106(FreemarkerCoreFMParser *self) {
  
#line 6178
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_OPEN_PAREN)) return YES;
  if (FreemarkerCoreFMParser_jj_3R_47(self)) return YES;
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_CLOSE_PAREN)) return YES;
  return NO;
}


#line 6184
jboolean FreemarkerCoreFMParser_jj_3R_82(FreemarkerCoreFMParser *self) {
  
#line 6186
  FreemarkerCoreToken *xsp;
  xsp = self->jj_scanpos_;
  if (FreemarkerCoreFMParser_jj_3_173(self)) {
    self->jj_scanpos_ = xsp;
    if (FreemarkerCoreFMParser_jj_3_174(self)) {
      self->jj_scanpos_ = xsp;
      if (FreemarkerCoreFMParser_jj_3_175(self)) {
        self->jj_scanpos_ = xsp;
        if (FreemarkerCoreFMParser_jj_3_176(self)) {
          self->jj_scanpos_ = xsp;
          if (FreemarkerCoreFMParser_jj_3_177(self)) {
            self->jj_scanpos_ = xsp;
            if (FreemarkerCoreFMParser_jj_3_178(self)) {
              self->jj_scanpos_ = xsp;
              if (FreemarkerCoreFMParser_jj_3_179(self)) {
                self->jj_scanpos_ = xsp;
                if (FreemarkerCoreFMParser_jj_3_180(self)) {
                  self->jj_scanpos_ = xsp;
                  if (FreemarkerCoreFMParser_jj_3_181(self)) {
                    self->jj_scanpos_ = xsp;
                    if (FreemarkerCoreFMParser_jj_3_182(self)) {
                      self->jj_scanpos_ = xsp;
                      if (FreemarkerCoreFMParser_jj_3_183(self)) {
                        self->jj_scanpos_ = xsp;
                        if (FreemarkerCoreFMParser_jj_3_184(self)) {
                          self->jj_scanpos_ = xsp;
                          if (FreemarkerCoreFMParser_jj_3_185(self)) {
                            self->jj_scanpos_ = xsp;
                            if (FreemarkerCoreFMParser_jj_3_186(self)) {
                              self->jj_scanpos_ = xsp;
                              if (FreemarkerCoreFMParser_jj_3_187(self)) {
                                self->jj_scanpos_ = xsp;
                                if (FreemarkerCoreFMParser_jj_3_188(self)) {
                                  self->jj_scanpos_ = xsp;
                                  if (FreemarkerCoreFMParser_jj_3_189(self)) {
                                    self->jj_scanpos_ = xsp;
                                    if (FreemarkerCoreFMParser_jj_3_190(self)) {
                                      self->jj_scanpos_ = xsp;
                                      if (FreemarkerCoreFMParser_jj_3_191(self)) {
                                        self->jj_scanpos_ = xsp;
                                        if (FreemarkerCoreFMParser_jj_3_192(self)) {
                                          self->jj_scanpos_ = xsp;
                                          if (FreemarkerCoreFMParser_jj_3_193(self)) {
                                            self->jj_scanpos_ = xsp;
                                            if (FreemarkerCoreFMParser_jj_3_194(self)) {
                                              self->jj_scanpos_ = xsp;
                                              if (FreemarkerCoreFMParser_jj_3_195(self)) {
                                                self->jj_scanpos_ = xsp;
                                                if (FreemarkerCoreFMParser_jj_3_196(self)) {
                                                  self->jj_scanpos_ = xsp;
                                                  if (FreemarkerCoreFMParser_jj_3_197(self)) {
                                                    self->jj_scanpos_ = xsp;
                                                    if (FreemarkerCoreFMParser_jj_3_198(self)) {
                                                      self->jj_scanpos_ = xsp;
                                                      if (FreemarkerCoreFMParser_jj_3_199(self)) {
                                                        self->jj_scanpos_ = xsp;
                                                        if (FreemarkerCoreFMParser_jj_3_200(self)) {
                                                          self->jj_scanpos_ = xsp;
                                                          if (FreemarkerCoreFMParser_jj_3_201(self)) return YES;
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return NO;
}


#line 6276
jboolean FreemarkerCoreFMParser_jj_3_98(FreemarkerCoreFMParser *self) {
  
#line 6278
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_NOTRIM)) return YES;
  return NO;
}


#line 6282
jboolean FreemarkerCoreFMParser_jj_3_97(FreemarkerCoreFMParser *self) {
  
#line 6284
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_RTRIM)) return YES;
  return NO;
}


#line 6288
jboolean FreemarkerCoreFMParser_jj_3_96(FreemarkerCoreFMParser *self) {
  
#line 6290
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_LTRIM)) return YES;
  return NO;
}


#line 6294
jboolean FreemarkerCoreFMParser_jj_3_95(FreemarkerCoreFMParser *self) {
  
#line 6296
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_TRIM)) return YES;
  return NO;
}


#line 6300
jboolean FreemarkerCoreFMParser_jj_3R_71(FreemarkerCoreFMParser *self) {
  
#line 6302
  FreemarkerCoreToken *xsp;
  xsp = self->jj_scanpos_;
  if (FreemarkerCoreFMParser_jj_3_95(self)) {
    self->jj_scanpos_ = xsp;
    if (FreemarkerCoreFMParser_jj_3_96(self)) {
      self->jj_scanpos_ = xsp;
      if (FreemarkerCoreFMParser_jj_3_97(self)) {
        self->jj_scanpos_ = xsp;
        if (FreemarkerCoreFMParser_jj_3_98(self)) return YES;
      }
    }
  }
  return NO;
}


#line 6317
jboolean FreemarkerCoreFMParser_jj_3R_66(FreemarkerCoreFMParser *self) {
  
#line 6319
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_SETTING)) return YES;
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_ID)) return YES;
  return NO;
}


#line 6324
jboolean FreemarkerCoreFMParser_jj_3R_39(FreemarkerCoreFMParser *self) {
  
#line 6326
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_BUILT_IN)) return YES;
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_ID)) return YES;
  FreemarkerCoreToken *xsp;
  xsp = self->jj_scanpos_;
  if (FreemarkerCoreFMParser_jj_3R_106(self)) self->jj_scanpos_ = xsp;
  return NO;
}


#line 6334
jboolean FreemarkerCoreFMParser_jj_3R_70(FreemarkerCoreFMParser *self) {
  
#line 6336
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_FLUSH)) return YES;
  return NO;
}


#line 6340
jboolean FreemarkerCoreFMParser_jj_3_172(FreemarkerCoreFMParser *self) {
  
#line 6342
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_EMPTY_DIRECTIVE_END)) return YES;
  return NO;
}


#line 6346
jboolean FreemarkerCoreFMParser_jj_3_171(FreemarkerCoreFMParser *self) {
  
#line 6348
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_DIRECTIVE_END)) return YES;
  return NO;
}


#line 6352
jboolean FreemarkerCoreFMParser_jj_3R_46(FreemarkerCoreFMParser *self) {
  
#line 6354
  FreemarkerCoreToken *xsp;
  xsp = self->jj_scanpos_;
  if (FreemarkerCoreFMParser_jj_3_171(self)) {
    self->jj_scanpos_ = xsp;
    if (FreemarkerCoreFMParser_jj_3_172(self)) return YES;
  }
  return NO;
}


#line 6363
jboolean FreemarkerCoreFMParser_jj_3_51(FreemarkerCoreFMParser *self) {
  
#line 6365
  if (FreemarkerCoreFMParser_jj_3R_42(self)) return YES;
  return NO;
}


#line 6369
jboolean FreemarkerCoreFMParser_jj_3R_41(FreemarkerCoreFMParser *self) {
  
#line 6371
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_EXISTS)) return YES;
  return NO;
}


#line 6375
jboolean FreemarkerCoreFMParser_jj_3_94(FreemarkerCoreFMParser *self) {
  
#line 6377
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_NESTED)) return YES;
  if (FreemarkerCoreFMParser_jj_3R_47(self)) return YES;
  if (FreemarkerCoreFMParser_jj_3R_46(self)) return YES;
  return NO;
}


#line 6383
jboolean FreemarkerCoreFMParser_jj_3R_43(FreemarkerCoreFMParser *self) {
  
#line 6385
  if (FreemarkerCoreFMParser_jj_3R_42(self)) return YES;
  return NO;
}


#line 6389
jboolean FreemarkerCoreFMParser_jj_3_93(FreemarkerCoreFMParser *self) {
  
#line 6391
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_SIMPLE_NESTED)) return YES;
  return NO;
}


#line 6395
jboolean FreemarkerCoreFMParser_jj_3_53(FreemarkerCoreFMParser *self) {
  
#line 6397
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_EXCLAM)) return YES;
  FreemarkerCoreToken *xsp;
  xsp = self->jj_scanpos_;
  if (FreemarkerCoreFMParser_jj_3R_43(self)) self->jj_scanpos_ = xsp;
  return NO;
}


#line 6404
jboolean FreemarkerCoreFMParser_jj_3R_72(FreemarkerCoreFMParser *self) {
  
#line 6406
  FreemarkerCoreToken *xsp;
  xsp = self->jj_scanpos_;
  if (FreemarkerCoreFMParser_jj_3_93(self)) {
    self->jj_scanpos_ = xsp;
    if (FreemarkerCoreFMParser_jj_3_94(self)) return YES;
  }
  return NO;
}


#line 6415
jboolean FreemarkerCoreFMParser_jj_3R_74(FreemarkerCoreFMParser *self) {
  
#line 6417
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_NOESCAPE)) return YES;
  if (FreemarkerCoreFMParser_jj_3R_44(self)) return YES;
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_END_NOESCAPE)) return YES;
  return NO;
}


#line 6423
jboolean FreemarkerCoreFMParser_jj_3_52(FreemarkerCoreFMParser *self) {
  
#line 6425
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_TERMINATING_EXCLAM)) return YES;
  return NO;
}


#line 6429
jboolean FreemarkerCoreFMParser_jj_3R_40(FreemarkerCoreFMParser *self) {
  
#line 6431
  FreemarkerCoreToken *xsp;
  xsp = self->jj_scanpos_;
  if (FreemarkerCoreFMParser_jj_3_52(self)) {
    self->jj_scanpos_ = xsp;
    if (FreemarkerCoreFMParser_jj_3_53(self)) return YES;
  }
  return NO;
}


#line 6440
jboolean FreemarkerCoreFMParser_jj_3_92(FreemarkerCoreFMParser *self) {
  
#line 6442
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_STOP)) return YES;
  if (FreemarkerCoreFMParser_jj_3R_42(self)) return YES;
  return NO;
}


#line 6447
jboolean FreemarkerCoreFMParser_jj_3_91(FreemarkerCoreFMParser *self) {
  
#line 6449
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_HALT)) return YES;
  return NO;
}


#line 6453
jboolean FreemarkerCoreFMParser_jj_3_50(FreemarkerCoreFMParser *self) {
  
#line 6455
  if (FreemarkerCoreFMParser_jj_3R_41(self)) return YES;
  return NO;
}


#line 6459
jboolean FreemarkerCoreFMParser_jj_3_49(FreemarkerCoreFMParser *self) {
  
#line 6461
  if (FreemarkerCoreFMParser_jj_3R_40(self)) return YES;
  return NO;
}


#line 6465
jboolean FreemarkerCoreFMParser_jj_3R_69(FreemarkerCoreFMParser *self) {
  
#line 6467
  FreemarkerCoreToken *xsp;
  xsp = self->jj_scanpos_;
  if (FreemarkerCoreFMParser_jj_3_91(self)) {
    self->jj_scanpos_ = xsp;
    if (FreemarkerCoreFMParser_jj_3_92(self)) return YES;
  }
  return NO;
}


#line 6476
jboolean FreemarkerCoreFMParser_jj_3_48(FreemarkerCoreFMParser *self) {
  
#line 6478
  if (FreemarkerCoreFMParser_jj_3R_39(self)) return YES;
  return NO;
}


#line 6482
jboolean FreemarkerCoreFMParser_jj_3_47(FreemarkerCoreFMParser *self) {
  
#line 6484
  if (FreemarkerCoreFMParser_jj_3R_38(self)) return YES;
  return NO;
}


#line 6488
jboolean FreemarkerCoreFMParser_jj_3_46(FreemarkerCoreFMParser *self) {
  
#line 6490
  if (FreemarkerCoreFMParser_jj_3R_37(self)) return YES;
  return NO;
}


#line 6494
jboolean FreemarkerCoreFMParser_jj_3_45(FreemarkerCoreFMParser *self) {
  
#line 6496
  if (FreemarkerCoreFMParser_jj_3R_36(self)) return YES;
  return NO;
}


#line 6500
jboolean FreemarkerCoreFMParser_jj_3R_73(FreemarkerCoreFMParser *self) {
  
#line 6502
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_ESCAPE)) return YES;
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_ID)) return YES;
  return NO;
}


#line 6507
jboolean FreemarkerCoreFMParser_jj_3R_92(FreemarkerCoreFMParser *self) {
  
#line 6509
  FreemarkerCoreToken *xsp;
  xsp = self->jj_scanpos_;
  if (FreemarkerCoreFMParser_jj_3_45(self)) {
    self->jj_scanpos_ = xsp;
    if (FreemarkerCoreFMParser_jj_3_46(self)) {
      self->jj_scanpos_ = xsp;
      if (FreemarkerCoreFMParser_jj_3_47(self)) {
        self->jj_scanpos_ = xsp;
        if (FreemarkerCoreFMParser_jj_3_48(self)) {
          self->jj_scanpos_ = xsp;
          if (FreemarkerCoreFMParser_jj_3_49(self)) {
            self->jj_scanpos_ = xsp;
            if (FreemarkerCoreFMParser_jj_3_50(self)) return YES;
          }
        }
      }
    }
  }
  return NO;
}


#line 6530
jboolean FreemarkerCoreFMParser_jj_3_170(FreemarkerCoreFMParser *self) {
  
#line 6532
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_DEFAUL)) return YES;
  return NO;
}


#line 6536
jboolean FreemarkerCoreFMParser_jj_3_169(FreemarkerCoreFMParser *self) {
  
#line 6538
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_CASE)) return YES;
  if (FreemarkerCoreFMParser_jj_3R_42(self)) return YES;
  return NO;
}


#line 6543
jboolean FreemarkerCoreFMParser_jj_3_90(FreemarkerCoreFMParser *self) {
  
#line 6545
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_RETURN)) return YES;
  if (FreemarkerCoreFMParser_jj_3R_42(self)) return YES;
  return NO;
}


#line 6550
jboolean FreemarkerCoreFMParser_jj_3_89(FreemarkerCoreFMParser *self) {
  
#line 6552
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_SIMPLE_RETURN)) return YES;
  return NO;
}


#line 6556
jboolean FreemarkerCoreFMParser_jj_3_168(FreemarkerCoreFMParser *self) {
  
#line 6558
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_STATIC_TEXT_WS)) return YES;
  return NO;
}


#line 6562
jboolean FreemarkerCoreFMParser_jj_3R_49(FreemarkerCoreFMParser *self) {
  
#line 6564
  FreemarkerCoreToken *xsp;
  xsp = self->jj_scanpos_;
  if (FreemarkerCoreFMParser_jj_3_168(self)) self->jj_scanpos_ = xsp;
  xsp = self->jj_scanpos_;
  if (FreemarkerCoreFMParser_jj_3_169(self)) {
    self->jj_scanpos_ = xsp;
    if (FreemarkerCoreFMParser_jj_3_170(self)) return YES;
  }
  if (FreemarkerCoreFMParser_jj_3R_44(self)) return YES;
  return NO;
}


#line 6576
jboolean FreemarkerCoreFMParser_jj_3R_68(FreemarkerCoreFMParser *self) {
  
#line 6578
  FreemarkerCoreToken *xsp;
  xsp = self->jj_scanpos_;
  if (FreemarkerCoreFMParser_jj_3_89(self)) {
    self->jj_scanpos_ = xsp;
    if (FreemarkerCoreFMParser_jj_3_90(self)) return YES;
  }
  return NO;
}


#line 6587
jboolean FreemarkerCoreFMParser_jj_3R_30(FreemarkerCoreFMParser *self) {
  
#line 6589
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_DOT)) return YES;
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_ID)) return YES;
  return NO;
}


#line 6594
jboolean FreemarkerCoreFMParser_jj_3_44(FreemarkerCoreFMParser *self) {
  
#line 6596
  if (FreemarkerCoreFMParser_jj_3R_25(self)) return YES;
  return NO;
}


#line 6600
jboolean FreemarkerCoreFMParser_jj_3_43(FreemarkerCoreFMParser *self) {
  
#line 6602
  if (FreemarkerCoreFMParser_jj_3R_28(self)) return YES;
  return NO;
}


#line 6606
jboolean FreemarkerCoreFMParser_jj_3_167(FreemarkerCoreFMParser *self) {
  
#line 6608
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_STATIC_TEXT_WS)) return YES;
  return NO;
}


#line 6612
jboolean FreemarkerCoreFMParser_jj_3R_88(FreemarkerCoreFMParser *self) {
  
#line 6614
  FreemarkerCoreToken *xsp;
  xsp = self->jj_scanpos_;
  if (FreemarkerCoreFMParser_jj_3_43(self)) {
    self->jj_scanpos_ = xsp;
    if (FreemarkerCoreFMParser_jj_3_44(self)) return YES;
  }
  return NO;
}


#line 6623
jboolean FreemarkerCoreFMParser_jj_3R_67(FreemarkerCoreFMParser *self) {
  
#line 6625
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_BREAK)) return YES;
  return NO;
}


#line 6629
jboolean FreemarkerCoreFMParser_jj_3_166(FreemarkerCoreFMParser *self) {
  
#line 6631
  if (FreemarkerCoreFMParser_jj_3R_49(self)) return YES;
  return NO;
}


#line 6635
jboolean FreemarkerCoreFMParser_jj_3R_28(FreemarkerCoreFMParser *self) {
  
#line 6637
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_ID)) return YES;
  return NO;
}


#line 6641
jboolean FreemarkerCoreFMParser_jj_3R_65(FreemarkerCoreFMParser *self) {
  
#line 6643
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_SWITCH)) return YES;
  if (FreemarkerCoreFMParser_jj_3R_42(self)) return YES;
  return NO;
}


#line 6648
jboolean FreemarkerCoreFMParser_jj_3_42(FreemarkerCoreFMParser *self) {
  
#line 6650
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_DECIMAL)) return YES;
  return NO;
}


#line 6654
jboolean FreemarkerCoreFMParser_jj_3R_77(FreemarkerCoreFMParser *self) {
  
#line 6656
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_FALLBACK)) return YES;
  return NO;
}


#line 6660
jboolean FreemarkerCoreFMParser_jj_3_41(FreemarkerCoreFMParser *self) {
  
#line 6662
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_INTEGER)) return YES;
  return NO;
}


#line 6666
jboolean FreemarkerCoreFMParser_jj_3R_23(FreemarkerCoreFMParser *self) {
  
#line 6668
  FreemarkerCoreToken *xsp;
  xsp = self->jj_scanpos_;
  if (FreemarkerCoreFMParser_jj_3_41(self)) {
    self->jj_scanpos_ = xsp;
    if (FreemarkerCoreFMParser_jj_3_42(self)) return YES;
  }
  return NO;
}


#line 6677
jboolean FreemarkerCoreFMParser_jj_3_86(FreemarkerCoreFMParser *self) {
  
#line 6679
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_USING)) return YES;
  if (FreemarkerCoreFMParser_jj_3R_42(self)) return YES;
  return NO;
}


#line 6684
jboolean FreemarkerCoreFMParser_jj_3_85(FreemarkerCoreFMParser *self) {
  
#line 6686
  if (FreemarkerCoreFMParser_jj_3R_42(self)) return YES;
  return NO;
}


#line 6690
jboolean FreemarkerCoreFMParser_jj_3_165(FreemarkerCoreFMParser *self) {
  
#line 6692
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_DIRECTIVE_END)) return YES;
  if (FreemarkerCoreFMParser_jj_3R_44(self)) return YES;
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_END_TRANSFORM)) return YES;
  return NO;
}


#line 6698
jboolean FreemarkerCoreFMParser_jj_3_164(FreemarkerCoreFMParser *self) {
  
#line 6700
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_EMPTY_DIRECTIVE_END)) return YES;
  return NO;
}


#line 6704
jboolean FreemarkerCoreFMParser_jj_3R_27(FreemarkerCoreFMParser *self) {
  
#line 6706
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_OPEN_BRACKET)) return YES;
  if (FreemarkerCoreFMParser_jj_3R_47(self)) return YES;
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_CLOSE_BRACKET)) return YES;
  return NO;
}


#line 6712
jboolean FreemarkerCoreFMParser_jj_3_88(FreemarkerCoreFMParser *self) {
  
#line 6714
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_RECURSE)) return YES;
  FreemarkerCoreToken *xsp;
  xsp = self->jj_scanpos_;
  if (FreemarkerCoreFMParser_jj_3_85(self)) self->jj_scanpos_ = xsp;
  xsp = self->jj_scanpos_;
  if (FreemarkerCoreFMParser_jj_3_86(self)) self->jj_scanpos_ = xsp;
  if (FreemarkerCoreFMParser_jj_3R_46(self)) return YES;
  return NO;
}


#line 6724
jboolean FreemarkerCoreFMParser_jj_3_163(FreemarkerCoreFMParser *self) {
  
#line 6726
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_ID)) return YES;
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_EQUALS)) return YES;
  return NO;
}


#line 6731
jboolean FreemarkerCoreFMParser_jj_3_87(FreemarkerCoreFMParser *self) {
  
#line 6733
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_SIMPLE_RECURSE)) return YES;
  return NO;
}


#line 6737
jboolean FreemarkerCoreFMParser_jj_3_162(FreemarkerCoreFMParser *self) {
  
#line 6739
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_SEMICOLON)) return YES;
  return NO;
}


#line 6743
jboolean FreemarkerCoreFMParser_jj_3R_76(FreemarkerCoreFMParser *self) {
  
#line 6745
  FreemarkerCoreToken *xsp;
  xsp = self->jj_scanpos_;
  if (FreemarkerCoreFMParser_jj_3_87(self)) {
    self->jj_scanpos_ = xsp;
    if (FreemarkerCoreFMParser_jj_3_88(self)) return YES;
  }
  return NO;
}


#line 6754
jboolean FreemarkerCoreFMParser_jj_3_40(FreemarkerCoreFMParser *self) {
  
#line 6756
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_OR)) return YES;
  return NO;
}


#line 6760
jboolean FreemarkerCoreFMParser_jj_3R_64(FreemarkerCoreFMParser *self) {
  
#line 6762
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_TRANSFORM)) return YES;
  if (FreemarkerCoreFMParser_jj_3R_42(self)) return YES;
  return NO;
}


#line 6767
jboolean FreemarkerCoreFMParser_jj_3R_96(FreemarkerCoreFMParser *self) {
  
#line 6769
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_OR)) return YES;
  if (FreemarkerCoreFMParser_jj_3R_95(self)) return YES;
  return NO;
}


#line 6774
jboolean FreemarkerCoreFMParser_jj_3_84(FreemarkerCoreFMParser *self) {
  
#line 6776
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_USING)) return YES;
  if (FreemarkerCoreFMParser_jj_3R_42(self)) return YES;
  return NO;
}


#line 6781
jboolean FreemarkerCoreFMParser_jj_3R_86(FreemarkerCoreFMParser *self) {
  
#line 6783
  if (FreemarkerCoreFMParser_jj_3R_95(self)) return YES;
  FreemarkerCoreToken *xsp;
  while (YES) {
    xsp = self->jj_scanpos_;
    if (FreemarkerCoreFMParser_jj_3R_96(self)) {
      
#line 6787
      self->jj_scanpos_ = xsp;
      
#line 6787
      break;
    }
  }
  
#line 6789
  return NO;
}


#line 6792
jboolean FreemarkerCoreFMParser_jj_3R_63(FreemarkerCoreFMParser *self) {
  
#line 6794
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_NOPARSE)) return YES;
  if (FreemarkerCoreFMParser_jj_3R_89(self)) return YES;
  return NO;
}


#line 6799
jboolean FreemarkerCoreFMParser_jj_3R_75(FreemarkerCoreFMParser *self) {
  
#line 6801
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_VISIT)) return YES;
  if (FreemarkerCoreFMParser_jj_3R_42(self)) return YES;
  return NO;
}


#line 6806
jboolean FreemarkerCoreFMParser_jj_3_39(FreemarkerCoreFMParser *self) {
  
#line 6808
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_AND)) return YES;
  return NO;
}


#line 6812
jboolean FreemarkerCoreFMParser_jj_3_161(FreemarkerCoreFMParser *self) {
  
#line 6814
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_TERSE_COMMENT)) return YES;
  return NO;
}


#line 6818
jboolean FreemarkerCoreFMParser_jj_3_160(FreemarkerCoreFMParser *self) {
  
#line 6820
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_COMMENT)) return YES;
  return NO;
}


#line 6824
jboolean FreemarkerCoreFMParser_jj_3R_99(FreemarkerCoreFMParser *self) {
  
#line 6826
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_AND)) return YES;
  if (FreemarkerCoreFMParser_jj_3R_98(self)) return YES;
  return NO;
}


#line 6831
jboolean FreemarkerCoreFMParser_jj_3R_62(FreemarkerCoreFMParser *self) {
  
#line 6833
  FreemarkerCoreToken *xsp;
  xsp = self->jj_scanpos_;
  if (FreemarkerCoreFMParser_jj_3_160(self)) {
    self->jj_scanpos_ = xsp;
    if (FreemarkerCoreFMParser_jj_3_161(self)) return YES;
  }
  if (FreemarkerCoreFMParser_jj_3R_89(self)) return YES;
  return NO;
}


#line 6843
jboolean FreemarkerCoreFMParser_jj_3R_95(FreemarkerCoreFMParser *self) {
  
#line 6845
  if (FreemarkerCoreFMParser_jj_3R_98(self)) return YES;
  FreemarkerCoreToken *xsp;
  while (YES) {
    xsp = self->jj_scanpos_;
    if (FreemarkerCoreFMParser_jj_3R_99(self)) {
      
#line 6849
      self->jj_scanpos_ = xsp;
      
#line 6849
      break;
    }
  }
  
#line 6851
  return NO;
}


#line 6854
jboolean FreemarkerCoreFMParser_jj_3_158(FreemarkerCoreFMParser *self) {
  
#line 6856
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_COMMA)) return YES;
  return NO;
}


#line 6860
jboolean FreemarkerCoreFMParser_jj_3_157(FreemarkerCoreFMParser *self) {
  
#line 6862
  FreemarkerCoreToken *xsp;
  xsp = self->jj_scanpos_;
  if (FreemarkerCoreFMParser_jj_3_158(self)) self->jj_scanpos_ = xsp;
  if (FreemarkerCoreFMParser_jj_3R_42(self)) return YES;
  return NO;
}


#line 6869
jboolean FreemarkerCoreFMParser_jj_3_36(FreemarkerCoreFMParser *self) {
  
#line 6871
  if (FreemarkerCoreFMParser_jj_3R_34(self)) return YES;
  return NO;
}


#line 6875
jboolean FreemarkerCoreFMParser_jj_3R_60(FreemarkerCoreFMParser *self) {
  
#line 6877
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_SEP)) return YES;
  if (FreemarkerCoreFMParser_jj_3R_44(self)) return YES;
  FreemarkerCoreToken *xsp;
  xsp = self->jj_scanpos_;
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, 36)) self->jj_scanpos_ = xsp;
  return NO;
}


#line 6885
jboolean FreemarkerCoreFMParser_jj_3_159(FreemarkerCoreFMParser *self) {
  
#line 6887
  if (FreemarkerCoreFMParser_jj_3R_42(self)) return YES;
  FreemarkerCoreToken *xsp;
  while (YES) {
    xsp = self->jj_scanpos_;
    if (FreemarkerCoreFMParser_jj_3_157(self)) {
      
#line 6891
      self->jj_scanpos_ = xsp;
      
#line 6891
      break;
    }
  }
  
#line 6893
  return NO;
}


#line 6896
jboolean FreemarkerCoreFMParser_jj_3R_47(FreemarkerCoreFMParser *self) {
  
#line 6898
  FreemarkerCoreToken *xsp;
  xsp = self->jj_scanpos_;
  if (FreemarkerCoreFMParser_jj_3_159(self)) self->jj_scanpos_ = xsp;
  return NO;
}


#line 6904
jboolean FreemarkerCoreFMParser_jj_3R_35(FreemarkerCoreFMParser *self) {
  
#line 6906
  if (FreemarkerCoreFMParser_jj_3R_34(self)) return YES;
  return NO;
}


#line 6910
jboolean FreemarkerCoreFMParser_jj_3_35(FreemarkerCoreFMParser *self) {
  
#line 6912
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_DOT_DOT_ASTERISK)) return YES;
  return NO;
}


#line 6916
jboolean FreemarkerCoreFMParser_jj_3_34(FreemarkerCoreFMParser *self) {
  
#line 6918
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_DOT_DOT_LESS)) return YES;
  return NO;
}


#line 6922
jboolean FreemarkerCoreFMParser_jj_3_38(FreemarkerCoreFMParser *self) {
  
#line 6924
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_DOT_DOT)) return YES;
  FreemarkerCoreToken *xsp;
  xsp = self->jj_scanpos_;
  if (FreemarkerCoreFMParser_jj_3R_35(self)) self->jj_scanpos_ = xsp;
  return NO;
}


#line 6931
jboolean FreemarkerCoreFMParser_jj_3_156(FreemarkerCoreFMParser *self) {
  
#line 6933
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_ID)) return YES;
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_EQUALS)) return YES;
  return NO;
}


#line 6938
jboolean FreemarkerCoreFMParser_jj_3_37(FreemarkerCoreFMParser *self) {
  
#line 6940
  FreemarkerCoreToken *xsp;
  xsp = self->jj_scanpos_;
  if (FreemarkerCoreFMParser_jj_3_34(self)) {
    self->jj_scanpos_ = xsp;
    if (FreemarkerCoreFMParser_jj_3_35(self)) return YES;
  }
  if (FreemarkerCoreFMParser_jj_3R_34(self)) return YES;
  return NO;
}


#line 6950
jboolean FreemarkerCoreFMParser_jj_3R_105(FreemarkerCoreFMParser *self) {
  
#line 6952
  FreemarkerCoreToken *xsp;
  xsp = self->jj_scanpos_;
  if (FreemarkerCoreFMParser_jj_3_37(self)) {
    self->jj_scanpos_ = xsp;
    if (FreemarkerCoreFMParser_jj_3_38(self)) return YES;
  }
  return NO;
}


#line 6961
jboolean FreemarkerCoreFMParser_jj_3_153(FreemarkerCoreFMParser *self) {
  
#line 6963
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_OPEN_PAREN)) return YES;
  return NO;
}


#line 6967
jboolean FreemarkerCoreFMParser_jj_3R_103(FreemarkerCoreFMParser *self) {
  
#line 6969
  if (FreemarkerCoreFMParser_jj_3R_34(self)) return YES;
  FreemarkerCoreToken *xsp;
  xsp = self->jj_scanpos_;
  if (FreemarkerCoreFMParser_jj_3R_105(self)) self->jj_scanpos_ = xsp;
  return NO;
}


#line 6976
jboolean FreemarkerCoreFMParser_jj_3R_59(FreemarkerCoreFMParser *self) {
  
#line 6978
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_ITEMS)) return YES;
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_ID)) return YES;
  return NO;
}


#line 6983
jboolean FreemarkerCoreFMParser_jj_3_154(FreemarkerCoreFMParser *self) {
  
#line 6985
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_CLOSE_PAREN)) return YES;
  return NO;
}


#line 6989
jboolean FreemarkerCoreFMParser_jj_3_155(FreemarkerCoreFMParser *self) {
  
#line 6991
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_ID)) return YES;
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_EQUALS)) return YES;
  return NO;
}


#line 6996
jboolean FreemarkerCoreFMParser_jj_3_32(FreemarkerCoreFMParser *self) {
  
#line 6998
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_LESS_THAN)) return YES;
  return NO;
}


#line 7002
jboolean FreemarkerCoreFMParser_jj_3_31(FreemarkerCoreFMParser *self) {
  
#line 7004
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_LESS_THAN_EQUALS)) return YES;
  return NO;
}


#line 7008
jboolean FreemarkerCoreFMParser_jj_3_30(FreemarkerCoreFMParser *self) {
  
#line 7010
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_ESCAPED_GT)) return YES;
  return NO;
}


#line 7014
jboolean FreemarkerCoreFMParser_jj_3_33(FreemarkerCoreFMParser *self) {
  
#line 7016
  FreemarkerCoreToken *xsp;
  xsp = self->jj_scanpos_;
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, 142)) {
    self->jj_scanpos_ = xsp;
    if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, 110)) {
      self->jj_scanpos_ = xsp;
      if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, 141)) {
        self->jj_scanpos_ = xsp;
        if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, 109)) {
          self->jj_scanpos_ = xsp;
          if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, 108)) {
            self->jj_scanpos_ = xsp;
            if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, 108)) {
              self->jj_scanpos_ = xsp;
              if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, 107)) return YES;
            }
          }
        }
      }
    }
  }
  return NO;
}


#line 7040
jboolean FreemarkerCoreFMParser_jj_3_29(FreemarkerCoreFMParser *self) {
  
#line 7042
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_NATURAL_GT)) return YES;
  return NO;
}


#line 7046
jboolean FreemarkerCoreFMParser_jj_3R_61(FreemarkerCoreFMParser *self) {
  
#line 7048
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_CALL)) return YES;
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_ID)) return YES;
  return NO;
}


#line 7053
jboolean FreemarkerCoreFMParser_jj_3_28(FreemarkerCoreFMParser *self) {
  
#line 7055
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_ESCAPED_GTE)) return YES;
  return NO;
}


#line 7059
jboolean FreemarkerCoreFMParser_jj_3_27(FreemarkerCoreFMParser *self) {
  
#line 7061
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_NATURAL_GTE)) return YES;
  return NO;
}


#line 7065
jboolean FreemarkerCoreFMParser_jj_3R_104(FreemarkerCoreFMParser *self) {
  
#line 7067
  FreemarkerCoreToken *xsp;
  xsp = self->jj_scanpos_;
  if (FreemarkerCoreFMParser_jj_3_27(self)) {
    self->jj_scanpos_ = xsp;
    if (FreemarkerCoreFMParser_jj_3_28(self)) {
      self->jj_scanpos_ = xsp;
      if (FreemarkerCoreFMParser_jj_3_29(self)) {
        self->jj_scanpos_ = xsp;
        if (FreemarkerCoreFMParser_jj_3_30(self)) {
          self->jj_scanpos_ = xsp;
          if (FreemarkerCoreFMParser_jj_3_31(self)) {
            self->jj_scanpos_ = xsp;
            if (FreemarkerCoreFMParser_jj_3_32(self)) return YES;
          }
        }
      }
    }
  }
  if (FreemarkerCoreFMParser_jj_3R_103(self)) return YES;
  return NO;
}


#line 7089
jboolean FreemarkerCoreFMParser_jj_3R_52(FreemarkerCoreFMParser *self) {
  
#line 7091
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_FOREACH)) return YES;
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_ID)) return YES;
  return NO;
}


#line 7096
jboolean FreemarkerCoreFMParser_jj_3R_101(FreemarkerCoreFMParser *self) {
  
#line 7098
  if (FreemarkerCoreFMParser_jj_3R_103(self)) return YES;
  FreemarkerCoreToken *xsp;
  xsp = self->jj_scanpos_;
  if (FreemarkerCoreFMParser_jj_3R_104(self)) self->jj_scanpos_ = xsp;
  return NO;
}


#line 7105
jboolean FreemarkerCoreFMParser_jj_3R_45(FreemarkerCoreFMParser *self) {
  
#line 7107
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_ELSE)) return YES;
  if (FreemarkerCoreFMParser_jj_3R_44(self)) return YES;
  return NO;
}


#line 7112
jboolean FreemarkerCoreFMParser_jj_3_26(FreemarkerCoreFMParser *self) {
  
#line 7114
  FreemarkerCoreToken *xsp;
  xsp = self->jj_scanpos_;
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, 99)) {
    self->jj_scanpos_ = xsp;
    if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, 97)) {
      self->jj_scanpos_ = xsp;
      if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, 98)) return YES;
    }
  }
  return NO;
}


#line 7126
jboolean FreemarkerCoreFMParser_jj_3_25(FreemarkerCoreFMParser *self) {
  
#line 7128
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_DOUBLE_EQUALS)) return YES;
  return NO;
}


#line 7132
jboolean FreemarkerCoreFMParser_jj_3_24(FreemarkerCoreFMParser *self) {
  
#line 7134
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_EQUALS)) return YES;
  return NO;
}


#line 7138
jboolean FreemarkerCoreFMParser_jj_3_23(FreemarkerCoreFMParser *self) {
  
#line 7140
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_NOT_EQUALS)) return YES;
  return NO;
}


#line 7144
jboolean FreemarkerCoreFMParser_jj_3R_102(FreemarkerCoreFMParser *self) {
  
#line 7146
  FreemarkerCoreToken *xsp;
  xsp = self->jj_scanpos_;
  if (FreemarkerCoreFMParser_jj_3_23(self)) {
    self->jj_scanpos_ = xsp;
    if (FreemarkerCoreFMParser_jj_3_24(self)) {
      self->jj_scanpos_ = xsp;
      if (FreemarkerCoreFMParser_jj_3_25(self)) return YES;
    }
  }
  if (FreemarkerCoreFMParser_jj_3R_101(self)) return YES;
  return NO;
}


#line 7159
jboolean FreemarkerCoreFMParser_jj_3R_98(FreemarkerCoreFMParser *self) {
  
#line 7161
  if (FreemarkerCoreFMParser_jj_3R_101(self)) return YES;
  FreemarkerCoreToken *xsp;
  xsp = self->jj_scanpos_;
  if (FreemarkerCoreFMParser_jj_3R_102(self)) self->jj_scanpos_ = xsp;
  return NO;
}


#line 7168
jboolean FreemarkerCoreFMParser_jj_3_83(FreemarkerCoreFMParser *self) {
  
#line 7170
  if (FreemarkerCoreFMParser_jj_3R_45(self)) return YES;
  return NO;
}


#line 7174
jboolean FreemarkerCoreFMParser_jj_3_148(FreemarkerCoreFMParser *self) {
  
#line 7176
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_TERMINATING_WHITESPACE)) return YES;
  return NO;
}


#line 7180
jboolean FreemarkerCoreFMParser_jj_3_22(FreemarkerCoreFMParser *self) {
  
#line 7182
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_PERCENT)) return YES;
  return NO;
}


#line 7186
jboolean FreemarkerCoreFMParser_jj_3_147(FreemarkerCoreFMParser *self) {
  
#line 7188
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_TERMINATING_WHITESPACE)) return YES;
  return NO;
}


#line 7192
jboolean FreemarkerCoreFMParser_jj_3_146(FreemarkerCoreFMParser *self) {
  
#line 7194
  FreemarkerCoreToken *xsp;
  xsp = self->jj_scanpos_;
  if (FreemarkerCoreFMParser_jj_3_147(self)) self->jj_scanpos_ = xsp;
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_COMMA)) return YES;
  xsp = self->jj_scanpos_;
  if (FreemarkerCoreFMParser_jj_3_148(self)) self->jj_scanpos_ = xsp;
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_ID)) return YES;
  return NO;
}


#line 7204
jboolean FreemarkerCoreFMParser_jj_3_152(FreemarkerCoreFMParser *self) {
  
#line 7206
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_DIRECTIVE_END)) return YES;
  if (FreemarkerCoreFMParser_jj_3R_44(self)) return YES;
  if (FreemarkerCoreFMParser_jj_scan_tokenWithInt_(self, FreemarkerCoreFMParserConstants_UNIFIED_CALL_END)) return YES;
  return NO;
}


#line 7236
void FreemarkerCoreFMParser_jj_la1_init_0() {
  FreemarkerCoreFMParser_initialize();
  
#line 7237
  FreemarkerCoreFMParser_jj_la1_0_ = [IOSIntArray newArrayWithInts:(jint[]){ (jint) 0x0, (jint) 0x0, (jint) 0xffff7d40, (jint) 0xffff7d40 } count:4];
}


#line 7239
void FreemarkerCoreFMParser_jj_la1_init_1() {
  FreemarkerCoreFMParser_initialize();
  
#line 7240
  FreemarkerCoreFMParser_jj_la1_1_ = [IOSIntArray newArrayWithInts:(jint[]){ (jint) 0x0, (jint) 0x10, (jint) 0xfdfe0001, (jint) 0xfdfe0001 } count:4];
}


#line 7242
void FreemarkerCoreFMParser_jj_la1_init_2() {
  FreemarkerCoreFMParser_initialize();
  
#line 7243
  FreemarkerCoreFMParser_jj_la1_2_ = [IOSIntArray newArrayWithInts:(jint[]){ (jint) 0x70000000, (jint) 0x0, (jint) 0x1f0a, (jint) 0x1f0a } count:4];
}


#line 7245
void FreemarkerCoreFMParser_jj_la1_init_3() {
  FreemarkerCoreFMParser_initialize();
  
#line 7246
  FreemarkerCoreFMParser_jj_la1_3_ = [IOSIntArray newArrayWithInts:(jint[]){ (jint) 0x0, (jint) 0x0, (jint) 0x0, (jint) 0x0 } count:4];
}


#line 7248
void FreemarkerCoreFMParser_jj_la1_init_4() {
  FreemarkerCoreFMParser_initialize();
  
#line 7249
  FreemarkerCoreFMParser_jj_la1_4_ = [IOSIntArray newArrayWithInts:(jint[]){ (jint) 0x0, (jint) 0x0, (jint) 0x0, (jint) 0x0 } count:4];
}


#line 7256
void FreemarkerCoreFMParser_initWithJavaIoInputStream_(FreemarkerCoreFMParser *self, JavaIoInputStream *stream) {
  (void) FreemarkerCoreFMParser_initWithJavaIoInputStream_withNSString_(self, stream, nil);
}


#line 7256
FreemarkerCoreFMParser *new_FreemarkerCoreFMParser_initWithJavaIoInputStream_(JavaIoInputStream *stream) {
  FreemarkerCoreFMParser *self = [FreemarkerCoreFMParser alloc];
  FreemarkerCoreFMParser_initWithJavaIoInputStream_(self, stream);
  return self;
}


#line 7260
void FreemarkerCoreFMParser_initWithJavaIoInputStream_withNSString_(FreemarkerCoreFMParser *self, JavaIoInputStream *stream, NSString *encoding) {
  (void) NSObject_init(self);
  self->escapes_ = new_JavaUtilLinkedList_init();
  self->jj_la1_ = [IOSIntArray newArrayWithLength:
#line 7223
  4];
  self->jj_2_rtns_ = [IOSObjectArray newArrayWithLength:
#line 7251
  225 type:FreemarkerCoreFMParser_JJCalls_class_()];
  self->jj_rescan_ = NO;
  self->jj_gc_ = 0;
  self->jj_ls_ = new_FreemarkerCoreFMParser_LookaheadSuccess_init();
  self->jj_expentries_ = new_JavaUtilArrayList_init();
  self->jj_kind_ =
#line 7404
  -1;
  self->jj_lasttokens_ = [IOSIntArray newArrayWithLength:100];
  
#line 7261
  @try {
    
#line 7261
    self->jj_input_stream_ = new_FreemarkerCoreSimpleCharStream_initWithJavaIoInputStream_withNSString_withInt_withInt_(stream, encoding, 1, 1);
  }
  @catch (
#line 7261
  JavaIoUnsupportedEncodingException *e) {
    
#line 7261
    @throw new_JavaLangRuntimeException_initWithJavaLangThrowable_(e);
  }
  
#line 7262
  self->token_source_ = new_FreemarkerCoreFMParserTokenManager_initWithFreemarkerCoreSimpleCharStream_(self->jj_input_stream_);
  self->token_ = new_FreemarkerCoreToken_init();
  self->jj_ntk_ = -1;
  self->jj_gen_ = 0;
  for (jint i = 0; i < 4; i++) *IOSIntArray_GetRef(self->jj_la1_, i) = -1;
  for (jint i = 0; i < self->jj_2_rtns_->size_; i++) (void) IOSObjectArray_Set(self->jj_2_rtns_, i, new_FreemarkerCoreFMParser_JJCalls_init());
}


#line 7260
FreemarkerCoreFMParser *new_FreemarkerCoreFMParser_initWithJavaIoInputStream_withNSString_(JavaIoInputStream *stream, NSString *encoding) {
  FreemarkerCoreFMParser *self = [FreemarkerCoreFMParser alloc];
  FreemarkerCoreFMParser_initWithJavaIoInputStream_withNSString_(self, stream, encoding);
  return self;
}


#line 7286
void FreemarkerCoreFMParser_initWithJavaIoReader_(FreemarkerCoreFMParser *self, JavaIoReader *stream) {
  (void) NSObject_init(self);
  self->escapes_ = new_JavaUtilLinkedList_init();
  self->jj_la1_ = [IOSIntArray newArrayWithLength:
#line 7223
  4];
  self->jj_2_rtns_ = [IOSObjectArray newArrayWithLength:
#line 7251
  225 type:FreemarkerCoreFMParser_JJCalls_class_()];
  self->jj_rescan_ = NO;
  self->jj_gc_ = 0;
  self->jj_ls_ = new_FreemarkerCoreFMParser_LookaheadSuccess_init();
  self->jj_expentries_ = new_JavaUtilArrayList_init();
  self->jj_kind_ =
#line 7404
  -1;
  self->jj_lasttokens_ = [IOSIntArray newArrayWithLength:100];
  
#line 7287
  self->jj_input_stream_ = new_FreemarkerCoreSimpleCharStream_initWithJavaIoReader_withInt_withInt_(stream, 1, 1);
  self->token_source_ = new_FreemarkerCoreFMParserTokenManager_initWithFreemarkerCoreSimpleCharStream_(self->jj_input_stream_);
  self->token_ = new_FreemarkerCoreToken_init();
  self->jj_ntk_ = -1;
  self->jj_gen_ = 0;
  for (jint i = 0; i < 4; i++) *IOSIntArray_GetRef(self->jj_la1_, i) = -1;
  for (jint i = 0; i < self->jj_2_rtns_->size_; i++) (void) IOSObjectArray_Set(self->jj_2_rtns_, i, new_FreemarkerCoreFMParser_JJCalls_init());
}


#line 7286
FreemarkerCoreFMParser *new_FreemarkerCoreFMParser_initWithJavaIoReader_(JavaIoReader *stream) {
  FreemarkerCoreFMParser *self = [FreemarkerCoreFMParser alloc];
  FreemarkerCoreFMParser_initWithJavaIoReader_(self, stream);
  return self;
}


#line 7308
void FreemarkerCoreFMParser_initWithFreemarkerCoreFMParserTokenManager_(FreemarkerCoreFMParser *self, FreemarkerCoreFMParserTokenManager *tm) {
  (void) NSObject_init(self);
  self->escapes_ = new_JavaUtilLinkedList_init();
  self->jj_la1_ = [IOSIntArray newArrayWithLength:
#line 7223
  4];
  self->jj_2_rtns_ = [IOSObjectArray newArrayWithLength:
#line 7251
  225 type:FreemarkerCoreFMParser_JJCalls_class_()];
  self->jj_rescan_ = NO;
  self->jj_gc_ = 0;
  self->jj_ls_ = new_FreemarkerCoreFMParser_LookaheadSuccess_init();
  self->jj_expentries_ = new_JavaUtilArrayList_init();
  self->jj_kind_ =
#line 7404
  -1;
  self->jj_lasttokens_ = [IOSIntArray newArrayWithLength:100];
  
#line 7309
  self->token_source_ = tm;
  self->token_ = new_FreemarkerCoreToken_init();
  self->jj_ntk_ = -1;
  self->jj_gen_ = 0;
  for (jint i = 0; i < 4; i++) *IOSIntArray_GetRef(self->jj_la1_, i) = -1;
  for (jint i = 0; i < self->jj_2_rtns_->size_; i++) (void) IOSObjectArray_Set(self->jj_2_rtns_, i, new_FreemarkerCoreFMParser_JJCalls_init());
}


#line 7308
FreemarkerCoreFMParser *new_FreemarkerCoreFMParser_initWithFreemarkerCoreFMParserTokenManager_(FreemarkerCoreFMParserTokenManager *tm) {
  FreemarkerCoreFMParser *self = [FreemarkerCoreFMParser alloc];
  FreemarkerCoreFMParser_initWithFreemarkerCoreFMParserTokenManager_(self, tm);
  return self;
}


#line 7327
FreemarkerCoreToken *FreemarkerCoreFMParser_jj_consume_tokenWithInt_(FreemarkerCoreFMParser *self, jint kind) {
  FreemarkerCoreToken *oldToken;
  if ((oldToken = self->token_)->next_ != nil) self->token_ = ((FreemarkerCoreToken *) nil_chk(self->token_))->next_;
  else self->token_ = ((FreemarkerCoreToken *) nil_chk(self->token_))->next_ = [((FreemarkerCoreFMParserTokenManager *) nil_chk(self->token_source_)) getNextToken];
  self->jj_ntk_ = -1;
  if (((FreemarkerCoreToken *) nil_chk(self->token_))->kind_ == kind) {
    self->jj_gen_++;
    if (++self->jj_gc_ > 100) {
      self->jj_gc_ = 0;
      for (jint i = 0; i < ((IOSObjectArray *) nil_chk(self->jj_2_rtns_))->size_; i++) {
        FreemarkerCoreFMParser_JJCalls *c = IOSObjectArray_Get(self->jj_2_rtns_, i);
        while (c != nil) {
          if (((FreemarkerCoreFMParser_JJCalls *) nil_chk(c))->gen_ < self->jj_gen_) c->first_ = nil;
          c = c->next_;
        }
      }
    }
    return self->token_;
  }
  self->token_ = oldToken;
  self->jj_kind_ = kind;
  @throw [self generateParseException];
}


#line 7354
jboolean FreemarkerCoreFMParser_jj_scan_tokenWithInt_(FreemarkerCoreFMParser *self, jint kind) {
  if (self->jj_scanpos_ == self->jj_lastpos_) {
    self->jj_la_--;
    if (((FreemarkerCoreToken *) nil_chk(self->jj_scanpos_))->next_ == nil) {
      self->jj_lastpos_ = self->jj_scanpos_ = self->jj_scanpos_->next_ = [((FreemarkerCoreFMParserTokenManager *) nil_chk(self->token_source_)) getNextToken];
    }
    else {
      
#line 7360
      self->jj_lastpos_ = self->jj_scanpos_ = self->jj_scanpos_->next_;
    }
  }
  else {
    
#line 7363
    self->jj_scanpos_ = ((FreemarkerCoreToken *) nil_chk(self->jj_scanpos_))->next_;
  }
  if (self->jj_rescan_) {
    jint i = 0;
    
#line 7366
    FreemarkerCoreToken *tok = self->token_;
    while (tok != nil && tok != self->jj_scanpos_) {
      
#line 7367
      i++;
      
#line 7367
      tok = ((FreemarkerCoreToken *) nil_chk(tok))->next_;
    }
    
#line 7368
    if (tok != nil) FreemarkerCoreFMParser_jj_add_error_tokenWithInt_withInt_(self, kind, i);
  }
  if (((FreemarkerCoreToken *) nil_chk(self->jj_scanpos_))->kind_ != kind) return YES;
  if (self->jj_la_ == 0 && self->jj_scanpos_ == self->jj_lastpos_) @throw self->jj_ls_;
  return NO;
}


#line 7395
jint FreemarkerCoreFMParser_jj_ntk_f(FreemarkerCoreFMParser *self) {
  if ((self->jj_nt_ = ((FreemarkerCoreToken *) nil_chk(self->token_))->next_) == nil)
#line 7397
  return (self->jj_ntk_ = (self->token_->next_ = [((FreemarkerCoreFMParserTokenManager *) nil_chk(self->token_source_)) getNextToken])->kind_);
  else
#line 7399
  return (self->jj_ntk_ = ((FreemarkerCoreToken *) nil_chk(self->jj_nt_))->kind_);
}


#line 7408
void FreemarkerCoreFMParser_jj_add_error_tokenWithInt_withInt_(FreemarkerCoreFMParser *self, jint kind, jint pos) {
  if (pos >= 100) return;
  if (pos == self->jj_endpos_ + 1) {
    *IOSIntArray_GetRef(nil_chk(self->jj_lasttokens_), self->jj_endpos_++) = kind;
  }
  else
#line 7412
  if (self->jj_endpos_ != 0) {
    self->jj_expentry_ = [IOSIntArray newArrayWithLength:self->jj_endpos_];
    for (jint i = 0; i < self->jj_endpos_; i++) {
      *IOSIntArray_GetRef(self->jj_expentry_, i) = IOSIntArray_Get(nil_chk(self->jj_lasttokens_), i);
    }
    for (id<JavaUtilIterator> it = [((id<JavaUtilList>) nil_chk(self->jj_expentries_)) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
      {
        
#line 7418
        IOSIntArray *oldentry = (IOSIntArray *) check_class_cast(([it next]), [IOSIntArray class]);
        if (((IOSIntArray *) nil_chk(oldentry))->size_ == self->jj_expentry_->size_) {
          for (jint i = 0; i < self->jj_expentry_->size_; i++) {
            if (IOSIntArray_Get(oldentry, i) != IOSIntArray_Get(self->jj_expentry_, i)) {
              goto continue_jj_entries_loop;
            }
          }
          [self->jj_expentries_ addWithId:self->jj_expentry_];
          goto break_jj_entries_loop;
        }
      }
      continue_jj_entries_loop: ;
    }
    break_jj_entries_loop: ;
    
#line 7429
    if (pos != 0) *IOSIntArray_GetRef(nil_chk(self->jj_lasttokens_), (self->jj_endpos_ = pos) - 1) = kind;
  }
}


#line 7487
void FreemarkerCoreFMParser_jj_rescan_token(FreemarkerCoreFMParser *self) {
  self->jj_rescan_ = YES;
  for (jint i = 0; i < 225; i++) {
    @try {
      FreemarkerCoreFMParser_JJCalls *p = IOSObjectArray_Get(nil_chk(self->jj_2_rtns_), i);
      do {
        if (((FreemarkerCoreFMParser_JJCalls *) nil_chk(p))->gen_ > self->jj_gen_) {
          self->jj_la_ = p->arg_;
          
#line 7494
          self->jj_lastpos_ = self->jj_scanpos_ = p->first_;
          switch (i) {
            case 0:
            
#line 7496
            FreemarkerCoreFMParser_jj_3_1(self);
            
#line 7496
            break;
            case 1:
            
#line 7497
            FreemarkerCoreFMParser_jj_3_2(self);
            
#line 7497
            break;
            case 2:
            
#line 7498
            FreemarkerCoreFMParser_jj_3_3(self);
            
#line 7498
            break;
            case 3:
            
#line 7499
            FreemarkerCoreFMParser_jj_3_4(self);
            
#line 7499
            break;
            case 4:
            
#line 7500
            FreemarkerCoreFMParser_jj_3_5(self);
            
#line 7500
            break;
            case 5:
            
#line 7501
            FreemarkerCoreFMParser_jj_3_6(self);
            
#line 7501
            break;
            case 6:
            
#line 7502
            FreemarkerCoreFMParser_jj_3_7(self);
            
#line 7502
            break;
            case 7:
            
#line 7503
            FreemarkerCoreFMParser_jj_3_8(self);
            
#line 7503
            break;
            case 8:
            
#line 7504
            FreemarkerCoreFMParser_jj_3_9(self);
            
#line 7504
            break;
            case 9:
            
#line 7505
            FreemarkerCoreFMParser_jj_3_10(self);
            
#line 7505
            break;
            case 10:
            
#line 7506
            FreemarkerCoreFMParser_jj_3_11(self);
            
#line 7506
            break;
            case 11:
            
#line 7507
            FreemarkerCoreFMParser_jj_3_12(self);
            
#line 7507
            break;
            case 12:
            
#line 7508
            FreemarkerCoreFMParser_jj_3_13(self);
            
#line 7508
            break;
            case 13:
            
#line 7509
            FreemarkerCoreFMParser_jj_3_14(self);
            
#line 7509
            break;
            case 14:
            
#line 7510
            FreemarkerCoreFMParser_jj_3_15(self);
            
#line 7510
            break;
            case 15:
            
#line 7511
            FreemarkerCoreFMParser_jj_3_16(self);
            
#line 7511
            break;
            case 16:
            
#line 7512
            FreemarkerCoreFMParser_jj_3_17(self);
            
#line 7512
            break;
            case 17:
            
#line 7513
            FreemarkerCoreFMParser_jj_3_18(self);
            
#line 7513
            break;
            case 18:
            
#line 7514
            FreemarkerCoreFMParser_jj_3_19(self);
            
#line 7514
            break;
            case 19:
            
#line 7515
            FreemarkerCoreFMParser_jj_3_20(self);
            
#line 7515
            break;
            case 20:
            
#line 7516
            FreemarkerCoreFMParser_jj_3_21(self);
            
#line 7516
            break;
            case 21:
            
#line 7517
            FreemarkerCoreFMParser_jj_3_22(self);
            
#line 7517
            break;
            case 22:
            
#line 7518
            FreemarkerCoreFMParser_jj_3_23(self);
            
#line 7518
            break;
            case 23:
            
#line 7519
            FreemarkerCoreFMParser_jj_3_24(self);
            
#line 7519
            break;
            case 24:
            
#line 7520
            FreemarkerCoreFMParser_jj_3_25(self);
            
#line 7520
            break;
            case 25:
            
#line 7521
            FreemarkerCoreFMParser_jj_3_26(self);
            
#line 7521
            break;
            case 26:
            
#line 7522
            FreemarkerCoreFMParser_jj_3_27(self);
            
#line 7522
            break;
            case 27:
            
#line 7523
            FreemarkerCoreFMParser_jj_3_28(self);
            
#line 7523
            break;
            case 28:
            
#line 7524
            FreemarkerCoreFMParser_jj_3_29(self);
            
#line 7524
            break;
            case 29:
            
#line 7525
            FreemarkerCoreFMParser_jj_3_30(self);
            
#line 7525
            break;
            case 30:
            
#line 7526
            FreemarkerCoreFMParser_jj_3_31(self);
            
#line 7526
            break;
            case 31:
            
#line 7527
            FreemarkerCoreFMParser_jj_3_32(self);
            
#line 7527
            break;
            case 32:
            
#line 7528
            FreemarkerCoreFMParser_jj_3_33(self);
            
#line 7528
            break;
            case 33:
            
#line 7529
            FreemarkerCoreFMParser_jj_3_34(self);
            
#line 7529
            break;
            case 34:
            
#line 7530
            FreemarkerCoreFMParser_jj_3_35(self);
            
#line 7530
            break;
            case 35:
            
#line 7531
            FreemarkerCoreFMParser_jj_3_36(self);
            
#line 7531
            break;
            case 36:
            
#line 7532
            FreemarkerCoreFMParser_jj_3_37(self);
            
#line 7532
            break;
            case 37:
            
#line 7533
            FreemarkerCoreFMParser_jj_3_38(self);
            
#line 7533
            break;
            case 38:
            
#line 7534
            FreemarkerCoreFMParser_jj_3_39(self);
            
#line 7534
            break;
            case 39:
            
#line 7535
            FreemarkerCoreFMParser_jj_3_40(self);
            
#line 7535
            break;
            case 40:
            
#line 7536
            FreemarkerCoreFMParser_jj_3_41(self);
            
#line 7536
            break;
            case 41:
            
#line 7537
            FreemarkerCoreFMParser_jj_3_42(self);
            
#line 7537
            break;
            case 42:
            
#line 7538
            FreemarkerCoreFMParser_jj_3_43(self);
            
#line 7538
            break;
            case 43:
            
#line 7539
            FreemarkerCoreFMParser_jj_3_44(self);
            
#line 7539
            break;
            case 44:
            
#line 7540
            FreemarkerCoreFMParser_jj_3_45(self);
            
#line 7540
            break;
            case 45:
            
#line 7541
            FreemarkerCoreFMParser_jj_3_46(self);
            
#line 7541
            break;
            case 46:
            
#line 7542
            FreemarkerCoreFMParser_jj_3_47(self);
            
#line 7542
            break;
            case 47:
            
#line 7543
            FreemarkerCoreFMParser_jj_3_48(self);
            
#line 7543
            break;
            case 48:
            
#line 7544
            FreemarkerCoreFMParser_jj_3_49(self);
            
#line 7544
            break;
            case 49:
            
#line 7545
            FreemarkerCoreFMParser_jj_3_50(self);
            
#line 7545
            break;
            case 50:
            
#line 7546
            FreemarkerCoreFMParser_jj_3_51(self);
            
#line 7546
            break;
            case 51:
            
#line 7547
            FreemarkerCoreFMParser_jj_3_52(self);
            
#line 7547
            break;
            case 52:
            
#line 7548
            FreemarkerCoreFMParser_jj_3_53(self);
            
#line 7548
            break;
            case 53:
            
#line 7549
            FreemarkerCoreFMParser_jj_3_54(self);
            
#line 7549
            break;
            case 54:
            
#line 7550
            FreemarkerCoreFMParser_jj_3_55(self);
            
#line 7550
            break;
            case 55:
            
#line 7551
            FreemarkerCoreFMParser_jj_3_56(self);
            
#line 7551
            break;
            case 56:
            
#line 7552
            FreemarkerCoreFMParser_jj_3_57(self);
            
#line 7552
            break;
            case 57:
            
#line 7553
            FreemarkerCoreFMParser_jj_3_58(self);
            
#line 7553
            break;
            case 58:
            
#line 7554
            FreemarkerCoreFMParser_jj_3_59(self);
            
#line 7554
            break;
            case 59:
            
#line 7555
            FreemarkerCoreFMParser_jj_3_60(self);
            
#line 7555
            break;
            case 60:
            
#line 7556
            FreemarkerCoreFMParser_jj_3_61(self);
            
#line 7556
            break;
            case 61:
            
#line 7557
            FreemarkerCoreFMParser_jj_3_62(self);
            
#line 7557
            break;
            case 62:
            
#line 7558
            FreemarkerCoreFMParser_jj_3_63(self);
            
#line 7558
            break;
            case 63:
            
#line 7559
            FreemarkerCoreFMParser_jj_3_64(self);
            
#line 7559
            break;
            case 64:
            
#line 7560
            FreemarkerCoreFMParser_jj_3_65(self);
            
#line 7560
            break;
            case 65:
            
#line 7561
            FreemarkerCoreFMParser_jj_3_66(self);
            
#line 7561
            break;
            case 66:
            
#line 7562
            FreemarkerCoreFMParser_jj_3_67(self);
            
#line 7562
            break;
            case 67:
            
#line 7563
            FreemarkerCoreFMParser_jj_3_68(self);
            
#line 7563
            break;
            case 68:
            
#line 7564
            FreemarkerCoreFMParser_jj_3_69(self);
            
#line 7564
            break;
            case 69:
            
#line 7565
            FreemarkerCoreFMParser_jj_3_70(self);
            
#line 7565
            break;
            case 70:
            
#line 7566
            FreemarkerCoreFMParser_jj_3_71(self);
            
#line 7566
            break;
            case 71:
            
#line 7567
            FreemarkerCoreFMParser_jj_3_72(self);
            
#line 7567
            break;
            case 72:
            
#line 7568
            FreemarkerCoreFMParser_jj_3_73(self);
            
#line 7568
            break;
            case 73:
            
#line 7569
            FreemarkerCoreFMParser_jj_3_74(self);
            
#line 7569
            break;
            case 74:
            
#line 7570
            FreemarkerCoreFMParser_jj_3_75(self);
            
#line 7570
            break;
            case 75:
            
#line 7571
            FreemarkerCoreFMParser_jj_3_76(self);
            
#line 7571
            break;
            case 76:
            
#line 7572
            FreemarkerCoreFMParser_jj_3_77(self);
            
#line 7572
            break;
            case 77:
            
#line 7573
            FreemarkerCoreFMParser_jj_3_78(self);
            
#line 7573
            break;
            case 78:
            
#line 7574
            FreemarkerCoreFMParser_jj_3_79(self);
            
#line 7574
            break;
            case 79:
            
#line 7575
            FreemarkerCoreFMParser_jj_3_80(self);
            
#line 7575
            break;
            case 80:
            
#line 7576
            FreemarkerCoreFMParser_jj_3_81(self);
            
#line 7576
            break;
            case 81:
            
#line 7577
            FreemarkerCoreFMParser_jj_3_82(self);
            
#line 7577
            break;
            case 82:
            
#line 7578
            FreemarkerCoreFMParser_jj_3_83(self);
            
#line 7578
            break;
            case 83:
            
#line 7579
            FreemarkerCoreFMParser_jj_3_84(self);
            
#line 7579
            break;
            case 84:
            
#line 7580
            FreemarkerCoreFMParser_jj_3_85(self);
            
#line 7580
            break;
            case 85:
            
#line 7581
            FreemarkerCoreFMParser_jj_3_86(self);
            
#line 7581
            break;
            case 86:
            
#line 7582
            FreemarkerCoreFMParser_jj_3_87(self);
            
#line 7582
            break;
            case 87:
            
#line 7583
            FreemarkerCoreFMParser_jj_3_88(self);
            
#line 7583
            break;
            case 88:
            
#line 7584
            FreemarkerCoreFMParser_jj_3_89(self);
            
#line 7584
            break;
            case 89:
            
#line 7585
            FreemarkerCoreFMParser_jj_3_90(self);
            
#line 7585
            break;
            case 90:
            
#line 7586
            FreemarkerCoreFMParser_jj_3_91(self);
            
#line 7586
            break;
            case 91:
            
#line 7587
            FreemarkerCoreFMParser_jj_3_92(self);
            
#line 7587
            break;
            case 92:
            
#line 7588
            FreemarkerCoreFMParser_jj_3_93(self);
            
#line 7588
            break;
            case 93:
            
#line 7589
            FreemarkerCoreFMParser_jj_3_94(self);
            
#line 7589
            break;
            case 94:
            
#line 7590
            FreemarkerCoreFMParser_jj_3_95(self);
            
#line 7590
            break;
            case 95:
            
#line 7591
            FreemarkerCoreFMParser_jj_3_96(self);
            
#line 7591
            break;
            case 96:
            
#line 7592
            FreemarkerCoreFMParser_jj_3_97(self);
            
#line 7592
            break;
            case 97:
            
#line 7593
            FreemarkerCoreFMParser_jj_3_98(self);
            
#line 7593
            break;
            case 98:
            
#line 7594
            FreemarkerCoreFMParser_jj_3_99(self);
            
#line 7594
            break;
            case 99:
            
#line 7595
            FreemarkerCoreFMParser_jj_3_100(self);
            
#line 7595
            break;
            case 100:
            
#line 7596
            FreemarkerCoreFMParser_jj_3_101(self);
            
#line 7596
            break;
            case 101:
            
#line 7597
            FreemarkerCoreFMParser_jj_3_102(self);
            
#line 7597
            break;
            case 102:
            
#line 7598
            FreemarkerCoreFMParser_jj_3_103(self);
            
#line 7598
            break;
            case 103:
            
#line 7599
            FreemarkerCoreFMParser_jj_3_104(self);
            
#line 7599
            break;
            case 104:
            
#line 7600
            FreemarkerCoreFMParser_jj_3_105(self);
            
#line 7600
            break;
            case 105:
            
#line 7601
            FreemarkerCoreFMParser_jj_3_106(self);
            
#line 7601
            break;
            case 106:
            
#line 7602
            FreemarkerCoreFMParser_jj_3_107(self);
            
#line 7602
            break;
            case 107:
            
#line 7603
            FreemarkerCoreFMParser_jj_3_108(self);
            
#line 7603
            break;
            case 108:
            
#line 7604
            FreemarkerCoreFMParser_jj_3_109(self);
            
#line 7604
            break;
            case 109:
            
#line 7605
            FreemarkerCoreFMParser_jj_3_110(self);
            
#line 7605
            break;
            case 110:
            
#line 7606
            FreemarkerCoreFMParser_jj_3_111(self);
            
#line 7606
            break;
            case 111:
            
#line 7607
            FreemarkerCoreFMParser_jj_3_112(self);
            
#line 7607
            break;
            case 112:
            
#line 7608
            FreemarkerCoreFMParser_jj_3_113(self);
            
#line 7608
            break;
            case 113:
            
#line 7609
            FreemarkerCoreFMParser_jj_3_114(self);
            
#line 7609
            break;
            case 114:
            
#line 7610
            FreemarkerCoreFMParser_jj_3_115(self);
            
#line 7610
            break;
            case 115:
            
#line 7611
            FreemarkerCoreFMParser_jj_3_116(self);
            
#line 7611
            break;
            case 116:
            
#line 7612
            FreemarkerCoreFMParser_jj_3_117(self);
            
#line 7612
            break;
            case 117:
            
#line 7613
            FreemarkerCoreFMParser_jj_3_118(self);
            
#line 7613
            break;
            case 118:
            
#line 7614
            FreemarkerCoreFMParser_jj_3_119(self);
            
#line 7614
            break;
            case 119:
            
#line 7615
            FreemarkerCoreFMParser_jj_3_120(self);
            
#line 7615
            break;
            case 120:
            
#line 7616
            FreemarkerCoreFMParser_jj_3_121(self);
            
#line 7616
            break;
            case 121:
            
#line 7617
            FreemarkerCoreFMParser_jj_3_122(self);
            
#line 7617
            break;
            case 122:
            
#line 7618
            FreemarkerCoreFMParser_jj_3_123(self);
            
#line 7618
            break;
            case 123:
            
#line 7619
            FreemarkerCoreFMParser_jj_3_124(self);
            
#line 7619
            break;
            case 124:
            
#line 7620
            FreemarkerCoreFMParser_jj_3_125(self);
            
#line 7620
            break;
            case 125:
            
#line 7621
            FreemarkerCoreFMParser_jj_3_126(self);
            
#line 7621
            break;
            case 126:
            
#line 7622
            FreemarkerCoreFMParser_jj_3_127(self);
            
#line 7622
            break;
            case 127:
            
#line 7623
            FreemarkerCoreFMParser_jj_3_128(self);
            
#line 7623
            break;
            case 128:
            
#line 7624
            FreemarkerCoreFMParser_jj_3_129(self);
            
#line 7624
            break;
            case 129:
            
#line 7625
            FreemarkerCoreFMParser_jj_3_130(self);
            
#line 7625
            break;
            case 130:
            
#line 7626
            FreemarkerCoreFMParser_jj_3_131(self);
            
#line 7626
            break;
            case 131:
            
#line 7627
            FreemarkerCoreFMParser_jj_3_132(self);
            
#line 7627
            break;
            case 132:
            
#line 7628
            FreemarkerCoreFMParser_jj_3_133(self);
            
#line 7628
            break;
            case 133:
            
#line 7629
            FreemarkerCoreFMParser_jj_3_134(self);
            
#line 7629
            break;
            case 134:
            
#line 7630
            FreemarkerCoreFMParser_jj_3_135(self);
            
#line 7630
            break;
            case 135:
            
#line 7631
            FreemarkerCoreFMParser_jj_3_136(self);
            
#line 7631
            break;
            case 136:
            
#line 7632
            FreemarkerCoreFMParser_jj_3_137(self);
            
#line 7632
            break;
            case 137:
            
#line 7633
            FreemarkerCoreFMParser_jj_3_138(self);
            
#line 7633
            break;
            case 138:
            
#line 7634
            FreemarkerCoreFMParser_jj_3_139(self);
            
#line 7634
            break;
            case 139:
            
#line 7635
            FreemarkerCoreFMParser_jj_3_140(self);
            
#line 7635
            break;
            case 140:
            
#line 7636
            FreemarkerCoreFMParser_jj_3_141(self);
            
#line 7636
            break;
            case 141:
            
#line 7637
            FreemarkerCoreFMParser_jj_3_142(self);
            
#line 7637
            break;
            case 142:
            
#line 7638
            FreemarkerCoreFMParser_jj_3_143(self);
            
#line 7638
            break;
            case 143:
            
#line 7639
            FreemarkerCoreFMParser_jj_3_144(self);
            
#line 7639
            break;
            case 144:
            
#line 7640
            FreemarkerCoreFMParser_jj_3_145(self);
            
#line 7640
            break;
            case 145:
            
#line 7641
            FreemarkerCoreFMParser_jj_3_146(self);
            
#line 7641
            break;
            case 146:
            
#line 7642
            FreemarkerCoreFMParser_jj_3_147(self);
            
#line 7642
            break;
            case 147:
            
#line 7643
            FreemarkerCoreFMParser_jj_3_148(self);
            
#line 7643
            break;
            case 148:
            
#line 7644
            FreemarkerCoreFMParser_jj_3_149(self);
            
#line 7644
            break;
            case 149:
            
#line 7645
            FreemarkerCoreFMParser_jj_3_150(self);
            
#line 7645
            break;
            case 150:
            
#line 7646
            FreemarkerCoreFMParser_jj_3_151(self);
            
#line 7646
            break;
            case 151:
            
#line 7647
            FreemarkerCoreFMParser_jj_3_152(self);
            
#line 7647
            break;
            case 152:
            
#line 7648
            FreemarkerCoreFMParser_jj_3_153(self);
            
#line 7648
            break;
            case 153:
            
#line 7649
            FreemarkerCoreFMParser_jj_3_154(self);
            
#line 7649
            break;
            case 154:
            
#line 7650
            FreemarkerCoreFMParser_jj_3_155(self);
            
#line 7650
            break;
            case 155:
            
#line 7651
            FreemarkerCoreFMParser_jj_3_156(self);
            
#line 7651
            break;
            case 156:
            
#line 7652
            FreemarkerCoreFMParser_jj_3_157(self);
            
#line 7652
            break;
            case 157:
            
#line 7653
            FreemarkerCoreFMParser_jj_3_158(self);
            
#line 7653
            break;
            case 158:
            
#line 7654
            FreemarkerCoreFMParser_jj_3_159(self);
            
#line 7654
            break;
            case 159:
            
#line 7655
            FreemarkerCoreFMParser_jj_3_160(self);
            
#line 7655
            break;
            case 160:
            
#line 7656
            FreemarkerCoreFMParser_jj_3_161(self);
            
#line 7656
            break;
            case 161:
            
#line 7657
            FreemarkerCoreFMParser_jj_3_162(self);
            
#line 7657
            break;
            case 162:
            
#line 7658
            FreemarkerCoreFMParser_jj_3_163(self);
            
#line 7658
            break;
            case 163:
            
#line 7659
            FreemarkerCoreFMParser_jj_3_164(self);
            
#line 7659
            break;
            case 164:
            
#line 7660
            FreemarkerCoreFMParser_jj_3_165(self);
            
#line 7660
            break;
            case 165:
            
#line 7661
            FreemarkerCoreFMParser_jj_3_166(self);
            
#line 7661
            break;
            case 166:
            
#line 7662
            FreemarkerCoreFMParser_jj_3_167(self);
            
#line 7662
            break;
            case 167:
            
#line 7663
            FreemarkerCoreFMParser_jj_3_168(self);
            
#line 7663
            break;
            case 168:
            
#line 7664
            FreemarkerCoreFMParser_jj_3_169(self);
            
#line 7664
            break;
            case 169:
            
#line 7665
            FreemarkerCoreFMParser_jj_3_170(self);
            
#line 7665
            break;
            case 170:
            
#line 7666
            FreemarkerCoreFMParser_jj_3_171(self);
            
#line 7666
            break;
            case 171:
            
#line 7667
            FreemarkerCoreFMParser_jj_3_172(self);
            
#line 7667
            break;
            case 172:
            
#line 7668
            FreemarkerCoreFMParser_jj_3_173(self);
            
#line 7668
            break;
            case 173:
            
#line 7669
            FreemarkerCoreFMParser_jj_3_174(self);
            
#line 7669
            break;
            case 174:
            
#line 7670
            FreemarkerCoreFMParser_jj_3_175(self);
            
#line 7670
            break;
            case 175:
            
#line 7671
            FreemarkerCoreFMParser_jj_3_176(self);
            
#line 7671
            break;
            case 176:
            
#line 7672
            FreemarkerCoreFMParser_jj_3_177(self);
            
#line 7672
            break;
            case 177:
            
#line 7673
            FreemarkerCoreFMParser_jj_3_178(self);
            
#line 7673
            break;
            case 178:
            
#line 7674
            FreemarkerCoreFMParser_jj_3_179(self);
            
#line 7674
            break;
            case 179:
            
#line 7675
            FreemarkerCoreFMParser_jj_3_180(self);
            
#line 7675
            break;
            case 180:
            
#line 7676
            FreemarkerCoreFMParser_jj_3_181(self);
            
#line 7676
            break;
            case 181:
            
#line 7677
            FreemarkerCoreFMParser_jj_3_182(self);
            
#line 7677
            break;
            case 182:
            
#line 7678
            FreemarkerCoreFMParser_jj_3_183(self);
            
#line 7678
            break;
            case 183:
            
#line 7679
            FreemarkerCoreFMParser_jj_3_184(self);
            
#line 7679
            break;
            case 184:
            
#line 7680
            FreemarkerCoreFMParser_jj_3_185(self);
            
#line 7680
            break;
            case 185:
            
#line 7681
            FreemarkerCoreFMParser_jj_3_186(self);
            
#line 7681
            break;
            case 186:
            
#line 7682
            FreemarkerCoreFMParser_jj_3_187(self);
            
#line 7682
            break;
            case 187:
            
#line 7683
            FreemarkerCoreFMParser_jj_3_188(self);
            
#line 7683
            break;
            case 188:
            
#line 7684
            FreemarkerCoreFMParser_jj_3_189(self);
            
#line 7684
            break;
            case 189:
            
#line 7685
            FreemarkerCoreFMParser_jj_3_190(self);
            
#line 7685
            break;
            case 190:
            
#line 7686
            FreemarkerCoreFMParser_jj_3_191(self);
            
#line 7686
            break;
            case 191:
            
#line 7687
            FreemarkerCoreFMParser_jj_3_192(self);
            
#line 7687
            break;
            case 192:
            
#line 7688
            FreemarkerCoreFMParser_jj_3_193(self);
            
#line 7688
            break;
            case 193:
            
#line 7689
            FreemarkerCoreFMParser_jj_3_194(self);
            
#line 7689
            break;
            case 194:
            
#line 7690
            FreemarkerCoreFMParser_jj_3_195(self);
            
#line 7690
            break;
            case 195:
            
#line 7691
            FreemarkerCoreFMParser_jj_3_196(self);
            
#line 7691
            break;
            case 196:
            
#line 7692
            FreemarkerCoreFMParser_jj_3_197(self);
            
#line 7692
            break;
            case 197:
            
#line 7693
            FreemarkerCoreFMParser_jj_3_198(self);
            
#line 7693
            break;
            case 198:
            
#line 7694
            FreemarkerCoreFMParser_jj_3_199(self);
            
#line 7694
            break;
            case 199:
            
#line 7695
            FreemarkerCoreFMParser_jj_3_200(self);
            
#line 7695
            break;
            case 200:
            
#line 7696
            FreemarkerCoreFMParser_jj_3_201(self);
            
#line 7696
            break;
            case 201:
            
#line 7697
            FreemarkerCoreFMParser_jj_3_202(self);
            
#line 7697
            break;
            case 202:
            
#line 7698
            FreemarkerCoreFMParser_jj_3_203(self);
            
#line 7698
            break;
            case 203:
            
#line 7699
            FreemarkerCoreFMParser_jj_3_204(self);
            
#line 7699
            break;
            case 204:
            
#line 7700
            FreemarkerCoreFMParser_jj_3_205(self);
            
#line 7700
            break;
            case 205:
            
#line 7701
            FreemarkerCoreFMParser_jj_3_206(self);
            
#line 7701
            break;
            case 206:
            
#line 7702
            FreemarkerCoreFMParser_jj_3_207(self);
            
#line 7702
            break;
            case 207:
            
#line 7703
            FreemarkerCoreFMParser_jj_3_208(self);
            
#line 7703
            break;
            case 208:
            
#line 7704
            FreemarkerCoreFMParser_jj_3_209(self);
            
#line 7704
            break;
            case 209:
            
#line 7705
            FreemarkerCoreFMParser_jj_3_210(self);
            
#line 7705
            break;
            case 210:
            
#line 7706
            FreemarkerCoreFMParser_jj_3_211(self);
            
#line 7706
            break;
            case 211:
            
#line 7707
            FreemarkerCoreFMParser_jj_3_212(self);
            
#line 7707
            break;
            case 212:
            
#line 7708
            FreemarkerCoreFMParser_jj_3_213(self);
            
#line 7708
            break;
            case 213:
            
#line 7709
            FreemarkerCoreFMParser_jj_3_214(self);
            
#line 7709
            break;
            case 214:
            
#line 7710
            FreemarkerCoreFMParser_jj_3_215(self);
            
#line 7710
            break;
            case 215:
            
#line 7711
            FreemarkerCoreFMParser_jj_3_216(self);
            
#line 7711
            break;
            case 216:
            
#line 7712
            FreemarkerCoreFMParser_jj_3_217(self);
            
#line 7712
            break;
            case 217:
            
#line 7713
            FreemarkerCoreFMParser_jj_3_218(self);
            
#line 7713
            break;
            case 218:
            
#line 7714
            FreemarkerCoreFMParser_jj_3_219(self);
            
#line 7714
            break;
            case 219:
            
#line 7715
            FreemarkerCoreFMParser_jj_3_220(self);
            
#line 7715
            break;
            case 220:
            
#line 7716
            FreemarkerCoreFMParser_jj_3_221(self);
            
#line 7716
            break;
            case 221:
            
#line 7717
            FreemarkerCoreFMParser_jj_3_222(self);
            
#line 7717
            break;
            case 222:
            
#line 7718
            FreemarkerCoreFMParser_jj_3_223(self);
            
#line 7718
            break;
            case 223:
            
#line 7719
            FreemarkerCoreFMParser_jj_3_224(self);
            
#line 7719
            break;
            case 224:
            
#line 7720
            FreemarkerCoreFMParser_jj_3_225(self);
            
#line 7720
            break;
          }
        }
        p = p->next_;
      }
      while (
#line 7724
      p != nil);
    }
    @catch (
#line 7725
    FreemarkerCoreFMParser_LookaheadSuccess *ls) {
    }
  }
  
#line 7727
  self->jj_rescan_ = NO;
}


#line 7730
void FreemarkerCoreFMParser_jj_saveWithInt_withInt_(FreemarkerCoreFMParser *self, jint index, jint xla) {
  FreemarkerCoreFMParser_JJCalls *p = IOSObjectArray_Get(nil_chk(self->jj_2_rtns_), index);
  while (((FreemarkerCoreFMParser_JJCalls *) nil_chk(p))->gen_ > self->jj_gen_) {
    if (p->next_ == nil) {
      
#line 7733
      p = p->next_ = new_FreemarkerCoreFMParser_JJCalls_init();
      
#line 7733
      break;
    }
    
#line 7734
    p = p->next_;
  }
  ((FreemarkerCoreFMParser_JJCalls *) nil_chk(p))->gen_ = self->jj_gen_ + xla - self->jj_la_;
  
#line 7736
  p->first_ = self->token_;
  
#line 7736
  p->arg_ = xla;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreFMParser)


#line 21
@implementation FreemarkerCoreFMParser_ParserIteratorBlockContext

- (instancetype)init {
  FreemarkerCoreFMParser_ParserIteratorBlockContext_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", NULL, NULL, 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "loopVarName_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "kind_", NULL, 0x2, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerCoreFMParser_ParserIteratorBlockContext = { 2, "ParserIteratorBlockContext", "freemarker.core", "FMParser", 0xa, 1, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerCoreFMParser_ParserIteratorBlockContext;
}

@end

void FreemarkerCoreFMParser_ParserIteratorBlockContext_init(FreemarkerCoreFMParser_ParserIteratorBlockContext *self) {
  (void) NSObject_init(self);
}

FreemarkerCoreFMParser_ParserIteratorBlockContext *new_FreemarkerCoreFMParser_ParserIteratorBlockContext_init() {
  FreemarkerCoreFMParser_ParserIteratorBlockContext *self = [FreemarkerCoreFMParser_ParserIteratorBlockContext alloc];
  FreemarkerCoreFMParser_ParserIteratorBlockContext_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreFMParser_ParserIteratorBlockContext)


#line 7352
@implementation FreemarkerCoreFMParser_LookaheadSuccess

- (instancetype)init {
  FreemarkerCoreFMParser_LookaheadSuccess_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", NULL, NULL, 0x2, NULL, NULL },
  };
  static const J2ObjcClassInfo _FreemarkerCoreFMParser_LookaheadSuccess = { 2, "LookaheadSuccess", "freemarker.core", "FMParser", 0x1a, 1, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerCoreFMParser_LookaheadSuccess;
}

@end

void FreemarkerCoreFMParser_LookaheadSuccess_init(FreemarkerCoreFMParser_LookaheadSuccess *self) {
  (void) JavaLangError_init(self);
}

FreemarkerCoreFMParser_LookaheadSuccess *new_FreemarkerCoreFMParser_LookaheadSuccess_init() {
  FreemarkerCoreFMParser_LookaheadSuccess *self = [FreemarkerCoreFMParser_LookaheadSuccess alloc];
  FreemarkerCoreFMParser_LookaheadSuccess_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreFMParser_LookaheadSuccess)


#line 7739
@implementation FreemarkerCoreFMParser_JJCalls

- (instancetype)init {
  FreemarkerCoreFMParser_JJCalls_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", NULL, NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "gen_", NULL, 0x0, "I", NULL, NULL,  },
    { "first_", NULL, 0x0, "Lfreemarker.core.Token;", NULL, NULL,  },
    { "arg_", NULL, 0x0, "I", NULL, NULL,  },
    { "next_", NULL, 0x0, "Lfreemarker.core.FMParser$JJCalls;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerCoreFMParser_JJCalls = { 2, "JJCalls", "freemarker.core", "FMParser", 0x18, 1, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerCoreFMParser_JJCalls;
}

@end

void FreemarkerCoreFMParser_JJCalls_init(FreemarkerCoreFMParser_JJCalls *self) {
  (void) NSObject_init(self);
}

FreemarkerCoreFMParser_JJCalls *new_FreemarkerCoreFMParser_JJCalls_init() {
  FreemarkerCoreFMParser_JJCalls *self = [FreemarkerCoreFMParser_JJCalls alloc];
  FreemarkerCoreFMParser_JJCalls_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreFMParser_JJCalls)
