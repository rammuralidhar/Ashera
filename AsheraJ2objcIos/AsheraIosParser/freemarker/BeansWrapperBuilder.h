//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/ext/beans/BeansWrapperBuilder.java
//

#ifndef _FreemarkerExtBeansBeansWrapperBuilder_H_
#define _FreemarkerExtBeansBeansWrapperBuilder_H_

#include "BeansWrapperConfiguration.h"
#include "J2ObjC_header.h"

@class FreemarkerExtBeansBeansWrapper;
@class FreemarkerTemplateVersion;
@protocol JavaUtilMap;

/**
 @brief Gets/creates a BeansWrapper singleton instance that's already configured as specified in the properties of this object; this is recommended over using the BeansWrapper constructors.
 The returned instance can't be further configured (it's write protected). <p>The builder meant to be used as a drop-away object (not stored in a field), like in this example: <pre> BeansWrapper beansWrapper = new BeansWrapperBuilder(Configuration.VERSION_2_3_21).build(); </pre> <p>Or, a more complex example:</p> <pre> // Create the builder: BeansWrapperBuilder builder = new BeansWrapperBuilder(Configuration.VERSION_2_3_21); // Set desired BeansWrapper configuration properties: builder.setUseModelCache(true); builder.setExposeFields(true); // Get the singleton: BeansWrapper beansWrapper = builder.build(); // You don't need the builder anymore. </pre> <p>Despite that builders aren't meant to be used as long-lived objects (singletons), the builder is thread-safe after you have stopped calling its setters and it was safely published (see JSR 133) to other threads. This can be useful if you have to put the builder into an IoC container, rather than the singleton it produces. <p>The main benefit of using a builder instead of a BeansWrapper constructor is that this way the internal object wrapping-related caches (most notably the class introspection cache) will come from a global, JVM-level (more precisely, <code>freemarker.jar</code> -class-loader-level) cache. Also the BeansWrapper singletons themselves are stored in this global cache. Some of the wrapping-related caches are expensive to build and can take significant amount of memory. Using builders, components that use FreeMarker will share BeansWrapper instances and said caches even if they use separate FreeMarker Configuration -s. (Many Java libraries use FreeMarker internally, so Configuration sharing is not an option.) <p>Note that the returned BeansWrapper instances are only weak-referenced from inside the builder mechanism, so singletons are garbage collected when they go out of usage, just like non-singletons. <p>About the object wrapping-related caches: <ul> <li><p>Class introspection cache: Stores information about classes that once had to be wrapped. The cache is stored in the static fields of certain FreeMarker classes. Thus, if you have two BeansWrapper instances, they might share the same class introspection cache. But if you have two <code>freemarker.jar</code> -s (typically, in two Web Application's <code>WEB-INF/lib</code> directories), those won't share their caches (as they don't share the same FreeMarker classes). Also, currently there's a separate cache for each permutation of the property values that influence class introspection: BeansWrapperBuilder#setExposeFields(boolean) expose_fields and BeansWrapperBuilder#setExposureLevel(int) exposure_level . So only BeansWrapper where those properties are the same may share class introspection caches among each other. </li> <li><p>Model caches: These are local to a BeansWrapper . BeansWrapperBuilder returns the same BeansWrapper instance for equivalent properties (unless the existing instance was garbage collected and thus a new one had to be created), hence these caches will be re-used too. BeansWrapper instances are cached in the static fields of FreeMarker too, but there's a separate cache for each Thread Context Class Loader, which in a servlet container practically means a separate cache for each Web Application (each servlet context). (This is like so because for resolving class names to classes FreeMarker uses the Thread Context Class Loader, so the result of the resolution can be different for different Thread Context Class Loaders.) The model caches are: <ul> <li><p> Static model caches: These are used by the hash returned by BeansWrapper#getEnumModels() and BeansWrapper#getStaticModels() , for caching TemplateModel -s for the static methods/fields and Java 5 enums that were accessed through them. To use said hashes, you have to put them explicitly into the data-model or expose them to the template explicitly otherwise, so in most applications these caches aren't unused. </li> <li><p> Instance model cache: By default off (see BeansWrapper#setUseCache(boolean) ). Caches the TemplateModel -s for all Java objects that were accessed from templates. </li> </ul> </li> </ul> <p>Note that what this method documentation says about BeansWrapper also applies to DefaultObjectWrapperBuilder .
 @since 2.3.21
 */
@interface FreemarkerExtBeansBeansWrapperBuilder : FreemarkerExtBeansBeansWrapperConfiguration

#pragma mark Public

/**
 @brief See BeansWrapperConfiguration#BeansWrapperConfiguration(Version) .
 */
- (instancetype)initWithFreemarkerTemplateVersion:(FreemarkerTemplateVersion *)incompatibleImprovements;

/**
 @brief Returns a BeansWrapper instance that matches the settings of this builder.
 This will be possibly a singleton that is also in use elsewhere, not necessarily a new object.
 */
- (FreemarkerExtBeansBeansWrapper *)build;

#pragma mark Package-Private

/**
 @brief For unit testing only
 */
+ (void)clearInstanceCache;

/**
 @brief For unit testing only
 */
+ (id<JavaUtilMap>)getInstanceCache;

@end

J2OBJC_STATIC_INIT(FreemarkerExtBeansBeansWrapperBuilder)

FOUNDATION_EXPORT void FreemarkerExtBeansBeansWrapperBuilder_initWithFreemarkerTemplateVersion_(FreemarkerExtBeansBeansWrapperBuilder *self, FreemarkerTemplateVersion *incompatibleImprovements);

FOUNDATION_EXPORT FreemarkerExtBeansBeansWrapperBuilder *new_FreemarkerExtBeansBeansWrapperBuilder_initWithFreemarkerTemplateVersion_(FreemarkerTemplateVersion *incompatibleImprovements) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void FreemarkerExtBeansBeansWrapperBuilder_clearInstanceCache();

FOUNDATION_EXPORT id<JavaUtilMap> FreemarkerExtBeansBeansWrapperBuilder_getInstanceCache();

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerExtBeansBeansWrapperBuilder)

#endif // _FreemarkerExtBeansBeansWrapperBuilder_H_
