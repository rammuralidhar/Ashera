//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/cache/SoftCacheStorage.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "SoftCacheStorage.h"
#include "UndeclaredThrowableException.h"
#include "_ConcurrentMapFactory.h"
#include "java/lang/ClassNotFoundException.h"
#include "java/lang/IllegalAccessException.h"
#include "java/lang/NoSuchMethodException.h"
#include "java/lang/ref/Reference.h"
#include "java/lang/ref/ReferenceQueue.h"
#include "java/lang/ref/SoftReference.h"
#include "java/lang/reflect/InvocationTargetException.h"
#include "java/lang/reflect/Method.h"
#include "java/util/Map.h"

#line 0 "/Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/cache/SoftCacheStorage.java"

@interface FreemarkerCacheSoftCacheStorage () {
 @public
  JavaLangRefReferenceQueue *queue_;
  id<JavaUtilMap> map_;
  jboolean concurrent_;
}

- (void)processQueue;

+ (JavaLangReflectMethod *)getAtomicRemoveMethod;

@end

J2OBJC_FIELD_SETTER(FreemarkerCacheSoftCacheStorage, queue_, JavaLangRefReferenceQueue *)
J2OBJC_FIELD_SETTER(FreemarkerCacheSoftCacheStorage, map_, id<JavaUtilMap>)

static JavaLangReflectMethod *FreemarkerCacheSoftCacheStorage_atomicRemove_;
J2OBJC_STATIC_FIELD_GETTER(FreemarkerCacheSoftCacheStorage, atomicRemove_, JavaLangReflectMethod *)

__attribute__((unused)) static void FreemarkerCacheSoftCacheStorage_processQueue(FreemarkerCacheSoftCacheStorage *self);

__attribute__((unused)) static JavaLangReflectMethod *FreemarkerCacheSoftCacheStorage_getAtomicRemoveMethod();

@interface FreemarkerCacheSoftCacheStorage_SoftValueReference : JavaLangRefSoftReference {
 @public
  id key_;
}

- (instancetype)initWithId:(id)key
                    withId:(id)value
withJavaLangRefReferenceQueue:(JavaLangRefReferenceQueue *)queue;

- (id)getKey;

@end

J2OBJC_EMPTY_STATIC_INIT(FreemarkerCacheSoftCacheStorage_SoftValueReference)

J2OBJC_FIELD_SETTER(FreemarkerCacheSoftCacheStorage_SoftValueReference, key_, id)

__attribute__((unused)) static void FreemarkerCacheSoftCacheStorage_SoftValueReference_initWithId_withId_withJavaLangRefReferenceQueue_(FreemarkerCacheSoftCacheStorage_SoftValueReference *self, id key, id value, JavaLangRefReferenceQueue *queue);

__attribute__((unused)) static FreemarkerCacheSoftCacheStorage_SoftValueReference *new_FreemarkerCacheSoftCacheStorage_SoftValueReference_initWithId_withId_withJavaLangRefReferenceQueue_(id key, id value, JavaLangRefReferenceQueue *queue) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerCacheSoftCacheStorage_SoftValueReference)

J2OBJC_INITIALIZED_DEFN(FreemarkerCacheSoftCacheStorage)


#line 40
@implementation FreemarkerCacheSoftCacheStorage


#line 48
- (instancetype)init {
  FreemarkerCacheSoftCacheStorage_init(self);
  return self;
}


#line 52
- (jboolean)isConcurrent {
  return concurrent_;
}

- (instancetype)initWithJavaUtilMap:(id<JavaUtilMap>)backingMap {
  FreemarkerCacheSoftCacheStorage_initWithJavaUtilMap_(self, backingMap);
  return self;
}

- (id)getWithId:(id)key {
  FreemarkerCacheSoftCacheStorage_processQueue(self);
  JavaLangRefReference *ref = (JavaLangRefReference *) check_class_cast([((id<JavaUtilMap>) nil_chk(map_)) getWithId:key], [JavaLangRefReference class]);
  return ref == nil ? nil : [ref get];
}

- (void)putWithId:(id)key
           withId:(id)value {
  FreemarkerCacheSoftCacheStorage_processQueue(self);
  (void) [((id<JavaUtilMap>) nil_chk(map_)) putWithId:key withId:new_FreemarkerCacheSoftCacheStorage_SoftValueReference_initWithId_withId_withJavaLangRefReferenceQueue_(key, value, queue_)];
}


#line 72
- (void)removeWithId:(id)key {
  FreemarkerCacheSoftCacheStorage_processQueue(self);
  (void) [((id<JavaUtilMap>) nil_chk(map_)) removeWithId:key];
}

- (void)clear {
  [((id<JavaUtilMap>) nil_chk(map_)) clear];
  FreemarkerCacheSoftCacheStorage_processQueue(self);
}


#line 87
- (jint)getSize {
  FreemarkerCacheSoftCacheStorage_processQueue(self);
  return [((id<JavaUtilMap>) nil_chk(map_)) size];
}

- (void)processQueue {
  FreemarkerCacheSoftCacheStorage_processQueue(self);
}


#line 129
+ (JavaLangReflectMethod *)getAtomicRemoveMethod {
  return FreemarkerCacheSoftCacheStorage_getAtomicRemoveMethod();
}

+ (void)initialize {
  if (self == [FreemarkerCacheSoftCacheStorage class]) {
    FreemarkerCacheSoftCacheStorage_atomicRemove_ = FreemarkerCacheSoftCacheStorage_getAtomicRemoveMethod();
    J2OBJC_SET_INITIALIZED(FreemarkerCacheSoftCacheStorage)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "SoftCacheStorage", NULL, 0x1, NULL, NULL },
    { "isConcurrent", NULL, "Z", 0x1, NULL, NULL },
    { "initWithJavaUtilMap:", "SoftCacheStorage", NULL, 0x1, NULL, NULL },
    { "getWithId:", "get", "Ljava.lang.Object;", 0x1, NULL, NULL },
    { "putWithId:withId:", "put", "V", 0x1, NULL, NULL },
    { "removeWithId:", "remove", "V", 0x1, NULL, NULL },
    { "clear", NULL, "V", 0x1, NULL, NULL },
    { "getSize", NULL, "I", 0x1, NULL, NULL },
    { "processQueue", NULL, "V", 0x2, NULL, NULL },
    { "getAtomicRemoveMethod", NULL, "Ljava.lang.reflect.Method;", 0xa, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "atomicRemove_", NULL, 0x1a, "Ljava.lang.reflect.Method;", &FreemarkerCacheSoftCacheStorage_atomicRemove_, NULL,  },
    { "queue_", NULL, 0x12, "Ljava.lang.ref.ReferenceQueue;", NULL, NULL,  },
    { "map_", NULL, 0x12, "Ljava.util.Map;", NULL, NULL,  },
    { "concurrent_", NULL, 0x12, "Z", NULL, NULL,  },
  };
  static const char *inner_classes[] = {"Lfreemarker.cache.SoftCacheStorage$SoftValueReference;"};
  static const J2ObjcClassInfo _FreemarkerCacheSoftCacheStorage = { 2, "SoftCacheStorage", "freemarker.cache", NULL, 0x1, 10, methods, 4, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_FreemarkerCacheSoftCacheStorage;
}

@end


#line 48
void FreemarkerCacheSoftCacheStorage_init(FreemarkerCacheSoftCacheStorage *self) {
  (void) FreemarkerCacheSoftCacheStorage_initWithJavaUtilMap_(self, FreemarkerCore_ConcurrentMapFactory_newMaybeConcurrentHashMap());
}


#line 48
FreemarkerCacheSoftCacheStorage *new_FreemarkerCacheSoftCacheStorage_init() {
  FreemarkerCacheSoftCacheStorage *self = [FreemarkerCacheSoftCacheStorage alloc];
  FreemarkerCacheSoftCacheStorage_init(self);
  return self;
}


#line 56
void FreemarkerCacheSoftCacheStorage_initWithJavaUtilMap_(FreemarkerCacheSoftCacheStorage *self, id<JavaUtilMap> backingMap) {
  (void) NSObject_init(self);
  self->queue_ = new_JavaLangRefReferenceQueue_init();
  
#line 57
  self->map_ = backingMap;
  self->concurrent_ = FreemarkerCore_ConcurrentMapFactory_isConcurrentWithJavaUtilMap_(self->map_);
}


#line 56
FreemarkerCacheSoftCacheStorage *new_FreemarkerCacheSoftCacheStorage_initWithJavaUtilMap_(id<JavaUtilMap> backingMap) {
  FreemarkerCacheSoftCacheStorage *self = [FreemarkerCacheSoftCacheStorage alloc];
  FreemarkerCacheSoftCacheStorage_initWithJavaUtilMap_(self, backingMap);
  return self;
}


#line 92
void FreemarkerCacheSoftCacheStorage_processQueue(FreemarkerCacheSoftCacheStorage *self) {
  for (; ; ) {
    FreemarkerCacheSoftCacheStorage_SoftValueReference *ref = (FreemarkerCacheSoftCacheStorage_SoftValueReference *) check_class_cast([((JavaLangRefReferenceQueue *) nil_chk(self->queue_)) poll], [FreemarkerCacheSoftCacheStorage_SoftValueReference class]);
    if (ref == nil) {
      return;
    }
    id key = [((FreemarkerCacheSoftCacheStorage_SoftValueReference *) nil_chk(ref)) getKey];
    if (self->concurrent_) {
      @try {
        (void) [((JavaLangReflectMethod *) nil_chk(FreemarkerCacheSoftCacheStorage_atomicRemove_)) invokeWithId:self->map_ withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ key, ref } count:2 type:NSObject_class_()]];
      }
      @catch (JavaLangIllegalAccessException *e) {
        @throw new_FreemarkerTemplateUtilityUndeclaredThrowableException_initWithJavaLangThrowable_(e);
      }
      @catch (JavaLangReflectInvocationTargetException *e) {
        @throw new_FreemarkerTemplateUtilityUndeclaredThrowableException_initWithJavaLangThrowable_(e);
      }
    }
    else if ([((id<JavaUtilMap>) nil_chk(self->map_)) getWithId:key] == ref) {
      (void) [self->map_ removeWithId:key];
    }
  }
}


#line 129
JavaLangReflectMethod *FreemarkerCacheSoftCacheStorage_getAtomicRemoveMethod() {
  FreemarkerCacheSoftCacheStorage_initialize();
  
#line 130
  @try {
    return [((IOSClass *) nil_chk(IOSClass_forName_(@"java.util.concurrent.ConcurrentMap"))) getMethod:@"remove" parameterTypes:[IOSObjectArray newArrayWithObjects:(id[]){ NSObject_class_(), NSObject_class_() } count:2 type:IOSClass_class_()]];
  }
  @catch (JavaLangClassNotFoundException *e) {
    return nil;
  }
  @catch (JavaLangNoSuchMethodException *e) {
    @throw new_FreemarkerTemplateUtilityUndeclaredThrowableException_initWithJavaLangThrowable_(e);
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCacheSoftCacheStorage)


#line 116
@implementation FreemarkerCacheSoftCacheStorage_SoftValueReference


#line 119
- (instancetype)initWithId:(id)key
                    withId:(id)value
withJavaLangRefReferenceQueue:(JavaLangRefReferenceQueue *)queue {
  FreemarkerCacheSoftCacheStorage_SoftValueReference_initWithId_withId_withJavaLangRefReferenceQueue_(self, key, value, queue);
  return self;
}


#line 124
- (id)getKey {
  return key_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithId:withId:withJavaLangRefReferenceQueue:", "SoftValueReference", NULL, 0x0, NULL, NULL },
    { "getKey", NULL, "Ljava.lang.Object;", 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "key_", NULL, 0x12, "Ljava.lang.Object;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerCacheSoftCacheStorage_SoftValueReference = { 2, "SoftValueReference", "freemarker.cache", "SoftCacheStorage", 0x1a, 2, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerCacheSoftCacheStorage_SoftValueReference;
}

@end


#line 119
void FreemarkerCacheSoftCacheStorage_SoftValueReference_initWithId_withId_withJavaLangRefReferenceQueue_(FreemarkerCacheSoftCacheStorage_SoftValueReference *self, id key, id value, JavaLangRefReferenceQueue *queue) {
  (void) JavaLangRefSoftReference_initWithId_withJavaLangRefReferenceQueue_(self, value, queue);
  self->key_ = key;
}


#line 119
FreemarkerCacheSoftCacheStorage_SoftValueReference *new_FreemarkerCacheSoftCacheStorage_SoftValueReference_initWithId_withId_withJavaLangRefReferenceQueue_(id key, id value, JavaLangRefReferenceQueue *queue) {
  FreemarkerCacheSoftCacheStorage_SoftValueReference *self = [FreemarkerCacheSoftCacheStorage_SoftValueReference alloc];
  FreemarkerCacheSoftCacheStorage_SoftValueReference_initWithId_withId_withJavaLangRefReferenceQueue_(self, key, value, queue);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCacheSoftCacheStorage_SoftValueReference)
