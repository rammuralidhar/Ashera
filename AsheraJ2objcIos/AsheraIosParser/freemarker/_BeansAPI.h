//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/ext/beans/_BeansAPI.java
//

#ifndef _FreemarkerExtBeans_BeansAPI_H_
#define _FreemarkerExtBeans_BeansAPI_H_

#include "J2ObjC_header.h"

@class FreemarkerExtBeansBeanModel;
@class FreemarkerExtBeansBeansWrapper;
@class FreemarkerExtBeansBeansWrapperConfiguration;
@class IOSClass;
@class IOSObjectArray;
@class JavaLangRefReferenceQueue;
@protocol FreemarkerExtBeans_BeansAPI__BeansWrapperSubclassFactory;
@protocol JavaUtilMap;

/**
 @brief For internal use only; don't depend on this, there's no backward compatibility guarantee at all!
 This class is to work around the lack of module system in Java, i.e., so that other FreeMarker packages can access things inside this package that users shouldn't.
 */
@interface FreemarkerExtBeans_BeansAPI : NSObject

#pragma mark Public

+ (NSString *)getAsClassicCompatibleStringWithFreemarkerExtBeansBeanModel:(FreemarkerExtBeansBeanModel *)bm;

/**
 @brief Contains the common parts of the singleton management for BeansWrapper and DefaultObjectWrapper .
 @param beansWrapperSubclassFactory Creates a <em>new</em> read-only object wrapper of the desired BeansWrapper subclass.
 */
+ (FreemarkerExtBeansBeansWrapper *)getBeansWrapperSubclassSingletonWithFreemarkerExtBeansBeansWrapperConfiguration:(FreemarkerExtBeansBeansWrapperConfiguration *)settings
                                                                                                    withJavaUtilMap:(id<JavaUtilMap>)instanceCache
                                                                                      withJavaLangRefReferenceQueue:(JavaLangRefReferenceQueue *)instanceCacheRefQue
                                                       withFreemarkerExtBeans_BeansAPI__BeansWrapperSubclassFactory:(id<FreemarkerExtBeans_BeansAPI__BeansWrapperSubclassFactory>)beansWrapperSubclassFactory;

+ (id)newInstanceWithIOSClass:(IOSClass *)pClass
            withNSObjectArray:(IOSObjectArray *)args
withFreemarkerExtBeansBeansWrapper:(FreemarkerExtBeansBeansWrapper *)bw OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_EMPTY_STATIC_INIT(FreemarkerExtBeans_BeansAPI)

FOUNDATION_EXPORT NSString *FreemarkerExtBeans_BeansAPI_getAsClassicCompatibleStringWithFreemarkerExtBeansBeanModel_(FreemarkerExtBeansBeanModel *bm);

FOUNDATION_EXPORT id FreemarkerExtBeans_BeansAPI_newInstanceWithIOSClass_withNSObjectArray_withFreemarkerExtBeansBeansWrapper_(IOSClass *pClass, IOSObjectArray *args, FreemarkerExtBeansBeansWrapper *bw);

FOUNDATION_EXPORT FreemarkerExtBeansBeansWrapper *FreemarkerExtBeans_BeansAPI_getBeansWrapperSubclassSingletonWithFreemarkerExtBeansBeansWrapperConfiguration_withJavaUtilMap_withJavaLangRefReferenceQueue_withFreemarkerExtBeans_BeansAPI__BeansWrapperSubclassFactory_(FreemarkerExtBeansBeansWrapperConfiguration *settings, id<JavaUtilMap> instanceCache, JavaLangRefReferenceQueue *instanceCacheRefQue, id<FreemarkerExtBeans_BeansAPI__BeansWrapperSubclassFactory> beansWrapperSubclassFactory);

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerExtBeans_BeansAPI)

/**
 @brief For internal use only; don't depend on this, there's no backward compatibility guarantee at all!
 */
@protocol FreemarkerExtBeans_BeansAPI__BeansWrapperSubclassFactory < NSObject, JavaObject >

/**
 @brief Creates a new read-only BeansWrapper ; used for BeansWrapperBuilder and such.
 */
- (FreemarkerExtBeansBeansWrapper *)createWithFreemarkerExtBeansBeansWrapperConfiguration:(FreemarkerExtBeansBeansWrapperConfiguration *)sa;

@end

J2OBJC_EMPTY_STATIC_INIT(FreemarkerExtBeans_BeansAPI__BeansWrapperSubclassFactory)

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerExtBeans_BeansAPI__BeansWrapperSubclassFactory)

#endif // _FreemarkerExtBeans_BeansAPI_H_
