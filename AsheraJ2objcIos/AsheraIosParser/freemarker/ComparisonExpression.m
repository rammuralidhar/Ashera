//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/ComparisonExpression.java
//


#include "BooleanExpression.h"
#include "BugException.h"
#include "ComparisonExpression.h"
#include "Environment.h"
#include "EvalUtil.h"
#include "Expression.h"
#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "ParameterRole.h"
#include "TemplateException.h"

#line 0 "/Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/ComparisonExpression.java"

@interface FreemarkerCoreComparisonExpression () {
 @public
  FreemarkerCoreExpression *left_;
  FreemarkerCoreExpression *right_;
  jint operation_;
  NSString *opString_;
}

@end

J2OBJC_FIELD_SETTER(FreemarkerCoreComparisonExpression, left_, FreemarkerCoreExpression *)
J2OBJC_FIELD_SETTER(FreemarkerCoreComparisonExpression, right_, FreemarkerCoreExpression *)
J2OBJC_FIELD_SETTER(FreemarkerCoreComparisonExpression, opString_, NSString *)


#line 24
@implementation FreemarkerCoreComparisonExpression


#line 31
- (instancetype)initWithFreemarkerCoreExpression:(FreemarkerCoreExpression *)left
                    withFreemarkerCoreExpression:(FreemarkerCoreExpression *)right
                                    withNSString:(NSString *)opString {
  FreemarkerCoreComparisonExpression_initWithFreemarkerCoreExpression_withFreemarkerCoreExpression_withNSString_(self, left, right, opString);
  return self;
}


#line 63
- (jboolean)evalToBooleanWithFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env {
  return FreemarkerCoreEvalUtil_compareWithFreemarkerCoreExpression_withInt_withNSString_withFreemarkerCoreExpression_withFreemarkerCoreExpression_withFreemarkerCoreEnvironment_(left_, operation_, opString_, right_, self, env);
}

- (NSString *)getCanonicalForm {
  return JreStrcat("$C$C$", [((FreemarkerCoreExpression *) nil_chk(left_)) getCanonicalForm], ' ', opString_, ' ', [((FreemarkerCoreExpression *) nil_chk(right_)) getCanonicalForm]);
}

- (NSString *)getNodeTypeSymbol {
  return opString_;
}

- (jboolean)isLiteral {
  return constantValue_ != nil || ([((FreemarkerCoreExpression *) nil_chk(left_)) isLiteral] && [((FreemarkerCoreExpression *) nil_chk(right_)) isLiteral]);
}

- (FreemarkerCoreExpression *)deepCloneWithIdentifierReplaced_innerWithNSString:(NSString *)replacedIdentifier
                                                   withFreemarkerCoreExpression:(FreemarkerCoreExpression *)replacement
                                 withFreemarkerCoreExpression_ReplacemenetState:(FreemarkerCoreExpression_ReplacemenetState *)replacementState {
  
#line 81
  return new_FreemarkerCoreComparisonExpression_initWithFreemarkerCoreExpression_withFreemarkerCoreExpression_withNSString_(
#line 82
  [((FreemarkerCoreExpression *) nil_chk(left_)) deepCloneWithIdentifierReplacedWithNSString:replacedIdentifier withFreemarkerCoreExpression:replacement withFreemarkerCoreExpression_ReplacemenetState:replacementState],
#line 83
  [((FreemarkerCoreExpression *) nil_chk(right_)) deepCloneWithIdentifierReplacedWithNSString:replacedIdentifier withFreemarkerCoreExpression:replacement withFreemarkerCoreExpression_ReplacemenetState:replacementState],
#line 84
  opString_);
}


#line 87
- (jint)getParameterCount {
  return 2;
}

- (id)getParameterValueWithInt:(jint)idx {
  return idx == 0 ? left_ : right_;
}

- (FreemarkerCoreParameterRole *)getParameterRoleWithInt:(jint)idx {
  return FreemarkerCoreParameterRole_forBinaryOperatorOperandWithInt_(idx);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithFreemarkerCoreExpression:withFreemarkerCoreExpression:withNSString:", "ComparisonExpression", NULL, 0x0, NULL, NULL },
    { "evalToBooleanWithFreemarkerCoreEnvironment:", "evalToBoolean", "Z", 0x0, "Lfreemarker.template.TemplateException;", NULL },
    { "getCanonicalForm", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getNodeTypeSymbol", NULL, "Ljava.lang.String;", 0x0, NULL, NULL },
    { "isLiteral", NULL, "Z", 0x0, NULL, NULL },
    { "deepCloneWithIdentifierReplaced_innerWithNSString:withFreemarkerCoreExpression:withFreemarkerCoreExpression_ReplacemenetState:", "deepCloneWithIdentifierReplaced_inner", "Lfreemarker.core.Expression;", 0x4, NULL, NULL },
    { "getParameterCount", NULL, "I", 0x0, NULL, NULL },
    { "getParameterValueWithInt:", "getParameterValue", "Ljava.lang.Object;", 0x0, NULL, NULL },
    { "getParameterRoleWithInt:", "getParameterRole", "Lfreemarker.core.ParameterRole;", 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "left_", NULL, 0x12, "Lfreemarker.core.Expression;", NULL, NULL,  },
    { "right_", NULL, 0x12, "Lfreemarker.core.Expression;", NULL, NULL,  },
    { "operation_", NULL, 0x12, "I", NULL, NULL,  },
    { "opString_", NULL, 0x12, "Ljava.lang.String;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerCoreComparisonExpression = { 2, "ComparisonExpression", "freemarker.core", NULL, 0x10, 9, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerCoreComparisonExpression;
}

@end


#line 31
void FreemarkerCoreComparisonExpression_initWithFreemarkerCoreExpression_withFreemarkerCoreExpression_withNSString_(FreemarkerCoreComparisonExpression *self, FreemarkerCoreExpression *left, FreemarkerCoreExpression *right, NSString *opString) {
  (void) FreemarkerCoreBooleanExpression_init(self);
  
#line 32
  self->left_ = left;
  self->right_ = right;
  opString = [((NSString *) nil_chk(opString)) intern];
  self->opString_ = opString;
  if ([@"==" isEqual:opString] || [@"=" isEqual:opString]) {
    self->operation_ = FreemarkerCoreEvalUtil_CMP_OP_EQUALS;
  }
  else if ([@"!=" isEqual:opString]) {
    self->operation_ = FreemarkerCoreEvalUtil_CMP_OP_NOT_EQUALS;
  }
  else if ([@"gt" isEqual:opString] || [@"\\gt" isEqual:opString] || [@">" isEqual:opString] || [@"&gt;" isEqual:opString]) {
    self->operation_ = FreemarkerCoreEvalUtil_CMP_OP_GREATER_THAN;
  }
  else if ([@"gte" isEqual:opString] || [@"\\gte" isEqual:opString] || [@">=" isEqual:opString] || [@"&gt;=" isEqual:opString]) {
    self->operation_ = FreemarkerCoreEvalUtil_CMP_OP_GREATER_THAN_EQUALS;
  }
  else if ([@"lt" isEqual:opString] || [@"\\lt" isEqual:opString] || [@"<" isEqual:opString] || [@"&lt;" isEqual:opString]) {
    self->operation_ = FreemarkerCoreEvalUtil_CMP_OP_LESS_THAN;
  }
  else if ([@"lte" isEqual:opString] || [@"\\lte" isEqual:opString] || [@"<=" isEqual:opString] || [@"&lt;=" isEqual:opString]) {
    self->operation_ = FreemarkerCoreEvalUtil_CMP_OP_LESS_THAN_EQUALS;
  }
  else {
    @throw new_FreemarkerCoreBugException_initWithNSString_(JreStrcat("$$", @"Unknown comparison operator ", opString));
  }
}


#line 31
FreemarkerCoreComparisonExpression *new_FreemarkerCoreComparisonExpression_initWithFreemarkerCoreExpression_withFreemarkerCoreExpression_withNSString_(FreemarkerCoreExpression *left, FreemarkerCoreExpression *right, NSString *opString) {
  FreemarkerCoreComparisonExpression *self = [FreemarkerCoreComparisonExpression alloc];
  FreemarkerCoreComparisonExpression_initWithFreemarkerCoreExpression_withFreemarkerCoreExpression_withNSString_(self, left, right, opString);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreComparisonExpression)
