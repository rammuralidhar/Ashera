//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/EvalUtil.java
//


#include "ArithmeticEngine.h"
#include "BeanModel.h"
#include "BugException.h"
#include "Environment.h"
#include "EvalUtil.h"
#include "Expression.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "InvalidReferenceException.h"
#include "J2ObjC_source.h"
#include "MiscUtil.h"
#include "NonStringException.h"
#include "Template.h"
#include "TemplateBooleanModel.h"
#include "TemplateCollectionModel.h"
#include "TemplateDateModel.h"
#include "TemplateException.h"
#include "TemplateModel.h"
#include "TemplateModelException.h"
#include "TemplateNumberModel.h"
#include "TemplateScalarModel.h"
#include "TemplateSequenceModel.h"
#include "_BeansAPI.h"
#include "_DelayedAOrAn.h"
#include "_DelayedFTLTypeDescription.h"
#include "_DelayedGetCanonicalForm.h"
#include "_MiscTemplateException.h"
#include "_TemplateModelException.h"
#include "java/lang/RuntimeException.h"
#include "java/text/Collator.h"
#include "java/util/Date.h"
#include "java/util/List.h"

#line 0 "/Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/EvalUtil.java"

@interface FreemarkerCoreEvalUtil ()

- (instancetype)init;

/**
 @brief Signals the buggy case where we have a non-null model, but it wraps a null.
 */
+ (FreemarkerTemplateTemplateModelException *)newModelHasStoredNullExceptionWithIOSClass:(IOSClass *)expected
                                                     withFreemarkerTemplateTemplateModel:(id<FreemarkerTemplateTemplateModel>)model
                                                            withFreemarkerCoreExpression:(FreemarkerCoreExpression *)expr OBJC_METHOD_FAMILY_NONE;

+ (NSString *)cmpOpToStringWithInt:(jint)operator_
                      withNSString:(NSString *)operatorString;

@end

static NSString *FreemarkerCoreEvalUtil_VALUE_OF_THE_COMPARISON_IS_UNKNOWN_DATE_LIKE_ = @"value of the comparison is a date-like value where it's not known if it's a date (no time part), time, or date-time, and thus can't be used in a comparison.";
J2OBJC_STATIC_FIELD_GETTER(FreemarkerCoreEvalUtil, VALUE_OF_THE_COMPARISON_IS_UNKNOWN_DATE_LIKE_, NSString *)

__attribute__((unused)) static void FreemarkerCoreEvalUtil_init(FreemarkerCoreEvalUtil *self);

__attribute__((unused)) static FreemarkerCoreEvalUtil *new_FreemarkerCoreEvalUtil_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static FreemarkerTemplateTemplateModelException *FreemarkerCoreEvalUtil_newModelHasStoredNullExceptionWithIOSClass_withFreemarkerTemplateTemplateModel_withFreemarkerCoreExpression_(IOSClass *expected, id<FreemarkerTemplateTemplateModel> model, FreemarkerCoreExpression *expr);

__attribute__((unused)) static NSString *FreemarkerCoreEvalUtil_cmpOpToStringWithInt_withNSString_(jint operator_, NSString *operatorString);


#line 36
@implementation FreemarkerCoreEvalUtil


#line 47
- (instancetype)init {
  FreemarkerCoreEvalUtil_init(self);
  return self;
}


#line 53
+ (NSString *)modelToStringWithFreemarkerTemplateTemplateScalarModel:(id<FreemarkerTemplateTemplateScalarModel>)model
                                        withFreemarkerCoreExpression:(FreemarkerCoreExpression *)expr
                                       withFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env {
  return FreemarkerCoreEvalUtil_modelToStringWithFreemarkerTemplateTemplateScalarModel_withFreemarkerCoreExpression_withFreemarkerCoreEnvironment_(model, expr, env);
}


#line 70
+ (NSNumber *)modelToNumberWithFreemarkerTemplateTemplateNumberModel:(id<FreemarkerTemplateTemplateNumberModel>)model
                                        withFreemarkerCoreExpression:(FreemarkerCoreExpression *)expr {
  return FreemarkerCoreEvalUtil_modelToNumberWithFreemarkerTemplateTemplateNumberModel_withFreemarkerCoreExpression_(model, expr);
}


#line 81
+ (JavaUtilDate *)modelToDateWithFreemarkerTemplateTemplateDateModel:(id<FreemarkerTemplateTemplateDateModel>)model
                                        withFreemarkerCoreExpression:(FreemarkerCoreExpression *)expr {
  return FreemarkerCoreEvalUtil_modelToDateWithFreemarkerTemplateTemplateDateModel_withFreemarkerCoreExpression_(model, expr);
}


#line 90
+ (FreemarkerTemplateTemplateModelException *)newModelHasStoredNullExceptionWithIOSClass:(IOSClass *)expected
                                                     withFreemarkerTemplateTemplateModel:(id<FreemarkerTemplateTemplateModel>)model
                                                            withFreemarkerCoreExpression:(FreemarkerCoreExpression *)expr {
  return FreemarkerCoreEvalUtil_newModelHasStoredNullExceptionWithIOSClass_withFreemarkerTemplateTemplateModel_withFreemarkerCoreExpression_(expected, model, expr);
}


#line 104
+ (jboolean)compareWithFreemarkerCoreExpression:(FreemarkerCoreExpression *)leftExp
                                        withInt:(jint)operator_
                                   withNSString:(NSString *)operatorString
                   withFreemarkerCoreExpression:(FreemarkerCoreExpression *)rightExp
                   withFreemarkerCoreExpression:(FreemarkerCoreExpression *)defaultBlamed
                  withFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env {
  return FreemarkerCoreEvalUtil_compareWithFreemarkerCoreExpression_withInt_withNSString_withFreemarkerCoreExpression_withFreemarkerCoreExpression_withFreemarkerCoreEnvironment_(leftExp, operator_, operatorString, rightExp, defaultBlamed, env);
}


#line 131
+ (jboolean)compareWithFreemarkerTemplateTemplateModel:(id<FreemarkerTemplateTemplateModel>)leftValue
                                               withInt:(jint)operator_
                   withFreemarkerTemplateTemplateModel:(id<FreemarkerTemplateTemplateModel>)rightValue
                         withFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env {
  return FreemarkerCoreEvalUtil_compareWithFreemarkerTemplateTemplateModel_withInt_withFreemarkerTemplateTemplateModel_withFreemarkerCoreEnvironment_(leftValue, operator_, rightValue, env);
}


#line 148
+ (jboolean)compareLenientWithFreemarkerTemplateTemplateModel:(id<FreemarkerTemplateTemplateModel>)leftValue
                                                      withInt:(jint)operator_
                          withFreemarkerTemplateTemplateModel:(id<FreemarkerTemplateTemplateModel>)rightValue
                                withFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env {
  return FreemarkerCoreEvalUtil_compareLenientWithFreemarkerTemplateTemplateModel_withInt_withFreemarkerTemplateTemplateModel_withFreemarkerCoreEnvironment_(leftValue, operator_, rightValue, env);
}


#line 179
+ (jboolean)compareWithFreemarkerTemplateTemplateModel:(id<FreemarkerTemplateTemplateModel>)leftValue
                          withFreemarkerCoreExpression:(FreemarkerCoreExpression *)leftExp
                                               withInt:(jint)operator_
                                          withNSString:(NSString *)operatorString
                   withFreemarkerTemplateTemplateModel:(id<FreemarkerTemplateTemplateModel>)rightValue
                          withFreemarkerCoreExpression:(FreemarkerCoreExpression *)rightExp
                          withFreemarkerCoreExpression:(FreemarkerCoreExpression *)defaultBlamed
                                           withBoolean:(jboolean)quoteOperandsInErrors
                                           withBoolean:(jboolean)typeMismatchMeansNotEqual
                                           withBoolean:(jboolean)leftNullReturnsFalse
                                           withBoolean:(jboolean)rightNullReturnsFalse
                         withFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env {
  return FreemarkerCoreEvalUtil_compareWithFreemarkerTemplateTemplateModel_withFreemarkerCoreExpression_withInt_withNSString_withFreemarkerTemplateTemplateModel_withFreemarkerCoreExpression_withFreemarkerCoreExpression_withBoolean_withBoolean_withBoolean_withBoolean_withFreemarkerCoreEnvironment_(leftValue, leftExp, operator_, operatorString, rightValue, rightExp, defaultBlamed, quoteOperandsInErrors, typeMismatchMeansNotEqual, leftNullReturnsFalse, rightNullReturnsFalse, env);
}


#line 327
+ (NSString *)cmpOpToStringWithInt:(jint)operator_
                      withNSString:(NSString *)operatorString {
  return FreemarkerCoreEvalUtil_cmpOpToStringWithInt_withNSString_(operator_, operatorString);
}


#line 343
+ (NSString *)coerceModelToStringWithFreemarkerTemplateTemplateModel:(id<FreemarkerTemplateTemplateModel>)tm
                                        withFreemarkerCoreExpression:(FreemarkerCoreExpression *)exp
                                                        withNSString:(NSString *)seqHint
                                       withFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env {
  return FreemarkerCoreEvalUtil_coerceModelToStringWithFreemarkerTemplateTemplateModel_withFreemarkerCoreExpression_withNSString_withFreemarkerCoreEnvironment_(tm, exp, seqHint, env);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "EvalUtil", NULL, 0x2, NULL, NULL },
    { "modelToStringWithFreemarkerTemplateTemplateScalarModel:withFreemarkerCoreExpression:withFreemarkerCoreEnvironment:", "modelToString", "Ljava.lang.String;", 0x8, "Lfreemarker.template.TemplateModelException;", NULL },
    { "modelToNumberWithFreemarkerTemplateTemplateNumberModel:withFreemarkerCoreExpression:", "modelToNumber", "Ljava.lang.Number;", 0x8, "Lfreemarker.template.TemplateModelException;", NULL },
    { "modelToDateWithFreemarkerTemplateTemplateDateModel:withFreemarkerCoreExpression:", "modelToDate", "Ljava.util.Date;", 0x8, "Lfreemarker.template.TemplateModelException;", NULL },
    { "newModelHasStoredNullExceptionWithIOSClass:withFreemarkerTemplateTemplateModel:withFreemarkerCoreExpression:", "newModelHasStoredNullException", "Lfreemarker.template.TemplateModelException;", 0xa, NULL, NULL },
    { "compareWithFreemarkerCoreExpression:withInt:withNSString:withFreemarkerCoreExpression:withFreemarkerCoreExpression:withFreemarkerCoreEnvironment:", "compare", "Z", 0x8, "Lfreemarker.template.TemplateException;", NULL },
    { "compareWithFreemarkerTemplateTemplateModel:withInt:withFreemarkerTemplateTemplateModel:withFreemarkerCoreEnvironment:", "compare", "Z", 0x8, "Lfreemarker.template.TemplateException;", NULL },
    { "compareLenientWithFreemarkerTemplateTemplateModel:withInt:withFreemarkerTemplateTemplateModel:withFreemarkerCoreEnvironment:", "compareLenient", "Z", 0x8, "Lfreemarker.template.TemplateException;", NULL },
    { "compareWithFreemarkerTemplateTemplateModel:withFreemarkerCoreExpression:withInt:withNSString:withFreemarkerTemplateTemplateModel:withFreemarkerCoreExpression:withFreemarkerCoreExpression:withBoolean:withBoolean:withBoolean:withBoolean:withFreemarkerCoreEnvironment:", "compare", "Z", 0x8, "Lfreemarker.template.TemplateException;", NULL },
    { "cmpOpToStringWithInt:withNSString:", "cmpOpToString", "Ljava.lang.String;", 0xa, NULL, NULL },
    { "coerceModelToStringWithFreemarkerTemplateTemplateModel:withFreemarkerCoreExpression:withNSString:withFreemarkerCoreEnvironment:", "coerceModelToString", "Ljava.lang.String;", 0x8, "Lfreemarker.template.TemplateException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "CMP_OP_EQUALS_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = FreemarkerCoreEvalUtil_CMP_OP_EQUALS },
    { "CMP_OP_NOT_EQUALS_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = FreemarkerCoreEvalUtil_CMP_OP_NOT_EQUALS },
    { "CMP_OP_LESS_THAN_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = FreemarkerCoreEvalUtil_CMP_OP_LESS_THAN },
    { "CMP_OP_GREATER_THAN_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = FreemarkerCoreEvalUtil_CMP_OP_GREATER_THAN },
    { "CMP_OP_LESS_THAN_EQUALS_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = FreemarkerCoreEvalUtil_CMP_OP_LESS_THAN_EQUALS },
    { "CMP_OP_GREATER_THAN_EQUALS_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = FreemarkerCoreEvalUtil_CMP_OP_GREATER_THAN_EQUALS },
    { "VALUE_OF_THE_COMPARISON_IS_UNKNOWN_DATE_LIKE_", NULL, 0x1a, "Ljava.lang.String;", &FreemarkerCoreEvalUtil_VALUE_OF_THE_COMPARISON_IS_UNKNOWN_DATE_LIKE_, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerCoreEvalUtil = { 2, "EvalUtil", "freemarker.core", NULL, 0x0, 11, methods, 7, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerCoreEvalUtil;
}

@end


#line 47
void FreemarkerCoreEvalUtil_init(FreemarkerCoreEvalUtil *self) {
  (void) NSObject_init(self);
}


#line 47
FreemarkerCoreEvalUtil *new_FreemarkerCoreEvalUtil_init() {
  FreemarkerCoreEvalUtil *self = [FreemarkerCoreEvalUtil alloc];
  FreemarkerCoreEvalUtil_init(self);
  return self;
}

NSString *FreemarkerCoreEvalUtil_modelToStringWithFreemarkerTemplateTemplateScalarModel_withFreemarkerCoreExpression_withFreemarkerCoreEnvironment_(id<FreemarkerTemplateTemplateScalarModel> model, FreemarkerCoreExpression *expr, FreemarkerCoreEnvironment *env) {
  FreemarkerCoreEvalUtil_initialize();
  NSString *value = [((id<FreemarkerTemplateTemplateScalarModel>) nil_chk(model)) getAsString];
  if (value == nil) {
    if (env == nil) env = FreemarkerCoreEnvironment_getCurrentEnvironment();
    if (env != nil && [env isClassicCompatible]) {
      return @"";
    }
    else {
      
#line 61
      @throw FreemarkerCoreEvalUtil_newModelHasStoredNullExceptionWithIOSClass_withFreemarkerTemplateTemplateModel_withFreemarkerCoreExpression_(NSString_class_(), model, expr);
    }
  }
  return value;
}

NSNumber *FreemarkerCoreEvalUtil_modelToNumberWithFreemarkerTemplateTemplateNumberModel_withFreemarkerCoreExpression_(id<FreemarkerTemplateTemplateNumberModel> model, FreemarkerCoreExpression *expr) {
  FreemarkerCoreEvalUtil_initialize();
  
#line 73
  NSNumber *value = [((id<FreemarkerTemplateTemplateNumberModel>) nil_chk(model)) getAsNumber];
  if (value == nil) @throw FreemarkerCoreEvalUtil_newModelHasStoredNullExceptionWithIOSClass_withFreemarkerTemplateTemplateModel_withFreemarkerCoreExpression_(NSNumber_class_(), model, expr);
  return value;
}


#line 81
JavaUtilDate *FreemarkerCoreEvalUtil_modelToDateWithFreemarkerTemplateTemplateDateModel_withFreemarkerCoreExpression_(id<FreemarkerTemplateTemplateDateModel> model, FreemarkerCoreExpression *expr) {
  FreemarkerCoreEvalUtil_initialize();
  
#line 84
  JavaUtilDate *value = [((id<FreemarkerTemplateTemplateDateModel>) nil_chk(model)) getAsDate];
  if (value == nil) @throw FreemarkerCoreEvalUtil_newModelHasStoredNullExceptionWithIOSClass_withFreemarkerTemplateTemplateModel_withFreemarkerCoreExpression_(JavaUtilDate_class_(), model, expr);
  return value;
}

FreemarkerTemplateTemplateModelException *FreemarkerCoreEvalUtil_newModelHasStoredNullExceptionWithIOSClass_withFreemarkerTemplateTemplateModel_withFreemarkerCoreExpression_(IOSClass *expected, id<FreemarkerTemplateTemplateModel> model, FreemarkerCoreExpression *expr) {
  FreemarkerCoreEvalUtil_initialize();
  return new_FreemarkerCore_TemplateModelException_initWithFreemarkerCoreExpression_withNSObjectArray_(expr, FreemarkerCore_TemplateModelException_modelHasStoredNullDescriptionWithIOSClass_withFreemarkerTemplateTemplateModel_(expected, model));
}


#line 104
jboolean FreemarkerCoreEvalUtil_compareWithFreemarkerCoreExpression_withInt_withNSString_withFreemarkerCoreExpression_withFreemarkerCoreExpression_withFreemarkerCoreEnvironment_(FreemarkerCoreExpression *leftExp, jint operator_, NSString *operatorString, FreemarkerCoreExpression *rightExp, FreemarkerCoreExpression *defaultBlamed, FreemarkerCoreEnvironment *env) {
  FreemarkerCoreEvalUtil_initialize();
  
#line 110
  id<FreemarkerTemplateTemplateModel> ltm = [((FreemarkerCoreExpression *) nil_chk(leftExp)) evalWithFreemarkerCoreEnvironment:env];
  id<FreemarkerTemplateTemplateModel> rtm = [((FreemarkerCoreExpression *) nil_chk(rightExp)) evalWithFreemarkerCoreEnvironment:env];
  return FreemarkerCoreEvalUtil_compareWithFreemarkerTemplateTemplateModel_withFreemarkerCoreExpression_withInt_withNSString_withFreemarkerTemplateTemplateModel_withFreemarkerCoreExpression_withFreemarkerCoreExpression_withBoolean_withBoolean_withBoolean_withBoolean_withFreemarkerCoreEnvironment_(
#line 113
  ltm, leftExp,
#line 114
  operator_, operatorString,
#line 115
  rtm, rightExp,
#line 116
  defaultBlamed, NO,
#line 117
  NO, NO, NO,
#line 118
  env);
}


#line 131
jboolean FreemarkerCoreEvalUtil_compareWithFreemarkerTemplateTemplateModel_withInt_withFreemarkerTemplateTemplateModel_withFreemarkerCoreEnvironment_(id<FreemarkerTemplateTemplateModel> leftValue, jint operator_, id<FreemarkerTemplateTemplateModel> rightValue, FreemarkerCoreEnvironment *env) {
  FreemarkerCoreEvalUtil_initialize();
  
#line 134
  return FreemarkerCoreEvalUtil_compareWithFreemarkerTemplateTemplateModel_withFreemarkerCoreExpression_withInt_withNSString_withFreemarkerTemplateTemplateModel_withFreemarkerCoreExpression_withFreemarkerCoreExpression_withBoolean_withBoolean_withBoolean_withBoolean_withFreemarkerCoreEnvironment_(
#line 135
  leftValue, nil,
#line 136
  operator_, nil,
#line 137
  rightValue, nil,
#line 138
  nil, NO,
#line 139
  NO, NO, NO,
#line 140
  env);
}


#line 148
jboolean FreemarkerCoreEvalUtil_compareLenientWithFreemarkerTemplateTemplateModel_withInt_withFreemarkerTemplateTemplateModel_withFreemarkerCoreEnvironment_(id<FreemarkerTemplateTemplateModel> leftValue, jint operator_, id<FreemarkerTemplateTemplateModel> rightValue, FreemarkerCoreEnvironment *env) {
  FreemarkerCoreEvalUtil_initialize();
  
#line 151
  return FreemarkerCoreEvalUtil_compareWithFreemarkerTemplateTemplateModel_withFreemarkerCoreExpression_withInt_withNSString_withFreemarkerTemplateTemplateModel_withFreemarkerCoreExpression_withFreemarkerCoreExpression_withBoolean_withBoolean_withBoolean_withBoolean_withFreemarkerCoreEnvironment_(
#line 152
  leftValue, nil,
#line 153
  operator_, nil,
#line 154
  rightValue, nil,
#line 155
  nil, NO,
#line 156
  YES, NO, NO,
#line 157
  env);
}


#line 179
jboolean FreemarkerCoreEvalUtil_compareWithFreemarkerTemplateTemplateModel_withFreemarkerCoreExpression_withInt_withNSString_withFreemarkerTemplateTemplateModel_withFreemarkerCoreExpression_withFreemarkerCoreExpression_withBoolean_withBoolean_withBoolean_withBoolean_withFreemarkerCoreEnvironment_(id<FreemarkerTemplateTemplateModel> leftValue, FreemarkerCoreExpression *leftExp, jint operator_, NSString *operatorString, id<FreemarkerTemplateTemplateModel> rightValue, FreemarkerCoreExpression *rightExp, FreemarkerCoreExpression *defaultBlamed, jboolean quoteOperandsInErrors, jboolean typeMismatchMeansNotEqual, jboolean leftNullReturnsFalse, jboolean rightNullReturnsFalse, FreemarkerCoreEnvironment *env) {
  FreemarkerCoreEvalUtil_initialize();
  
#line 187
  if (leftValue == nil) {
    if (env != nil && [env isClassicCompatible]) {
      leftValue = FreemarkerTemplateTemplateScalarModel_get_EMPTY_STRING_();
    }
    else {
      
#line 191
      if (leftNullReturnsFalse) {
        return NO;
      }
      else {
        
#line 194
        if (leftExp != nil) {
          @throw FreemarkerCoreInvalidReferenceException_getInstanceWithFreemarkerCoreExpression_withFreemarkerCoreEnvironment_(leftExp, env);
        }
        else {
          
#line 197
          @throw new_FreemarkerCore_MiscTemplateException_initWithFreemarkerCoreExpression_withFreemarkerCoreEnvironment_withNSString_(defaultBlamed, env,
#line 198
          @"The left operand of the comparison was undefined or null.");
        }
      }
    }
  }
  
#line 204
  if (rightValue == nil) {
    if (env != nil && [env isClassicCompatible]) {
      rightValue = FreemarkerTemplateTemplateScalarModel_get_EMPTY_STRING_();
    }
    else {
      
#line 208
      if (rightNullReturnsFalse) {
        return NO;
      }
      else {
        
#line 211
        if (rightExp != nil) {
          @throw FreemarkerCoreInvalidReferenceException_getInstanceWithFreemarkerCoreExpression_withFreemarkerCoreEnvironment_(rightExp, env);
        }
        else {
          
#line 214
          @throw new_FreemarkerCore_MiscTemplateException_initWithFreemarkerCoreExpression_withFreemarkerCoreEnvironment_withNSString_(defaultBlamed, env,
#line 215
          @"The right operand of the comparison was undefined or null.");
        }
      }
    }
  }
  
#line 221
  jint cmpResult;
  if ([FreemarkerTemplateTemplateNumberModel_class_() isInstance:leftValue] && [FreemarkerTemplateTemplateNumberModel_class_() isInstance:rightValue]) {
    NSNumber *leftNum = FreemarkerCoreEvalUtil_modelToNumberWithFreemarkerTemplateTemplateNumberModel_withFreemarkerCoreExpression_((id<FreemarkerTemplateTemplateNumberModel>) check_protocol_cast(leftValue, @protocol(FreemarkerTemplateTemplateNumberModel)), leftExp);
    NSNumber *rightNum = FreemarkerCoreEvalUtil_modelToNumberWithFreemarkerTemplateTemplateNumberModel_withFreemarkerCoreExpression_((id<FreemarkerTemplateTemplateNumberModel>) check_protocol_cast(rightValue, @protocol(FreemarkerTemplateTemplateNumberModel)), rightExp);
    FreemarkerCoreArithmeticEngine *ae =
#line 226
    env != nil ?
#line 227
    [env getArithmeticEngine] :
#line 228
    (leftExp != nil ?
#line 229
    [((FreemarkerTemplateTemplate *) nil_chk([leftExp getTemplate])) getArithmeticEngine] : FreemarkerCoreArithmeticEngine_get_BIGDECIMAL_ENGINE_());
    
#line 231
    @try {
      cmpResult = [ae compareNumbersWithNSNumber:leftNum withNSNumber:rightNum];
    }
    @catch (
#line 233
    JavaLangRuntimeException *e) {
      @throw new_FreemarkerCore_MiscTemplateException_initWithFreemarkerCoreExpression_withJavaLangThrowable_withFreemarkerCoreEnvironment_withNSObjectArray_(defaultBlamed, e, env, [IOSObjectArray newArrayWithObjects:(id[]){
#line 235
        @"Unexpected error while comparing two numbers: ", e } count:2 type:NSObject_class_()]);
      }
    }
    else
#line 237
    if ([FreemarkerTemplateTemplateDateModel_class_() isInstance:leftValue] && [FreemarkerTemplateTemplateDateModel_class_() isInstance:rightValue]) {
      id<FreemarkerTemplateTemplateDateModel> leftDateModel = (id<FreemarkerTemplateTemplateDateModel>) check_protocol_cast(leftValue, @protocol(FreemarkerTemplateTemplateDateModel));
      id<FreemarkerTemplateTemplateDateModel> rightDateModel = (id<FreemarkerTemplateTemplateDateModel>) check_protocol_cast(rightValue, @protocol(FreemarkerTemplateTemplateDateModel));
      
#line 241
      jint leftDateType = [((id<FreemarkerTemplateTemplateDateModel>) nil_chk(leftDateModel)) getDateType];
      jint rightDateType = [((id<FreemarkerTemplateTemplateDateModel>) nil_chk(rightDateModel)) getDateType];
      
#line 244
      if (leftDateType == FreemarkerTemplateTemplateDateModel_UNKNOWN || rightDateType == FreemarkerTemplateTemplateDateModel_UNKNOWN) {
        NSString *sideName;
        FreemarkerCoreExpression *sideExp;
        if (leftDateType == FreemarkerTemplateTemplateDateModel_UNKNOWN) {
          sideName = @"left";
          sideExp = leftExp;
        }
        else {
          
#line 251
          sideName = @"right";
          sideExp = rightExp;
        }
        
#line 255
        @throw new_FreemarkerCore_MiscTemplateException_initWithFreemarkerCoreExpression_withFreemarkerCoreEnvironment_withNSObjectArray_(sideExp != nil ? sideExp : defaultBlamed, env, [IOSObjectArray newArrayWithObjects:(id[]){
#line 256
          @"The ", sideName, @" ", FreemarkerCoreEvalUtil_VALUE_OF_THE_COMPARISON_IS_UNKNOWN_DATE_LIKE_ } count:4 type:NSObject_class_()]);
        }
        
#line 259
        if (leftDateType != rightDateType) {
          ;
          @throw new_FreemarkerCore_MiscTemplateException_initWithFreemarkerCoreExpression_withFreemarkerCoreEnvironment_withNSObjectArray_(defaultBlamed, env, [IOSObjectArray newArrayWithObjects:(id[]){
#line 262
            @"Can't compare dates of different types. Left date type is ",
#line 263
            [((id<JavaUtilList>) nil_chk(FreemarkerTemplateTemplateDateModel_get_TYPE_NAMES_())) getWithInt:leftDateType], @", right date type is ",
#line 264
            [FreemarkerTemplateTemplateDateModel_get_TYPE_NAMES_() getWithInt:rightDateType], @"." } count:5 type:NSObject_class_()]);
          }
          
#line 267
          JavaUtilDate *leftDate = FreemarkerCoreEvalUtil_modelToDateWithFreemarkerTemplateTemplateDateModel_withFreemarkerCoreExpression_(leftDateModel, leftExp);
          JavaUtilDate *rightDate = FreemarkerCoreEvalUtil_modelToDateWithFreemarkerTemplateTemplateDateModel_withFreemarkerCoreExpression_(rightDateModel, rightExp);
          cmpResult = [((JavaUtilDate *) nil_chk(leftDate)) compareToWithId:rightDate];
        }
        else
#line 270
        if ([FreemarkerTemplateTemplateScalarModel_class_() isInstance:leftValue] && [FreemarkerTemplateTemplateScalarModel_class_() isInstance:rightValue]) {
          if (operator_ != FreemarkerCoreEvalUtil_CMP_OP_EQUALS && operator_ != FreemarkerCoreEvalUtil_CMP_OP_NOT_EQUALS) {
            @throw new_FreemarkerCore_MiscTemplateException_initWithFreemarkerCoreExpression_withFreemarkerCoreEnvironment_withNSObjectArray_(defaultBlamed, env, [IOSObjectArray newArrayWithObjects:(id[]){
#line 273
              @"Can't use operator \"", FreemarkerCoreEvalUtil_cmpOpToStringWithInt_withNSString_(operator_, operatorString), @"\" on string values." } count:3 type:NSObject_class_()]);
            }
            NSString *leftString = FreemarkerCoreEvalUtil_modelToStringWithFreemarkerTemplateTemplateScalarModel_withFreemarkerCoreExpression_withFreemarkerCoreEnvironment_((id<FreemarkerTemplateTemplateScalarModel>) check_protocol_cast(leftValue, @protocol(FreemarkerTemplateTemplateScalarModel)), leftExp, env);
            NSString *rightString = FreemarkerCoreEvalUtil_modelToStringWithFreemarkerTemplateTemplateScalarModel_withFreemarkerCoreExpression_withFreemarkerCoreEnvironment_((id<FreemarkerTemplateTemplateScalarModel>) check_protocol_cast(rightValue, @protocol(FreemarkerTemplateTemplateScalarModel)), rightExp, env);
            
#line 278
            cmpResult = [((JavaTextCollator *) nil_chk([((FreemarkerCoreEnvironment *) nil_chk(env)) getCollator])) compareWithNSString:leftString withNSString:rightString];
          }
          else
#line 279
          if ([FreemarkerTemplateTemplateBooleanModel_class_() isInstance:leftValue] && [FreemarkerTemplateTemplateBooleanModel_class_() isInstance:rightValue]) {
            if (operator_ != FreemarkerCoreEvalUtil_CMP_OP_EQUALS && operator_ != FreemarkerCoreEvalUtil_CMP_OP_NOT_EQUALS) {
              @throw new_FreemarkerCore_MiscTemplateException_initWithFreemarkerCoreExpression_withFreemarkerCoreEnvironment_withNSObjectArray_(defaultBlamed, env, [IOSObjectArray newArrayWithObjects:(id[]){
#line 282
                @"Can't use operator \"", FreemarkerCoreEvalUtil_cmpOpToStringWithInt_withNSString_(operator_, operatorString), @"\" on boolean values." } count:3 type:NSObject_class_()]);
              }
              jboolean leftBool = [((id<FreemarkerTemplateTemplateBooleanModel>) nil_chk(((id<FreemarkerTemplateTemplateBooleanModel>) check_protocol_cast(leftValue, @protocol(FreemarkerTemplateTemplateBooleanModel))))) getAsBoolean];
              jboolean rightBool = [((id<FreemarkerTemplateTemplateBooleanModel>) nil_chk(((id<FreemarkerTemplateTemplateBooleanModel>) check_protocol_cast(rightValue, @protocol(FreemarkerTemplateTemplateBooleanModel))))) getAsBoolean];
              cmpResult = (leftBool ? 1 : 0) - (rightBool ? 1 : 0);
            }
            else
#line 287
            if ([((FreemarkerCoreEnvironment *) nil_chk(env)) isClassicCompatible]) {
              NSString *leftSting = [((FreemarkerCoreExpression *) nil_chk(leftExp)) evalAndCoerceToStringWithFreemarkerCoreEnvironment:env];
              NSString *rightString = [((FreemarkerCoreExpression *) nil_chk(rightExp)) evalAndCoerceToStringWithFreemarkerCoreEnvironment:env];
              cmpResult = [((JavaTextCollator *) nil_chk([env getCollator])) compareWithNSString:leftSting withNSString:rightString];
            }
            else {
              
#line 292
              if (typeMismatchMeansNotEqual) {
                if (operator_ == FreemarkerCoreEvalUtil_CMP_OP_EQUALS) {
                  return NO;
                }
                else
#line 295
                if (operator_ == FreemarkerCoreEvalUtil_CMP_OP_NOT_EQUALS) {
                  return YES;
                }
              }
              
#line 300
              @throw new_FreemarkerCore_MiscTemplateException_initWithFreemarkerCoreExpression_withFreemarkerCoreEnvironment_withNSObjectArray_(defaultBlamed, env, [IOSObjectArray newArrayWithObjects:(id[]){
#line 301
                @"Can't compare values of these types. ",
#line 302
                @"Allowed comparisons are between two numbers, two strings, two dates, or two booleans.\n",
#line 303
                @"Left hand operand ",
#line 304
                (quoteOperandsInErrors && leftExp != nil ? [IOSObjectArray newArrayWithObjects:(id[]){
#line 305
                  @"(", new_FreemarkerCore_DelayedGetCanonicalForm_initWithFreemarkerCoreTemplateObject_(leftExp), @") value " } count:3 type:NSObject_class_()] :
#line 306
                  @""),
#line 307
                  @"is ", new_FreemarkerCore_DelayedAOrAn_initWithId_(new_FreemarkerCore_DelayedFTLTypeDescription_initWithFreemarkerTemplateTemplateModel_(leftValue)), @".\n",
#line 308
                  @"Right hand operand ",
#line 309
                  (quoteOperandsInErrors && rightExp != nil ? [IOSObjectArray newArrayWithObjects:(id[]){
#line 310
                    @"(", new_FreemarkerCore_DelayedGetCanonicalForm_initWithFreemarkerCoreTemplateObject_(rightExp), @") value " } count:3 type:NSObject_class_()] :
#line 311
                    @""),
#line 312
                    @"is ", new_FreemarkerCore_DelayedAOrAn_initWithId_(new_FreemarkerCore_DelayedFTLTypeDescription_initWithFreemarkerTemplateTemplateModel_(rightValue)),
#line 313
                    @"." } count:12 type:NSObject_class_()]);
                  }
                  
#line 316
                  switch (operator_) {
                    case FreemarkerCoreEvalUtil_CMP_OP_EQUALS:
                    
#line 317
                    return cmpResult == 0;
                    case FreemarkerCoreEvalUtil_CMP_OP_NOT_EQUALS:
                    
#line 318
                    return cmpResult != 0;
                    case FreemarkerCoreEvalUtil_CMP_OP_LESS_THAN:
                    
#line 319
                    return cmpResult < 0;
                    case FreemarkerCoreEvalUtil_CMP_OP_GREATER_THAN:
                    
#line 320
                    return cmpResult > 0;
                    case FreemarkerCoreEvalUtil_CMP_OP_LESS_THAN_EQUALS:
                    
#line 321
                    return cmpResult <= 0;
                    case FreemarkerCoreEvalUtil_CMP_OP_GREATER_THAN_EQUALS:
                    
#line 322
                    return cmpResult >= 0;
                    default:
                    
#line 323
                    @throw new_FreemarkerCoreBugException_initWithNSString_(JreStrcat("$I", @"Unsupported comparator operator code: ", operator_));
                  }
                }


#line 327
NSString *FreemarkerCoreEvalUtil_cmpOpToStringWithInt_withNSString_(jint operator_, NSString *operatorString) {
  FreemarkerCoreEvalUtil_initialize();
  
#line 328
  if (operatorString != nil) {
    return operatorString;
  }
  else {
    
#line 331
    switch (operator_) {
      case FreemarkerCoreEvalUtil_CMP_OP_EQUALS:
      
#line 332
      return @"equals";
      case FreemarkerCoreEvalUtil_CMP_OP_NOT_EQUALS:
      
#line 333
      return @"not-equals";
      case FreemarkerCoreEvalUtil_CMP_OP_LESS_THAN:
      
#line 334
      return @"less-than";
      case FreemarkerCoreEvalUtil_CMP_OP_GREATER_THAN:
      
#line 335
      return @"greater-than";
      case FreemarkerCoreEvalUtil_CMP_OP_LESS_THAN_EQUALS:
      
#line 336
      return @"less-than-equals";
      case FreemarkerCoreEvalUtil_CMP_OP_GREATER_THAN_EQUALS:
      
#line 337
      return @"greater-than-equals";
      default:
      
#line 338
      return @"???";
    }
  }
}


#line 343
NSString *FreemarkerCoreEvalUtil_coerceModelToStringWithFreemarkerTemplateTemplateModel_withFreemarkerCoreExpression_withNSString_withFreemarkerCoreEnvironment_(id<FreemarkerTemplateTemplateModel> tm, FreemarkerCoreExpression *exp, NSString *seqHint, FreemarkerCoreEnvironment *env) {
  FreemarkerCoreEvalUtil_initialize();
  
#line 344
  if ([FreemarkerTemplateTemplateNumberModel_class_() isInstance:tm]) {
    return [((FreemarkerCoreEnvironment *) nil_chk(env)) formatNumberWithNSNumber:FreemarkerCoreEvalUtil_modelToNumberWithFreemarkerTemplateTemplateNumberModel_withFreemarkerCoreExpression_((id<FreemarkerTemplateTemplateNumberModel>) check_protocol_cast(tm, @protocol(FreemarkerTemplateTemplateNumberModel)), exp)];
  }
  else
#line 346
  if ([FreemarkerTemplateTemplateDateModel_class_() isInstance:tm]) {
    return [((FreemarkerCoreEnvironment *) nil_chk(env)) formatDateWithFreemarkerTemplateTemplateDateModel:(id<FreemarkerTemplateTemplateDateModel>) check_protocol_cast(tm, @protocol(FreemarkerTemplateTemplateDateModel)) withFreemarkerCoreExpression:exp];
  }
  else
#line 348
  if ([FreemarkerTemplateTemplateScalarModel_class_() isInstance:tm]) {
    return FreemarkerCoreEvalUtil_modelToStringWithFreemarkerTemplateTemplateScalarModel_withFreemarkerCoreExpression_withFreemarkerCoreEnvironment_((id<FreemarkerTemplateTemplateScalarModel>) check_protocol_cast(tm, @protocol(FreemarkerTemplateTemplateScalarModel)), exp, env);
  }
  else
#line 350
  if (tm == nil) {
    if ([((FreemarkerCoreEnvironment *) nil_chk(env)) isClassicCompatible]) {
      return @"";
    }
    else {
      
#line 354
      if (exp != nil) {
        @throw FreemarkerCoreInvalidReferenceException_getInstanceWithFreemarkerCoreExpression_withFreemarkerCoreEnvironment_(exp, env);
      }
      else {
        
#line 357
        @throw new_FreemarkerCoreInvalidReferenceException_initWithNSString_withFreemarkerCoreEnvironment_(
#line 358
        @"Null/missing value (no more informatoin avilable)",
#line 359
        env);
      }
    }
  }
  else
#line 362
  if ([FreemarkerTemplateTemplateBooleanModel_class_() isInstance:tm]) {
    
#line 366
    jboolean booleanValue = [((id<FreemarkerTemplateTemplateBooleanModel>) check_protocol_cast(tm, @protocol(FreemarkerTemplateTemplateBooleanModel))) getAsBoolean];
    jint compatMode = [((FreemarkerCoreEnvironment *) nil_chk(env)) getClassicCompatibleAsInt];
    if (compatMode == 0) {
      return [env formatBooleanWithBoolean:booleanValue withBoolean:NO];
    }
    else {
      
#line 371
      if (compatMode == 1) {
        return booleanValue ? FreemarkerCoreMiscUtil_get_C_TRUE_() : @"";
      }
      else
#line 373
      if (compatMode == 2) {
        if ([tm isKindOfClass:[FreemarkerExtBeansBeanModel class]]) {
          
#line 376
          return FreemarkerExtBeans_BeansAPI_getAsClassicCompatibleStringWithFreemarkerExtBeansBeanModel_((FreemarkerExtBeansBeanModel *) check_class_cast(tm, [FreemarkerExtBeansBeanModel class]));
        }
        else {
          
#line 378
          return booleanValue ? FreemarkerCoreMiscUtil_get_C_TRUE_() : @"";
        }
      }
      else {
        
#line 381
        @throw new_FreemarkerCoreBugException_initWithNSString_(JreStrcat("$I", @"Unsupported classic_compatible variation: ", compatMode));
      }
    }
  }
  else {
    
#line 385
    if ([((FreemarkerCoreEnvironment *) nil_chk(env)) isClassicCompatible] && [tm isKindOfClass:[FreemarkerExtBeansBeanModel class]]) {
      return FreemarkerExtBeans_BeansAPI_getAsClassicCompatibleStringWithFreemarkerExtBeansBeanModel_((FreemarkerExtBeansBeanModel *) check_class_cast(tm, [FreemarkerExtBeansBeanModel class]));
    }
    
#line 387
    if (seqHint != nil && ([FreemarkerTemplateTemplateSequenceModel_class_() isInstance:tm] || [FreemarkerTemplateTemplateCollectionModel_class_() isInstance:tm])) {
      @throw new_FreemarkerCoreNonStringException_initWithFreemarkerCoreExpression_withFreemarkerTemplateTemplateModel_withNSString_withFreemarkerCoreEnvironment_(exp, tm, seqHint, env);
    }
    else {
      
#line 390
      @throw new_FreemarkerCoreNonStringException_initWithFreemarkerCoreExpression_withFreemarkerTemplateTemplateModel_withFreemarkerCoreEnvironment_(exp, tm, env);
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreEvalUtil)
