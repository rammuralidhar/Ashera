//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/BodyInstruction.java
//


#include "BodyInstruction.h"
#include "Environment.h"
#include "Expression.h"
#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "Macro.h"
#include "ParameterRole.h"
#include "TemplateElement.h"
#include "TemplateException.h"
#include "TemplateModel.h"
#include "TemplateModelException.h"
#include "java/io/IOException.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/StringBuffer.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/List.h"

#line 0 "/Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/BodyInstruction.java"

@interface FreemarkerCoreBodyInstruction () {
 @public
  id<JavaUtilList> bodyParameters_;
}

- (void)checkIndexWithInt:(jint)idx;

@end

J2OBJC_FIELD_SETTER(FreemarkerCoreBodyInstruction, bodyParameters_, id<JavaUtilList>)

__attribute__((unused)) static void FreemarkerCoreBodyInstruction_checkIndexWithInt_(FreemarkerCoreBodyInstruction *self, jint idx);


#line 31
@implementation FreemarkerCoreBodyInstruction


#line 37
- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)bodyParameters {
  FreemarkerCoreBodyInstruction_initWithJavaUtilList_(self, bodyParameters);
  return self;
}


#line 41
- (id<JavaUtilList>)getBodyParameters {
  return bodyParameters_;
}


#line 54
- (void)acceptWithFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env {
  FreemarkerCoreBodyInstruction_Context *bodyContext = new_FreemarkerCoreBodyInstruction_Context_initWithFreemarkerCoreBodyInstruction_withFreemarkerCoreEnvironment_(self, env);
  [((FreemarkerCoreEnvironment *) nil_chk(env)) invokeNestedContentWithFreemarkerCoreBodyInstruction_Context:bodyContext];
}

- (NSString *)dumpWithBoolean:(jboolean)canonical {
  JavaLangStringBuffer *sb = new_JavaLangStringBuffer_init();
  if (canonical) (void) [sb appendWithChar:'<'];
  (void) [sb appendWithNSString:[self getNodeTypeSymbol]];
  if (bodyParameters_ != nil) {
    for (jint i = 0; i < [bodyParameters_ size]; i++) {
      (void) [sb appendWithChar:' '];
      (void) [sb appendWithNSString:[((FreemarkerCoreExpression *) nil_chk(((FreemarkerCoreExpression *) check_class_cast([bodyParameters_ getWithInt:i], [FreemarkerCoreExpression class])))) getCanonicalForm]];
    }
  }
  if (canonical) (void) [sb appendWithChar:'>'];
  return [sb description];
}

- (NSString *)getNodeTypeSymbol {
  return @"#nested";
}

- (jint)getParameterCount {
  return bodyParameters_ != nil ? [bodyParameters_ size] : 0;
}

- (id)getParameterValueWithInt:(jint)idx {
  FreemarkerCoreBodyInstruction_checkIndexWithInt_(self, idx);
  return [((id<JavaUtilList>) nil_chk(bodyParameters_)) getWithInt:idx];
}

- (FreemarkerCoreParameterRole *)getParameterRoleWithInt:(jint)idx {
  FreemarkerCoreBodyInstruction_checkIndexWithInt_(self, idx);
  return FreemarkerCoreParameterRole_get_PASSED_VALUE_();
}

- (void)checkIndexWithInt:(jint)idx {
  FreemarkerCoreBodyInstruction_checkIndexWithInt_(self, idx);
}


#line 139
- (jboolean)isNestedBlockRepeater {
  return NO;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaUtilList:", "BodyInstruction", NULL, 0x0, NULL, NULL },
    { "getBodyParameters", NULL, "Ljava.util.List;", 0x0, NULL, NULL },
    { "acceptWithFreemarkerCoreEnvironment:", "accept", "V", 0x0, "Ljava.io.IOException;Lfreemarker.template.TemplateException;", NULL },
    { "dumpWithBoolean:", "dump", "Ljava.lang.String;", 0x4, NULL, NULL },
    { "getNodeTypeSymbol", NULL, "Ljava.lang.String;", 0x0, NULL, NULL },
    { "getParameterCount", NULL, "I", 0x0, NULL, NULL },
    { "getParameterValueWithInt:", "getParameterValue", "Ljava.lang.Object;", 0x0, NULL, NULL },
    { "getParameterRoleWithInt:", "getParameterRole", "Lfreemarker.core.ParameterRole;", 0x0, NULL, NULL },
    { "checkIndexWithInt:", "checkIndex", "V", 0x2, NULL, NULL },
    { "isNestedBlockRepeater", NULL, "Z", 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "bodyParameters_", NULL, 0x2, "Ljava.util.List;", NULL, NULL,  },
  };
  static const char *inner_classes[] = {"Lfreemarker.core.BodyInstruction$Context;"};
  static const J2ObjcClassInfo _FreemarkerCoreBodyInstruction = { 2, "BodyInstruction", "freemarker.core", NULL, 0x10, 10, methods, 1, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_FreemarkerCoreBodyInstruction;
}

@end


#line 37
void FreemarkerCoreBodyInstruction_initWithJavaUtilList_(FreemarkerCoreBodyInstruction *self, id<JavaUtilList> bodyParameters) {
  (void) FreemarkerCoreTemplateElement_init(self);
  
#line 38
  self->bodyParameters_ = bodyParameters;
}


#line 37
FreemarkerCoreBodyInstruction *new_FreemarkerCoreBodyInstruction_initWithJavaUtilList_(id<JavaUtilList> bodyParameters) {
  FreemarkerCoreBodyInstruction *self = [FreemarkerCoreBodyInstruction alloc];
  FreemarkerCoreBodyInstruction_initWithJavaUtilList_(self, bodyParameters);
  return self;
}


#line 91
void FreemarkerCoreBodyInstruction_checkIndexWithInt_(FreemarkerCoreBodyInstruction *self, jint idx) {
  if (self->bodyParameters_ == nil || idx >= [self->bodyParameters_ size]) {
    @throw new_JavaLangIndexOutOfBoundsException_init();
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreBodyInstruction)


#line 107
@implementation FreemarkerCoreBodyInstruction_Context


#line 111
- (instancetype)initWithFreemarkerCoreBodyInstruction:(FreemarkerCoreBodyInstruction *)outer$
                        withFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env {
  FreemarkerCoreBodyInstruction_Context_initWithFreemarkerCoreBodyInstruction_withFreemarkerCoreEnvironment_(self, outer$, env);
  return self;
}


#line 129
- (id<FreemarkerTemplateTemplateModel>)getLocalVariableWithNSString:(NSString *)name {
  return bodyVars_ == nil ? nil : [bodyVars_ getWithNSString:name];
}

- (id<JavaUtilCollection>)getLocalVariableNames {
  id<JavaUtilList> bodyParameterNames = ((FreemarkerCoreMacro_Context *) nil_chk(invokingMacroContext_))->nestedContentParameterNames_;
  return bodyParameterNames == nil ? JavaUtilCollections_get_EMPTY_LIST_() : bodyParameterNames;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithFreemarkerCoreBodyInstruction:withFreemarkerCoreEnvironment:", "Context", NULL, 0x0, NULL, NULL },
    { "getLocalVariableWithNSString:", "getLocalVariable", "Lfreemarker.template.TemplateModel;", 0x1, "Lfreemarker.template.TemplateModelException;", NULL },
    { "getLocalVariableNames", NULL, "Ljava.util.Collection;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "invokingMacroContext_", NULL, 0x0, "Lfreemarker.core.Macro$Context;", NULL, NULL,  },
    { "bodyVars_", NULL, 0x0, "Lfreemarker.core.Environment$Namespace;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerCoreBodyInstruction_Context = { 2, "Context", "freemarker.core", "BodyInstruction", 0x0, 3, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerCoreBodyInstruction_Context;
}

@end


#line 111
void FreemarkerCoreBodyInstruction_Context_initWithFreemarkerCoreBodyInstruction_withFreemarkerCoreEnvironment_(FreemarkerCoreBodyInstruction_Context *self, FreemarkerCoreBodyInstruction *outer$, FreemarkerCoreEnvironment *env) {
  (void) NSObject_init(self);
  
#line 112
  self->invokingMacroContext_ = [((FreemarkerCoreEnvironment *) nil_chk(env)) getCurrentMacroContext];
  id<JavaUtilList> bodyParameterNames = ((FreemarkerCoreMacro_Context *) nil_chk(self->invokingMacroContext_))->nestedContentParameterNames_;
  if (outer$->bodyParameters_ != nil) {
    for (jint i = 0; i < [outer$->bodyParameters_ size]; i++) {
      FreemarkerCoreExpression *exp = (FreemarkerCoreExpression *) check_class_cast([outer$->bodyParameters_ getWithInt:i], [FreemarkerCoreExpression class]);
      id<FreemarkerTemplateTemplateModel> tm = [((FreemarkerCoreExpression *) nil_chk(exp)) evalWithFreemarkerCoreEnvironment:env];
      if (bodyParameterNames != nil && i < [bodyParameterNames size]) {
        NSString *bodyParameterName = (NSString *) check_class_cast([bodyParameterNames getWithInt:i], [NSString class]);
        if (self->bodyVars_ == nil) {
          self->bodyVars_ = new_FreemarkerCoreEnvironment_Namespace_initWithFreemarkerCoreEnvironment_(env);
        }
        [((FreemarkerCoreEnvironment_Namespace *) nil_chk(self->bodyVars_)) putWithNSString:bodyParameterName withId:tm];
      }
    }
  }
}


#line 111
FreemarkerCoreBodyInstruction_Context *new_FreemarkerCoreBodyInstruction_Context_initWithFreemarkerCoreBodyInstruction_withFreemarkerCoreEnvironment_(FreemarkerCoreBodyInstruction *outer$, FreemarkerCoreEnvironment *env) {
  FreemarkerCoreBodyInstruction_Context *self = [FreemarkerCoreBodyInstruction_Context alloc];
  FreemarkerCoreBodyInstruction_Context_initWithFreemarkerCoreBodyInstruction_withFreemarkerCoreEnvironment_(self, outer$, env);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreBodyInstruction_Context)
