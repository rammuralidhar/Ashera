//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/Configurable.java
//


#include "ArithmeticEngine.h"
#include "BeansWrapper.h"
#include "Configurable.h"
#include "Configuration.h"
#include "CustomAttribute.h"
#include "Environment.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "MiscUtil.h"
#include "NullArgumentException.h"
#include "ObjectWrapper.h"
#include "OptInTemplateClassResolver.h"
#include "ParseException.h"
#include "StringUtil.h"
#include "TemplateClassResolver.h"
#include "TemplateException.h"
#include "TemplateExceptionHandler.h"
#include "Version.h"
#include "_DelayedJQuote.h"
#include "_ErrorDescriptionBuilder.h"
#include "_MiscTemplateException.h"
#include "_ObjectBuilderSettingEvaluator.h"
#include "_SettingEvaluationEnvironment.h"
#include "_SortedArraySet.h"
#include "_TemplateAPI.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/lang/Boolean.h"
#include "java/lang/Character.h"
#include "java/lang/CloneNotSupportedException.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/Throwable.h"
#include "java/lang/reflect/Field.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/LinkedList.h"
#include "java/util/List.h"
#include "java/util/Locale.h"
#include "java/util/Map.h"
#include "java/util/Properties.h"
#include "java/util/Set.h"
#include "java/util/TimeZone.h"

#line 0 "/Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/Configurable.java"

@interface FreemarkerCoreConfigurable () {
 @public
  FreemarkerCoreConfigurable *parent_;
  JavaUtilProperties *properties_;
  JavaUtilHashMap *customAttributes_;
  JavaUtilLocale *locale_;
  NSString *numberFormat_;
  NSString *timeFormat_;
  NSString *dateFormat_;
  NSString *dateTimeFormat_;
  JavaUtilTimeZone *timeZone_;
  JavaUtilTimeZone *sqlDataAndTimeTimeZone_;
  jboolean sqlDataAndTimeTimeZoneSet_;
  NSString *booleanFormat_;
  NSString *trueStringValue_;
  NSString *falseStringValue_;
  JavaLangInteger *classicCompatible_;
  id<FreemarkerTemplateTemplateExceptionHandler> templateExceptionHandler_;
  FreemarkerCoreArithmeticEngine *arithmeticEngine_;
  id<FreemarkerTemplateObjectWrapper> objectWrapper_;
  NSString *outputEncoding_;
  jboolean outputEncodingSet_;
  NSString *urlEscapingCharset_;
  jboolean urlEscapingCharsetSet_;
  JavaLangBoolean *autoFlush_;
  id<FreemarkerCoreTemplateClassResolver> newBuiltinClassResolver_;
  JavaLangBoolean *showErrorTips_;
  JavaLangBoolean *apiBuiltinEnabled_;
  JavaLangBoolean *logTemplateExceptions_;
}

- (NSString *)classicCompatibilityIntToStringWithJavaLangInteger:(JavaLangInteger *)i;

- (FreemarkerCore_ErrorDescriptionBuilder *)getNullBooleanFormatErrorDescription;

- (JavaUtilTimeZone *)parseTimeZoneSettingValueWithNSString:(NSString *)value;

@end

J2OBJC_FIELD_SETTER(FreemarkerCoreConfigurable, parent_, FreemarkerCoreConfigurable *)
J2OBJC_FIELD_SETTER(FreemarkerCoreConfigurable, properties_, JavaUtilProperties *)
J2OBJC_FIELD_SETTER(FreemarkerCoreConfigurable, customAttributes_, JavaUtilHashMap *)
J2OBJC_FIELD_SETTER(FreemarkerCoreConfigurable, locale_, JavaUtilLocale *)
J2OBJC_FIELD_SETTER(FreemarkerCoreConfigurable, numberFormat_, NSString *)
J2OBJC_FIELD_SETTER(FreemarkerCoreConfigurable, timeFormat_, NSString *)
J2OBJC_FIELD_SETTER(FreemarkerCoreConfigurable, dateFormat_, NSString *)
J2OBJC_FIELD_SETTER(FreemarkerCoreConfigurable, dateTimeFormat_, NSString *)
J2OBJC_FIELD_SETTER(FreemarkerCoreConfigurable, timeZone_, JavaUtilTimeZone *)
J2OBJC_FIELD_SETTER(FreemarkerCoreConfigurable, sqlDataAndTimeTimeZone_, JavaUtilTimeZone *)
J2OBJC_FIELD_SETTER(FreemarkerCoreConfigurable, booleanFormat_, NSString *)
J2OBJC_FIELD_SETTER(FreemarkerCoreConfigurable, trueStringValue_, NSString *)
J2OBJC_FIELD_SETTER(FreemarkerCoreConfigurable, falseStringValue_, NSString *)
J2OBJC_FIELD_SETTER(FreemarkerCoreConfigurable, classicCompatible_, JavaLangInteger *)
J2OBJC_FIELD_SETTER(FreemarkerCoreConfigurable, templateExceptionHandler_, id<FreemarkerTemplateTemplateExceptionHandler>)
J2OBJC_FIELD_SETTER(FreemarkerCoreConfigurable, arithmeticEngine_, FreemarkerCoreArithmeticEngine *)
J2OBJC_FIELD_SETTER(FreemarkerCoreConfigurable, objectWrapper_, id<FreemarkerTemplateObjectWrapper>)
J2OBJC_FIELD_SETTER(FreemarkerCoreConfigurable, outputEncoding_, NSString *)
J2OBJC_FIELD_SETTER(FreemarkerCoreConfigurable, urlEscapingCharset_, NSString *)
J2OBJC_FIELD_SETTER(FreemarkerCoreConfigurable, autoFlush_, JavaLangBoolean *)
J2OBJC_FIELD_SETTER(FreemarkerCoreConfigurable, newBuiltinClassResolver_, id<FreemarkerCoreTemplateClassResolver>)
J2OBJC_FIELD_SETTER(FreemarkerCoreConfigurable, showErrorTips_, JavaLangBoolean *)
J2OBJC_FIELD_SETTER(FreemarkerCoreConfigurable, apiBuiltinEnabled_, JavaLangBoolean *)
J2OBJC_FIELD_SETTER(FreemarkerCoreConfigurable, logTemplateExceptions_, JavaLangBoolean *)

static NSString *FreemarkerCoreConfigurable_DEFAULT_ = 
#line 70
@"default";
J2OBJC_STATIC_FIELD_GETTER(FreemarkerCoreConfigurable, DEFAULT_, NSString *)

static NSString *FreemarkerCoreConfigurable_DEFAULT_2_3_0_ = 
#line 71
@"default_2_3_0";
J2OBJC_STATIC_FIELD_GETTER(FreemarkerCoreConfigurable, DEFAULT_2_3_0_, NSString *)

static NSString *FreemarkerCoreConfigurable_JVM_DEFAULT_ = 
#line 72
@"JVM default";
J2OBJC_STATIC_FIELD_GETTER(FreemarkerCoreConfigurable, JVM_DEFAULT_, NSString *)

static IOSObjectArray *FreemarkerCoreConfigurable_SETTING_NAMES_SNAKE_CASE_;
J2OBJC_STATIC_FIELD_GETTER(FreemarkerCoreConfigurable, SETTING_NAMES_SNAKE_CASE_, IOSObjectArray *)

static IOSObjectArray *FreemarkerCoreConfigurable_SETTING_NAMES_CAMEL_CASE_;
J2OBJC_STATIC_FIELD_GETTER(FreemarkerCoreConfigurable, SETTING_NAMES_CAMEL_CASE_, IOSObjectArray *)

static NSString *FreemarkerCoreConfigurable_ALLOWED_CLASSES_ = 
#line 1161
@"allowed_classes";
J2OBJC_STATIC_FIELD_GETTER(FreemarkerCoreConfigurable, ALLOWED_CLASSES_, NSString *)

static NSString *FreemarkerCoreConfigurable_TRUSTED_TEMPLATES_ = 
#line 1162
@"trusted_templates";
J2OBJC_STATIC_FIELD_GETTER(FreemarkerCoreConfigurable, TRUSTED_TEMPLATES_, NSString *)

__attribute__((unused)) static NSString *FreemarkerCoreConfigurable_classicCompatibilityIntToStringWithJavaLangInteger_(FreemarkerCoreConfigurable *self, JavaLangInteger *i);

__attribute__((unused)) static FreemarkerCore_ErrorDescriptionBuilder *FreemarkerCoreConfigurable_getNullBooleanFormatErrorDescription(FreemarkerCoreConfigurable *self);

__attribute__((unused)) static JavaUtilTimeZone *FreemarkerCoreConfigurable_parseTimeZoneSettingValueWithNSString_(FreemarkerCoreConfigurable *self, NSString *value);

@interface FreemarkerCoreConfigurable_UnknownSettingException ()

- (instancetype)initWithFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env
                                     withNSString:(NSString *)name
                                     withNSString:(NSString *)correctedName;

@end

__attribute__((unused)) static void FreemarkerCoreConfigurable_UnknownSettingException_initWithFreemarkerCoreEnvironment_withNSString_withNSString_(FreemarkerCoreConfigurable_UnknownSettingException *self, FreemarkerCoreEnvironment *env, NSString *name, NSString *correctedName);

__attribute__((unused)) static FreemarkerCoreConfigurable_UnknownSettingException *new_FreemarkerCoreConfigurable_UnknownSettingException_initWithFreemarkerCoreEnvironment_withNSString_withNSString_(FreemarkerCoreEnvironment *env, NSString *name, NSString *correctedName) NS_RETURNS_RETAINED;

@interface FreemarkerCoreConfigurable_SettingValueAssignmentException ()

- (instancetype)initWithFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env
                                     withNSString:(NSString *)name
                                     withNSString:(NSString *)value
                            withJavaLangThrowable:(JavaLangThrowable *)cause;

@end

__attribute__((unused)) static void FreemarkerCoreConfigurable_SettingValueAssignmentException_initWithFreemarkerCoreEnvironment_withNSString_withNSString_withJavaLangThrowable_(FreemarkerCoreConfigurable_SettingValueAssignmentException *self, FreemarkerCoreEnvironment *env, NSString *name, NSString *value, JavaLangThrowable *cause);

__attribute__((unused)) static FreemarkerCoreConfigurable_SettingValueAssignmentException *new_FreemarkerCoreConfigurable_SettingValueAssignmentException_initWithFreemarkerCoreEnvironment_withNSString_withNSString_withJavaLangThrowable_(FreemarkerCoreEnvironment *env, NSString *name, NSString *value, JavaLangThrowable *cause) NS_RETURNS_RETAINED;

@interface FreemarkerCoreConfigurable_KeyValuePair : NSObject {
 @public
  id key_;
  id value_;
}

- (instancetype)initWithId:(id)key
                    withId:(id)value;

- (id)getKey;

- (id)getValue;

@end

J2OBJC_EMPTY_STATIC_INIT(FreemarkerCoreConfigurable_KeyValuePair)

J2OBJC_FIELD_SETTER(FreemarkerCoreConfigurable_KeyValuePair, key_, id)
J2OBJC_FIELD_SETTER(FreemarkerCoreConfigurable_KeyValuePair, value_, id)

__attribute__((unused)) static void FreemarkerCoreConfigurable_KeyValuePair_initWithId_withId_(FreemarkerCoreConfigurable_KeyValuePair *self, id key, id value);

__attribute__((unused)) static FreemarkerCoreConfigurable_KeyValuePair *new_FreemarkerCoreConfigurable_KeyValuePair_initWithId_withId_(id key, id value) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerCoreConfigurable_KeyValuePair)

/**
 @brief Helper class for parsing setting values given with string.
 */
@interface FreemarkerCoreConfigurable_SettingStringParser : NSObject {
 @public
  NSString *text_;
  jint p_;
  jint ln_;
}

- (instancetype)initWithNSString:(NSString *)text;

- (JavaUtilArrayList *)parseAsSegmentedList;

- (JavaUtilArrayList *)parseAsList;

- (JavaUtilHashMap *)parseAsImportList;

- (NSString *)fetchStringValue;

- (NSString *)fetchKeyword;

- (jchar)skipWS;

- (NSString *)fetchWord;

@end

J2OBJC_EMPTY_STATIC_INIT(FreemarkerCoreConfigurable_SettingStringParser)

J2OBJC_FIELD_SETTER(FreemarkerCoreConfigurable_SettingStringParser, text_, NSString *)

__attribute__((unused)) static void FreemarkerCoreConfigurable_SettingStringParser_initWithNSString_(FreemarkerCoreConfigurable_SettingStringParser *self, NSString *text);

__attribute__((unused)) static FreemarkerCoreConfigurable_SettingStringParser *new_FreemarkerCoreConfigurable_SettingStringParser_initWithNSString_(NSString *text) NS_RETURNS_RETAINED;

__attribute__((unused)) static NSString *FreemarkerCoreConfigurable_SettingStringParser_fetchWord(FreemarkerCoreConfigurable_SettingStringParser *self);

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerCoreConfigurable_SettingStringParser)

J2OBJC_INITIALIZED_DEFN(FreemarkerCoreConfigurable)

NSString *FreemarkerCoreConfigurable_C_TRUE_FALSE_ = 
#line 68
@"true,false";
NSString *FreemarkerCoreConfigurable_LOCALE_KEY_SNAKE_CASE_ = 
#line 75
@"locale";
NSString *FreemarkerCoreConfigurable_LOCALE_KEY_CAMEL_CASE_ = 
#line 77
@"locale";
NSString *FreemarkerCoreConfigurable_LOCALE_KEY_ = @"locale";
NSString *FreemarkerCoreConfigurable_NUMBER_FORMAT_KEY_SNAKE_CASE_ = 
#line 82
@"number_format";
NSString *FreemarkerCoreConfigurable_NUMBER_FORMAT_KEY_CAMEL_CASE_ = 
#line 84
@"numberFormat";
NSString *FreemarkerCoreConfigurable_NUMBER_FORMAT_KEY_ = @"number_format";
NSString *FreemarkerCoreConfigurable_TIME_FORMAT_KEY_SNAKE_CASE_ = 
#line 89
@"time_format";
NSString *FreemarkerCoreConfigurable_TIME_FORMAT_KEY_CAMEL_CASE_ = 
#line 91
@"timeFormat";
NSString *FreemarkerCoreConfigurable_TIME_FORMAT_KEY_ = @"time_format";
NSString *FreemarkerCoreConfigurable_DATE_FORMAT_KEY_SNAKE_CASE_ = 
#line 96
@"date_format";
NSString *FreemarkerCoreConfigurable_DATE_FORMAT_KEY_CAMEL_CASE_ = 
#line 98
@"dateFormat";
NSString *FreemarkerCoreConfigurable_DATE_FORMAT_KEY_ = @"date_format";
NSString *FreemarkerCoreConfigurable_DATETIME_FORMAT_KEY_SNAKE_CASE_ = 
#line 103
@"datetime_format";
NSString *FreemarkerCoreConfigurable_DATETIME_FORMAT_KEY_CAMEL_CASE_ = 
#line 105
@"datetimeFormat";
NSString *FreemarkerCoreConfigurable_DATETIME_FORMAT_KEY_ = @"datetime_format";
NSString *FreemarkerCoreConfigurable_TIME_ZONE_KEY_SNAKE_CASE_ = 
#line 110
@"time_zone";
NSString *FreemarkerCoreConfigurable_TIME_ZONE_KEY_CAMEL_CASE_ = 
#line 112
@"timeZone";
NSString *FreemarkerCoreConfigurable_TIME_ZONE_KEY_ = @"time_zone";
NSString *FreemarkerCoreConfigurable_SQL_DATE_AND_TIME_TIME_ZONE_KEY_SNAKE_CASE_ = 
#line 117
@"sql_date_and_time_time_zone";
NSString *FreemarkerCoreConfigurable_SQL_DATE_AND_TIME_TIME_ZONE_KEY_CAMEL_CASE_ = 
#line 119
@"sqlDateAndTimeTimeZone";
NSString *FreemarkerCoreConfigurable_SQL_DATE_AND_TIME_TIME_ZONE_KEY_ = @"sql_date_and_time_time_zone";
NSString *FreemarkerCoreConfigurable_CLASSIC_COMPATIBLE_KEY_SNAKE_CASE_ = 
#line 124
@"classic_compatible";
NSString *FreemarkerCoreConfigurable_CLASSIC_COMPATIBLE_KEY_CAMEL_CASE_ = 
#line 126
@"classicCompatible";
NSString *FreemarkerCoreConfigurable_CLASSIC_COMPATIBLE_KEY_ = @"classic_compatible";
NSString *FreemarkerCoreConfigurable_TEMPLATE_EXCEPTION_HANDLER_KEY_SNAKE_CASE_ = 
#line 131
@"template_exception_handler";
NSString *FreemarkerCoreConfigurable_TEMPLATE_EXCEPTION_HANDLER_KEY_CAMEL_CASE_ = 
#line 133
@"templateExceptionHandler";
NSString *FreemarkerCoreConfigurable_TEMPLATE_EXCEPTION_HANDLER_KEY_ = @"template_exception_handler";
NSString *FreemarkerCoreConfigurable_ARITHMETIC_ENGINE_KEY_SNAKE_CASE_ = 
#line 138
@"arithmetic_engine";
NSString *FreemarkerCoreConfigurable_ARITHMETIC_ENGINE_KEY_CAMEL_CASE_ = 
#line 140
@"arithmeticEngine";
NSString *FreemarkerCoreConfigurable_ARITHMETIC_ENGINE_KEY_ = @"arithmetic_engine";
NSString *FreemarkerCoreConfigurable_OBJECT_WRAPPER_KEY_SNAKE_CASE_ = 
#line 145
@"object_wrapper";
NSString *FreemarkerCoreConfigurable_OBJECT_WRAPPER_KEY_CAMEL_CASE_ = 
#line 147
@"objectWrapper";
NSString *FreemarkerCoreConfigurable_OBJECT_WRAPPER_KEY_ = @"object_wrapper";
NSString *FreemarkerCoreConfigurable_BOOLEAN_FORMAT_KEY_SNAKE_CASE_ = 
#line 152
@"boolean_format";
NSString *FreemarkerCoreConfigurable_BOOLEAN_FORMAT_KEY_CAMEL_CASE_ = 
#line 154
@"booleanFormat";
NSString *FreemarkerCoreConfigurable_BOOLEAN_FORMAT_KEY_ = @"boolean_format";
NSString *FreemarkerCoreConfigurable_OUTPUT_ENCODING_KEY_SNAKE_CASE_ = 
#line 159
@"output_encoding";
NSString *FreemarkerCoreConfigurable_OUTPUT_ENCODING_KEY_CAMEL_CASE_ = 
#line 161
@"outputEncoding";
NSString *FreemarkerCoreConfigurable_OUTPUT_ENCODING_KEY_ = @"output_encoding";
NSString *FreemarkerCoreConfigurable_URL_ESCAPING_CHARSET_KEY_SNAKE_CASE_ = 
#line 166
@"url_escaping_charset";
NSString *FreemarkerCoreConfigurable_URL_ESCAPING_CHARSET_KEY_CAMEL_CASE_ = 
#line 168
@"urlEscapingCharset";
NSString *FreemarkerCoreConfigurable_URL_ESCAPING_CHARSET_KEY_ = @"url_escaping_charset";
NSString *FreemarkerCoreConfigurable_STRICT_BEAN_MODELS_KEY_SNAKE_CASE_ = 
#line 173
@"strict_bean_models";
NSString *FreemarkerCoreConfigurable_STRICT_BEAN_MODELS_KEY_CAMEL_CASE_ = 
#line 175
@"strictBeanModels";
NSString *FreemarkerCoreConfigurable_STRICT_BEAN_MODELS_KEY_ = @"strict_bean_models";
NSString *FreemarkerCoreConfigurable_AUTO_FLUSH_KEY_SNAKE_CASE_ = 
#line 180
@"auto_flush";
NSString *FreemarkerCoreConfigurable_AUTO_FLUSH_KEY_CAMEL_CASE_ = 
#line 182
@"autoFlush";
NSString *FreemarkerCoreConfigurable_AUTO_FLUSH_KEY_ = @"auto_flush";
NSString *FreemarkerCoreConfigurable_NEW_BUILTIN_CLASS_RESOLVER_KEY_SNAKE_CASE_ = 
#line 187
@"new_builtin_class_resolver";
NSString *FreemarkerCoreConfigurable_NEW_BUILTIN_CLASS_RESOLVER_KEY_CAMEL_CASE_ = 
#line 189
@"newBuiltinClassResolver";
NSString *FreemarkerCoreConfigurable_NEW_BUILTIN_CLASS_RESOLVER_KEY_ = @"new_builtin_class_resolver";
NSString *FreemarkerCoreConfigurable_SHOW_ERROR_TIPS_KEY_SNAKE_CASE_ = 
#line 194
@"show_error_tips";
NSString *FreemarkerCoreConfigurable_SHOW_ERROR_TIPS_KEY_CAMEL_CASE_ = 
#line 196
@"showErrorTips";
NSString *FreemarkerCoreConfigurable_SHOW_ERROR_TIPS_KEY_ = @"show_error_tips";
NSString *FreemarkerCoreConfigurable_API_BUILTIN_ENABLED_KEY_SNAKE_CASE_ = 
#line 201
@"api_builtin_enabled";
NSString *FreemarkerCoreConfigurable_API_BUILTIN_ENABLED_KEY_CAMEL_CASE_ = 
#line 203
@"apiBuiltinEnabled";
NSString *FreemarkerCoreConfigurable_API_BUILTIN_ENABLED_KEY_ = @"api_builtin_enabled";
NSString *FreemarkerCoreConfigurable_LOG_TEMPLATE_EXCEPTIONS_KEY_SNAKE_CASE_ = 
#line 208
@"log_template_exceptions";
NSString *FreemarkerCoreConfigurable_LOG_TEMPLATE_EXCEPTIONS_KEY_CAMEL_CASE_ = 
#line 210
@"logTemplateExceptions";
NSString *FreemarkerCoreConfigurable_LOG_TEMPLATE_EXCEPTIONS_KEY_ = @"log_template_exceptions";
NSString *FreemarkerCoreConfigurable_STRICT_BEAN_MODELS_ = @"strict_bean_models";


#line 66
@implementation FreemarkerCoreConfigurable


#line 299
- (instancetype)init {
  FreemarkerCoreConfigurable_init(self);
  return self;
}


#line 308
- (instancetype)initWithFreemarkerTemplateVersion:(FreemarkerTemplateVersion *)incompatibleImprovements {
  FreemarkerCoreConfigurable_initWithFreemarkerTemplateVersion_(self, incompatibleImprovements);
  return self;
}


#line 376
- (instancetype)initWithFreemarkerCoreConfigurable:(FreemarkerCoreConfigurable *)parent {
  FreemarkerCoreConfigurable_initWithFreemarkerCoreConfigurable_(self, parent);
  return self;
}


#line 386
- (id)clone {
  FreemarkerCoreConfigurable *copy_ = (FreemarkerCoreConfigurable *) check_class_cast([super clone], [FreemarkerCoreConfigurable class]);
  ((FreemarkerCoreConfigurable *) nil_chk(copy_))->properties_ = new_JavaUtilProperties_initWithJavaUtilProperties_(properties_);
  copy_->customAttributes_ = (JavaUtilHashMap *) check_class_cast([((JavaUtilHashMap *) nil_chk(customAttributes_)) clone], [JavaUtilHashMap class]);
  return copy_;
}


#line 411
- (FreemarkerCoreConfigurable *)getParent {
  return parent_;
}


#line 420
- (void)setParentWithFreemarkerCoreConfigurable:(FreemarkerCoreConfigurable *)parent {
  self->parent_ = parent;
}


#line 428
- (void)setClassicCompatibleWithBoolean:(jboolean)classicCompatibility {
  self->classicCompatible_ = new_JavaLangInteger_initWithInt_(classicCompatibility ? 1 : 0);
  (void) [((JavaUtilProperties *) nil_chk(properties_)) setPropertyWithNSString:FreemarkerCoreConfigurable_CLASSIC_COMPATIBLE_KEY_ withNSString:FreemarkerCoreConfigurable_classicCompatibilityIntToStringWithJavaLangInteger_(self, classicCompatible_)];
}


#line 443
- (void)setClassicCompatibleAsIntWithInt:(jint)classicCompatibility {
  if (classicCompatibility < 0 || classicCompatibility > 2) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"Unsupported \"classicCompatibility\": ", classicCompatibility));
  }
  self->classicCompatible_ = new_JavaLangInteger_initWithInt_(classicCompatibility);
}

- (NSString *)classicCompatibilityIntToStringWithJavaLangInteger:(JavaLangInteger *)i {
  return FreemarkerCoreConfigurable_classicCompatibilityIntToStringWithJavaLangInteger_(self, i);
}


#line 507
- (jboolean)isClassicCompatible {
  return classicCompatible_ != nil ? [classicCompatible_ intValue] != 0 : [((FreemarkerCoreConfigurable *) nil_chk(parent_)) isClassicCompatible];
}

- (jint)getClassicCompatibleAsInt {
  return classicCompatible_ != nil ? [classicCompatible_ intValue] : [((FreemarkerCoreConfigurable *) nil_chk(parent_)) getClassicCompatibleAsInt];
}


#line 521
- (void)setLocaleWithJavaUtilLocale:(JavaUtilLocale *)locale {
  FreemarkerTemplateUtilityNullArgumentException_checkWithNSString_withId_(@"locale", locale);
  self->locale_ = locale;
  (void) [((JavaUtilProperties *) nil_chk(properties_)) setPropertyWithNSString:FreemarkerCoreConfigurable_LOCALE_KEY_ withNSString:[((JavaUtilLocale *) nil_chk(locale)) description]];
}


#line 530
- (JavaUtilTimeZone *)getTimeZone {
  return timeZone_ != nil ? timeZone_ : [((FreemarkerCoreConfigurable *) nil_chk(parent_)) getTimeZone];
}


#line 545
- (void)setTimeZoneWithJavaUtilTimeZone:(JavaUtilTimeZone *)timeZone {
  FreemarkerTemplateUtilityNullArgumentException_checkWithNSString_withId_(@"timeZone", timeZone);
  self->timeZone_ = timeZone;
  (void) [((JavaUtilProperties *) nil_chk(properties_)) setPropertyWithNSString:FreemarkerCoreConfigurable_TIME_ZONE_KEY_ withNSString:[((JavaUtilTimeZone *) nil_chk(timeZone)) getID]];
}


#line 612
- (void)setSQLDateAndTimeTimeZoneWithJavaUtilTimeZone:(JavaUtilTimeZone *)tz {
  sqlDataAndTimeTimeZone_ = tz;
  sqlDataAndTimeTimeZoneSet_ = YES;
  (void) [((JavaUtilProperties *) nil_chk(properties_)) setPropertyWithNSString:FreemarkerCoreConfigurable_SQL_DATE_AND_TIME_TIME_ZONE_KEY_ withNSString:tz != nil ? [tz getID] : @"null"];
}


#line 627
- (JavaUtilTimeZone *)getSQLDateAndTimeTimeZone {
  return sqlDataAndTimeTimeZoneSet_ ?
#line 629
  sqlDataAndTimeTimeZone_ :
#line 630
  (parent_ != nil ? [parent_ getSQLDateAndTimeTimeZone] : nil);
}


#line 637
- (JavaUtilLocale *)getLocale {
  return locale_ != nil ? locale_ : [((FreemarkerCoreConfigurable *) nil_chk(parent_)) getLocale];
}


#line 652
- (void)setNumberFormatWithNSString:(NSString *)numberFormat {
  FreemarkerTemplateUtilityNullArgumentException_checkWithNSString_withId_(@"numberFormat", numberFormat);
  self->numberFormat_ = numberFormat;
  (void) [((JavaUtilProperties *) nil_chk(properties_)) setPropertyWithNSString:FreemarkerCoreConfigurable_NUMBER_FORMAT_KEY_ withNSString:numberFormat];
}


#line 661
- (NSString *)getNumberFormat {
  return numberFormat_ != nil ? numberFormat_ : [((FreemarkerCoreConfigurable *) nil_chk(parent_)) getNumberFormat];
}


#line 677
- (void)setBooleanFormatWithNSString:(NSString *)booleanFormat {
  FreemarkerTemplateUtilityNullArgumentException_checkWithNSString_withId_(@"booleanFormat", booleanFormat);
  
#line 680
  jint commaIdx = [((NSString *) nil_chk(booleanFormat)) indexOf:','];
  if (commaIdx == -1) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Setting value must be string that contains two comma-separated values for true and false, respectively.");
  }
  
#line 687
  self->booleanFormat_ = booleanFormat;
  (void) [((JavaUtilProperties *) nil_chk(properties_)) setPropertyWithNSString:FreemarkerCoreConfigurable_BOOLEAN_FORMAT_KEY_ withNSString:booleanFormat];
  
#line 690
  if ([booleanFormat isEqual:FreemarkerCoreConfigurable_C_TRUE_FALSE_]) {
    
#line 693
    trueStringValue_ = nil;
    falseStringValue_ = nil;
  }
  else {
    
#line 696
    trueStringValue_ = [booleanFormat substring:0 endIndex:commaIdx];
    falseStringValue_ = [booleanFormat substring:commaIdx + 1];
  }
}


#line 704
- (NSString *)getBooleanFormat {
  return booleanFormat_ != nil ? booleanFormat_ : [((FreemarkerCoreConfigurable *) nil_chk(parent_)) getBooleanFormat];
}

- (NSString *)formatBooleanWithBoolean:(jboolean)value
                           withBoolean:(jboolean)fallbackToTrueFalse {
  if (value) {
    NSString *s = [self getTrueStringValue];
    if (s == nil) {
      if (fallbackToTrueFalse) {
        return FreemarkerCoreMiscUtil_get_C_TRUE_();
      }
      else {
        
#line 715
        @throw new_FreemarkerCore_MiscTemplateException_initWithFreemarkerCore_ErrorDescriptionBuilder_(FreemarkerCoreConfigurable_getNullBooleanFormatErrorDescription(self));
      }
    }
    else {
      
#line 718
      return s;
    }
  }
  else {
    
#line 721
    NSString *s = [self getFalseStringValue];
    if (s == nil) {
      if (fallbackToTrueFalse) {
        return FreemarkerCoreMiscUtil_get_C_FALSE_();
      }
      else {
        
#line 726
        @throw new_FreemarkerCore_MiscTemplateException_initWithFreemarkerCore_ErrorDescriptionBuilder_(FreemarkerCoreConfigurable_getNullBooleanFormatErrorDescription(self));
      }
    }
    else {
      
#line 729
      return s;
    }
  }
}


#line 734
- (FreemarkerCore_ErrorDescriptionBuilder *)getNullBooleanFormatErrorDescription {
  return FreemarkerCoreConfigurable_getNullBooleanFormatErrorDescription(self);
}


#line 762
- (NSString *)getTrueStringValue {
  
#line 764
  return booleanFormat_ != nil ? trueStringValue_ : (parent_ != nil ? [parent_ getTrueStringValue] : nil);
}


#line 771
- (NSString *)getFalseStringValue {
  
#line 773
  return booleanFormat_ != nil ? falseStringValue_ : (parent_ != nil ? [parent_ getFalseStringValue] : nil);
}


#line 784
- (void)setTimeFormatWithNSString:(NSString *)timeFormat {
  FreemarkerTemplateUtilityNullArgumentException_checkWithNSString_withId_(@"timeFormat", timeFormat);
  self->timeFormat_ = timeFormat;
  (void) [((JavaUtilProperties *) nil_chk(properties_)) setPropertyWithNSString:FreemarkerCoreConfigurable_TIME_FORMAT_KEY_ withNSString:timeFormat];
}


#line 793
- (NSString *)getTimeFormat {
  return timeFormat_ != nil ? timeFormat_ : [((FreemarkerCoreConfigurable *) nil_chk(parent_)) getTimeFormat];
}


#line 805
- (void)setDateFormatWithNSString:(NSString *)dateFormat {
  FreemarkerTemplateUtilityNullArgumentException_checkWithNSString_withId_(@"dateFormat", dateFormat);
  self->dateFormat_ = dateFormat;
  (void) [((JavaUtilProperties *) nil_chk(properties_)) setPropertyWithNSString:FreemarkerCoreConfigurable_DATE_FORMAT_KEY_ withNSString:dateFormat];
}


#line 814
- (NSString *)getDateFormat {
  return dateFormat_ != nil ? dateFormat_ : [((FreemarkerCoreConfigurable *) nil_chk(parent_)) getDateFormat];
}


#line 896
- (void)setDateTimeFormatWithNSString:(NSString *)dateTimeFormat {
  FreemarkerTemplateUtilityNullArgumentException_checkWithNSString_withId_(@"dateTimeFormat", dateTimeFormat);
  self->dateTimeFormat_ = dateTimeFormat;
  (void) [((JavaUtilProperties *) nil_chk(properties_)) setPropertyWithNSString:FreemarkerCoreConfigurable_DATETIME_FORMAT_KEY_ withNSString:dateTimeFormat];
}


#line 905
- (NSString *)getDateTimeFormat {
  return dateTimeFormat_ != nil ? dateTimeFormat_ : [((FreemarkerCoreConfigurable *) nil_chk(parent_)) getDateTimeFormat];
}


#line 929
- (void)setTemplateExceptionHandlerWithFreemarkerTemplateTemplateExceptionHandler:(id<FreemarkerTemplateTemplateExceptionHandler>)templateExceptionHandler {
  FreemarkerTemplateUtilityNullArgumentException_checkWithNSString_withId_(@"templateExceptionHandler", templateExceptionHandler);
  self->templateExceptionHandler_ = templateExceptionHandler;
  (void) [((JavaUtilProperties *) nil_chk(properties_)) setPropertyWithNSString:FreemarkerCoreConfigurable_TEMPLATE_EXCEPTION_HANDLER_KEY_ withNSString:[[((id<FreemarkerTemplateTemplateExceptionHandler>) nil_chk(templateExceptionHandler)) getClass] getName]];
}


#line 938
- (id<FreemarkerTemplateTemplateExceptionHandler>)getTemplateExceptionHandler {
  return templateExceptionHandler_ != nil ?
#line 940
  templateExceptionHandler_ : [((FreemarkerCoreConfigurable *) nil_chk(parent_)) getTemplateExceptionHandler];
}


#line 947
- (void)setArithmeticEngineWithFreemarkerCoreArithmeticEngine:(FreemarkerCoreArithmeticEngine *)arithmeticEngine {
  FreemarkerTemplateUtilityNullArgumentException_checkWithNSString_withId_(@"arithmeticEngine", arithmeticEngine);
  self->arithmeticEngine_ = arithmeticEngine;
  (void) [((JavaUtilProperties *) nil_chk(properties_)) setPropertyWithNSString:FreemarkerCoreConfigurable_ARITHMETIC_ENGINE_KEY_ withNSString:[[((FreemarkerCoreArithmeticEngine *) nil_chk(arithmeticEngine)) getClass] getName]];
}


#line 956
- (FreemarkerCoreArithmeticEngine *)getArithmeticEngine {
  return arithmeticEngine_ != nil ?
#line 958
  arithmeticEngine_ : [((FreemarkerCoreConfigurable *) nil_chk(parent_)) getArithmeticEngine];
}


#line 965
- (void)setObjectWrapperWithFreemarkerTemplateObjectWrapper:(id<FreemarkerTemplateObjectWrapper>)objectWrapper {
  FreemarkerTemplateUtilityNullArgumentException_checkWithNSString_withId_(@"objectWrapper", objectWrapper);
  self->objectWrapper_ = objectWrapper;
  (void) [((JavaUtilProperties *) nil_chk(properties_)) setPropertyWithNSString:FreemarkerCoreConfigurable_OBJECT_WRAPPER_KEY_ withNSString:[[((id<FreemarkerTemplateObjectWrapper>) nil_chk(objectWrapper)) getClass] getName]];
}


#line 974
- (id<FreemarkerTemplateObjectWrapper>)getObjectWrapper {
  return objectWrapper_ != nil ?
#line 976
  objectWrapper_ : [((FreemarkerCoreConfigurable *) nil_chk(parent_)) getObjectWrapper];
}


#line 987
- (void)setOutputEncodingWithNSString:(NSString *)outputEncoding {
  self->outputEncoding_ = outputEncoding;
  
#line 990
  if (outputEncoding != nil) {
    (void) [((JavaUtilProperties *) nil_chk(properties_)) setPropertyWithNSString:FreemarkerCoreConfigurable_OUTPUT_ENCODING_KEY_ withNSString:outputEncoding];
  }
  else {
    
#line 993
    (void) [((JavaUtilProperties *) nil_chk(properties_)) removeWithId:FreemarkerCoreConfigurable_OUTPUT_ENCODING_KEY_];
  }
  outputEncodingSet_ = YES;
}


#line 998
- (NSString *)getOutputEncoding {
  return outputEncodingSet_ ?
#line 1000
  outputEncoding_ :
#line 1001
  (parent_ != nil ? [parent_ getOutputEncoding] : nil);
}


#line 1010
- (void)setURLEscapingCharsetWithNSString:(NSString *)urlEscapingCharset {
  self->urlEscapingCharset_ = urlEscapingCharset;
  
#line 1013
  if (urlEscapingCharset != nil) {
    (void) [((JavaUtilProperties *) nil_chk(properties_)) setPropertyWithNSString:FreemarkerCoreConfigurable_URL_ESCAPING_CHARSET_KEY_ withNSString:urlEscapingCharset];
  }
  else {
    
#line 1016
    (void) [((JavaUtilProperties *) nil_chk(properties_)) removeWithId:FreemarkerCoreConfigurable_URL_ESCAPING_CHARSET_KEY_];
  }
  urlEscapingCharsetSet_ = YES;
}


#line 1021
- (NSString *)getURLEscapingCharset {
  return urlEscapingCharsetSet_ ?
#line 1023
  urlEscapingCharset_ :
#line 1024
  (parent_ != nil ? [parent_ getURLEscapingCharset] : nil);
}


#line 1040
- (void)setNewBuiltinClassResolverWithFreemarkerCoreTemplateClassResolver:(id<FreemarkerCoreTemplateClassResolver>)newBuiltinClassResolver {
  FreemarkerTemplateUtilityNullArgumentException_checkWithNSString_withId_(@"newBuiltinClassResolver", newBuiltinClassResolver);
  self->newBuiltinClassResolver_ = newBuiltinClassResolver;
  (void) [((JavaUtilProperties *) nil_chk(properties_)) setPropertyWithNSString:FreemarkerCoreConfigurable_NEW_BUILTIN_CLASS_RESOLVER_KEY_ withNSString:
#line 1044
  [[((id<FreemarkerCoreTemplateClassResolver>) nil_chk(newBuiltinClassResolver)) getClass] getName]];
}


#line 1053
- (id<FreemarkerCoreTemplateClassResolver>)getNewBuiltinClassResolver {
  return newBuiltinClassResolver_ != nil ?
#line 1055
  newBuiltinClassResolver_ : [((FreemarkerCoreConfigurable *) nil_chk(parent_)) getNewBuiltinClassResolver];
}


#line 1074
- (void)setAutoFlushWithBoolean:(jboolean)autoFlush {
  self->autoFlush_ = JavaLangBoolean_valueOfWithBoolean_(autoFlush);
  (void) [((JavaUtilProperties *) nil_chk(properties_)) setPropertyWithNSString:FreemarkerCoreConfigurable_AUTO_FLUSH_KEY_ withNSString:NSString_valueOfBool_(autoFlush)];
}


#line 1084
- (jboolean)getAutoFlush {
  return autoFlush_ != nil ?
#line 1086
  [autoFlush_ booleanValue] :
#line 1087
  (parent_ != nil ? [parent_ getAutoFlush] : YES);
}


#line 1096
- (void)setShowErrorTipsWithBoolean:(jboolean)showTips {
  self->showErrorTips_ = JavaLangBoolean_valueOfWithBoolean_(showTips);
  (void) [((JavaUtilProperties *) nil_chk(properties_)) setPropertyWithNSString:FreemarkerCoreConfigurable_SHOW_ERROR_TIPS_KEY_ withNSString:NSString_valueOfBool_(showTips)];
}


#line 1106
- (jboolean)getShowErrorTips {
  return showErrorTips_ != nil ?
#line 1108
  [showErrorTips_ booleanValue] :
#line 1109
  (parent_ != nil ? [parent_ getShowErrorTips] : YES);
}


#line 1118
- (void)setAPIBuiltinEnabledWithBoolean:(jboolean)value {
  apiBuiltinEnabled_ = JavaLangBoolean_valueOfWithBoolean_(value);
  (void) [((JavaUtilProperties *) nil_chk(properties_)) setPropertyWithNSString:FreemarkerCoreConfigurable_API_BUILTIN_ENABLED_KEY_ withNSString:NSString_valueOfBool_(value)];
}


#line 1128
- (jboolean)isAPIBuiltinEnabled {
  return apiBuiltinEnabled_ != nil ?
#line 1130
  [apiBuiltinEnabled_ booleanValue] :
#line 1131
  (parent_ != nil ? [parent_ isAPIBuiltinEnabled] : NO);
}


#line 1145
- (void)setLogTemplateExceptionsWithBoolean:(jboolean)value {
  logTemplateExceptions_ = JavaLangBoolean_valueOfWithBoolean_(value);
  (void) [((JavaUtilProperties *) nil_chk(properties_)) setPropertyWithNSString:FreemarkerCoreConfigurable_LOG_TEMPLATE_EXCEPTIONS_KEY_ withNSString:NSString_valueOfBool_(value)];
}


#line 1155
- (jboolean)getLogTemplateExceptions {
  return logTemplateExceptions_ != nil ?
#line 1157
  [logTemplateExceptions_ booleanValue] :
#line 1158
  (parent_ != nil ? [parent_ getLogTemplateExceptions] : YES);
}


#line 1484
- (void)setSettingWithNSString:(NSString *)name
                  withNSString:(NSString *)value {
  jboolean unknown = NO;
  @try {
    if ([((NSString *) nil_chk(FreemarkerCoreConfigurable_LOCALE_KEY_)) isEqual:name]) {
      [self setLocaleWithJavaUtilLocale:FreemarkerTemplateUtilityStringUtil_deduceLocaleWithNSString_(value)];
    }
    else
#line 1489
    if ([((NSString *) nil_chk(FreemarkerCoreConfigurable_NUMBER_FORMAT_KEY_SNAKE_CASE_)) isEqual:name] || [((NSString *) nil_chk(FreemarkerCoreConfigurable_NUMBER_FORMAT_KEY_CAMEL_CASE_)) isEqual:name]) {
      [self setNumberFormatWithNSString:value];
    }
    else
#line 1491
    if ([((NSString *) nil_chk(FreemarkerCoreConfigurable_TIME_FORMAT_KEY_SNAKE_CASE_)) isEqual:name] || [((NSString *) nil_chk(FreemarkerCoreConfigurable_TIME_FORMAT_KEY_CAMEL_CASE_)) isEqual:name]) {
      [self setTimeFormatWithNSString:value];
    }
    else
#line 1493
    if ([((NSString *) nil_chk(FreemarkerCoreConfigurable_DATE_FORMAT_KEY_SNAKE_CASE_)) isEqual:name] || [((NSString *) nil_chk(FreemarkerCoreConfigurable_DATE_FORMAT_KEY_CAMEL_CASE_)) isEqual:name]) {
      [self setDateFormatWithNSString:value];
    }
    else
#line 1495
    if ([((NSString *) nil_chk(FreemarkerCoreConfigurable_DATETIME_FORMAT_KEY_SNAKE_CASE_)) isEqual:name] || [((NSString *) nil_chk(FreemarkerCoreConfigurable_DATETIME_FORMAT_KEY_CAMEL_CASE_)) isEqual:name]) {
      [self setDateTimeFormatWithNSString:value];
    }
    else
#line 1497
    if ([((NSString *) nil_chk(FreemarkerCoreConfigurable_TIME_ZONE_KEY_SNAKE_CASE_)) isEqual:name] || [((NSString *) nil_chk(FreemarkerCoreConfigurable_TIME_ZONE_KEY_CAMEL_CASE_)) isEqual:name]) {
      [self setTimeZoneWithJavaUtilTimeZone:FreemarkerCoreConfigurable_parseTimeZoneSettingValueWithNSString_(self, value)];
    }
    else
#line 1499
    if ([((NSString *) nil_chk(FreemarkerCoreConfigurable_SQL_DATE_AND_TIME_TIME_ZONE_KEY_SNAKE_CASE_)) isEqual:name] ||
#line 1500
    [((NSString *) nil_chk(FreemarkerCoreConfigurable_SQL_DATE_AND_TIME_TIME_ZONE_KEY_CAMEL_CASE_)) isEqual:name]) {
      [self setSQLDateAndTimeTimeZoneWithJavaUtilTimeZone:[((NSString *) nil_chk(value)) isEqual:@"null"] ? nil : FreemarkerCoreConfigurable_parseTimeZoneSettingValueWithNSString_(self, value)];
    }
    else
#line 1502
    if ([((NSString *) nil_chk(FreemarkerCoreConfigurable_CLASSIC_COMPATIBLE_KEY_SNAKE_CASE_)) isEqual:name] ||
#line 1503
    [((NSString *) nil_chk(FreemarkerCoreConfigurable_CLASSIC_COMPATIBLE_KEY_CAMEL_CASE_)) isEqual:name]) {
      jchar firstChar;
      if (value != nil && ((jint) [value length]) > 0) {
        firstChar = [value charAtWithInt:0];
      }
      else {
        
#line 1508
        firstChar = 0;
      }
      if (JavaLangCharacter_isDigitWithChar_(firstChar) || firstChar == '+' || firstChar == '-') {
        [self setClassicCompatibleAsIntWithInt:JavaLangInteger_parseIntWithNSString_(value)];
      }
      else {
        
#line 1513
        [self setClassicCompatibleWithBoolean:value != nil ? FreemarkerTemplateUtilityStringUtil_getYesNoWithNSString_(value) : NO];
      }
    }
    else
#line 1515
    if ([((NSString *) nil_chk(FreemarkerCoreConfigurable_TEMPLATE_EXCEPTION_HANDLER_KEY_SNAKE_CASE_)) isEqual:name] ||
#line 1516
    [((NSString *) nil_chk(FreemarkerCoreConfigurable_TEMPLATE_EXCEPTION_HANDLER_KEY_CAMEL_CASE_)) isEqual:name]) {
      if ([((NSString *) nil_chk(value)) indexOf:'.'] == -1) {
        if ([@"debug" equalsIgnoreCase:value]) {
          [self setTemplateExceptionHandlerWithFreemarkerTemplateTemplateExceptionHandler:FreemarkerTemplateTemplateExceptionHandler_get_DEBUG_HANDLER_()];
        }
        else if ([@"html_debug" equalsIgnoreCase:value] || [@"htmlDebug" isEqual:value]) {
          [self setTemplateExceptionHandlerWithFreemarkerTemplateTemplateExceptionHandler:FreemarkerTemplateTemplateExceptionHandler_get_HTML_DEBUG_HANDLER_()];
        }
        else if ([@"ignore" equalsIgnoreCase:value]) {
          [self setTemplateExceptionHandlerWithFreemarkerTemplateTemplateExceptionHandler:FreemarkerTemplateTemplateExceptionHandler_get_IGNORE_HANDLER_()];
        }
        else if ([@"rethrow" equalsIgnoreCase:value]) {
          [self setTemplateExceptionHandlerWithFreemarkerTemplateTemplateExceptionHandler:FreemarkerTemplateTemplateExceptionHandler_get_RETHROW_HANDLER_()];
        }
        else if ([((NSString *) nil_chk(FreemarkerCoreConfigurable_DEFAULT_)) equalsIgnoreCase:value] && [self isKindOfClass:[FreemarkerTemplateConfiguration class]]) {
          [((FreemarkerTemplateConfiguration *) check_class_cast(self, [FreemarkerTemplateConfiguration class])) unsetTemplateExceptionHandler];
        }
        else {
          
#line 1533
          @throw [self invalidSettingValueExceptionWithNSString:name withNSString:value];
        }
      }
      else {
        
#line 1536
        [self setTemplateExceptionHandlerWithFreemarkerTemplateTemplateExceptionHandler:(id<FreemarkerTemplateTemplateExceptionHandler>) check_protocol_cast(FreemarkerCore_ObjectBuilderSettingEvaluator_evalWithNSString_withIOSClass_withFreemarkerCore_SettingEvaluationEnvironment_(
#line 1537
        value, FreemarkerTemplateTemplateExceptionHandler_class_(), FreemarkerCore_SettingEvaluationEnvironment_getCurrent()), @protocol(FreemarkerTemplateTemplateExceptionHandler))];
      }
    }
    else
#line 1539
    if ([((NSString *) nil_chk(FreemarkerCoreConfigurable_ARITHMETIC_ENGINE_KEY_SNAKE_CASE_)) isEqual:name] || [((NSString *) nil_chk(FreemarkerCoreConfigurable_ARITHMETIC_ENGINE_KEY_CAMEL_CASE_)) isEqual:name]) {
      if ([((NSString *) nil_chk(value)) indexOf:'.'] == -1) {
        if ([@"bigdecimal" equalsIgnoreCase:value]) {
          [self setArithmeticEngineWithFreemarkerCoreArithmeticEngine:FreemarkerCoreArithmeticEngine_get_BIGDECIMAL_ENGINE_()];
        }
        else
#line 1543
        if ([@"conservative" equalsIgnoreCase:value]) {
          [self setArithmeticEngineWithFreemarkerCoreArithmeticEngine:FreemarkerCoreArithmeticEngine_get_CONSERVATIVE_ENGINE_()];
        }
        else {
          
#line 1546
          @throw [self invalidSettingValueExceptionWithNSString:name withNSString:value];
        }
      }
      else {
        
#line 1549
        [self setArithmeticEngineWithFreemarkerCoreArithmeticEngine:(FreemarkerCoreArithmeticEngine *) check_class_cast(FreemarkerCore_ObjectBuilderSettingEvaluator_evalWithNSString_withIOSClass_withFreemarkerCore_SettingEvaluationEnvironment_(
#line 1550
        value, FreemarkerCoreArithmeticEngine_class_(), FreemarkerCore_SettingEvaluationEnvironment_getCurrent()), [FreemarkerCoreArithmeticEngine class])];
      }
    }
    else
#line 1552
    if ([((NSString *) nil_chk(FreemarkerCoreConfigurable_OBJECT_WRAPPER_KEY_SNAKE_CASE_)) isEqual:name] || [((NSString *) nil_chk(FreemarkerCoreConfigurable_OBJECT_WRAPPER_KEY_CAMEL_CASE_)) isEqual:name]) {
      if ([((NSString *) nil_chk(FreemarkerCoreConfigurable_DEFAULT_)) equalsIgnoreCase:value]) {
        if ([self isKindOfClass:[FreemarkerTemplateConfiguration class]]) {
          [((FreemarkerTemplateConfiguration *) check_class_cast(self, [FreemarkerTemplateConfiguration class])) unsetObjectWrapper];
        }
        else {
          
#line 1557
          [self setObjectWrapperWithFreemarkerTemplateObjectWrapper:FreemarkerTemplateConfiguration_getDefaultObjectWrapperWithFreemarkerTemplateVersion_(FreemarkerTemplateConfiguration_get_VERSION_2_3_0_())];
        }
      }
      else
#line 1559
      if ([((NSString *) nil_chk(FreemarkerCoreConfigurable_DEFAULT_2_3_0_)) equalsIgnoreCase:value]) {
        [self setObjectWrapperWithFreemarkerTemplateObjectWrapper:FreemarkerTemplateConfiguration_getDefaultObjectWrapperWithFreemarkerTemplateVersion_(FreemarkerTemplateConfiguration_get_VERSION_2_3_0_())];
      }
      else
#line 1561
      if ([@"simple" equalsIgnoreCase:value]) {
        [self setObjectWrapperWithFreemarkerTemplateObjectWrapper:FreemarkerTemplateObjectWrapper_get_SIMPLE_WRAPPER_()];
      }
      else
#line 1563
      if ([@"beans" equalsIgnoreCase:value]) {
        [self setObjectWrapperWithFreemarkerTemplateObjectWrapper:FreemarkerTemplateObjectWrapper_get_BEANS_WRAPPER_()];
      }
      else
#line 1565
      if ([@"jython" equalsIgnoreCase:value]) {
        IOSClass *clazz = IOSClass_forName_(
#line 1567
        @"freemarker.ext.jython.JythonWrapper");
        [self setObjectWrapperWithFreemarkerTemplateObjectWrapper:
#line 1569
        (id<FreemarkerTemplateObjectWrapper>) check_protocol_cast([((JavaLangReflectField *) nil_chk([((IOSClass *) nil_chk(clazz)) getField:@"INSTANCE"])) getWithId:nil], @protocol(FreemarkerTemplateObjectWrapper))];
      }
      else {
        
#line 1571
        [self setObjectWrapperWithFreemarkerTemplateObjectWrapper:(id<FreemarkerTemplateObjectWrapper>) check_protocol_cast(FreemarkerCore_ObjectBuilderSettingEvaluator_evalWithNSString_withIOSClass_withFreemarkerCore_SettingEvaluationEnvironment_(
#line 1572
        value, FreemarkerTemplateObjectWrapper_class_(), FreemarkerCore_SettingEvaluationEnvironment_getCurrent()), @protocol(FreemarkerTemplateObjectWrapper))];
      }
    }
    else
#line 1574
    if ([((NSString *) nil_chk(FreemarkerCoreConfigurable_BOOLEAN_FORMAT_KEY_SNAKE_CASE_)) isEqual:name] || [((NSString *) nil_chk(FreemarkerCoreConfigurable_BOOLEAN_FORMAT_KEY_CAMEL_CASE_)) isEqual:name]) {
      [self setBooleanFormatWithNSString:value];
    }
    else
#line 1576
    if ([((NSString *) nil_chk(FreemarkerCoreConfigurable_OUTPUT_ENCODING_KEY_SNAKE_CASE_)) isEqual:name] || [((NSString *) nil_chk(FreemarkerCoreConfigurable_OUTPUT_ENCODING_KEY_CAMEL_CASE_)) isEqual:name]) {
      [self setOutputEncodingWithNSString:value];
    }
    else
#line 1578
    if ([((NSString *) nil_chk(FreemarkerCoreConfigurable_URL_ESCAPING_CHARSET_KEY_SNAKE_CASE_)) isEqual:name] ||
#line 1579
    [((NSString *) nil_chk(FreemarkerCoreConfigurable_URL_ESCAPING_CHARSET_KEY_CAMEL_CASE_)) isEqual:name]) {
      [self setURLEscapingCharsetWithNSString:value];
    }
    else
#line 1581
    if ([((NSString *) nil_chk(FreemarkerCoreConfigurable_STRICT_BEAN_MODELS_KEY_SNAKE_CASE_)) isEqual:name] ||
#line 1582
    [((NSString *) nil_chk(FreemarkerCoreConfigurable_STRICT_BEAN_MODELS_KEY_CAMEL_CASE_)) isEqual:name]) {
      [self setStrictBeanModelsWithBoolean:FreemarkerTemplateUtilityStringUtil_getYesNoWithNSString_(value)];
    }
    else
#line 1584
    if ([((NSString *) nil_chk(FreemarkerCoreConfigurable_AUTO_FLUSH_KEY_SNAKE_CASE_)) isEqual:name] || [((NSString *) nil_chk(FreemarkerCoreConfigurable_AUTO_FLUSH_KEY_CAMEL_CASE_)) isEqual:name]) {
      [self setAutoFlushWithBoolean:FreemarkerTemplateUtilityStringUtil_getYesNoWithNSString_(value)];
    }
    else
#line 1586
    if ([((NSString *) nil_chk(FreemarkerCoreConfigurable_SHOW_ERROR_TIPS_KEY_SNAKE_CASE_)) isEqual:name] || [((NSString *) nil_chk(FreemarkerCoreConfigurable_SHOW_ERROR_TIPS_KEY_CAMEL_CASE_)) isEqual:name]) {
      [self setShowErrorTipsWithBoolean:FreemarkerTemplateUtilityStringUtil_getYesNoWithNSString_(value)];
    }
    else
#line 1588
    if ([((NSString *) nil_chk(FreemarkerCoreConfigurable_API_BUILTIN_ENABLED_KEY_SNAKE_CASE_)) isEqual:name] ||
#line 1589
    [((NSString *) nil_chk(FreemarkerCoreConfigurable_API_BUILTIN_ENABLED_KEY_CAMEL_CASE_)) isEqual:name]) {
      [self setAPIBuiltinEnabledWithBoolean:FreemarkerTemplateUtilityStringUtil_getYesNoWithNSString_(value)];
    }
    else
#line 1591
    if ([((NSString *) nil_chk(FreemarkerCoreConfigurable_NEW_BUILTIN_CLASS_RESOLVER_KEY_SNAKE_CASE_)) isEqual:name] ||
#line 1592
    [((NSString *) nil_chk(FreemarkerCoreConfigurable_NEW_BUILTIN_CLASS_RESOLVER_KEY_CAMEL_CASE_)) isEqual:name]) {
      if ([@"unrestricted" isEqual:value]) {
        [self setNewBuiltinClassResolverWithFreemarkerCoreTemplateClassResolver:FreemarkerCoreTemplateClassResolver_get_UNRESTRICTED_RESOLVER_()];
      }
      else
#line 1595
      if ([@"safer" isEqual:value]) {
        [self setNewBuiltinClassResolverWithFreemarkerCoreTemplateClassResolver:FreemarkerCoreTemplateClassResolver_get_SAFER_RESOLVER_()];
      }
      else
#line 1597
      if ([@"allows_nothing" isEqual:value] || [@"allowsNothing" isEqual:value]) {
        [self setNewBuiltinClassResolverWithFreemarkerCoreTemplateClassResolver:FreemarkerCoreTemplateClassResolver_get_ALLOWS_NOTHING_RESOLVER_()];
      }
      else
#line 1599
      if ([((NSString *) nil_chk(value)) indexOfString:@":"] != -1) {
        id<JavaUtilList> segments = [self parseAsSegmentedListWithNSString:value];
        id<JavaUtilSet> allowedClasses = nil;
        id<JavaUtilList> trustedTemplates = nil;
        for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(segments)) size]; i++) {
          FreemarkerCoreConfigurable_KeyValuePair *kv = (FreemarkerCoreConfigurable_KeyValuePair *) check_class_cast([segments getWithInt:i], [FreemarkerCoreConfigurable_KeyValuePair class]);
          NSString *segmentKey = (NSString *) check_class_cast([((FreemarkerCoreConfigurable_KeyValuePair *) nil_chk(kv)) getKey], [NSString class]);
          id<JavaUtilList> segmentValue = (id<JavaUtilList>) check_protocol_cast([kv getValue], @protocol(JavaUtilList));
          if ([((NSString *) nil_chk(segmentKey)) isEqual:FreemarkerCoreConfigurable_ALLOWED_CLASSES_]) {
            allowedClasses = new_JavaUtilHashSet_initWithJavaUtilCollection_(segmentValue);
          }
          else
#line 1609
          if ([segmentKey isEqual:FreemarkerCoreConfigurable_TRUSTED_TEMPLATES_]) {
            trustedTemplates = segmentValue;
          }
          else {
            
#line 1612
            @throw new_FreemarkerCoreParseException_initWithNSString_withId_withId_(JreStrcat("$$$$$$C", @"Unrecognized list segment key: ", FreemarkerTemplateUtilityStringUtil_jQuoteWithNSString_(
#line 1613
            segmentKey), @". Supported keys are: \"",
#line 1614
            FreemarkerCoreConfigurable_ALLOWED_CLASSES_, @"\", \"",
#line 1615
            FreemarkerCoreConfigurable_TRUSTED_TEMPLATES_, '"'), JavaLangInteger_valueOfWithInt_(0), JavaLangInteger_valueOfWithInt_(0));
          }
        }
        [self setNewBuiltinClassResolverWithFreemarkerCoreTemplateClassResolver:new_FreemarkerCoreOptInTemplateClassResolver_initWithJavaUtilSet_withJavaUtilList_(
#line 1619
        allowedClasses, trustedTemplates)];
      }
      else
#line 1620
      if ([value indexOf:'.'] != -1) {
        [self setNewBuiltinClassResolverWithFreemarkerCoreTemplateClassResolver:(id<FreemarkerCoreTemplateClassResolver>) check_protocol_cast(FreemarkerCore_ObjectBuilderSettingEvaluator_evalWithNSString_withIOSClass_withFreemarkerCore_SettingEvaluationEnvironment_(
#line 1622
        value, FreemarkerCoreTemplateClassResolver_class_(), FreemarkerCore_SettingEvaluationEnvironment_getCurrent()), @protocol(FreemarkerCoreTemplateClassResolver))];
      }
      else {
        
#line 1624
        @throw [self invalidSettingValueExceptionWithNSString:name withNSString:value];
      }
    }
    else
#line 1626
    if ([((NSString *) nil_chk(FreemarkerCoreConfigurable_LOG_TEMPLATE_EXCEPTIONS_KEY_SNAKE_CASE_)) isEqual:name] ||
#line 1627
    [((NSString *) nil_chk(FreemarkerCoreConfigurable_LOG_TEMPLATE_EXCEPTIONS_KEY_CAMEL_CASE_)) isEqual:name]) {
      [self setLogTemplateExceptionsWithBoolean:FreemarkerTemplateUtilityStringUtil_getYesNoWithNSString_(value)];
    }
    else {
      
#line 1630
      unknown = YES;
    }
  }
  @catch (
#line 1632
  JavaLangException *e) {
    @throw [self settingValueAssignmentExceptionWithNSString:name withNSString:value withJavaLangThrowable:e];
  }
  if (unknown) {
    @throw [self unknownSettingExceptionWithNSString:name];
  }
}


#line 1642
- (id<JavaUtilSet>)getSettingNamesWithBoolean:(jboolean)camelCase {
  return new_FreemarkerCore_SortedArraySet_initWithNSObjectArray_(camelCase ? FreemarkerCoreConfigurable_SETTING_NAMES_CAMEL_CASE_ : FreemarkerCoreConfigurable_SETTING_NAMES_SNAKE_CASE_);
}

- (JavaUtilTimeZone *)parseTimeZoneSettingValueWithNSString:(NSString *)value {
  return FreemarkerCoreConfigurable_parseTimeZoneSettingValueWithNSString_(self, value);
}


#line 1656
- (void)setStrictBeanModelsWithBoolean:(jboolean)strict {
  if (!([objectWrapper_ isKindOfClass:[FreemarkerExtBeansBeansWrapper class]])) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$$$$C", @"The value of the ", FreemarkerCoreConfigurable_OBJECT_WRAPPER_KEY_, @" setting isn't a ",
#line 1659
    [FreemarkerExtBeansBeansWrapper_class_() getName], '.'));
  }
  [((FreemarkerExtBeansBeansWrapper *) nil_chk(((FreemarkerExtBeansBeansWrapper *) check_class_cast(objectWrapper_, [FreemarkerExtBeansBeansWrapper class])))) setStrictWithBoolean:strict];
}


#line 1673
- (NSString *)getSettingWithNSString:(NSString *)key {
  return [((JavaUtilProperties *) nil_chk(properties_)) getPropertyWithNSString:key];
}


#line 1688
- (id<JavaUtilMap>)getSettings {
  return JavaUtilCollections_unmodifiableMapWithJavaUtilMap_(properties_);
}

- (FreemarkerCoreEnvironment *)getEnvironment {
  return [self isKindOfClass:[FreemarkerCoreEnvironment class]] ?
#line 1694
  (FreemarkerCoreEnvironment *) check_class_cast(self, [FreemarkerCoreEnvironment class]) : FreemarkerCoreEnvironment_getCurrentEnvironment();
}


#line 1701
- (FreemarkerTemplateTemplateException *)unknownSettingExceptionWithNSString:(NSString *)name {
  return new_FreemarkerCoreConfigurable_UnknownSettingException_initWithFreemarkerCoreEnvironment_withNSString_withNSString_(
#line 1703
  [self getEnvironment], name, [self getCorrectedNameForUnknownSettingWithNSString:name]);
}


#line 1711
- (NSString *)getCorrectedNameForUnknownSettingWithNSString:(NSString *)name {
  return nil;
}


#line 1718
- (FreemarkerTemplateTemplateException *)settingValueAssignmentExceptionWithNSString:(NSString *)name
                                                                        withNSString:(NSString *)value
                                                               withJavaLangThrowable:(JavaLangThrowable *)cause {
  return new_FreemarkerCoreConfigurable_SettingValueAssignmentException_initWithFreemarkerCoreEnvironment_withNSString_withNSString_withJavaLangThrowable_([self getEnvironment], name, value, cause);
}


#line 1722
- (FreemarkerTemplateTemplateException *)invalidSettingValueExceptionWithNSString:(NSString *)name
                                                                     withNSString:(NSString *)value {
  return new_FreemarkerCore_MiscTemplateException_initWithFreemarkerCoreEnvironment_withNSObjectArray_([self getEnvironment], [IOSObjectArray newArrayWithObjects:(id[]){
#line 1724
    @"Invalid value for setting ", new_FreemarkerCore_DelayedJQuote_initWithId_(name), @": ", new_FreemarkerCore_DelayedJQuote_initWithId_(
#line 1725
    value) } count:4 type:NSObject_class_()]);
  }


#line 1765
- (void)setSettingsWithJavaUtilProperties:(JavaUtilProperties *)props {
  FreemarkerCore_SettingEvaluationEnvironment *prevEnv = FreemarkerCore_SettingEvaluationEnvironment_startScope();
  @try {
    for (id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk([((JavaUtilProperties *) nil_chk(props)) keySet])) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
      NSString *key = (NSString *) check_class_cast([it next], [NSString class]);
      [self setSettingWithNSString:key withNSString:[((NSString *) nil_chk([props getPropertyWithNSString:key])) trim]];
    }
  }
  @finally {
    
#line 1773
    FreemarkerCore_SettingEvaluationEnvironment_endScopeWithFreemarkerCore_SettingEvaluationEnvironment_(prevEnv);
  }
}


#line 1786
- (void)setSettingsWithJavaIoInputStream:(JavaIoInputStream *)propsIn {
  JavaUtilProperties *p = new_JavaUtilProperties_init();
  [p load__WithJavaIoInputStream:propsIn];
  [self setSettingsWithJavaUtilProperties:p];
}


#line 1795
- (void)setCustomAttributeWithId:(id)key
                          withId:(id)value {
  @synchronized(customAttributes_) {
    (void) [((JavaUtilHashMap *) nil_chk(customAttributes_)) putWithId:key withId:value];
  }
}


#line 1804
- (id)getCustomAttributeWithId:(id)key
withFreemarkerCoreCustomAttribute:(FreemarkerCoreCustomAttribute *)attr {
  @synchronized(customAttributes_) {
    id o = [((JavaUtilHashMap *) nil_chk(customAttributes_)) getWithId:key];
    if (o == nil && ![customAttributes_ containsKeyWithId:key]) {
      o = [((FreemarkerCoreCustomAttribute *) nil_chk(attr)) create];
      (void) [customAttributes_ putWithId:key withId:o];
    }
    return o;
  }
}


#line 1824
- (void)setCustomAttributeWithNSString:(NSString *)name
                                withId:(id)value {
  @synchronized(customAttributes_) {
    (void) [((JavaUtilHashMap *) nil_chk(customAttributes_)) putWithId:name withId:value];
  }
}


#line 1838
- (IOSObjectArray *)getCustomAttributeNames {
  @synchronized(customAttributes_) {
    id<JavaUtilCollection> names = new_JavaUtilLinkedList_initWithJavaUtilCollection_([((JavaUtilHashMap *) nil_chk(customAttributes_)) keySet]);
    for (id<JavaUtilIterator> iter = [names iterator]; [((id<JavaUtilIterator>) nil_chk(iter)) hasNext]; ) {
      if (!([[iter next] isKindOfClass:[NSString class]])) {
        [iter remove];
      }
    }
    return (IOSObjectArray *) check_class_cast([names toArrayWithNSObjectArray:[IOSObjectArray newArrayWithLength:[names size] type:NSString_class_()]], [IOSObjectArray class]);
  }
}


#line 1860
- (void)removeCustomAttributeWithNSString:(NSString *)name {
  @synchronized(customAttributes_) {
    (void) [((JavaUtilHashMap *) nil_chk(customAttributes_)) removeWithId:name];
  }
}


#line 1878
- (id)getCustomAttributeWithNSString:(NSString *)name {
  id retval;
  @synchronized(customAttributes_) {
    retval = [((JavaUtilHashMap *) nil_chk(customAttributes_)) getWithId:name];
    if (retval == nil && [customAttributes_ containsKeyWithId:name]) {
      return nil;
    }
  }
  if (retval == nil && parent_ != nil) {
    return [parent_ getCustomAttributeWithNSString:name];
  }
  return retval;
}

- (void)doAutoImportsAndIncludesWithFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env {
  
#line 1895
  if (parent_ != nil) [parent_ doAutoImportsAndIncludesWithFreemarkerCoreEnvironment:env];
}

- (JavaUtilArrayList *)parseAsListWithNSString:(NSString *)text {
  return [new_FreemarkerCoreConfigurable_SettingStringParser_initWithNSString_(text) parseAsList];
}

- (JavaUtilArrayList *)parseAsSegmentedListWithNSString:(NSString *)text {
  
#line 1904
  return [new_FreemarkerCoreConfigurable_SettingStringParser_initWithNSString_(text) parseAsSegmentedList];
}


#line 1907
- (JavaUtilHashMap *)parseAsImportListWithNSString:(NSString *)text {
  return [new_FreemarkerCoreConfigurable_SettingStringParser_initWithNSString_(text) parseAsImportList];
}

+ (void)initialize {
  if (self == [FreemarkerCoreConfigurable class]) {
    FreemarkerCoreConfigurable_SETTING_NAMES_SNAKE_CASE_ = [IOSObjectArray newArrayWithObjects:(id[]){
#line 219
      FreemarkerCoreConfigurable_API_BUILTIN_ENABLED_KEY_SNAKE_CASE_,
#line 220
      FreemarkerCoreConfigurable_ARITHMETIC_ENGINE_KEY_SNAKE_CASE_,
#line 221
      FreemarkerCoreConfigurable_AUTO_FLUSH_KEY_SNAKE_CASE_,
#line 222
      FreemarkerCoreConfigurable_BOOLEAN_FORMAT_KEY_SNAKE_CASE_,
#line 223
      FreemarkerCoreConfigurable_CLASSIC_COMPATIBLE_KEY_SNAKE_CASE_,
#line 224
      FreemarkerCoreConfigurable_DATE_FORMAT_KEY_SNAKE_CASE_,
#line 225
      FreemarkerCoreConfigurable_DATETIME_FORMAT_KEY_SNAKE_CASE_,
#line 226
      FreemarkerCoreConfigurable_LOCALE_KEY_SNAKE_CASE_,
#line 227
      FreemarkerCoreConfigurable_LOG_TEMPLATE_EXCEPTIONS_KEY_SNAKE_CASE_,
#line 228
      FreemarkerCoreConfigurable_NEW_BUILTIN_CLASS_RESOLVER_KEY_SNAKE_CASE_,
#line 229
      FreemarkerCoreConfigurable_NUMBER_FORMAT_KEY_SNAKE_CASE_,
#line 230
      FreemarkerCoreConfigurable_OBJECT_WRAPPER_KEY_SNAKE_CASE_,
#line 231
      FreemarkerCoreConfigurable_OUTPUT_ENCODING_KEY_SNAKE_CASE_,
#line 232
      FreemarkerCoreConfigurable_SHOW_ERROR_TIPS_KEY_SNAKE_CASE_,
#line 233
      FreemarkerCoreConfigurable_SQL_DATE_AND_TIME_TIME_ZONE_KEY_SNAKE_CASE_,
#line 234
      FreemarkerCoreConfigurable_STRICT_BEAN_MODELS_KEY_,
#line 235
      FreemarkerCoreConfigurable_TEMPLATE_EXCEPTION_HANDLER_KEY_SNAKE_CASE_,
#line 236
      FreemarkerCoreConfigurable_TIME_FORMAT_KEY_SNAKE_CASE_,
#line 237
      FreemarkerCoreConfigurable_TIME_ZONE_KEY_SNAKE_CASE_,
#line 238
      FreemarkerCoreConfigurable_URL_ESCAPING_CHARSET_KEY_SNAKE_CASE_ } count:20 type:NSString_class_()];
      FreemarkerCoreConfigurable_SETTING_NAMES_CAMEL_CASE_ = [IOSObjectArray newArrayWithObjects:(id[]){
#line 243
        FreemarkerCoreConfigurable_API_BUILTIN_ENABLED_KEY_CAMEL_CASE_,
#line 244
        FreemarkerCoreConfigurable_ARITHMETIC_ENGINE_KEY_CAMEL_CASE_,
#line 245
        FreemarkerCoreConfigurable_AUTO_FLUSH_KEY_CAMEL_CASE_,
#line 246
        FreemarkerCoreConfigurable_BOOLEAN_FORMAT_KEY_CAMEL_CASE_,
#line 247
        FreemarkerCoreConfigurable_CLASSIC_COMPATIBLE_KEY_CAMEL_CASE_,
#line 248
        FreemarkerCoreConfigurable_DATE_FORMAT_KEY_CAMEL_CASE_,
#line 249
        FreemarkerCoreConfigurable_DATETIME_FORMAT_KEY_CAMEL_CASE_,
#line 250
        FreemarkerCoreConfigurable_LOCALE_KEY_CAMEL_CASE_,
#line 251
        FreemarkerCoreConfigurable_LOG_TEMPLATE_EXCEPTIONS_KEY_CAMEL_CASE_,
#line 252
        FreemarkerCoreConfigurable_NEW_BUILTIN_CLASS_RESOLVER_KEY_CAMEL_CASE_,
#line 253
        FreemarkerCoreConfigurable_NUMBER_FORMAT_KEY_CAMEL_CASE_,
#line 254
        FreemarkerCoreConfigurable_OBJECT_WRAPPER_KEY_CAMEL_CASE_,
#line 255
        FreemarkerCoreConfigurable_OUTPUT_ENCODING_KEY_CAMEL_CASE_,
#line 256
        FreemarkerCoreConfigurable_SHOW_ERROR_TIPS_KEY_CAMEL_CASE_,
#line 257
        FreemarkerCoreConfigurable_SQL_DATE_AND_TIME_TIME_ZONE_KEY_CAMEL_CASE_,
#line 258
        FreemarkerCoreConfigurable_STRICT_BEAN_MODELS_KEY_CAMEL_CASE_,
#line 259
        FreemarkerCoreConfigurable_TEMPLATE_EXCEPTION_HANDLER_KEY_CAMEL_CASE_,
#line 260
        FreemarkerCoreConfigurable_TIME_FORMAT_KEY_CAMEL_CASE_,
#line 261
        FreemarkerCoreConfigurable_TIME_ZONE_KEY_CAMEL_CASE_,
#line 262
        FreemarkerCoreConfigurable_URL_ESCAPING_CHARSET_KEY_CAMEL_CASE_ } count:20 type:NSString_class_()];
        J2OBJC_SET_INITIALIZED(FreemarkerCoreConfigurable)
      }
    }

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "Configurable", NULL, 0x1, NULL, NULL },
    { "initWithFreemarkerTemplateVersion:", "Configurable", NULL, 0x4, NULL, NULL },
    { "initWithFreemarkerCoreConfigurable:", "Configurable", NULL, 0x1, NULL, NULL },
    { "clone", NULL, "Ljava.lang.Object;", 0x4, "Ljava.lang.CloneNotSupportedException;", NULL },
    { "getParent", NULL, "Lfreemarker.core.Configurable;", 0x11, NULL, NULL },
    { "setParentWithFreemarkerCoreConfigurable:", "setParent", "V", 0x10, NULL, NULL },
    { "setClassicCompatibleWithBoolean:", "setClassicCompatible", "V", 0x1, NULL, NULL },
    { "setClassicCompatibleAsIntWithInt:", "setClassicCompatibleAsInt", "V", 0x1, NULL, NULL },
    { "classicCompatibilityIntToStringWithJavaLangInteger:", "classicCompatibilityIntToString", "Ljava.lang.String;", 0x2, NULL, NULL },
    { "isClassicCompatible", NULL, "Z", 0x1, NULL, NULL },
    { "getClassicCompatibleAsInt", NULL, "I", 0x1, NULL, NULL },
    { "setLocaleWithJavaUtilLocale:", "setLocale", "V", 0x1, NULL, NULL },
    { "getTimeZone", NULL, "Ljava.util.TimeZone;", 0x1, NULL, NULL },
    { "setTimeZoneWithJavaUtilTimeZone:", "setTimeZone", "V", 0x1, NULL, NULL },
    { "setSQLDateAndTimeTimeZoneWithJavaUtilTimeZone:", "setSQLDateAndTimeTimeZone", "V", 0x1, NULL, NULL },
    { "getSQLDateAndTimeTimeZone", NULL, "Ljava.util.TimeZone;", 0x1, NULL, NULL },
    { "getLocale", NULL, "Ljava.util.Locale;", 0x1, NULL, NULL },
    { "setNumberFormatWithNSString:", "setNumberFormat", "V", 0x1, NULL, NULL },
    { "getNumberFormat", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "setBooleanFormatWithNSString:", "setBooleanFormat", "V", 0x1, NULL, NULL },
    { "getBooleanFormat", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "formatBooleanWithBoolean:withBoolean:", "formatBoolean", "Ljava.lang.String;", 0x0, "Lfreemarker.template.TemplateException;", NULL },
    { "getNullBooleanFormatErrorDescription", NULL, "Lfreemarker.core._ErrorDescriptionBuilder;", 0x2, NULL, NULL },
    { "getTrueStringValue", NULL, "Ljava.lang.String;", 0x0, NULL, NULL },
    { "getFalseStringValue", NULL, "Ljava.lang.String;", 0x0, NULL, NULL },
    { "setTimeFormatWithNSString:", "setTimeFormat", "V", 0x1, NULL, NULL },
    { "getTimeFormat", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "setDateFormatWithNSString:", "setDateFormat", "V", 0x1, NULL, NULL },
    { "getDateFormat", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "setDateTimeFormatWithNSString:", "setDateTimeFormat", "V", 0x1, NULL, NULL },
    { "getDateTimeFormat", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "setTemplateExceptionHandlerWithFreemarkerTemplateTemplateExceptionHandler:", "setTemplateExceptionHandler", "V", 0x1, NULL, NULL },
    { "getTemplateExceptionHandler", NULL, "Lfreemarker.template.TemplateExceptionHandler;", 0x1, NULL, NULL },
    { "setArithmeticEngineWithFreemarkerCoreArithmeticEngine:", "setArithmeticEngine", "V", 0x1, NULL, NULL },
    { "getArithmeticEngine", NULL, "Lfreemarker.core.ArithmeticEngine;", 0x1, NULL, NULL },
    { "setObjectWrapperWithFreemarkerTemplateObjectWrapper:", "setObjectWrapper", "V", 0x1, NULL, NULL },
    { "getObjectWrapper", NULL, "Lfreemarker.template.ObjectWrapper;", 0x1, NULL, NULL },
    { "setOutputEncodingWithNSString:", "setOutputEncoding", "V", 0x1, NULL, NULL },
    { "getOutputEncoding", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "setURLEscapingCharsetWithNSString:", "setURLEscapingCharset", "V", 0x1, NULL, NULL },
    { "getURLEscapingCharset", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "setNewBuiltinClassResolverWithFreemarkerCoreTemplateClassResolver:", "setNewBuiltinClassResolver", "V", 0x1, NULL, NULL },
    { "getNewBuiltinClassResolver", NULL, "Lfreemarker.core.TemplateClassResolver;", 0x1, NULL, NULL },
    { "setAutoFlushWithBoolean:", "setAutoFlush", "V", 0x1, NULL, NULL },
    { "getAutoFlush", NULL, "Z", 0x1, NULL, NULL },
    { "setShowErrorTipsWithBoolean:", "setShowErrorTips", "V", 0x1, NULL, NULL },
    { "getShowErrorTips", NULL, "Z", 0x1, NULL, NULL },
    { "setAPIBuiltinEnabledWithBoolean:", "setAPIBuiltinEnabled", "V", 0x1, NULL, NULL },
    { "isAPIBuiltinEnabled", NULL, "Z", 0x1, NULL, NULL },
    { "setLogTemplateExceptionsWithBoolean:", "setLogTemplateExceptions", "V", 0x1, NULL, NULL },
    { "getLogTemplateExceptions", NULL, "Z", 0x1, NULL, NULL },
    { "setSettingWithNSString:withNSString:", "setSetting", "V", 0x1, "Lfreemarker.template.TemplateException;", NULL },
    { "getSettingNamesWithBoolean:", "getSettingNames", "Ljava.util.Set;", 0x0, NULL, NULL },
    { "parseTimeZoneSettingValueWithNSString:", "parseTimeZoneSettingValue", "Ljava.util.TimeZone;", 0x2, NULL, NULL },
    { "setStrictBeanModelsWithBoolean:", "setStrictBeanModels", "V", 0x1, NULL, NULL },
    { "getSettingWithNSString:", "getSetting", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getSettings", NULL, "Ljava.util.Map;", 0x1, NULL, NULL },
    { "getEnvironment", NULL, "Lfreemarker.core.Environment;", 0x4, NULL, NULL },
    { "unknownSettingExceptionWithNSString:", "unknownSettingException", "Lfreemarker.template.TemplateException;", 0x4, NULL, NULL },
    { "getCorrectedNameForUnknownSettingWithNSString:", "getCorrectedNameForUnknownSetting", "Ljava.lang.String;", 0x4, NULL, NULL },
    { "settingValueAssignmentExceptionWithNSString:withNSString:withJavaLangThrowable:", "settingValueAssignmentException", "Lfreemarker.template.TemplateException;", 0x4, NULL, NULL },
    { "invalidSettingValueExceptionWithNSString:withNSString:", "invalidSettingValueException", "Lfreemarker.template.TemplateException;", 0x4, NULL, NULL },
    { "setSettingsWithJavaUtilProperties:", "setSettings", "V", 0x1, "Lfreemarker.template.TemplateException;", NULL },
    { "setSettingsWithJavaIoInputStream:", "setSettings", "V", 0x1, "Lfreemarker.template.TemplateException;Ljava.io.IOException;", NULL },
    { "setCustomAttributeWithId:withId:", "setCustomAttribute", "V", 0x0, NULL, NULL },
    { "getCustomAttributeWithId:withFreemarkerCoreCustomAttribute:", "getCustomAttribute", "Ljava.lang.Object;", 0x0, NULL, NULL },
    { "setCustomAttributeWithNSString:withId:", "setCustomAttribute", "V", 0x1, NULL, NULL },
    { "getCustomAttributeNames", NULL, "[Ljava.lang.String;", 0x1, NULL, NULL },
    { "removeCustomAttributeWithNSString:", "removeCustomAttribute", "V", 0x1, NULL, NULL },
    { "getCustomAttributeWithNSString:", "getCustomAttribute", "Ljava.lang.Object;", 0x1, NULL, NULL },
    { "doAutoImportsAndIncludesWithFreemarkerCoreEnvironment:", "doAutoImportsAndIncludes", "V", 0x4, "Lfreemarker.template.TemplateException;Ljava.io.IOException;", NULL },
    { "parseAsListWithNSString:", "parseAsList", "Ljava.util.ArrayList;", 0x4, "Lfreemarker.core.ParseException;", NULL },
    { "parseAsSegmentedListWithNSString:", "parseAsSegmentedList", "Ljava.util.ArrayList;", 0x4, "Lfreemarker.core.ParseException;", NULL },
    { "parseAsImportListWithNSString:", "parseAsImportList", "Ljava.util.HashMap;", 0x4, "Lfreemarker.core.ParseException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "C_TRUE_FALSE_", NULL, 0x18, "Ljava.lang.String;", &FreemarkerCoreConfigurable_C_TRUE_FALSE_, NULL,  },
    { "DEFAULT_", NULL, 0x1a, "Ljava.lang.String;", &FreemarkerCoreConfigurable_DEFAULT_, NULL,  },
    { "DEFAULT_2_3_0_", NULL, 0x1a, "Ljava.lang.String;", &FreemarkerCoreConfigurable_DEFAULT_2_3_0_, NULL,  },
    { "JVM_DEFAULT_", NULL, 0x1a, "Ljava.lang.String;", &FreemarkerCoreConfigurable_JVM_DEFAULT_, NULL,  },
    { "LOCALE_KEY_SNAKE_CASE_", NULL, 0x19, "Ljava.lang.String;", &FreemarkerCoreConfigurable_LOCALE_KEY_SNAKE_CASE_, NULL,  },
    { "LOCALE_KEY_CAMEL_CASE_", NULL, 0x19, "Ljava.lang.String;", &FreemarkerCoreConfigurable_LOCALE_KEY_CAMEL_CASE_, NULL,  },
    { "LOCALE_KEY_", NULL, 0x19, "Ljava.lang.String;", &FreemarkerCoreConfigurable_LOCALE_KEY_, NULL,  },
    { "NUMBER_FORMAT_KEY_SNAKE_CASE_", NULL, 0x19, "Ljava.lang.String;", &FreemarkerCoreConfigurable_NUMBER_FORMAT_KEY_SNAKE_CASE_, NULL,  },
    { "NUMBER_FORMAT_KEY_CAMEL_CASE_", NULL, 0x19, "Ljava.lang.String;", &FreemarkerCoreConfigurable_NUMBER_FORMAT_KEY_CAMEL_CASE_, NULL,  },
    { "NUMBER_FORMAT_KEY_", NULL, 0x19, "Ljava.lang.String;", &FreemarkerCoreConfigurable_NUMBER_FORMAT_KEY_, NULL,  },
    { "TIME_FORMAT_KEY_SNAKE_CASE_", NULL, 0x19, "Ljava.lang.String;", &FreemarkerCoreConfigurable_TIME_FORMAT_KEY_SNAKE_CASE_, NULL,  },
    { "TIME_FORMAT_KEY_CAMEL_CASE_", NULL, 0x19, "Ljava.lang.String;", &FreemarkerCoreConfigurable_TIME_FORMAT_KEY_CAMEL_CASE_, NULL,  },
    { "TIME_FORMAT_KEY_", NULL, 0x19, "Ljava.lang.String;", &FreemarkerCoreConfigurable_TIME_FORMAT_KEY_, NULL,  },
    { "DATE_FORMAT_KEY_SNAKE_CASE_", NULL, 0x19, "Ljava.lang.String;", &FreemarkerCoreConfigurable_DATE_FORMAT_KEY_SNAKE_CASE_, NULL,  },
    { "DATE_FORMAT_KEY_CAMEL_CASE_", NULL, 0x19, "Ljava.lang.String;", &FreemarkerCoreConfigurable_DATE_FORMAT_KEY_CAMEL_CASE_, NULL,  },
    { "DATE_FORMAT_KEY_", NULL, 0x19, "Ljava.lang.String;", &FreemarkerCoreConfigurable_DATE_FORMAT_KEY_, NULL,  },
    { "DATETIME_FORMAT_KEY_SNAKE_CASE_", NULL, 0x19, "Ljava.lang.String;", &FreemarkerCoreConfigurable_DATETIME_FORMAT_KEY_SNAKE_CASE_, NULL,  },
    { "DATETIME_FORMAT_KEY_CAMEL_CASE_", NULL, 0x19, "Ljava.lang.String;", &FreemarkerCoreConfigurable_DATETIME_FORMAT_KEY_CAMEL_CASE_, NULL,  },
    { "DATETIME_FORMAT_KEY_", NULL, 0x19, "Ljava.lang.String;", &FreemarkerCoreConfigurable_DATETIME_FORMAT_KEY_, NULL,  },
    { "TIME_ZONE_KEY_SNAKE_CASE_", NULL, 0x19, "Ljava.lang.String;", &FreemarkerCoreConfigurable_TIME_ZONE_KEY_SNAKE_CASE_, NULL,  },
    { "TIME_ZONE_KEY_CAMEL_CASE_", NULL, 0x19, "Ljava.lang.String;", &FreemarkerCoreConfigurable_TIME_ZONE_KEY_CAMEL_CASE_, NULL,  },
    { "TIME_ZONE_KEY_", NULL, 0x19, "Ljava.lang.String;", &FreemarkerCoreConfigurable_TIME_ZONE_KEY_, NULL,  },
    { "SQL_DATE_AND_TIME_TIME_ZONE_KEY_SNAKE_CASE_", NULL, 0x19, "Ljava.lang.String;", &FreemarkerCoreConfigurable_SQL_DATE_AND_TIME_TIME_ZONE_KEY_SNAKE_CASE_, NULL,  },
    { "SQL_DATE_AND_TIME_TIME_ZONE_KEY_CAMEL_CASE_", NULL, 0x19, "Ljava.lang.String;", &FreemarkerCoreConfigurable_SQL_DATE_AND_TIME_TIME_ZONE_KEY_CAMEL_CASE_, NULL,  },
    { "SQL_DATE_AND_TIME_TIME_ZONE_KEY_", NULL, 0x19, "Ljava.lang.String;", &FreemarkerCoreConfigurable_SQL_DATE_AND_TIME_TIME_ZONE_KEY_, NULL,  },
    { "CLASSIC_COMPATIBLE_KEY_SNAKE_CASE_", NULL, 0x19, "Ljava.lang.String;", &FreemarkerCoreConfigurable_CLASSIC_COMPATIBLE_KEY_SNAKE_CASE_, NULL,  },
    { "CLASSIC_COMPATIBLE_KEY_CAMEL_CASE_", NULL, 0x19, "Ljava.lang.String;", &FreemarkerCoreConfigurable_CLASSIC_COMPATIBLE_KEY_CAMEL_CASE_, NULL,  },
    { "CLASSIC_COMPATIBLE_KEY_", NULL, 0x19, "Ljava.lang.String;", &FreemarkerCoreConfigurable_CLASSIC_COMPATIBLE_KEY_, NULL,  },
    { "TEMPLATE_EXCEPTION_HANDLER_KEY_SNAKE_CASE_", NULL, 0x19, "Ljava.lang.String;", &FreemarkerCoreConfigurable_TEMPLATE_EXCEPTION_HANDLER_KEY_SNAKE_CASE_, NULL,  },
    { "TEMPLATE_EXCEPTION_HANDLER_KEY_CAMEL_CASE_", NULL, 0x19, "Ljava.lang.String;", &FreemarkerCoreConfigurable_TEMPLATE_EXCEPTION_HANDLER_KEY_CAMEL_CASE_, NULL,  },
    { "TEMPLATE_EXCEPTION_HANDLER_KEY_", NULL, 0x19, "Ljava.lang.String;", &FreemarkerCoreConfigurable_TEMPLATE_EXCEPTION_HANDLER_KEY_, NULL,  },
    { "ARITHMETIC_ENGINE_KEY_SNAKE_CASE_", NULL, 0x19, "Ljava.lang.String;", &FreemarkerCoreConfigurable_ARITHMETIC_ENGINE_KEY_SNAKE_CASE_, NULL,  },
    { "ARITHMETIC_ENGINE_KEY_CAMEL_CASE_", NULL, 0x19, "Ljava.lang.String;", &FreemarkerCoreConfigurable_ARITHMETIC_ENGINE_KEY_CAMEL_CASE_, NULL,  },
    { "ARITHMETIC_ENGINE_KEY_", NULL, 0x19, "Ljava.lang.String;", &FreemarkerCoreConfigurable_ARITHMETIC_ENGINE_KEY_, NULL,  },
    { "OBJECT_WRAPPER_KEY_SNAKE_CASE_", NULL, 0x19, "Ljava.lang.String;", &FreemarkerCoreConfigurable_OBJECT_WRAPPER_KEY_SNAKE_CASE_, NULL,  },
    { "OBJECT_WRAPPER_KEY_CAMEL_CASE_", NULL, 0x19, "Ljava.lang.String;", &FreemarkerCoreConfigurable_OBJECT_WRAPPER_KEY_CAMEL_CASE_, NULL,  },
    { "OBJECT_WRAPPER_KEY_", NULL, 0x19, "Ljava.lang.String;", &FreemarkerCoreConfigurable_OBJECT_WRAPPER_KEY_, NULL,  },
    { "BOOLEAN_FORMAT_KEY_SNAKE_CASE_", NULL, 0x19, "Ljava.lang.String;", &FreemarkerCoreConfigurable_BOOLEAN_FORMAT_KEY_SNAKE_CASE_, NULL,  },
    { "BOOLEAN_FORMAT_KEY_CAMEL_CASE_", NULL, 0x19, "Ljava.lang.String;", &FreemarkerCoreConfigurable_BOOLEAN_FORMAT_KEY_CAMEL_CASE_, NULL,  },
    { "BOOLEAN_FORMAT_KEY_", NULL, 0x19, "Ljava.lang.String;", &FreemarkerCoreConfigurable_BOOLEAN_FORMAT_KEY_, NULL,  },
    { "OUTPUT_ENCODING_KEY_SNAKE_CASE_", NULL, 0x19, "Ljava.lang.String;", &FreemarkerCoreConfigurable_OUTPUT_ENCODING_KEY_SNAKE_CASE_, NULL,  },
    { "OUTPUT_ENCODING_KEY_CAMEL_CASE_", NULL, 0x19, "Ljava.lang.String;", &FreemarkerCoreConfigurable_OUTPUT_ENCODING_KEY_CAMEL_CASE_, NULL,  },
    { "OUTPUT_ENCODING_KEY_", NULL, 0x19, "Ljava.lang.String;", &FreemarkerCoreConfigurable_OUTPUT_ENCODING_KEY_, NULL,  },
    { "URL_ESCAPING_CHARSET_KEY_SNAKE_CASE_", NULL, 0x19, "Ljava.lang.String;", &FreemarkerCoreConfigurable_URL_ESCAPING_CHARSET_KEY_SNAKE_CASE_, NULL,  },
    { "URL_ESCAPING_CHARSET_KEY_CAMEL_CASE_", NULL, 0x19, "Ljava.lang.String;", &FreemarkerCoreConfigurable_URL_ESCAPING_CHARSET_KEY_CAMEL_CASE_, NULL,  },
    { "URL_ESCAPING_CHARSET_KEY_", NULL, 0x19, "Ljava.lang.String;", &FreemarkerCoreConfigurable_URL_ESCAPING_CHARSET_KEY_, NULL,  },
    { "STRICT_BEAN_MODELS_KEY_SNAKE_CASE_", NULL, 0x19, "Ljava.lang.String;", &FreemarkerCoreConfigurable_STRICT_BEAN_MODELS_KEY_SNAKE_CASE_, NULL,  },
    { "STRICT_BEAN_MODELS_KEY_CAMEL_CASE_", NULL, 0x19, "Ljava.lang.String;", &FreemarkerCoreConfigurable_STRICT_BEAN_MODELS_KEY_CAMEL_CASE_, NULL,  },
    { "STRICT_BEAN_MODELS_KEY_", NULL, 0x19, "Ljava.lang.String;", &FreemarkerCoreConfigurable_STRICT_BEAN_MODELS_KEY_, NULL,  },
    { "AUTO_FLUSH_KEY_SNAKE_CASE_", NULL, 0x19, "Ljava.lang.String;", &FreemarkerCoreConfigurable_AUTO_FLUSH_KEY_SNAKE_CASE_, NULL,  },
    { "AUTO_FLUSH_KEY_CAMEL_CASE_", NULL, 0x19, "Ljava.lang.String;", &FreemarkerCoreConfigurable_AUTO_FLUSH_KEY_CAMEL_CASE_, NULL,  },
    { "AUTO_FLUSH_KEY_", NULL, 0x19, "Ljava.lang.String;", &FreemarkerCoreConfigurable_AUTO_FLUSH_KEY_, NULL,  },
    { "NEW_BUILTIN_CLASS_RESOLVER_KEY_SNAKE_CASE_", NULL, 0x19, "Ljava.lang.String;", &FreemarkerCoreConfigurable_NEW_BUILTIN_CLASS_RESOLVER_KEY_SNAKE_CASE_, NULL,  },
    { "NEW_BUILTIN_CLASS_RESOLVER_KEY_CAMEL_CASE_", NULL, 0x19, "Ljava.lang.String;", &FreemarkerCoreConfigurable_NEW_BUILTIN_CLASS_RESOLVER_KEY_CAMEL_CASE_, NULL,  },
    { "NEW_BUILTIN_CLASS_RESOLVER_KEY_", NULL, 0x19, "Ljava.lang.String;", &FreemarkerCoreConfigurable_NEW_BUILTIN_CLASS_RESOLVER_KEY_, NULL,  },
    { "SHOW_ERROR_TIPS_KEY_SNAKE_CASE_", NULL, 0x19, "Ljava.lang.String;", &FreemarkerCoreConfigurable_SHOW_ERROR_TIPS_KEY_SNAKE_CASE_, NULL,  },
    { "SHOW_ERROR_TIPS_KEY_CAMEL_CASE_", NULL, 0x19, "Ljava.lang.String;", &FreemarkerCoreConfigurable_SHOW_ERROR_TIPS_KEY_CAMEL_CASE_, NULL,  },
    { "SHOW_ERROR_TIPS_KEY_", NULL, 0x19, "Ljava.lang.String;", &FreemarkerCoreConfigurable_SHOW_ERROR_TIPS_KEY_, NULL,  },
    { "API_BUILTIN_ENABLED_KEY_SNAKE_CASE_", NULL, 0x19, "Ljava.lang.String;", &FreemarkerCoreConfigurable_API_BUILTIN_ENABLED_KEY_SNAKE_CASE_, NULL,  },
    { "API_BUILTIN_ENABLED_KEY_CAMEL_CASE_", NULL, 0x19, "Ljava.lang.String;", &FreemarkerCoreConfigurable_API_BUILTIN_ENABLED_KEY_CAMEL_CASE_, NULL,  },
    { "API_BUILTIN_ENABLED_KEY_", NULL, 0x19, "Ljava.lang.String;", &FreemarkerCoreConfigurable_API_BUILTIN_ENABLED_KEY_, NULL,  },
    { "LOG_TEMPLATE_EXCEPTIONS_KEY_SNAKE_CASE_", NULL, 0x19, "Ljava.lang.String;", &FreemarkerCoreConfigurable_LOG_TEMPLATE_EXCEPTIONS_KEY_SNAKE_CASE_, NULL,  },
    { "LOG_TEMPLATE_EXCEPTIONS_KEY_CAMEL_CASE_", NULL, 0x19, "Ljava.lang.String;", &FreemarkerCoreConfigurable_LOG_TEMPLATE_EXCEPTIONS_KEY_CAMEL_CASE_, NULL,  },
    { "LOG_TEMPLATE_EXCEPTIONS_KEY_", NULL, 0x19, "Ljava.lang.String;", &FreemarkerCoreConfigurable_LOG_TEMPLATE_EXCEPTIONS_KEY_, NULL,  },
    { "STRICT_BEAN_MODELS_", NULL, 0x19, "Ljava.lang.String;", &FreemarkerCoreConfigurable_STRICT_BEAN_MODELS_, NULL,  },
    { "SETTING_NAMES_SNAKE_CASE_", NULL, 0x1a, "[Ljava.lang.String;", &FreemarkerCoreConfigurable_SETTING_NAMES_SNAKE_CASE_, NULL,  },
    { "SETTING_NAMES_CAMEL_CASE_", NULL, 0x1a, "[Ljava.lang.String;", &FreemarkerCoreConfigurable_SETTING_NAMES_CAMEL_CASE_, NULL,  },
    { "parent_", NULL, 0x2, "Lfreemarker.core.Configurable;", NULL, NULL,  },
    { "properties_", NULL, 0x2, "Ljava.util.Properties;", NULL, NULL,  },
    { "customAttributes_", NULL, 0x2, "Ljava.util.HashMap;", NULL, NULL,  },
    { "locale_", NULL, 0x2, "Ljava.util.Locale;", NULL, NULL,  },
    { "numberFormat_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "timeFormat_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "dateFormat_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "dateTimeFormat_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "timeZone_", NULL, 0x2, "Ljava.util.TimeZone;", NULL, NULL,  },
    { "sqlDataAndTimeTimeZone_", NULL, 0x2, "Ljava.util.TimeZone;", NULL, NULL,  },
    { "sqlDataAndTimeTimeZoneSet_", NULL, 0x2, "Z", NULL, NULL,  },
    { "booleanFormat_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "trueStringValue_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "falseStringValue_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "classicCompatible_", NULL, 0x2, "Ljava.lang.Integer;", NULL, NULL,  },
    { "templateExceptionHandler_", NULL, 0x2, "Lfreemarker.template.TemplateExceptionHandler;", NULL, NULL,  },
    { "arithmeticEngine_", NULL, 0x2, "Lfreemarker.core.ArithmeticEngine;", NULL, NULL,  },
    { "objectWrapper_", NULL, 0x2, "Lfreemarker.template.ObjectWrapper;", NULL, NULL,  },
    { "outputEncoding_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "outputEncodingSet_", NULL, 0x2, "Z", NULL, NULL,  },
    { "urlEscapingCharset_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "urlEscapingCharsetSet_", NULL, 0x2, "Z", NULL, NULL,  },
    { "autoFlush_", NULL, 0x2, "Ljava.lang.Boolean;", NULL, NULL,  },
    { "newBuiltinClassResolver_", NULL, 0x2, "Lfreemarker.core.TemplateClassResolver;", NULL, NULL,  },
    { "showErrorTips_", NULL, 0x2, "Ljava.lang.Boolean;", NULL, NULL,  },
    { "apiBuiltinEnabled_", NULL, 0x2, "Ljava.lang.Boolean;", NULL, NULL,  },
    { "logTemplateExceptions_", NULL, 0x2, "Ljava.lang.Boolean;", NULL, NULL,  },
    { "ALLOWED_CLASSES_", NULL, 0x1a, "Ljava.lang.String;", &FreemarkerCoreConfigurable_ALLOWED_CLASSES_, NULL,  },
    { "TRUSTED_TEMPLATES_", NULL, 0x1a, "Ljava.lang.String;", &FreemarkerCoreConfigurable_TRUSTED_TEMPLATES_, NULL,  },
  };
  static const char *inner_classes[] = {"Lfreemarker.core.Configurable$UnknownSettingException;", "Lfreemarker.core.Configurable$SettingValueAssignmentException;", "Lfreemarker.core.Configurable$KeyValuePair;", "Lfreemarker.core.Configurable$SettingStringParser;"};
  static const J2ObjcClassInfo _FreemarkerCoreConfigurable = { 2, "Configurable", "freemarker.core", NULL, 0x1, 74, methods, 96, fields, 0, NULL, 4, inner_classes, NULL, NULL };
  return &_FreemarkerCoreConfigurable;
}

@end


#line 299
void FreemarkerCoreConfigurable_init(FreemarkerCoreConfigurable *self) {
  (void) FreemarkerCoreConfigurable_initWithFreemarkerTemplateVersion_(self, FreemarkerTemplateConfiguration_get_DEFAULT_INCOMPATIBLE_IMPROVEMENTS_());
}


#line 299
FreemarkerCoreConfigurable *new_FreemarkerCoreConfigurable_init() {
  FreemarkerCoreConfigurable *self = [FreemarkerCoreConfigurable alloc];
  FreemarkerCoreConfigurable_init(self);
  return self;
}


#line 308
void FreemarkerCoreConfigurable_initWithFreemarkerTemplateVersion_(FreemarkerCoreConfigurable *self, FreemarkerTemplateVersion *incompatibleImprovements) {
  (void) NSObject_init(self);
  
#line 309
  FreemarkerTemplate_TemplateAPI_checkVersionNotNullAndSupportedWithFreemarkerTemplateVersion_(incompatibleImprovements);
  
#line 311
  self->parent_ = nil;
  self->properties_ = new_JavaUtilProperties_init();
  
#line 314
  self->locale_ = JavaUtilLocale_getDefault();
  (void) [self->properties_ setPropertyWithNSString:FreemarkerCoreConfigurable_LOCALE_KEY_ withNSString:[((JavaUtilLocale *) nil_chk(self->locale_)) description]];
  
#line 317
  self->timeZone_ = JavaUtilTimeZone_getDefault();
  (void) [self->properties_ setPropertyWithNSString:FreemarkerCoreConfigurable_TIME_ZONE_KEY_ withNSString:[((JavaUtilTimeZone *) nil_chk(self->timeZone_)) getID]];
  
#line 320
  self->sqlDataAndTimeTimeZone_ = nil;
  (void) [self->properties_ setPropertyWithNSString:FreemarkerCoreConfigurable_SQL_DATE_AND_TIME_TIME_ZONE_KEY_ withNSString:NSString_valueOf_(self->sqlDataAndTimeTimeZone_)];
  
#line 323
  self->numberFormat_ = @"number";
  (void) [self->properties_ setPropertyWithNSString:FreemarkerCoreConfigurable_NUMBER_FORMAT_KEY_ withNSString:self->numberFormat_];
  
#line 326
  self->timeFormat_ = @"";
  (void) [self->properties_ setPropertyWithNSString:FreemarkerCoreConfigurable_TIME_FORMAT_KEY_ withNSString:self->timeFormat_];
  
#line 329
  self->dateFormat_ = @"";
  (void) [self->properties_ setPropertyWithNSString:FreemarkerCoreConfigurable_DATE_FORMAT_KEY_ withNSString:self->dateFormat_];
  
#line 332
  self->dateTimeFormat_ = @"";
  (void) [self->properties_ setPropertyWithNSString:FreemarkerCoreConfigurable_DATETIME_FORMAT_KEY_ withNSString:self->dateTimeFormat_];
  
#line 335
  self->classicCompatible_ = new_JavaLangInteger_initWithInt_(0);
  (void) [self->properties_ setPropertyWithNSString:FreemarkerCoreConfigurable_CLASSIC_COMPATIBLE_KEY_ withNSString:[self->classicCompatible_ description]];
  
#line 338
  self->templateExceptionHandler_ = FreemarkerTemplate_TemplateAPI_getDefaultTemplateExceptionHandlerWithFreemarkerTemplateVersion_(
#line 339
  incompatibleImprovements);
  (void) [self->properties_ setPropertyWithNSString:FreemarkerCoreConfigurable_TEMPLATE_EXCEPTION_HANDLER_KEY_ withNSString:[[((id<FreemarkerTemplateTemplateExceptionHandler>) nil_chk(self->templateExceptionHandler_)) getClass] getName]];
  
#line 342
  self->arithmeticEngine_ = FreemarkerCoreArithmeticEngine_get_BIGDECIMAL_ENGINE_();
  (void) [self->properties_ setPropertyWithNSString:FreemarkerCoreConfigurable_ARITHMETIC_ENGINE_KEY_ withNSString:[[((FreemarkerCoreArithmeticEngine *) nil_chk(self->arithmeticEngine_)) getClass] getName]];
  
#line 345
  self->objectWrapper_ = FreemarkerTemplateConfiguration_getDefaultObjectWrapperWithFreemarkerTemplateVersion_(incompatibleImprovements);
  
#line 348
  self->autoFlush_ = JavaLangBoolean_get_TRUE__();
  (void) [self->properties_ setPropertyWithNSString:FreemarkerCoreConfigurable_AUTO_FLUSH_KEY_ withNSString:[((JavaLangBoolean *) nil_chk(self->autoFlush_)) description]];
  
#line 351
  self->newBuiltinClassResolver_ = FreemarkerCoreTemplateClassResolver_get_UNRESTRICTED_RESOLVER_();
  (void) [self->properties_ setPropertyWithNSString:FreemarkerCoreConfigurable_NEW_BUILTIN_CLASS_RESOLVER_KEY_ withNSString:[[((id<FreemarkerCoreTemplateClassResolver>) nil_chk(self->newBuiltinClassResolver_)) getClass] getName]];
  
#line 354
  self->showErrorTips_ = JavaLangBoolean_get_TRUE__();
  (void) [self->properties_ setPropertyWithNSString:FreemarkerCoreConfigurable_SHOW_ERROR_TIPS_KEY_ withNSString:[((JavaLangBoolean *) nil_chk(self->showErrorTips_)) description]];
  
#line 357
  self->apiBuiltinEnabled_ = JavaLangBoolean_get_FALSE__();
  (void) [self->properties_ setPropertyWithNSString:FreemarkerCoreConfigurable_API_BUILTIN_ENABLED_KEY_ withNSString:[((JavaLangBoolean *) nil_chk(self->apiBuiltinEnabled_)) description]];
  
#line 360
  self->logTemplateExceptions_ = JavaLangBoolean_valueOfWithBoolean_(FreemarkerTemplate_TemplateAPI_getDefaultLogTemplateExceptionsWithFreemarkerTemplateVersion_(
#line 361
  incompatibleImprovements));
  (void) [self->properties_ setPropertyWithNSString:FreemarkerCoreConfigurable_LOG_TEMPLATE_EXCEPTIONS_KEY_ withNSString:[self->logTemplateExceptions_ description]];
  
#line 367
  [self setBooleanFormatWithNSString:FreemarkerCoreConfigurable_C_TRUE_FALSE_];
  
#line 369
  self->customAttributes_ = new_JavaUtilHashMap_init();
}


#line 308
FreemarkerCoreConfigurable *new_FreemarkerCoreConfigurable_initWithFreemarkerTemplateVersion_(FreemarkerTemplateVersion *incompatibleImprovements) {
  FreemarkerCoreConfigurable *self = [FreemarkerCoreConfigurable alloc];
  FreemarkerCoreConfigurable_initWithFreemarkerTemplateVersion_(self, incompatibleImprovements);
  return self;
}


#line 376
void FreemarkerCoreConfigurable_initWithFreemarkerCoreConfigurable_(FreemarkerCoreConfigurable *self, FreemarkerCoreConfigurable *parent) {
  (void) NSObject_init(self);
  
#line 377
  self->parent_ = parent;
  self->locale_ = nil;
  self->numberFormat_ = nil;
  self->classicCompatible_ = nil;
  self->templateExceptionHandler_ = nil;
  self->properties_ = new_JavaUtilProperties_initWithJavaUtilProperties_(((FreemarkerCoreConfigurable *) nil_chk(parent))->properties_);
  self->customAttributes_ = new_JavaUtilHashMap_init();
}


#line 376
FreemarkerCoreConfigurable *new_FreemarkerCoreConfigurable_initWithFreemarkerCoreConfigurable_(FreemarkerCoreConfigurable *parent) {
  FreemarkerCoreConfigurable *self = [FreemarkerCoreConfigurable alloc];
  FreemarkerCoreConfigurable_initWithFreemarkerCoreConfigurable_(self, parent);
  return self;
}


#line 450
NSString *FreemarkerCoreConfigurable_classicCompatibilityIntToStringWithJavaLangInteger_(FreemarkerCoreConfigurable *self, JavaLangInteger *i) {
  if (i == nil) return nil;
  else if ([i intValue] == 0) return FreemarkerCoreMiscUtil_get_C_FALSE_();
  else if ([i intValue] == 1) return FreemarkerCoreMiscUtil_get_C_TRUE_();
  else return [i description];
}


#line 734
FreemarkerCore_ErrorDescriptionBuilder *FreemarkerCoreConfigurable_getNullBooleanFormatErrorDescription(FreemarkerCoreConfigurable *self) {
  return [new_FreemarkerCore_ErrorDescriptionBuilder_initWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){
#line 736
    @"Can't convert boolean to string automatically, because the \"", FreemarkerCoreConfigurable_BOOLEAN_FORMAT_KEY_, @"\" setting was ", new_FreemarkerCore_DelayedJQuote_initWithId_(
#line 737
    [self getBooleanFormat]),
#line 738
    ([((NSString *) nil_chk([self getBooleanFormat])) isEqual:FreemarkerCoreConfigurable_C_TRUE_FALSE_] ?
#line 739
    @", which is the legacy default computer-language format, and hence isn't accepted." :
#line 740
    @".") } count:5 type:NSObject_class_()]) tipsWithNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"If you just want \"true\"/\"false\" result as you are generting computer-language output, use \"?c\", like ${myBool?c}.",
#line 743
    @"You can write myBool?string('yes', 'no') and like to specify boolean formatting in place.", [IOSObjectArray newArrayWithObjects:(id[]){
#line 745
      @"If you need the same two values on most places, the programmers should set the \"", FreemarkerCoreConfigurable_BOOLEAN_FORMAT_KEY_,
#line 746
      @"\" setting to something like \"yes,no\"." } count:3 type:NSObject_class_()] } count:3 type:NSObject_class_()]];
    }


#line 1646
JavaUtilTimeZone *FreemarkerCoreConfigurable_parseTimeZoneSettingValueWithNSString_(FreemarkerCoreConfigurable *self, NSString *value) {
  JavaUtilTimeZone *tz;
  if ([((NSString *) nil_chk(FreemarkerCoreConfigurable_JVM_DEFAULT_)) equalsIgnoreCase:value]) {
    tz = JavaUtilTimeZone_getDefault();
  }
  else {
    
#line 1651
    tz = JavaUtilTimeZone_getTimeZoneWithNSString_(value);
  }
  return tz;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreConfigurable)


#line 1731
@implementation FreemarkerCoreConfigurable_UnknownSettingException

- (instancetype)initWithFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env
                                     withNSString:(NSString *)name
                                     withNSString:(NSString *)correctedName {
  FreemarkerCoreConfigurable_UnknownSettingException_initWithFreemarkerCoreEnvironment_withNSString_withNSString_(self, env, name, correctedName);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithFreemarkerCoreEnvironment:withNSString:withNSString:", "UnknownSettingException", NULL, 0x2, NULL, NULL },
  };
  static const J2ObjcClassInfo _FreemarkerCoreConfigurable_UnknownSettingException = { 2, "UnknownSettingException", "freemarker.core", "Configurable", 0x9, 1, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerCoreConfigurable_UnknownSettingException;
}

@end


#line 1733
void FreemarkerCoreConfigurable_UnknownSettingException_initWithFreemarkerCoreEnvironment_withNSString_withNSString_(FreemarkerCoreConfigurable_UnknownSettingException *self, FreemarkerCoreEnvironment *env, NSString *name, NSString *correctedName) {
  (void) FreemarkerCore_MiscTemplateException_initWithFreemarkerCoreEnvironment_withNSObjectArray_(self, env, [IOSObjectArray newArrayWithObjects:(id[]){
#line 1735
    @"Unknown FreeMarker configuration setting: ", new_FreemarkerCore_DelayedJQuote_initWithId_(name),
#line 1736
    correctedName == nil ?
#line 1737
    @"" : [IOSObjectArray newArrayWithObjects:(id[]){ @". You may meant: ", new_FreemarkerCore_DelayedJQuote_initWithId_(correctedName) } count:2 type:NSObject_class_()] } count:3 type:NSObject_class_()]);
  }


#line 1733
FreemarkerCoreConfigurable_UnknownSettingException *new_FreemarkerCoreConfigurable_UnknownSettingException_initWithFreemarkerCoreEnvironment_withNSString_withNSString_(FreemarkerCoreEnvironment *env, NSString *name, NSString *correctedName) {
  FreemarkerCoreConfigurable_UnknownSettingException *self = [FreemarkerCoreConfigurable_UnknownSettingException alloc];
  FreemarkerCoreConfigurable_UnknownSettingException_initWithFreemarkerCoreEnvironment_withNSString_withNSString_(self, env, name, correctedName);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreConfigurable_UnknownSettingException)


#line 1748
@implementation FreemarkerCoreConfigurable_SettingValueAssignmentException

- (instancetype)initWithFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env
                                     withNSString:(NSString *)name
                                     withNSString:(NSString *)value
                            withJavaLangThrowable:(JavaLangThrowable *)cause {
  FreemarkerCoreConfigurable_SettingValueAssignmentException_initWithFreemarkerCoreEnvironment_withNSString_withNSString_withJavaLangThrowable_(self, env, name, value, cause);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithFreemarkerCoreEnvironment:withNSString:withNSString:withJavaLangThrowable:", "SettingValueAssignmentException", NULL, 0x2, NULL, NULL },
  };
  static const J2ObjcClassInfo _FreemarkerCoreConfigurable_SettingValueAssignmentException = { 2, "SettingValueAssignmentException", "freemarker.core", "Configurable", 0x9, 1, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerCoreConfigurable_SettingValueAssignmentException;
}

@end


#line 1750
void FreemarkerCoreConfigurable_SettingValueAssignmentException_initWithFreemarkerCoreEnvironment_withNSString_withNSString_withJavaLangThrowable_(FreemarkerCoreConfigurable_SettingValueAssignmentException *self, FreemarkerCoreEnvironment *env, NSString *name, NSString *value, JavaLangThrowable *cause) {
  (void) FreemarkerCore_MiscTemplateException_initWithJavaLangThrowable_withFreemarkerCoreEnvironment_withNSObjectArray_(self, cause, env, [IOSObjectArray newArrayWithObjects:(id[]){
#line 1752
    @"Failed to set FreeMarker configuration setting ", new_FreemarkerCore_DelayedJQuote_initWithId_(name),
#line 1753
    @" to value ", new_FreemarkerCore_DelayedJQuote_initWithId_(value), @"; see cause exception." } count:5 type:NSObject_class_()]);
  }


#line 1750
FreemarkerCoreConfigurable_SettingValueAssignmentException *new_FreemarkerCoreConfigurable_SettingValueAssignmentException_initWithFreemarkerCoreEnvironment_withNSString_withNSString_withJavaLangThrowable_(FreemarkerCoreEnvironment *env, NSString *name, NSString *value, JavaLangThrowable *cause) {
  FreemarkerCoreConfigurable_SettingValueAssignmentException *self = [FreemarkerCoreConfigurable_SettingValueAssignmentException alloc];
  FreemarkerCoreConfigurable_SettingValueAssignmentException_initWithFreemarkerCoreEnvironment_withNSString_withNSString_withJavaLangThrowable_(self, env, name, value, cause);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreConfigurable_SettingValueAssignmentException)


#line 1911
@implementation FreemarkerCoreConfigurable_KeyValuePair


#line 1915
- (instancetype)initWithId:(id)key
                    withId:(id)value {
  FreemarkerCoreConfigurable_KeyValuePair_initWithId_withId_(self, key, value);
  return self;
}


#line 1920
- (id)getKey {
  return key_;
}

- (id)getValue {
  return value_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithId:withId:", "KeyValuePair", NULL, 0x0, NULL, NULL },
    { "getKey", NULL, "Ljava.lang.Object;", 0x0, NULL, NULL },
    { "getValue", NULL, "Ljava.lang.Object;", 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "key_", NULL, 0x12, "Ljava.lang.Object;", NULL, NULL,  },
    { "value_", NULL, 0x12, "Ljava.lang.Object;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerCoreConfigurable_KeyValuePair = { 2, "KeyValuePair", "freemarker.core", "Configurable", 0xa, 3, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerCoreConfigurable_KeyValuePair;
}

@end


#line 1915
void FreemarkerCoreConfigurable_KeyValuePair_initWithId_withId_(FreemarkerCoreConfigurable_KeyValuePair *self, id key, id value) {
  (void) NSObject_init(self);
  
#line 1916
  self->key_ = key;
  self->value_ = value;
}


#line 1915
FreemarkerCoreConfigurable_KeyValuePair *new_FreemarkerCoreConfigurable_KeyValuePair_initWithId_withId_(id key, id value) {
  FreemarkerCoreConfigurable_KeyValuePair *self = [FreemarkerCoreConfigurable_KeyValuePair alloc];
  FreemarkerCoreConfigurable_KeyValuePair_initWithId_withId_(self, key, value);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreConfigurable_KeyValuePair)


#line 1932
@implementation FreemarkerCoreConfigurable_SettingStringParser


#line 1937
- (instancetype)initWithNSString:(NSString *)text {
  FreemarkerCoreConfigurable_SettingStringParser_initWithNSString_(self, text);
  return self;
}


#line 1943
- (JavaUtilArrayList *)parseAsSegmentedList {
  JavaUtilArrayList *segments = new_JavaUtilArrayList_init();
  JavaUtilArrayList *currentSegment = nil;
  
#line 1947
  jchar c;
  while (YES) {
    c = [self skipWS];
    if (c == ' ') break;
    NSString *item = [self fetchStringValue];
    c = [self skipWS];
    
#line 1954
    if (c == ':') {
      currentSegment = new_JavaUtilArrayList_init();
      [segments addWithId:new_FreemarkerCoreConfigurable_KeyValuePair_initWithId_withId_(item, currentSegment)];
    }
    else {
      
#line 1958
      if (currentSegment == nil) {
        @throw new_FreemarkerCoreParseException_initWithNSString_withId_withId_(@"The very first list item must be followed by \":\" so it will be the key for the following sub-list.", JavaLangInteger_valueOfWithInt_(
#line 1962
        0), JavaLangInteger_valueOfWithInt_(0));
      }
      [((JavaUtilArrayList *) nil_chk(currentSegment)) addWithId:item];
    }
    
#line 1967
    if (c == ' ') break;
    if (c != ',' && c != ':') @throw new_FreemarkerCoreParseException_initWithNSString_withId_withId_(JreStrcat("$CC", @"Expected \",\" or \":\" or the end of text but found \"",
#line 1970
    c, '"'), JavaLangInteger_valueOfWithInt_(0), JavaLangInteger_valueOfWithInt_(0));
    p_++;
  }
  return segments;
}


#line 1976
- (JavaUtilArrayList *)parseAsList {
  jchar c;
  JavaUtilArrayList *seq = new_JavaUtilArrayList_init();
  while (YES) {
    c = [self skipWS];
    if (c == ' ') break;
    [seq addWithId:[self fetchStringValue]];
    c = [self skipWS];
    if (c == ' ') break;
    if (c != ',') @throw new_FreemarkerCoreParseException_initWithNSString_withId_withId_(JreStrcat("$CC", @"Expected \",\" or the end of text but found \"",
#line 1987
    c, '"'), JavaLangInteger_valueOfWithInt_(0), JavaLangInteger_valueOfWithInt_(0));
    p_++;
  }
  return seq;
}

- (JavaUtilHashMap *)parseAsImportList {
  jchar c;
  JavaUtilHashMap *map = new_JavaUtilHashMap_init();
  while (YES) {
    c = [self skipWS];
    if (c == ' ') break;
    NSString *lib = [self fetchStringValue];
    
#line 2001
    c = [self skipWS];
    if (c == ' ') @throw new_FreemarkerCoreParseException_initWithNSString_withId_withId_(
#line 2003
    @"Unexpected end of text: expected \"as\"", JavaLangInteger_valueOfWithInt_(0), JavaLangInteger_valueOfWithInt_(0));
    NSString *s = [self fetchKeyword];
    if (![((NSString *) nil_chk(s)) equalsIgnoreCase:@"as"]) @throw new_FreemarkerCoreParseException_initWithNSString_withId_withId_(JreStrcat("$$", @"Expected \"as\", but found ", FreemarkerTemplateUtilityStringUtil_jQuoteWithNSString_(
#line 2006
    s)), JavaLangInteger_valueOfWithInt_(0), JavaLangInteger_valueOfWithInt_(0));
    
#line 2008
    c = [self skipWS];
    if (c == ' ') @throw new_FreemarkerCoreParseException_initWithNSString_withId_withId_(
#line 2010
    @"Unexpected end of text: expected gate hash name", JavaLangInteger_valueOfWithInt_(0), JavaLangInteger_valueOfWithInt_(0));
    NSString *ns = [self fetchStringValue];
    
#line 2013
    (void) [map putWithId:ns withId:lib];
    
#line 2015
    c = [self skipWS];
    if (c == ' ') break;
    if (c != ',') @throw new_FreemarkerCoreParseException_initWithNSString_withId_withId_(JreStrcat("$CC", @"Expected \",\" or the end of text but found \"",
#line 2019
    c, '"'), JavaLangInteger_valueOfWithInt_(0), JavaLangInteger_valueOfWithInt_(0));
    p_++;
  }
  return map;
}


#line 2025
- (NSString *)fetchStringValue {
  NSString *w = FreemarkerCoreConfigurable_SettingStringParser_fetchWord(self);
  if ([((NSString *) nil_chk(w)) hasPrefix:@"'"] || [w hasPrefix:@"\""]) {
    w = [w substring:1 endIndex:((jint) [w length]) - 1];
  }
  return FreemarkerTemplateUtilityStringUtil_FTLStringLiteralDecWithNSString_(w);
}

- (NSString *)fetchKeyword {
  NSString *w = FreemarkerCoreConfigurable_SettingStringParser_fetchWord(self);
  if ([((NSString *) nil_chk(w)) hasPrefix:@"'"] || [w hasPrefix:@"\""]) {
    @throw new_FreemarkerCoreParseException_initWithNSString_withId_withId_(JreStrcat("$$", @"Keyword expected, but a string value found: ",
#line 2037
    w), JavaLangInteger_valueOfWithInt_(0), JavaLangInteger_valueOfWithInt_(0));
  }
  return w;
}


#line 2042
- (jchar)skipWS {
  jchar c;
  while (p_ < ln_) {
    c = [((NSString *) nil_chk(text_)) charAtWithInt:p_];
    if (!JavaLangCharacter_isWhitespaceWithChar_(c)) return c;
    p_++;
  }
  return ' ';
}

- (NSString *)fetchWord {
  return FreemarkerCoreConfigurable_SettingStringParser_fetchWord(self);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithNSString:", "SettingStringParser", NULL, 0x2, NULL, NULL },
    { "parseAsSegmentedList", NULL, "Ljava.util.ArrayList;", 0x0, "Lfreemarker.core.ParseException;", NULL },
    { "parseAsList", NULL, "Ljava.util.ArrayList;", 0x0, "Lfreemarker.core.ParseException;", NULL },
    { "parseAsImportList", NULL, "Ljava.util.HashMap;", 0x0, "Lfreemarker.core.ParseException;", NULL },
    { "fetchStringValue", NULL, "Ljava.lang.String;", 0x0, "Lfreemarker.core.ParseException;", NULL },
    { "fetchKeyword", NULL, "Ljava.lang.String;", 0x0, "Lfreemarker.core.ParseException;", NULL },
    { "skipWS", NULL, "C", 0x0, NULL, NULL },
    { "fetchWord", NULL, "Ljava.lang.String;", 0x2, "Lfreemarker.core.ParseException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "text_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "p_", NULL, 0x2, "I", NULL, NULL,  },
    { "ln_", NULL, 0x2, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerCoreConfigurable_SettingStringParser = { 2, "SettingStringParser", "freemarker.core", "Configurable", 0xa, 8, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerCoreConfigurable_SettingStringParser;
}

@end


#line 1937
void FreemarkerCoreConfigurable_SettingStringParser_initWithNSString_(FreemarkerCoreConfigurable_SettingStringParser *self, NSString *text) {
  (void) NSObject_init(self);
  
#line 1938
  self->text_ = text;
  self->p_ = 0;
  self->ln_ = ((jint) [((NSString *) nil_chk(text)) length]);
}


#line 1937
FreemarkerCoreConfigurable_SettingStringParser *new_FreemarkerCoreConfigurable_SettingStringParser_initWithNSString_(NSString *text) {
  FreemarkerCoreConfigurable_SettingStringParser *self = [FreemarkerCoreConfigurable_SettingStringParser alloc];
  FreemarkerCoreConfigurable_SettingStringParser_initWithNSString_(self, text);
  return self;
}


#line 2052
NSString *FreemarkerCoreConfigurable_SettingStringParser_fetchWord(FreemarkerCoreConfigurable_SettingStringParser *self) {
  if (self->p_ == self->ln_) @throw new_FreemarkerCoreParseException_initWithNSString_withId_withId_(
#line 2054
  @"Unexpeced end of text", JavaLangInteger_valueOfWithInt_(0), JavaLangInteger_valueOfWithInt_(0));
  
#line 2056
  jchar c = [((NSString *) nil_chk(self->text_)) charAtWithInt:self->p_];
  jint b = self->p_;
  if (c == '\'' || c == '"') {
    jboolean escaped = NO;
    jchar q = c;
    self->p_++;
    while (self->p_ < self->ln_) {
      c = [self->text_ charAtWithInt:self->p_];
      if (!escaped) {
        if (c == '\\') {
          escaped = YES;
        }
        else
#line 2067
        if (c == q) {
          break;
        }
      }
      else {
        
#line 2071
        escaped = NO;
      }
      self->p_++;
    }
    if (self->p_ == self->ln_) {
      @throw new_FreemarkerCoreParseException_initWithNSString_withId_withId_(JreStrcat("$C", @"Missing ", q), JavaLangInteger_valueOfWithInt_(0), JavaLangInteger_valueOfWithInt_(0));
    }
    self->p_++;
    return [self->text_ substring:b endIndex:self->p_];
  }
  else {
    
#line 2081
    do {
      c = [self->text_ charAtWithInt:self->p_];
      if (!(JavaLangCharacter_isLetterOrDigitWithChar_(c) ||
#line 2084
      c == '/' || c == '\\' || c == '_' ||
#line 2085
      c == '.' || c == '-' || c == '!' ||
#line 2086
      c == '*' || c == '?')) break;
      self->p_++;
    }
    while (
#line 2088
    self->p_ < self->ln_);
    if (b == self->p_) {
      @throw new_FreemarkerCoreParseException_initWithNSString_withId_withId_(JreStrcat("$C", @"Unexpected character: ", c), JavaLangInteger_valueOfWithInt_(0), JavaLangInteger_valueOfWithInt_(0));
    }
    else {
      
#line 2092
      return [self->text_ substring:b endIndex:self->p_];
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreConfigurable_SettingStringParser)
