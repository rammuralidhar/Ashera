//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/InvalidReferenceException.java
//

#ifndef _FreemarkerCoreInvalidReferenceException_H_
#define _FreemarkerCoreInvalidReferenceException_H_

#include "J2ObjC_header.h"
#include "TemplateException.h"

@class FreemarkerCoreEnvironment;
@class FreemarkerCoreExpression;
@class FreemarkerCore_ErrorDescriptionBuilder;

/**
 @brief A subclass of TemplateException that says that an FTL expression has evaluated to <code>null</code> or it refers to something that doesn't exist.
 At least in FreeMarker 2.3.x these two cases aren't distinguished.
 */
@interface FreemarkerCoreInvalidReferenceException : FreemarkerTemplateTemplateException

#pragma mark Public

/**
 @brief Creates and invalid reference exception that contains no information about what was missing or null.
 As such, try to avoid this constructor.
 */
- (instancetype)initWithFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env;

/**
 @brief Creates and invalid reference exception that contains no programmatically extractable information about the blamed expression.
 As such, try to avoid this constructor, unless need to raise this expression from outside the FreeMarker core.
 */
- (instancetype)initWithNSString:(NSString *)description_
   withFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env;

#pragma mark Package-Private

/**
 @brief This is the recommended constructor, but it's only used internally, and has no backward compatibility guarantees.
 @param expression The expression that evaluates to missing or null. The last step of the expression should be the failing one, like in <code>goodStep.failingStep.furtherStep</code> it should only contain <code>goodStep.failingStep</code> .
 */
- (instancetype)initWithFreemarkerCore_ErrorDescriptionBuilder:(FreemarkerCore_ErrorDescriptionBuilder *)description_
                                 withFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env
                                  withFreemarkerCoreExpression:(FreemarkerCoreExpression *)expression;

/**
 @brief Use this whenever possible, as it returns #FAST_INSTANCE instead of creating a new instance, when appropriate.
 */
+ (FreemarkerCoreInvalidReferenceException *)getInstanceWithFreemarkerCoreExpression:(FreemarkerCoreExpression *)blamed
                                                       withFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env;

/**
 @brief Used for assignments that use operators like <code>+=</code> , when the target variable was null/missing.
 */
+ (FreemarkerCoreInvalidReferenceException *)getInstanceWithNSString:(NSString *)missingAssignedVarName
                                                        withNSString:(NSString *)assignmentOperator
                                       withFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env;

@end

J2OBJC_STATIC_INIT(FreemarkerCoreInvalidReferenceException)

FOUNDATION_EXPORT FreemarkerCoreInvalidReferenceException *FreemarkerCoreInvalidReferenceException_FAST_INSTANCE_;
J2OBJC_STATIC_FIELD_GETTER(FreemarkerCoreInvalidReferenceException, FAST_INSTANCE_, FreemarkerCoreInvalidReferenceException *)

FOUNDATION_EXPORT void FreemarkerCoreInvalidReferenceException_initWithFreemarkerCoreEnvironment_(FreemarkerCoreInvalidReferenceException *self, FreemarkerCoreEnvironment *env);

FOUNDATION_EXPORT FreemarkerCoreInvalidReferenceException *new_FreemarkerCoreInvalidReferenceException_initWithFreemarkerCoreEnvironment_(FreemarkerCoreEnvironment *env) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void FreemarkerCoreInvalidReferenceException_initWithNSString_withFreemarkerCoreEnvironment_(FreemarkerCoreInvalidReferenceException *self, NSString *description_, FreemarkerCoreEnvironment *env);

FOUNDATION_EXPORT FreemarkerCoreInvalidReferenceException *new_FreemarkerCoreInvalidReferenceException_initWithNSString_withFreemarkerCoreEnvironment_(NSString *description_, FreemarkerCoreEnvironment *env) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void FreemarkerCoreInvalidReferenceException_initWithFreemarkerCore_ErrorDescriptionBuilder_withFreemarkerCoreEnvironment_withFreemarkerCoreExpression_(FreemarkerCoreInvalidReferenceException *self, FreemarkerCore_ErrorDescriptionBuilder *description_, FreemarkerCoreEnvironment *env, FreemarkerCoreExpression *expression);

FOUNDATION_EXPORT FreemarkerCoreInvalidReferenceException *new_FreemarkerCoreInvalidReferenceException_initWithFreemarkerCore_ErrorDescriptionBuilder_withFreemarkerCoreEnvironment_withFreemarkerCoreExpression_(FreemarkerCore_ErrorDescriptionBuilder *description_, FreemarkerCoreEnvironment *env, FreemarkerCoreExpression *expression) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT FreemarkerCoreInvalidReferenceException *FreemarkerCoreInvalidReferenceException_getInstanceWithFreemarkerCoreExpression_withFreemarkerCoreEnvironment_(FreemarkerCoreExpression *blamed, FreemarkerCoreEnvironment *env);

FOUNDATION_EXPORT FreemarkerCoreInvalidReferenceException *FreemarkerCoreInvalidReferenceException_getInstanceWithNSString_withNSString_withFreemarkerCoreEnvironment_(NSString *missingAssignedVarName, NSString *assignmentOperator, FreemarkerCoreEnvironment *env);

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerCoreInvalidReferenceException)

#endif // _FreemarkerCoreInvalidReferenceException_H_
