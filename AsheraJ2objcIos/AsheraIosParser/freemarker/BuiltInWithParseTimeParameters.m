//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/BuiltInWithParseTimeParameters.java
//


#include "BuiltInWithParseTimeParameters.h"
#include "Expression.h"
#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "ParameterRole.h"
#include "ParseException.h"
#include "SpecialBuiltIn.h"
#include "Template.h"
#include "Token.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/StringBuffer.h"
#include "java/util/List.h"

#line 0 "/Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/BuiltInWithParseTimeParameters.java"


#line 21
@implementation FreemarkerCoreBuiltInWithParseTimeParameters

- (void)bindToParametersWithJavaUtilList:(id<JavaUtilList>)parameters
                 withFreemarkerCoreToken:(FreemarkerCoreToken *)openParen
                 withFreemarkerCoreToken:(FreemarkerCoreToken *)closeParen {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}


#line 26
- (NSString *)getCanonicalForm {
  JavaLangStringBuffer *buf = new_JavaLangStringBuffer_init();
  
#line 29
  (void) [buf appendWithNSString:[super getCanonicalForm]];
  
#line 31
  (void) [buf appendWithNSString:@"("];
  id<JavaUtilList> args = [self getArgumentsAsList];
  jint size = [((id<JavaUtilList>) nil_chk(args)) size];
  for (jint i = 0; i < size; i++) {
    if (i != 0) {
      (void) [buf appendWithNSString:@", "];
    }
    FreemarkerCoreExpression *arg = (FreemarkerCoreExpression *) check_class_cast([args getWithInt:i], [FreemarkerCoreExpression class]);
    (void) [buf appendWithNSString:[((FreemarkerCoreExpression *) nil_chk(arg)) getCanonicalForm]];
  }
  (void) [buf appendWithNSString:@")"];
  
#line 43
  return [buf description];
}


#line 46
- (NSString *)getNodeTypeSymbol {
  return JreStrcat("$$", [super getNodeTypeSymbol], @"(...)");
}

- (jint)getParameterCount {
  return [super getParameterCount] + [self getArgumentsCount];
}

- (id)getParameterValueWithInt:(jint)idx {
  jint superParamCnt = [super getParameterCount];
  if (idx < superParamCnt) {
    return [super getParameterValueWithInt:idx];
  }
  
#line 60
  jint argIdx = idx - superParamCnt;
  return [self getArgumentParameterValueWithInt:argIdx];
}


#line 64
- (FreemarkerCoreParameterRole *)getParameterRoleWithInt:(jint)idx {
  jint superParamCnt = [super getParameterCount];
  if (idx < superParamCnt) {
    return [super getParameterRoleWithInt:idx];
  }
  
#line 70
  if (idx - superParamCnt < [self getArgumentsCount]) {
    return FreemarkerCoreParameterRole_get_ARGUMENT_VALUE_();
  }
  else {
    
#line 73
    @throw new_JavaLangIndexOutOfBoundsException_init();
  }
}


#line 77
- (FreemarkerCoreParseException *)newArgumentCountExceptionWithNSString:(NSString *)ordinalityDesc
                                                withFreemarkerCoreToken:(FreemarkerCoreToken *)openParen
                                                withFreemarkerCoreToken:(FreemarkerCoreToken *)closeParen {
  return new_FreemarkerCoreParseException_initWithNSString_withFreemarkerTemplateTemplate_withInt_withInt_withInt_withInt_(JreStrcat("C$$$$", '?',
#line 79
  key_, @"(...) ", ordinalityDesc, @" parameters"), [self getTemplate], ((FreemarkerCoreToken *) nil_chk(
#line 80
  openParen))->beginLine_, openParen->beginColumn_, ((FreemarkerCoreToken *) nil_chk(
#line 81
  closeParen))->endLine_, closeParen->endColumn_);
}


#line 84
- (FreemarkerCoreExpression *)deepCloneWithIdentifierReplaced_innerWithNSString:(NSString *)replacedIdentifier
                                                   withFreemarkerCoreExpression:(FreemarkerCoreExpression *)replacement
                                 withFreemarkerCoreExpression_ReplacemenetState:(FreemarkerCoreExpression_ReplacemenetState *)replacementState {
  
#line 86
  FreemarkerCoreExpression *clone = [super deepCloneWithIdentifierReplaced_innerWithNSString:replacedIdentifier withFreemarkerCoreExpression:replacement withFreemarkerCoreExpression_ReplacemenetState:replacementState];
  [self cloneArgumentsWithFreemarkerCoreExpression:clone withNSString:replacedIdentifier withFreemarkerCoreExpression:replacement withFreemarkerCoreExpression_ReplacemenetState:replacementState];
  return clone;
}


#line 91
- (id<JavaUtilList>)getArgumentsAsList {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 93
- (jint)getArgumentsCount {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 95
- (FreemarkerCoreExpression *)getArgumentParameterValueWithInt:(jint)argIdx {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 97
- (void)cloneArgumentsWithFreemarkerCoreExpression:(FreemarkerCoreExpression *)clone
                                      withNSString:(NSString *)replacedIdentifier
                      withFreemarkerCoreExpression:(FreemarkerCoreExpression *)replacement
    withFreemarkerCoreExpression_ReplacemenetState:(FreemarkerCoreExpression_ReplacemenetState *)replacementState {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (instancetype)init {
  FreemarkerCoreBuiltInWithParseTimeParameters_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "bindToParametersWithJavaUtilList:withFreemarkerCoreToken:withFreemarkerCoreToken:", "bindToParameters", "V", 0x400, "Lfreemarker.core.ParseException;", NULL },
    { "getCanonicalForm", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getNodeTypeSymbol", NULL, "Ljava.lang.String;", 0x0, NULL, NULL },
    { "getParameterCount", NULL, "I", 0x0, NULL, NULL },
    { "getParameterValueWithInt:", "getParameterValue", "Ljava.lang.Object;", 0x0, NULL, NULL },
    { "getParameterRoleWithInt:", "getParameterRole", "Lfreemarker.core.ParameterRole;", 0x0, NULL, NULL },
    { "newArgumentCountExceptionWithNSString:withFreemarkerCoreToken:withFreemarkerCoreToken:", "newArgumentCountException", "Lfreemarker.core.ParseException;", 0x4, NULL, NULL },
    { "deepCloneWithIdentifierReplaced_innerWithNSString:withFreemarkerCoreExpression:withFreemarkerCoreExpression_ReplacemenetState:", "deepCloneWithIdentifierReplaced_inner", "Lfreemarker.core.Expression;", 0x4, NULL, NULL },
    { "getArgumentsAsList", NULL, "Ljava.util.List;", 0x404, NULL, NULL },
    { "getArgumentsCount", NULL, "I", 0x404, NULL, NULL },
    { "getArgumentParameterValueWithInt:", "getArgumentParameterValue", "Lfreemarker.core.Expression;", 0x404, NULL, NULL },
    { "cloneArgumentsWithFreemarkerCoreExpression:withNSString:withFreemarkerCoreExpression:withFreemarkerCoreExpression_ReplacemenetState:", "cloneArguments", "V", 0x404, NULL, NULL },
    { "init", NULL, NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcClassInfo _FreemarkerCoreBuiltInWithParseTimeParameters = { 2, "BuiltInWithParseTimeParameters", "freemarker.core", NULL, 0x400, 13, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerCoreBuiltInWithParseTimeParameters;
}

@end

void FreemarkerCoreBuiltInWithParseTimeParameters_init(FreemarkerCoreBuiltInWithParseTimeParameters *self) {
  (void) FreemarkerCoreSpecialBuiltIn_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreBuiltInWithParseTimeParameters)
