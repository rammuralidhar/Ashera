//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/ISOTemplateDateFormat.java
//


#include "DateUtil.h"
#include "IOSClass.h"
#include "ISOLikeTemplateDateFormat.h"
#include "ISOLikeTemplateDateFormatFactory.h"
#include "ISOTemplateDateFormat.h"
#include "J2ObjC_source.h"
#include "UnknownDateTypeFormattingUnsupportedException.h"
#include "java/text/ParseException.h"
#include "java/util/Date.h"
#include "java/util/TimeZone.h"

#line 0 "/Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/ISOTemplateDateFormat.java"


#line 28
@implementation FreemarkerCoreISOTemplateDateFormat

- (instancetype)initWithNSString:(NSString *)settingValue
                         withInt:(jint)parsingStart
                         withInt:(jint)dateType
                     withBoolean:(jboolean)zonelessInput
            withJavaUtilTimeZone:(JavaUtilTimeZone *)timeZone
withFreemarkerCoreISOLikeTemplateDateFormatFactory:(FreemarkerCoreISOLikeTemplateDateFormatFactory *)factory {
  FreemarkerCoreISOTemplateDateFormat_initWithNSString_withInt_withInt_withBoolean_withJavaUtilTimeZone_withFreemarkerCoreISOLikeTemplateDateFormatFactory_(self, settingValue, parsingStart, dateType, zonelessInput, timeZone, factory);
  return self;
}


#line 39
- (NSString *)formatWithJavaUtilDate:(JavaUtilDate *)date
                         withBoolean:(jboolean)datePart
                         withBoolean:(jboolean)timePart
                         withBoolean:(jboolean)offsetPart
                             withInt:(jint)accuracy
                withJavaUtilTimeZone:(JavaUtilTimeZone *)timeZone
withFreemarkerTemplateUtilityDateUtil_DateToISO8601CalendarFactory:(id<FreemarkerTemplateUtilityDateUtil_DateToISO8601CalendarFactory>)calendarFactory {
  
#line 41
  return FreemarkerTemplateUtilityDateUtil_dateToISO8601StringWithJavaUtilDate_withBoolean_withBoolean_withBoolean_withInt_withJavaUtilTimeZone_withFreemarkerTemplateUtilityDateUtil_DateToISO8601CalendarFactory_(
#line 42
  date, datePart, timePart, timePart && offsetPart, accuracy, timeZone, calendarFactory);
}


#line 45
- (JavaUtilDate *)parseDateWithNSString:(NSString *)s
                   withJavaUtilTimeZone:(JavaUtilTimeZone *)tz
withFreemarkerTemplateUtilityDateUtil_CalendarFieldsToDateConverter:(id<FreemarkerTemplateUtilityDateUtil_CalendarFieldsToDateConverter>)calToDateConverter {
  
#line 47
  return FreemarkerTemplateUtilityDateUtil_parseISO8601DateWithNSString_withJavaUtilTimeZone_withFreemarkerTemplateUtilityDateUtil_CalendarFieldsToDateConverter_(s, tz, calToDateConverter);
}


#line 50
- (JavaUtilDate *)parseTimeWithNSString:(NSString *)s
                   withJavaUtilTimeZone:(JavaUtilTimeZone *)tz
withFreemarkerTemplateUtilityDateUtil_CalendarFieldsToDateConverter:(id<FreemarkerTemplateUtilityDateUtil_CalendarFieldsToDateConverter>)calToDateConverter {
  
#line 52
  return FreemarkerTemplateUtilityDateUtil_parseISO8601TimeWithNSString_withJavaUtilTimeZone_withFreemarkerTemplateUtilityDateUtil_CalendarFieldsToDateConverter_(s, tz, calToDateConverter);
}


#line 55
- (JavaUtilDate *)parseDateTimeWithNSString:(NSString *)s
                       withJavaUtilTimeZone:(JavaUtilTimeZone *)tz
withFreemarkerTemplateUtilityDateUtil_CalendarFieldsToDateConverter:(id<FreemarkerTemplateUtilityDateUtil_CalendarFieldsToDateConverter>)calToDateConverter {
  
#line 57
  return FreemarkerTemplateUtilityDateUtil_parseISO8601DateTimeWithNSString_withJavaUtilTimeZone_withFreemarkerTemplateUtilityDateUtil_CalendarFieldsToDateConverter_(s, tz, calToDateConverter);
}


#line 60
- (NSString *)getDateDescription {
  return @"ISO 8601 (subset) date";
}

- (NSString *)getTimeDescription {
  return @"ISO 8601 (subset) time";
}

- (NSString *)getDateTimeDescription {
  return @"ISO 8601 (subset) date-time";
}

- (jboolean)isXSMode {
  return NO;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithNSString:withInt:withInt:withBoolean:withJavaUtilTimeZone:withFreemarkerCoreISOLikeTemplateDateFormatFactory:", "ISOTemplateDateFormat", NULL, 0x0, "Ljava.text.ParseException;Lfreemarker.core.UnknownDateTypeFormattingUnsupportedException;", NULL },
    { "formatWithJavaUtilDate:withBoolean:withBoolean:withBoolean:withInt:withJavaUtilTimeZone:withFreemarkerTemplateUtilityDateUtil_DateToISO8601CalendarFactory:", "format", "Ljava.lang.String;", 0x4, NULL, NULL },
    { "parseDateWithNSString:withJavaUtilTimeZone:withFreemarkerTemplateUtilityDateUtil_CalendarFieldsToDateConverter:", "parseDate", "Ljava.util.Date;", 0x4, "Lfreemarker.template.utility.DateUtil$DateParseException;", NULL },
    { "parseTimeWithNSString:withJavaUtilTimeZone:withFreemarkerTemplateUtilityDateUtil_CalendarFieldsToDateConverter:", "parseTime", "Ljava.util.Date;", 0x4, "Lfreemarker.template.utility.DateUtil$DateParseException;", NULL },
    { "parseDateTimeWithNSString:withJavaUtilTimeZone:withFreemarkerTemplateUtilityDateUtil_CalendarFieldsToDateConverter:", "parseDateTime", "Ljava.util.Date;", 0x4, "Lfreemarker.template.utility.DateUtil$DateParseException;", NULL },
    { "getDateDescription", NULL, "Ljava.lang.String;", 0x4, NULL, NULL },
    { "getTimeDescription", NULL, "Ljava.lang.String;", 0x4, NULL, NULL },
    { "getDateTimeDescription", NULL, "Ljava.lang.String;", 0x4, NULL, NULL },
    { "isXSMode", NULL, "Z", 0x4, NULL, NULL },
  };
  static const J2ObjcClassInfo _FreemarkerCoreISOTemplateDateFormat = { 2, "ISOTemplateDateFormat", "freemarker.core", NULL, 0x10, 9, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerCoreISOTemplateDateFormat;
}

@end


#line 30
void FreemarkerCoreISOTemplateDateFormat_initWithNSString_withInt_withInt_withBoolean_withJavaUtilTimeZone_withFreemarkerCoreISOLikeTemplateDateFormatFactory_(FreemarkerCoreISOTemplateDateFormat *self, NSString *settingValue, jint parsingStart, jint dateType, jboolean zonelessInput, JavaUtilTimeZone *timeZone, FreemarkerCoreISOLikeTemplateDateFormatFactory *factory) {
  (void) FreemarkerCoreISOLikeTemplateDateFormat_initWithNSString_withInt_withInt_withBoolean_withJavaUtilTimeZone_withFreemarkerCoreISOLikeTemplateDateFormatFactory_(self,
#line 36
  settingValue, parsingStart, dateType, zonelessInput, timeZone, factory);
}


#line 30
FreemarkerCoreISOTemplateDateFormat *new_FreemarkerCoreISOTemplateDateFormat_initWithNSString_withInt_withInt_withBoolean_withJavaUtilTimeZone_withFreemarkerCoreISOLikeTemplateDateFormatFactory_(NSString *settingValue, jint parsingStart, jint dateType, jboolean zonelessInput, JavaUtilTimeZone *timeZone, FreemarkerCoreISOLikeTemplateDateFormatFactory *factory) {
  FreemarkerCoreISOTemplateDateFormat *self = [FreemarkerCoreISOTemplateDateFormat alloc];
  FreemarkerCoreISOTemplateDateFormat_initWithNSString_withInt_withInt_withBoolean_withJavaUtilTimeZone_withFreemarkerCoreISOLikeTemplateDateFormatFactory_(self, settingValue, parsingStart, dateType, zonelessInput, timeZone, factory);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreISOTemplateDateFormat)
