//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/ext/beans/ClassIntrospector.java
//

#ifndef _FreemarkerExtBeansClassIntrospector_H_
#define _FreemarkerExtBeansClassIntrospector_H_

#include "J2ObjC_header.h"

@class FreemarkerExtBeansClassBasedModelFactory;
@class FreemarkerExtBeansClassIntrospectorBuilder;
@class FreemarkerExtUtilModelCache;
@class IOSClass;
@class IOSObjectArray;
@class JavaLangReflectAccessibleObject;
@class JavaLangReflectMethod;
@protocol FreemarkerExtBeansMethodAppearanceFineTuner;
@protocol FreemarkerExtBeansMethodSorter;
@protocol JavaUtilMap;
@protocol JavaUtilSet;

/**
 @brief Returns information about a Class that's useful for FreeMarker.
 Encapsulates a cache for this. Thread-safe, doesn't require "proper publishing" starting from Java 5. Immutable, with the exception of the internal caches. <p> Note that instances of this are cached on the level of FreeMarker's defining class loader. Hence, it must not do operations that depend on the Thread Context Class Loader, such as resolving class names.
 */
@interface FreemarkerExtBeansClassIntrospector : NSObject {
 @public
  jint exposureLevel_;
  jboolean exposeFields_;
  id<FreemarkerExtBeansMethodAppearanceFineTuner> methodAppearanceFineTuner_;
  id<FreemarkerExtBeansMethodSorter> methodSorter_;
  jboolean bugfixed_;
}

#pragma mark Package-Private

/**
 @brief Creates a new instance, that is hence surely not shared (singleton) instance.
 @param pa Stores what the values of the JavaBean properties of the returned instance will be. Not <code>null</code> .
 */
- (instancetype)initWithFreemarkerExtBeansClassIntrospectorBuilder:(FreemarkerExtBeansClassIntrospectorBuilder *)pa
                                                            withId:(id)sharedLock;

/**
 @param hasSharedInstanceRestrictons <code>true</code> exactly if we are creating a new instance with ClassIntrospectorBuilder . Then it's <code>true</code> even if it won't put the instance into the cache.
 */
- (instancetype)initWithFreemarkerExtBeansClassIntrospectorBuilder:(FreemarkerExtBeansClassIntrospectorBuilder *)builder
                                                            withId:(id)sharedLock
                                                       withBoolean:(jboolean)hasSharedInstanceRestrictons
                                                       withBoolean:(jboolean)shared;

/**
 @brief Corresponds to BeansWrapper#clearClassIntrospecitonCache() .
 @since 2.3.20
 */
- (void)clearCache;

/**
 @brief Gets the class introspection data from #cache , automatically creating the cache entry if it's missing.
 @return A Map where each key is a property/method/field name (or a special Object key like #CONSTRUCTORS_KEY ), each value is a PropertyDescriptor or Method or OverloadedMethods or Field (but better check the source code...).
 */
- (id<JavaUtilMap>)getWithIOSClass:(IOSClass *)clazz;

+ (IOSObjectArray *)getArgTypesWithJavaUtilMap:(id<JavaUtilMap>)classMap
           withJavaLangReflectAccessibleObject:(JavaLangReflectAccessibleObject *)methodOrCtor;

/**
 @brief Returns the number of events so far that could make class introspection data returned earlier outdated.
 */
- (jint)getClearingCounter;

- (jboolean)getExposeFields;

- (jint)getExposureLevel;

/**
 @brief Returns <code>true</code> if this instance was created with ClassIntrospectorBuilder , even if it wasn't actually put into the cache (as we reserve the right to do so in later versions).
 */
- (jboolean)getHasSharedInstanceRestrictons;

- (id<FreemarkerExtBeansMethodAppearanceFineTuner>)getMethodAppearanceFineTuner;

- (id<FreemarkerExtBeansMethodSorter>)getMethodSorter;

/**
 @brief Returns a ClassIntrospectorBuilder -s that could be used to create an identical #ClassIntrospector .
 The returned ClassIntrospectorBuilder can be modified without interfering with anything.
 */
- (FreemarkerExtBeansClassIntrospectorBuilder *)getPropertyAssignments;

/**
 @brief For unit testing only
 */
- (IOSObjectArray *)getRegisteredModelFactoriesSnapshot;

/**
 @brief Almost always, you want to use BeansWrapper#getSharedIntrospectionLock() , not this!
 The only exception is when you get this to set the field returned by BeansWrapper#getSharedIntrospectionLock() .
 */
- (id)getSharedLock;

- (jboolean)isAllowedToExposeWithJavaLangReflectMethod:(JavaLangReflectMethod *)method;

/**
 @brief Tells if this instance is (potentially) shared among BeansWrapper instances.
 */
- (jboolean)isShared;

/**
 @brief Returns the number of introspected methods/properties that should be available via the TemplateHashModel interface.
 */
- (jint)keyCountWithIOSClass:(IOSClass *)clazz;

/**
 @brief Returns the Set of names of introspected methods/properties that should be available via the TemplateHashModel interface.
 */
- (id<JavaUtilSet>)keySetWithIOSClass:(IOSClass *)clazz;

- (void)registerModelFactoryWithFreemarkerExtBeansClassBasedModelFactory:(FreemarkerExtBeansClassBasedModelFactory *)mf;

- (void)registerModelFactoryWithFreemarkerExtUtilModelCache:(FreemarkerExtUtilModelCache *)mf;

/**
 @brief Corresponds to BeansWrapper#removeFromClassIntrospectionCache(Class) .
 @since 2.3.20
 */
- (void)removeWithIOSClass:(IOSClass *)clazz;

- (void)unregisterModelFactoryWithFreemarkerExtBeansClassBasedModelFactory:(FreemarkerExtBeansClassBasedModelFactory *)mf;

- (void)unregisterModelFactoryWithFreemarkerExtUtilModelCache:(FreemarkerExtUtilModelCache *)mf;

- (void)unregisterModelFactoryWithId:(id)mf;

@end

J2OBJC_STATIC_INIT(FreemarkerExtBeansClassIntrospector)

J2OBJC_FIELD_SETTER(FreemarkerExtBeansClassIntrospector, methodAppearanceFineTuner_, id<FreemarkerExtBeansMethodAppearanceFineTuner>)
J2OBJC_FIELD_SETTER(FreemarkerExtBeansClassIntrospector, methodSorter_, id<FreemarkerExtBeansMethodSorter>)

FOUNDATION_EXPORT jboolean FreemarkerExtBeansClassIntrospector_DEVELOPMENT_MODE_;
J2OBJC_STATIC_FIELD_GETTER(FreemarkerExtBeansClassIntrospector, DEVELOPMENT_MODE_, jboolean)

FOUNDATION_EXPORT id FreemarkerExtBeansClassIntrospector_CONSTRUCTORS_KEY_;
J2OBJC_STATIC_FIELD_GETTER(FreemarkerExtBeansClassIntrospector, CONSTRUCTORS_KEY_, id)

FOUNDATION_EXPORT id FreemarkerExtBeansClassIntrospector_GENERIC_GET_KEY_;
J2OBJC_STATIC_FIELD_GETTER(FreemarkerExtBeansClassIntrospector, GENERIC_GET_KEY_, id)

FOUNDATION_EXPORT void FreemarkerExtBeansClassIntrospector_initWithFreemarkerExtBeansClassIntrospectorBuilder_withId_(FreemarkerExtBeansClassIntrospector *self, FreemarkerExtBeansClassIntrospectorBuilder *pa, id sharedLock);

FOUNDATION_EXPORT FreemarkerExtBeansClassIntrospector *new_FreemarkerExtBeansClassIntrospector_initWithFreemarkerExtBeansClassIntrospectorBuilder_withId_(FreemarkerExtBeansClassIntrospectorBuilder *pa, id sharedLock) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void FreemarkerExtBeansClassIntrospector_initWithFreemarkerExtBeansClassIntrospectorBuilder_withId_withBoolean_withBoolean_(FreemarkerExtBeansClassIntrospector *self, FreemarkerExtBeansClassIntrospectorBuilder *builder, id sharedLock, jboolean hasSharedInstanceRestrictons, jboolean shared);

FOUNDATION_EXPORT FreemarkerExtBeansClassIntrospector *new_FreemarkerExtBeansClassIntrospector_initWithFreemarkerExtBeansClassIntrospectorBuilder_withId_withBoolean_withBoolean_(FreemarkerExtBeansClassIntrospectorBuilder *builder, id sharedLock, jboolean hasSharedInstanceRestrictons, jboolean shared) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IOSObjectArray *FreemarkerExtBeansClassIntrospector_getArgTypesWithJavaUtilMap_withJavaLangReflectAccessibleObject_(id<JavaUtilMap> classMap, JavaLangReflectAccessibleObject *methodOrCtor);

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerExtBeansClassIntrospector)

#endif // _FreemarkerExtBeansClassIntrospector_H_
