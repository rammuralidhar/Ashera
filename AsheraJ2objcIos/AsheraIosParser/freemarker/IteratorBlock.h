//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/IteratorBlock.java
//

#ifndef _FreemarkerCoreIteratorBlock_H_
#define _FreemarkerCoreIteratorBlock_H_

#include "J2ObjC_header.h"
#include "LocalContext.h"
#include "TemplateElement.h"

@class FreemarkerCoreEnvironment;
@class FreemarkerCoreExpression;
@class FreemarkerCoreIteratorBlock_IterationContext;
@class FreemarkerCoreParameterRole;
@protocol FreemarkerTemplateTemplateModel;
@protocol JavaUtilCollection;

/**
 @brief A #list or #foreach element.
 */
@interface FreemarkerCoreIteratorBlock : FreemarkerCoreTemplateElement

#pragma mark Protected

- (NSString *)dumpWithBoolean:(jboolean)canonical;

#pragma mark Package-Private

/**
 @param listExp a variable referring to a sequence or collection ("the list" from now on)
 @param loopVarName The name of the variable that will hold the value of the current item when looping through the list.
 @param nestedBlock The nested content to execute if the list wasn't empty; can't be <code>null</code> . If the loop variable was specified in the start tag, this is also what we will iterator over.
 */
- (instancetype)initWithFreemarkerCoreExpression:(FreemarkerCoreExpression *)listExp
                                    withNSString:(NSString *)loopVarName
               withFreemarkerCoreTemplateElement:(FreemarkerCoreTemplateElement *)nestedBlock
                                     withBoolean:(jboolean)isForEach;

- (void)acceptWithFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env;

- (jboolean)acceptWithResultWithFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env;

/**
 @param loopVariableName Then name of the loop variable whose context we are looking for, or <code>null</code> if we simply look for the innermost context.
 @return The matching context or <code>null</code> if no such context exists.
 */
+ (FreemarkerCoreIteratorBlock_IterationContext *)findEnclosingIterationContextWithFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env
                                                                                                withNSString:(NSString *)loopVariableName;

- (NSString *)getNodeTypeSymbol;

- (jint)getParameterCount;

- (FreemarkerCoreParameterRole *)getParameterRoleWithInt:(jint)idx;

- (id)getParameterValueWithInt:(jint)idx;

- (jboolean)isNestedBlockRepeater;

@end

J2OBJC_EMPTY_STATIC_INIT(FreemarkerCoreIteratorBlock)

FOUNDATION_EXPORT void FreemarkerCoreIteratorBlock_initWithFreemarkerCoreExpression_withNSString_withFreemarkerCoreTemplateElement_withBoolean_(FreemarkerCoreIteratorBlock *self, FreemarkerCoreExpression *listExp, NSString *loopVarName, FreemarkerCoreTemplateElement *nestedBlock, jboolean isForEach);

FOUNDATION_EXPORT FreemarkerCoreIteratorBlock *new_FreemarkerCoreIteratorBlock_initWithFreemarkerCoreExpression_withNSString_withFreemarkerCoreTemplateElement_withBoolean_(FreemarkerCoreExpression *listExp, NSString *loopVarName, FreemarkerCoreTemplateElement *nestedBlock, jboolean isForEach) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT FreemarkerCoreIteratorBlock_IterationContext *FreemarkerCoreIteratorBlock_findEnclosingIterationContextWithFreemarkerCoreEnvironment_withNSString_(FreemarkerCoreEnvironment *env, NSString *loopVariableName);

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerCoreIteratorBlock)

/**
 @brief Holds the context of a #list (or #forEach) directive.
 */
@interface FreemarkerCoreIteratorBlock_IterationContext : NSObject < FreemarkerCoreLocalContext >

#pragma mark Public

- (instancetype)initWithFreemarkerCoreIteratorBlock:(FreemarkerCoreIteratorBlock *)outer$
                withFreemarkerTemplateTemplateModel:(id<FreemarkerTemplateTemplateModel>)listValue
                                       withNSString:(NSString *)loopVariableName;

- (id<FreemarkerTemplateTemplateModel>)getLocalVariableWithNSString:(NSString *)name;

- (id<JavaUtilCollection>)getLocalVariableNames;

#pragma mark Package-Private

- (jboolean)acceptWithFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env;

- (jint)getIndex;

- (NSString *)getLoopVariableName;

- (jboolean)hasNext;

- (void)loopForItemsElementWithFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env
                       withFreemarkerCoreTemplateElement:(FreemarkerCoreTemplateElement *)nestedBlock
                                            withNSString:(NSString *)loopVarName;

@end

J2OBJC_EMPTY_STATIC_INIT(FreemarkerCoreIteratorBlock_IterationContext)

FOUNDATION_EXPORT void FreemarkerCoreIteratorBlock_IterationContext_initWithFreemarkerCoreIteratorBlock_withFreemarkerTemplateTemplateModel_withNSString_(FreemarkerCoreIteratorBlock_IterationContext *self, FreemarkerCoreIteratorBlock *outer$, id<FreemarkerTemplateTemplateModel> listValue, NSString *loopVariableName);

FOUNDATION_EXPORT FreemarkerCoreIteratorBlock_IterationContext *new_FreemarkerCoreIteratorBlock_IterationContext_initWithFreemarkerCoreIteratorBlock_withFreemarkerTemplateTemplateModel_withNSString_(FreemarkerCoreIteratorBlock *outer$, id<FreemarkerTemplateTemplateModel> listValue, NSString *loopVariableName) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerCoreIteratorBlock_IterationContext)

#endif // _FreemarkerCoreIteratorBlock_H_
