//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/cache/StrongCacheStorage.java
//

#ifndef _FreemarkerCacheStrongCacheStorage_H_
#define _FreemarkerCacheStrongCacheStorage_H_

#include "CacheStorageWithGetSize.h"
#include "ConcurrentCacheStorage.h"
#include "J2ObjC_header.h"

/**
 @brief Strong cache storage is a cache storage that simply wraps a Map .
 It holds a strong reference to all objects it was passed, therefore prevents the cache from being purged during garbage collection. This class is thread-safe to the extent that its underlying map is. The default implementation uses a concurrent map on Java 5 and above, so it's thread-safe in that case.
 */
@interface FreemarkerCacheStrongCacheStorage : NSObject < FreemarkerCacheConcurrentCacheStorage, FreemarkerCacheCacheStorageWithGetSize >

#pragma mark Public

- (instancetype)init;

- (void)clear;

- (id)getWithId:(id)key;

/**
 @brief Returns a close approximation of the number of cache entries.
 @since 2.3.21
 */
- (jint)getSize;

/**
 @brief Returns true if the underlying Map is a <code>ConcurrentMap</code> .
 */
- (jboolean)isConcurrent;

- (void)putWithId:(id)key
           withId:(id)value;

- (void)removeWithId:(id)key;

@end

J2OBJC_EMPTY_STATIC_INIT(FreemarkerCacheStrongCacheStorage)

FOUNDATION_EXPORT void FreemarkerCacheStrongCacheStorage_init(FreemarkerCacheStrongCacheStorage *self);

FOUNDATION_EXPORT FreemarkerCacheStrongCacheStorage *new_FreemarkerCacheStrongCacheStorage_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerCacheStrongCacheStorage)

#endif // _FreemarkerCacheStrongCacheStorage_H_
