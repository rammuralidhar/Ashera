//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/template/TemplateModel.java
//

#ifndef _FreemarkerTemplateTemplateModel_H_
#define _FreemarkerTemplateTemplateModel_H_

#include "J2ObjC_header.h"

/**
 @brief The common super-interface of the interfaces that stand for the FreeMarker Template Language (FTL) data types.
 The template language only deals with TemplateModel -s, not directly with plain Java objects. (For example, it doesn't understand java.lang.Number , but TemplateNumberModel .) This is why the data-model (aka. the "template context" in other languages) is (automatically) mapped to a tree of TemplateModel -s. <p>Mapping the plain Java objects to TemplateModel -s (or the other way around sometimes) is the responsibility of the ObjectWrapper (can be set via Configuration#setObjectWrapper(ObjectWrapper) ). But not all TemplateModel -s are for wrapping a plain object. For example, a value created within a template is not made to wrap an earlier existing object; it's a value that has always existed in the template language's domain. Users can also write TemplateModel implementations and put them directly into the data-model for full control over how that object is seen from the template. Certain TemplateModel interfaces doesn't even have equivalent in Java. For example the directive type ( TemplateDirectiveModel ) is like that. <p>Because TemplateModel "subclasses" are all interfaces, a value in the template language can have multiple types. However, to prevent ambiguous situations, it's not recommended to make values that implement more than one of these types: string, number, boolean, date. The intended applications are like string+hash, string+method, hash+sequence, etc.
 */
@protocol FreemarkerTemplateTemplateModel < NSObject, JavaObject >

@end

@interface FreemarkerTemplateTemplateModel : NSObject
@end

J2OBJC_STATIC_INIT(FreemarkerTemplateTemplateModel)

FOUNDATION_EXPORT id<FreemarkerTemplateTemplateModel> FreemarkerTemplateTemplateModel_NOTHING_;
J2OBJC_STATIC_FIELD_GETTER(FreemarkerTemplateTemplateModel, NOTHING_, id<FreemarkerTemplateTemplateModel>)

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerTemplateTemplateModel)

#endif // _FreemarkerTemplateTemplateModel_H_
