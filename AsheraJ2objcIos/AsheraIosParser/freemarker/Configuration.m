//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/template/Configuration.java
//


#include "BugException.h"
#include "CacheStorage.h"
#include "CaptureOutput.h"
#include "ClassTemplateLoader.h"
#include "ClassUtil.h"
#include "Configurable.h"
#include "Configuration.h"
#include "DefaultObjectWrapper.h"
#include "DefaultObjectWrapperBuilder.h"
#include "Environment.h"
#include "FileTemplateLoader.h"
#include "HtmlEscape.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "Logger.h"
#include "MalformedTemplateNameException.h"
#include "MruCacheStorage.h"
#include "NormalizeNewlines.h"
#include "NullArgumentException.h"
#include "ObjectWrapper.h"
#include "ParseException.h"
#include "SecurityUtilities.h"
#include "SoftCacheStorage.h"
#include "StandardCompress.h"
#include "StringUtil.h"
#include "Template.h"
#include "TemplateCache.h"
#include "TemplateCollectionModel.h"
#include "TemplateException.h"
#include "TemplateExceptionHandler.h"
#include "TemplateHashModelEx.h"
#include "TemplateLoader.h"
#include "TemplateLookupStrategy.h"
#include "TemplateModel.h"
#include "TemplateModelException.h"
#include "TemplateModelIterator.h"
#include "TemplateNameFormat.h"
#include "TemplateNotFoundException.h"
#include "TemplateScalarModel.h"
#include "Version.h"
#include "XmlEscape.h"
#include "_ConcurrentMapFactory.h"
#include "_CoreAPI.h"
#include "_ObjectBuilderSettingEvaluator.h"
#include "_SettingEvaluationEnvironment.h"
#include "_SortedArraySet.h"
#include "_TemplateAPI.h"
#include "_UnmodifiableCompositeSet.h"
#include "java/io/File.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/lang/Boolean.h"
#include "java/lang/Character.h"
#include "java/lang/ClassLoader.h"
#include "java/lang/ClassNotFoundException.h"
#include "java/lang/CloneNotSupportedException.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/LinkageError.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/Throwable.h"
#include "java/lang/reflect/Constructor.h"
#include "java/text/ParseException.h"
#include "java/text/SimpleDateFormat.h"
#include "java/util/ArrayList.h"
#include "java/util/Date.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Locale.h"
#include "java/util/Map.h"
#include "java/util/Properties.h"
#include "java/util/Set.h"
#include "java/util/SortedMap.h"
#include "java/util/TreeMap.h"

#line 0 "/Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/template/Configuration.java"

@interface FreemarkerTemplateConfiguration () {
 @public
  jboolean strictSyntax_;
  jboolean localizedLookup_;
  jboolean whitespaceStripping_;
  FreemarkerTemplateVersion *incompatibleImprovements_;
  jint tagSyntax_;
  jint namingConvention_;
  FreemarkerCacheTemplateCache *cache_;
  jboolean templateLoaderExplicitlySet_;
  jboolean templateLookupStrategyExplicitlySet_;
  jboolean templateNameFormatExplicitlySet_;
  jboolean cacheStorageExplicitlySet_;
  jboolean objectWrapperExplicitlySet_;
  jboolean templateExceptionHandlerExplicitlySet_;
  jboolean logTemplateExceptionsExplicitlySet_;
  JavaUtilHashMap *sharedVariables_;
  /**
   @brief Needed so that it doesn't mater in what order do you call #setSharedVaribles(Map) and #setObjectWrapper(ObjectWrapper) .
   When the user configures FreeMarker from Spring XML, he has no control over the order, so it has to work on both ways.
   */
  JavaUtilHashMap *rewrappableSharedVariables_;
  NSString *defaultEncoding_;
  id<JavaUtilMap> localeToCharsetMap_;
  JavaUtilArrayList *autoImports_, *autoIncludes_;
  id<JavaUtilMap> autoImportNsToTmpMap_;
}

+ (void)checkFreeMarkerVersionClash;

- (void)createTemplateCache;

- (void)recreateTemplateCacheWithWithFreemarkerCacheTemplateLoader:(id<FreemarkerCacheTemplateLoader>)loader
                                   withFreemarkerCacheCacheStorage:(id<FreemarkerCacheCacheStorage>)storage
                         withFreemarkerCacheTemplateLookupStrategy:(FreemarkerCacheTemplateLookupStrategy *)templateLookupStrategy
                             withFreemarkerCacheTemplateNameFormat:(FreemarkerCacheTemplateNameFormat *)templateNameFormat;

- (id<FreemarkerCacheTemplateLoader>)getDefaultTemplateLoader;

+ (id<FreemarkerCacheTemplateLoader>)createDefaultTemplateLoaderWithFreemarkerTemplateVersion:(FreemarkerTemplateVersion *)incompatibleImprovements
                                                            withFreemarkerCacheTemplateLoader:(id<FreemarkerCacheTemplateLoader>)existingTemplateLoader;

- (FreemarkerCacheTemplateLookupStrategy *)getDefaultTemplateLookupStrategy;

- (FreemarkerCacheTemplateNameFormat *)getDefaultTemplateNameFormat;

- (id<FreemarkerCacheCacheStorage>)getDefaultCacheStorage;

- (id<FreemarkerTemplateTemplateExceptionHandler>)getDefaultTemplateExceptionHandler;

- (jboolean)getDefaultLogTemplateExceptions;

- (id<FreemarkerTemplateObjectWrapper>)getDefaultObjectWrapper;

- (void)loadBuiltInSharedVariables;

- (jboolean)isKnownNonConfusingLookupStrategyWithFreemarkerCacheTemplateLookupStrategy:(FreemarkerCacheTemplateLookupStrategy *)templateLookupStrategy;

- (NSString *)removeInitialSlashWithNSString:(NSString *)name;

- (NSString *)ensureSentenceIsClosedWithNSString:(NSString *)s;

- (void)setSharedVariablesFromRewrappableSharedVariables;

- (NSString *)rightTrimWithNSString:(NSString *)s;

+ (NSString *)getRequiredVersionPropertyWithJavaUtilProperties:(JavaUtilProperties *)vp
                                                  withNSString:(NSString *)properyName;

@end

J2OBJC_FIELD_SETTER(FreemarkerTemplateConfiguration, incompatibleImprovements_, FreemarkerTemplateVersion *)
J2OBJC_FIELD_SETTER(FreemarkerTemplateConfiguration, cache_, FreemarkerCacheTemplateCache *)
J2OBJC_FIELD_SETTER(FreemarkerTemplateConfiguration, sharedVariables_, JavaUtilHashMap *)
J2OBJC_FIELD_SETTER(FreemarkerTemplateConfiguration, rewrappableSharedVariables_, JavaUtilHashMap *)
J2OBJC_FIELD_SETTER(FreemarkerTemplateConfiguration, defaultEncoding_, NSString *)
J2OBJC_FIELD_SETTER(FreemarkerTemplateConfiguration, localeToCharsetMap_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(FreemarkerTemplateConfiguration, autoImports_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(FreemarkerTemplateConfiguration, autoIncludes_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(FreemarkerTemplateConfiguration, autoImportNsToTmpMap_, id<JavaUtilMap>)

static FreemarkerLogLogger *FreemarkerTemplateConfiguration_CACHE_LOG_;
J2OBJC_STATIC_FIELD_GETTER(FreemarkerTemplateConfiguration, CACHE_LOG_, FreemarkerLogLogger *)

static NSString *FreemarkerTemplateConfiguration_VERSION_PROPERTIES_PATH_ = 
#line 127
@"freemarker/version.properties";
J2OBJC_STATIC_FIELD_GETTER(FreemarkerTemplateConfiguration, VERSION_PROPERTIES_PATH_, NSString *)

static IOSObjectArray *FreemarkerTemplateConfiguration_SETTING_NAMES_SNAKE_CASE_;
J2OBJC_STATIC_FIELD_GETTER(FreemarkerTemplateConfiguration, SETTING_NAMES_SNAKE_CASE_, IOSObjectArray *)

static IOSObjectArray *FreemarkerTemplateConfiguration_SETTING_NAMES_CAMEL_CASE_;
J2OBJC_STATIC_FIELD_GETTER(FreemarkerTemplateConfiguration, SETTING_NAMES_CAMEL_CASE_, IOSObjectArray *)

static NSString *FreemarkerTemplateConfiguration_DEFAULT_ = 
#line 301
@"default";
J2OBJC_STATIC_FIELD_GETTER(FreemarkerTemplateConfiguration, DEFAULT_, NSString *)

static FreemarkerTemplateVersion *FreemarkerTemplateConfiguration_VERSION_;
J2OBJC_STATIC_FIELD_GETTER(FreemarkerTemplateConfiguration, VERSION_, FreemarkerTemplateVersion *)

static NSString *FreemarkerTemplateConfiguration_FM_24_DETECTION_CLASS_NAME_ = 
#line 342
@"freemarker.core._2_4_OrLaterMarker";
J2OBJC_STATIC_FIELD_GETTER(FreemarkerTemplateConfiguration, FM_24_DETECTION_CLASS_NAME_, NSString *)

static jboolean FreemarkerTemplateConfiguration_FM_24_DETECTED_;
J2OBJC_STATIC_FIELD_GETTER(FreemarkerTemplateConfiguration, FM_24_DETECTED_, jboolean)

static id FreemarkerTemplateConfiguration_defaultConfigLock_;
J2OBJC_STATIC_FIELD_GETTER(FreemarkerTemplateConfiguration, defaultConfigLock_, id)

static FreemarkerTemplateConfiguration *FreemarkerTemplateConfiguration_defaultConfig_;
J2OBJC_STATIC_FIELD_GETTER(FreemarkerTemplateConfiguration, defaultConfig_, FreemarkerTemplateConfiguration *)
J2OBJC_STATIC_FIELD_SETTER(FreemarkerTemplateConfiguration, defaultConfig_, FreemarkerTemplateConfiguration *)

__attribute__((unused)) static void FreemarkerTemplateConfiguration_checkFreeMarkerVersionClash();

__attribute__((unused)) static void FreemarkerTemplateConfiguration_createTemplateCache(FreemarkerTemplateConfiguration *self);

__attribute__((unused)) static void FreemarkerTemplateConfiguration_recreateTemplateCacheWithWithFreemarkerCacheTemplateLoader_withFreemarkerCacheCacheStorage_withFreemarkerCacheTemplateLookupStrategy_withFreemarkerCacheTemplateNameFormat_(FreemarkerTemplateConfiguration *self, id<FreemarkerCacheTemplateLoader> loader, id<FreemarkerCacheCacheStorage> storage, FreemarkerCacheTemplateLookupStrategy *templateLookupStrategy, FreemarkerCacheTemplateNameFormat *templateNameFormat);

__attribute__((unused)) static id<FreemarkerCacheTemplateLoader> FreemarkerTemplateConfiguration_getDefaultTemplateLoader(FreemarkerTemplateConfiguration *self);

__attribute__((unused)) static id<FreemarkerCacheTemplateLoader> FreemarkerTemplateConfiguration_createDefaultTemplateLoaderWithFreemarkerTemplateVersion_withFreemarkerCacheTemplateLoader_(FreemarkerTemplateVersion *incompatibleImprovements, id<FreemarkerCacheTemplateLoader> existingTemplateLoader);

__attribute__((unused)) static FreemarkerCacheTemplateLookupStrategy *FreemarkerTemplateConfiguration_getDefaultTemplateLookupStrategy(FreemarkerTemplateConfiguration *self);

__attribute__((unused)) static FreemarkerCacheTemplateNameFormat *FreemarkerTemplateConfiguration_getDefaultTemplateNameFormat(FreemarkerTemplateConfiguration *self);

__attribute__((unused)) static id<FreemarkerCacheCacheStorage> FreemarkerTemplateConfiguration_getDefaultCacheStorage(FreemarkerTemplateConfiguration *self);

__attribute__((unused)) static id<FreemarkerTemplateTemplateExceptionHandler> FreemarkerTemplateConfiguration_getDefaultTemplateExceptionHandler(FreemarkerTemplateConfiguration *self);

__attribute__((unused)) static jboolean FreemarkerTemplateConfiguration_getDefaultLogTemplateExceptions(FreemarkerTemplateConfiguration *self);

__attribute__((unused)) static id<FreemarkerTemplateObjectWrapper> FreemarkerTemplateConfiguration_getDefaultObjectWrapper(FreemarkerTemplateConfiguration *self);

__attribute__((unused)) static void FreemarkerTemplateConfiguration_loadBuiltInSharedVariables(FreemarkerTemplateConfiguration *self);

__attribute__((unused)) static jboolean FreemarkerTemplateConfiguration_isKnownNonConfusingLookupStrategyWithFreemarkerCacheTemplateLookupStrategy_(FreemarkerTemplateConfiguration *self, FreemarkerCacheTemplateLookupStrategy *templateLookupStrategy);

__attribute__((unused)) static NSString *FreemarkerTemplateConfiguration_removeInitialSlashWithNSString_(FreemarkerTemplateConfiguration *self, NSString *name);

__attribute__((unused)) static NSString *FreemarkerTemplateConfiguration_ensureSentenceIsClosedWithNSString_(FreemarkerTemplateConfiguration *self, NSString *s);

__attribute__((unused)) static void FreemarkerTemplateConfiguration_setSharedVariablesFromRewrappableSharedVariables(FreemarkerTemplateConfiguration *self);

__attribute__((unused)) static NSString *FreemarkerTemplateConfiguration_rightTrimWithNSString_(FreemarkerTemplateConfiguration *self, NSString *s);

__attribute__((unused)) static NSString *FreemarkerTemplateConfiguration_getRequiredVersionPropertyWithJavaUtilProperties_withNSString_(JavaUtilProperties *vp, NSString *properyName);

@interface FreemarkerTemplateConfiguration_LegacyDefaultFileTemplateLoader : FreemarkerCacheFileTemplateLoader

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(FreemarkerTemplateConfiguration_LegacyDefaultFileTemplateLoader)

__attribute__((unused)) static void FreemarkerTemplateConfiguration_LegacyDefaultFileTemplateLoader_init(FreemarkerTemplateConfiguration_LegacyDefaultFileTemplateLoader *self);

__attribute__((unused)) static FreemarkerTemplateConfiguration_LegacyDefaultFileTemplateLoader *new_FreemarkerTemplateConfiguration_LegacyDefaultFileTemplateLoader_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerTemplateConfiguration_LegacyDefaultFileTemplateLoader)

@interface FreemarkerTemplateConfiguration_DefaultSoftCacheStorage : FreemarkerCacheSoftCacheStorage

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(FreemarkerTemplateConfiguration_DefaultSoftCacheStorage)

__attribute__((unused)) static void FreemarkerTemplateConfiguration_DefaultSoftCacheStorage_init(FreemarkerTemplateConfiguration_DefaultSoftCacheStorage *self);

__attribute__((unused)) static FreemarkerTemplateConfiguration_DefaultSoftCacheStorage *new_FreemarkerTemplateConfiguration_DefaultSoftCacheStorage_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerTemplateConfiguration_DefaultSoftCacheStorage)

J2OBJC_INITIALIZED_DEFN(FreemarkerTemplateConfiguration)

NSString *FreemarkerTemplateConfiguration_DEFAULT_ENCODING_KEY_SNAKE_CASE_ = 
#line 130
@"default_encoding";
NSString *FreemarkerTemplateConfiguration_DEFAULT_ENCODING_KEY_CAMEL_CASE_ = 
#line 132
@"defaultEncoding";
NSString *FreemarkerTemplateConfiguration_DEFAULT_ENCODING_KEY_ = @"default_encoding";
NSString *FreemarkerTemplateConfiguration_LOCALIZED_LOOKUP_KEY_SNAKE_CASE_ = 
#line 137
@"localized_lookup";
NSString *FreemarkerTemplateConfiguration_LOCALIZED_LOOKUP_KEY_CAMEL_CASE_ = 
#line 139
@"localizedLookup";
NSString *FreemarkerTemplateConfiguration_LOCALIZED_LOOKUP_KEY_ = @"localized_lookup";
NSString *FreemarkerTemplateConfiguration_STRICT_SYNTAX_KEY_SNAKE_CASE_ = 
#line 144
@"strict_syntax";
NSString *FreemarkerTemplateConfiguration_STRICT_SYNTAX_KEY_CAMEL_CASE_ = 
#line 146
@"strictSyntax";
NSString *FreemarkerTemplateConfiguration_STRICT_SYNTAX_KEY_ = @"strict_syntax";
NSString *FreemarkerTemplateConfiguration_WHITESPACE_STRIPPING_KEY_SNAKE_CASE_ = 
#line 151
@"whitespace_stripping";
NSString *FreemarkerTemplateConfiguration_WHITESPACE_STRIPPING_KEY_CAMEL_CASE_ = 
#line 153
@"whitespaceStripping";
NSString *FreemarkerTemplateConfiguration_WHITESPACE_STRIPPING_KEY_ = @"whitespace_stripping";
NSString *FreemarkerTemplateConfiguration_CACHE_STORAGE_KEY_SNAKE_CASE_ = 
#line 158
@"cache_storage";
NSString *FreemarkerTemplateConfiguration_CACHE_STORAGE_KEY_CAMEL_CASE_ = 
#line 160
@"cacheStorage";
NSString *FreemarkerTemplateConfiguration_CACHE_STORAGE_KEY_ = @"cache_storage";
NSString *FreemarkerTemplateConfiguration_TEMPLATE_UPDATE_DELAY_KEY_SNAKE_CASE_ = 
#line 165
@"template_update_delay";
NSString *FreemarkerTemplateConfiguration_TEMPLATE_UPDATE_DELAY_KEY_CAMEL_CASE_ = 
#line 167
@"templateUpdateDelay";
NSString *FreemarkerTemplateConfiguration_TEMPLATE_UPDATE_DELAY_KEY_ = @"template_update_delay";
NSString *FreemarkerTemplateConfiguration_AUTO_IMPORT_KEY_SNAKE_CASE_ = 
#line 172
@"auto_import";
NSString *FreemarkerTemplateConfiguration_AUTO_IMPORT_KEY_CAMEL_CASE_ = 
#line 174
@"autoImport";
NSString *FreemarkerTemplateConfiguration_AUTO_IMPORT_KEY_ = @"auto_import";
NSString *FreemarkerTemplateConfiguration_AUTO_INCLUDE_KEY_SNAKE_CASE_ = 
#line 179
@"auto_include";
NSString *FreemarkerTemplateConfiguration_AUTO_INCLUDE_KEY_CAMEL_CASE_ = 
#line 181
@"autoInclude";
NSString *FreemarkerTemplateConfiguration_AUTO_INCLUDE_KEY_ = @"auto_include";
NSString *FreemarkerTemplateConfiguration_TAG_SYNTAX_KEY_SNAKE_CASE_ = 
#line 186
@"tag_syntax";
NSString *FreemarkerTemplateConfiguration_TAG_SYNTAX_KEY_CAMEL_CASE_ = 
#line 188
@"tagSyntax";
NSString *FreemarkerTemplateConfiguration_TAG_SYNTAX_KEY_ = @"tag_syntax";
NSString *FreemarkerTemplateConfiguration_NAMING_CONVENTION_KEY_SNAKE_CASE_ = 
#line 193
@"naming_convention";
NSString *FreemarkerTemplateConfiguration_NAMING_CONVENTION_KEY_CAMEL_CASE_ = 
#line 195
@"namingConvention";
NSString *FreemarkerTemplateConfiguration_NAMING_CONVENTION_KEY_ = @"naming_convention";
NSString *FreemarkerTemplateConfiguration_TEMPLATE_LOADER_KEY_SNAKE_CASE_ = 
#line 200
@"template_loader";
NSString *FreemarkerTemplateConfiguration_TEMPLATE_LOADER_KEY_CAMEL_CASE_ = 
#line 202
@"templateLoader";
NSString *FreemarkerTemplateConfiguration_TEMPLATE_LOADER_KEY_ = @"template_loader";
NSString *FreemarkerTemplateConfiguration_TEMPLATE_LOOKUP_STRATEGY_KEY_SNAKE_CASE_ = 
#line 207
@"template_lookup_strategy";
NSString *FreemarkerTemplateConfiguration_TEMPLATE_LOOKUP_STRATEGY_KEY_CAMEL_CASE_ = 
#line 209
@"templateLookupStrategy";
NSString *FreemarkerTemplateConfiguration_TEMPLATE_LOOKUP_STRATEGY_KEY_ = @"template_lookup_strategy";
NSString *FreemarkerTemplateConfiguration_TEMPLATE_NAME_FORMAT_KEY_SNAKE_CASE_ = 
#line 214
@"template_name_format";
NSString *FreemarkerTemplateConfiguration_TEMPLATE_NAME_FORMAT_KEY_CAMEL_CASE_ = 
#line 216
@"templateNameFormat";
NSString *FreemarkerTemplateConfiguration_TEMPLATE_NAME_FORMAT_KEY_ = @"template_name_format";
NSString *FreemarkerTemplateConfiguration_INCOMPATIBLE_IMPROVEMENTS_KEY_SNAKE_CASE_ = 
#line 221
@"incompatible_improvements";
NSString *FreemarkerTemplateConfiguration_INCOMPATIBLE_IMPROVEMENTS_KEY_CAMEL_CASE_ = 
#line 223
@"incompatibleImprovements";
NSString *FreemarkerTemplateConfiguration_INCOMPATIBLE_IMPROVEMENTS_KEY_ = @"incompatible_improvements";
NSString *FreemarkerTemplateConfiguration_INCOMPATIBLE_IMPROVEMENTS_ = @"incompatible_improvements";
NSString *FreemarkerTemplateConfiguration_INCOMPATIBLE_ENHANCEMENTS_ = 
#line 230
@"incompatible_enhancements";
FreemarkerTemplateVersion *FreemarkerTemplateConfiguration_VERSION_2_3_0_;
FreemarkerTemplateVersion *FreemarkerTemplateConfiguration_VERSION_2_3_19_;
FreemarkerTemplateVersion *FreemarkerTemplateConfiguration_VERSION_2_3_20_;
FreemarkerTemplateVersion *FreemarkerTemplateConfiguration_VERSION_2_3_21_;
FreemarkerTemplateVersion *FreemarkerTemplateConfiguration_VERSION_2_3_22_;
FreemarkerTemplateVersion *FreemarkerTemplateConfiguration_VERSION_2_3_23_;
FreemarkerTemplateVersion *FreemarkerTemplateConfiguration_DEFAULT_INCOMPATIBLE_IMPROVEMENTS_;
NSString *FreemarkerTemplateConfiguration_DEFAULT_INCOMPATIBLE_ENHANCEMENTS_;
jint FreemarkerTemplateConfiguration_PARSED_DEFAULT_INCOMPATIBLE_ENHANCEMENTS_;


#line 123
@implementation FreemarkerTemplateConfiguration


#line 401
- (instancetype)init {
  FreemarkerTemplateConfiguration_init(self);
  return self;
}


#line 633
- (instancetype)initWithFreemarkerTemplateVersion:(FreemarkerTemplateVersion *)incompatibleImprovements {
  FreemarkerTemplateConfiguration_initWithFreemarkerTemplateVersion_(self, incompatibleImprovements);
  return self;
}


#line 648
+ (void)checkFreeMarkerVersionClash {
  FreemarkerTemplateConfiguration_checkFreeMarkerVersionClash();
}


#line 656
- (void)createTemplateCache {
  FreemarkerTemplateConfiguration_createTemplateCache(self);
}


#line 667
- (void)recreateTemplateCacheWithWithFreemarkerCacheTemplateLoader:(id<FreemarkerCacheTemplateLoader>)loader
                                   withFreemarkerCacheCacheStorage:(id<FreemarkerCacheCacheStorage>)storage
                         withFreemarkerCacheTemplateLookupStrategy:(FreemarkerCacheTemplateLookupStrategy *)templateLookupStrategy
                             withFreemarkerCacheTemplateNameFormat:(FreemarkerCacheTemplateNameFormat *)templateNameFormat {
  FreemarkerTemplateConfiguration_recreateTemplateCacheWithWithFreemarkerCacheTemplateLoader_withFreemarkerCacheCacheStorage_withFreemarkerCacheTemplateLookupStrategy_withFreemarkerCacheTemplateNameFormat_(self, loader, storage, templateLookupStrategy, templateNameFormat);
}


#line 677
- (id<FreemarkerCacheTemplateLoader>)getDefaultTemplateLoader {
  return FreemarkerTemplateConfiguration_getDefaultTemplateLoader(self);
}

+ (id<FreemarkerCacheTemplateLoader>)createDefaultTemplateLoaderWithFreemarkerTemplateVersion:(FreemarkerTemplateVersion *)incompatibleImprovements {
  return FreemarkerTemplateConfiguration_createDefaultTemplateLoaderWithFreemarkerTemplateVersion_(incompatibleImprovements);
}

+ (id<FreemarkerCacheTemplateLoader>)createDefaultTemplateLoaderWithFreemarkerTemplateVersion:(FreemarkerTemplateVersion *)incompatibleImprovements
                                                            withFreemarkerCacheTemplateLoader:(id<FreemarkerCacheTemplateLoader>)existingTemplateLoader {
  return FreemarkerTemplateConfiguration_createDefaultTemplateLoaderWithFreemarkerTemplateVersion_withFreemarkerCacheTemplateLoader_(incompatibleImprovements, existingTemplateLoader);
}


#line 711
- (FreemarkerCacheTemplateLookupStrategy *)getDefaultTemplateLookupStrategy {
  return FreemarkerTemplateConfiguration_getDefaultTemplateLookupStrategy(self);
}

+ (FreemarkerCacheTemplateLookupStrategy *)getDefaultTemplateLookupStrategyWithFreemarkerTemplateVersion:(FreemarkerTemplateVersion *)incompatibleImprovements {
  return FreemarkerTemplateConfiguration_getDefaultTemplateLookupStrategyWithFreemarkerTemplateVersion_(incompatibleImprovements);
}

- (FreemarkerCacheTemplateNameFormat *)getDefaultTemplateNameFormat {
  return FreemarkerTemplateConfiguration_getDefaultTemplateNameFormat(self);
}

+ (FreemarkerCacheTemplateNameFormat *)getDefaultTemplateNameFormatWithFreemarkerTemplateVersion:(FreemarkerTemplateVersion *)incompatibleImprovements {
  return FreemarkerTemplateConfiguration_getDefaultTemplateNameFormatWithFreemarkerTemplateVersion_(incompatibleImprovements);
}

- (id<FreemarkerCacheCacheStorage>)getDefaultCacheStorage {
  return FreemarkerTemplateConfiguration_getDefaultCacheStorage(self);
}

+ (id<FreemarkerCacheCacheStorage>)createDefaultCacheStorageWithFreemarkerTemplateVersion:(FreemarkerTemplateVersion *)incompatibleImprovements
                                                          withFreemarkerCacheCacheStorage:(id<FreemarkerCacheCacheStorage>)existingCacheStorage {
  return FreemarkerTemplateConfiguration_createDefaultCacheStorageWithFreemarkerTemplateVersion_withFreemarkerCacheCacheStorage_(incompatibleImprovements, existingCacheStorage);
}


#line 738
+ (id<FreemarkerCacheCacheStorage>)createDefaultCacheStorageWithFreemarkerTemplateVersion:(FreemarkerTemplateVersion *)incompatibleImprovements {
  return FreemarkerTemplateConfiguration_createDefaultCacheStorageWithFreemarkerTemplateVersion_(incompatibleImprovements);
}


#line 746
- (id<FreemarkerTemplateTemplateExceptionHandler>)getDefaultTemplateExceptionHandler {
  return FreemarkerTemplateConfiguration_getDefaultTemplateExceptionHandler(self);
}

- (jboolean)getDefaultLogTemplateExceptions {
  return FreemarkerTemplateConfiguration_getDefaultLogTemplateExceptions(self);
}

- (id<FreemarkerTemplateObjectWrapper>)getDefaultObjectWrapper {
  return FreemarkerTemplateConfiguration_getDefaultObjectWrapper(self);
}


#line 759
+ (id<FreemarkerTemplateTemplateExceptionHandler>)getDefaultTemplateExceptionHandlerWithFreemarkerTemplateVersion:(FreemarkerTemplateVersion *)incompatibleImprovements {
  return FreemarkerTemplateConfiguration_getDefaultTemplateExceptionHandlerWithFreemarkerTemplateVersion_(incompatibleImprovements);
}


#line 764
+ (jboolean)getDefaultLogTemplateExceptionsWithFreemarkerTemplateVersion:(FreemarkerTemplateVersion *)incompatibleImprovements {
  return FreemarkerTemplateConfiguration_getDefaultLogTemplateExceptionsWithFreemarkerTemplateVersion_(incompatibleImprovements);
}

- (id)clone {
  @try {
    FreemarkerTemplateConfiguration *copy_ = (FreemarkerTemplateConfiguration *) check_class_cast([super clone], [FreemarkerTemplateConfiguration class]);
    ((FreemarkerTemplateConfiguration *) nil_chk(copy_))->sharedVariables_ = new_JavaUtilHashMap_initWithJavaUtilMap_(sharedVariables_);
    copy_->localeToCharsetMap_ = new_JavaUtilHashMap_initWithJavaUtilMap_(localeToCharsetMap_);
    copy_->autoImportNsToTmpMap_ = new_JavaUtilHashMap_initWithJavaUtilMap_(autoImportNsToTmpMap_);
    copy_->autoImports_ = (JavaUtilArrayList *) check_class_cast([((JavaUtilArrayList *) nil_chk(autoImports_)) clone], [JavaUtilArrayList class]);
    copy_->autoIncludes_ = (JavaUtilArrayList *) check_class_cast([((JavaUtilArrayList *) nil_chk(autoIncludes_)) clone], [JavaUtilArrayList class]);
    FreemarkerTemplateConfiguration_recreateTemplateCacheWithWithFreemarkerCacheTemplateLoader_withFreemarkerCacheCacheStorage_withFreemarkerCacheTemplateLookupStrategy_withFreemarkerCacheTemplateNameFormat_(copy_,
#line 777
    [((FreemarkerCacheTemplateCache *) nil_chk(cache_)) getTemplateLoader], [cache_ getCacheStorage],
#line 778
    [cache_ getTemplateLookupStrategy], [cache_ getTemplateNameFormat]);
    return copy_;
  }
  @catch (
#line 780
  JavaLangCloneNotSupportedException *e) {
    @throw new_FreemarkerCoreBugException_initWithNSString_([((JavaLangCloneNotSupportedException *) nil_chk(e)) getMessage]);
  }
}


#line 785
- (void)loadBuiltInSharedVariables {
  FreemarkerTemplateConfiguration_loadBuiltInSharedVariables(self);
}


#line 846
- (void)loadBuiltInEncodingMap {
  [((id<JavaUtilMap>) nil_chk(localeToCharsetMap_)) clear];
  (void) [localeToCharsetMap_ putWithId:@"ar" withId:@"ISO-8859-6"];
  (void) [localeToCharsetMap_ putWithId:@"be" withId:@"ISO-8859-5"];
  (void) [localeToCharsetMap_ putWithId:@"bg" withId:@"ISO-8859-5"];
  (void) [localeToCharsetMap_ putWithId:@"ca" withId:@"ISO-8859-1"];
  (void) [localeToCharsetMap_ putWithId:@"cs" withId:@"ISO-8859-2"];
  (void) [localeToCharsetMap_ putWithId:@"da" withId:@"ISO-8859-1"];
  (void) [localeToCharsetMap_ putWithId:@"de" withId:@"ISO-8859-1"];
  (void) [localeToCharsetMap_ putWithId:@"el" withId:@"ISO-8859-7"];
  (void) [localeToCharsetMap_ putWithId:@"en" withId:@"ISO-8859-1"];
  (void) [localeToCharsetMap_ putWithId:@"es" withId:@"ISO-8859-1"];
  (void) [localeToCharsetMap_ putWithId:@"et" withId:@"ISO-8859-1"];
  (void) [localeToCharsetMap_ putWithId:@"fi" withId:@"ISO-8859-1"];
  (void) [localeToCharsetMap_ putWithId:@"fr" withId:@"ISO-8859-1"];
  (void) [localeToCharsetMap_ putWithId:@"hr" withId:@"ISO-8859-2"];
  (void) [localeToCharsetMap_ putWithId:@"hu" withId:@"ISO-8859-2"];
  (void) [localeToCharsetMap_ putWithId:@"is" withId:@"ISO-8859-1"];
  (void) [localeToCharsetMap_ putWithId:@"it" withId:@"ISO-8859-1"];
  (void) [localeToCharsetMap_ putWithId:@"iw" withId:@"ISO-8859-8"];
  (void) [localeToCharsetMap_ putWithId:@"ja" withId:@"Shift_JIS"];
  (void) [localeToCharsetMap_ putWithId:@"ko" withId:@"EUC-KR"];
  (void) [localeToCharsetMap_ putWithId:@"lt" withId:@"ISO-8859-2"];
  (void) [localeToCharsetMap_ putWithId:@"lv" withId:@"ISO-8859-2"];
  (void) [localeToCharsetMap_ putWithId:@"mk" withId:@"ISO-8859-5"];
  (void) [localeToCharsetMap_ putWithId:@"nl" withId:@"ISO-8859-1"];
  (void) [localeToCharsetMap_ putWithId:@"no" withId:@"ISO-8859-1"];
  (void) [localeToCharsetMap_ putWithId:@"pl" withId:@"ISO-8859-2"];
  (void) [localeToCharsetMap_ putWithId:@"pt" withId:@"ISO-8859-1"];
  (void) [localeToCharsetMap_ putWithId:@"ro" withId:@"ISO-8859-2"];
  (void) [localeToCharsetMap_ putWithId:@"ru" withId:@"ISO-8859-5"];
  (void) [localeToCharsetMap_ putWithId:@"sh" withId:@"ISO-8859-5"];
  (void) [localeToCharsetMap_ putWithId:@"sk" withId:@"ISO-8859-2"];
  (void) [localeToCharsetMap_ putWithId:@"sl" withId:@"ISO-8859-2"];
  (void) [localeToCharsetMap_ putWithId:@"sq" withId:@"ISO-8859-2"];
  (void) [localeToCharsetMap_ putWithId:@"sr" withId:@"ISO-8859-5"];
  (void) [localeToCharsetMap_ putWithId:@"sv" withId:@"ISO-8859-1"];
  (void) [localeToCharsetMap_ putWithId:@"tr" withId:@"ISO-8859-9"];
  (void) [localeToCharsetMap_ putWithId:@"uk" withId:@"ISO-8859-5"];
  (void) [localeToCharsetMap_ putWithId:@"zh" withId:@"GB2312"];
  (void) [localeToCharsetMap_ putWithId:@"zh_TW" withId:@"Big5"];
}


#line 894
- (void)clearEncodingMap {
  [((id<JavaUtilMap>) nil_chk(localeToCharsetMap_)) clear];
}


#line 913
+ (FreemarkerTemplateConfiguration *)getDefaultConfiguration {
  return FreemarkerTemplateConfiguration_getDefaultConfiguration();
}


#line 931
+ (void)setDefaultConfigurationWithFreemarkerTemplateConfiguration:(FreemarkerTemplateConfiguration *)config {
  FreemarkerTemplateConfiguration_setDefaultConfigurationWithFreemarkerTemplateConfiguration_(config);
}


#line 956
- (void)setTemplateLoaderWithFreemarkerCacheTemplateLoader:(id<FreemarkerCacheTemplateLoader>)templateLoader {
  
#line 958
  @synchronized(self) {
    if ([((FreemarkerCacheTemplateCache *) nil_chk(cache_)) getTemplateLoader] != templateLoader) {
      FreemarkerTemplateConfiguration_recreateTemplateCacheWithWithFreemarkerCacheTemplateLoader_withFreemarkerCacheCacheStorage_withFreemarkerCacheTemplateLookupStrategy_withFreemarkerCacheTemplateNameFormat_(self, templateLoader, [cache_ getCacheStorage],
#line 961
      [cache_ getTemplateLookupStrategy], [cache_ getTemplateNameFormat]);
    }
    templateLoaderExplicitlySet_ = YES;
  }
}


#line 974
- (void)unsetTemplateLoader {
  if (templateLoaderExplicitlySet_) {
    [self setTemplateLoaderWithFreemarkerCacheTemplateLoader:FreemarkerTemplateConfiguration_getDefaultTemplateLoader(self)];
    templateLoaderExplicitlySet_ = NO;
  }
}


#line 986
- (jboolean)isTemplateLoaderExplicitlySet {
  return templateLoaderExplicitlySet_;
}


#line 993
- (id<FreemarkerCacheTemplateLoader>)getTemplateLoader {
  if (cache_ == nil) {
    return nil;
  }
  return [((FreemarkerCacheTemplateCache *) nil_chk(cache_)) getTemplateLoader];
}


#line 1006
- (void)setTemplateLookupStrategyWithFreemarkerCacheTemplateLookupStrategy:(FreemarkerCacheTemplateLookupStrategy *)templateLookupStrategy {
  if ([((FreemarkerCacheTemplateCache *) nil_chk(cache_)) getTemplateLookupStrategy] != templateLookupStrategy) {
    FreemarkerTemplateConfiguration_recreateTemplateCacheWithWithFreemarkerCacheTemplateLoader_withFreemarkerCacheCacheStorage_withFreemarkerCacheTemplateLookupStrategy_withFreemarkerCacheTemplateNameFormat_(self, [cache_ getTemplateLoader], [cache_ getCacheStorage],
#line 1009
    templateLookupStrategy, [cache_ getTemplateNameFormat]);
  }
  templateLookupStrategyExplicitlySet_ = YES;
}


#line 1021
- (void)unsetTemplateLookupStrategy {
  if (templateLookupStrategyExplicitlySet_) {
    [self setTemplateLookupStrategyWithFreemarkerCacheTemplateLookupStrategy:FreemarkerTemplateConfiguration_getDefaultTemplateLookupStrategy(self)];
    templateLookupStrategyExplicitlySet_ = NO;
  }
}


#line 1034
- (jboolean)isTemplateLookupStrategyExplicitlySet {
  return templateLookupStrategyExplicitlySet_;
}


#line 1041
- (FreemarkerCacheTemplateLookupStrategy *)getTemplateLookupStrategy {
  if (cache_ == nil) {
    return nil;
  }
  return [((FreemarkerCacheTemplateCache *) nil_chk(cache_)) getTemplateLookupStrategy];
}


#line 1054
- (void)setTemplateNameFormatWithFreemarkerCacheTemplateNameFormat:(FreemarkerCacheTemplateNameFormat *)templateNameFormat {
  if ([((FreemarkerCacheTemplateCache *) nil_chk(cache_)) getTemplateNameFormat] != templateNameFormat) {
    FreemarkerTemplateConfiguration_recreateTemplateCacheWithWithFreemarkerCacheTemplateLoader_withFreemarkerCacheCacheStorage_withFreemarkerCacheTemplateLookupStrategy_withFreemarkerCacheTemplateNameFormat_(self, [cache_ getTemplateLoader], [cache_ getCacheStorage],
#line 1057
    [cache_ getTemplateLookupStrategy], templateNameFormat);
  }
  templateNameFormatExplicitlySet_ = YES;
}


#line 1069
- (void)unsetTemplateNameFormat {
  if (templateNameFormatExplicitlySet_) {
    [self setTemplateNameFormatWithFreemarkerCacheTemplateNameFormat:FreemarkerTemplateConfiguration_getDefaultTemplateNameFormat(self)];
    templateNameFormatExplicitlySet_ = NO;
  }
}


#line 1081
- (jboolean)isTemplateNameFormatExplicitlySet {
  return templateNameFormatExplicitlySet_;
}


#line 1088
- (FreemarkerCacheTemplateNameFormat *)getTemplateNameFormat {
  if (cache_ == nil) {
    return nil;
  }
  return [((FreemarkerCacheTemplateCache *) nil_chk(cache_)) getTemplateNameFormat];
}


#line 1107
- (void)setCacheStorageWithFreemarkerCacheCacheStorage:(id<FreemarkerCacheCacheStorage>)cacheStorage {
  
#line 1109
  @synchronized(self) {
    if ([self getCacheStorage] != cacheStorage) {
      FreemarkerTemplateConfiguration_recreateTemplateCacheWithWithFreemarkerCacheTemplateLoader_withFreemarkerCacheCacheStorage_withFreemarkerCacheTemplateLookupStrategy_withFreemarkerCacheTemplateNameFormat_(self, [((FreemarkerCacheTemplateCache *) nil_chk(cache_)) getTemplateLoader], cacheStorage,
#line 1112
      [cache_ getTemplateLookupStrategy], [cache_ getTemplateNameFormat]);
    }
    cacheStorageExplicitlySet_ = YES;
  }
}


#line 1125
- (void)unsetCacheStorage {
  if (cacheStorageExplicitlySet_) {
    [self setCacheStorageWithFreemarkerCacheCacheStorage:FreemarkerTemplateConfiguration_getDefaultCacheStorage(self)];
    cacheStorageExplicitlySet_ = NO;
  }
}


#line 1137
- (jboolean)isCacheStorageExplicitlySet {
  return cacheStorageExplicitlySet_;
}


#line 1146
- (id<FreemarkerCacheCacheStorage>)getCacheStorage {
  
#line 1148
  @synchronized(self) {
    if (cache_ == nil) {
      return nil;
    }
    return [((FreemarkerCacheTemplateCache *) nil_chk(cache_)) getCacheStorage];
  }
}


#line 1164
- (void)setDirectoryForTemplateLoadingWithJavaIoFile:(JavaIoFile *)dir {
  id<FreemarkerCacheTemplateLoader> tl = [self getTemplateLoader];
  if ([tl isKindOfClass:[FreemarkerCacheFileTemplateLoader class]]) {
    NSString *path = [((JavaIoFile *) nil_chk(((FreemarkerCacheFileTemplateLoader *) nil_chk(((FreemarkerCacheFileTemplateLoader *) check_class_cast(tl, [FreemarkerCacheFileTemplateLoader class]))))->baseDir_)) getCanonicalPath];
    if ([((NSString *) nil_chk(path)) isEqual:[((JavaIoFile *) nil_chk(dir)) getCanonicalPath]])
#line 1169
    return;
  }
  [self setTemplateLoaderWithFreemarkerCacheTemplateLoader:new_FreemarkerCacheFileTemplateLoader_initWithJavaIoFile_(dir)];
}


#line 1187
- (void)setServletContextForTemplateLoadingWithId:(id)servletContext
                                     withNSString:(NSString *)path {
  @try {
    
#line 1190
    IOSClass *webappTemplateLoaderClass = FreemarkerTemplateUtilityClassUtil_forNameWithNSString_(@"freemarker.cache.WebappTemplateLoader");
    
#line 1193
    IOSClass *servletContextClass = FreemarkerTemplateUtilityClassUtil_forNameWithNSString_(@"javax.servlet.ServletContext");
    
#line 1195
    IOSObjectArray *constructorParamTypes;
    IOSObjectArray *constructorParams;
    if (path == nil) {
      constructorParamTypes = [IOSObjectArray newArrayWithObjects:(id[]){ servletContextClass } count:1 type:IOSClass_class_()];
      constructorParams = [IOSObjectArray newArrayWithObjects:(id[]){ servletContext } count:1 type:NSObject_class_()];
    }
    else {
      
#line 1201
      constructorParamTypes = [IOSObjectArray newArrayWithObjects:(id[]){ servletContextClass, NSString_class_() } count:2 type:IOSClass_class_()];
      constructorParams = [IOSObjectArray newArrayWithObjects:(id[]){ servletContext, path } count:2 type:NSObject_class_()];
    }
    
#line 1205
    [self setTemplateLoaderWithFreemarkerCacheTemplateLoader:(id<FreemarkerCacheTemplateLoader>) check_protocol_cast(
#line 1206
    [((JavaLangReflectConstructor *) nil_chk([((IOSClass *) nil_chk(webappTemplateLoaderClass)) getConstructor:
#line 1207
    constructorParamTypes])) newInstanceWithNSObjectArray:
#line 1208
    constructorParams], @protocol(FreemarkerCacheTemplateLoader))];
  }
  @catch (
#line 1209
  JavaLangException *e) {
    @throw new_FreemarkerCoreBugException_initWithJavaLangThrowable_(e);
  }
}


#line 1225
- (void)setClassForTemplateLoadingWithIOSClass:(IOSClass *)resourceLoaderClass
                                  withNSString:(NSString *)basePackagePath {
  [self setTemplateLoaderWithFreemarkerCacheTemplateLoader:new_FreemarkerCacheClassTemplateLoader_initWithIOSClass_withNSString_(resourceLoaderClass, basePackagePath)];
}


#line 1243
- (void)setClassLoaderForTemplateLoadingWithJavaLangClassLoader:(JavaLangClassLoader *)classLoader
                                                   withNSString:(NSString *)basePackagePath {
  [self setTemplateLoaderWithFreemarkerCacheTemplateLoader:new_FreemarkerCacheClassTemplateLoader_initWithJavaLangClassLoader_withNSString_(classLoader, basePackagePath)];
}


#line 1259
- (void)setTemplateUpdateDelayWithInt:(jint)seconds {
  [((FreemarkerCacheTemplateCache *) nil_chk(cache_)) setDelayWithLong:1000LL * seconds];
}


#line 1277
- (void)setTemplateUpdateDelayMillisecondsWithLong:(jlong)millis {
  [((FreemarkerCacheTemplateCache *) nil_chk(cache_)) setDelayWithLong:millis];
}


#line 1286
- (jlong)getTemplateUpdateDelayMilliseconds {
  return [((FreemarkerCacheTemplateCache *) nil_chk(cache_)) getDelay];
}


#line 1302
- (void)setStrictSyntaxModeWithBoolean:(jboolean)b {
  strictSyntax_ = b;
}

- (void)setObjectWrapperWithFreemarkerTemplateObjectWrapper:(id<FreemarkerTemplateObjectWrapper>)objectWrapper {
  id<FreemarkerTemplateObjectWrapper> prevObjectWrapper = [self getObjectWrapper];
  [super setObjectWrapperWithFreemarkerTemplateObjectWrapper:objectWrapper];
  objectWrapperExplicitlySet_ = YES;
  if (objectWrapper != prevObjectWrapper) {
    @try {
      FreemarkerTemplateConfiguration_setSharedVariablesFromRewrappableSharedVariables(self);
    }
    @catch (
#line 1313
    FreemarkerTemplateTemplateModelException *e) {
      @throw new_JavaLangRuntimeException_initWithNSString_withJavaLangThrowable_(
#line 1315
      @"Failed to re-wrap earliearly set shared variables with the newly set object wrapper",
#line 1316
      e);
    }
  }
}


#line 1328
- (void)unsetObjectWrapper {
  if (objectWrapperExplicitlySet_) {
    [self setObjectWrapperWithFreemarkerTemplateObjectWrapper:FreemarkerTemplateConfiguration_getDefaultObjectWrapper(self)];
    objectWrapperExplicitlySet_ = NO;
  }
}


#line 1340
- (jboolean)isObjectWrapperExplicitlySet {
  return objectWrapperExplicitlySet_;
}

- (void)setTemplateExceptionHandlerWithFreemarkerTemplateTemplateExceptionHandler:(id<FreemarkerTemplateTemplateExceptionHandler>)templateExceptionHandler {
  [super setTemplateExceptionHandlerWithFreemarkerTemplateTemplateExceptionHandler:templateExceptionHandler];
  templateExceptionHandlerExplicitlySet_ = YES;
}


#line 1356
- (void)unsetTemplateExceptionHandler {
  if (templateExceptionHandlerExplicitlySet_) {
    [self setTemplateExceptionHandlerWithFreemarkerTemplateTemplateExceptionHandler:FreemarkerTemplateConfiguration_getDefaultTemplateExceptionHandler(self)];
    templateExceptionHandlerExplicitlySet_ = NO;
  }
}


#line 1369
- (jboolean)isTemplateExceptionHandlerExplicitlySet {
  return templateExceptionHandlerExplicitlySet_;
}


#line 1376
- (void)setLogTemplateExceptionsWithBoolean:(jboolean)value {
  [super setLogTemplateExceptionsWithBoolean:value];
  logTemplateExceptionsExplicitlySet_ = YES;
}


#line 1388
- (void)unsetLogTemplateExceptions {
  if (logTemplateExceptionsExplicitlySet_) {
    [self setLogTemplateExceptionsWithBoolean:FreemarkerTemplateConfiguration_getDefaultLogTemplateExceptions(self)];
    logTemplateExceptionsExplicitlySet_ = NO;
  }
}


#line 1400
- (jboolean)isLogTemplateExceptionsExplicitlySet {
  return logTemplateExceptionsExplicitlySet_;
}


#line 1407
- (jboolean)getStrictSyntaxMode {
  return strictSyntax_;
}


#line 1426
- (void)setIncompatibleImprovementsWithFreemarkerTemplateVersion:(FreemarkerTemplateVersion *)incompatibleImprovements {
  FreemarkerTemplate_TemplateAPI_checkVersionNotNullAndSupportedWithFreemarkerTemplateVersion_(incompatibleImprovements);
  
#line 1429
  if (![((FreemarkerTemplateVersion *) nil_chk(self->incompatibleImprovements_)) isEqual:incompatibleImprovements]) {
    self->incompatibleImprovements_ = incompatibleImprovements;
    
#line 1432
    if (!templateLoaderExplicitlySet_) {
      templateLoaderExplicitlySet_ = YES;
      [self unsetTemplateLoader];
    }
    
#line 1437
    if (!templateLookupStrategyExplicitlySet_) {
      templateLookupStrategyExplicitlySet_ = YES;
      [self unsetTemplateLookupStrategy];
    }
    
#line 1442
    if (!templateNameFormatExplicitlySet_) {
      templateNameFormatExplicitlySet_ = YES;
      [self unsetTemplateNameFormat];
    }
    
#line 1447
    if (!cacheStorageExplicitlySet_) {
      cacheStorageExplicitlySet_ = YES;
      [self unsetCacheStorage];
    }
    
#line 1452
    if (!templateExceptionHandlerExplicitlySet_) {
      templateExceptionHandlerExplicitlySet_ = YES;
      [self unsetTemplateExceptionHandler];
    }
    
#line 1457
    if (!logTemplateExceptionsExplicitlySet_) {
      logTemplateExceptionsExplicitlySet_ = YES;
      [self unsetLogTemplateExceptions];
    }
    
#line 1462
    if (!objectWrapperExplicitlySet_) {
      objectWrapperExplicitlySet_ = YES;
      [self unsetObjectWrapper];
    }
  }
}


#line 1474
- (FreemarkerTemplateVersion *)getIncompatibleImprovements {
  return incompatibleImprovements_;
}


#line 1482
- (void)setIncompatibleEnhancementsWithNSString:(NSString *)version_ {
  [self setIncompatibleImprovementsWithFreemarkerTemplateVersion:new_FreemarkerTemplateVersion_initWithNSString_(version_)];
}


#line 1489
- (NSString *)getIncompatibleEnhancements {
  return [((FreemarkerTemplateVersion *) nil_chk(incompatibleImprovements_)) description];
}


#line 1496
- (jint)getParsedIncompatibleEnhancements {
  return [((FreemarkerTemplateVersion *) nil_chk([self getIncompatibleImprovements])) intValue];
}


#line 1504
- (void)setWhitespaceStrippingWithBoolean:(jboolean)b {
  whitespaceStripping_ = b;
}


#line 1514
- (jboolean)getWhitespaceStripping {
  return whitespaceStripping_;
}


#line 1541
- (void)setTagSyntaxWithInt:(jint)tagSyntax {
  if (tagSyntax != FreemarkerTemplateConfiguration_AUTO_DETECT_TAG_SYNTAX &&
#line 1543
  tagSyntax != FreemarkerTemplateConfiguration_SQUARE_BRACKET_TAG_SYNTAX &&
#line 1544
  tagSyntax != FreemarkerTemplateConfiguration_ANGLE_BRACKET_TAG_SYNTAX) {
    
#line 1546
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"\"tag_syntax\" can only be set to one of these: Configuration.AUTO_DETECT_TAG_SYNTAX, Configuration.ANGLE_BRACKET_SYNTAX, or Configuration.SQAUARE_BRACKET_SYNTAX");
  }
  
#line 1550
  self->tagSyntax_ = tagSyntax;
}

- (jint)getTagSyntax {
  return tagSyntax_;
}


#line 1611
- (void)setNamingConventionWithInt:(jint)namingConvention {
  if (namingConvention != FreemarkerTemplateConfiguration_AUTO_DETECT_NAMING_CONVENTION &&
#line 1613
  namingConvention != FreemarkerTemplateConfiguration_LEGACY_NAMING_CONVENTION &&
#line 1614
  namingConvention != FreemarkerTemplateConfiguration_CAMEL_CASE_NAMING_CONVENTION) {
    
#line 1616
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"\"naming_convention\" can only be set to one of these: Configuration.AUTO_DETECT_NAMING_CONVENTION, or Configuration.LEGACY_NAMING_CONVENTIONor Configuration.CAMEL_CASE_NAMING_CONVENTION");
  }
  
#line 1621
  self->namingConvention_ = namingConvention;
}


#line 1629
- (jint)getNamingConvention {
  return namingConvention_;
}


#line 1644
- (FreemarkerTemplateTemplate *)getTemplateWithNSString:(NSString *)name {
  
#line 1646
  return [self getTemplateWithNSString:name withJavaUtilLocale:nil withId:nil withNSString:nil withBoolean:YES withBoolean:NO];
}


#line 1653
- (FreemarkerTemplateTemplate *)getTemplateWithNSString:(NSString *)name
                                     withJavaUtilLocale:(JavaUtilLocale *)locale {
  
#line 1655
  return [self getTemplateWithNSString:name withJavaUtilLocale:locale withId:nil withNSString:nil withBoolean:YES withBoolean:NO];
}


#line 1662
- (FreemarkerTemplateTemplate *)getTemplateWithNSString:(NSString *)name
                                           withNSString:(NSString *)encoding {
  
#line 1664
  return [self getTemplateWithNSString:name withJavaUtilLocale:nil withId:nil withNSString:encoding withBoolean:YES withBoolean:NO];
}


#line 1671
- (FreemarkerTemplateTemplate *)getTemplateWithNSString:(NSString *)name
                                     withJavaUtilLocale:(JavaUtilLocale *)locale
                                           withNSString:(NSString *)encoding {
  
#line 1673
  return [self getTemplateWithNSString:name withJavaUtilLocale:locale withId:nil withNSString:encoding withBoolean:YES withBoolean:NO];
}


#line 1680
- (FreemarkerTemplateTemplate *)getTemplateWithNSString:(NSString *)name
                                     withJavaUtilLocale:(JavaUtilLocale *)locale
                                           withNSString:(NSString *)encoding
                                            withBoolean:(jboolean)parseAsFTL {
  
#line 1682
  return [self getTemplateWithNSString:name withJavaUtilLocale:locale withId:nil withNSString:encoding withBoolean:parseAsFTL withBoolean:NO];
}


#line 1691
- (FreemarkerTemplateTemplate *)getTemplateWithNSString:(NSString *)name
                                     withJavaUtilLocale:(JavaUtilLocale *)locale
                                           withNSString:(NSString *)encoding
                                            withBoolean:(jboolean)parseAsFTL
                                            withBoolean:(jboolean)ignoreMissing {
  
#line 1693
  return [self getTemplateWithNSString:name withJavaUtilLocale:locale withId:nil withNSString:encoding withBoolean:parseAsFTL withBoolean:ignoreMissing];
}


#line 1776
- (FreemarkerTemplateTemplate *)getTemplateWithNSString:(NSString *)name
                                     withJavaUtilLocale:(JavaUtilLocale *)locale
                                                 withId:(id)customLookupCondition
                                           withNSString:(NSString *)encoding
                                            withBoolean:(jboolean)parseAsFTL
                                            withBoolean:(jboolean)ignoreMissing {
  
#line 1779
  if (locale == nil) {
    locale = [self getLocale];
  }
  if (encoding == nil) {
    encoding = [self getEncodingWithJavaUtilLocale:locale];
  }
  
#line 1786
  FreemarkerCacheTemplateCache_MaybeMissingTemplate *maybeTemp = [((FreemarkerCacheTemplateCache *) nil_chk(cache_)) getTemplateWithNSString:name withJavaUtilLocale:locale withId:customLookupCondition withNSString:encoding withBoolean:parseAsFTL];
  FreemarkerTemplateTemplate *temp = [((FreemarkerCacheTemplateCache_MaybeMissingTemplate *) nil_chk(maybeTemp)) getTemplate];
  if (temp == nil) {
    if (ignoreMissing) {
      return nil;
    }
    
#line 1793
    id<FreemarkerCacheTemplateLoader> tl = [self getTemplateLoader];
    NSString *msg;
    if (tl == nil) {
      msg = JreStrcat("$$$", @"Don't know where to load template ", FreemarkerTemplateUtilityStringUtil_jQuoteWithNSString_(name), @" from because the \"template_loader\" FreeMarker setting wasn't set (Configuration.setTemplateLoader), so it's null.");
    }
    else {
      
#line 1800
      NSString *missingTempNormName = [maybeTemp getMissingTemplateNormalizedName];
      NSString *missingTempReason = [maybeTemp getMissingTemplateReason];
      FreemarkerCacheTemplateLookupStrategy *templateLookupStrategy = [self getTemplateLookupStrategy];
      msg = JreStrcat("$$$$C$$$C$$$", @"Template not found for name ", FreemarkerTemplateUtilityStringUtil_jQuoteWithNSString_(name),
#line 1804
      (missingTempNormName != nil && name != nil &&
#line 1805
      ![((NSString *) nil_chk(FreemarkerTemplateConfiguration_removeInitialSlashWithNSString_(self, name))) isEqual:missingTempNormName] ? JreStrcat("$$C", @" (normalized: ", FreemarkerTemplateUtilityStringUtil_jQuoteWithNSString_(
#line 1806
      missingTempNormName), ')') :
#line 1807
      @""),
#line 1808
      (customLookupCondition != nil ? JreStrcat("$$", @" and custom lookup condition ", FreemarkerTemplateUtilityStringUtil_jQuoteWithId_(
#line 1809
      customLookupCondition)) : @""), '.',
#line 1811
      (missingTempReason != nil ? JreStrcat("$$", @"\nReason given: ", FreemarkerTemplateConfiguration_ensureSentenceIsClosedWithNSString_(self,
#line 1812
      missingTempReason)) :
#line 1813
      @""), @"\nThe name was interpreted by this TemplateLoader: ", FreemarkerTemplateUtilityStringUtil_tryToStringWithId_(
#line 1815
      tl), '.',
#line 1816
      (!FreemarkerTemplateConfiguration_isKnownNonConfusingLookupStrategyWithFreemarkerCacheTemplateLookupStrategy_(self, templateLookupStrategy) ? JreStrcat("$$$", @"\n(Before that, the name was possibly changed by this lookup strategy: ", FreemarkerTemplateUtilityStringUtil_tryToStringWithId_(
#line 1818
      templateLookupStrategy), @".)") :
#line 1819
      @""),
#line 1821
      (!templateLoaderExplicitlySet_ ? @"\nWarning: The \"template_loader\" FreeMarker setting wasn't set (Configuration.setTemplateLoader), and using the default value is most certainly not intended and dangerous, and can be the cause of this error." :
#line 1825
      @""),
#line 1826
      (missingTempReason == nil && [((NSString *) nil_chk(name)) indexOf:'\\'] != -1 ? @"\nWarning: The name contains backslash (\"\\\") instead of slash (\"/\"); template names should use slash only." :
#line 1829
      @""));
    }
    
#line 1832
    NSString *normName = [maybeTemp getMissingTemplateNormalizedName];
    @throw new_FreemarkerTemplateTemplateNotFoundException_initWithNSString_withId_withNSString_(
#line 1834
    normName != nil ? normName : name,
#line 1835
    customLookupCondition,
#line 1836
    msg);
  }
  return temp;
}


#line 1841
- (jboolean)isKnownNonConfusingLookupStrategyWithFreemarkerCacheTemplateLookupStrategy:(FreemarkerCacheTemplateLookupStrategy *)templateLookupStrategy {
  return FreemarkerTemplateConfiguration_isKnownNonConfusingLookupStrategyWithFreemarkerCacheTemplateLookupStrategy_(self, templateLookupStrategy);
}

- (NSString *)removeInitialSlashWithNSString:(NSString *)name {
  return FreemarkerTemplateConfiguration_removeInitialSlashWithNSString_(self, name);
}

- (NSString *)ensureSentenceIsClosedWithNSString:(NSString *)s {
  return FreemarkerTemplateConfiguration_ensureSentenceIsClosedWithNSString_(self, s);
}


#line 1873
- (void)setDefaultEncodingWithNSString:(NSString *)encoding {
  defaultEncoding_ = encoding;
}


#line 1882
- (NSString *)getDefaultEncoding {
  return defaultEncoding_;
}


#line 1892
- (NSString *)getEncodingWithJavaUtilLocale:(JavaUtilLocale *)locale {
  if ([((id<JavaUtilMap>) nil_chk(localeToCharsetMap_)) isEmpty]) {
    return defaultEncoding_;
  }
  else {
    NSString *charset = (NSString *) check_class_cast([localeToCharsetMap_ getWithId:[((JavaUtilLocale *) nil_chk(locale)) description]], [NSString class]);
    if (charset == nil) {
      if (((jint) [((NSString *) nil_chk([locale getVariant])) length]) > 0) {
        JavaUtilLocale *l = new_JavaUtilLocale_initWithNSString_withNSString_([locale getLanguage], [locale getCountry]);
        charset = (NSString *) check_class_cast([localeToCharsetMap_ getWithId:[l description]], [NSString class]);
        if (charset != nil) {
          (void) [localeToCharsetMap_ putWithId:[locale description] withId:charset];
        }
      }
      charset = (NSString *) check_class_cast([localeToCharsetMap_ getWithId:[locale getLanguage]], [NSString class]);
      if (charset != nil) {
        (void) [localeToCharsetMap_ putWithId:[locale description] withId:charset];
      }
    }
    return charset != nil ? charset : defaultEncoding_;
  }
}


#line 1924
- (void)setEncodingWithJavaUtilLocale:(JavaUtilLocale *)locale
                         withNSString:(NSString *)encoding {
  (void) [((id<JavaUtilMap>) nil_chk(localeToCharsetMap_)) putWithId:[((JavaUtilLocale *) nil_chk(locale)) description] withId:encoding];
}


#line 1947
- (void)setSharedVariableWithNSString:(NSString *)name
  withFreemarkerTemplateTemplateModel:(id<FreemarkerTemplateTemplateModel>)tm {
  id replaced = [((JavaUtilHashMap *) nil_chk(sharedVariables_)) putWithId:name withId:tm];
  if (replaced != nil && rewrappableSharedVariables_ != nil) {
    (void) [rewrappableSharedVariables_ removeWithId:name];
  }
}


#line 1960
- (id<JavaUtilSet>)getSharedVariableNames {
  return new_JavaUtilHashSet_initWithJavaUtilCollection_([((JavaUtilHashMap *) nil_chk(sharedVariables_)) keySet]);
}


#line 1979
- (void)setSharedVariableWithNSString:(NSString *)name
                               withId:(id)value {
  [self setSharedVariableWithNSString:name withFreemarkerTemplateTemplateModel:[((id<FreemarkerTemplateObjectWrapper>) nil_chk([self getObjectWrapper])) wrapWithId:value]];
}


#line 2005
- (void)setSharedVariblesWithJavaUtilMap:(id<JavaUtilMap>)map {
  rewrappableSharedVariables_ = new_JavaUtilHashMap_initWithJavaUtilMap_(map);
  [((JavaUtilHashMap *) nil_chk(sharedVariables_)) clear];
  FreemarkerTemplateConfiguration_setSharedVariablesFromRewrappableSharedVariables(self);
}

- (void)setSharedVariablesFromRewrappableSharedVariables {
  FreemarkerTemplateConfiguration_setSharedVariablesFromRewrappableSharedVariables(self);
}


#line 2047
- (void)setAllSharedVariablesWithFreemarkerTemplateTemplateHashModelEx:(id<FreemarkerTemplateTemplateHashModelEx>)hash_ {
  id<FreemarkerTemplateTemplateModelIterator> keys = [((id<FreemarkerTemplateTemplateCollectionModel>) nil_chk([((id<FreemarkerTemplateTemplateHashModelEx>) nil_chk(hash_)) keys])) iterator];
  id<FreemarkerTemplateTemplateModelIterator> values = [((id<FreemarkerTemplateTemplateCollectionModel>) nil_chk([hash_ values])) iterator];
  while ([((id<FreemarkerTemplateTemplateModelIterator>) nil_chk(keys)) hasNext]) {
    
#line 2052
    [self setSharedVariableWithNSString:[((id<FreemarkerTemplateTemplateScalarModel>) nil_chk(((id<FreemarkerTemplateTemplateScalarModel>) check_protocol_cast([keys next], @protocol(FreemarkerTemplateTemplateScalarModel))))) getAsString] withFreemarkerTemplateTemplateModel:[((id<FreemarkerTemplateTemplateModelIterator>) nil_chk(values)) next]];
  }
}


#line 2068
- (id<FreemarkerTemplateTemplateModel>)getSharedVariableWithNSString:(NSString *)name {
  return (id<FreemarkerTemplateTemplateModel>) check_protocol_cast([((JavaUtilHashMap *) nil_chk(sharedVariables_)) getWithId:name], @protocol(FreemarkerTemplateTemplateModel));
}


#line 2075
- (void)clearSharedVariables {
  [((JavaUtilHashMap *) nil_chk(sharedVariables_)) clear];
  FreemarkerTemplateConfiguration_loadBuiltInSharedVariables(self);
}


#line 2086
- (void)clearTemplateCache {
  [((FreemarkerCacheTemplateCache *) nil_chk(cache_)) clear];
}


#line 2094
- (void)removeTemplateFromCacheWithNSString:(NSString *)name {
  JavaUtilLocale *loc = [self getLocale];
  [self removeTemplateFromCacheWithNSString:name withJavaUtilLocale:loc withNSString:[self getEncodingWithJavaUtilLocale:loc] withBoolean:YES];
}


#line 2103
- (void)removeTemplateFromCacheWithNSString:(NSString *)name
                         withJavaUtilLocale:(JavaUtilLocale *)locale {
  [self removeTemplateFromCacheWithNSString:name withJavaUtilLocale:locale withNSString:[self getEncodingWithJavaUtilLocale:locale] withBoolean:YES];
}


#line 2111
- (void)removeTemplateFromCacheWithNSString:(NSString *)name
                               withNSString:(NSString *)encoding {
  [self removeTemplateFromCacheWithNSString:name withJavaUtilLocale:[self getLocale] withNSString:encoding withBoolean:YES];
}


#line 2119
- (void)removeTemplateFromCacheWithNSString:(NSString *)name
                         withJavaUtilLocale:(JavaUtilLocale *)locale
                               withNSString:(NSString *)encoding {
  [self removeTemplateFromCacheWithNSString:name withJavaUtilLocale:locale withNSString:encoding withBoolean:YES];
}


#line 2136
- (void)removeTemplateFromCacheWithNSString:(NSString *)name
                         withJavaUtilLocale:(JavaUtilLocale *)locale
                               withNSString:(NSString *)encoding
                                withBoolean:(jboolean)parse {
  
#line 2139
  [((FreemarkerCacheTemplateCache *) nil_chk(cache_)) removeTemplateWithNSString:name withJavaUtilLocale:locale withNSString:encoding withBoolean:parse];
}


#line 2147
- (jboolean)getLocalizedLookup {
  return [((FreemarkerCacheTemplateCache *) nil_chk(cache_)) getLocalizedLookup];
}


#line 2171
- (void)setLocalizedLookupWithBoolean:(jboolean)localizedLookup {
  self->localizedLookup_ = localizedLookup;
  [((FreemarkerCacheTemplateCache *) nil_chk(cache_)) setLocalizedLookupWithBoolean:localizedLookup];
}

- (void)setSettingWithNSString:(NSString *)name
                  withNSString:(NSString *)value {
  jboolean unknown = NO;
  @try {
    if ([@"TemplateUpdateInterval" equalsIgnoreCase:name]) {
      name = FreemarkerTemplateConfiguration_TEMPLATE_UPDATE_DELAY_KEY_;
    }
    else
#line 2181
    if ([@"DefaultEncoding" equalsIgnoreCase:name]) {
      name = FreemarkerTemplateConfiguration_DEFAULT_ENCODING_KEY_;
    }
    
#line 2185
    if ([((NSString *) nil_chk(FreemarkerTemplateConfiguration_DEFAULT_ENCODING_KEY_SNAKE_CASE_)) isEqual:name] || [((NSString *) nil_chk(FreemarkerTemplateConfiguration_DEFAULT_ENCODING_KEY_CAMEL_CASE_)) isEqual:name]) {
      [self setDefaultEncodingWithNSString:value];
    }
    else
#line 2187
    if ([((NSString *) nil_chk(FreemarkerTemplateConfiguration_LOCALIZED_LOOKUP_KEY_SNAKE_CASE_)) isEqual:name] || [((NSString *) nil_chk(FreemarkerTemplateConfiguration_LOCALIZED_LOOKUP_KEY_CAMEL_CASE_)) isEqual:name]) {
      [self setLocalizedLookupWithBoolean:FreemarkerTemplateUtilityStringUtil_getYesNoWithNSString_(value)];
    }
    else
#line 2189
    if ([((NSString *) nil_chk(FreemarkerTemplateConfiguration_STRICT_SYNTAX_KEY_SNAKE_CASE_)) isEqual:name] || [((NSString *) nil_chk(FreemarkerTemplateConfiguration_STRICT_SYNTAX_KEY_CAMEL_CASE_)) isEqual:name]) {
      [self setStrictSyntaxModeWithBoolean:FreemarkerTemplateUtilityStringUtil_getYesNoWithNSString_(value)];
    }
    else
#line 2191
    if ([((NSString *) nil_chk(FreemarkerTemplateConfiguration_WHITESPACE_STRIPPING_KEY_SNAKE_CASE_)) isEqual:name] ||
#line 2192
    [((NSString *) nil_chk(FreemarkerTemplateConfiguration_WHITESPACE_STRIPPING_KEY_CAMEL_CASE_)) isEqual:name]) {
      [self setWhitespaceStrippingWithBoolean:FreemarkerTemplateUtilityStringUtil_getYesNoWithNSString_(value)];
    }
    else
#line 2194
    if ([((NSString *) nil_chk(FreemarkerTemplateConfiguration_CACHE_STORAGE_KEY_SNAKE_CASE_)) isEqual:name] || [((NSString *) nil_chk(FreemarkerTemplateConfiguration_CACHE_STORAGE_KEY_CAMEL_CASE_)) isEqual:name]) {
      if ([((NSString *) nil_chk(value)) equalsIgnoreCase:FreemarkerTemplateConfiguration_DEFAULT_]) {
        [self unsetCacheStorage];
      }
      
#line 2197
      if ([value indexOf:'.'] == -1) {
        jint strongSize = 0;
        jint softSize = 0;
        id<JavaUtilMap> map = FreemarkerTemplateUtilityStringUtil_parseNameValuePairListWithNSString_withNSString_(
#line 2201
        value, NSString_valueOfInt_(JavaLangInteger_MAX_VALUE));
        id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(map)) entrySet])) iterator];
        while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
          id<JavaUtilMap_Entry> ent = (id<JavaUtilMap_Entry>) check_protocol_cast([it next], @protocol(JavaUtilMap_Entry));
          NSString *pname = (NSString *) check_class_cast([((id<JavaUtilMap_Entry>) nil_chk(ent)) getKey], [NSString class]);
          jint pvalue;
          @try {
            pvalue = JavaLangInteger_parseIntWithNSString_((NSString *) check_class_cast([ent getValue], [NSString class]));
          }
          @catch (
#line 2209
          JavaLangNumberFormatException *e) {
            @throw [self invalidSettingValueExceptionWithNSString:name withNSString:value];
          }
          if ([@"soft" equalsIgnoreCase:pname]) {
            softSize = pvalue;
          }
          else
#line 2214
          if ([@"strong" equalsIgnoreCase:pname]) {
            strongSize = pvalue;
          }
          else {
            
#line 2217
            @throw [self invalidSettingValueExceptionWithNSString:name withNSString:value];
          }
        }
        if (softSize == 0 && strongSize == 0) {
          @throw [self invalidSettingValueExceptionWithNSString:name withNSString:value];
        }
        [self setCacheStorageWithFreemarkerCacheCacheStorage:new_FreemarkerCacheMruCacheStorage_initWithInt_withInt_(strongSize, softSize)];
      }
      else {
        
#line 2225
        [self setCacheStorageWithFreemarkerCacheCacheStorage:(id<FreemarkerCacheCacheStorage>) check_protocol_cast(FreemarkerCore_ObjectBuilderSettingEvaluator_evalWithNSString_withIOSClass_withFreemarkerCore_SettingEvaluationEnvironment_(
#line 2226
        value, FreemarkerCacheCacheStorage_class_(), FreemarkerCore_SettingEvaluationEnvironment_getCurrent()), @protocol(FreemarkerCacheCacheStorage))];
      }
    }
    else
#line 2228
    if ([((NSString *) nil_chk(FreemarkerTemplateConfiguration_TEMPLATE_UPDATE_DELAY_KEY_SNAKE_CASE_)) isEqual:name] ||
#line 2229
    [((NSString *) nil_chk(FreemarkerTemplateConfiguration_TEMPLATE_UPDATE_DELAY_KEY_CAMEL_CASE_)) isEqual:name]) {
      jlong multipier;
      NSString *valueWithoutUnit;
      if ([((NSString *) nil_chk(value)) hasSuffix:@"ms"]) {
        multipier = 1;
        valueWithoutUnit = FreemarkerTemplateConfiguration_rightTrimWithNSString_(self, [value substring:0 endIndex:((jint) [value length]) - 2]);
      }
      else
#line 2235
      if ([value hasSuffix:@"s"]) {
        multipier = 1000;
        valueWithoutUnit = FreemarkerTemplateConfiguration_rightTrimWithNSString_(self, [value substring:0 endIndex:((jint) [value length]) - 1]);
      }
      else
#line 2238
      if ([value hasSuffix:@"m"]) {
        multipier = 1000 * 60;
        valueWithoutUnit = FreemarkerTemplateConfiguration_rightTrimWithNSString_(self, [value substring:0 endIndex:((jint) [value length]) - 1]);
      }
      else
#line 2241
      if ([value hasSuffix:@"h"]) {
        multipier = 1000 * 60 * 60;
        valueWithoutUnit = FreemarkerTemplateConfiguration_rightTrimWithNSString_(self, [value substring:0 endIndex:((jint) [value length]) - 1]);
      }
      else {
        
#line 2245
        multipier = 1000;
        valueWithoutUnit = value;
      }
      [self setTemplateUpdateDelayMillisecondsWithLong:JavaLangInteger_parseIntWithNSString_(valueWithoutUnit) * multipier];
    }
    else
#line 2249
    if ([((NSString *) nil_chk(FreemarkerTemplateConfiguration_AUTO_INCLUDE_KEY_SNAKE_CASE_)) isEqual:name] ||
#line 2250
    [((NSString *) nil_chk(FreemarkerTemplateConfiguration_AUTO_INCLUDE_KEY_CAMEL_CASE_)) isEqual:name]) {
      [self setAutoIncludesWithJavaUtilList:[self parseAsListWithNSString:value]];
    }
    else
#line 2252
    if ([((NSString *) nil_chk(FreemarkerTemplateConfiguration_AUTO_IMPORT_KEY_SNAKE_CASE_)) isEqual:name] || [((NSString *) nil_chk(FreemarkerTemplateConfiguration_AUTO_IMPORT_KEY_CAMEL_CASE_)) isEqual:name]) {
      [self setAutoImportsWithJavaUtilMap:[self parseAsImportListWithNSString:value]];
    }
    else
#line 2254
    if ([((NSString *) nil_chk(FreemarkerTemplateConfiguration_TAG_SYNTAX_KEY_SNAKE_CASE_)) isEqual:name] || [((NSString *) nil_chk(FreemarkerTemplateConfiguration_TAG_SYNTAX_KEY_CAMEL_CASE_)) isEqual:name]) {
      if ([@"auto_detect" isEqual:value] || [@"autoDetect" isEqual:value]) {
        [self setTagSyntaxWithInt:FreemarkerTemplateConfiguration_AUTO_DETECT_TAG_SYNTAX];
      }
      else
#line 2257
      if ([@"angle_bracket" isEqual:value] || [@"angleBracket" isEqual:value]) {
        [self setTagSyntaxWithInt:FreemarkerTemplateConfiguration_ANGLE_BRACKET_TAG_SYNTAX];
      }
      else
#line 2259
      if ([@"square_bracket" isEqual:value] || [@"squareBracket" isEqual:value]) {
        [self setTagSyntaxWithInt:FreemarkerTemplateConfiguration_SQUARE_BRACKET_TAG_SYNTAX];
      }
      else {
        
#line 2262
        @throw [self invalidSettingValueExceptionWithNSString:name withNSString:value];
      }
    }
    else
#line 2264
    if ([((NSString *) nil_chk(FreemarkerTemplateConfiguration_NAMING_CONVENTION_KEY_SNAKE_CASE_)) isEqual:name] || [((NSString *) nil_chk(FreemarkerTemplateConfiguration_NAMING_CONVENTION_KEY_CAMEL_CASE_)) isEqual:name]) {
      if ([@"auto_detect" isEqual:value] || [@"autoDetect" isEqual:value]) {
        [self setNamingConventionWithInt:FreemarkerTemplateConfiguration_AUTO_DETECT_NAMING_CONVENTION];
      }
      else
#line 2267
      if ([@"legacy" isEqual:value]) {
        [self setNamingConventionWithInt:FreemarkerTemplateConfiguration_LEGACY_NAMING_CONVENTION];
      }
      else
#line 2269
      if ([@"camel_case" isEqual:value] || [@"camelCase" isEqual:value]) {
        [self setNamingConventionWithInt:FreemarkerTemplateConfiguration_CAMEL_CASE_NAMING_CONVENTION];
      }
      else {
        
#line 2272
        @throw [self invalidSettingValueExceptionWithNSString:name withNSString:value];
      }
    }
    else
#line 2274
    if ([((NSString *) nil_chk(FreemarkerTemplateConfiguration_INCOMPATIBLE_IMPROVEMENTS_KEY_SNAKE_CASE_)) isEqual:name] ||
#line 2275
    [((NSString *) nil_chk(FreemarkerTemplateConfiguration_INCOMPATIBLE_IMPROVEMENTS_KEY_CAMEL_CASE_)) isEqual:name]) {
      [self setIncompatibleImprovementsWithFreemarkerTemplateVersion:new_FreemarkerTemplateVersion_initWithNSString_(value)];
    }
    else
#line 2277
    if ([((NSString *) nil_chk(FreemarkerTemplateConfiguration_INCOMPATIBLE_ENHANCEMENTS_)) isEqual:name]) {
      [self setIncompatibleEnhancementsWithNSString:value];
    }
    else
#line 2279
    if ([((NSString *) nil_chk(FreemarkerTemplateConfiguration_TEMPLATE_LOADER_KEY_SNAKE_CASE_)) isEqual:name] || [((NSString *) nil_chk(FreemarkerTemplateConfiguration_TEMPLATE_LOADER_KEY_CAMEL_CASE_)) isEqual:name]) {
      if ([((NSString *) nil_chk(value)) equalsIgnoreCase:FreemarkerTemplateConfiguration_DEFAULT_]) {
        [self unsetTemplateLoader];
      }
      else {
        
#line 2283
        [self setTemplateLoaderWithFreemarkerCacheTemplateLoader:(id<FreemarkerCacheTemplateLoader>) check_protocol_cast(FreemarkerCore_ObjectBuilderSettingEvaluator_evalWithNSString_withIOSClass_withFreemarkerCore_SettingEvaluationEnvironment_(
#line 2284
        value, FreemarkerCacheTemplateLoader_class_(), FreemarkerCore_SettingEvaluationEnvironment_getCurrent()), @protocol(FreemarkerCacheTemplateLoader))];
      }
    }
    else
#line 2286
    if ([((NSString *) nil_chk(FreemarkerTemplateConfiguration_TEMPLATE_LOOKUP_STRATEGY_KEY_SNAKE_CASE_)) isEqual:name] ||
#line 2287
    [((NSString *) nil_chk(FreemarkerTemplateConfiguration_TEMPLATE_LOOKUP_STRATEGY_KEY_CAMEL_CASE_)) isEqual:name]) {
      if ([((NSString *) nil_chk(value)) equalsIgnoreCase:FreemarkerTemplateConfiguration_DEFAULT_]) {
        [self unsetTemplateLookupStrategy];
      }
      else {
        
#line 2291
        [self setTemplateLookupStrategyWithFreemarkerCacheTemplateLookupStrategy:(FreemarkerCacheTemplateLookupStrategy *) check_class_cast(FreemarkerCore_ObjectBuilderSettingEvaluator_evalWithNSString_withIOSClass_withFreemarkerCore_SettingEvaluationEnvironment_(
#line 2292
        value, FreemarkerCacheTemplateLookupStrategy_class_(), FreemarkerCore_SettingEvaluationEnvironment_getCurrent()), [FreemarkerCacheTemplateLookupStrategy class])];
      }
    }
    else
#line 2294
    if ([((NSString *) nil_chk(FreemarkerTemplateConfiguration_TEMPLATE_NAME_FORMAT_KEY_SNAKE_CASE_)) isEqual:name] ||
#line 2295
    [((NSString *) nil_chk(FreemarkerTemplateConfiguration_TEMPLATE_NAME_FORMAT_KEY_CAMEL_CASE_)) isEqual:name]) {
      if ([((NSString *) nil_chk(value)) equalsIgnoreCase:FreemarkerTemplateConfiguration_DEFAULT_]) {
        [self unsetTemplateNameFormat];
      }
      else
#line 2298
      if ([value equalsIgnoreCase:@"default_2_3_0"]) {
        [self setTemplateNameFormatWithFreemarkerCacheTemplateNameFormat:FreemarkerCacheTemplateNameFormat_get_DEFAULT_2_3_0_()];
      }
      else
#line 2300
      if ([value equalsIgnoreCase:@"default_2_4_0"]) {
        [self setTemplateNameFormatWithFreemarkerCacheTemplateNameFormat:FreemarkerCacheTemplateNameFormat_get_DEFAULT_2_4_0_()];
      }
      else {
        
#line 2303
        @throw [self invalidSettingValueExceptionWithNSString:name withNSString:value];
      }
    }
    else {
      
#line 2306
      unknown = YES;
    }
  }
  @catch (
#line 2308
  JavaLangException *e) {
    @throw [self settingValueAssignmentExceptionWithNSString:name withNSString:value withJavaLangThrowable:e];
  }
  if (unknown) {
    [super setSettingWithNSString:name withNSString:value];
  }
}


#line 2316
- (NSString *)rightTrimWithNSString:(NSString *)s {
  return FreemarkerTemplateConfiguration_rightTrimWithNSString_(self, s);
}


#line 2325
- (id<JavaUtilSet>)getSettingNamesWithBoolean:(jboolean)camelCase {
  return new_FreemarkerCore_UnmodifiableCompositeSet_initWithJavaUtilSet_withJavaUtilSet_(FreemarkerCore_CoreAPI_getConfigurableSettingNamesWithFreemarkerCoreConfigurable_withBoolean_(
#line 2327
  self, camelCase), new_FreemarkerCore_SortedArraySet_initWithNSObjectArray_(
#line 2328
  camelCase ? FreemarkerTemplateConfiguration_SETTING_NAMES_CAMEL_CASE_ : FreemarkerTemplateConfiguration_SETTING_NAMES_SNAKE_CASE_));
}


#line 2331
- (NSString *)getCorrectedNameForUnknownSettingWithNSString:(NSString *)name {
  if ([@"encoding" isEqual:name] || [@"charset" isEqual:name] || [@"default_charset" isEqual:name]) {
    
#line 2334
    return FreemarkerTemplateConfiguration_DEFAULT_ENCODING_KEY_;
  }
  if ([@"defaultCharset" isEqual:name]) {
    return FreemarkerTemplateConfiguration_DEFAULT_ENCODING_KEY_CAMEL_CASE_;
  }
  return [super getCorrectedNameForUnknownSettingWithNSString:name];
}


#line 2346
- (void)addAutoImportWithNSString:(NSString *)namespaceVarName
                     withNSString:(NSString *)templateName {
  
#line 2348
  @synchronized(self) {
    [((JavaUtilArrayList *) nil_chk(autoImports_)) removeWithId:namespaceVarName];
    [autoImports_ addWithId:namespaceVarName];
    (void) [((id<JavaUtilMap>) nil_chk(autoImportNsToTmpMap_)) putWithId:namespaceVarName withId:templateName];
  }
}


#line 2359
- (void)removeAutoImportWithNSString:(NSString *)namespaceVarName {
  
#line 2361
  @synchronized(self) {
    [((JavaUtilArrayList *) nil_chk(autoImports_)) removeWithId:namespaceVarName];
    (void) [((id<JavaUtilMap>) nil_chk(autoImportNsToTmpMap_)) removeWithId:namespaceVarName];
  }
}


#line 2373
- (void)setAutoImportsWithJavaUtilMap:(id<JavaUtilMap>)map {
  
#line 2375
  @synchronized(self) {
    autoImports_ = new_JavaUtilArrayList_initWithJavaUtilCollection_([((id<JavaUtilMap>) nil_chk(map)) keySet]);
    if ([map isKindOfClass:[JavaUtilHashMap class]]) {
      autoImportNsToTmpMap_ = (id<JavaUtilMap>) check_protocol_cast([((JavaUtilHashMap *) check_class_cast(map, [JavaUtilHashMap class])) clone], @protocol(JavaUtilMap));
    }
    else if ([JavaUtilSortedMap_class_() isInstance:map]) {
      autoImportNsToTmpMap_ = new_JavaUtilTreeMap_initWithJavaUtilMap_(map);
    }
    else {
      autoImportNsToTmpMap_ = new_JavaUtilHashMap_initWithJavaUtilMap_(map);
    }
  }
}


#line 2389
- (void)doAutoImportsAndIncludesWithFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env {
  
#line 2392
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(autoImports_)) size]; i++) {
    NSString *namespace_ = (NSString *) check_class_cast([autoImports_ getWithInt:i], [NSString class]);
    NSString *templateName = (NSString *) check_class_cast([((id<JavaUtilMap>) nil_chk(autoImportNsToTmpMap_)) getWithId:namespace_], [NSString class]);
    (void) [((FreemarkerCoreEnvironment *) nil_chk(env)) importLibWithNSString:templateName withNSString:namespace_];
  }
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(autoIncludes_)) size]; i++) {
    NSString *templateName = (NSString *) check_class_cast([autoIncludes_ getWithInt:i], [NSString class]);
    FreemarkerTemplateTemplate *template_ = [self getTemplateWithNSString:templateName withJavaUtilLocale:[((FreemarkerCoreEnvironment *) nil_chk(env)) getLocale]];
    [env includeWithFreemarkerTemplateTemplate:template_];
  }
}


#line 2408
- (void)addAutoIncludeWithNSString:(NSString *)templateName {
  
#line 2410
  @synchronized(self) {
    [((JavaUtilArrayList *) nil_chk(autoIncludes_)) removeWithId:templateName];
    [autoIncludes_ addWithId:templateName];
  }
}


#line 2419
- (void)setAutoIncludesWithJavaUtilList:(id<JavaUtilList>)templateNames {
  
#line 2421
  @synchronized(self) {
    [((JavaUtilArrayList *) nil_chk(autoIncludes_)) clear];
    id<JavaUtilIterator> it = [((id<JavaUtilList>) nil_chk(templateNames)) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
      id o = [it next];
      if (!([o isKindOfClass:[NSString class]])) {
        @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"List items must be String-s.");
      }
      [autoIncludes_ addWithId:o];
    }
  }
}


#line 2438
- (void)removeAutoIncludeWithNSString:(NSString *)templateName {
  
#line 2440
  @synchronized(self) {
    [((JavaUtilArrayList *) nil_chk(autoIncludes_)) removeWithId:templateName];
  }
}


#line 2450
+ (NSString *)getVersionNumber {
  return FreemarkerTemplateConfiguration_getVersionNumber();
}


#line 2482
+ (FreemarkerTemplateVersion *)getVersion {
  return FreemarkerTemplateConfiguration_getVersion();
}


#line 2493
+ (id<FreemarkerTemplateObjectWrapper>)getDefaultObjectWrapperWithFreemarkerTemplateVersion:(FreemarkerTemplateVersion *)incompatibleImprovements {
  return FreemarkerTemplateConfiguration_getDefaultObjectWrapperWithFreemarkerTemplateVersion_(incompatibleImprovements);
}


#line 2510
- (id<JavaUtilSet>)getSupportedBuiltInNames {
  return FreemarkerCore_CoreAPI_getSupportedBuiltInNames();
}


#line 2522
- (id<JavaUtilSet>)getSupportedBuiltInDirectiveNames {
  return FreemarkerCore_CoreAPI_get_BUILT_IN_DIRECTIVE_NAMES_();
}

+ (NSString *)getRequiredVersionPropertyWithJavaUtilProperties:(JavaUtilProperties *)vp
                                                  withNSString:(NSString *)properyName {
  return FreemarkerTemplateConfiguration_getRequiredVersionPropertyWithJavaUtilProperties_withNSString_(vp, properyName);
}

- (id)copyWithZone:(NSZone *)zone {
  return [self clone];
}

+ (void)initialize {
  if (self == [FreemarkerTemplateConfiguration class]) {
    FreemarkerTemplateConfiguration_CACHE_LOG_ = FreemarkerLogLogger_getLoggerWithNSString_(
#line 125
    @"freemarker.cache");
    FreemarkerTemplateConfiguration_SETTING_NAMES_SNAKE_CASE_ = [IOSObjectArray newArrayWithObjects:(id[]){
#line 234
      FreemarkerTemplateConfiguration_AUTO_IMPORT_KEY_SNAKE_CASE_,
#line 235
      FreemarkerTemplateConfiguration_AUTO_INCLUDE_KEY_SNAKE_CASE_,
#line 236
      FreemarkerTemplateConfiguration_CACHE_STORAGE_KEY_SNAKE_CASE_,
#line 237
      FreemarkerTemplateConfiguration_DEFAULT_ENCODING_KEY_SNAKE_CASE_,
#line 238
      FreemarkerTemplateConfiguration_INCOMPATIBLE_IMPROVEMENTS_KEY_SNAKE_CASE_,
#line 239
      FreemarkerTemplateConfiguration_LOCALIZED_LOOKUP_KEY_SNAKE_CASE_,
#line 240
      FreemarkerTemplateConfiguration_NAMING_CONVENTION_KEY_SNAKE_CASE_,
#line 241
      FreemarkerTemplateConfiguration_STRICT_SYNTAX_KEY_SNAKE_CASE_,
#line 242
      FreemarkerTemplateConfiguration_TAG_SYNTAX_KEY_SNAKE_CASE_,
#line 243
      FreemarkerTemplateConfiguration_TEMPLATE_LOADER_KEY_SNAKE_CASE_,
#line 244
      FreemarkerTemplateConfiguration_TEMPLATE_LOOKUP_STRATEGY_KEY_SNAKE_CASE_,
#line 245
      FreemarkerTemplateConfiguration_TEMPLATE_NAME_FORMAT_KEY_SNAKE_CASE_,
#line 246
      FreemarkerTemplateConfiguration_TEMPLATE_UPDATE_DELAY_KEY_SNAKE_CASE_,
#line 247
      FreemarkerTemplateConfiguration_WHITESPACE_STRIPPING_KEY_SNAKE_CASE_ } count:14 type:NSString_class_()];
      FreemarkerTemplateConfiguration_SETTING_NAMES_CAMEL_CASE_ = [IOSObjectArray newArrayWithObjects:(id[]){
#line 252
        FreemarkerTemplateConfiguration_AUTO_IMPORT_KEY_CAMEL_CASE_,
#line 253
        FreemarkerTemplateConfiguration_AUTO_INCLUDE_KEY_CAMEL_CASE_,
#line 254
        FreemarkerTemplateConfiguration_CACHE_STORAGE_KEY_CAMEL_CASE_,
#line 255
        FreemarkerTemplateConfiguration_DEFAULT_ENCODING_KEY_CAMEL_CASE_,
#line 256
        FreemarkerTemplateConfiguration_INCOMPATIBLE_IMPROVEMENTS_KEY_CAMEL_CASE_,
#line 257
        FreemarkerTemplateConfiguration_LOCALIZED_LOOKUP_KEY_CAMEL_CASE_,
#line 258
        FreemarkerTemplateConfiguration_NAMING_CONVENTION_KEY_CAMEL_CASE_,
#line 259
        FreemarkerTemplateConfiguration_STRICT_SYNTAX_KEY_CAMEL_CASE_,
#line 260
        FreemarkerTemplateConfiguration_TAG_SYNTAX_KEY_CAMEL_CASE_,
#line 261
        FreemarkerTemplateConfiguration_TEMPLATE_LOADER_KEY_CAMEL_CASE_,
#line 262
        FreemarkerTemplateConfiguration_TEMPLATE_LOOKUP_STRATEGY_KEY_CAMEL_CASE_,
#line 263
        FreemarkerTemplateConfiguration_TEMPLATE_NAME_FORMAT_KEY_CAMEL_CASE_,
#line 264
        FreemarkerTemplateConfiguration_TEMPLATE_UPDATE_DELAY_KEY_CAMEL_CASE_,
#line 265
        FreemarkerTemplateConfiguration_WHITESPACE_STRIPPING_KEY_CAMEL_CASE_ } count:14 type:NSString_class_()];
        FreemarkerTemplateConfiguration_VERSION_2_3_0_ = new_FreemarkerTemplateVersion_initWithInt_withInt_withInt_(
#line 277
        2, 3, 0);
        FreemarkerTemplateConfiguration_VERSION_2_3_19_ = new_FreemarkerTemplateVersion_initWithInt_withInt_withInt_(
#line 280
        2, 3, 19);
        FreemarkerTemplateConfiguration_VERSION_2_3_20_ = new_FreemarkerTemplateVersion_initWithInt_withInt_withInt_(
#line 283
        2, 3, 20);
        FreemarkerTemplateConfiguration_VERSION_2_3_21_ = new_FreemarkerTemplateVersion_initWithInt_withInt_withInt_(
#line 286
        2, 3, 21);
        FreemarkerTemplateConfiguration_VERSION_2_3_22_ = new_FreemarkerTemplateVersion_initWithInt_withInt_withInt_(
#line 289
        2, 3, 22);
        FreemarkerTemplateConfiguration_VERSION_2_3_23_ = new_FreemarkerTemplateVersion_initWithInt_withInt_withInt_(
#line 292
        2, 3, 23);
        FreemarkerTemplateConfiguration_DEFAULT_INCOMPATIBLE_IMPROVEMENTS_ =
#line 295
        FreemarkerTemplateConfiguration_VERSION_2_3_0_;
        FreemarkerTemplateConfiguration_DEFAULT_INCOMPATIBLE_ENHANCEMENTS_ =
#line 297
        [FreemarkerTemplateConfiguration_DEFAULT_INCOMPATIBLE_IMPROVEMENTS_ description];
        FreemarkerTemplateConfiguration_PARSED_DEFAULT_INCOMPATIBLE_ENHANCEMENTS_ =
#line 299
        [FreemarkerTemplateConfiguration_DEFAULT_INCOMPATIBLE_IMPROVEMENTS_ intValue];
        {
          
#line 305
          @try {
            JavaUtilProperties *vp = new_JavaUtilProperties_init();
            JavaIoInputStream *ins = [((JavaLangClassLoader *) nil_chk([FreemarkerTemplateConfiguration_class_() getClassLoader])) getResourceAsStreamWithNSString:
#line 308
            FreemarkerTemplateConfiguration_VERSION_PROPERTIES_PATH_];
            if (ins == nil) {
              @throw new_JavaLangRuntimeException_initWithNSString_(@"Version file is missing.");
            }
            else {
              
#line 312
              @try {
                [vp load__WithJavaIoInputStream:ins];
              }
              @finally {
                
#line 315
                [ins close];
              }
              
#line 318
              NSString *versionString = FreemarkerTemplateConfiguration_getRequiredVersionPropertyWithJavaUtilProperties_withNSString_(vp, @"version");
              
#line 320
              JavaUtilDate *buildDate;
              {
                NSString *buildDateStr = FreemarkerTemplateConfiguration_getRequiredVersionPropertyWithJavaUtilProperties_withNSString_(vp, @"buildTimestamp");
                if ([((NSString *) nil_chk(buildDateStr)) hasSuffix:@"Z"]) {
                  buildDateStr = JreStrcat("$$", [buildDateStr substring:0 endIndex:((jint) [buildDateStr length]) - 1], @"+0000");
                }
                @try {
                  buildDate = [new_JavaTextSimpleDateFormat_initWithNSString_withJavaUtilLocale_(@"yyyy-MM-dd'T'HH:mm:ssZ", JavaUtilLocale_get_US_()) parseWithNSString:buildDateStr];
                }
                @catch (
#line 328
                JavaTextParseException *e) {
                  buildDate = nil;
                }
              }
              
#line 333
              JavaLangBoolean *gaeCompliant = JavaLangBoolean_valueOfWithNSString_(FreemarkerTemplateConfiguration_getRequiredVersionPropertyWithJavaUtilProperties_withNSString_(vp, @"isGAECompliant"));
              
#line 335
              FreemarkerTemplateConfiguration_VERSION_ = new_FreemarkerTemplateVersion_initWithNSString_withJavaLangBoolean_withJavaUtilDate_(versionString, gaeCompliant, buildDate);
            }
          }
          @catch (
#line 337
          JavaIoIOException *e) {
            @throw new_JavaLangRuntimeException_initWithNSString_withJavaLangThrowable_(JreStrcat("$$", @"Failed to load and parse ", FreemarkerTemplateConfiguration_VERSION_PROPERTIES_PATH_), e);
          }
        }
        {
          
#line 345
          jboolean fm24detected;
          @try {
            (void) IOSClass_forName_(FreemarkerTemplateConfiguration_FM_24_DETECTION_CLASS_NAME_);
            fm24detected = YES;
          }
          @catch (
#line 349
          JavaLangClassNotFoundException *e) {
            fm24detected = NO;
          }
          @catch (
#line 351
          JavaLangLinkageError *e) {
            fm24detected = YES;
          }
          @catch (
#line 353
          JavaLangThrowable *e) {
            
#line 355
            fm24detected = NO;
          }
          FreemarkerTemplateConfiguration_FM_24_DETECTED_ = fm24detected;
        }
        FreemarkerTemplateConfiguration_defaultConfigLock_ = new_NSObject_init();
        J2OBJC_SET_INITIALIZED(FreemarkerTemplateConfiguration)
      }
    }

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "Configuration", NULL, 0x1, NULL, NULL },
    { "initWithFreemarkerTemplateVersion:", "Configuration", NULL, 0x1, NULL, NULL },
    { "checkFreeMarkerVersionClash", NULL, "V", 0xa, NULL, NULL },
    { "createTemplateCache", NULL, "V", 0x2, NULL, NULL },
    { "recreateTemplateCacheWithWithFreemarkerCacheTemplateLoader:withFreemarkerCacheCacheStorage:withFreemarkerCacheTemplateLookupStrategy:withFreemarkerCacheTemplateNameFormat:", "recreateTemplateCacheWith", "V", 0x2, NULL, NULL },
    { "getDefaultTemplateLoader", NULL, "Lfreemarker.cache.TemplateLoader;", 0x2, NULL, NULL },
    { "createDefaultTemplateLoaderWithFreemarkerTemplateVersion:", "createDefaultTemplateLoader", "Lfreemarker.cache.TemplateLoader;", 0x8, NULL, NULL },
    { "createDefaultTemplateLoaderWithFreemarkerTemplateVersion:withFreemarkerCacheTemplateLoader:", "createDefaultTemplateLoader", "Lfreemarker.cache.TemplateLoader;", 0xa, NULL, NULL },
    { "getDefaultTemplateLookupStrategy", NULL, "Lfreemarker.cache.TemplateLookupStrategy;", 0x2, NULL, NULL },
    { "getDefaultTemplateLookupStrategyWithFreemarkerTemplateVersion:", "getDefaultTemplateLookupStrategy", "Lfreemarker.cache.TemplateLookupStrategy;", 0x8, NULL, NULL },
    { "getDefaultTemplateNameFormat", NULL, "Lfreemarker.cache.TemplateNameFormat;", 0x2, NULL, NULL },
    { "getDefaultTemplateNameFormatWithFreemarkerTemplateVersion:", "getDefaultTemplateNameFormat", "Lfreemarker.cache.TemplateNameFormat;", 0x8, NULL, NULL },
    { "getDefaultCacheStorage", NULL, "Lfreemarker.cache.CacheStorage;", 0x2, NULL, NULL },
    { "createDefaultCacheStorageWithFreemarkerTemplateVersion:withFreemarkerCacheCacheStorage:", "createDefaultCacheStorage", "Lfreemarker.cache.CacheStorage;", 0x8, NULL, NULL },
    { "createDefaultCacheStorageWithFreemarkerTemplateVersion:", "createDefaultCacheStorage", "Lfreemarker.cache.CacheStorage;", 0x8, NULL, NULL },
    { "getDefaultTemplateExceptionHandler", NULL, "Lfreemarker.template.TemplateExceptionHandler;", 0x2, NULL, NULL },
    { "getDefaultLogTemplateExceptions", NULL, "Z", 0x2, NULL, NULL },
    { "getDefaultObjectWrapper", NULL, "Lfreemarker.template.ObjectWrapper;", 0x2, NULL, NULL },
    { "getDefaultTemplateExceptionHandlerWithFreemarkerTemplateVersion:", "getDefaultTemplateExceptionHandler", "Lfreemarker.template.TemplateExceptionHandler;", 0x18, NULL, NULL },
    { "getDefaultLogTemplateExceptionsWithFreemarkerTemplateVersion:", "getDefaultLogTemplateExceptions", "Z", 0x18, NULL, NULL },
    { "clone", NULL, "Ljava.lang.Object;", 0x1, NULL, NULL },
    { "loadBuiltInSharedVariables", NULL, "V", 0x2, NULL, NULL },
    { "loadBuiltInEncodingMap", NULL, "V", 0x1, NULL, NULL },
    { "clearEncodingMap", NULL, "V", 0x1, NULL, NULL },
    { "getDefaultConfiguration", NULL, "Lfreemarker.template.Configuration;", 0x9, NULL, NULL },
    { "setDefaultConfigurationWithFreemarkerTemplateConfiguration:", "setDefaultConfiguration", "V", 0x9, NULL, NULL },
    { "setTemplateLoaderWithFreemarkerCacheTemplateLoader:", "setTemplateLoader", "V", 0x1, NULL, NULL },
    { "unsetTemplateLoader", NULL, "V", 0x1, NULL, NULL },
    { "isTemplateLoaderExplicitlySet", NULL, "Z", 0x1, NULL, NULL },
    { "getTemplateLoader", NULL, "Lfreemarker.cache.TemplateLoader;", 0x1, NULL, NULL },
    { "setTemplateLookupStrategyWithFreemarkerCacheTemplateLookupStrategy:", "setTemplateLookupStrategy", "V", 0x1, NULL, NULL },
    { "unsetTemplateLookupStrategy", NULL, "V", 0x1, NULL, NULL },
    { "isTemplateLookupStrategyExplicitlySet", NULL, "Z", 0x1, NULL, NULL },
    { "getTemplateLookupStrategy", NULL, "Lfreemarker.cache.TemplateLookupStrategy;", 0x1, NULL, NULL },
    { "setTemplateNameFormatWithFreemarkerCacheTemplateNameFormat:", "setTemplateNameFormat", "V", 0x1, NULL, NULL },
    { "unsetTemplateNameFormat", NULL, "V", 0x1, NULL, NULL },
    { "isTemplateNameFormatExplicitlySet", NULL, "Z", 0x1, NULL, NULL },
    { "getTemplateNameFormat", NULL, "Lfreemarker.cache.TemplateNameFormat;", 0x1, NULL, NULL },
    { "setCacheStorageWithFreemarkerCacheCacheStorage:", "setCacheStorage", "V", 0x1, NULL, NULL },
    { "unsetCacheStorage", NULL, "V", 0x1, NULL, NULL },
    { "isCacheStorageExplicitlySet", NULL, "Z", 0x1, NULL, NULL },
    { "getCacheStorage", NULL, "Lfreemarker.cache.CacheStorage;", 0x1, NULL, NULL },
    { "setDirectoryForTemplateLoadingWithJavaIoFile:", "setDirectoryForTemplateLoading", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "setServletContextForTemplateLoadingWithId:withNSString:", "setServletContextForTemplateLoading", "V", 0x1, NULL, NULL },
    { "setClassForTemplateLoadingWithIOSClass:withNSString:", "setClassForTemplateLoading", "V", 0x1, NULL, NULL },
    { "setClassLoaderForTemplateLoadingWithJavaLangClassLoader:withNSString:", "setClassLoaderForTemplateLoading", "V", 0x1, NULL, NULL },
    { "setTemplateUpdateDelayWithInt:", "setTemplateUpdateDelay", "V", 0x1, NULL, NULL },
    { "setTemplateUpdateDelayMillisecondsWithLong:", "setTemplateUpdateDelayMilliseconds", "V", 0x1, NULL, NULL },
    { "getTemplateUpdateDelayMilliseconds", NULL, "J", 0x1, NULL, NULL },
    { "setStrictSyntaxModeWithBoolean:", "setStrictSyntaxMode", "V", 0x1, NULL, NULL },
    { "setObjectWrapperWithFreemarkerTemplateObjectWrapper:", "setObjectWrapper", "V", 0x1, NULL, NULL },
    { "unsetObjectWrapper", NULL, "V", 0x1, NULL, NULL },
    { "isObjectWrapperExplicitlySet", NULL, "Z", 0x1, NULL, NULL },
    { "setTemplateExceptionHandlerWithFreemarkerTemplateTemplateExceptionHandler:", "setTemplateExceptionHandler", "V", 0x1, NULL, NULL },
    { "unsetTemplateExceptionHandler", NULL, "V", 0x1, NULL, NULL },
    { "isTemplateExceptionHandlerExplicitlySet", NULL, "Z", 0x1, NULL, NULL },
    { "setLogTemplateExceptionsWithBoolean:", "setLogTemplateExceptions", "V", 0x1, NULL, NULL },
    { "unsetLogTemplateExceptions", NULL, "V", 0x1, NULL, NULL },
    { "isLogTemplateExceptionsExplicitlySet", NULL, "Z", 0x1, NULL, NULL },
    { "getStrictSyntaxMode", NULL, "Z", 0x1, NULL, NULL },
    { "setIncompatibleImprovementsWithFreemarkerTemplateVersion:", "setIncompatibleImprovements", "V", 0x1, NULL, NULL },
    { "getIncompatibleImprovements", NULL, "Lfreemarker.template.Version;", 0x1, NULL, NULL },
    { "setIncompatibleEnhancementsWithNSString:", "setIncompatibleEnhancements", "V", 0x1, NULL, NULL },
    { "getIncompatibleEnhancements", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getParsedIncompatibleEnhancements", NULL, "I", 0x1, NULL, NULL },
    { "setWhitespaceStrippingWithBoolean:", "setWhitespaceStripping", "V", 0x1, NULL, NULL },
    { "getWhitespaceStripping", NULL, "Z", 0x1, NULL, NULL },
    { "setTagSyntaxWithInt:", "setTagSyntax", "V", 0x1, NULL, NULL },
    { "getTagSyntax", NULL, "I", 0x1, NULL, NULL },
    { "setNamingConventionWithInt:", "setNamingConvention", "V", 0x1, NULL, NULL },
    { "getNamingConvention", NULL, "I", 0x1, NULL, NULL },
    { "getTemplateWithNSString:", "getTemplate", "Lfreemarker.template.Template;", 0x1, "Lfreemarker.template.TemplateNotFoundException;Lfreemarker.template.MalformedTemplateNameException;Lfreemarker.core.ParseException;Ljava.io.IOException;", NULL },
    { "getTemplateWithNSString:withJavaUtilLocale:", "getTemplate", "Lfreemarker.template.Template;", 0x1, "Lfreemarker.template.TemplateNotFoundException;Lfreemarker.template.MalformedTemplateNameException;Lfreemarker.core.ParseException;Ljava.io.IOException;", NULL },
    { "getTemplateWithNSString:withNSString:", "getTemplate", "Lfreemarker.template.Template;", 0x1, "Lfreemarker.template.TemplateNotFoundException;Lfreemarker.template.MalformedTemplateNameException;Lfreemarker.core.ParseException;Ljava.io.IOException;", NULL },
    { "getTemplateWithNSString:withJavaUtilLocale:withNSString:", "getTemplate", "Lfreemarker.template.Template;", 0x1, "Lfreemarker.template.TemplateNotFoundException;Lfreemarker.template.MalformedTemplateNameException;Lfreemarker.core.ParseException;Ljava.io.IOException;", NULL },
    { "getTemplateWithNSString:withJavaUtilLocale:withNSString:withBoolean:", "getTemplate", "Lfreemarker.template.Template;", 0x1, "Lfreemarker.template.TemplateNotFoundException;Lfreemarker.template.MalformedTemplateNameException;Lfreemarker.core.ParseException;Ljava.io.IOException;", NULL },
    { "getTemplateWithNSString:withJavaUtilLocale:withNSString:withBoolean:withBoolean:", "getTemplate", "Lfreemarker.template.Template;", 0x1, "Lfreemarker.template.TemplateNotFoundException;Lfreemarker.template.MalformedTemplateNameException;Lfreemarker.core.ParseException;Ljava.io.IOException;", NULL },
    { "getTemplateWithNSString:withJavaUtilLocale:withId:withNSString:withBoolean:withBoolean:", "getTemplate", "Lfreemarker.template.Template;", 0x1, "Lfreemarker.template.TemplateNotFoundException;Lfreemarker.template.MalformedTemplateNameException;Lfreemarker.core.ParseException;Ljava.io.IOException;", NULL },
    { "isKnownNonConfusingLookupStrategyWithFreemarkerCacheTemplateLookupStrategy:", "isKnownNonConfusingLookupStrategy", "Z", 0x2, NULL, NULL },
    { "removeInitialSlashWithNSString:", "removeInitialSlash", "Ljava.lang.String;", 0x2, NULL, NULL },
    { "ensureSentenceIsClosedWithNSString:", "ensureSentenceIsClosed", "Ljava.lang.String;", 0x2, NULL, NULL },
    { "setDefaultEncodingWithNSString:", "setDefaultEncoding", "V", 0x1, NULL, NULL },
    { "getDefaultEncoding", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getEncodingWithJavaUtilLocale:", "getEncoding", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "setEncodingWithJavaUtilLocale:withNSString:", "setEncoding", "V", 0x1, NULL, NULL },
    { "setSharedVariableWithNSString:withFreemarkerTemplateTemplateModel:", "setSharedVariable", "V", 0x1, NULL, NULL },
    { "getSharedVariableNames", NULL, "Ljava.util.Set;", 0x1, NULL, NULL },
    { "setSharedVariableWithNSString:withId:", "setSharedVariable", "V", 0x1, "Lfreemarker.template.TemplateModelException;", NULL },
    { "setSharedVariblesWithJavaUtilMap:", "setSharedVaribles", "V", 0x1, "Lfreemarker.template.TemplateModelException;", NULL },
    { "setSharedVariablesFromRewrappableSharedVariables", NULL, "V", 0x2, "Lfreemarker.template.TemplateModelException;", NULL },
    { "setAllSharedVariablesWithFreemarkerTemplateTemplateHashModelEx:", "setAllSharedVariables", "V", 0x1, "Lfreemarker.template.TemplateModelException;", NULL },
    { "getSharedVariableWithNSString:", "getSharedVariable", "Lfreemarker.template.TemplateModel;", 0x1, NULL, NULL },
    { "clearSharedVariables", NULL, "V", 0x1, NULL, NULL },
    { "clearTemplateCache", NULL, "V", 0x1, NULL, NULL },
    { "removeTemplateFromCacheWithNSString:", "removeTemplateFromCache", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "removeTemplateFromCacheWithNSString:withJavaUtilLocale:", "removeTemplateFromCache", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "removeTemplateFromCacheWithNSString:withNSString:", "removeTemplateFromCache", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "removeTemplateFromCacheWithNSString:withJavaUtilLocale:withNSString:", "removeTemplateFromCache", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "removeTemplateFromCacheWithNSString:withJavaUtilLocale:withNSString:withBoolean:", "removeTemplateFromCache", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "getLocalizedLookup", NULL, "Z", 0x1, NULL, NULL },
    { "setLocalizedLookupWithBoolean:", "setLocalizedLookup", "V", 0x1, NULL, NULL },
    { "setSettingWithNSString:withNSString:", "setSetting", "V", 0x1, "Lfreemarker.template.TemplateException;", NULL },
    { "rightTrimWithNSString:", "rightTrim", "Ljava.lang.String;", 0x2, NULL, NULL },
    { "getSettingNamesWithBoolean:", "getSettingNames", "Ljava.util.Set;", 0x0, NULL, NULL },
    { "getCorrectedNameForUnknownSettingWithNSString:", "getCorrectedNameForUnknownSetting", "Ljava.lang.String;", 0x4, NULL, NULL },
    { "addAutoImportWithNSString:withNSString:", "addAutoImport", "V", 0x1, NULL, NULL },
    { "removeAutoImportWithNSString:", "removeAutoImport", "V", 0x1, NULL, NULL },
    { "setAutoImportsWithJavaUtilMap:", "setAutoImports", "V", 0x1, NULL, NULL },
    { "doAutoImportsAndIncludesWithFreemarkerCoreEnvironment:", "doAutoImportsAndIncludes", "V", 0x4, "Lfreemarker.template.TemplateException;Ljava.io.IOException;", NULL },
    { "addAutoIncludeWithNSString:", "addAutoInclude", "V", 0x1, NULL, NULL },
    { "setAutoIncludesWithJavaUtilList:", "setAutoIncludes", "V", 0x1, NULL, NULL },
    { "removeAutoIncludeWithNSString:", "removeAutoInclude", "V", 0x1, NULL, NULL },
    { "getVersionNumber", NULL, "Ljava.lang.String;", 0x9, NULL, NULL },
    { "getVersion", NULL, "Lfreemarker.template.Version;", 0x9, NULL, NULL },
    { "getDefaultObjectWrapperWithFreemarkerTemplateVersion:", "getDefaultObjectWrapper", "Lfreemarker.template.ObjectWrapper;", 0x9, NULL, NULL },
    { "getSupportedBuiltInNames", NULL, "Ljava.util.Set;", 0x1, NULL, NULL },
    { "getSupportedBuiltInDirectiveNames", NULL, "Ljava.util.Set;", 0x1, NULL, NULL },
    { "getRequiredVersionPropertyWithJavaUtilProperties:withNSString:", "getRequiredVersionProperty", "Ljava.lang.String;", 0xa, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "CACHE_LOG_", NULL, 0x1a, "Lfreemarker.log.Logger;", &FreemarkerTemplateConfiguration_CACHE_LOG_, NULL,  },
    { "VERSION_PROPERTIES_PATH_", NULL, 0x1a, "Ljava.lang.String;", &FreemarkerTemplateConfiguration_VERSION_PROPERTIES_PATH_, NULL,  },
    { "DEFAULT_ENCODING_KEY_SNAKE_CASE_", NULL, 0x19, "Ljava.lang.String;", &FreemarkerTemplateConfiguration_DEFAULT_ENCODING_KEY_SNAKE_CASE_, NULL,  },
    { "DEFAULT_ENCODING_KEY_CAMEL_CASE_", NULL, 0x19, "Ljava.lang.String;", &FreemarkerTemplateConfiguration_DEFAULT_ENCODING_KEY_CAMEL_CASE_, NULL,  },
    { "DEFAULT_ENCODING_KEY_", NULL, 0x19, "Ljava.lang.String;", &FreemarkerTemplateConfiguration_DEFAULT_ENCODING_KEY_, NULL,  },
    { "LOCALIZED_LOOKUP_KEY_SNAKE_CASE_", NULL, 0x19, "Ljava.lang.String;", &FreemarkerTemplateConfiguration_LOCALIZED_LOOKUP_KEY_SNAKE_CASE_, NULL,  },
    { "LOCALIZED_LOOKUP_KEY_CAMEL_CASE_", NULL, 0x19, "Ljava.lang.String;", &FreemarkerTemplateConfiguration_LOCALIZED_LOOKUP_KEY_CAMEL_CASE_, NULL,  },
    { "LOCALIZED_LOOKUP_KEY_", NULL, 0x19, "Ljava.lang.String;", &FreemarkerTemplateConfiguration_LOCALIZED_LOOKUP_KEY_, NULL,  },
    { "STRICT_SYNTAX_KEY_SNAKE_CASE_", NULL, 0x19, "Ljava.lang.String;", &FreemarkerTemplateConfiguration_STRICT_SYNTAX_KEY_SNAKE_CASE_, NULL,  },
    { "STRICT_SYNTAX_KEY_CAMEL_CASE_", NULL, 0x19, "Ljava.lang.String;", &FreemarkerTemplateConfiguration_STRICT_SYNTAX_KEY_CAMEL_CASE_, NULL,  },
    { "STRICT_SYNTAX_KEY_", NULL, 0x19, "Ljava.lang.String;", &FreemarkerTemplateConfiguration_STRICT_SYNTAX_KEY_, NULL,  },
    { "WHITESPACE_STRIPPING_KEY_SNAKE_CASE_", NULL, 0x19, "Ljava.lang.String;", &FreemarkerTemplateConfiguration_WHITESPACE_STRIPPING_KEY_SNAKE_CASE_, NULL,  },
    { "WHITESPACE_STRIPPING_KEY_CAMEL_CASE_", NULL, 0x19, "Ljava.lang.String;", &FreemarkerTemplateConfiguration_WHITESPACE_STRIPPING_KEY_CAMEL_CASE_, NULL,  },
    { "WHITESPACE_STRIPPING_KEY_", NULL, 0x19, "Ljava.lang.String;", &FreemarkerTemplateConfiguration_WHITESPACE_STRIPPING_KEY_, NULL,  },
    { "CACHE_STORAGE_KEY_SNAKE_CASE_", NULL, 0x19, "Ljava.lang.String;", &FreemarkerTemplateConfiguration_CACHE_STORAGE_KEY_SNAKE_CASE_, NULL,  },
    { "CACHE_STORAGE_KEY_CAMEL_CASE_", NULL, 0x19, "Ljava.lang.String;", &FreemarkerTemplateConfiguration_CACHE_STORAGE_KEY_CAMEL_CASE_, NULL,  },
    { "CACHE_STORAGE_KEY_", NULL, 0x19, "Ljava.lang.String;", &FreemarkerTemplateConfiguration_CACHE_STORAGE_KEY_, NULL,  },
    { "TEMPLATE_UPDATE_DELAY_KEY_SNAKE_CASE_", NULL, 0x19, "Ljava.lang.String;", &FreemarkerTemplateConfiguration_TEMPLATE_UPDATE_DELAY_KEY_SNAKE_CASE_, NULL,  },
    { "TEMPLATE_UPDATE_DELAY_KEY_CAMEL_CASE_", NULL, 0x19, "Ljava.lang.String;", &FreemarkerTemplateConfiguration_TEMPLATE_UPDATE_DELAY_KEY_CAMEL_CASE_, NULL,  },
    { "TEMPLATE_UPDATE_DELAY_KEY_", NULL, 0x19, "Ljava.lang.String;", &FreemarkerTemplateConfiguration_TEMPLATE_UPDATE_DELAY_KEY_, NULL,  },
    { "AUTO_IMPORT_KEY_SNAKE_CASE_", NULL, 0x19, "Ljava.lang.String;", &FreemarkerTemplateConfiguration_AUTO_IMPORT_KEY_SNAKE_CASE_, NULL,  },
    { "AUTO_IMPORT_KEY_CAMEL_CASE_", NULL, 0x19, "Ljava.lang.String;", &FreemarkerTemplateConfiguration_AUTO_IMPORT_KEY_CAMEL_CASE_, NULL,  },
    { "AUTO_IMPORT_KEY_", NULL, 0x19, "Ljava.lang.String;", &FreemarkerTemplateConfiguration_AUTO_IMPORT_KEY_, NULL,  },
    { "AUTO_INCLUDE_KEY_SNAKE_CASE_", NULL, 0x19, "Ljava.lang.String;", &FreemarkerTemplateConfiguration_AUTO_INCLUDE_KEY_SNAKE_CASE_, NULL,  },
    { "AUTO_INCLUDE_KEY_CAMEL_CASE_", NULL, 0x19, "Ljava.lang.String;", &FreemarkerTemplateConfiguration_AUTO_INCLUDE_KEY_CAMEL_CASE_, NULL,  },
    { "AUTO_INCLUDE_KEY_", NULL, 0x19, "Ljava.lang.String;", &FreemarkerTemplateConfiguration_AUTO_INCLUDE_KEY_, NULL,  },
    { "TAG_SYNTAX_KEY_SNAKE_CASE_", NULL, 0x19, "Ljava.lang.String;", &FreemarkerTemplateConfiguration_TAG_SYNTAX_KEY_SNAKE_CASE_, NULL,  },
    { "TAG_SYNTAX_KEY_CAMEL_CASE_", NULL, 0x19, "Ljava.lang.String;", &FreemarkerTemplateConfiguration_TAG_SYNTAX_KEY_CAMEL_CASE_, NULL,  },
    { "TAG_SYNTAX_KEY_", NULL, 0x19, "Ljava.lang.String;", &FreemarkerTemplateConfiguration_TAG_SYNTAX_KEY_, NULL,  },
    { "NAMING_CONVENTION_KEY_SNAKE_CASE_", NULL, 0x19, "Ljava.lang.String;", &FreemarkerTemplateConfiguration_NAMING_CONVENTION_KEY_SNAKE_CASE_, NULL,  },
    { "NAMING_CONVENTION_KEY_CAMEL_CASE_", NULL, 0x19, "Ljava.lang.String;", &FreemarkerTemplateConfiguration_NAMING_CONVENTION_KEY_CAMEL_CASE_, NULL,  },
    { "NAMING_CONVENTION_KEY_", NULL, 0x19, "Ljava.lang.String;", &FreemarkerTemplateConfiguration_NAMING_CONVENTION_KEY_, NULL,  },
    { "TEMPLATE_LOADER_KEY_SNAKE_CASE_", NULL, 0x19, "Ljava.lang.String;", &FreemarkerTemplateConfiguration_TEMPLATE_LOADER_KEY_SNAKE_CASE_, NULL,  },
    { "TEMPLATE_LOADER_KEY_CAMEL_CASE_", NULL, 0x19, "Ljava.lang.String;", &FreemarkerTemplateConfiguration_TEMPLATE_LOADER_KEY_CAMEL_CASE_, NULL,  },
    { "TEMPLATE_LOADER_KEY_", NULL, 0x19, "Ljava.lang.String;", &FreemarkerTemplateConfiguration_TEMPLATE_LOADER_KEY_, NULL,  },
    { "TEMPLATE_LOOKUP_STRATEGY_KEY_SNAKE_CASE_", NULL, 0x19, "Ljava.lang.String;", &FreemarkerTemplateConfiguration_TEMPLATE_LOOKUP_STRATEGY_KEY_SNAKE_CASE_, NULL,  },
    { "TEMPLATE_LOOKUP_STRATEGY_KEY_CAMEL_CASE_", NULL, 0x19, "Ljava.lang.String;", &FreemarkerTemplateConfiguration_TEMPLATE_LOOKUP_STRATEGY_KEY_CAMEL_CASE_, NULL,  },
    { "TEMPLATE_LOOKUP_STRATEGY_KEY_", NULL, 0x19, "Ljava.lang.String;", &FreemarkerTemplateConfiguration_TEMPLATE_LOOKUP_STRATEGY_KEY_, NULL,  },
    { "TEMPLATE_NAME_FORMAT_KEY_SNAKE_CASE_", NULL, 0x19, "Ljava.lang.String;", &FreemarkerTemplateConfiguration_TEMPLATE_NAME_FORMAT_KEY_SNAKE_CASE_, NULL,  },
    { "TEMPLATE_NAME_FORMAT_KEY_CAMEL_CASE_", NULL, 0x19, "Ljava.lang.String;", &FreemarkerTemplateConfiguration_TEMPLATE_NAME_FORMAT_KEY_CAMEL_CASE_, NULL,  },
    { "TEMPLATE_NAME_FORMAT_KEY_", NULL, 0x19, "Ljava.lang.String;", &FreemarkerTemplateConfiguration_TEMPLATE_NAME_FORMAT_KEY_, NULL,  },
    { "INCOMPATIBLE_IMPROVEMENTS_KEY_SNAKE_CASE_", NULL, 0x19, "Ljava.lang.String;", &FreemarkerTemplateConfiguration_INCOMPATIBLE_IMPROVEMENTS_KEY_SNAKE_CASE_, NULL,  },
    { "INCOMPATIBLE_IMPROVEMENTS_KEY_CAMEL_CASE_", NULL, 0x19, "Ljava.lang.String;", &FreemarkerTemplateConfiguration_INCOMPATIBLE_IMPROVEMENTS_KEY_CAMEL_CASE_, NULL,  },
    { "INCOMPATIBLE_IMPROVEMENTS_KEY_", NULL, 0x19, "Ljava.lang.String;", &FreemarkerTemplateConfiguration_INCOMPATIBLE_IMPROVEMENTS_KEY_, NULL,  },
    { "INCOMPATIBLE_IMPROVEMENTS_", NULL, 0x19, "Ljava.lang.String;", &FreemarkerTemplateConfiguration_INCOMPATIBLE_IMPROVEMENTS_, NULL,  },
    { "INCOMPATIBLE_ENHANCEMENTS_", NULL, 0x19, "Ljava.lang.String;", &FreemarkerTemplateConfiguration_INCOMPATIBLE_ENHANCEMENTS_, NULL,  },
    { "SETTING_NAMES_SNAKE_CASE_", NULL, 0x1a, "[Ljava.lang.String;", &FreemarkerTemplateConfiguration_SETTING_NAMES_SNAKE_CASE_, NULL,  },
    { "SETTING_NAMES_CAMEL_CASE_", NULL, 0x1a, "[Ljava.lang.String;", &FreemarkerTemplateConfiguration_SETTING_NAMES_CAMEL_CASE_, NULL,  },
    { "AUTO_DETECT_TAG_SYNTAX_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = FreemarkerTemplateConfiguration_AUTO_DETECT_TAG_SYNTAX },
    { "ANGLE_BRACKET_TAG_SYNTAX_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = FreemarkerTemplateConfiguration_ANGLE_BRACKET_TAG_SYNTAX },
    { "SQUARE_BRACKET_TAG_SYNTAX_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = FreemarkerTemplateConfiguration_SQUARE_BRACKET_TAG_SYNTAX },
    { "AUTO_DETECT_NAMING_CONVENTION_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = FreemarkerTemplateConfiguration_AUTO_DETECT_NAMING_CONVENTION },
    { "LEGACY_NAMING_CONVENTION_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = FreemarkerTemplateConfiguration_LEGACY_NAMING_CONVENTION },
    { "CAMEL_CASE_NAMING_CONVENTION_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = FreemarkerTemplateConfiguration_CAMEL_CASE_NAMING_CONVENTION },
    { "VERSION_2_3_0_", NULL, 0x19, "Lfreemarker.template.Version;", &FreemarkerTemplateConfiguration_VERSION_2_3_0_, NULL,  },
    { "VERSION_2_3_19_", NULL, 0x19, "Lfreemarker.template.Version;", &FreemarkerTemplateConfiguration_VERSION_2_3_19_, NULL,  },
    { "VERSION_2_3_20_", NULL, 0x19, "Lfreemarker.template.Version;", &FreemarkerTemplateConfiguration_VERSION_2_3_20_, NULL,  },
    { "VERSION_2_3_21_", NULL, 0x19, "Lfreemarker.template.Version;", &FreemarkerTemplateConfiguration_VERSION_2_3_21_, NULL,  },
    { "VERSION_2_3_22_", NULL, 0x19, "Lfreemarker.template.Version;", &FreemarkerTemplateConfiguration_VERSION_2_3_22_, NULL,  },
    { "VERSION_2_3_23_", NULL, 0x19, "Lfreemarker.template.Version;", &FreemarkerTemplateConfiguration_VERSION_2_3_23_, NULL,  },
    { "DEFAULT_INCOMPATIBLE_IMPROVEMENTS_", NULL, 0x19, "Lfreemarker.template.Version;", &FreemarkerTemplateConfiguration_DEFAULT_INCOMPATIBLE_IMPROVEMENTS_, NULL,  },
    { "DEFAULT_INCOMPATIBLE_ENHANCEMENTS_", NULL, 0x19, "Ljava.lang.String;", &FreemarkerTemplateConfiguration_DEFAULT_INCOMPATIBLE_ENHANCEMENTS_, NULL,  },
    { "PARSED_DEFAULT_INCOMPATIBLE_ENHANCEMENTS_", NULL, 0x19, "I", &FreemarkerTemplateConfiguration_PARSED_DEFAULT_INCOMPATIBLE_ENHANCEMENTS_, NULL,  },
    { "DEFAULT_", NULL, 0x1a, "Ljava.lang.String;", &FreemarkerTemplateConfiguration_DEFAULT_, NULL,  },
    { "VERSION_", NULL, 0x1a, "Lfreemarker.template.Version;", &FreemarkerTemplateConfiguration_VERSION_, NULL,  },
    { "FM_24_DETECTION_CLASS_NAME_", NULL, 0x1a, "Ljava.lang.String;", &FreemarkerTemplateConfiguration_FM_24_DETECTION_CLASS_NAME_, NULL,  },
    { "FM_24_DETECTED_", NULL, 0x1a, "Z", &FreemarkerTemplateConfiguration_FM_24_DETECTED_, NULL,  },
    { "defaultConfigLock_", NULL, 0x1a, "Ljava.lang.Object;", &FreemarkerTemplateConfiguration_defaultConfigLock_, NULL,  },
    { "defaultConfig_", NULL, 0xa, "Lfreemarker.template.Configuration;", &FreemarkerTemplateConfiguration_defaultConfig_, NULL,  },
    { "strictSyntax_", NULL, 0x2, "Z", NULL, NULL,  },
    { "localizedLookup_", NULL, 0x42, "Z", NULL, NULL,  },
    { "whitespaceStripping_", NULL, 0x2, "Z", NULL, NULL,  },
    { "incompatibleImprovements_", NULL, 0x2, "Lfreemarker.template.Version;", NULL, NULL,  },
    { "tagSyntax_", NULL, 0x2, "I", NULL, NULL,  },
    { "namingConvention_", NULL, 0x2, "I", NULL, NULL,  },
    { "cache_", NULL, 0x2, "Lfreemarker.cache.TemplateCache;", NULL, NULL,  },
    { "templateLoaderExplicitlySet_", NULL, 0x2, "Z", NULL, NULL,  },
    { "templateLookupStrategyExplicitlySet_", NULL, 0x2, "Z", NULL, NULL,  },
    { "templateNameFormatExplicitlySet_", NULL, 0x2, "Z", NULL, NULL,  },
    { "cacheStorageExplicitlySet_", NULL, 0x2, "Z", NULL, NULL,  },
    { "objectWrapperExplicitlySet_", NULL, 0x2, "Z", NULL, NULL,  },
    { "templateExceptionHandlerExplicitlySet_", NULL, 0x2, "Z", NULL, NULL,  },
    { "logTemplateExceptionsExplicitlySet_", NULL, 0x2, "Z", NULL, NULL,  },
    { "sharedVariables_", NULL, 0x2, "Ljava.util.HashMap;", NULL, NULL,  },
    { "rewrappableSharedVariables_", NULL, 0x2, "Ljava.util.HashMap;", NULL, NULL,  },
    { "defaultEncoding_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "localeToCharsetMap_", NULL, 0x2, "Ljava.util.Map;", NULL, NULL,  },
    { "autoImports_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, NULL,  },
    { "autoIncludes_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, NULL,  },
    { "autoImportNsToTmpMap_", NULL, 0x2, "Ljava.util.Map;", NULL, NULL,  },
  };
  static const char *inner_classes[] = {"Lfreemarker.template.Configuration$LegacyDefaultFileTemplateLoader;", "Lfreemarker.template.Configuration$DefaultSoftCacheStorage;"};
  static const J2ObjcClassInfo _FreemarkerTemplateConfiguration = { 2, "Configuration", "freemarker.template", NULL, 0x1, 118, methods, 90, fields, 0, NULL, 2, inner_classes, NULL, NULL };
  return &_FreemarkerTemplateConfiguration;
}

@end


#line 401
void FreemarkerTemplateConfiguration_init(FreemarkerTemplateConfiguration *self) {
  (void) FreemarkerTemplateConfiguration_initWithFreemarkerTemplateVersion_(self, FreemarkerTemplateConfiguration_DEFAULT_INCOMPATIBLE_IMPROVEMENTS_);
}


#line 401
FreemarkerTemplateConfiguration *new_FreemarkerTemplateConfiguration_init() {
  FreemarkerTemplateConfiguration *self = [FreemarkerTemplateConfiguration alloc];
  FreemarkerTemplateConfiguration_init(self);
  return self;
}


#line 633
void FreemarkerTemplateConfiguration_initWithFreemarkerTemplateVersion_(FreemarkerTemplateConfiguration *self, FreemarkerTemplateVersion *incompatibleImprovements) {
  (void) FreemarkerCoreConfigurable_initWithFreemarkerTemplateVersion_(self, incompatibleImprovements);
  self->strictSyntax_ =
#line 363
  YES;
  self->localizedLookup_ = YES;
  self->whitespaceStripping_ = YES;
  self->tagSyntax_ = FreemarkerTemplateConfiguration_ANGLE_BRACKET_TAG_SYNTAX;
  self->namingConvention_ = FreemarkerTemplateConfiguration_AUTO_DETECT_NAMING_CONVENTION;
  self->sharedVariables_ = new_JavaUtilHashMap_init();
  self->rewrappableSharedVariables_ =
#line 388
  nil;
  self->defaultEncoding_ = FreemarkerTemplateUtilitySecurityUtilities_getSystemPropertyWithNSString_withNSString_(
#line 390
  @"file.encoding", @"utf-8");
  self->localeToCharsetMap_ = FreemarkerCore_ConcurrentMapFactory_newThreadSafeMap();
  self->autoImports_ = new_JavaUtilArrayList_init();
  self->autoIncludes_ = new_JavaUtilArrayList_init();
  self->autoImportNsToTmpMap_ = new_JavaUtilHashMap_init();
  
#line 639
  FreemarkerTemplateConfiguration_checkFreeMarkerVersionClash();
  
#line 641
  FreemarkerTemplateUtilityNullArgumentException_checkWithNSString_withId_(@"incompatibleImprovements", incompatibleImprovements);
  self->incompatibleImprovements_ = incompatibleImprovements;
  
#line 644
  FreemarkerTemplateConfiguration_createTemplateCache(self);
  FreemarkerTemplateConfiguration_loadBuiltInSharedVariables(self);
}


#line 633
FreemarkerTemplateConfiguration *new_FreemarkerTemplateConfiguration_initWithFreemarkerTemplateVersion_(FreemarkerTemplateVersion *incompatibleImprovements) {
  FreemarkerTemplateConfiguration *self = [FreemarkerTemplateConfiguration alloc];
  FreemarkerTemplateConfiguration_initWithFreemarkerTemplateVersion_(self, incompatibleImprovements);
  return self;
}


#line 648
void FreemarkerTemplateConfiguration_checkFreeMarkerVersionClash() {
  FreemarkerTemplateConfiguration_initialize();
  
#line 649
  if (FreemarkerTemplateConfiguration_FM_24_DETECTED_) {
    @throw new_JavaLangRuntimeException_initWithNSString_(JreStrcat("$@$$$", @"Clashing FreeMarker versions (", FreemarkerTemplateConfiguration_VERSION_, @" and some post-2.3.x) detected: found post-2.3.x class ",
#line 651
    FreemarkerTemplateConfiguration_FM_24_DETECTION_CLASS_NAME_, @". You probably have two different freemarker.jar-s in the classpath."));
  }
}


#line 656
void FreemarkerTemplateConfiguration_createTemplateCache(FreemarkerTemplateConfiguration *self) {
  self->cache_ = new_FreemarkerCacheTemplateCache_initWithFreemarkerCacheTemplateLoader_withFreemarkerCacheCacheStorage_withFreemarkerCacheTemplateLookupStrategy_withFreemarkerCacheTemplateNameFormat_withFreemarkerTemplateConfiguration_(FreemarkerTemplateConfiguration_getDefaultTemplateLoader(self), FreemarkerTemplateConfiguration_getDefaultCacheStorage(self), FreemarkerTemplateConfiguration_getDefaultTemplateLookupStrategy(self), FreemarkerTemplateConfiguration_getDefaultTemplateNameFormat(self), self);
  
#line 663
  [self->cache_ clear];
  [self->cache_ setDelayWithLong:5000];
}


#line 667
void FreemarkerTemplateConfiguration_recreateTemplateCacheWithWithFreemarkerCacheTemplateLoader_withFreemarkerCacheCacheStorage_withFreemarkerCacheTemplateLookupStrategy_withFreemarkerCacheTemplateNameFormat_(FreemarkerTemplateConfiguration *self, id<FreemarkerCacheTemplateLoader> loader, id<FreemarkerCacheCacheStorage> storage, FreemarkerCacheTemplateLookupStrategy *templateLookupStrategy, FreemarkerCacheTemplateNameFormat *templateNameFormat) {
  
#line 670
  FreemarkerCacheTemplateCache *oldCache = self->cache_;
  self->cache_ = new_FreemarkerCacheTemplateCache_initWithFreemarkerCacheTemplateLoader_withFreemarkerCacheCacheStorage_withFreemarkerCacheTemplateLookupStrategy_withFreemarkerCacheTemplateNameFormat_withFreemarkerTemplateConfiguration_(loader, storage, templateLookupStrategy, templateNameFormat, self);
  [self->cache_ clear];
  [self->cache_ setDelayWithLong:[((FreemarkerCacheTemplateCache *) nil_chk(oldCache)) getDelay]];
  [self->cache_ setLocalizedLookupWithBoolean:self->localizedLookup_];
}

id<FreemarkerCacheTemplateLoader> FreemarkerTemplateConfiguration_getDefaultTemplateLoader(FreemarkerTemplateConfiguration *self) {
  return FreemarkerTemplateConfiguration_createDefaultTemplateLoaderWithFreemarkerTemplateVersion_withFreemarkerCacheTemplateLoader_([self getIncompatibleImprovements], [self getTemplateLoader]);
}

id<FreemarkerCacheTemplateLoader> FreemarkerTemplateConfiguration_createDefaultTemplateLoaderWithFreemarkerTemplateVersion_(FreemarkerTemplateVersion *incompatibleImprovements) {
  FreemarkerTemplateConfiguration_initialize();
  
#line 682
  return FreemarkerTemplateConfiguration_createDefaultTemplateLoaderWithFreemarkerTemplateVersion_withFreemarkerCacheTemplateLoader_(incompatibleImprovements, nil);
}


#line 685
id<FreemarkerCacheTemplateLoader> FreemarkerTemplateConfiguration_createDefaultTemplateLoaderWithFreemarkerTemplateVersion_withFreemarkerCacheTemplateLoader_(FreemarkerTemplateVersion *incompatibleImprovements, id<FreemarkerCacheTemplateLoader> existingTemplateLoader) {
  FreemarkerTemplateConfiguration_initialize();
  if ([((FreemarkerTemplateVersion *) nil_chk(incompatibleImprovements)) intValue] < FreemarkerTemplate_TemplateAPI_get_VERSION_INT_2_3_21_()) {
    if ([existingTemplateLoader isKindOfClass:[FreemarkerTemplateConfiguration_LegacyDefaultFileTemplateLoader class]]) {
      return existingTemplateLoader;
    }
    @try {
      return new_FreemarkerTemplateConfiguration_LegacyDefaultFileTemplateLoader_init();
    }
    @catch (
#line 693
    JavaLangException *e) {
      [((FreemarkerLogLogger *) nil_chk(FreemarkerTemplateConfiguration_CACHE_LOG_)) warnWithNSString:@"Couldn't create legacy default TemplateLoader which accesses the current directory. (Use new Configuration(Configuration.VERSION_2_3_21) or higher to avoid this.)" withJavaLangThrowable:
#line 695
      e];
      return nil;
    }
  }
  else {
    
#line 699
    return nil;
  }
}


#line 711
FreemarkerCacheTemplateLookupStrategy *FreemarkerTemplateConfiguration_getDefaultTemplateLookupStrategy(FreemarkerTemplateConfiguration *self) {
  return FreemarkerTemplateConfiguration_getDefaultTemplateLookupStrategyWithFreemarkerTemplateVersion_([self getIncompatibleImprovements]);
}

FreemarkerCacheTemplateLookupStrategy *FreemarkerTemplateConfiguration_getDefaultTemplateLookupStrategyWithFreemarkerTemplateVersion_(FreemarkerTemplateVersion *incompatibleImprovements) {
  FreemarkerTemplateConfiguration_initialize();
  
#line 716
  return FreemarkerCacheTemplateLookupStrategy_get_DEFAULT_2_3_0_();
}


#line 719
FreemarkerCacheTemplateNameFormat *FreemarkerTemplateConfiguration_getDefaultTemplateNameFormat(FreemarkerTemplateConfiguration *self) {
  return FreemarkerTemplateConfiguration_getDefaultTemplateNameFormatWithFreemarkerTemplateVersion_([self getIncompatibleImprovements]);
}

FreemarkerCacheTemplateNameFormat *FreemarkerTemplateConfiguration_getDefaultTemplateNameFormatWithFreemarkerTemplateVersion_(FreemarkerTemplateVersion *incompatibleImprovements) {
  FreemarkerTemplateConfiguration_initialize();
  
#line 724
  return FreemarkerCacheTemplateNameFormat_get_DEFAULT_2_3_0_();
}


#line 727
id<FreemarkerCacheCacheStorage> FreemarkerTemplateConfiguration_getDefaultCacheStorage(FreemarkerTemplateConfiguration *self) {
  return FreemarkerTemplateConfiguration_createDefaultCacheStorageWithFreemarkerTemplateVersion_withFreemarkerCacheCacheStorage_([self getIncompatibleImprovements], [self getCacheStorage]);
}

id<FreemarkerCacheCacheStorage> FreemarkerTemplateConfiguration_createDefaultCacheStorageWithFreemarkerTemplateVersion_withFreemarkerCacheCacheStorage_(FreemarkerTemplateVersion *incompatibleImprovements, id<FreemarkerCacheCacheStorage> existingCacheStorage) {
  FreemarkerTemplateConfiguration_initialize();
  
#line 732
  if ([existingCacheStorage isKindOfClass:[FreemarkerTemplateConfiguration_DefaultSoftCacheStorage class]]) {
    return existingCacheStorage;
  }
  return new_FreemarkerTemplateConfiguration_DefaultSoftCacheStorage_init();
}


#line 738
id<FreemarkerCacheCacheStorage> FreemarkerTemplateConfiguration_createDefaultCacheStorageWithFreemarkerTemplateVersion_(FreemarkerTemplateVersion *incompatibleImprovements) {
  FreemarkerTemplateConfiguration_initialize();
  
#line 739
  return FreemarkerTemplateConfiguration_createDefaultCacheStorageWithFreemarkerTemplateVersion_withFreemarkerCacheCacheStorage_(incompatibleImprovements, nil);
}


#line 746
id<FreemarkerTemplateTemplateExceptionHandler> FreemarkerTemplateConfiguration_getDefaultTemplateExceptionHandler(FreemarkerTemplateConfiguration *self) {
  return FreemarkerTemplateConfiguration_getDefaultTemplateExceptionHandlerWithFreemarkerTemplateVersion_([self getIncompatibleImprovements]);
}

jboolean FreemarkerTemplateConfiguration_getDefaultLogTemplateExceptions(FreemarkerTemplateConfiguration *self) {
  return FreemarkerTemplateConfiguration_getDefaultLogTemplateExceptionsWithFreemarkerTemplateVersion_([self getIncompatibleImprovements]);
}

id<FreemarkerTemplateObjectWrapper> FreemarkerTemplateConfiguration_getDefaultObjectWrapper(FreemarkerTemplateConfiguration *self) {
  return FreemarkerTemplateConfiguration_getDefaultObjectWrapperWithFreemarkerTemplateVersion_([self getIncompatibleImprovements]);
}


#line 759
id<FreemarkerTemplateTemplateExceptionHandler> FreemarkerTemplateConfiguration_getDefaultTemplateExceptionHandlerWithFreemarkerTemplateVersion_(FreemarkerTemplateVersion *incompatibleImprovements) {
  FreemarkerTemplateConfiguration_initialize();
  
#line 760
  return FreemarkerTemplateTemplateExceptionHandler_get_DEBUG_HANDLER_();
}


#line 764
jboolean FreemarkerTemplateConfiguration_getDefaultLogTemplateExceptionsWithFreemarkerTemplateVersion_(FreemarkerTemplateVersion *incompatibleImprovements) {
  FreemarkerTemplateConfiguration_initialize();
  
#line 765
  return YES;
}


#line 785
void FreemarkerTemplateConfiguration_loadBuiltInSharedVariables(FreemarkerTemplateConfiguration *self) {
  (void) [((JavaUtilHashMap *) nil_chk(self->sharedVariables_)) putWithId:@"capture_output" withId:new_FreemarkerTemplateUtilityCaptureOutput_init()];
  (void) [self->sharedVariables_ putWithId:@"compress" withId:FreemarkerTemplateUtilityStandardCompress_get_INSTANCE_()];
  (void) [self->sharedVariables_ putWithId:@"html_escape" withId:new_FreemarkerTemplateUtilityHtmlEscape_init()];
  (void) [self->sharedVariables_ putWithId:@"normalize_newlines" withId:new_FreemarkerTemplateUtilityNormalizeNewlines_init()];
  (void) [self->sharedVariables_ putWithId:@"xml_escape" withId:new_FreemarkerTemplateUtilityXmlEscape_init()];
}


#line 913
FreemarkerTemplateConfiguration *FreemarkerTemplateConfiguration_getDefaultConfiguration() {
  FreemarkerTemplateConfiguration_initialize();
  @synchronized(FreemarkerTemplateConfiguration_defaultConfigLock_) {
    if (FreemarkerTemplateConfiguration_defaultConfig_ == nil) {
      FreemarkerTemplateConfiguration_defaultConfig_ = new_FreemarkerTemplateConfiguration_init();
    }
    return FreemarkerTemplateConfiguration_defaultConfig_;
  }
}


#line 931
void FreemarkerTemplateConfiguration_setDefaultConfigurationWithFreemarkerTemplateConfiguration_(FreemarkerTemplateConfiguration *config) {
  FreemarkerTemplateConfiguration_initialize();
  
#line 932
  @synchronized(FreemarkerTemplateConfiguration_defaultConfigLock_) {
    FreemarkerTemplateConfiguration_defaultConfig_ = config;
  }
}


#line 1841
jboolean FreemarkerTemplateConfiguration_isKnownNonConfusingLookupStrategyWithFreemarkerCacheTemplateLookupStrategy_(FreemarkerTemplateConfiguration *self, FreemarkerCacheTemplateLookupStrategy *templateLookupStrategy) {
  return templateLookupStrategy == FreemarkerCacheTemplateLookupStrategy_get_DEFAULT_2_3_0_();
}

NSString *FreemarkerTemplateConfiguration_removeInitialSlashWithNSString_(FreemarkerTemplateConfiguration *self, NSString *name) {
  return [((NSString *) nil_chk(name)) hasPrefix:@"/"] ? [name substring:1] : name;
}

NSString *FreemarkerTemplateConfiguration_ensureSentenceIsClosedWithNSString_(FreemarkerTemplateConfiguration *self, NSString *s) {
  if (s == nil || ((jint) [s length]) == 0) {
    return s;
  }
  
#line 1854
  jchar lastChar = [s charAtWithInt:((jint) [((NSString *) nil_chk(s)) length]) - 1];
  return lastChar == '.' || lastChar == '!' || lastChar == '?' ? s : JreStrcat("$C", s, '.');
}


#line 2011
void FreemarkerTemplateConfiguration_setSharedVariablesFromRewrappableSharedVariables(FreemarkerTemplateConfiguration *self) {
  if (self->rewrappableSharedVariables_ == nil) return;
  for (id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk([((JavaUtilHashMap *) nil_chk(self->rewrappableSharedVariables_)) entrySet])) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    id<JavaUtilMap_Entry> ent = (id<JavaUtilMap_Entry>) check_protocol_cast([it next], @protocol(JavaUtilMap_Entry));
    NSString *name = (NSString *) check_class_cast([((id<JavaUtilMap_Entry>) nil_chk(ent)) getKey], [NSString class]);
    id value = [ent getValue];
    
#line 2018
    id<FreemarkerTemplateTemplateModel> valueAsTM;
    if ([FreemarkerTemplateTemplateModel_class_() isInstance:value]) {
      valueAsTM = (id<FreemarkerTemplateTemplateModel>) check_protocol_cast(value, @protocol(FreemarkerTemplateTemplateModel));
    }
    else {
      
#line 2022
      valueAsTM = [((id<FreemarkerTemplateObjectWrapper>) nil_chk([self getObjectWrapper])) wrapWithId:value];
    }
    (void) [((JavaUtilHashMap *) nil_chk(self->sharedVariables_)) putWithId:name withId:valueAsTM];
  }
}


#line 2316
NSString *FreemarkerTemplateConfiguration_rightTrimWithNSString_(FreemarkerTemplateConfiguration *self, NSString *s) {
  jint ln = ((jint) [((NSString *) nil_chk(s)) length]);
  while (ln > 0 && JavaLangCharacter_isWhitespaceWithChar_([s charAtWithInt:ln - 1])) {
    ln--;
  }
  return [s substring:0 endIndex:ln];
}


#line 2450
NSString *FreemarkerTemplateConfiguration_getVersionNumber() {
  FreemarkerTemplateConfiguration_initialize();
  
#line 2451
  return [((FreemarkerTemplateVersion *) nil_chk(FreemarkerTemplateConfiguration_VERSION_)) description];
}


#line 2482
FreemarkerTemplateVersion *FreemarkerTemplateConfiguration_getVersion() {
  FreemarkerTemplateConfiguration_initialize();
  
#line 2483
  return FreemarkerTemplateConfiguration_VERSION_;
}


#line 2493
id<FreemarkerTemplateObjectWrapper> FreemarkerTemplateConfiguration_getDefaultObjectWrapperWithFreemarkerTemplateVersion_(FreemarkerTemplateVersion *incompatibleImprovements) {
  FreemarkerTemplateConfiguration_initialize();
  
#line 2494
  if ([((FreemarkerTemplateVersion *) nil_chk(incompatibleImprovements)) intValue] < FreemarkerTemplate_TemplateAPI_get_VERSION_INT_2_3_21_()) {
    return FreemarkerTemplateObjectWrapper_get_DEFAULT_WRAPPER_();
  }
  else {
    
#line 2497
    return [new_FreemarkerTemplateDefaultObjectWrapperBuilder_initWithFreemarkerTemplateVersion_(incompatibleImprovements) build];
  }
}


#line 2526
NSString *FreemarkerTemplateConfiguration_getRequiredVersionPropertyWithJavaUtilProperties_withNSString_(JavaUtilProperties *vp, NSString *properyName) {
  FreemarkerTemplateConfiguration_initialize();
  
#line 2527
  NSString *s = [((JavaUtilProperties *) nil_chk(vp)) getPropertyWithNSString:properyName];
  if (s == nil) {
    @throw new_JavaLangRuntimeException_initWithNSString_(JreStrcat("$$$", @"Version file is corrupt: \"",
#line 2530
    properyName, @"\" property is missing."));
  }
  return s;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerTemplateConfiguration)


#line 703
@implementation FreemarkerTemplateConfiguration_LegacyDefaultFileTemplateLoader

- (instancetype)init {
  FreemarkerTemplateConfiguration_LegacyDefaultFileTemplateLoader_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "LegacyDefaultFileTemplateLoader", NULL, 0x1, "Ljava.io.IOException;", NULL },
  };
  static const J2ObjcClassInfo _FreemarkerTemplateConfiguration_LegacyDefaultFileTemplateLoader = { 2, "LegacyDefaultFileTemplateLoader", "freemarker.template", "Configuration", 0xa, 1, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerTemplateConfiguration_LegacyDefaultFileTemplateLoader;
}

@end


#line 705
void FreemarkerTemplateConfiguration_LegacyDefaultFileTemplateLoader_init(FreemarkerTemplateConfiguration_LegacyDefaultFileTemplateLoader *self) {
  (void) FreemarkerCacheFileTemplateLoader_init(self);
}


#line 705
FreemarkerTemplateConfiguration_LegacyDefaultFileTemplateLoader *new_FreemarkerTemplateConfiguration_LegacyDefaultFileTemplateLoader_init() {
  FreemarkerTemplateConfiguration_LegacyDefaultFileTemplateLoader *self = [FreemarkerTemplateConfiguration_LegacyDefaultFileTemplateLoader alloc];
  FreemarkerTemplateConfiguration_LegacyDefaultFileTemplateLoader_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerTemplateConfiguration_LegacyDefaultFileTemplateLoader)


#line 742
@implementation FreemarkerTemplateConfiguration_DefaultSoftCacheStorage

- (instancetype)init {
  FreemarkerTemplateConfiguration_DefaultSoftCacheStorage_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", NULL, NULL, 0x2, NULL, NULL },
  };
  static const J2ObjcClassInfo _FreemarkerTemplateConfiguration_DefaultSoftCacheStorage = { 2, "DefaultSoftCacheStorage", "freemarker.template", "Configuration", 0xa, 1, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerTemplateConfiguration_DefaultSoftCacheStorage;
}

@end

void FreemarkerTemplateConfiguration_DefaultSoftCacheStorage_init(FreemarkerTemplateConfiguration_DefaultSoftCacheStorage *self) {
  (void) FreemarkerCacheSoftCacheStorage_init(self);
}

FreemarkerTemplateConfiguration_DefaultSoftCacheStorage *new_FreemarkerTemplateConfiguration_DefaultSoftCacheStorage_init() {
  FreemarkerTemplateConfiguration_DefaultSoftCacheStorage *self = [FreemarkerTemplateConfiguration_DefaultSoftCacheStorage alloc];
  FreemarkerTemplateConfiguration_DefaultSoftCacheStorage_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerTemplateConfiguration_DefaultSoftCacheStorage)
