//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/Comment.java
//


#include "Comment.h"
#include "Environment.h"
#include "J2ObjC_source.h"
#include "ParameterRole.h"
#include "StringUtil.h"
#include "TemplateElement.h"
#include "java/lang/IndexOutOfBoundsException.h"

#line 0 "/Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/Comment.java"

@interface FreemarkerCoreComment () {
 @public
  NSString *text_;
}

@end

J2OBJC_FIELD_SETTER(FreemarkerCoreComment, text_, NSString *)


#line 27
@implementation FreemarkerCoreComment


#line 31
- (instancetype)initWithNSString:(NSString *)text {
  FreemarkerCoreComment_initWithNSString_(self, text);
  return self;
}


#line 35
- (void)acceptWithFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env {
}


#line 39
- (NSString *)dumpWithBoolean:(jboolean)canonical {
  if (canonical) {
    return JreStrcat("$$$", @"<#--", text_, @"-->");
  }
  else {
    
#line 43
    return JreStrcat("$$", @"comment ", FreemarkerTemplateUtilityStringUtil_jQuoteWithNSString_([((NSString *) nil_chk(text_)) trim]));
  }
}


#line 47
- (NSString *)getNodeTypeSymbol {
  return @"#--...--";
}


#line 52
- (jint)getParameterCount {
  return 1;
}

- (id)getParameterValueWithInt:(jint)idx {
  if (idx != 0) @throw new_JavaLangIndexOutOfBoundsException_init();
  return text_;
}

- (FreemarkerCoreParameterRole *)getParameterRoleWithInt:(jint)idx {
  if (idx != 0) @throw new_JavaLangIndexOutOfBoundsException_init();
  return FreemarkerCoreParameterRole_get_CONTENT_();
}

- (NSString *)getText {
  return text_;
}

- (jboolean)isOutputCacheable {
  return YES;
}

- (jboolean)isNestedBlockRepeater {
  return NO;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithNSString:", "Comment", NULL, 0x0, NULL, NULL },
    { "acceptWithFreemarkerCoreEnvironment:", "accept", "V", 0x0, NULL, NULL },
    { "dumpWithBoolean:", "dump", "Ljava.lang.String;", 0x4, NULL, NULL },
    { "getNodeTypeSymbol", NULL, "Ljava.lang.String;", 0x0, NULL, NULL },
    { "getParameterCount", NULL, "I", 0x0, NULL, NULL },
    { "getParameterValueWithInt:", "getParameterValue", "Ljava.lang.Object;", 0x0, NULL, NULL },
    { "getParameterRoleWithInt:", "getParameterRole", "Lfreemarker.core.ParameterRole;", 0x0, NULL, NULL },
    { "getText", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "isOutputCacheable", NULL, "Z", 0x0, NULL, NULL },
    { "isNestedBlockRepeater", NULL, "Z", 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "text_", NULL, 0x12, "Ljava.lang.String;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerCoreComment = { 2, "Comment", "freemarker.core", NULL, 0x11, 10, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerCoreComment;
}

@end


#line 31
void FreemarkerCoreComment_initWithNSString_(FreemarkerCoreComment *self, NSString *text) {
  (void) FreemarkerCoreTemplateElement_init(self);
  
#line 32
  self->text_ = text;
}


#line 31
FreemarkerCoreComment *new_FreemarkerCoreComment_initWithNSString_(NSString *text) {
  FreemarkerCoreComment *self = [FreemarkerCoreComment alloc];
  FreemarkerCoreComment_initWithNSString_(self, text);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreComment)
