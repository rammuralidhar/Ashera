//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/UnaryPlusMinusExpression.java
//


#include "ArithmeticEngine.h"
#include "Environment.h"
#include "Expression.h"
#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "NonNumericalException.h"
#include "ParameterRole.h"
#include "SimpleNumber.h"
#include "TemplateException.h"
#include "TemplateModel.h"
#include "TemplateNumberModel.h"
#include "UnaryPlusMinusExpression.h"
#include "java/lang/ClassCastException.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/Integer.h"

#line 0 "/Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/UnaryPlusMinusExpression.java"

@interface FreemarkerCoreUnaryPlusMinusExpression () {
 @public
  jint TYPE_MINUS_;
  jint TYPE_PLUS_;
  FreemarkerCoreExpression *target_;
  jboolean isMinus_;
}

@end

J2OBJC_FIELD_SETTER(FreemarkerCoreUnaryPlusMinusExpression, target_, FreemarkerCoreExpression *)

static JavaLangInteger *FreemarkerCoreUnaryPlusMinusExpression_MINUS_ONE_;
J2OBJC_STATIC_FIELD_GETTER(FreemarkerCoreUnaryPlusMinusExpression, MINUS_ONE_, JavaLangInteger *)

J2OBJC_INITIALIZED_DEFN(FreemarkerCoreUnaryPlusMinusExpression)


#line 24
@implementation FreemarkerCoreUnaryPlusMinusExpression


#line 33
- (instancetype)initWithFreemarkerCoreExpression:(FreemarkerCoreExpression *)target
                                     withBoolean:(jboolean)isMinus {
  FreemarkerCoreUnaryPlusMinusExpression_initWithFreemarkerCoreExpression_withBoolean_(self, target, isMinus);
  return self;
}


#line 38
- (id<FreemarkerTemplateTemplateModel>)_evalWithFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env {
  id<FreemarkerTemplateTemplateNumberModel> targetModel = nil;
  id<FreemarkerTemplateTemplateModel> tm = [((FreemarkerCoreExpression *) nil_chk(target_)) evalWithFreemarkerCoreEnvironment:env];
  @try {
    targetModel = (id<FreemarkerTemplateTemplateNumberModel>) check_protocol_cast(tm, @protocol(FreemarkerTemplateTemplateNumberModel));
  }
  @catch (
#line 43
  JavaLangClassCastException *cce) {
    @throw new_FreemarkerCoreNonNumericalException_initWithFreemarkerCoreExpression_withFreemarkerTemplateTemplateModel_withFreemarkerCoreEnvironment_(target_, tm, env);
  }
  if (!isMinus_) {
    return targetModel;
  }
  [target_ assertNonNullWithFreemarkerTemplateTemplateModel:targetModel withFreemarkerCoreEnvironment:env];
  NSNumber *n = [((id<FreemarkerTemplateTemplateNumberModel>) nil_chk(targetModel)) getAsNumber];
  n = [((FreemarkerCoreArithmeticEngine_ConservativeEngine *) nil_chk(FreemarkerCoreArithmeticEngine_get_CONSERVATIVE_ENGINE_())) multiplyWithNSNumber:FreemarkerCoreUnaryPlusMinusExpression_MINUS_ONE_ withNSNumber:n];
  return new_FreemarkerTemplateSimpleNumber_initWithNSNumber_(n);
}


#line 55
- (NSString *)getCanonicalForm {
  NSString *op = isMinus_ ? @"-" : @"+";
  return JreStrcat("$$", op, [((FreemarkerCoreExpression *) nil_chk(target_)) getCanonicalForm]);
}

- (NSString *)getNodeTypeSymbol {
  return isMinus_ ? @"-..." : @"+...";
}

- (jboolean)isLiteral {
  return [((FreemarkerCoreExpression *) nil_chk(target_)) isLiteral];
}

- (FreemarkerCoreExpression *)deepCloneWithIdentifierReplaced_innerWithNSString:(NSString *)replacedIdentifier
                                                   withFreemarkerCoreExpression:(FreemarkerCoreExpression *)replacement
                                 withFreemarkerCoreExpression_ReplacemenetState:(FreemarkerCoreExpression_ReplacemenetState *)replacementState {
  
#line 70
  return new_FreemarkerCoreUnaryPlusMinusExpression_initWithFreemarkerCoreExpression_withBoolean_(
#line 71
  [((FreemarkerCoreExpression *) nil_chk(target_)) deepCloneWithIdentifierReplacedWithNSString:replacedIdentifier withFreemarkerCoreExpression:replacement withFreemarkerCoreExpression_ReplacemenetState:replacementState],
#line 72
  isMinus_);
}


#line 75
- (jint)getParameterCount {
  return 2;
}

- (id)getParameterValueWithInt:(jint)idx {
  switch (idx) {
    case 0:
    
#line 81
    return target_;
    case 1:
    
#line 82
    return new_JavaLangInteger_initWithInt_(isMinus_ ? TYPE_MINUS_ : TYPE_PLUS_);
    default:
    
#line 83
    @throw new_JavaLangIndexOutOfBoundsException_init();
  }
}


#line 87
- (FreemarkerCoreParameterRole *)getParameterRoleWithInt:(jint)idx {
  switch (idx) {
    case 0:
    
#line 89
    return FreemarkerCoreParameterRole_get_RIGHT_HAND_OPERAND_();
    case 1:
    
#line 90
    return FreemarkerCoreParameterRole_get_AST_NODE_SUBTYPE_();
    default:
    
#line 91
    @throw new_JavaLangIndexOutOfBoundsException_init();
  }
}

+ (void)initialize {
  if (self == [FreemarkerCoreUnaryPlusMinusExpression class]) {
    FreemarkerCoreUnaryPlusMinusExpression_MINUS_ONE_ = new_JavaLangInteger_initWithInt_(
#line 31
    -1);
    J2OBJC_SET_INITIALIZED(FreemarkerCoreUnaryPlusMinusExpression)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithFreemarkerCoreExpression:withBoolean:", "UnaryPlusMinusExpression", NULL, 0x0, NULL, NULL },
    { "_evalWithFreemarkerCoreEnvironment:", "_eval", "Lfreemarker.template.TemplateModel;", 0x0, "Lfreemarker.template.TemplateException;", NULL },
    { "getCanonicalForm", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getNodeTypeSymbol", NULL, "Ljava.lang.String;", 0x0, NULL, NULL },
    { "isLiteral", NULL, "Z", 0x0, NULL, NULL },
    { "deepCloneWithIdentifierReplaced_innerWithNSString:withFreemarkerCoreExpression:withFreemarkerCoreExpression_ReplacemenetState:", "deepCloneWithIdentifierReplaced_inner", "Lfreemarker.core.Expression;", 0x4, NULL, NULL },
    { "getParameterCount", NULL, "I", 0x0, NULL, NULL },
    { "getParameterValueWithInt:", "getParameterValue", "Ljava.lang.Object;", 0x0, NULL, NULL },
    { "getParameterRoleWithInt:", "getParameterRole", "Lfreemarker.core.ParameterRole;", 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "TYPE_MINUS_", NULL, 0x12, "I", NULL, NULL,  },
    { "TYPE_PLUS_", NULL, 0x12, "I", NULL, NULL,  },
    { "target_", NULL, 0x12, "Lfreemarker.core.Expression;", NULL, NULL,  },
    { "isMinus_", NULL, 0x12, "Z", NULL, NULL,  },
    { "MINUS_ONE_", NULL, 0x1a, "Ljava.lang.Integer;", &FreemarkerCoreUnaryPlusMinusExpression_MINUS_ONE_, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerCoreUnaryPlusMinusExpression = { 2, "UnaryPlusMinusExpression", "freemarker.core", NULL, 0x10, 9, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerCoreUnaryPlusMinusExpression;
}

@end


#line 33
void FreemarkerCoreUnaryPlusMinusExpression_initWithFreemarkerCoreExpression_withBoolean_(FreemarkerCoreUnaryPlusMinusExpression *self, FreemarkerCoreExpression *target, jboolean isMinus) {
  (void) FreemarkerCoreExpression_init(self);
  self->TYPE_MINUS_ =
#line 26
  0;
  self->TYPE_PLUS_ = 1;
  
#line 34
  self->target_ = target;
  self->isMinus_ = isMinus;
}


#line 33
FreemarkerCoreUnaryPlusMinusExpression *new_FreemarkerCoreUnaryPlusMinusExpression_initWithFreemarkerCoreExpression_withBoolean_(FreemarkerCoreExpression *target, jboolean isMinus) {
  FreemarkerCoreUnaryPlusMinusExpression *self = [FreemarkerCoreUnaryPlusMinusExpression alloc];
  FreemarkerCoreUnaryPlusMinusExpression_initWithFreemarkerCoreExpression_withBoolean_(self, target, isMinus);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreUnaryPlusMinusExpression)
