//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/log/Logger.java
//

#ifndef _FreemarkerLogLogger_H_
#define _FreemarkerLogLogger_H_

#include "J2ObjC_header.h"

@class JavaLangThrowable;

#define FreemarkerLogLogger_LIBRARY_AUTO -1
#define FreemarkerLogLogger_LIBRARY_NONE 0
#define FreemarkerLogLogger_LIBRARY_JAVA 1
#define FreemarkerLogLogger_LIBRARY_AVALON 2
#define FreemarkerLogLogger_LIBRARY_LOG4J 3
#define FreemarkerLogLogger_LIBRARY_COMMONS 4
#define FreemarkerLogLogger_LIBRARY_SLF4J 5

/**
 @brief Delegates logger creation to an actual logging library.
 By default it looks for logger libraries in this order (in FreeMarker 2.3.x): Log4J, Avalon LogKit, JUL (i.e., <tt>java.util.logging</tt>). Prior to FreeMarker 2.4, SLF4J and Apache Commons Logging aren't searched automatically due to backward compatibility constraints. But if you have <code>log4j-over-slf4j</code> properly installed (means, you have no real Log4j in your class path, and SLF4J has a backing implementation like <code>logback-classic</code> ), then FreeMarker will use SLF4J directly instead of Log4j (since FreeMarker 2.3.22). <p> If the auto detection sequence describet above doesn't give you the result that you want, see #SYSTEM_PROPERTY_NAME_LOGGER_LIBRARY .
 */
@interface FreemarkerLogLogger : NSObject

#pragma mark Public

- (instancetype)init;

/**
 @brief Logs a debugging message.
 */
- (void)debugWithNSString:(NSString *)message;

/**
 @brief Logs a debugging message with accompanying throwable.
 */
- (void)debugWithNSString:(NSString *)message
    withJavaLangThrowable:(JavaLangThrowable *)t;

/**
 @brief Logs an error message.
 */
- (void)errorWithNSString:(NSString *)message;

/**
 @brief Logs an error message with accompanying throwable.
 */
- (void)errorWithNSString:(NSString *)message
    withJavaLangThrowable:(JavaLangThrowable *)t;

/**
 @brief Returns a logger for the specified category.
 @param category a dot separated hierarchical category name. If a category prefix is in effect, it's prepended to the category name.
 */
+ (FreemarkerLogLogger *)getLoggerWithNSString:(NSString *)category;

/**
 @brief Logs an informational message.
 */
- (void)infoWithNSString:(NSString *)message;

/**
 @brief Logs an informational message with accompanying throwable.
 */
- (void)infoWithNSString:(NSString *)message
   withJavaLangThrowable:(JavaLangThrowable *)t;

/**
 @brief Returns true if this logger will log debug messages.
 */
- (jboolean)isDebugEnabled;

/**
 @brief Returns true if this logger will log error messages.
 */
- (jboolean)isErrorEnabled;

/**
 @brief Returns true if this logger will log fatal error messages.
 */
- (jboolean)isFatalEnabled;

/**
 @brief Returns true if this logger will log informational messages.
 */
- (jboolean)isInfoEnabled;

/**
 @brief Returns true if this logger will log warning messages.
 */
- (jboolean)isWarnEnabled;

/**
 @brief Selects the logger library to use, unless it's already specified by the #SYSTEM_PROPERTY_NAME_LOGGER_LIBRARY system property.
 Call this early in application initialization phase, before calling any other FreeMarker API-s, since once parts of the FreeMarker library bind to the logging subsystem, the change in this value will have no effect on them.
 @param libraryEnum One of <tt>LIBRARY_...</tt> constants. By default, #LIBRARY_AUTO is used.
 @throws ClassNotFoundException if an explicit logging library is asked for (that is, not #LIBRARY_AUTO or #LIBRARY_NONE ) and it's not found in the classpath.
 */
+ (void)selectLoggerLibraryWithInt:(jint)libraryEnum;

/**
 @brief Sets a category prefix.
 This prefix is prepended to any logger category name. This makes it possible to have different FreeMarker logger categories on a per-application basis (better said, per-classloader basis). By default the category prefix is the empty string. If you set a non-empty category prefix, be sure to include the trailing separator dot (i.e. "MyApp.") If you want to change the default setting, do it early in application initialization phase, before calling any other FreeMarker API since once various parts of the FreeMarker library bind to the logging subsystem, the change in this value will have no effect on them.
 */
+ (void)setCategoryPrefixWithNSString:(NSString *)prefix;

/**
 @brief Logs a warning message.
 */
- (void)warnWithNSString:(NSString *)message;

/**
 @brief Logs a warning message with accompanying throwable.
 */
- (void)warnWithNSString:(NSString *)message
   withJavaLangThrowable:(JavaLangThrowable *)t;

@end

J2OBJC_STATIC_INIT(FreemarkerLogLogger)

FOUNDATION_EXPORT NSString *FreemarkerLogLogger_SYSTEM_PROPERTY_NAME_LOGGER_LIBRARY_;
J2OBJC_STATIC_FIELD_GETTER(FreemarkerLogLogger, SYSTEM_PROPERTY_NAME_LOGGER_LIBRARY_, NSString *)

J2OBJC_STATIC_FIELD_GETTER(FreemarkerLogLogger, LIBRARY_AUTO, jint)

FOUNDATION_EXPORT NSString *FreemarkerLogLogger_LIBRARY_NAME_AUTO_;
J2OBJC_STATIC_FIELD_GETTER(FreemarkerLogLogger, LIBRARY_NAME_AUTO_, NSString *)

J2OBJC_STATIC_FIELD_GETTER(FreemarkerLogLogger, LIBRARY_NONE, jint)

FOUNDATION_EXPORT NSString *FreemarkerLogLogger_LIBRARY_NAME_NONE_;
J2OBJC_STATIC_FIELD_GETTER(FreemarkerLogLogger, LIBRARY_NAME_NONE_, NSString *)

J2OBJC_STATIC_FIELD_GETTER(FreemarkerLogLogger, LIBRARY_JAVA, jint)

FOUNDATION_EXPORT NSString *FreemarkerLogLogger_LIBRARY_NAME_JUL_;
J2OBJC_STATIC_FIELD_GETTER(FreemarkerLogLogger, LIBRARY_NAME_JUL_, NSString *)

J2OBJC_STATIC_FIELD_GETTER(FreemarkerLogLogger, LIBRARY_AVALON, jint)

FOUNDATION_EXPORT NSString *FreemarkerLogLogger_LIBRARY_NAME_AVALON_;
J2OBJC_STATIC_FIELD_GETTER(FreemarkerLogLogger, LIBRARY_NAME_AVALON_, NSString *)

J2OBJC_STATIC_FIELD_GETTER(FreemarkerLogLogger, LIBRARY_LOG4J, jint)

FOUNDATION_EXPORT NSString *FreemarkerLogLogger_LIBRARY_NAME_LOG4J_;
J2OBJC_STATIC_FIELD_GETTER(FreemarkerLogLogger, LIBRARY_NAME_LOG4J_, NSString *)

J2OBJC_STATIC_FIELD_GETTER(FreemarkerLogLogger, LIBRARY_COMMONS, jint)

FOUNDATION_EXPORT NSString *FreemarkerLogLogger_LIBRARY_NAME_COMMONS_LOGGING_;
J2OBJC_STATIC_FIELD_GETTER(FreemarkerLogLogger, LIBRARY_NAME_COMMONS_LOGGING_, NSString *)

J2OBJC_STATIC_FIELD_GETTER(FreemarkerLogLogger, LIBRARY_SLF4J, jint)

FOUNDATION_EXPORT NSString *FreemarkerLogLogger_LIBRARY_NAME_SLF4J_;
J2OBJC_STATIC_FIELD_GETTER(FreemarkerLogLogger, LIBRARY_NAME_SLF4J_, NSString *)

FOUNDATION_EXPORT void FreemarkerLogLogger_selectLoggerLibraryWithInt_(jint libraryEnum);

FOUNDATION_EXPORT void FreemarkerLogLogger_setCategoryPrefixWithNSString_(NSString *prefix);

FOUNDATION_EXPORT FreemarkerLogLogger *FreemarkerLogLogger_getLoggerWithNSString_(NSString *category);

FOUNDATION_EXPORT void FreemarkerLogLogger_init(FreemarkerLogLogger *self);

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerLogLogger)

#endif // _FreemarkerLogLogger_H_
