//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/ext/beans/UnsafeMethods.java
//


#include "BeansWrapper.h"
#include "ClassIntrospector.h"
#include "ClassUtil.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "UnsafeMethods.h"
#include "java/io/InputStream.h"
#include "java/lang/Boolean.h"
#include "java/lang/Byte.h"
#include "java/lang/Character.h"
#include "java/lang/ClassNotFoundException.h"
#include "java/lang/Double.h"
#include "java/lang/Exception.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/NoSuchMethodException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/Short.h"
#include "java/lang/reflect/Method.h"
#include "java/util/Collections.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/Map.h"
#include "java/util/Properties.h"
#include "java/util/Set.h"
#include "java/util/StringTokenizer.h"

#line 0 "/Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/ext/beans/UnsafeMethods.java"

@interface FreemarkerExtBeansUnsafeMethods ()

- (instancetype)init;

+ (id<JavaUtilSet>)createUnsafeMethodsSet;

+ (JavaLangReflectMethod *)parseMethodSpecWithNSString:(NSString *)methodSpec
                                       withJavaUtilMap:(id<JavaUtilMap>)primClasses;

+ (id<JavaUtilMap>)createPrimitiveClassesMap;

@end

static id<JavaUtilSet> FreemarkerExtBeansUnsafeMethods_UNSAFE_METHODS_;
J2OBJC_STATIC_FIELD_GETTER(FreemarkerExtBeansUnsafeMethods, UNSAFE_METHODS_, id<JavaUtilSet>)

__attribute__((unused)) static void FreemarkerExtBeansUnsafeMethods_init(FreemarkerExtBeansUnsafeMethods *self);

__attribute__((unused)) static FreemarkerExtBeansUnsafeMethods *new_FreemarkerExtBeansUnsafeMethods_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static id<JavaUtilSet> FreemarkerExtBeansUnsafeMethods_createUnsafeMethodsSet();

__attribute__((unused)) static JavaLangReflectMethod *FreemarkerExtBeansUnsafeMethods_parseMethodSpecWithNSString_withJavaUtilMap_(NSString *methodSpec, id<JavaUtilMap> primClasses);

__attribute__((unused)) static id<JavaUtilMap> FreemarkerExtBeansUnsafeMethods_createPrimitiveClassesMap();

J2OBJC_INITIALIZED_DEFN(FreemarkerExtBeansUnsafeMethods)


#line 32
@implementation FreemarkerExtBeansUnsafeMethods


#line 36
- (instancetype)init {
  FreemarkerExtBeansUnsafeMethods_init(self);
  return self;
}


#line 38
+ (jboolean)isUnsafeMethodWithJavaLangReflectMethod:(JavaLangReflectMethod *)method {
  return FreemarkerExtBeansUnsafeMethods_isUnsafeMethodWithJavaLangReflectMethod_(method);
}

+ (id<JavaUtilSet>)createUnsafeMethodsSet {
  return FreemarkerExtBeansUnsafeMethods_createUnsafeMethodsSet();
}


#line 88
+ (JavaLangReflectMethod *)parseMethodSpecWithNSString:(NSString *)methodSpec
                                       withJavaUtilMap:(id<JavaUtilMap>)primClasses {
  return FreemarkerExtBeansUnsafeMethods_parseMethodSpecWithNSString_withJavaUtilMap_(methodSpec, primClasses);
}


#line 113
+ (id<JavaUtilMap>)createPrimitiveClassesMap {
  return FreemarkerExtBeansUnsafeMethods_createPrimitiveClassesMap();
}

+ (void)initialize {
  if (self == [FreemarkerExtBeansUnsafeMethods class]) {
    FreemarkerExtBeansUnsafeMethods_UNSAFE_METHODS_ = FreemarkerExtBeansUnsafeMethods_createUnsafeMethodsSet();
    J2OBJC_SET_INITIALIZED(FreemarkerExtBeansUnsafeMethods)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "UnsafeMethods", NULL, 0x2, NULL, NULL },
    { "isUnsafeMethodWithJavaLangReflectMethod:", "isUnsafeMethod", "Z", 0x8, NULL, NULL },
    { "createUnsafeMethodsSet", NULL, "Ljava.util.Set;", 0x1a, NULL, NULL },
    { "parseMethodSpecWithNSString:withJavaUtilMap:", "parseMethodSpec", "Ljava.lang.reflect.Method;", 0xa, "Ljava.lang.ClassNotFoundException;Ljava.lang.NoSuchMethodException;", NULL },
    { "createPrimitiveClassesMap", NULL, "Ljava.util.Map;", 0xa, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "UNSAFE_METHODS_", NULL, 0x1a, "Ljava.util.Set;", &FreemarkerExtBeansUnsafeMethods_UNSAFE_METHODS_, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerExtBeansUnsafeMethods = { 2, "UnsafeMethods", "freemarker.ext.beans", NULL, 0x0, 5, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerExtBeansUnsafeMethods;
}

@end


#line 36
void FreemarkerExtBeansUnsafeMethods_init(FreemarkerExtBeansUnsafeMethods *self) {
  (void) NSObject_init(self);
}


#line 36
FreemarkerExtBeansUnsafeMethods *new_FreemarkerExtBeansUnsafeMethods_init() {
  FreemarkerExtBeansUnsafeMethods *self = [FreemarkerExtBeansUnsafeMethods alloc];
  FreemarkerExtBeansUnsafeMethods_init(self);
  return self;
}


#line 38
jboolean FreemarkerExtBeansUnsafeMethods_isUnsafeMethodWithJavaLangReflectMethod_(JavaLangReflectMethod *method) {
  FreemarkerExtBeansUnsafeMethods_initialize();
  
#line 39
  return [((id<JavaUtilSet>) nil_chk(FreemarkerExtBeansUnsafeMethods_UNSAFE_METHODS_)) containsWithId:method];
}


#line 42
id<JavaUtilSet> FreemarkerExtBeansUnsafeMethods_createUnsafeMethodsSet() {
  FreemarkerExtBeansUnsafeMethods_initialize();
  JavaUtilProperties *props = new_JavaUtilProperties_init();
  JavaIoInputStream *in = [FreemarkerExtBeansBeansWrapper_class_() getResourceAsStream:@"unsafeMethods.txt"];
  if (in != nil) {
    
#line 48
    NSString *methodSpec = nil;
    @try {
      
#line 51
      @try {
        
#line 53
        [props load__WithJavaIoInputStream:in];
      }
      @finally {
        
#line 57
        [in close];
      }
      id<JavaUtilSet> set = new_JavaUtilHashSet_initWithInt_withFloat_([props size] * 4 / 3, 1.0f);
      id<JavaUtilMap> primClasses = FreemarkerExtBeansUnsafeMethods_createPrimitiveClassesMap();
      for (id<JavaUtilIterator> iterator = [((id<JavaUtilSet>) nil_chk([props keySet])) iterator]; [((id<JavaUtilIterator>) nil_chk(iterator)) hasNext]; ) {
        
#line 63
        methodSpec = (NSString *) check_class_cast([iterator next], [NSString class]);
        @try {
          [set addWithId:FreemarkerExtBeansUnsafeMethods_parseMethodSpecWithNSString_withJavaUtilMap_(methodSpec, primClasses)];
        }
        @catch (JavaLangClassNotFoundException *e) {
          if (FreemarkerExtBeansClassIntrospector_get_DEVELOPMENT_MODE_()) {
            @throw e;
          }
        }
        @catch (JavaLangNoSuchMethodException *e) {
          if (FreemarkerExtBeansClassIntrospector_get_DEVELOPMENT_MODE_()) {
            @throw e;
          }
        }
      }
      return set;
    }
    @catch (JavaLangException *e) {
      
#line 82
      @throw new_JavaLangRuntimeException_initWithNSString_(JreStrcat("$$C$C$", @"Could not load unsafe method ", methodSpec, ' ', [[((JavaLangException *) nil_chk(e)) getClass] getName], ' ', [e getMessage]));
    }
  }
  return JavaUtilCollections_get_EMPTY_SET_();
}


#line 88
JavaLangReflectMethod *FreemarkerExtBeansUnsafeMethods_parseMethodSpecWithNSString_withJavaUtilMap_(NSString *methodSpec, id<JavaUtilMap> primClasses) {
  FreemarkerExtBeansUnsafeMethods_initialize();
  
#line 93
  jint brace = [((NSString *) nil_chk(methodSpec)) indexOf:'('];
  jint dot = [methodSpec lastIndexOf:'.' fromIndex:brace];
  IOSClass *clazz = FreemarkerTemplateUtilityClassUtil_forNameWithNSString_([methodSpec substring:0 endIndex:dot]);
  NSString *methodName = [methodSpec substring:dot + 1 endIndex:brace];
  NSString *argSpec = [methodSpec substring:brace + 1 endIndex:((jint) [methodSpec length]) - 1];
  JavaUtilStringTokenizer *tok = new_JavaUtilStringTokenizer_initWithNSString_withNSString_(argSpec, @",");
  jint argcount = [tok countTokens];
  IOSObjectArray *argTypes = [IOSObjectArray newArrayWithLength:argcount type:IOSClass_class_()];
  for (jint i = 0; i < argcount; i++) {
    
#line 103
    NSString *argClassName = [tok nextToken];
    (void) IOSObjectArray_Set(argTypes, i, (IOSClass *) check_class_cast([((id<JavaUtilMap>) nil_chk(primClasses)) getWithId:argClassName], [IOSClass class]));
    if (IOSObjectArray_Get(argTypes, i) == nil) {
      
#line 107
      (void) IOSObjectArray_Set(argTypes, i, FreemarkerTemplateUtilityClassUtil_forNameWithNSString_(argClassName));
    }
  }
  return [((IOSClass *) nil_chk(clazz)) getMethod:methodName parameterTypes:argTypes];
}


#line 113
id<JavaUtilMap> FreemarkerExtBeansUnsafeMethods_createPrimitiveClassesMap() {
  FreemarkerExtBeansUnsafeMethods_initialize();
  id<JavaUtilMap> map = new_JavaUtilHashMap_init();
  (void) [map putWithId:@"boolean" withId:JavaLangBoolean_get_TYPE_()];
  (void) [map putWithId:@"byte" withId:JavaLangByte_get_TYPE_()];
  (void) [map putWithId:@"char" withId:JavaLangCharacter_get_TYPE_()];
  (void) [map putWithId:@"short" withId:JavaLangShort_get_TYPE_()];
  (void) [map putWithId:@"int" withId:JavaLangInteger_get_TYPE_()];
  (void) [map putWithId:@"long" withId:JavaLangLong_get_TYPE_()];
  (void) [map putWithId:@"float" withId:JavaLangFloat_get_TYPE_()];
  (void) [map putWithId:@"double" withId:JavaLangDouble_get_TYPE_()];
  return map;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerExtBeansUnsafeMethods)
