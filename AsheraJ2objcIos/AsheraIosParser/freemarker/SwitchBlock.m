//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/SwitchBlock.java
//


#include "BreakInstruction.h"
#include "Case.h"
#include "Environment.h"
#include "EvalUtil.h"
#include "Expression.h"
#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "ParameterRole.h"
#include "SwitchBlock.h"
#include "TemplateElement.h"
#include "TemplateException.h"
#include "java/io/IOException.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/StringBuffer.h"

#line 0 "/Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/SwitchBlock.java"

@interface FreemarkerCoreSwitchBlock () {
 @public
  FreemarkerCoreCase *defaultCase_;
  FreemarkerCoreExpression *searched_;
}

@end

J2OBJC_FIELD_SETTER(FreemarkerCoreSwitchBlock, defaultCase_, FreemarkerCoreCase *)
J2OBJC_FIELD_SETTER(FreemarkerCoreSwitchBlock, searched_, FreemarkerCoreExpression *)


#line 26
@implementation FreemarkerCoreSwitchBlock


#line 34
- (instancetype)initWithFreemarkerCoreExpression:(FreemarkerCoreExpression *)searched {
  FreemarkerCoreSwitchBlock_initWithFreemarkerCoreExpression_(self, searched);
  return self;
}


#line 42
- (void)addCaseWithFreemarkerCoreCase:(FreemarkerCoreCase *)cas {
  if (((FreemarkerCoreCase *) nil_chk(cas))->condition_ == nil) {
    defaultCase_ = cas;
  }
  [self addRegulatedChildWithFreemarkerCoreTemplateElement:cas];
}

- (void)acceptWithFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env {
  
#line 52
  jboolean processedCase = NO;
  jint ln = [self getRegulatedChildCount];
  @try {
    for (jint i = 0; i < ln; i++) {
      FreemarkerCoreCase *cas = (FreemarkerCoreCase *) check_class_cast([self getRegulatedChildWithInt:i], [FreemarkerCoreCase class]);
      jboolean processCase = NO;
      
#line 60
      if (processedCase) {
        processCase = YES;
      }
      else
#line 62
      if (((FreemarkerCoreCase *) nil_chk(cas))->condition_ != nil) {
        
#line 64
        processCase = FreemarkerCoreEvalUtil_compareWithFreemarkerCoreExpression_withInt_withNSString_withFreemarkerCoreExpression_withFreemarkerCoreExpression_withFreemarkerCoreEnvironment_(
#line 65
        searched_,
#line 66
        FreemarkerCoreEvalUtil_CMP_OP_EQUALS, @"case==", cas->condition_, cas->condition_, env);
      }
      if (processCase) {
        [((FreemarkerCoreEnvironment *) nil_chk(env)) visitByHiddingParentWithFreemarkerCoreTemplateElement:cas];
        processedCase = YES;
      }
    }
    
#line 76
    if (!processedCase && defaultCase_ != nil) {
      [((FreemarkerCoreEnvironment *) nil_chk(env)) visitByHiddingParentWithFreemarkerCoreTemplateElement:defaultCase_];
    }
  }
  @catch (FreemarkerCoreBreakInstruction_Break *br) {
  }
}


#line 83
- (NSString *)dumpWithBoolean:(jboolean)canonical {
  JavaLangStringBuffer *buf = new_JavaLangStringBuffer_init();
  if (canonical) (void) [buf appendWithChar:'<'];
  (void) [buf appendWithNSString:[self getNodeTypeSymbol]];
  (void) [buf appendWithChar:' '];
  (void) [buf appendWithNSString:[((FreemarkerCoreExpression *) nil_chk(searched_)) getCanonicalForm]];
  if (canonical) {
    (void) [buf appendWithChar:'>'];
    jint ln = [self getRegulatedChildCount];
    for (jint i = 0; i < ln; i++) {
      FreemarkerCoreCase *cas = (FreemarkerCoreCase *) check_class_cast([self getRegulatedChildWithInt:i], [FreemarkerCoreCase class]);
      (void) [buf appendWithNSString:[((FreemarkerCoreCase *) nil_chk(cas)) getCanonicalForm]];
    }
    (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([buf appendWithNSString:@"</"])) appendWithNSString:[self getNodeTypeSymbol]])) appendWithChar:'>'];
  }
  return [buf description];
}

- (NSString *)getNodeTypeSymbol {
  return @"#switch";
}

- (jint)getParameterCount {
  return 1;
}

- (id)getParameterValueWithInt:(jint)idx {
  if (idx != 0) @throw new_JavaLangIndexOutOfBoundsException_init();
  return searched_;
}

- (FreemarkerCoreParameterRole *)getParameterRoleWithInt:(jint)idx {
  if (idx != 0) @throw new_JavaLangIndexOutOfBoundsException_init();
  return FreemarkerCoreParameterRole_get_VALUE_();
}

- (jboolean)isNestedBlockRepeater {
  return NO;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithFreemarkerCoreExpression:", "SwitchBlock", NULL, 0x0, NULL, NULL },
    { "addCaseWithFreemarkerCoreCase:", "addCase", "V", 0x0, NULL, NULL },
    { "acceptWithFreemarkerCoreEnvironment:", "accept", "V", 0x0, "Lfreemarker.template.TemplateException;Ljava.io.IOException;", NULL },
    { "dumpWithBoolean:", "dump", "Ljava.lang.String;", 0x4, NULL, NULL },
    { "getNodeTypeSymbol", NULL, "Ljava.lang.String;", 0x0, NULL, NULL },
    { "getParameterCount", NULL, "I", 0x0, NULL, NULL },
    { "getParameterValueWithInt:", "getParameterValue", "Ljava.lang.Object;", 0x0, NULL, NULL },
    { "getParameterRoleWithInt:", "getParameterRole", "Lfreemarker.core.ParameterRole;", 0x0, NULL, NULL },
    { "isNestedBlockRepeater", NULL, "Z", 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "defaultCase_", NULL, 0x2, "Lfreemarker.core.Case;", NULL, NULL,  },
    { "searched_", NULL, 0x12, "Lfreemarker.core.Expression;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerCoreSwitchBlock = { 2, "SwitchBlock", "freemarker.core", NULL, 0x10, 9, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerCoreSwitchBlock;
}

@end


#line 34
void FreemarkerCoreSwitchBlock_initWithFreemarkerCoreExpression_(FreemarkerCoreSwitchBlock *self, FreemarkerCoreExpression *searched) {
  (void) FreemarkerCoreTemplateElement_init(self);
  
#line 35
  self->searched_ = searched;
  [self setRegulatedChildBufferCapacityWithInt:4];
}


#line 34
FreemarkerCoreSwitchBlock *new_FreemarkerCoreSwitchBlock_initWithFreemarkerCoreExpression_(FreemarkerCoreExpression *searched) {
  FreemarkerCoreSwitchBlock *self = [FreemarkerCoreSwitchBlock alloc];
  FreemarkerCoreSwitchBlock_initWithFreemarkerCoreExpression_(self, searched);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreSwitchBlock)
