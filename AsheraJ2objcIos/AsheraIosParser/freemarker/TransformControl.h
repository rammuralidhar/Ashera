//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/template/TransformControl.java
//

#ifndef _FreemarkerTemplateTransformControl_H_
#define _FreemarkerTemplateTransformControl_H_

#include "J2ObjC_header.h"

@class JavaLangThrowable;

#define FreemarkerTemplateTransformControl_REPEAT_EVALUATION 0
#define FreemarkerTemplateTransformControl_END_EVALUATION 1
#define FreemarkerTemplateTransformControl_SKIP_BODY 0
#define FreemarkerTemplateTransformControl_EVALUATE_BODY 1

/**
 @brief An interface that can be implemented by writers returned from TemplateTransformModel#getWriter(java.io.Writer,java.util.Map) .
 The methods on this interfaces are callbacks that will be called by the template engine and that give the writer a chance to better control the evaluation of the transform body. The writer can instruct the engine to skip or to repeat body evaluation, and gets notified about exceptions that are thrown during the body evaluation.
 */
@protocol FreemarkerTemplateTransformControl < NSObject, JavaObject >

/**
 @brief Called before the body is evaluated for the first time.
 @return <ul> <li><tt>SKIP_BODY</tt> if the transform wants to ignore the body. In this case, only java.io.Writer#close() is called next and processing ends.</li> <li><tt>EVALUATE_BODY</tt> to normally evaluate the body of the transform and feed it to the writer</li> </ul>
 */
- (jint)onStart;

/**
 @brief Called after the body has been evaluated.
 @return <ul> <li><tt>END_EVALUATION</tt> if the transformation should be ended.</li> <li><tt>REPEAT_EVALUATION</tt> to have the engine re-evaluate the transform body and feed it again to the writer.</li> </ul>
 */
- (jint)afterBody;

/**
 @brief Called if any exception occurs during the transform between the TemplateTransformModel#getWriter(java.io.Writer,java.util.Map) call and the java.io.Writer#close() call.
 @param t the throwable that represents the exception. It can be any non-checked throwable, as well as TemplateException and java.io.IOException .
 @throws Throwable is recommended that the methods rethrow the received throwable. If the method wants to throw another throwable, it should either throw a non-checked throwable, or an instance of TemplateException and java.io.IOException . Throwing any other checked exception will cause the engine to rethrow it as a java.lang.reflect.UndeclaredThrowableException .
 */
- (void)onErrorWithJavaLangThrowable:(JavaLangThrowable *)t;

@end

J2OBJC_EMPTY_STATIC_INIT(FreemarkerTemplateTransformControl)

J2OBJC_STATIC_FIELD_GETTER(FreemarkerTemplateTransformControl, REPEAT_EVALUATION, jint)

J2OBJC_STATIC_FIELD_GETTER(FreemarkerTemplateTransformControl, END_EVALUATION, jint)

J2OBJC_STATIC_FIELD_GETTER(FreemarkerTemplateTransformControl, SKIP_BODY, jint)

J2OBJC_STATIC_FIELD_GETTER(FreemarkerTemplateTransformControl, EVALUATE_BODY, jint)

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerTemplateTransformControl)

#endif // _FreemarkerTemplateTransformControl_H_
