//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/ext/beans/MapModel.java
//

#ifndef _FreemarkerExtBeansMapModel_H_
#define _FreemarkerExtBeansMapModel_H_

#include "J2ObjC_header.h"
#include "StringModel.h"
#include "TemplateMethodModelEx.h"

@class FreemarkerExtBeansBeansWrapper;
@class IOSClass;
@protocol FreemarkerExtUtilModelFactory;
@protocol FreemarkerTemplateTemplateModel;
@protocol JavaUtilList;
@protocol JavaUtilMap;
@protocol JavaUtilSet;

/**
 @brief <p>A special case of BeanModel that adds implementation for TemplateMethodModelEx on map objects that is a shortcut for the <tt>Map.get()</tt> method.
 Note that if the passed argument itself is a reflection-wrapper model, then the map lookup will be performed using the wrapped object as the key. Note that you can call <tt>get()</tt> using the <tt>map.key</tt> syntax inherited from BeanModel as well, however in that case the key is always a string.</p> <p>The class itself does not implement the freemarker.template.TemplateCollectionModel . You can, however use <tt>map.entrySet()</tt>, <tt>map.keySet()</tt>, or <tt>map.values()</tt> to obtain freemarker.template.TemplateCollectionModel instances for various aspects of the map.</p>
 */
@interface FreemarkerExtBeansMapModel : FreemarkerExtBeansStringModel < FreemarkerTemplateTemplateMethodModelEx >

#pragma mark Public

/**
 @brief Creates a new model that wraps the specified map object.
 @param map the map object to wrap into a model.
 @param wrapper the BeansWrapper associated with this model. Every model has to have an associated BeansWrapper instance. The model gains many attributes from its wrapper, including the caching behavior, method exposure level, method-over-item shadowing policy etc.
 */
- (instancetype)initWithJavaUtilMap:(id<JavaUtilMap>)map
 withFreemarkerExtBeansBeansWrapper:(FreemarkerExtBeansBeansWrapper *)wrapper;

/**
 @brief The first argument is used as a key to call the map's <tt>get</tt> method.
 */
- (id)execWithJavaUtilList:(id<JavaUtilList>)arguments;

- (jboolean)isEmpty;

- (jint)size;

#pragma mark Protected

/**
 @brief Overridden to invoke the generic get method by casting to Map instead of through reflection - should yield better performance.
 */
- (id<FreemarkerTemplateTemplateModel>)invokeGenericGetWithJavaUtilMap:(id<JavaUtilMap>)keyMap
                                                          withIOSClass:(IOSClass *)clazz
                                                          withNSString:(NSString *)key;

- (id<JavaUtilSet>)keySet;

@end

J2OBJC_STATIC_INIT(FreemarkerExtBeansMapModel)

FOUNDATION_EXPORT id<FreemarkerExtUtilModelFactory> FreemarkerExtBeansMapModel_FACTORY_;
J2OBJC_STATIC_FIELD_GETTER(FreemarkerExtBeansMapModel, FACTORY_, id<FreemarkerExtUtilModelFactory>)

FOUNDATION_EXPORT void FreemarkerExtBeansMapModel_initWithJavaUtilMap_withFreemarkerExtBeansBeansWrapper_(FreemarkerExtBeansMapModel *self, id<JavaUtilMap> map, FreemarkerExtBeansBeansWrapper *wrapper);

FOUNDATION_EXPORT FreemarkerExtBeansMapModel *new_FreemarkerExtBeansMapModel_initWithJavaUtilMap_withFreemarkerExtBeansBeansWrapper_(id<JavaUtilMap> map, FreemarkerExtBeansBeansWrapper *wrapper) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerExtBeansMapModel)

#endif // _FreemarkerExtBeansMapModel_H_
