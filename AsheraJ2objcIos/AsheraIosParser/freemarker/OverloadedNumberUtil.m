//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/ext/beans/OverloadedNumberUtil.java
//


#include "ClassUtil.h"
#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "NumberUtil.h"
#include "OverloadedNumberUtil.h"
#include "TypeFlags.h"
#include "java/lang/Byte.h"
#include "java/lang/ClassCastException.h"
#include "java/lang/Comparable.h"
#include "java/lang/Double.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/Short.h"
#include "java/math/BigDecimal.h"
#include "java/math/BigInteger.h"

#line 0 "/Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/ext/beans/OverloadedNumberUtil.java"

#define FreemarkerExtBeansOverloadedNumberUtil_MAX_DOUBLE_OR_LONG 9007199254740992LL
#define FreemarkerExtBeansOverloadedNumberUtil_MIN_DOUBLE_OR_LONG -9007199254740992LL
#define FreemarkerExtBeansOverloadedNumberUtil_MAX_DOUBLE_OR_LONG_LOG_2 53
#define FreemarkerExtBeansOverloadedNumberUtil_MAX_FLOAT_OR_INT 16777216
#define FreemarkerExtBeansOverloadedNumberUtil_MIN_FLOAT_OR_INT -16777216
#define FreemarkerExtBeansOverloadedNumberUtil_MAX_FLOAT_OR_INT_LOG_2 24
#define FreemarkerExtBeansOverloadedNumberUtil_LOWEST_ABOVE_ZERO 1.0E-6
#define FreemarkerExtBeansOverloadedNumberUtil_HIGHEST_BELOW_ONE 0.999999

@interface FreemarkerExtBeansOverloadedNumberUtil ()

- (instancetype)init;

@end

J2OBJC_STATIC_FIELD_GETTER(FreemarkerExtBeansOverloadedNumberUtil, MAX_DOUBLE_OR_LONG, jlong)

J2OBJC_STATIC_FIELD_GETTER(FreemarkerExtBeansOverloadedNumberUtil, MIN_DOUBLE_OR_LONG, jlong)

J2OBJC_STATIC_FIELD_GETTER(FreemarkerExtBeansOverloadedNumberUtil, MAX_DOUBLE_OR_LONG_LOG_2, jint)

J2OBJC_STATIC_FIELD_GETTER(FreemarkerExtBeansOverloadedNumberUtil, MAX_FLOAT_OR_INT, jint)

J2OBJC_STATIC_FIELD_GETTER(FreemarkerExtBeansOverloadedNumberUtil, MIN_FLOAT_OR_INT, jint)

J2OBJC_STATIC_FIELD_GETTER(FreemarkerExtBeansOverloadedNumberUtil, MAX_FLOAT_OR_INT_LOG_2, jint)

J2OBJC_STATIC_FIELD_GETTER(FreemarkerExtBeansOverloadedNumberUtil, LOWEST_ABOVE_ZERO, jdouble)

J2OBJC_STATIC_FIELD_GETTER(FreemarkerExtBeansOverloadedNumberUtil, HIGHEST_BELOW_ONE, jdouble)

__attribute__((unused)) static void FreemarkerExtBeansOverloadedNumberUtil_init(FreemarkerExtBeansOverloadedNumberUtil *self);

__attribute__((unused)) static FreemarkerExtBeansOverloadedNumberUtil *new_FreemarkerExtBeansOverloadedNumberUtil_init() NS_RETURNS_RETAINED;

@interface FreemarkerExtBeansOverloadedNumberUtil_ByteSource : NSObject
@end

@interface FreemarkerExtBeansOverloadedNumberUtil_ShortSource : NSObject
@end

@interface FreemarkerExtBeansOverloadedNumberUtil_IntegerSource : NSObject
@end

@interface FreemarkerExtBeansOverloadedNumberUtil_LongSource : NSObject
@end

@interface FreemarkerExtBeansOverloadedNumberUtil_FloatSource : NSObject
@end

@interface FreemarkerExtBeansOverloadedNumberUtil_DoubleSource : NSObject
@end

@interface FreemarkerExtBeansOverloadedNumberUtil_BigIntegerSource : NSObject
@end

@interface FreemarkerExtBeansOverloadedNumberUtil_BigDecimalSource : NSObject
@end

@interface FreemarkerExtBeansOverloadedNumberUtil_IntegerBigDecimal () {
 @public
  JavaMathBigDecimal *n_;
}

@end

J2OBJC_FIELD_SETTER(FreemarkerExtBeansOverloadedNumberUtil_IntegerBigDecimal, n_, JavaMathBigDecimal *)

@interface FreemarkerExtBeansOverloadedNumberUtil_LongOrSmallerInteger () {
 @public
  JavaLangLong *n_;
}

@end

J2OBJC_FIELD_SETTER(FreemarkerExtBeansOverloadedNumberUtil_LongOrSmallerInteger, n_, JavaLangLong *)

@interface FreemarkerExtBeansOverloadedNumberUtil_LongOrByte () {
 @public
  jbyte w_;
}

@end

@interface FreemarkerExtBeansOverloadedNumberUtil_LongOrShort () {
 @public
  jshort w_;
}

@end

@interface FreemarkerExtBeansOverloadedNumberUtil_LongOrInteger () {
 @public
  jint w_;
}

@end

@interface FreemarkerExtBeansOverloadedNumberUtil_IntegerOrSmallerInteger () {
 @public
  JavaLangInteger *n_;
}

@end

J2OBJC_FIELD_SETTER(FreemarkerExtBeansOverloadedNumberUtil_IntegerOrSmallerInteger, n_, JavaLangInteger *)

@interface FreemarkerExtBeansOverloadedNumberUtil_IntegerOrByte () {
 @public
  jbyte w_;
}

@end

@interface FreemarkerExtBeansOverloadedNumberUtil_IntegerOrShort () {
 @public
  jshort w_;
}

@end

@interface FreemarkerExtBeansOverloadedNumberUtil_ShortOrByte () {
 @public
  JavaLangShort *n_;
  jbyte w_;
}

@end

J2OBJC_FIELD_SETTER(FreemarkerExtBeansOverloadedNumberUtil_ShortOrByte, n_, JavaLangShort *)

@interface FreemarkerExtBeansOverloadedNumberUtil_DoubleOrWholeNumber () {
 @public
  JavaLangDouble *n_;
}

@end

J2OBJC_FIELD_SETTER(FreemarkerExtBeansOverloadedNumberUtil_DoubleOrWholeNumber, n_, JavaLangDouble *)

@interface FreemarkerExtBeansOverloadedNumberUtil_DoubleOrByte () {
 @public
  jbyte w_;
}

@end

@interface FreemarkerExtBeansOverloadedNumberUtil_DoubleOrShort () {
 @public
  jshort w_;
}

@end

@interface FreemarkerExtBeansOverloadedNumberUtil_DoubleOrIntegerOrFloat () {
 @public
  jint w_;
}

@end

@interface FreemarkerExtBeansOverloadedNumberUtil_DoubleOrInteger () {
 @public
  jint w_;
}

@end

@interface FreemarkerExtBeansOverloadedNumberUtil_DoubleOrLong () {
 @public
  jlong w_;
}

@end

@interface FreemarkerExtBeansOverloadedNumberUtil_DoubleOrFloat () {
 @public
  JavaLangDouble *n_;
}

@end

J2OBJC_FIELD_SETTER(FreemarkerExtBeansOverloadedNumberUtil_DoubleOrFloat, n_, JavaLangDouble *)

@interface FreemarkerExtBeansOverloadedNumberUtil_FloatOrWholeNumber () {
 @public
  JavaLangFloat *n_;
}

@end

J2OBJC_FIELD_SETTER(FreemarkerExtBeansOverloadedNumberUtil_FloatOrWholeNumber, n_, JavaLangFloat *)

@interface FreemarkerExtBeansOverloadedNumberUtil_FloatOrByte () {
 @public
  jbyte w_;
}

@end

@interface FreemarkerExtBeansOverloadedNumberUtil_FloatOrShort () {
 @public
  jshort w_;
}

@end

@interface FreemarkerExtBeansOverloadedNumberUtil_FloatOrInteger () {
 @public
  jint w_;
}

@end


#line 29
@implementation FreemarkerExtBeansOverloadedNumberUtil


#line 32
- (instancetype)init {
  FreemarkerExtBeansOverloadedNumberUtil_init(self);
  return self;
}


#line 92
+ (NSNumber *)addFallbackTypeWithNSNumber:(NSNumber *)num
                                  withInt:(jint)typeFlags {
  return FreemarkerExtBeansOverloadedNumberUtil_addFallbackTypeWithNSNumber_withInt_(num, typeFlags);
}


#line 884
+ (jint)getArgumentConversionPriceWithIOSClass:(IOSClass *)fromC
                                  withIOSClass:(IOSClass *)toC {
  return FreemarkerExtBeansOverloadedNumberUtil_getArgumentConversionPriceWithIOSClass_withIOSClass_(fromC, toC);
}


#line 1143
+ (jint)compareNumberTypeSpecificityWithIOSClass:(IOSClass *)c1
                                    withIOSClass:(IOSClass *)c2 {
  return FreemarkerExtBeansOverloadedNumberUtil_compareNumberTypeSpecificityWithIOSClass_withIOSClass_(c1, c2);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "OverloadedNumberUtil", NULL, 0x2, NULL, NULL },
    { "addFallbackTypeWithNSNumber:withInt:", "addFallbackType", "Ljava.lang.Number;", 0x8, NULL, NULL },
    { "getArgumentConversionPriceWithIOSClass:withIOSClass:", "getArgumentConversionPrice", "I", 0x8, NULL, NULL },
    { "compareNumberTypeSpecificityWithIOSClass:withIOSClass:", "compareNumberTypeSpecificity", "I", 0x8, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "BIG_MANTISSA_LOSS_PRICE_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = FreemarkerExtBeansOverloadedNumberUtil_BIG_MANTISSA_LOSS_PRICE },
    { "MAX_DOUBLE_OR_LONG_", NULL, 0x1a, "J", NULL, NULL, .constantValue.asLong = FreemarkerExtBeansOverloadedNumberUtil_MAX_DOUBLE_OR_LONG },
    { "MIN_DOUBLE_OR_LONG_", NULL, 0x1a, "J", NULL, NULL, .constantValue.asLong = FreemarkerExtBeansOverloadedNumberUtil_MIN_DOUBLE_OR_LONG },
    { "MAX_DOUBLE_OR_LONG_LOG_2_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = FreemarkerExtBeansOverloadedNumberUtil_MAX_DOUBLE_OR_LONG_LOG_2 },
    { "MAX_FLOAT_OR_INT_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = FreemarkerExtBeansOverloadedNumberUtil_MAX_FLOAT_OR_INT },
    { "MIN_FLOAT_OR_INT_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = FreemarkerExtBeansOverloadedNumberUtil_MIN_FLOAT_OR_INT },
    { "MAX_FLOAT_OR_INT_LOG_2_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = FreemarkerExtBeansOverloadedNumberUtil_MAX_FLOAT_OR_INT_LOG_2 },
    { "LOWEST_ABOVE_ZERO_", NULL, 0x1a, "D", NULL, NULL, .constantValue.asDouble = FreemarkerExtBeansOverloadedNumberUtil_LOWEST_ABOVE_ZERO },
    { "HIGHEST_BELOW_ONE_", NULL, 0x1a, "D", NULL, NULL, .constantValue.asDouble = FreemarkerExtBeansOverloadedNumberUtil_HIGHEST_BELOW_ONE },
  };
  static const char *inner_classes[] = {"Lfreemarker.ext.beans.OverloadedNumberUtil$ByteSource;", "Lfreemarker.ext.beans.OverloadedNumberUtil$ShortSource;", "Lfreemarker.ext.beans.OverloadedNumberUtil$IntegerSource;", "Lfreemarker.ext.beans.OverloadedNumberUtil$LongSource;", "Lfreemarker.ext.beans.OverloadedNumberUtil$FloatSource;", "Lfreemarker.ext.beans.OverloadedNumberUtil$DoubleSource;", "Lfreemarker.ext.beans.OverloadedNumberUtil$BigIntegerSource;", "Lfreemarker.ext.beans.OverloadedNumberUtil$BigDecimalSource;", "Lfreemarker.ext.beans.OverloadedNumberUtil$NumberWithFallbackType;", "Lfreemarker.ext.beans.OverloadedNumberUtil$IntegerBigDecimal;", "Lfreemarker.ext.beans.OverloadedNumberUtil$LongOrSmallerInteger;", "Lfreemarker.ext.beans.OverloadedNumberUtil$LongOrByte;", "Lfreemarker.ext.beans.OverloadedNumberUtil$LongOrShort;", "Lfreemarker.ext.beans.OverloadedNumberUtil$LongOrInteger;", "Lfreemarker.ext.beans.OverloadedNumberUtil$IntegerOrSmallerInteger;", "Lfreemarker.ext.beans.OverloadedNumberUtil$IntegerOrByte;", "Lfreemarker.ext.beans.OverloadedNumberUtil$IntegerOrShort;", "Lfreemarker.ext.beans.OverloadedNumberUtil$ShortOrByte;", "Lfreemarker.ext.beans.OverloadedNumberUtil$DoubleOrWholeNumber;", "Lfreemarker.ext.beans.OverloadedNumberUtil$DoubleOrByte;", "Lfreemarker.ext.beans.OverloadedNumberUtil$DoubleOrShort;", "Lfreemarker.ext.beans.OverloadedNumberUtil$DoubleOrIntegerOrFloat;", "Lfreemarker.ext.beans.OverloadedNumberUtil$DoubleOrInteger;", "Lfreemarker.ext.beans.OverloadedNumberUtil$DoubleOrLong;", "Lfreemarker.ext.beans.OverloadedNumberUtil$DoubleOrFloat;", "Lfreemarker.ext.beans.OverloadedNumberUtil$FloatOrWholeNumber;", "Lfreemarker.ext.beans.OverloadedNumberUtil$FloatOrByte;", "Lfreemarker.ext.beans.OverloadedNumberUtil$FloatOrShort;", "Lfreemarker.ext.beans.OverloadedNumberUtil$FloatOrInteger;", "Lfreemarker.ext.beans.OverloadedNumberUtil$BigIntegerOrPrimitive;", "Lfreemarker.ext.beans.OverloadedNumberUtil$BigIntegerOrByte;", "Lfreemarker.ext.beans.OverloadedNumberUtil$BigIntegerOrShort;", "Lfreemarker.ext.beans.OverloadedNumberUtil$BigIntegerOrInteger;", "Lfreemarker.ext.beans.OverloadedNumberUtil$BigIntegerOrLong;", "Lfreemarker.ext.beans.OverloadedNumberUtil$BigIntegerOrFPPrimitive;", "Lfreemarker.ext.beans.OverloadedNumberUtil$BigIntegerOrFloat;", "Lfreemarker.ext.beans.OverloadedNumberUtil$BigIntegerOrDouble;"};
  static const J2ObjcClassInfo _FreemarkerExtBeansOverloadedNumberUtil = { 2, "OverloadedNumberUtil", "freemarker.ext.beans", NULL, 0x0, 4, methods, 9, fields, 0, NULL, 37, inner_classes, NULL, NULL };
  return &_FreemarkerExtBeansOverloadedNumberUtil;
}

@end


#line 32
void FreemarkerExtBeansOverloadedNumberUtil_init(FreemarkerExtBeansOverloadedNumberUtil *self) {
  (void) NSObject_init(self);
}


#line 32
FreemarkerExtBeansOverloadedNumberUtil *new_FreemarkerExtBeansOverloadedNumberUtil_init() {
  FreemarkerExtBeansOverloadedNumberUtil *self = [FreemarkerExtBeansOverloadedNumberUtil alloc];
  FreemarkerExtBeansOverloadedNumberUtil_init(self);
  return self;
}


#line 92
NSNumber *FreemarkerExtBeansOverloadedNumberUtil_addFallbackTypeWithNSNumber_withInt_(NSNumber *num, jint typeFlags) {
  FreemarkerExtBeansOverloadedNumberUtil_initialize();
  IOSClass *numClass = [((NSNumber *) nil_chk(num)) getClass];
  if (numClass == JavaMathBigDecimal_class_()) {
    
#line 99
    JavaMathBigDecimal *n = (JavaMathBigDecimal *) check_class_cast(num, [JavaMathBigDecimal class]);
    if ((typeFlags & FreemarkerExtBeansTypeFlags_MASK_KNOWN_INTEGERS) != 0 &&
#line 101
    (typeFlags & FreemarkerExtBeansTypeFlags_MASK_KNOWN_NONINTEGERS) != 0 && FreemarkerTemplateUtilityNumberUtil_isIntegerBigDecimalWithJavaMathBigDecimal_(
#line 102
    n)) {
      return new_FreemarkerExtBeansOverloadedNumberUtil_IntegerBigDecimal_initWithJavaMathBigDecimal_(n);
    }
    else {
      
#line 107
      return n;
    }
  }
  else
#line 109
  if (numClass == JavaLangInteger_class_()) {
    jint pn = [num intValue];
    
#line 117
    if ((typeFlags & FreemarkerExtBeansTypeFlags_BYTE) != 0 && pn <= JavaLangByte_MAX_VALUE && pn >= JavaLangByte_MIN_VALUE) {
      return new_FreemarkerExtBeansOverloadedNumberUtil_IntegerOrByte_initWithJavaLangInteger_withByte_((JavaLangInteger *) check_class_cast(num, [JavaLangInteger class]), (jbyte) pn);
    }
    else
#line 119
    if ((typeFlags & FreemarkerExtBeansTypeFlags_SHORT) != 0 && pn <= JavaLangShort_MAX_VALUE && pn >= JavaLangShort_MIN_VALUE) {
      return new_FreemarkerExtBeansOverloadedNumberUtil_IntegerOrShort_initWithJavaLangInteger_withShort_((JavaLangInteger *) check_class_cast(num, [JavaLangInteger class]), (jshort) pn);
    }
    else {
      
#line 122
      return num;
    }
  }
  else
#line 124
  if (numClass == JavaLangLong_class_()) {
    jlong pn = [num longLongValue];
    if ((typeFlags & FreemarkerExtBeansTypeFlags_BYTE) != 0 && pn <= JavaLangByte_MAX_VALUE && pn >= JavaLangByte_MIN_VALUE) {
      return new_FreemarkerExtBeansOverloadedNumberUtil_LongOrByte_initWithJavaLangLong_withByte_((JavaLangLong *) check_class_cast(num, [JavaLangLong class]), (jbyte) pn);
    }
    else
#line 128
    if ((typeFlags & FreemarkerExtBeansTypeFlags_SHORT) != 0 && pn <= JavaLangShort_MAX_VALUE && pn >= JavaLangShort_MIN_VALUE) {
      return new_FreemarkerExtBeansOverloadedNumberUtil_LongOrShort_initWithJavaLangLong_withShort_((JavaLangLong *) check_class_cast(num, [JavaLangLong class]), (jshort) pn);
    }
    else
#line 130
    if ((typeFlags & FreemarkerExtBeansTypeFlags_INTEGER) != 0 && pn <= JavaLangInteger_MAX_VALUE && pn >= JavaLangInteger_MIN_VALUE) {
      return new_FreemarkerExtBeansOverloadedNumberUtil_LongOrInteger_initWithJavaLangLong_withInt_((JavaLangLong *) check_class_cast(num, [JavaLangLong class]), (jint) pn);
    }
    else {
      
#line 133
      return num;
    }
  }
  else
#line 135
  if (numClass == JavaLangDouble_class_()) {
    jdouble doubleN = [num doubleValue];
    break_checkIfWholeNumber: ;
    
#line 203
    if ((typeFlags & FreemarkerExtBeansTypeFlags_FLOAT) != 0 && doubleN >= -JavaLangFloat_MAX_VALUE && doubleN <= JavaLangFloat_MAX_VALUE) {
      return new_FreemarkerExtBeansOverloadedNumberUtil_DoubleOrFloat_initWithJavaLangDouble_((JavaLangDouble *) check_class_cast(num, [JavaLangDouble class]));
    }
    else {
      return num;
    }
  }
  else
#line 209
  if (numClass == JavaLangFloat_class_()) {
    jfloat floatN = [num floatValue];
    break_checkIfWholeNumber_2: ;
    
#line 267
    return num;
  }
  else
#line 268
  if (numClass == JavaLangByte_class_()) {
    return num;
  }
  else
#line 270
  if (numClass == JavaLangShort_class_()) {
    jshort pn = [num shortValue];
    if ((typeFlags & FreemarkerExtBeansTypeFlags_BYTE) != 0 && pn <= JavaLangByte_MAX_VALUE && pn >= JavaLangByte_MIN_VALUE) {
      return new_FreemarkerExtBeansOverloadedNumberUtil_ShortOrByte_initWithJavaLangShort_withByte_((JavaLangShort *) check_class_cast(num, [JavaLangShort class]), (jbyte) pn);
    }
    else {
      
#line 275
      return num;
    }
  }
  else
#line 277
  if (numClass == JavaMathBigInteger_class_()) {
    if ((typeFlags &
#line 279
    ((FreemarkerExtBeansTypeFlags_MASK_KNOWN_INTEGERS | FreemarkerExtBeansTypeFlags_MASK_KNOWN_NONINTEGERS) ^
#line 280
    (FreemarkerExtBeansTypeFlags_BIG_INTEGER | FreemarkerExtBeansTypeFlags_BIG_DECIMAL))) != 0) {
      JavaMathBigInteger *biNum = (JavaMathBigInteger *) check_class_cast(num, [JavaMathBigInteger class]);
      jint bitLength = [biNum bitLength];
      if ((typeFlags & FreemarkerExtBeansTypeFlags_BYTE) != 0 && bitLength <= 7) {
        return new_FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrByte_initWithJavaMathBigInteger_(biNum);
      }
      else
#line 285
      if ((typeFlags & FreemarkerExtBeansTypeFlags_SHORT) != 0 && bitLength <= 15) {
        return new_FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrShort_initWithJavaMathBigInteger_(biNum);
      }
      else
#line 287
      if ((typeFlags & FreemarkerExtBeansTypeFlags_INTEGER) != 0 && bitLength <= 31) {
        return new_FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrInteger_initWithJavaMathBigInteger_(biNum);
      }
      else
#line 289
      if ((typeFlags & FreemarkerExtBeansTypeFlags_LONG) != 0 && bitLength <= 63) {
        return new_FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrLong_initWithJavaMathBigInteger_(biNum);
      }
      else
#line 291
      if ((typeFlags & FreemarkerExtBeansTypeFlags_FLOAT) != 0 &&
#line 292
      (bitLength <= FreemarkerExtBeansOverloadedNumberUtil_MAX_FLOAT_OR_INT_LOG_2 || (
#line 293
      bitLength == FreemarkerExtBeansOverloadedNumberUtil_MAX_FLOAT_OR_INT_LOG_2 + 1 &&
#line 294
      [biNum getLowestSetBit] >= FreemarkerExtBeansOverloadedNumberUtil_MAX_FLOAT_OR_INT_LOG_2))) {
        return new_FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrFloat_initWithJavaMathBigInteger_(biNum);
      }
      else
#line 296
      if ((typeFlags & FreemarkerExtBeansTypeFlags_DOUBLE) != 0 &&
#line 297
      (bitLength <= FreemarkerExtBeansOverloadedNumberUtil_MAX_DOUBLE_OR_LONG_LOG_2 || (
#line 298
      bitLength == FreemarkerExtBeansOverloadedNumberUtil_MAX_DOUBLE_OR_LONG_LOG_2 + 1 &&
#line 299
      [biNum getLowestSetBit] >= FreemarkerExtBeansOverloadedNumberUtil_MAX_DOUBLE_OR_LONG_LOG_2))) {
        return new_FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrDouble_initWithJavaMathBigInteger_(biNum);
      }
      else {
        
#line 302
        return num;
      }
    }
    else {
      return num;
    }
  }
  else {
    return num;
  }
}


#line 884
jint FreemarkerExtBeansOverloadedNumberUtil_getArgumentConversionPriceWithIOSClass_withIOSClass_(IOSClass *fromC, IOSClass *toC) {
  FreemarkerExtBeansOverloadedNumberUtil_initialize();
  
#line 887
  if (toC == fromC) {
    return 0;
  }
  else
#line 889
  if (toC == JavaLangInteger_class_()) {
    if (fromC == FreemarkerExtBeansOverloadedNumberUtil_IntegerBigDecimal_class_()) return 31003;
    else if (fromC == JavaMathBigDecimal_class_()) return 41003;
    else if (fromC == JavaLangLong_class_()) return JavaLangInteger_MAX_VALUE;
    else if (fromC == JavaLangDouble_class_()) return JavaLangInteger_MAX_VALUE;
    else if (fromC == JavaLangFloat_class_()) return JavaLangInteger_MAX_VALUE;
    else if (fromC == JavaLangByte_class_()) return 10003;
    else if (fromC == JavaMathBigInteger_class_()) return JavaLangInteger_MAX_VALUE;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_LongOrInteger_class_()) return 21003;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_DoubleOrFloat_class_()) return JavaLangInteger_MAX_VALUE;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_DoubleOrIntegerOrFloat_class_()) return 22003;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_DoubleOrInteger_class_()) return 22003;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_DoubleOrLong_class_()) return JavaLangInteger_MAX_VALUE;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_IntegerOrByte_class_()) return 0;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_DoubleOrByte_class_()) return 22003;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_LongOrByte_class_()) return 21003;
    else if (fromC == JavaLangShort_class_()) return 10003;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_LongOrShort_class_()) return 21003;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_ShortOrByte_class_()) return 10003;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_FloatOrInteger_class_()) return 21003;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_FloatOrByte_class_()) return 21003;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_FloatOrShort_class_()) return 21003;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrInteger_class_()) return 16003;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrLong_class_()) return JavaLangInteger_MAX_VALUE;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrDouble_class_()) return JavaLangInteger_MAX_VALUE;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrFloat_class_()) return JavaLangInteger_MAX_VALUE;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrByte_class_()) return 16003;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_IntegerOrShort_class_()) return 0;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_DoubleOrShort_class_()) return 22003;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrShort_class_()) return 16003;
    else return JavaLangInteger_MAX_VALUE;
  }
  else
#line 920
  if (toC == JavaLangLong_class_()) {
    if (fromC == JavaLangInteger_class_()) return 10004;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_IntegerBigDecimal_class_()) return 31004;
    else if (fromC == JavaMathBigDecimal_class_()) return 41004;
    else if (fromC == JavaLangDouble_class_()) return JavaLangInteger_MAX_VALUE;
    else if (fromC == JavaLangFloat_class_()) return JavaLangInteger_MAX_VALUE;
    else if (fromC == JavaLangByte_class_()) return 10004;
    else if (fromC == JavaMathBigInteger_class_()) return JavaLangInteger_MAX_VALUE;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_LongOrInteger_class_()) return 0;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_DoubleOrFloat_class_()) return JavaLangInteger_MAX_VALUE;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_DoubleOrIntegerOrFloat_class_()) return 21004;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_DoubleOrInteger_class_()) return 21004;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_DoubleOrLong_class_()) return 21004;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_IntegerOrByte_class_()) return 10004;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_DoubleOrByte_class_()) return 21004;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_LongOrByte_class_()) return 0;
    else if (fromC == JavaLangShort_class_()) return 10004;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_LongOrShort_class_()) return 0;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_ShortOrByte_class_()) return 10004;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_FloatOrInteger_class_()) return 21004;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_FloatOrByte_class_()) return 21004;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_FloatOrShort_class_()) return 21004;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrInteger_class_()) return 15004;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrLong_class_()) return 15004;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrDouble_class_()) return JavaLangInteger_MAX_VALUE;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrFloat_class_()) return JavaLangInteger_MAX_VALUE;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrByte_class_()) return 15004;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_IntegerOrShort_class_()) return 10004;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_DoubleOrShort_class_()) return 21004;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrShort_class_()) return 15004;
    else return JavaLangInteger_MAX_VALUE;
  }
  else
#line 951
  if (toC == JavaLangDouble_class_()) {
    if (fromC == JavaLangInteger_class_()) return 20007;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_IntegerBigDecimal_class_()) return 32007;
    else if (fromC == JavaMathBigDecimal_class_()) return 32007;
    else if (fromC == JavaLangLong_class_()) return 30007;
    else if (fromC == JavaLangFloat_class_()) return 10007;
    else if (fromC == JavaLangByte_class_()) return 20007;
    else if (fromC == JavaMathBigInteger_class_()) return JavaLangInteger_MAX_VALUE;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_LongOrInteger_class_()) return 21007;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_DoubleOrFloat_class_()) return 0;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_DoubleOrIntegerOrFloat_class_()) return 0;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_DoubleOrInteger_class_()) return 0;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_DoubleOrLong_class_()) return 0;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_IntegerOrByte_class_()) return 20007;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_DoubleOrByte_class_()) return 0;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_LongOrByte_class_()) return 21007;
    else if (fromC == JavaLangShort_class_()) return 20007;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_LongOrShort_class_()) return 21007;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_ShortOrByte_class_()) return 20007;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_FloatOrInteger_class_()) return 10007;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_FloatOrByte_class_()) return 10007;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_FloatOrShort_class_()) return 10007;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrInteger_class_()) return 20007;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrLong_class_()) return 30007;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrDouble_class_()) return 20007;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrFloat_class_()) return 20007;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrByte_class_()) return 20007;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_IntegerOrShort_class_()) return 20007;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_DoubleOrShort_class_()) return 0;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrShort_class_()) return 20007;
    else return JavaLangInteger_MAX_VALUE;
  }
  else
#line 982
  if (toC == JavaLangFloat_class_()) {
    if (fromC == JavaLangInteger_class_()) return 30006;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_IntegerBigDecimal_class_()) return 33006;
    else if (fromC == JavaMathBigDecimal_class_()) return 33006;
    else if (fromC == JavaLangLong_class_()) return 40006;
    else if (fromC == JavaLangDouble_class_()) return JavaLangInteger_MAX_VALUE;
    else if (fromC == JavaLangByte_class_()) return 20006;
    else if (fromC == JavaMathBigInteger_class_()) return JavaLangInteger_MAX_VALUE;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_LongOrInteger_class_()) return 30006;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_DoubleOrFloat_class_()) return 30006;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_DoubleOrIntegerOrFloat_class_()) return 23006;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_DoubleOrInteger_class_()) return 30006;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_DoubleOrLong_class_()) return 40006;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_IntegerOrByte_class_()) return 24006;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_DoubleOrByte_class_()) return 23006;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_LongOrByte_class_()) return 24006;
    else if (fromC == JavaLangShort_class_()) return 20006;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_LongOrShort_class_()) return 24006;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_ShortOrByte_class_()) return 20006;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_FloatOrInteger_class_()) return 0;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_FloatOrByte_class_()) return 0;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_FloatOrShort_class_()) return 0;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrInteger_class_()) return 30006;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrLong_class_()) return 40006;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrDouble_class_()) return 40006;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrFloat_class_()) return 24006;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrByte_class_()) return 24006;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_IntegerOrShort_class_()) return 24006;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_DoubleOrShort_class_()) return 23006;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrShort_class_()) return 24006;
    else return JavaLangInteger_MAX_VALUE;
  }
  else
#line 1013
  if (toC == JavaLangByte_class_()) {
    if (fromC == JavaLangInteger_class_()) return JavaLangInteger_MAX_VALUE;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_IntegerBigDecimal_class_()) return 35001;
    else if (fromC == JavaMathBigDecimal_class_()) return 45001;
    else if (fromC == JavaLangLong_class_()) return JavaLangInteger_MAX_VALUE;
    else if (fromC == JavaLangDouble_class_()) return JavaLangInteger_MAX_VALUE;
    else if (fromC == JavaLangFloat_class_()) return JavaLangInteger_MAX_VALUE;
    else if (fromC == JavaMathBigInteger_class_()) return JavaLangInteger_MAX_VALUE;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_LongOrInteger_class_()) return JavaLangInteger_MAX_VALUE;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_DoubleOrFloat_class_()) return JavaLangInteger_MAX_VALUE;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_DoubleOrIntegerOrFloat_class_()) return JavaLangInteger_MAX_VALUE;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_DoubleOrInteger_class_()) return JavaLangInteger_MAX_VALUE;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_DoubleOrLong_class_()) return JavaLangInteger_MAX_VALUE;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_IntegerOrByte_class_()) return 22001;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_DoubleOrByte_class_()) return 25001;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_LongOrByte_class_()) return 23001;
    else if (fromC == JavaLangShort_class_()) return JavaLangInteger_MAX_VALUE;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_LongOrShort_class_()) return JavaLangInteger_MAX_VALUE;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_ShortOrByte_class_()) return 21001;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_FloatOrInteger_class_()) return JavaLangInteger_MAX_VALUE;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_FloatOrByte_class_()) return 23001;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_FloatOrShort_class_()) return JavaLangInteger_MAX_VALUE;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrInteger_class_()) return JavaLangInteger_MAX_VALUE;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrLong_class_()) return JavaLangInteger_MAX_VALUE;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrDouble_class_()) return JavaLangInteger_MAX_VALUE;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrFloat_class_()) return JavaLangInteger_MAX_VALUE;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrByte_class_()) return 18001;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_IntegerOrShort_class_()) return JavaLangInteger_MAX_VALUE;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_DoubleOrShort_class_()) return JavaLangInteger_MAX_VALUE;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrShort_class_()) return JavaLangInteger_MAX_VALUE;
    else return JavaLangInteger_MAX_VALUE;
  }
  else
#line 1044
  if (toC == JavaLangShort_class_()) {
    if (fromC == JavaLangInteger_class_()) return JavaLangInteger_MAX_VALUE;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_IntegerBigDecimal_class_()) return 34002;
    else if (fromC == JavaMathBigDecimal_class_()) return 44002;
    else if (fromC == JavaLangLong_class_()) return JavaLangInteger_MAX_VALUE;
    else if (fromC == JavaLangDouble_class_()) return JavaLangInteger_MAX_VALUE;
    else if (fromC == JavaLangFloat_class_()) return JavaLangInteger_MAX_VALUE;
    else if (fromC == JavaLangByte_class_()) return 10002;
    else if (fromC == JavaMathBigInteger_class_()) return JavaLangInteger_MAX_VALUE;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_LongOrInteger_class_()) return JavaLangInteger_MAX_VALUE;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_DoubleOrFloat_class_()) return JavaLangInteger_MAX_VALUE;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_DoubleOrIntegerOrFloat_class_()) return JavaLangInteger_MAX_VALUE;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_DoubleOrInteger_class_()) return JavaLangInteger_MAX_VALUE;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_DoubleOrLong_class_()) return JavaLangInteger_MAX_VALUE;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_IntegerOrByte_class_()) return 21002;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_DoubleOrByte_class_()) return 24002;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_LongOrByte_class_()) return 22002;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_LongOrShort_class_()) return 22002;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_ShortOrByte_class_()) return 0;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_FloatOrInteger_class_()) return JavaLangInteger_MAX_VALUE;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_FloatOrByte_class_()) return 22002;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_FloatOrShort_class_()) return 22002;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrInteger_class_()) return JavaLangInteger_MAX_VALUE;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrLong_class_()) return JavaLangInteger_MAX_VALUE;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrDouble_class_()) return JavaLangInteger_MAX_VALUE;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrFloat_class_()) return JavaLangInteger_MAX_VALUE;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrByte_class_()) return 17002;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_IntegerOrShort_class_()) return 21002;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_DoubleOrShort_class_()) return 24002;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrShort_class_()) return 17002;
    else return JavaLangInteger_MAX_VALUE;
  }
  else
#line 1075
  if (toC == JavaMathBigDecimal_class_()) {
    if (fromC == JavaLangInteger_class_()) return 20008;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_IntegerBigDecimal_class_()) return 0;
    else if (fromC == JavaLangLong_class_()) return 20008;
    else if (fromC == JavaLangDouble_class_()) return 20008;
    else if (fromC == JavaLangFloat_class_()) return 20008;
    else if (fromC == JavaLangByte_class_()) return 20008;
    else if (fromC == JavaMathBigInteger_class_()) return 10008;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_LongOrInteger_class_()) return 20008;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_DoubleOrFloat_class_()) return 20008;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_DoubleOrIntegerOrFloat_class_()) return 20008;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_DoubleOrInteger_class_()) return 20008;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_DoubleOrLong_class_()) return 20008;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_IntegerOrByte_class_()) return 20008;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_DoubleOrByte_class_()) return 20008;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_LongOrByte_class_()) return 20008;
    else if (fromC == JavaLangShort_class_()) return 20008;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_LongOrShort_class_()) return 20008;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_ShortOrByte_class_()) return 20008;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_FloatOrInteger_class_()) return 20008;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_FloatOrByte_class_()) return 20008;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_FloatOrShort_class_()) return 20008;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrInteger_class_()) return 10008;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrLong_class_()) return 10008;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrDouble_class_()) return 10008;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrFloat_class_()) return 10008;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrByte_class_()) return 10008;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_IntegerOrShort_class_()) return 20008;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_DoubleOrShort_class_()) return 20008;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrShort_class_()) return 10008;
    else return JavaLangInteger_MAX_VALUE;
  }
  else
#line 1106
  if (toC == JavaMathBigInteger_class_()) {
    if (fromC == JavaLangInteger_class_()) return 10005;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_IntegerBigDecimal_class_()) return 10005;
    else if (fromC == JavaMathBigDecimal_class_()) return 40005;
    else if (fromC == JavaLangLong_class_()) return 10005;
    else if (fromC == JavaLangDouble_class_()) return JavaLangInteger_MAX_VALUE;
    else if (fromC == JavaLangFloat_class_()) return JavaLangInteger_MAX_VALUE;
    else if (fromC == JavaLangByte_class_()) return 10005;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_LongOrInteger_class_()) return 10005;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_DoubleOrFloat_class_()) return JavaLangInteger_MAX_VALUE;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_DoubleOrIntegerOrFloat_class_()) return 21005;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_DoubleOrInteger_class_()) return 21005;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_DoubleOrLong_class_()) return 21005;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_IntegerOrByte_class_()) return 10005;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_DoubleOrByte_class_()) return 21005;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_LongOrByte_class_()) return 10005;
    else if (fromC == JavaLangShort_class_()) return 10005;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_LongOrShort_class_()) return 10005;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_ShortOrByte_class_()) return 10005;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_FloatOrInteger_class_()) return 25005;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_FloatOrByte_class_()) return 25005;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_FloatOrShort_class_()) return 25005;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrInteger_class_()) return 0;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrLong_class_()) return 0;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrDouble_class_()) return 0;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrFloat_class_()) return 0;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrByte_class_()) return 0;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_IntegerOrShort_class_()) return 10005;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_DoubleOrShort_class_()) return 21005;
    else if (fromC == FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrShort_class_()) return 0;
    else return JavaLangInteger_MAX_VALUE;
  }
  else {
    return JavaLangInteger_MAX_VALUE;
  }
}


#line 1143
jint FreemarkerExtBeansOverloadedNumberUtil_compareNumberTypeSpecificityWithIOSClass_withIOSClass_(IOSClass *c1, IOSClass *c2) {
  FreemarkerExtBeansOverloadedNumberUtil_initialize();
  
#line 1146
  c1 = FreemarkerTemplateUtilityClassUtil_primitiveClassToBoxingClassWithIOSClass_(c1);
  c2 = FreemarkerTemplateUtilityClassUtil_primitiveClassToBoxingClassWithIOSClass_(c2);
  
#line 1149
  if (c1 == c2) return 0;
  
#line 1151
  if (c1 == JavaLangInteger_class_()) {
    if (c2 == JavaLangLong_class_()) return 4 - 3;
    if (c2 == JavaLangDouble_class_()) return 7 - 3;
    if (c2 == JavaLangFloat_class_()) return 6 - 3;
    if (c2 == JavaLangByte_class_()) return 1 - 3;
    if (c2 == JavaLangShort_class_()) return 2 - 3;
    if (c2 == JavaMathBigDecimal_class_()) return 8 - 3;
    if (c2 == JavaMathBigInteger_class_()) return 5 - 3;
    return 0;
  }
  if (c1 == JavaLangLong_class_()) {
    if (c2 == JavaLangInteger_class_()) return 3 - 4;
    if (c2 == JavaLangDouble_class_()) return 7 - 4;
    if (c2 == JavaLangFloat_class_()) return 6 - 4;
    if (c2 == JavaLangByte_class_()) return 1 - 4;
    if (c2 == JavaLangShort_class_()) return 2 - 4;
    if (c2 == JavaMathBigDecimal_class_()) return 8 - 4;
    if (c2 == JavaMathBigInteger_class_()) return 5 - 4;
    return 0;
  }
  if (c1 == JavaLangDouble_class_()) {
    if (c2 == JavaLangInteger_class_()) return 3 - 7;
    if (c2 == JavaLangLong_class_()) return 4 - 7;
    if (c2 == JavaLangFloat_class_()) return 6 - 7;
    if (c2 == JavaLangByte_class_()) return 1 - 7;
    if (c2 == JavaLangShort_class_()) return 2 - 7;
    if (c2 == JavaMathBigDecimal_class_()) return 8 - 7;
    if (c2 == JavaMathBigInteger_class_()) return 5 - 7;
    return 0;
  }
  if (c1 == JavaLangFloat_class_()) {
    if (c2 == JavaLangInteger_class_()) return 3 - 6;
    if (c2 == JavaLangLong_class_()) return 4 - 6;
    if (c2 == JavaLangDouble_class_()) return 7 - 6;
    if (c2 == JavaLangByte_class_()) return 1 - 6;
    if (c2 == JavaLangShort_class_()) return 2 - 6;
    if (c2 == JavaMathBigDecimal_class_()) return 8 - 6;
    if (c2 == JavaMathBigInteger_class_()) return 5 - 6;
    return 0;
  }
  if (c1 == JavaLangByte_class_()) {
    if (c2 == JavaLangInteger_class_()) return 3 - 1;
    if (c2 == JavaLangLong_class_()) return 4 - 1;
    if (c2 == JavaLangDouble_class_()) return 7 - 1;
    if (c2 == JavaLangFloat_class_()) return 6 - 1;
    if (c2 == JavaLangShort_class_()) return 2 - 1;
    if (c2 == JavaMathBigDecimal_class_()) return 8 - 1;
    if (c2 == JavaMathBigInteger_class_()) return 5 - 1;
    return 0;
  }
  if (c1 == JavaLangShort_class_()) {
    if (c2 == JavaLangInteger_class_()) return 3 - 2;
    if (c2 == JavaLangLong_class_()) return 4 - 2;
    if (c2 == JavaLangDouble_class_()) return 7 - 2;
    if (c2 == JavaLangFloat_class_()) return 6 - 2;
    if (c2 == JavaLangByte_class_()) return 1 - 2;
    if (c2 == JavaMathBigDecimal_class_()) return 8 - 2;
    if (c2 == JavaMathBigInteger_class_()) return 5 - 2;
    return 0;
  }
  if (c1 == JavaMathBigDecimal_class_()) {
    if (c2 == JavaLangInteger_class_()) return 3 - 8;
    if (c2 == JavaLangLong_class_()) return 4 - 8;
    if (c2 == JavaLangDouble_class_()) return 7 - 8;
    if (c2 == JavaLangFloat_class_()) return 6 - 8;
    if (c2 == JavaLangByte_class_()) return 1 - 8;
    if (c2 == JavaLangShort_class_()) return 2 - 8;
    if (c2 == JavaMathBigInteger_class_()) return 5 - 8;
    return 0;
  }
  if (c1 == JavaMathBigInteger_class_()) {
    if (c2 == JavaLangInteger_class_()) return 3 - 5;
    if (c2 == JavaLangLong_class_()) return 4 - 5;
    if (c2 == JavaLangDouble_class_()) return 7 - 5;
    if (c2 == JavaLangFloat_class_()) return 6 - 5;
    if (c2 == JavaLangByte_class_()) return 1 - 5;
    if (c2 == JavaLangShort_class_()) return 2 - 5;
    if (c2 == JavaMathBigDecimal_class_()) return 8 - 5;
    return 0;
  }
  return 0;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerExtBeansOverloadedNumberUtil)


#line 314
@implementation FreemarkerExtBeansOverloadedNumberUtil_ByteSource

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "byteValue", NULL, "Ljava.lang.Byte;", 0x401, NULL, NULL },
  };
  static const J2ObjcClassInfo _FreemarkerExtBeansOverloadedNumberUtil_ByteSource = { 2, "ByteSource", "freemarker.ext.beans", "OverloadedNumberUtil", 0x608, 1, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerExtBeansOverloadedNumberUtil_ByteSource;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(FreemarkerExtBeansOverloadedNumberUtil_ByteSource)


#line 315
@implementation FreemarkerExtBeansOverloadedNumberUtil_ShortSource

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "shortValue", NULL, "Ljava.lang.Short;", 0x401, NULL, NULL },
  };
  static const J2ObjcClassInfo _FreemarkerExtBeansOverloadedNumberUtil_ShortSource = { 2, "ShortSource", "freemarker.ext.beans", "OverloadedNumberUtil", 0x608, 1, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerExtBeansOverloadedNumberUtil_ShortSource;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(FreemarkerExtBeansOverloadedNumberUtil_ShortSource)


#line 316
@implementation FreemarkerExtBeansOverloadedNumberUtil_IntegerSource

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "integerValue", NULL, "Ljava.lang.Integer;", 0x401, NULL, NULL },
  };
  static const J2ObjcClassInfo _FreemarkerExtBeansOverloadedNumberUtil_IntegerSource = { 2, "IntegerSource", "freemarker.ext.beans", "OverloadedNumberUtil", 0x608, 1, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerExtBeansOverloadedNumberUtil_IntegerSource;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(FreemarkerExtBeansOverloadedNumberUtil_IntegerSource)


#line 317
@implementation FreemarkerExtBeansOverloadedNumberUtil_LongSource

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "longValue", NULL, "Ljava.lang.Long;", 0x401, NULL, NULL },
  };
  static const J2ObjcClassInfo _FreemarkerExtBeansOverloadedNumberUtil_LongSource = { 2, "LongSource", "freemarker.ext.beans", "OverloadedNumberUtil", 0x608, 1, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerExtBeansOverloadedNumberUtil_LongSource;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(FreemarkerExtBeansOverloadedNumberUtil_LongSource)


#line 318
@implementation FreemarkerExtBeansOverloadedNumberUtil_FloatSource

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "floatValue", NULL, "Ljava.lang.Float;", 0x401, NULL, NULL },
  };
  static const J2ObjcClassInfo _FreemarkerExtBeansOverloadedNumberUtil_FloatSource = { 2, "FloatSource", "freemarker.ext.beans", "OverloadedNumberUtil", 0x608, 1, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerExtBeansOverloadedNumberUtil_FloatSource;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(FreemarkerExtBeansOverloadedNumberUtil_FloatSource)


#line 319
@implementation FreemarkerExtBeansOverloadedNumberUtil_DoubleSource

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "doubleValue", NULL, "Ljava.lang.Double;", 0x401, NULL, NULL },
  };
  static const J2ObjcClassInfo _FreemarkerExtBeansOverloadedNumberUtil_DoubleSource = { 2, "DoubleSource", "freemarker.ext.beans", "OverloadedNumberUtil", 0x608, 1, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerExtBeansOverloadedNumberUtil_DoubleSource;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(FreemarkerExtBeansOverloadedNumberUtil_DoubleSource)


#line 320
@implementation FreemarkerExtBeansOverloadedNumberUtil_BigIntegerSource

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "bigIntegerValue", NULL, "Ljava.math.BigInteger;", 0x401, NULL, NULL },
  };
  static const J2ObjcClassInfo _FreemarkerExtBeansOverloadedNumberUtil_BigIntegerSource = { 2, "BigIntegerSource", "freemarker.ext.beans", "OverloadedNumberUtil", 0x608, 1, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerExtBeansOverloadedNumberUtil_BigIntegerSource;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(FreemarkerExtBeansOverloadedNumberUtil_BigIntegerSource)


#line 321
@implementation FreemarkerExtBeansOverloadedNumberUtil_BigDecimalSource

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "bigDecimalValue", NULL, "Ljava.math.BigDecimal;", 0x401, NULL, NULL },
  };
  static const J2ObjcClassInfo _FreemarkerExtBeansOverloadedNumberUtil_BigDecimalSource = { 2, "BigDecimalSource", "freemarker.ext.beans", "OverloadedNumberUtil", 0x608, 1, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerExtBeansOverloadedNumberUtil_BigDecimalSource;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(FreemarkerExtBeansOverloadedNumberUtil_BigDecimalSource)


#line 330
@implementation FreemarkerExtBeansOverloadedNumberUtil_NumberWithFallbackType

- (NSNumber *)getSourceNumber {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 334
- (jint)intValue {
  return [((NSNumber *) nil_chk([self getSourceNumber])) intValue];
}

- (jlong)longLongValue {
  return [((NSNumber *) nil_chk([self getSourceNumber])) longLongValue];
}

- (jfloat)floatValue {
  return [((NSNumber *) nil_chk([self getSourceNumber])) floatValue];
}

- (jdouble)doubleValue {
  return [((NSNumber *) nil_chk([self getSourceNumber])) doubleValue];
}

- (jbyte)charValue {
  return [((NSNumber *) nil_chk([self getSourceNumber])) charValue];
}

- (jshort)shortValue {
  return [((NSNumber *) nil_chk([self getSourceNumber])) shortValue];
}

- (NSUInteger)hash {
  return ((jint) [((NSNumber *) nil_chk([self getSourceNumber])) hash]);
}

- (jboolean)isEqual:(id)obj {
  if (obj != nil && [self getClass] == [obj getClass]) {
    return [((NSNumber *) nil_chk([self getSourceNumber])) isEqual:[((FreemarkerExtBeansOverloadedNumberUtil_NumberWithFallbackType *) check_class_cast(obj, [FreemarkerExtBeansOverloadedNumberUtil_NumberWithFallbackType class])) getSourceNumber]];
  }
  else {
    
#line 366
    return NO;
  }
}


#line 370
- (NSString *)description {
  return [((NSNumber *) nil_chk([self getSourceNumber])) description];
}


#line 376
- (jint)compareToWithId:(id)o {
  NSNumber *n = [self getSourceNumber];
  if ([JavaLangComparable_class_() isInstance:n]) {
    return [((id<JavaLangComparable>) nil_chk(((id<JavaLangComparable>) check_protocol_cast(n, @protocol(JavaLangComparable))))) compareToWithId:o];
  }
  else {
    
#line 381
    @throw new_JavaLangClassCastException_initWithNSString_(JreStrcat("$$", [[((NSNumber *) nil_chk(n)) getClass] getName], @" is not Comparable."));
  }
}

- (instancetype)init {
  FreemarkerExtBeansOverloadedNumberUtil_NumberWithFallbackType_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getSourceNumber", NULL, "Ljava.lang.Number;", 0x404, NULL, NULL },
    { "intValue", NULL, "I", 0x1, NULL, NULL },
    { "longLongValue", "longValue", "J", 0x1, NULL, NULL },
    { "floatValue", NULL, "F", 0x1, NULL, NULL },
    { "doubleValue", NULL, "D", 0x1, NULL, NULL },
    { "charValue", "byteValue", "B", 0x1, NULL, NULL },
    { "shortValue", NULL, "S", 0x1, NULL, NULL },
    { "hash", "hashCode", "I", 0x1, NULL, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "compareToWithId:", "compareTo", "I", 0x1, NULL, NULL },
    { "init", NULL, NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcClassInfo _FreemarkerExtBeansOverloadedNumberUtil_NumberWithFallbackType = { 2, "NumberWithFallbackType", "freemarker.ext.beans", "OverloadedNumberUtil", 0x408, 12, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerExtBeansOverloadedNumberUtil_NumberWithFallbackType;
}

@end

void FreemarkerExtBeansOverloadedNumberUtil_NumberWithFallbackType_init(FreemarkerExtBeansOverloadedNumberUtil_NumberWithFallbackType *self) {
  (void) NSNumber_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerExtBeansOverloadedNumberUtil_NumberWithFallbackType)


#line 394
@implementation FreemarkerExtBeansOverloadedNumberUtil_IntegerBigDecimal


#line 398
- (instancetype)initWithJavaMathBigDecimal:(JavaMathBigDecimal *)n {
  FreemarkerExtBeansOverloadedNumberUtil_IntegerBigDecimal_initWithJavaMathBigDecimal_(self, n);
  return self;
}


#line 402
- (NSNumber *)getSourceNumber {
  return n_;
}

- (JavaMathBigInteger *)bigIntegerValue {
  return [((JavaMathBigDecimal *) nil_chk(n_)) toBigInteger];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaMathBigDecimal:", "IntegerBigDecimal", NULL, 0x0, NULL, NULL },
    { "getSourceNumber", NULL, "Ljava.lang.Number;", 0x4, NULL, NULL },
    { "bigIntegerValue", NULL, "Ljava.math.BigInteger;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "n_", NULL, 0x12, "Ljava.math.BigDecimal;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerExtBeansOverloadedNumberUtil_IntegerBigDecimal = { 2, "IntegerBigDecimal", "freemarker.ext.beans", "OverloadedNumberUtil", 0x18, 3, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerExtBeansOverloadedNumberUtil_IntegerBigDecimal;
}

@end


#line 398
void FreemarkerExtBeansOverloadedNumberUtil_IntegerBigDecimal_initWithJavaMathBigDecimal_(FreemarkerExtBeansOverloadedNumberUtil_IntegerBigDecimal *self, JavaMathBigDecimal *n) {
  (void) FreemarkerExtBeansOverloadedNumberUtil_NumberWithFallbackType_init(self);
  
#line 399
  self->n_ = n;
}


#line 398
FreemarkerExtBeansOverloadedNumberUtil_IntegerBigDecimal *new_FreemarkerExtBeansOverloadedNumberUtil_IntegerBigDecimal_initWithJavaMathBigDecimal_(JavaMathBigDecimal *n) {
  FreemarkerExtBeansOverloadedNumberUtil_IntegerBigDecimal *self = [FreemarkerExtBeansOverloadedNumberUtil_IntegerBigDecimal alloc];
  FreemarkerExtBeansOverloadedNumberUtil_IntegerBigDecimal_initWithJavaMathBigDecimal_(self, n);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerExtBeansOverloadedNumberUtil_IntegerBigDecimal)


#line 412
@implementation FreemarkerExtBeansOverloadedNumberUtil_LongOrSmallerInteger


#line 416
- (instancetype)initWithJavaLangLong:(JavaLangLong *)n {
  FreemarkerExtBeansOverloadedNumberUtil_LongOrSmallerInteger_initWithJavaLangLong_(self, n);
  return self;
}


#line 420
- (NSNumber *)getSourceNumber {
  return n_;
}

- (jlong)longLongValue {
  return [((JavaLangLong *) nil_chk(n_)) longLongValue];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaLangLong:", "LongOrSmallerInteger", NULL, 0x4, NULL, NULL },
    { "getSourceNumber", NULL, "Ljava.lang.Number;", 0x4, NULL, NULL },
    { "longLongValue", "longValue", "J", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "n_", NULL, 0x12, "Ljava.lang.Long;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerExtBeansOverloadedNumberUtil_LongOrSmallerInteger = { 2, "LongOrSmallerInteger", "freemarker.ext.beans", "OverloadedNumberUtil", 0x408, 3, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerExtBeansOverloadedNumberUtil_LongOrSmallerInteger;
}

@end


#line 416
void FreemarkerExtBeansOverloadedNumberUtil_LongOrSmallerInteger_initWithJavaLangLong_(FreemarkerExtBeansOverloadedNumberUtil_LongOrSmallerInteger *self, JavaLangLong *n) {
  (void) FreemarkerExtBeansOverloadedNumberUtil_NumberWithFallbackType_init(self);
  
#line 417
  self->n_ = n;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerExtBeansOverloadedNumberUtil_LongOrSmallerInteger)


#line 430
@implementation FreemarkerExtBeansOverloadedNumberUtil_LongOrByte


#line 434
- (instancetype)initWithJavaLangLong:(JavaLangLong *)n
                            withByte:(jbyte)w {
  FreemarkerExtBeansOverloadedNumberUtil_LongOrByte_initWithJavaLangLong_withByte_(self, n, w);
  return self;
}


#line 439
- (jbyte)charValue {
  return w_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaLangLong:withByte:", "LongOrByte", NULL, 0x0, NULL, NULL },
    { "charValue", "byteValue", "B", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "w_", NULL, 0x12, "B", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerExtBeansOverloadedNumberUtil_LongOrByte = { 2, "LongOrByte", "freemarker.ext.beans", "OverloadedNumberUtil", 0x8, 2, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerExtBeansOverloadedNumberUtil_LongOrByte;
}

@end


#line 434
void FreemarkerExtBeansOverloadedNumberUtil_LongOrByte_initWithJavaLangLong_withByte_(FreemarkerExtBeansOverloadedNumberUtil_LongOrByte *self, JavaLangLong *n, jbyte w) {
  (void) FreemarkerExtBeansOverloadedNumberUtil_LongOrSmallerInteger_initWithJavaLangLong_(self, n);
  self->w_ = w;
}


#line 434
FreemarkerExtBeansOverloadedNumberUtil_LongOrByte *new_FreemarkerExtBeansOverloadedNumberUtil_LongOrByte_initWithJavaLangLong_withByte_(JavaLangLong *n, jbyte w) {
  FreemarkerExtBeansOverloadedNumberUtil_LongOrByte *self = [FreemarkerExtBeansOverloadedNumberUtil_LongOrByte alloc];
  FreemarkerExtBeansOverloadedNumberUtil_LongOrByte_initWithJavaLangLong_withByte_(self, n, w);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerExtBeansOverloadedNumberUtil_LongOrByte)


#line 445
@implementation FreemarkerExtBeansOverloadedNumberUtil_LongOrShort


#line 449
- (instancetype)initWithJavaLangLong:(JavaLangLong *)n
                           withShort:(jshort)w {
  FreemarkerExtBeansOverloadedNumberUtil_LongOrShort_initWithJavaLangLong_withShort_(self, n, w);
  return self;
}


#line 454
- (jshort)shortValue {
  return w_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaLangLong:withShort:", "LongOrShort", NULL, 0x0, NULL, NULL },
    { "shortValue", NULL, "S", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "w_", NULL, 0x12, "S", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerExtBeansOverloadedNumberUtil_LongOrShort = { 2, "LongOrShort", "freemarker.ext.beans", "OverloadedNumberUtil", 0x8, 2, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerExtBeansOverloadedNumberUtil_LongOrShort;
}

@end


#line 449
void FreemarkerExtBeansOverloadedNumberUtil_LongOrShort_initWithJavaLangLong_withShort_(FreemarkerExtBeansOverloadedNumberUtil_LongOrShort *self, JavaLangLong *n, jshort w) {
  (void) FreemarkerExtBeansOverloadedNumberUtil_LongOrSmallerInteger_initWithJavaLangLong_(self, n);
  self->w_ = w;
}


#line 449
FreemarkerExtBeansOverloadedNumberUtil_LongOrShort *new_FreemarkerExtBeansOverloadedNumberUtil_LongOrShort_initWithJavaLangLong_withShort_(JavaLangLong *n, jshort w) {
  FreemarkerExtBeansOverloadedNumberUtil_LongOrShort *self = [FreemarkerExtBeansOverloadedNumberUtil_LongOrShort alloc];
  FreemarkerExtBeansOverloadedNumberUtil_LongOrShort_initWithJavaLangLong_withShort_(self, n, w);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerExtBeansOverloadedNumberUtil_LongOrShort)


#line 460
@implementation FreemarkerExtBeansOverloadedNumberUtil_LongOrInteger


#line 464
- (instancetype)initWithJavaLangLong:(JavaLangLong *)n
                             withInt:(jint)w {
  FreemarkerExtBeansOverloadedNumberUtil_LongOrInteger_initWithJavaLangLong_withInt_(self, n, w);
  return self;
}


#line 469
- (jint)intValue {
  return w_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaLangLong:withInt:", "LongOrInteger", NULL, 0x0, NULL, NULL },
    { "intValue", NULL, "I", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "w_", NULL, 0x12, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerExtBeansOverloadedNumberUtil_LongOrInteger = { 2, "LongOrInteger", "freemarker.ext.beans", "OverloadedNumberUtil", 0x8, 2, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerExtBeansOverloadedNumberUtil_LongOrInteger;
}

@end


#line 464
void FreemarkerExtBeansOverloadedNumberUtil_LongOrInteger_initWithJavaLangLong_withInt_(FreemarkerExtBeansOverloadedNumberUtil_LongOrInteger *self, JavaLangLong *n, jint w) {
  (void) FreemarkerExtBeansOverloadedNumberUtil_LongOrSmallerInteger_initWithJavaLangLong_(self, n);
  self->w_ = w;
}


#line 464
FreemarkerExtBeansOverloadedNumberUtil_LongOrInteger *new_FreemarkerExtBeansOverloadedNumberUtil_LongOrInteger_initWithJavaLangLong_withInt_(JavaLangLong *n, jint w) {
  FreemarkerExtBeansOverloadedNumberUtil_LongOrInteger *self = [FreemarkerExtBeansOverloadedNumberUtil_LongOrInteger alloc];
  FreemarkerExtBeansOverloadedNumberUtil_LongOrInteger_initWithJavaLangLong_withInt_(self, n, w);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerExtBeansOverloadedNumberUtil_LongOrInteger)


#line 475
@implementation FreemarkerExtBeansOverloadedNumberUtil_IntegerOrSmallerInteger


#line 479
- (instancetype)initWithJavaLangInteger:(JavaLangInteger *)n {
  FreemarkerExtBeansOverloadedNumberUtil_IntegerOrSmallerInteger_initWithJavaLangInteger_(self, n);
  return self;
}


#line 483
- (NSNumber *)getSourceNumber {
  return n_;
}

- (jint)intValue {
  return [((JavaLangInteger *) nil_chk(n_)) intValue];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaLangInteger:", "IntegerOrSmallerInteger", NULL, 0x4, NULL, NULL },
    { "getSourceNumber", NULL, "Ljava.lang.Number;", 0x4, NULL, NULL },
    { "intValue", NULL, "I", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "n_", NULL, 0x12, "Ljava.lang.Integer;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerExtBeansOverloadedNumberUtil_IntegerOrSmallerInteger = { 2, "IntegerOrSmallerInteger", "freemarker.ext.beans", "OverloadedNumberUtil", 0x408, 3, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerExtBeansOverloadedNumberUtil_IntegerOrSmallerInteger;
}

@end


#line 479
void FreemarkerExtBeansOverloadedNumberUtil_IntegerOrSmallerInteger_initWithJavaLangInteger_(FreemarkerExtBeansOverloadedNumberUtil_IntegerOrSmallerInteger *self, JavaLangInteger *n) {
  (void) FreemarkerExtBeansOverloadedNumberUtil_NumberWithFallbackType_init(self);
  
#line 480
  self->n_ = n;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerExtBeansOverloadedNumberUtil_IntegerOrSmallerInteger)


#line 493
@implementation FreemarkerExtBeansOverloadedNumberUtil_IntegerOrByte


#line 497
- (instancetype)initWithJavaLangInteger:(JavaLangInteger *)n
                               withByte:(jbyte)w {
  FreemarkerExtBeansOverloadedNumberUtil_IntegerOrByte_initWithJavaLangInteger_withByte_(self, n, w);
  return self;
}


#line 502
- (jbyte)charValue {
  return w_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaLangInteger:withByte:", "IntegerOrByte", NULL, 0x0, NULL, NULL },
    { "charValue", "byteValue", "B", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "w_", NULL, 0x12, "B", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerExtBeansOverloadedNumberUtil_IntegerOrByte = { 2, "IntegerOrByte", "freemarker.ext.beans", "OverloadedNumberUtil", 0x8, 2, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerExtBeansOverloadedNumberUtil_IntegerOrByte;
}

@end


#line 497
void FreemarkerExtBeansOverloadedNumberUtil_IntegerOrByte_initWithJavaLangInteger_withByte_(FreemarkerExtBeansOverloadedNumberUtil_IntegerOrByte *self, JavaLangInteger *n, jbyte w) {
  (void) FreemarkerExtBeansOverloadedNumberUtil_IntegerOrSmallerInteger_initWithJavaLangInteger_(self, n);
  self->w_ = w;
}


#line 497
FreemarkerExtBeansOverloadedNumberUtil_IntegerOrByte *new_FreemarkerExtBeansOverloadedNumberUtil_IntegerOrByte_initWithJavaLangInteger_withByte_(JavaLangInteger *n, jbyte w) {
  FreemarkerExtBeansOverloadedNumberUtil_IntegerOrByte *self = [FreemarkerExtBeansOverloadedNumberUtil_IntegerOrByte alloc];
  FreemarkerExtBeansOverloadedNumberUtil_IntegerOrByte_initWithJavaLangInteger_withByte_(self, n, w);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerExtBeansOverloadedNumberUtil_IntegerOrByte)


#line 508
@implementation FreemarkerExtBeansOverloadedNumberUtil_IntegerOrShort


#line 512
- (instancetype)initWithJavaLangInteger:(JavaLangInteger *)n
                              withShort:(jshort)w {
  FreemarkerExtBeansOverloadedNumberUtil_IntegerOrShort_initWithJavaLangInteger_withShort_(self, n, w);
  return self;
}


#line 517
- (jshort)shortValue {
  return w_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaLangInteger:withShort:", "IntegerOrShort", NULL, 0x0, NULL, NULL },
    { "shortValue", NULL, "S", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "w_", NULL, 0x12, "S", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerExtBeansOverloadedNumberUtil_IntegerOrShort = { 2, "IntegerOrShort", "freemarker.ext.beans", "OverloadedNumberUtil", 0x8, 2, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerExtBeansOverloadedNumberUtil_IntegerOrShort;
}

@end


#line 512
void FreemarkerExtBeansOverloadedNumberUtil_IntegerOrShort_initWithJavaLangInteger_withShort_(FreemarkerExtBeansOverloadedNumberUtil_IntegerOrShort *self, JavaLangInteger *n, jshort w) {
  (void) FreemarkerExtBeansOverloadedNumberUtil_IntegerOrSmallerInteger_initWithJavaLangInteger_(self, n);
  self->w_ = w;
}


#line 512
FreemarkerExtBeansOverloadedNumberUtil_IntegerOrShort *new_FreemarkerExtBeansOverloadedNumberUtil_IntegerOrShort_initWithJavaLangInteger_withShort_(JavaLangInteger *n, jshort w) {
  FreemarkerExtBeansOverloadedNumberUtil_IntegerOrShort *self = [FreemarkerExtBeansOverloadedNumberUtil_IntegerOrShort alloc];
  FreemarkerExtBeansOverloadedNumberUtil_IntegerOrShort_initWithJavaLangInteger_withShort_(self, n, w);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerExtBeansOverloadedNumberUtil_IntegerOrShort)


#line 523
@implementation FreemarkerExtBeansOverloadedNumberUtil_ShortOrByte


#line 528
- (instancetype)initWithJavaLangShort:(JavaLangShort *)n
                             withByte:(jbyte)w {
  FreemarkerExtBeansOverloadedNumberUtil_ShortOrByte_initWithJavaLangShort_withByte_(self, n, w);
  return self;
}


#line 533
- (NSNumber *)getSourceNumber {
  return n_;
}

- (jshort)shortValue {
  return [((JavaLangShort *) nil_chk(n_)) shortValue];
}

- (jbyte)charValue {
  return w_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaLangShort:withByte:", "ShortOrByte", NULL, 0x4, NULL, NULL },
    { "getSourceNumber", NULL, "Ljava.lang.Number;", 0x4, NULL, NULL },
    { "shortValue", NULL, "S", 0x1, NULL, NULL },
    { "charValue", "byteValue", "B", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "n_", NULL, 0x12, "Ljava.lang.Short;", NULL, NULL,  },
    { "w_", NULL, 0x12, "B", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerExtBeansOverloadedNumberUtil_ShortOrByte = { 2, "ShortOrByte", "freemarker.ext.beans", "OverloadedNumberUtil", 0x8, 4, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerExtBeansOverloadedNumberUtil_ShortOrByte;
}

@end


#line 528
void FreemarkerExtBeansOverloadedNumberUtil_ShortOrByte_initWithJavaLangShort_withByte_(FreemarkerExtBeansOverloadedNumberUtil_ShortOrByte *self, JavaLangShort *n, jbyte w) {
  (void) FreemarkerExtBeansOverloadedNumberUtil_NumberWithFallbackType_init(self);
  
#line 529
  self->n_ = n;
  self->w_ = w;
}


#line 528
FreemarkerExtBeansOverloadedNumberUtil_ShortOrByte *new_FreemarkerExtBeansOverloadedNumberUtil_ShortOrByte_initWithJavaLangShort_withByte_(JavaLangShort *n, jbyte w) {
  FreemarkerExtBeansOverloadedNumberUtil_ShortOrByte *self = [FreemarkerExtBeansOverloadedNumberUtil_ShortOrByte alloc];
  FreemarkerExtBeansOverloadedNumberUtil_ShortOrByte_initWithJavaLangShort_withByte_(self, n, w);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerExtBeansOverloadedNumberUtil_ShortOrByte)


#line 547
@implementation FreemarkerExtBeansOverloadedNumberUtil_DoubleOrWholeNumber


#line 551
- (instancetype)initWithJavaLangDouble:(JavaLangDouble *)n {
  FreemarkerExtBeansOverloadedNumberUtil_DoubleOrWholeNumber_initWithJavaLangDouble_(self, n);
  return self;
}


#line 555
- (NSNumber *)getSourceNumber {
  return n_;
}

- (jdouble)doubleValue {
  return [((JavaLangDouble *) nil_chk(n_)) doubleValue];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaLangDouble:", "DoubleOrWholeNumber", NULL, 0x4, NULL, NULL },
    { "getSourceNumber", NULL, "Ljava.lang.Number;", 0x4, NULL, NULL },
    { "doubleValue", NULL, "D", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "n_", NULL, 0x12, "Ljava.lang.Double;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerExtBeansOverloadedNumberUtil_DoubleOrWholeNumber = { 2, "DoubleOrWholeNumber", "freemarker.ext.beans", "OverloadedNumberUtil", 0x408, 3, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerExtBeansOverloadedNumberUtil_DoubleOrWholeNumber;
}

@end


#line 551
void FreemarkerExtBeansOverloadedNumberUtil_DoubleOrWholeNumber_initWithJavaLangDouble_(FreemarkerExtBeansOverloadedNumberUtil_DoubleOrWholeNumber *self, JavaLangDouble *n) {
  (void) FreemarkerExtBeansOverloadedNumberUtil_NumberWithFallbackType_init(self);
  
#line 552
  self->n_ = n;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerExtBeansOverloadedNumberUtil_DoubleOrWholeNumber)


#line 565
@implementation FreemarkerExtBeansOverloadedNumberUtil_DoubleOrByte


#line 569
- (instancetype)initWithJavaLangDouble:(JavaLangDouble *)n
                              withByte:(jbyte)w {
  FreemarkerExtBeansOverloadedNumberUtil_DoubleOrByte_initWithJavaLangDouble_withByte_(self, n, w);
  return self;
}


#line 574
- (jbyte)charValue {
  return w_;
}

- (jshort)shortValue {
  return w_;
}

- (jint)intValue {
  return w_;
}

- (jlong)longLongValue {
  return w_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaLangDouble:withByte:", "DoubleOrByte", NULL, 0x0, NULL, NULL },
    { "charValue", "byteValue", "B", 0x1, NULL, NULL },
    { "shortValue", NULL, "S", 0x1, NULL, NULL },
    { "intValue", NULL, "I", 0x1, NULL, NULL },
    { "longLongValue", "longValue", "J", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "w_", NULL, 0x12, "B", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerExtBeansOverloadedNumberUtil_DoubleOrByte = { 2, "DoubleOrByte", "freemarker.ext.beans", "OverloadedNumberUtil", 0x18, 5, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerExtBeansOverloadedNumberUtil_DoubleOrByte;
}

@end


#line 569
void FreemarkerExtBeansOverloadedNumberUtil_DoubleOrByte_initWithJavaLangDouble_withByte_(FreemarkerExtBeansOverloadedNumberUtil_DoubleOrByte *self, JavaLangDouble *n, jbyte w) {
  (void) FreemarkerExtBeansOverloadedNumberUtil_DoubleOrWholeNumber_initWithJavaLangDouble_(self, n);
  self->w_ = w;
}


#line 569
FreemarkerExtBeansOverloadedNumberUtil_DoubleOrByte *new_FreemarkerExtBeansOverloadedNumberUtil_DoubleOrByte_initWithJavaLangDouble_withByte_(JavaLangDouble *n, jbyte w) {
  FreemarkerExtBeansOverloadedNumberUtil_DoubleOrByte *self = [FreemarkerExtBeansOverloadedNumberUtil_DoubleOrByte alloc];
  FreemarkerExtBeansOverloadedNumberUtil_DoubleOrByte_initWithJavaLangDouble_withByte_(self, n, w);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerExtBeansOverloadedNumberUtil_DoubleOrByte)


#line 592
@implementation FreemarkerExtBeansOverloadedNumberUtil_DoubleOrShort


#line 596
- (instancetype)initWithJavaLangDouble:(JavaLangDouble *)n
                             withShort:(jshort)w {
  FreemarkerExtBeansOverloadedNumberUtil_DoubleOrShort_initWithJavaLangDouble_withShort_(self, n, w);
  return self;
}


#line 601
- (jshort)shortValue {
  return w_;
}

- (jint)intValue {
  return w_;
}

- (jlong)longLongValue {
  return w_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaLangDouble:withShort:", "DoubleOrShort", NULL, 0x0, NULL, NULL },
    { "shortValue", NULL, "S", 0x1, NULL, NULL },
    { "intValue", NULL, "I", 0x1, NULL, NULL },
    { "longLongValue", "longValue", "J", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "w_", NULL, 0x12, "S", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerExtBeansOverloadedNumberUtil_DoubleOrShort = { 2, "DoubleOrShort", "freemarker.ext.beans", "OverloadedNumberUtil", 0x18, 4, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerExtBeansOverloadedNumberUtil_DoubleOrShort;
}

@end


#line 596
void FreemarkerExtBeansOverloadedNumberUtil_DoubleOrShort_initWithJavaLangDouble_withShort_(FreemarkerExtBeansOverloadedNumberUtil_DoubleOrShort *self, JavaLangDouble *n, jshort w) {
  (void) FreemarkerExtBeansOverloadedNumberUtil_DoubleOrWholeNumber_initWithJavaLangDouble_(self, n);
  self->w_ = w;
}


#line 596
FreemarkerExtBeansOverloadedNumberUtil_DoubleOrShort *new_FreemarkerExtBeansOverloadedNumberUtil_DoubleOrShort_initWithJavaLangDouble_withShort_(JavaLangDouble *n, jshort w) {
  FreemarkerExtBeansOverloadedNumberUtil_DoubleOrShort *self = [FreemarkerExtBeansOverloadedNumberUtil_DoubleOrShort alloc];
  FreemarkerExtBeansOverloadedNumberUtil_DoubleOrShort_initWithJavaLangDouble_withShort_(self, n, w);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerExtBeansOverloadedNumberUtil_DoubleOrShort)


#line 615
@implementation FreemarkerExtBeansOverloadedNumberUtil_DoubleOrIntegerOrFloat


#line 619
- (instancetype)initWithJavaLangDouble:(JavaLangDouble *)n
                               withInt:(jint)w {
  FreemarkerExtBeansOverloadedNumberUtil_DoubleOrIntegerOrFloat_initWithJavaLangDouble_withInt_(self, n, w);
  return self;
}


#line 624
- (jint)intValue {
  return w_;
}

- (jlong)longLongValue {
  return w_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaLangDouble:withInt:", "DoubleOrIntegerOrFloat", NULL, 0x0, NULL, NULL },
    { "intValue", NULL, "I", 0x1, NULL, NULL },
    { "longLongValue", "longValue", "J", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "w_", NULL, 0x12, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerExtBeansOverloadedNumberUtil_DoubleOrIntegerOrFloat = { 2, "DoubleOrIntegerOrFloat", "freemarker.ext.beans", "OverloadedNumberUtil", 0x18, 3, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerExtBeansOverloadedNumberUtil_DoubleOrIntegerOrFloat;
}

@end


#line 619
void FreemarkerExtBeansOverloadedNumberUtil_DoubleOrIntegerOrFloat_initWithJavaLangDouble_withInt_(FreemarkerExtBeansOverloadedNumberUtil_DoubleOrIntegerOrFloat *self, JavaLangDouble *n, jint w) {
  (void) FreemarkerExtBeansOverloadedNumberUtil_DoubleOrWholeNumber_initWithJavaLangDouble_(self, n);
  self->w_ = w;
}


#line 619
FreemarkerExtBeansOverloadedNumberUtil_DoubleOrIntegerOrFloat *new_FreemarkerExtBeansOverloadedNumberUtil_DoubleOrIntegerOrFloat_initWithJavaLangDouble_withInt_(JavaLangDouble *n, jint w) {
  FreemarkerExtBeansOverloadedNumberUtil_DoubleOrIntegerOrFloat *self = [FreemarkerExtBeansOverloadedNumberUtil_DoubleOrIntegerOrFloat alloc];
  FreemarkerExtBeansOverloadedNumberUtil_DoubleOrIntegerOrFloat_initWithJavaLangDouble_withInt_(self, n, w);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerExtBeansOverloadedNumberUtil_DoubleOrIntegerOrFloat)


#line 634
@implementation FreemarkerExtBeansOverloadedNumberUtil_DoubleOrInteger


#line 638
- (instancetype)initWithJavaLangDouble:(JavaLangDouble *)n
                               withInt:(jint)w {
  FreemarkerExtBeansOverloadedNumberUtil_DoubleOrInteger_initWithJavaLangDouble_withInt_(self, n, w);
  return self;
}


#line 643
- (jint)intValue {
  return w_;
}

- (jlong)longLongValue {
  return w_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaLangDouble:withInt:", "DoubleOrInteger", NULL, 0x0, NULL, NULL },
    { "intValue", NULL, "I", 0x1, NULL, NULL },
    { "longLongValue", "longValue", "J", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "w_", NULL, 0x12, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerExtBeansOverloadedNumberUtil_DoubleOrInteger = { 2, "DoubleOrInteger", "freemarker.ext.beans", "OverloadedNumberUtil", 0x18, 3, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerExtBeansOverloadedNumberUtil_DoubleOrInteger;
}

@end


#line 638
void FreemarkerExtBeansOverloadedNumberUtil_DoubleOrInteger_initWithJavaLangDouble_withInt_(FreemarkerExtBeansOverloadedNumberUtil_DoubleOrInteger *self, JavaLangDouble *n, jint w) {
  (void) FreemarkerExtBeansOverloadedNumberUtil_DoubleOrWholeNumber_initWithJavaLangDouble_(self, n);
  self->w_ = w;
}


#line 638
FreemarkerExtBeansOverloadedNumberUtil_DoubleOrInteger *new_FreemarkerExtBeansOverloadedNumberUtil_DoubleOrInteger_initWithJavaLangDouble_withInt_(JavaLangDouble *n, jint w) {
  FreemarkerExtBeansOverloadedNumberUtil_DoubleOrInteger *self = [FreemarkerExtBeansOverloadedNumberUtil_DoubleOrInteger alloc];
  FreemarkerExtBeansOverloadedNumberUtil_DoubleOrInteger_initWithJavaLangDouble_withInt_(self, n, w);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerExtBeansOverloadedNumberUtil_DoubleOrInteger)


#line 653
@implementation FreemarkerExtBeansOverloadedNumberUtil_DoubleOrLong


#line 657
- (instancetype)initWithJavaLangDouble:(JavaLangDouble *)n
                              withLong:(jlong)w {
  FreemarkerExtBeansOverloadedNumberUtil_DoubleOrLong_initWithJavaLangDouble_withLong_(self, n, w);
  return self;
}


#line 662
- (jlong)longLongValue {
  return w_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaLangDouble:withLong:", "DoubleOrLong", NULL, 0x0, NULL, NULL },
    { "longLongValue", "longValue", "J", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "w_", NULL, 0x12, "J", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerExtBeansOverloadedNumberUtil_DoubleOrLong = { 2, "DoubleOrLong", "freemarker.ext.beans", "OverloadedNumberUtil", 0x18, 2, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerExtBeansOverloadedNumberUtil_DoubleOrLong;
}

@end


#line 657
void FreemarkerExtBeansOverloadedNumberUtil_DoubleOrLong_initWithJavaLangDouble_withLong_(FreemarkerExtBeansOverloadedNumberUtil_DoubleOrLong *self, JavaLangDouble *n, jlong w) {
  (void) FreemarkerExtBeansOverloadedNumberUtil_DoubleOrWholeNumber_initWithJavaLangDouble_(self, n);
  self->w_ = w;
}


#line 657
FreemarkerExtBeansOverloadedNumberUtil_DoubleOrLong *new_FreemarkerExtBeansOverloadedNumberUtil_DoubleOrLong_initWithJavaLangDouble_withLong_(JavaLangDouble *n, jlong w) {
  FreemarkerExtBeansOverloadedNumberUtil_DoubleOrLong *self = [FreemarkerExtBeansOverloadedNumberUtil_DoubleOrLong alloc];
  FreemarkerExtBeansOverloadedNumberUtil_DoubleOrLong_initWithJavaLangDouble_withLong_(self, n, w);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerExtBeansOverloadedNumberUtil_DoubleOrLong)


#line 668
@implementation FreemarkerExtBeansOverloadedNumberUtil_DoubleOrFloat


#line 672
- (instancetype)initWithJavaLangDouble:(JavaLangDouble *)n {
  FreemarkerExtBeansOverloadedNumberUtil_DoubleOrFloat_initWithJavaLangDouble_(self, n);
  return self;
}


#line 676
- (jfloat)floatValue {
  return [((JavaLangDouble *) nil_chk(n_)) floatValue];
}

- (jdouble)doubleValue {
  return [((JavaLangDouble *) nil_chk(n_)) doubleValue];
}

- (NSNumber *)getSourceNumber {
  return n_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaLangDouble:", "DoubleOrFloat", NULL, 0x0, NULL, NULL },
    { "floatValue", NULL, "F", 0x1, NULL, NULL },
    { "doubleValue", NULL, "D", 0x1, NULL, NULL },
    { "getSourceNumber", NULL, "Ljava.lang.Number;", 0x4, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "n_", NULL, 0x12, "Ljava.lang.Double;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerExtBeansOverloadedNumberUtil_DoubleOrFloat = { 2, "DoubleOrFloat", "freemarker.ext.beans", "OverloadedNumberUtil", 0x18, 4, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerExtBeansOverloadedNumberUtil_DoubleOrFloat;
}

@end


#line 672
void FreemarkerExtBeansOverloadedNumberUtil_DoubleOrFloat_initWithJavaLangDouble_(FreemarkerExtBeansOverloadedNumberUtil_DoubleOrFloat *self, JavaLangDouble *n) {
  (void) FreemarkerExtBeansOverloadedNumberUtil_NumberWithFallbackType_init(self);
  
#line 673
  self->n_ = n;
}


#line 672
FreemarkerExtBeansOverloadedNumberUtil_DoubleOrFloat *new_FreemarkerExtBeansOverloadedNumberUtil_DoubleOrFloat_initWithJavaLangDouble_(JavaLangDouble *n) {
  FreemarkerExtBeansOverloadedNumberUtil_DoubleOrFloat *self = [FreemarkerExtBeansOverloadedNumberUtil_DoubleOrFloat alloc];
  FreemarkerExtBeansOverloadedNumberUtil_DoubleOrFloat_initWithJavaLangDouble_(self, n);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerExtBeansOverloadedNumberUtil_DoubleOrFloat)


#line 690
@implementation FreemarkerExtBeansOverloadedNumberUtil_FloatOrWholeNumber


#line 694
- (instancetype)initWithJavaLangFloat:(JavaLangFloat *)n {
  FreemarkerExtBeansOverloadedNumberUtil_FloatOrWholeNumber_initWithJavaLangFloat_(self, n);
  return self;
}


#line 698
- (NSNumber *)getSourceNumber {
  return n_;
}

- (jfloat)floatValue {
  return [((JavaLangFloat *) nil_chk(n_)) floatValue];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaLangFloat:", "FloatOrWholeNumber", NULL, 0x0, NULL, NULL },
    { "getSourceNumber", NULL, "Ljava.lang.Number;", 0x4, NULL, NULL },
    { "floatValue", NULL, "F", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "n_", NULL, 0x12, "Ljava.lang.Float;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerExtBeansOverloadedNumberUtil_FloatOrWholeNumber = { 2, "FloatOrWholeNumber", "freemarker.ext.beans", "OverloadedNumberUtil", 0x408, 3, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerExtBeansOverloadedNumberUtil_FloatOrWholeNumber;
}

@end


#line 694
void FreemarkerExtBeansOverloadedNumberUtil_FloatOrWholeNumber_initWithJavaLangFloat_(FreemarkerExtBeansOverloadedNumberUtil_FloatOrWholeNumber *self, JavaLangFloat *n) {
  (void) FreemarkerExtBeansOverloadedNumberUtil_NumberWithFallbackType_init(self);
  
#line 695
  self->n_ = n;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerExtBeansOverloadedNumberUtil_FloatOrWholeNumber)


#line 708
@implementation FreemarkerExtBeansOverloadedNumberUtil_FloatOrByte


#line 712
- (instancetype)initWithJavaLangFloat:(JavaLangFloat *)n
                             withByte:(jbyte)w {
  FreemarkerExtBeansOverloadedNumberUtil_FloatOrByte_initWithJavaLangFloat_withByte_(self, n, w);
  return self;
}


#line 717
- (jbyte)charValue {
  return w_;
}

- (jshort)shortValue {
  return w_;
}

- (jint)intValue {
  return w_;
}

- (jlong)longLongValue {
  return w_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaLangFloat:withByte:", "FloatOrByte", NULL, 0x0, NULL, NULL },
    { "charValue", "byteValue", "B", 0x1, NULL, NULL },
    { "shortValue", NULL, "S", 0x1, NULL, NULL },
    { "intValue", NULL, "I", 0x1, NULL, NULL },
    { "longLongValue", "longValue", "J", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "w_", NULL, 0x12, "B", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerExtBeansOverloadedNumberUtil_FloatOrByte = { 2, "FloatOrByte", "freemarker.ext.beans", "OverloadedNumberUtil", 0x18, 5, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerExtBeansOverloadedNumberUtil_FloatOrByte;
}

@end


#line 712
void FreemarkerExtBeansOverloadedNumberUtil_FloatOrByte_initWithJavaLangFloat_withByte_(FreemarkerExtBeansOverloadedNumberUtil_FloatOrByte *self, JavaLangFloat *n, jbyte w) {
  (void) FreemarkerExtBeansOverloadedNumberUtil_FloatOrWholeNumber_initWithJavaLangFloat_(self, n);
  self->w_ = w;
}


#line 712
FreemarkerExtBeansOverloadedNumberUtil_FloatOrByte *new_FreemarkerExtBeansOverloadedNumberUtil_FloatOrByte_initWithJavaLangFloat_withByte_(JavaLangFloat *n, jbyte w) {
  FreemarkerExtBeansOverloadedNumberUtil_FloatOrByte *self = [FreemarkerExtBeansOverloadedNumberUtil_FloatOrByte alloc];
  FreemarkerExtBeansOverloadedNumberUtil_FloatOrByte_initWithJavaLangFloat_withByte_(self, n, w);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerExtBeansOverloadedNumberUtil_FloatOrByte)


#line 735
@implementation FreemarkerExtBeansOverloadedNumberUtil_FloatOrShort


#line 739
- (instancetype)initWithJavaLangFloat:(JavaLangFloat *)n
                            withShort:(jshort)w {
  FreemarkerExtBeansOverloadedNumberUtil_FloatOrShort_initWithJavaLangFloat_withShort_(self, n, w);
  return self;
}


#line 744
- (jshort)shortValue {
  return w_;
}

- (jint)intValue {
  return w_;
}

- (jlong)longLongValue {
  return w_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaLangFloat:withShort:", "FloatOrShort", NULL, 0x0, NULL, NULL },
    { "shortValue", NULL, "S", 0x1, NULL, NULL },
    { "intValue", NULL, "I", 0x1, NULL, NULL },
    { "longLongValue", "longValue", "J", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "w_", NULL, 0x12, "S", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerExtBeansOverloadedNumberUtil_FloatOrShort = { 2, "FloatOrShort", "freemarker.ext.beans", "OverloadedNumberUtil", 0x18, 4, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerExtBeansOverloadedNumberUtil_FloatOrShort;
}

@end


#line 739
void FreemarkerExtBeansOverloadedNumberUtil_FloatOrShort_initWithJavaLangFloat_withShort_(FreemarkerExtBeansOverloadedNumberUtil_FloatOrShort *self, JavaLangFloat *n, jshort w) {
  (void) FreemarkerExtBeansOverloadedNumberUtil_FloatOrWholeNumber_initWithJavaLangFloat_(self, n);
  self->w_ = w;
}


#line 739
FreemarkerExtBeansOverloadedNumberUtil_FloatOrShort *new_FreemarkerExtBeansOverloadedNumberUtil_FloatOrShort_initWithJavaLangFloat_withShort_(JavaLangFloat *n, jshort w) {
  FreemarkerExtBeansOverloadedNumberUtil_FloatOrShort *self = [FreemarkerExtBeansOverloadedNumberUtil_FloatOrShort alloc];
  FreemarkerExtBeansOverloadedNumberUtil_FloatOrShort_initWithJavaLangFloat_withShort_(self, n, w);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerExtBeansOverloadedNumberUtil_FloatOrShort)


#line 758
@implementation FreemarkerExtBeansOverloadedNumberUtil_FloatOrInteger


#line 762
- (instancetype)initWithJavaLangFloat:(JavaLangFloat *)n
                              withInt:(jint)w {
  FreemarkerExtBeansOverloadedNumberUtil_FloatOrInteger_initWithJavaLangFloat_withInt_(self, n, w);
  return self;
}


#line 767
- (jint)intValue {
  return w_;
}

- (jlong)longLongValue {
  return w_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaLangFloat:withInt:", "FloatOrInteger", NULL, 0x0, NULL, NULL },
    { "intValue", NULL, "I", 0x1, NULL, NULL },
    { "longLongValue", "longValue", "J", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "w_", NULL, 0x12, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerExtBeansOverloadedNumberUtil_FloatOrInteger = { 2, "FloatOrInteger", "freemarker.ext.beans", "OverloadedNumberUtil", 0x18, 3, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerExtBeansOverloadedNumberUtil_FloatOrInteger;
}

@end


#line 762
void FreemarkerExtBeansOverloadedNumberUtil_FloatOrInteger_initWithJavaLangFloat_withInt_(FreemarkerExtBeansOverloadedNumberUtil_FloatOrInteger *self, JavaLangFloat *n, jint w) {
  (void) FreemarkerExtBeansOverloadedNumberUtil_FloatOrWholeNumber_initWithJavaLangFloat_(self, n);
  self->w_ = w;
}


#line 762
FreemarkerExtBeansOverloadedNumberUtil_FloatOrInteger *new_FreemarkerExtBeansOverloadedNumberUtil_FloatOrInteger_initWithJavaLangFloat_withInt_(JavaLangFloat *n, jint w) {
  FreemarkerExtBeansOverloadedNumberUtil_FloatOrInteger *self = [FreemarkerExtBeansOverloadedNumberUtil_FloatOrInteger alloc];
  FreemarkerExtBeansOverloadedNumberUtil_FloatOrInteger_initWithJavaLangFloat_withInt_(self, n, w);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerExtBeansOverloadedNumberUtil_FloatOrInteger)


#line 777
@implementation FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrPrimitive


#line 781
- (instancetype)initWithJavaMathBigInteger:(JavaMathBigInteger *)n {
  FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrPrimitive_initWithJavaMathBigInteger_(self, n);
  return self;
}


#line 785
- (NSNumber *)getSourceNumber {
  return n_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaMathBigInteger:", "BigIntegerOrPrimitive", NULL, 0x0, NULL, NULL },
    { "getSourceNumber", NULL, "Ljava.lang.Number;", 0x4, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "n_", NULL, 0x14, "Ljava.math.BigInteger;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrPrimitive = { 2, "BigIntegerOrPrimitive", "freemarker.ext.beans", "OverloadedNumberUtil", 0x408, 2, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrPrimitive;
}

@end


#line 781
void FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrPrimitive_initWithJavaMathBigInteger_(FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrPrimitive *self, JavaMathBigInteger *n) {
  (void) FreemarkerExtBeansOverloadedNumberUtil_NumberWithFallbackType_init(self);
  
#line 782
  self->n_ = n;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrPrimitive)


#line 791
@implementation FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrByte

- (instancetype)initWithJavaMathBigInteger:(JavaMathBigInteger *)n {
  FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrByte_initWithJavaMathBigInteger_(self, n);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaMathBigInteger:", "BigIntegerOrByte", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcClassInfo _FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrByte = { 2, "BigIntegerOrByte", "freemarker.ext.beans", "OverloadedNumberUtil", 0x18, 1, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrByte;
}

@end


#line 793
void FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrByte_initWithJavaMathBigInteger_(FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrByte *self, JavaMathBigInteger *n) {
  (void) FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrPrimitive_initWithJavaMathBigInteger_(self, n);
}


#line 793
FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrByte *new_FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrByte_initWithJavaMathBigInteger_(JavaMathBigInteger *n) {
  FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrByte *self = [FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrByte alloc];
  FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrByte_initWithJavaMathBigInteger_(self, n);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrByte)


#line 799
@implementation FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrShort

- (instancetype)initWithJavaMathBigInteger:(JavaMathBigInteger *)n {
  FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrShort_initWithJavaMathBigInteger_(self, n);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaMathBigInteger:", "BigIntegerOrShort", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcClassInfo _FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrShort = { 2, "BigIntegerOrShort", "freemarker.ext.beans", "OverloadedNumberUtil", 0x18, 1, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrShort;
}

@end


#line 801
void FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrShort_initWithJavaMathBigInteger_(FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrShort *self, JavaMathBigInteger *n) {
  (void) FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrPrimitive_initWithJavaMathBigInteger_(self, n);
}


#line 801
FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrShort *new_FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrShort_initWithJavaMathBigInteger_(JavaMathBigInteger *n) {
  FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrShort *self = [FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrShort alloc];
  FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrShort_initWithJavaMathBigInteger_(self, n);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrShort)


#line 807
@implementation FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrInteger

- (instancetype)initWithJavaMathBigInteger:(JavaMathBigInteger *)n {
  FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrInteger_initWithJavaMathBigInteger_(self, n);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaMathBigInteger:", "BigIntegerOrInteger", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcClassInfo _FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrInteger = { 2, "BigIntegerOrInteger", "freemarker.ext.beans", "OverloadedNumberUtil", 0x18, 1, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrInteger;
}

@end


#line 809
void FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrInteger_initWithJavaMathBigInteger_(FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrInteger *self, JavaMathBigInteger *n) {
  (void) FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrPrimitive_initWithJavaMathBigInteger_(self, n);
}


#line 809
FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrInteger *new_FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrInteger_initWithJavaMathBigInteger_(JavaMathBigInteger *n) {
  FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrInteger *self = [FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrInteger alloc];
  FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrInteger_initWithJavaMathBigInteger_(self, n);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrInteger)


#line 815
@implementation FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrLong

- (instancetype)initWithJavaMathBigInteger:(JavaMathBigInteger *)n {
  FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrLong_initWithJavaMathBigInteger_(self, n);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaMathBigInteger:", "BigIntegerOrLong", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcClassInfo _FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrLong = { 2, "BigIntegerOrLong", "freemarker.ext.beans", "OverloadedNumberUtil", 0x18, 1, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrLong;
}

@end


#line 817
void FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrLong_initWithJavaMathBigInteger_(FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrLong *self, JavaMathBigInteger *n) {
  (void) FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrPrimitive_initWithJavaMathBigInteger_(self, n);
}


#line 817
FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrLong *new_FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrLong_initWithJavaMathBigInteger_(JavaMathBigInteger *n) {
  FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrLong *self = [FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrLong alloc];
  FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrLong_initWithJavaMathBigInteger_(self, n);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrLong)


#line 823
@implementation FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrFPPrimitive

- (instancetype)initWithJavaMathBigInteger:(JavaMathBigInteger *)n {
  FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrFPPrimitive_initWithJavaMathBigInteger_(self, n);
  return self;
}

- (jfloat)floatValue {
  return [((JavaMathBigInteger *) nil_chk(n_)) longLongValue];
}


#line 835
- (jdouble)doubleValue {
  return [((JavaMathBigInteger *) nil_chk(n_)) longLongValue];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaMathBigInteger:", "BigIntegerOrFPPrimitive", NULL, 0x0, NULL, NULL },
    { "floatValue", NULL, "F", 0x1, NULL, NULL },
    { "doubleValue", NULL, "D", 0x1, NULL, NULL },
  };
  static const J2ObjcClassInfo _FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrFPPrimitive = { 2, "BigIntegerOrFPPrimitive", "freemarker.ext.beans", "OverloadedNumberUtil", 0x408, 3, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrFPPrimitive;
}

@end


#line 825
void FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrFPPrimitive_initWithJavaMathBigInteger_(FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrFPPrimitive *self, JavaMathBigInteger *n) {
  (void) FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrPrimitive_initWithJavaMathBigInteger_(self, n);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrFPPrimitive)


#line 841
@implementation FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrFloat

- (instancetype)initWithJavaMathBigInteger:(JavaMathBigInteger *)n {
  FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrFloat_initWithJavaMathBigInteger_(self, n);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaMathBigInteger:", "BigIntegerOrFloat", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcClassInfo _FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrFloat = { 2, "BigIntegerOrFloat", "freemarker.ext.beans", "OverloadedNumberUtil", 0x18, 1, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrFloat;
}

@end


#line 843
void FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrFloat_initWithJavaMathBigInteger_(FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrFloat *self, JavaMathBigInteger *n) {
  (void) FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrFPPrimitive_initWithJavaMathBigInteger_(self, n);
}


#line 843
FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrFloat *new_FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrFloat_initWithJavaMathBigInteger_(JavaMathBigInteger *n) {
  FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrFloat *self = [FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrFloat alloc];
  FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrFloat_initWithJavaMathBigInteger_(self, n);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrFloat)


#line 849
@implementation FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrDouble

- (instancetype)initWithJavaMathBigInteger:(JavaMathBigInteger *)n {
  FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrDouble_initWithJavaMathBigInteger_(self, n);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaMathBigInteger:", "BigIntegerOrDouble", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcClassInfo _FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrDouble = { 2, "BigIntegerOrDouble", "freemarker.ext.beans", "OverloadedNumberUtil", 0x18, 1, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrDouble;
}

@end


#line 851
void FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrDouble_initWithJavaMathBigInteger_(FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrDouble *self, JavaMathBigInteger *n) {
  (void) FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrFPPrimitive_initWithJavaMathBigInteger_(self, n);
}


#line 851
FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrDouble *new_FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrDouble_initWithJavaMathBigInteger_(JavaMathBigInteger *n) {
  FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrDouble *self = [FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrDouble alloc];
  FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrDouble_initWithJavaMathBigInteger_(self, n);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrDouble)
