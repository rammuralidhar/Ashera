//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/ConditionalBlock.java
//


#include "BugException.h"
#include "ConditionalBlock.h"
#include "Environment.h"
#include "Expression.h"
#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "ParameterRole.h"
#include "TemplateElement.h"
#include "TemplateException.h"
#include "java/io/IOException.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuffer.h"

#line 0 "/Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/ConditionalBlock.java"

@interface FreemarkerCoreConditionalBlock () {
 @public
  jint type_;
}

@end


#line 28
@implementation FreemarkerCoreConditionalBlock


#line 38
- (instancetype)initWithFreemarkerCoreExpression:(FreemarkerCoreExpression *)condition
               withFreemarkerCoreTemplateElement:(FreemarkerCoreTemplateElement *)nestedBlock
                                         withInt:(jint)type {
  FreemarkerCoreConditionalBlock_initWithFreemarkerCoreExpression_withFreemarkerCoreTemplateElement_withInt_(self, condition, nestedBlock, type);
  return self;
}

- (void)acceptWithFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env {
  if (condition_ == nil || [condition_ evalToBooleanWithFreemarkerCoreEnvironment:env]) {
    if ([self getNestedBlock] != nil) {
      [((FreemarkerCoreEnvironment *) nil_chk(env)) visitByHiddingParentWithFreemarkerCoreTemplateElement:[self getNestedBlock]];
    }
  }
}

- (NSString *)dumpWithBoolean:(jboolean)canonical {
  JavaLangStringBuffer *buf = new_JavaLangStringBuffer_init();
  if (canonical) (void) [buf appendWithChar:'<'];
  (void) [buf appendWithNSString:[self getNodeTypeSymbol]];
  if (condition_ != nil) {
    (void) [buf appendWithChar:' '];
    (void) [buf appendWithNSString:[condition_ getCanonicalForm]];
  }
  if (canonical) {
    (void) [buf appendWithNSString:@">"];
    if ([self getNestedBlock] != nil) {
      (void) [buf appendWithNSString:[((FreemarkerCoreTemplateElement *) nil_chk([self getNestedBlock])) getCanonicalForm]];
    }
    if (isLonelyIf_) {
      (void) [buf appendWithNSString:@"</#if>"];
    }
  }
  return [buf description];
}

- (NSString *)getNodeTypeSymbol {
  if (type_ == FreemarkerCoreConditionalBlock_TYPE_ELSE) {
    return @"#else";
  }
  else
#line 76
  if (type_ == FreemarkerCoreConditionalBlock_TYPE_IF) {
    return @"#if";
  }
  else
#line 78
  if (type_ == FreemarkerCoreConditionalBlock_TYPE_ELSE_IF) {
    return @"#elseif";
  }
  else {
    
#line 81
    @throw new_FreemarkerCoreBugException_initWithNSString_(@"Unknown type");
  }
}


#line 85
- (jint)getParameterCount {
  return 2;
}

- (id)getParameterValueWithInt:(jint)idx {
  switch (idx) {
    case 0:
    
#line 91
    return condition_;
    case 1:
    
#line 92
    return new_JavaLangInteger_initWithInt_(type_);
    default:
    
#line 93
    @throw new_JavaLangIndexOutOfBoundsException_init();
  }
}


#line 97
- (FreemarkerCoreParameterRole *)getParameterRoleWithInt:(jint)idx {
  switch (idx) {
    case 0:
    
#line 99
    return FreemarkerCoreParameterRole_get_CONDITION_();
    case 1:
    
#line 100
    return FreemarkerCoreParameterRole_get_AST_NODE_SUBTYPE_();
    default:
    
#line 101
    @throw new_JavaLangIndexOutOfBoundsException_init();
  }
}


#line 105
- (jboolean)isNestedBlockRepeater {
  return NO;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithFreemarkerCoreExpression:withFreemarkerCoreTemplateElement:withInt:", "ConditionalBlock", NULL, 0x0, NULL, NULL },
    { "acceptWithFreemarkerCoreEnvironment:", "accept", "V", 0x0, "Lfreemarker.template.TemplateException;Ljava.io.IOException;", NULL },
    { "dumpWithBoolean:", "dump", "Ljava.lang.String;", 0x4, NULL, NULL },
    { "getNodeTypeSymbol", NULL, "Ljava.lang.String;", 0x0, NULL, NULL },
    { "getParameterCount", NULL, "I", 0x0, NULL, NULL },
    { "getParameterValueWithInt:", "getParameterValue", "Ljava.lang.Object;", 0x0, NULL, NULL },
    { "getParameterRoleWithInt:", "getParameterRole", "Lfreemarker.core.ParameterRole;", 0x0, NULL, NULL },
    { "isNestedBlockRepeater", NULL, "Z", 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "TYPE_IF_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = FreemarkerCoreConditionalBlock_TYPE_IF },
    { "TYPE_ELSE_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = FreemarkerCoreConditionalBlock_TYPE_ELSE },
    { "TYPE_ELSE_IF_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = FreemarkerCoreConditionalBlock_TYPE_ELSE_IF },
    { "condition_", NULL, 0x10, "Lfreemarker.core.Expression;", NULL, NULL,  },
    { "type_", NULL, 0x12, "I", NULL, NULL,  },
    { "isLonelyIf_", NULL, 0x0, "Z", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerCoreConditionalBlock = { 2, "ConditionalBlock", "freemarker.core", NULL, 0x10, 8, methods, 6, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerCoreConditionalBlock;
}

@end


#line 38
void FreemarkerCoreConditionalBlock_initWithFreemarkerCoreExpression_withFreemarkerCoreTemplateElement_withInt_(FreemarkerCoreConditionalBlock *self, FreemarkerCoreExpression *condition, FreemarkerCoreTemplateElement *nestedBlock, jint type) {
  (void) FreemarkerCoreTemplateElement_init(self);
  self->condition_ = condition;
  [self setNestedBlockWithFreemarkerCoreTemplateElement:nestedBlock];
  self->type_ = type;
}


#line 38
FreemarkerCoreConditionalBlock *new_FreemarkerCoreConditionalBlock_initWithFreemarkerCoreExpression_withFreemarkerCoreTemplateElement_withInt_(FreemarkerCoreExpression *condition, FreemarkerCoreTemplateElement *nestedBlock, jint type) {
  FreemarkerCoreConditionalBlock *self = [FreemarkerCoreConditionalBlock alloc];
  FreemarkerCoreConditionalBlock_initWithFreemarkerCoreExpression_withFreemarkerCoreTemplateElement_withInt_(self, condition, nestedBlock, type);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreConditionalBlock)
