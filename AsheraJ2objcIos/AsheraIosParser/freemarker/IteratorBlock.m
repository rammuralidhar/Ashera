//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/IteratorBlock.java
//


#include "BreakInstruction.h"
#include "Constants.h"
#include "Environment.h"
#include "Expression.h"
#include "IOSClass.h"
#include "InvalidReferenceException.h"
#include "IteratorBlock.h"
#include "J2ObjC_source.h"
#include "ListElseContainer.h"
#include "NonSequenceOrCollectionException.h"
#include "ParameterRole.h"
#include "SimpleNumber.h"
#include "TemplateBooleanModel.h"
#include "TemplateCollectionModel.h"
#include "TemplateElement.h"
#include "TemplateException.h"
#include "TemplateModel.h"
#include "TemplateModelException.h"
#include "TemplateModelIterator.h"
#include "TemplateSequenceModel.h"
#include "_CoreStringUtils.h"
#include "_MiscTemplateException.h"
#include "java/io/IOException.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/StringBuffer.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/List.h"

#line 0 "/Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/IteratorBlock.java"

@interface FreemarkerCoreIteratorBlock () {
 @public
  FreemarkerCoreExpression *listExp_;
  NSString *loopVarName_;
  jboolean isForEach_;
}

@end

J2OBJC_FIELD_SETTER(FreemarkerCoreIteratorBlock, listExp_, FreemarkerCoreExpression *)
J2OBJC_FIELD_SETTER(FreemarkerCoreIteratorBlock, loopVarName_, NSString *)

@interface FreemarkerCoreIteratorBlock_IterationContext () {
 @public
  FreemarkerCoreIteratorBlock *this$0_;
  id<FreemarkerTemplateTemplateModelIterator> openedIteratorModel_;
  jboolean hasNext_;
  id<FreemarkerTemplateTemplateModel> loopVar_;
  jint index_;
  jboolean alreadyEntered_;
  id<JavaUtilCollection> localVarNames_;
  /**
   @brief If the <code>#list</code> has nested <code>#items</code> , it's <code>null</code> outside the <code>#items</code> .
   */
  NSString *loopVarName_;
  id<FreemarkerTemplateTemplateModel> listValue_;
}

/**
 @brief Executes the given block for the #listValue : if #loopVarName is non- <code>null</code> , then for each list item once, otherwise once if #listValue isn't empty.
 */
- (jboolean)executeNestedBlockWithFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env
                          withFreemarkerCoreTemplateElement:(FreemarkerCoreTemplateElement *)nestedBlock;

- (jboolean)executeNestedBlockInnerWithFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env
                               withFreemarkerCoreTemplateElement:(FreemarkerCoreTemplateElement *)nestedBlock;

@end

J2OBJC_FIELD_SETTER(FreemarkerCoreIteratorBlock_IterationContext, this$0_, FreemarkerCoreIteratorBlock *)
J2OBJC_FIELD_SETTER(FreemarkerCoreIteratorBlock_IterationContext, openedIteratorModel_, id<FreemarkerTemplateTemplateModelIterator>)
J2OBJC_FIELD_SETTER(FreemarkerCoreIteratorBlock_IterationContext, loopVar_, id<FreemarkerTemplateTemplateModel>)
J2OBJC_FIELD_SETTER(FreemarkerCoreIteratorBlock_IterationContext, localVarNames_, id<JavaUtilCollection>)
J2OBJC_FIELD_SETTER(FreemarkerCoreIteratorBlock_IterationContext, loopVarName_, NSString *)
J2OBJC_FIELD_SETTER(FreemarkerCoreIteratorBlock_IterationContext, listValue_, id<FreemarkerTemplateTemplateModel>)

static NSString *FreemarkerCoreIteratorBlock_IterationContext_LOOP_STATE_HAS_NEXT_ = 
#line 173
@"_has_next";
J2OBJC_STATIC_FIELD_GETTER(FreemarkerCoreIteratorBlock_IterationContext, LOOP_STATE_HAS_NEXT_, NSString *)

static NSString *FreemarkerCoreIteratorBlock_IterationContext_LOOP_STATE_INDEX_ = 
#line 174
@"_index";
J2OBJC_STATIC_FIELD_GETTER(FreemarkerCoreIteratorBlock_IterationContext, LOOP_STATE_INDEX_, NSString *)

__attribute__((unused)) static jboolean FreemarkerCoreIteratorBlock_IterationContext_executeNestedBlockWithFreemarkerCoreEnvironment_withFreemarkerCoreTemplateElement_(FreemarkerCoreIteratorBlock_IterationContext *self, FreemarkerCoreEnvironment *env, FreemarkerCoreTemplateElement *nestedBlock);

__attribute__((unused)) static jboolean FreemarkerCoreIteratorBlock_IterationContext_executeNestedBlockInnerWithFreemarkerCoreEnvironment_withFreemarkerCoreTemplateElement_(FreemarkerCoreIteratorBlock_IterationContext *self, FreemarkerCoreEnvironment *env, FreemarkerCoreTemplateElement *nestedBlock);


#line 37
@implementation FreemarkerCoreIteratorBlock


#line 52
- (instancetype)initWithFreemarkerCoreExpression:(FreemarkerCoreExpression *)listExp
                                    withNSString:(NSString *)loopVarName
               withFreemarkerCoreTemplateElement:(FreemarkerCoreTemplateElement *)nestedBlock
                                     withBoolean:(jboolean)isForEach {
  FreemarkerCoreIteratorBlock_initWithFreemarkerCoreExpression_withNSString_withFreemarkerCoreTemplateElement_withBoolean_(self, listExp, loopVarName, nestedBlock, isForEach);
  return self;
}


#line 63
- (void)acceptWithFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env {
  [self acceptWithResultWithFreemarkerCoreEnvironment:env];
}

- (jboolean)acceptWithResultWithFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env {
  
#line 69
  id<FreemarkerTemplateTemplateModel> listValue = [((FreemarkerCoreExpression *) nil_chk(listExp_)) evalWithFreemarkerCoreEnvironment:env];
  if (listValue == nil) {
    if ([((FreemarkerCoreEnvironment *) nil_chk(env)) isClassicCompatible]) {
      listValue = FreemarkerTemplateUtilityConstants_get_EMPTY_SEQUENCE_();
    }
    else {
      
#line 74
      [listExp_ assertNonNullWithFreemarkerTemplateTemplateModel:nil withFreemarkerCoreEnvironment:env];
    }
  }
  
#line 78
  return [((FreemarkerCoreEnvironment *) nil_chk(env)) visitIteratorBlockWithFreemarkerCoreIteratorBlock_IterationContext:new_FreemarkerCoreIteratorBlock_IterationContext_initWithFreemarkerCoreIteratorBlock_withFreemarkerTemplateTemplateModel_withNSString_(self, listValue, loopVarName_)];
}


#line 87
+ (FreemarkerCoreIteratorBlock_IterationContext *)findEnclosingIterationContextWithFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env
                                                                                                withNSString:(NSString *)loopVariableName {
  return FreemarkerCoreIteratorBlock_findEnclosingIterationContextWithFreemarkerCoreEnvironment_withNSString_(env, loopVariableName);
}


#line 103
- (NSString *)dumpWithBoolean:(jboolean)canonical {
  JavaLangStringBuffer *buf = new_JavaLangStringBuffer_init();
  if (canonical) (void) [buf appendWithChar:'<'];
  (void) [buf appendWithNSString:[self getNodeTypeSymbol]];
  (void) [buf appendWithChar:' '];
  if (isForEach_) {
    (void) [buf appendWithNSString:FreemarkerCore_CoreStringUtils_toFTLTopLevelIdentifierReferenceWithNSString_(loopVarName_)];
    (void) [buf appendWithNSString:@" in "];
    (void) [buf appendWithNSString:[((FreemarkerCoreExpression *) nil_chk(listExp_)) getCanonicalForm]];
  }
  else {
    (void) [buf appendWithNSString:[((FreemarkerCoreExpression *) nil_chk(listExp_)) getCanonicalForm]];
    if (loopVarName_ != nil) {
      (void) [buf appendWithNSString:@" as "];
      (void) [buf appendWithNSString:FreemarkerCore_CoreStringUtils_toFTLTopLevelIdentifierReferenceWithNSString_(loopVarName_)];
    }
  }
  if (canonical) {
    (void) [buf appendWithNSString:@">"];
    if ([self getNestedBlock] != nil) {
      (void) [buf appendWithNSString:[((FreemarkerCoreTemplateElement *) nil_chk([self getNestedBlock])) getCanonicalForm]];
    }
    if (!([[self getParentElement] isKindOfClass:[FreemarkerCoreListElseContainer class]])) {
      (void) [buf appendWithNSString:@"</"];
      (void) [buf appendWithNSString:[self getNodeTypeSymbol]];
      (void) [buf appendWithChar:'>'];
    }
  }
  return [buf description];
}

- (jint)getParameterCount {
  return loopVarName_ != nil ? 2 : 1;
}

- (id)getParameterValueWithInt:(jint)idx {
  switch (idx) {
    case 0:
    return listExp_;
    case 1:
    if (loopVarName_ == nil) @throw new_JavaLangIndexOutOfBoundsException_init();
    return loopVarName_;
    default:
    
#line 145
    @throw new_JavaLangIndexOutOfBoundsException_init();
  }
}


#line 149
- (FreemarkerCoreParameterRole *)getParameterRoleWithInt:(jint)idx {
  switch (idx) {
    case 0:
    return FreemarkerCoreParameterRole_get_LIST_SOURCE_();
    case 1:
    if (loopVarName_ == nil) @throw new_JavaLangIndexOutOfBoundsException_init();
    return FreemarkerCoreParameterRole_get_TARGET_LOOP_VARIABLE_();
    default:
    
#line 156
    @throw new_JavaLangIndexOutOfBoundsException_init();
  }
}


#line 160
- (NSString *)getNodeTypeSymbol {
  return isForEach_ ? @"#foreach" : @"#list";
}

- (jboolean)isNestedBlockRepeater {
  return loopVarName_ != nil;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithFreemarkerCoreExpression:withNSString:withFreemarkerCoreTemplateElement:withBoolean:", "IteratorBlock", NULL, 0x0, NULL, NULL },
    { "acceptWithFreemarkerCoreEnvironment:", "accept", "V", 0x0, "Lfreemarker.template.TemplateException;Ljava.io.IOException;", NULL },
    { "acceptWithResultWithFreemarkerCoreEnvironment:", "acceptWithResult", "Z", 0x0, "Lfreemarker.template.TemplateException;Ljava.io.IOException;", NULL },
    { "findEnclosingIterationContextWithFreemarkerCoreEnvironment:withNSString:", "findEnclosingIterationContext", "Lfreemarker.core.IteratorBlock$IterationContext;", 0x8, "Lfreemarker.core._MiscTemplateException;", NULL },
    { "dumpWithBoolean:", "dump", "Ljava.lang.String;", 0x4, NULL, NULL },
    { "getParameterCount", NULL, "I", 0x0, NULL, NULL },
    { "getParameterValueWithInt:", "getParameterValue", "Ljava.lang.Object;", 0x0, NULL, NULL },
    { "getParameterRoleWithInt:", "getParameterRole", "Lfreemarker.core.ParameterRole;", 0x0, NULL, NULL },
    { "getNodeTypeSymbol", NULL, "Ljava.lang.String;", 0x0, NULL, NULL },
    { "isNestedBlockRepeater", NULL, "Z", 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "listExp_", NULL, 0x12, "Lfreemarker.core.Expression;", NULL, NULL,  },
    { "loopVarName_", NULL, 0x12, "Ljava.lang.String;", NULL, NULL,  },
    { "isForEach_", NULL, 0x12, "Z", NULL, NULL,  },
  };
  static const char *inner_classes[] = {"Lfreemarker.core.IteratorBlock$IterationContext;"};
  static const J2ObjcClassInfo _FreemarkerCoreIteratorBlock = { 2, "IteratorBlock", "freemarker.core", NULL, 0x10, 10, methods, 3, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_FreemarkerCoreIteratorBlock;
}

@end


#line 52
void FreemarkerCoreIteratorBlock_initWithFreemarkerCoreExpression_withNSString_withFreemarkerCoreTemplateElement_withBoolean_(FreemarkerCoreIteratorBlock *self, FreemarkerCoreExpression *listExp, NSString *loopVarName, FreemarkerCoreTemplateElement *nestedBlock, jboolean isForEach) {
  (void) FreemarkerCoreTemplateElement_init(self);
  
#line 57
  self->listExp_ = listExp;
  self->loopVarName_ = loopVarName;
  [self setNestedBlockWithFreemarkerCoreTemplateElement:nestedBlock];
  self->isForEach_ = isForEach;
}


#line 52
FreemarkerCoreIteratorBlock *new_FreemarkerCoreIteratorBlock_initWithFreemarkerCoreExpression_withNSString_withFreemarkerCoreTemplateElement_withBoolean_(FreemarkerCoreExpression *listExp, NSString *loopVarName, FreemarkerCoreTemplateElement *nestedBlock, jboolean isForEach) {
  FreemarkerCoreIteratorBlock *self = [FreemarkerCoreIteratorBlock alloc];
  FreemarkerCoreIteratorBlock_initWithFreemarkerCoreExpression_withNSString_withFreemarkerCoreTemplateElement_withBoolean_(self, listExp, loopVarName, nestedBlock, isForEach);
  return self;
}


#line 87
FreemarkerCoreIteratorBlock_IterationContext *FreemarkerCoreIteratorBlock_findEnclosingIterationContextWithFreemarkerCoreEnvironment_withNSString_(FreemarkerCoreEnvironment *env, NSString *loopVariableName) {
  FreemarkerCoreIteratorBlock_initialize();
  JavaUtilArrayList *ctxStack = [((FreemarkerCoreEnvironment *) nil_chk(env)) getLocalContextStack];
  if (ctxStack != nil) {
    for (jint i = [ctxStack size] - 1; i >= 0; i--) {
      id ctx = [ctxStack getWithInt:i];
      if ([ctx isKindOfClass:[FreemarkerCoreIteratorBlock_IterationContext class]] &&
#line 94
      (loopVariableName == nil ||
#line 95
      [loopVariableName isEqual:[((FreemarkerCoreIteratorBlock_IterationContext *) nil_chk(((FreemarkerCoreIteratorBlock_IterationContext *) check_class_cast(ctx, [FreemarkerCoreIteratorBlock_IterationContext class])))) getLoopVariableName]])) {
        return (FreemarkerCoreIteratorBlock_IterationContext *) check_class_cast(ctx, [FreemarkerCoreIteratorBlock_IterationContext class]);
      }
    }
  }
  return nil;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreIteratorBlock)


#line 171
@implementation FreemarkerCoreIteratorBlock_IterationContext


#line 188
- (instancetype)initWithFreemarkerCoreIteratorBlock:(FreemarkerCoreIteratorBlock *)outer$
                withFreemarkerTemplateTemplateModel:(id<FreemarkerTemplateTemplateModel>)listValue
                                       withNSString:(NSString *)loopVariableName {
  FreemarkerCoreIteratorBlock_IterationContext_initWithFreemarkerCoreIteratorBlock_withFreemarkerTemplateTemplateModel_withNSString_(self, outer$, listValue, loopVariableName);
  return self;
}


#line 193
- (jboolean)acceptWithFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env {
  return FreemarkerCoreIteratorBlock_IterationContext_executeNestedBlockWithFreemarkerCoreEnvironment_withFreemarkerCoreTemplateElement_(self, env, [this$0_ getNestedBlock]);
}

- (void)loopForItemsElementWithFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env
                       withFreemarkerCoreTemplateElement:(FreemarkerCoreTemplateElement *)nestedBlock
                                            withNSString:(NSString *)loopVarName {
  
#line 200
  @try {
    if (alreadyEntered_) {
      @throw new_FreemarkerCore_MiscTemplateException_initWithFreemarkerCoreEnvironment_withNSString_(env,
#line 203
      @"The #items directive was already entered earlier for this listing.");
    }
    alreadyEntered_ = YES;
    self->loopVarName_ = loopVarName;
    FreemarkerCoreIteratorBlock_IterationContext_executeNestedBlockWithFreemarkerCoreEnvironment_withFreemarkerCoreTemplateElement_(self, env, nestedBlock);
  }
  @finally {
    
#line 209
    self->loopVarName_ = nil;
  }
}


#line 217
- (jboolean)executeNestedBlockWithFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env
                          withFreemarkerCoreTemplateElement:(FreemarkerCoreTemplateElement *)nestedBlock {
  return FreemarkerCoreIteratorBlock_IterationContext_executeNestedBlockWithFreemarkerCoreEnvironment_withFreemarkerCoreTemplateElement_(self, env, nestedBlock);
}


#line 223
- (jboolean)executeNestedBlockInnerWithFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env
                               withFreemarkerCoreTemplateElement:(FreemarkerCoreTemplateElement *)nestedBlock {
  return FreemarkerCoreIteratorBlock_IterationContext_executeNestedBlockInnerWithFreemarkerCoreEnvironment_withFreemarkerCoreTemplateElement_(self, env, nestedBlock);
}


#line 301
- (NSString *)getLoopVariableName {
  return self->loopVarName_;
}

- (id<FreemarkerTemplateTemplateModel>)getLocalVariableWithNSString:(NSString *)name {
  NSString *loopVariableName = self->loopVarName_;
  if (loopVariableName != nil && [((NSString *) nil_chk(name)) hasPrefix:loopVariableName]) {
    switch (((jint) [name length]) - ((jint) [loopVariableName length])) {
      case 0:
      return loopVar_;
      case 6:
      if ([name hasSuffix:FreemarkerCoreIteratorBlock_IterationContext_LOOP_STATE_INDEX_]) {
        return new_FreemarkerTemplateSimpleNumber_initWithInt_(index_);
      }
      break;
      case 9:
      if ([name hasSuffix:FreemarkerCoreIteratorBlock_IterationContext_LOOP_STATE_HAS_NEXT_]) {
        return hasNext_ ? FreemarkerTemplateTemplateBooleanModel_get_TRUE__() : FreemarkerTemplateTemplateBooleanModel_get_FALSE__();
      }
      break;
    }
  }
  return nil;
}

- (id<JavaUtilCollection>)getLocalVariableNames {
  NSString *loopVariableName = self->loopVarName_;
  if (loopVariableName != nil) {
    if (localVarNames_ == nil) {
      localVarNames_ = new_JavaUtilArrayList_initWithInt_(3);
      [localVarNames_ addWithId:loopVariableName];
      [localVarNames_ addWithId:JreStrcat("$$", loopVariableName, FreemarkerCoreIteratorBlock_IterationContext_LOOP_STATE_INDEX_)];
      [localVarNames_ addWithId:JreStrcat("$$", loopVariableName, FreemarkerCoreIteratorBlock_IterationContext_LOOP_STATE_HAS_NEXT_)];
    }
    return localVarNames_;
  }
  else {
    
#line 337
    return JavaUtilCollections_get_EMPTY_LIST_();
  }
}


#line 341
- (jboolean)hasNext {
  return hasNext_;
}

- (jint)getIndex {
  return index_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithFreemarkerCoreIteratorBlock:withFreemarkerTemplateTemplateModel:withNSString:", "IterationContext", NULL, 0x1, NULL, NULL },
    { "acceptWithFreemarkerCoreEnvironment:", "accept", "Z", 0x0, "Lfreemarker.template.TemplateException;Ljava.io.IOException;", NULL },
    { "loopForItemsElementWithFreemarkerCoreEnvironment:withFreemarkerCoreTemplateElement:withNSString:", "loopForItemsElement", "V", 0x0, "Lfreemarker.core.NonSequenceOrCollectionException;Lfreemarker.template.TemplateModelException;Lfreemarker.core.InvalidReferenceException;Lfreemarker.template.TemplateException;Ljava.io.IOException;", NULL },
    { "executeNestedBlockWithFreemarkerCoreEnvironment:withFreemarkerCoreTemplateElement:", "executeNestedBlock", "Z", 0x2, "Lfreemarker.template.TemplateModelException;Lfreemarker.template.TemplateException;Ljava.io.IOException;Lfreemarker.core.NonSequenceOrCollectionException;Lfreemarker.core.InvalidReferenceException;", NULL },
    { "executeNestedBlockInnerWithFreemarkerCoreEnvironment:withFreemarkerCoreTemplateElement:", "executeNestedBlockInner", "Z", 0x2, "Lfreemarker.template.TemplateModelException;Lfreemarker.template.TemplateException;Ljava.io.IOException;Lfreemarker.core.NonSequenceOrCollectionException;Lfreemarker.core.InvalidReferenceException;", NULL },
    { "getLoopVariableName", NULL, "Ljava.lang.String;", 0x0, NULL, NULL },
    { "getLocalVariableWithNSString:", "getLocalVariable", "Lfreemarker.template.TemplateModel;", 0x1, NULL, NULL },
    { "getLocalVariableNames", NULL, "Ljava.util.Collection;", 0x1, NULL, NULL },
    { "hasNext", NULL, "Z", 0x0, NULL, NULL },
    { "getIndex", NULL, "I", 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lfreemarker.core.IteratorBlock;", NULL, NULL,  },
    { "LOOP_STATE_HAS_NEXT_", NULL, 0x1a, "Ljava.lang.String;", &FreemarkerCoreIteratorBlock_IterationContext_LOOP_STATE_HAS_NEXT_, NULL,  },
    { "LOOP_STATE_INDEX_", NULL, 0x1a, "Ljava.lang.String;", &FreemarkerCoreIteratorBlock_IterationContext_LOOP_STATE_INDEX_, NULL,  },
    { "openedIteratorModel_", NULL, 0x2, "Lfreemarker.template.TemplateModelIterator;", NULL, NULL,  },
    { "hasNext_", NULL, 0x2, "Z", NULL, NULL,  },
    { "loopVar_", NULL, 0x2, "Lfreemarker.template.TemplateModel;", NULL, NULL,  },
    { "index_", NULL, 0x2, "I", NULL, NULL,  },
    { "alreadyEntered_", NULL, 0x2, "Z", NULL, NULL,  },
    { "localVarNames_", NULL, 0x2, "Ljava.util.Collection;", NULL, NULL,  },
    { "loopVarName_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "listValue_", NULL, 0x12, "Lfreemarker.template.TemplateModel;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerCoreIteratorBlock_IterationContext = { 2, "IterationContext", "freemarker.core", "IteratorBlock", 0x0, 10, methods, 11, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerCoreIteratorBlock_IterationContext;
}

@end


#line 188
void FreemarkerCoreIteratorBlock_IterationContext_initWithFreemarkerCoreIteratorBlock_withFreemarkerTemplateTemplateModel_withNSString_(FreemarkerCoreIteratorBlock_IterationContext *self, FreemarkerCoreIteratorBlock *outer$, id<FreemarkerTemplateTemplateModel> listValue, NSString *loopVariableName) {
  self->this$0_ = outer$;
  (void) NSObject_init(self);
  self->localVarNames_ =
#line 181
  nil;
  
#line 189
  self->listValue_ = listValue;
  self->loopVarName_ = loopVariableName;
}


#line 188
FreemarkerCoreIteratorBlock_IterationContext *new_FreemarkerCoreIteratorBlock_IterationContext_initWithFreemarkerCoreIteratorBlock_withFreemarkerTemplateTemplateModel_withNSString_(FreemarkerCoreIteratorBlock *outer$, id<FreemarkerTemplateTemplateModel> listValue, NSString *loopVariableName) {
  FreemarkerCoreIteratorBlock_IterationContext *self = [FreemarkerCoreIteratorBlock_IterationContext alloc];
  FreemarkerCoreIteratorBlock_IterationContext_initWithFreemarkerCoreIteratorBlock_withFreemarkerTemplateTemplateModel_withNSString_(self, outer$, listValue, loopVariableName);
  return self;
}


#line 217
jboolean FreemarkerCoreIteratorBlock_IterationContext_executeNestedBlockWithFreemarkerCoreEnvironment_withFreemarkerCoreTemplateElement_(FreemarkerCoreIteratorBlock_IterationContext *self, FreemarkerCoreEnvironment *env, FreemarkerCoreTemplateElement *nestedBlock) {
  
#line 220
  return FreemarkerCoreIteratorBlock_IterationContext_executeNestedBlockInnerWithFreemarkerCoreEnvironment_withFreemarkerCoreTemplateElement_(self, env, nestedBlock);
}

jboolean FreemarkerCoreIteratorBlock_IterationContext_executeNestedBlockInnerWithFreemarkerCoreEnvironment_withFreemarkerCoreTemplateElement_(FreemarkerCoreIteratorBlock_IterationContext *self, FreemarkerCoreEnvironment *env, FreemarkerCoreTemplateElement *nestedBlock) {
  
#line 226
  jboolean listNotEmpty;
  if ([FreemarkerTemplateTemplateCollectionModel_class_() isInstance:self->listValue_]) {
    id<FreemarkerTemplateTemplateCollectionModel> collModel = (id<FreemarkerTemplateTemplateCollectionModel>) check_protocol_cast(self->listValue_, @protocol(FreemarkerTemplateTemplateCollectionModel));
    id<FreemarkerTemplateTemplateModelIterator> iterModel =
#line 230
    self->openedIteratorModel_ == nil ? [((id<FreemarkerTemplateTemplateCollectionModel>) nil_chk(collModel)) iterator] : self->openedIteratorModel_;
    self->hasNext_ = [iterModel hasNext];
    listNotEmpty = self->hasNext_;
    if (listNotEmpty) {
      if (self->loopVarName_ != nil) {
        @try {
          while (self->hasNext_) {
            self->loopVar_ = [iterModel next];
            self->hasNext_ = [iterModel hasNext];
            if (nestedBlock != nil) {
              [((FreemarkerCoreEnvironment *) nil_chk(env)) visitByHiddingParentWithFreemarkerCoreTemplateElement:nestedBlock];
            }
            self->index_++;
          }
        }
        @catch (
#line 244
        FreemarkerCoreBreakInstruction_Break *br) {
        }
        
#line 247
        self->openedIteratorModel_ = nil;
      }
      else {
        
#line 251
        self->openedIteratorModel_ = iterModel;
        if (nestedBlock != nil) {
          [((FreemarkerCoreEnvironment *) nil_chk(env)) visitByHiddingParentWithFreemarkerCoreTemplateElement:nestedBlock];
        }
      }
    }
  }
  else
#line 257
  if ([FreemarkerTemplateTemplateSequenceModel_class_() isInstance:self->listValue_]) {
    id<FreemarkerTemplateTemplateSequenceModel> seqModel = (id<FreemarkerTemplateTemplateSequenceModel>) check_protocol_cast(self->listValue_, @protocol(FreemarkerTemplateTemplateSequenceModel));
    jint size = [((id<FreemarkerTemplateTemplateSequenceModel>) nil_chk(seqModel)) size];
    listNotEmpty = (size != 0);
    if (listNotEmpty) {
      if (self->loopVarName_ != nil) {
        @try {
          for (self->index_ = 0; self->index_ < size; self->index_++) {
            self->loopVar_ = [seqModel getWithInt:self->index_];
            self->hasNext_ = (size > self->index_ + 1);
            if (nestedBlock != nil) {
              [((FreemarkerCoreEnvironment *) nil_chk(env)) visitByHiddingParentWithFreemarkerCoreTemplateElement:nestedBlock];
            }
          }
        }
        @catch (
#line 271
        FreemarkerCoreBreakInstruction_Break *br) {
        }
      }
      else {
        if (nestedBlock != nil) {
          [((FreemarkerCoreEnvironment *) nil_chk(env)) visitByHiddingParentWithFreemarkerCoreTemplateElement:nestedBlock];
        }
      }
    }
  }
  else
#line 280
  if ([((FreemarkerCoreEnvironment *) nil_chk(env)) isClassicCompatible]) {
    listNotEmpty = YES;
    if (self->loopVarName_ != nil) {
      self->loopVar_ = self->listValue_;
      self->hasNext_ = NO;
    }
    @try {
      if (nestedBlock != nil) {
        [env visitByHiddingParentWithFreemarkerCoreTemplateElement:nestedBlock];
      }
    }
    @catch (
#line 290
    FreemarkerCoreBreakInstruction_Break *br) {
    }
  }
  else {
    @throw new_FreemarkerCoreNonSequenceOrCollectionException_initWithFreemarkerCoreExpression_withFreemarkerTemplateTemplateModel_withFreemarkerCoreEnvironment_(self->this$0_->listExp_, self->listValue_,
#line 295
    env);
  }
  
#line 298
  return listNotEmpty;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreIteratorBlock_IterationContext)
