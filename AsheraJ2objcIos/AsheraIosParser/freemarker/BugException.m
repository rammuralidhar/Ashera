//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/BugException.java
//


#include "BugException.h"
#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/Throwable.h"

#line 0 "/Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/BugException.java"

static NSString *FreemarkerCoreBugException_COMMON_MESSAGE_ = 
#line 27
@"A bug was detected in FreeMarker; please report it with stack-trace";
J2OBJC_STATIC_FIELD_GETTER(FreemarkerCoreBugException, COMMON_MESSAGE_, NSString *)


#line 24
@implementation FreemarkerCoreBugException


#line 29
- (instancetype)init {
  FreemarkerCoreBugException_init(self);
  return self;
}


#line 33
- (instancetype)initWithNSString:(NSString *)message {
  FreemarkerCoreBugException_initWithNSString_(self, message);
  return self;
}


#line 37
- (instancetype)initWithJavaLangThrowable:(JavaLangThrowable *)cause {
  FreemarkerCoreBugException_initWithJavaLangThrowable_(self, cause);
  return self;
}


#line 41
- (instancetype)initWithNSString:(NSString *)message
           withJavaLangThrowable:(JavaLangThrowable *)cause {
  FreemarkerCoreBugException_initWithNSString_withJavaLangThrowable_(self, message, cause);
  return self;
}


#line 45
- (instancetype)initWithInt:(jint)value {
  FreemarkerCoreBugException_initWithInt_(self, value);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "BugException", NULL, 0x1, NULL, NULL },
    { "initWithNSString:", "BugException", NULL, 0x1, NULL, NULL },
    { "initWithJavaLangThrowable:", "BugException", NULL, 0x1, NULL, NULL },
    { "initWithNSString:withJavaLangThrowable:", "BugException", NULL, 0x1, NULL, NULL },
    { "initWithInt:", "BugException", NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "COMMON_MESSAGE_", NULL, 0x1a, "Ljava.lang.String;", &FreemarkerCoreBugException_COMMON_MESSAGE_, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerCoreBugException = { 2, "BugException", "freemarker.core", NULL, 0x1, 5, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerCoreBugException;
}

@end


#line 29
void FreemarkerCoreBugException_init(FreemarkerCoreBugException *self) {
  (void) FreemarkerCoreBugException_initWithJavaLangThrowable_(self, nil);
}


#line 29
FreemarkerCoreBugException *new_FreemarkerCoreBugException_init() {
  FreemarkerCoreBugException *self = [FreemarkerCoreBugException alloc];
  FreemarkerCoreBugException_init(self);
  return self;
}


#line 33
void FreemarkerCoreBugException_initWithNSString_(FreemarkerCoreBugException *self, NSString *message) {
  (void) FreemarkerCoreBugException_initWithNSString_withJavaLangThrowable_(self, message, nil);
}


#line 33
FreemarkerCoreBugException *new_FreemarkerCoreBugException_initWithNSString_(NSString *message) {
  FreemarkerCoreBugException *self = [FreemarkerCoreBugException alloc];
  FreemarkerCoreBugException_initWithNSString_(self, message);
  return self;
}


#line 37
void FreemarkerCoreBugException_initWithJavaLangThrowable_(FreemarkerCoreBugException *self, JavaLangThrowable *cause) {
  (void) JavaLangRuntimeException_initWithNSString_withJavaLangThrowable_(self, FreemarkerCoreBugException_COMMON_MESSAGE_, cause);
}


#line 37
FreemarkerCoreBugException *new_FreemarkerCoreBugException_initWithJavaLangThrowable_(JavaLangThrowable *cause) {
  FreemarkerCoreBugException *self = [FreemarkerCoreBugException alloc];
  FreemarkerCoreBugException_initWithJavaLangThrowable_(self, cause);
  return self;
}


#line 41
void FreemarkerCoreBugException_initWithNSString_withJavaLangThrowable_(FreemarkerCoreBugException *self, NSString *message, JavaLangThrowable *cause) {
  (void) JavaLangRuntimeException_initWithNSString_withJavaLangThrowable_(self, JreStrcat("$$$", FreemarkerCoreBugException_COMMON_MESSAGE_, @": ", message), cause);
}


#line 41
FreemarkerCoreBugException *new_FreemarkerCoreBugException_initWithNSString_withJavaLangThrowable_(NSString *message, JavaLangThrowable *cause) {
  FreemarkerCoreBugException *self = [FreemarkerCoreBugException alloc];
  FreemarkerCoreBugException_initWithNSString_withJavaLangThrowable_(self, message, cause);
  return self;
}


#line 45
void FreemarkerCoreBugException_initWithInt_(FreemarkerCoreBugException *self, jint value) {
  (void) FreemarkerCoreBugException_initWithNSString_(self, NSString_valueOfInt_(value));
}


#line 45
FreemarkerCoreBugException *new_FreemarkerCoreBugException_initWithInt_(jint value) {
  FreemarkerCoreBugException *self = [FreemarkerCoreBugException alloc];
  FreemarkerCoreBugException_initWithInt_(self, value);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreBugException)
