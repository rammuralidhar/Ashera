//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/cache/TemplateNameFormat.java
//


#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "MalformedTemplateNameException.h"
#include "StringUtil.h"
#include "TemplateNameFormat.h"

#line 0 "/Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/cache/TemplateNameFormat.java"

@interface FreemarkerCacheTemplateNameFormat ()

- (instancetype)init;

+ (void)checkNameHasNoNullCharacterWithNSString:(NSString *)name;

+ (FreemarkerTemplateMalformedTemplateNameException *)newRootLeavingExceptionWithNSString:(NSString *)name OBJC_METHOD_FAMILY_NONE;

@end

__attribute__((unused)) static void FreemarkerCacheTemplateNameFormat_init(FreemarkerCacheTemplateNameFormat *self);

__attribute__((unused)) static void FreemarkerCacheTemplateNameFormat_checkNameHasNoNullCharacterWithNSString_(NSString *name);

__attribute__((unused)) static FreemarkerTemplateMalformedTemplateNameException *FreemarkerCacheTemplateNameFormat_newRootLeavingExceptionWithNSString_(NSString *name);

@interface FreemarkerCacheTemplateNameFormat_Default020300 : FreemarkerCacheTemplateNameFormat

- (NSString *)toAbsoluteNameWithNSString:(NSString *)baseName
                            withNSString:(NSString *)targetName;

- (NSString *)normalizeAbsoluteNameWithNSString:(NSString *)name;

- (NSString *)description;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(FreemarkerCacheTemplateNameFormat_Default020300)

__attribute__((unused)) static void FreemarkerCacheTemplateNameFormat_Default020300_init(FreemarkerCacheTemplateNameFormat_Default020300 *self);

__attribute__((unused)) static FreemarkerCacheTemplateNameFormat_Default020300 *new_FreemarkerCacheTemplateNameFormat_Default020300_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerCacheTemplateNameFormat_Default020300)

@interface FreemarkerCacheTemplateNameFormat_Default020400 : FreemarkerCacheTemplateNameFormat

- (NSString *)toAbsoluteNameWithNSString:(NSString *)baseName
                            withNSString:(NSString *)targetName;

- (NSString *)normalizeAbsoluteNameWithNSString:(NSString *)name;

- (jint)findSchemeSectionEndWithNSString:(NSString *)name;

- (NSString *)removeRedundantSlashesWithNSString:(NSString *)path;

- (NSString *)removeDotStepsWithNSString:(NSString *)path;

/**
 @param name The original name, needed for exception error messages.
 */
- (NSString *)resolveDotDotStepsWithNSString:(NSString *)path
                                withNSString:(NSString *)name;

- (NSString *)removeRedundantStarStepsWithNSString:(NSString *)path;

- (NSString *)description;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(FreemarkerCacheTemplateNameFormat_Default020400)

__attribute__((unused)) static jint FreemarkerCacheTemplateNameFormat_Default020400_findSchemeSectionEndWithNSString_(FreemarkerCacheTemplateNameFormat_Default020400 *self, NSString *name);

__attribute__((unused)) static NSString *FreemarkerCacheTemplateNameFormat_Default020400_removeRedundantSlashesWithNSString_(FreemarkerCacheTemplateNameFormat_Default020400 *self, NSString *path);

__attribute__((unused)) static NSString *FreemarkerCacheTemplateNameFormat_Default020400_removeDotStepsWithNSString_(FreemarkerCacheTemplateNameFormat_Default020400 *self, NSString *path);

__attribute__((unused)) static NSString *FreemarkerCacheTemplateNameFormat_Default020400_resolveDotDotStepsWithNSString_withNSString_(FreemarkerCacheTemplateNameFormat_Default020400 *self, NSString *path, NSString *name);

__attribute__((unused)) static NSString *FreemarkerCacheTemplateNameFormat_Default020400_removeRedundantStarStepsWithNSString_(FreemarkerCacheTemplateNameFormat_Default020400 *self, NSString *path);

__attribute__((unused)) static void FreemarkerCacheTemplateNameFormat_Default020400_init(FreemarkerCacheTemplateNameFormat_Default020400 *self);

__attribute__((unused)) static FreemarkerCacheTemplateNameFormat_Default020400 *new_FreemarkerCacheTemplateNameFormat_Default020400_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerCacheTemplateNameFormat_Default020400)

J2OBJC_INITIALIZED_DEFN(FreemarkerCacheTemplateNameFormat)

FreemarkerCacheTemplateNameFormat *FreemarkerCacheTemplateNameFormat_DEFAULT_2_3_0_;
FreemarkerCacheTemplateNameFormat *FreemarkerCacheTemplateNameFormat_DEFAULT_2_4_0_;


#line 31
@implementation FreemarkerCacheTemplateNameFormat

- (instancetype)init {
  FreemarkerCacheTemplateNameFormat_init(self);
  return self;
}


#line 103
- (NSString *)toAbsoluteNameWithNSString:(NSString *)baseName
                            withNSString:(NSString *)targetName {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 109
- (NSString *)normalizeAbsoluteNameWithNSString:(NSString *)name {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 412
+ (void)checkNameHasNoNullCharacterWithNSString:(NSString *)name {
  FreemarkerCacheTemplateNameFormat_checkNameHasNoNullCharacterWithNSString_(name);
}


#line 419
+ (FreemarkerTemplateMalformedTemplateNameException *)newRootLeavingExceptionWithNSString:(NSString *)name {
  return FreemarkerCacheTemplateNameFormat_newRootLeavingExceptionWithNSString_(name);
}

+ (void)initialize {
  if (self == [FreemarkerCacheTemplateNameFormat class]) {
    FreemarkerCacheTemplateNameFormat_DEFAULT_2_3_0_ = new_FreemarkerCacheTemplateNameFormat_Default020300_init();
    FreemarkerCacheTemplateNameFormat_DEFAULT_2_4_0_ = new_FreemarkerCacheTemplateNameFormat_Default020400_init();
    J2OBJC_SET_INITIALIZED(FreemarkerCacheTemplateNameFormat)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "TemplateNameFormat", NULL, 0x2, NULL, NULL },
    { "toAbsoluteNameWithNSString:withNSString:", "toAbsoluteName", "Ljava.lang.String;", 0x400, "Lfreemarker.template.MalformedTemplateNameException;", NULL },
    { "normalizeAbsoluteNameWithNSString:", "normalizeAbsoluteName", "Ljava.lang.String;", 0x400, "Lfreemarker.template.MalformedTemplateNameException;", NULL },
    { "checkNameHasNoNullCharacterWithNSString:", "checkNameHasNoNullCharacter", "V", 0xa, "Lfreemarker.template.MalformedTemplateNameException;", NULL },
    { "newRootLeavingExceptionWithNSString:", "newRootLeavingException", "Lfreemarker.template.MalformedTemplateNameException;", 0xa, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "DEFAULT_2_3_0_", NULL, 0x19, "Lfreemarker.cache.TemplateNameFormat;", &FreemarkerCacheTemplateNameFormat_DEFAULT_2_3_0_, NULL,  },
    { "DEFAULT_2_4_0_", NULL, 0x19, "Lfreemarker.cache.TemplateNameFormat;", &FreemarkerCacheTemplateNameFormat_DEFAULT_2_4_0_, NULL,  },
  };
  static const char *inner_classes[] = {"Lfreemarker.cache.TemplateNameFormat$Default020300;", "Lfreemarker.cache.TemplateNameFormat$Default020400;"};
  static const J2ObjcClassInfo _FreemarkerCacheTemplateNameFormat = { 2, "TemplateNameFormat", "freemarker.cache", NULL, 0x401, 5, methods, 2, fields, 0, NULL, 2, inner_classes, NULL, NULL };
  return &_FreemarkerCacheTemplateNameFormat;
}

@end


#line 33
void FreemarkerCacheTemplateNameFormat_init(FreemarkerCacheTemplateNameFormat *self) {
  (void) NSObject_init(self);
}


#line 412
void FreemarkerCacheTemplateNameFormat_checkNameHasNoNullCharacterWithNSString_(NSString *name) {
  FreemarkerCacheTemplateNameFormat_initialize();
  
#line 413
  if ([((NSString *) nil_chk(name)) indexOf:0] != -1) {
    @throw new_FreemarkerTemplateMalformedTemplateNameException_initWithNSString_withNSString_(name,
#line 415
    @"Null character (\\u0000) in the name; possible attack attempt");
  }
}


#line 419
FreemarkerTemplateMalformedTemplateNameException *FreemarkerCacheTemplateNameFormat_newRootLeavingExceptionWithNSString_(NSString *name) {
  FreemarkerCacheTemplateNameFormat_initialize();
  
#line 420
  return new_FreemarkerTemplateMalformedTemplateNameException_initWithNSString_withNSString_(name, @"Backing out from the root directory is not allowed");
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCacheTemplateNameFormat)


#line 111
@implementation FreemarkerCacheTemplateNameFormat_Default020300


#line 112
- (NSString *)toAbsoluteNameWithNSString:(NSString *)baseName
                            withNSString:(NSString *)targetName {
  if (baseName == nil) {
    return targetName;
  }
  
#line 117
  if ([((NSString *) nil_chk(targetName)) indexOfString:@"://"] > 0) {
    return targetName;
  }
  else
#line 119
  if ([targetName hasPrefix:@"/"]) {
    jint schemeSepIdx = [((NSString *) nil_chk(baseName)) indexOfString:@"://"];
    if (schemeSepIdx > 0) {
      return JreStrcat("$$", [baseName substring:0 endIndex:schemeSepIdx + 2], targetName);
    }
    else {
      
#line 124
      return [targetName substring:1];
    }
  }
  else {
    
#line 127
    if (![((NSString *) nil_chk(baseName)) hasSuffix:@"/"]) {
      baseName = [baseName substring:0 endIndex:[baseName lastIndexOfString:@"/"] + 1];
    }
    return JreStrcat("$$", baseName, targetName);
  }
}


#line 134
- (NSString *)normalizeAbsoluteNameWithNSString:(NSString *)name {
  
#line 136
  FreemarkerCacheTemplateNameFormat_checkNameHasNoNullCharacterWithNSString_(name);
  
#line 140
  NSString *path = name;
  
#line 142
  for (; ; ) {
    jint parentDirPathLoc = [((NSString *) nil_chk(path)) indexOfString:@"/../"];
    if (parentDirPathLoc == 0) {
      
#line 147
      @throw FreemarkerCacheTemplateNameFormat_newRootLeavingExceptionWithNSString_(name);
    }
    if (parentDirPathLoc == -1) {
      if ([path hasPrefix:@"../"]) {
        @throw FreemarkerCacheTemplateNameFormat_newRootLeavingExceptionWithNSString_(name);
      }
      break;
    }
    jint previousSlashLoc = [path lastIndexOf:'/' fromIndex:parentDirPathLoc - 1];
    path = JreStrcat("$$", [path substring:0 endIndex:previousSlashLoc + 1],
#line 157
    [path substring:parentDirPathLoc + ((jint) [@"/../" length])]);
  }
  for (; ; ) {
    jint currentDirPathLoc = [((NSString *) nil_chk(path)) indexOfString:@"/./"];
    if (currentDirPathLoc == -1) {
      if ([path hasPrefix:@"./"]) {
        path = [path substring:((jint) [@"./" length])];
      }
      break;
    }
    path = JreStrcat("$$", [((NSString *) nil_chk(path)) substring:0 endIndex:currentDirPathLoc],
#line 168
    [path substring:currentDirPathLoc + ((jint) [@"/./" length]) - 1]);
  }
  
#line 171
  if (((jint) [((NSString *) nil_chk(path)) length]) > 1 && [path charAtWithInt:0] == '/') {
    path = [path substring:1];
  }
  return path;
}


#line 177
- (NSString *)description {
  return @"TemplateNameFormat.DEFAULT_2_3_0";
}

- (instancetype)init {
  FreemarkerCacheTemplateNameFormat_Default020300_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "toAbsoluteNameWithNSString:withNSString:", "toAbsoluteName", "Ljava.lang.String;", 0x0, NULL, NULL },
    { "normalizeAbsoluteNameWithNSString:", "normalizeAbsoluteName", "Ljava.lang.String;", 0x0, "Lfreemarker.template.MalformedTemplateNameException;", NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "init", NULL, NULL, 0x2, NULL, NULL },
  };
  static const J2ObjcClassInfo _FreemarkerCacheTemplateNameFormat_Default020300 = { 2, "Default020300", "freemarker.cache", "TemplateNameFormat", 0x1a, 4, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerCacheTemplateNameFormat_Default020300;
}

@end

void FreemarkerCacheTemplateNameFormat_Default020300_init(FreemarkerCacheTemplateNameFormat_Default020300 *self) {
  (void) FreemarkerCacheTemplateNameFormat_init(self);
}

FreemarkerCacheTemplateNameFormat_Default020300 *new_FreemarkerCacheTemplateNameFormat_Default020300_init() {
  FreemarkerCacheTemplateNameFormat_Default020300 *self = [FreemarkerCacheTemplateNameFormat_Default020300 alloc];
  FreemarkerCacheTemplateNameFormat_Default020300_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCacheTemplateNameFormat_Default020300)


#line 183
@implementation FreemarkerCacheTemplateNameFormat_Default020400


#line 184
- (NSString *)toAbsoluteNameWithNSString:(NSString *)baseName
                            withNSString:(NSString *)targetName {
  if (baseName == nil) {
    return targetName;
  }
  
#line 189
  if (FreemarkerCacheTemplateNameFormat_Default020400_findSchemeSectionEndWithNSString_(self, targetName) != 0) {
    return targetName;
  }
  else
#line 191
  if ([((NSString *) nil_chk(targetName)) hasPrefix:@"/"]) {
    NSString *targetNameAsRelative = [targetName substring:1];
    jint schemeSectionEnd = FreemarkerCacheTemplateNameFormat_Default020400_findSchemeSectionEndWithNSString_(self, baseName);
    if (schemeSectionEnd == 0) {
      return targetNameAsRelative;
    }
    else {
      return JreStrcat("$$", [((NSString *) nil_chk(baseName)) substring:0 endIndex:schemeSectionEnd], targetNameAsRelative);
    }
  }
  else {
    
#line 201
    if (![((NSString *) nil_chk(baseName)) hasSuffix:@"/"]) {
      
#line 203
      jint baseEnd = [baseName lastIndexOfString:@"/"] + 1;
      if (baseEnd == 0) {
        
#line 206
        baseEnd = FreemarkerCacheTemplateNameFormat_Default020400_findSchemeSectionEndWithNSString_(self, baseName);
      }
      baseName = [baseName substring:0 endIndex:baseEnd];
    }
    return JreStrcat("$$", baseName, targetName);
  }
}


#line 214
- (NSString *)normalizeAbsoluteNameWithNSString:(NSString *)name {
  
#line 216
  FreemarkerCacheTemplateNameFormat_checkNameHasNoNullCharacterWithNSString_(name);
  
#line 218
  if ([((NSString *) nil_chk(name)) indexOf:'\\'] != -1) {
    @throw new_FreemarkerTemplateMalformedTemplateNameException_initWithNSString_withNSString_(
#line 220
    name,
#line 221
    @"Backslash (\"\\\") is not allowed in template names. Use slash (\"/\") instead.");
  }
  
#line 225
  NSString *scheme;
  NSString *path;
  {
    jint schemeSectionEnd = FreemarkerCacheTemplateNameFormat_Default020400_findSchemeSectionEndWithNSString_(self, name);
    if (schemeSectionEnd == 0) {
      scheme = nil;
      path = name;
    }
    else {
      
#line 233
      scheme = [name substring:0 endIndex:schemeSectionEnd];
      path = [name substring:schemeSectionEnd];
    }
  }
  
#line 238
  if ([((NSString *) nil_chk(path)) indexOf:':'] != -1) {
    @throw new_FreemarkerTemplateMalformedTemplateNameException_initWithNSString_withNSString_(name, @"The ':' character can only be used after the scheme name (if there's any), not in the path part");
  }
  
#line 244
  path = FreemarkerCacheTemplateNameFormat_Default020400_removeRedundantSlashesWithNSString_(self, path);
  
#line 247
  path = FreemarkerCacheTemplateNameFormat_Default020400_removeDotStepsWithNSString_(self, path);
  
#line 249
  path = FreemarkerCacheTemplateNameFormat_Default020400_resolveDotDotStepsWithNSString_withNSString_(self, path, name);
  
#line 251
  path = FreemarkerCacheTemplateNameFormat_Default020400_removeRedundantStarStepsWithNSString_(self, path);
  
#line 253
  return scheme == nil ? path : JreStrcat("$$", scheme, path);
}


#line 256
- (jint)findSchemeSectionEndWithNSString:(NSString *)name {
  return FreemarkerCacheTemplateNameFormat_Default020400_findSchemeSectionEndWithNSString_(self, name);
}


#line 271
- (NSString *)removeRedundantSlashesWithNSString:(NSString *)path {
  return FreemarkerCacheTemplateNameFormat_Default020400_removeRedundantSlashesWithNSString_(self, path);
}


#line 280
- (NSString *)removeDotStepsWithNSString:(NSString *)path {
  return FreemarkerCacheTemplateNameFormat_Default020400_removeDotStepsWithNSString_(self, path);
}


#line 315
- (NSString *)resolveDotDotStepsWithNSString:(NSString *)path
                                withNSString:(NSString *)name {
  return FreemarkerCacheTemplateNameFormat_Default020400_resolveDotDotStepsWithNSString_withNSString_(self, path, name);
}


#line 377
- (NSString *)removeRedundantStarStepsWithNSString:(NSString *)path {
  return FreemarkerCacheTemplateNameFormat_Default020400_removeRedundantStarStepsWithNSString_(self, path);
}


#line 407
- (NSString *)description {
  return @"TemplateNameFormat.DEFAULT_2_4_0";
}

- (instancetype)init {
  FreemarkerCacheTemplateNameFormat_Default020400_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "toAbsoluteNameWithNSString:withNSString:", "toAbsoluteName", "Ljava.lang.String;", 0x0, NULL, NULL },
    { "normalizeAbsoluteNameWithNSString:", "normalizeAbsoluteName", "Ljava.lang.String;", 0x0, "Lfreemarker.template.MalformedTemplateNameException;", NULL },
    { "findSchemeSectionEndWithNSString:", "findSchemeSectionEnd", "I", 0x2, NULL, NULL },
    { "removeRedundantSlashesWithNSString:", "removeRedundantSlashes", "Ljava.lang.String;", 0x2, NULL, NULL },
    { "removeDotStepsWithNSString:", "removeDotSteps", "Ljava.lang.String;", 0x2, NULL, NULL },
    { "resolveDotDotStepsWithNSString:withNSString:", "resolveDotDotSteps", "Ljava.lang.String;", 0x2, "Lfreemarker.template.MalformedTemplateNameException;", NULL },
    { "removeRedundantStarStepsWithNSString:", "removeRedundantStarSteps", "Ljava.lang.String;", 0x2, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "init", NULL, NULL, 0x2, NULL, NULL },
  };
  static const J2ObjcClassInfo _FreemarkerCacheTemplateNameFormat_Default020400 = { 2, "Default020400", "freemarker.cache", "TemplateNameFormat", 0x1a, 9, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerCacheTemplateNameFormat_Default020400;
}

@end


#line 256
jint FreemarkerCacheTemplateNameFormat_Default020400_findSchemeSectionEndWithNSString_(FreemarkerCacheTemplateNameFormat_Default020400 *self, NSString *name) {
  jint schemeColonIdx = [((NSString *) nil_chk(name)) indexOfString:@":"];
  if (schemeColonIdx == -1 || [name lastIndexOf:'/' fromIndex:schemeColonIdx - 1] != -1) {
    return 0;
  }
  else {
    if (schemeColonIdx + 2 < ((jint) [name length]) &&
#line 263
    [name charAtWithInt:schemeColonIdx + 1] == '/' && [name charAtWithInt:schemeColonIdx + 2] == '/') {
      return schemeColonIdx + 3;
    }
    else {
      
#line 266
      return schemeColonIdx + 1;
    }
  }
}


#line 271
NSString *FreemarkerCacheTemplateNameFormat_Default020400_removeRedundantSlashesWithNSString_(FreemarkerCacheTemplateNameFormat_Default020400 *self, NSString *path) {
  NSString *prevName;
  do {
    prevName = path;
    path = FreemarkerTemplateUtilityStringUtil_replaceWithNSString_withNSString_withNSString_(path, @"//", @"/");
  }
  while (
#line 276
  prevName != path);
  return [((NSString *) nil_chk(path)) hasPrefix:@"/"] ? [path substring:1] : path;
}


#line 280
NSString *FreemarkerCacheTemplateNameFormat_Default020400_removeDotStepsWithNSString_(FreemarkerCacheTemplateNameFormat_Default020400 *self, NSString *path) {
  jint nextFromIdx = ((jint) [((NSString *) nil_chk(path)) length]) - 1;
  while (YES) {
    {
      
#line 283
      jint dotIdx = [path lastIndexOf:'.' fromIndex:nextFromIdx];
      if (dotIdx < 0) {
        return path;
      }
      nextFromIdx = dotIdx - 1;
      
#line 289
      if (dotIdx != 0 && [path charAtWithInt:dotIdx - 1] != '/') {
        
#line 291
        goto continue_findDotSteps;
      }
      
#line 294
      jboolean slashRight;
      if (dotIdx + 1 == ((jint) [path length])) {
        slashRight = NO;
      }
      else
#line 297
      if ([path charAtWithInt:dotIdx + 1] == '/') {
        slashRight = YES;
      }
      else {
        goto continue_findDotSteps;
      }
      
#line 304
      if (slashRight) {
        path = JreStrcat("$$", [path substring:0 endIndex:dotIdx], [path substring:dotIdx + 2]);
      }
      else {
        
#line 307
        path = [path substring:0 endIndex:((jint) [path length]) - 1];
      }
    }
    continue_findDotSteps: ;
  }
}


#line 315
NSString *FreemarkerCacheTemplateNameFormat_Default020400_resolveDotDotStepsWithNSString_withNSString_(FreemarkerCacheTemplateNameFormat_Default020400 *self, NSString *path, NSString *name) {
  jint nextFromIdx = 0;
  while (YES) {
    {
      
#line 318
      jint dotDotIdx = [((NSString *) nil_chk(path)) indexOfString:@".." fromIndex:nextFromIdx];
      if (dotDotIdx < 0) {
        return path;
      }
      
#line 323
      if (dotDotIdx == 0) {
        @throw FreemarkerCacheTemplateNameFormat_newRootLeavingExceptionWithNSString_(name);
      }
      else
#line 325
      if ([path charAtWithInt:dotDotIdx - 1] != '/') {
        
#line 327
        nextFromIdx = dotDotIdx + 3;
        goto continue_findDotDotSteps;
      }
      
#line 332
      jboolean slashRight;
      if (dotDotIdx + 2 == ((jint) [path length])) {
        slashRight = NO;
      }
      else
#line 335
      if ([path charAtWithInt:dotDotIdx + 2] == '/') {
        slashRight = YES;
      }
      else {
        nextFromIdx = dotDotIdx + 3;
        goto continue_findDotDotSteps;
      }
      
#line 343
      jint previousSlashIdx;
      jboolean skippedStarStep = NO;
      {
        jint searchSlashBacwardsFrom = dotDotIdx - 2;
        while (YES) {
          if (searchSlashBacwardsFrom == -1) {
            @throw FreemarkerCacheTemplateNameFormat_newRootLeavingExceptionWithNSString_(name);
          }
          previousSlashIdx = [path lastIndexOf:'/' fromIndex:searchSlashBacwardsFrom];
          if (previousSlashIdx == -1) {
            if (searchSlashBacwardsFrom == 0 && [path charAtWithInt:0] == '*') {
              
#line 355
              @throw FreemarkerCacheTemplateNameFormat_newRootLeavingExceptionWithNSString_(name);
            }
            goto break_scanBackwardsForSlash;
          }
          if ([path charAtWithInt:previousSlashIdx + 1] == '*' && [path charAtWithInt:previousSlashIdx + 2] == '/') {
            skippedStarStep = YES;
            searchSlashBacwardsFrom = previousSlashIdx - 1;
          }
          else {
            
#line 363
            goto break_scanBackwardsForSlash;
          }
        }
        break_scanBackwardsForSlash: ;
      }
      
#line 370
      path = JreStrcat("$$$", [path substring:0 endIndex:previousSlashIdx + 1],
#line 371
      (skippedStarStep ? @"*/" : @""),
#line 372
      [path substring:dotDotIdx + (slashRight ? 3 : 2)]);
      nextFromIdx = previousSlashIdx + 1;
    }
    continue_findDotDotSteps: ;
  }
}


#line 377
NSString *FreemarkerCacheTemplateNameFormat_Default020400_removeRedundantStarStepsWithNSString_(FreemarkerCacheTemplateNameFormat_Default020400 *self, NSString *path) {
  NSString *prevName;
  do {
    jint supiciousIdx = [((NSString *) nil_chk(path)) indexOfString:@"*/*"];
    if (supiciousIdx == -1) {
      goto break_removeDoubleStarSteps;
    }
    
#line 385
    prevName = path;
    
#line 388
    if ((supiciousIdx == 0 || [path charAtWithInt:supiciousIdx - 1] == '/') &&
#line 389
    (supiciousIdx + 3 == ((jint) [path length]) || [path charAtWithInt:supiciousIdx + 3] == '/')) {
      path = JreStrcat("$$", [path substring:0 endIndex:supiciousIdx], [path substring:supiciousIdx + 2]);
    }
  }
  while (
#line 392
  prevName != path);
  break_removeDoubleStarSteps: ;
  
#line 395
  if ([((NSString *) nil_chk(path)) hasPrefix:@"*"]) {
    if (((jint) [path length]) == 1) {
      path = @"";
    }
    else
#line 398
    if ([path charAtWithInt:1] == '/') {
      path = [path substring:2];
    }
  }
  
#line 404
  return path;
}

void FreemarkerCacheTemplateNameFormat_Default020400_init(FreemarkerCacheTemplateNameFormat_Default020400 *self) {
  (void) FreemarkerCacheTemplateNameFormat_init(self);
}

FreemarkerCacheTemplateNameFormat_Default020400 *new_FreemarkerCacheTemplateNameFormat_Default020400_init() {
  FreemarkerCacheTemplateNameFormat_Default020400 *self = [FreemarkerCacheTemplateNameFormat_Default020400 alloc];
  FreemarkerCacheTemplateNameFormat_Default020400_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCacheTemplateNameFormat_Default020400)
