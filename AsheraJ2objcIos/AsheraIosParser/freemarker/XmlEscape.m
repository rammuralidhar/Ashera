//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/template/utility/XmlEscape.java
//


#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "XmlEscape.h"
#include "java/io/IOException.h"
#include "java/io/Writer.h"
#include "java/util/Map.h"

#line 0 "/Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/template/utility/XmlEscape.java"

static IOSCharArray *FreemarkerTemplateUtilityXmlEscape_LT_;
J2OBJC_STATIC_FIELD_GETTER(FreemarkerTemplateUtilityXmlEscape, LT_, IOSCharArray *)

static IOSCharArray *FreemarkerTemplateUtilityXmlEscape_GT_;
J2OBJC_STATIC_FIELD_GETTER(FreemarkerTemplateUtilityXmlEscape, GT_, IOSCharArray *)

static IOSCharArray *FreemarkerTemplateUtilityXmlEscape_AMP_;
J2OBJC_STATIC_FIELD_GETTER(FreemarkerTemplateUtilityXmlEscape, AMP_, IOSCharArray *)

static IOSCharArray *FreemarkerTemplateUtilityXmlEscape_QUOT_;
J2OBJC_STATIC_FIELD_GETTER(FreemarkerTemplateUtilityXmlEscape, QUOT_, IOSCharArray *)

static IOSCharArray *FreemarkerTemplateUtilityXmlEscape_APOS_;
J2OBJC_STATIC_FIELD_GETTER(FreemarkerTemplateUtilityXmlEscape, APOS_, IOSCharArray *)

@interface FreemarkerTemplateUtilityXmlEscape_$1 : JavaIoWriter {
 @public
  JavaIoWriter *val$out_;
}

- (void)writeWithInt:(jint)c;

- (void)writeWithCharArray:(IOSCharArray *)cbuf
                   withInt:(jint)off
                   withInt:(jint)len;

- (void)flush;

- (void)close;

- (instancetype)initWithJavaIoWriter:(JavaIoWriter *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(FreemarkerTemplateUtilityXmlEscape_$1)

J2OBJC_FIELD_SETTER(FreemarkerTemplateUtilityXmlEscape_$1, val$out_, JavaIoWriter *)

__attribute__((unused)) static void FreemarkerTemplateUtilityXmlEscape_$1_initWithJavaIoWriter_(FreemarkerTemplateUtilityXmlEscape_$1 *self, JavaIoWriter *capture$0);

__attribute__((unused)) static FreemarkerTemplateUtilityXmlEscape_$1 *new_FreemarkerTemplateUtilityXmlEscape_$1_initWithJavaIoWriter_(JavaIoWriter *capture$0) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerTemplateUtilityXmlEscape_$1)

J2OBJC_INITIALIZED_DEFN(FreemarkerTemplateUtilityXmlEscape)


#line 32
@implementation FreemarkerTemplateUtilityXmlEscape


#line 40
- (JavaIoWriter *)getWriterWithJavaIoWriter:(JavaIoWriter *)outArg
                            withJavaUtilMap:(id<JavaUtilMap>)args {
  
#line 42
  return new_FreemarkerTemplateUtilityXmlEscape_$1_initWithJavaIoWriter_(outArg);
}

- (instancetype)init {
  FreemarkerTemplateUtilityXmlEscape_init(self);
  return self;
}

+ (void)initialize {
  if (self == [FreemarkerTemplateUtilityXmlEscape class]) {
    FreemarkerTemplateUtilityXmlEscape_LT_ =
#line 34
    [@"&lt;" toCharArray];
    FreemarkerTemplateUtilityXmlEscape_GT_ =
#line 35
    [@"&gt;" toCharArray];
    FreemarkerTemplateUtilityXmlEscape_AMP_ =
#line 36
    [@"&amp;" toCharArray];
    FreemarkerTemplateUtilityXmlEscape_QUOT_ =
#line 37
    [@"&quot;" toCharArray];
    FreemarkerTemplateUtilityXmlEscape_APOS_ =
#line 38
    [@"&apos;" toCharArray];
    J2OBJC_SET_INITIALIZED(FreemarkerTemplateUtilityXmlEscape)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getWriterWithJavaIoWriter:withJavaUtilMap:", "getWriter", "Ljava.io.Writer;", 0x1, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "LT_", NULL, 0x1a, "[C", &FreemarkerTemplateUtilityXmlEscape_LT_, NULL,  },
    { "GT_", NULL, 0x1a, "[C", &FreemarkerTemplateUtilityXmlEscape_GT_, NULL,  },
    { "AMP_", NULL, 0x1a, "[C", &FreemarkerTemplateUtilityXmlEscape_AMP_, NULL,  },
    { "QUOT_", NULL, 0x1a, "[C", &FreemarkerTemplateUtilityXmlEscape_QUOT_, NULL,  },
    { "APOS_", NULL, 0x1a, "[C", &FreemarkerTemplateUtilityXmlEscape_APOS_, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerTemplateUtilityXmlEscape = { 2, "XmlEscape", "freemarker.template.utility", NULL, 0x1, 2, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerTemplateUtilityXmlEscape;
}

@end

void FreemarkerTemplateUtilityXmlEscape_init(FreemarkerTemplateUtilityXmlEscape *self) {
  (void) NSObject_init(self);
}

FreemarkerTemplateUtilityXmlEscape *new_FreemarkerTemplateUtilityXmlEscape_init() {
  FreemarkerTemplateUtilityXmlEscape *self = [FreemarkerTemplateUtilityXmlEscape alloc];
  FreemarkerTemplateUtilityXmlEscape_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerTemplateUtilityXmlEscape)

@implementation FreemarkerTemplateUtilityXmlEscape_$1


#line 44
- (void)writeWithInt:(jint)c {
  
#line 48
  switch (c) {
    
#line 50
    case '<':
    
#line 50
    [((JavaIoWriter *) nil_chk(val$out_)) writeWithCharArray:FreemarkerTemplateUtilityXmlEscape_get_LT_() withInt:0 withInt:4];
    
#line 50
    break;
    case '>':
    
#line 51
    [((JavaIoWriter *) nil_chk(val$out_)) writeWithCharArray:FreemarkerTemplateUtilityXmlEscape_get_GT_() withInt:0 withInt:4];
    
#line 51
    break;
    case '&':
    
#line 52
    [((JavaIoWriter *) nil_chk(val$out_)) writeWithCharArray:FreemarkerTemplateUtilityXmlEscape_get_AMP_() withInt:0 withInt:5];
    
#line 52
    break;
    case '"':
    
#line 53
    [((JavaIoWriter *) nil_chk(val$out_)) writeWithCharArray:FreemarkerTemplateUtilityXmlEscape_get_QUOT_() withInt:0 withInt:6];
    
#line 53
    break;
    case '\'':
    
#line 54
    [((JavaIoWriter *) nil_chk(val$out_)) writeWithCharArray:FreemarkerTemplateUtilityXmlEscape_get_APOS_() withInt:0 withInt:6];
    
#line 54
    break;
    default:
    
#line 55
    [((JavaIoWriter *) nil_chk(val$out_)) writeWithInt:c];
  }
}


#line 59
- (void)writeWithCharArray:(IOSCharArray *)cbuf
                   withInt:(jint)off
                   withInt:(jint)len {
  
#line 63
  jint lastoff = off;
  jint lastpos = off + len;
  for (jint i = off; i < lastpos; i++) {
    
#line 67
    switch (IOSCharArray_Get(nil_chk(cbuf), i)) {
      
#line 69
      case '<':
      
#line 69
      [((JavaIoWriter *) nil_chk(val$out_)) writeWithCharArray:cbuf withInt:lastoff withInt:i - lastoff];
      
#line 69
      [val$out_ writeWithCharArray:FreemarkerTemplateUtilityXmlEscape_get_LT_() withInt:0 withInt:4];
      
#line 69
      lastoff = i + 1;
      
#line 69
      break;
      case '>':
      
#line 70
      [((JavaIoWriter *) nil_chk(val$out_)) writeWithCharArray:cbuf withInt:lastoff withInt:i - lastoff];
      
#line 70
      [val$out_ writeWithCharArray:FreemarkerTemplateUtilityXmlEscape_get_GT_() withInt:0 withInt:4];
      
#line 70
      lastoff = i + 1;
      
#line 70
      break;
      case '&':
      
#line 71
      [((JavaIoWriter *) nil_chk(val$out_)) writeWithCharArray:cbuf withInt:lastoff withInt:i - lastoff];
      
#line 71
      [val$out_ writeWithCharArray:FreemarkerTemplateUtilityXmlEscape_get_AMP_() withInt:0 withInt:5];
      
#line 71
      lastoff = i + 1;
      
#line 71
      break;
      case '"':
      
#line 72
      [((JavaIoWriter *) nil_chk(val$out_)) writeWithCharArray:cbuf withInt:lastoff withInt:i - lastoff];
      
#line 72
      [val$out_ writeWithCharArray:FreemarkerTemplateUtilityXmlEscape_get_QUOT_() withInt:0 withInt:6];
      
#line 72
      lastoff = i + 1;
      
#line 72
      break;
      case '\'':
      
#line 73
      [((JavaIoWriter *) nil_chk(val$out_)) writeWithCharArray:cbuf withInt:lastoff withInt:i - lastoff];
      
#line 73
      [val$out_ writeWithCharArray:FreemarkerTemplateUtilityXmlEscape_get_APOS_() withInt:0 withInt:6];
      
#line 73
      lastoff = i + 1;
      
#line 73
      break;
    }
  }
  jint remaining = lastpos - lastoff;
  if (remaining > 0) {
    
#line 79
    [((JavaIoWriter *) nil_chk(val$out_)) writeWithCharArray:cbuf withInt:lastoff withInt:remaining];
  }
}


#line 82
- (void)flush {
  [((JavaIoWriter *) nil_chk(val$out_)) flush];
}

- (void)close {
}

- (instancetype)initWithJavaIoWriter:(JavaIoWriter *)capture$0 {
  FreemarkerTemplateUtilityXmlEscape_$1_initWithJavaIoWriter_(self, capture$0);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "writeWithInt:", "write", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "writeWithCharArray:withInt:withInt:", "write", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "flush", NULL, "V", 0x1, "Ljava.io.IOException;", NULL },
    { "close", NULL, "V", 0x1, NULL, NULL },
    { "initWithJavaIoWriter:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "val$out_", NULL, 0x1012, "Ljava.io.Writer;", NULL, NULL,  },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "FreemarkerTemplateUtilityXmlEscape", "getWriterWithJavaIoWriter:withJavaUtilMap:" };
  static const J2ObjcClassInfo _FreemarkerTemplateUtilityXmlEscape_$1 = { 2, "", "freemarker.template.utility", "XmlEscape", 0x8008, 5, methods, 1, fields, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_FreemarkerTemplateUtilityXmlEscape_$1;
}

@end

void FreemarkerTemplateUtilityXmlEscape_$1_initWithJavaIoWriter_(FreemarkerTemplateUtilityXmlEscape_$1 *self, JavaIoWriter *capture$0) {
  self->val$out_ = capture$0;
  (void) JavaIoWriter_init(self);
}

FreemarkerTemplateUtilityXmlEscape_$1 *new_FreemarkerTemplateUtilityXmlEscape_$1_initWithJavaIoWriter_(JavaIoWriter *capture$0) {
  FreemarkerTemplateUtilityXmlEscape_$1 *self = [FreemarkerTemplateUtilityXmlEscape_$1 alloc];
  FreemarkerTemplateUtilityXmlEscape_$1_initWithJavaIoWriter_(self, capture$0);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerTemplateUtilityXmlEscape_$1)
