//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/ArithmeticEngine.java
//


#include "ArithmeticEngine.h"
#include "BugException.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "NumberUtil.h"
#include "OptimizerUtil.h"
#include "StringUtil.h"
#include "TemplateException.h"
#include "_MiscTemplateException.h"
#include "java/lang/Byte.h"
#include "java/lang/Double.h"
#include "java/lang/Error.h"
#include "java/lang/Float.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/Short.h"
#include "java/math/BigDecimal.h"
#include "java/math/BigInteger.h"
#include "java/util/HashMap.h"
#include "java/util/Map.h"

#line 0 "/Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/ArithmeticEngine.java"

@interface FreemarkerCoreArithmeticEngine ()

+ (JavaMathBigDecimal *)toBigDecimalWithNSNumber:(NSNumber *)num;

+ (NSNumber *)toBigDecimalOrDoubleWithNSString:(NSString *)s;

@end

__attribute__((unused)) static JavaMathBigDecimal *FreemarkerCoreArithmeticEngine_toBigDecimalWithNSNumber_(NSNumber *num);

__attribute__((unused)) static NSNumber *FreemarkerCoreArithmeticEngine_toBigDecimalOrDoubleWithNSString_(NSString *s);

@interface FreemarkerCoreArithmeticEngine_BigDecimalEngine ()

- (JavaMathBigDecimal *)divideWithJavaMathBigDecimal:(JavaMathBigDecimal *)left
                              withJavaMathBigDecimal:(JavaMathBigDecimal *)right;

@end

__attribute__((unused)) static JavaMathBigDecimal *FreemarkerCoreArithmeticEngine_BigDecimalEngine_divideWithJavaMathBigDecimal_withJavaMathBigDecimal_(FreemarkerCoreArithmeticEngine_BigDecimalEngine *self, JavaMathBigDecimal *left, JavaMathBigDecimal *right);

#define FreemarkerCoreArithmeticEngine_ConservativeEngine_INTEGER 0
#define FreemarkerCoreArithmeticEngine_ConservativeEngine_LONG 1
#define FreemarkerCoreArithmeticEngine_ConservativeEngine_FLOAT 2
#define FreemarkerCoreArithmeticEngine_ConservativeEngine_DOUBLE 3
#define FreemarkerCoreArithmeticEngine_ConservativeEngine_BIGINTEGER 4
#define FreemarkerCoreArithmeticEngine_ConservativeEngine_BIGDECIMAL 5

@interface FreemarkerCoreArithmeticEngine_ConservativeEngine ()

+ (id<JavaUtilMap>)createClassCodesMap;

+ (jint)getClassCodeWithNSNumber:(NSNumber *)num;

+ (jint)getCommonClassCodeWithNSNumber:(NSNumber *)num1
                          withNSNumber:(NSNumber *)num2;

+ (JavaMathBigInteger *)toBigIntegerWithNSNumber:(NSNumber *)num;

@end

J2OBJC_STATIC_FIELD_GETTER(FreemarkerCoreArithmeticEngine_ConservativeEngine, INTEGER, jint)

J2OBJC_STATIC_FIELD_GETTER(FreemarkerCoreArithmeticEngine_ConservativeEngine, LONG, jint)

J2OBJC_STATIC_FIELD_GETTER(FreemarkerCoreArithmeticEngine_ConservativeEngine, FLOAT, jint)

J2OBJC_STATIC_FIELD_GETTER(FreemarkerCoreArithmeticEngine_ConservativeEngine, DOUBLE, jint)

J2OBJC_STATIC_FIELD_GETTER(FreemarkerCoreArithmeticEngine_ConservativeEngine, BIGINTEGER, jint)

J2OBJC_STATIC_FIELD_GETTER(FreemarkerCoreArithmeticEngine_ConservativeEngine, BIGDECIMAL, jint)

static id<JavaUtilMap> FreemarkerCoreArithmeticEngine_ConservativeEngine_classCodes_;
J2OBJC_STATIC_FIELD_GETTER(FreemarkerCoreArithmeticEngine_ConservativeEngine, classCodes_, id<JavaUtilMap>)

__attribute__((unused)) static id<JavaUtilMap> FreemarkerCoreArithmeticEngine_ConservativeEngine_createClassCodesMap();

__attribute__((unused)) static jint FreemarkerCoreArithmeticEngine_ConservativeEngine_getClassCodeWithNSNumber_(NSNumber *num);

__attribute__((unused)) static jint FreemarkerCoreArithmeticEngine_ConservativeEngine_getCommonClassCodeWithNSNumber_withNSNumber_(NSNumber *num1, NSNumber *num2);

__attribute__((unused)) static JavaMathBigInteger *FreemarkerCoreArithmeticEngine_ConservativeEngine_toBigIntegerWithNSNumber_(NSNumber *num);

J2OBJC_INITIALIZED_DEFN(FreemarkerCoreArithmeticEngine)

FreemarkerCoreArithmeticEngine_BigDecimalEngine *FreemarkerCoreArithmeticEngine_BIGDECIMAL_ENGINE_;
FreemarkerCoreArithmeticEngine_ConservativeEngine *FreemarkerCoreArithmeticEngine_CONSERVATIVE_ENGINE_;


#line 33
@implementation FreemarkerCoreArithmeticEngine


#line 47
- (jint)compareNumbersWithNSNumber:(NSNumber *)first
                      withNSNumber:(NSNumber *)second {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 48
- (NSNumber *)addWithNSNumber:(NSNumber *)first
                 withNSNumber:(NSNumber *)second {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 49
- (NSNumber *)subtractWithNSNumber:(NSNumber *)first
                      withNSNumber:(NSNumber *)second {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 50
- (NSNumber *)multiplyWithNSNumber:(NSNumber *)first
                      withNSNumber:(NSNumber *)second {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 51
- (NSNumber *)divideWithNSNumber:(NSNumber *)first
                    withNSNumber:(NSNumber *)second {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 52
- (NSNumber *)modulusWithNSNumber:(NSNumber *)first
                     withNSNumber:(NSNumber *)second {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 61
- (NSNumber *)toNumberWithNSString:(NSString *)s {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 71
- (void)setMinScaleWithInt:(jint)minScale {
  if (minScale < 0) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"minScale < 0");
  }
  self->minScale_ = minScale;
}


#line 82
- (void)setMaxScaleWithInt:(jint)maxScale {
  if (maxScale < minScale_) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"maxScale < minScale");
  }
  self->maxScale_ = maxScale;
}

- (void)setRoundingPolicyWithInt:(jint)roundingPolicy {
  if (roundingPolicy != JavaMathBigDecimal_ROUND_CEILING &&
#line 91
  roundingPolicy != JavaMathBigDecimal_ROUND_DOWN &&
#line 92
  roundingPolicy != JavaMathBigDecimal_ROUND_FLOOR &&
#line 93
  roundingPolicy != JavaMathBigDecimal_ROUND_HALF_DOWN &&
#line 94
  roundingPolicy != JavaMathBigDecimal_ROUND_HALF_EVEN &&
#line 95
  roundingPolicy != JavaMathBigDecimal_ROUND_HALF_UP &&
#line 96
  roundingPolicy != JavaMathBigDecimal_ROUND_UNNECESSARY &&
#line 97
  roundingPolicy != JavaMathBigDecimal_ROUND_UP) {
    
#line 99
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"invalid rounding policy");
  }
  
#line 102
  self->roundingPolicy_ = roundingPolicy;
}


#line 515
+ (JavaMathBigDecimal *)toBigDecimalWithNSNumber:(NSNumber *)num {
  return FreemarkerCoreArithmeticEngine_toBigDecimalWithNSNumber_(num);
}


#line 524
+ (NSNumber *)toBigDecimalOrDoubleWithNSString:(NSString *)s {
  return FreemarkerCoreArithmeticEngine_toBigDecimalOrDoubleWithNSString_(s);
}

- (instancetype)init {
  FreemarkerCoreArithmeticEngine_init(self);
  return self;
}

+ (void)initialize {
  if (self == [FreemarkerCoreArithmeticEngine class]) {
    FreemarkerCoreArithmeticEngine_BIGDECIMAL_ENGINE_ = new_FreemarkerCoreArithmeticEngine_BigDecimalEngine_init();
    FreemarkerCoreArithmeticEngine_CONSERVATIVE_ENGINE_ = new_FreemarkerCoreArithmeticEngine_ConservativeEngine_init();
    J2OBJC_SET_INITIALIZED(FreemarkerCoreArithmeticEngine)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "compareNumbersWithNSNumber:withNSNumber:", "compareNumbers", "I", 0x401, "Lfreemarker.template.TemplateException;", NULL },
    { "addWithNSNumber:withNSNumber:", "add", "Ljava.lang.Number;", 0x401, "Lfreemarker.template.TemplateException;", NULL },
    { "subtractWithNSNumber:withNSNumber:", "subtract", "Ljava.lang.Number;", 0x401, "Lfreemarker.template.TemplateException;", NULL },
    { "multiplyWithNSNumber:withNSNumber:", "multiply", "Ljava.lang.Number;", 0x401, "Lfreemarker.template.TemplateException;", NULL },
    { "divideWithNSNumber:withNSNumber:", "divide", "Ljava.lang.Number;", 0x401, "Lfreemarker.template.TemplateException;", NULL },
    { "modulusWithNSNumber:withNSNumber:", "modulus", "Ljava.lang.Number;", 0x401, "Lfreemarker.template.TemplateException;", NULL },
    { "toNumberWithNSString:", "toNumber", "Ljava.lang.Number;", 0x401, NULL, NULL },
    { "setMinScaleWithInt:", "setMinScale", "V", 0x1, NULL, NULL },
    { "setMaxScaleWithInt:", "setMaxScale", "V", 0x1, NULL, NULL },
    { "setRoundingPolicyWithInt:", "setRoundingPolicy", "V", 0x1, NULL, NULL },
    { "toBigDecimalWithNSNumber:", "toBigDecimal", "Ljava.math.BigDecimal;", 0xa, NULL, NULL },
    { "toBigDecimalOrDoubleWithNSString:", "toBigDecimalOrDouble", "Ljava.lang.Number;", 0xa, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "BIGDECIMAL_ENGINE_", NULL, 0x19, "Lfreemarker.core.ArithmeticEngine$BigDecimalEngine;", &FreemarkerCoreArithmeticEngine_BIGDECIMAL_ENGINE_, NULL,  },
    { "CONSERVATIVE_ENGINE_", NULL, 0x19, "Lfreemarker.core.ArithmeticEngine$ConservativeEngine;", &FreemarkerCoreArithmeticEngine_CONSERVATIVE_ENGINE_, NULL,  },
    { "minScale_", NULL, 0x4, "I", NULL, NULL,  },
    { "maxScale_", NULL, 0x4, "I", NULL, NULL,  },
    { "roundingPolicy_", NULL, 0x4, "I", NULL, NULL,  },
  };
  static const char *inner_classes[] = {"Lfreemarker.core.ArithmeticEngine$BigDecimalEngine;", "Lfreemarker.core.ArithmeticEngine$ConservativeEngine;"};
  static const J2ObjcClassInfo _FreemarkerCoreArithmeticEngine = { 2, "ArithmeticEngine", "freemarker.core", NULL, 0x401, 13, methods, 5, fields, 0, NULL, 2, inner_classes, NULL, NULL };
  return &_FreemarkerCoreArithmeticEngine;
}

@end


#line 515
JavaMathBigDecimal *FreemarkerCoreArithmeticEngine_toBigDecimalWithNSNumber_(NSNumber *num) {
  FreemarkerCoreArithmeticEngine_initialize();
  
#line 516
  @try {
    return [num isKindOfClass:[JavaMathBigDecimal class]] ? (JavaMathBigDecimal *) check_class_cast(num, [JavaMathBigDecimal class]) : new_JavaMathBigDecimal_initWithNSString_([((NSNumber *) nil_chk(num)) description]);
  }
  @catch (
#line 518
  JavaLangNumberFormatException *e) {
    
#line 520
    @throw new_JavaLangNumberFormatException_initWithNSString_(JreStrcat("$$", @"Can't parse this as BigDecimal number: ", FreemarkerTemplateUtilityStringUtil_jQuoteWithId_(num)));
  }
}


#line 524
NSNumber *FreemarkerCoreArithmeticEngine_toBigDecimalOrDoubleWithNSString_(NSString *s) {
  FreemarkerCoreArithmeticEngine_initialize();
  
#line 525
  if (((jint) [((NSString *) nil_chk(s)) length]) > 2) {
    jchar c = [s charAtWithInt:0];
    if (c == 'I' && ([s isEqual:@"INF"] || [s isEqual:@"Infinity"])) {
      return new_JavaLangDouble_initWithDouble_(JavaLangDouble_POSITIVE_INFINITY);
    }
    else
#line 529
    if (c == 'N' && [s isEqual:@"NaN"]) {
      return new_JavaLangDouble_initWithDouble_(JavaLangDouble_NaN);
    }
    else
#line 531
    if (c == '-' && [s charAtWithInt:1] == 'I' && ([s isEqual:@"-INF"] || [s isEqual:@"-Infinity"])) {
      return new_JavaLangDouble_initWithDouble_(JavaLangDouble_NEGATIVE_INFINITY);
    }
  }
  return new_JavaMathBigDecimal_initWithNSString_(s);
}

void FreemarkerCoreArithmeticEngine_init(FreemarkerCoreArithmeticEngine *self) {
  (void) NSObject_init(self);
  self->minScale_ =
#line 63
  12;
  self->maxScale_ = 12;
  self->roundingPolicy_ = JavaMathBigDecimal_ROUND_HALF_UP;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreArithmeticEngine)


#line 110
@implementation FreemarkerCoreArithmeticEngine_BigDecimalEngine


#line 114
- (jint)compareNumbersWithNSNumber:(NSNumber *)first
                      withNSNumber:(NSNumber *)second {
  
#line 118
  jint firstSignum = FreemarkerTemplateUtilityNumberUtil_getSignumWithNSNumber_(first);
  jint secondSignum = FreemarkerTemplateUtilityNumberUtil_getSignumWithNSNumber_(second);
  if (firstSignum != secondSignum) {
    return firstSignum < secondSignum ? -1 : (firstSignum > secondSignum ? 1 : 0);
  }
  else
#line 122
  if (firstSignum == 0 && secondSignum == 0) {
    return 0;
  }
  else {
    
#line 125
    JavaMathBigDecimal *left = FreemarkerCoreArithmeticEngine_toBigDecimalWithNSNumber_(first);
    JavaMathBigDecimal *right = FreemarkerCoreArithmeticEngine_toBigDecimalWithNSNumber_(second);
    return [((JavaMathBigDecimal *) nil_chk(left)) compareToWithId:right];
  }
}


#line 131
- (NSNumber *)addWithNSNumber:(NSNumber *)first
                 withNSNumber:(NSNumber *)second {
  JavaMathBigDecimal *left = FreemarkerCoreArithmeticEngine_toBigDecimalWithNSNumber_(first);
  JavaMathBigDecimal *right = FreemarkerCoreArithmeticEngine_toBigDecimalWithNSNumber_(second);
  return [((JavaMathBigDecimal *) nil_chk(left)) addWithJavaMathBigDecimal:right];
}


#line 137
- (NSNumber *)subtractWithNSNumber:(NSNumber *)first
                      withNSNumber:(NSNumber *)second {
  JavaMathBigDecimal *left = FreemarkerCoreArithmeticEngine_toBigDecimalWithNSNumber_(first);
  JavaMathBigDecimal *right = FreemarkerCoreArithmeticEngine_toBigDecimalWithNSNumber_(second);
  return [((JavaMathBigDecimal *) nil_chk(left)) subtractWithJavaMathBigDecimal:right];
}


#line 143
- (NSNumber *)multiplyWithNSNumber:(NSNumber *)first
                      withNSNumber:(NSNumber *)second {
  JavaMathBigDecimal *left = FreemarkerCoreArithmeticEngine_toBigDecimalWithNSNumber_(first);
  JavaMathBigDecimal *right = FreemarkerCoreArithmeticEngine_toBigDecimalWithNSNumber_(second);
  JavaMathBigDecimal *result = [((JavaMathBigDecimal *) nil_chk(left)) multiplyWithJavaMathBigDecimal:right];
  if ([((JavaMathBigDecimal *) nil_chk(result)) scale__] > maxScale_) {
    result = [result setScaleWithInt:maxScale_ withInt:roundingPolicy_];
  }
  return result;
}


#line 153
- (NSNumber *)divideWithNSNumber:(NSNumber *)first
                    withNSNumber:(NSNumber *)second {
  JavaMathBigDecimal *left = FreemarkerCoreArithmeticEngine_toBigDecimalWithNSNumber_(first);
  JavaMathBigDecimal *right = FreemarkerCoreArithmeticEngine_toBigDecimalWithNSNumber_(second);
  return FreemarkerCoreArithmeticEngine_BigDecimalEngine_divideWithJavaMathBigDecimal_withJavaMathBigDecimal_(self, left, right);
}


#line 159
- (NSNumber *)modulusWithNSNumber:(NSNumber *)first
                     withNSNumber:(NSNumber *)second {
  jlong left = [((NSNumber *) nil_chk(first)) longLongValue];
  jlong right = [((NSNumber *) nil_chk(second)) longLongValue];
  return new_JavaLangLong_initWithLong_(left % right);
}


#line 165
- (NSNumber *)toNumberWithNSString:(NSString *)s {
  return FreemarkerCoreArithmeticEngine_toBigDecimalOrDoubleWithNSString_(s);
}

- (JavaMathBigDecimal *)divideWithJavaMathBigDecimal:(JavaMathBigDecimal *)left
                              withJavaMathBigDecimal:(JavaMathBigDecimal *)right {
  return FreemarkerCoreArithmeticEngine_BigDecimalEngine_divideWithJavaMathBigDecimal_withJavaMathBigDecimal_(self, left, right);
}

- (instancetype)init {
  FreemarkerCoreArithmeticEngine_BigDecimalEngine_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "compareNumbersWithNSNumber:withNSNumber:", "compareNumbers", "I", 0x1, NULL, NULL },
    { "addWithNSNumber:withNSNumber:", "add", "Ljava.lang.Number;", 0x1, NULL, NULL },
    { "subtractWithNSNumber:withNSNumber:", "subtract", "Ljava.lang.Number;", 0x1, NULL, NULL },
    { "multiplyWithNSNumber:withNSNumber:", "multiply", "Ljava.lang.Number;", 0x1, NULL, NULL },
    { "divideWithNSNumber:withNSNumber:", "divide", "Ljava.lang.Number;", 0x1, NULL, NULL },
    { "modulusWithNSNumber:withNSNumber:", "modulus", "Ljava.lang.Number;", 0x1, NULL, NULL },
    { "toNumberWithNSString:", "toNumber", "Ljava.lang.Number;", 0x1, NULL, NULL },
    { "divideWithJavaMathBigDecimal:withJavaMathBigDecimal:", "divide", "Ljava.math.BigDecimal;", 0x2, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcClassInfo _FreemarkerCoreArithmeticEngine_BigDecimalEngine = { 2, "BigDecimalEngine", "freemarker.core", "ArithmeticEngine", 0x9, 9, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerCoreArithmeticEngine_BigDecimalEngine;
}

@end


#line 169
JavaMathBigDecimal *FreemarkerCoreArithmeticEngine_BigDecimalEngine_divideWithJavaMathBigDecimal_withJavaMathBigDecimal_(FreemarkerCoreArithmeticEngine_BigDecimalEngine *self, JavaMathBigDecimal *left, JavaMathBigDecimal *right) {
  jint scale1 = [((JavaMathBigDecimal *) nil_chk(left)) scale__];
  jint scale2 = [((JavaMathBigDecimal *) nil_chk(right)) scale__];
  jint scale_ = JavaLangMath_maxWithInt_withInt_(scale1, scale2);
  scale_ = JavaLangMath_maxWithInt_withInt_(self->minScale_, scale_);
  return [left divideWithJavaMathBigDecimal:right withInt:scale_ withInt:self->roundingPolicy_];
}

void FreemarkerCoreArithmeticEngine_BigDecimalEngine_init(FreemarkerCoreArithmeticEngine_BigDecimalEngine *self) {
  (void) FreemarkerCoreArithmeticEngine_init(self);
}

FreemarkerCoreArithmeticEngine_BigDecimalEngine *new_FreemarkerCoreArithmeticEngine_BigDecimalEngine_init() {
  FreemarkerCoreArithmeticEngine_BigDecimalEngine *self = [FreemarkerCoreArithmeticEngine_BigDecimalEngine alloc];
  FreemarkerCoreArithmeticEngine_BigDecimalEngine_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreArithmeticEngine_BigDecimalEngine)

J2OBJC_INITIALIZED_DEFN(FreemarkerCoreArithmeticEngine_ConservativeEngine)


#line 196
@implementation FreemarkerCoreArithmeticEngine_ConservativeEngine


#line 206
- (jint)compareNumbersWithNSNumber:(NSNumber *)first
                      withNSNumber:(NSNumber *)second {
  switch (FreemarkerCoreArithmeticEngine_ConservativeEngine_getCommonClassCodeWithNSNumber_withNSNumber_(first, second)) {
    case FreemarkerCoreArithmeticEngine_ConservativeEngine_INTEGER:
    {
      
#line 209
      jint n1 = [((NSNumber *) nil_chk(first)) intValue];
      jint n2 = [((NSNumber *) nil_chk(second)) intValue];
      return n1 < n2 ? -1 : (n1 == n2 ? 0 : 1);
    }
    case FreemarkerCoreArithmeticEngine_ConservativeEngine_LONG:
    {
      
#line 214
      jlong n1 = [((NSNumber *) nil_chk(first)) longLongValue];
      jlong n2 = [((NSNumber *) nil_chk(second)) longLongValue];
      return n1 < n2 ? -1 : (n1 == n2 ? 0 : 1);
    }
    case FreemarkerCoreArithmeticEngine_ConservativeEngine_FLOAT:
    {
      
#line 219
      jfloat n1 = [((NSNumber *) nil_chk(first)) floatValue];
      jfloat n2 = [((NSNumber *) nil_chk(second)) floatValue];
      return n1 < n2 ? -1 : (n1 == n2 ? 0 : 1);
    }
    case FreemarkerCoreArithmeticEngine_ConservativeEngine_DOUBLE:
    {
      
#line 224
      jdouble n1 = [((NSNumber *) nil_chk(first)) doubleValue];
      jdouble n2 = [((NSNumber *) nil_chk(second)) doubleValue];
      return n1 < n2 ? -1 : (n1 == n2 ? 0 : 1);
    }
    case FreemarkerCoreArithmeticEngine_ConservativeEngine_BIGINTEGER:
    {
      
#line 229
      JavaMathBigInteger *n1 = FreemarkerCoreArithmeticEngine_ConservativeEngine_toBigIntegerWithNSNumber_(first);
      JavaMathBigInteger *n2 = FreemarkerCoreArithmeticEngine_ConservativeEngine_toBigIntegerWithNSNumber_(second);
      return [((JavaMathBigInteger *) nil_chk(n1)) compareToWithId:n2];
    }
    case FreemarkerCoreArithmeticEngine_ConservativeEngine_BIGDECIMAL:
    {
      
#line 234
      JavaMathBigDecimal *n1 = FreemarkerCoreArithmeticEngine_toBigDecimalWithNSNumber_(first);
      JavaMathBigDecimal *n2 = FreemarkerCoreArithmeticEngine_toBigDecimalWithNSNumber_(second);
      return [((JavaMathBigDecimal *) nil_chk(n1)) compareToWithId:n2];
    }
  }
  
#line 241
  @throw new_JavaLangError_init();
}


#line 244
- (NSNumber *)addWithNSNumber:(NSNumber *)first
                 withNSNumber:(NSNumber *)second {
  switch (FreemarkerCoreArithmeticEngine_ConservativeEngine_getCommonClassCodeWithNSNumber_withNSNumber_(first, second)) {
    case FreemarkerCoreArithmeticEngine_ConservativeEngine_INTEGER:
    {
      
#line 247
      jint n1 = [((NSNumber *) nil_chk(first)) intValue];
      jint n2 = [((NSNumber *) nil_chk(second)) intValue];
      jint n = n1 + n2;
      return
#line 251
      ((n ^ n1) < 0 && (n ^ n2) < 0) ? new_JavaLangLong_initWithLong_(
#line 252
      ((jlong) n1) + n2) : new_JavaLangInteger_initWithInt_(
#line 253
      n);
    }
    case FreemarkerCoreArithmeticEngine_ConservativeEngine_LONG:
    {
      
#line 256
      jlong n1 = [((NSNumber *) nil_chk(first)) longLongValue];
      jlong n2 = [((NSNumber *) nil_chk(second)) longLongValue];
      jlong n = n1 + n2;
      return
#line 260
      ((n ^ n1) < 0 && (n ^ n2) < 0) ?
#line 261
      [((JavaMathBigInteger *) nil_chk(FreemarkerCoreArithmeticEngine_ConservativeEngine_toBigIntegerWithNSNumber_(first))) addWithJavaMathBigInteger:FreemarkerCoreArithmeticEngine_ConservativeEngine_toBigIntegerWithNSNumber_(second)] : new_JavaLangLong_initWithLong_(
#line 262
      n);
    }
    case FreemarkerCoreArithmeticEngine_ConservativeEngine_FLOAT:
    {
      
#line 265
      return new_JavaLangFloat_initWithFloat_([((NSNumber *) nil_chk(first)) floatValue] + [((NSNumber *) nil_chk(second)) floatValue]);
    }
    case FreemarkerCoreArithmeticEngine_ConservativeEngine_DOUBLE:
    {
      
#line 268
      return new_JavaLangDouble_initWithDouble_([((NSNumber *) nil_chk(first)) doubleValue] + [((NSNumber *) nil_chk(second)) doubleValue]);
    }
    case FreemarkerCoreArithmeticEngine_ConservativeEngine_BIGINTEGER:
    {
      
#line 271
      JavaMathBigInteger *n1 = FreemarkerCoreArithmeticEngine_ConservativeEngine_toBigIntegerWithNSNumber_(first);
      JavaMathBigInteger *n2 = FreemarkerCoreArithmeticEngine_ConservativeEngine_toBigIntegerWithNSNumber_(second);
      return [((JavaMathBigInteger *) nil_chk(n1)) addWithJavaMathBigInteger:n2];
    }
    case FreemarkerCoreArithmeticEngine_ConservativeEngine_BIGDECIMAL:
    {
      
#line 276
      JavaMathBigDecimal *n1 = FreemarkerCoreArithmeticEngine_toBigDecimalWithNSNumber_(first);
      JavaMathBigDecimal *n2 = FreemarkerCoreArithmeticEngine_toBigDecimalWithNSNumber_(second);
      return [((JavaMathBigDecimal *) nil_chk(n1)) addWithJavaMathBigDecimal:n2];
    }
  }
  
#line 283
  @throw new_JavaLangError_init();
}


#line 286
- (NSNumber *)subtractWithNSNumber:(NSNumber *)first
                      withNSNumber:(NSNumber *)second {
  switch (FreemarkerCoreArithmeticEngine_ConservativeEngine_getCommonClassCodeWithNSNumber_withNSNumber_(first, second)) {
    case FreemarkerCoreArithmeticEngine_ConservativeEngine_INTEGER:
    {
      
#line 289
      jint n1 = [((NSNumber *) nil_chk(first)) intValue];
      jint n2 = [((NSNumber *) nil_chk(second)) intValue];
      jint n = n1 - n2;
      return
#line 293
      ((n ^ n1) < 0 && (n ^ ~n2) < 0) ? new_JavaLangLong_initWithLong_(
#line 294
      ((jlong) n1) - n2) : new_JavaLangInteger_initWithInt_(
#line 295
      n);
    }
    case FreemarkerCoreArithmeticEngine_ConservativeEngine_LONG:
    {
      
#line 298
      jlong n1 = [((NSNumber *) nil_chk(first)) longLongValue];
      jlong n2 = [((NSNumber *) nil_chk(second)) longLongValue];
      jlong n = n1 - n2;
      return
#line 302
      ((n ^ n1) < 0 && (n ^ ~n2) < 0) ?
#line 303
      [((JavaMathBigInteger *) nil_chk(FreemarkerCoreArithmeticEngine_ConservativeEngine_toBigIntegerWithNSNumber_(first))) subtractWithJavaMathBigInteger:FreemarkerCoreArithmeticEngine_ConservativeEngine_toBigIntegerWithNSNumber_(second)] : new_JavaLangLong_initWithLong_(
#line 304
      n);
    }
    case FreemarkerCoreArithmeticEngine_ConservativeEngine_FLOAT:
    {
      
#line 307
      return new_JavaLangFloat_initWithFloat_([((NSNumber *) nil_chk(first)) floatValue] - [((NSNumber *) nil_chk(second)) floatValue]);
    }
    case FreemarkerCoreArithmeticEngine_ConservativeEngine_DOUBLE:
    {
      
#line 310
      return new_JavaLangDouble_initWithDouble_([((NSNumber *) nil_chk(first)) doubleValue] - [((NSNumber *) nil_chk(second)) doubleValue]);
    }
    case FreemarkerCoreArithmeticEngine_ConservativeEngine_BIGINTEGER:
    {
      
#line 313
      JavaMathBigInteger *n1 = FreemarkerCoreArithmeticEngine_ConservativeEngine_toBigIntegerWithNSNumber_(first);
      JavaMathBigInteger *n2 = FreemarkerCoreArithmeticEngine_ConservativeEngine_toBigIntegerWithNSNumber_(second);
      return [((JavaMathBigInteger *) nil_chk(n1)) subtractWithJavaMathBigInteger:n2];
    }
    case FreemarkerCoreArithmeticEngine_ConservativeEngine_BIGDECIMAL:
    {
      
#line 318
      JavaMathBigDecimal *n1 = FreemarkerCoreArithmeticEngine_toBigDecimalWithNSNumber_(first);
      JavaMathBigDecimal *n2 = FreemarkerCoreArithmeticEngine_toBigDecimalWithNSNumber_(second);
      return [((JavaMathBigDecimal *) nil_chk(n1)) subtractWithJavaMathBigDecimal:n2];
    }
  }
  
#line 325
  @throw new_JavaLangError_init();
}


#line 328
- (NSNumber *)multiplyWithNSNumber:(NSNumber *)first
                      withNSNumber:(NSNumber *)second {
  switch (FreemarkerCoreArithmeticEngine_ConservativeEngine_getCommonClassCodeWithNSNumber_withNSNumber_(first, second)) {
    case FreemarkerCoreArithmeticEngine_ConservativeEngine_INTEGER:
    {
      
#line 331
      jint n1 = [((NSNumber *) nil_chk(first)) intValue];
      jint n2 = [((NSNumber *) nil_chk(second)) intValue];
      jint n = n1 * n2;
      return
#line 335
      n1 == 0 || n / n1 == n2 ? new_JavaLangInteger_initWithInt_(
#line 336
      n) : new_JavaLangLong_initWithLong_(
#line 337
      ((jlong) n1) * n2);
    }
    case FreemarkerCoreArithmeticEngine_ConservativeEngine_LONG:
    {
      
#line 340
      jlong n1 = [((NSNumber *) nil_chk(first)) longLongValue];
      jlong n2 = [((NSNumber *) nil_chk(second)) longLongValue];
      jlong n = n1 * n2;
      return
#line 344
      n1 == 0LL || n / n1 == n2 ? new_JavaLangLong_initWithLong_(
#line 345
      n) :
#line 346
      [((JavaMathBigInteger *) nil_chk(FreemarkerCoreArithmeticEngine_ConservativeEngine_toBigIntegerWithNSNumber_(first))) multiplyWithJavaMathBigInteger:FreemarkerCoreArithmeticEngine_ConservativeEngine_toBigIntegerWithNSNumber_(second)];
    }
    case FreemarkerCoreArithmeticEngine_ConservativeEngine_FLOAT:
    {
      
#line 349
      return new_JavaLangFloat_initWithFloat_([((NSNumber *) nil_chk(first)) floatValue] * [((NSNumber *) nil_chk(second)) floatValue]);
    }
    case FreemarkerCoreArithmeticEngine_ConservativeEngine_DOUBLE:
    {
      
#line 352
      return new_JavaLangDouble_initWithDouble_([((NSNumber *) nil_chk(first)) doubleValue] * [((NSNumber *) nil_chk(second)) doubleValue]);
    }
    case FreemarkerCoreArithmeticEngine_ConservativeEngine_BIGINTEGER:
    {
      
#line 355
      JavaMathBigInteger *n1 = FreemarkerCoreArithmeticEngine_ConservativeEngine_toBigIntegerWithNSNumber_(first);
      JavaMathBigInteger *n2 = FreemarkerCoreArithmeticEngine_ConservativeEngine_toBigIntegerWithNSNumber_(second);
      return [((JavaMathBigInteger *) nil_chk(n1)) multiplyWithJavaMathBigInteger:n2];
    }
    case FreemarkerCoreArithmeticEngine_ConservativeEngine_BIGDECIMAL:
    {
      
#line 360
      JavaMathBigDecimal *n1 = FreemarkerCoreArithmeticEngine_toBigDecimalWithNSNumber_(first);
      JavaMathBigDecimal *n2 = FreemarkerCoreArithmeticEngine_toBigDecimalWithNSNumber_(second);
      JavaMathBigDecimal *r = [((JavaMathBigDecimal *) nil_chk(n1)) multiplyWithJavaMathBigDecimal:n2];
      return [((JavaMathBigDecimal *) nil_chk(r)) scale__] > maxScale_ ? [r setScaleWithInt:maxScale_ withInt:roundingPolicy_] : r;
    }
  }
  
#line 368
  @throw new_JavaLangError_init();
}


#line 371
- (NSNumber *)divideWithNSNumber:(NSNumber *)first
                    withNSNumber:(NSNumber *)second {
  switch (FreemarkerCoreArithmeticEngine_ConservativeEngine_getCommonClassCodeWithNSNumber_withNSNumber_(first, second)) {
    case FreemarkerCoreArithmeticEngine_ConservativeEngine_INTEGER:
    {
      
#line 374
      jint n1 = [((NSNumber *) nil_chk(first)) intValue];
      jint n2 = [((NSNumber *) nil_chk(second)) intValue];
      if (n1 % n2 == 0) {
        return new_JavaLangInteger_initWithInt_(n1 / n2);
      }
      return new_JavaLangDouble_initWithDouble_(((jdouble) n1) / n2);
    }
    case FreemarkerCoreArithmeticEngine_ConservativeEngine_LONG:
    {
      
#line 382
      jlong n1 = [((NSNumber *) nil_chk(first)) longLongValue];
      jlong n2 = [((NSNumber *) nil_chk(second)) longLongValue];
      if (n1 % n2 == 0) {
        return new_JavaLangLong_initWithLong_(n1 / n2);
      }
      return new_JavaLangDouble_initWithDouble_(((jdouble) n1) / n2);
    }
    case FreemarkerCoreArithmeticEngine_ConservativeEngine_FLOAT:
    {
      
#line 390
      return new_JavaLangFloat_initWithFloat_([((NSNumber *) nil_chk(first)) floatValue] / [((NSNumber *) nil_chk(second)) floatValue]);
    }
    case FreemarkerCoreArithmeticEngine_ConservativeEngine_DOUBLE:
    {
      
#line 393
      return new_JavaLangDouble_initWithDouble_([((NSNumber *) nil_chk(first)) doubleValue] / [((NSNumber *) nil_chk(second)) doubleValue]);
    }
    case FreemarkerCoreArithmeticEngine_ConservativeEngine_BIGINTEGER:
    {
      
#line 396
      JavaMathBigInteger *n1 = FreemarkerCoreArithmeticEngine_ConservativeEngine_toBigIntegerWithNSNumber_(first);
      JavaMathBigInteger *n2 = FreemarkerCoreArithmeticEngine_ConservativeEngine_toBigIntegerWithNSNumber_(second);
      IOSObjectArray *divmod = [((JavaMathBigInteger *) nil_chk(n1)) divideAndRemainderWithJavaMathBigInteger:n2];
      if ([((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(nil_chk(divmod), 1))) isEqual:JavaMathBigInteger_get_ZERO_()]) {
        return IOSObjectArray_Get(divmod, 0);
      }
      else {
        JavaMathBigDecimal *bd1 = new_JavaMathBigDecimal_initWithJavaMathBigInteger_(n1);
        JavaMathBigDecimal *bd2 = new_JavaMathBigDecimal_initWithJavaMathBigInteger_(n2);
        return [bd1 divideWithJavaMathBigDecimal:bd2 withInt:minScale_ withInt:roundingPolicy_];
      }
    }
    case FreemarkerCoreArithmeticEngine_ConservativeEngine_BIGDECIMAL:
    {
      
#line 409
      JavaMathBigDecimal *n1 = FreemarkerCoreArithmeticEngine_toBigDecimalWithNSNumber_(first);
      JavaMathBigDecimal *n2 = FreemarkerCoreArithmeticEngine_toBigDecimalWithNSNumber_(second);
      jint scale1 = [((JavaMathBigDecimal *) nil_chk(n1)) scale__];
      jint scale2 = [((JavaMathBigDecimal *) nil_chk(n2)) scale__];
      jint scale_ = JavaLangMath_maxWithInt_withInt_(scale1, scale2);
      scale_ = JavaLangMath_maxWithInt_withInt_(minScale_, scale_);
      return [n1 divideWithJavaMathBigDecimal:n2 withInt:scale_ withInt:roundingPolicy_];
    }
  }
  
#line 420
  @throw new_JavaLangError_init();
}


#line 423
- (NSNumber *)modulusWithNSNumber:(NSNumber *)first
                     withNSNumber:(NSNumber *)second {
  switch (FreemarkerCoreArithmeticEngine_ConservativeEngine_getCommonClassCodeWithNSNumber_withNSNumber_(first, second)) {
    case FreemarkerCoreArithmeticEngine_ConservativeEngine_INTEGER:
    {
      
#line 426
      return new_JavaLangInteger_initWithInt_([((NSNumber *) nil_chk(first)) intValue] % [((NSNumber *) nil_chk(second)) intValue]);
    }
    case FreemarkerCoreArithmeticEngine_ConservativeEngine_LONG:
    {
      
#line 429
      return new_JavaLangLong_initWithLong_([((NSNumber *) nil_chk(first)) longLongValue] % [((NSNumber *) nil_chk(second)) longLongValue]);
    }
    case FreemarkerCoreArithmeticEngine_ConservativeEngine_FLOAT:
    {
      
#line 432
      return new_JavaLangFloat_initWithFloat_(fmodf([((NSNumber *) nil_chk(first)) floatValue], [((NSNumber *) nil_chk(second)) floatValue]));
    }
    case FreemarkerCoreArithmeticEngine_ConservativeEngine_DOUBLE:
    {
      
#line 435
      return new_JavaLangDouble_initWithDouble_(fmod([((NSNumber *) nil_chk(first)) doubleValue], [((NSNumber *) nil_chk(second)) doubleValue]));
    }
    case FreemarkerCoreArithmeticEngine_ConservativeEngine_BIGINTEGER:
    {
      
#line 438
      JavaMathBigInteger *n1 = FreemarkerCoreArithmeticEngine_ConservativeEngine_toBigIntegerWithNSNumber_(first);
      JavaMathBigInteger *n2 = FreemarkerCoreArithmeticEngine_ConservativeEngine_toBigIntegerWithNSNumber_(second);
      return [((JavaMathBigInteger *) nil_chk(n1)) modWithJavaMathBigInteger:n2];
    }
    case FreemarkerCoreArithmeticEngine_ConservativeEngine_BIGDECIMAL:
    {
      
#line 443
      @throw new_FreemarkerCore_MiscTemplateException_initWithNSString_(@"Can't calculate remainder on BigDecimals");
    }
  }
  
#line 448
  @throw new_FreemarkerCoreBugException_init();
}


#line 451
- (NSNumber *)toNumberWithNSString:(NSString *)s {
  NSNumber *n = FreemarkerCoreArithmeticEngine_toBigDecimalOrDoubleWithNSString_(s);
  return [n isKindOfClass:[JavaMathBigDecimal class]] ? FreemarkerTemplateUtilityOptimizerUtil_optimizeNumberRepresentationWithNSNumber_(n) : n;
}

+ (id<JavaUtilMap>)createClassCodesMap {
  return FreemarkerCoreArithmeticEngine_ConservativeEngine_createClassCodesMap();
}


#line 470
+ (jint)getClassCodeWithNSNumber:(NSNumber *)num {
  return FreemarkerCoreArithmeticEngine_ConservativeEngine_getClassCodeWithNSNumber_(num);
}


#line 484
+ (jint)getCommonClassCodeWithNSNumber:(NSNumber *)num1
                          withNSNumber:(NSNumber *)num2 {
  return FreemarkerCoreArithmeticEngine_ConservativeEngine_getCommonClassCodeWithNSNumber_withNSNumber_(num1, num2);
}


#line 510
+ (JavaMathBigInteger *)toBigIntegerWithNSNumber:(NSNumber *)num {
  return FreemarkerCoreArithmeticEngine_ConservativeEngine_toBigIntegerWithNSNumber_(num);
}

- (instancetype)init {
  FreemarkerCoreArithmeticEngine_ConservativeEngine_init(self);
  return self;
}

+ (void)initialize {
  if (self == [FreemarkerCoreArithmeticEngine_ConservativeEngine class]) {
    FreemarkerCoreArithmeticEngine_ConservativeEngine_classCodes_ = FreemarkerCoreArithmeticEngine_ConservativeEngine_createClassCodesMap();
    J2OBJC_SET_INITIALIZED(FreemarkerCoreArithmeticEngine_ConservativeEngine)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "compareNumbersWithNSNumber:withNSNumber:", "compareNumbers", "I", 0x1, "Lfreemarker.template.TemplateException;", NULL },
    { "addWithNSNumber:withNSNumber:", "add", "Ljava.lang.Number;", 0x1, "Lfreemarker.template.TemplateException;", NULL },
    { "subtractWithNSNumber:withNSNumber:", "subtract", "Ljava.lang.Number;", 0x1, "Lfreemarker.template.TemplateException;", NULL },
    { "multiplyWithNSNumber:withNSNumber:", "multiply", "Ljava.lang.Number;", 0x1, "Lfreemarker.template.TemplateException;", NULL },
    { "divideWithNSNumber:withNSNumber:", "divide", "Ljava.lang.Number;", 0x1, "Lfreemarker.template.TemplateException;", NULL },
    { "modulusWithNSNumber:withNSNumber:", "modulus", "Ljava.lang.Number;", 0x1, "Lfreemarker.template.TemplateException;", NULL },
    { "toNumberWithNSString:", "toNumber", "Ljava.lang.Number;", 0x1, NULL, NULL },
    { "createClassCodesMap", NULL, "Ljava.util.Map;", 0xa, NULL, NULL },
    { "getClassCodeWithNSNumber:", "getClassCode", "I", 0xa, "Lfreemarker.template.TemplateException;", NULL },
    { "getCommonClassCodeWithNSNumber:withNSNumber:", "getCommonClassCode", "I", 0xa, "Lfreemarker.template.TemplateException;", NULL },
    { "toBigIntegerWithNSNumber:", "toBigInteger", "Ljava.math.BigInteger;", 0xa, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "INTEGER_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = FreemarkerCoreArithmeticEngine_ConservativeEngine_INTEGER },
    { "LONG_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = FreemarkerCoreArithmeticEngine_ConservativeEngine_LONG },
    { "FLOAT_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = FreemarkerCoreArithmeticEngine_ConservativeEngine_FLOAT },
    { "DOUBLE_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = FreemarkerCoreArithmeticEngine_ConservativeEngine_DOUBLE },
    { "BIGINTEGER_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = FreemarkerCoreArithmeticEngine_ConservativeEngine_BIGINTEGER },
    { "BIGDECIMAL_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = FreemarkerCoreArithmeticEngine_ConservativeEngine_BIGDECIMAL },
    { "classCodes_", NULL, 0x1a, "Ljava.util.Map;", &FreemarkerCoreArithmeticEngine_ConservativeEngine_classCodes_, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerCoreArithmeticEngine_ConservativeEngine = { 2, "ConservativeEngine", "freemarker.core", "ArithmeticEngine", 0x9, 12, methods, 7, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerCoreArithmeticEngine_ConservativeEngine;
}

@end


#line 456
id<JavaUtilMap> FreemarkerCoreArithmeticEngine_ConservativeEngine_createClassCodesMap() {
  FreemarkerCoreArithmeticEngine_ConservativeEngine_initialize();
  
#line 457
  id<JavaUtilMap> map = new_JavaUtilHashMap_initWithInt_(17);
  JavaLangInteger *intcode = new_JavaLangInteger_initWithInt_(FreemarkerCoreArithmeticEngine_ConservativeEngine_INTEGER);
  (void) [map putWithId:JavaLangByte_class_() withId:intcode];
  (void) [map putWithId:JavaLangShort_class_() withId:intcode];
  (void) [map putWithId:JavaLangInteger_class_() withId:intcode];
  (void) [map putWithId:JavaLangLong_class_() withId:new_JavaLangInteger_initWithInt_(FreemarkerCoreArithmeticEngine_ConservativeEngine_LONG)];
  (void) [map putWithId:JavaLangFloat_class_() withId:new_JavaLangInteger_initWithInt_(FreemarkerCoreArithmeticEngine_ConservativeEngine_FLOAT)];
  (void) [map putWithId:JavaLangDouble_class_() withId:new_JavaLangInteger_initWithInt_(FreemarkerCoreArithmeticEngine_ConservativeEngine_DOUBLE)];
  (void) [map putWithId:JavaMathBigInteger_class_() withId:new_JavaLangInteger_initWithInt_(FreemarkerCoreArithmeticEngine_ConservativeEngine_BIGINTEGER)];
  (void) [map putWithId:JavaMathBigDecimal_class_() withId:new_JavaLangInteger_initWithInt_(FreemarkerCoreArithmeticEngine_ConservativeEngine_BIGDECIMAL)];
  return map;
}


#line 470
jint FreemarkerCoreArithmeticEngine_ConservativeEngine_getClassCodeWithNSNumber_(NSNumber *num) {
  FreemarkerCoreArithmeticEngine_ConservativeEngine_initialize();
  
#line 471
  @try {
    return [((JavaLangInteger *) nil_chk(((JavaLangInteger *) check_class_cast([((id<JavaUtilMap>) nil_chk(FreemarkerCoreArithmeticEngine_ConservativeEngine_classCodes_)) getWithId:[((NSNumber *) nil_chk(num)) getClass]], [JavaLangInteger class])))) intValue];
  }
  @catch (JavaLangNullPointerException *e) {
    if (num == nil) {
      @throw new_FreemarkerCore_MiscTemplateException_initWithNSString_(@"The Number object was null.");
    }
    else {
      
#line 478
      @throw new_FreemarkerCore_MiscTemplateException_initWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){
#line 479
        @"Unknown number type ", [[num getClass] getName] } count:2 type:NSObject_class_()]);
      }
    }
  }


#line 484
jint FreemarkerCoreArithmeticEngine_ConservativeEngine_getCommonClassCodeWithNSNumber_withNSNumber_(NSNumber *num1, NSNumber *num2) {
  FreemarkerCoreArithmeticEngine_ConservativeEngine_initialize();
  
#line 485
  jint c1 = FreemarkerCoreArithmeticEngine_ConservativeEngine_getClassCodeWithNSNumber_(num1);
  jint c2 = FreemarkerCoreArithmeticEngine_ConservativeEngine_getClassCodeWithNSNumber_(num2);
  jint c = c1 > c2 ? c1 : c2;
  
#line 492
  switch (c) {
    case FreemarkerCoreArithmeticEngine_ConservativeEngine_FLOAT:
    {
      
#line 494
      if ((c1 < c2 ? c1 : c2) == FreemarkerCoreArithmeticEngine_ConservativeEngine_LONG) {
        return FreemarkerCoreArithmeticEngine_ConservativeEngine_DOUBLE;
      }
      break;
    }
    case FreemarkerCoreArithmeticEngine_ConservativeEngine_BIGINTEGER:
    {
      
#line 500
      jint min = c1 < c2 ? c1 : c2;
      if (min == FreemarkerCoreArithmeticEngine_ConservativeEngine_DOUBLE || min == FreemarkerCoreArithmeticEngine_ConservativeEngine_FLOAT) {
        return FreemarkerCoreArithmeticEngine_ConservativeEngine_BIGDECIMAL;
      }
      break;
    }
  }
  return c;
}


#line 510
JavaMathBigInteger *FreemarkerCoreArithmeticEngine_ConservativeEngine_toBigIntegerWithNSNumber_(NSNumber *num) {
  FreemarkerCoreArithmeticEngine_ConservativeEngine_initialize();
  
#line 511
  return [num isKindOfClass:[JavaMathBigInteger class]] ? (JavaMathBigInteger *) check_class_cast(num, [JavaMathBigInteger class]) : new_JavaMathBigInteger_initWithNSString_([((NSNumber *) nil_chk(num)) description]);
}

void FreemarkerCoreArithmeticEngine_ConservativeEngine_init(FreemarkerCoreArithmeticEngine_ConservativeEngine *self) {
  (void) FreemarkerCoreArithmeticEngine_init(self);
}

FreemarkerCoreArithmeticEngine_ConservativeEngine *new_FreemarkerCoreArithmeticEngine_ConservativeEngine_init() {
  FreemarkerCoreArithmeticEngine_ConservativeEngine *self = [FreemarkerCoreArithmeticEngine_ConservativeEngine alloc];
  FreemarkerCoreArithmeticEngine_ConservativeEngine_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreArithmeticEngine_ConservativeEngine)
