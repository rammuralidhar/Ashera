//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/Case.java
//


#include "Case.h"
#include "Environment.h"
#include "Expression.h"
#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "ParameterRole.h"
#include "TemplateElement.h"
#include "TemplateException.h"
#include "java/io/IOException.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuffer.h"

#line 0 "/Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/Case.java"


#line 26
@implementation FreemarkerCoreCase


#line 33
- (instancetype)initWithFreemarkerCoreExpression:(FreemarkerCoreExpression *)matchingValue
               withFreemarkerCoreTemplateElement:(FreemarkerCoreTemplateElement *)nestedBlock {
  FreemarkerCoreCase_initWithFreemarkerCoreExpression_withFreemarkerCoreTemplateElement_(self, matchingValue, nestedBlock);
  return self;
}

- (void)acceptWithFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env {
  
#line 42
  if ([self getNestedBlock] != nil) {
    [((FreemarkerCoreEnvironment *) nil_chk(env)) visitByHiddingParentWithFreemarkerCoreTemplateElement:[self getNestedBlock]];
  }
}

- (NSString *)dumpWithBoolean:(jboolean)canonical {
  JavaLangStringBuffer *sb = new_JavaLangStringBuffer_init();
  if (canonical) (void) [sb appendWithChar:'<'];
  (void) [sb appendWithNSString:[self getNodeTypeSymbol]];
  if (condition_ != nil) {
    (void) [sb appendWithChar:' '];
    (void) [sb appendWithNSString:[condition_ getCanonicalForm]];
  }
  if (canonical) {
    (void) [sb appendWithChar:'>'];
    if ([self getNestedBlock] != nil) (void) [sb appendWithNSString:[((FreemarkerCoreTemplateElement *) nil_chk([self getNestedBlock])) getCanonicalForm]];
  }
  return [sb description];
}

- (NSString *)getNodeTypeSymbol {
  return condition_ != nil ? @"#case" : @"#default";
}

- (jint)getParameterCount {
  return 2;
}

- (id)getParameterValueWithInt:(jint)idx {
  switch (idx) {
    case 0:
    
#line 72
    return condition_;
    case 1:
    
#line 73
    return new_JavaLangInteger_initWithInt_(condition_ != nil ? TYPE_CASE_ : TYPE_DEFAULT_);
    default:
    
#line 74
    @throw new_JavaLangIndexOutOfBoundsException_init();
  }
}


#line 78
- (FreemarkerCoreParameterRole *)getParameterRoleWithInt:(jint)idx {
  switch (idx) {
    case 0:
    
#line 80
    return FreemarkerCoreParameterRole_get_CONDITION_();
    case 1:
    
#line 81
    return FreemarkerCoreParameterRole_get_AST_NODE_SUBTYPE_();
    default:
    
#line 82
    @throw new_JavaLangIndexOutOfBoundsException_init();
  }
}


#line 86
- (jboolean)isNestedBlockRepeater {
  return NO;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithFreemarkerCoreExpression:withFreemarkerCoreTemplateElement:", "Case", NULL, 0x0, NULL, NULL },
    { "acceptWithFreemarkerCoreEnvironment:", "accept", "V", 0x0, "Lfreemarker.template.TemplateException;Ljava.io.IOException;", NULL },
    { "dumpWithBoolean:", "dump", "Ljava.lang.String;", 0x4, NULL, NULL },
    { "getNodeTypeSymbol", NULL, "Ljava.lang.String;", 0x0, NULL, NULL },
    { "getParameterCount", NULL, "I", 0x0, NULL, NULL },
    { "getParameterValueWithInt:", "getParameterValue", "Ljava.lang.Object;", 0x0, NULL, NULL },
    { "getParameterRoleWithInt:", "getParameterRole", "Lfreemarker.core.ParameterRole;", 0x0, NULL, NULL },
    { "isNestedBlockRepeater", NULL, "Z", 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "TYPE_CASE_", NULL, 0x10, "I", NULL, NULL,  },
    { "TYPE_DEFAULT_", NULL, 0x10, "I", NULL, NULL,  },
    { "condition_", NULL, 0x0, "Lfreemarker.core.Expression;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerCoreCase = { 2, "Case", "freemarker.core", NULL, 0x10, 8, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerCoreCase;
}

@end


#line 33
void FreemarkerCoreCase_initWithFreemarkerCoreExpression_withFreemarkerCoreTemplateElement_(FreemarkerCoreCase *self, FreemarkerCoreExpression *matchingValue, FreemarkerCoreTemplateElement *nestedBlock) {
  (void) FreemarkerCoreTemplateElement_init(self);
  self->TYPE_CASE_ =
#line 28
  0;
  self->TYPE_DEFAULT_ = 1;
  
#line 35
  self->condition_ = matchingValue;
  [self setNestedBlockWithFreemarkerCoreTemplateElement:nestedBlock];
}


#line 33
FreemarkerCoreCase *new_FreemarkerCoreCase_initWithFreemarkerCoreExpression_withFreemarkerCoreTemplateElement_(FreemarkerCoreExpression *matchingValue, FreemarkerCoreTemplateElement *nestedBlock) {
  FreemarkerCoreCase *self = [FreemarkerCoreCase alloc];
  FreemarkerCoreCase_initWithFreemarkerCoreExpression_withFreemarkerCoreTemplateElement_(self, matchingValue, nestedBlock);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreCase)
