//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/UnifiedCall.java
//


#include "CallPlaceCustomDataInitializationException.h"
#include "Dot.h"
#include "EmptyMap.h"
#include "Environment.h"
#include "Expression.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "Identifier.h"
#include "InvalidReferenceException.h"
#include "J2ObjC_source.h"
#include "Macro.h"
#include "MessageUtil.h"
#include "MiscUtil.h"
#include "NonUserDefinedDirectiveLikeException.h"
#include "ObjectFactory.h"
#include "ParameterRole.h"
#include "StringUtil.h"
#include "TemplateDirectiveModel.h"
#include "TemplateElement.h"
#include "TemplateException.h"
#include "TemplateModel.h"
#include "TemplateTransformModel.h"
#include "TextBlock.h"
#include "UnifiedCall.h"
#include "_CoreStringUtils.h"
#include "_DelayedJQuote.h"
#include "_MiscTemplateException.h"
#include "java/io/IOException.h"
#include "java/lang/ClassNotFoundException.h"
#include "java/lang/Exception.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/ref/Reference.h"
#include "java/lang/ref/SoftReference.h"
#include "java/util/HashMap.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"

@class FreemarkerCoreUnifiedCall_CustomDataHolder;

#line 0 "/Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/UnifiedCall.java"

@interface FreemarkerCoreUnifiedCall () {
 @public
  FreemarkerCoreExpression *nameExp_;
  id<JavaUtilMap> namedArgs_;
  id<JavaUtilList> positionalArgs_, bodyParameterNames_;
  JavaLangRefSoftReference *sortedNamedArgsCache_;
  FreemarkerCoreUnifiedCall_CustomDataHolder *customDataHolder_;
}

/**
 @brief Returns the named args by source-code order; it's not meant to be used during template execution, too slow for that!
 */
- (id<JavaUtilList>)getSortedNamedArgs;

- (FreemarkerCoreUnifiedCall_CustomDataHolder *)createNewCustomDataWithId:(id)provierIdentity
                               withFreemarkerTemplateUtilityObjectFactory:(id<FreemarkerTemplateUtilityObjectFactory>)objectFactory;

@end

J2OBJC_FIELD_SETTER(FreemarkerCoreUnifiedCall, nameExp_, FreemarkerCoreExpression *)
J2OBJC_FIELD_SETTER(FreemarkerCoreUnifiedCall, namedArgs_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(FreemarkerCoreUnifiedCall, positionalArgs_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(FreemarkerCoreUnifiedCall, bodyParameterNames_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(FreemarkerCoreUnifiedCall, sortedNamedArgsCache_, JavaLangRefSoftReference *)
J2OBJC_FIELD_SETTER(FreemarkerCoreUnifiedCall, customDataHolder_, FreemarkerCoreUnifiedCall_CustomDataHolder *)

__attribute__((unused)) static id<JavaUtilList> FreemarkerCoreUnifiedCall_getSortedNamedArgs(FreemarkerCoreUnifiedCall *self);

__attribute__((unused)) static FreemarkerCoreUnifiedCall_CustomDataHolder *FreemarkerCoreUnifiedCall_createNewCustomDataWithId_withFreemarkerTemplateUtilityObjectFactory_(FreemarkerCoreUnifiedCall *self, id provierIdentity, id<FreemarkerTemplateUtilityObjectFactory> objectFactory);

/**
 @brief Used for implementing double check locking in implementing the DirectiveCallPlace#getOrCreateCustomData(Object,ObjectFactory) .
 */
@interface FreemarkerCoreUnifiedCall_CustomDataHolder : NSObject {
 @public
  id providerIdentity_;
  id customData_;
}

- (instancetype)initWithId:(id)providerIdentity
                    withId:(id)customData;

@end

J2OBJC_EMPTY_STATIC_INIT(FreemarkerCoreUnifiedCall_CustomDataHolder)

J2OBJC_FIELD_SETTER(FreemarkerCoreUnifiedCall_CustomDataHolder, providerIdentity_, id)
J2OBJC_FIELD_SETTER(FreemarkerCoreUnifiedCall_CustomDataHolder, customData_, id)

__attribute__((unused)) static void FreemarkerCoreUnifiedCall_CustomDataHolder_initWithId_withId_(FreemarkerCoreUnifiedCall_CustomDataHolder *self, id providerIdentity, id customData);

__attribute__((unused)) static FreemarkerCoreUnifiedCall_CustomDataHolder *new_FreemarkerCoreUnifiedCall_CustomDataHolder_initWithId_withId_(id providerIdentity, id customData) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerCoreUnifiedCall_CustomDataHolder)


#line 38
@implementation FreemarkerCoreUnifiedCall


#line 48
- (instancetype)initWithFreemarkerCoreExpression:(FreemarkerCoreExpression *)nameExp
                                 withJavaUtilMap:(id<JavaUtilMap>)namedArgs
               withFreemarkerCoreTemplateElement:(FreemarkerCoreTemplateElement *)nestedBlock
                                withJavaUtilList:(id<JavaUtilList>)bodyParameterNames {
  FreemarkerCoreUnifiedCall_initWithFreemarkerCoreExpression_withJavaUtilMap_withFreemarkerCoreTemplateElement_withJavaUtilList_(self, nameExp, namedArgs, nestedBlock, bodyParameterNames);
  return self;
}


#line 59
- (instancetype)initWithFreemarkerCoreExpression:(FreemarkerCoreExpression *)nameExp
                                withJavaUtilList:(id<JavaUtilList>)positionalArgs
               withFreemarkerCoreTemplateElement:(FreemarkerCoreTemplateElement *)nestedBlock
                                withJavaUtilList:(id<JavaUtilList>)bodyParameterNames {
  FreemarkerCoreUnifiedCall_initWithFreemarkerCoreExpression_withJavaUtilList_withFreemarkerCoreTemplateElement_withJavaUtilList_(self, nameExp, positionalArgs, nestedBlock, bodyParameterNames);
  return self;
}


#line 73
- (void)acceptWithFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env {
  id<FreemarkerTemplateTemplateModel> tm = [((FreemarkerCoreExpression *) nil_chk(nameExp_)) evalWithFreemarkerCoreEnvironment:env];
  if (tm == FreemarkerCoreMacro_get_DO_NOTHING_MACRO_()) return;
  if ([tm isKindOfClass:[FreemarkerCoreMacro class]]) {
    FreemarkerCoreMacro *macro = (FreemarkerCoreMacro *) check_class_cast(tm, [FreemarkerCoreMacro class]);
    if ([((FreemarkerCoreMacro *) nil_chk(macro)) isFunction] && !legacySyntax_) {
      @throw new_FreemarkerCore_MiscTemplateException_initWithFreemarkerCoreEnvironment_withNSObjectArray_(env, [IOSObjectArray newArrayWithObjects:(id[]){
#line 80
        @"Routine ", new_FreemarkerCore_DelayedJQuote_initWithId_([macro getName]), @" is a function, not a directive. Functions can only be called from expressions, like in ${f()}, ${x + f()} or ",
#line 82
        @"<@someDirective someParam=f() />", @"." } count:5 type:NSObject_class_()]);
      }
      [((FreemarkerCoreEnvironment *) nil_chk(env)) invokeWithFreemarkerCoreMacro:macro withJavaUtilMap:namedArgs_ withJavaUtilList:positionalArgs_ withJavaUtilList:bodyParameterNames_ withFreemarkerCoreTemplateElement:
#line 85
      [self getNestedBlock]];
    }
    else {
      jboolean isDirectiveModel = [FreemarkerTemplateTemplateDirectiveModel_class_() isInstance:tm];
      if (isDirectiveModel || [FreemarkerTemplateTemplateTransformModel_class_() isInstance:tm]) {
        id<JavaUtilMap> args;
        if (namedArgs_ != nil && ![namedArgs_ isEmpty]) {
          args = new_JavaUtilHashMap_init();
          for (id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk([namedArgs_ entrySet])) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
            id<JavaUtilMap_Entry> entry_ = (id<JavaUtilMap_Entry>) check_protocol_cast([it next], @protocol(JavaUtilMap_Entry));
            NSString *key = (NSString *) check_class_cast([((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey], [NSString class]);
            FreemarkerCoreExpression *valueExp = (FreemarkerCoreExpression *) check_class_cast([entry_ getValue], [FreemarkerCoreExpression class]);
            id<FreemarkerTemplateTemplateModel> value = [((FreemarkerCoreExpression *) nil_chk(valueExp)) evalWithFreemarkerCoreEnvironment:env];
            (void) [args putWithId:key withId:value];
          }
        }
        else {
          
#line 101
          args = FreemarkerTemplateEmptyMap_get_instance_();
        }
        if (isDirectiveModel) {
          [((FreemarkerCoreEnvironment *) nil_chk(env)) visitWithFreemarkerCoreTemplateElement:[self getNestedBlock] withFreemarkerTemplateTemplateDirectiveModel:(id<FreemarkerTemplateTemplateDirectiveModel>) check_protocol_cast(tm, @protocol(FreemarkerTemplateTemplateDirectiveModel)) withJavaUtilMap:args withJavaUtilList:bodyParameterNames_];
        }
        else {
          [((FreemarkerCoreEnvironment *) nil_chk(env)) visitAndTransformWithFreemarkerCoreTemplateElement:[self getNestedBlock] withFreemarkerTemplateTemplateTransformModel:(id<FreemarkerTemplateTemplateTransformModel>) check_protocol_cast(tm, @protocol(FreemarkerTemplateTemplateTransformModel)) withJavaUtilMap:args];
        }
      }
      else if (tm == nil) {
        @throw FreemarkerCoreInvalidReferenceException_getInstanceWithFreemarkerCoreExpression_withFreemarkerCoreEnvironment_(nameExp_, env);
      }
      else {
        
#line 113
        @throw new_FreemarkerCoreNonUserDefinedDirectiveLikeException_initWithFreemarkerCoreExpression_withFreemarkerTemplateTemplateModel_withFreemarkerCoreEnvironment_(nameExp_, tm, env);
      }
    }
  }


#line 118
- (NSString *)dumpWithBoolean:(jboolean)canonical {
  JavaLangStringBuffer *sb = new_JavaLangStringBuffer_init();
  if (canonical) (void) [sb appendWithChar:'<'];
  (void) [sb appendWithChar:'@'];
  (void) FreemarkerCoreMessageUtil_appendExpressionAsUntearableWithJavaLangStringBuffer_withFreemarkerCoreExpression_(sb, nameExp_);
  jboolean nameIsInParen = [sb charAtWithInt:[sb length] - 1] == ')';
  if (positionalArgs_ != nil) {
    for (jint i = 0; i < [positionalArgs_ size]; i++) {
      FreemarkerCoreExpression *argExp = (FreemarkerCoreExpression *) check_class_cast([positionalArgs_ getWithInt:i], [FreemarkerCoreExpression class]);
      if (i != 0) {
        (void) [sb appendWithChar:','];
      }
      (void) [sb appendWithChar:' '];
      (void) [sb appendWithNSString:[((FreemarkerCoreExpression *) nil_chk(argExp)) getCanonicalForm]];
    }
  }
  else {
    
#line 134
    id<JavaUtilList> entries = FreemarkerCoreUnifiedCall_getSortedNamedArgs(self);
    for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(entries)) size]; i++) {
      id<JavaUtilMap_Entry> entry_ = (id<JavaUtilMap_Entry>) check_protocol_cast([entries getWithInt:i], @protocol(JavaUtilMap_Entry));
      FreemarkerCoreExpression *argExp = (FreemarkerCoreExpression *) check_class_cast([((id<JavaUtilMap_Entry>) nil_chk(entry_)) getValue], [FreemarkerCoreExpression class]);
      (void) [sb appendWithChar:' '];
      (void) [sb appendWithNSString:FreemarkerCore_CoreStringUtils_toFTLTopLevelIdentifierReferenceWithNSString_((NSString *) check_class_cast([entry_ getKey], [NSString class]))];
      (void) [sb appendWithChar:'='];
      (void) FreemarkerCoreMessageUtil_appendExpressionAsUntearableWithJavaLangStringBuffer_withFreemarkerCoreExpression_(sb, argExp);
    }
  }
  if (bodyParameterNames_ != nil && ![bodyParameterNames_ isEmpty]) {
    (void) [sb appendWithNSString:@"; "];
    for (jint i = 0; i < [bodyParameterNames_ size]; i++) {
      if (i != 0) {
        (void) [sb appendWithNSString:@", "];
      }
      (void) [sb appendWithNSString:FreemarkerCore_CoreStringUtils_toFTLTopLevelIdentifierReferenceWithNSString_((NSString *) check_class_cast([bodyParameterNames_ getWithInt:i], [NSString class]))];
    }
  }
  if (canonical) {
    if ([self getNestedBlock] == nil) {
      (void) [sb appendWithNSString:@"/>"];
    }
    else {
      (void) [sb appendWithChar:'>'];
      (void) [sb appendWithNSString:[((FreemarkerCoreTemplateElement *) nil_chk([self getNestedBlock])) getCanonicalForm]];
      (void) [sb appendWithNSString:@"</@"];
      if (!nameIsInParen &&
#line 162
      ([nameExp_ isKindOfClass:[FreemarkerCoreIdentifier class]] ||
#line 163
      ([nameExp_ isKindOfClass:[FreemarkerCoreDot class]] && [((FreemarkerCoreDot *) nil_chk(((FreemarkerCoreDot *) check_class_cast(nameExp_, [FreemarkerCoreDot class])))) onlyHasIdentifiers]))) {
        (void) [sb appendWithNSString:[((FreemarkerCoreExpression *) nil_chk(nameExp_)) getCanonicalForm]];
      }
      (void) [sb appendWithChar:'>'];
    }
  }
  return [sb description];
}


#line 172
- (NSString *)getNodeTypeSymbol {
  return @"@";
}

- (jint)getParameterCount {
  return 1 +
#line 178
  (positionalArgs_ != nil ? [positionalArgs_ size] : 0) +
#line 179
  (namedArgs_ != nil ? [namedArgs_ size] * 2 : 0) +
#line 180
  (bodyParameterNames_ != nil ? [bodyParameterNames_ size] : 0);
}


#line 183
- (id)getParameterValueWithInt:(jint)idx {
  if (idx == 0) {
    return nameExp_;
  }
  else {
    
#line 187
    jint base = 1;
    jint positionalArgsSize = positionalArgs_ != nil ? [positionalArgs_ size] : 0;
    if (idx - base < positionalArgsSize) {
      return [((id<JavaUtilList>) nil_chk(positionalArgs_)) getWithInt:idx - base];
    }
    else {
      
#line 192
      base += positionalArgsSize;
      jint namedArgsSize = namedArgs_ != nil ? [namedArgs_ size] : 0;
      if (idx - base < namedArgsSize * 2) {
        id<JavaUtilMap_Entry> namedArg = (id<JavaUtilMap_Entry>) check_protocol_cast([((id<JavaUtilList>) nil_chk(FreemarkerCoreUnifiedCall_getSortedNamedArgs(self))) getWithInt:(idx - base) / 2], @protocol(JavaUtilMap_Entry));
        return (idx - base) % 2 == 0 ? [((id<JavaUtilMap_Entry>) nil_chk(namedArg)) getKey] : [((id<JavaUtilMap_Entry>) nil_chk(namedArg)) getValue];
      }
      else {
        
#line 198
        base += namedArgsSize * 2;
        jint bodyParameterNamesSize = bodyParameterNames_ != nil ? [bodyParameterNames_ size] : 0;
        if (idx - base < bodyParameterNamesSize) {
          return [((id<JavaUtilList>) nil_chk(bodyParameterNames_)) getWithInt:idx - base];
        }
        else {
          
#line 203
          @throw new_JavaLangIndexOutOfBoundsException_init();
        }
      }
    }
  }
}


#line 210
- (FreemarkerCoreParameterRole *)getParameterRoleWithInt:(jint)idx {
  if (idx == 0) {
    return FreemarkerCoreParameterRole_get_CALLEE_();
  }
  else {
    
#line 214
    jint base = 1;
    jint positionalArgsSize = positionalArgs_ != nil ? [positionalArgs_ size] : 0;
    if (idx - base < positionalArgsSize) {
      return FreemarkerCoreParameterRole_get_ARGUMENT_VALUE_();
    }
    else {
      
#line 219
      base += positionalArgsSize;
      jint namedArgsSize = namedArgs_ != nil ? [namedArgs_ size] : 0;
      if (idx - base < namedArgsSize * 2) {
        return (idx - base) % 2 == 0 ? FreemarkerCoreParameterRole_get_ARGUMENT_NAME_() : FreemarkerCoreParameterRole_get_ARGUMENT_VALUE_();
      }
      else {
        
#line 224
        base += namedArgsSize * 2;
        jint bodyParameterNamesSize = bodyParameterNames_ != nil ? [bodyParameterNames_ size] : 0;
        if (idx - base < bodyParameterNamesSize) {
          return FreemarkerCoreParameterRole_get_TARGET_LOOP_VARIABLE_();
        }
        else {
          
#line 229
          @throw new_JavaLangIndexOutOfBoundsException_init();
        }
      }
    }
  }
}


#line 240
- (id<JavaUtilList>)getSortedNamedArgs {
  return FreemarkerCoreUnifiedCall_getSortedNamedArgs(self);
}


#line 252
- (id)getOrCreateCustomDataWithId:(id)provierIdentity
withFreemarkerTemplateUtilityObjectFactory:(id<FreemarkerTemplateUtilityObjectFactory>)objectFactory {
  
#line 256
  FreemarkerCoreUnifiedCall_CustomDataHolder *customDataHolder = self->customDataHolder_;
  if (customDataHolder == nil) {
    @synchronized(self) {
      customDataHolder = self->customDataHolder_;
      if (customDataHolder == nil || customDataHolder->providerIdentity_ != provierIdentity) {
        if (customDataHolder == nil) {
          @try {
            (void) IOSClass_forName_(@"java.util.concurrent.atomic.AtomicInteger");
          }
          @catch (
#line 264
          JavaLangClassNotFoundException *e) {
            @throw new_FreemarkerCoreCallPlaceCustomDataInitializationException_initWithNSString_withJavaLangThrowable_(@"Feature requires at least Java 5", e);
          }
        }
        
#line 269
        customDataHolder = FreemarkerCoreUnifiedCall_createNewCustomDataWithId_withFreemarkerTemplateUtilityObjectFactory_(self, provierIdentity, objectFactory);
        self->customDataHolder_ = customDataHolder;
      }
    }
  }
  
#line 275
  if (((FreemarkerCoreUnifiedCall_CustomDataHolder *) nil_chk(customDataHolder))->providerIdentity_ != provierIdentity) {
    @synchronized(self) {
      customDataHolder = self->customDataHolder_;
      if (customDataHolder == nil || customDataHolder->providerIdentity_ != provierIdentity) {
        customDataHolder = FreemarkerCoreUnifiedCall_createNewCustomDataWithId_withFreemarkerTemplateUtilityObjectFactory_(self, provierIdentity, objectFactory);
        self->customDataHolder_ = customDataHolder;
      }
    }
  }
  
#line 285
  return ((FreemarkerCoreUnifiedCall_CustomDataHolder *) nil_chk(customDataHolder))->customData_;
}


#line 288
- (FreemarkerCoreUnifiedCall_CustomDataHolder *)createNewCustomDataWithId:(id)provierIdentity
                               withFreemarkerTemplateUtilityObjectFactory:(id<FreemarkerTemplateUtilityObjectFactory>)objectFactory {
  return FreemarkerCoreUnifiedCall_createNewCustomDataWithId_withFreemarkerTemplateUtilityObjectFactory_(self, provierIdentity, objectFactory);
}


#line 307
- (jboolean)isNestedOutputCacheable {
  if ([self getNestedBlock] == nil) return YES;
  return [((FreemarkerCoreTemplateElement *) nil_chk([self getNestedBlock])) isOutputCacheable];
}


#line 338
- (jboolean)isNestedBlockRepeater {
  return YES;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithFreemarkerCoreExpression:withJavaUtilMap:withFreemarkerCoreTemplateElement:withJavaUtilList:", "UnifiedCall", NULL, 0x0, NULL, NULL },
    { "initWithFreemarkerCoreExpression:withJavaUtilList:withFreemarkerCoreTemplateElement:withJavaUtilList:", "UnifiedCall", NULL, 0x0, NULL, NULL },
    { "acceptWithFreemarkerCoreEnvironment:", "accept", "V", 0x0, "Lfreemarker.template.TemplateException;Ljava.io.IOException;", NULL },
    { "dumpWithBoolean:", "dump", "Ljava.lang.String;", 0x4, NULL, NULL },
    { "getNodeTypeSymbol", NULL, "Ljava.lang.String;", 0x0, NULL, NULL },
    { "getParameterCount", NULL, "I", 0x0, NULL, NULL },
    { "getParameterValueWithInt:", "getParameterValue", "Ljava.lang.Object;", 0x0, NULL, NULL },
    { "getParameterRoleWithInt:", "getParameterRole", "Lfreemarker.core.ParameterRole;", 0x0, NULL, NULL },
    { "getSortedNamedArgs", NULL, "Ljava.util.List;", 0x2, NULL, NULL },
    { "getOrCreateCustomDataWithId:withFreemarkerTemplateUtilityObjectFactory:", "getOrCreateCustomData", "Ljava.lang.Object;", 0x1, "Lfreemarker.core.CallPlaceCustomDataInitializationException;", NULL },
    { "createNewCustomDataWithId:withFreemarkerTemplateUtilityObjectFactory:", "createNewCustomData", "Lfreemarker.core.UnifiedCall$CustomDataHolder;", 0x2, "Lfreemarker.core.CallPlaceCustomDataInitializationException;", NULL },
    { "isNestedOutputCacheable", NULL, "Z", 0x1, NULL, NULL },
    { "isNestedBlockRepeater", NULL, "Z", 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "nameExp_", NULL, 0x2, "Lfreemarker.core.Expression;", NULL, NULL,  },
    { "namedArgs_", NULL, 0x2, "Ljava.util.Map;", NULL, NULL,  },
    { "positionalArgs_", NULL, 0x2, "Ljava.util.List;", NULL, NULL,  },
    { "bodyParameterNames_", NULL, 0x2, "Ljava.util.List;", NULL, NULL,  },
    { "legacySyntax_", NULL, 0x0, "Z", NULL, NULL,  },
    { "sortedNamedArgsCache_", NULL, 0xc2, "Ljava.lang.ref.SoftReference;", NULL, NULL,  },
    { "customDataHolder_", NULL, 0x2, "Lfreemarker.core.UnifiedCall$CustomDataHolder;", NULL, NULL,  },
  };
  static const char *inner_classes[] = {"Lfreemarker.core.UnifiedCall$CustomDataHolder;"};
  static const J2ObjcClassInfo _FreemarkerCoreUnifiedCall = { 2, "UnifiedCall", "freemarker.core", NULL, 0x10, 13, methods, 7, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_FreemarkerCoreUnifiedCall;
}

@end


#line 48
void FreemarkerCoreUnifiedCall_initWithFreemarkerCoreExpression_withJavaUtilMap_withFreemarkerCoreTemplateElement_withJavaUtilList_(FreemarkerCoreUnifiedCall *self, FreemarkerCoreExpression *nameExp, id<JavaUtilMap> namedArgs, FreemarkerCoreTemplateElement *nestedBlock, id<JavaUtilList> bodyParameterNames) {
  (void) FreemarkerCoreTemplateElement_init(self);
  
#line 53
  self->nameExp_ = nameExp;
  self->namedArgs_ = namedArgs;
  [self setNestedBlockWithFreemarkerCoreTemplateElement:nestedBlock];
  self->bodyParameterNames_ = bodyParameterNames;
}


#line 48
FreemarkerCoreUnifiedCall *new_FreemarkerCoreUnifiedCall_initWithFreemarkerCoreExpression_withJavaUtilMap_withFreemarkerCoreTemplateElement_withJavaUtilList_(FreemarkerCoreExpression *nameExp, id<JavaUtilMap> namedArgs, FreemarkerCoreTemplateElement *nestedBlock, id<JavaUtilList> bodyParameterNames) {
  FreemarkerCoreUnifiedCall *self = [FreemarkerCoreUnifiedCall alloc];
  FreemarkerCoreUnifiedCall_initWithFreemarkerCoreExpression_withJavaUtilMap_withFreemarkerCoreTemplateElement_withJavaUtilList_(self, nameExp, namedArgs, nestedBlock, bodyParameterNames);
  return self;
}


#line 59
void FreemarkerCoreUnifiedCall_initWithFreemarkerCoreExpression_withJavaUtilList_withFreemarkerCoreTemplateElement_withJavaUtilList_(FreemarkerCoreUnifiedCall *self, FreemarkerCoreExpression *nameExp, id<JavaUtilList> positionalArgs, FreemarkerCoreTemplateElement *nestedBlock, id<JavaUtilList> bodyParameterNames) {
  (void) FreemarkerCoreTemplateElement_init(self);
  
#line 64
  self->nameExp_ = nameExp;
  self->positionalArgs_ = positionalArgs;
  if (nestedBlock == FreemarkerCoreTextBlock_get_EMPTY_BLOCK_()) {
    nestedBlock = nil;
  }
  [self setNestedBlockWithFreemarkerCoreTemplateElement:nestedBlock];
  self->bodyParameterNames_ = bodyParameterNames;
}


#line 59
FreemarkerCoreUnifiedCall *new_FreemarkerCoreUnifiedCall_initWithFreemarkerCoreExpression_withJavaUtilList_withFreemarkerCoreTemplateElement_withJavaUtilList_(FreemarkerCoreExpression *nameExp, id<JavaUtilList> positionalArgs, FreemarkerCoreTemplateElement *nestedBlock, id<JavaUtilList> bodyParameterNames) {
  FreemarkerCoreUnifiedCall *self = [FreemarkerCoreUnifiedCall alloc];
  FreemarkerCoreUnifiedCall_initWithFreemarkerCoreExpression_withJavaUtilList_withFreemarkerCoreTemplateElement_withJavaUtilList_(self, nameExp, positionalArgs, nestedBlock, bodyParameterNames);
  return self;
}


#line 240
id<JavaUtilList> FreemarkerCoreUnifiedCall_getSortedNamedArgs(FreemarkerCoreUnifiedCall *self) {
  JavaLangRefReference *ref = self->sortedNamedArgsCache_;
  if (ref != nil) {
    id<JavaUtilList> res = (id<JavaUtilList>) check_protocol_cast([ref get], @protocol(JavaUtilList));
    if (res != nil) return res;
  }
  
#line 247
  id<JavaUtilList> res = FreemarkerCoreMiscUtil_sortMapOfExpressionsWithJavaUtilMap_(self->namedArgs_);
  self->sortedNamedArgsCache_ = new_JavaLangRefSoftReference_initWithId_(res);
  return res;
}


#line 288
FreemarkerCoreUnifiedCall_CustomDataHolder *FreemarkerCoreUnifiedCall_createNewCustomDataWithId_withFreemarkerTemplateUtilityObjectFactory_(FreemarkerCoreUnifiedCall *self, id provierIdentity, id<FreemarkerTemplateUtilityObjectFactory> objectFactory) {
  
#line 290
  FreemarkerCoreUnifiedCall_CustomDataHolder *customDataHolder;
  id customData;
  @try {
    customData = [((id<FreemarkerTemplateUtilityObjectFactory>) nil_chk(objectFactory)) createObject];
  }
  @catch (
#line 294
  JavaLangException *e) {
    @throw new_FreemarkerCoreCallPlaceCustomDataInitializationException_initWithNSString_withJavaLangThrowable_(JreStrcat("$$$$", @"Failed to initialize custom data for provider identity ", FreemarkerTemplateUtilityStringUtil_tryToStringWithId_(
#line 297
    provierIdentity), @" via factory ", FreemarkerTemplateUtilityStringUtil_tryToStringWithId_(
#line 298
    objectFactory)), e);
  }
  if (customData == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"ObjectFactory.createObject() has returned null");
  }
  customDataHolder = new_FreemarkerCoreUnifiedCall_CustomDataHolder_initWithId_withId_(provierIdentity, customData);
  return customDataHolder;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreUnifiedCall)


#line 327
@implementation FreemarkerCoreUnifiedCall_CustomDataHolder


#line 331
- (instancetype)initWithId:(id)providerIdentity
                    withId:(id)customData {
  FreemarkerCoreUnifiedCall_CustomDataHolder_initWithId_withId_(self, providerIdentity, customData);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithId:withId:", "CustomDataHolder", NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "providerIdentity_", NULL, 0x12, "Ljava.lang.Object;", NULL, NULL,  },
    { "customData_", NULL, 0x12, "Ljava.lang.Object;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerCoreUnifiedCall_CustomDataHolder = { 2, "CustomDataHolder", "freemarker.core", "UnifiedCall", 0xa, 1, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerCoreUnifiedCall_CustomDataHolder;
}

@end


#line 331
void FreemarkerCoreUnifiedCall_CustomDataHolder_initWithId_withId_(FreemarkerCoreUnifiedCall_CustomDataHolder *self, id providerIdentity, id customData) {
  (void) NSObject_init(self);
  
#line 332
  self->providerIdentity_ = providerIdentity;
  self->customData_ = customData;
}


#line 331
FreemarkerCoreUnifiedCall_CustomDataHolder *new_FreemarkerCoreUnifiedCall_CustomDataHolder_initWithId_withId_(id providerIdentity, id customData) {
  FreemarkerCoreUnifiedCall_CustomDataHolder *self = [FreemarkerCoreUnifiedCall_CustomDataHolder alloc];
  FreemarkerCoreUnifiedCall_CustomDataHolder_initWithId_withId_(self, providerIdentity, customData);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreUnifiedCall_CustomDataHolder)
