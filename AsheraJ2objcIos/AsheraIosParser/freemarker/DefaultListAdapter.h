//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/template/DefaultListAdapter.java
//

#ifndef _FreemarkerTemplateDefaultListAdapter_H_
#define _FreemarkerTemplateDefaultListAdapter_H_

#include "AdapterTemplateModel.h"
#include "J2ObjC_header.h"
#include "TemplateModelWithAPISupport.h"
#include "TemplateSequenceModel.h"
#include "WrapperTemplateModel.h"
#include "WrappingTemplateModel.h"
#include "java/io/Serializable.h"

@class IOSClass;
@protocol FreemarkerTemplateTemplateModel;
@protocol FreemarkerTemplateUtilityRichObjectWrapper;
@protocol JavaUtilList;

/**
 @brief Adapts a List to the corresponding TemplateModel interface(s), most importantly to TemplateSequenceModel .
 If you aren't wrapping an already existing List , but build a sequence specifically to be used from a template, also consider using SimpleSequence (see comparison there). <p> Thread safety: A DefaultListAdapter is as thread-safe as the List that it wraps is. Normally you only have to consider read-only access, as the FreeMarker template language doesn't allow writing these sequences (though of course, Java methods called from the template can violate this rule). <p> This adapter is used by DefaultObjectWrapper if its <code>useAdaptersForCollections</code> property is <code>true</code> , which is the default when its <code>incompatibleImprovements</code> property is 2.3.22 or higher.
 @since 2.3.22
 */
@interface FreemarkerTemplateDefaultListAdapter : FreemarkerTemplateWrappingTemplateModel < FreemarkerTemplateTemplateSequenceModel, FreemarkerTemplateAdapterTemplateModel, FreemarkerExtUtilWrapperTemplateModel, FreemarkerTemplateTemplateModelWithAPISupport, JavaIoSerializable > {
 @public
  id<JavaUtilList> list_;
}

#pragma mark Public

/**
 @brief Factory method for creating new adapter instances.
 @param list The list to adapt; can't be <code>null</code> .
 @param wrapper The ObjectWrapper used to wrap the items in the array.
 */
+ (FreemarkerTemplateDefaultListAdapter *)adaptWithJavaUtilList:(id<JavaUtilList>)list
                 withFreemarkerTemplateUtilityRichObjectWrapper:(id<FreemarkerTemplateUtilityRichObjectWrapper>)wrapper;

- (id<FreemarkerTemplateTemplateModel>)getWithInt:(jint)index;

- (id)getAdaptedObjectWithIOSClass:(IOSClass *)hint;

- (id<FreemarkerTemplateTemplateModel>)getAPI;

- (id)getWrappedObject;

- (jint)size;

@end

J2OBJC_EMPTY_STATIC_INIT(FreemarkerTemplateDefaultListAdapter)

J2OBJC_FIELD_SETTER(FreemarkerTemplateDefaultListAdapter, list_, id<JavaUtilList>)

FOUNDATION_EXPORT FreemarkerTemplateDefaultListAdapter *FreemarkerTemplateDefaultListAdapter_adaptWithJavaUtilList_withFreemarkerTemplateUtilityRichObjectWrapper_(id<JavaUtilList> list, id<FreemarkerTemplateUtilityRichObjectWrapper> wrapper);

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerTemplateDefaultListAdapter)

#endif // _FreemarkerTemplateDefaultListAdapter_H_
