//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/template/ObjectWrapper.java
//

#ifndef _FreemarkerTemplateObjectWrapper_H_
#define _FreemarkerTemplateObjectWrapper_H_

#include "J2ObjC_header.h"

@protocol FreemarkerTemplateTemplateModel;

/**
 @brief Maps Java objects to the type-system of FreeMarker Template Language (see the TemplateModel interfaces).
 Thus this is what decides what parts of the Java objects will be accessible in the templates and how. <p>For example, with a BeansWrapper both the items of Map and the JavaBean properties (the getters) of an object are accessible in template uniformly with the <code>myObject.foo</code> syntax, where "foo" is the map key or the property name. This is because both kind of object is wrapped by BeansWrapper into a TemplateHashModel implementation that will call Map#get(Object) or the getter method, transparently to the template language.
 */
@protocol FreemarkerTemplateObjectWrapper < NSObject, JavaObject >

/**
 @brief Makes a TemplateModel out of a non- TemplateModel object, usually by "wrapping" it into a TemplateModel implementation that delegates to the original object.
 @param obj The object to wrap into a TemplateModel . If it already implements TemplateModel , it should just return the object as is. If it's <code>null</code> , the method should return <code>null</code> (however, BeansWrapper , has a legacy option for returning a null model object instead, but it's not a good idea).
 @return a TemplateModel wrapper of the object passed in. To support un-wrapping, you may consider the return value to implement WrapperTemplateModel and AdapterTemplateModel . The default expectation is that the TemplateModel isn't less thread safe than the wrapped object. If the ObjectWrapper returns less thread safe objects, that should be clearly documented, as it restricts how it can be used, like, then it can't be used to wrap "shared variables" ( Configuration#setSharedVaribles(Map) ).
 */
- (id<FreemarkerTemplateTemplateModel>)wrapWithId:(id)obj;

@end

@interface FreemarkerTemplateObjectWrapper : NSObject
@end

J2OBJC_STATIC_INIT(FreemarkerTemplateObjectWrapper)

FOUNDATION_EXPORT id<FreemarkerTemplateObjectWrapper> FreemarkerTemplateObjectWrapper_BEANS_WRAPPER_;
J2OBJC_STATIC_FIELD_GETTER(FreemarkerTemplateObjectWrapper, BEANS_WRAPPER_, id<FreemarkerTemplateObjectWrapper>)

FOUNDATION_EXPORT id<FreemarkerTemplateObjectWrapper> FreemarkerTemplateObjectWrapper_DEFAULT_WRAPPER_;
J2OBJC_STATIC_FIELD_GETTER(FreemarkerTemplateObjectWrapper, DEFAULT_WRAPPER_, id<FreemarkerTemplateObjectWrapper>)

FOUNDATION_EXPORT id<FreemarkerTemplateObjectWrapper> FreemarkerTemplateObjectWrapper_SIMPLE_WRAPPER_;
J2OBJC_STATIC_FIELD_GETTER(FreemarkerTemplateObjectWrapper, SIMPLE_WRAPPER_, id<FreemarkerTemplateObjectWrapper>)

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerTemplateObjectWrapper)

#endif // _FreemarkerTemplateObjectWrapper_H_
