//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/_CoreStringUtils.java
//


#include "BugException.h"
#include "Configuration.h"
#include "J2ObjC_source.h"
#include "StringUtil.h"
#include "_CoreStringUtils.h"
#include "java/lang/Character.h"
#include "java/lang/StringBuffer.h"

#line 0 "/Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/_CoreStringUtils.java"

@interface FreemarkerCore_CoreStringUtils ()

- (instancetype)init;

+ (NSString *)backslashEscapeIdentifierWithNSString:(NSString *)name;

@end

__attribute__((unused)) static void FreemarkerCore_CoreStringUtils_init(FreemarkerCore_CoreStringUtils *self);

__attribute__((unused)) static FreemarkerCore_CoreStringUtils *new_FreemarkerCore_CoreStringUtils_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static NSString *FreemarkerCore_CoreStringUtils_backslashEscapeIdentifierWithNSString_(NSString *name);


#line 27
@implementation FreemarkerCore_CoreStringUtils

- (instancetype)init {
  FreemarkerCore_CoreStringUtils_init(self);
  return self;
}


#line 33
+ (NSString *)toFTLIdentifierReferenceAfterDotWithNSString:(NSString *)name {
  return FreemarkerCore_CoreStringUtils_toFTLIdentifierReferenceAfterDotWithNSString_(name);
}

+ (NSString *)toFTLTopLevelIdentifierReferenceWithNSString:(NSString *)name {
  return FreemarkerCore_CoreStringUtils_toFTLTopLevelIdentifierReferenceWithNSString_(name);
}

+ (NSString *)toFTLTopLevelTragetIdentifierWithNSString:(NSString *)name {
  return FreemarkerCore_CoreStringUtils_toFTLTopLevelTragetIdentifierWithNSString_(name);
}


#line 66
+ (NSString *)backslashEscapeIdentifierWithNSString:(NSString *)name {
  return FreemarkerCore_CoreStringUtils_backslashEscapeIdentifierWithNSString_(name);
}


#line 74
+ (jint)getIdentifierNamingConventionWithNSString:(NSString *)name {
  return FreemarkerCore_CoreStringUtils_getIdentifierNamingConventionWithNSString_(name);
}


#line 93
+ (NSString *)camelCaseToUnderscoredWithNSString:(NSString *)camelCaseName {
  return FreemarkerCore_CoreStringUtils_camelCaseToUnderscoredWithNSString_(camelCaseName);
}


#line 118
+ (jboolean)isUpperUSASCIIWithChar:(jchar)c {
  return FreemarkerCore_CoreStringUtils_isUpperUSASCIIWithChar_(c);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "_CoreStringUtils", NULL, 0x2, NULL, NULL },
    { "toFTLIdentifierReferenceAfterDotWithNSString:", "toFTLIdentifierReferenceAfterDot", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "toFTLTopLevelIdentifierReferenceWithNSString:", "toFTLTopLevelIdentifierReference", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "toFTLTopLevelTragetIdentifierWithNSString:", "toFTLTopLevelTragetIdentifier", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "backslashEscapeIdentifierWithNSString:", "backslashEscapeIdentifier", "Ljava.lang.String;", 0xa, NULL, NULL },
    { "getIdentifierNamingConventionWithNSString:", "getIdentifierNamingConvention", "I", 0x9, NULL, NULL },
    { "camelCaseToUnderscoredWithNSString:", "camelCaseToUnderscored", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "isUpperUSASCIIWithChar:", "isUpperUSASCII", "Z", 0x9, NULL, NULL },
  };
  static const J2ObjcClassInfo _FreemarkerCore_CoreStringUtils = { 2, "_CoreStringUtils", "freemarker.core", NULL, 0x11, 8, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerCore_CoreStringUtils;
}

@end


#line 29
void FreemarkerCore_CoreStringUtils_init(FreemarkerCore_CoreStringUtils *self) {
  (void) NSObject_init(self);
}


#line 29
FreemarkerCore_CoreStringUtils *new_FreemarkerCore_CoreStringUtils_init() {
  FreemarkerCore_CoreStringUtils *self = [FreemarkerCore_CoreStringUtils alloc];
  FreemarkerCore_CoreStringUtils_init(self);
  return self;
}


#line 33
NSString *FreemarkerCore_CoreStringUtils_toFTLIdentifierReferenceAfterDotWithNSString_(NSString *name) {
  FreemarkerCore_CoreStringUtils_initialize();
  
#line 34
  return FreemarkerCore_CoreStringUtils_backslashEscapeIdentifierWithNSString_(name);
}


#line 37
NSString *FreemarkerCore_CoreStringUtils_toFTLTopLevelIdentifierReferenceWithNSString_(NSString *name) {
  FreemarkerCore_CoreStringUtils_initialize();
  
#line 38
  return FreemarkerCore_CoreStringUtils_backslashEscapeIdentifierWithNSString_(name);
}


#line 41
NSString *FreemarkerCore_CoreStringUtils_toFTLTopLevelTragetIdentifierWithNSString_(NSString *name) {
  FreemarkerCore_CoreStringUtils_initialize();
  
#line 42
  jchar quotationType = 0;
  for (jint i = 0; i < ((jint) [((NSString *) nil_chk(name)) length]); i++) {
    jchar c = [name charAtWithInt:i];
    if (!(i == 0 ? FreemarkerTemplateUtilityStringUtil_isFTLIdentifierStartWithChar_(c) : FreemarkerTemplateUtilityStringUtil_isFTLIdentifierPartWithChar_(c)) && c != '@') {
      if ((quotationType == 0 || quotationType == '\\') && (c == '-' || c == '.' || c == ':')) {
        quotationType = '\\';
      }
      else {
        
#line 49
        quotationType = '"';
        goto break_scanForQuotationType;
      }
    }
  }
  break_scanForQuotationType: ;
  
#line 54
  switch (quotationType) {
    case 0:
    return name;
    case '"':
    return FreemarkerTemplateUtilityStringUtil_ftlQuoteWithNSString_(name);
    case '\\':
    return FreemarkerCore_CoreStringUtils_backslashEscapeIdentifierWithNSString_(name);
    default:
    @throw new_FreemarkerCoreBugException_init();
  }
}


#line 66
NSString *FreemarkerCore_CoreStringUtils_backslashEscapeIdentifierWithNSString_(NSString *name) {
  FreemarkerCore_CoreStringUtils_initialize();
  
#line 67
  return FreemarkerTemplateUtilityStringUtil_replaceWithNSString_withNSString_withNSString_(FreemarkerTemplateUtilityStringUtil_replaceWithNSString_withNSString_withNSString_(FreemarkerTemplateUtilityStringUtil_replaceWithNSString_withNSString_withNSString_(name, @"-", @"\\-"), @".", @"\\."), @":", @"\\:");
}


#line 74
jint FreemarkerCore_CoreStringUtils_getIdentifierNamingConventionWithNSString_(NSString *name) {
  FreemarkerCore_CoreStringUtils_initialize();
  
#line 75
  jint ln = ((jint) [((NSString *) nil_chk(name)) length]);
  for (jint i = 0; i < ln; i++) {
    jchar c = [name charAtWithInt:i];
    if (c == '_') {
      return FreemarkerTemplateConfiguration_LEGACY_NAMING_CONVENTION;
    }
    if (FreemarkerCore_CoreStringUtils_isUpperUSASCIIWithChar_(c)) {
      return FreemarkerTemplateConfiguration_CAMEL_CASE_NAMING_CONVENTION;
    }
  }
  return FreemarkerTemplateConfiguration_AUTO_DETECT_NAMING_CONVENTION;
}


#line 93
NSString *FreemarkerCore_CoreStringUtils_camelCaseToUnderscoredWithNSString_(NSString *camelCaseName) {
  FreemarkerCore_CoreStringUtils_initialize();
  
#line 94
  jint i = 0;
  while (i < ((jint) [((NSString *) nil_chk(camelCaseName)) length]) && JavaLangCharacter_isLowerCaseWithChar_([camelCaseName charAtWithInt:i])) {
    i++;
  }
  if (i == ((jint) [camelCaseName length])) {
    
#line 100
    return camelCaseName;
  }
  
#line 103
  JavaLangStringBuffer *sb = new_JavaLangStringBuffer_init();
  (void) [sb appendWithNSString:[camelCaseName substring:0 endIndex:i]];
  while (i < ((jint) [camelCaseName length])) {
    jchar c = [camelCaseName charAtWithInt:i];
    if (FreemarkerCore_CoreStringUtils_isUpperUSASCIIWithChar_(c)) {
      (void) [sb appendWithChar:'_'];
      (void) [sb appendWithChar:JavaLangCharacter_toLowerCaseWithChar_(c)];
    }
    else {
      
#line 111
      (void) [sb appendWithChar:c];
    }
    i++;
  }
  return [sb description];
}


#line 118
jboolean FreemarkerCore_CoreStringUtils_isUpperUSASCIIWithChar_(jchar c) {
  FreemarkerCore_CoreStringUtils_initialize();
  
#line 119
  return c >= 'A' && c <= 'Z';
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCore_CoreStringUtils)
