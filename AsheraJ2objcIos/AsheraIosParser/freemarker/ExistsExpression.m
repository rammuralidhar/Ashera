//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/ExistsExpression.java
//


#include "Environment.h"
#include "ExistsExpression.h"
#include "Expression.h"
#include "IOSClass.h"
#include "InvalidReferenceException.h"
#include "J2ObjC_source.h"
#include "ParameterRole.h"
#include "ParentheticalExpression.h"
#include "TemplateBooleanModel.h"
#include "TemplateException.h"
#include "TemplateModel.h"

#line 0 "/Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/ExistsExpression.java"


#line 25
@implementation FreemarkerCoreExistsExpression


#line 29
- (instancetype)initWithFreemarkerCoreExpression:(FreemarkerCoreExpression *)exp {
  FreemarkerCoreExistsExpression_initWithFreemarkerCoreExpression_(self, exp);
  return self;
}


#line 33
- (id<FreemarkerTemplateTemplateModel>)_evalWithFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env {
  id<FreemarkerTemplateTemplateModel> tm;
  if ([exp_ isKindOfClass:[FreemarkerCoreParentheticalExpression class]]) {
    jboolean lastFIRE = [((FreemarkerCoreEnvironment *) nil_chk(env)) setFastInvalidReferenceExceptionsWithBoolean:YES];
    @try {
      tm = [((FreemarkerCoreExpression *) nil_chk(exp_)) evalWithFreemarkerCoreEnvironment:env];
    }
    @catch (
#line 39
    FreemarkerCoreInvalidReferenceException *ire) {
      tm = nil;
    }
    @finally {
      
#line 42
      [env setFastInvalidReferenceExceptionsWithBoolean:lastFIRE];
    }
  }
  else {
    
#line 45
    tm = [((FreemarkerCoreExpression *) nil_chk(exp_)) evalWithFreemarkerCoreEnvironment:env];
  }
  return tm == nil ? FreemarkerTemplateTemplateBooleanModel_get_FALSE__() : FreemarkerTemplateTemplateBooleanModel_get_TRUE__();
}


#line 50
- (jboolean)isLiteral {
  return NO;
}

- (FreemarkerCoreExpression *)deepCloneWithIdentifierReplaced_innerWithNSString:(NSString *)replacedIdentifier
                                                   withFreemarkerCoreExpression:(FreemarkerCoreExpression *)replacement
                                 withFreemarkerCoreExpression_ReplacemenetState:(FreemarkerCoreExpression_ReplacemenetState *)replacementState {
  return new_FreemarkerCoreExistsExpression_initWithFreemarkerCoreExpression_(
#line 56
  [((FreemarkerCoreExpression *) nil_chk(exp_)) deepCloneWithIdentifierReplacedWithNSString:replacedIdentifier withFreemarkerCoreExpression:replacement withFreemarkerCoreExpression_ReplacemenetState:replacementState]);
}


#line 59
- (NSString *)getCanonicalForm {
  return JreStrcat("$$", [((FreemarkerCoreExpression *) nil_chk(exp_)) getCanonicalForm], [self getNodeTypeSymbol]);
}

- (NSString *)getNodeTypeSymbol {
  return @"??";
}

- (jint)getParameterCount {
  return 1;
}

- (id)getParameterValueWithInt:(jint)idx {
  return exp_;
}

- (FreemarkerCoreParameterRole *)getParameterRoleWithInt:(jint)idx {
  return FreemarkerCoreParameterRole_get_LEFT_HAND_OPERAND_();
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithFreemarkerCoreExpression:", "ExistsExpression", NULL, 0x0, NULL, NULL },
    { "_evalWithFreemarkerCoreEnvironment:", "_eval", "Lfreemarker.template.TemplateModel;", 0x0, "Lfreemarker.template.TemplateException;", NULL },
    { "isLiteral", NULL, "Z", 0x0, NULL, NULL },
    { "deepCloneWithIdentifierReplaced_innerWithNSString:withFreemarkerCoreExpression:withFreemarkerCoreExpression_ReplacemenetState:", "deepCloneWithIdentifierReplaced_inner", "Lfreemarker.core.Expression;", 0x4, NULL, NULL },
    { "getCanonicalForm", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getNodeTypeSymbol", NULL, "Ljava.lang.String;", 0x0, NULL, NULL },
    { "getParameterCount", NULL, "I", 0x0, NULL, NULL },
    { "getParameterValueWithInt:", "getParameterValue", "Ljava.lang.Object;", 0x0, NULL, NULL },
    { "getParameterRoleWithInt:", "getParameterRole", "Lfreemarker.core.ParameterRole;", 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "exp_", NULL, 0x14, "Lfreemarker.core.Expression;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerCoreExistsExpression = { 2, "ExistsExpression", "freemarker.core", NULL, 0x0, 9, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerCoreExistsExpression;
}

@end


#line 29
void FreemarkerCoreExistsExpression_initWithFreemarkerCoreExpression_(FreemarkerCoreExistsExpression *self, FreemarkerCoreExpression *exp) {
  (void) FreemarkerCoreExpression_init(self);
  
#line 30
  self->exp_ = exp;
}


#line 29
FreemarkerCoreExistsExpression *new_FreemarkerCoreExistsExpression_initWithFreemarkerCoreExpression_(FreemarkerCoreExpression *exp) {
  FreemarkerCoreExistsExpression *self = [FreemarkerCoreExistsExpression alloc];
  FreemarkerCoreExistsExpression_initWithFreemarkerCoreExpression_(self, exp);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreExistsExpression)
