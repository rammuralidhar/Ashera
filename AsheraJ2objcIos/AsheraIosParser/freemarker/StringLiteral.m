//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/StringLiteral.java
//


#include "DollarVariable.h"
#include "Environment.h"
#include "Expression.h"
#include "FMParser.h"
#include "FMParserTokenManager.h"
#include "IOSClass.h"
#include "Interpolation.h"
#include "J2ObjC_source.h"
#include "ParameterRole.h"
#include "ParseException.h"
#include "SimpleCharStream.h"
#include "SimpleScalar.h"
#include "StringLiteral.h"
#include "StringUtil.h"
#include "Template.h"
#include "TemplateElement.h"
#include "TemplateException.h"
#include "TemplateExceptionHandler.h"
#include "TemplateModel.h"
#include "TemplateObject.h"
#include "Token.h"
#include "TreeNode.h"
#include "_MiscTemplateException.h"
#include "java/io/IOException.h"
#include "java/io/StringReader.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/StringBuffer.h"
#include "java/util/Enumeration.h"

#line 0 "/Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/StringLiteral.java"

@interface FreemarkerCoreStringLiteral () {
 @public
  NSString *value_;
  FreemarkerCoreTemplateElement *dynamicValue_;
}

@end

J2OBJC_FIELD_SETTER(FreemarkerCoreStringLiteral, value_, NSString *)
J2OBJC_FIELD_SETTER(FreemarkerCoreStringLiteral, dynamicValue_, FreemarkerCoreTemplateElement *)


#line 30
@implementation FreemarkerCoreStringLiteral


#line 35
- (instancetype)initWithNSString:(NSString *)value {
  FreemarkerCoreStringLiteral_initWithNSString_(self, value);
  return self;
}


#line 45
- (void)parseValueWithFreemarkerCoreFMParserTokenManager:(FreemarkerCoreFMParserTokenManager *)parentTokenSource {
  if (((jint) [((NSString *) nil_chk(value_)) length]) > 3 && ([value_ indexOfString:@"${"] >= 0 || [value_ indexOfString:@"#{"] >= 0)) {
    FreemarkerCoreSimpleCharStream *scs = new_FreemarkerCoreSimpleCharStream_initWithJavaIoReader_withInt_withInt_withInt_(new_JavaIoStringReader_initWithNSString_(value_), beginLine_, beginColumn_ + 1, ((jint) [value_ length]));
    
#line 49
    FreemarkerCoreFMParserTokenManager *token_source = new_FreemarkerCoreFMParserTokenManager_initWithFreemarkerCoreSimpleCharStream_(scs);
    token_source->onlyTextOutput_ = YES;
    token_source->initialNamingConvention_ = ((FreemarkerCoreFMParserTokenManager *) nil_chk(parentTokenSource))->initialNamingConvention_;
    token_source->namingConvention_ = parentTokenSource->namingConvention_;
    token_source->namingConventionEstabilisher_ = parentTokenSource->namingConventionEstabilisher_;
    
#line 55
    FreemarkerCoreFMParser *parser = new_FreemarkerCoreFMParser_initWithFreemarkerCoreFMParserTokenManager_(token_source);
    [parser setTemplateWithFreemarkerTemplateTemplate:[self getTemplate]];
    @try {
      dynamicValue_ = [parser FreeMarkerText];
    }
    @catch (FreemarkerCoreParseException *e) {
      [((FreemarkerCoreParseException *) nil_chk(e)) setTemplateNameWithNSString:[((FreemarkerTemplateTemplate *) nil_chk([self getTemplate])) getSourceName]];
      @throw e;
    }
    self->constantValue_ = nil;
    
#line 67
    parentTokenSource->namingConvention_ = token_source->namingConvention_;
    parentTokenSource->namingConventionEstabilisher_ = token_source->namingConventionEstabilisher_;
  }
}


#line 72
- (id<FreemarkerTemplateTemplateModel>)_evalWithFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env {
  return new_FreemarkerTemplateSimpleScalar_initWithNSString_([self evalAndCoerceToStringWithFreemarkerCoreEnvironment:env]);
}

- (NSString *)getAsString {
  return value_;
}


#line 83
- (jboolean)isSingleInterpolationLiteral {
  return dynamicValue_ != nil && [dynamicValue_ getChildCount] == 1 &&
#line 85
  [[dynamicValue_ getChildAtWithInt:0] isKindOfClass:[FreemarkerCoreDollarVariable class]];
}


#line 88
- (NSString *)evalAndCoerceToStringWithFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env {
  if (dynamicValue_ == nil) {
    return value_;
  }
  else {
    id<FreemarkerTemplateTemplateExceptionHandler> teh = [((FreemarkerCoreEnvironment *) nil_chk(env)) getTemplateExceptionHandler];
    [env setTemplateExceptionHandlerWithFreemarkerTemplateTemplateExceptionHandler:FreemarkerTemplateTemplateExceptionHandler_get_RETHROW_HANDLER_()];
    @try {
      return [env renderElementToStringWithFreemarkerCoreTemplateElement:dynamicValue_];
    }
    @catch (JavaIoIOException *ioe) {
      @throw new_FreemarkerCore_MiscTemplateException_initWithJavaLangThrowable_withFreemarkerCoreEnvironment_(ioe, env);
    }
    @finally {
      [env setTemplateExceptionHandlerWithFreemarkerTemplateTemplateExceptionHandler:teh];
    }
  }
}

- (NSString *)getCanonicalForm {
  if (dynamicValue_ == nil) {
    return FreemarkerTemplateUtilityStringUtil_ftlQuoteWithNSString_(value_);
  }
  else {
    
#line 111
    JavaLangStringBuffer *sb = new_JavaLangStringBuffer_init();
    (void) [sb appendWithChar:'"'];
    for (id<JavaUtilEnumeration> childrenEnum = [dynamicValue_ children]; [((id<JavaUtilEnumeration>) nil_chk(childrenEnum)) hasMoreElements]; ) {
      FreemarkerCoreTemplateElement *child = (FreemarkerCoreTemplateElement *) check_class_cast([childrenEnum nextElement], [FreemarkerCoreTemplateElement class]);
      if ([child isKindOfClass:[FreemarkerCoreInterpolation class]]) {
        (void) [sb appendWithNSString:[((FreemarkerCoreInterpolation *) nil_chk(((FreemarkerCoreInterpolation *) check_class_cast(child, [FreemarkerCoreInterpolation class])))) getCanonicalFormInStringLiteral]];
      }
      else {
        
#line 118
        (void) [sb appendWithNSString:FreemarkerTemplateUtilityStringUtil_FTLStringLiteralEncWithNSString_withChar_([((FreemarkerCoreTemplateElement *) nil_chk(child)) getCanonicalForm], '"')];
      }
    }
    (void) [sb appendWithChar:'"'];
    return [sb description];
  }
}


#line 126
- (NSString *)getNodeTypeSymbol {
  return dynamicValue_ == nil ? [self getCanonicalForm] : @"dynamic \"...\"";
}

- (jboolean)isLiteral {
  return dynamicValue_ == nil;
}

- (FreemarkerCoreExpression *)deepCloneWithIdentifierReplaced_innerWithNSString:(NSString *)replacedIdentifier
                                                   withFreemarkerCoreExpression:(FreemarkerCoreExpression *)replacement
                                 withFreemarkerCoreExpression_ReplacemenetState:(FreemarkerCoreExpression_ReplacemenetState *)replacementState {
  
#line 136
  FreemarkerCoreStringLiteral *cloned = new_FreemarkerCoreStringLiteral_initWithNSString_(value_);
  
#line 138
  cloned->dynamicValue_ = self->dynamicValue_;
  return cloned;
}


#line 142
- (jint)getParameterCount {
  return 1;
}

- (id)getParameterValueWithInt:(jint)idx {
  if (idx != 0) @throw new_JavaLangIndexOutOfBoundsException_init();
  return dynamicValue_;
}

- (FreemarkerCoreParameterRole *)getParameterRoleWithInt:(jint)idx {
  if (idx != 0) @throw new_JavaLangIndexOutOfBoundsException_init();
  return FreemarkerCoreParameterRole_get_EMBEDDED_TEMPLATE_();
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithNSString:", "StringLiteral", NULL, 0x0, NULL, NULL },
    { "parseValueWithFreemarkerCoreFMParserTokenManager:", "parseValue", "V", 0x0, "Lfreemarker.core.ParseException;", NULL },
    { "_evalWithFreemarkerCoreEnvironment:", "_eval", "Lfreemarker.template.TemplateModel;", 0x0, "Lfreemarker.template.TemplateException;", NULL },
    { "getAsString", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "isSingleInterpolationLiteral", NULL, "Z", 0x0, NULL, NULL },
    { "evalAndCoerceToStringWithFreemarkerCoreEnvironment:", "evalAndCoerceToString", "Ljava.lang.String;", 0x0, "Lfreemarker.template.TemplateException;", NULL },
    { "getCanonicalForm", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getNodeTypeSymbol", NULL, "Ljava.lang.String;", 0x0, NULL, NULL },
    { "isLiteral", NULL, "Z", 0x0, NULL, NULL },
    { "deepCloneWithIdentifierReplaced_innerWithNSString:withFreemarkerCoreExpression:withFreemarkerCoreExpression_ReplacemenetState:", "deepCloneWithIdentifierReplaced_inner", "Lfreemarker.core.Expression;", 0x4, NULL, NULL },
    { "getParameterCount", NULL, "I", 0x0, NULL, NULL },
    { "getParameterValueWithInt:", "getParameterValue", "Ljava.lang.Object;", 0x0, NULL, NULL },
    { "getParameterRoleWithInt:", "getParameterRole", "Lfreemarker.core.ParameterRole;", 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "value_", NULL, 0x12, "Ljava.lang.String;", NULL, NULL,  },
    { "dynamicValue_", NULL, 0x2, "Lfreemarker.core.TemplateElement;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerCoreStringLiteral = { 2, "StringLiteral", "freemarker.core", NULL, 0x10, 13, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerCoreStringLiteral;
}

@end


#line 35
void FreemarkerCoreStringLiteral_initWithNSString_(FreemarkerCoreStringLiteral *self, NSString *value) {
  (void) FreemarkerCoreExpression_init(self);
  
#line 36
  self->value_ = value;
}


#line 35
FreemarkerCoreStringLiteral *new_FreemarkerCoreStringLiteral_initWithNSString_(NSString *value) {
  FreemarkerCoreStringLiteral *self = [FreemarkerCoreStringLiteral alloc];
  FreemarkerCoreStringLiteral_initWithNSString_(self, value);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreStringLiteral)
