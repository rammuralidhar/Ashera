//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/ext/beans/MapModel.java
//


#include "BeanModel.h"
#include "BeansWrapper.h"
#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "MapModel.h"
#include "ModelFactory.h"
#include "ObjectWrapper.h"
#include "StringModel.h"
#include "TemplateModel.h"
#include "TemplateModelException.h"
#include "java/lang/Character.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"

#line 0 "/Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/ext/beans/MapModel.java"

@interface FreemarkerExtBeansMapModel_$1 : NSObject < FreemarkerExtUtilModelFactory >

- (id<FreemarkerTemplateTemplateModel>)createWithId:(id)object
                withFreemarkerTemplateObjectWrapper:(id<FreemarkerTemplateObjectWrapper>)wrapper;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(FreemarkerExtBeansMapModel_$1)

__attribute__((unused)) static void FreemarkerExtBeansMapModel_$1_init(FreemarkerExtBeansMapModel_$1 *self);

__attribute__((unused)) static FreemarkerExtBeansMapModel_$1 *new_FreemarkerExtBeansMapModel_$1_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerExtBeansMapModel_$1)

J2OBJC_INITIALIZED_DEFN(FreemarkerExtBeansMapModel)

id<FreemarkerExtUtilModelFactory> FreemarkerExtBeansMapModel_FACTORY_;


#line 42
@implementation FreemarkerExtBeansMapModel


#line 65
- (instancetype)initWithJavaUtilMap:(id<JavaUtilMap>)map
 withFreemarkerExtBeansBeansWrapper:(FreemarkerExtBeansBeansWrapper *)wrapper {
  FreemarkerExtBeansMapModel_initWithJavaUtilMap_withFreemarkerExtBeansBeansWrapper_(self, map, wrapper);
  return self;
}


#line 73
- (id)execWithJavaUtilList:(id<JavaUtilList>)arguments {
  
#line 77
  id key = [self unwrapWithFreemarkerTemplateTemplateModel:(id<FreemarkerTemplateTemplateModel>) check_protocol_cast([((id<JavaUtilList>) nil_chk(arguments)) getWithInt:0], @protocol(FreemarkerTemplateTemplateModel))];
  return [self wrapWithId:[((id<JavaUtilMap>) nil_chk(((id<JavaUtilMap>) check_protocol_cast(object_, @protocol(JavaUtilMap))))) getWithId:key]];
}


#line 85
- (id<FreemarkerTemplateTemplateModel>)invokeGenericGetWithJavaUtilMap:(id<JavaUtilMap>)keyMap
                                                          withIOSClass:(IOSClass *)clazz
                                                          withNSString:(NSString *)key {
  
#line 88
  id<JavaUtilMap> map = (id<JavaUtilMap>) check_protocol_cast(object_, @protocol(JavaUtilMap));
  id val = [((id<JavaUtilMap>) nil_chk(map)) getWithId:key];
  if (val == nil) {
    if (((jint) [((NSString *) nil_chk(key)) length]) == 1) {
      
#line 93
      JavaLangCharacter *charKey = new_JavaLangCharacter_initWithChar_([key charAtWithInt:0]);
      val = [map getWithId:charKey];
      if (val == nil && !([map containsKeyWithId:key] || [map containsKeyWithId:charKey])) {
        return FreemarkerExtBeansBeanModel_get_UNKNOWN_();
      }
    }
    else if (![map containsKeyWithId:key]) {
      return FreemarkerExtBeansBeanModel_get_UNKNOWN_();
    }
  }
  return [self wrapWithId:val];
}


#line 106
- (jboolean)isEmpty {
  
#line 108
  return [((id<JavaUtilMap>) nil_chk(((id<JavaUtilMap>) check_protocol_cast(object_, @protocol(JavaUtilMap))))) isEmpty] && [super isEmpty];
}


#line 111
- (jint)size {
  
#line 113
  return [((id<JavaUtilSet>) nil_chk([self keySet])) size];
}


#line 116
- (id<JavaUtilSet>)keySet {
  
#line 118
  id<JavaUtilSet> set = [super keySet];
  [((id<JavaUtilSet>) nil_chk(set)) addAllWithJavaUtilCollection:[((id<JavaUtilMap>) nil_chk(((id<JavaUtilMap>) check_protocol_cast(object_, @protocol(JavaUtilMap))))) keySet]];
  return set;
}

+ (void)initialize {
  if (self == [FreemarkerExtBeansMapModel class]) {
    FreemarkerExtBeansMapModel_FACTORY_ = new_FreemarkerExtBeansMapModel_$1_init();
    J2OBJC_SET_INITIALIZED(FreemarkerExtBeansMapModel)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaUtilMap:withFreemarkerExtBeansBeansWrapper:", "MapModel", NULL, 0x1, NULL, NULL },
    { "execWithJavaUtilList:", "exec", "Ljava.lang.Object;", 0x1, "Lfreemarker.template.TemplateModelException;", NULL },
    { "invokeGenericGetWithJavaUtilMap:withIOSClass:withNSString:", "invokeGenericGet", "Lfreemarker.template.TemplateModel;", 0x4, "Lfreemarker.template.TemplateModelException;", NULL },
    { "isEmpty", NULL, "Z", 0x1, NULL, NULL },
    { "size", NULL, "I", 0x1, NULL, NULL },
    { "keySet", NULL, "Ljava.util.Set;", 0x4, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "FACTORY_", NULL, 0x18, "Lfreemarker.ext.util.ModelFactory;", &FreemarkerExtBeansMapModel_FACTORY_, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerExtBeansMapModel = { 2, "MapModel", "freemarker.ext.beans", NULL, 0x1, 6, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerExtBeansMapModel;
}

@end


#line 65
void FreemarkerExtBeansMapModel_initWithJavaUtilMap_withFreemarkerExtBeansBeansWrapper_(FreemarkerExtBeansMapModel *self, id<JavaUtilMap> map, FreemarkerExtBeansBeansWrapper *wrapper) {
  (void) FreemarkerExtBeansStringModel_initWithId_withFreemarkerExtBeansBeansWrapper_(self,
#line 67
  map, wrapper);
}


#line 65
FreemarkerExtBeansMapModel *new_FreemarkerExtBeansMapModel_initWithJavaUtilMap_withFreemarkerExtBeansBeansWrapper_(id<JavaUtilMap> map, FreemarkerExtBeansBeansWrapper *wrapper) {
  FreemarkerExtBeansMapModel *self = [FreemarkerExtBeansMapModel alloc];
  FreemarkerExtBeansMapModel_initWithJavaUtilMap_withFreemarkerExtBeansBeansWrapper_(self, map, wrapper);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerExtBeansMapModel)

@implementation FreemarkerExtBeansMapModel_$1


#line 51
- (id<FreemarkerTemplateTemplateModel>)createWithId:(id)object
                withFreemarkerTemplateObjectWrapper:(id<FreemarkerTemplateObjectWrapper>)wrapper {
  
#line 53
  return new_FreemarkerExtBeansMapModel_initWithJavaUtilMap_withFreemarkerExtBeansBeansWrapper_((id<JavaUtilMap>) check_protocol_cast(object, @protocol(JavaUtilMap)), (FreemarkerExtBeansBeansWrapper *) check_class_cast(wrapper, [FreemarkerExtBeansBeansWrapper class]));
}

- (instancetype)init {
  FreemarkerExtBeansMapModel_$1_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "createWithId:withFreemarkerTemplateObjectWrapper:", "create", "Lfreemarker.template.TemplateModel;", 0x1, NULL, NULL },
    { "init", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcClassInfo _FreemarkerExtBeansMapModel_$1 = { 2, "", "freemarker.ext.beans", "MapModel", 0x8008, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerExtBeansMapModel_$1;
}

@end

void FreemarkerExtBeansMapModel_$1_init(FreemarkerExtBeansMapModel_$1 *self) {
  (void) NSObject_init(self);
}

FreemarkerExtBeansMapModel_$1 *new_FreemarkerExtBeansMapModel_$1_init() {
  FreemarkerExtBeansMapModel_$1 *self = [FreemarkerExtBeansMapModel_$1 alloc];
  FreemarkerExtBeansMapModel_$1_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerExtBeansMapModel_$1)
