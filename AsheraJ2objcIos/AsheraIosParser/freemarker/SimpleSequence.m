//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/template/SimpleSequence.java
//


#include "BeansWrapper.h"
#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "ObjectWrapper.h"
#include "SimpleSequence.h"
#include "TemplateBooleanModel.h"
#include "TemplateCollectionModel.h"
#include "TemplateModel.h"
#include "TemplateModelException.h"
#include "TemplateModelIterator.h"
#include "WrappingTemplateModel.h"
#include "java/lang/Exception.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/List.h"

#line 0 "/Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/template/SimpleSequence.java"

@interface FreemarkerTemplateSimpleSequence () {
 @public
  id<JavaUtilList> unwrappedList_;
}

@end

J2OBJC_FIELD_SETTER(FreemarkerTemplateSimpleSequence, unwrappedList_, id<JavaUtilList>)

@interface FreemarkerTemplateSimpleSequence_SynchronizedSequence : FreemarkerTemplateSimpleSequence {
 @public
  FreemarkerTemplateSimpleSequence *this$0_;
}

- (void)addWithId:(id)obj;

- (id<FreemarkerTemplateTemplateModel>)getWithInt:(jint)i;

- (jint)size;

- (id<JavaUtilList>)toList;

- (instancetype)initWithFreemarkerTemplateSimpleSequence:(FreemarkerTemplateSimpleSequence *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(FreemarkerTemplateSimpleSequence_SynchronizedSequence)

J2OBJC_FIELD_SETTER(FreemarkerTemplateSimpleSequence_SynchronizedSequence, this$0_, FreemarkerTemplateSimpleSequence *)

__attribute__((unused)) static void FreemarkerTemplateSimpleSequence_SynchronizedSequence_initWithFreemarkerTemplateSimpleSequence_(FreemarkerTemplateSimpleSequence_SynchronizedSequence *self, FreemarkerTemplateSimpleSequence *outer$);

__attribute__((unused)) static FreemarkerTemplateSimpleSequence_SynchronizedSequence *new_FreemarkerTemplateSimpleSequence_SynchronizedSequence_initWithFreemarkerTemplateSimpleSequence_(FreemarkerTemplateSimpleSequence *outer$) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerTemplateSimpleSequence_SynchronizedSequence)


#line 66
@implementation FreemarkerTemplateSimpleSequence


#line 83
- (instancetype)init {
  FreemarkerTemplateSimpleSequence_init(self);
  return self;
}


#line 94
- (instancetype)initWithInt:(jint)capacity {
  FreemarkerTemplateSimpleSequence_initWithInt_(self, capacity);
  return self;
}


#line 109
- (instancetype)initWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  FreemarkerTemplateSimpleSequence_initWithJavaUtilCollection_(self, collection);
  return self;
}


#line 119
- (instancetype)initWithFreemarkerTemplateTemplateCollectionModel:(id<FreemarkerTemplateTemplateCollectionModel>)tcm {
  FreemarkerTemplateSimpleSequence_initWithFreemarkerTemplateTemplateCollectionModel_(self, tcm);
  return self;
}


#line 136
- (instancetype)initWithFreemarkerTemplateObjectWrapper:(id<FreemarkerTemplateObjectWrapper>)wrapper {
  FreemarkerTemplateSimpleSequence_initWithFreemarkerTemplateObjectWrapper_(self, wrapper);
  return self;
}


#line 149
- (instancetype)initWithInt:(jint)capacity
withFreemarkerTemplateObjectWrapper:(id<FreemarkerTemplateObjectWrapper>)wrapper {
  FreemarkerTemplateSimpleSequence_initWithInt_withFreemarkerTemplateObjectWrapper_(self, capacity, wrapper);
  return self;
}


#line 166
- (instancetype)initWithJavaUtilCollection:(id<JavaUtilCollection>)collection
       withFreemarkerTemplateObjectWrapper:(id<FreemarkerTemplateObjectWrapper>)wrapper {
  FreemarkerTemplateSimpleSequence_initWithJavaUtilCollection_withFreemarkerTemplateObjectWrapper_(self, collection, wrapper);
  return self;
}


#line 179
- (void)addWithId:(id)obj {
  [((id<JavaUtilList>) nil_chk(list_)) addWithId:obj];
  unwrappedList_ = nil;
}


#line 193
- (void)addWithBoolean:(jboolean)b {
  [self addWithId:b ? FreemarkerTemplateTemplateBooleanModel_get_TRUE__() : FreemarkerTemplateTemplateBooleanModel_get_FALSE__()];
}


#line 204
- (id<JavaUtilList>)toList {
  if (unwrappedList_ == nil) {
    IOSClass *listClass = [((id<JavaUtilList>) nil_chk(list_)) getClass];
    id<JavaUtilList> result = nil;
    @try {
      result = (id<JavaUtilList>) check_protocol_cast([listClass newInstance], @protocol(JavaUtilList));
    }
    @catch (
#line 210
    JavaLangException *e) {
      @throw new_FreemarkerTemplateTemplateModelException_initWithNSString_withJavaLangException_(JreStrcat("$$", @"Error instantiating an object of type ", [listClass getName]),
#line 212
      e);
    }
    FreemarkerExtBeansBeansWrapper *bw = FreemarkerExtBeansBeansWrapper_getDefaultInstance();
    for (jint i = 0; i < [list_ size]; i++) {
      id elem = [list_ getWithInt:i];
      if ([FreemarkerTemplateTemplateModel_class_() isInstance:elem]) {
        elem = [((FreemarkerExtBeansBeansWrapper *) nil_chk(bw)) unwrapWithFreemarkerTemplateTemplateModel:(id<FreemarkerTemplateTemplateModel>) check_protocol_cast(elem, @protocol(FreemarkerTemplateTemplateModel))];
      }
      [((id<JavaUtilList>) nil_chk(result)) addWithId:elem];
    }
    unwrappedList_ = result;
  }
  return unwrappedList_;
}

- (id<FreemarkerTemplateTemplateModel>)getWithInt:(jint)index {
  @try {
    id value = [((id<JavaUtilList>) nil_chk(list_)) getWithInt:index];
    if ([FreemarkerTemplateTemplateModel_class_() isInstance:value]) {
      return (id<FreemarkerTemplateTemplateModel>) check_protocol_cast(value, @protocol(FreemarkerTemplateTemplateModel));
    }
    id<FreemarkerTemplateTemplateModel> tm = [self wrapWithId:value];
    (void) [list_ setWithInt:index withId:tm];
    return tm;
  }
  @catch (JavaLangIndexOutOfBoundsException *e) {
    return nil;
  }
}

- (jint)size {
  return [((id<JavaUtilList>) nil_chk(list_)) size];
}


#line 253
- (FreemarkerTemplateSimpleSequence *)synchronizedWrapper {
  return new_FreemarkerTemplateSimpleSequence_SynchronizedSequence_initWithFreemarkerTemplateSimpleSequence_(self);
}

- (NSString *)description {
  return [((id<JavaUtilList>) nil_chk(list_)) description];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "SimpleSequence", NULL, 0x1, NULL, NULL },
    { "initWithInt:", "SimpleSequence", NULL, 0x1, NULL, NULL },
    { "initWithJavaUtilCollection:", "SimpleSequence", NULL, 0x1, NULL, NULL },
    { "initWithFreemarkerTemplateTemplateCollectionModel:", "SimpleSequence", NULL, 0x1, "Lfreemarker.template.TemplateModelException;", NULL },
    { "initWithFreemarkerTemplateObjectWrapper:", "SimpleSequence", NULL, 0x1, NULL, NULL },
    { "initWithInt:withFreemarkerTemplateObjectWrapper:", "SimpleSequence", NULL, 0x1, NULL, NULL },
    { "initWithJavaUtilCollection:withFreemarkerTemplateObjectWrapper:", "SimpleSequence", NULL, 0x1, NULL, NULL },
    { "addWithId:", "add", "V", 0x1, NULL, NULL },
    { "addWithBoolean:", "add", "V", 0x1, NULL, NULL },
    { "toList", NULL, "Ljava.util.List;", 0x1, "Lfreemarker.template.TemplateModelException;", NULL },
    { "getWithInt:", "get", "Lfreemarker.template.TemplateModel;", 0x1, "Lfreemarker.template.TemplateModelException;", NULL },
    { "size", NULL, "I", 0x1, NULL, NULL },
    { "synchronizedWrapper", NULL, "Lfreemarker.template.SimpleSequence;", 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "list_", NULL, 0x14, "Ljava.util.List;", NULL, NULL,  },
    { "unwrappedList_", NULL, 0x2, "Ljava.util.List;", NULL, NULL,  },
  };
  static const char *inner_classes[] = {"Lfreemarker.template.SimpleSequence$SynchronizedSequence;"};
  static const J2ObjcClassInfo _FreemarkerTemplateSimpleSequence = { 2, "SimpleSequence", "freemarker.template", NULL, 0x1, 14, methods, 2, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_FreemarkerTemplateSimpleSequence;
}

@end


#line 83
void FreemarkerTemplateSimpleSequence_init(FreemarkerTemplateSimpleSequence *self) {
  (void) FreemarkerTemplateSimpleSequence_initWithFreemarkerTemplateObjectWrapper_(self, nil);
}


#line 83
FreemarkerTemplateSimpleSequence *new_FreemarkerTemplateSimpleSequence_init() {
  FreemarkerTemplateSimpleSequence *self = [FreemarkerTemplateSimpleSequence alloc];
  FreemarkerTemplateSimpleSequence_init(self);
  return self;
}


#line 94
void FreemarkerTemplateSimpleSequence_initWithInt_(FreemarkerTemplateSimpleSequence *self, jint capacity) {
  (void) FreemarkerTemplateWrappingTemplateModel_init(self);
  
#line 95
  self->list_ = new_JavaUtilArrayList_initWithInt_(capacity);
}


#line 94
FreemarkerTemplateSimpleSequence *new_FreemarkerTemplateSimpleSequence_initWithInt_(jint capacity) {
  FreemarkerTemplateSimpleSequence *self = [FreemarkerTemplateSimpleSequence alloc];
  FreemarkerTemplateSimpleSequence_initWithInt_(self, capacity);
  return self;
}


#line 109
void FreemarkerTemplateSimpleSequence_initWithJavaUtilCollection_(FreemarkerTemplateSimpleSequence *self, id<JavaUtilCollection> collection) {
  (void) FreemarkerTemplateSimpleSequence_initWithJavaUtilCollection_withFreemarkerTemplateObjectWrapper_(self, collection, nil);
}


#line 109
FreemarkerTemplateSimpleSequence *new_FreemarkerTemplateSimpleSequence_initWithJavaUtilCollection_(id<JavaUtilCollection> collection) {
  FreemarkerTemplateSimpleSequence *self = [FreemarkerTemplateSimpleSequence alloc];
  FreemarkerTemplateSimpleSequence_initWithJavaUtilCollection_(self, collection);
  return self;
}


#line 119
void FreemarkerTemplateSimpleSequence_initWithFreemarkerTemplateTemplateCollectionModel_(FreemarkerTemplateSimpleSequence *self, id<FreemarkerTemplateTemplateCollectionModel> tcm) {
  (void) FreemarkerTemplateWrappingTemplateModel_init(self);
  
#line 120
  JavaUtilArrayList *alist = new_JavaUtilArrayList_init();
  for (id<FreemarkerTemplateTemplateModelIterator> it = [((id<FreemarkerTemplateTemplateCollectionModel>) nil_chk(tcm)) iterator]; [((id<FreemarkerTemplateTemplateModelIterator>) nil_chk(it)) hasNext]; ) {
    [alist addWithId:[it next]];
  }
  [alist trimToSize];
  self->list_ = alist;
}


#line 119
FreemarkerTemplateSimpleSequence *new_FreemarkerTemplateSimpleSequence_initWithFreemarkerTemplateTemplateCollectionModel_(id<FreemarkerTemplateTemplateCollectionModel> tcm) {
  FreemarkerTemplateSimpleSequence *self = [FreemarkerTemplateSimpleSequence alloc];
  FreemarkerTemplateSimpleSequence_initWithFreemarkerTemplateTemplateCollectionModel_(self, tcm);
  return self;
}


#line 136
void FreemarkerTemplateSimpleSequence_initWithFreemarkerTemplateObjectWrapper_(FreemarkerTemplateSimpleSequence *self, id<FreemarkerTemplateObjectWrapper> wrapper) {
  (void) FreemarkerTemplateWrappingTemplateModel_initWithFreemarkerTemplateObjectWrapper_(self, wrapper);
  self->list_ = new_JavaUtilArrayList_init();
}


#line 136
FreemarkerTemplateSimpleSequence *new_FreemarkerTemplateSimpleSequence_initWithFreemarkerTemplateObjectWrapper_(id<FreemarkerTemplateObjectWrapper> wrapper) {
  FreemarkerTemplateSimpleSequence *self = [FreemarkerTemplateSimpleSequence alloc];
  FreemarkerTemplateSimpleSequence_initWithFreemarkerTemplateObjectWrapper_(self, wrapper);
  return self;
}


#line 149
void FreemarkerTemplateSimpleSequence_initWithInt_withFreemarkerTemplateObjectWrapper_(FreemarkerTemplateSimpleSequence *self, jint capacity, id<FreemarkerTemplateObjectWrapper> wrapper) {
  (void) FreemarkerTemplateWrappingTemplateModel_initWithFreemarkerTemplateObjectWrapper_(self, wrapper);
  self->list_ = new_JavaUtilArrayList_initWithInt_(capacity);
}


#line 149
FreemarkerTemplateSimpleSequence *new_FreemarkerTemplateSimpleSequence_initWithInt_withFreemarkerTemplateObjectWrapper_(jint capacity, id<FreemarkerTemplateObjectWrapper> wrapper) {
  FreemarkerTemplateSimpleSequence *self = [FreemarkerTemplateSimpleSequence alloc];
  FreemarkerTemplateSimpleSequence_initWithInt_withFreemarkerTemplateObjectWrapper_(self, capacity, wrapper);
  return self;
}


#line 166
void FreemarkerTemplateSimpleSequence_initWithJavaUtilCollection_withFreemarkerTemplateObjectWrapper_(FreemarkerTemplateSimpleSequence *self, id<JavaUtilCollection> collection, id<FreemarkerTemplateObjectWrapper> wrapper) {
  (void) FreemarkerTemplateWrappingTemplateModel_initWithFreemarkerTemplateObjectWrapper_(self, wrapper);
  self->list_ = new_JavaUtilArrayList_initWithJavaUtilCollection_(collection);
}


#line 166
FreemarkerTemplateSimpleSequence *new_FreemarkerTemplateSimpleSequence_initWithJavaUtilCollection_withFreemarkerTemplateObjectWrapper_(id<JavaUtilCollection> collection, id<FreemarkerTemplateObjectWrapper> wrapper) {
  FreemarkerTemplateSimpleSequence *self = [FreemarkerTemplateSimpleSequence alloc];
  FreemarkerTemplateSimpleSequence_initWithJavaUtilCollection_withFreemarkerTemplateObjectWrapper_(self, collection, wrapper);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerTemplateSimpleSequence)


#line 261
@implementation FreemarkerTemplateSimpleSequence_SynchronizedSequence

- (void)addWithId:(id)obj {
  @synchronized(this$0_) {
    [this$0_ addWithId:obj];
  }
}

- (id<FreemarkerTemplateTemplateModel>)getWithInt:(jint)i {
  @synchronized(this$0_) {
    return [this$0_ getWithInt:i];
  }
}

- (jint)size {
  @synchronized(this$0_) {
    return [this$0_ size];
  }
}

- (id<JavaUtilList>)toList {
  @synchronized(this$0_) {
    return [this$0_ toList];
  }
}

- (instancetype)initWithFreemarkerTemplateSimpleSequence:(FreemarkerTemplateSimpleSequence *)outer$ {
  FreemarkerTemplateSimpleSequence_SynchronizedSequence_initWithFreemarkerTemplateSimpleSequence_(self, outer$);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "addWithId:", "add", "V", 0x1, NULL, NULL },
    { "getWithInt:", "get", "Lfreemarker.template.TemplateModel;", 0x1, "Lfreemarker.template.TemplateModelException;", NULL },
    { "size", NULL, "I", 0x1, NULL, NULL },
    { "toList", NULL, "Ljava.util.List;", 0x1, "Lfreemarker.template.TemplateModelException;", NULL },
    { "initWithFreemarkerTemplateSimpleSequence:", "init", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lfreemarker.template.SimpleSequence;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerTemplateSimpleSequence_SynchronizedSequence = { 2, "SynchronizedSequence", "freemarker.template", "SimpleSequence", 0x2, 5, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerTemplateSimpleSequence_SynchronizedSequence;
}

@end

void FreemarkerTemplateSimpleSequence_SynchronizedSequence_initWithFreemarkerTemplateSimpleSequence_(FreemarkerTemplateSimpleSequence_SynchronizedSequence *self, FreemarkerTemplateSimpleSequence *outer$) {
  self->this$0_ = outer$;
  (void) FreemarkerTemplateSimpleSequence_init(self);
}

FreemarkerTemplateSimpleSequence_SynchronizedSequence *new_FreemarkerTemplateSimpleSequence_SynchronizedSequence_initWithFreemarkerTemplateSimpleSequence_(FreemarkerTemplateSimpleSequence *outer$) {
  FreemarkerTemplateSimpleSequence_SynchronizedSequence *self = [FreemarkerTemplateSimpleSequence_SynchronizedSequence alloc];
  FreemarkerTemplateSimpleSequence_SynchronizedSequence_initWithFreemarkerTemplateSimpleSequence_(self, outer$);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerTemplateSimpleSequence_SynchronizedSequence)
