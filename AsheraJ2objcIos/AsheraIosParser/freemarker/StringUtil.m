//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/template/utility/StringUtil.java
//


#include "BugException.h"
#include "ClassUtil.h"
#include "CollectionUtils.h"
#include "Environment.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "NullArgumentException.h"
#include "ParseException.h"
#include "StringUtil.h"
#include "Template.h"
#include "Version.h"
#include "java/io/UnsupportedEncodingException.h"
#include "java/lang/Character.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/System.h"
#include "java/lang/Throwable.h"
#include "java/text/ParseException.h"
#include "java/util/HashMap.h"
#include "java/util/Locale.h"
#include "java/util/Map.h"
#include "java/util/StringTokenizer.h"

#line 0 "/Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/template/utility/StringUtil.java"

#define FreemarkerTemplateUtilityStringUtil_NO_ESC 0
#define FreemarkerTemplateUtilityStringUtil_ESC_HEXA 1
#define FreemarkerTemplateUtilityStringUtil_ESC_BACKSLASH 3

@interface FreemarkerTemplateUtilityStringUtil ()

+ (NSString *)XMLOrXHTMLEncWithNSString:(NSString *)s
                           withNSString:(NSString *)aposReplacement;

+ (NSString *)URLEncWithNSString:(NSString *)s
                    withNSString:(NSString *)charset
                     withBoolean:(jboolean)keepSlash;

+ (jboolean)safeInURLWithChar:(jchar)c
                  withBoolean:(jboolean)keepSlash;

+ (IOSCharArray *)createEscapes;

+ (NSString *)FTLStringLiteralEncWithNSString:(NSString *)s
                                     withChar:(jchar)quotation
                                  withBoolean:(jboolean)addQuotation;

+ (jboolean)isInterpolationStartWithChar:(jchar)c;

+ (jchar)toHexDigitWithInt:(jint)d;

+ (NSString *)failedToStringSubstituteWithId:(id)object
                       withJavaLangThrowable:(JavaLangThrowable *)e;

/**
 @param oneDigit The character that stands for the value 1.
 */
+ (NSString *)toABCWithInt:(jint)n
                  withChar:(jchar)oneDigit;

@end

static IOSCharArray *FreemarkerTemplateUtilityStringUtil_ESCAPES_;
J2OBJC_STATIC_FIELD_GETTER(FreemarkerTemplateUtilityStringUtil, ESCAPES_, IOSCharArray *)

J2OBJC_STATIC_FIELD_GETTER(FreemarkerTemplateUtilityStringUtil, NO_ESC, jint)

J2OBJC_STATIC_FIELD_GETTER(FreemarkerTemplateUtilityStringUtil, ESC_HEXA, jint)

J2OBJC_STATIC_FIELD_GETTER(FreemarkerTemplateUtilityStringUtil, ESC_BACKSLASH, jint)

__attribute__((unused)) static NSString *FreemarkerTemplateUtilityStringUtil_XMLOrXHTMLEncWithNSString_withNSString_(NSString *s, NSString *aposReplacement);

__attribute__((unused)) static NSString *FreemarkerTemplateUtilityStringUtil_URLEncWithNSString_withNSString_withBoolean_(NSString *s, NSString *charset, jboolean keepSlash);

__attribute__((unused)) static jboolean FreemarkerTemplateUtilityStringUtil_safeInURLWithChar_withBoolean_(jchar c, jboolean keepSlash);

__attribute__((unused)) static IOSCharArray *FreemarkerTemplateUtilityStringUtil_createEscapes();

__attribute__((unused)) static NSString *FreemarkerTemplateUtilityStringUtil_FTLStringLiteralEncWithNSString_withChar_withBoolean_(NSString *s, jchar quotation, jboolean addQuotation);

__attribute__((unused)) static jboolean FreemarkerTemplateUtilityStringUtil_isInterpolationStartWithChar_(jchar c);

__attribute__((unused)) static jchar FreemarkerTemplateUtilityStringUtil_toHexDigitWithInt_(jint d);

__attribute__((unused)) static NSString *FreemarkerTemplateUtilityStringUtil_failedToStringSubstituteWithId_withJavaLangThrowable_(id object, JavaLangThrowable *e);

__attribute__((unused)) static NSString *FreemarkerTemplateUtilityStringUtil_toABCWithInt_withChar_(jint n, jchar oneDigit);

J2OBJC_INITIALIZED_DEFN(FreemarkerTemplateUtilityStringUtil)


#line 34
@implementation FreemarkerTemplateUtilityStringUtil


#line 49
+ (NSString *)HTMLEncWithNSString:(NSString *)s {
  return FreemarkerTemplateUtilityStringUtil_HTMLEncWithNSString_(s);
}


#line 57
+ (NSString *)XMLEncWithNSString:(NSString *)s {
  return FreemarkerTemplateUtilityStringUtil_XMLEncWithNSString_(s);
}


#line 68
+ (NSString *)XHTMLEncWithNSString:(NSString *)s {
  return FreemarkerTemplateUtilityStringUtil_XHTMLEncWithNSString_(s);
}

+ (NSString *)XMLOrXHTMLEncWithNSString:(NSString *)s
                           withNSString:(NSString *)aposReplacement {
  return FreemarkerTemplateUtilityStringUtil_XMLOrXHTMLEncWithNSString_withNSString_(s, aposReplacement);
}


#line 115
+ (NSString *)XMLEncNAWithNSString:(NSString *)s {
  return FreemarkerTemplateUtilityStringUtil_XMLEncNAWithNSString_(s);
}


#line 157
+ (NSString *)XMLEncQAttrWithNSString:(NSString *)s {
  return FreemarkerTemplateUtilityStringUtil_XMLEncQAttrWithNSString_(s);
}


#line 199
+ (NSString *)XMLEncNQGWithNSString:(NSString *)s {
  return FreemarkerTemplateUtilityStringUtil_XMLEncNQGWithNSString_(s);
}


#line 250
+ (NSString *)RTFEncWithNSString:(NSString *)s {
  return FreemarkerTemplateUtilityStringUtil_RTFEncWithNSString_(s);
}


#line 289
+ (NSString *)URLEncWithNSString:(NSString *)s
                    withNSString:(NSString *)charset {
  return FreemarkerTemplateUtilityStringUtil_URLEncWithNSString_withNSString_(s, charset);
}


#line 301
+ (NSString *)URLPathEncWithNSString:(NSString *)s
                        withNSString:(NSString *)charset {
  return FreemarkerTemplateUtilityStringUtil_URLPathEncWithNSString_withNSString_(s, charset);
}


#line 305
+ (NSString *)URLEncWithNSString:(NSString *)s
                    withNSString:(NSString *)charset
                     withBoolean:(jboolean)keepSlash {
  return FreemarkerTemplateUtilityStringUtil_URLEncWithNSString_withNSString_withBoolean_(s, charset, keepSlash);
}


#line 361
+ (jboolean)safeInURLWithChar:(jchar)c
                  withBoolean:(jboolean)keepSlash {
  return FreemarkerTemplateUtilityStringUtil_safeInURLWithChar_withBoolean_(c, keepSlash);
}


#line 369
+ (IOSCharArray *)createEscapes {
  return FreemarkerTemplateUtilityStringUtil_createEscapes();
}


#line 401
+ (NSString *)FTLStringLiteralEncWithNSString:(NSString *)s
                                     withChar:(jchar)quotation {
  return FreemarkerTemplateUtilityStringUtil_FTLStringLiteralEncWithNSString_withChar_(s, quotation);
}


#line 412
+ (NSString *)FTLStringLiteralEncWithNSString:(NSString *)s {
  return FreemarkerTemplateUtilityStringUtil_FTLStringLiteralEncWithNSString_(s);
}

+ (NSString *)FTLStringLiteralEncWithNSString:(NSString *)s
                                     withChar:(jchar)quotation
                                  withBoolean:(jboolean)addQuotation {
  return FreemarkerTemplateUtilityStringUtil_FTLStringLiteralEncWithNSString_withChar_withBoolean_(s, quotation, addQuotation);
}


#line 477
+ (jboolean)isInterpolationStartWithChar:(jchar)c {
  return FreemarkerTemplateUtilityStringUtil_isInterpolationStartWithChar_(c);
}


#line 499
+ (NSString *)FTLStringLiteralDecWithNSString:(NSString *)s {
  return FreemarkerTemplateUtilityStringUtil_FTLStringLiteralDecWithNSString_(s);
}


#line 603
+ (JavaUtilLocale *)deduceLocaleWithNSString:(NSString *)input {
  return FreemarkerTemplateUtilityStringUtil_deduceLocaleWithNSString_(input);
}


#line 624
+ (NSString *)capitalizeWithNSString:(NSString *)s {
  return FreemarkerTemplateUtilityStringUtil_capitalizeWithNSString_(s);
}


#line 635
+ (jboolean)getYesNoWithNSString:(NSString *)s {
  return FreemarkerTemplateUtilityStringUtil_getYesNoWithNSString_(s);
}


#line 658
+ (IOSObjectArray *)splitWithNSString:(NSString *)s
                             withChar:(jchar)c {
  return FreemarkerTemplateUtilityStringUtil_splitWithNSString_withChar_(s, c);
}


#line 686
+ (IOSObjectArray *)splitWithNSString:(NSString *)s
                         withNSString:(NSString *)sep
                          withBoolean:(jboolean)caseInsensitive {
  return FreemarkerTemplateUtilityStringUtil_splitWithNSString_withNSString_withBoolean_(s, sep, caseInsensitive);
}


#line 721
+ (NSString *)replaceWithNSString:(NSString *)text
                     withNSString:(NSString *)oldSub
                     withNSString:(NSString *)newSub {
  return FreemarkerTemplateUtilityStringUtil_replaceWithNSString_withNSString_withNSString_(text, oldSub, newSub);
}


#line 731
+ (NSString *)replaceWithNSString:(NSString *)text
                     withNSString:(NSString *)oldsub
                     withNSString:(NSString *)newsub
                      withBoolean:(jboolean)caseInsensitive
                      withBoolean:(jboolean)firstOnly {
  return FreemarkerTemplateUtilityStringUtil_replaceWithNSString_withNSString_withNSString_withBoolean_withBoolean_(text, oldsub, newsub, caseInsensitive, firstOnly);
}


#line 784
+ (NSString *)chompWithNSString:(NSString *)s {
  return FreemarkerTemplateUtilityStringUtil_chompWithNSString_(s);
}


#line 795
+ (NSString *)emptyToNullWithNSString:(NSString *)s {
  return FreemarkerTemplateUtilityStringUtil_emptyToNullWithNSString_(s);
}


#line 804
+ (NSString *)jQuoteWithId:(id)obj {
  return FreemarkerTemplateUtilityStringUtil_jQuoteWithId_(obj);
}


#line 813
+ (NSString *)jQuoteWithNSString:(NSString *)s {
  return FreemarkerTemplateUtilityStringUtil_jQuoteWithNSString_(s);
}


#line 856
+ (NSString *)jQuoteNoXSSWithId:(id)obj {
  return FreemarkerTemplateUtilityStringUtil_jQuoteNoXSSWithId_(obj);
}


#line 865
+ (NSString *)jQuoteNoXSSWithNSString:(NSString *)s {
  return FreemarkerTemplateUtilityStringUtil_jQuoteNoXSSWithNSString_(s);
}


#line 917
+ (NSString *)ftlQuoteWithNSString:(NSString *)s {
  return FreemarkerTemplateUtilityStringUtil_ftlQuoteWithNSString_(s);
}


#line 932
+ (jboolean)isFTLIdentifierStartWithChar:(jchar)c {
  return FreemarkerTemplateUtilityStringUtil_isFTLIdentifierStartWithChar_(c);
}


#line 1203
+ (jboolean)isFTLIdentifierPartWithChar:(jchar)c {
  return FreemarkerTemplateUtilityStringUtil_isFTLIdentifierPartWithChar_(c);
}


#line 1218
+ (NSString *)javaStringEncWithNSString:(NSString *)s {
  return FreemarkerTemplateUtilityStringUtil_javaStringEncWithNSString_(s);
}


#line 1268
+ (NSString *)javaScriptStringEncWithNSString:(NSString *)s {
  return FreemarkerTemplateUtilityStringUtil_javaScriptStringEncWithNSString_(s);
}


#line 1276
+ (NSString *)jsonStringEncWithNSString:(NSString *)s {
  return FreemarkerTemplateUtilityStringUtil_jsonStringEncWithNSString_(s);
}


#line 1336
+ (NSString *)jsStringEncWithNSString:(NSString *)s
                          withBoolean:(jboolean)json {
  return FreemarkerTemplateUtilityStringUtil_jsStringEncWithNSString_withBoolean_(s, json);
}


#line 1439
+ (jchar)toHexDigitWithInt:(jint)d {
  return FreemarkerTemplateUtilityStringUtil_toHexDigitWithInt_(d);
}


#line 1462
+ (id<JavaUtilMap>)parseNameValuePairListWithNSString:(NSString *)s
                                         withNSString:(NSString *)defaultValue {
  return FreemarkerTemplateUtilityStringUtil_parseNameValuePairListWithNSString_withNSString_(s, defaultValue);
}


#line 1615
+ (jboolean)isXMLIDWithNSString:(NSString *)name {
  return FreemarkerTemplateUtilityStringUtil_isXMLIDWithNSString_(name);
}


#line 1633
+ (jboolean)matchesNameWithNSString:(NSString *)qname
                       withNSString:(NSString *)nodeName
                       withNSString:(NSString *)nsURI
      withFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env {
  return FreemarkerTemplateUtilityStringUtil_matchesNameWithNSString_withNSString_withNSString_withFreemarkerCoreEnvironment_(qname, nodeName, nsURI, env);
}


#line 1661
+ (NSString *)leftPadWithNSString:(NSString *)s
                          withInt:(jint)minLength {
  return FreemarkerTemplateUtilityStringUtil_leftPadWithNSString_withInt_(s, minLength);
}


#line 1674
+ (NSString *)leftPadWithNSString:(NSString *)s
                          withInt:(jint)minLength
                         withChar:(jchar)filling {
  return FreemarkerTemplateUtilityStringUtil_leftPadWithNSString_withInt_withChar_(s, minLength, filling);
}


#line 1703
+ (NSString *)leftPadWithNSString:(NSString *)s
                          withInt:(jint)minLength
                     withNSString:(NSString *)filling {
  return FreemarkerTemplateUtilityStringUtil_leftPadWithNSString_withInt_withNSString_(s, minLength, filling);
}


#line 1739
+ (NSString *)rightPadWithNSString:(NSString *)s
                           withInt:(jint)minLength {
  return FreemarkerTemplateUtilityStringUtil_rightPadWithNSString_withInt_(s, minLength);
}


#line 1752
+ (NSString *)rightPadWithNSString:(NSString *)s
                           withInt:(jint)minLength
                          withChar:(jchar)filling {
  return FreemarkerTemplateUtilityStringUtil_rightPadWithNSString_withInt_withChar_(s, minLength, filling);
}


#line 1783
+ (NSString *)rightPadWithNSString:(NSString *)s
                           withInt:(jint)minLength
                      withNSString:(NSString *)filling {
  return FreemarkerTemplateUtilityStringUtil_rightPadWithNSString_withInt_withNSString_(s, minLength, filling);
}


#line 1830
+ (jint)versionStringToIntWithNSString:(NSString *)version_ {
  return FreemarkerTemplateUtilityStringUtil_versionStringToIntWithNSString_(version_);
}


#line 1841
+ (NSString *)tryToStringWithId:(id)object {
  return FreemarkerTemplateUtilityStringUtil_tryToStringWithId_(object);
}


#line 1851
+ (NSString *)failedToStringSubstituteWithId:(id)object
                       withJavaLangThrowable:(JavaLangThrowable *)e {
  return FreemarkerTemplateUtilityStringUtil_failedToStringSubstituteWithId_withJavaLangThrowable_(object, e);
}


#line 1871
+ (NSString *)toUpperABCWithInt:(jint)n {
  return FreemarkerTemplateUtilityStringUtil_toUpperABCWithInt_(n);
}


#line 1880
+ (NSString *)toLowerABCWithInt:(jint)n {
  return FreemarkerTemplateUtilityStringUtil_toLowerABCWithInt_(n);
}


#line 1888
+ (NSString *)toABCWithInt:(jint)n
                  withChar:(jchar)oneDigit {
  return FreemarkerTemplateUtilityStringUtil_toABCWithInt_withChar_(n, oneDigit);
}


#line 1934
+ (IOSCharArray *)trimWithCharArray:(IOSCharArray *)cs {
  return FreemarkerTemplateUtilityStringUtil_trimWithCharArray_(cs);
}


#line 1965
+ (jboolean)isTrimmableToEmptyWithCharArray:(IOSCharArray *)text {
  return FreemarkerTemplateUtilityStringUtil_isTrimmableToEmptyWithCharArray_(text);
}


#line 1974
+ (jboolean)isTrimmableToEmptyWithCharArray:(IOSCharArray *)text
                                    withInt:(jint)start {
  return FreemarkerTemplateUtilityStringUtil_isTrimmableToEmptyWithCharArray_withInt_(text, start);
}


#line 1984
+ (jboolean)isTrimmableToEmptyWithCharArray:(IOSCharArray *)text
                                    withInt:(jint)start
                                    withInt:(jint)end {
  return FreemarkerTemplateUtilityStringUtil_isTrimmableToEmptyWithCharArray_withInt_withInt_(text, start, end);
}

- (instancetype)init {
  FreemarkerTemplateUtilityStringUtil_init(self);
  return self;
}

+ (void)initialize {
  if (self == [FreemarkerTemplateUtilityStringUtil class]) {
    FreemarkerTemplateUtilityStringUtil_ESCAPES_ = FreemarkerTemplateUtilityStringUtil_createEscapes();
    J2OBJC_SET_INITIALIZED(FreemarkerTemplateUtilityStringUtil)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "HTMLEncWithNSString:", "HTMLEnc", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "XMLEncWithNSString:", "XMLEnc", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "XHTMLEncWithNSString:", "XHTMLEnc", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "XMLOrXHTMLEncWithNSString:withNSString:", "XMLOrXHTMLEnc", "Ljava.lang.String;", 0xa, NULL, NULL },
    { "XMLEncNAWithNSString:", "XMLEncNA", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "XMLEncQAttrWithNSString:", "XMLEncQAttr", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "XMLEncNQGWithNSString:", "XMLEncNQG", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "RTFEncWithNSString:", "RTFEnc", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "URLEncWithNSString:withNSString:", "URLEnc", "Ljava.lang.String;", 0x9, "Ljava.io.UnsupportedEncodingException;", NULL },
    { "URLPathEncWithNSString:withNSString:", "URLPathEnc", "Ljava.lang.String;", 0x9, "Ljava.io.UnsupportedEncodingException;", NULL },
    { "URLEncWithNSString:withNSString:withBoolean:", "URLEnc", "Ljava.lang.String;", 0xa, "Ljava.io.UnsupportedEncodingException;", NULL },
    { "safeInURLWithChar:withBoolean:", "safeInURL", "Z", 0xa, NULL, NULL },
    { "createEscapes", NULL, "[C", 0xa, NULL, NULL },
    { "FTLStringLiteralEncWithNSString:withChar:", "FTLStringLiteralEnc", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "FTLStringLiteralEncWithNSString:", "FTLStringLiteralEnc", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "FTLStringLiteralEncWithNSString:withChar:withBoolean:", "FTLStringLiteralEnc", "Ljava.lang.String;", 0xa, NULL, NULL },
    { "isInterpolationStartWithChar:", "isInterpolationStart", "Z", 0xa, NULL, NULL },
    { "FTLStringLiteralDecWithNSString:", "FTLStringLiteralDec", "Ljava.lang.String;", 0x9, "Lfreemarker.core.ParseException;", NULL },
    { "deduceLocaleWithNSString:", "deduceLocale", "Ljava.util.Locale;", 0x9, NULL, NULL },
    { "capitalizeWithNSString:", "capitalize", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "getYesNoWithNSString:", "getYesNo", "Z", 0x9, NULL, NULL },
    { "splitWithNSString:withChar:", "split", "[Ljava.lang.String;", 0x9, NULL, NULL },
    { "splitWithNSString:withNSString:withBoolean:", "split", "[Ljava.lang.String;", 0x9, NULL, NULL },
    { "replaceWithNSString:withNSString:withNSString:", "replace", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "replaceWithNSString:withNSString:withNSString:withBoolean:withBoolean:", "replace", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "chompWithNSString:", "chomp", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "emptyToNullWithNSString:", "emptyToNull", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "jQuoteWithId:", "jQuote", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "jQuoteWithNSString:", "jQuote", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "jQuoteNoXSSWithId:", "jQuoteNoXSS", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "jQuoteNoXSSWithNSString:", "jQuoteNoXSS", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "ftlQuoteWithNSString:", "ftlQuote", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "isFTLIdentifierStartWithChar:", "isFTLIdentifierStart", "Z", 0x9, NULL, NULL },
    { "isFTLIdentifierPartWithChar:", "isFTLIdentifierPart", "Z", 0x9, NULL, NULL },
    { "javaStringEncWithNSString:", "javaStringEnc", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "javaScriptStringEncWithNSString:", "javaScriptStringEnc", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "jsonStringEncWithNSString:", "jsonStringEnc", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "jsStringEncWithNSString:withBoolean:", "jsStringEnc", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "toHexDigitWithInt:", "toHexDigit", "C", 0xa, NULL, NULL },
    { "parseNameValuePairListWithNSString:withNSString:", "parseNameValuePairList", "Ljava.util.Map;", 0x9, "Ljava.text.ParseException;", NULL },
    { "isXMLIDWithNSString:", "isXMLID", "Z", 0x9, NULL, NULL },
    { "matchesNameWithNSString:withNSString:withNSString:withFreemarkerCoreEnvironment:", "matchesName", "Z", 0x9, NULL, NULL },
    { "leftPadWithNSString:withInt:", "leftPad", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "leftPadWithNSString:withInt:withChar:", "leftPad", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "leftPadWithNSString:withInt:withNSString:", "leftPad", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "rightPadWithNSString:withInt:", "rightPad", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "rightPadWithNSString:withInt:withChar:", "rightPad", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "rightPadWithNSString:withInt:withNSString:", "rightPad", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "versionStringToIntWithNSString:", "versionStringToInt", "I", 0x9, NULL, NULL },
    { "tryToStringWithId:", "tryToString", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "failedToStringSubstituteWithId:withJavaLangThrowable:", "failedToStringSubstitute", "Ljava.lang.String;", 0xa, NULL, NULL },
    { "toUpperABCWithInt:", "toUpperABC", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "toLowerABCWithInt:", "toLowerABC", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "toABCWithInt:withChar:", "toABC", "Ljava.lang.String;", 0xa, NULL, NULL },
    { "trimWithCharArray:", "trim", "[C", 0x9, NULL, NULL },
    { "isTrimmableToEmptyWithCharArray:", "isTrimmableToEmpty", "Z", 0x9, NULL, NULL },
    { "isTrimmableToEmptyWithCharArray:withInt:", "isTrimmableToEmpty", "Z", 0x9, NULL, NULL },
    { "isTrimmableToEmptyWithCharArray:withInt:withInt:", "isTrimmableToEmpty", "Z", 0x9, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "ESCAPES_", NULL, 0x1a, "[C", &FreemarkerTemplateUtilityStringUtil_ESCAPES_, NULL,  },
    { "NO_ESC_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = FreemarkerTemplateUtilityStringUtil_NO_ESC },
    { "ESC_HEXA_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = FreemarkerTemplateUtilityStringUtil_ESC_HEXA },
    { "ESC_BACKSLASH_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = FreemarkerTemplateUtilityStringUtil_ESC_BACKSLASH },
  };
  static const J2ObjcClassInfo _FreemarkerTemplateUtilityStringUtil = { 2, "StringUtil", "freemarker.template.utility", NULL, 0x1, 59, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerTemplateUtilityStringUtil;
}

@end


#line 49
NSString *FreemarkerTemplateUtilityStringUtil_HTMLEncWithNSString_(NSString *s) {
  FreemarkerTemplateUtilityStringUtil_initialize();
  
#line 50
  return FreemarkerTemplateUtilityStringUtil_XMLEncNAWithNSString_(s);
}


#line 57
NSString *FreemarkerTemplateUtilityStringUtil_XMLEncWithNSString_(NSString *s) {
  FreemarkerTemplateUtilityStringUtil_initialize();
  
#line 58
  return FreemarkerTemplateUtilityStringUtil_XMLOrXHTMLEncWithNSString_withNSString_(s, @"&apos;");
}


#line 68
NSString *FreemarkerTemplateUtilityStringUtil_XHTMLEncWithNSString_(NSString *s) {
  FreemarkerTemplateUtilityStringUtil_initialize();
  
#line 69
  return FreemarkerTemplateUtilityStringUtil_XMLOrXHTMLEncWithNSString_withNSString_(s, @"&#39;");
}


#line 72
NSString *FreemarkerTemplateUtilityStringUtil_XMLOrXHTMLEncWithNSString_withNSString_(NSString *s, NSString *aposReplacement) {
  FreemarkerTemplateUtilityStringUtil_initialize();
  
#line 73
  jint ln = ((jint) [((NSString *) nil_chk(s)) length]);
  for (jint i = 0; i < ln; i++) {
    jchar c = [s charAtWithInt:i];
    if (c == '<' || c == '>' || c == '&' || c == '"' || c == '\'') {
      JavaLangStringBuffer *b = new_JavaLangStringBuffer_initWithNSString_(
#line 78
      [s substring:0 endIndex:i]);
      switch (c) {
        case '<':
        
#line 80
        (void) [b appendWithNSString:@"&lt;"];
        
#line 80
        break;
        case '>':
        
#line 81
        (void) [b appendWithNSString:@"&gt;"];
        
#line 81
        break;
        case '&':
        
#line 82
        (void) [b appendWithNSString:@"&amp;"];
        
#line 82
        break;
        case '"':
        
#line 83
        (void) [b appendWithNSString:@"&quot;"];
        
#line 83
        break;
        case '\'':
        
#line 84
        (void) [b appendWithNSString:aposReplacement];
        
#line 84
        break;
      }
      i++;
      jint next = i;
      while (i < ln) {
        c = [s charAtWithInt:i];
        if (c == '<' || c == '>' || c == '&' || c == '"' || c == '\'') {
          (void) [b appendWithNSString:[s substring:next endIndex:i]];
          switch (c) {
            case '<':
            
#line 93
            (void) [b appendWithNSString:@"&lt;"];
            
#line 93
            break;
            case '>':
            
#line 94
            (void) [b appendWithNSString:@"&gt;"];
            
#line 94
            break;
            case '&':
            
#line 95
            (void) [b appendWithNSString:@"&amp;"];
            
#line 95
            break;
            case '"':
            
#line 96
            (void) [b appendWithNSString:@"&quot;"];
            
#line 96
            break;
            case '\'':
            
#line 97
            (void) [b appendWithNSString:aposReplacement];
            
#line 97
            break;
          }
          next = i + 1;
        }
        i++;
      }
      if (next < ln) (void) [b appendWithNSString:[s substring:next]];
      s = [b description];
      break;
    }
  }
  return s;
}


#line 115
NSString *FreemarkerTemplateUtilityStringUtil_XMLEncNAWithNSString_(NSString *s) {
  FreemarkerTemplateUtilityStringUtil_initialize();
  
#line 116
  jint ln = ((jint) [((NSString *) nil_chk(s)) length]);
  for (jint i = 0; i < ln; i++) {
    jchar c = [s charAtWithInt:i];
    if (c == '<' || c == '>' || c == '&' || c == '"') {
      JavaLangStringBuffer *b = new_JavaLangStringBuffer_initWithNSString_(
#line 121
      [s substring:0 endIndex:i]);
      switch (c) {
        case '<':
        
#line 123
        (void) [b appendWithNSString:@"&lt;"];
        
#line 123
        break;
        case '>':
        
#line 124
        (void) [b appendWithNSString:@"&gt;"];
        
#line 124
        break;
        case '&':
        
#line 125
        (void) [b appendWithNSString:@"&amp;"];
        
#line 125
        break;
        case '"':
        
#line 126
        (void) [b appendWithNSString:@"&quot;"];
        
#line 126
        break;
      }
      i++;
      jint next = i;
      while (i < ln) {
        c = [s charAtWithInt:i];
        if (c == '<' || c == '>' || c == '&' || c == '"') {
          (void) [b appendWithNSString:[s substring:next endIndex:i]];
          switch (c) {
            case '<':
            
#line 135
            (void) [b appendWithNSString:@"&lt;"];
            
#line 135
            break;
            case '>':
            
#line 136
            (void) [b appendWithNSString:@"&gt;"];
            
#line 136
            break;
            case '&':
            
#line 137
            (void) [b appendWithNSString:@"&amp;"];
            
#line 137
            break;
            case '"':
            
#line 138
            (void) [b appendWithNSString:@"&quot;"];
            
#line 138
            break;
          }
          next = i + 1;
        }
        i++;
      }
      if (next < ln) (void) [b appendWithNSString:[s substring:next]];
      s = [b description];
      break;
    }
  }
  return s;
}


#line 157
NSString *FreemarkerTemplateUtilityStringUtil_XMLEncQAttrWithNSString_(NSString *s) {
  FreemarkerTemplateUtilityStringUtil_initialize();
  
#line 158
  jint ln = ((jint) [((NSString *) nil_chk(s)) length]);
  for (jint i = 0; i < ln; i++) {
    jchar c = [s charAtWithInt:i];
    if (c == '<' || c == '&' || c == '"') {
      JavaLangStringBuffer *b = new_JavaLangStringBuffer_initWithNSString_(
#line 163
      [s substring:0 endIndex:i]);
      switch (c) {
        case '<':
        
#line 165
        (void) [b appendWithNSString:@"&lt;"];
        
#line 165
        break;
        case '&':
        
#line 166
        (void) [b appendWithNSString:@"&amp;"];
        
#line 166
        break;
        case '"':
        
#line 167
        (void) [b appendWithNSString:@"&quot;"];
        
#line 167
        break;
      }
      i++;
      jint next = i;
      while (i < ln) {
        c = [s charAtWithInt:i];
        if (c == '<' || c == '&' || c == '"') {
          (void) [b appendWithNSString:[s substring:next endIndex:i]];
          switch (c) {
            case '<':
            
#line 176
            (void) [b appendWithNSString:@"&lt;"];
            
#line 176
            break;
            case '&':
            
#line 177
            (void) [b appendWithNSString:@"&amp;"];
            
#line 177
            break;
            case '"':
            
#line 178
            (void) [b appendWithNSString:@"&quot;"];
            
#line 178
            break;
          }
          next = i + 1;
        }
        i++;
      }
      if (next < ln) {
        (void) [b appendWithNSString:[s substring:next]];
      }
      s = [b description];
      break;
    }
  }
  return s;
}


#line 199
NSString *FreemarkerTemplateUtilityStringUtil_XMLEncNQGWithNSString_(NSString *s) {
  FreemarkerTemplateUtilityStringUtil_initialize();
  
#line 200
  jint ln = ((jint) [((NSString *) nil_chk(s)) length]);
  for (jint i = 0; i < ln; i++) {
    jchar c = [s charAtWithInt:i];
    if (c == '<' ||
#line 204
    (c == '>' && i > 1 &&
#line 205
    [s charAtWithInt:i - 1] == ']' &&
#line 206
    [s charAtWithInt:i - 2] == ']') ||
#line 207
    c == '&') {
      JavaLangStringBuffer *b = new_JavaLangStringBuffer_initWithNSString_(
#line 209
      [s substring:0 endIndex:i]);
      switch (c) {
        case '<':
        
#line 211
        (void) [b appendWithNSString:@"&lt;"];
        
#line 211
        break;
        case '>':
        
#line 212
        (void) [b appendWithNSString:@"&gt;"];
        
#line 212
        break;
        case '&':
        
#line 213
        (void) [b appendWithNSString:@"&amp;"];
        
#line 213
        break;
        default:
        
#line 214
        @throw new_FreemarkerCoreBugException_init();
      }
      i++;
      jint next = i;
      while (i < ln) {
        c = [s charAtWithInt:i];
        if (c == '<' ||
#line 221
        (c == '>' && i > 1 &&
#line 222
        [s charAtWithInt:i - 1] == ']' &&
#line 223
        [s charAtWithInt:i - 2] == ']') ||
#line 224
        c == '&') {
          (void) [b appendWithNSString:[s substring:next endIndex:i]];
          switch (c) {
            case '<':
            
#line 227
            (void) [b appendWithNSString:@"&lt;"];
            
#line 227
            break;
            case '>':
            
#line 228
            (void) [b appendWithNSString:@"&gt;"];
            
#line 228
            break;
            case '&':
            
#line 229
            (void) [b appendWithNSString:@"&amp;"];
            
#line 229
            break;
            default:
            
#line 230
            @throw new_FreemarkerCoreBugException_init();
          }
          next = i + 1;
        }
        i++;
      }
      if (next < ln) {
        (void) [b appendWithNSString:[s substring:next]];
      }
      s = [b description];
      break;
    }
  }
  return s;
}


#line 250
NSString *FreemarkerTemplateUtilityStringUtil_RTFEncWithNSString_(NSString *s) {
  FreemarkerTemplateUtilityStringUtil_initialize();
  
#line 251
  jint ln = ((jint) [((NSString *) nil_chk(s)) length]);
  for (jint i = 0; i < ln; i++) {
    jchar c = [s charAtWithInt:i];
    if (c == '\\' || c == '{' || c == '}') {
      JavaLangStringBuffer *b = new_JavaLangStringBuffer_initWithNSString_(
#line 256
      [s substring:0 endIndex:i]);
      switch (c) {
        case '\\':
        
#line 258
        (void) [b appendWithNSString:@"\\\\"];
        
#line 258
        break;
        case '{':
        
#line 259
        (void) [b appendWithNSString:@"\\{"];
        
#line 259
        break;
        case '}':
        
#line 260
        (void) [b appendWithNSString:@"\\}"];
        
#line 260
        break;
      }
      i++;
      jint next = i;
      while (i < ln) {
        c = [s charAtWithInt:i];
        if (c == '\\' || c == '{' || c == '}') {
          (void) [b appendWithNSString:[s substring:next endIndex:i]];
          switch (c) {
            case '\\':
            
#line 269
            (void) [b appendWithNSString:@"\\\\"];
            
#line 269
            break;
            case '{':
            
#line 270
            (void) [b appendWithNSString:@"\\{"];
            
#line 270
            break;
            case '}':
            
#line 271
            (void) [b appendWithNSString:@"\\}"];
            
#line 271
            break;
          }
          next = i + 1;
        }
        i++;
      }
      if (next < ln) (void) [b appendWithNSString:[s substring:next]];
      s = [b description];
      break;
    }
  }
  return s;
}


#line 289
NSString *FreemarkerTemplateUtilityStringUtil_URLEncWithNSString_withNSString_(NSString *s, NSString *charset) {
  FreemarkerTemplateUtilityStringUtil_initialize();
  
#line 290
  return FreemarkerTemplateUtilityStringUtil_URLEncWithNSString_withNSString_withBoolean_(s, charset, NO);
}


#line 301
NSString *FreemarkerTemplateUtilityStringUtil_URLPathEncWithNSString_withNSString_(NSString *s, NSString *charset) {
  FreemarkerTemplateUtilityStringUtil_initialize();
  
#line 302
  return FreemarkerTemplateUtilityStringUtil_URLEncWithNSString_withNSString_withBoolean_(s, charset, YES);
}


#line 305
NSString *FreemarkerTemplateUtilityStringUtil_URLEncWithNSString_withNSString_withBoolean_(NSString *s, NSString *charset, jboolean keepSlash) {
  FreemarkerTemplateUtilityStringUtil_initialize();
  jint ln = ((jint) [((NSString *) nil_chk(s)) length]);
  jint i;
  for (i = 0; i < ln; i++) {
    jchar c = [s charAtWithInt:i];
    if (!FreemarkerTemplateUtilityStringUtil_safeInURLWithChar_withBoolean_(c, keepSlash)) {
      break;
    }
  }
  if (i == ln) {
    
#line 317
    return s;
  }
  
#line 320
  JavaLangStringBuffer *b = new_JavaLangStringBuffer_initWithInt_(ln + ln / 3 + 2);
  (void) [b appendWithNSString:[s substring:0 endIndex:i]];
  
#line 323
  jint encStart = i;
  for (i++; i < ln; i++) {
    jchar c = [s charAtWithInt:i];
    if (FreemarkerTemplateUtilityStringUtil_safeInURLWithChar_withBoolean_(c, keepSlash)) {
      if (encStart != -1) {
        IOSByteArray *o = [((NSString *) nil_chk([s substring:encStart endIndex:i])) getBytesWithCharsetName:charset];
        for (jint j = 0; j < ((IOSByteArray *) nil_chk(o))->size_; j++) {
          (void) [b appendWithChar:'%'];
          jbyte bc = IOSByteArray_Get(o, j);
          jint c1 = bc & (jint) 0x0F;
          jint c2 = (RShift32(bc, 4)) & (jint) 0x0F;
          (void) [b appendWithChar:(jchar) (c2 < 10 ? c2 + '0' : c2 - 10 + 'A')];
          (void) [b appendWithChar:(jchar) (c1 < 10 ? c1 + '0' : c1 - 10 + 'A')];
        }
        encStart = -1;
      }
      (void) [b appendWithChar:c];
    }
    else {
      
#line 341
      if (encStart == -1) {
        encStart = i;
      }
    }
  }
  if (encStart != -1) {
    IOSByteArray *o = [((NSString *) nil_chk([s substring:encStart endIndex:i])) getBytesWithCharsetName:charset];
    for (jint j = 0; j < ((IOSByteArray *) nil_chk(o))->size_; j++) {
      (void) [b appendWithChar:'%'];
      jbyte bc = IOSByteArray_Get(o, j);
      jint c1 = bc & (jint) 0x0F;
      jint c2 = (RShift32(bc, 4)) & (jint) 0x0F;
      (void) [b appendWithChar:(jchar) (c2 < 10 ? c2 + '0' : c2 - 10 + 'A')];
      (void) [b appendWithChar:(jchar) (c1 < 10 ? c1 + '0' : c1 - 10 + 'A')];
    }
  }
  
#line 358
  return [b description];
}


#line 361
jboolean FreemarkerTemplateUtilityStringUtil_safeInURLWithChar_withBoolean_(jchar c, jboolean keepSlash) {
  FreemarkerTemplateUtilityStringUtil_initialize();
  
#line 362
  return (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || (
#line 363
  c >= '0' && c <= '9') ||
#line 364
  c == '_' || c == '-' || c == '.' || c == '!' || c == '~' || (
#line 365
  c >= '\'' && c <= '*') || (
#line 366
  keepSlash && c == '/');
}


#line 369
IOSCharArray *FreemarkerTemplateUtilityStringUtil_createEscapes() {
  FreemarkerTemplateUtilityStringUtil_initialize();
  IOSCharArray *escapes = [IOSCharArray newArrayWithLength:'\\' + 1];
  for (jint i = 0; i < 32; ++i) {
    
#line 374
    *IOSCharArray_GetRef(escapes, i) = 1;
  }
  *IOSCharArray_GetRef(escapes, '\\') = '\\';
  *IOSCharArray_GetRef(escapes, '\'') = '\'';
  *IOSCharArray_GetRef(escapes, '"') = '"';
  *IOSCharArray_GetRef(escapes, '<') = 'l';
  *IOSCharArray_GetRef(escapes, '>') = 'g';
  *IOSCharArray_GetRef(escapes, '&') = 'a';
  *IOSCharArray_GetRef(escapes, 0x0008) = 'b';
  *IOSCharArray_GetRef(escapes, 0x0009) = 't';
  *IOSCharArray_GetRef(escapes, 0x000a) = 'n';
  *IOSCharArray_GetRef(escapes, 0x000c) = 'f';
  *IOSCharArray_GetRef(escapes, 0x000d) = 'r';
  return escapes;
}


#line 401
NSString *FreemarkerTemplateUtilityStringUtil_FTLStringLiteralEncWithNSString_withChar_(NSString *s, jchar quotation) {
  FreemarkerTemplateUtilityStringUtil_initialize();
  
#line 402
  return FreemarkerTemplateUtilityStringUtil_FTLStringLiteralEncWithNSString_withChar_withBoolean_(s, quotation, NO);
}


#line 412
NSString *FreemarkerTemplateUtilityStringUtil_FTLStringLiteralEncWithNSString_(NSString *s) {
  FreemarkerTemplateUtilityStringUtil_initialize();
  
#line 413
  return FreemarkerTemplateUtilityStringUtil_FTLStringLiteralEncWithNSString_withChar_withBoolean_(s, (jchar) 0, NO);
}


#line 416
NSString *FreemarkerTemplateUtilityStringUtil_FTLStringLiteralEncWithNSString_withChar_withBoolean_(NSString *s, jchar quotation, jboolean addQuotation) {
  FreemarkerTemplateUtilityStringUtil_initialize();
  jint ln = ((jint) [((NSString *) nil_chk(s)) length]);
  
#line 420
  jchar otherQuotation;
  if (quotation == 0) {
    otherQuotation = 0;
  }
  else
#line 423
  if (quotation == '"') {
    otherQuotation = '\'';
  }
  else
#line 425
  if (quotation == '\'') {
    otherQuotation = '"';
  }
  else {
    
#line 428
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$C", @"Unsupported quotation character: ", quotation));
  }
  
#line 431
  jint escLn = ((IOSCharArray *) nil_chk(FreemarkerTemplateUtilityStringUtil_ESCAPES_))->size_;
  JavaLangStringBuffer *buf = nil;
  for (jint i = 0; i < ln; i++) {
    
#line 435
    jchar c = [s charAtWithInt:i];
    jchar escape =
#line 437
    c < escLn ? IOSCharArray_Get(FreemarkerTemplateUtilityStringUtil_ESCAPES_, c) :
#line 438
    c == '{' && i > 0 && FreemarkerTemplateUtilityStringUtil_isInterpolationStartWithChar_([s charAtWithInt:i - 1]) ? '{' :
#line 439
    0;
    if (escape == 0 || escape == otherQuotation) {
      if (buf != nil) {
        (void) [buf appendWithChar:c];
      }
    }
    else {
      
#line 445
      if (buf == nil) {
        buf = new_JavaLangStringBuffer_initWithInt_(((jint) [s length]) + 4 + (addQuotation ? 2 : 0));
        if (addQuotation) {
          (void) [buf appendWithChar:quotation];
        }
        (void) [buf appendWithNSString:[s substring:0 endIndex:i]];
      }
      if (escape == 1) {
        
#line 455
        (void) [((JavaLangStringBuffer *) nil_chk(buf)) appendWithNSString:@"\\x00"];
        jint c2 = (RShift32(c, 4)) & (jint) 0x0F;
        c = (jchar) (c & (jint) 0x0F);
        (void) [buf appendWithChar:(jchar) (c2 < 10 ? c2 + '0' : c2 - 10 + 'A')];
        (void) [buf appendWithChar:(jchar) (c < 10 ? c + '0' : c - 10 + 'A')];
      }
      else {
        
#line 461
        (void) [((JavaLangStringBuffer *) nil_chk(buf)) appendWithChar:'\\'];
        (void) [buf appendWithChar:escape];
      }
    }
  }
  
#line 467
  if (buf == nil) {
    return addQuotation ? JreStrcat("C$C", quotation, s, quotation) : s;
  }
  else {
    
#line 470
    if (addQuotation) {
      (void) [buf appendWithChar:quotation];
    }
    return [buf description];
  }
}


#line 477
jboolean FreemarkerTemplateUtilityStringUtil_isInterpolationStartWithChar_(jchar c) {
  FreemarkerTemplateUtilityStringUtil_initialize();
  
#line 478
  return c == '$' || c == '#';
}


#line 499
NSString *FreemarkerTemplateUtilityStringUtil_FTLStringLiteralDecWithNSString_(NSString *s) {
  FreemarkerTemplateUtilityStringUtil_initialize();
  jint idx = [((NSString *) nil_chk(s)) indexOf:'\\'];
  if (idx == -1) {
    return s;
  }
  
#line 506
  jint lidx = ((jint) [s length]) - 1;
  jint bidx = 0;
  JavaLangStringBuffer *buf = new_JavaLangStringBuffer_initWithInt_(lidx);
  do {
    (void) [buf appendWithNSString:[s substring:bidx endIndex:idx]];
    if (idx >= lidx) {
      @throw new_FreemarkerCoreParseException_initWithNSString_withId_withId_(@"The last character of string literal is backslash", JavaLangInteger_valueOfWithInt_(0), JavaLangInteger_valueOfWithInt_(0));
    }
    jchar c = [s charAtWithInt:idx + 1];
    switch (c) {
      case '"':
      (void) [buf appendWithChar:'"'];
      bidx = idx + 2;
      break;
      case '\'':
      (void) [buf appendWithChar:'\''];
      bidx = idx + 2;
      break;
      case '\\':
      (void) [buf appendWithChar:'\\'];
      bidx = idx + 2;
      break;
      case 'n':
      (void) [buf appendWithChar:0x000a];
      bidx = idx + 2;
      break;
      case 'r':
      (void) [buf appendWithChar:0x000d];
      bidx = idx + 2;
      break;
      case 't':
      (void) [buf appendWithChar:0x0009];
      bidx = idx + 2;
      break;
      case 'f':
      (void) [buf appendWithChar:0x000c];
      bidx = idx + 2;
      break;
      case 'b':
      (void) [buf appendWithChar:0x0008];
      bidx = idx + 2;
      break;
      case 'g':
      (void) [buf appendWithChar:'>'];
      bidx = idx + 2;
      break;
      case 'l':
      (void) [buf appendWithChar:'<'];
      bidx = idx + 2;
      break;
      case 'a':
      (void) [buf appendWithChar:'&'];
      bidx = idx + 2;
      break;
      case '{':
      (void) [buf appendWithChar:'{'];
      bidx = idx + 2;
      break;
      case 'x':
      {
        
#line 565
        idx += 2;
        jint x = idx;
        jint y = 0;
        jint z = lidx > idx + 3 ? idx + 3 : lidx;
        while (idx <= z) {
          jchar b = [s charAtWithInt:idx];
          if (b >= '0' && b <= '9') {
            LShiftAssignInt(&y, 4);
            y += b - '0';
          }
          else
#line 574
          if (b >= 'a' && b <= 'f') {
            LShiftAssignInt(&y, 4);
            y += b - 'a' + 10;
          }
          else
#line 577
          if (b >= 'A' && b <= 'F') {
            LShiftAssignInt(&y, 4);
            y += b - 'A' + 10;
          }
          else {
            
#line 581
            break;
          }
          idx++;
        }
        if (x < idx) {
          (void) [buf appendWithChar:(jchar) y];
        }
        else {
          
#line 588
          @throw new_FreemarkerCoreParseException_initWithNSString_withId_withId_(@"Invalid \\x escape in a string literal", JavaLangInteger_valueOfWithInt_(0), JavaLangInteger_valueOfWithInt_(0));
        }
        bidx = idx;
        break;
      }
      default:
      @throw new_FreemarkerCoreParseException_initWithNSString_withId_withId_(JreStrcat("$C$", @"Invalid escape sequence (\\", c, @") in a string literal"), JavaLangInteger_valueOfWithInt_(0), JavaLangInteger_valueOfWithInt_(0));
    }
    idx = [s indexOf:'\\' fromIndex:bidx];
  }
  while (
#line 597
  idx != -1);
  (void) [buf appendWithNSString:[s substring:bidx]];
  
#line 600
  return [buf description];
}


#line 603
JavaUtilLocale *FreemarkerTemplateUtilityStringUtil_deduceLocaleWithNSString_(NSString *input) {
  FreemarkerTemplateUtilityStringUtil_initialize();
  
#line 604
  if (input == nil) return nil;
  JavaUtilLocale *locale = JavaUtilLocale_getDefault();
  if (((jint) [((NSString *) nil_chk(input)) length]) > 0 && [input charAtWithInt:0] == '"') input = [input substring:1 endIndex:((jint) [input length]) - 1];
  JavaUtilStringTokenizer *st = new_JavaUtilStringTokenizer_initWithNSString_withNSString_(input, @",_ ");
  NSString *lang = @"", *country = @"";
  if ([st hasMoreTokens]) {
    lang = [st nextToken];
  }
  if ([st hasMoreTokens]) {
    country = [st nextToken];
  }
  if (![st hasMoreTokens]) {
    locale = new_JavaUtilLocale_initWithNSString_withNSString_(lang, country);
  }
  else {
    locale = new_JavaUtilLocale_initWithNSString_withNSString_withNSString_(lang, country, [st nextToken]);
  }
  return locale;
}


#line 624
NSString *FreemarkerTemplateUtilityStringUtil_capitalizeWithNSString_(NSString *s) {
  FreemarkerTemplateUtilityStringUtil_initialize();
  
#line 625
  JavaUtilStringTokenizer *st = new_JavaUtilStringTokenizer_initWithNSString_withNSString_withBoolean_(s, @" \t\x0d\n", YES);
  JavaLangStringBuffer *buf = new_JavaLangStringBuffer_initWithInt_(((jint) [((NSString *) nil_chk(s)) length]));
  while ([st hasMoreTokens]) {
    NSString *tok = [st nextToken];
    (void) [buf appendWithNSString:[((NSString *) nil_chk([((NSString *) nil_chk(tok)) substring:0 endIndex:1])) uppercaseString]];
    (void) [buf appendWithNSString:[((NSString *) nil_chk([tok substring:1])) lowercaseString]];
  }
  return [buf description];
}


#line 635
jboolean FreemarkerTemplateUtilityStringUtil_getYesNoWithNSString_(NSString *s) {
  FreemarkerTemplateUtilityStringUtil_initialize();
  
#line 636
  if ([((NSString *) nil_chk(s)) hasPrefix:@"\""]) {
    s = [s substring:1 endIndex:((jint) [s length]) - 1];
  }
  
#line 640
  if ([((NSString *) nil_chk(s)) equalsIgnoreCase:@"n"] ||
#line 641
  [s equalsIgnoreCase:@"no"] ||
#line 642
  [s equalsIgnoreCase:@"f"] ||
#line 643
  [s equalsIgnoreCase:@"false"]) {
    return NO;
  }
  else if ([s equalsIgnoreCase:@"y"] ||
#line 647
  [s equalsIgnoreCase:@"yes"] ||
#line 648
  [s equalsIgnoreCase:@"t"] ||
#line 649
  [s equalsIgnoreCase:@"true"]) {
    return YES;
  }
  @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"Illegal boolean value: ", s));
}


#line 658
IOSObjectArray *FreemarkerTemplateUtilityStringUtil_splitWithNSString_withChar_(NSString *s, jchar c) {
  FreemarkerTemplateUtilityStringUtil_initialize();
  
#line 659
  jint i, b, e;
  jint cnt;
  IOSObjectArray *res;
  jint ln = ((jint) [((NSString *) nil_chk(s)) length]);
  
#line 664
  i = 0;
  cnt = 1;
  while ((i = [s indexOf:c fromIndex:i]) != -1) {
    cnt++;
    i++;
  }
  res = [IOSObjectArray newArrayWithLength:cnt type:NSString_class_()];
  
#line 672
  i = 0;
  b = 0;
  while (b <= ln) {
    e = [s indexOf:c fromIndex:b];
    if (e == -1) e = ln;
    (void) IOSObjectArray_Set(res, i++, [s substring:b endIndex:e]);
    b = e + 1;
  }
  return res;
}


#line 686
IOSObjectArray *FreemarkerTemplateUtilityStringUtil_splitWithNSString_withNSString_withBoolean_(NSString *s, NSString *sep, jboolean caseInsensitive) {
  FreemarkerTemplateUtilityStringUtil_initialize();
  
#line 687
  NSString *splitString = caseInsensitive ? [((NSString *) nil_chk(sep)) lowercaseString] : sep;
  NSString *input = caseInsensitive ? [((NSString *) nil_chk(s)) lowercaseString] : s;
  jint i, b, e;
  jint cnt;
  IOSObjectArray *res;
  jint ln = ((jint) [((NSString *) nil_chk(s)) length]);
  jint sln = ((jint) [((NSString *) nil_chk(sep)) length]);
  
#line 695
  if (sln == 0) @throw new_JavaLangIllegalArgumentException_initWithNSString_(
#line 696
  @"The separator string has 0 length");
  
#line 698
  i = 0;
  cnt = 1;
  while ((i = [input indexOfString:splitString fromIndex:i]) != -1) {
    cnt++;
    i += sln;
  }
  res = [IOSObjectArray newArrayWithLength:cnt type:NSString_class_()];
  
#line 706
  i = 0;
  b = 0;
  while (b <= ln) {
    e = [input indexOfString:splitString fromIndex:b];
    if (e == -1) e = ln;
    (void) IOSObjectArray_Set(res, i++, [s substring:b endIndex:e]);
    b = e + sln;
  }
  return res;
}


#line 721
NSString *FreemarkerTemplateUtilityStringUtil_replaceWithNSString_withNSString_withNSString_(NSString *text, NSString *oldSub, NSString *newSub) {
  FreemarkerTemplateUtilityStringUtil_initialize();
  
#line 722
  return FreemarkerTemplateUtilityStringUtil_replaceWithNSString_withNSString_withNSString_withBoolean_withBoolean_(text, oldSub, newSub, NO, NO);
}


#line 731
NSString *FreemarkerTemplateUtilityStringUtil_replaceWithNSString_withNSString_withNSString_withBoolean_withBoolean_(NSString *text, NSString *oldsub, NSString *newsub, jboolean caseInsensitive, jboolean firstOnly) {
  FreemarkerTemplateUtilityStringUtil_initialize();
  
#line 737
  JavaLangStringBuffer *buf;
  jint tln;
  jint oln = ((jint) [((NSString *) nil_chk(oldsub)) length]);
  
#line 741
  if (oln == 0) {
    jint nln = ((jint) [((NSString *) nil_chk(newsub)) length]);
    if (nln == 0) {
      return text;
    }
    else {
      
#line 746
      if (firstOnly) {
        return JreStrcat("$$", newsub, text);
      }
      else {
        
#line 749
        tln = ((jint) [((NSString *) nil_chk(text)) length]);
        buf = new_JavaLangStringBuffer_initWithInt_(tln + (tln + 1) * nln);
        (void) [buf appendWithNSString:newsub];
        for (jint i = 0; i < tln; i++) {
          (void) [buf appendWithChar:[text charAtWithInt:i]];
          (void) [buf appendWithNSString:newsub];
        }
        return [buf description];
      }
    }
  }
  else {
    
#line 760
    oldsub = caseInsensitive ? [oldsub lowercaseString] : oldsub;
    NSString *input = caseInsensitive ? [((NSString *) nil_chk(text)) lowercaseString] : text;
    jint e = [input indexOfString:oldsub];
    if (e == -1) {
      return text;
    }
    jint b = 0;
    tln = ((jint) [((NSString *) nil_chk(text)) length]);
    buf = new_JavaLangStringBuffer_initWithInt_(
#line 769
    tln + JavaLangMath_maxWithInt_withInt_(((jint) [((NSString *) nil_chk(newsub)) length]) - oln, 0) * 3);
    do {
      (void) [buf appendWithNSString:[text substring:b endIndex:e]];
      (void) [buf appendWithNSString:newsub];
      b = e + oln;
      e = [input indexOfString:oldsub fromIndex:b];
    }
    while (
#line 775
    e != -1 && !firstOnly);
    (void) [buf appendWithNSString:[text substring:b]];
    return [buf description];
  }
}


#line 784
NSString *FreemarkerTemplateUtilityStringUtil_chompWithNSString_(NSString *s) {
  FreemarkerTemplateUtilityStringUtil_initialize();
  
#line 785
  if ([((NSString *) nil_chk(s)) hasSuffix:@"\x0d\n"]) return [s substring:0 endIndex:((jint) [s length]) - 2];
  if ([s hasSuffix:@"\x0d"] || [s hasSuffix:@"\n"])
#line 787
  return [s substring:0 endIndex:((jint) [s length]) - 1];
  return s;
}

NSString *FreemarkerTemplateUtilityStringUtil_emptyToNullWithNSString_(NSString *s) {
  FreemarkerTemplateUtilityStringUtil_initialize();
  
#line 796
  if (s == nil) return nil;
  return ((jint) [((NSString *) nil_chk(s)) length]) == 0 ? nil : s;
}


#line 804
NSString *FreemarkerTemplateUtilityStringUtil_jQuoteWithId_(id obj) {
  FreemarkerTemplateUtilityStringUtil_initialize();
  
#line 805
  return FreemarkerTemplateUtilityStringUtil_jQuoteWithNSString_(obj != nil ? [obj description] : nil);
}


#line 813
NSString *FreemarkerTemplateUtilityStringUtil_jQuoteWithNSString_(NSString *s) {
  FreemarkerTemplateUtilityStringUtil_initialize();
  
#line 814
  if (s == nil) {
    return @"null";
  }
  jint ln = ((jint) [((NSString *) nil_chk(s)) length]);
  JavaLangStringBuffer *b = new_JavaLangStringBuffer_initWithInt_(ln + 4);
  (void) [b appendWithChar:'"'];
  for (jint i = 0; i < ln; i++) {
    jchar c = [s charAtWithInt:i];
    if (c == '"') {
      (void) [b appendWithNSString:@"\\\""];
    }
    else
#line 824
    if (c == '\\') {
      (void) [b appendWithNSString:@"\\\\"];
    }
    else
#line 826
    if (c < (jint) 0x20) {
      if (c == 0x000a) {
        (void) [b appendWithNSString:@"\\n"];
      }
      else
#line 829
      if (c == 0x000d) {
        (void) [b appendWithNSString:@"\\r"];
      }
      else
#line 831
      if (c == 0x000c) {
        (void) [b appendWithNSString:@"\\f"];
      }
      else
#line 833
      if (c == 0x0008) {
        (void) [b appendWithNSString:@"\\b"];
      }
      else
#line 835
      if (c == 0x0009) {
        (void) [b appendWithNSString:@"\\t"];
      }
      else {
        
#line 838
        (void) [b appendWithNSString:@"\\u00"];
        jint x = c / (jint) 0x10;
        (void) [b appendWithChar:FreemarkerTemplateUtilityStringUtil_toHexDigitWithInt_(x)];
        x = c & (jint) 0xF;
        (void) [b appendWithChar:FreemarkerTemplateUtilityStringUtil_toHexDigitWithInt_(x)];
      }
    }
    else {
      
#line 845
      (void) [b appendWithChar:c];
    }
  }
  (void) [b appendWithChar:'"'];
  return [b description];
}


#line 856
NSString *FreemarkerTemplateUtilityStringUtil_jQuoteNoXSSWithId_(id obj) {
  FreemarkerTemplateUtilityStringUtil_initialize();
  
#line 857
  return FreemarkerTemplateUtilityStringUtil_jQuoteNoXSSWithNSString_(obj != nil ? [obj description] : nil);
}


#line 865
NSString *FreemarkerTemplateUtilityStringUtil_jQuoteNoXSSWithNSString_(NSString *s) {
  FreemarkerTemplateUtilityStringUtil_initialize();
  
#line 866
  if (s == nil) {
    return @"null";
  }
  jint ln = ((jint) [((NSString *) nil_chk(s)) length]);
  JavaLangStringBuffer *b = new_JavaLangStringBuffer_initWithInt_(ln + 4);
  (void) [b appendWithChar:'"'];
  for (jint i = 0; i < ln; i++) {
    jchar c = [s charAtWithInt:i];
    if (c == '"') {
      (void) [b appendWithNSString:@"\\\""];
    }
    else
#line 876
    if (c == '\\') {
      (void) [b appendWithNSString:@"\\\\"];
    }
    else
#line 878
    if (c == '<') {
      (void) [b appendWithNSString:@"\\u003C"];
    }
    else
#line 880
    if (c < (jint) 0x20) {
      if (c == 0x000a) {
        (void) [b appendWithNSString:@"\\n"];
      }
      else
#line 883
      if (c == 0x000d) {
        (void) [b appendWithNSString:@"\\r"];
      }
      else
#line 885
      if (c == 0x000c) {
        (void) [b appendWithNSString:@"\\f"];
      }
      else
#line 887
      if (c == 0x0008) {
        (void) [b appendWithNSString:@"\\b"];
      }
      else
#line 889
      if (c == 0x0009) {
        (void) [b appendWithNSString:@"\\t"];
      }
      else {
        
#line 892
        (void) [b appendWithNSString:@"\\u00"];
        jint x = c / (jint) 0x10;
        (void) [b appendWithChar:FreemarkerTemplateUtilityStringUtil_toHexDigitWithInt_(x)];
        x = c & (jint) 0xF;
        (void) [b appendWithChar:FreemarkerTemplateUtilityStringUtil_toHexDigitWithInt_(x)];
      }
    }
    else {
      
#line 899
      (void) [b appendWithChar:c];
    }
  }
  (void) [b appendWithChar:'"'];
  return [b description];
}


#line 917
NSString *FreemarkerTemplateUtilityStringUtil_ftlQuoteWithNSString_(NSString *s) {
  FreemarkerTemplateUtilityStringUtil_initialize();
  
#line 918
  jchar quotation;
  if ([((NSString *) nil_chk(s)) indexOf:'"'] != -1 && [s indexOf:'\''] == -1) {
    quotation = '\'';
  }
  else {
    
#line 922
    quotation = '"';
  }
  return FreemarkerTemplateUtilityStringUtil_FTLStringLiteralEncWithNSString_withChar_withBoolean_(s, quotation, YES);
}


#line 932
jboolean FreemarkerTemplateUtilityStringUtil_isFTLIdentifierStartWithChar_(jchar c) {
  FreemarkerTemplateUtilityStringUtil_initialize();
  if (c < (jint) 0xAA) {
    if ((c >= 'a' && c <= 'z') || (c >= '@' && c <= 'Z')) {
      return YES;
    }
    else {
      
#line 938
      return c == '$' || c == '_';
    }
  }
  else {
    
#line 941
    if (c < (jint) 0xA7F8) {
      if (c < (jint) 0x2D6F) {
        if (c < (jint) 0x2128) {
          if (c < (jint) 0x2090) {
            if (c < (jint) 0xD8) {
              if (c < (jint) 0xBA) {
                return c == (jint) 0xAA || c == (jint) 0xB5;
              }
              else {
                
#line 949
                return c == (jint) 0xBA || (c >= (jint) 0xC0 && c <= (jint) 0xD6);
              }
            }
            else {
              
#line 952
              if (c < (jint) 0x2071) {
                return (c >= (jint) 0xD8 && c <= (jint) 0xF6) || (c >= (jint) 0xF8 && c <= (jint) 0x1FFF);
              }
              else {
                
#line 955
                return c == (jint) 0x2071 || c == (jint) 0x207F;
              }
            }
          }
          else {
            
#line 959
            if (c < (jint) 0x2115) {
              if (c < (jint) 0x2107) {
                return (c >= (jint) 0x2090 && c <= (jint) 0x209C) || c == (jint) 0x2102;
              }
              else {
                
#line 963
                return c == (jint) 0x2107 || (c >= (jint) 0x210A && c <= (jint) 0x2113);
              }
            }
            else {
              
#line 966
              if (c < (jint) 0x2124) {
                return c == (jint) 0x2115 || (c >= (jint) 0x2119 && c <= (jint) 0x211D);
              }
              else {
                
#line 969
                return c == (jint) 0x2124 || c == (jint) 0x2126;
              }
            }
          }
        }
        else {
          
#line 974
          if (c < (jint) 0x2C30) {
            if (c < (jint) 0x2145) {
              if (c < (jint) 0x212F) {
                return c == (jint) 0x2128 || (c >= (jint) 0x212A && c <= (jint) 0x212D);
              }
              else {
                
#line 979
                return (c >= (jint) 0x212F && c <= (jint) 0x2139) || (c >= (jint) 0x213C && c <= (jint) 0x213F);
              }
            }
            else {
              
#line 982
              if (c < (jint) 0x2183) {
                return (c >= (jint) 0x2145 && c <= (jint) 0x2149) || c == (jint) 0x214E;
              }
              else {
                
#line 985
                return (c >= (jint) 0x2183 && c <= (jint) 0x2184) || (c >= (jint) 0x2C00 && c <= (jint) 0x2C2E);
              }
            }
          }
          else {
            
#line 989
            if (c < (jint) 0x2D00) {
              if (c < (jint) 0x2CEB) {
                return (c >= (jint) 0x2C30 && c <= (jint) 0x2C5E) || (c >= (jint) 0x2C60 && c <= (jint) 0x2CE4);
              }
              else {
                
#line 993
                return (c >= (jint) 0x2CEB && c <= (jint) 0x2CEE) || (c >= (jint) 0x2CF2 && c <= (jint) 0x2CF3);
              }
            }
            else {
              
#line 996
              if (c < (jint) 0x2D2D) {
                return (c >= (jint) 0x2D00 && c <= (jint) 0x2D25) || c == (jint) 0x2D27;
              }
              else {
                
#line 999
                return c == (jint) 0x2D2D || (c >= (jint) 0x2D30 && c <= (jint) 0x2D67);
              }
            }
          }
        }
      }
      else {
        
#line 1005
        if (c < (jint) 0x31F0) {
          if (c < (jint) 0x2DD0) {
            if (c < (jint) 0x2DB0) {
              if (c < (jint) 0x2DA0) {
                return c == (jint) 0x2D6F || (c >= (jint) 0x2D80 && c <= (jint) 0x2D96);
              }
              else {
                
#line 1011
                return (c >= (jint) 0x2DA0 && c <= (jint) 0x2DA6) || (c >= (jint) 0x2DA8 && c <= (jint) 0x2DAE);
              }
            }
            else {
              
#line 1014
              if (c < (jint) 0x2DC0) {
                return (c >= (jint) 0x2DB0 && c <= (jint) 0x2DB6) || (c >= (jint) 0x2DB8 && c <= (jint) 0x2DBE);
              }
              else {
                
#line 1017
                return (c >= (jint) 0x2DC0 && c <= (jint) 0x2DC6) || (c >= (jint) 0x2DC8 && c <= (jint) 0x2DCE);
              }
            }
          }
          else {
            
#line 1021
            if (c < (jint) 0x3031) {
              if (c < (jint) 0x2E2F) {
                return (c >= (jint) 0x2DD0 && c <= (jint) 0x2DD6) || (c >= (jint) 0x2DD8 && c <= (jint) 0x2DDE);
              }
              else {
                
#line 1025
                return c == (jint) 0x2E2F || (c >= (jint) 0x3005 && c <= (jint) 0x3006);
              }
            }
            else {
              
#line 1028
              if (c < (jint) 0x3040) {
                return (c >= (jint) 0x3031 && c <= (jint) 0x3035) || (c >= (jint) 0x303B && c <= (jint) 0x303C);
              }
              else {
                
#line 1031
                return (c >= (jint) 0x3040 && c <= (jint) 0x318F) || (c >= (jint) 0x31A0 && c <= (jint) 0x31BA);
              }
            }
          }
        }
        else {
          
#line 1036
          if (c < (jint) 0xA67F) {
            if (c < (jint) 0xA4D0) {
              if (c < (jint) 0x3400) {
                return (c >= (jint) 0x31F0 && c <= (jint) 0x31FF) || (c >= (jint) 0x3300 && c <= (jint) 0x337F);
              }
              else {
                
#line 1041
                return (c >= (jint) 0x3400 && c <= (jint) 0x4DB5) || (c >= (jint) 0x4E00 && c <= (jint) 0xA48C);
              }
            }
            else {
              
#line 1044
              if (c < (jint) 0xA610) {
                return (c >= (jint) 0xA4D0 && c <= (jint) 0xA4FD) || (c >= (jint) 0xA500 && c <= (jint) 0xA60C);
              }
              else {
                
#line 1047
                return (c >= (jint) 0xA610 && c <= (jint) 0xA62B) || (c >= (jint) 0xA640 && c <= (jint) 0xA66E);
              }
            }
          }
          else {
            
#line 1051
            if (c < (jint) 0xA78B) {
              if (c < (jint) 0xA717) {
                return (c >= (jint) 0xA67F && c <= (jint) 0xA697) || (c >= (jint) 0xA6A0 && c <= (jint) 0xA6E5);
              }
              else {
                
#line 1055
                return (c >= (jint) 0xA717 && c <= (jint) 0xA71F) || (c >= (jint) 0xA722 && c <= (jint) 0xA788);
              }
            }
            else {
              
#line 1058
              if (c < (jint) 0xA7A0) {
                return (c >= (jint) 0xA78B && c <= (jint) 0xA78E) || (c >= (jint) 0xA790 && c <= (jint) 0xA793);
              }
              else {
                
#line 1061
                return c >= (jint) 0xA7A0 && c <= (jint) 0xA7AA;
              }
            }
          }
        }
      }
    }
    else {
      
#line 1068
      if (c < (jint) 0xAB20) {
        if (c < (jint) 0xAA44) {
          if (c < (jint) 0xA8FB) {
            if (c < (jint) 0xA840) {
              if (c < (jint) 0xA807) {
                return (c >= (jint) 0xA7F8 && c <= (jint) 0xA801) || (c >= (jint) 0xA803 && c <= (jint) 0xA805);
              }
              else {
                
#line 1075
                return (c >= (jint) 0xA807 && c <= (jint) 0xA80A) || (c >= (jint) 0xA80C && c <= (jint) 0xA822);
              }
            }
            else {
              
#line 1078
              if (c < (jint) 0xA8D0) {
                return (c >= (jint) 0xA840 && c <= (jint) 0xA873) || (c >= (jint) 0xA882 && c <= (jint) 0xA8B3);
              }
              else {
                
#line 1081
                return (c >= (jint) 0xA8D0 && c <= (jint) 0xA8D9) || (c >= (jint) 0xA8F2 && c <= (jint) 0xA8F7);
              }
            }
          }
          else {
            
#line 1085
            if (c < (jint) 0xA984) {
              if (c < (jint) 0xA930) {
                return c == (jint) 0xA8FB || (c >= (jint) 0xA900 && c <= (jint) 0xA925);
              }
              else {
                
#line 1089
                return (c >= (jint) 0xA930 && c <= (jint) 0xA946) || (c >= (jint) 0xA960 && c <= (jint) 0xA97C);
              }
            }
            else {
              
#line 1092
              if (c < (jint) 0xAA00) {
                return (c >= (jint) 0xA984 && c <= (jint) 0xA9B2) || (c >= (jint) 0xA9CF && c <= (jint) 0xA9D9);
              }
              else {
                
#line 1095
                return (c >= (jint) 0xAA00 && c <= (jint) 0xAA28) || (c >= (jint) 0xAA40 && c <= (jint) 0xAA42);
              }
            }
          }
        }
        else {
          
#line 1100
          if (c < (jint) 0xAAC0) {
            if (c < (jint) 0xAA80) {
              if (c < (jint) 0xAA60) {
                return (c >= (jint) 0xAA44 && c <= (jint) 0xAA4B) || (c >= (jint) 0xAA50 && c <= (jint) 0xAA59);
              }
              else {
                
#line 1105
                return (c >= (jint) 0xAA60 && c <= (jint) 0xAA76) || c == (jint) 0xAA7A;
              }
            }
            else {
              
#line 1108
              if (c < (jint) 0xAAB5) {
                return (c >= (jint) 0xAA80 && c <= (jint) 0xAAAF) || c == (jint) 0xAAB1;
              }
              else {
                
#line 1111
                return (c >= (jint) 0xAAB5 && c <= (jint) 0xAAB6) || (c >= (jint) 0xAAB9 && c <= (jint) 0xAABD);
              }
            }
          }
          else {
            
#line 1115
            if (c < (jint) 0xAAF2) {
              if (c < (jint) 0xAADB) {
                return c == (jint) 0xAAC0 || c == (jint) 0xAAC2;
              }
              else {
                
#line 1119
                return (c >= (jint) 0xAADB && c <= (jint) 0xAADD) || (c >= (jint) 0xAAE0 && c <= (jint) 0xAAEA);
              }
            }
            else {
              
#line 1122
              if (c < (jint) 0xAB09) {
                return (c >= (jint) 0xAAF2 && c <= (jint) 0xAAF4) || (c >= (jint) 0xAB01 && c <= (jint) 0xAB06);
              }
              else {
                
#line 1125
                return (c >= (jint) 0xAB09 && c <= (jint) 0xAB0E) || (c >= (jint) 0xAB11 && c <= (jint) 0xAB16);
              }
            }
          }
        }
      }
      else {
        
#line 1131
        if (c < (jint) 0xFB46) {
          if (c < (jint) 0xFB13) {
            if (c < (jint) 0xAC00) {
              if (c < (jint) 0xABC0) {
                return (c >= (jint) 0xAB20 && c <= (jint) 0xAB26) || (c >= (jint) 0xAB28 && c <= (jint) 0xAB2E);
              }
              else {
                
#line 1137
                return (c >= (jint) 0xABC0 && c <= (jint) 0xABE2) || (c >= (jint) 0xABF0 && c <= (jint) 0xABF9);
              }
            }
            else {
              
#line 1140
              if (c < (jint) 0xD7CB) {
                return (c >= (jint) 0xAC00 && c <= (jint) 0xD7A3) || (c >= (jint) 0xD7B0 && c <= (jint) 0xD7C6);
              }
              else {
                
#line 1143
                return (c >= (jint) 0xD7CB && c <= (jint) 0xD7FB) || (c >= (jint) 0xF900 && c <= (jint) 0xFB06);
              }
            }
          }
          else {
            
#line 1147
            if (c < (jint) 0xFB38) {
              if (c < (jint) 0xFB1F) {
                return (c >= (jint) 0xFB13 && c <= (jint) 0xFB17) || c == (jint) 0xFB1D;
              }
              else {
                
#line 1151
                return (c >= (jint) 0xFB1F && c <= (jint) 0xFB28) || (c >= (jint) 0xFB2A && c <= (jint) 0xFB36);
              }
            }
            else {
              
#line 1154
              if (c < (jint) 0xFB40) {
                return (c >= (jint) 0xFB38 && c <= (jint) 0xFB3C) || c == (jint) 0xFB3E;
              }
              else {
                
#line 1157
                return (c >= (jint) 0xFB40 && c <= (jint) 0xFB41) || (c >= (jint) 0xFB43 && c <= (jint) 0xFB44);
              }
            }
          }
        }
        else {
          
#line 1162
          if (c < (jint) 0xFF21) {
            if (c < (jint) 0xFDF0) {
              if (c < (jint) 0xFD50) {
                return (c >= (jint) 0xFB46 && c <= (jint) 0xFBB1) || (c >= (jint) 0xFBD3 && c <= (jint) 0xFD3D);
              }
              else {
                
#line 1167
                return (c >= (jint) 0xFD50 && c <= (jint) 0xFD8F) || (c >= (jint) 0xFD92 && c <= (jint) 0xFDC7);
              }
            }
            else {
              
#line 1170
              if (c < (jint) 0xFE76) {
                return (c >= (jint) 0xFDF0 && c <= (jint) 0xFDFB) || (c >= (jint) 0xFE70 && c <= (jint) 0xFE74);
              }
              else {
                
#line 1173
                return (c >= (jint) 0xFE76 && c <= (jint) 0xFEFC) || (c >= (jint) 0xFF10 && c <= (jint) 0xFF19);
              }
            }
          }
          else {
            
#line 1177
            if (c < (jint) 0xFFCA) {
              if (c < (jint) 0xFF66) {
                return (c >= (jint) 0xFF21 && c <= (jint) 0xFF3A) || (c >= (jint) 0xFF41 && c <= (jint) 0xFF5A);
              }
              else {
                
#line 1181
                return (c >= (jint) 0xFF66 && c <= (jint) 0xFFBE) || (c >= (jint) 0xFFC2 && c <= (jint) 0xFFC7);
              }
            }
            else {
              
#line 1184
              if (c < (jint) 0xFFDA) {
                return (c >= (jint) 0xFFCA && c <= (jint) 0xFFCF) || (c >= (jint) 0xFFD2 && c <= (jint) 0xFFD7);
              }
              else {
                
#line 1187
                return c >= (jint) 0xFFDA && c <= (jint) 0xFFDC;
              }
            }
          }
        }
      }
    }
  }
}


#line 1203
jboolean FreemarkerTemplateUtilityStringUtil_isFTLIdentifierPartWithChar_(jchar c) {
  FreemarkerTemplateUtilityStringUtil_initialize();
  
#line 1204
  return FreemarkerTemplateUtilityStringUtil_isFTLIdentifierStartWithChar_(c) || (c >= '0' && c <= '9');
}


#line 1218
NSString *FreemarkerTemplateUtilityStringUtil_javaStringEncWithNSString_(NSString *s) {
  FreemarkerTemplateUtilityStringUtil_initialize();
  
#line 1219
  jint ln = ((jint) [((NSString *) nil_chk(s)) length]);
  for (jint i = 0; i < ln; i++) {
    jchar c = [s charAtWithInt:i];
    if (c == '"' || c == '\\' || c < (jint) 0x20) {
      JavaLangStringBuffer *b = new_JavaLangStringBuffer_initWithInt_(ln + 4);
      (void) [b appendWithNSString:[s substring:0 endIndex:i]];
      while (YES) {
        if (c == '"') {
          (void) [b appendWithNSString:@"\\\""];
        }
        else
#line 1228
        if (c == '\\') {
          (void) [b appendWithNSString:@"\\\\"];
        }
        else
#line 1230
        if (c < (jint) 0x20) {
          if (c == 0x000a) {
            (void) [b appendWithNSString:@"\\n"];
          }
          else
#line 1233
          if (c == 0x000d) {
            (void) [b appendWithNSString:@"\\r"];
          }
          else
#line 1235
          if (c == 0x000c) {
            (void) [b appendWithNSString:@"\\f"];
          }
          else
#line 1237
          if (c == 0x0008) {
            (void) [b appendWithNSString:@"\\b"];
          }
          else
#line 1239
          if (c == 0x0009) {
            (void) [b appendWithNSString:@"\\t"];
          }
          else {
            
#line 1242
            (void) [b appendWithNSString:@"\\u00"];
            jint x = c / (jint) 0x10;
            (void) [b appendWithChar:(jchar)
#line 1245
            (x < (jint) 0xA ? x + '0' : x - (jint) 0xA + 'a')];
            x = c & (jint) 0xF;
            (void) [b appendWithChar:(jchar)
#line 1248
            (x < (jint) 0xA ? x + '0' : x - (jint) 0xA + 'a')];
          }
        }
        else {
          
#line 1251
          (void) [b appendWithChar:c];
        }
        i++;
        if (i >= ln) {
          return [b description];
        }
        c = [s charAtWithInt:i];
      }
    }
  }
  return s;
}


#line 1268
NSString *FreemarkerTemplateUtilityStringUtil_javaScriptStringEncWithNSString_(NSString *s) {
  FreemarkerTemplateUtilityStringUtil_initialize();
  
#line 1269
  return FreemarkerTemplateUtilityStringUtil_jsStringEncWithNSString_withBoolean_(s, NO);
}


#line 1276
NSString *FreemarkerTemplateUtilityStringUtil_jsonStringEncWithNSString_(NSString *s) {
  FreemarkerTemplateUtilityStringUtil_initialize();
  
#line 1277
  return FreemarkerTemplateUtilityStringUtil_jsStringEncWithNSString_withBoolean_(s, YES);
}


#line 1336
NSString *FreemarkerTemplateUtilityStringUtil_jsStringEncWithNSString_withBoolean_(NSString *s, jboolean json) {
  FreemarkerTemplateUtilityStringUtil_initialize();
  
#line 1337
  FreemarkerTemplateUtilityNullArgumentException_checkWithNSString_withId_(@"s", s);
  
#line 1339
  jint ln = ((jint) [((NSString *) nil_chk(s)) length]);
  JavaLangStringBuffer *sb = nil;
  for (jint i = 0; i < ln; i++) {
    jchar c = [s charAtWithInt:i];
    jint escapeType;
    if (!(c > '>' && c < (jint) 0x7F && c != '\\') && c != ' ' && !(c >= (jint) 0xA0 && c < (jint) 0x2028)) {
      if (c <= (jint) 0x1F) {
        if (c == 0x000a) {
          escapeType = 'n';
        }
        else
#line 1348
        if (c == 0x000d) {
          escapeType = 'r';
        }
        else
#line 1350
        if (c == 0x000c) {
          escapeType = 'f';
        }
        else
#line 1352
        if (c == 0x0008) {
          escapeType = 'b';
        }
        else
#line 1354
        if (c == 0x0009) {
          escapeType = 't';
        }
        else {
          
#line 1357
          escapeType = FreemarkerTemplateUtilityStringUtil_ESC_HEXA;
        }
      }
      else
#line 1359
      if (c == '"') {
        escapeType = FreemarkerTemplateUtilityStringUtil_ESC_BACKSLASH;
      }
      else
#line 1361
      if (c == '\'') {
        escapeType = json ? FreemarkerTemplateUtilityStringUtil_NO_ESC : FreemarkerTemplateUtilityStringUtil_ESC_BACKSLASH;
      }
      else
#line 1363
      if (c == '\\') {
        escapeType = FreemarkerTemplateUtilityStringUtil_ESC_BACKSLASH;
      }
      else
#line 1365
      if (c == '/' && (i == 0 || [s charAtWithInt:i - 1] == '<')) {
        escapeType = FreemarkerTemplateUtilityStringUtil_ESC_BACKSLASH;
      }
      else
#line 1367
      if (c == '>') {
        jboolean dangerous;
        if (i == 0) {
          dangerous = YES;
        }
        else {
          
#line 1372
          jchar prevC = [s charAtWithInt:i - 1];
          if (prevC == ']' || prevC == '-') {
            if (i == 1) {
              dangerous = YES;
            }
            else {
              
#line 1377
              jchar prevPrevC = [s charAtWithInt:i - 2];
              dangerous = (prevPrevC == prevC);
            }
          }
          else {
            
#line 1381
            dangerous = NO;
          }
        }
        escapeType = dangerous ? (json ? FreemarkerTemplateUtilityStringUtil_ESC_HEXA : FreemarkerTemplateUtilityStringUtil_ESC_BACKSLASH) : FreemarkerTemplateUtilityStringUtil_NO_ESC;
      }
      else
#line 1385
      if (c == '<') {
        jboolean dangerous;
        if (i == ln - 1) {
          dangerous = YES;
        }
        else {
          
#line 1390
          jchar nextC = [s charAtWithInt:i + 1];
          dangerous = (nextC == '!' || nextC == '?');
        }
        escapeType = dangerous ? FreemarkerTemplateUtilityStringUtil_ESC_HEXA : FreemarkerTemplateUtilityStringUtil_NO_ESC;
      }
      else
#line 1394
      if ((c >= (jint) 0x7F && c <= (jint) 0x9F) ||
#line 1395
      (c == (jint) 0x2028 || c == (jint) 0x2029)) {
        
#line 1397
        escapeType = FreemarkerTemplateUtilityStringUtil_ESC_HEXA;
      }
      else {
        
#line 1399
        escapeType = FreemarkerTemplateUtilityStringUtil_NO_ESC;
      }
      
#line 1402
      if (escapeType != FreemarkerTemplateUtilityStringUtil_NO_ESC) {
        if (sb == nil) {
          sb = new_JavaLangStringBuffer_initWithInt_(ln + 6);
          (void) [sb appendWithNSString:[s substring:0 endIndex:i]];
        }
        
#line 1408
        (void) [((JavaLangStringBuffer *) nil_chk(sb)) appendWithChar:'\\'];
        if (escapeType > (jint) 0x20) {
          (void) [sb appendWithChar:(jchar) escapeType];
        }
        else
#line 1411
        if (escapeType == FreemarkerTemplateUtilityStringUtil_ESC_HEXA) {
          if (!json && c < (jint) 0x100) {
            (void) [sb appendWithChar:'x'];
            (void) [sb appendWithChar:FreemarkerTemplateUtilityStringUtil_toHexDigitWithInt_(RShift32(c, 4))];
            (void) [sb appendWithChar:FreemarkerTemplateUtilityStringUtil_toHexDigitWithInt_(c & (jint) 0xF)];
          }
          else {
            
#line 1417
            (void) [sb appendWithChar:'u'];
            jint cp = c;
            (void) [sb appendWithChar:FreemarkerTemplateUtilityStringUtil_toHexDigitWithInt_((RShift32(cp, 12)) & (jint) 0xF)];
            (void) [sb appendWithChar:FreemarkerTemplateUtilityStringUtil_toHexDigitWithInt_((RShift32(cp, 8)) & (jint) 0xF)];
            (void) [sb appendWithChar:FreemarkerTemplateUtilityStringUtil_toHexDigitWithInt_((RShift32(cp, 4)) & (jint) 0xF)];
            (void) [sb appendWithChar:FreemarkerTemplateUtilityStringUtil_toHexDigitWithInt_(cp & (jint) 0xF)];
          }
        }
        else {
          
#line 1425
          (void) [sb appendWithChar:c];
        }
        continue;
      }
    }
    
#line 1433
    if (sb != nil) (void) [sb appendWithChar:c];
  }
  
#line 1436
  return sb == nil ? s : [sb description];
}


#line 1439
jchar FreemarkerTemplateUtilityStringUtil_toHexDigitWithInt_(jint d) {
  FreemarkerTemplateUtilityStringUtil_initialize();
  
#line 1440
  return (jchar) (d < (jint) 0xA ? d + '0' : d - (jint) 0xA + 'A');
}


#line 1462
id<JavaUtilMap> FreemarkerTemplateUtilityStringUtil_parseNameValuePairListWithNSString_withNSString_(NSString *s, NSString *defaultValue) {
  FreemarkerTemplateUtilityStringUtil_initialize();
  id<JavaUtilMap> map = new_JavaUtilHashMap_init();
  
#line 1466
  jchar c = ' ';
  jint ln = ((jint) [((NSString *) nil_chk(s)) length]);
  jint p = 0;
  jint keyStart;
  jint valueStart;
  NSString *key;
  NSString *value;
  
#line 1474
  while (YES) {
    
#line 1476
    while (p < ln) {
      c = [s charAtWithInt:p];
      if (!JavaLangCharacter_isWhitespaceWithChar_(c)) {
        break;
      }
      p++;
    }
    if (p == ln) {
      goto break_fetchLoop;
    }
    keyStart = p;
    
#line 1489
    while (p < ln) {
      c = [s charAtWithInt:p];
      if (!(JavaLangCharacter_isLetterOrDigitWithChar_(c) || c == '_')) {
        break;
      }
      p++;
    }
    if (keyStart == p) {
      @throw new_JavaTextParseException_initWithNSString_withInt_(JreStrcat("$$$IC", @"Expecting letter, digit or \"_\" here, (the first character of the key) but found ", FreemarkerTemplateUtilityStringUtil_jQuoteWithNSString_(NSString_valueOfChar_(
#line 1500
      c)), @" at position ",
#line 1501
      p, '.'),
#line 1502
      p);
    }
    key = [s substring:keyStart endIndex:p];
    
#line 1507
    while (p < ln) {
      c = [s charAtWithInt:p];
      if (!JavaLangCharacter_isWhitespaceWithChar_(c)) {
        break;
      }
      p++;
    }
    if (p == ln) {
      if (defaultValue == nil) {
        @throw new_JavaTextParseException_initWithNSString_withInt_(JreStrcat("$IC", @"Expecting \":\", but reached the end of the string  at position ",
#line 1519
        p, '.'),
#line 1520
        p);
      }
      value = defaultValue;
    }
    else
#line 1523
    if (c != ':') {
      if (defaultValue == nil || c != ',') {
        @throw new_JavaTextParseException_initWithNSString_withInt_(JreStrcat("$$$IC", @"Expecting \":\" here, but found ", FreemarkerTemplateUtilityStringUtil_jQuoteWithNSString_(NSString_valueOfChar_(
#line 1527
        c)), @" at position ",
#line 1528
        p, '.'),
#line 1529
        p);
      }
      
#line 1533
      p++;
      
#line 1535
      value = defaultValue;
    }
    else {
      p++;
      
#line 1541
      while (p < ln) {
        c = [s charAtWithInt:p];
        if (!JavaLangCharacter_isWhitespaceWithChar_(c)) {
          break;
        }
        p++;
      }
      if (p == ln) {
        @throw new_JavaTextParseException_initWithNSString_withInt_(JreStrcat("$IC", @"Expecting the value of the key here, but reached the end of the string  at position ",
#line 1552
        p, '.'),
#line 1553
        p);
      }
      valueStart = p;
      
#line 1558
      while (p < ln) {
        c = [s charAtWithInt:p];
        if (!(JavaLangCharacter_isLetterOrDigitWithChar_(c) || c == '_')) {
          break;
        }
        p++;
      }
      if (valueStart == p) {
        @throw new_JavaTextParseException_initWithNSString_withInt_(JreStrcat("$$$IC", @"Expecting letter, digit or \"_\" here, (the first character of the value) but found ", FreemarkerTemplateUtilityStringUtil_jQuoteWithNSString_(NSString_valueOfChar_(
#line 1570
        c)), @" at position ",
#line 1571
        p, '.'),
#line 1572
        p);
      }
      value = [s substring:valueStart endIndex:p];
      
#line 1577
      while (p < ln) {
        c = [s charAtWithInt:p];
        if (!JavaLangCharacter_isWhitespaceWithChar_(c)) {
          break;
        }
        p++;
      }
      
#line 1586
      if (p < ln) {
        if (c != ',') {
          @throw new_JavaTextParseException_initWithNSString_withInt_(JreStrcat("$$$IC", @"Excpecting \",\" or the end of the string here, but found ", FreemarkerTemplateUtilityStringUtil_jQuoteWithNSString_(NSString_valueOfChar_(
#line 1591
          c)), @" at position ",
#line 1592
          p, '.'),
#line 1593
          p);
        }
        else {
          
#line 1595
          p++;
        }
      }
    }
    
#line 1601
    if ([map putWithId:key withId:value] != nil) {
      @throw new_JavaTextParseException_initWithNSString_withInt_(JreStrcat("$$", @"Dublicated key: ", FreemarkerTemplateUtilityStringUtil_jQuoteWithNSString_(
#line 1604
      key)), keyStart);
    }
  }
  break_fetchLoop: ;
  return map;
}


#line 1615
jboolean FreemarkerTemplateUtilityStringUtil_isXMLIDWithNSString_(NSString *name) {
  FreemarkerTemplateUtilityStringUtil_initialize();
  
#line 1616
  for (jint i = 0; i < ((jint) [((NSString *) nil_chk(name)) length]); i++) {
    jchar c = [name charAtWithInt:i];
    if (i == 0) {
      if (c == '-' || c == '.' || JavaLangCharacter_isDigitWithChar_(c))
#line 1620
      return NO;
    }
    if (!JavaLangCharacter_isLetterOrDigitWithChar_(c) && c != ':' && c != '_' && c != '-' && c != '.') {
      return NO;
    }
  }
  return YES;
}

jboolean FreemarkerTemplateUtilityStringUtil_matchesNameWithNSString_withNSString_withNSString_withFreemarkerCoreEnvironment_(NSString *qname, NSString *nodeName, NSString *nsURI, FreemarkerCoreEnvironment *env) {
  FreemarkerTemplateUtilityStringUtil_initialize();
  
#line 1634
  NSString *defaultNS = [((FreemarkerCoreEnvironment *) nil_chk(env)) getDefaultNS];
  if ((defaultNS != nil) && [defaultNS isEqual:nsURI]) {
    return [((NSString *) nil_chk(qname)) isEqual:nodeName] ||
#line 1637
    [qname isEqual:JreStrcat("$C$", FreemarkerTemplateTemplate_get_DEFAULT_NAMESPACE_PREFIX_(), ':', nodeName)];
  }
  if ([@"" isEqual:nsURI]) {
    if (defaultNS != nil) {
      return [((NSString *) nil_chk(qname)) isEqual:JreStrcat("$C$", FreemarkerTemplateTemplate_get_NO_NS_PREFIX_(), ':', nodeName)];
    }
    else {
      
#line 1643
      return [((NSString *) nil_chk(qname)) isEqual:nodeName] || [qname isEqual:JreStrcat("$C$", FreemarkerTemplateTemplate_get_NO_NS_PREFIX_(), ':', nodeName)];
    }
  }
  NSString *prefix = [env getPrefixForNamespaceWithNSString:nsURI];
  if (prefix == nil) {
    return NO;
  }
  return [((NSString *) nil_chk(qname)) isEqual:JreStrcat("$C$", prefix, ':', nodeName)];
}


#line 1661
NSString *FreemarkerTemplateUtilityStringUtil_leftPadWithNSString_withInt_(NSString *s, jint minLength) {
  FreemarkerTemplateUtilityStringUtil_initialize();
  
#line 1662
  return FreemarkerTemplateUtilityStringUtil_leftPadWithNSString_withInt_withChar_(s, minLength, ' ');
}


#line 1674
NSString *FreemarkerTemplateUtilityStringUtil_leftPadWithNSString_withInt_withChar_(NSString *s, jint minLength, jchar filling) {
  FreemarkerTemplateUtilityStringUtil_initialize();
  
#line 1675
  jint ln = ((jint) [((NSString *) nil_chk(s)) length]);
  if (minLength <= ln) {
    return s;
  }
  
#line 1680
  JavaLangStringBuffer *res = new_JavaLangStringBuffer_initWithInt_(minLength);
  
#line 1682
  jint dif = minLength - ln;
  for (jint i = 0; i < dif; i++) {
    (void) [res appendWithChar:filling];
  }
  
#line 1687
  (void) [res appendWithNSString:s];
  
#line 1689
  return [res description];
}


#line 1703
NSString *FreemarkerTemplateUtilityStringUtil_leftPadWithNSString_withInt_withNSString_(NSString *s, jint minLength, NSString *filling) {
  FreemarkerTemplateUtilityStringUtil_initialize();
  
#line 1704
  jint ln = ((jint) [((NSString *) nil_chk(s)) length]);
  if (minLength <= ln) {
    return s;
  }
  
#line 1709
  JavaLangStringBuffer *res = new_JavaLangStringBuffer_initWithInt_(minLength);
  
#line 1711
  jint dif = minLength - ln;
  jint fln = ((jint) [((NSString *) nil_chk(filling)) length]);
  if (fln == 0) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(
#line 1715
    @"The \"filling\" argument can't be 0 length string.");
  }
  jint cnt = dif / fln;
  for (jint i = 0; i < cnt; i++) {
    (void) [res appendWithNSString:filling];
  }
  cnt = dif % fln;
  for (jint i = 0; i < cnt; i++) {
    (void) [res appendWithChar:[filling charAtWithInt:i]];
  }
  
#line 1726
  (void) [res appendWithNSString:s];
  
#line 1728
  return [res description];
}

NSString *FreemarkerTemplateUtilityStringUtil_rightPadWithNSString_withInt_(NSString *s, jint minLength) {
  FreemarkerTemplateUtilityStringUtil_initialize();
  
#line 1740
  return FreemarkerTemplateUtilityStringUtil_rightPadWithNSString_withInt_withChar_(s, minLength, ' ');
}


#line 1752
NSString *FreemarkerTemplateUtilityStringUtil_rightPadWithNSString_withInt_withChar_(NSString *s, jint minLength, jchar filling) {
  FreemarkerTemplateUtilityStringUtil_initialize();
  
#line 1753
  jint ln = ((jint) [((NSString *) nil_chk(s)) length]);
  if (minLength <= ln) {
    return s;
  }
  
#line 1758
  JavaLangStringBuffer *res = new_JavaLangStringBuffer_initWithInt_(minLength);
  
#line 1760
  (void) [res appendWithNSString:s];
  
#line 1762
  jint dif = minLength - ln;
  for (jint i = 0; i < dif; i++) {
    (void) [res appendWithChar:filling];
  }
  
#line 1767
  return [res description];
}


#line 1783
NSString *FreemarkerTemplateUtilityStringUtil_rightPadWithNSString_withInt_withNSString_(NSString *s, jint minLength, NSString *filling) {
  FreemarkerTemplateUtilityStringUtil_initialize();
  
#line 1784
  jint ln = ((jint) [((NSString *) nil_chk(s)) length]);
  if (minLength <= ln) {
    return s;
  }
  
#line 1789
  JavaLangStringBuffer *res = new_JavaLangStringBuffer_initWithInt_(minLength);
  
#line 1791
  (void) [res appendWithNSString:s];
  
#line 1793
  jint dif = minLength - ln;
  jint fln = ((jint) [((NSString *) nil_chk(filling)) length]);
  if (fln == 0) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(
#line 1797
    @"The \"filling\" argument can't be 0 length string.");
  }
  jint start = ln % fln;
  jint end = fln - start <= dif ?
#line 1801
  fln :
#line 1802
  start + dif;
  for (jint i = start; i < end; i++) {
    (void) [res appendWithChar:[filling charAtWithInt:i]];
  }
  dif -= end - start;
  jint cnt = dif / fln;
  for (jint i = 0; i < cnt; i++) {
    (void) [res appendWithNSString:filling];
  }
  cnt = dif % fln;
  for (jint i = 0; i < cnt; i++) {
    (void) [res appendWithChar:[filling charAtWithInt:i]];
  }
  
#line 1816
  return [res description];
}


#line 1830
jint FreemarkerTemplateUtilityStringUtil_versionStringToIntWithNSString_(NSString *version_) {
  FreemarkerTemplateUtilityStringUtil_initialize();
  
#line 1831
  return [new_FreemarkerTemplateVersion_initWithNSString_(version_) intValue];
}


#line 1841
NSString *FreemarkerTemplateUtilityStringUtil_tryToStringWithId_(id object) {
  FreemarkerTemplateUtilityStringUtil_initialize();
  
#line 1842
  if (object == nil) return nil;
  
#line 1844
  @try {
    return [nil_chk(object) description];
  }
  @catch (
#line 1846
  JavaLangThrowable *e) {
    return FreemarkerTemplateUtilityStringUtil_failedToStringSubstituteWithId_withJavaLangThrowable_(object, e);
  }
}


#line 1851
NSString *FreemarkerTemplateUtilityStringUtil_failedToStringSubstituteWithId_withJavaLangThrowable_(id object, JavaLangThrowable *e) {
  FreemarkerTemplateUtilityStringUtil_initialize();
  
#line 1852
  NSString *eStr;
  @try {
    eStr = [((JavaLangThrowable *) nil_chk(e)) description];
  }
  @catch (
#line 1855
  JavaLangThrowable *e2) {
    eStr = FreemarkerTemplateUtilityClassUtil_getShortClassNameOfObjectWithId_(e);
  }
  return JreStrcat("C$$$C", '[', FreemarkerTemplateUtilityClassUtil_getShortClassNameOfObjectWithId_(object), @".toString() failed: ", eStr, ']');
}


#line 1871
NSString *FreemarkerTemplateUtilityStringUtil_toUpperABCWithInt_(jint n) {
  FreemarkerTemplateUtilityStringUtil_initialize();
  
#line 1872
  return FreemarkerTemplateUtilityStringUtil_toABCWithInt_withChar_(n, 'A');
}


#line 1880
NSString *FreemarkerTemplateUtilityStringUtil_toLowerABCWithInt_(jint n) {
  FreemarkerTemplateUtilityStringUtil_initialize();
  
#line 1881
  return FreemarkerTemplateUtilityStringUtil_toABCWithInt_withChar_(n, 'a');
}


#line 1888
NSString *FreemarkerTemplateUtilityStringUtil_toABCWithInt_withChar_(jint n, jchar oneDigit) {
  FreemarkerTemplateUtilityStringUtil_initialize();
  
#line 1889
  if (n < 1) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"Can't convert 0 or negative numbers to latin-number: ",
#line 1891
    n));
  }
  
#line 1897
  jint reached = 1;
  jint weight = 1;
  while (YES) {
    jint nextWeight = weight * 26;
    jint nextReached = reached + nextWeight;
    if (nextReached <= n) {
      
#line 1904
      weight = nextWeight;
      reached = nextReached;
    }
    else {
      break;
    }
  }
  
#line 1914
  JavaLangStringBuffer *sb = new_JavaLangStringBuffer_init();
  while (weight != 0) {
    
#line 1917
    jint digitIncrease = (n - reached) / weight;
    (void) [sb appendWithChar:(jchar) (oneDigit + digitIncrease)];
    reached += digitIncrease * weight;
    
#line 1921
    weight /= 26;
  }
  
#line 1924
  return [sb description];
}


#line 1934
IOSCharArray *FreemarkerTemplateUtilityStringUtil_trimWithCharArray_(IOSCharArray *cs) {
  FreemarkerTemplateUtilityStringUtil_initialize();
  
#line 1935
  if (((IOSCharArray *) nil_chk(cs))->size_ == 0) {
    return cs;
  }
  
#line 1939
  jint start = 0;
  jint end = cs->size_;
  while (start < end && IOSCharArray_Get(cs, start) <= ' ') {
    start++;
  }
  while (start < end && IOSCharArray_Get(cs, end - 1) <= ' ') {
    end--;
  }
  
#line 1948
  if (start == 0 && end == cs->size_) {
    return cs;
  }
  if (start == end) {
    return FreemarkerTemplateUtilityCollectionUtils_get_EMPTY_CHAR_ARRAY_();
  }
  
#line 1955
  IOSCharArray *newCs = [IOSCharArray newArrayWithLength:end - start];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(cs, start, newCs, 0, end - start);
  return newCs;
}


#line 1965
jboolean FreemarkerTemplateUtilityStringUtil_isTrimmableToEmptyWithCharArray_(IOSCharArray *text) {
  FreemarkerTemplateUtilityStringUtil_initialize();
  
#line 1966
  return FreemarkerTemplateUtilityStringUtil_isTrimmableToEmptyWithCharArray_withInt_withInt_(text, 0, ((IOSCharArray *) nil_chk(text))->size_);
}


#line 1974
jboolean FreemarkerTemplateUtilityStringUtil_isTrimmableToEmptyWithCharArray_withInt_(IOSCharArray *text, jint start) {
  FreemarkerTemplateUtilityStringUtil_initialize();
  
#line 1975
  return FreemarkerTemplateUtilityStringUtil_isTrimmableToEmptyWithCharArray_withInt_withInt_(text, start, ((IOSCharArray *) nil_chk(text))->size_);
}


#line 1984
jboolean FreemarkerTemplateUtilityStringUtil_isTrimmableToEmptyWithCharArray_withInt_withInt_(IOSCharArray *text, jint start, jint end) {
  FreemarkerTemplateUtilityStringUtil_initialize();
  
#line 1985
  for (jint i = start; i < end; i++) {
    
#line 1987
    if (IOSCharArray_Get(nil_chk(text), i) > ' ') {
      return NO;
    }
  }
  return YES;
}

void FreemarkerTemplateUtilityStringUtil_init(FreemarkerTemplateUtilityStringUtil *self) {
  (void) NSObject_init(self);
}

FreemarkerTemplateUtilityStringUtil *new_FreemarkerTemplateUtilityStringUtil_init() {
  FreemarkerTemplateUtilityStringUtil *self = [FreemarkerTemplateUtilityStringUtil alloc];
  FreemarkerTemplateUtilityStringUtil_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerTemplateUtilityStringUtil)
