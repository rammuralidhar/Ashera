//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/TemplateClassResolver.java
//


#include "ClassUtil.h"
#include "Environment.h"
#include "Execute.h"
#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "MessageUtil.h"
#include "ObjectConstructor.h"
#include "Template.h"
#include "TemplateClassResolver.h"
#include "TemplateException.h"
#include "_MiscTemplateException.h"
#include "java/lang/ClassNotFoundException.h"

#line 0 "/Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/TemplateClassResolver.java"

@interface FreemarkerCoreTemplateClassResolver_$1 : NSObject < FreemarkerCoreTemplateClassResolver >

- (IOSClass *)resolveWithNSString:(NSString *)className_
    withFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env
   withFreemarkerTemplateTemplate:(FreemarkerTemplateTemplate *)template_;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(FreemarkerCoreTemplateClassResolver_$1)

__attribute__((unused)) static void FreemarkerCoreTemplateClassResolver_$1_init(FreemarkerCoreTemplateClassResolver_$1 *self);

__attribute__((unused)) static FreemarkerCoreTemplateClassResolver_$1 *new_FreemarkerCoreTemplateClassResolver_$1_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerCoreTemplateClassResolver_$1)

@interface FreemarkerCoreTemplateClassResolver_$2 : NSObject < FreemarkerCoreTemplateClassResolver >

- (IOSClass *)resolveWithNSString:(NSString *)className_
    withFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env
   withFreemarkerTemplateTemplate:(FreemarkerTemplateTemplate *)template_;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(FreemarkerCoreTemplateClassResolver_$2)

__attribute__((unused)) static void FreemarkerCoreTemplateClassResolver_$2_init(FreemarkerCoreTemplateClassResolver_$2 *self);

__attribute__((unused)) static FreemarkerCoreTemplateClassResolver_$2 *new_FreemarkerCoreTemplateClassResolver_$2_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerCoreTemplateClassResolver_$2)

@interface FreemarkerCoreTemplateClassResolver_$3 : NSObject < FreemarkerCoreTemplateClassResolver >

- (IOSClass *)resolveWithNSString:(NSString *)className_
    withFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env
   withFreemarkerTemplateTemplate:(FreemarkerTemplateTemplate *)template_;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(FreemarkerCoreTemplateClassResolver_$3)

__attribute__((unused)) static void FreemarkerCoreTemplateClassResolver_$3_init(FreemarkerCoreTemplateClassResolver_$3 *self);

__attribute__((unused)) static FreemarkerCoreTemplateClassResolver_$3 *new_FreemarkerCoreTemplateClassResolver_$3_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerCoreTemplateClassResolver_$3)

J2OBJC_INITIALIZED_DEFN(FreemarkerCoreTemplateClassResolver)

id<FreemarkerCoreTemplateClassResolver> FreemarkerCoreTemplateClassResolver_UNRESTRICTED_RESOLVER_;
id<FreemarkerCoreTemplateClassResolver> FreemarkerCoreTemplateClassResolver_SAFER_RESOLVER_;
id<FreemarkerCoreTemplateClassResolver> FreemarkerCoreTemplateClassResolver_ALLOWS_NOTHING_RESOLVER_;


#line 37
@implementation FreemarkerCoreTemplateClassResolver

+ (void)initialize {
  if (self == [FreemarkerCoreTemplateClassResolver class]) {
    FreemarkerCoreTemplateClassResolver_UNRESTRICTED_RESOLVER_ = new_FreemarkerCoreTemplateClassResolver_$1_init();
    FreemarkerCoreTemplateClassResolver_SAFER_RESOLVER_ = new_FreemarkerCoreTemplateClassResolver_$2_init();
    FreemarkerCoreTemplateClassResolver_ALLOWS_NOTHING_RESOLVER_ = new_FreemarkerCoreTemplateClassResolver_$3_init();
    J2OBJC_SET_INITIALIZED(FreemarkerCoreTemplateClassResolver)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "resolveWithNSString:withFreemarkerCoreEnvironment:withFreemarkerTemplateTemplate:", "resolve", "Ljava.lang.Class;", 0x401, "Lfreemarker.template.TemplateException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "UNRESTRICTED_RESOLVER_", NULL, 0x19, "Lfreemarker.core.TemplateClassResolver;", &FreemarkerCoreTemplateClassResolver_UNRESTRICTED_RESOLVER_, NULL,  },
    { "SAFER_RESOLVER_", NULL, 0x19, "Lfreemarker.core.TemplateClassResolver;", &FreemarkerCoreTemplateClassResolver_SAFER_RESOLVER_, NULL,  },
    { "ALLOWS_NOTHING_RESOLVER_", NULL, 0x19, "Lfreemarker.core.TemplateClassResolver;", &FreemarkerCoreTemplateClassResolver_ALLOWS_NOTHING_RESOLVER_, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerCoreTemplateClassResolver = { 2, "TemplateClassResolver", "freemarker.core", NULL, 0x609, 1, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerCoreTemplateClassResolver;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(FreemarkerCoreTemplateClassResolver)

@implementation FreemarkerCoreTemplateClassResolver_$1


#line 44
- (IOSClass *)resolveWithNSString:(NSString *)className_
    withFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env
   withFreemarkerTemplateTemplate:(FreemarkerTemplateTemplate *)template_ {
  
#line 46
  @try {
    return FreemarkerTemplateUtilityClassUtil_forNameWithNSString_(className_);
  }
  @catch (
#line 48
  JavaLangClassNotFoundException *e) {
    @throw new_FreemarkerCore_MiscTemplateException_initWithJavaLangThrowable_withFreemarkerCoreEnvironment_(e, env);
  }
}

- (instancetype)init {
  FreemarkerCoreTemplateClassResolver_$1_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "resolveWithNSString:withFreemarkerCoreEnvironment:withFreemarkerTemplateTemplate:", "resolve", "Ljava.lang.Class;", 0x1, "Lfreemarker.template.TemplateException;", NULL },
    { "init", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcClassInfo _FreemarkerCoreTemplateClassResolver_$1 = { 2, "", "freemarker.core", "TemplateClassResolver", 0x8008, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerCoreTemplateClassResolver_$1;
}

@end

void FreemarkerCoreTemplateClassResolver_$1_init(FreemarkerCoreTemplateClassResolver_$1 *self) {
  (void) NSObject_init(self);
}

FreemarkerCoreTemplateClassResolver_$1 *new_FreemarkerCoreTemplateClassResolver_$1_init() {
  FreemarkerCoreTemplateClassResolver_$1 *self = [FreemarkerCoreTemplateClassResolver_$1 alloc];
  FreemarkerCoreTemplateClassResolver_$1_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreTemplateClassResolver_$1)

@implementation FreemarkerCoreTemplateClassResolver_$2


#line 61
- (IOSClass *)resolveWithNSString:(NSString *)className_
    withFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env
   withFreemarkerTemplateTemplate:(FreemarkerTemplateTemplate *)template_ {
  
#line 63
  if ([((NSString *) nil_chk(className_)) isEqual:[FreemarkerTemplateUtilityObjectConstructor_class_() getName]] ||
#line 64
  [className_ isEqual:[FreemarkerTemplateUtilityExecute_class_() getName]] ||
#line 65
  [className_ isEqual:@"freemarker.template.utility.JythonRuntime"]) {
    @throw FreemarkerCoreMessageUtil_newInstantiatingClassNotAllowedExceptionWithNSString_withFreemarkerCoreEnvironment_(className_, env);
  }
  @try {
    return FreemarkerTemplateUtilityClassUtil_forNameWithNSString_(className_);
  }
  @catch (
#line 70
  JavaLangClassNotFoundException *e) {
    @throw new_FreemarkerCore_MiscTemplateException_initWithJavaLangThrowable_withFreemarkerCoreEnvironment_(e, env);
  }
}

- (instancetype)init {
  FreemarkerCoreTemplateClassResolver_$2_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "resolveWithNSString:withFreemarkerCoreEnvironment:withFreemarkerTemplateTemplate:", "resolve", "Ljava.lang.Class;", 0x1, "Lfreemarker.template.TemplateException;", NULL },
    { "init", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcClassInfo _FreemarkerCoreTemplateClassResolver_$2 = { 2, "", "freemarker.core", "TemplateClassResolver", 0x8008, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerCoreTemplateClassResolver_$2;
}

@end

void FreemarkerCoreTemplateClassResolver_$2_init(FreemarkerCoreTemplateClassResolver_$2 *self) {
  (void) NSObject_init(self);
}

FreemarkerCoreTemplateClassResolver_$2 *new_FreemarkerCoreTemplateClassResolver_$2_init() {
  FreemarkerCoreTemplateClassResolver_$2 *self = [FreemarkerCoreTemplateClassResolver_$2 alloc];
  FreemarkerCoreTemplateClassResolver_$2_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreTemplateClassResolver_$2)

@implementation FreemarkerCoreTemplateClassResolver_$3


#line 82
- (IOSClass *)resolveWithNSString:(NSString *)className_
    withFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env
   withFreemarkerTemplateTemplate:(FreemarkerTemplateTemplate *)template_ {
  
#line 84
  @throw FreemarkerCoreMessageUtil_newInstantiatingClassNotAllowedExceptionWithNSString_withFreemarkerCoreEnvironment_(className_, env);
}

- (instancetype)init {
  FreemarkerCoreTemplateClassResolver_$3_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "resolveWithNSString:withFreemarkerCoreEnvironment:withFreemarkerTemplateTemplate:", "resolve", "Ljava.lang.Class;", 0x1, "Lfreemarker.template.TemplateException;", NULL },
    { "init", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcClassInfo _FreemarkerCoreTemplateClassResolver_$3 = { 2, "", "freemarker.core", "TemplateClassResolver", 0x8008, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerCoreTemplateClassResolver_$3;
}

@end

void FreemarkerCoreTemplateClassResolver_$3_init(FreemarkerCoreTemplateClassResolver_$3 *self) {
  (void) NSObject_init(self);
}

FreemarkerCoreTemplateClassResolver_$3 *new_FreemarkerCoreTemplateClassResolver_$3_init() {
  FreemarkerCoreTemplateClassResolver_$3 *self = [FreemarkerCoreTemplateClassResolver_$3 alloc];
  FreemarkerCoreTemplateClassResolver_$3_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreTemplateClassResolver_$3)
