//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/template/TemplateExceptionHandler.java
//


#include "Environment.h"
#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "StringUtil.h"
#include "TemplateException.h"
#include "TemplateExceptionHandler.h"
#include "java/io/PrintWriter.h"
#include "java/io/StringWriter.h"
#include "java/io/Writer.h"

#line 0 "/Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/template/TemplateExceptionHandler.java"

@interface FreemarkerTemplateTemplateExceptionHandler_$1 : NSObject < FreemarkerTemplateTemplateExceptionHandler >

- (void)handleTemplateExceptionWithFreemarkerTemplateTemplateException:(FreemarkerTemplateTemplateException *)te
                                         withFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env
                                                      withJavaIoWriter:(JavaIoWriter *)outArg;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(FreemarkerTemplateTemplateExceptionHandler_$1)

__attribute__((unused)) static void FreemarkerTemplateTemplateExceptionHandler_$1_init(FreemarkerTemplateTemplateExceptionHandler_$1 *self);

__attribute__((unused)) static FreemarkerTemplateTemplateExceptionHandler_$1 *new_FreemarkerTemplateTemplateExceptionHandler_$1_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerTemplateTemplateExceptionHandler_$1)

@interface FreemarkerTemplateTemplateExceptionHandler_$2 : NSObject < FreemarkerTemplateTemplateExceptionHandler >

- (void)handleTemplateExceptionWithFreemarkerTemplateTemplateException:(FreemarkerTemplateTemplateException *)te
                                         withFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env
                                                      withJavaIoWriter:(JavaIoWriter *)outArg;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(FreemarkerTemplateTemplateExceptionHandler_$2)

__attribute__((unused)) static void FreemarkerTemplateTemplateExceptionHandler_$2_init(FreemarkerTemplateTemplateExceptionHandler_$2 *self);

__attribute__((unused)) static FreemarkerTemplateTemplateExceptionHandler_$2 *new_FreemarkerTemplateTemplateExceptionHandler_$2_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerTemplateTemplateExceptionHandler_$2)

@interface FreemarkerTemplateTemplateExceptionHandler_$3 : NSObject < FreemarkerTemplateTemplateExceptionHandler >

- (void)handleTemplateExceptionWithFreemarkerTemplateTemplateException:(FreemarkerTemplateTemplateException *)te
                                         withFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env
                                                      withJavaIoWriter:(JavaIoWriter *)outArg;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(FreemarkerTemplateTemplateExceptionHandler_$3)

__attribute__((unused)) static void FreemarkerTemplateTemplateExceptionHandler_$3_init(FreemarkerTemplateTemplateExceptionHandler_$3 *self);

__attribute__((unused)) static FreemarkerTemplateTemplateExceptionHandler_$3 *new_FreemarkerTemplateTemplateExceptionHandler_$3_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerTemplateTemplateExceptionHandler_$3)

@interface FreemarkerTemplateTemplateExceptionHandler_$4 : NSObject < FreemarkerTemplateTemplateExceptionHandler >

- (void)handleTemplateExceptionWithFreemarkerTemplateTemplateException:(FreemarkerTemplateTemplateException *)te
                                         withFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env
                                                      withJavaIoWriter:(JavaIoWriter *)outArg;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(FreemarkerTemplateTemplateExceptionHandler_$4)

static NSString *FreemarkerTemplateTemplateExceptionHandler_$4_FONT_RESET_CSS_ = @"color:#A80000; font-size:12px; font-style:normal; font-variant:normal; font-weight:normal; text-decoration:none; text-transform: none";
J2OBJC_STATIC_FIELD_GETTER(FreemarkerTemplateTemplateExceptionHandler_$4, FONT_RESET_CSS_, NSString *)

__attribute__((unused)) static void FreemarkerTemplateTemplateExceptionHandler_$4_init(FreemarkerTemplateTemplateExceptionHandler_$4 *self);

__attribute__((unused)) static FreemarkerTemplateTemplateExceptionHandler_$4 *new_FreemarkerTemplateTemplateExceptionHandler_$4_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerTemplateTemplateExceptionHandler_$4)

J2OBJC_INITIALIZED_DEFN(FreemarkerTemplateTemplateExceptionHandler)

id<FreemarkerTemplateTemplateExceptionHandler> FreemarkerTemplateTemplateExceptionHandler_IGNORE_HANDLER_;
id<FreemarkerTemplateTemplateExceptionHandler> FreemarkerTemplateTemplateExceptionHandler_RETHROW_HANDLER_;
id<FreemarkerTemplateTemplateExceptionHandler> FreemarkerTemplateTemplateExceptionHandler_DEBUG_HANDLER_;
id<FreemarkerTemplateTemplateExceptionHandler> FreemarkerTemplateTemplateExceptionHandler_HTML_DEBUG_HANDLER_;


#line 32
@implementation FreemarkerTemplateTemplateExceptionHandler

+ (void)initialize {
  if (self == [FreemarkerTemplateTemplateExceptionHandler class]) {
    FreemarkerTemplateTemplateExceptionHandler_IGNORE_HANDLER_ = new_FreemarkerTemplateTemplateExceptionHandler_$1_init();
    FreemarkerTemplateTemplateExceptionHandler_RETHROW_HANDLER_ = new_FreemarkerTemplateTemplateExceptionHandler_$2_init();
    FreemarkerTemplateTemplateExceptionHandler_DEBUG_HANDLER_ = new_FreemarkerTemplateTemplateExceptionHandler_$3_init();
    FreemarkerTemplateTemplateExceptionHandler_HTML_DEBUG_HANDLER_ = new_FreemarkerTemplateTemplateExceptionHandler_$4_init();
    J2OBJC_SET_INITIALIZED(FreemarkerTemplateTemplateExceptionHandler)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "handleTemplateExceptionWithFreemarkerTemplateTemplateException:withFreemarkerCoreEnvironment:withJavaIoWriter:", "handleTemplateException", "V", 0x401, "Lfreemarker.template.TemplateException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "IGNORE_HANDLER_", NULL, 0x19, "Lfreemarker.template.TemplateExceptionHandler;", &FreemarkerTemplateTemplateExceptionHandler_IGNORE_HANDLER_, NULL,  },
    { "RETHROW_HANDLER_", NULL, 0x19, "Lfreemarker.template.TemplateExceptionHandler;", &FreemarkerTemplateTemplateExceptionHandler_RETHROW_HANDLER_, NULL,  },
    { "DEBUG_HANDLER_", NULL, 0x19, "Lfreemarker.template.TemplateExceptionHandler;", &FreemarkerTemplateTemplateExceptionHandler_DEBUG_HANDLER_, NULL,  },
    { "HTML_DEBUG_HANDLER_", NULL, 0x19, "Lfreemarker.template.TemplateExceptionHandler;", &FreemarkerTemplateTemplateExceptionHandler_HTML_DEBUG_HANDLER_, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerTemplateTemplateExceptionHandler = { 2, "TemplateExceptionHandler", "freemarker.template", NULL, 0x609, 1, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerTemplateTemplateExceptionHandler;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(FreemarkerTemplateTemplateExceptionHandler)

@implementation FreemarkerTemplateTemplateExceptionHandler_$1


#line 56
- (void)handleTemplateExceptionWithFreemarkerTemplateTemplateException:(FreemarkerTemplateTemplateException *)te
                                         withFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env
                                                      withJavaIoWriter:(JavaIoWriter *)outArg {
}

- (instancetype)init {
  FreemarkerTemplateTemplateExceptionHandler_$1_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "handleTemplateExceptionWithFreemarkerTemplateTemplateException:withFreemarkerCoreEnvironment:withJavaIoWriter:", "handleTemplateException", "V", 0x1, NULL, NULL },
    { "init", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcClassInfo _FreemarkerTemplateTemplateExceptionHandler_$1 = { 2, "", "freemarker.template", "TemplateExceptionHandler", 0x8008, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerTemplateTemplateExceptionHandler_$1;
}

@end

void FreemarkerTemplateTemplateExceptionHandler_$1_init(FreemarkerTemplateTemplateExceptionHandler_$1 *self) {
  (void) NSObject_init(self);
}

FreemarkerTemplateTemplateExceptionHandler_$1 *new_FreemarkerTemplateTemplateExceptionHandler_$1_init() {
  FreemarkerTemplateTemplateExceptionHandler_$1 *self = [FreemarkerTemplateTemplateExceptionHandler_$1 alloc];
  FreemarkerTemplateTemplateExceptionHandler_$1_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerTemplateTemplateExceptionHandler_$1)

@implementation FreemarkerTemplateTemplateExceptionHandler_$2


#line 66
- (void)handleTemplateExceptionWithFreemarkerTemplateTemplateException:(FreemarkerTemplateTemplateException *)te
                                         withFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env
                                                      withJavaIoWriter:(JavaIoWriter *)outArg {
  
#line 68
  @throw te;
}

- (instancetype)init {
  FreemarkerTemplateTemplateExceptionHandler_$2_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "handleTemplateExceptionWithFreemarkerTemplateTemplateException:withFreemarkerCoreEnvironment:withJavaIoWriter:", "handleTemplateException", "V", 0x1, "Lfreemarker.template.TemplateException;", NULL },
    { "init", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcClassInfo _FreemarkerTemplateTemplateExceptionHandler_$2 = { 2, "", "freemarker.template", "TemplateExceptionHandler", 0x8008, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerTemplateTemplateExceptionHandler_$2;
}

@end

void FreemarkerTemplateTemplateExceptionHandler_$2_init(FreemarkerTemplateTemplateExceptionHandler_$2 *self) {
  (void) NSObject_init(self);
}

FreemarkerTemplateTemplateExceptionHandler_$2 *new_FreemarkerTemplateTemplateExceptionHandler_$2_init() {
  FreemarkerTemplateTemplateExceptionHandler_$2 *self = [FreemarkerTemplateTemplateExceptionHandler_$2 alloc];
  FreemarkerTemplateTemplateExceptionHandler_$2_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerTemplateTemplateExceptionHandler_$2)

@implementation FreemarkerTemplateTemplateExceptionHandler_$3


#line 77
- (void)handleTemplateExceptionWithFreemarkerTemplateTemplateException:(FreemarkerTemplateTemplateException *)te
                                         withFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env
                                                      withJavaIoWriter:(JavaIoWriter *)outArg {
  
#line 79
  if (![((FreemarkerCoreEnvironment *) nil_chk(env)) isInAttemptBlock]) {
    JavaIoPrintWriter *pw = ([outArg isKindOfClass:[JavaIoPrintWriter class]]) ? (JavaIoPrintWriter *) check_class_cast(outArg, [JavaIoPrintWriter class]) : new_JavaIoPrintWriter_initWithJavaIoWriter_(outArg);
    [pw printWithNSString:@"FreeMarker template error (DEBUG mode; use RETHROW in production!):\n"];
    [((FreemarkerTemplateTemplateException *) nil_chk(te)) printStackTraceWithJavaIoPrintWriter:pw withBoolean:NO withBoolean:YES withBoolean:YES];
    
#line 84
    [pw flush];
  }
  @throw te;
}

- (instancetype)init {
  FreemarkerTemplateTemplateExceptionHandler_$3_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "handleTemplateExceptionWithFreemarkerTemplateTemplateException:withFreemarkerCoreEnvironment:withJavaIoWriter:", "handleTemplateException", "V", 0x1, "Lfreemarker.template.TemplateException;", NULL },
    { "init", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcClassInfo _FreemarkerTemplateTemplateExceptionHandler_$3 = { 2, "", "freemarker.template", "TemplateExceptionHandler", 0x8008, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerTemplateTemplateExceptionHandler_$3;
}

@end

void FreemarkerTemplateTemplateExceptionHandler_$3_init(FreemarkerTemplateTemplateExceptionHandler_$3 *self) {
  (void) NSObject_init(self);
}

FreemarkerTemplateTemplateExceptionHandler_$3 *new_FreemarkerTemplateTemplateExceptionHandler_$3_init() {
  FreemarkerTemplateTemplateExceptionHandler_$3 *self = [FreemarkerTemplateTemplateExceptionHandler_$3 alloc];
  FreemarkerTemplateTemplateExceptionHandler_$3_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerTemplateTemplateExceptionHandler_$3)

@implementation FreemarkerTemplateTemplateExceptionHandler_$4


#line 96
- (void)handleTemplateExceptionWithFreemarkerTemplateTemplateException:(FreemarkerTemplateTemplateException *)te
                                         withFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env
                                                      withJavaIoWriter:(JavaIoWriter *)outArg {
  
#line 98
  if (![((FreemarkerCoreEnvironment *) nil_chk(env)) isInAttemptBlock]) {
    jboolean externalPw = [outArg isKindOfClass:[JavaIoPrintWriter class]];
    JavaIoPrintWriter *pw = externalPw ? (JavaIoPrintWriter *) check_class_cast(outArg, [JavaIoPrintWriter class]) : new_JavaIoPrintWriter_initWithJavaIoWriter_(outArg);
    @try {
      [pw printWithNSString:@"<!-- FREEMARKER ERROR MESSAGE STARTS HERE --><!-- ]]> --><script language=javascript>//\"></script><script language=javascript>//'></script><script language=javascript>//\"></script><script language=javascript>//'></script></title></xmp></script></noscript></style></object></head></pre></table></form></table></table></table></a></u></i></b><div align='left' style='background-color:#FFFF7C; display:block; border-top:double; padding:4px; margin:0; font-family:Arial,sans-serif; "];
      
#line 115
      [pw printWithNSString:FreemarkerTemplateTemplateExceptionHandler_$4_FONT_RESET_CSS_];
      [pw printWithNSString:@"'><b style='font-size:12px; font-style:normal; font-weight:bold; text-decoration:none; text-transform: none;'>FreeMarker template error  (HTML_DEBUG mode; use RETHROW in production!)</b><pre style='display:block; background: none; border: 0; margin:0; padding: 0;font-family:monospace; "];
      
#line 122
      [pw printWithNSString:FreemarkerTemplateTemplateExceptionHandler_$4_FONT_RESET_CSS_];
      [pw printlnWithNSString:@"; white-space: pre-wrap; white-space: -moz-pre-wrap; white-space: -pre-wrap; white-space: -o-pre-wrap; word-wrap: break-word;'>"];
      
#line 126
      JavaIoStringWriter *stackTraceSW = new_JavaIoStringWriter_init();
      JavaIoPrintWriter *stackPW = new_JavaIoPrintWriter_initWithJavaIoWriter_(stackTraceSW);
      [((FreemarkerTemplateTemplateException *) nil_chk(te)) printStackTraceWithJavaIoPrintWriter:stackPW withBoolean:NO withBoolean:YES withBoolean:YES];
      [stackPW close];
      [pw println];
      [pw printlnWithNSString:FreemarkerTemplateUtilityStringUtil_XMLEncNQGWithNSString_([stackTraceSW description])];
      
#line 133
      [pw printlnWithNSString:@"</pre></div></html>"];
      [pw flush];
    }
    @finally {
      
#line 136
      if (!externalPw) [pw close];
    }
  }
  
#line 140
  @throw te;
}

- (instancetype)init {
  FreemarkerTemplateTemplateExceptionHandler_$4_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "handleTemplateExceptionWithFreemarkerTemplateTemplateException:withFreemarkerCoreEnvironment:withJavaIoWriter:", "handleTemplateException", "V", 0x1, "Lfreemarker.template.TemplateException;", NULL },
    { "init", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "FONT_RESET_CSS_", NULL, 0x1a, "Ljava.lang.String;", &FreemarkerTemplateTemplateExceptionHandler_$4_FONT_RESET_CSS_, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerTemplateTemplateExceptionHandler_$4 = { 2, "", "freemarker.template", "TemplateExceptionHandler", 0x8008, 2, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerTemplateTemplateExceptionHandler_$4;
}

@end

void FreemarkerTemplateTemplateExceptionHandler_$4_init(FreemarkerTemplateTemplateExceptionHandler_$4 *self) {
  (void) NSObject_init(self);
}

FreemarkerTemplateTemplateExceptionHandler_$4 *new_FreemarkerTemplateTemplateExceptionHandler_$4_init() {
  FreemarkerTemplateTemplateExceptionHandler_$4 *self = [FreemarkerTemplateTemplateExceptionHandler_$4 alloc];
  FreemarkerTemplateTemplateExceptionHandler_$4_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerTemplateTemplateExceptionHandler_$4)
