//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/template/SimpleHash.java
//

#ifndef _FreemarkerTemplateSimpleHash_H_
#define _FreemarkerTemplateSimpleHash_H_

#include "J2ObjC_header.h"
#include "TemplateHashModelEx.h"
#include "WrappingTemplateModel.h"
#include "java/io/Serializable.h"

@protocol FreemarkerTemplateObjectWrapper;
@protocol FreemarkerTemplateTemplateCollectionModel;
@protocol FreemarkerTemplateTemplateModel;
@protocol JavaUtilMap;

/**
 @brief A simple implementation of the TemplateHashModelEx interface, using its own underlying Map or SortedMap for storing the hash entries.
 If you are wrapping an already existing Map , you should certainly use DefaultMapAdapter instead (see comparison below). <p> This class is thread-safe if you don't call modifying methods (like #put(String,Object) , #remove(String) , etc.) after you have made the object available for multiple threads (assuming you have published it safely to the other threads; see JSR-133 Java Memory Model). These methods aren't called by FreeMarker, so it's usually not a concern. <p> <b> SimpleHash VS DefaultMapAdapter - Which to use when?</b> <p> For a Map that exists regardless of FreeMarker, only you need to access it from templates, DefaultMapAdapter should be the default choice, as it reflects the exact behavior of the underlying Map (no surprises), can be unwrapped to the originally wrapped object (important when passing it to Java methods from the template), and has more predictable performance (no spikes). <p> For a hash that's made specifically to be used from templates, creating an empty SimpleHash then filling it with SimpleHash#put(String,Object) is usually the way to go, as the resulting hash is significantly faster to read from templates than a DefaultMapAdapter (though it's somewhat slower to read from a plain Java method to which it had to be passed adapted to a Map ). <p> If regardless of which of the above two cases stand, you just need to (or more convenient to) create the hash from a Map (via SimpleHash#SimpleHash(Map,ObjectWrapper) or SimpleHash#SimpleHash(Map,ObjectWrapper) ), which will be the faster depends on how many times will the <em>same</em> Map entry be read from the template(s) later, on average. If, on average, you read each entry for more than 4 times, SimpleHash will be most certainly faster, but if for 2 times or less (and especially if not at all) then DefaultMapAdapter will be. Before choosing based on performance though, pay attention to the behavioral differences; SimpleHash will shallow-copy the original Map at construction time, so key order will be lost in some cases, and it won't reflect Map content changes after the SimpleHash construction, also SimpleHash can't be unwrapped to the original Map instance.
 */
@interface FreemarkerTemplateSimpleHash : FreemarkerTemplateWrappingTemplateModel < FreemarkerTemplateTemplateHashModelEx, JavaIoSerializable >

#pragma mark Public

/**
 @brief Constructs an empty hash that uses the default wrapper set in WrappingTemplateModel#setDefaultObjectWrapper(ObjectWrapper) .
 */
- (instancetype)init;

/**
 @brief Creates a new simple hash with the copy of the underlying map and the default wrapper set in WrappingTemplateModel#setDefaultObjectWrapper(ObjectWrapper) .
 @param map The Map to use for the key/value pairs. It makes a copy for internal use. If the map implements the SortedMap interface, the internal copy will be a TreeMap , otherwise it will be a HashMap .
 */
- (instancetype)initWithJavaUtilMap:(id<JavaUtilMap>)map;

/**
 @brief Creates a new hash by shallow-coping (possibly cloning) the underlying map; in many applications you should use DefaultMapAdapter instead.
 @param map The Map to use for the key/value pairs. It makes a copy for internal use. If the map implements the SortedMap interface, the internal copy will be a TreeMap , otherwise it will be a
 @param wrapper The object wrapper to use to wrap contained objects into TemplateModel instances. Using <code>null</code> is deprecated but allowed, in which case the deprecated default wrapper set in WrappingTemplateModel#setDefaultObjectWrapper(ObjectWrapper) is used.
 */
- (instancetype)initWithJavaUtilMap:(id<JavaUtilMap>)map
withFreemarkerTemplateObjectWrapper:(id<FreemarkerTemplateObjectWrapper>)wrapper;

/**
 @brief Creates an empty simple hash using the specified object wrapper.
 @param wrapper The object wrapper to use to wrap objects into TemplateModel instances. If null, the default wrapper set in WrappingTemplateModel#setDefaultObjectWrapper(ObjectWrapper) is used.
 */
- (instancetype)initWithFreemarkerTemplateObjectWrapper:(id<FreemarkerTemplateObjectWrapper>)wrapper;

/**
 @brief Tells if the map contains a key or not, regardless if the associated value is <code>null</code> or not.
 @since 2.3.20
 */
- (jboolean)containsKeyWithNSString:(NSString *)key;

- (id<FreemarkerTemplateTemplateModel>)getWithNSString:(NSString *)key;

- (jboolean)isEmpty;

- (id<FreemarkerTemplateTemplateCollectionModel>)keys;

/**
 @brief Puts a boolean in the map
 @param key the name by which the resulting <tt>TemplateModel</tt> is identified in the template.
 @param b the boolean to store.
 */
- (void)putWithNSString:(NSString *)key
            withBoolean:(jboolean)b;

/**
 @brief Adds a key-value entry to this hash.
 @param key The name by which the object is identified in the template.
 @param value The value to which the name will be associated. This will only be wrapped to TemplateModel lazily when it's first read.
 */
- (void)putWithNSString:(NSString *)key
                 withId:(id)value;

/**
 @brief Adds all the key/value entries in the map
 @param m the map with the entries to add, the keys are assumed to be strings.
 */
- (void)putAllWithJavaUtilMap:(id<JavaUtilMap>)m;

/**
 @brief Removes the given key from the underlying map.
 @param key the key to be removed
 */
- (void)removeWithNSString:(NSString *)key;

- (jint)size;

- (FreemarkerTemplateSimpleHash *)synchronizedWrapper;

/**
 @brief Note that this method creates and returns a deep-copy of the underlying hash used internally.
 This could be a gotcha for some people at some point who want to alter something in the data model, but we should maintain our immutability semantics (at least using default SimpleXXX wrappers) for the data model. It will recursively unwrap the stuff in the underlying container.
 */
- (id<JavaUtilMap>)toMap;

/**
 @brief Returns the <code>toString()</code> of the underlying Map .
 */
- (NSString *)description;

- (id<FreemarkerTemplateTemplateCollectionModel>)values;

#pragma mark Protected

- (id<JavaUtilMap>)copyMapWithJavaUtilMap:(id<JavaUtilMap>)map OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_EMPTY_STATIC_INIT(FreemarkerTemplateSimpleHash)

FOUNDATION_EXPORT void FreemarkerTemplateSimpleHash_init(FreemarkerTemplateSimpleHash *self);

FOUNDATION_EXPORT FreemarkerTemplateSimpleHash *new_FreemarkerTemplateSimpleHash_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void FreemarkerTemplateSimpleHash_initWithJavaUtilMap_(FreemarkerTemplateSimpleHash *self, id<JavaUtilMap> map);

FOUNDATION_EXPORT FreemarkerTemplateSimpleHash *new_FreemarkerTemplateSimpleHash_initWithJavaUtilMap_(id<JavaUtilMap> map) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void FreemarkerTemplateSimpleHash_initWithFreemarkerTemplateObjectWrapper_(FreemarkerTemplateSimpleHash *self, id<FreemarkerTemplateObjectWrapper> wrapper);

FOUNDATION_EXPORT FreemarkerTemplateSimpleHash *new_FreemarkerTemplateSimpleHash_initWithFreemarkerTemplateObjectWrapper_(id<FreemarkerTemplateObjectWrapper> wrapper) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void FreemarkerTemplateSimpleHash_initWithJavaUtilMap_withFreemarkerTemplateObjectWrapper_(FreemarkerTemplateSimpleHash *self, id<JavaUtilMap> map, id<FreemarkerTemplateObjectWrapper> wrapper);

FOUNDATION_EXPORT FreemarkerTemplateSimpleHash *new_FreemarkerTemplateSimpleHash_initWithJavaUtilMap_withFreemarkerTemplateObjectWrapper_(id<JavaUtilMap> map, id<FreemarkerTemplateObjectWrapper> wrapper) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerTemplateSimpleHash)

#endif // _FreemarkerTemplateSimpleHash_H_
