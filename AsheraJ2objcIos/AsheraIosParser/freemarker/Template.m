//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/template/Template.java
//


#include "Configurable.h"
#include "Configuration.h"
#include "Environment.h"
#include "FMParser.h"
#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "LibraryLoad.h"
#include "Macro.h"
#include "ObjectWrapper.h"
#include "ParseException.h"
#include "SimpleHash.h"
#include "Template.h"
#include "TemplateElement.h"
#include "TemplateException.h"
#include "TemplateHashModel.h"
#include "TemplateModel.h"
#include "TemplateNodeModel.h"
#include "TextBlock.h"
#include "TokenMgrError.h"
#include "Version.h"
#include "_TemplateAPI.h"
#include "java/io/BufferedReader.h"
#include "java/io/FilterReader.h"
#include "java/io/IOException.h"
#include "java/io/PrintStream.h"
#include "java/io/Reader.h"
#include "java/io/StringReader.h"
#include "java/io/StringWriter.h"
#include "java/io/Writer.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuffer.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Vector.h"

#line 0 "/Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/template/Template.java"

@interface FreemarkerTemplateTemplate () {
 @public
  /**
   @brief This is only non-null during parsing.
   It's used internally to make some information available through the Template API-s earlier than the parsing was finished.
   */
  FreemarkerCoreFMParser *parser_;
  id<JavaUtilMap> macros_;
  id<JavaUtilList> imports_;
  FreemarkerCoreTemplateElement *rootElement_;
  NSString *encoding_, *defaultNS_;
  id customLookupCondition_;
  jint actualTagSyntax_;
  jint actualNamingConvention_;
  NSString *name_;
  NSString *sourceName_;
  JavaUtilArrayList *lines_;
  id<JavaUtilMap> prefixToNamespaceURILookup_;
  id<JavaUtilMap> namespaceURIToPrefixLookup_;
  FreemarkerTemplateVersion *templateLanguageVersion_;
}

/**
 @brief A prime constructor to which all other constructors should delegate directly or indirectly.
 */
- (instancetype)initWithNSString:(NSString *)name
                    withNSString:(NSString *)sourceName
withFreemarkerTemplateConfiguration:(FreemarkerTemplateConfiguration *)cfg
                     withBoolean:(jboolean)overloadSelector;

+ (FreemarkerTemplateConfiguration *)toNonNullWithFreemarkerTemplateConfiguration:(FreemarkerTemplateConfiguration *)cfg;

+ (FreemarkerTemplateVersion *)normalizeTemplateLanguageVersionWithFreemarkerTemplateVersion:(FreemarkerTemplateVersion *)incompatibleImprovements;

@end

J2OBJC_FIELD_SETTER(FreemarkerTemplateTemplate, parser_, FreemarkerCoreFMParser *)
J2OBJC_FIELD_SETTER(FreemarkerTemplateTemplate, macros_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(FreemarkerTemplateTemplate, imports_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(FreemarkerTemplateTemplate, rootElement_, FreemarkerCoreTemplateElement *)
J2OBJC_FIELD_SETTER(FreemarkerTemplateTemplate, encoding_, NSString *)
J2OBJC_FIELD_SETTER(FreemarkerTemplateTemplate, defaultNS_, NSString *)
J2OBJC_FIELD_SETTER(FreemarkerTemplateTemplate, customLookupCondition_, id)
J2OBJC_FIELD_SETTER(FreemarkerTemplateTemplate, name_, NSString *)
J2OBJC_FIELD_SETTER(FreemarkerTemplateTemplate, sourceName_, NSString *)
J2OBJC_FIELD_SETTER(FreemarkerTemplateTemplate, lines_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(FreemarkerTemplateTemplate, prefixToNamespaceURILookup_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(FreemarkerTemplateTemplate, namespaceURIToPrefixLookup_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(FreemarkerTemplateTemplate, templateLanguageVersion_, FreemarkerTemplateVersion *)

__attribute__((unused)) static void FreemarkerTemplateTemplate_initWithNSString_withNSString_withFreemarkerTemplateConfiguration_withBoolean_(FreemarkerTemplateTemplate *self, NSString *name, NSString *sourceName, FreemarkerTemplateConfiguration *cfg, jboolean overloadSelector);

__attribute__((unused)) static FreemarkerTemplateTemplate *new_FreemarkerTemplateTemplate_initWithNSString_withNSString_withFreemarkerTemplateConfiguration_withBoolean_(NSString *name, NSString *sourceName, FreemarkerTemplateConfiguration *cfg, jboolean overloadSelector) NS_RETURNS_RETAINED;

__attribute__((unused)) static FreemarkerTemplateConfiguration *FreemarkerTemplateTemplate_toNonNullWithFreemarkerTemplateConfiguration_(FreemarkerTemplateConfiguration *cfg);

__attribute__((unused)) static FreemarkerTemplateVersion *FreemarkerTemplateTemplate_normalizeTemplateLanguageVersionWithFreemarkerTemplateVersion_(FreemarkerTemplateVersion *incompatibleImprovements);

/**
 @brief Reader that builds up the line table info for us, and also helps in working around JavaCC's exception suppression.
 */
@interface FreemarkerTemplateTemplate_LineTableBuilder : JavaIoFilterReader {
 @public
  FreemarkerTemplateTemplate *this$0_;
  JavaLangStringBuffer *lineBuf_;
  jint lastChar_;
  jboolean closed_;
  /**
   @brief Needed to work around JavaCC behavior where it silently treats any errors as EOF.
   */
  JavaIoIOException *failure_;
}

/**
 @param r the character stream to wrap
 */
- (instancetype)initWithFreemarkerTemplateTemplate:(FreemarkerTemplateTemplate *)outer$
                                  withJavaIoReader:(JavaIoReader *)r;

- (void)throwFailure;

- (jint)read;

- (JavaIoIOException *)rememberExceptionWithJavaIoIOException:(JavaIoIOException *)e;

- (jint)readWithCharArray:(IOSCharArray *)cbuf
                  withInt:(jint)off
                  withInt:(jint)len;

- (void)close;

- (void)handleCharWithInt:(jint)c;

@end

J2OBJC_EMPTY_STATIC_INIT(FreemarkerTemplateTemplate_LineTableBuilder)

J2OBJC_FIELD_SETTER(FreemarkerTemplateTemplate_LineTableBuilder, this$0_, FreemarkerTemplateTemplate *)
J2OBJC_FIELD_SETTER(FreemarkerTemplateTemplate_LineTableBuilder, lineBuf_, JavaLangStringBuffer *)
J2OBJC_FIELD_SETTER(FreemarkerTemplateTemplate_LineTableBuilder, failure_, JavaIoIOException *)

__attribute__((unused)) static void FreemarkerTemplateTemplate_LineTableBuilder_initWithFreemarkerTemplateTemplate_withJavaIoReader_(FreemarkerTemplateTemplate_LineTableBuilder *self, FreemarkerTemplateTemplate *outer$, JavaIoReader *r);

__attribute__((unused)) static FreemarkerTemplateTemplate_LineTableBuilder *new_FreemarkerTemplateTemplate_LineTableBuilder_initWithFreemarkerTemplateTemplate_withJavaIoReader_(FreemarkerTemplateTemplate *outer$, JavaIoReader *r) NS_RETURNS_RETAINED;

__attribute__((unused)) static JavaIoIOException *FreemarkerTemplateTemplate_LineTableBuilder_rememberExceptionWithJavaIoIOException_(FreemarkerTemplateTemplate_LineTableBuilder *self, JavaIoIOException *e);

__attribute__((unused)) static void FreemarkerTemplateTemplate_LineTableBuilder_handleCharWithInt_(FreemarkerTemplateTemplate_LineTableBuilder *self, jint c);

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerTemplateTemplate_LineTableBuilder)

#define FreemarkerTemplateTemplate_WrongEncodingException_serialVersionUID 1LL

@interface FreemarkerTemplateTemplate_WrongEncodingException () {
 @public
  NSString *constructorSpecifiedEncoding_;
}

@end

J2OBJC_FIELD_SETTER(FreemarkerTemplateTemplate_WrongEncodingException, constructorSpecifiedEncoding_, NSString *)

J2OBJC_STATIC_FIELD_GETTER(FreemarkerTemplateTemplate_WrongEncodingException, serialVersionUID, jlong)

NSString *FreemarkerTemplateTemplate_DEFAULT_NAMESPACE_PREFIX_ = 
#line 64
@"D";
NSString *FreemarkerTemplateTemplate_NO_NS_PREFIX_ = 
#line 65
@"N";


#line 63
@implementation FreemarkerTemplateTemplate


#line 89
- (instancetype)initWithNSString:(NSString *)name
                    withNSString:(NSString *)sourceName
withFreemarkerTemplateConfiguration:(FreemarkerTemplateConfiguration *)cfg
                     withBoolean:(jboolean)overloadSelector {
  FreemarkerTemplateTemplate_initWithNSString_withNSString_withFreemarkerTemplateConfiguration_withBoolean_(self, name, sourceName, cfg, overloadSelector);
  return self;
}

+ (FreemarkerTemplateConfiguration *)toNonNullWithFreemarkerTemplateConfiguration:(FreemarkerTemplateConfiguration *)cfg {
  return FreemarkerTemplateTemplate_toNonNullWithFreemarkerTemplateConfiguration_(cfg);
}


#line 104
- (instancetype)initWithNSString:(NSString *)name
                withJavaIoReader:(JavaIoReader *)reader
withFreemarkerTemplateConfiguration:(FreemarkerTemplateConfiguration *)cfg {
  FreemarkerTemplateTemplate_initWithNSString_withJavaIoReader_withFreemarkerTemplateConfiguration_(self, name, reader, cfg);
  return self;
}


#line 114
- (instancetype)initWithNSString:(NSString *)name
                    withNSString:(NSString *)sourceCode
withFreemarkerTemplateConfiguration:(FreemarkerTemplateConfiguration *)cfg {
  FreemarkerTemplateTemplate_initWithNSString_withNSString_withFreemarkerTemplateConfiguration_(self, name, sourceCode, cfg);
  return self;
}


#line 125
- (instancetype)initWithNSString:(NSString *)name
                withJavaIoReader:(JavaIoReader *)reader
withFreemarkerTemplateConfiguration:(FreemarkerTemplateConfiguration *)cfg
                    withNSString:(NSString *)encoding {
  FreemarkerTemplateTemplate_initWithNSString_withJavaIoReader_withFreemarkerTemplateConfiguration_withNSString_(self, name, reader, cfg, encoding);
  return self;
}


#line 160
- (instancetype)initWithNSString:(NSString *)name
                    withNSString:(NSString *)sourceName
                withJavaIoReader:(JavaIoReader *)reader
withFreemarkerTemplateConfiguration:(FreemarkerTemplateConfiguration *)cfg {
  FreemarkerTemplateTemplate_initWithNSString_withNSString_withJavaIoReader_withFreemarkerTemplateConfiguration_(self, name, sourceName, reader, cfg);
  return self;
}


#line 183
- (instancetype)initWithNSString:(NSString *)name
                    withNSString:(NSString *)sourceName
                withJavaIoReader:(JavaIoReader *)reader
withFreemarkerTemplateConfiguration:(FreemarkerTemplateConfiguration *)cfg
                    withNSString:(NSString *)encoding {
  FreemarkerTemplateTemplate_initWithNSString_withNSString_withJavaIoReader_withFreemarkerTemplateConfiguration_withNSString_(self, name, sourceName, reader, cfg, encoding);
  return self;
}


#line 240
- (instancetype)initWithNSString:(NSString *)name
                withJavaIoReader:(JavaIoReader *)reader {
  FreemarkerTemplateTemplate_initWithNSString_withJavaIoReader_(self, name, reader);
  return self;
}


#line 250
- (instancetype)initWithNSString:(NSString *)name
withFreemarkerCoreTemplateElement:(FreemarkerCoreTemplateElement *)root
withFreemarkerTemplateConfiguration:(FreemarkerTemplateConfiguration *)cfg {
  FreemarkerTemplateTemplate_initWithNSString_withFreemarkerCoreTemplateElement_withFreemarkerTemplateConfiguration_(self, name, root, cfg);
  return self;
}


#line 259
+ (FreemarkerTemplateTemplate *)getPlainTextTemplateWithNSString:(NSString *)name
                                                    withNSString:(NSString *)content
                             withFreemarkerTemplateConfiguration:(FreemarkerTemplateConfiguration *)config {
  return FreemarkerTemplateTemplate_getPlainTextTemplateWithNSString_withNSString_withFreemarkerTemplateConfiguration_(name, content, config);
}


#line 277
+ (FreemarkerTemplateTemplate *)getPlainTextTemplateWithNSString:(NSString *)name
                                                    withNSString:(NSString *)sourceName
                                                    withNSString:(NSString *)content
                             withFreemarkerTemplateConfiguration:(FreemarkerTemplateConfiguration *)config {
  return FreemarkerTemplateTemplate_getPlainTextTemplateWithNSString_withNSString_withNSString_withFreemarkerTemplateConfiguration_(name, sourceName, content, config);
}

+ (FreemarkerTemplateVersion *)normalizeTemplateLanguageVersionWithFreemarkerTemplateVersion:(FreemarkerTemplateVersion *)incompatibleImprovements {
  return FreemarkerTemplateTemplate_normalizeTemplateLanguageVersionWithFreemarkerTemplateVersion_(incompatibleImprovements);
}


#line 315
- (void)processWithId:(id)dataModel
     withJavaIoWriter:(JavaIoWriter *)outArg {
  
#line 318
  [((FreemarkerCoreEnvironment *) nil_chk([self createProcessingEnvironmentWithId:dataModel withJavaIoWriter:outArg withFreemarkerTemplateObjectWrapper:nil])) process];
}


#line 332
- (void)processWithId:(id)dataModel
     withJavaIoWriter:(JavaIoWriter *)outArg
withFreemarkerTemplateObjectWrapper:(id<FreemarkerTemplateObjectWrapper>)wrapper
withFreemarkerTemplateTemplateNodeModel:(id<FreemarkerTemplateTemplateNodeModel>)rootNode {
  
#line 335
  FreemarkerCoreEnvironment *env = [self createProcessingEnvironmentWithId:dataModel withJavaIoWriter:outArg withFreemarkerTemplateObjectWrapper:wrapper];
  if (rootNode != nil) {
    [((FreemarkerCoreEnvironment *) nil_chk(env)) setCurrentVisitorNodeWithFreemarkerTemplateTemplateNodeModel:rootNode];
  }
  [((FreemarkerCoreEnvironment *) nil_chk(env)) process];
}


#line 348
- (void)processWithId:(id)dataModel
     withJavaIoWriter:(JavaIoWriter *)outArg
withFreemarkerTemplateObjectWrapper:(id<FreemarkerTemplateObjectWrapper>)wrapper {
  
#line 351
  [((FreemarkerCoreEnvironment *) nil_chk([self createProcessingEnvironmentWithId:dataModel withJavaIoWriter:outArg withFreemarkerTemplateObjectWrapper:wrapper])) process];
}


#line 400
- (FreemarkerCoreEnvironment *)createProcessingEnvironmentWithId:(id)dataModel
                                                withJavaIoWriter:(JavaIoWriter *)outArg
                             withFreemarkerTemplateObjectWrapper:(id<FreemarkerTemplateObjectWrapper>)wrapper {
  
#line 402
  id<FreemarkerTemplateTemplateHashModel> dataModelHash;
  if ([FreemarkerTemplateTemplateHashModel_class_() isInstance:dataModel]) {
    dataModelHash = (id<FreemarkerTemplateTemplateHashModel>) check_protocol_cast(dataModel, @protocol(FreemarkerTemplateTemplateHashModel));
  }
  else {
    
#line 406
    if (wrapper == nil) {
      wrapper = [self getObjectWrapper];
    }
    
#line 410
    if (dataModel == nil) {
      dataModelHash = new_FreemarkerTemplateSimpleHash_initWithFreemarkerTemplateObjectWrapper_(wrapper);
    }
    else {
      
#line 413
      id<FreemarkerTemplateTemplateModel> wrappedDataModel = [((id<FreemarkerTemplateObjectWrapper>) nil_chk(wrapper)) wrapWithId:dataModel];
      if ([FreemarkerTemplateTemplateHashModel_class_() isInstance:wrappedDataModel]) {
        dataModelHash = (id<FreemarkerTemplateTemplateHashModel>) check_protocol_cast(wrappedDataModel, @protocol(FreemarkerTemplateTemplateHashModel));
      }
      else
#line 416
      if (wrappedDataModel == nil) {
        @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$$",
#line 418
        [[wrapper getClass] getName], @" converted ", [[dataModel getClass] getName], @" to null."));
      }
      else {
        
#line 420
        @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$$",
#line 421
        [[wrapper getClass] getName], @" didn't convert ", [[dataModel getClass] getName], @" to a TemplateHashModel. Generally, you want to use a Map<String, Object> or a JavaBean as the root-map (aka. data-model) parameter. The Map key-s or JavaBean property names will be the variable names in the template."));
      }
    }
  }
  
#line 428
  return new_FreemarkerCoreEnvironment_initWithFreemarkerTemplateTemplate_withFreemarkerTemplateTemplateHashModel_withJavaIoWriter_(self, dataModelHash, outArg);
}


#line 435
- (FreemarkerCoreEnvironment *)createProcessingEnvironmentWithId:(id)dataModel
                                                withJavaIoWriter:(JavaIoWriter *)outArg {
  
#line 438
  return [self createProcessingEnvironmentWithId:dataModel withJavaIoWriter:outArg withFreemarkerTemplateObjectWrapper:nil];
}


#line 445
- (NSString *)description {
  JavaIoStringWriter *sw = new_JavaIoStringWriter_init();
  @try {
    [self dumpWithJavaIoWriter:sw];
  }
  @catch (
#line 449
  JavaIoIOException *ioe) {
    @throw new_JavaLangRuntimeException_initWithNSString_([((JavaIoIOException *) nil_chk(ioe)) getMessage]);
  }
  return [sw description];
}


#line 483
- (NSString *)getName {
  return name_;
}


#line 500
- (NSString *)getSourceName {
  return sourceName_ != nil ? sourceName_ : [self getName];
}


#line 507
- (FreemarkerTemplateConfiguration *)getConfiguration {
  return (FreemarkerTemplateConfiguration *) check_class_cast([self getParent], [FreemarkerTemplateConfiguration class]);
}


#line 516
- (FreemarkerTemplateVersion *)getTemplateLanguageVersion {
  return templateLanguageVersion_;
}


#line 523
- (void)setEncodingWithNSString:(NSString *)encoding {
  self->encoding_ = encoding;
}


#line 530
- (NSString *)getEncoding {
  return self->encoding_;
}


#line 541
- (id)getCustomLookupCondition {
  return customLookupCondition_;
}


#line 553
- (void)setCustomLookupConditionWithId:(id)customLookupCondition {
  self->customLookupCondition_ = customLookupCondition;
}


#line 566
- (jint)getActualTagSyntax {
  return actualTagSyntax_;
}


#line 579
- (jint)getActualNamingConvention {
  return actualNamingConvention_;
}


#line 586
- (void)dumpWithJavaIoPrintStream:(JavaIoPrintStream *)ps {
  [((JavaIoPrintStream *) nil_chk(ps)) printWithNSString:[((FreemarkerCoreTemplateElement *) nil_chk(rootElement_)) getCanonicalForm]];
}


#line 593
- (void)dumpWithJavaIoWriter:(JavaIoWriter *)outArg {
  [((JavaIoWriter *) nil_chk(outArg)) writeWithNSString:[((FreemarkerCoreTemplateElement *) nil_chk(rootElement_)) getCanonicalForm]];
}


#line 602
- (void)addMacroWithFreemarkerCoreMacro:(FreemarkerCoreMacro *)macro {
  (void) [((id<JavaUtilMap>) nil_chk(macros_)) putWithId:[((FreemarkerCoreMacro *) nil_chk(macro)) getName] withId:macro];
}


#line 611
- (void)addImportWithFreemarkerCoreLibraryLoad:(FreemarkerCoreLibraryLoad *)ll {
  [((id<JavaUtilList>) nil_chk(imports_)) addWithId:ll];
}


#line 623
- (NSString *)getSourceWithInt:(jint)beginColumn
                       withInt:(jint)beginLine
                       withInt:(jint)endColumn
                       withInt:(jint)endLine {
  
#line 628
  if (beginLine < 1 || endLine < 1) return nil;
  
#line 631
  --beginLine;
  --beginColumn;
  --endColumn;
  --endLine;
  JavaLangStringBuffer *buf = new_JavaLangStringBuffer_init();
  for (jint i = beginLine; i <= endLine; i++) {
    if (i < [((JavaUtilArrayList *) nil_chk(lines_)) size]) {
      (void) [buf appendWithId:[lines_ getWithInt:i]];
    }
  }
  jint lastLineLength = ((jint) [((NSString *) nil_chk([nil_chk([((JavaUtilArrayList *) nil_chk(lines_)) getWithInt:endLine]) description])) length]);
  jint trailingCharsToDelete = lastLineLength - endColumn - 1;
  (void) [buf delete__WithInt:0 withInt:beginColumn];
  (void) [buf delete__WithInt:[buf length] - trailingCharsToDelete withInt:[buf length]];
  return [buf description];
}


#line 742
- (FreemarkerCoreTemplateElement *)getRootTreeNode {
  return rootElement_;
}


#line 749
- (id<JavaUtilMap>)getMacros {
  return macros_;
}


#line 756
- (id<JavaUtilList>)getImports {
  return imports_;
}


#line 765
- (void)addPrefixNSMappingWithNSString:(NSString *)prefix
                          withNSString:(NSString *)nsURI {
  if (((jint) [((NSString *) nil_chk(nsURI)) length]) == 0) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Cannot map empty string URI");
  }
  if (((jint) [((NSString *) nil_chk(prefix)) length]) == 0) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Cannot map empty string prefix");
  }
  if ([prefix isEqual:FreemarkerTemplateTemplate_NO_NS_PREFIX_]) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$", @"The prefix: ", prefix, @" cannot be registered, it's reserved for special internal use."));
  }
  if ([((id<JavaUtilMap>) nil_chk(prefixToNamespaceURILookup_)) containsKeyWithId:prefix]) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$", @"The prefix: '", prefix, @"' was repeated. This is illegal."));
  }
  if ([((id<JavaUtilMap>) nil_chk(namespaceURIToPrefixLookup_)) containsKeyWithId:nsURI]) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$", @"The namespace URI: ", nsURI, @" cannot be mapped to 2 different prefixes."));
  }
  if ([prefix isEqual:FreemarkerTemplateTemplate_DEFAULT_NAMESPACE_PREFIX_]) {
    self->defaultNS_ = nsURI;
  }
  else {
    
#line 784
    (void) [prefixToNamespaceURILookup_ putWithId:prefix withId:nsURI];
    (void) [namespaceURIToPrefixLookup_ putWithId:nsURI withId:prefix];
  }
}


#line 789
- (NSString *)getDefaultNS {
  return self->defaultNS_;
}


#line 796
- (NSString *)getNamespaceForPrefixWithNSString:(NSString *)prefix {
  if ([((NSString *) nil_chk(prefix)) isEqual:@""]) {
    return defaultNS_ == nil ? @"" : defaultNS_;
  }
  return (NSString *) check_class_cast([((id<JavaUtilMap>) nil_chk(prefixToNamespaceURILookup_)) getWithId:prefix], [NSString class]);
}


#line 806
- (NSString *)getPrefixForNamespaceWithNSString:(NSString *)nsURI {
  if (nsURI == nil) {
    return nil;
  }
  if (((jint) [((NSString *) nil_chk(nsURI)) length]) == 0) {
    return defaultNS_ == nil ? @"" : FreemarkerTemplateTemplate_NO_NS_PREFIX_;
  }
  if ([nsURI isEqual:defaultNS_]) {
    return @"";
  }
  return (NSString *) check_class_cast([((id<JavaUtilMap>) nil_chk(namespaceURIToPrefixLookup_)) getWithId:nsURI], [NSString class]);
}


#line 824
- (NSString *)getPrefixedNameWithNSString:(NSString *)localName
                             withNSString:(NSString *)nsURI {
  if (nsURI == nil || ((jint) [nsURI length]) == 0) {
    if (defaultNS_ != nil) {
      return JreStrcat("$C$", FreemarkerTemplateTemplate_NO_NS_PREFIX_, ':', localName);
    }
    else {
      
#line 829
      return localName;
    }
  }
  if ([((NSString *) nil_chk(nsURI)) isEqual:defaultNS_]) {
    return localName;
  }
  NSString *prefix = [self getPrefixForNamespaceWithNSString:nsURI];
  if (prefix == nil) {
    return nil;
  }
  return JreStrcat("$C$", prefix, ':', localName);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithNSString:withNSString:withFreemarkerTemplateConfiguration:withBoolean:", "Template", NULL, 0x2, NULL, NULL },
    { "toNonNullWithFreemarkerTemplateConfiguration:", "toNonNull", "Lfreemarker.template.Configuration;", 0xa, NULL, NULL },
    { "initWithNSString:withJavaIoReader:withFreemarkerTemplateConfiguration:", "Template", NULL, 0x1, "Ljava.io.IOException;", NULL },
    { "initWithNSString:withNSString:withFreemarkerTemplateConfiguration:", "Template", NULL, 0x1, "Ljava.io.IOException;", NULL },
    { "initWithNSString:withJavaIoReader:withFreemarkerTemplateConfiguration:withNSString:", "Template", NULL, 0x1, "Ljava.io.IOException;", NULL },
    { "initWithNSString:withNSString:withJavaIoReader:withFreemarkerTemplateConfiguration:", "Template", NULL, 0x1, "Ljava.io.IOException;", NULL },
    { "initWithNSString:withNSString:withJavaIoReader:withFreemarkerTemplateConfiguration:withNSString:", "Template", NULL, 0x1, "Ljava.io.IOException;", NULL },
    { "initWithNSString:withJavaIoReader:", "Template", NULL, 0x1, "Ljava.io.IOException;", NULL },
    { "initWithNSString:withFreemarkerCoreTemplateElement:withFreemarkerTemplateConfiguration:", "Template", NULL, 0x0, NULL, NULL },
    { "getPlainTextTemplateWithNSString:withNSString:withFreemarkerTemplateConfiguration:", "getPlainTextTemplate", "Lfreemarker.template.Template;", 0x9, NULL, NULL },
    { "getPlainTextTemplateWithNSString:withNSString:withNSString:withFreemarkerTemplateConfiguration:", "getPlainTextTemplate", "Lfreemarker.template.Template;", 0x9, NULL, NULL },
    { "normalizeTemplateLanguageVersionWithFreemarkerTemplateVersion:", "normalizeTemplateLanguageVersion", "Lfreemarker.template.Version;", 0xa, NULL, NULL },
    { "processWithId:withJavaIoWriter:", "process", "V", 0x1, "Lfreemarker.template.TemplateException;Ljava.io.IOException;", NULL },
    { "processWithId:withJavaIoWriter:withFreemarkerTemplateObjectWrapper:withFreemarkerTemplateTemplateNodeModel:", "process", "V", 0x1, "Lfreemarker.template.TemplateException;Ljava.io.IOException;", NULL },
    { "processWithId:withJavaIoWriter:withFreemarkerTemplateObjectWrapper:", "process", "V", 0x1, "Lfreemarker.template.TemplateException;Ljava.io.IOException;", NULL },
    { "createProcessingEnvironmentWithId:withJavaIoWriter:withFreemarkerTemplateObjectWrapper:", "createProcessingEnvironment", "Lfreemarker.core.Environment;", 0x1, "Lfreemarker.template.TemplateException;Ljava.io.IOException;", NULL },
    { "createProcessingEnvironmentWithId:withJavaIoWriter:", "createProcessingEnvironment", "Lfreemarker.core.Environment;", 0x1, "Lfreemarker.template.TemplateException;Ljava.io.IOException;", NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getName", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getSourceName", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getConfiguration", NULL, "Lfreemarker.template.Configuration;", 0x1, NULL, NULL },
    { "getTemplateLanguageVersion", NULL, "Lfreemarker.template.Version;", 0x0, NULL, NULL },
    { "setEncodingWithNSString:", "setEncoding", "V", 0x1, NULL, NULL },
    { "getEncoding", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getCustomLookupCondition", NULL, "Ljava.lang.Object;", 0x1, NULL, NULL },
    { "setCustomLookupConditionWithId:", "setCustomLookupCondition", "V", 0x1, NULL, NULL },
    { "getActualTagSyntax", NULL, "I", 0x1, NULL, NULL },
    { "getActualNamingConvention", NULL, "I", 0x1, NULL, NULL },
    { "dumpWithJavaIoPrintStream:", "dump", "V", 0x1, NULL, NULL },
    { "dumpWithJavaIoWriter:", "dump", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "addMacroWithFreemarkerCoreMacro:", "addMacro", "V", 0x1, NULL, NULL },
    { "addImportWithFreemarkerCoreLibraryLoad:", "addImport", "V", 0x1, NULL, NULL },
    { "getSourceWithInt:withInt:withInt:withInt:", "getSource", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getRootTreeNode", NULL, "Lfreemarker.core.TemplateElement;", 0x1, NULL, NULL },
    { "getMacros", NULL, "Ljava.util.Map;", 0x1, NULL, NULL },
    { "getImports", NULL, "Ljava.util.List;", 0x1, NULL, NULL },
    { "addPrefixNSMappingWithNSString:withNSString:", "addPrefixNSMapping", "V", 0x1, NULL, NULL },
    { "getDefaultNS", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getNamespaceForPrefixWithNSString:", "getNamespaceForPrefix", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getPrefixForNamespaceWithNSString:", "getPrefixForNamespace", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getPrefixedNameWithNSString:withNSString:", "getPrefixedName", "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "DEFAULT_NAMESPACE_PREFIX_", NULL, 0x19, "Ljava.lang.String;", &FreemarkerTemplateTemplate_DEFAULT_NAMESPACE_PREFIX_, NULL,  },
    { "NO_NS_PREFIX_", NULL, 0x19, "Ljava.lang.String;", &FreemarkerTemplateTemplate_NO_NS_PREFIX_, NULL,  },
    { "parser_", NULL, 0x82, "Lfreemarker.core.FMParser;", NULL, NULL,  },
    { "macros_", NULL, 0x2, "Ljava.util.Map;", NULL, NULL,  },
    { "imports_", NULL, 0x2, "Ljava.util.List;", NULL, NULL,  },
    { "rootElement_", NULL, 0x2, "Lfreemarker.core.TemplateElement;", NULL, NULL,  },
    { "encoding_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "defaultNS_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "customLookupCondition_", NULL, 0x2, "Ljava.lang.Object;", NULL, NULL,  },
    { "actualTagSyntax_", NULL, 0x2, "I", NULL, NULL,  },
    { "actualNamingConvention_", NULL, 0x2, "I", NULL, NULL,  },
    { "name_", NULL, 0x12, "Ljava.lang.String;", NULL, NULL,  },
    { "sourceName_", NULL, 0x12, "Ljava.lang.String;", NULL, NULL,  },
    { "lines_", NULL, 0x12, "Ljava.util.ArrayList;", NULL, NULL,  },
    { "prefixToNamespaceURILookup_", NULL, 0x2, "Ljava.util.Map;", NULL, NULL,  },
    { "namespaceURIToPrefixLookup_", NULL, 0x2, "Ljava.util.Map;", NULL, NULL,  },
    { "templateLanguageVersion_", NULL, 0x2, "Lfreemarker.template.Version;", NULL, NULL,  },
  };
  static const char *inner_classes[] = {"Lfreemarker.template.Template$LineTableBuilder;", "Lfreemarker.template.Template$WrongEncodingException;"};
  static const J2ObjcClassInfo _FreemarkerTemplateTemplate = { 2, "Template", "freemarker.template", NULL, 0x1, 41, methods, 17, fields, 0, NULL, 2, inner_classes, NULL, NULL };
  return &_FreemarkerTemplateTemplate;
}

@end


#line 89
void FreemarkerTemplateTemplate_initWithNSString_withNSString_withFreemarkerTemplateConfiguration_withBoolean_(FreemarkerTemplateTemplate *self, NSString *name, NSString *sourceName, FreemarkerTemplateConfiguration *cfg, jboolean overloadSelector) {
  (void) FreemarkerCoreConfigurable_initWithFreemarkerCoreConfigurable_(self, FreemarkerTemplateTemplate_toNonNullWithFreemarkerTemplateConfiguration_(
#line 91
  cfg));
  self->macros_ = new_JavaUtilHashMap_init();
  self->imports_ = new_JavaUtilVector_init();
  self->lines_ = new_JavaUtilArrayList_init();
  self->prefixToNamespaceURILookup_ = new_JavaUtilHashMap_init();
  self->namespaceURIToPrefixLookup_ = new_JavaUtilHashMap_init();
  
#line 92
  self->name_ = name;
  self->sourceName_ = sourceName;
  self->templateLanguageVersion_ = FreemarkerTemplateTemplate_normalizeTemplateLanguageVersionWithFreemarkerTemplateVersion_([((FreemarkerTemplateConfiguration *) nil_chk(FreemarkerTemplateTemplate_toNonNullWithFreemarkerTemplateConfiguration_(cfg))) getIncompatibleImprovements]);
}


#line 89
FreemarkerTemplateTemplate *new_FreemarkerTemplateTemplate_initWithNSString_withNSString_withFreemarkerTemplateConfiguration_withBoolean_(NSString *name, NSString *sourceName, FreemarkerTemplateConfiguration *cfg, jboolean overloadSelector) {
  FreemarkerTemplateTemplate *self = [FreemarkerTemplateTemplate alloc];
  FreemarkerTemplateTemplate_initWithNSString_withNSString_withFreemarkerTemplateConfiguration_withBoolean_(self, name, sourceName, cfg, overloadSelector);
  return self;
}


#line 97
FreemarkerTemplateConfiguration *FreemarkerTemplateTemplate_toNonNullWithFreemarkerTemplateConfiguration_(FreemarkerTemplateConfiguration *cfg) {
  FreemarkerTemplateTemplate_initialize();
  
#line 98
  return cfg != nil ? cfg : FreemarkerTemplateConfiguration_getDefaultConfiguration();
}

void FreemarkerTemplateTemplate_initWithNSString_withJavaIoReader_withFreemarkerTemplateConfiguration_(FreemarkerTemplateTemplate *self, NSString *name, JavaIoReader *reader, FreemarkerTemplateConfiguration *cfg) {
  (void) FreemarkerTemplateTemplate_initWithNSString_withNSString_withJavaIoReader_withFreemarkerTemplateConfiguration_(self, name, nil, reader, cfg);
}


#line 104
FreemarkerTemplateTemplate *new_FreemarkerTemplateTemplate_initWithNSString_withJavaIoReader_withFreemarkerTemplateConfiguration_(NSString *name, JavaIoReader *reader, FreemarkerTemplateConfiguration *cfg) {
  FreemarkerTemplateTemplate *self = [FreemarkerTemplateTemplate alloc];
  FreemarkerTemplateTemplate_initWithNSString_withJavaIoReader_withFreemarkerTemplateConfiguration_(self, name, reader, cfg);
  return self;
}


#line 114
void FreemarkerTemplateTemplate_initWithNSString_withNSString_withFreemarkerTemplateConfiguration_(FreemarkerTemplateTemplate *self, NSString *name, NSString *sourceCode, FreemarkerTemplateConfiguration *cfg) {
  (void) FreemarkerTemplateTemplate_initWithNSString_withJavaIoReader_withFreemarkerTemplateConfiguration_(self, name, new_JavaIoStringReader_initWithNSString_(sourceCode), cfg);
}


#line 114
FreemarkerTemplateTemplate *new_FreemarkerTemplateTemplate_initWithNSString_withNSString_withFreemarkerTemplateConfiguration_(NSString *name, NSString *sourceCode, FreemarkerTemplateConfiguration *cfg) {
  FreemarkerTemplateTemplate *self = [FreemarkerTemplateTemplate alloc];
  FreemarkerTemplateTemplate_initWithNSString_withNSString_withFreemarkerTemplateConfiguration_(self, name, sourceCode, cfg);
  return self;
}


#line 125
void FreemarkerTemplateTemplate_initWithNSString_withJavaIoReader_withFreemarkerTemplateConfiguration_withNSString_(FreemarkerTemplateTemplate *self, NSString *name, JavaIoReader *reader, FreemarkerTemplateConfiguration *cfg, NSString *encoding) {
  (void) FreemarkerTemplateTemplate_initWithNSString_withNSString_withJavaIoReader_withFreemarkerTemplateConfiguration_withNSString_(self, name, nil, reader, cfg, encoding);
}


#line 125
FreemarkerTemplateTemplate *new_FreemarkerTemplateTemplate_initWithNSString_withJavaIoReader_withFreemarkerTemplateConfiguration_withNSString_(NSString *name, JavaIoReader *reader, FreemarkerTemplateConfiguration *cfg, NSString *encoding) {
  FreemarkerTemplateTemplate *self = [FreemarkerTemplateTemplate alloc];
  FreemarkerTemplateTemplate_initWithNSString_withJavaIoReader_withFreemarkerTemplateConfiguration_withNSString_(self, name, reader, cfg, encoding);
  return self;
}


#line 160
void FreemarkerTemplateTemplate_initWithNSString_withNSString_withJavaIoReader_withFreemarkerTemplateConfiguration_(FreemarkerTemplateTemplate *self, NSString *name, NSString *sourceName, JavaIoReader *reader, FreemarkerTemplateConfiguration *cfg) {
  (void) FreemarkerTemplateTemplate_initWithNSString_withNSString_withJavaIoReader_withFreemarkerTemplateConfiguration_withNSString_(self,
#line 162
  name, sourceName, reader, cfg, nil);
}


#line 160
FreemarkerTemplateTemplate *new_FreemarkerTemplateTemplate_initWithNSString_withNSString_withJavaIoReader_withFreemarkerTemplateConfiguration_(NSString *name, NSString *sourceName, JavaIoReader *reader, FreemarkerTemplateConfiguration *cfg) {
  FreemarkerTemplateTemplate *self = [FreemarkerTemplateTemplate alloc];
  FreemarkerTemplateTemplate_initWithNSString_withNSString_withJavaIoReader_withFreemarkerTemplateConfiguration_(self, name, sourceName, reader, cfg);
  return self;
}


#line 183
void FreemarkerTemplateTemplate_initWithNSString_withNSString_withJavaIoReader_withFreemarkerTemplateConfiguration_withNSString_(FreemarkerTemplateTemplate *self, NSString *name, NSString *sourceName, JavaIoReader *reader, FreemarkerTemplateConfiguration *cfg, NSString *encoding) {
  (void) FreemarkerTemplateTemplate_initWithNSString_withNSString_withFreemarkerTemplateConfiguration_withBoolean_(self,
#line 185
  name, sourceName, cfg, YES);
  
#line 187
  self->encoding_ = encoding;
  FreemarkerTemplateTemplate_LineTableBuilder *ltbReader;
  @try {
    if (!([reader isKindOfClass:[JavaIoBufferedReader class]])) {
      reader = new_JavaIoBufferedReader_initWithJavaIoReader_withInt_(reader, (jint) 0x1000);
    }
    ltbReader = new_FreemarkerTemplateTemplate_LineTableBuilder_initWithFreemarkerTemplateTemplate_withJavaIoReader_(self, reader);
    reader = ltbReader;
    
#line 196
    @try {
      FreemarkerTemplateConfiguration *actualCfg = [self getConfiguration];
      self->parser_ = new_FreemarkerCoreFMParser_initWithFreemarkerTemplateTemplate_withJavaIoReader_withBoolean_withBoolean_withInt_withInt_withInt_(self, reader,
#line 199
      [((FreemarkerTemplateConfiguration *) nil_chk(actualCfg)) getStrictSyntaxMode],
#line 200
      [actualCfg getWhitespaceStripping],
#line 201
      [actualCfg getTagSyntax],
#line 202
      [actualCfg getNamingConvention],
#line 203
      [((FreemarkerTemplateVersion *) nil_chk([actualCfg getIncompatibleImprovements])) intValue]);
      self->rootElement_ = [self->parser_ Root];
      self->actualTagSyntax_ = [self->parser_ _getLastTagSyntax];
      self->actualNamingConvention_ = [self->parser_ _getLastNamingConvention];
    }
    @catch (FreemarkerCoreTokenMgrError *exc) {
      
#line 211
      @throw [((FreemarkerCoreTokenMgrError *) nil_chk(exc)) toParseExceptionWithFreemarkerTemplateTemplate:self];
    }
    @finally {
      self->parser_ = nil;
    }
  }
  @catch (FreemarkerCoreParseException *e) {
    [((FreemarkerCoreParseException *) nil_chk(e)) setTemplateNameWithNSString:[self getSourceName]];
    @throw e;
  }
  @finally {
    [((JavaIoReader *) nil_chk(reader)) close];
  }
  
#line 226
  [((FreemarkerTemplateTemplate_LineTableBuilder *) nil_chk(ltbReader)) throwFailure];
  
#line 228
  self->namespaceURIToPrefixLookup_ = JavaUtilCollections_unmodifiableMapWithJavaUtilMap_(self->namespaceURIToPrefixLookup_);
  self->prefixToNamespaceURILookup_ = JavaUtilCollections_unmodifiableMapWithJavaUtilMap_(self->prefixToNamespaceURILookup_);
}


#line 183
FreemarkerTemplateTemplate *new_FreemarkerTemplateTemplate_initWithNSString_withNSString_withJavaIoReader_withFreemarkerTemplateConfiguration_withNSString_(NSString *name, NSString *sourceName, JavaIoReader *reader, FreemarkerTemplateConfiguration *cfg, NSString *encoding) {
  FreemarkerTemplateTemplate *self = [FreemarkerTemplateTemplate alloc];
  FreemarkerTemplateTemplate_initWithNSString_withNSString_withJavaIoReader_withFreemarkerTemplateConfiguration_withNSString_(self, name, sourceName, reader, cfg, encoding);
  return self;
}


#line 240
void FreemarkerTemplateTemplate_initWithNSString_withJavaIoReader_(FreemarkerTemplateTemplate *self, NSString *name, JavaIoReader *reader) {
  (void) FreemarkerTemplateTemplate_initWithNSString_withJavaIoReader_withFreemarkerTemplateConfiguration_(self, name, reader, nil);
}


#line 240
FreemarkerTemplateTemplate *new_FreemarkerTemplateTemplate_initWithNSString_withJavaIoReader_(NSString *name, JavaIoReader *reader) {
  FreemarkerTemplateTemplate *self = [FreemarkerTemplateTemplate alloc];
  FreemarkerTemplateTemplate_initWithNSString_withJavaIoReader_(self, name, reader);
  return self;
}


#line 250
void FreemarkerTemplateTemplate_initWithNSString_withFreemarkerCoreTemplateElement_withFreemarkerTemplateConfiguration_(FreemarkerTemplateTemplate *self, NSString *name, FreemarkerCoreTemplateElement *root, FreemarkerTemplateConfiguration *cfg) {
  (void) FreemarkerTemplateTemplate_initWithNSString_withNSString_withFreemarkerTemplateConfiguration_withBoolean_(self, name, nil, cfg, YES);
  self->rootElement_ = root;
}


#line 250
FreemarkerTemplateTemplate *new_FreemarkerTemplateTemplate_initWithNSString_withFreemarkerCoreTemplateElement_withFreemarkerTemplateConfiguration_(NSString *name, FreemarkerCoreTemplateElement *root, FreemarkerTemplateConfiguration *cfg) {
  FreemarkerTemplateTemplate *self = [FreemarkerTemplateTemplate alloc];
  FreemarkerTemplateTemplate_initWithNSString_withFreemarkerCoreTemplateElement_withFreemarkerTemplateConfiguration_(self, name, root, cfg);
  return self;
}


#line 259
FreemarkerTemplateTemplate *FreemarkerTemplateTemplate_getPlainTextTemplateWithNSString_withNSString_withFreemarkerTemplateConfiguration_(NSString *name, NSString *content, FreemarkerTemplateConfiguration *config) {
  FreemarkerTemplateTemplate_initialize();
  
#line 260
  return FreemarkerTemplateTemplate_getPlainTextTemplateWithNSString_withNSString_withNSString_withFreemarkerTemplateConfiguration_(name, nil, content, config);
}


#line 277
FreemarkerTemplateTemplate *FreemarkerTemplateTemplate_getPlainTextTemplateWithNSString_withNSString_withNSString_withFreemarkerTemplateConfiguration_(NSString *name, NSString *sourceName, NSString *content, FreemarkerTemplateConfiguration *config) {
  FreemarkerTemplateTemplate_initialize();
  
#line 278
  FreemarkerTemplateTemplate *template_ = new_FreemarkerTemplateTemplate_initWithNSString_withNSString_withFreemarkerTemplateConfiguration_withBoolean_(name, sourceName, config, YES);
  template_->rootElement_ = new_FreemarkerCoreTextBlock_initWithNSString_(content);
  template_->actualTagSyntax_ = [((FreemarkerTemplateConfiguration *) nil_chk(config)) getTagSyntax];
  return template_;
}


#line 284
FreemarkerTemplateVersion *FreemarkerTemplateTemplate_normalizeTemplateLanguageVersionWithFreemarkerTemplateVersion_(FreemarkerTemplateVersion *incompatibleImprovements) {
  FreemarkerTemplateTemplate_initialize();
  
#line 285
  FreemarkerTemplate_TemplateAPI_checkVersionNotNullAndSupportedWithFreemarkerTemplateVersion_(incompatibleImprovements);
  jint v = [((FreemarkerTemplateVersion *) nil_chk(incompatibleImprovements)) intValue];
  if (v < FreemarkerTemplate_TemplateAPI_get_VERSION_INT_2_3_19_()) {
    return FreemarkerTemplateConfiguration_get_VERSION_2_3_0_();
  }
  else
#line 289
  if (v > FreemarkerTemplate_TemplateAPI_get_VERSION_INT_2_3_21_()) {
    return FreemarkerTemplateConfiguration_get_VERSION_2_3_21_();
  }
  else {
    
#line 292
    return incompatibleImprovements;
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerTemplateTemplate)


#line 652
@implementation FreemarkerTemplateTemplate_LineTableBuilder


#line 664
- (instancetype)initWithFreemarkerTemplateTemplate:(FreemarkerTemplateTemplate *)outer$
                                  withJavaIoReader:(JavaIoReader *)r {
  FreemarkerTemplateTemplate_LineTableBuilder_initWithFreemarkerTemplateTemplate_withJavaIoReader_(self, outer$, r);
  return self;
}


#line 668
- (void)throwFailure {
  if (failure_ != nil) {
    @throw failure_;
  }
}

- (jint)read {
  @try {
    jint c = [((JavaIoReader *) nil_chk(in_)) read];
    FreemarkerTemplateTemplate_LineTableBuilder_handleCharWithInt_(self, c);
    return c;
  }
  @catch (
#line 679
  JavaIoIOException *e) {
    @throw FreemarkerTemplateTemplate_LineTableBuilder_rememberExceptionWithJavaIoIOException_(self, e);
  }
}


#line 684
- (JavaIoIOException *)rememberExceptionWithJavaIoIOException:(JavaIoIOException *)e {
  return FreemarkerTemplateTemplate_LineTableBuilder_rememberExceptionWithJavaIoIOException_(self, e);
}


#line 692
- (jint)readWithCharArray:(IOSCharArray *)cbuf
                  withInt:(jint)off
                  withInt:(jint)len {
  @try {
    jint numchars = [((JavaIoReader *) nil_chk(in_)) readWithCharArray:cbuf withInt:off withInt:len];
    for (jint i = off; i < off + numchars; i++) {
      jchar c = IOSCharArray_Get(nil_chk(cbuf), i);
      FreemarkerTemplateTemplate_LineTableBuilder_handleCharWithInt_(self, c);
    }
    return numchars;
  }
  @catch (
#line 700
  JavaIoIOException *e) {
    @throw FreemarkerTemplateTemplate_LineTableBuilder_rememberExceptionWithJavaIoIOException_(self, e);
  }
}


#line 705
- (void)close {
  if ([((JavaLangStringBuffer *) nil_chk(lineBuf_)) length] > 0) {
    [((JavaUtilArrayList *) nil_chk(this$0_->lines_)) addWithId:[lineBuf_ description]];
    [lineBuf_ setLengthWithInt:0];
  }
  [super close];
  closed_ = YES;
}

- (void)handleCharWithInt:(jint)c {
  FreemarkerTemplateTemplate_LineTableBuilder_handleCharWithInt_(self, c);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithFreemarkerTemplateTemplate:withJavaIoReader:", "LineTableBuilder", NULL, 0x0, NULL, NULL },
    { "throwFailure", NULL, "V", 0x1, "Ljava.io.IOException;", NULL },
    { "read", NULL, "I", 0x1, "Ljava.io.IOException;", NULL },
    { "rememberExceptionWithJavaIoIOException:", "rememberException", "Ljava.io.IOException;", 0x2, "Ljava.io.IOException;", NULL },
    { "readWithCharArray:withInt:withInt:", "read", "I", 0x1, "Ljava.io.IOException;", NULL },
    { "close", NULL, "V", 0x1, "Ljava.io.IOException;", NULL },
    { "handleCharWithInt:", "handleChar", "V", 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lfreemarker.template.Template;", NULL, NULL,  },
    { "lineBuf_", NULL, 0x12, "Ljava.lang.StringBuffer;", NULL, NULL,  },
    { "lastChar_", NULL, 0x0, "I", NULL, NULL,  },
    { "closed_", NULL, 0x0, "Z", NULL, NULL,  },
    { "failure_", NULL, 0x2, "Ljava.io.IOException;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerTemplateTemplate_LineTableBuilder = { 2, "LineTableBuilder", "freemarker.template", "Template", 0x2, 7, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerTemplateTemplate_LineTableBuilder;
}

@end


#line 664
void FreemarkerTemplateTemplate_LineTableBuilder_initWithFreemarkerTemplateTemplate_withJavaIoReader_(FreemarkerTemplateTemplate_LineTableBuilder *self, FreemarkerTemplateTemplate *outer$, JavaIoReader *r) {
  self->this$0_ = outer$;
  (void) JavaIoFilterReader_initWithJavaIoReader_(self,
#line 665
  r);
  self->lineBuf_ = new_JavaLangStringBuffer_init();
}


#line 664
FreemarkerTemplateTemplate_LineTableBuilder *new_FreemarkerTemplateTemplate_LineTableBuilder_initWithFreemarkerTemplateTemplate_withJavaIoReader_(FreemarkerTemplateTemplate *outer$, JavaIoReader *r) {
  FreemarkerTemplateTemplate_LineTableBuilder *self = [FreemarkerTemplateTemplate_LineTableBuilder alloc];
  FreemarkerTemplateTemplate_LineTableBuilder_initWithFreemarkerTemplateTemplate_withJavaIoReader_(self, outer$, r);
  return self;
}


#line 684
JavaIoIOException *FreemarkerTemplateTemplate_LineTableBuilder_rememberExceptionWithJavaIoIOException_(FreemarkerTemplateTemplate_LineTableBuilder *self, JavaIoIOException *e) {
  
#line 686
  if (!self->closed_) {
    self->failure_ = e;
  }
  return e;
}


#line 714
void FreemarkerTemplateTemplate_LineTableBuilder_handleCharWithInt_(FreemarkerTemplateTemplate_LineTableBuilder *self, jint c) {
  if (c == 0x000a || c == 0x000d) {
    if (self->lastChar_ == 0x000d && c == 0x000a) {
      jint lastIndex = [((JavaUtilArrayList *) nil_chk(self->this$0_->lines_)) size] - 1;
      NSString *lastLine = (NSString *) check_class_cast([self->this$0_->lines_ getWithInt:lastIndex], [NSString class]);
      (void) [self->this$0_->lines_ setWithInt:lastIndex withId:JreStrcat("$C", lastLine, 0x000a)];
    }
    else {
      
#line 721
      (void) [((JavaLangStringBuffer *) nil_chk(self->lineBuf_)) appendWithChar:(jchar) c];
      [((JavaUtilArrayList *) nil_chk(self->this$0_->lines_)) addWithId:[self->lineBuf_ description]];
      [self->lineBuf_ setLengthWithInt:0];
    }
  }
  else if (c == 0x0009) {
    jint numSpaces = 8 - ([((JavaLangStringBuffer *) nil_chk(self->lineBuf_)) length] % 8);
    for (jint i = 0; i < numSpaces; i++) {
      (void) [self->lineBuf_ appendWithChar:' '];
    }
  }
  else {
    (void) [((JavaLangStringBuffer *) nil_chk(self->lineBuf_)) appendWithChar:(jchar) c];
  }
  self->lastChar_ = c;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerTemplateTemplate_LineTableBuilder)


#line 870
@implementation FreemarkerTemplateTemplate_WrongEncodingException


#line 881
- (instancetype)initWithNSString:(NSString *)templateSpecifiedEncoding {
  FreemarkerTemplateTemplate_WrongEncodingException_initWithNSString_(self, templateSpecifiedEncoding);
  return self;
}


#line 888
- (instancetype)initWithNSString:(NSString *)templateSpecifiedEncoding
                    withNSString:(NSString *)constructorSpecifiedEncoding {
  FreemarkerTemplateTemplate_WrongEncodingException_initWithNSString_withNSString_(self, templateSpecifiedEncoding, constructorSpecifiedEncoding);
  return self;
}


#line 893
- (NSString *)getMessage {
  return JreStrcat("$$$$", @"Encoding specified inside the template (", specifiedEncoding_, @") doesn't match the encoding specified for the Template constructor",
#line 896
  (constructorSpecifiedEncoding_ != nil ? JreStrcat("$$$", @" (", constructorSpecifiedEncoding_, @").") : @"."));
}


#line 902
- (NSString *)getTemplateSpecifiedEncoding {
  return specifiedEncoding_;
}


#line 909
- (NSString *)getConstructorSpecifiedEncoding {
  return constructorSpecifiedEncoding_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithNSString:", "WrongEncodingException", NULL, 0x1, NULL, NULL },
    { "initWithNSString:withNSString:", "WrongEncodingException", NULL, 0x1, NULL, NULL },
    { "getMessage", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getTemplateSpecifiedEncoding", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getConstructorSpecifiedEncoding", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, NULL, .constantValue.asLong = FreemarkerTemplateTemplate_WrongEncodingException_serialVersionUID },
    { "specifiedEncoding_", NULL, 0x1, "Ljava.lang.String;", NULL, NULL,  },
    { "constructorSpecifiedEncoding_", NULL, 0x12, "Ljava.lang.String;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerTemplateTemplate_WrongEncodingException = { 2, "WrongEncodingException", "freemarker.template", "Template", 0x9, 5, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerTemplateTemplate_WrongEncodingException;
}

@end


#line 881
void FreemarkerTemplateTemplate_WrongEncodingException_initWithNSString_(FreemarkerTemplateTemplate_WrongEncodingException *self, NSString *templateSpecifiedEncoding) {
  (void) FreemarkerTemplateTemplate_WrongEncodingException_initWithNSString_withNSString_(self, templateSpecifiedEncoding, nil);
}


#line 881
FreemarkerTemplateTemplate_WrongEncodingException *new_FreemarkerTemplateTemplate_WrongEncodingException_initWithNSString_(NSString *templateSpecifiedEncoding) {
  FreemarkerTemplateTemplate_WrongEncodingException *self = [FreemarkerTemplateTemplate_WrongEncodingException alloc];
  FreemarkerTemplateTemplate_WrongEncodingException_initWithNSString_(self, templateSpecifiedEncoding);
  return self;
}


#line 888
void FreemarkerTemplateTemplate_WrongEncodingException_initWithNSString_withNSString_(FreemarkerTemplateTemplate_WrongEncodingException *self, NSString *templateSpecifiedEncoding, NSString *constructorSpecifiedEncoding) {
  (void) FreemarkerCoreParseException_init(self);
  
#line 889
  self->specifiedEncoding_ = templateSpecifiedEncoding;
  self->constructorSpecifiedEncoding_ = constructorSpecifiedEncoding;
}


#line 888
FreemarkerTemplateTemplate_WrongEncodingException *new_FreemarkerTemplateTemplate_WrongEncodingException_initWithNSString_withNSString_(NSString *templateSpecifiedEncoding, NSString *constructorSpecifiedEncoding) {
  FreemarkerTemplateTemplate_WrongEncodingException *self = [FreemarkerTemplateTemplate_WrongEncodingException alloc];
  FreemarkerTemplateTemplate_WrongEncodingException_initWithNSString_withNSString_(self, templateSpecifiedEncoding, constructorSpecifiedEncoding);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerTemplateTemplate_WrongEncodingException)
