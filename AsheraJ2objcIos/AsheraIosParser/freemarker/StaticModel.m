//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/ext/beans/StaticModel.java
//


#include "BeansWrapper.h"
#include "ClassIntrospector.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "Logger.h"
#include "ObjectWrapper.h"
#include "OverloadedMethods.h"
#include "OverloadedMethodsModel.h"
#include "SimpleMethodModel.h"
#include "StaticModel.h"
#include "TemplateCollectionModel.h"
#include "TemplateModel.h"
#include "TemplateModelException.h"
#include "java/lang/IllegalAccessException.h"
#include "java/lang/reflect/Field.h"
#include "java/lang/reflect/Method.h"
#include "java/lang/reflect/Modifier.h"
#include "java/util/Collection.h"
#include "java/util/HashMap.h"
#include "java/util/Iterator.h"
#include "java/util/Map.h"
#include "java/util/Set.h"

#line 0 "/Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/ext/beans/StaticModel.java"

@interface FreemarkerExtBeansStaticModel () {
 @public
  IOSClass *clazz_;
  FreemarkerExtBeansBeansWrapper *wrapper_;
  id<JavaUtilMap> map_;
}

- (void)populate;

@end

J2OBJC_FIELD_SETTER(FreemarkerExtBeansStaticModel, clazz_, IOSClass *)
J2OBJC_FIELD_SETTER(FreemarkerExtBeansStaticModel, wrapper_, FreemarkerExtBeansBeansWrapper *)
J2OBJC_FIELD_SETTER(FreemarkerExtBeansStaticModel, map_, id<JavaUtilMap>)

static FreemarkerLogLogger *FreemarkerExtBeansStaticModel_LOG_;
J2OBJC_STATIC_FIELD_GETTER(FreemarkerExtBeansStaticModel, LOG_, FreemarkerLogLogger *)

__attribute__((unused)) static void FreemarkerExtBeansStaticModel_populate(FreemarkerExtBeansStaticModel *self);

J2OBJC_INITIALIZED_DEFN(FreemarkerExtBeansStaticModel)


#line 40
@implementation FreemarkerExtBeansStaticModel


#line 47
- (instancetype)initWithIOSClass:(IOSClass *)clazz
withFreemarkerExtBeansBeansWrapper:(FreemarkerExtBeansBeansWrapper *)wrapper {
  FreemarkerExtBeansStaticModel_initWithIOSClass_withFreemarkerExtBeansBeansWrapper_(self, clazz, wrapper);
  return self;
}


#line 58
- (id<FreemarkerTemplateTemplateModel>)getWithNSString:(NSString *)key {
  
#line 60
  id model = [((id<JavaUtilMap>) nil_chk(map_)) getWithId:key];
  
#line 63
  if ([FreemarkerTemplateTemplateModel_class_() isInstance:model])
#line 64
  return (id<FreemarkerTemplateTemplateModel>) check_protocol_cast(model, @protocol(FreemarkerTemplateTemplateModel));
  
#line 66
  if ([model isKindOfClass:[JavaLangReflectField class]]) {
    
#line 68
    @try {
      
#line 70
      return [((id<FreemarkerTemplateObjectWrapper>) nil_chk([((FreemarkerExtBeansBeansWrapper *) nil_chk(wrapper_)) getOuterIdentity])) wrapWithId:[((JavaLangReflectField *) nil_chk(((JavaLangReflectField *) check_class_cast(model, [JavaLangReflectField class])))) getWithId:nil]];
    }
    @catch (JavaLangIllegalAccessException *e) {
      
#line 74
      @throw new_FreemarkerTemplateTemplateModelException_initWithNSString_(JreStrcat("$$$$", @"Illegal access for field ",
#line 75
      key, @" of class ", [((IOSClass *) nil_chk(clazz_)) getName]));
    }
  }
  
#line 79
  @throw new_FreemarkerTemplateTemplateModelException_initWithNSString_(JreStrcat("$$$$", @"No such key: ",
#line 80
  key, @" in class ", [((IOSClass *) nil_chk(clazz_)) getName]));
}


#line 87
- (jboolean)isEmpty {
  
#line 89
  return [((id<JavaUtilMap>) nil_chk(map_)) isEmpty];
}


#line 92
- (jint)size {
  
#line 94
  return [((id<JavaUtilMap>) nil_chk(map_)) size];
}


#line 97
- (id<FreemarkerTemplateTemplateCollectionModel>)keys {
  
#line 99
  return (id<FreemarkerTemplateTemplateCollectionModel>) check_protocol_cast([((id<FreemarkerTemplateObjectWrapper>) nil_chk([((FreemarkerExtBeansBeansWrapper *) nil_chk(wrapper_)) getOuterIdentity])) wrapWithId:[((id<JavaUtilMap>) nil_chk(map_)) keySet]], @protocol(FreemarkerTemplateTemplateCollectionModel));
}


#line 102
- (id<FreemarkerTemplateTemplateCollectionModel>)values {
  
#line 104
  return (id<FreemarkerTemplateTemplateCollectionModel>) check_protocol_cast([((id<FreemarkerTemplateObjectWrapper>) nil_chk([((FreemarkerExtBeansBeansWrapper *) nil_chk(wrapper_)) getOuterIdentity])) wrapWithId:[((id<JavaUtilMap>) nil_chk(map_)) values]], @protocol(FreemarkerTemplateTemplateCollectionModel));
}


#line 107
- (void)populate {
  FreemarkerExtBeansStaticModel_populate(self);
}

+ (void)initialize {
  if (self == [FreemarkerExtBeansStaticModel class]) {
    FreemarkerExtBeansStaticModel_LOG_ = FreemarkerLogLogger_getLoggerWithNSString_(
#line 42
    @"freemarker.beans");
    J2OBJC_SET_INITIALIZED(FreemarkerExtBeansStaticModel)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithIOSClass:withFreemarkerExtBeansBeansWrapper:", "StaticModel", NULL, 0x0, "Lfreemarker.template.TemplateModelException;", NULL },
    { "getWithNSString:", "get", "Lfreemarker.template.TemplateModel;", 0x1, "Lfreemarker.template.TemplateModelException;", NULL },
    { "isEmpty", NULL, "Z", 0x1, NULL, NULL },
    { "size", NULL, "I", 0x1, NULL, NULL },
    { "keys", NULL, "Lfreemarker.template.TemplateCollectionModel;", 0x1, "Lfreemarker.template.TemplateModelException;", NULL },
    { "values", NULL, "Lfreemarker.template.TemplateCollectionModel;", 0x1, "Lfreemarker.template.TemplateModelException;", NULL },
    { "populate", NULL, "V", 0x2, "Lfreemarker.template.TemplateModelException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "LOG_", NULL, 0x1a, "Lfreemarker.log.Logger;", &FreemarkerExtBeansStaticModel_LOG_, NULL,  },
    { "clazz_", NULL, 0x12, "Ljava.lang.Class;", NULL, NULL,  },
    { "wrapper_", NULL, 0x12, "Lfreemarker.ext.beans.BeansWrapper;", NULL, NULL,  },
    { "map_", NULL, 0x12, "Ljava.util.Map;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerExtBeansStaticModel = { 2, "StaticModel", "freemarker.ext.beans", NULL, 0x10, 7, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerExtBeansStaticModel;
}

@end


#line 47
void FreemarkerExtBeansStaticModel_initWithIOSClass_withFreemarkerExtBeansBeansWrapper_(FreemarkerExtBeansStaticModel *self, IOSClass *clazz, FreemarkerExtBeansBeansWrapper *wrapper) {
  (void) NSObject_init(self);
  self->map_ = new_JavaUtilHashMap_init();
  
#line 49
  self->clazz_ = clazz;
  self->wrapper_ = wrapper;
  FreemarkerExtBeansStaticModel_populate(self);
}


#line 47
FreemarkerExtBeansStaticModel *new_FreemarkerExtBeansStaticModel_initWithIOSClass_withFreemarkerExtBeansBeansWrapper_(IOSClass *clazz, FreemarkerExtBeansBeansWrapper *wrapper) {
  FreemarkerExtBeansStaticModel *self = [FreemarkerExtBeansStaticModel alloc];
  FreemarkerExtBeansStaticModel_initWithIOSClass_withFreemarkerExtBeansBeansWrapper_(self, clazz, wrapper);
  return self;
}


#line 107
void FreemarkerExtBeansStaticModel_populate(FreemarkerExtBeansStaticModel *self) {
  
#line 109
  if (!JavaLangReflectModifier_isPublicWithInt_([((IOSClass *) nil_chk(self->clazz_)) getModifiers])) {
    
#line 111
    @throw new_FreemarkerTemplateTemplateModelException_initWithNSString_(JreStrcat("$$", @"Can't wrap the non-public class ",
#line 112
    [self->clazz_ getName]));
  }
  
#line 115
  if ([((FreemarkerExtBeansBeansWrapper *) nil_chk(self->wrapper_)) getExposureLevel] == FreemarkerExtBeansBeansWrapper_EXPOSE_NOTHING) {
    
#line 117
    return;
  }
  
#line 120
  IOSObjectArray *fields = [self->clazz_ getFields];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(fields))->size_; ++i) {
    
#line 123
    JavaLangReflectField *field = IOSObjectArray_Get(fields, i);
    jint mod = [((JavaLangReflectField *) nil_chk(field)) getModifiers];
    if (JavaLangReflectModifier_isPublicWithInt_(mod) && JavaLangReflectModifier_isStaticWithInt_(mod)) {
      
#line 127
      if (JavaLangReflectModifier_isFinalWithInt_(mod))
#line 128
      @try {
        
#line 132
        (void) [((id<JavaUtilMap>) nil_chk(self->map_)) putWithId:[field getName] withId:[((id<FreemarkerTemplateObjectWrapper>) nil_chk([self->wrapper_ getOuterIdentity])) wrapWithId:[field getWithId:nil]]];
      }
      @catch (JavaLangIllegalAccessException *e) {
      }
      else
#line 142
      (void) [((id<JavaUtilMap>) nil_chk(self->map_)) putWithId:[field getName] withId:field];
    }
  }
  if ([self->wrapper_ getExposureLevel] < FreemarkerExtBeansBeansWrapper_EXPOSE_PROPERTIES_ONLY) {
    
#line 147
    IOSObjectArray *methods = [self->clazz_ getMethods];
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(methods))->size_; ++i) {
      
#line 150
      JavaLangReflectMethod *method = IOSObjectArray_Get(methods, i);
      jint mod = [((JavaLangReflectMethod *) nil_chk(method)) getModifiers];
      if (JavaLangReflectModifier_isPublicWithInt_(mod) && JavaLangReflectModifier_isStaticWithInt_(mod) &&
#line 153
      [((FreemarkerExtBeansClassIntrospector *) nil_chk([self->wrapper_ getClassIntrospector])) isAllowedToExposeWithJavaLangReflectMethod:method]) {
        
#line 155
        NSString *name = [method getName];
        id obj = [((id<JavaUtilMap>) nil_chk(self->map_)) getWithId:name];
        if ([obj isKindOfClass:[JavaLangReflectMethod class]]) {
          
#line 159
          FreemarkerExtBeansOverloadedMethods *overloadedMethods = new_FreemarkerExtBeansOverloadedMethods_initWithBoolean_([self->wrapper_ is2321Bugfixed]);
          [overloadedMethods addMethodWithJavaLangReflectMethod:(JavaLangReflectMethod *) check_class_cast(obj, [JavaLangReflectMethod class])];
          [overloadedMethods addMethodWithJavaLangReflectMethod:method];
          (void) [self->map_ putWithId:name withId:overloadedMethods];
        }
        else if ([obj isKindOfClass:[FreemarkerExtBeansOverloadedMethods class]]) {
          
#line 166
          FreemarkerExtBeansOverloadedMethods *overloadedMethods = (FreemarkerExtBeansOverloadedMethods *) check_class_cast(obj, [FreemarkerExtBeansOverloadedMethods class]);
          [((FreemarkerExtBeansOverloadedMethods *) nil_chk(overloadedMethods)) addMethodWithJavaLangReflectMethod:method];
        }
        else {
          
#line 171
          if (obj != nil) {
            
#line 173
            if ([((FreemarkerLogLogger *) nil_chk(FreemarkerExtBeansStaticModel_LOG_)) isInfoEnabled]) {
              [FreemarkerExtBeansStaticModel_LOG_ infoWithNSString:JreStrcat("$@$$$@$$", @"Overwriting value [", obj, @"] for  key '",
#line 175
              name, @"' with [", method, @"] in static model for ",
#line 176
              [self->clazz_ getName])];
            }
          }
          (void) [self->map_ putWithId:name withId:method];
        }
      }
    }
    for (id<JavaUtilIterator> entries = [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(self->map_)) entrySet])) iterator]; [((id<JavaUtilIterator>) nil_chk(entries)) hasNext]; ) {
      
#line 185
      id<JavaUtilMap_Entry> entry_ = (id<JavaUtilMap_Entry>) check_protocol_cast([entries next], @protocol(JavaUtilMap_Entry));
      id value = [((id<JavaUtilMap_Entry>) nil_chk(entry_)) getValue];
      if ([value isKindOfClass:[JavaLangReflectMethod class]]) {
        
#line 189
        JavaLangReflectMethod *method = (JavaLangReflectMethod *) check_class_cast(value, [JavaLangReflectMethod class]);
        (void) [entry_ setValueWithId:new_FreemarkerExtBeansSimpleMethodModel_initWithId_withJavaLangReflectMethod_withIOSClassArray_withFreemarkerExtBeansBeansWrapper_(nil, method,
#line 191
        [((JavaLangReflectMethod *) nil_chk(method)) getParameterTypes], self->wrapper_)];
      }
      else if ([value isKindOfClass:[FreemarkerExtBeansOverloadedMethods class]]) {
        
#line 195
        (void) [entry_ setValueWithId:new_FreemarkerExtBeansOverloadedMethodsModel_initWithId_withFreemarkerExtBeansOverloadedMethods_withFreemarkerExtBeansBeansWrapper_(nil, (FreemarkerExtBeansOverloadedMethods *) check_class_cast(value, [FreemarkerExtBeansOverloadedMethods class]), self->wrapper_)];
      }
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerExtBeansStaticModel)
