//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/Expression.java
//


#include "BeanModel.h"
#include "Configuration.h"
#include "Environment.h"
#include "EvalUtil.h"
#include "Expression.h"
#include "IOSClass.h"
#include "InvalidReferenceException.h"
#include "J2ObjC_source.h"
#include "NonBooleanException.h"
#include "NonNumericalException.h"
#include "ParseException.h"
#include "Template.h"
#include "TemplateBooleanModel.h"
#include "TemplateCollectionModel.h"
#include "TemplateDateModel.h"
#include "TemplateException.h"
#include "TemplateHashModel.h"
#include "TemplateModel.h"
#include "TemplateModelException.h"
#include "TemplateModelIterator.h"
#include "TemplateNumberModel.h"
#include "TemplateObject.h"
#include "TemplateScalarModel.h"
#include "TemplateSequenceModel.h"
#include "java/lang/Exception.h"

#line 0 "/Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/Expression.java"

@interface FreemarkerCoreExpression ()

- (jboolean)evalToBooleanWithFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env
                   withFreemarkerTemplateConfiguration:(FreemarkerTemplateConfiguration *)cfg;

- (jboolean)modelToBooleanWithFreemarkerTemplateTemplateModel:(id<FreemarkerTemplateTemplateModel>)model
                                withFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env
                          withFreemarkerTemplateConfiguration:(FreemarkerTemplateConfiguration *)cfg;

@end

__attribute__((unused)) static id<FreemarkerTemplateTemplateModel> FreemarkerCoreExpression_evalWithFreemarkerCoreEnvironment_(FreemarkerCoreExpression *self, FreemarkerCoreEnvironment *env);

__attribute__((unused)) static jboolean FreemarkerCoreExpression_evalToBooleanWithFreemarkerCoreEnvironment_withFreemarkerTemplateConfiguration_(FreemarkerCoreExpression *self, FreemarkerCoreEnvironment *env, FreemarkerTemplateConfiguration *cfg);

__attribute__((unused)) static jboolean FreemarkerCoreExpression_modelToBooleanWithFreemarkerTemplateTemplateModel_withFreemarkerCoreEnvironment_withFreemarkerTemplateConfiguration_(FreemarkerCoreExpression *self, id<FreemarkerTemplateTemplateModel> model, FreemarkerCoreEnvironment *env, FreemarkerTemplateConfiguration *cfg);


#line 39
@implementation FreemarkerCoreExpression


#line 45
- (id<FreemarkerTemplateTemplateModel>)_evalWithFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 47
- (jboolean)isLiteral {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 56
- (void)setLocationWithFreemarkerTemplateTemplate:(FreemarkerTemplateTemplate *)template_
                                          withInt:(jint)beginColumn
                                          withInt:(jint)beginLine
                                          withInt:(jint)endColumn
                                          withInt:(jint)endLine {
  
#line 60
  [super setLocationWithFreemarkerTemplateTemplate:template_ withInt:beginColumn withInt:beginLine withInt:endColumn withInt:endLine];
  if ([self isLiteral]) {
    @try {
      constantValue_ = [self _evalWithFreemarkerCoreEnvironment:nil];
    }
    @catch (
#line 64
    JavaLangException *e) {
    }
  }
}


#line 73
- (id<FreemarkerTemplateTemplateModel>)getAsTemplateModelWithFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env {
  return FreemarkerCoreExpression_evalWithFreemarkerCoreEnvironment_(self, env);
}

- (id<FreemarkerTemplateTemplateModel>)evalWithFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env {
  return FreemarkerCoreExpression_evalWithFreemarkerCoreEnvironment_(self, env);
}

- (NSString *)evalAndCoerceToStringWithFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env {
  return FreemarkerCoreEvalUtil_coerceModelToStringWithFreemarkerTemplateTemplateModel_withFreemarkerCoreExpression_withNSString_withFreemarkerCoreEnvironment_(FreemarkerCoreExpression_evalWithFreemarkerCoreEnvironment_(self, env), self, nil, env);
}


#line 88
- (NSString *)evalAndCoerceToStringWithFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env
                                                    withNSString:(NSString *)seqTip {
  return FreemarkerCoreEvalUtil_coerceModelToStringWithFreemarkerTemplateTemplateModel_withFreemarkerCoreExpression_withNSString_withFreemarkerCoreEnvironment_(FreemarkerCoreExpression_evalWithFreemarkerCoreEnvironment_(self, env), self, seqTip, env);
}


#line 92
+ (NSString *)coerceModelToStringWithFreemarkerTemplateTemplateModel:(id<FreemarkerTemplateTemplateModel>)tm
                                        withFreemarkerCoreExpression:(FreemarkerCoreExpression *)exp
                                       withFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env {
  return FreemarkerCoreExpression_coerceModelToStringWithFreemarkerTemplateTemplateModel_withFreemarkerCoreExpression_withFreemarkerCoreEnvironment_(tm, exp, env);
}


#line 96
- (NSNumber *)evalToNumberWithFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env {
  id<FreemarkerTemplateTemplateModel> model = FreemarkerCoreExpression_evalWithFreemarkerCoreEnvironment_(self, env);
  return [self modelToNumberWithFreemarkerTemplateTemplateModel:model withFreemarkerCoreEnvironment:env];
}

- (NSNumber *)modelToNumberWithFreemarkerTemplateTemplateModel:(id<FreemarkerTemplateTemplateModel>)model
                                 withFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env {
  if ([FreemarkerTemplateTemplateNumberModel_class_() isInstance:model]) {
    return FreemarkerCoreEvalUtil_modelToNumberWithFreemarkerTemplateTemplateNumberModel_withFreemarkerCoreExpression_((id<FreemarkerTemplateTemplateNumberModel>) check_protocol_cast(model, @protocol(FreemarkerTemplateTemplateNumberModel)), self);
  }
  else {
    
#line 105
    @throw new_FreemarkerCoreNonNumericalException_initWithFreemarkerCoreExpression_withFreemarkerTemplateTemplateModel_withFreemarkerCoreEnvironment_(self, model, env);
  }
}


#line 109
- (jboolean)evalToBooleanWithFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env {
  return FreemarkerCoreExpression_evalToBooleanWithFreemarkerCoreEnvironment_withFreemarkerTemplateConfiguration_(self, env, nil);
}

- (jboolean)evalToBooleanWithFreemarkerTemplateConfiguration:(FreemarkerTemplateConfiguration *)cfg {
  return FreemarkerCoreExpression_evalToBooleanWithFreemarkerCoreEnvironment_withFreemarkerTemplateConfiguration_(self, nil, cfg);
}

- (id<FreemarkerTemplateTemplateModel>)evalToNonMissingWithFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env {
  id<FreemarkerTemplateTemplateModel> result = FreemarkerCoreExpression_evalWithFreemarkerCoreEnvironment_(self, env);
  [self assertNonNullWithFreemarkerTemplateTemplateModel:result withFreemarkerCoreEnvironment:env];
  return result;
}

- (jboolean)evalToBooleanWithFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env
                   withFreemarkerTemplateConfiguration:(FreemarkerTemplateConfiguration *)cfg {
  return FreemarkerCoreExpression_evalToBooleanWithFreemarkerCoreEnvironment_withFreemarkerTemplateConfiguration_(self, env, cfg);
}

- (jboolean)modelToBooleanWithFreemarkerTemplateTemplateModel:(id<FreemarkerTemplateTemplateModel>)model
                                withFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env {
  return FreemarkerCoreExpression_modelToBooleanWithFreemarkerTemplateTemplateModel_withFreemarkerCoreEnvironment_withFreemarkerTemplateConfiguration_(self, model, env, nil);
}


#line 132
- (jboolean)modelToBooleanWithFreemarkerTemplateTemplateModel:(id<FreemarkerTemplateTemplateModel>)model
                          withFreemarkerTemplateConfiguration:(FreemarkerTemplateConfiguration *)cfg {
  return FreemarkerCoreExpression_modelToBooleanWithFreemarkerTemplateTemplateModel_withFreemarkerCoreEnvironment_withFreemarkerTemplateConfiguration_(self, model, nil, cfg);
}


#line 136
- (jboolean)modelToBooleanWithFreemarkerTemplateTemplateModel:(id<FreemarkerTemplateTemplateModel>)model
                                withFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env
                          withFreemarkerTemplateConfiguration:(FreemarkerTemplateConfiguration *)cfg {
  return FreemarkerCoreExpression_modelToBooleanWithFreemarkerTemplateTemplateModel_withFreemarkerCoreEnvironment_withFreemarkerTemplateConfiguration_(self, model, env, cfg);
}


#line 146
- (FreemarkerCoreExpression *)deepCloneWithIdentifierReplacedWithNSString:(NSString *)replacedIdentifier
                                             withFreemarkerCoreExpression:(FreemarkerCoreExpression *)replacement
                           withFreemarkerCoreExpression_ReplacemenetState:(FreemarkerCoreExpression_ReplacemenetState *)replacementState {
  
#line 148
  FreemarkerCoreExpression *clone = [self deepCloneWithIdentifierReplaced_innerWithNSString:replacedIdentifier withFreemarkerCoreExpression:replacement withFreemarkerCoreExpression_ReplacemenetState:replacementState];
  if (((FreemarkerCoreExpression *) nil_chk(clone))->beginLine_ == 0) {
    (void) [clone copyLocationFromWithFreemarkerCoreTemplateObject:self];
  }
  return clone;
}


#line 166
- (FreemarkerCoreExpression *)deepCloneWithIdentifierReplaced_innerWithNSString:(NSString *)replacedIdentifier
                                                   withFreemarkerCoreExpression:(FreemarkerCoreExpression *)replacement
                                 withFreemarkerCoreExpression_ReplacemenetState:(FreemarkerCoreExpression_ReplacemenetState *)replacementState {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 169
+ (jboolean)isEmptyWithFreemarkerTemplateTemplateModel:(id<FreemarkerTemplateTemplateModel>)model {
  return FreemarkerCoreExpression_isEmptyWithFreemarkerTemplateTemplateModel_(model);
}


#line 193
- (void)assertNonNullWithFreemarkerTemplateTemplateModel:(id<FreemarkerTemplateTemplateModel>)model
                           withFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env {
  if (model == nil) @throw FreemarkerCoreInvalidReferenceException_getInstanceWithFreemarkerCoreExpression_withFreemarkerCoreEnvironment_(self, env);
}

- (instancetype)init {
  FreemarkerCoreExpression_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "_evalWithFreemarkerCoreEnvironment:", "_eval", "Lfreemarker.template.TemplateModel;", 0x400, "Lfreemarker.template.TemplateException;", NULL },
    { "isLiteral", NULL, "Z", 0x400, NULL, NULL },
    { "setLocationWithFreemarkerTemplateTemplate:withInt:withInt:withInt:withInt:", "setLocation", "V", 0x0, "Lfreemarker.core.ParseException;", NULL },
    { "getAsTemplateModelWithFreemarkerCoreEnvironment:", "getAsTemplateModel", "Lfreemarker.template.TemplateModel;", 0x11, "Lfreemarker.template.TemplateException;", NULL },
    { "evalWithFreemarkerCoreEnvironment:", "eval", "Lfreemarker.template.TemplateModel;", 0x10, "Lfreemarker.template.TemplateException;", NULL },
    { "evalAndCoerceToStringWithFreemarkerCoreEnvironment:", "evalAndCoerceToString", "Ljava.lang.String;", 0x0, "Lfreemarker.template.TemplateException;", NULL },
    { "evalAndCoerceToStringWithFreemarkerCoreEnvironment:withNSString:", "evalAndCoerceToString", "Ljava.lang.String;", 0x0, "Lfreemarker.template.TemplateException;", NULL },
    { "coerceModelToStringWithFreemarkerTemplateTemplateModel:withFreemarkerCoreExpression:withFreemarkerCoreEnvironment:", "coerceModelToString", "Ljava.lang.String;", 0x8, "Lfreemarker.template.TemplateException;", NULL },
    { "evalToNumberWithFreemarkerCoreEnvironment:", "evalToNumber", "Ljava.lang.Number;", 0x0, "Lfreemarker.template.TemplateException;", NULL },
    { "modelToNumberWithFreemarkerTemplateTemplateModel:withFreemarkerCoreEnvironment:", "modelToNumber", "Ljava.lang.Number;", 0x0, "Lfreemarker.template.TemplateException;", NULL },
    { "evalToBooleanWithFreemarkerCoreEnvironment:", "evalToBoolean", "Z", 0x0, "Lfreemarker.template.TemplateException;", NULL },
    { "evalToBooleanWithFreemarkerTemplateConfiguration:", "evalToBoolean", "Z", 0x0, "Lfreemarker.template.TemplateException;", NULL },
    { "evalToNonMissingWithFreemarkerCoreEnvironment:", "evalToNonMissing", "Lfreemarker.template.TemplateModel;", 0x0, "Lfreemarker.template.TemplateException;", NULL },
    { "evalToBooleanWithFreemarkerCoreEnvironment:withFreemarkerTemplateConfiguration:", "evalToBoolean", "Z", 0x2, "Lfreemarker.template.TemplateException;", NULL },
    { "modelToBooleanWithFreemarkerTemplateTemplateModel:withFreemarkerCoreEnvironment:", "modelToBoolean", "Z", 0x0, "Lfreemarker.template.TemplateException;", NULL },
    { "modelToBooleanWithFreemarkerTemplateTemplateModel:withFreemarkerTemplateConfiguration:", "modelToBoolean", "Z", 0x0, "Lfreemarker.template.TemplateException;", NULL },
    { "modelToBooleanWithFreemarkerTemplateTemplateModel:withFreemarkerCoreEnvironment:withFreemarkerTemplateConfiguration:", "modelToBoolean", "Z", 0x2, "Lfreemarker.template.TemplateException;", NULL },
    { "deepCloneWithIdentifierReplacedWithNSString:withFreemarkerCoreExpression:withFreemarkerCoreExpression_ReplacemenetState:", "deepCloneWithIdentifierReplaced", "Lfreemarker.core.Expression;", 0x10, NULL, NULL },
    { "deepCloneWithIdentifierReplaced_innerWithNSString:withFreemarkerCoreExpression:withFreemarkerCoreExpression_ReplacemenetState:", "deepCloneWithIdentifierReplaced_inner", "Lfreemarker.core.Expression;", 0x404, NULL, NULL },
    { "isEmptyWithFreemarkerTemplateTemplateModel:", "isEmpty", "Z", 0x8, "Lfreemarker.template.TemplateModelException;", NULL },
    { "assertNonNullWithFreemarkerTemplateTemplateModel:withFreemarkerCoreEnvironment:", "assertNonNull", "V", 0x0, "Lfreemarker.core.InvalidReferenceException;", NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "constantValue_", NULL, 0x0, "Lfreemarker.template.TemplateModel;", NULL, NULL,  },
  };
  static const char *inner_classes[] = {"Lfreemarker.core.Expression$ReplacemenetState;"};
  static const J2ObjcClassInfo _FreemarkerCoreExpression = { 2, "Expression", "freemarker.core", NULL, 0x401, 22, methods, 1, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_FreemarkerCoreExpression;
}

@end


#line 77
id<FreemarkerTemplateTemplateModel> FreemarkerCoreExpression_evalWithFreemarkerCoreEnvironment_(FreemarkerCoreExpression *self, FreemarkerCoreEnvironment *env) {
  return self->constantValue_ != nil ? self->constantValue_ : [self _evalWithFreemarkerCoreEnvironment:env];
}


#line 92
NSString *FreemarkerCoreExpression_coerceModelToStringWithFreemarkerTemplateTemplateModel_withFreemarkerCoreExpression_withFreemarkerCoreEnvironment_(id<FreemarkerTemplateTemplateModel> tm, FreemarkerCoreExpression *exp, FreemarkerCoreEnvironment *env) {
  FreemarkerCoreExpression_initialize();
  
#line 93
  return FreemarkerCoreEvalUtil_coerceModelToStringWithFreemarkerTemplateTemplateModel_withFreemarkerCoreExpression_withNSString_withFreemarkerCoreEnvironment_(tm, exp, nil, env);
}


#line 123
jboolean FreemarkerCoreExpression_evalToBooleanWithFreemarkerCoreEnvironment_withFreemarkerTemplateConfiguration_(FreemarkerCoreExpression *self, FreemarkerCoreEnvironment *env, FreemarkerTemplateConfiguration *cfg) {
  id<FreemarkerTemplateTemplateModel> model = FreemarkerCoreExpression_evalWithFreemarkerCoreEnvironment_(self, env);
  return FreemarkerCoreExpression_modelToBooleanWithFreemarkerTemplateTemplateModel_withFreemarkerCoreEnvironment_withFreemarkerTemplateConfiguration_(self, model, env, cfg);
}


#line 136
jboolean FreemarkerCoreExpression_modelToBooleanWithFreemarkerTemplateTemplateModel_withFreemarkerCoreEnvironment_withFreemarkerTemplateConfiguration_(FreemarkerCoreExpression *self, id<FreemarkerTemplateTemplateModel> model, FreemarkerCoreEnvironment *env, FreemarkerTemplateConfiguration *cfg) {
  if ([FreemarkerTemplateTemplateBooleanModel_class_() isInstance:model]) {
    return [((id<FreemarkerTemplateTemplateBooleanModel>) nil_chk(((id<FreemarkerTemplateTemplateBooleanModel>) check_protocol_cast(model, @protocol(FreemarkerTemplateTemplateBooleanModel))))) getAsBoolean];
  }
  else
#line 139
  if (env != nil ? [env isClassicCompatible] : [((FreemarkerTemplateConfiguration *) nil_chk(cfg)) isClassicCompatible]) {
    return model != nil && !FreemarkerCoreExpression_isEmptyWithFreemarkerTemplateTemplateModel_(model);
  }
  else {
    
#line 142
    @throw new_FreemarkerCoreNonBooleanException_initWithFreemarkerCoreExpression_withFreemarkerTemplateTemplateModel_withFreemarkerCoreEnvironment_(self, model, env);
  }
}


#line 169
jboolean FreemarkerCoreExpression_isEmptyWithFreemarkerTemplateTemplateModel_(id<FreemarkerTemplateTemplateModel> model) {
  FreemarkerCoreExpression_initialize();
  if ([model isKindOfClass:[FreemarkerExtBeansBeanModel class]]) {
    return [((FreemarkerExtBeansBeanModel *) nil_chk(((FreemarkerExtBeansBeanModel *) check_class_cast(model, [FreemarkerExtBeansBeanModel class])))) isEmpty];
  }
  else
#line 173
  if ([FreemarkerTemplateTemplateSequenceModel_class_() isInstance:model]) {
    return [((id<FreemarkerTemplateTemplateSequenceModel>) nil_chk(((id<FreemarkerTemplateTemplateSequenceModel>) check_protocol_cast(model, @protocol(FreemarkerTemplateTemplateSequenceModel))))) size] == 0;
  }
  else
#line 175
  if ([FreemarkerTemplateTemplateScalarModel_class_() isInstance:model]) {
    NSString *s = [((id<FreemarkerTemplateTemplateScalarModel>) nil_chk(((id<FreemarkerTemplateTemplateScalarModel>) check_protocol_cast(model, @protocol(FreemarkerTemplateTemplateScalarModel))))) getAsString];
    return (s == nil || ((jint) [s length]) == 0);
  }
  else
#line 178
  if (model == nil) {
    return YES;
  }
  else
#line 180
  if ([FreemarkerTemplateTemplateCollectionModel_class_() isInstance:model]) {
    return ![((id<FreemarkerTemplateTemplateModelIterator>) nil_chk([((id<FreemarkerTemplateTemplateCollectionModel>) check_protocol_cast(model, @protocol(FreemarkerTemplateTemplateCollectionModel))) iterator])) hasNext];
  }
  else
#line 182
  if ([FreemarkerTemplateTemplateHashModel_class_() isInstance:model]) {
    return [((id<FreemarkerTemplateTemplateHashModel>) check_protocol_cast(model, @protocol(FreemarkerTemplateTemplateHashModel))) isEmpty];
  }
  else
#line 184
  if ([FreemarkerTemplateTemplateNumberModel_class_() isInstance:model] ||
#line 185
  [FreemarkerTemplateTemplateDateModel_class_() isInstance:model] ||
#line 186
  [FreemarkerTemplateTemplateBooleanModel_class_() isInstance:model]) {
    return NO;
  }
  else {
    
#line 189
    return YES;
  }
}

void FreemarkerCoreExpression_init(FreemarkerCoreExpression *self) {
  (void) FreemarkerCoreTemplateObject_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreExpression)


#line 155
@implementation FreemarkerCoreExpression_ReplacemenetState

- (instancetype)init {
  FreemarkerCoreExpression_ReplacemenetState_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", NULL, NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "replacementAlreadyInUse_", NULL, 0x0, "Z", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerCoreExpression_ReplacemenetState = { 2, "ReplacemenetState", "freemarker.core", "Expression", 0x8, 1, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerCoreExpression_ReplacemenetState;
}

@end

void FreemarkerCoreExpression_ReplacemenetState_init(FreemarkerCoreExpression_ReplacemenetState *self) {
  (void) NSObject_init(self);
}

FreemarkerCoreExpression_ReplacemenetState *new_FreemarkerCoreExpression_ReplacemenetState_init() {
  FreemarkerCoreExpression_ReplacemenetState *self = [FreemarkerCoreExpression_ReplacemenetState alloc];
  FreemarkerCoreExpression_ReplacemenetState_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreExpression_ReplacemenetState)
