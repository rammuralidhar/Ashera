//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/cache/URLTemplateSource.java
//


#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "URLTemplateSource.h"
#include "java/io/File.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/lang/Boolean.h"
#include "java/net/URL.h"
#include "java/net/URLConnection.h"

#line 0 "/Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/cache/URLTemplateSource.java"

@interface FreemarkerCacheURLTemplateSource () {
 @public
  JavaNetURL *url_;
  JavaNetURLConnection *conn_;
  JavaIoInputStream *inputStream_;
  JavaLangBoolean *useCaches_;
}

@end

J2OBJC_FIELD_SETTER(FreemarkerCacheURLTemplateSource, url_, JavaNetURL *)
J2OBJC_FIELD_SETTER(FreemarkerCacheURLTemplateSource, conn_, JavaNetURLConnection *)
J2OBJC_FIELD_SETTER(FreemarkerCacheURLTemplateSource, inputStream_, JavaIoInputStream *)
J2OBJC_FIELD_SETTER(FreemarkerCacheURLTemplateSource, useCaches_, JavaLangBoolean *)


#line 28
@implementation FreemarkerCacheURLTemplateSource


#line 37
- (instancetype)initWithJavaNetURL:(JavaNetURL *)url
               withJavaLangBoolean:(JavaLangBoolean *)useCaches {
  FreemarkerCacheURLTemplateSource_initWithJavaNetURL_withJavaLangBoolean_(self, url, useCaches);
  return self;
}


#line 46
- (jboolean)isEqual:(id)o {
  if ([o isKindOfClass:[FreemarkerCacheURLTemplateSource class]]) {
    return [((JavaNetURL *) nil_chk(url_)) isEqual:((FreemarkerCacheURLTemplateSource *) nil_chk(((FreemarkerCacheURLTemplateSource *) check_class_cast(o, [FreemarkerCacheURLTemplateSource class]))))->url_];
  }
  else {
    
#line 50
    return NO;
  }
}


#line 54
- (NSUInteger)hash {
  return ((jint) [((JavaNetURL *) nil_chk(url_)) hash]);
}

- (NSString *)description {
  return [((JavaNetURL *) nil_chk(url_)) description];
}

- (jlong)lastModified {
  
#line 64
  jlong lastModified = [((JavaNetURLConnection *) nil_chk(conn_)) getLastModified];
  if (lastModified == -1LL && [((NSString *) nil_chk([((JavaNetURL *) nil_chk(url_)) getProtocol])) isEqual:@"file"]) {
    
#line 69
    return [new_JavaIoFile_initWithNSString_([url_ getFile]) lastModified];
  }
  else {
    
#line 71
    return lastModified;
  }
}


#line 75
- (JavaIoInputStream *)getInputStream {
  if (inputStream_ != nil) {
    
#line 79
    @try {
      [inputStream_ close];
    }
    @catch (
#line 81
    JavaIoIOException *e) {
    }
    
#line 84
    self->conn_ = [((JavaNetURL *) nil_chk(url_)) openConnection];
  }
  inputStream_ = [((JavaNetURLConnection *) nil_chk(conn_)) getInputStream];
  return inputStream_;
}


#line 90
- (void)close {
  @try {
    if (inputStream_ != nil) {
      [inputStream_ close];
    }
    else {
      
#line 95
      [((JavaIoInputStream *) nil_chk([((JavaNetURLConnection *) nil_chk(conn_)) getInputStream])) close];
    }
  }
  @finally {
    
#line 98
    inputStream_ = nil;
    conn_ = nil;
  }
}


#line 103
- (JavaLangBoolean *)getUseCaches {
  return useCaches_;
}

- (void)setUseCachesWithBoolean:(jboolean)useCaches {
  if (self->conn_ != nil) {
    [conn_ setUseCachesWithBoolean:useCaches];
    self->useCaches_ = JavaLangBoolean_valueOfWithBoolean_(useCaches);
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaNetURL:withJavaLangBoolean:", "URLTemplateSource", NULL, 0x0, "Ljava.io.IOException;", NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL, NULL },
    { "hash", "hashCode", "I", 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "lastModified", NULL, "J", 0x0, NULL, NULL },
    { "getInputStream", NULL, "Ljava.io.InputStream;", 0x0, "Ljava.io.IOException;", NULL },
    { "close", NULL, "V", 0x0, "Ljava.io.IOException;", NULL },
    { "getUseCaches", NULL, "Ljava.lang.Boolean;", 0x0, NULL, NULL },
    { "setUseCachesWithBoolean:", "setUseCaches", "V", 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "url_", NULL, 0x12, "Ljava.net.URL;", NULL, NULL,  },
    { "conn_", NULL, 0x2, "Ljava.net.URLConnection;", NULL, NULL,  },
    { "inputStream_", NULL, 0x2, "Ljava.io.InputStream;", NULL, NULL,  },
    { "useCaches_", NULL, 0x2, "Ljava.lang.Boolean;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerCacheURLTemplateSource = { 2, "URLTemplateSource", "freemarker.cache", NULL, 0x0, 9, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerCacheURLTemplateSource;
}

@end


#line 37
void FreemarkerCacheURLTemplateSource_initWithJavaNetURL_withJavaLangBoolean_(FreemarkerCacheURLTemplateSource *self, JavaNetURL *url, JavaLangBoolean *useCaches) {
  (void) NSObject_init(self);
  
#line 38
  self->url_ = url;
  self->conn_ = [((JavaNetURL *) nil_chk(url)) openConnection];
  self->useCaches_ = useCaches;
  if (useCaches != nil) {
    [((JavaNetURLConnection *) nil_chk(self->conn_)) setUseCachesWithBoolean:[useCaches booleanValue]];
  }
}


#line 37
FreemarkerCacheURLTemplateSource *new_FreemarkerCacheURLTemplateSource_initWithJavaNetURL_withJavaLangBoolean_(JavaNetURL *url, JavaLangBoolean *useCaches) {
  FreemarkerCacheURLTemplateSource *self = [FreemarkerCacheURLTemplateSource alloc];
  FreemarkerCacheURLTemplateSource_initWithJavaNetURL_withJavaLangBoolean_(self, url, useCaches);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCacheURLTemplateSource)
