//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/template/SimpleCollection.java
//


#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "ObjectWrapper.h"
#include "SimpleCollection.h"
#include "TemplateModel.h"
#include "TemplateModelException.h"
#include "TemplateModelIterator.h"
#include "WrappingTemplateModel.h"
#include "java/util/Collection.h"
#include "java/util/Iterator.h"

#line 0 "/Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/template/SimpleCollection.java"

@interface FreemarkerTemplateSimpleCollection () {
 @public
  jboolean iteratorOwned_;
  id<JavaUtilIterator> iterator_;
  id<JavaUtilCollection> collection_;
}

@end

J2OBJC_FIELD_SETTER(FreemarkerTemplateSimpleCollection, iterator_, id<JavaUtilIterator>)
J2OBJC_FIELD_SETTER(FreemarkerTemplateSimpleCollection, collection_, id<JavaUtilCollection>)

/**
 @brief Wraps an Iterator ; not thread-safe.
 The encapsulated Iterator may be accessible from multiple threads (as multiple SimpleTemplateModelIterator instance can wrap the same Iterator instance), but if the Iterator was marked in the constructor as shared, the first thread which uses the Iterator will monopolize that.
 */
@interface FreemarkerTemplateSimpleCollection_SimpleTemplateModelIterator : NSObject < FreemarkerTemplateTemplateModelIterator > {
 @public
  FreemarkerTemplateSimpleCollection *this$0_;
  id<JavaUtilIterator> iterator_;
  jboolean iteratorOwnedByMe_;
}

- (instancetype)initWithFreemarkerTemplateSimpleCollection:(FreemarkerTemplateSimpleCollection *)outer$
                                      withJavaUtilIterator:(id<JavaUtilIterator>)iterator
                                               withBoolean:(jboolean)iteratorOwnedByMe;

- (id<FreemarkerTemplateTemplateModel>)next;

- (jboolean)hasNext;

- (void)takeIteratorOwnership;

@end

J2OBJC_EMPTY_STATIC_INIT(FreemarkerTemplateSimpleCollection_SimpleTemplateModelIterator)

J2OBJC_FIELD_SETTER(FreemarkerTemplateSimpleCollection_SimpleTemplateModelIterator, this$0_, FreemarkerTemplateSimpleCollection *)
J2OBJC_FIELD_SETTER(FreemarkerTemplateSimpleCollection_SimpleTemplateModelIterator, iterator_, id<JavaUtilIterator>)

__attribute__((unused)) static void FreemarkerTemplateSimpleCollection_SimpleTemplateModelIterator_initWithFreemarkerTemplateSimpleCollection_withJavaUtilIterator_withBoolean_(FreemarkerTemplateSimpleCollection_SimpleTemplateModelIterator *self, FreemarkerTemplateSimpleCollection *outer$, id<JavaUtilIterator> iterator, jboolean iteratorOwnedByMe);

__attribute__((unused)) static FreemarkerTemplateSimpleCollection_SimpleTemplateModelIterator *new_FreemarkerTemplateSimpleCollection_SimpleTemplateModelIterator_initWithFreemarkerTemplateSimpleCollection_withJavaUtilIterator_withBoolean_(FreemarkerTemplateSimpleCollection *outer$, id<JavaUtilIterator> iterator, jboolean iteratorOwnedByMe) NS_RETURNS_RETAINED;

__attribute__((unused)) static void FreemarkerTemplateSimpleCollection_SimpleTemplateModelIterator_takeIteratorOwnership(FreemarkerTemplateSimpleCollection_SimpleTemplateModelIterator *self);

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerTemplateSimpleCollection_SimpleTemplateModelIterator)


#line 38
@implementation FreemarkerTemplateSimpleCollection


#line 48
- (instancetype)initWithJavaUtilIterator:(id<JavaUtilIterator>)iterator {
  FreemarkerTemplateSimpleCollection_initWithJavaUtilIterator_(self, iterator);
  return self;
}


#line 56
- (instancetype)initWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  FreemarkerTemplateSimpleCollection_initWithJavaUtilCollection_(self, collection);
  return self;
}

- (instancetype)initWithJavaUtilIterator:(id<JavaUtilIterator>)iterator
     withFreemarkerTemplateObjectWrapper:(id<FreemarkerTemplateObjectWrapper>)wrapper {
  FreemarkerTemplateSimpleCollection_initWithJavaUtilIterator_withFreemarkerTemplateObjectWrapper_(self, iterator, wrapper);
  return self;
}

- (instancetype)initWithJavaUtilCollection:(id<JavaUtilCollection>)collection
       withFreemarkerTemplateObjectWrapper:(id<FreemarkerTemplateObjectWrapper>)wrapper {
  FreemarkerTemplateSimpleCollection_initWithJavaUtilCollection_withFreemarkerTemplateObjectWrapper_(self, collection, wrapper);
  return self;
}


#line 82
- (id<FreemarkerTemplateTemplateModelIterator>)iterator {
  if (iterator_ != nil) {
    return new_FreemarkerTemplateSimpleCollection_SimpleTemplateModelIterator_initWithFreemarkerTemplateSimpleCollection_withJavaUtilIterator_withBoolean_(self, iterator_, NO);
  }
  else {
    
#line 86
    @synchronized(collection_) {
      return new_FreemarkerTemplateSimpleCollection_SimpleTemplateModelIterator_initWithFreemarkerTemplateSimpleCollection_withJavaUtilIterator_withBoolean_(self, [((id<JavaUtilCollection>) nil_chk(collection_)) iterator], YES);
    }
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaUtilIterator:", "SimpleCollection", NULL, 0x1, NULL, NULL },
    { "initWithJavaUtilCollection:", "SimpleCollection", NULL, 0x1, NULL, NULL },
    { "initWithJavaUtilIterator:withFreemarkerTemplateObjectWrapper:", "SimpleCollection", NULL, 0x1, NULL, NULL },
    { "initWithJavaUtilCollection:withFreemarkerTemplateObjectWrapper:", "SimpleCollection", NULL, 0x1, NULL, NULL },
    { "iterator", NULL, "Lfreemarker.template.TemplateModelIterator;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "iteratorOwned_", NULL, 0x2, "Z", NULL, NULL,  },
    { "iterator_", NULL, 0x12, "Ljava.util.Iterator;", NULL, NULL,  },
    { "collection_", NULL, 0x12, "Ljava.util.Collection;", NULL, NULL,  },
  };
  static const char *inner_classes[] = {"Lfreemarker.template.SimpleCollection$SimpleTemplateModelIterator;"};
  static const J2ObjcClassInfo _FreemarkerTemplateSimpleCollection = { 2, "SimpleCollection", "freemarker.template", NULL, 0x1, 5, methods, 3, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_FreemarkerTemplateSimpleCollection;
}

@end


#line 48
void FreemarkerTemplateSimpleCollection_initWithJavaUtilIterator_(FreemarkerTemplateSimpleCollection *self, id<JavaUtilIterator> iterator) {
  (void) FreemarkerTemplateWrappingTemplateModel_init(self);
  
#line 49
  self->iterator_ = iterator;
  self->collection_ = nil;
}


#line 48
FreemarkerTemplateSimpleCollection *new_FreemarkerTemplateSimpleCollection_initWithJavaUtilIterator_(id<JavaUtilIterator> iterator) {
  FreemarkerTemplateSimpleCollection *self = [FreemarkerTemplateSimpleCollection alloc];
  FreemarkerTemplateSimpleCollection_initWithJavaUtilIterator_(self, iterator);
  return self;
}


#line 56
void FreemarkerTemplateSimpleCollection_initWithJavaUtilCollection_(FreemarkerTemplateSimpleCollection *self, id<JavaUtilCollection> collection) {
  (void) FreemarkerTemplateWrappingTemplateModel_init(self);
  
#line 57
  self->collection_ = collection;
  self->iterator_ = nil;
}


#line 56
FreemarkerTemplateSimpleCollection *new_FreemarkerTemplateSimpleCollection_initWithJavaUtilCollection_(id<JavaUtilCollection> collection) {
  FreemarkerTemplateSimpleCollection *self = [FreemarkerTemplateSimpleCollection alloc];
  FreemarkerTemplateSimpleCollection_initWithJavaUtilCollection_(self, collection);
  return self;
}


#line 61
void FreemarkerTemplateSimpleCollection_initWithJavaUtilIterator_withFreemarkerTemplateObjectWrapper_(FreemarkerTemplateSimpleCollection *self, id<JavaUtilIterator> iterator, id<FreemarkerTemplateObjectWrapper> wrapper) {
  (void) FreemarkerTemplateWrappingTemplateModel_initWithFreemarkerTemplateObjectWrapper_(self, wrapper);
  self->iterator_ = iterator;
  self->collection_ = nil;
}


#line 61
FreemarkerTemplateSimpleCollection *new_FreemarkerTemplateSimpleCollection_initWithJavaUtilIterator_withFreemarkerTemplateObjectWrapper_(id<JavaUtilIterator> iterator, id<FreemarkerTemplateObjectWrapper> wrapper) {
  FreemarkerTemplateSimpleCollection *self = [FreemarkerTemplateSimpleCollection alloc];
  FreemarkerTemplateSimpleCollection_initWithJavaUtilIterator_withFreemarkerTemplateObjectWrapper_(self, iterator, wrapper);
  return self;
}

void FreemarkerTemplateSimpleCollection_initWithJavaUtilCollection_withFreemarkerTemplateObjectWrapper_(FreemarkerTemplateSimpleCollection *self, id<JavaUtilCollection> collection, id<FreemarkerTemplateObjectWrapper> wrapper) {
  (void) FreemarkerTemplateWrappingTemplateModel_initWithFreemarkerTemplateObjectWrapper_(self, wrapper);
  self->collection_ = collection;
  self->iterator_ = nil;
}


#line 67
FreemarkerTemplateSimpleCollection *new_FreemarkerTemplateSimpleCollection_initWithJavaUtilCollection_withFreemarkerTemplateObjectWrapper_(id<JavaUtilCollection> collection, id<FreemarkerTemplateObjectWrapper> wrapper) {
  FreemarkerTemplateSimpleCollection *self = [FreemarkerTemplateSimpleCollection alloc];
  FreemarkerTemplateSimpleCollection_initWithJavaUtilCollection_withFreemarkerTemplateObjectWrapper_(self, collection, wrapper);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerTemplateSimpleCollection)


#line 98
@implementation FreemarkerTemplateSimpleCollection_SimpleTemplateModelIterator


#line 103
- (instancetype)initWithFreemarkerTemplateSimpleCollection:(FreemarkerTemplateSimpleCollection *)outer$
                                      withJavaUtilIterator:(id<JavaUtilIterator>)iterator
                                               withBoolean:(jboolean)iteratorOwnedByMe {
  FreemarkerTemplateSimpleCollection_SimpleTemplateModelIterator_initWithFreemarkerTemplateSimpleCollection_withJavaUtilIterator_withBoolean_(self, outer$, iterator, iteratorOwnedByMe);
  return self;
}


#line 108
- (id<FreemarkerTemplateTemplateModel>)next {
  if (!iteratorOwnedByMe_) {
    FreemarkerTemplateSimpleCollection_SimpleTemplateModelIterator_takeIteratorOwnership(self);
  }
  
#line 113
  if (![((id<JavaUtilIterator>) nil_chk(iterator_)) hasNext]) {
    @throw new_FreemarkerTemplateTemplateModelException_initWithNSString_(@"The collection has no more items.");
  }
  
#line 117
  id value = [iterator_ next];
  return [FreemarkerTemplateTemplateModel_class_() isInstance:value] ? (id<FreemarkerTemplateTemplateModel>) check_protocol_cast(value, @protocol(FreemarkerTemplateTemplateModel)) : [this$0_ wrapWithId:value];
}


#line 121
- (jboolean)hasNext {
  
#line 123
  if (!iteratorOwnedByMe_) {
    FreemarkerTemplateSimpleCollection_SimpleTemplateModelIterator_takeIteratorOwnership(self);
  }
  
#line 127
  return [((id<JavaUtilIterator>) nil_chk(iterator_)) hasNext];
}


#line 130
- (void)takeIteratorOwnership {
  FreemarkerTemplateSimpleCollection_SimpleTemplateModelIterator_takeIteratorOwnership(self);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithFreemarkerTemplateSimpleCollection:withJavaUtilIterator:withBoolean:", "SimpleTemplateModelIterator", NULL, 0x0, NULL, NULL },
    { "next", NULL, "Lfreemarker.template.TemplateModel;", 0x1, "Lfreemarker.template.TemplateModelException;", NULL },
    { "hasNext", NULL, "Z", 0x1, "Lfreemarker.template.TemplateModelException;", NULL },
    { "takeIteratorOwnership", NULL, "V", 0x2, "Lfreemarker.template.TemplateModelException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lfreemarker.template.SimpleCollection;", NULL, NULL,  },
    { "iterator_", NULL, 0x12, "Ljava.util.Iterator;", NULL, NULL,  },
    { "iteratorOwnedByMe_", NULL, 0x2, "Z", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerTemplateSimpleCollection_SimpleTemplateModelIterator = { 2, "SimpleTemplateModelIterator", "freemarker.template", "SimpleCollection", 0x2, 4, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerTemplateSimpleCollection_SimpleTemplateModelIterator;
}

@end


#line 103
void FreemarkerTemplateSimpleCollection_SimpleTemplateModelIterator_initWithFreemarkerTemplateSimpleCollection_withJavaUtilIterator_withBoolean_(FreemarkerTemplateSimpleCollection_SimpleTemplateModelIterator *self, FreemarkerTemplateSimpleCollection *outer$, id<JavaUtilIterator> iterator, jboolean iteratorOwnedByMe) {
  self->this$0_ = outer$;
  (void) NSObject_init(self);
  
#line 104
  self->iterator_ = iterator;
  self->iteratorOwnedByMe_ = iteratorOwnedByMe;
}


#line 103
FreemarkerTemplateSimpleCollection_SimpleTemplateModelIterator *new_FreemarkerTemplateSimpleCollection_SimpleTemplateModelIterator_initWithFreemarkerTemplateSimpleCollection_withJavaUtilIterator_withBoolean_(FreemarkerTemplateSimpleCollection *outer$, id<JavaUtilIterator> iterator, jboolean iteratorOwnedByMe) {
  FreemarkerTemplateSimpleCollection_SimpleTemplateModelIterator *self = [FreemarkerTemplateSimpleCollection_SimpleTemplateModelIterator alloc];
  FreemarkerTemplateSimpleCollection_SimpleTemplateModelIterator_initWithFreemarkerTemplateSimpleCollection_withJavaUtilIterator_withBoolean_(self, outer$, iterator, iteratorOwnedByMe);
  return self;
}


#line 130
void FreemarkerTemplateSimpleCollection_SimpleTemplateModelIterator_takeIteratorOwnership(FreemarkerTemplateSimpleCollection_SimpleTemplateModelIterator *self) {
  @synchronized(self->this$0_) {
    if (self->this$0_->iteratorOwned_) {
      @throw new_FreemarkerTemplateTemplateModelException_initWithNSString_(
#line 134
      @"This collection value wraps a java.util.Iterator, thus it can be listed only once.");
    }
    else {
      
#line 136
      self->this$0_->iteratorOwned_ = YES;
      self->iteratorOwnedByMe_ = YES;
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerTemplateSimpleCollection_SimpleTemplateModelIterator)
