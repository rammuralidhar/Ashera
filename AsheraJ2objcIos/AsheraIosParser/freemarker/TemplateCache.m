//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/cache/TemplateCache.java
//


#include "BugException.h"
#include "CacheStorage.h"
#include "ConcurrentCacheStorage.h"
#include "Configuration.h"
#include "Environment.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "Logger.h"
#include "MalformedTemplateNameException.h"
#include "MultiTemplateLoader.h"
#include "NullArgumentException.h"
#include "StatefulTemplateLoader.h"
#include "StringUtil.h"
#include "Template.h"
#include "TemplateCache.h"
#include "TemplateLoader.h"
#include "TemplateLookupContext.h"
#include "TemplateLookupResult.h"
#include "TemplateLookupStrategy.h"
#include "TemplateNameFormat.h"
#include "URLTemplateSource.h"
#include "UndeclaredThrowableException.h"
#include "Version.h"
#include "_TemplateAPI.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "java/io/Serializable.h"
#include "java/io/StringWriter.h"
#include "java/lang/Boolean.h"
#include "java/lang/CloneNotSupportedException.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Long.h"
#include "java/lang/NoSuchMethodException.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/System.h"
#include "java/lang/Throwable.h"
#include "java/lang/reflect/Method.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "java/util/Locale.h"
#include "java/util/StringTokenizer.h"

@class FreemarkerCacheTemplateCache_CachedTemplate;
@class FreemarkerCacheTemplateCache_TemplateKey;

#line 0 "/Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/cache/TemplateCache.java"

#define FreemarkerCacheTemplateCache_ASTERISK '*'
#define FreemarkerCacheTemplateCache_SLASH '/'

@interface FreemarkerCacheTemplateCache () {
 @public
  /**
   @brief Maybe <code>null</code> .
   */
  id<FreemarkerCacheTemplateLoader> templateLoader_;
  /**
   @brief Here we keep our cached templates
   */
  id<FreemarkerCacheCacheStorage> storage_;
  FreemarkerCacheTemplateLookupStrategy *templateLookupStrategy_;
  FreemarkerCacheTemplateNameFormat *templateNameFormat_;
  jboolean isStorageConcurrent_;
  /**
   @brief Configuration#setTemplateUpdateDelayMilliseconds(long)
   */
  jlong updateDelay_;
  /**
   @brief Configuration#setLocalizedLookup(boolean)
   */
  jboolean localizedLookup_;
  FreemarkerTemplateConfiguration *config_;
}

- (FreemarkerTemplateTemplate *)getTemplateWithFreemarkerCacheTemplateLoader:(id<FreemarkerCacheTemplateLoader>)templateLoader
                                                                withNSString:(NSString *)name
                                                          withJavaUtilLocale:(JavaUtilLocale *)locale
                                                                      withId:(id)customLookupCondition
                                                                withNSString:(NSString *)encoding
                                                                 withBoolean:(jboolean)parseAsFTL;

+ (JavaLangReflectMethod *)getInitCauseMethod;

- (void)throwLoadFailedExceptionWithJavaLangException:(JavaLangException *)e;

- (void)storeNegativeLookupWithFreemarkerCacheTemplateCache_TemplateKey:(FreemarkerCacheTemplateCache_TemplateKey *)tk
                        withFreemarkerCacheTemplateCache_CachedTemplate:(FreemarkerCacheTemplateCache_CachedTemplate *)cachedTemplate
                                                  withJavaLangException:(JavaLangException *)e;

- (void)storeCachedWithFreemarkerCacheTemplateCache_TemplateKey:(FreemarkerCacheTemplateCache_TemplateKey *)tk
                withFreemarkerCacheTemplateCache_CachedTemplate:(FreemarkerCacheTemplateCache_CachedTemplate *)cachedTemplate;

- (FreemarkerTemplateTemplate *)loadTemplateWithFreemarkerCacheTemplateLoader:(id<FreemarkerCacheTemplateLoader>)templateLoader
                                                                       withId:(id)source
                                                                 withNSString:(NSString *)name
                                                                 withNSString:(NSString *)sourceName
                                                           withJavaUtilLocale:(JavaUtilLocale *)locale
                                                                       withId:(id)customLookupCondition
                                                                 withNSString:(NSString *)initialEncoding
                                                                  withBoolean:(jboolean)parseAsFTL;

- (NSString *)buildDebugNameWithNSString:(NSString *)name
                      withJavaUtilLocale:(JavaUtilLocale *)locale
                                  withId:(id)customLookupCondition
                            withNSString:(NSString *)encoding
                             withBoolean:(jboolean)parse;

- (FreemarkerCacheTemplateLookupResult *)lookupTemplateWithNSString:(NSString *)name
                                                 withJavaUtilLocale:(JavaUtilLocale *)locale
                                                             withId:(id)customLookupCondition;

- (FreemarkerCacheTemplateLookupResult *)lookupTemplateWithAcquisitionStrategyWithNSString:(NSString *)path;

- (id)findTemplateSourceWithNSString:(NSString *)path;

/**
 @brief If IcI >= 2.3.21, sets URLTemplateSource#setUseCaches(boolean) to <code>false</code> for sources that come from a TemplateLoader where URLConnection cache usage wasn't set explicitly.
 */
- (id)modifyForConfIcIWithId:(id)templateSource;

- (NSString *)concatPathWithJavaUtilList:(id<JavaUtilList>)path
                                 withInt:(jint)from
                                 withInt:(jint)to;

@end

J2OBJC_FIELD_SETTER(FreemarkerCacheTemplateCache, templateLoader_, id<FreemarkerCacheTemplateLoader>)
J2OBJC_FIELD_SETTER(FreemarkerCacheTemplateCache, storage_, id<FreemarkerCacheCacheStorage>)
J2OBJC_FIELD_SETTER(FreemarkerCacheTemplateCache, templateLookupStrategy_, FreemarkerCacheTemplateLookupStrategy *)
J2OBJC_FIELD_SETTER(FreemarkerCacheTemplateCache, templateNameFormat_, FreemarkerCacheTemplateNameFormat *)
J2OBJC_FIELD_SETTER(FreemarkerCacheTemplateCache, config_, FreemarkerTemplateConfiguration *)

static NSString *FreemarkerCacheTemplateCache_ASTERISKSTR_ = 
#line 64
@"*";
J2OBJC_STATIC_FIELD_GETTER(FreemarkerCacheTemplateCache, ASTERISKSTR_, NSString *)

J2OBJC_STATIC_FIELD_GETTER(FreemarkerCacheTemplateCache, ASTERISK, jchar)

J2OBJC_STATIC_FIELD_GETTER(FreemarkerCacheTemplateCache, SLASH, jchar)

static NSString *FreemarkerCacheTemplateCache_LOCALE_PART_SEPARATOR_ = 
#line 67
@"_";
J2OBJC_STATIC_FIELD_GETTER(FreemarkerCacheTemplateCache, LOCALE_PART_SEPARATOR_, NSString *)

static FreemarkerLogLogger *FreemarkerCacheTemplateCache_LOG_;
J2OBJC_STATIC_FIELD_GETTER(FreemarkerCacheTemplateCache, LOG_, FreemarkerLogLogger *)

static JavaLangReflectMethod *FreemarkerCacheTemplateCache_INIT_CAUSE_;
J2OBJC_STATIC_FIELD_GETTER(FreemarkerCacheTemplateCache, INIT_CAUSE_, JavaLangReflectMethod *)

__attribute__((unused)) static FreemarkerTemplateTemplate *FreemarkerCacheTemplateCache_getTemplateWithFreemarkerCacheTemplateLoader_withNSString_withJavaUtilLocale_withId_withNSString_withBoolean_(FreemarkerCacheTemplateCache *self, id<FreemarkerCacheTemplateLoader> templateLoader, NSString *name, JavaUtilLocale *locale, id customLookupCondition, NSString *encoding, jboolean parseAsFTL);

__attribute__((unused)) static JavaLangReflectMethod *FreemarkerCacheTemplateCache_getInitCauseMethod();

__attribute__((unused)) static void FreemarkerCacheTemplateCache_throwLoadFailedExceptionWithJavaLangException_(FreemarkerCacheTemplateCache *self, JavaLangException *e);

__attribute__((unused)) static void FreemarkerCacheTemplateCache_storeNegativeLookupWithFreemarkerCacheTemplateCache_TemplateKey_withFreemarkerCacheTemplateCache_CachedTemplate_withJavaLangException_(FreemarkerCacheTemplateCache *self, FreemarkerCacheTemplateCache_TemplateKey *tk, FreemarkerCacheTemplateCache_CachedTemplate *cachedTemplate, JavaLangException *e);

__attribute__((unused)) static void FreemarkerCacheTemplateCache_storeCachedWithFreemarkerCacheTemplateCache_TemplateKey_withFreemarkerCacheTemplateCache_CachedTemplate_(FreemarkerCacheTemplateCache *self, FreemarkerCacheTemplateCache_TemplateKey *tk, FreemarkerCacheTemplateCache_CachedTemplate *cachedTemplate);

__attribute__((unused)) static FreemarkerTemplateTemplate *FreemarkerCacheTemplateCache_loadTemplateWithFreemarkerCacheTemplateLoader_withId_withNSString_withNSString_withJavaUtilLocale_withId_withNSString_withBoolean_(FreemarkerCacheTemplateCache *self, id<FreemarkerCacheTemplateLoader> templateLoader, id source, NSString *name, NSString *sourceName, JavaUtilLocale *locale, id customLookupCondition, NSString *initialEncoding, jboolean parseAsFTL);

__attribute__((unused)) static NSString *FreemarkerCacheTemplateCache_buildDebugNameWithNSString_withJavaUtilLocale_withId_withNSString_withBoolean_(FreemarkerCacheTemplateCache *self, NSString *name, JavaUtilLocale *locale, id customLookupCondition, NSString *encoding, jboolean parse);

__attribute__((unused)) static FreemarkerCacheTemplateLookupResult *FreemarkerCacheTemplateCache_lookupTemplateWithNSString_withJavaUtilLocale_withId_(FreemarkerCacheTemplateCache *self, NSString *name, JavaUtilLocale *locale, id customLookupCondition);

__attribute__((unused)) static FreemarkerCacheTemplateLookupResult *FreemarkerCacheTemplateCache_lookupTemplateWithAcquisitionStrategyWithNSString_(FreemarkerCacheTemplateCache *self, NSString *path);

__attribute__((unused)) static id FreemarkerCacheTemplateCache_findTemplateSourceWithNSString_(FreemarkerCacheTemplateCache *self, NSString *path);

__attribute__((unused)) static id FreemarkerCacheTemplateCache_modifyForConfIcIWithId_(FreemarkerCacheTemplateCache *self, id templateSource);

__attribute__((unused)) static NSString *FreemarkerCacheTemplateCache_concatPathWithJavaUtilList_withInt_withInt_(FreemarkerCacheTemplateCache *self, id<JavaUtilList> path, jint from, jint to);

/**
 @brief This class holds a (name, locale) pair and is used as the key in the cached templates map.
 */
@interface FreemarkerCacheTemplateCache_TemplateKey : NSObject {
 @public
  NSString *name_;
  JavaUtilLocale *locale_;
  id customLookupCondition_;
  NSString *encoding_;
  jboolean parse_;
}

- (instancetype)initWithNSString:(NSString *)name
              withJavaUtilLocale:(JavaUtilLocale *)locale
                          withId:(id)customLookupCondition
                    withNSString:(NSString *)encoding
                     withBoolean:(jboolean)parse;

- (jboolean)isEqual:(id)o;

- (jboolean)nullSafeEqualsWithId:(id)o1
                          withId:(id)o2;

- (NSUInteger)hash;

@end

J2OBJC_EMPTY_STATIC_INIT(FreemarkerCacheTemplateCache_TemplateKey)

J2OBJC_FIELD_SETTER(FreemarkerCacheTemplateCache_TemplateKey, name_, NSString *)
J2OBJC_FIELD_SETTER(FreemarkerCacheTemplateCache_TemplateKey, locale_, JavaUtilLocale *)
J2OBJC_FIELD_SETTER(FreemarkerCacheTemplateCache_TemplateKey, customLookupCondition_, id)
J2OBJC_FIELD_SETTER(FreemarkerCacheTemplateCache_TemplateKey, encoding_, NSString *)

__attribute__((unused)) static void FreemarkerCacheTemplateCache_TemplateKey_initWithNSString_withJavaUtilLocale_withId_withNSString_withBoolean_(FreemarkerCacheTemplateCache_TemplateKey *self, NSString *name, JavaUtilLocale *locale, id customLookupCondition, NSString *encoding, jboolean parse);

__attribute__((unused)) static FreemarkerCacheTemplateCache_TemplateKey *new_FreemarkerCacheTemplateCache_TemplateKey_initWithNSString_withJavaUtilLocale_withId_withNSString_withBoolean_(NSString *name, JavaUtilLocale *locale, id customLookupCondition, NSString *encoding, jboolean parse) NS_RETURNS_RETAINED;

__attribute__((unused)) static jboolean FreemarkerCacheTemplateCache_TemplateKey_nullSafeEqualsWithId_withId_(FreemarkerCacheTemplateCache_TemplateKey *self, id o1, id o2);

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerCacheTemplateCache_TemplateKey)

#define FreemarkerCacheTemplateCache_CachedTemplate_serialVersionUID 1LL

/**
 @brief This class holds the cached template and associated information (the source object, and the last-checked and last-modified timestamps).
 It is used as the value in the cached templates map. Note: this class is Serializable to allow custom 3rd party CacheStorage implementations to serialize/replicate them (see tracker issue #1926150); FreeMarker code itself doesn't rely on its serializability.
 */
@interface FreemarkerCacheTemplateCache_CachedTemplate : NSObject < NSCopying, JavaIoSerializable > {
 @public
  id templateOrException_;
  id source_;
  jlong lastChecked_;
  jlong lastModified_;
}

- (FreemarkerCacheTemplateCache_CachedTemplate *)cloneCachedTemplate;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(FreemarkerCacheTemplateCache_CachedTemplate)

J2OBJC_FIELD_SETTER(FreemarkerCacheTemplateCache_CachedTemplate, templateOrException_, id)
J2OBJC_FIELD_SETTER(FreemarkerCacheTemplateCache_CachedTemplate, source_, id)

J2OBJC_STATIC_FIELD_GETTER(FreemarkerCacheTemplateCache_CachedTemplate, serialVersionUID, jlong)

__attribute__((unused)) static void FreemarkerCacheTemplateCache_CachedTemplate_init(FreemarkerCacheTemplateCache_CachedTemplate *self);

__attribute__((unused)) static FreemarkerCacheTemplateCache_CachedTemplate *new_FreemarkerCacheTemplateCache_CachedTemplate_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerCacheTemplateCache_CachedTemplate)

@interface FreemarkerCacheTemplateCache_TemplateCacheTemplateLookupContext : FreemarkerCacheTemplateLookupContext {
 @public
  FreemarkerCacheTemplateCache *this$0_;
}

- (instancetype)initWithFreemarkerCacheTemplateCache:(FreemarkerCacheTemplateCache *)outer$
                                        withNSString:(NSString *)templateName
                                  withJavaUtilLocale:(JavaUtilLocale *)templateLocale
                                              withId:(id)customLookupCondition;

- (FreemarkerCacheTemplateLookupResult *)lookupWithAcquisitionStrategyWithNSString:(NSString *)name;

- (FreemarkerCacheTemplateLookupResult *)lookupWithLocalizedThenAcquisitionStrategyWithNSString:(NSString *)templateName
                                                                             withJavaUtilLocale:(JavaUtilLocale *)templateLocale;

@end

J2OBJC_EMPTY_STATIC_INIT(FreemarkerCacheTemplateCache_TemplateCacheTemplateLookupContext)

J2OBJC_FIELD_SETTER(FreemarkerCacheTemplateCache_TemplateCacheTemplateLookupContext, this$0_, FreemarkerCacheTemplateCache *)

__attribute__((unused)) static void FreemarkerCacheTemplateCache_TemplateCacheTemplateLookupContext_initWithFreemarkerCacheTemplateCache_withNSString_withJavaUtilLocale_withId_(FreemarkerCacheTemplateCache_TemplateCacheTemplateLookupContext *self, FreemarkerCacheTemplateCache *outer$, NSString *templateName, JavaUtilLocale *templateLocale, id customLookupCondition);

__attribute__((unused)) static FreemarkerCacheTemplateCache_TemplateCacheTemplateLookupContext *new_FreemarkerCacheTemplateCache_TemplateCacheTemplateLookupContext_initWithFreemarkerCacheTemplateCache_withNSString_withJavaUtilLocale_withId_(FreemarkerCacheTemplateCache *outer$, NSString *templateName, JavaUtilLocale *templateLocale, id customLookupCondition) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerCacheTemplateCache_TemplateCacheTemplateLookupContext)

@interface FreemarkerCacheTemplateCache_MaybeMissingTemplate () {
 @public
  FreemarkerTemplateTemplate *template__;
  NSString *missingTemplateNormalizedName_;
  NSString *missingTemplateReason_;
  FreemarkerTemplateMalformedTemplateNameException *missingTemplateCauseException_;
}

- (instancetype)initWithFreemarkerTemplateTemplate:(FreemarkerTemplateTemplate *)template_;

- (instancetype)initWithNSString:(NSString *)normalizedName
withFreemarkerTemplateMalformedTemplateNameException:(FreemarkerTemplateMalformedTemplateNameException *)missingTemplateCauseException;

- (instancetype)initWithNSString:(NSString *)normalizedName
                    withNSString:(NSString *)missingTemplateReason;

@end

J2OBJC_FIELD_SETTER(FreemarkerCacheTemplateCache_MaybeMissingTemplate, template__, FreemarkerTemplateTemplate *)
J2OBJC_FIELD_SETTER(FreemarkerCacheTemplateCache_MaybeMissingTemplate, missingTemplateNormalizedName_, NSString *)
J2OBJC_FIELD_SETTER(FreemarkerCacheTemplateCache_MaybeMissingTemplate, missingTemplateReason_, NSString *)
J2OBJC_FIELD_SETTER(FreemarkerCacheTemplateCache_MaybeMissingTemplate, missingTemplateCauseException_, FreemarkerTemplateMalformedTemplateNameException *)

__attribute__((unused)) static void FreemarkerCacheTemplateCache_MaybeMissingTemplate_initWithFreemarkerTemplateTemplate_(FreemarkerCacheTemplateCache_MaybeMissingTemplate *self, FreemarkerTemplateTemplate *template_);

__attribute__((unused)) static FreemarkerCacheTemplateCache_MaybeMissingTemplate *new_FreemarkerCacheTemplateCache_MaybeMissingTemplate_initWithFreemarkerTemplateTemplate_(FreemarkerTemplateTemplate *template_) NS_RETURNS_RETAINED;

__attribute__((unused)) static void FreemarkerCacheTemplateCache_MaybeMissingTemplate_initWithNSString_withFreemarkerTemplateMalformedTemplateNameException_(FreemarkerCacheTemplateCache_MaybeMissingTemplate *self, NSString *normalizedName, FreemarkerTemplateMalformedTemplateNameException *missingTemplateCauseException);

__attribute__((unused)) static FreemarkerCacheTemplateCache_MaybeMissingTemplate *new_FreemarkerCacheTemplateCache_MaybeMissingTemplate_initWithNSString_withFreemarkerTemplateMalformedTemplateNameException_(NSString *normalizedName, FreemarkerTemplateMalformedTemplateNameException *missingTemplateCauseException) NS_RETURNS_RETAINED;

__attribute__((unused)) static void FreemarkerCacheTemplateCache_MaybeMissingTemplate_initWithNSString_withNSString_(FreemarkerCacheTemplateCache_MaybeMissingTemplate *self, NSString *normalizedName, NSString *missingTemplateReason);

__attribute__((unused)) static FreemarkerCacheTemplateCache_MaybeMissingTemplate *new_FreemarkerCacheTemplateCache_MaybeMissingTemplate_initWithNSString_withNSString_(NSString *normalizedName, NSString *missingTemplateReason) NS_RETURNS_RETAINED;

J2OBJC_INITIALIZED_DEFN(FreemarkerCacheTemplateCache)


#line 54
@implementation FreemarkerCacheTemplateCache


#line 94
- (instancetype)init {
  FreemarkerCacheTemplateCache_init(self);
  return self;
}


#line 102
- (instancetype)initWithFreemarkerCacheTemplateLoader:(id<FreemarkerCacheTemplateLoader>)templateLoader {
  FreemarkerCacheTemplateCache_initWithFreemarkerCacheTemplateLoader_(self, templateLoader);
  return self;
}


#line 110
- (instancetype)initWithFreemarkerCacheTemplateLoader:(id<FreemarkerCacheTemplateLoader>)templateLoader
                      withFreemarkerCacheCacheStorage:(id<FreemarkerCacheCacheStorage>)cacheStorage {
  FreemarkerCacheTemplateCache_initWithFreemarkerCacheTemplateLoader_withFreemarkerCacheCacheStorage_(self, templateLoader, cacheStorage);
  return self;
}


#line 121
- (instancetype)initWithFreemarkerCacheTemplateLoader:(id<FreemarkerCacheTemplateLoader>)templateLoader
                  withFreemarkerTemplateConfiguration:(FreemarkerTemplateConfiguration *)config {
  FreemarkerCacheTemplateCache_initWithFreemarkerCacheTemplateLoader_withFreemarkerTemplateConfiguration_(self, templateLoader, config);
  return self;
}


#line 132
- (instancetype)initWithFreemarkerCacheTemplateLoader:(id<FreemarkerCacheTemplateLoader>)templateLoader
                      withFreemarkerCacheCacheStorage:(id<FreemarkerCacheCacheStorage>)cacheStorage
                  withFreemarkerTemplateConfiguration:(FreemarkerTemplateConfiguration *)config {
  FreemarkerCacheTemplateCache_initWithFreemarkerCacheTemplateLoader_withFreemarkerCacheCacheStorage_withFreemarkerTemplateConfiguration_(self, templateLoader, cacheStorage, config);
  return self;
}


#line 152
- (instancetype)initWithFreemarkerCacheTemplateLoader:(id<FreemarkerCacheTemplateLoader>)templateLoader
                      withFreemarkerCacheCacheStorage:(id<FreemarkerCacheCacheStorage>)cacheStorage
            withFreemarkerCacheTemplateLookupStrategy:(FreemarkerCacheTemplateLookupStrategy *)templateLookupStrategy
                withFreemarkerCacheTemplateNameFormat:(FreemarkerCacheTemplateNameFormat *)templateNameFormat
                  withFreemarkerTemplateConfiguration:(FreemarkerTemplateConfiguration *)config {
  FreemarkerCacheTemplateCache_initWithFreemarkerCacheTemplateLoader_withFreemarkerCacheCacheStorage_withFreemarkerCacheTemplateLookupStrategy_withFreemarkerCacheTemplateNameFormat_withFreemarkerTemplateConfiguration_(self, templateLoader, cacheStorage, templateLookupStrategy, templateNameFormat, config);
  return self;
}


#line 178
- (void)setConfigurationWithFreemarkerTemplateConfiguration:(FreemarkerTemplateConfiguration *)config {
  
#line 180
  self->config_ = config;
  [self clear];
}


#line 184
- (id<FreemarkerCacheTemplateLoader>)getTemplateLoader {
  
#line 186
  return templateLoader_;
}


#line 189
- (id<FreemarkerCacheCacheStorage>)getCacheStorage {
  
#line 191
  return storage_;
}


#line 197
- (FreemarkerCacheTemplateLookupStrategy *)getTemplateLookupStrategy {
  return templateLookupStrategy_;
}


#line 204
- (FreemarkerCacheTemplateNameFormat *)getTemplateNameFormat {
  return templateNameFormat_;
}


#line 238
- (FreemarkerCacheTemplateCache_MaybeMissingTemplate *)getTemplateWithNSString:(NSString *)name
                                                            withJavaUtilLocale:(JavaUtilLocale *)locale
                                                                        withId:(id)customLookupCondition
                                                                  withNSString:(NSString *)encoding
                                                                   withBoolean:(jboolean)parseAsFTL {
  
#line 242
  FreemarkerTemplateUtilityNullArgumentException_checkWithNSString_withId_(@"name", name);
  FreemarkerTemplateUtilityNullArgumentException_checkWithNSString_withId_(@"locale", locale);
  FreemarkerTemplateUtilityNullArgumentException_checkWithNSString_withId_(@"encoding", encoding);
  
#line 246
  @try {
    name = [((FreemarkerCacheTemplateNameFormat *) nil_chk(templateNameFormat_)) normalizeAbsoluteNameWithNSString:name];
  }
  @catch (
#line 248
  FreemarkerTemplateMalformedTemplateNameException *e) {
    
#line 250
    if (templateNameFormat_ != FreemarkerCacheTemplateNameFormat_get_DEFAULT_2_3_0_() ||
#line 251
    [((FreemarkerTemplateVersion *) nil_chk([((FreemarkerTemplateConfiguration *) nil_chk(config_)) getIncompatibleImprovements])) intValue] >= FreemarkerTemplate_TemplateAPI_get_VERSION_INT_2_4_0_()) {
      @throw e;
    }
    return new_FreemarkerCacheTemplateCache_MaybeMissingTemplate_initWithNSString_withFreemarkerTemplateMalformedTemplateNameException_(nil, e);
  }
  
#line 257
  if (templateLoader_ == nil) {
    return new_FreemarkerCacheTemplateCache_MaybeMissingTemplate_initWithNSString_withNSString_(name, @"The TemplateLoader was null.");
  }
  
#line 261
  FreemarkerTemplateTemplate *template_ = FreemarkerCacheTemplateCache_getTemplateWithFreemarkerCacheTemplateLoader_withNSString_withJavaUtilLocale_withId_withNSString_withBoolean_(self, templateLoader_, name, locale, customLookupCondition, encoding, parseAsFTL);
  return template_ != nil ? new_FreemarkerCacheTemplateCache_MaybeMissingTemplate_initWithFreemarkerTemplateTemplate_(template_) : new_FreemarkerCacheTemplateCache_MaybeMissingTemplate_initWithNSString_withNSString_(name, nil);
}


#line 275
- (FreemarkerTemplateTemplate *)getTemplateWithNSString:(NSString *)name
                                     withJavaUtilLocale:(JavaUtilLocale *)locale
                                           withNSString:(NSString *)encoding
                                            withBoolean:(jboolean)parseAsFTL {
  
#line 277
  return [((FreemarkerCacheTemplateCache_MaybeMissingTemplate *) nil_chk([self getTemplateWithNSString:name withJavaUtilLocale:locale withId:nil withNSString:encoding withBoolean:parseAsFTL])) getTemplate];
}


#line 285
+ (id<FreemarkerCacheTemplateLoader>)createLegacyDefaultTemplateLoader {
  return FreemarkerCacheTemplateCache_createLegacyDefaultTemplateLoader();
}

- (FreemarkerTemplateTemplate *)getTemplateWithFreemarkerCacheTemplateLoader:(id<FreemarkerCacheTemplateLoader>)templateLoader
                                                                withNSString:(NSString *)name
                                                          withJavaUtilLocale:(JavaUtilLocale *)locale
                                                                      withId:(id)customLookupCondition
                                                                withNSString:(NSString *)encoding
                                                                 withBoolean:(jboolean)parseAsFTL {
  return FreemarkerCacheTemplateCache_getTemplateWithFreemarkerCacheTemplateLoader_withNSString_withJavaUtilLocale_withId_withNSString_withBoolean_(self, templateLoader, name, locale, customLookupCondition, encoding, parseAsFTL);
}


#line 436
+ (JavaLangReflectMethod *)getInitCauseMethod {
  return FreemarkerCacheTemplateCache_getInitCauseMethod();
}


#line 444
- (void)throwLoadFailedExceptionWithJavaLangException:(JavaLangException *)e {
  FreemarkerCacheTemplateCache_throwLoadFailedExceptionWithJavaLangException_(self, e);
}


#line 465
- (void)storeNegativeLookupWithFreemarkerCacheTemplateCache_TemplateKey:(FreemarkerCacheTemplateCache_TemplateKey *)tk
                        withFreemarkerCacheTemplateCache_CachedTemplate:(FreemarkerCacheTemplateCache_CachedTemplate *)cachedTemplate
                                                  withJavaLangException:(JavaLangException *)e {
  FreemarkerCacheTemplateCache_storeNegativeLookupWithFreemarkerCacheTemplateCache_TemplateKey_withFreemarkerCacheTemplateCache_CachedTemplate_withJavaLangException_(self, tk, cachedTemplate, e);
}


#line 473
- (void)storeCachedWithFreemarkerCacheTemplateCache_TemplateKey:(FreemarkerCacheTemplateCache_TemplateKey *)tk
                withFreemarkerCacheTemplateCache_CachedTemplate:(FreemarkerCacheTemplateCache_CachedTemplate *)cachedTemplate {
  FreemarkerCacheTemplateCache_storeCachedWithFreemarkerCacheTemplateCache_TemplateKey_withFreemarkerCacheTemplateCache_CachedTemplate_(self, tk, cachedTemplate);
}


#line 484
- (FreemarkerTemplateTemplate *)loadTemplateWithFreemarkerCacheTemplateLoader:(id<FreemarkerCacheTemplateLoader>)templateLoader
                                                                       withId:(id)source
                                                                 withNSString:(NSString *)name
                                                                 withNSString:(NSString *)sourceName
                                                           withJavaUtilLocale:(JavaUtilLocale *)locale
                                                                       withId:(id)customLookupCondition
                                                                 withNSString:(NSString *)initialEncoding
                                                                  withBoolean:(jboolean)parseAsFTL {
  return FreemarkerCacheTemplateCache_loadTemplateWithFreemarkerCacheTemplateLoader_withId_withNSString_withNSString_withJavaUtilLocale_withId_withNSString_withBoolean_(self, templateLoader, source, name, sourceName, locale, customLookupCondition, initialEncoding, parseAsFTL);
}


#line 547
- (jlong)getDelay {
  
#line 550
  @synchronized(self) {
    return updateDelay_;
  }
}


#line 560
- (void)setDelayWithLong:(jlong)delay {
  
#line 563
  @synchronized(self) {
    self->updateDelay_ = delay;
  }
}


#line 571
- (jboolean)getLocalizedLookup {
  
#line 574
  @synchronized(self) {
    return localizedLookup_;
  }
}


#line 582
- (void)setLocalizedLookupWithBoolean:(jboolean)localizedLookup {
  
#line 585
  @synchronized(self) {
    if (self->localizedLookup_ != localizedLookup) {
      self->localizedLookup_ = localizedLookup;
      [self clear];
    }
  }
}


#line 600
- (void)clear {
  
#line 602
  @synchronized(storage_) {
    [((id<FreemarkerCacheCacheStorage>) nil_chk(storage_)) clear];
    if ([FreemarkerCacheStatefulTemplateLoader_class_() isInstance:templateLoader_]) {
      [((id<FreemarkerCacheStatefulTemplateLoader>) nil_chk(((id<FreemarkerCacheStatefulTemplateLoader>) check_protocol_cast(templateLoader_, @protocol(FreemarkerCacheStatefulTemplateLoader))))) resetState];
    }
  }
}


#line 610
- (void)removeTemplateWithNSString:(NSString *)name
                withJavaUtilLocale:(JavaUtilLocale *)locale
                      withNSString:(NSString *)encoding
                       withBoolean:(jboolean)parse {
  
#line 612
  [self removeTemplateWithNSString:name withJavaUtilLocale:locale withId:nil withNSString:encoding withBoolean:parse];
}


#line 623
- (void)removeTemplateWithNSString:(NSString *)name
                withJavaUtilLocale:(JavaUtilLocale *)locale
                            withId:(id)customLookupCondition
                      withNSString:(NSString *)encoding
                       withBoolean:(jboolean)parse {
  
#line 626
  if (name == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Argument \"name\" can't be null");
  }
  if (locale == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Argument \"locale\" can't be null");
  }
  if (encoding == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Argument \"encoding\" can't be null");
  }
  name = [((FreemarkerCacheTemplateNameFormat *) nil_chk(templateNameFormat_)) normalizeAbsoluteNameWithNSString:name];
  if (name != nil && templateLoader_ != nil) {
    jboolean debug = [((FreemarkerLogLogger *) nil_chk(FreemarkerCacheTemplateCache_LOG_)) isDebugEnabled];
    NSString *debugName = debug ? FreemarkerCacheTemplateCache_buildDebugNameWithNSString_withJavaUtilLocale_withId_withNSString_withBoolean_(self,
#line 639
    name, locale, customLookupCondition, encoding, parse) :
#line 640
    nil;
    FreemarkerCacheTemplateCache_TemplateKey *tk = new_FreemarkerCacheTemplateCache_TemplateKey_initWithNSString_withJavaUtilLocale_withId_withNSString_withBoolean_(name, locale, customLookupCondition, encoding, parse);
    
#line 643
    if (isStorageConcurrent_) {
      [((id<FreemarkerCacheCacheStorage>) nil_chk(storage_)) removeWithId:tk];
    }
    else {
      
#line 646
      @synchronized(storage_) {
        [((id<FreemarkerCacheCacheStorage>) nil_chk(storage_)) removeWithId:tk];
      }
    }
    [FreemarkerCacheTemplateCache_LOG_ debugWithNSString:JreStrcat("$$", debugName, @" was removed from the cache, if it was there")];
  }
}


#line 654
- (NSString *)buildDebugNameWithNSString:(NSString *)name
                      withJavaUtilLocale:(JavaUtilLocale *)locale
                                  withId:(id)customLookupCondition
                            withNSString:(NSString *)encoding
                             withBoolean:(jboolean)parse {
  return FreemarkerCacheTemplateCache_buildDebugNameWithNSString_withJavaUtilLocale_withId_withNSString_withBoolean_(self, name, locale, customLookupCondition, encoding, parse);
}


#line 671
+ (NSString *)getFullTemplatePathWithFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env
                                                  withNSString:(NSString *)baseName
                                                  withNSString:(NSString *)targetName {
  return FreemarkerCacheTemplateCache_getFullTemplatePathWithFreemarkerCoreEnvironment_withNSString_withNSString_(env, baseName, targetName);
}


#line 679
- (FreemarkerCacheTemplateLookupResult *)lookupTemplateWithNSString:(NSString *)name
                                                 withJavaUtilLocale:(JavaUtilLocale *)locale
                                                             withId:(id)customLookupCondition {
  return FreemarkerCacheTemplateCache_lookupTemplateWithNSString_withJavaUtilLocale_withId_(self, name, locale, customLookupCondition);
}


#line 689
- (FreemarkerCacheTemplateLookupResult *)lookupTemplateWithAcquisitionStrategyWithNSString:(NSString *)path {
  return FreemarkerCacheTemplateCache_lookupTemplateWithAcquisitionStrategyWithNSString_(self, path);
}


#line 741
- (id)findTemplateSourceWithNSString:(NSString *)path {
  return FreemarkerCacheTemplateCache_findTemplateSourceWithNSString_(self, path);
}


#line 754
- (id)modifyForConfIcIWithId:(id)templateSource {
  return FreemarkerCacheTemplateCache_modifyForConfIcIWithId_(self, templateSource);
}


#line 772
- (NSString *)concatPathWithJavaUtilList:(id<JavaUtilList>)path
                                 withInt:(jint)from
                                 withInt:(jint)to {
  return FreemarkerCacheTemplateCache_concatPathWithJavaUtilList_withInt_withInt_(self, path, from, to);
}

+ (void)initialize {
  if (self == [FreemarkerCacheTemplateCache class]) {
    FreemarkerCacheTemplateCache_LOG_ = FreemarkerLogLogger_getLoggerWithNSString_(
#line 68
    @"freemarker.cache");
    FreemarkerCacheTemplateCache_INIT_CAUSE_ = FreemarkerCacheTemplateCache_getInitCauseMethod();
    J2OBJC_SET_INITIALIZED(FreemarkerCacheTemplateCache)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "TemplateCache", NULL, 0x1, NULL, NULL },
    { "initWithFreemarkerCacheTemplateLoader:", "TemplateCache", NULL, 0x1, NULL, NULL },
    { "initWithFreemarkerCacheTemplateLoader:withFreemarkerCacheCacheStorage:", "TemplateCache", NULL, 0x1, NULL, NULL },
    { "initWithFreemarkerCacheTemplateLoader:withFreemarkerTemplateConfiguration:", "TemplateCache", NULL, 0x1, NULL, NULL },
    { "initWithFreemarkerCacheTemplateLoader:withFreemarkerCacheCacheStorage:withFreemarkerTemplateConfiguration:", "TemplateCache", NULL, 0x1, NULL, NULL },
    { "initWithFreemarkerCacheTemplateLoader:withFreemarkerCacheCacheStorage:withFreemarkerCacheTemplateLookupStrategy:withFreemarkerCacheTemplateNameFormat:withFreemarkerTemplateConfiguration:", "TemplateCache", NULL, 0x1, NULL, NULL },
    { "setConfigurationWithFreemarkerTemplateConfiguration:", "setConfiguration", "V", 0x1, NULL, NULL },
    { "getTemplateLoader", NULL, "Lfreemarker.cache.TemplateLoader;", 0x1, NULL, NULL },
    { "getCacheStorage", NULL, "Lfreemarker.cache.CacheStorage;", 0x1, NULL, NULL },
    { "getTemplateLookupStrategy", NULL, "Lfreemarker.cache.TemplateLookupStrategy;", 0x1, NULL, NULL },
    { "getTemplateNameFormat", NULL, "Lfreemarker.cache.TemplateNameFormat;", 0x1, NULL, NULL },
    { "getTemplateWithNSString:withJavaUtilLocale:withId:withNSString:withBoolean:", "getTemplate", "Lfreemarker.cache.TemplateCache$MaybeMissingTemplate;", 0x1, "Ljava.io.IOException;", NULL },
    { "getTemplateWithNSString:withJavaUtilLocale:withNSString:withBoolean:", "getTemplate", "Lfreemarker.template.Template;", 0x1, "Ljava.io.IOException;", NULL },
    { "createLegacyDefaultTemplateLoader", NULL, "Lfreemarker.cache.TemplateLoader;", 0xc, NULL, NULL },
    { "getTemplateWithFreemarkerCacheTemplateLoader:withNSString:withJavaUtilLocale:withId:withNSString:withBoolean:", "getTemplate", "Lfreemarker.template.Template;", 0x2, "Ljava.io.IOException;", NULL },
    { "getInitCauseMethod", NULL, "Ljava.lang.reflect.Method;", 0x1a, NULL, NULL },
    { "throwLoadFailedExceptionWithJavaLangException:", "throwLoadFailedException", "V", 0x2, "Ljava.io.IOException;", NULL },
    { "storeNegativeLookupWithFreemarkerCacheTemplateCache_TemplateKey:withFreemarkerCacheTemplateCache_CachedTemplate:withJavaLangException:", "storeNegativeLookup", "V", 0x2, NULL, NULL },
    { "storeCachedWithFreemarkerCacheTemplateCache_TemplateKey:withFreemarkerCacheTemplateCache_CachedTemplate:", "storeCached", "V", 0x2, NULL, NULL },
    { "loadTemplateWithFreemarkerCacheTemplateLoader:withId:withNSString:withNSString:withJavaUtilLocale:withId:withNSString:withBoolean:", "loadTemplate", "Lfreemarker.template.Template;", 0x2, "Ljava.io.IOException;", NULL },
    { "getDelay", NULL, "J", 0x1, NULL, NULL },
    { "setDelayWithLong:", "setDelay", "V", 0x1, NULL, NULL },
    { "getLocalizedLookup", NULL, "Z", 0x1, NULL, NULL },
    { "setLocalizedLookupWithBoolean:", "setLocalizedLookup", "V", 0x1, NULL, NULL },
    { "clear", NULL, "V", 0x1, NULL, NULL },
    { "removeTemplateWithNSString:withJavaUtilLocale:withNSString:withBoolean:", "removeTemplate", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "removeTemplateWithNSString:withJavaUtilLocale:withId:withNSString:withBoolean:", "removeTemplate", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "buildDebugNameWithNSString:withJavaUtilLocale:withId:withNSString:withBoolean:", "buildDebugName", "Ljava.lang.String;", 0x2, NULL, NULL },
    { "getFullTemplatePathWithFreemarkerCoreEnvironment:withNSString:withNSString:", "getFullTemplatePath", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "lookupTemplateWithNSString:withJavaUtilLocale:withId:", "lookupTemplate", "Lfreemarker.cache.TemplateLookupResult;", 0x2, "Ljava.io.IOException;", NULL },
    { "lookupTemplateWithAcquisitionStrategyWithNSString:", "lookupTemplateWithAcquisitionStrategy", "Lfreemarker.cache.TemplateLookupResult;", 0x2, "Ljava.io.IOException;", NULL },
    { "findTemplateSourceWithNSString:", "findTemplateSource", "Ljava.lang.Object;", 0x2, "Ljava.io.IOException;", NULL },
    { "modifyForConfIcIWithId:", "modifyForConfIcI", "Ljava.lang.Object;", 0x2, NULL, NULL },
    { "concatPathWithJavaUtilList:withInt:withInt:", "concatPath", "Ljava.lang.String;", 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "DEFAULT_TEMPLATE_UPDATE_DELAY_MILLIS_", NULL, 0x19, "J", NULL, NULL, .constantValue.asLong = FreemarkerCacheTemplateCache_DEFAULT_TEMPLATE_UPDATE_DELAY_MILLIS },
    { "ASTERISKSTR_", NULL, 0x1a, "Ljava.lang.String;", &FreemarkerCacheTemplateCache_ASTERISKSTR_, NULL,  },
    { "ASTERISK_", NULL, 0x1a, "C", NULL, NULL, .constantValue.asUnichar = FreemarkerCacheTemplateCache_ASTERISK },
    { "SLASH_", NULL, 0x1a, "C", NULL, NULL, .constantValue.asUnichar = FreemarkerCacheTemplateCache_SLASH },
    { "LOCALE_PART_SEPARATOR_", NULL, 0x1a, "Ljava.lang.String;", &FreemarkerCacheTemplateCache_LOCALE_PART_SEPARATOR_, NULL,  },
    { "LOG_", NULL, 0x1a, "Lfreemarker.log.Logger;", &FreemarkerCacheTemplateCache_LOG_, NULL,  },
    { "templateLoader_", NULL, 0x12, "Lfreemarker.cache.TemplateLoader;", NULL, NULL,  },
    { "storage_", NULL, 0x12, "Lfreemarker.cache.CacheStorage;", NULL, NULL,  },
    { "templateLookupStrategy_", NULL, 0x12, "Lfreemarker.cache.TemplateLookupStrategy;", NULL, NULL,  },
    { "templateNameFormat_", NULL, 0x12, "Lfreemarker.cache.TemplateNameFormat;", NULL, NULL,  },
    { "isStorageConcurrent_", NULL, 0x12, "Z", NULL, NULL,  },
    { "updateDelay_", NULL, 0x2, "J", NULL, NULL,  },
    { "localizedLookup_", NULL, 0x2, "Z", NULL, NULL,  },
    { "config_", NULL, 0x2, "Lfreemarker.template.Configuration;", NULL, NULL,  },
    { "INIT_CAUSE_", NULL, 0x1a, "Ljava.lang.reflect.Method;", &FreemarkerCacheTemplateCache_INIT_CAUSE_, NULL,  },
  };
  static const char *inner_classes[] = {"Lfreemarker.cache.TemplateCache$TemplateKey;", "Lfreemarker.cache.TemplateCache$CachedTemplate;", "Lfreemarker.cache.TemplateCache$TemplateCacheTemplateLookupContext;", "Lfreemarker.cache.TemplateCache$MaybeMissingTemplate;"};
  static const J2ObjcClassInfo _FreemarkerCacheTemplateCache = { 2, "TemplateCache", "freemarker.cache", NULL, 0x1, 34, methods, 15, fields, 0, NULL, 4, inner_classes, NULL, NULL };
  return &_FreemarkerCacheTemplateCache;
}

@end


#line 94
void FreemarkerCacheTemplateCache_init(FreemarkerCacheTemplateCache *self) {
  (void) FreemarkerCacheTemplateCache_initWithFreemarkerCacheTemplateLoader_(self, FreemarkerTemplate_TemplateAPI_createDefaultTemplateLoaderWithFreemarkerTemplateVersion_(FreemarkerTemplateConfiguration_get_VERSION_2_3_0_()));
}


#line 94
FreemarkerCacheTemplateCache *new_FreemarkerCacheTemplateCache_init() {
  FreemarkerCacheTemplateCache *self = [FreemarkerCacheTemplateCache alloc];
  FreemarkerCacheTemplateCache_init(self);
  return self;
}


#line 102
void FreemarkerCacheTemplateCache_initWithFreemarkerCacheTemplateLoader_(FreemarkerCacheTemplateCache *self, id<FreemarkerCacheTemplateLoader> templateLoader) {
  (void) FreemarkerCacheTemplateCache_initWithFreemarkerCacheTemplateLoader_withFreemarkerTemplateConfiguration_(self,
#line 104
  templateLoader, nil);
}


#line 102
FreemarkerCacheTemplateCache *new_FreemarkerCacheTemplateCache_initWithFreemarkerCacheTemplateLoader_(id<FreemarkerCacheTemplateLoader> templateLoader) {
  FreemarkerCacheTemplateCache *self = [FreemarkerCacheTemplateCache alloc];
  FreemarkerCacheTemplateCache_initWithFreemarkerCacheTemplateLoader_(self, templateLoader);
  return self;
}


#line 110
void FreemarkerCacheTemplateCache_initWithFreemarkerCacheTemplateLoader_withFreemarkerCacheCacheStorage_(FreemarkerCacheTemplateCache *self, id<FreemarkerCacheTemplateLoader> templateLoader, id<FreemarkerCacheCacheStorage> cacheStorage) {
  (void) FreemarkerCacheTemplateCache_initWithFreemarkerCacheTemplateLoader_withFreemarkerCacheCacheStorage_withFreemarkerTemplateConfiguration_(self,
#line 112
  templateLoader, cacheStorage, nil);
}


#line 110
FreemarkerCacheTemplateCache *new_FreemarkerCacheTemplateCache_initWithFreemarkerCacheTemplateLoader_withFreemarkerCacheCacheStorage_(id<FreemarkerCacheTemplateLoader> templateLoader, id<FreemarkerCacheCacheStorage> cacheStorage) {
  FreemarkerCacheTemplateCache *self = [FreemarkerCacheTemplateCache alloc];
  FreemarkerCacheTemplateCache_initWithFreemarkerCacheTemplateLoader_withFreemarkerCacheCacheStorage_(self, templateLoader, cacheStorage);
  return self;
}


#line 121
void FreemarkerCacheTemplateCache_initWithFreemarkerCacheTemplateLoader_withFreemarkerTemplateConfiguration_(FreemarkerCacheTemplateCache *self, id<FreemarkerCacheTemplateLoader> templateLoader, FreemarkerTemplateConfiguration *config) {
  (void) FreemarkerCacheTemplateCache_initWithFreemarkerCacheTemplateLoader_withFreemarkerCacheCacheStorage_withFreemarkerTemplateConfiguration_(self, templateLoader, FreemarkerTemplate_TemplateAPI_createDefaultCacheStorageWithFreemarkerTemplateVersion_(FreemarkerTemplateConfiguration_get_VERSION_2_3_0_()), config);
}


#line 121
FreemarkerCacheTemplateCache *new_FreemarkerCacheTemplateCache_initWithFreemarkerCacheTemplateLoader_withFreemarkerTemplateConfiguration_(id<FreemarkerCacheTemplateLoader> templateLoader, FreemarkerTemplateConfiguration *config) {
  FreemarkerCacheTemplateCache *self = [FreemarkerCacheTemplateCache alloc];
  FreemarkerCacheTemplateCache_initWithFreemarkerCacheTemplateLoader_withFreemarkerTemplateConfiguration_(self, templateLoader, config);
  return self;
}


#line 132
void FreemarkerCacheTemplateCache_initWithFreemarkerCacheTemplateLoader_withFreemarkerCacheCacheStorage_withFreemarkerTemplateConfiguration_(FreemarkerCacheTemplateCache *self, id<FreemarkerCacheTemplateLoader> templateLoader, id<FreemarkerCacheCacheStorage> cacheStorage, FreemarkerTemplateConfiguration *config) {
  (void) FreemarkerCacheTemplateCache_initWithFreemarkerCacheTemplateLoader_withFreemarkerCacheCacheStorage_withFreemarkerCacheTemplateLookupStrategy_withFreemarkerCacheTemplateNameFormat_withFreemarkerTemplateConfiguration_(self, templateLoader, cacheStorage, FreemarkerTemplate_TemplateAPI_getDefaultTemplateLookupStrategyWithFreemarkerTemplateVersion_(FreemarkerTemplateConfiguration_get_VERSION_2_3_0_()), FreemarkerTemplate_TemplateAPI_getDefaultTemplateNameFormatWithFreemarkerTemplateVersion_(FreemarkerTemplateConfiguration_get_VERSION_2_3_0_()),
#line 136
  config);
}


#line 132
FreemarkerCacheTemplateCache *new_FreemarkerCacheTemplateCache_initWithFreemarkerCacheTemplateLoader_withFreemarkerCacheCacheStorage_withFreemarkerTemplateConfiguration_(id<FreemarkerCacheTemplateLoader> templateLoader, id<FreemarkerCacheCacheStorage> cacheStorage, FreemarkerTemplateConfiguration *config) {
  FreemarkerCacheTemplateCache *self = [FreemarkerCacheTemplateCache alloc];
  FreemarkerCacheTemplateCache_initWithFreemarkerCacheTemplateLoader_withFreemarkerCacheCacheStorage_withFreemarkerTemplateConfiguration_(self, templateLoader, cacheStorage, config);
  return self;
}


#line 152
void FreemarkerCacheTemplateCache_initWithFreemarkerCacheTemplateLoader_withFreemarkerCacheCacheStorage_withFreemarkerCacheTemplateLookupStrategy_withFreemarkerCacheTemplateNameFormat_withFreemarkerTemplateConfiguration_(FreemarkerCacheTemplateCache *self, id<FreemarkerCacheTemplateLoader> templateLoader, id<FreemarkerCacheCacheStorage> cacheStorage, FreemarkerCacheTemplateLookupStrategy *templateLookupStrategy, FreemarkerCacheTemplateNameFormat *templateNameFormat, FreemarkerTemplateConfiguration *config) {
  (void) NSObject_init(self);
  self->updateDelay_ = FreemarkerCacheTemplateCache_DEFAULT_TEMPLATE_UPDATE_DELAY_MILLIS;
  self->localizedLookup_ =
#line 82
  YES;
  
#line 155
  self->templateLoader_ = templateLoader;
  
#line 157
  FreemarkerTemplateUtilityNullArgumentException_checkWithNSString_withId_(@"cacheStorage", cacheStorage);
  self->storage_ = cacheStorage;
  self->isStorageConcurrent_ = ([FreemarkerCacheConcurrentCacheStorage_class_() isInstance:cacheStorage] &&
#line 160
  [((id<FreemarkerCacheConcurrentCacheStorage>) nil_chk(((id<FreemarkerCacheConcurrentCacheStorage>) check_protocol_cast(cacheStorage, @protocol(FreemarkerCacheConcurrentCacheStorage))))) isConcurrent]);
  
#line 162
  FreemarkerTemplateUtilityNullArgumentException_checkWithNSString_withId_(@"templateLookupStrategy", templateLookupStrategy);
  self->templateLookupStrategy_ = templateLookupStrategy;
  
#line 165
  FreemarkerTemplateUtilityNullArgumentException_checkWithNSString_withId_(@"templateNameFormat", templateNameFormat);
  self->templateNameFormat_ = templateNameFormat;
  
#line 168
  self->config_ = config;
}


#line 152
FreemarkerCacheTemplateCache *new_FreemarkerCacheTemplateCache_initWithFreemarkerCacheTemplateLoader_withFreemarkerCacheCacheStorage_withFreemarkerCacheTemplateLookupStrategy_withFreemarkerCacheTemplateNameFormat_withFreemarkerTemplateConfiguration_(id<FreemarkerCacheTemplateLoader> templateLoader, id<FreemarkerCacheCacheStorage> cacheStorage, FreemarkerCacheTemplateLookupStrategy *templateLookupStrategy, FreemarkerCacheTemplateNameFormat *templateNameFormat, FreemarkerTemplateConfiguration *config) {
  FreemarkerCacheTemplateCache *self = [FreemarkerCacheTemplateCache alloc];
  FreemarkerCacheTemplateCache_initWithFreemarkerCacheTemplateLoader_withFreemarkerCacheCacheStorage_withFreemarkerCacheTemplateLookupStrategy_withFreemarkerCacheTemplateNameFormat_withFreemarkerTemplateConfiguration_(self, templateLoader, cacheStorage, templateLookupStrategy, templateNameFormat, config);
  return self;
}


#line 285
id<FreemarkerCacheTemplateLoader> FreemarkerCacheTemplateCache_createLegacyDefaultTemplateLoader() {
  FreemarkerCacheTemplateCache_initialize();
  
#line 286
  return FreemarkerTemplate_TemplateAPI_createDefaultTemplateLoaderWithFreemarkerTemplateVersion_(FreemarkerTemplateConfiguration_get_VERSION_2_3_0_());
}


#line 289
FreemarkerTemplateTemplate *FreemarkerCacheTemplateCache_getTemplateWithFreemarkerCacheTemplateLoader_withNSString_withJavaUtilLocale_withId_withNSString_withBoolean_(FreemarkerCacheTemplateCache *self, id<FreemarkerCacheTemplateLoader> templateLoader, NSString *name, JavaUtilLocale *locale, id customLookupCondition, NSString *encoding, jboolean parseAsFTL) {
  
#line 294
  jboolean debug = [((FreemarkerLogLogger *) nil_chk(FreemarkerCacheTemplateCache_LOG_)) isDebugEnabled];
  NSString *debugName = debug ? FreemarkerCacheTemplateCache_buildDebugNameWithNSString_withJavaUtilLocale_withId_withNSString_withBoolean_(self,
#line 296
  name, locale, customLookupCondition, encoding, parseAsFTL) :
#line 297
  nil;
  FreemarkerCacheTemplateCache_TemplateKey *tk = new_FreemarkerCacheTemplateCache_TemplateKey_initWithNSString_withJavaUtilLocale_withId_withNSString_withBoolean_(name, locale, customLookupCondition, encoding, parseAsFTL);
  
#line 300
  FreemarkerCacheTemplateCache_CachedTemplate *cachedTemplate;
  if (self->isStorageConcurrent_) {
    cachedTemplate = (FreemarkerCacheTemplateCache_CachedTemplate *) check_class_cast([((id<FreemarkerCacheCacheStorage>) nil_chk(self->storage_)) getWithId:tk], [FreemarkerCacheTemplateCache_CachedTemplate class]);
  }
  else {
    
#line 304
    @synchronized(self->storage_) {
      cachedTemplate = (FreemarkerCacheTemplateCache_CachedTemplate *) check_class_cast([((id<FreemarkerCacheCacheStorage>) nil_chk(self->storage_)) getWithId:tk], [FreemarkerCacheTemplateCache_CachedTemplate class]);
    }
  }
  
#line 309
  jlong now = JavaLangSystem_currentTimeMillis();
  
#line 311
  jlong lastModified = -1LL;
  jboolean rethrown = NO;
  FreemarkerCacheTemplateLookupResult *newLookupResult = nil;
  @try {
    if (cachedTemplate != nil) {
      
#line 317
      if (now - cachedTemplate->lastChecked_ < self->updateDelay_) {
        if (debug) {
          [FreemarkerCacheTemplateCache_LOG_ debugWithNSString:JreStrcat("$$", debugName, @" cached copy not yet stale; using cached.")];
        }
        
#line 322
        id t = cachedTemplate->templateOrException_;
        if ([t isKindOfClass:[FreemarkerTemplateTemplate class]] || t == nil) {
          return (FreemarkerTemplateTemplate *) check_class_cast(t, [FreemarkerTemplateTemplate class]);
        }
        else if ([t isKindOfClass:[JavaLangRuntimeException class]]) {
          FreemarkerCacheTemplateCache_throwLoadFailedExceptionWithJavaLangException_(self, (JavaLangRuntimeException *) check_class_cast(t, [JavaLangRuntimeException class]));
        }
        else if ([t isKindOfClass:[JavaIoIOException class]]) {
          rethrown = YES;
          FreemarkerCacheTemplateCache_throwLoadFailedExceptionWithJavaLangException_(self, (JavaIoIOException *) check_class_cast(t, [JavaIoIOException class]));
        }
        @throw new_FreemarkerCoreBugException_initWithNSString_(JreStrcat("$$", @"t is ", [[nil_chk(t) getClass] getName]));
      }
      
#line 338
      cachedTemplate = [cachedTemplate cloneCachedTemplate];
      
#line 340
      ((FreemarkerCacheTemplateCache_CachedTemplate *) nil_chk(cachedTemplate))->lastChecked_ = now;
      
#line 343
      newLookupResult = FreemarkerCacheTemplateCache_lookupTemplateWithNSString_withJavaUtilLocale_withId_(self, name, locale, customLookupCondition);
      
#line 346
      if (![((FreemarkerCacheTemplateLookupResult *) nil_chk(newLookupResult)) isPositive]) {
        if (debug) {
          [FreemarkerCacheTemplateCache_LOG_ debugWithNSString:JreStrcat("$$", debugName, @" no source found.")];
        }
        FreemarkerCacheTemplateCache_storeNegativeLookupWithFreemarkerCacheTemplateCache_TemplateKey_withFreemarkerCacheTemplateCache_CachedTemplate_withJavaLangException_(self, tk, cachedTemplate, nil);
        return nil;
      }
      
#line 356
      id newLookupResultSource = [newLookupResult getTemplateSource];
      lastModified = [((id<FreemarkerCacheTemplateLoader>) nil_chk(templateLoader)) getLastModifiedWithId:newLookupResultSource];
      jboolean lastModifiedNotChanged = lastModified == cachedTemplate->lastModified_;
      jboolean sourceEquals = [nil_chk(newLookupResultSource) isEqual:cachedTemplate->source_];
      if (lastModifiedNotChanged && sourceEquals) {
        if (debug) {
          [FreemarkerCacheTemplateCache_LOG_ debugWithNSString:JreStrcat("$$@$", debugName, @": using cached since ", newLookupResultSource, @" hasn't changed.")];
        }
        FreemarkerCacheTemplateCache_storeCachedWithFreemarkerCacheTemplateCache_TemplateKey_withFreemarkerCacheTemplateCache_CachedTemplate_(self, tk, cachedTemplate);
        return (FreemarkerTemplateTemplate *) check_class_cast(cachedTemplate->templateOrException_, [FreemarkerTemplateTemplate class]);
      }
      else
#line 366
      if (debug) {
        if (!sourceEquals) {
          [FreemarkerCacheTemplateCache_LOG_ debugWithNSString:JreStrcat("$Z$$$$", @"Updating source because: sourceEquals=",
#line 369
          sourceEquals, @", newlyFoundSource=", FreemarkerTemplateUtilityStringUtil_jQuoteNoXSSWithId_(
#line 370
          newLookupResultSource), @", cached.source=", FreemarkerTemplateUtilityStringUtil_jQuoteNoXSSWithId_(
#line 371
          cachedTemplate->source_))];
        }
        else
#line 372
        if (!lastModifiedNotChanged) {
          [FreemarkerCacheTemplateCache_LOG_ debugWithNSString:JreStrcat("$Z$J$J", @"Updating source because: lastModifiedNotChanged=",
#line 374
          lastModifiedNotChanged, @", cached.lastModified=",
#line 375
          cachedTemplate->lastModified_, @" != source.lastModified=",
#line 376
          lastModified)];
        }
      }
    }
    else {
      
#line 380
      if (debug) {
        [FreemarkerCacheTemplateCache_LOG_ debugWithNSString:JreStrcat("$$$", @"Couldn't find template in cache for ", debugName, @"; will try to load it.")];
      }
      
#line 387
      cachedTemplate = new_FreemarkerCacheTemplateCache_CachedTemplate_init();
      cachedTemplate->lastChecked_ = now;
      
#line 390
      newLookupResult = FreemarkerCacheTemplateCache_lookupTemplateWithNSString_withJavaUtilLocale_withId_(self, name, locale, customLookupCondition);
      
#line 392
      if (![((FreemarkerCacheTemplateLookupResult *) nil_chk(newLookupResult)) isPositive]) {
        FreemarkerCacheTemplateCache_storeNegativeLookupWithFreemarkerCacheTemplateCache_TemplateKey_withFreemarkerCacheTemplateCache_CachedTemplate_withJavaLangException_(self, tk, cachedTemplate, nil);
        return nil;
      }
      
#line 397
      cachedTemplate->lastModified_ = lastModified = JavaLangLong_MIN_VALUE;
    }
    
#line 400
    id source = [((FreemarkerCacheTemplateLookupResult *) nil_chk(newLookupResult)) getTemplateSource];
    ((FreemarkerCacheTemplateCache_CachedTemplate *) nil_chk(cachedTemplate))->source_ = source;
    
#line 404
    if (debug) {
      [FreemarkerCacheTemplateCache_LOG_ debugWithNSString:JreStrcat("$$$$", @"Loading template for ", debugName, @" from ", FreemarkerTemplateUtilityStringUtil_jQuoteNoXSSWithId_(source))];
    }
    
#line 408
    lastModified = lastModified == JavaLangLong_MIN_VALUE ? [((id<FreemarkerCacheTemplateLoader>) nil_chk(templateLoader)) getLastModifiedWithId:source] : lastModified;
    FreemarkerTemplateTemplate *template_ = FreemarkerCacheTemplateCache_loadTemplateWithFreemarkerCacheTemplateLoader_withId_withNSString_withNSString_withJavaUtilLocale_withId_withNSString_withBoolean_(self,
#line 410
    templateLoader, source,
#line 411
    name, [newLookupResult getTemplateSourceName], locale, customLookupCondition,
#line 412
    encoding, parseAsFTL);
    cachedTemplate->templateOrException_ = template_;
    cachedTemplate->lastModified_ = lastModified;
    FreemarkerCacheTemplateCache_storeCachedWithFreemarkerCacheTemplateCache_TemplateKey_withFreemarkerCacheTemplateCache_CachedTemplate_(self, tk, cachedTemplate);
    return template_;
  }
  @catch (
#line 417
  JavaLangRuntimeException *e) {
    if (cachedTemplate != nil) {
      FreemarkerCacheTemplateCache_storeNegativeLookupWithFreemarkerCacheTemplateCache_TemplateKey_withFreemarkerCacheTemplateCache_CachedTemplate_withJavaLangException_(self, tk, cachedTemplate, e);
    }
    @throw e;
  }
  @catch (
#line 422
  JavaIoIOException *e) {
    if (!rethrown) {
      FreemarkerCacheTemplateCache_storeNegativeLookupWithFreemarkerCacheTemplateCache_TemplateKey_withFreemarkerCacheTemplateCache_CachedTemplate_withJavaLangException_(self, tk, cachedTemplate, e);
    }
    @throw e;
  }
  @finally {
    
#line 428
    if (newLookupResult != nil && [newLookupResult isPositive]) {
      [((id<FreemarkerCacheTemplateLoader>) nil_chk(templateLoader)) closeTemplateSourceWithId:[newLookupResult getTemplateSource]];
    }
  }
}


#line 436
JavaLangReflectMethod *FreemarkerCacheTemplateCache_getInitCauseMethod() {
  FreemarkerCacheTemplateCache_initialize();
  
#line 437
  @try {
    return [JavaLangThrowable_class_() getMethod:@"initCause" parameterTypes:[IOSObjectArray newArrayWithObjects:(id[]){ JavaLangThrowable_class_() } count:1 type:IOSClass_class_()]];
  }
  @catch (
#line 439
  JavaLangNoSuchMethodException *e) {
    return nil;
  }
}


#line 444
void FreemarkerCacheTemplateCache_throwLoadFailedExceptionWithJavaLangException_(FreemarkerCacheTemplateCache *self, JavaLangException *e) {
  JavaIoIOException *ioe;
  if (FreemarkerCacheTemplateCache_INIT_CAUSE_ != nil) {
    ioe = new_JavaIoIOException_initWithNSString_(@"There was an error loading the template on an earlier attempt; it's attached as a cause");
    
#line 449
    @try {
      (void) [FreemarkerCacheTemplateCache_INIT_CAUSE_ invokeWithId:ioe withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ e } count:1 type:NSObject_class_()]];
    }
    @catch (
#line 451
    JavaLangRuntimeException *ex) {
      @throw ex;
    }
    @catch (
#line 453
    JavaLangException *ex) {
      @throw new_FreemarkerTemplateUtilityUndeclaredThrowableException_initWithJavaLangThrowable_(ex);
    }
  }
  else {
    ioe = new_JavaIoIOException_initWithNSString_(JreStrcat("$$$$", @"There was an error loading the template on an earlier attempt: ",
#line 459
    [[((JavaLangException *) nil_chk(e)) getClass] getName], @": ",
#line 460
    [e getMessage]));
  }
  @throw ioe;
}


#line 465
void FreemarkerCacheTemplateCache_storeNegativeLookupWithFreemarkerCacheTemplateCache_TemplateKey_withFreemarkerCacheTemplateCache_CachedTemplate_withJavaLangException_(FreemarkerCacheTemplateCache *self, FreemarkerCacheTemplateCache_TemplateKey *tk, FreemarkerCacheTemplateCache_CachedTemplate *cachedTemplate, JavaLangException *e) {
  
#line 467
  ((FreemarkerCacheTemplateCache_CachedTemplate *) nil_chk(cachedTemplate))->templateOrException_ = e;
  cachedTemplate->source_ = nil;
  cachedTemplate->lastModified_ = 0LL;
  FreemarkerCacheTemplateCache_storeCachedWithFreemarkerCacheTemplateCache_TemplateKey_withFreemarkerCacheTemplateCache_CachedTemplate_(self, tk, cachedTemplate);
}


#line 473
void FreemarkerCacheTemplateCache_storeCachedWithFreemarkerCacheTemplateCache_TemplateKey_withFreemarkerCacheTemplateCache_CachedTemplate_(FreemarkerCacheTemplateCache *self, FreemarkerCacheTemplateCache_TemplateKey *tk, FreemarkerCacheTemplateCache_CachedTemplate *cachedTemplate) {
  if (self->isStorageConcurrent_) {
    [((id<FreemarkerCacheCacheStorage>) nil_chk(self->storage_)) putWithId:tk withId:cachedTemplate];
  }
  else {
    @synchronized(self->storage_) {
      [((id<FreemarkerCacheCacheStorage>) nil_chk(self->storage_)) putWithId:tk withId:cachedTemplate];
    }
  }
}

FreemarkerTemplateTemplate *FreemarkerCacheTemplateCache_loadTemplateWithFreemarkerCacheTemplateLoader_withId_withNSString_withNSString_withJavaUtilLocale_withId_withNSString_withBoolean_(FreemarkerCacheTemplateCache *self, id<FreemarkerCacheTemplateLoader> templateLoader, id source, NSString *name, NSString *sourceName, JavaUtilLocale *locale, id customLookupCondition, NSString *initialEncoding, jboolean parseAsFTL) {
  
#line 488
  FreemarkerTemplateTemplate *template_;
  NSString *actualEncoding;
  {
    if (parseAsFTL) {
      @try {
        JavaIoReader *reader = [((id<FreemarkerCacheTemplateLoader>) nil_chk(templateLoader)) getReaderWithId:source withNSString:initialEncoding];
        @try {
          template_ = new_FreemarkerTemplateTemplate_initWithNSString_withNSString_withJavaIoReader_withFreemarkerTemplateConfiguration_withNSString_(name, sourceName, reader, self->config_, initialEncoding);
        }
        @finally {
          
#line 497
          [((JavaIoReader *) nil_chk(reader)) close];
        }
        actualEncoding = initialEncoding;
      }
      @catch (
#line 500
      FreemarkerTemplateTemplate_WrongEncodingException *wee) {
        actualEncoding = [((FreemarkerTemplateTemplate_WrongEncodingException *) nil_chk(wee)) getTemplateSpecifiedEncoding];
        if ([((FreemarkerLogLogger *) nil_chk(FreemarkerCacheTemplateCache_LOG_)) isDebugEnabled]) {
          [FreemarkerCacheTemplateCache_LOG_ debugWithNSString:JreStrcat("$$$$$$", @"Initial encoding \"", initialEncoding, @"\" was incorrect, re-reading with \"",
#line 504
          actualEncoding, @"\". Template: ", sourceName)];
        }
        
#line 507
        JavaIoReader *reader = [((id<FreemarkerCacheTemplateLoader>) nil_chk(templateLoader)) getReaderWithId:source withNSString:actualEncoding];
        @try {
          template_ = new_FreemarkerTemplateTemplate_initWithNSString_withNSString_withJavaIoReader_withFreemarkerTemplateConfiguration_withNSString_(name, sourceName, reader, self->config_, actualEncoding);
        }
        @finally {
          
#line 511
          [((JavaIoReader *) nil_chk(reader)) close];
        }
      }
    }
    else {
      JavaIoStringWriter *sw = new_JavaIoStringWriter_init();
      IOSCharArray *buf = [IOSCharArray newArrayWithLength:4096];
      JavaIoReader *reader = [((id<FreemarkerCacheTemplateLoader>) nil_chk(templateLoader)) getReaderWithId:source withNSString:initialEncoding];
      @try {
        while (YES) {
          jint charsRead = [((JavaIoReader *) nil_chk(reader)) readWithCharArray:buf];
          if (charsRead > 0) {
            [sw writeWithCharArray:buf withInt:0 withInt:charsRead];
          }
          else
#line 524
          if (charsRead < 0) {
            goto break_fetchChars;
          }
        }
        break_fetchChars: ;
      }
      @finally {
        
#line 529
        [((JavaIoReader *) nil_chk(reader)) close];
      }
      template_ = FreemarkerTemplateTemplate_getPlainTextTemplateWithNSString_withNSString_withNSString_withFreemarkerTemplateConfiguration_(name, sourceName, [sw description], self->config_);
      actualEncoding = initialEncoding;
    }
  }
  
#line 536
  [((FreemarkerTemplateTemplate *) nil_chk(template_)) setLocaleWithJavaUtilLocale:locale];
  [template_ setCustomLookupConditionWithId:customLookupCondition];
  [template_ setEncodingWithNSString:actualEncoding];
  return template_;
}


#line 654
NSString *FreemarkerCacheTemplateCache_buildDebugNameWithNSString_withJavaUtilLocale_withId_withNSString_withBoolean_(FreemarkerCacheTemplateCache *self, NSString *name, JavaUtilLocale *locale, id customLookupCondition, NSString *encoding, jboolean parse) {
  
#line 656
  return JreStrcat("$C$$$$$", FreemarkerTemplateUtilityStringUtil_jQuoteNoXSSWithNSString_(name), '(', FreemarkerTemplateUtilityStringUtil_jQuoteNoXSSWithId_(
#line 657
  locale),
#line 658
  (customLookupCondition != nil ? JreStrcat("$$", @", cond=", FreemarkerTemplateUtilityStringUtil_jQuoteNoXSSWithId_(customLookupCondition)) : @""), @", ",
#line 659
  encoding,
#line 660
  (parse ? @", parsed)" : @", unparsed]"));
}


#line 671
NSString *FreemarkerCacheTemplateCache_getFullTemplatePathWithFreemarkerCoreEnvironment_withNSString_withNSString_(FreemarkerCoreEnvironment *env, NSString *baseName, NSString *targetName) {
  FreemarkerCacheTemplateCache_initialize();
  
#line 672
  @try {
    return [((FreemarkerCoreEnvironment *) nil_chk(env)) toFullTemplateNameWithNSString:baseName withNSString:targetName];
  }
  @catch (
#line 674
  FreemarkerTemplateMalformedTemplateNameException *e) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_([((FreemarkerTemplateMalformedTemplateNameException *) nil_chk(e)) getMessage]);
  }
}


#line 679
FreemarkerCacheTemplateLookupResult *FreemarkerCacheTemplateCache_lookupTemplateWithNSString_withJavaUtilLocale_withId_(FreemarkerCacheTemplateCache *self, NSString *name, JavaUtilLocale *locale, id customLookupCondition) {
  
#line 681
  FreemarkerCacheTemplateLookupResult *lookupResult = [((FreemarkerCacheTemplateLookupStrategy *) nil_chk(self->templateLookupStrategy_)) lookupWithFreemarkerCacheTemplateLookupContext:new_FreemarkerCacheTemplateCache_TemplateCacheTemplateLookupContext_initWithFreemarkerCacheTemplateCache_withNSString_withJavaUtilLocale_withId_(self,
#line 682
  name, locale, customLookupCondition)];
  if (lookupResult == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"Lookup result shouldn't be null");
  }
  return lookupResult;
}


#line 689
FreemarkerCacheTemplateLookupResult *FreemarkerCacheTemplateCache_lookupTemplateWithAcquisitionStrategyWithNSString_(FreemarkerCacheTemplateCache *self, NSString *path) {
  
#line 691
  jint asterisk = [((NSString *) nil_chk(path)) indexOf:FreemarkerCacheTemplateCache_ASTERISK];
  
#line 693
  if (asterisk == -1) {
    
#line 695
    return FreemarkerCacheTemplateLookupResult_fromWithNSString_withId_(path, FreemarkerCacheTemplateCache_findTemplateSourceWithNSString_(self, path));
  }
  JavaUtilStringTokenizer *tok = new_JavaUtilStringTokenizer_initWithNSString_withNSString_(path, @"/");
  jint lastAsterisk = -1;
  id<JavaUtilList> tokpath = new_JavaUtilArrayList_init();
  while ([tok hasMoreTokens]) {
    
#line 702
    NSString *pathToken = [tok nextToken];
    if ([((NSString *) nil_chk(pathToken)) isEqual:FreemarkerCacheTemplateCache_ASTERISKSTR_]) {
      
#line 705
      if (lastAsterisk != -1) {
        
#line 707
        (void) [tokpath removeWithInt:lastAsterisk];
      }
      lastAsterisk = [tokpath size];
    }
    [tokpath addWithId:pathToken];
  }
  if (lastAsterisk == -1) {
    return FreemarkerCacheTemplateLookupResult_fromWithNSString_withId_(path, FreemarkerCacheTemplateCache_findTemplateSourceWithNSString_(self, path));
  }
  NSString *basePath = FreemarkerCacheTemplateCache_concatPathWithJavaUtilList_withInt_withInt_(self, tokpath, 0, lastAsterisk);
  NSString *resourcePath = FreemarkerCacheTemplateCache_concatPathWithJavaUtilList_withInt_withInt_(self, tokpath, lastAsterisk + 1, [tokpath size]);
  if ([((NSString *) nil_chk(resourcePath)) hasSuffix:@"/"]) {
    
#line 720
    resourcePath = [resourcePath substring:0 endIndex:((jint) [resourcePath length]) - 1];
  }
  JavaLangStringBuffer *buf = [new_JavaLangStringBuffer_initWithInt_(((jint) [path length])) appendWithNSString:basePath];
  jint l = ((jint) [((NSString *) nil_chk(basePath)) length]);
  for (; ; ) {
    
#line 726
    NSString *fullPath = [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk(buf)) appendWithNSString:resourcePath])) description];
    id templateSource = FreemarkerCacheTemplateCache_findTemplateSourceWithNSString_(self, fullPath);
    if (templateSource != nil) {
      
#line 730
      return FreemarkerCacheTemplateLookupResult_fromWithNSString_withId_(fullPath, templateSource);
    }
    if (l == 0) {
      
#line 734
      return FreemarkerCacheTemplateLookupResult_createNegativeResult();
    }
    l = [basePath lastIndexOf:FreemarkerCacheTemplateCache_SLASH fromIndex:l - 2] + 1;
    [buf setLengthWithInt:l];
  }
}


#line 741
id FreemarkerCacheTemplateCache_findTemplateSourceWithNSString_(FreemarkerCacheTemplateCache *self, NSString *path) {
  id result = [((id<FreemarkerCacheTemplateLoader>) nil_chk(self->templateLoader_)) findTemplateSourceWithNSString:path];
  if ([((FreemarkerLogLogger *) nil_chk(FreemarkerCacheTemplateCache_LOG_)) isDebugEnabled]) {
    [FreemarkerCacheTemplateCache_LOG_ debugWithNSString:JreStrcat("$$$$", @"TemplateLoader.findTemplateSource(", FreemarkerTemplateUtilityStringUtil_jQuoteWithNSString_(path), @"): ",
#line 745
    (result == nil ? @"Not found" : @"Found"))];
  }
  return FreemarkerCacheTemplateCache_modifyForConfIcIWithId_(self, result);
}


#line 754
id FreemarkerCacheTemplateCache_modifyForConfIcIWithId_(FreemarkerCacheTemplateCache *self, id templateSource) {
  if (templateSource == nil) return nil;
  
#line 757
  if ([((FreemarkerTemplateVersion *) nil_chk([((FreemarkerTemplateConfiguration *) nil_chk(self->config_)) getIncompatibleImprovements])) intValue] < FreemarkerTemplate_TemplateAPI_get_VERSION_INT_2_3_21_()) {
    return templateSource;
  }
  
#line 761
  if ([templateSource isKindOfClass:[FreemarkerCacheURLTemplateSource class]]) {
    FreemarkerCacheURLTemplateSource *urlTemplateSource = (FreemarkerCacheURLTemplateSource *) check_class_cast(templateSource, [FreemarkerCacheURLTemplateSource class]);
    if ([((FreemarkerCacheURLTemplateSource *) nil_chk(urlTemplateSource)) getUseCaches] == nil) {
      [urlTemplateSource setUseCachesWithBoolean:NO];
    }
  }
  else
#line 766
  if ([templateSource isKindOfClass:[FreemarkerCacheMultiTemplateLoader_MultiSource class]]) {
    (void) FreemarkerCacheTemplateCache_modifyForConfIcIWithId_(self, [((FreemarkerCacheMultiTemplateLoader_MultiSource *) nil_chk(((FreemarkerCacheMultiTemplateLoader_MultiSource *) check_class_cast(templateSource, [FreemarkerCacheMultiTemplateLoader_MultiSource class])))) getWrappedSource]);
  }
  return templateSource;
}


#line 772
NSString *FreemarkerCacheTemplateCache_concatPathWithJavaUtilList_withInt_withInt_(FreemarkerCacheTemplateCache *self, id<JavaUtilList> path, jint from, jint to) {
  
#line 774
  JavaLangStringBuffer *buf = new_JavaLangStringBuffer_initWithInt_((to - from) * 16);
  for (jint i = from; i < to; ++i) {
    
#line 777
    (void) [((JavaLangStringBuffer *) nil_chk([buf appendWithId:[((id<JavaUtilList>) nil_chk(path)) getWithInt:i]])) appendWithChar:'/'];
  }
  return [buf description];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCacheTemplateCache)

@implementation FreemarkerCacheTemplateCache_TemplateKey


#line 794
- (instancetype)initWithNSString:(NSString *)name
              withJavaUtilLocale:(JavaUtilLocale *)locale
                          withId:(id)customLookupCondition
                    withNSString:(NSString *)encoding
                     withBoolean:(jboolean)parse {
  FreemarkerCacheTemplateCache_TemplateKey_initWithNSString_withJavaUtilLocale_withId_withNSString_withBoolean_(self, name, locale, customLookupCondition, encoding, parse);
  return self;
}

- (jboolean)isEqual:(id)o {
  
#line 805
  if ([o isKindOfClass:[FreemarkerCacheTemplateCache_TemplateKey class]]) {
    
#line 807
    FreemarkerCacheTemplateCache_TemplateKey *tk = (FreemarkerCacheTemplateCache_TemplateKey *) check_class_cast(o, [FreemarkerCacheTemplateCache_TemplateKey class]);
    return
#line 809
    parse_ == ((FreemarkerCacheTemplateCache_TemplateKey *) nil_chk(tk))->parse_ &&
#line 810
    [((NSString *) nil_chk(name_)) isEqual:tk->name_] &&
#line 811
    [((JavaUtilLocale *) nil_chk(locale_)) isEqual:tk->locale_] && FreemarkerCacheTemplateCache_TemplateKey_nullSafeEqualsWithId_withId_(self,
#line 812
    customLookupCondition_, tk->customLookupCondition_) &&
#line 813
    [((NSString *) nil_chk(encoding_)) isEqual:tk->encoding_];
  }
  return NO;
}


#line 818
- (jboolean)nullSafeEqualsWithId:(id)o1
                          withId:(id)o2 {
  return FreemarkerCacheTemplateCache_TemplateKey_nullSafeEqualsWithId_withId_(self, o1, o2);
}


#line 824
- (NSUInteger)hash {
  
#line 826
  return
#line 827
  ((jint) [((NSString *) nil_chk(name_)) hash]) ^ ((jint)
#line 828
  [((JavaUtilLocale *) nil_chk(locale_)) hash]) ^ ((jint)
#line 829
  [((NSString *) nil_chk(encoding_)) hash]) ^
#line 830
  (customLookupCondition_ != nil ? ((jint) [customLookupCondition_ hash]) : 0) ^ ((jint)
#line 831
  [JavaLangBoolean_valueOfWithBoolean_(!parse_) hash]);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithNSString:withJavaUtilLocale:withId:withNSString:withBoolean:", "TemplateKey", NULL, 0x0, NULL, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL, NULL },
    { "nullSafeEqualsWithId:withId:", "nullSafeEquals", "Z", 0x2, NULL, NULL },
    { "hash", "hashCode", "I", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "name_", NULL, 0x12, "Ljava.lang.String;", NULL, NULL,  },
    { "locale_", NULL, 0x12, "Ljava.util.Locale;", NULL, NULL,  },
    { "customLookupCondition_", NULL, 0x12, "Ljava.lang.Object;", NULL, NULL,  },
    { "encoding_", NULL, 0x12, "Ljava.lang.String;", NULL, NULL,  },
    { "parse_", NULL, 0x12, "Z", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerCacheTemplateCache_TemplateKey = { 2, "TemplateKey", "freemarker.cache", "TemplateCache", 0x1a, 4, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerCacheTemplateCache_TemplateKey;
}

@end


#line 794
void FreemarkerCacheTemplateCache_TemplateKey_initWithNSString_withJavaUtilLocale_withId_withNSString_withBoolean_(FreemarkerCacheTemplateCache_TemplateKey *self, NSString *name, JavaUtilLocale *locale, id customLookupCondition, NSString *encoding, jboolean parse) {
  (void) NSObject_init(self);
  self->name_ = name;
  self->locale_ = locale;
  self->customLookupCondition_ = customLookupCondition;
  self->encoding_ = encoding;
  self->parse_ = parse;
}


#line 794
FreemarkerCacheTemplateCache_TemplateKey *new_FreemarkerCacheTemplateCache_TemplateKey_initWithNSString_withJavaUtilLocale_withId_withNSString_withBoolean_(NSString *name, JavaUtilLocale *locale, id customLookupCondition, NSString *encoding, jboolean parse) {
  FreemarkerCacheTemplateCache_TemplateKey *self = [FreemarkerCacheTemplateCache_TemplateKey alloc];
  FreemarkerCacheTemplateCache_TemplateKey_initWithNSString_withJavaUtilLocale_withId_withNSString_withBoolean_(self, name, locale, customLookupCondition, encoding, parse);
  return self;
}


#line 818
jboolean FreemarkerCacheTemplateCache_TemplateKey_nullSafeEqualsWithId_withId_(FreemarkerCacheTemplateCache_TemplateKey *self, id o1, id o2) {
  return o1 != nil ?
#line 820
  (o2 != nil ? [o1 isEqual:o2] : NO) :
#line 821
  o2 == nil;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCacheTemplateCache_TemplateKey)


#line 843
@implementation FreemarkerCacheTemplateCache_CachedTemplate


#line 852
- (FreemarkerCacheTemplateCache_CachedTemplate *)cloneCachedTemplate {
  @try {
    return (FreemarkerCacheTemplateCache_CachedTemplate *) check_class_cast([super clone], [FreemarkerCacheTemplateCache_CachedTemplate class]);
  }
  @catch (JavaLangCloneNotSupportedException *e) {
    @throw new_FreemarkerTemplateUtilityUndeclaredThrowableException_initWithJavaLangThrowable_(e);
  }
}

- (instancetype)init {
  FreemarkerCacheTemplateCache_CachedTemplate_init(self);
  return self;
}

- (id)copyWithZone:(NSZone *)zone {
  return [self clone];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "cloneCachedTemplate", NULL, "Lfreemarker.cache.TemplateCache$CachedTemplate;", 0x1, NULL, NULL },
    { "init", NULL, NULL, 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, NULL, .constantValue.asLong = FreemarkerCacheTemplateCache_CachedTemplate_serialVersionUID },
    { "templateOrException_", NULL, 0x0, "Ljava.lang.Object;", NULL, NULL,  },
    { "source_", NULL, 0x0, "Ljava.lang.Object;", NULL, NULL,  },
    { "lastChecked_", NULL, 0x0, "J", NULL, NULL,  },
    { "lastModified_", NULL, 0x0, "J", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerCacheTemplateCache_CachedTemplate = { 2, "CachedTemplate", "freemarker.cache", "TemplateCache", 0x1a, 2, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerCacheTemplateCache_CachedTemplate;
}

@end

void FreemarkerCacheTemplateCache_CachedTemplate_init(FreemarkerCacheTemplateCache_CachedTemplate *self) {
  (void) NSObject_init(self);
}

FreemarkerCacheTemplateCache_CachedTemplate *new_FreemarkerCacheTemplateCache_CachedTemplate_init() {
  FreemarkerCacheTemplateCache_CachedTemplate *self = [FreemarkerCacheTemplateCache_CachedTemplate alloc];
  FreemarkerCacheTemplateCache_CachedTemplate_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCacheTemplateCache_CachedTemplate)


#line 862
@implementation FreemarkerCacheTemplateCache_TemplateCacheTemplateLookupContext

- (instancetype)initWithFreemarkerCacheTemplateCache:(FreemarkerCacheTemplateCache *)outer$
                                        withNSString:(NSString *)templateName
                                  withJavaUtilLocale:(JavaUtilLocale *)templateLocale
                                              withId:(id)customLookupCondition {
  FreemarkerCacheTemplateCache_TemplateCacheTemplateLookupContext_initWithFreemarkerCacheTemplateCache_withNSString_withJavaUtilLocale_withId_(self, outer$, templateName, templateLocale, customLookupCondition);
  return self;
}


#line 868
- (FreemarkerCacheTemplateLookupResult *)lookupWithAcquisitionStrategyWithNSString:(NSString *)name {
  
#line 870
  if ([((NSString *) nil_chk(name)) hasPrefix:@"/"]) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"Non-normalized name, starts with \"/\": ", name));
  }
  
#line 874
  return FreemarkerCacheTemplateCache_lookupTemplateWithAcquisitionStrategyWithNSString_(this$0_, name);
}


#line 877
- (FreemarkerCacheTemplateLookupResult *)lookupWithLocalizedThenAcquisitionStrategyWithNSString:(NSString *)templateName
                                                                             withJavaUtilLocale:(JavaUtilLocale *)templateLocale {
  
#line 880
  if (templateLocale == nil) {
    return [self lookupWithAcquisitionStrategyWithNSString:templateName];
  }
  
#line 884
  jint lastDot = [((NSString *) nil_chk(templateName)) lastIndexOf:'.'];
  NSString *prefix = lastDot == -1 ? templateName : [templateName substring:0 endIndex:lastDot];
  NSString *suffix = lastDot == -1 ? @"" : [templateName substring:lastDot];
  NSString *localeName = JreStrcat("$$", FreemarkerCacheTemplateCache_get_LOCALE_PART_SEPARATOR_(), [((JavaUtilLocale *) nil_chk(templateLocale)) description]);
  JavaLangStringBuffer *buf = new_JavaLangStringBuffer_initWithInt_(((jint) [templateName length]) + ((jint) [localeName length]));
  (void) [buf appendWithNSString:prefix];
  while (YES) {
    [buf setLengthWithInt:((jint) [prefix length])];
    NSString *path = [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([buf appendWithNSString:localeName])) appendWithNSString:suffix])) description];
    FreemarkerCacheTemplateLookupResult *lookupResult = [self lookupWithAcquisitionStrategyWithNSString:path];
    if ([((FreemarkerCacheTemplateLookupResult *) nil_chk(lookupResult)) isPositive]) {
      return lookupResult;
    }
    
#line 898
    jint lastUnderscore = [localeName lastIndexOf:'_'];
    if (lastUnderscore == -1) {
      goto break_tryLocaleNameVariations;
    }
    localeName = [localeName substring:0 endIndex:lastUnderscore];
  }
  break_tryLocaleNameVariations: ;
  
#line 904
  return [self createNegativeLookupResult];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithFreemarkerCacheTemplateCache:withNSString:withJavaUtilLocale:withId:", "TemplateCacheTemplateLookupContext", NULL, 0x0, NULL, NULL },
    { "lookupWithAcquisitionStrategyWithNSString:", "lookupWithAcquisitionStrategy", "Lfreemarker.cache.TemplateLookupResult;", 0x1, "Ljava.io.IOException;", NULL },
    { "lookupWithLocalizedThenAcquisitionStrategyWithNSString:withJavaUtilLocale:", "lookupWithLocalizedThenAcquisitionStrategy", "Lfreemarker.cache.TemplateLookupResult;", 0x1, "Ljava.io.IOException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lfreemarker.cache.TemplateCache;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerCacheTemplateCache_TemplateCacheTemplateLookupContext = { 2, "TemplateCacheTemplateLookupContext", "freemarker.cache", "TemplateCache", 0x2, 3, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerCacheTemplateCache_TemplateCacheTemplateLookupContext;
}

@end


#line 864
void FreemarkerCacheTemplateCache_TemplateCacheTemplateLookupContext_initWithFreemarkerCacheTemplateCache_withNSString_withJavaUtilLocale_withId_(FreemarkerCacheTemplateCache_TemplateCacheTemplateLookupContext *self, FreemarkerCacheTemplateCache *outer$, NSString *templateName, JavaUtilLocale *templateLocale, id customLookupCondition) {
  self->this$0_ = outer$;
  (void) FreemarkerCacheTemplateLookupContext_initWithNSString_withJavaUtilLocale_withId_(self,
#line 865
  templateName, outer$->localizedLookup_ ? templateLocale : nil, customLookupCondition);
}


#line 864
FreemarkerCacheTemplateCache_TemplateCacheTemplateLookupContext *new_FreemarkerCacheTemplateCache_TemplateCacheTemplateLookupContext_initWithFreemarkerCacheTemplateCache_withNSString_withJavaUtilLocale_withId_(FreemarkerCacheTemplateCache *outer$, NSString *templateName, JavaUtilLocale *templateLocale, id customLookupCondition) {
  FreemarkerCacheTemplateCache_TemplateCacheTemplateLookupContext *self = [FreemarkerCacheTemplateCache_TemplateCacheTemplateLookupContext alloc];
  FreemarkerCacheTemplateCache_TemplateCacheTemplateLookupContext_initWithFreemarkerCacheTemplateCache_withNSString_withJavaUtilLocale_withId_(self, outer$, templateName, templateLocale, customLookupCondition);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCacheTemplateCache_TemplateCacheTemplateLookupContext)


#line 914
@implementation FreemarkerCacheTemplateCache_MaybeMissingTemplate


#line 921
- (instancetype)initWithFreemarkerTemplateTemplate:(FreemarkerTemplateTemplate *)template_ {
  FreemarkerCacheTemplateCache_MaybeMissingTemplate_initWithFreemarkerTemplateTemplate_(self, template_);
  return self;
}


#line 928
- (instancetype)initWithNSString:(NSString *)normalizedName
withFreemarkerTemplateMalformedTemplateNameException:(FreemarkerTemplateMalformedTemplateNameException *)missingTemplateCauseException {
  FreemarkerCacheTemplateCache_MaybeMissingTemplate_initWithNSString_withFreemarkerTemplateMalformedTemplateNameException_(self, normalizedName, missingTemplateCauseException);
  return self;
}


#line 935
- (instancetype)initWithNSString:(NSString *)normalizedName
                    withNSString:(NSString *)missingTemplateReason {
  FreemarkerCacheTemplateCache_MaybeMissingTemplate_initWithNSString_withNSString_(self, normalizedName, missingTemplateReason);
  return self;
}


#line 945
- (FreemarkerTemplateTemplate *)getTemplate {
  return template__;
}


#line 954
- (NSString *)getMissingTemplateReason {
  return missingTemplateReason_ != nil ?
#line 956
  missingTemplateReason_ :
#line 957
  (missingTemplateCauseException_ != nil ?
#line 958
  [missingTemplateCauseException_ getMalformednessDescription] :
#line 959
  nil);
}


#line 967
- (NSString *)getMissingTemplateNormalizedName {
  return missingTemplateNormalizedName_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithFreemarkerTemplateTemplate:", "MaybeMissingTemplate", NULL, 0x2, NULL, NULL },
    { "initWithNSString:withFreemarkerTemplateMalformedTemplateNameException:", "MaybeMissingTemplate", NULL, 0x2, NULL, NULL },
    { "initWithNSString:withNSString:", "MaybeMissingTemplate", NULL, 0x2, NULL, NULL },
    { "getTemplate", NULL, "Lfreemarker.template.Template;", 0x1, NULL, NULL },
    { "getMissingTemplateReason", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getMissingTemplateNormalizedName", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "template__", "template", 0x12, "Lfreemarker.template.Template;", NULL, NULL,  },
    { "missingTemplateNormalizedName_", NULL, 0x12, "Ljava.lang.String;", NULL, NULL,  },
    { "missingTemplateReason_", NULL, 0x12, "Ljava.lang.String;", NULL, NULL,  },
    { "missingTemplateCauseException_", NULL, 0x12, "Lfreemarker.template.MalformedTemplateNameException;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerCacheTemplateCache_MaybeMissingTemplate = { 2, "MaybeMissingTemplate", "freemarker.cache", "TemplateCache", 0x19, 6, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerCacheTemplateCache_MaybeMissingTemplate;
}

@end


#line 921
void FreemarkerCacheTemplateCache_MaybeMissingTemplate_initWithFreemarkerTemplateTemplate_(FreemarkerCacheTemplateCache_MaybeMissingTemplate *self, FreemarkerTemplateTemplate *template_) {
  (void) NSObject_init(self);
  
#line 922
  self->template__ = template_;
  self->missingTemplateNormalizedName_ = nil;
  self->missingTemplateReason_ = nil;
  self->missingTemplateCauseException_ = nil;
}


#line 921
FreemarkerCacheTemplateCache_MaybeMissingTemplate *new_FreemarkerCacheTemplateCache_MaybeMissingTemplate_initWithFreemarkerTemplateTemplate_(FreemarkerTemplateTemplate *template_) {
  FreemarkerCacheTemplateCache_MaybeMissingTemplate *self = [FreemarkerCacheTemplateCache_MaybeMissingTemplate alloc];
  FreemarkerCacheTemplateCache_MaybeMissingTemplate_initWithFreemarkerTemplateTemplate_(self, template_);
  return self;
}


#line 928
void FreemarkerCacheTemplateCache_MaybeMissingTemplate_initWithNSString_withFreemarkerTemplateMalformedTemplateNameException_(FreemarkerCacheTemplateCache_MaybeMissingTemplate *self, NSString *normalizedName, FreemarkerTemplateMalformedTemplateNameException *missingTemplateCauseException) {
  (void) NSObject_init(self);
  
#line 929
  self->template__ = nil;
  self->missingTemplateNormalizedName_ = normalizedName;
  self->missingTemplateReason_ = nil;
  self->missingTemplateCauseException_ = missingTemplateCauseException;
}


#line 928
FreemarkerCacheTemplateCache_MaybeMissingTemplate *new_FreemarkerCacheTemplateCache_MaybeMissingTemplate_initWithNSString_withFreemarkerTemplateMalformedTemplateNameException_(NSString *normalizedName, FreemarkerTemplateMalformedTemplateNameException *missingTemplateCauseException) {
  FreemarkerCacheTemplateCache_MaybeMissingTemplate *self = [FreemarkerCacheTemplateCache_MaybeMissingTemplate alloc];
  FreemarkerCacheTemplateCache_MaybeMissingTemplate_initWithNSString_withFreemarkerTemplateMalformedTemplateNameException_(self, normalizedName, missingTemplateCauseException);
  return self;
}


#line 935
void FreemarkerCacheTemplateCache_MaybeMissingTemplate_initWithNSString_withNSString_(FreemarkerCacheTemplateCache_MaybeMissingTemplate *self, NSString *normalizedName, NSString *missingTemplateReason) {
  (void) NSObject_init(self);
  
#line 936
  self->template__ = nil;
  self->missingTemplateNormalizedName_ = normalizedName;
  self->missingTemplateReason_ = missingTemplateReason;
  self->missingTemplateCauseException_ = nil;
}


#line 935
FreemarkerCacheTemplateCache_MaybeMissingTemplate *new_FreemarkerCacheTemplateCache_MaybeMissingTemplate_initWithNSString_withNSString_(NSString *normalizedName, NSString *missingTemplateReason) {
  FreemarkerCacheTemplateCache_MaybeMissingTemplate *self = [FreemarkerCacheTemplateCache_MaybeMissingTemplate alloc];
  FreemarkerCacheTemplateCache_MaybeMissingTemplate_initWithNSString_withNSString_(self, normalizedName, missingTemplateReason);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCacheTemplateCache_MaybeMissingTemplate)
