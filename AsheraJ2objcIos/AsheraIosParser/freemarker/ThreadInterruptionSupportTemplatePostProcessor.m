//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/ThreadInterruptionSupportTemplatePostProcessor.java
//


#include "BugException.h"
#include "Environment.h"
#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "MixedContent.h"
#include "ParameterRole.h"
#include "ParseException.h"
#include "Template.h"
#include "TemplateElement.h"
#include "TemplateException.h"
#include "TemplateObject.h"
#include "TemplatePostProcessor.h"
#include "TemplatePostProcessorException.h"
#include "ThreadInterruptionSupportTemplatePostProcessor.h"
#include "java/io/IOException.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/Thread.h"

#line 0 "/Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/ThreadInterruptionSupportTemplatePostProcessor.java"

@interface FreemarkerCoreThreadInterruptionSupportTemplatePostProcessor ()

- (void)addInterruptionChecksWithFreemarkerCoreTemplateElement:(FreemarkerCoreTemplateElement *)te;

@end

__attribute__((unused)) static void FreemarkerCoreThreadInterruptionSupportTemplatePostProcessor_addInterruptionChecksWithFreemarkerCoreTemplateElement_(FreemarkerCoreThreadInterruptionSupportTemplatePostProcessor *self, FreemarkerCoreTemplateElement *te);

@interface FreemarkerCoreThreadInterruptionSupportTemplatePostProcessor_ThreadInterruptionCheck ()

- (instancetype)initWithFreemarkerCoreTemplateElement:(FreemarkerCoreTemplateElement *)te;

@end

__attribute__((unused)) static void FreemarkerCoreThreadInterruptionSupportTemplatePostProcessor_ThreadInterruptionCheck_initWithFreemarkerCoreTemplateElement_(FreemarkerCoreThreadInterruptionSupportTemplatePostProcessor_ThreadInterruptionCheck *self, FreemarkerCoreTemplateElement *te);

__attribute__((unused)) static FreemarkerCoreThreadInterruptionSupportTemplatePostProcessor_ThreadInterruptionCheck *new_FreemarkerCoreThreadInterruptionSupportTemplatePostProcessor_ThreadInterruptionCheck_initWithFreemarkerCoreTemplateElement_(FreemarkerCoreTemplateElement *te) NS_RETURNS_RETAINED;


#line 45
@implementation FreemarkerCoreThreadInterruptionSupportTemplatePostProcessor

- (void)postProcessWithFreemarkerTemplateTemplate:(FreemarkerTemplateTemplate *)t {
  FreemarkerCoreTemplateElement *te = [((FreemarkerTemplateTemplate *) nil_chk(t)) getRootTreeNode];
  FreemarkerCoreThreadInterruptionSupportTemplatePostProcessor_addInterruptionChecksWithFreemarkerCoreTemplateElement_(self, te);
}

- (void)addInterruptionChecksWithFreemarkerCoreTemplateElement:(FreemarkerCoreTemplateElement *)te {
  FreemarkerCoreThreadInterruptionSupportTemplatePostProcessor_addInterruptionChecksWithFreemarkerCoreTemplateElement_(self, te);
}

- (instancetype)init {
  FreemarkerCoreThreadInterruptionSupportTemplatePostProcessor_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "postProcessWithFreemarkerTemplateTemplate:", "postProcess", "V", 0x1, "Lfreemarker.core.TemplatePostProcessorException;", NULL },
    { "addInterruptionChecksWithFreemarkerCoreTemplateElement:", "addInterruptionChecks", "V", 0x2, "Lfreemarker.core.TemplatePostProcessorException;", NULL },
    { "init", NULL, NULL, 0x0, NULL, NULL },
  };
  static const char *inner_classes[] = {"Lfreemarker.core.ThreadInterruptionSupportTemplatePostProcessor$ThreadInterruptionCheck;", "Lfreemarker.core.ThreadInterruptionSupportTemplatePostProcessor$TemplateProcessingThreadInterruptedException;"};
  static const J2ObjcClassInfo _FreemarkerCoreThreadInterruptionSupportTemplatePostProcessor = { 2, "ThreadInterruptionSupportTemplatePostProcessor", "freemarker.core", NULL, 0x0, 3, methods, 0, NULL, 0, NULL, 2, inner_classes, NULL, NULL };
  return &_FreemarkerCoreThreadInterruptionSupportTemplatePostProcessor;
}

@end


#line 52
void FreemarkerCoreThreadInterruptionSupportTemplatePostProcessor_addInterruptionChecksWithFreemarkerCoreTemplateElement_(FreemarkerCoreThreadInterruptionSupportTemplatePostProcessor *self, FreemarkerCoreTemplateElement *te) {
  if (te == nil) {
    return;
  }
  
#line 57
  FreemarkerCoreTemplateElement *nestedBlock = [((FreemarkerCoreTemplateElement *) nil_chk(te)) getNestedBlock];
  
#line 60
  if (nestedBlock != nil) {
    FreemarkerCoreThreadInterruptionSupportTemplatePostProcessor_addInterruptionChecksWithFreemarkerCoreTemplateElement_(self, nestedBlock);
  }
  jint regulatedChildrenCount = [te getRegulatedChildCount];
  for (jint i = 0; i < regulatedChildrenCount; i++) {
    FreemarkerCoreThreadInterruptionSupportTemplatePostProcessor_addInterruptionChecksWithFreemarkerCoreTemplateElement_(self, [te getRegulatedChildWithInt:i]);
  }
  
#line 70
  if ([te isNestedBlockRepeater]) {
    if (regulatedChildrenCount != 0) {
      
#line 74
      @throw new_FreemarkerCoreBugException_init();
    }
    @try {
      FreemarkerCoreThreadInterruptionSupportTemplatePostProcessor_ThreadInterruptionCheck *interruptedChk = new_FreemarkerCoreThreadInterruptionSupportTemplatePostProcessor_ThreadInterruptionCheck_initWithFreemarkerCoreTemplateElement_(te);
      if (nestedBlock == nil) {
        [te setNestedBlockWithFreemarkerCoreTemplateElement:interruptedChk];
      }
      else {
        
#line 81
        FreemarkerCoreMixedContent *nestedMixedC;
        if ([nestedBlock isKindOfClass:[FreemarkerCoreMixedContent class]]) {
          nestedMixedC = (FreemarkerCoreMixedContent *) check_class_cast(nestedBlock, [FreemarkerCoreMixedContent class]);
        }
        else {
          
#line 85
          nestedMixedC = new_FreemarkerCoreMixedContent_init();
          [nestedMixedC setLocationWithFreemarkerTemplateTemplate:[te getTemplate] withInt:0 withInt:0 withInt:0 withInt:0];
          [nestedMixedC addElementWithFreemarkerCoreTemplateElement:nestedBlock];
          [te setNestedBlockWithFreemarkerCoreTemplateElement:nestedMixedC];
        }
        [((FreemarkerCoreMixedContent *) nil_chk(nestedMixedC)) addElementWithInt:0 withFreemarkerCoreTemplateElement:interruptedChk];
      }
    }
    @catch (
#line 92
    FreemarkerCoreParseException *e) {
      @throw new_FreemarkerCoreTemplatePostProcessorException_initWithNSString_withJavaLangThrowable_(@"Unexpected error; see cause", e);
    }
  }
}

void FreemarkerCoreThreadInterruptionSupportTemplatePostProcessor_init(FreemarkerCoreThreadInterruptionSupportTemplatePostProcessor *self) {
  (void) FreemarkerCoreTemplatePostProcessor_init(self);
}

FreemarkerCoreThreadInterruptionSupportTemplatePostProcessor *new_FreemarkerCoreThreadInterruptionSupportTemplatePostProcessor_init() {
  FreemarkerCoreThreadInterruptionSupportTemplatePostProcessor *self = [FreemarkerCoreThreadInterruptionSupportTemplatePostProcessor alloc];
  FreemarkerCoreThreadInterruptionSupportTemplatePostProcessor_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreThreadInterruptionSupportTemplatePostProcessor)


#line 102
@implementation FreemarkerCoreThreadInterruptionSupportTemplatePostProcessor_ThreadInterruptionCheck

- (instancetype)initWithFreemarkerCoreTemplateElement:(FreemarkerCoreTemplateElement *)te {
  FreemarkerCoreThreadInterruptionSupportTemplatePostProcessor_ThreadInterruptionCheck_initWithFreemarkerCoreTemplateElement_(self, te);
  return self;
}


#line 108
- (void)acceptWithFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env {
  
#line 111
  if ([((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) isInterrupted]) {
    @throw new_FreemarkerCoreThreadInterruptionSupportTemplatePostProcessor_TemplateProcessingThreadInterruptedException_init();
  }
}

- (NSString *)dumpWithBoolean:(jboolean)canonical {
  return canonical ? @"" : JreStrcat("$$$", @"<#--", [self getNodeTypeSymbol], @"--#>");
}

- (NSString *)getNodeTypeSymbol {
  return @"##threadInterruptionCheck";
}

- (jint)getParameterCount {
  return 0;
}

- (id)getParameterValueWithInt:(jint)idx {
  @throw new_JavaLangIndexOutOfBoundsException_init();
}

- (FreemarkerCoreParameterRole *)getParameterRoleWithInt:(jint)idx {
  @throw new_JavaLangIndexOutOfBoundsException_init();
}

- (jboolean)isNestedBlockRepeater {
  return NO;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithFreemarkerCoreTemplateElement:", "ThreadInterruptionCheck", NULL, 0x2, "Lfreemarker.core.ParseException;", NULL },
    { "acceptWithFreemarkerCoreEnvironment:", "accept", "V", 0x0, "Lfreemarker.template.TemplateException;Ljava.io.IOException;", NULL },
    { "dumpWithBoolean:", "dump", "Ljava.lang.String;", 0x4, NULL, NULL },
    { "getNodeTypeSymbol", NULL, "Ljava.lang.String;", 0x0, NULL, NULL },
    { "getParameterCount", NULL, "I", 0x0, NULL, NULL },
    { "getParameterValueWithInt:", "getParameterValue", "Ljava.lang.Object;", 0x0, NULL, NULL },
    { "getParameterRoleWithInt:", "getParameterRole", "Lfreemarker.core.ParameterRole;", 0x0, NULL, NULL },
    { "isNestedBlockRepeater", NULL, "Z", 0x0, NULL, NULL },
  };
  static const J2ObjcClassInfo _FreemarkerCoreThreadInterruptionSupportTemplatePostProcessor_ThreadInterruptionCheck = { 2, "ThreadInterruptionCheck", "freemarker.core", "ThreadInterruptionSupportTemplatePostProcessor", 0x8, 8, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerCoreThreadInterruptionSupportTemplatePostProcessor_ThreadInterruptionCheck;
}

@end


#line 104
void FreemarkerCoreThreadInterruptionSupportTemplatePostProcessor_ThreadInterruptionCheck_initWithFreemarkerCoreTemplateElement_(FreemarkerCoreThreadInterruptionSupportTemplatePostProcessor_ThreadInterruptionCheck *self, FreemarkerCoreTemplateElement *te) {
  (void) FreemarkerCoreTemplateElement_init(self);
  
#line 105
  [self setLocationWithFreemarkerTemplateTemplate:[((FreemarkerCoreTemplateElement *) nil_chk(te)) getTemplate] withInt:te->beginColumn_ withInt:te->beginLine_ withInt:te->beginColumn_ withInt:te->beginLine_];
}


#line 104
FreemarkerCoreThreadInterruptionSupportTemplatePostProcessor_ThreadInterruptionCheck *new_FreemarkerCoreThreadInterruptionSupportTemplatePostProcessor_ThreadInterruptionCheck_initWithFreemarkerCoreTemplateElement_(FreemarkerCoreTemplateElement *te) {
  FreemarkerCoreThreadInterruptionSupportTemplatePostProcessor_ThreadInterruptionCheck *self = [FreemarkerCoreThreadInterruptionSupportTemplatePostProcessor_ThreadInterruptionCheck alloc];
  FreemarkerCoreThreadInterruptionSupportTemplatePostProcessor_ThreadInterruptionCheck_initWithFreemarkerCoreTemplateElement_(self, te);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreThreadInterruptionSupportTemplatePostProcessor_ThreadInterruptionCheck)


#line 148
@implementation FreemarkerCoreThreadInterruptionSupportTemplatePostProcessor_TemplateProcessingThreadInterruptedException

- (instancetype)init {
  FreemarkerCoreThreadInterruptionSupportTemplatePostProcessor_TemplateProcessingThreadInterruptedException_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "TemplateProcessingThreadInterruptedException", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcClassInfo _FreemarkerCoreThreadInterruptionSupportTemplatePostProcessor_TemplateProcessingThreadInterruptedException = { 2, "TemplateProcessingThreadInterruptedException", "freemarker.core", "ThreadInterruptionSupportTemplatePostProcessor", 0x8, 1, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerCoreThreadInterruptionSupportTemplatePostProcessor_TemplateProcessingThreadInterruptedException;
}

@end


#line 150
void FreemarkerCoreThreadInterruptionSupportTemplatePostProcessor_TemplateProcessingThreadInterruptedException_init(FreemarkerCoreThreadInterruptionSupportTemplatePostProcessor_TemplateProcessingThreadInterruptedException *self) {
  (void) JavaLangRuntimeException_initWithNSString_(self, @"Template processing thread \"interrupted\" flag was set.");
}


#line 150
FreemarkerCoreThreadInterruptionSupportTemplatePostProcessor_TemplateProcessingThreadInterruptedException *new_FreemarkerCoreThreadInterruptionSupportTemplatePostProcessor_TemplateProcessingThreadInterruptedException_init() {
  FreemarkerCoreThreadInterruptionSupportTemplatePostProcessor_TemplateProcessingThreadInterruptedException *self = [FreemarkerCoreThreadInterruptionSupportTemplatePostProcessor_TemplateProcessingThreadInterruptedException alloc];
  FreemarkerCoreThreadInterruptionSupportTemplatePostProcessor_TemplateProcessingThreadInterruptedException_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreThreadInterruptionSupportTemplatePostProcessor_TemplateProcessingThreadInterruptedException)
