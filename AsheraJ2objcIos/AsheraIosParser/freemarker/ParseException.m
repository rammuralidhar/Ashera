//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/ParseException.java
//


#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "ParseException.h"
#include "Template.h"
#include "Token.h"
#include "java/lang/Integer.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/System.h"

#line 0 "/Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/ParseException.java"

#define FreemarkerCoreParseException_serialVersionUID 1LL

@interface FreemarkerCoreParseException ()

/**
 @brief It uses "currentToken" and "expectedTokenSequences" to generate a parse error message and returns it.
 If this object has been created due to a parse error, and you do not catch it (it gets thrown from the parser) the correct error message gets displayed.
 */
+ (NSString *)initialiseWithFreemarkerCoreToken:(FreemarkerCoreToken *)currentToken
                                  withIntArray2:(IOSObjectArray *)expectedTokenSequences
                              withNSStringArray:(IOSObjectArray *)tokenImage OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_STATIC_FIELD_GETTER(FreemarkerCoreParseException, serialVersionUID, jlong)

__attribute__((unused)) static NSString *FreemarkerCoreParseException_initialiseWithFreemarkerCoreToken_withIntArray2_withNSStringArray_(FreemarkerCoreToken *currentToken, IOSObjectArray *expectedTokenSequences, IOSObjectArray *tokenImage);


#line 16
@implementation FreemarkerCoreParseException


#line 31
- (instancetype)initWithFreemarkerCoreToken:(FreemarkerCoreToken *)currentTokenVal
                              withIntArray2:(IOSObjectArray *)expectedTokenSequencesVal
                          withNSStringArray:(IOSObjectArray *)tokenImageVal {
  FreemarkerCoreParseException_initWithFreemarkerCoreToken_withIntArray2_withNSStringArray_(self, currentTokenVal, expectedTokenSequencesVal, tokenImageVal);
  return self;
}


#line 52
- (instancetype)init {
  FreemarkerCoreParseException_init(self);
  return self;
}

- (instancetype)initWithNSString:(NSString *)message {
  FreemarkerCoreParseException_initWithNSString_(self, message);
  return self;
}

- (instancetype)initWithNSString:(NSString *)string
                          withId:(id)expectedTokenSequencesVal
                          withId:(id)keyTk {
  FreemarkerCoreParseException_initWithNSString_withId_withId_(self, string, expectedTokenSequencesVal, keyTk);
  return self;
}


#line 67
- (instancetype)initWithId:(id)expectedTokenSequencesVal {
  FreemarkerCoreParseException_initWithId_(self, expectedTokenSequencesVal);
  return self;
}

- (instancetype)initWithNSString:(NSString *)string
                          withId:(id)expectedTokenSequencesVal {
  FreemarkerCoreParseException_initWithNSString_withId_(self, string, expectedTokenSequencesVal);
  return self;
}


#line 77
- (instancetype)initWithNSString:(NSString *)string
  withFreemarkerTemplateTemplate:(FreemarkerTemplateTemplate *)template_
                         withInt:(jint)beginLine
                         withInt:(jint)beginColumn
                         withInt:(jint)endLine
                         withInt:(jint)endColumn {
  FreemarkerCoreParseException_initWithNSString_withFreemarkerTemplateTemplate_withInt_withInt_withInt_withInt_(self, string, template_, beginLine, beginColumn, endLine, endColumn);
  return self;
}


#line 111
+ (NSString *)initialiseWithFreemarkerCoreToken:(FreemarkerCoreToken *)currentToken
                                  withIntArray2:(IOSObjectArray *)expectedTokenSequences
                              withNSStringArray:(IOSObjectArray *)tokenImage {
  return FreemarkerCoreParseException_initialiseWithFreemarkerCoreToken_withIntArray2_withNSStringArray_(currentToken, expectedTokenSequences, tokenImage);
}


#line 172
+ (NSString *)add_escapesWithNSString:(NSString *)str {
  return FreemarkerCoreParseException_add_escapesWithNSString_(str);
}


#line 217
- (void)setTemplateNameWithNSString:(NSString *)sourceName {
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithFreemarkerCoreToken:withIntArray2:withNSStringArray:", "ParseException", NULL, 0x1, NULL, NULL },
    { "init", "ParseException", NULL, 0x1, NULL, NULL },
    { "initWithNSString:", "ParseException", NULL, 0x1, NULL, NULL },
    { "initWithNSString:withId:withId:", "ParseException", NULL, 0x1, NULL, NULL },
    { "initWithId:", "ParseException", NULL, 0x1, NULL, NULL },
    { "initWithNSString:withId:", "ParseException", NULL, 0x1, NULL, NULL },
    { "initWithNSString:withFreemarkerTemplateTemplate:withInt:withInt:withInt:withInt:", "ParseException", NULL, 0x1, NULL, NULL },
    { "initialiseWithFreemarkerCoreToken:withIntArray2:withNSStringArray:", "initialise", "Ljava.lang.String;", 0xa, NULL, NULL },
    { "add_escapesWithNSString:", "add_escapes", "Ljava.lang.String;", 0x8, NULL, NULL },
    { "setTemplateNameWithNSString:", "setTemplateName", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, NULL, .constantValue.asLong = FreemarkerCoreParseException_serialVersionUID },
    { "currentToken_", NULL, 0x1, "Lfreemarker.core.Token;", NULL, NULL,  },
    { "expectedTokenSequences_", NULL, 0x1, "[[I", NULL, NULL,  },
    { "tokenImage_", NULL, 0x1, "[Ljava.lang.String;", NULL, NULL,  },
    { "eol_", NULL, 0x4, "Ljava.lang.String;", NULL, NULL,  },
    { "lineNumber_", NULL, 0x1, "I", NULL, NULL,  },
    { "columnNumber_", NULL, 0x1, "I", NULL, NULL,  },
    { "endLineNumber_", NULL, 0x1, "I", NULL, NULL,  },
    { "endColumnNumber_", NULL, 0x1, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerCoreParseException = { 2, "ParseException", "freemarker.core", NULL, 0x1, 10, methods, 9, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerCoreParseException;
}

@end


#line 31
void FreemarkerCoreParseException_initWithFreemarkerCoreToken_withIntArray2_withNSStringArray_(FreemarkerCoreParseException *self, FreemarkerCoreToken *currentTokenVal, IOSObjectArray *expectedTokenSequencesVal, IOSObjectArray *tokenImageVal) {
  (void) JavaLangRuntimeException_initWithNSString_(self, FreemarkerCoreParseException_initialiseWithFreemarkerCoreToken_withIntArray2_withNSStringArray_(
#line 36
  currentTokenVal, expectedTokenSequencesVal, tokenImageVal));
  self->eol_ = JavaLangSystem_getPropertyWithNSString_withNSString_(
#line 157
  @"line.separator", @"\n");
  
#line 37
  self->currentToken_ = currentTokenVal;
  self->expectedTokenSequences_ = expectedTokenSequencesVal;
  self->tokenImage_ = tokenImageVal;
}


#line 31
FreemarkerCoreParseException *new_FreemarkerCoreParseException_initWithFreemarkerCoreToken_withIntArray2_withNSStringArray_(FreemarkerCoreToken *currentTokenVal, IOSObjectArray *expectedTokenSequencesVal, IOSObjectArray *tokenImageVal) {
  FreemarkerCoreParseException *self = [FreemarkerCoreParseException alloc];
  FreemarkerCoreParseException_initWithFreemarkerCoreToken_withIntArray2_withNSStringArray_(self, currentTokenVal, expectedTokenSequencesVal, tokenImageVal);
  return self;
}


#line 52
void FreemarkerCoreParseException_init(FreemarkerCoreParseException *self) {
  (void) JavaLangRuntimeException_init(self);
  self->eol_ = JavaLangSystem_getPropertyWithNSString_withNSString_(
#line 157
  @"line.separator", @"\n");
}


#line 52
FreemarkerCoreParseException *new_FreemarkerCoreParseException_init() {
  FreemarkerCoreParseException *self = [FreemarkerCoreParseException alloc];
  FreemarkerCoreParseException_init(self);
  return self;
}


#line 57
void FreemarkerCoreParseException_initWithNSString_(FreemarkerCoreParseException *self, NSString *message) {
  (void) JavaLangRuntimeException_initWithNSString_(self, message);
  self->eol_ = JavaLangSystem_getPropertyWithNSString_withNSString_(
#line 157
  @"line.separator", @"\n");
}


#line 57
FreemarkerCoreParseException *new_FreemarkerCoreParseException_initWithNSString_(NSString *message) {
  FreemarkerCoreParseException *self = [FreemarkerCoreParseException alloc];
  FreemarkerCoreParseException_initWithNSString_(self, message);
  return self;
}


#line 62
void FreemarkerCoreParseException_initWithNSString_withId_withId_(FreemarkerCoreParseException *self, NSString *string, id expectedTokenSequencesVal, id keyTk) {
  (void) JavaLangRuntimeException_init(self);
  self->eol_ = JavaLangSystem_getPropertyWithNSString_withNSString_(
#line 157
  @"line.separator", @"\n");
}


#line 62
FreemarkerCoreParseException *new_FreemarkerCoreParseException_initWithNSString_withId_withId_(NSString *string, id expectedTokenSequencesVal, id keyTk) {
  FreemarkerCoreParseException *self = [FreemarkerCoreParseException alloc];
  FreemarkerCoreParseException_initWithNSString_withId_withId_(self, string, expectedTokenSequencesVal, keyTk);
  return self;
}


#line 67
void FreemarkerCoreParseException_initWithId_(FreemarkerCoreParseException *self, id expectedTokenSequencesVal) {
  (void) JavaLangRuntimeException_init(self);
  self->eol_ = JavaLangSystem_getPropertyWithNSString_withNSString_(
#line 157
  @"line.separator", @"\n");
}


#line 67
FreemarkerCoreParseException *new_FreemarkerCoreParseException_initWithId_(id expectedTokenSequencesVal) {
  FreemarkerCoreParseException *self = [FreemarkerCoreParseException alloc];
  FreemarkerCoreParseException_initWithId_(self, expectedTokenSequencesVal);
  return self;
}


#line 72
void FreemarkerCoreParseException_initWithNSString_withId_(FreemarkerCoreParseException *self, NSString *string, id expectedTokenSequencesVal) {
  (void) JavaLangRuntimeException_init(self);
  self->eol_ = JavaLangSystem_getPropertyWithNSString_withNSString_(
#line 157
  @"line.separator", @"\n");
}


#line 72
FreemarkerCoreParseException *new_FreemarkerCoreParseException_initWithNSString_withId_(NSString *string, id expectedTokenSequencesVal) {
  FreemarkerCoreParseException *self = [FreemarkerCoreParseException alloc];
  FreemarkerCoreParseException_initWithNSString_withId_(self, string, expectedTokenSequencesVal);
  return self;
}


#line 77
void FreemarkerCoreParseException_initWithNSString_withFreemarkerTemplateTemplate_withInt_withInt_withInt_withInt_(FreemarkerCoreParseException *self, NSString *string, FreemarkerTemplateTemplate *template_, jint beginLine, jint beginColumn, jint endLine, jint endColumn) {
  (void) JavaLangRuntimeException_init(self);
  self->eol_ = JavaLangSystem_getPropertyWithNSString_withNSString_(
#line 157
  @"line.separator", @"\n");
}


#line 77
FreemarkerCoreParseException *new_FreemarkerCoreParseException_initWithNSString_withFreemarkerTemplateTemplate_withInt_withInt_withInt_withInt_(NSString *string, FreemarkerTemplateTemplate *template_, jint beginLine, jint beginColumn, jint endLine, jint endColumn) {
  FreemarkerCoreParseException *self = [FreemarkerCoreParseException alloc];
  FreemarkerCoreParseException_initWithNSString_withFreemarkerTemplateTemplate_withInt_withInt_withInt_withInt_(self, string, template_, beginLine, beginColumn, endLine, endColumn);
  return self;
}


#line 111
NSString *FreemarkerCoreParseException_initialiseWithFreemarkerCoreToken_withIntArray2_withNSStringArray_(FreemarkerCoreToken *currentToken, IOSObjectArray *expectedTokenSequences, IOSObjectArray *tokenImage) {
  FreemarkerCoreParseException_initialize();
  
#line 114
  NSString *eol = JavaLangSystem_getPropertyWithNSString_withNSString_(@"line.separator", @"\n");
  JavaLangStringBuffer *expected = new_JavaLangStringBuffer_init();
  jint maxSize = 0;
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(expectedTokenSequences))->size_; i++) {
    if (maxSize < ((IOSIntArray *) nil_chk(IOSObjectArray_Get(expectedTokenSequences, i)))->size_) {
      maxSize = ((IOSIntArray *) nil_chk(IOSObjectArray_Get(expectedTokenSequences, i)))->size_;
    }
    for (jint j = 0; j < ((IOSIntArray *) nil_chk(IOSObjectArray_Get(expectedTokenSequences, i)))->size_; j++) {
      (void) [((JavaLangStringBuffer *) nil_chk([expected appendWithNSString:IOSObjectArray_Get(nil_chk(tokenImage), IOSIntArray_Get(nil_chk(IOSObjectArray_Get(expectedTokenSequences, i)), j))])) appendWithChar:' '];
    }
    if (IOSIntArray_Get(nil_chk(IOSObjectArray_Get(expectedTokenSequences, i)), ((IOSIntArray *) nil_chk(IOSObjectArray_Get(expectedTokenSequences, i)))->size_ - 1) != 0) {
      (void) [expected appendWithNSString:@"..."];
    }
    (void) [((JavaLangStringBuffer *) nil_chk([expected appendWithNSString:eol])) appendWithNSString:@"    "];
  }
  NSString *retval = @"Encountered \"";
  FreemarkerCoreToken *tok = ((FreemarkerCoreToken *) nil_chk(currentToken))->next_;
  for (jint i = 0; i < maxSize; i++) {
    if (i != 0) retval = JreStrcat("$C", retval, ' ');
    if (((FreemarkerCoreToken *) nil_chk(tok))->kind_ == 0) {
      retval = JreStrcat("$$", retval, IOSObjectArray_Get(nil_chk(tokenImage), 0));
      break;
    }
    retval = JreStrcat("$$", retval, JreStrcat("C$", ' ', IOSObjectArray_Get(nil_chk(tokenImage), tok->kind_)));
    retval = JreStrcat("$$", retval, @" \"");
    retval = JreStrcat("$$", retval, FreemarkerCoreParseException_add_escapesWithNSString_(tok->image_));
    retval = JreStrcat("$$", retval, @" \"");
    tok = tok->next_;
  }
  retval = JreStrcat("$$", retval, JreStrcat("$I$I", @"\" at line ", ((FreemarkerCoreToken *) nil_chk(currentToken->next_))->beginLine_, @", column ", currentToken->next_->beginColumn_));
  retval = JreStrcat("$$", retval, JreStrcat("C$", '.', eol));
  if (expectedTokenSequences->size_ == 1) {
    retval = JreStrcat("$$", retval, JreStrcat("$$$", @"Was expecting:", eol, @"    "));
  }
  else {
    
#line 148
    retval = JreStrcat("$$", retval, JreStrcat("$$$", @"Was expecting one of:", eol, @"    "));
  }
  retval = JreStrcat("$$", retval, [expected description]);
  return retval;
}


#line 172
NSString *FreemarkerCoreParseException_add_escapesWithNSString_(NSString *str) {
  FreemarkerCoreParseException_initialize();
  
#line 173
  JavaLangStringBuffer *retval = new_JavaLangStringBuffer_init();
  jchar ch;
  for (jint i = 0; i < ((jint) [((NSString *) nil_chk(str)) length]); i++) {
    switch ([str charAtWithInt:i]) {
      
#line 178
      case 0:
      continue;
      case 0x0008:
      (void) [retval appendWithNSString:@"\\b"];
      continue;
      case 0x0009:
      (void) [retval appendWithNSString:@"\\t"];
      continue;
      case 0x000a:
      (void) [retval appendWithNSString:@"\\n"];
      continue;
      case 0x000c:
      (void) [retval appendWithNSString:@"\\f"];
      continue;
      case 0x000d:
      (void) [retval appendWithNSString:@"\\r"];
      continue;
      case '"':
      (void) [retval appendWithNSString:@"\\\""];
      continue;
      case '\'':
      (void) [retval appendWithNSString:@"\\'"];
      continue;
      case '\\':
      (void) [retval appendWithNSString:@"\\\\"];
      continue;
      default:
      if ((ch = [str charAtWithInt:i]) < (jint) 0x20 || ch > (jint) 0x7e) {
        NSString *s = JreStrcat("$$", @"0000", JavaLangInteger_toStringWithInt_withInt_(ch, 16));
        (void) [retval appendWithNSString:JreStrcat("$$", @"\\u", [s substring:((jint) [s length]) - 4 endIndex:((jint) [s length])])];
      }
      else {
        
#line 209
        (void) [retval appendWithChar:ch];
      }
      continue;
    }
  }
  return [retval description];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreParseException)
