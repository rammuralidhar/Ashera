//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/ListElseContainer.java
//


#include "ElseOfList.h"
#include "Environment.h"
#include "IOSClass.h"
#include "IteratorBlock.h"
#include "J2ObjC_source.h"
#include "ListElseContainer.h"
#include "ParameterRole.h"
#include "TemplateElement.h"
#include "TemplateException.h"
#include "java/io/IOException.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/StringBuffer.h"

#line 0 "/Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/ListElseContainer.java"

@interface FreemarkerCoreListElseContainer () {
 @public
  FreemarkerCoreIteratorBlock *listPart_;
  FreemarkerCoreElseOfList *elsePart_;
}

@end

J2OBJC_FIELD_SETTER(FreemarkerCoreListElseContainer, listPart_, FreemarkerCoreIteratorBlock *)
J2OBJC_FIELD_SETTER(FreemarkerCoreListElseContainer, elsePart_, FreemarkerCoreElseOfList *)


#line 22
@implementation FreemarkerCoreListElseContainer


#line 27
- (instancetype)initWithFreemarkerCoreIteratorBlock:(FreemarkerCoreIteratorBlock *)listPart
                       withFreemarkerCoreElseOfList:(FreemarkerCoreElseOfList *)elsePart {
  FreemarkerCoreListElseContainer_initWithFreemarkerCoreIteratorBlock_withFreemarkerCoreElseOfList_(self, listPart, elsePart);
  return self;
}


#line 35
- (void)acceptWithFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env {
  if (![((FreemarkerCoreIteratorBlock *) nil_chk(listPart_)) acceptWithResultWithFreemarkerCoreEnvironment:env]) {
    [((FreemarkerCoreElseOfList *) nil_chk(elsePart_)) acceptWithFreemarkerCoreEnvironment:env];
  }
}

- (jboolean)isNestedBlockRepeater {
  return NO;
}

- (NSString *)dumpWithBoolean:(jboolean)canonical {
  if (canonical) {
    JavaLangStringBuffer *buf = new_JavaLangStringBuffer_init();
    jint ln = [self getRegulatedChildCount];
    for (jint i = 0; i < ln; i++) {
      FreemarkerCoreTemplateElement *element = [self getRegulatedChildWithInt:i];
      (void) [buf appendWithNSString:[((FreemarkerCoreTemplateElement *) nil_chk(element)) dumpWithBoolean:canonical]];
    }
    (void) [buf appendWithNSString:@"</#list>"];
    return [buf description];
  }
  else {
    
#line 56
    return [self getNodeTypeSymbol];
  }
}


#line 60
- (NSString *)getNodeTypeSymbol {
  return @"#list-#else-container";
}

- (jint)getParameterCount {
  return 0;
}

- (id)getParameterValueWithInt:(jint)idx {
  @throw new_JavaLangIndexOutOfBoundsException_init();
}

- (FreemarkerCoreParameterRole *)getParameterRoleWithInt:(jint)idx {
  @throw new_JavaLangIndexOutOfBoundsException_init();
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithFreemarkerCoreIteratorBlock:withFreemarkerCoreElseOfList:", "ListElseContainer", NULL, 0x1, NULL, NULL },
    { "acceptWithFreemarkerCoreEnvironment:", "accept", "V", 0x0, "Lfreemarker.template.TemplateException;Ljava.io.IOException;", NULL },
    { "isNestedBlockRepeater", NULL, "Z", 0x0, NULL, NULL },
    { "dumpWithBoolean:", "dump", "Ljava.lang.String;", 0x4, NULL, NULL },
    { "getNodeTypeSymbol", NULL, "Ljava.lang.String;", 0x0, NULL, NULL },
    { "getParameterCount", NULL, "I", 0x0, NULL, NULL },
    { "getParameterValueWithInt:", "getParameterValue", "Ljava.lang.Object;", 0x0, NULL, NULL },
    { "getParameterRoleWithInt:", "getParameterRole", "Lfreemarker.core.ParameterRole;", 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "listPart_", NULL, 0x12, "Lfreemarker.core.IteratorBlock;", NULL, NULL,  },
    { "elsePart_", NULL, 0x12, "Lfreemarker.core.ElseOfList;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerCoreListElseContainer = { 2, "ListElseContainer", "freemarker.core", NULL, 0x0, 8, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerCoreListElseContainer;
}

@end


#line 27
void FreemarkerCoreListElseContainer_initWithFreemarkerCoreIteratorBlock_withFreemarkerCoreElseOfList_(FreemarkerCoreListElseContainer *self, FreemarkerCoreIteratorBlock *listPart, FreemarkerCoreElseOfList *elsePart) {
  (void) FreemarkerCoreTemplateElement_init(self);
  
#line 28
  [self setRegulatedChildBufferCapacityWithInt:2];
  [self addRegulatedChildWithFreemarkerCoreTemplateElement:listPart];
  [self addRegulatedChildWithFreemarkerCoreTemplateElement:elsePart];
  self->listPart_ = listPart;
  self->elsePart_ = elsePart;
}


#line 27
FreemarkerCoreListElseContainer *new_FreemarkerCoreListElseContainer_initWithFreemarkerCoreIteratorBlock_withFreemarkerCoreElseOfList_(FreemarkerCoreIteratorBlock *listPart, FreemarkerCoreElseOfList *elsePart) {
  FreemarkerCoreListElseContainer *self = [FreemarkerCoreListElseContainer alloc];
  FreemarkerCoreListElseContainer_initWithFreemarkerCoreIteratorBlock_withFreemarkerCoreElseOfList_(self, listPart, elsePart);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreListElseContainer)
