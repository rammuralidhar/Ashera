//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/cache/TemplateLookupStrategy.java
//

#ifndef _FreemarkerCacheTemplateLookupStrategy_H_
#define _FreemarkerCacheTemplateLookupStrategy_H_

#include "J2ObjC_header.h"

@class FreemarkerCacheTemplateLookupContext;
@class FreemarkerCacheTemplateLookupResult;

/**
 @brief Finds the TemplateLoader -level (storage-level) template source for the template name witch which the template was requested (as in Configuration#getTemplate(String) ).
 This usually means trying various TemplateLoader -level template names (so called source names; see also Template#getSourceName() ) that were deduced from the requested name. Trying a name usually means calling TemplateLookupContext#lookupWithAcquisitionStrategy(String) with it and checking the value of TemplateLookupResult#isPositive() . <p> Before you write your own lookup strategy, know that: <ul> <li>A template lookup strategy meant to operate solely with template names, not with TemplateLoader -s directly. Basically, it's a mapping between the template names that templates and API-s like Configuration#getTemplate(String) see, and those that the underlying TemplateLoader sees. <li>A template lookup strategy doesn't influence the template's name ( Template#getName() ), which is the normalized form of the template name as it was requested (with Configuration#getTemplate(String) , etc.). It only influences the so called source name of the template ( Template#getSourceName() ). The template's name is used as the basis for resolving relative inclusions/imports in the template. The source name is pretty much only used in error messages as error location, and of course, to actually load the template "file". <li>Understand the impact of the last point if your template lookup strategy fiddles not only with the file name part of the template name, but also with the directory part. For example, one may want to map "foo.ftl" to "en/foo.ftl", "fr/foo.ftl", etc. That's legal, but the result is kind of like if you had several root directories ("en/", "fr/", etc.) that are layered over each other to form a single merged directory. (This is what's desirable in typical applications, yet it can be confusing.) </ul>
 @since 2.3.22
 */
@interface FreemarkerCacheTemplateLookupStrategy : NSObject

#pragma mark Public

- (instancetype)init;

/**
 @brief Finds the template source that matches the template name, locale (if not <code>null</code> ) and other parameters specified in the TemplateLookupContext .
 See also the class-level TemplateLookupStrategy documentation to understand lookup strategies more.
 @param ctx Contains the parameters for which the matching template need to be found, and operations that are needed to implement the strategy. Some of the important input parameters are: TemplateLookupContext#getTemplateName() , TemplateLookupContext#getTemplateLocale() . The most important operations are TemplateLookupContext#lookupWithAcquisitionStrategy(String) and TemplateLookupContext#createNegativeLookupResult() . (Note that you deliberately can't use TemplateLoader -s directly to implement lookup.)
 @return Usually the return value of TemplateLookupContext#lookupWithAcquisitionStrategy(String) , or <code>TemplateLookupContext#createNegativeLookupResult()</code> if no matching template exists. Can't be <code>null</code> .
 */
- (FreemarkerCacheTemplateLookupResult *)lookupWithFreemarkerCacheTemplateLookupContext:(FreemarkerCacheTemplateLookupContext *)ctx;

@end

J2OBJC_STATIC_INIT(FreemarkerCacheTemplateLookupStrategy)

FOUNDATION_EXPORT FreemarkerCacheTemplateLookupStrategy *FreemarkerCacheTemplateLookupStrategy_DEFAULT_2_3_0_;
J2OBJC_STATIC_FIELD_GETTER(FreemarkerCacheTemplateLookupStrategy, DEFAULT_2_3_0_, FreemarkerCacheTemplateLookupStrategy *)

FOUNDATION_EXPORT void FreemarkerCacheTemplateLookupStrategy_init(FreemarkerCacheTemplateLookupStrategy *self);

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerCacheTemplateLookupStrategy)

#endif // _FreemarkerCacheTemplateLookupStrategy_H_
