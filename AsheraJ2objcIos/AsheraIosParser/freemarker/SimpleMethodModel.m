//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/ext/beans/SimpleMethodModel.java
//


#include "BeansWrapper.h"
#include "ClassUtil.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "SimpleMethod.h"
#include "SimpleMethodModel.h"
#include "SimpleNumber.h"
#include "TemplateModel.h"
#include "TemplateModelException.h"
#include "_MethodUtil.h"
#include "java/lang/Character.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/Void.h"
#include "java/lang/reflect/Member.h"
#include "java/lang/reflect/Method.h"
#include "java/util/Collections.h"
#include "java/util/List.h"

#line 0 "/Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/ext/beans/SimpleMethodModel.java"

@interface FreemarkerExtBeansSimpleMethodModel () {
 @public
  id object_;
  FreemarkerExtBeansBeansWrapper *wrapper_;
}

@end

J2OBJC_FIELD_SETTER(FreemarkerExtBeansSimpleMethodModel, object_, id)
J2OBJC_FIELD_SETTER(FreemarkerExtBeansSimpleMethodModel, wrapper_, FreemarkerExtBeansBeansWrapper *)


#line 38
@implementation FreemarkerExtBeansSimpleMethodModel


#line 54
- (instancetype)initWithId:(id)object
 withJavaLangReflectMethod:(JavaLangReflectMethod *)method
         withIOSClassArray:(IOSObjectArray *)argTypes
withFreemarkerExtBeansBeansWrapper:(FreemarkerExtBeansBeansWrapper *)wrapper {
  FreemarkerExtBeansSimpleMethodModel_initWithId_withJavaLangReflectMethod_withIOSClassArray_withFreemarkerExtBeansBeansWrapper_(self, object, method, argTypes, wrapper);
  return self;
}


#line 65
- (id)execWithJavaUtilList:(id<JavaUtilList>)arguments {
  
#line 69
  @try {
    
#line 71
    return [((FreemarkerExtBeansBeansWrapper *) nil_chk(wrapper_)) invokeMethodWithId:object_ withJavaLangReflectMethod:(JavaLangReflectMethod *) check_class_cast([self getMember], [JavaLangReflectMethod class]) withNSObjectArray:
#line 72
    [self unwrapArgumentsWithJavaUtilList:arguments withFreemarkerExtBeansBeansWrapper:wrapper_]];
  }
  @catch (FreemarkerTemplateTemplateModelException *e) {
    
#line 76
    @throw e;
  }
  @catch (JavaLangException *e) {
    
#line 80
    @throw FreemarkerExtBeans_MethodUtil_newInvocationTemplateModelExceptionWithId_withJavaLangReflectMember_withJavaLangThrowable_(object_, [self getMember], e);
  }
}


#line 84
- (id<FreemarkerTemplateTemplateModel>)getWithInt:(jint)index {
  
#line 86
  return (id<FreemarkerTemplateTemplateModel>) check_protocol_cast([self execWithJavaUtilList:JavaUtilCollections_singletonListWithId_(new_FreemarkerTemplateSimpleNumber_initWithNSNumber_(new_JavaLangInteger_initWithInt_(
#line 87
  index)))], @protocol(FreemarkerTemplateTemplateModel));
}


#line 90
- (jint)size {
  @throw new_FreemarkerTemplateTemplateModelException_initWithNSString_(JreStrcat("$$$", @"Getting the number of items or enumerating the items is not supported on this ", FreemarkerTemplateUtilityClassUtil_getFTLTypeDescriptionWithFreemarkerTemplateTemplateModel_(
#line 93
  self), @" value.\n(Hint 1: Maybe you wanted to call this method first and then do something with its return value. Hint 2: Getting items by intex possibly works, hence it's a \"+sequence\".)"));
}


#line 100
- (NSString *)description {
  return [((id<JavaLangReflectMember>) nil_chk([self getMember])) description];
}


#line 107
- (IOSObjectArray *)explainTypeErrorWithIOSClassArray:(IOSObjectArray *)expectedClasses {
  id<JavaLangReflectMember> member = [self getMember];
  if (!([member isKindOfClass:[JavaLangReflectMethod class]])) {
    return nil;
  }
  JavaLangReflectMethod *m = (JavaLangReflectMethod *) check_class_cast(member, [JavaLangReflectMethod class]);
  
#line 114
  IOSClass *returnType = [((JavaLangReflectMethod *) nil_chk(m)) getReturnType];
  if (returnType == nil || returnType == [IOSClass voidClass] || returnType == JavaLangVoid_class_()) {
    return nil;
  }
  
#line 119
  NSString *mName = [m getName];
  if ([((NSString *) nil_chk(mName)) hasPrefix:@"get"] && ((jint) [mName length]) > 3 && JavaLangCharacter_isUpperCaseWithChar_([mName charAtWithInt:3]) &&
#line 121
  (((IOSObjectArray *) nil_chk([m getParameterTypes]))->size_ == 0)) {
    return [IOSObjectArray newArrayWithObjects:(id[]){
#line 123
      @"Maybe using obj.something instead of obj.getSomething will yield the desired value." } count:1 type:NSObject_class_()];
    }
    else
#line 124
    if ([mName hasPrefix:@"is"] && ((jint) [mName length]) > 2 && JavaLangCharacter_isUpperCaseWithChar_([mName charAtWithInt:2]) &&
#line 125
    (((IOSObjectArray *) nil_chk([m getParameterTypes]))->size_ == 0)) {
      return [IOSObjectArray newArrayWithObjects:(id[]){
#line 127
        @"Maybe using obj.something instead of obj.isSomething will yield the desired value." } count:1 type:NSObject_class_()];
      }
      else {
        
#line 129
        return [IOSObjectArray newArrayWithObjects:(id[]){
#line 130
          @"Maybe using obj.something(",
#line 131
          (((IOSObjectArray *) nil_chk([m getParameterTypes]))->size_ != 0 ? @"params" : @""),
#line 132
          @") instead of obj.something will yield the desired value" } count:3 type:NSObject_class_()];
        }
      }

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithId:withJavaLangReflectMethod:withIOSClassArray:withFreemarkerExtBeansBeansWrapper:", "SimpleMethodModel", NULL, 0x0, NULL, NULL },
    { "execWithJavaUtilList:", "exec", "Ljava.lang.Object;", 0x1, "Lfreemarker.template.TemplateModelException;", NULL },
    { "getWithInt:", "get", "Lfreemarker.template.TemplateModel;", 0x1, "Lfreemarker.template.TemplateModelException;", NULL },
    { "size", NULL, "I", 0x1, "Lfreemarker.template.TemplateModelException;", NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "explainTypeErrorWithIOSClassArray:", "explainTypeError", "[Ljava.lang.Object;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "object_", NULL, 0x12, "Ljava.lang.Object;", NULL, NULL,  },
    { "wrapper_", NULL, 0x12, "Lfreemarker.ext.beans.BeansWrapper;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerExtBeansSimpleMethodModel = { 2, "SimpleMethodModel", "freemarker.ext.beans", NULL, 0x11, 6, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerExtBeansSimpleMethodModel;
}

@end


#line 54
void FreemarkerExtBeansSimpleMethodModel_initWithId_withJavaLangReflectMethod_withIOSClassArray_withFreemarkerExtBeansBeansWrapper_(FreemarkerExtBeansSimpleMethodModel *self, id object, JavaLangReflectMethod *method, IOSObjectArray *argTypes, FreemarkerExtBeansBeansWrapper *wrapper) {
  (void) FreemarkerExtBeansSimpleMethod_initWithJavaLangReflectMember_withIOSClassArray_(self,
#line 57
  method, argTypes);
  self->object_ = object;
  self->wrapper_ = wrapper;
}


#line 54
FreemarkerExtBeansSimpleMethodModel *new_FreemarkerExtBeansSimpleMethodModel_initWithId_withJavaLangReflectMethod_withIOSClassArray_withFreemarkerExtBeansBeansWrapper_(id object, JavaLangReflectMethod *method, IOSObjectArray *argTypes, FreemarkerExtBeansBeansWrapper *wrapper) {
  FreemarkerExtBeansSimpleMethodModel *self = [FreemarkerExtBeansSimpleMethodModel alloc];
  FreemarkerExtBeansSimpleMethodModel_initWithId_withJavaLangReflectMethod_withIOSClassArray_withFreemarkerExtBeansBeansWrapper_(self, object, method, argTypes, wrapper);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerExtBeansSimpleMethodModel)
