//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/IfBlock.java
//


#include "ConditionalBlock.h"
#include "Environment.h"
#include "Expression.h"
#include "IOSClass.h"
#include "IfBlock.h"
#include "J2ObjC_source.h"
#include "ParameterRole.h"
#include "ParseException.h"
#include "Template.h"
#include "TemplateElement.h"
#include "TemplateException.h"
#include "TemplateObject.h"
#include "java/io/IOException.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/StringBuffer.h"

#line 0 "/Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/IfBlock.java"


#line 28
@implementation FreemarkerCoreIfBlock

- (instancetype)initWithFreemarkerCoreConditionalBlock:(FreemarkerCoreConditionalBlock *)block {
  FreemarkerCoreIfBlock_initWithFreemarkerCoreConditionalBlock_(self, block);
  return self;
}


#line 36
- (void)addBlockWithFreemarkerCoreConditionalBlock:(FreemarkerCoreConditionalBlock *)block {
  [self addRegulatedChildWithFreemarkerCoreTemplateElement:block];
}

- (void)acceptWithFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env {
  jint ln = [self getRegulatedChildCount];
  for (jint i = 0; i < ln; i++) {
    FreemarkerCoreConditionalBlock *cblock = (FreemarkerCoreConditionalBlock *) check_class_cast([self getRegulatedChildWithInt:i], [FreemarkerCoreConditionalBlock class]);
    FreemarkerCoreExpression *condition = ((FreemarkerCoreConditionalBlock *) nil_chk(cblock))->condition_;
    [((FreemarkerCoreEnvironment *) nil_chk(env)) replaceElementStackTopWithFreemarkerCoreTemplateElement:cblock];
    if (condition == nil || [condition evalToBooleanWithFreemarkerCoreEnvironment:env]) {
      if ([cblock getNestedBlock] != nil) {
        [env visitByHiddingParentWithFreemarkerCoreTemplateElement:[cblock getNestedBlock]];
      }
      return;
    }
  }
}

- (FreemarkerCoreTemplateElement *)postParseCleanupWithBoolean:(jboolean)stripWhitespace {
  
#line 58
  if ([self getRegulatedChildCount] == 1) {
    FreemarkerCoreConditionalBlock *cblock = (FreemarkerCoreConditionalBlock *) check_class_cast([self getRegulatedChildWithInt:0], [FreemarkerCoreConditionalBlock class]);
    ((FreemarkerCoreConditionalBlock *) nil_chk(cblock))->isLonelyIf_ = YES;
    [cblock setLocationWithFreemarkerTemplateTemplate:[self getTemplate] withFreemarkerCoreTemplateObject:cblock withFreemarkerCoreTemplateObject:self];
    return [cblock postParseCleanupWithBoolean:stripWhitespace];
  }
  else {
    return [super postParseCleanupWithBoolean:stripWhitespace];
  }
}

- (NSString *)dumpWithBoolean:(jboolean)canonical {
  if (canonical) {
    JavaLangStringBuffer *buf = new_JavaLangStringBuffer_init();
    jint ln = [self getRegulatedChildCount];
    for (jint i = 0; i < ln; i++) {
      FreemarkerCoreConditionalBlock *cblock = (FreemarkerCoreConditionalBlock *) check_class_cast([self getRegulatedChildWithInt:i], [FreemarkerCoreConditionalBlock class]);
      (void) [buf appendWithNSString:[((FreemarkerCoreConditionalBlock *) nil_chk(cblock)) dumpWithBoolean:canonical]];
    }
    (void) [buf appendWithNSString:@"</#if>"];
    return [buf description];
  }
  else {
    
#line 80
    return [self getNodeTypeSymbol];
  }
}


#line 84
- (NSString *)getNodeTypeSymbol {
  return @"#if-#elseif-#else-container";
}

- (jint)getParameterCount {
  return 0;
}

- (id)getParameterValueWithInt:(jint)idx {
  @throw new_JavaLangIndexOutOfBoundsException_init();
}

- (FreemarkerCoreParameterRole *)getParameterRoleWithInt:(jint)idx {
  @throw new_JavaLangIndexOutOfBoundsException_init();
}

- (jboolean)isShownInStackTrace {
  return NO;
}

- (jboolean)isNestedBlockRepeater {
  return NO;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithFreemarkerCoreConditionalBlock:", "IfBlock", NULL, 0x0, NULL, NULL },
    { "addBlockWithFreemarkerCoreConditionalBlock:", "addBlock", "V", 0x0, NULL, NULL },
    { "acceptWithFreemarkerCoreEnvironment:", "accept", "V", 0x0, "Lfreemarker.template.TemplateException;Ljava.io.IOException;", NULL },
    { "postParseCleanupWithBoolean:", "postParseCleanup", "Lfreemarker.core.TemplateElement;", 0x0, "Lfreemarker.core.ParseException;", NULL },
    { "dumpWithBoolean:", "dump", "Ljava.lang.String;", 0x4, NULL, NULL },
    { "getNodeTypeSymbol", NULL, "Ljava.lang.String;", 0x0, NULL, NULL },
    { "getParameterCount", NULL, "I", 0x0, NULL, NULL },
    { "getParameterValueWithInt:", "getParameterValue", "Ljava.lang.Object;", 0x0, NULL, NULL },
    { "getParameterRoleWithInt:", "getParameterRole", "Lfreemarker.core.ParameterRole;", 0x0, NULL, NULL },
    { "isShownInStackTrace", NULL, "Z", 0x0, NULL, NULL },
    { "isNestedBlockRepeater", NULL, "Z", 0x0, NULL, NULL },
  };
  static const J2ObjcClassInfo _FreemarkerCoreIfBlock = { 2, "IfBlock", "freemarker.core", NULL, 0x10, 11, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerCoreIfBlock;
}

@end


#line 30
void FreemarkerCoreIfBlock_initWithFreemarkerCoreConditionalBlock_(FreemarkerCoreIfBlock *self, FreemarkerCoreConditionalBlock *block) {
  (void) FreemarkerCoreTemplateElement_init(self);
  [self setRegulatedChildBufferCapacityWithInt:1];
  [self addBlockWithFreemarkerCoreConditionalBlock:block];
}


#line 30
FreemarkerCoreIfBlock *new_FreemarkerCoreIfBlock_initWithFreemarkerCoreConditionalBlock_(FreemarkerCoreConditionalBlock *block) {
  FreemarkerCoreIfBlock *self = [FreemarkerCoreIfBlock alloc];
  FreemarkerCoreIfBlock_initWithFreemarkerCoreConditionalBlock_(self, block);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreIfBlock)
