//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/cache/ClassTemplateLoader.java
//


#include "ClassTemplateLoader.h"
#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "NullArgumentException.h"
#include "StringUtil.h"
#include "TemplateLoaderUtils.h"
#include "URLTemplateLoader.h"
#include "java/lang/ClassLoader.h"
#include "java/net/URL.h"

#line 0 "/Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/cache/ClassTemplateLoader.java"

@interface FreemarkerCacheClassTemplateLoader () {
 @public
  IOSClass *resourceLoaderClass_;
  JavaLangClassLoader *classLoader_;
  NSString *basePackagePath_;
}

- (instancetype)initWithIOSClass:(IOSClass *)resourceLoaderClass
                     withBoolean:(jboolean)allowNullBaseClass
         withJavaLangClassLoader:(JavaLangClassLoader *)classLoader
                    withNSString:(NSString *)basePackagePath;

+ (jboolean)isSchemelessWithNSString:(NSString *)fullPath;

@end

J2OBJC_FIELD_SETTER(FreemarkerCacheClassTemplateLoader, resourceLoaderClass_, IOSClass *)
J2OBJC_FIELD_SETTER(FreemarkerCacheClassTemplateLoader, classLoader_, JavaLangClassLoader *)
J2OBJC_FIELD_SETTER(FreemarkerCacheClassTemplateLoader, basePackagePath_, NSString *)

__attribute__((unused)) static void FreemarkerCacheClassTemplateLoader_initWithIOSClass_withBoolean_withJavaLangClassLoader_withNSString_(FreemarkerCacheClassTemplateLoader *self, IOSClass *resourceLoaderClass, jboolean allowNullBaseClass, JavaLangClassLoader *classLoader, NSString *basePackagePath);

__attribute__((unused)) static FreemarkerCacheClassTemplateLoader *new_FreemarkerCacheClassTemplateLoader_initWithIOSClass_withBoolean_withJavaLangClassLoader_withNSString_(IOSClass *resourceLoaderClass, jboolean allowNullBaseClass, JavaLangClassLoader *classLoader, NSString *basePackagePath) NS_RETURNS_RETAINED;

__attribute__((unused)) static jboolean FreemarkerCacheClassTemplateLoader_isSchemelessWithNSString_(NSString *fullPath);


#line 29
@implementation FreemarkerCacheClassTemplateLoader


#line 49
- (instancetype)init {
  FreemarkerCacheClassTemplateLoader_init(self);
  return self;
}


#line 64
- (instancetype)initWithIOSClass:(IOSClass *)resourceLoaderClass {
  FreemarkerCacheClassTemplateLoader_initWithIOSClass_(self, resourceLoaderClass);
  return self;
}


#line 94
- (instancetype)initWithIOSClass:(IOSClass *)resourceLoaderClass
                    withNSString:(NSString *)basePackagePath {
  FreemarkerCacheClassTemplateLoader_initWithIOSClass_withNSString_(self, resourceLoaderClass, basePackagePath);
  return self;
}


#line 106
- (instancetype)initWithJavaLangClassLoader:(JavaLangClassLoader *)classLoader
                               withNSString:(NSString *)basePackagePath {
  FreemarkerCacheClassTemplateLoader_initWithJavaLangClassLoader_withNSString_(self, classLoader, basePackagePath);
  return self;
}


#line 110
- (instancetype)initWithIOSClass:(IOSClass *)resourceLoaderClass
                     withBoolean:(jboolean)allowNullBaseClass
         withJavaLangClassLoader:(JavaLangClassLoader *)classLoader
                    withNSString:(NSString *)basePackagePath {
  FreemarkerCacheClassTemplateLoader_initWithIOSClass_withBoolean_withJavaLangClassLoader_withNSString_(self, resourceLoaderClass, allowNullBaseClass, classLoader, basePackagePath);
  return self;
}


#line 132
- (JavaNetURL *)getURLWithNSString:(NSString *)name {
  
#line 134
  NSString *fullPath = JreStrcat("$$", basePackagePath_, name);
  
#line 137
  if ([((NSString *) nil_chk(basePackagePath_)) isEqual:@"/"] && !FreemarkerCacheClassTemplateLoader_isSchemelessWithNSString_(fullPath)) {
    return nil;
  }
  
#line 141
  return resourceLoaderClass_ != nil ? [resourceLoaderClass_ getResource:fullPath] : [((JavaLangClassLoader *) nil_chk(classLoader_)) getResourceWithNSString:
#line 142
  fullPath];
}


#line 145
+ (jboolean)isSchemelessWithNSString:(NSString *)fullPath {
  return FreemarkerCacheClassTemplateLoader_isSchemelessWithNSString_(fullPath);
}


#line 168
- (NSString *)description {
  return JreStrcat("$C$$$$C", FreemarkerCacheTemplateLoaderUtils_getClassNameForToStringWithFreemarkerCacheTemplateLoader_(self), '(',
#line 170
  (resourceLoaderClass_ != nil ? JreStrcat("$$", @"resourceLoaderClass=",
#line 171
  [resourceLoaderClass_ getName]) : JreStrcat("$$", @"classLoader=", FreemarkerTemplateUtilityStringUtil_jQuoteWithId_(
#line 172
  classLoader_))), @", basePackagePath=", FreemarkerTemplateUtilityStringUtil_jQuoteWithNSString_(
#line 175
  basePackagePath_),
#line 176
  (resourceLoaderClass_ != nil ?
#line 177
  ([((NSString *) nil_chk(basePackagePath_)) hasPrefix:@"/"] ? @"" : @" /* relatively to resourceLoaderClass pkg */") :
#line 178
  @""), ')');
}


#line 189
- (IOSClass *)getResourceLoaderClass {
  return resourceLoaderClass_;
}


#line 199
- (JavaLangClassLoader *)getClassLoader {
  return classLoader_;
}


#line 209
- (NSString *)getBasePackagePath {
  return basePackagePath_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "ClassTemplateLoader", NULL, 0x1, NULL, NULL },
    { "initWithIOSClass:", "ClassTemplateLoader", NULL, 0x1, NULL, NULL },
    { "initWithIOSClass:withNSString:", "ClassTemplateLoader", NULL, 0x1, NULL, NULL },
    { "initWithJavaLangClassLoader:withNSString:", "ClassTemplateLoader", NULL, 0x1, NULL, NULL },
    { "initWithIOSClass:withBoolean:withJavaLangClassLoader:withNSString:", "ClassTemplateLoader", NULL, 0x2, NULL, NULL },
    { "getURLWithNSString:", "getURL", "Ljava.net.URL;", 0x4, NULL, NULL },
    { "isSchemelessWithNSString:", "isSchemeless", "Z", 0xa, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getResourceLoaderClass", NULL, "Ljava.lang.Class;", 0x1, NULL, NULL },
    { "getClassLoader", NULL, "Ljava.lang.ClassLoader;", 0x1, NULL, NULL },
    { "getBasePackagePath", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "resourceLoaderClass_", NULL, 0x12, "Ljava.lang.Class;", NULL, NULL,  },
    { "classLoader_", NULL, 0x12, "Ljava.lang.ClassLoader;", NULL, NULL,  },
    { "basePackagePath_", NULL, 0x12, "Ljava.lang.String;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerCacheClassTemplateLoader = { 2, "ClassTemplateLoader", "freemarker.cache", NULL, 0x1, 11, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerCacheClassTemplateLoader;
}

@end


#line 49
void FreemarkerCacheClassTemplateLoader_init(FreemarkerCacheClassTemplateLoader *self) {
  (void) FreemarkerCacheClassTemplateLoader_initWithIOSClass_withBoolean_withJavaLangClassLoader_withNSString_(self, nil, YES, nil, @"/");
}


#line 49
FreemarkerCacheClassTemplateLoader *new_FreemarkerCacheClassTemplateLoader_init() {
  FreemarkerCacheClassTemplateLoader *self = [FreemarkerCacheClassTemplateLoader alloc];
  FreemarkerCacheClassTemplateLoader_init(self);
  return self;
}


#line 64
void FreemarkerCacheClassTemplateLoader_initWithIOSClass_(FreemarkerCacheClassTemplateLoader *self, IOSClass *resourceLoaderClass) {
  (void) FreemarkerCacheClassTemplateLoader_initWithIOSClass_withNSString_(self, resourceLoaderClass, @"");
}


#line 64
FreemarkerCacheClassTemplateLoader *new_FreemarkerCacheClassTemplateLoader_initWithIOSClass_(IOSClass *resourceLoaderClass) {
  FreemarkerCacheClassTemplateLoader *self = [FreemarkerCacheClassTemplateLoader alloc];
  FreemarkerCacheClassTemplateLoader_initWithIOSClass_(self, resourceLoaderClass);
  return self;
}


#line 94
void FreemarkerCacheClassTemplateLoader_initWithIOSClass_withNSString_(FreemarkerCacheClassTemplateLoader *self, IOSClass *resourceLoaderClass, NSString *basePackagePath) {
  (void) FreemarkerCacheClassTemplateLoader_initWithIOSClass_withBoolean_withJavaLangClassLoader_withNSString_(self, resourceLoaderClass, NO, nil, basePackagePath);
}


#line 94
FreemarkerCacheClassTemplateLoader *new_FreemarkerCacheClassTemplateLoader_initWithIOSClass_withNSString_(IOSClass *resourceLoaderClass, NSString *basePackagePath) {
  FreemarkerCacheClassTemplateLoader *self = [FreemarkerCacheClassTemplateLoader alloc];
  FreemarkerCacheClassTemplateLoader_initWithIOSClass_withNSString_(self, resourceLoaderClass, basePackagePath);
  return self;
}


#line 106
void FreemarkerCacheClassTemplateLoader_initWithJavaLangClassLoader_withNSString_(FreemarkerCacheClassTemplateLoader *self, JavaLangClassLoader *classLoader, NSString *basePackagePath) {
  (void) FreemarkerCacheClassTemplateLoader_initWithIOSClass_withBoolean_withJavaLangClassLoader_withNSString_(self, nil, YES, classLoader, basePackagePath);
}


#line 106
FreemarkerCacheClassTemplateLoader *new_FreemarkerCacheClassTemplateLoader_initWithJavaLangClassLoader_withNSString_(JavaLangClassLoader *classLoader, NSString *basePackagePath) {
  FreemarkerCacheClassTemplateLoader *self = [FreemarkerCacheClassTemplateLoader alloc];
  FreemarkerCacheClassTemplateLoader_initWithJavaLangClassLoader_withNSString_(self, classLoader, basePackagePath);
  return self;
}


#line 110
void FreemarkerCacheClassTemplateLoader_initWithIOSClass_withBoolean_withJavaLangClassLoader_withNSString_(FreemarkerCacheClassTemplateLoader *self, IOSClass *resourceLoaderClass, jboolean allowNullBaseClass, JavaLangClassLoader *classLoader, NSString *basePackagePath) {
  (void) FreemarkerCacheURLTemplateLoader_init(self);
  if (!allowNullBaseClass) {
    FreemarkerTemplateUtilityNullArgumentException_checkWithNSString_withId_(@"resourceLoaderClass", resourceLoaderClass);
  }
  FreemarkerTemplateUtilityNullArgumentException_checkWithNSString_withId_(@"basePackagePath", basePackagePath);
  
#line 118
  self->resourceLoaderClass_ = classLoader == nil ? (resourceLoaderClass == nil ? [self getClass] :
#line 119
  resourceLoaderClass) : nil;
  if (self->resourceLoaderClass_ == nil && classLoader == nil) {
    @throw new_FreemarkerTemplateUtilityNullArgumentException_initWithNSString_(@"classLoader");
  }
  self->classLoader_ = classLoader;
  
#line 125
  NSString *canonBasePackagePath = FreemarkerCacheURLTemplateLoader_canonicalizePrefixWithNSString_(basePackagePath);
  if (self->classLoader_ != nil && [((NSString *) nil_chk(canonBasePackagePath)) hasPrefix:@"/"]) {
    canonBasePackagePath = [canonBasePackagePath substring:1];
  }
  self->basePackagePath_ = canonBasePackagePath;
}


#line 110
FreemarkerCacheClassTemplateLoader *new_FreemarkerCacheClassTemplateLoader_initWithIOSClass_withBoolean_withJavaLangClassLoader_withNSString_(IOSClass *resourceLoaderClass, jboolean allowNullBaseClass, JavaLangClassLoader *classLoader, NSString *basePackagePath) {
  FreemarkerCacheClassTemplateLoader *self = [FreemarkerCacheClassTemplateLoader alloc];
  FreemarkerCacheClassTemplateLoader_initWithIOSClass_withBoolean_withJavaLangClassLoader_withNSString_(self, resourceLoaderClass, allowNullBaseClass, classLoader, basePackagePath);
  return self;
}


#line 145
jboolean FreemarkerCacheClassTemplateLoader_isSchemelessWithNSString_(NSString *fullPath) {
  FreemarkerCacheClassTemplateLoader_initialize();
  
#line 146
  jint i = 0;
  jint ln = ((jint) [((NSString *) nil_chk(fullPath)) length]);
  
#line 150
  if (i < ln && [fullPath charAtWithInt:i] == '/') i++;
  
#line 154
  while (i < ln) {
    jchar c = [fullPath charAtWithInt:i];
    if (c == '/') return YES;
    if (c == ':') return NO;
    i++;
  }
  return YES;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCacheClassTemplateLoader)
