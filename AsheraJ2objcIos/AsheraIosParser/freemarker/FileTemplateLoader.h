//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/cache/FileTemplateLoader.java
//

#ifndef _FreemarkerCacheFileTemplateLoader_H_
#define _FreemarkerCacheFileTemplateLoader_H_

#include "J2ObjC_header.h"
#include "TemplateLoader.h"

@class JavaIoFile;
@class JavaIoReader;

/**
 @brief A TemplateLoader that uses files inside a specified directory as the source of templates.
 By default it does security checks on the <em>canonical</em> path that will prevent it serving templates outside that specified directory. If you want symbolic links that point outside the template directory to work, you need to disable this feature by using #FileTemplateLoader(File,boolean) with <code>true</code> second argument, but before that, check the security implications there!
 */
@interface FreemarkerCacheFileTemplateLoader : NSObject < FreemarkerCacheTemplateLoader > {
 @public
  JavaIoFile *baseDir_;
}

#pragma mark Public

/**
 @brief Creates a new file template cache that will use the current directory (the value of the system property <code>user.dir</code> as the base directory for loading templates.
 It will not allow access to template files that are accessible through symlinks that point outside the base directory.
 */
- (instancetype)init;

/**
 @brief Creates a new file template loader that will use the specified directory as the base directory for loading templates.
 It will not allow access to template files that are accessible through symlinks that point outside the base directory.
 @param baseDir the base directory for loading templates
 */
- (instancetype)initWithJavaIoFile:(JavaIoFile *)baseDir;

/**
 @brief Creates a new file template loader that will use the specified directory as the base directory for loading templates.
 See the parameters for allowing symlinks that point outside the base directory.
 @param baseDir the base directory for loading templates
 @param disableCanonicalPathCheck If <code>true</code> , it will not check if the file to be loaded is inside the <code>baseDir</code> or not, according the <em>canonical</em> paths of the <code>baseDir</code> and the file to load. Note that Configuration#getTemplate(String) and (its overloads) already prevents backing out from the template directory with paths like <code>/../../../etc/password</code> , however, that can be circumvented with symbolic links or other file system features. If you really want to use symbolic links that point outside the <code>baseDir</code> , set this parameter to <code>true</code> , but then be very careful with template paths that are supplied by the visitor or an external system.
 */
- (instancetype)initWithJavaIoFile:(JavaIoFile *)baseDir
                       withBoolean:(jboolean)disableCanonicalPathCheck;

- (void)closeTemplateSourceWithId:(id)templateSource;

- (id)findTemplateSourceWithNSString:(NSString *)name;

/**
 @brief Returns the base directory in which the templates are searched.
 This comes from the constructor argument, but it's possibly a canonicalized version of that.
 @since 2.3.21
 */
- (JavaIoFile *)getBaseDirectory;

/**
 @brief Getter pair of #setEmulateCaseSensitiveFileSystem(boolean) .
 @since 2.3.23
 */
- (jboolean)getEmulateCaseSensitiveFileSystem;

- (jlong)getLastModifiedWithId:(id)templateSource;

- (JavaIoReader *)getReaderWithId:(id)templateSource
                     withNSString:(NSString *)encoding;

/**
 @brief Intended for development only, checks if the template name matches the case (upper VS lower case letters) of the actual file name, and if it doesn't, it emulates a file-not-found even if the file system is case insensitive.
 This is useful when developing application on Windows, which will be later installed on Linux, OS X, etc. This check can be resource intensive, as to check the file name the directories involved, up to the #getBaseDirectory() directory, must be listed. Positive results (matching case) will be cached without expiration time. <p>The default in FileTemplateLoader is <code>false</code> , but subclasses may change they by overriding #getEmulateCaseSensitiveFileSystemDefault() .
 @since 2.3.23
 */
- (void)setEmulateCaseSensitiveFileSystemWithBoolean:(jboolean)nameCaseChecked;

/**
 @brief Show class name and some details that are useful in template-not-found errors.
 @since 2.3.21
 */
- (NSString *)description;

#pragma mark Protected

/**
 @brief Returns the default of #getEmulateCaseSensitiveFileSystem() .
 In FileTemplateLoader it's <code>false</code> , unless the #SYSTEM_PROPERTY_NAME_EMULATE_CASE_SENSITIVE_FILE_SYSTEM system property was set to <code>true</code> , but this can be overridden here in custom subclasses. For example, if your environment defines something like developer mode, you may want to override this to return <code>true</code> on Windows.
 @since 2.3.23
 */
- (jboolean)getEmulateCaseSensitiveFileSystemDefault;

@end

J2OBJC_STATIC_INIT(FreemarkerCacheFileTemplateLoader)

J2OBJC_FIELD_SETTER(FreemarkerCacheFileTemplateLoader, baseDir_, JavaIoFile *)

FOUNDATION_EXPORT NSString *FreemarkerCacheFileTemplateLoader_SYSTEM_PROPERTY_NAME_EMULATE_CASE_SENSITIVE_FILE_SYSTEM_;
J2OBJC_STATIC_FIELD_GETTER(FreemarkerCacheFileTemplateLoader, SYSTEM_PROPERTY_NAME_EMULATE_CASE_SENSITIVE_FILE_SYSTEM_, NSString *)
J2OBJC_STATIC_FIELD_SETTER(FreemarkerCacheFileTemplateLoader, SYSTEM_PROPERTY_NAME_EMULATE_CASE_SENSITIVE_FILE_SYSTEM_, NSString *)

FOUNDATION_EXPORT void FreemarkerCacheFileTemplateLoader_init(FreemarkerCacheFileTemplateLoader *self);

FOUNDATION_EXPORT FreemarkerCacheFileTemplateLoader *new_FreemarkerCacheFileTemplateLoader_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void FreemarkerCacheFileTemplateLoader_initWithJavaIoFile_(FreemarkerCacheFileTemplateLoader *self, JavaIoFile *baseDir);

FOUNDATION_EXPORT FreemarkerCacheFileTemplateLoader *new_FreemarkerCacheFileTemplateLoader_initWithJavaIoFile_(JavaIoFile *baseDir) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void FreemarkerCacheFileTemplateLoader_initWithJavaIoFile_withBoolean_(FreemarkerCacheFileTemplateLoader *self, JavaIoFile *baseDir, jboolean disableCanonicalPathCheck);

FOUNDATION_EXPORT FreemarkerCacheFileTemplateLoader *new_FreemarkerCacheFileTemplateLoader_initWithJavaIoFile_withBoolean_(JavaIoFile *baseDir, jboolean disableCanonicalPathCheck) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerCacheFileTemplateLoader)

#endif // _FreemarkerCacheFileTemplateLoader_H_
