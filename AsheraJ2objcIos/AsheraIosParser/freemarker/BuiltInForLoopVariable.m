//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/BuiltInForLoopVariable.java
//


#include "BuiltInForLoopVariable.h"
#include "Environment.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IteratorBlock.h"
#include "J2ObjC_source.h"
#include "SpecialBuiltIn.h"
#include "TemplateException.h"
#include "TemplateModel.h"
#include "_DelayedJQuote.h"
#include "_MiscTemplateException.h"

#line 0 "/Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/BuiltInForLoopVariable.java"

@interface FreemarkerCoreBuiltInForLoopVariable () {
 @public
  NSString *loopVarName_;
}

@end

J2OBJC_FIELD_SETTER(FreemarkerCoreBuiltInForLoopVariable, loopVarName_, NSString *)


#line 23
@implementation FreemarkerCoreBuiltInForLoopVariable


#line 27
- (void)bindToLoopVariableWithNSString:(NSString *)loopVarName {
  self->loopVarName_ = loopVarName;
}

- (id<FreemarkerTemplateTemplateModel>)_evalWithFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env {
  FreemarkerCoreIteratorBlock_IterationContext *iterCtx = FreemarkerCoreIteratorBlock_findEnclosingIterationContextWithFreemarkerCoreEnvironment_withNSString_(env, loopVarName_);
  if (iterCtx == nil) {
    
#line 35
    @throw new_FreemarkerCore_MiscTemplateException_initWithFreemarkerCoreExpression_withFreemarkerCoreEnvironment_withNSObjectArray_(
#line 36
    self, env, [IOSObjectArray newArrayWithObjects:(id[]){
#line 38
      @"There's no iteration in context that uses loop variable ", new_FreemarkerCore_DelayedJQuote_initWithId_(
#line 39
      loopVarName_), @"." } count:3 type:NSObject_class_()]);
    }
    
#line 43
    return [self calculateResultWithFreemarkerCoreIteratorBlock_IterationContext:iterCtx withFreemarkerCoreEnvironment:env];
  }


#line 46
- (id<FreemarkerTemplateTemplateModel>)calculateResultWithFreemarkerCoreIteratorBlock_IterationContext:(FreemarkerCoreIteratorBlock_IterationContext *)iterCtx
                                                                         withFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (instancetype)init {
  FreemarkerCoreBuiltInForLoopVariable_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "bindToLoopVariableWithNSString:", "bindToLoopVariable", "V", 0x0, NULL, NULL },
    { "_evalWithFreemarkerCoreEnvironment:", "_eval", "Lfreemarker.template.TemplateModel;", 0x0, "Lfreemarker.template.TemplateException;", NULL },
    { "calculateResultWithFreemarkerCoreIteratorBlock_IterationContext:withFreemarkerCoreEnvironment:", "calculateResult", "Lfreemarker.template.TemplateModel;", 0x400, "Lfreemarker.template.TemplateException;", NULL },
    { "init", NULL, NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "loopVarName_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerCoreBuiltInForLoopVariable = { 2, "BuiltInForLoopVariable", "freemarker.core", NULL, 0x400, 4, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerCoreBuiltInForLoopVariable;
}

@end

void FreemarkerCoreBuiltInForLoopVariable_init(FreemarkerCoreBuiltInForLoopVariable *self) {
  (void) FreemarkerCoreSpecialBuiltIn_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreBuiltInForLoopVariable)
