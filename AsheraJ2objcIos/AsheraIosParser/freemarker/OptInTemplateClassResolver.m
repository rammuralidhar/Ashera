//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/OptInTemplateClassResolver.java
//


#include "ClassUtil.h"
#include "Configurable.h"
#include "Environment.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "OptInTemplateClassResolver.h"
#include "StringUtil.h"
#include "Template.h"
#include "TemplateClassResolver.h"
#include "TemplateException.h"
#include "_MiscTemplateException.h"
#include "java/lang/ClassNotFoundException.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Set.h"

#line 0 "/Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/OptInTemplateClassResolver.java"

@interface FreemarkerCoreOptInTemplateClassResolver () {
 @public
  id<JavaUtilSet> allowedClasses_;
  id<JavaUtilList> trustedTemplatePrefixes_;
  id<JavaUtilSet> trustedTemplateNames_;
}

- (jboolean)hasMatchingPrefixWithNSString:(NSString *)name;

@end

J2OBJC_FIELD_SETTER(FreemarkerCoreOptInTemplateClassResolver, allowedClasses_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(FreemarkerCoreOptInTemplateClassResolver, trustedTemplatePrefixes_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(FreemarkerCoreOptInTemplateClassResolver, trustedTemplateNames_, id<JavaUtilSet>)

__attribute__((unused)) static jboolean FreemarkerCoreOptInTemplateClassResolver_hasMatchingPrefixWithNSString_(FreemarkerCoreOptInTemplateClassResolver *self, NSString *name);


#line 35
@implementation FreemarkerCoreOptInTemplateClassResolver


#line 65
- (instancetype)initWithJavaUtilSet:(id<JavaUtilSet>)allowedClasses
                   withJavaUtilList:(id<JavaUtilList>)trustedTemplates {
  FreemarkerCoreOptInTemplateClassResolver_initWithJavaUtilSet_withJavaUtilList_(self, allowedClasses, trustedTemplates);
  return self;
}


#line 88
- (IOSClass *)resolveWithNSString:(NSString *)className_
    withFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env
   withFreemarkerTemplateTemplate:(FreemarkerTemplateTemplate *)template_ {
  
#line 90
  NSString *templateName = [self safeGetTemplateNameWithFreemarkerTemplateTemplate:template_];
  
#line 92
  if (templateName != nil &&
#line 93
  ([((id<JavaUtilSet>) nil_chk(trustedTemplateNames_)) containsWithId:templateName] || FreemarkerCoreOptInTemplateClassResolver_hasMatchingPrefixWithNSString_(self,
#line 94
  templateName))) {
    return [((id<FreemarkerCoreTemplateClassResolver>) nil_chk(FreemarkerCoreTemplateClassResolver_get_SAFER_RESOLVER_())) resolveWithNSString:className_ withFreemarkerCoreEnvironment:env withFreemarkerTemplateTemplate:template_];
  }
  else {
    
#line 97
    if (![((id<JavaUtilSet>) nil_chk(allowedClasses_)) containsWithId:className_]) {
      @throw new_FreemarkerCore_MiscTemplateException_initWithFreemarkerCoreEnvironment_withNSObjectArray_(env, [IOSObjectArray newArrayWithObjects:(id[]){
#line 99
        @"Instantiating ", className_, @" is not allowed in the template for security reasons. (If you run into this problem when using ?new in a template, you may want to check the \"", FreemarkerCoreConfigurable_get_NEW_BUILTIN_CLASS_RESOLVER_KEY_(),
#line 102
        @"\" setting in the FreeMarker configuration.)" } count:5 type:NSObject_class_()]);
      }
      else {
        
#line 104
        @try {
          return FreemarkerTemplateUtilityClassUtil_forNameWithNSString_(className_);
        }
        @catch (
#line 106
        JavaLangClassNotFoundException *e) {
          @throw new_FreemarkerCore_MiscTemplateException_initWithJavaLangThrowable_withFreemarkerCoreEnvironment_(e, env);
        }
      }
    }
  }


#line 117
- (NSString *)safeGetTemplateNameWithFreemarkerTemplateTemplate:(FreemarkerTemplateTemplate *)template_ {
  if (template_ == nil) return nil;
  
#line 120
  NSString *name = [((FreemarkerTemplateTemplate *) nil_chk(template_)) getName];
  if (name == nil) return nil;
  
#line 124
  NSString *decodedName = name;
  if ([((NSString *) nil_chk(decodedName)) indexOf:'%'] != -1) {
    decodedName = FreemarkerTemplateUtilityStringUtil_replaceWithNSString_withNSString_withNSString_withBoolean_withBoolean_(decodedName, @"%2e", @".", NO, NO);
    decodedName = FreemarkerTemplateUtilityStringUtil_replaceWithNSString_withNSString_withNSString_withBoolean_withBoolean_(decodedName, @"%2E", @".", NO, NO);
    decodedName = FreemarkerTemplateUtilityStringUtil_replaceWithNSString_withNSString_withNSString_withBoolean_withBoolean_(decodedName, @"%2f", @"/", NO, NO);
    decodedName = FreemarkerTemplateUtilityStringUtil_replaceWithNSString_withNSString_withNSString_withBoolean_withBoolean_(decodedName, @"%2F", @"/", NO, NO);
    decodedName = FreemarkerTemplateUtilityStringUtil_replaceWithNSString_withNSString_withNSString_withBoolean_withBoolean_(decodedName, @"%5c", @"\\", NO, NO);
    decodedName = FreemarkerTemplateUtilityStringUtil_replaceWithNSString_withNSString_withNSString_withBoolean_withBoolean_(decodedName, @"%5C", @"\\", NO, NO);
  }
  jint dotDotIdx = [((NSString *) nil_chk(decodedName)) indexOfString:@".."];
  if (dotDotIdx != -1) {
    jint before = dotDotIdx - 1 >= 0 ? [decodedName charAtWithInt:dotDotIdx - 1] : -1;
    jint after = dotDotIdx + 2 < ((jint) [decodedName length]) ? [decodedName charAtWithInt:dotDotIdx + 2] : -1;
    if ((before == -1 || before == '/' || before == '\\') &&
#line 138
    (after == -1 || after == '/' || after == '\\')) {
      return nil;
    }
  }
  
#line 143
  return [((NSString *) nil_chk(name)) hasPrefix:@"/"] ? [name substring:1] : name;
}


#line 146
- (jboolean)hasMatchingPrefixWithNSString:(NSString *)name {
  return FreemarkerCoreOptInTemplateClassResolver_hasMatchingPrefixWithNSString_(self, name);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaUtilSet:withJavaUtilList:", "OptInTemplateClassResolver", NULL, 0x1, NULL, NULL },
    { "resolveWithNSString:withFreemarkerCoreEnvironment:withFreemarkerTemplateTemplate:", "resolve", "Ljava.lang.Class;", 0x1, "Lfreemarker.template.TemplateException;", NULL },
    { "safeGetTemplateNameWithFreemarkerTemplateTemplate:", "safeGetTemplateName", "Ljava.lang.String;", 0x4, NULL, NULL },
    { "hasMatchingPrefixWithNSString:", "hasMatchingPrefix", "Z", 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "allowedClasses_", NULL, 0x12, "Ljava.util.Set;", NULL, NULL,  },
    { "trustedTemplatePrefixes_", NULL, 0x12, "Ljava.util.List;", NULL, NULL,  },
    { "trustedTemplateNames_", NULL, 0x12, "Ljava.util.Set;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerCoreOptInTemplateClassResolver = { 2, "OptInTemplateClassResolver", "freemarker.core", NULL, 0x1, 4, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerCoreOptInTemplateClassResolver;
}

@end


#line 65
void FreemarkerCoreOptInTemplateClassResolver_initWithJavaUtilSet_withJavaUtilList_(FreemarkerCoreOptInTemplateClassResolver *self, id<JavaUtilSet> allowedClasses, id<JavaUtilList> trustedTemplates) {
  (void) NSObject_init(self);
  self->allowedClasses_ = allowedClasses != nil ? allowedClasses : JavaUtilCollections_get_EMPTY_SET_();
  if (trustedTemplates != nil) {
    self->trustedTemplateNames_ = new_JavaUtilHashSet_init();
    self->trustedTemplatePrefixes_ = new_JavaUtilArrayList_init();
    
#line 72
    id<JavaUtilIterator> it = [trustedTemplates iterator];
    while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
      NSString *li = (NSString *) check_class_cast([it next], [NSString class]);
      if ([((NSString *) nil_chk(li)) hasPrefix:@"/"]) li = [li substring:1];
      if ([((NSString *) nil_chk(li)) hasSuffix:@"*"]) {
        [self->trustedTemplatePrefixes_ addWithId:[li substring:0 endIndex:((jint) [li length]) - 1]];
      }
      else {
        
#line 79
        [self->trustedTemplateNames_ addWithId:li];
      }
    }
  }
  else {
    
#line 83
    self->trustedTemplateNames_ = JavaUtilCollections_get_EMPTY_SET_();
    self->trustedTemplatePrefixes_ = JavaUtilCollections_get_EMPTY_LIST_();
  }
}


#line 65
FreemarkerCoreOptInTemplateClassResolver *new_FreemarkerCoreOptInTemplateClassResolver_initWithJavaUtilSet_withJavaUtilList_(id<JavaUtilSet> allowedClasses, id<JavaUtilList> trustedTemplates) {
  FreemarkerCoreOptInTemplateClassResolver *self = [FreemarkerCoreOptInTemplateClassResolver alloc];
  FreemarkerCoreOptInTemplateClassResolver_initWithJavaUtilSet_withJavaUtilList_(self, allowedClasses, trustedTemplates);
  return self;
}


#line 146
jboolean FreemarkerCoreOptInTemplateClassResolver_hasMatchingPrefixWithNSString_(FreemarkerCoreOptInTemplateClassResolver *self, NSString *name) {
  for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(self->trustedTemplatePrefixes_)) size]; i++) {
    NSString *prefix = (NSString *) check_class_cast([self->trustedTemplatePrefixes_ getWithInt:i], [NSString class]);
    if ([((NSString *) nil_chk(name)) hasPrefix:prefix]) return YES;
  }
  return NO;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreOptInTemplateClassResolver)
