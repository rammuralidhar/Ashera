//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/template/DefaultNonListCollectionAdapter.java
//


#include "DefaultNonListCollectionAdapter.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "ObjectWrapper.h"
#include "ObjectWrapperAndUnwrapper.h"
#include "ObjectWrapperWithAPISupport.h"
#include "TemplateHashModel.h"
#include "TemplateModel.h"
#include "TemplateModelException.h"
#include "TemplateModelIterator.h"
#include "WrappingTemplateModel.h"
#include "_DelayedShortClassName.h"
#include "_TemplateModelException.h"
#include "java/lang/ClassCastException.h"
#include "java/util/Collection.h"
#include "java/util/Iterator.h"

#line 0 "/Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/template/DefaultNonListCollectionAdapter.java"

@interface FreemarkerTemplateDefaultNonListCollectionAdapter () {
 @public
  id<JavaUtilCollection> collection_;
}

- (instancetype)initWithJavaUtilCollection:(id<JavaUtilCollection>)collection
withFreemarkerTemplateUtilityObjectWrapperWithAPISupport:(id<FreemarkerTemplateUtilityObjectWrapperWithAPISupport>)wrapper;

@end

J2OBJC_FIELD_SETTER(FreemarkerTemplateDefaultNonListCollectionAdapter, collection_, id<JavaUtilCollection>)

__attribute__((unused)) static void FreemarkerTemplateDefaultNonListCollectionAdapter_initWithJavaUtilCollection_withFreemarkerTemplateUtilityObjectWrapperWithAPISupport_(FreemarkerTemplateDefaultNonListCollectionAdapter *self, id<JavaUtilCollection> collection, id<FreemarkerTemplateUtilityObjectWrapperWithAPISupport> wrapper);

__attribute__((unused)) static FreemarkerTemplateDefaultNonListCollectionAdapter *new_FreemarkerTemplateDefaultNonListCollectionAdapter_initWithJavaUtilCollection_withFreemarkerTemplateUtilityObjectWrapperWithAPISupport_(id<JavaUtilCollection> collection, id<FreemarkerTemplateUtilityObjectWrapperWithAPISupport> wrapper) NS_RETURNS_RETAINED;

@interface FreemarkerTemplateDefaultNonListCollectionAdapter_IteratorAdapter : NSObject < FreemarkerTemplateTemplateModelIterator > {
 @public
  FreemarkerTemplateDefaultNonListCollectionAdapter *this$0_;
  id<JavaUtilIterator> iterator_;
}

- (instancetype)initWithFreemarkerTemplateDefaultNonListCollectionAdapter:(FreemarkerTemplateDefaultNonListCollectionAdapter *)outer$
                                                     withJavaUtilIterator:(id<JavaUtilIterator>)iterator;

- (id<FreemarkerTemplateTemplateModel>)next;

- (jboolean)hasNext;

@end

J2OBJC_EMPTY_STATIC_INIT(FreemarkerTemplateDefaultNonListCollectionAdapter_IteratorAdapter)

J2OBJC_FIELD_SETTER(FreemarkerTemplateDefaultNonListCollectionAdapter_IteratorAdapter, this$0_, FreemarkerTemplateDefaultNonListCollectionAdapter *)
J2OBJC_FIELD_SETTER(FreemarkerTemplateDefaultNonListCollectionAdapter_IteratorAdapter, iterator_, id<JavaUtilIterator>)

__attribute__((unused)) static void FreemarkerTemplateDefaultNonListCollectionAdapter_IteratorAdapter_initWithFreemarkerTemplateDefaultNonListCollectionAdapter_withJavaUtilIterator_(FreemarkerTemplateDefaultNonListCollectionAdapter_IteratorAdapter *self, FreemarkerTemplateDefaultNonListCollectionAdapter *outer$, id<JavaUtilIterator> iterator);

__attribute__((unused)) static FreemarkerTemplateDefaultNonListCollectionAdapter_IteratorAdapter *new_FreemarkerTemplateDefaultNonListCollectionAdapter_IteratorAdapter_initWithFreemarkerTemplateDefaultNonListCollectionAdapter_withJavaUtilIterator_(FreemarkerTemplateDefaultNonListCollectionAdapter *outer$, id<JavaUtilIterator> iterator) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerTemplateDefaultNonListCollectionAdapter_IteratorAdapter)


#line 51
@implementation FreemarkerTemplateDefaultNonListCollectionAdapter


#line 65
+ (FreemarkerTemplateDefaultNonListCollectionAdapter *)adaptWithJavaUtilCollection:(id<JavaUtilCollection>)collection
                          withFreemarkerTemplateUtilityObjectWrapperWithAPISupport:(id<FreemarkerTemplateUtilityObjectWrapperWithAPISupport>)wrapper {
  return FreemarkerTemplateDefaultNonListCollectionAdapter_adaptWithJavaUtilCollection_withFreemarkerTemplateUtilityObjectWrapperWithAPISupport_(collection, wrapper);
}


#line 69
- (instancetype)initWithJavaUtilCollection:(id<JavaUtilCollection>)collection
withFreemarkerTemplateUtilityObjectWrapperWithAPISupport:(id<FreemarkerTemplateUtilityObjectWrapperWithAPISupport>)wrapper {
  FreemarkerTemplateDefaultNonListCollectionAdapter_initWithJavaUtilCollection_withFreemarkerTemplateUtilityObjectWrapperWithAPISupport_(self, collection, wrapper);
  return self;
}


#line 74
- (id<FreemarkerTemplateTemplateModelIterator>)iterator {
  return new_FreemarkerTemplateDefaultNonListCollectionAdapter_IteratorAdapter_initWithFreemarkerTemplateDefaultNonListCollectionAdapter_withJavaUtilIterator_(self, [((id<JavaUtilCollection>) nil_chk(collection_)) iterator]);
}

- (jint)size {
  return [((id<JavaUtilCollection>) nil_chk(collection_)) size];
}

- (jboolean)isEmpty {
  return [((id<JavaUtilCollection>) nil_chk(collection_)) isEmpty];
}

- (id)getWrappedObject {
  return collection_;
}

- (id)getAdaptedObjectWithIOSClass:(IOSClass *)hint {
  return [self getWrappedObject];
}


#line 116
- (jboolean)containsWithFreemarkerTemplateTemplateModel:(id<FreemarkerTemplateTemplateModel>)item {
  id itemPojo = [((id<FreemarkerTemplateObjectWrapperAndUnwrapper>) nil_chk(((id<FreemarkerTemplateObjectWrapperAndUnwrapper>) check_protocol_cast([self getObjectWrapper], @protocol(FreemarkerTemplateObjectWrapperAndUnwrapper))))) unwrapWithFreemarkerTemplateTemplateModel:item];
  @try {
    return [((id<JavaUtilCollection>) nil_chk(collection_)) containsWithId:itemPojo];
  }
  @catch (
#line 120
  JavaLangClassCastException *e) {
    @throw new_FreemarkerCore_TemplateModelException_initWithJavaLangThrowable_withNSObjectArray_(e, [IOSObjectArray newArrayWithObjects:(id[]){
#line 122
      @"Failed to check if the collection contains the item. Probably the item's Java type, ",
#line 123
      itemPojo != nil ? new_FreemarkerCore_DelayedShortClassName_initWithIOSClass_([itemPojo getClass]) : @"Null",
#line 124
      @", doesn't match the type of (some of) the collection items; see cause exception." } count:3 type:NSObject_class_()]);
    }
  }


#line 128
- (id<FreemarkerTemplateTemplateModel>)getAPI {
  return [((id<FreemarkerTemplateUtilityObjectWrapperWithAPISupport>) nil_chk(((id<FreemarkerTemplateUtilityObjectWrapperWithAPISupport>) check_protocol_cast([self getObjectWrapper], @protocol(FreemarkerTemplateUtilityObjectWrapperWithAPISupport))))) wrapAsAPIWithId:collection_];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "adaptWithJavaUtilCollection:withFreemarkerTemplateUtilityObjectWrapperWithAPISupport:", "adapt", "Lfreemarker.template.DefaultNonListCollectionAdapter;", 0x9, NULL, NULL },
    { "initWithJavaUtilCollection:withFreemarkerTemplateUtilityObjectWrapperWithAPISupport:", "DefaultNonListCollectionAdapter", NULL, 0x2, NULL, NULL },
    { "iterator", NULL, "Lfreemarker.template.TemplateModelIterator;", 0x1, "Lfreemarker.template.TemplateModelException;", NULL },
    { "size", NULL, "I", 0x1, NULL, NULL },
    { "isEmpty", NULL, "Z", 0x1, NULL, NULL },
    { "getWrappedObject", NULL, "Ljava.lang.Object;", 0x1, NULL, NULL },
    { "getAdaptedObjectWithIOSClass:", "getAdaptedObject", "Ljava.lang.Object;", 0x1, NULL, NULL },
    { "containsWithFreemarkerTemplateTemplateModel:", "contains", "Z", 0x1, "Lfreemarker.template.TemplateModelException;", NULL },
    { "getAPI", NULL, "Lfreemarker.template.TemplateModel;", 0x1, "Lfreemarker.template.TemplateModelException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "collection_", NULL, 0x12, "Ljava.util.Collection;", NULL, NULL,  },
  };
  static const char *inner_classes[] = {"Lfreemarker.template.DefaultNonListCollectionAdapter$IteratorAdapter;"};
  static const J2ObjcClassInfo _FreemarkerTemplateDefaultNonListCollectionAdapter = { 2, "DefaultNonListCollectionAdapter", "freemarker.template", NULL, 0x1, 9, methods, 1, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_FreemarkerTemplateDefaultNonListCollectionAdapter;
}

@end


#line 65
FreemarkerTemplateDefaultNonListCollectionAdapter *FreemarkerTemplateDefaultNonListCollectionAdapter_adaptWithJavaUtilCollection_withFreemarkerTemplateUtilityObjectWrapperWithAPISupport_(id<JavaUtilCollection> collection, id<FreemarkerTemplateUtilityObjectWrapperWithAPISupport> wrapper) {
  FreemarkerTemplateDefaultNonListCollectionAdapter_initialize();
  
#line 66
  return new_FreemarkerTemplateDefaultNonListCollectionAdapter_initWithJavaUtilCollection_withFreemarkerTemplateUtilityObjectWrapperWithAPISupport_(collection, wrapper);
}


#line 69
void FreemarkerTemplateDefaultNonListCollectionAdapter_initWithJavaUtilCollection_withFreemarkerTemplateUtilityObjectWrapperWithAPISupport_(FreemarkerTemplateDefaultNonListCollectionAdapter *self, id<JavaUtilCollection> collection, id<FreemarkerTemplateUtilityObjectWrapperWithAPISupport> wrapper) {
  (void) FreemarkerTemplateWrappingTemplateModel_initWithFreemarkerTemplateObjectWrapper_(self, wrapper);
  self->collection_ = collection;
}


#line 69
FreemarkerTemplateDefaultNonListCollectionAdapter *new_FreemarkerTemplateDefaultNonListCollectionAdapter_initWithJavaUtilCollection_withFreemarkerTemplateUtilityObjectWrapperWithAPISupport_(id<JavaUtilCollection> collection, id<FreemarkerTemplateUtilityObjectWrapperWithAPISupport> wrapper) {
  FreemarkerTemplateDefaultNonListCollectionAdapter *self = [FreemarkerTemplateDefaultNonListCollectionAdapter alloc];
  FreemarkerTemplateDefaultNonListCollectionAdapter_initWithJavaUtilCollection_withFreemarkerTemplateUtilityObjectWrapperWithAPISupport_(self, collection, wrapper);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerTemplateDefaultNonListCollectionAdapter)


#line 94
@implementation FreemarkerTemplateDefaultNonListCollectionAdapter_IteratorAdapter


#line 98
- (instancetype)initWithFreemarkerTemplateDefaultNonListCollectionAdapter:(FreemarkerTemplateDefaultNonListCollectionAdapter *)outer$
                                                     withJavaUtilIterator:(id<JavaUtilIterator>)iterator {
  FreemarkerTemplateDefaultNonListCollectionAdapter_IteratorAdapter_initWithFreemarkerTemplateDefaultNonListCollectionAdapter_withJavaUtilIterator_(self, outer$, iterator);
  return self;
}


#line 102
- (id<FreemarkerTemplateTemplateModel>)next {
  if (![((id<JavaUtilIterator>) nil_chk(iterator_)) hasNext]) {
    @throw new_FreemarkerTemplateTemplateModelException_initWithNSString_(@"The collection has no more items.");
  }
  
#line 107
  id value = [iterator_ next];
  return [FreemarkerTemplateTemplateModel_class_() isInstance:value] ? (id<FreemarkerTemplateTemplateModel>) check_protocol_cast(value, @protocol(FreemarkerTemplateTemplateModel)) : [this$0_ wrapWithId:value];
}


#line 111
- (jboolean)hasNext {
  return [((id<JavaUtilIterator>) nil_chk(iterator_)) hasNext];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithFreemarkerTemplateDefaultNonListCollectionAdapter:withJavaUtilIterator:", "IteratorAdapter", NULL, 0x0, NULL, NULL },
    { "next", NULL, "Lfreemarker.template.TemplateModel;", 0x1, "Lfreemarker.template.TemplateModelException;", NULL },
    { "hasNext", NULL, "Z", 0x1, "Lfreemarker.template.TemplateModelException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lfreemarker.template.DefaultNonListCollectionAdapter;", NULL, NULL,  },
    { "iterator_", NULL, 0x12, "Ljava.util.Iterator;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerTemplateDefaultNonListCollectionAdapter_IteratorAdapter = { 2, "IteratorAdapter", "freemarker.template", "DefaultNonListCollectionAdapter", 0x2, 3, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerTemplateDefaultNonListCollectionAdapter_IteratorAdapter;
}

@end


#line 98
void FreemarkerTemplateDefaultNonListCollectionAdapter_IteratorAdapter_initWithFreemarkerTemplateDefaultNonListCollectionAdapter_withJavaUtilIterator_(FreemarkerTemplateDefaultNonListCollectionAdapter_IteratorAdapter *self, FreemarkerTemplateDefaultNonListCollectionAdapter *outer$, id<JavaUtilIterator> iterator) {
  self->this$0_ = outer$;
  (void) NSObject_init(self);
  
#line 99
  self->iterator_ = iterator;
}


#line 98
FreemarkerTemplateDefaultNonListCollectionAdapter_IteratorAdapter *new_FreemarkerTemplateDefaultNonListCollectionAdapter_IteratorAdapter_initWithFreemarkerTemplateDefaultNonListCollectionAdapter_withJavaUtilIterator_(FreemarkerTemplateDefaultNonListCollectionAdapter *outer$, id<JavaUtilIterator> iterator) {
  FreemarkerTemplateDefaultNonListCollectionAdapter_IteratorAdapter *self = [FreemarkerTemplateDefaultNonListCollectionAdapter_IteratorAdapter alloc];
  FreemarkerTemplateDefaultNonListCollectionAdapter_IteratorAdapter_initWithFreemarkerTemplateDefaultNonListCollectionAdapter_withJavaUtilIterator_(self, outer$, iterator);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerTemplateDefaultNonListCollectionAdapter_IteratorAdapter)
