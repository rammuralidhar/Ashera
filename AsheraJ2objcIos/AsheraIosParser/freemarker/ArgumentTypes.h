//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/ext/beans/ArgumentTypes.java
//

#ifndef _FreemarkerExtBeansArgumentTypes_H_
#define _FreemarkerExtBeansArgumentTypes_H_

#include "J2ObjC_header.h"

@class FreemarkerExtBeansMaybeEmptyCallableMemberDescriptor;
@class IOSObjectArray;
@class JavaUtilLinkedList;
@protocol JavaUtilList;

/**
 @brief The argument types of a method call; usable as cache key.
 */
@interface FreemarkerExtBeansArgumentTypes : NSObject

#pragma mark Public

- (jboolean)isEqual:(id)o;

- (NSUInteger)hash;

#pragma mark Package-Private

/**
 @param args The actual arguments. A varargs argument should be present exploded, no as an array.
 @param bugfixed Introduced in 2.3.21, sets this object to a mode that works well with BeansWrapper -s created with Version 2.3.21 or higher.
 */
- (instancetype)initWithNSObjectArray:(IOSObjectArray *)args
                          withBoolean:(jboolean)bugfixed;

/**
 @brief Tells if among the parameter list of two methods, which one fits this argument list better.
 This method assumes that the parameter lists are applicable to this argument lists; if that's not ensured, what the result will be is undefined. <p>This method behaves differently in <code>bugfixed</code> -mode (used when a BeansWrapper is created with incompatible improvements set to 2.3.21 or higher). Below we describe the bugfixed behavior only. <p>The decision is made by comparing the preferability of each parameter types of the same position in a loop. At the end, the parameter list with the more preferred parameters will be the preferred one. If both parameter lists has the same amount of preferred parameters, the one that has the first (lower index) preferred parameter is the preferred one. Otherwise the two parameter list are considered to be equal in terms of preferability. <p>If there's no numerical conversion involved, the preferability of two parameter types is decided on how specific their types are. For example, <code>String</code> is more specific than Object (because <code>Object.class.isAssignableFrom(String.class)</code> -s), and so <code>String</code> is preferred. Primitive types are considered to be more specific than the corresponding boxing class (like <code>boolean</code> is more specific than <code>Boolean</code> , because the former can't store <code>null</code> ). The preferability decision gets trickier when there's a possibility of numerical conversion from the actual argument type to the type of some of the parameters. If such conversion is only possible for one of the competing parameter types, that parameter automatically wins. If it's possible for both, OverloadedNumberUtil#getArgumentConversionPrice will be used to calculate the conversion "price", and the parameter type with lowest price wins. There are also a twist with array-to-list and list-to-array conversions; we try to avoid those, so the parameter where such conversion isn't needed will always win.
 @param paramTypes1 The parameter types of one of the competing methods
 @param paramTypes2 The parameter types of the other competing method
 @param varArg Whether these competing methods are varargs methods.
 @return More than 0 if the first parameter list is preferred, less then 0 if the other is preferred, 0 if there's no decision
 */
- (jint)compareParameterListPreferabilityWithIOSClassArray:(IOSObjectArray *)paramTypes1
                                         withIOSClassArray:(IOSObjectArray *)paramTypes2
                                               withBoolean:(jboolean)varArg;

/**
 @brief Returns all methods that are applicable to actual parameter types represented by this ArgumentTypes object.
 */
- (JavaUtilLinkedList *)getApplicablesWithJavaUtilList:(id<JavaUtilList>)memberDescs
                                           withBoolean:(jboolean)varArg;

/**
 @return Possibly EmptyCallableMemberDescriptor#NO_SUCH_METHOD or EmptyCallableMemberDescriptor#AMBIGUOUS_METHOD .
 */
- (FreemarkerExtBeansMaybeEmptyCallableMemberDescriptor *)getMostSpecificWithJavaUtilList:(id<JavaUtilList>)memberDescs
                                                                              withBoolean:(jboolean)varArg;

@end

J2OBJC_EMPTY_STATIC_INIT(FreemarkerExtBeansArgumentTypes)

FOUNDATION_EXPORT void FreemarkerExtBeansArgumentTypes_initWithNSObjectArray_withBoolean_(FreemarkerExtBeansArgumentTypes *self, IOSObjectArray *args, jboolean bugfixed);

FOUNDATION_EXPORT FreemarkerExtBeansArgumentTypes *new_FreemarkerExtBeansArgumentTypes_initWithNSObjectArray_withBoolean_(IOSObjectArray *args, jboolean bugfixed) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerExtBeansArgumentTypes)

#endif // _FreemarkerExtBeansArgumentTypes_H_
