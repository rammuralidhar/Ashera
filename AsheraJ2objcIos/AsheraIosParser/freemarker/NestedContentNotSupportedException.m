//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/NestedContentNotSupportedException.java
//


#include "Environment.h"
#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "NestedContentNotSupportedException.h"
#include "StringUtil.h"
#include "TemplateDirectiveBody.h"
#include "TemplateElement.h"
#include "TemplateException.h"
#include "ThreadInterruptionSupportTemplatePostProcessor.h"
#include "java/lang/Exception.h"

#line 0 "/Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/NestedContentNotSupportedException.java"

@interface FreemarkerCoreNestedContentNotSupportedException ()

- (instancetype)initWithFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env;

- (instancetype)initWithJavaLangException:(JavaLangException *)cause
            withFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env;

- (instancetype)initWithNSString:(NSString *)description_
   withFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env;

- (instancetype)initWithNSString:(NSString *)description_
           withJavaLangException:(JavaLangException *)cause
   withFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env;

@end

__attribute__((unused)) static void FreemarkerCoreNestedContentNotSupportedException_initWithFreemarkerCoreEnvironment_(FreemarkerCoreNestedContentNotSupportedException *self, FreemarkerCoreEnvironment *env);

__attribute__((unused)) static FreemarkerCoreNestedContentNotSupportedException *new_FreemarkerCoreNestedContentNotSupportedException_initWithFreemarkerCoreEnvironment_(FreemarkerCoreEnvironment *env) NS_RETURNS_RETAINED;

__attribute__((unused)) static void FreemarkerCoreNestedContentNotSupportedException_initWithJavaLangException_withFreemarkerCoreEnvironment_(FreemarkerCoreNestedContentNotSupportedException *self, JavaLangException *cause, FreemarkerCoreEnvironment *env);

__attribute__((unused)) static FreemarkerCoreNestedContentNotSupportedException *new_FreemarkerCoreNestedContentNotSupportedException_initWithJavaLangException_withFreemarkerCoreEnvironment_(JavaLangException *cause, FreemarkerCoreEnvironment *env) NS_RETURNS_RETAINED;

__attribute__((unused)) static void FreemarkerCoreNestedContentNotSupportedException_initWithNSString_withFreemarkerCoreEnvironment_(FreemarkerCoreNestedContentNotSupportedException *self, NSString *description_, FreemarkerCoreEnvironment *env);

__attribute__((unused)) static FreemarkerCoreNestedContentNotSupportedException *new_FreemarkerCoreNestedContentNotSupportedException_initWithNSString_withFreemarkerCoreEnvironment_(NSString *description_, FreemarkerCoreEnvironment *env) NS_RETURNS_RETAINED;

__attribute__((unused)) static void FreemarkerCoreNestedContentNotSupportedException_initWithNSString_withJavaLangException_withFreemarkerCoreEnvironment_(FreemarkerCoreNestedContentNotSupportedException *self, NSString *description_, JavaLangException *cause, FreemarkerCoreEnvironment *env);

__attribute__((unused)) static FreemarkerCoreNestedContentNotSupportedException *new_FreemarkerCoreNestedContentNotSupportedException_initWithNSString_withJavaLangException_withFreemarkerCoreEnvironment_(NSString *description_, JavaLangException *cause, FreemarkerCoreEnvironment *env) NS_RETURNS_RETAINED;


#line 30
@implementation FreemarkerCoreNestedContentNotSupportedException

+ (void)checkWithFreemarkerTemplateTemplateDirectiveBody:(id<FreemarkerTemplateTemplateDirectiveBody>)body {
  FreemarkerCoreNestedContentNotSupportedException_checkWithFreemarkerTemplateTemplateDirectiveBody_(body);
}


#line 46
- (instancetype)initWithFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env {
  FreemarkerCoreNestedContentNotSupportedException_initWithFreemarkerCoreEnvironment_(self, env);
  return self;
}


#line 50
- (instancetype)initWithJavaLangException:(JavaLangException *)cause
            withFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env {
  FreemarkerCoreNestedContentNotSupportedException_initWithJavaLangException_withFreemarkerCoreEnvironment_(self, cause, env);
  return self;
}


#line 54
- (instancetype)initWithNSString:(NSString *)description_
   withFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env {
  FreemarkerCoreNestedContentNotSupportedException_initWithNSString_withFreemarkerCoreEnvironment_(self, description_, env);
  return self;
}


#line 58
- (instancetype)initWithNSString:(NSString *)description_
           withJavaLangException:(JavaLangException *)cause
   withFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env {
  FreemarkerCoreNestedContentNotSupportedException_initWithNSString_withJavaLangException_withFreemarkerCoreEnvironment_(self, description_, cause, env);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "checkWithFreemarkerTemplateTemplateDirectiveBody:", "check", "V", 0x9, "Lfreemarker.core.NestedContentNotSupportedException;", NULL },
    { "initWithFreemarkerCoreEnvironment:", "NestedContentNotSupportedException", NULL, 0x2, NULL, NULL },
    { "initWithJavaLangException:withFreemarkerCoreEnvironment:", "NestedContentNotSupportedException", NULL, 0x2, NULL, NULL },
    { "initWithNSString:withFreemarkerCoreEnvironment:", "NestedContentNotSupportedException", NULL, 0x2, NULL, NULL },
    { "initWithNSString:withJavaLangException:withFreemarkerCoreEnvironment:", "NestedContentNotSupportedException", NULL, 0x2, NULL, NULL },
  };
  static const J2ObjcClassInfo _FreemarkerCoreNestedContentNotSupportedException = { 2, "NestedContentNotSupportedException", "freemarker.core", NULL, 0x0, 5, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerCoreNestedContentNotSupportedException;
}

@end


#line 32
void FreemarkerCoreNestedContentNotSupportedException_checkWithFreemarkerTemplateTemplateDirectiveBody_(id<FreemarkerTemplateTemplateDirectiveBody> body) {
  FreemarkerCoreNestedContentNotSupportedException_initialize();
  
#line 33
  if (body == nil) {
    return;
  }
  if ([body isKindOfClass:[FreemarkerCoreEnvironment_NestedElementTemplateDirectiveBody class]]) {
    FreemarkerCoreTemplateElement *te = [((FreemarkerCoreEnvironment_NestedElementTemplateDirectiveBody *) nil_chk(((FreemarkerCoreEnvironment_NestedElementTemplateDirectiveBody *) check_class_cast(body, [FreemarkerCoreEnvironment_NestedElementTemplateDirectiveBody class])))) getElement];
    if (te == nil || [te isKindOfClass:[FreemarkerCoreThreadInterruptionSupportTemplatePostProcessor_ThreadInterruptionCheck class]]) {
      return;
    }
  }
  @throw new_FreemarkerCoreNestedContentNotSupportedException_initWithFreemarkerCoreEnvironment_(FreemarkerCoreEnvironment_getCurrentEnvironment());
}


#line 46
void FreemarkerCoreNestedContentNotSupportedException_initWithFreemarkerCoreEnvironment_(FreemarkerCoreNestedContentNotSupportedException *self, FreemarkerCoreEnvironment *env) {
  (void) FreemarkerCoreNestedContentNotSupportedException_initWithNSString_withJavaLangException_withFreemarkerCoreEnvironment_(self, nil, nil, env);
}


#line 46
FreemarkerCoreNestedContentNotSupportedException *new_FreemarkerCoreNestedContentNotSupportedException_initWithFreemarkerCoreEnvironment_(FreemarkerCoreEnvironment *env) {
  FreemarkerCoreNestedContentNotSupportedException *self = [FreemarkerCoreNestedContentNotSupportedException alloc];
  FreemarkerCoreNestedContentNotSupportedException_initWithFreemarkerCoreEnvironment_(self, env);
  return self;
}


#line 50
void FreemarkerCoreNestedContentNotSupportedException_initWithJavaLangException_withFreemarkerCoreEnvironment_(FreemarkerCoreNestedContentNotSupportedException *self, JavaLangException *cause, FreemarkerCoreEnvironment *env) {
  (void) FreemarkerCoreNestedContentNotSupportedException_initWithNSString_withJavaLangException_withFreemarkerCoreEnvironment_(self, nil, cause, env);
}


#line 50
FreemarkerCoreNestedContentNotSupportedException *new_FreemarkerCoreNestedContentNotSupportedException_initWithJavaLangException_withFreemarkerCoreEnvironment_(JavaLangException *cause, FreemarkerCoreEnvironment *env) {
  FreemarkerCoreNestedContentNotSupportedException *self = [FreemarkerCoreNestedContentNotSupportedException alloc];
  FreemarkerCoreNestedContentNotSupportedException_initWithJavaLangException_withFreemarkerCoreEnvironment_(self, cause, env);
  return self;
}


#line 54
void FreemarkerCoreNestedContentNotSupportedException_initWithNSString_withFreemarkerCoreEnvironment_(FreemarkerCoreNestedContentNotSupportedException *self, NSString *description_, FreemarkerCoreEnvironment *env) {
  (void) FreemarkerCoreNestedContentNotSupportedException_initWithNSString_withJavaLangException_withFreemarkerCoreEnvironment_(self, description_, nil, env);
}


#line 54
FreemarkerCoreNestedContentNotSupportedException *new_FreemarkerCoreNestedContentNotSupportedException_initWithNSString_withFreemarkerCoreEnvironment_(NSString *description_, FreemarkerCoreEnvironment *env) {
  FreemarkerCoreNestedContentNotSupportedException *self = [FreemarkerCoreNestedContentNotSupportedException alloc];
  FreemarkerCoreNestedContentNotSupportedException_initWithNSString_withFreemarkerCoreEnvironment_(self, description_, env);
  return self;
}


#line 58
void FreemarkerCoreNestedContentNotSupportedException_initWithNSString_withJavaLangException_withFreemarkerCoreEnvironment_(FreemarkerCoreNestedContentNotSupportedException *self, NSString *description_, JavaLangException *cause, FreemarkerCoreEnvironment *env) {
  (void) FreemarkerTemplateTemplateException_initWithNSString_withJavaLangException_withFreemarkerCoreEnvironment_(self, JreStrcat("$$", @"Nested content (body) not supported.",
#line 60
  (description_ != nil ? JreStrcat("C$", ' ', FreemarkerTemplateUtilityStringUtil_jQuoteWithNSString_(description_)) : @"")),
#line 61
  cause, env);
}


#line 58
FreemarkerCoreNestedContentNotSupportedException *new_FreemarkerCoreNestedContentNotSupportedException_initWithNSString_withJavaLangException_withFreemarkerCoreEnvironment_(NSString *description_, JavaLangException *cause, FreemarkerCoreEnvironment *env) {
  FreemarkerCoreNestedContentNotSupportedException *self = [FreemarkerCoreNestedContentNotSupportedException alloc];
  FreemarkerCoreNestedContentNotSupportedException_initWithNSString_withJavaLangException_withFreemarkerCoreEnvironment_(self, description_, cause, env);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreNestedContentNotSupportedException)
