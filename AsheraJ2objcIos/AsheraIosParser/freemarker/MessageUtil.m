//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/MessageUtil.java
//


#include "BooleanLiteral.h"
#include "BuiltIn.h"
#include "Dot.h"
#include "DynamicKeyName.h"
#include "Environment.h"
#include "Expression.h"
#include "HashLiteral.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "Identifier.h"
#include "J2ObjC_source.h"
#include "ListLiteral.h"
#include "Macro.h"
#include "MessageUtil.h"
#include "MethodCall.h"
#include "NumberLiteral.h"
#include "StringLiteral.h"
#include "StringUtil.h"
#include "Template.h"
#include "TemplateException.h"
#include "TemplateModel.h"
#include "TemplateModelException.h"
#include "TemplateObject.h"
#include "UnformattableDateException.h"
#include "UnknownDateTypeFormattingUnsupportedException.h"
#include "_DelayedAOrAn.h"
#include "_DelayedFTLTypeDescription.h"
#include "_ErrorDescriptionBuilder.h"
#include "_MiscTemplateException.h"
#include "_TemplateModelException.h"
#include "java/lang/Character.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuffer.h"
#include "java/util/ArrayList.h"

#line 0 "/Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/MessageUtil.java"

@interface FreemarkerCoreMessageUtil ()

- (instancetype)init;

+ (NSString *)formatLocationWithNSString:(NSString *)preposition
          withFreemarkerTemplateTemplate:(FreemarkerTemplateTemplate *)template_
                                 withInt:(jint)line
                                 withInt:(jint)column;

+ (NSString *)formatLocationWithNSString:(NSString *)preposition
                            withNSString:(NSString *)templateSourceName
                                 withInt:(jint)line
                                 withInt:(jint)column;

+ (NSString *)formatLocationWithNSString:(NSString *)preposition
                            withNSString:(NSString *)templateSourceName
                            withNSString:(NSString *)macroOrFuncName
                             withBoolean:(jboolean)isFunction
                                 withInt:(jint)line
                                 withInt:(jint)column;

@end

__attribute__((unused)) static void FreemarkerCoreMessageUtil_init(FreemarkerCoreMessageUtil *self);

__attribute__((unused)) static FreemarkerCoreMessageUtil *new_FreemarkerCoreMessageUtil_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static NSString *FreemarkerCoreMessageUtil_formatLocationWithNSString_withFreemarkerTemplateTemplate_withInt_withInt_(NSString *preposition, FreemarkerTemplateTemplate *template_, jint line, jint column);

__attribute__((unused)) static NSString *FreemarkerCoreMessageUtil_formatLocationWithNSString_withNSString_withInt_withInt_(NSString *preposition, NSString *templateSourceName, jint line, jint column);

__attribute__((unused)) static NSString *FreemarkerCoreMessageUtil_formatLocationWithNSString_withNSString_withNSString_withBoolean_withInt_withInt_(NSString *preposition, NSString *templateSourceName, NSString *macroOrFuncName, jboolean isFunction, jint line, jint column);

J2OBJC_INITIALIZED_DEFN(FreemarkerCoreMessageUtil)

NSString *FreemarkerCoreMessageUtil_UNKNOWN_DATE_TO_STRING_ERROR_MESSAGE_ = @"Can't convert the date-like value to string because it isn't known if it's a date (no time part), time or date-time value.";
NSString *FreemarkerCoreMessageUtil_UNKNOWN_DATE_TYPE_ERROR_TIP_ = @"Use ?date, ?time, or ?datetime to tell FreeMarker the exact type.";
IOSObjectArray *FreemarkerCoreMessageUtil_UNKNOWN_DATE_TO_STRING_TIPS_;
NSString *FreemarkerCoreMessageUtil_EMBEDDED_MESSAGE_BEGIN_ = 
#line 45
@"---begin-message---\n";
NSString *FreemarkerCoreMessageUtil_EMBEDDED_MESSAGE_END_ = 
#line 47
@"\n---end-message---";


#line 30
@implementation FreemarkerCoreMessageUtil


#line 50
- (instancetype)init {
  FreemarkerCoreMessageUtil_init(self);
  return self;
}


#line 52
+ (NSString *)formatLocationForSimpleParsingErrorWithFreemarkerTemplateTemplate:(FreemarkerTemplateTemplate *)template_
                                                                        withInt:(jint)line
                                                                        withInt:(jint)column {
  return FreemarkerCoreMessageUtil_formatLocationForSimpleParsingErrorWithFreemarkerTemplateTemplate_withInt_withInt_(template_, line, column);
}


#line 56
+ (NSString *)formatLocationForSimpleParsingErrorWithNSString:(NSString *)templateSourceName
                                                      withInt:(jint)line
                                                      withInt:(jint)column {
  return FreemarkerCoreMessageUtil_formatLocationForSimpleParsingErrorWithNSString_withInt_withInt_(templateSourceName, line, column);
}


#line 60
+ (NSString *)formatLocationForDependentParsingErrorWithFreemarkerTemplateTemplate:(FreemarkerTemplateTemplate *)template_
                                                                           withInt:(jint)line
                                                                           withInt:(jint)column {
  return FreemarkerCoreMessageUtil_formatLocationForDependentParsingErrorWithFreemarkerTemplateTemplate_withInt_withInt_(template_, line, column);
}


#line 64
+ (NSString *)formatLocationForDependentParsingErrorWithNSString:(NSString *)templateSourceName
                                                         withInt:(jint)line
                                                         withInt:(jint)column {
  return FreemarkerCoreMessageUtil_formatLocationForDependentParsingErrorWithNSString_withInt_withInt_(templateSourceName, line, column);
}


#line 68
+ (NSString *)formatLocationForEvaluationErrorWithFreemarkerTemplateTemplate:(FreemarkerTemplateTemplate *)template_
                                                                     withInt:(jint)line
                                                                     withInt:(jint)column {
  return FreemarkerCoreMessageUtil_formatLocationForEvaluationErrorWithFreemarkerTemplateTemplate_withInt_withInt_(template_, line, column);
}


#line 72
+ (NSString *)formatLocationForEvaluationErrorWithFreemarkerCoreMacro:(FreemarkerCoreMacro *)macro
                                                              withInt:(jint)line
                                                              withInt:(jint)column {
  return FreemarkerCoreMessageUtil_formatLocationForEvaluationErrorWithFreemarkerCoreMacro_withInt_withInt_(macro, line, column);
}


#line 77
+ (NSString *)formatLocationForEvaluationErrorWithNSString:(NSString *)templateSourceName
                                                   withInt:(jint)line
                                                   withInt:(jint)column {
  return FreemarkerCoreMessageUtil_formatLocationForEvaluationErrorWithNSString_withInt_withInt_(templateSourceName, line, column);
}


#line 81
+ (NSString *)formatLocationWithNSString:(NSString *)preposition
          withFreemarkerTemplateTemplate:(FreemarkerTemplateTemplate *)template_
                                 withInt:(jint)line
                                 withInt:(jint)column {
  return FreemarkerCoreMessageUtil_formatLocationWithNSString_withFreemarkerTemplateTemplate_withInt_withInt_(preposition, template_, line, column);
}


#line 85
+ (NSString *)formatLocationWithNSString:(NSString *)preposition
                            withNSString:(NSString *)templateSourceName
                                 withInt:(jint)line
                                 withInt:(jint)column {
  return FreemarkerCoreMessageUtil_formatLocationWithNSString_withNSString_withInt_withInt_(preposition, templateSourceName, line, column);
}

+ (NSString *)formatLocationWithNSString:(NSString *)preposition
                            withNSString:(NSString *)templateSourceName
                            withNSString:(NSString *)macroOrFuncName
                             withBoolean:(jboolean)isFunction
                                 withInt:(jint)line
                                 withInt:(jint)column {
  return FreemarkerCoreMessageUtil_formatLocationWithNSString_withNSString_withNSString_withBoolean_withInt_withInt_(preposition, templateSourceName, macroOrFuncName, isFunction, line, column);
}


#line 113
+ (NSString *)formatPositionWithInt:(jint)line
                            withInt:(jint)column {
  return FreemarkerCoreMessageUtil_formatPositionWithInt_withInt_(line, column);
}


#line 123
+ (NSString *)shortenWithNSString:(NSString *)s
                          withInt:(jint)maxLength {
  return FreemarkerCoreMessageUtil_shortenWithNSString_withInt_(s, maxLength);
}


#line 163
+ (JavaLangStringBuffer *)appendExpressionAsUntearableWithJavaLangStringBuffer:(JavaLangStringBuffer *)sb
                                                  withFreemarkerCoreExpression:(FreemarkerCoreExpression *)argExp {
  return FreemarkerCoreMessageUtil_appendExpressionAsUntearableWithJavaLangStringBuffer_withFreemarkerCoreExpression_(sb, argExp);
}


#line 181
+ (FreemarkerTemplateTemplateModelException *)newArgCntErrorWithNSString:(NSString *)methodName
                                                                 withInt:(jint)argCnt
                                                                 withInt:(jint)expectedCnt {
  return FreemarkerCoreMessageUtil_newArgCntErrorWithNSString_withInt_withInt_(methodName, argCnt, expectedCnt);
}


#line 185
+ (FreemarkerTemplateTemplateModelException *)newArgCntErrorWithNSString:(NSString *)methodName
                                                                 withInt:(jint)argCnt
                                                                 withInt:(jint)minCnt
                                                                 withInt:(jint)maxCnt {
  return FreemarkerCoreMessageUtil_newArgCntErrorWithNSString_withInt_withInt_withInt_(methodName, argCnt, minCnt, maxCnt);
}


#line 227
+ (FreemarkerTemplateTemplateModelException *)newMethodArgMustBeStringExceptionWithNSString:(NSString *)methodName
                                                                                    withInt:(jint)argIdx
                                                        withFreemarkerTemplateTemplateModel:(id<FreemarkerTemplateTemplateModel>)arg {
  return FreemarkerCoreMessageUtil_newMethodArgMustBeStringExceptionWithNSString_withInt_withFreemarkerTemplateTemplateModel_(methodName, argIdx, arg);
}


#line 231
+ (FreemarkerTemplateTemplateModelException *)newMethodArgMustBeNumberExceptionWithNSString:(NSString *)methodName
                                                                                    withInt:(jint)argIdx
                                                        withFreemarkerTemplateTemplateModel:(id<FreemarkerTemplateTemplateModel>)arg {
  return FreemarkerCoreMessageUtil_newMethodArgMustBeNumberExceptionWithNSString_withInt_withFreemarkerTemplateTemplateModel_(methodName, argIdx, arg);
}


#line 235
+ (FreemarkerTemplateTemplateModelException *)newMethodArgMustBeBooleanExceptionWithNSString:(NSString *)methodName
                                                                                     withInt:(jint)argIdx
                                                         withFreemarkerTemplateTemplateModel:(id<FreemarkerTemplateTemplateModel>)arg {
  return FreemarkerCoreMessageUtil_newMethodArgMustBeBooleanExceptionWithNSString_withInt_withFreemarkerTemplateTemplateModel_(methodName, argIdx, arg);
}


#line 239
+ (FreemarkerTemplateTemplateModelException *)newMethodArgMustBeExtendedHashExceptionWithNSString:(NSString *)methodName
                                                                                          withInt:(jint)argIdx
                                                              withFreemarkerTemplateTemplateModel:(id<FreemarkerTemplateTemplateModel>)arg {
  return FreemarkerCoreMessageUtil_newMethodArgMustBeExtendedHashExceptionWithNSString_withInt_withFreemarkerTemplateTemplateModel_(methodName, argIdx, arg);
}


#line 244
+ (FreemarkerTemplateTemplateModelException *)newMethodArgMustBeSequenceExceptionWithNSString:(NSString *)methodName
                                                                                      withInt:(jint)argIdx
                                                          withFreemarkerTemplateTemplateModel:(id<FreemarkerTemplateTemplateModel>)arg {
  return FreemarkerCoreMessageUtil_newMethodArgMustBeSequenceExceptionWithNSString_withInt_withFreemarkerTemplateTemplateModel_(methodName, argIdx, arg);
}


#line 249
+ (FreemarkerTemplateTemplateModelException *)newMethodArgMustBeSequenceOrCollectionExceptionWithNSString:(NSString *)methodName
                                                                                                  withInt:(jint)argIdx
                                                                      withFreemarkerTemplateTemplateModel:(id<FreemarkerTemplateTemplateModel>)arg {
  return FreemarkerCoreMessageUtil_newMethodArgMustBeSequenceOrCollectionExceptionWithNSString_withInt_withFreemarkerTemplateTemplateModel_(methodName, argIdx, arg);
}


#line 254
+ (FreemarkerTemplateTemplateModelException *)newMethodArgUnexpectedTypeExceptionWithNSString:(NSString *)methodName
                                                                                      withInt:(jint)argIdx
                                                                                 withNSString:(NSString *)expectedType
                                                          withFreemarkerTemplateTemplateModel:(id<FreemarkerTemplateTemplateModel>)arg {
  return FreemarkerCoreMessageUtil_newMethodArgUnexpectedTypeExceptionWithNSString_withInt_withNSString_withFreemarkerTemplateTemplateModel_(methodName, argIdx, expectedType, arg);
}


#line 264
+ (FreemarkerTemplateTemplateModelException *)newMethodArgInvalidValueExceptionWithNSString:(NSString *)methodName
                                                                                    withInt:(jint)argIdx
                                                                          withNSObjectArray:(IOSObjectArray *)details {
  return FreemarkerCoreMessageUtil_newMethodArgInvalidValueExceptionWithNSString_withInt_withNSObjectArray_(methodName, argIdx, details);
}


#line 274
+ (FreemarkerTemplateTemplateModelException *)newMethodArgsInvalidValueExceptionWithNSString:(NSString *)methodName
                                                                           withNSObjectArray:(IOSObjectArray *)details {
  return FreemarkerCoreMessageUtil_newMethodArgsInvalidValueExceptionWithNSString_withNSObjectArray_(methodName, details);
}


#line 280
+ (FreemarkerTemplateTemplateException *)newInstantiatingClassNotAllowedExceptionWithNSString:(NSString *)className_
                                                                withFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env {
  return FreemarkerCoreMessageUtil_newInstantiatingClassNotAllowedExceptionWithNSString_withFreemarkerCoreEnvironment_(className_, env);
}

+ (FreemarkerCore_TemplateModelException *)newCantFormatUnknownTypeDateExceptionWithFreemarkerCoreExpression:(FreemarkerCoreExpression *)dateSourceExpr
                                             withFreemarkerCoreUnknownDateTypeFormattingUnsupportedException:(FreemarkerCoreUnknownDateTypeFormattingUnsupportedException *)cause {
  return FreemarkerCoreMessageUtil_newCantFormatUnknownTypeDateExceptionWithFreemarkerCoreExpression_withFreemarkerCoreUnknownDateTypeFormattingUnsupportedException_(dateSourceExpr, cause);
}


#line 293
+ (FreemarkerTemplateTemplateModelException *)newCantFormatDateExceptionWithFreemarkerCoreExpression:(FreemarkerCoreExpression *)dateSourceExpr
                                                        withFreemarkerCoreUnformattableDateException:(FreemarkerCoreUnformattableDateException *)cause {
  return FreemarkerCoreMessageUtil_newCantFormatDateExceptionWithFreemarkerCoreExpression_withFreemarkerCoreUnformattableDateException_(dateSourceExpr, cause);
}


#line 303
+ (NSString *)getAOrAnWithNSString:(NSString *)s {
  return FreemarkerCoreMessageUtil_getAOrAnWithNSString_(s);
}

+ (void)initialize {
  if (self == [FreemarkerCoreMessageUtil class]) {
    FreemarkerCoreMessageUtil_UNKNOWN_DATE_TO_STRING_TIPS_ = [IOSObjectArray newArrayWithObjects:(id[]){
#line 40
      FreemarkerCoreMessageUtil_UNKNOWN_DATE_TYPE_ERROR_TIP_, @"If you need a particular format only once, use ?string(pattern), like ?string('dd.MM.yyyy HH:mm:ss'), to specify which fields to display. " } count:2 type:NSString_class_()];
      J2OBJC_SET_INITIALIZED(FreemarkerCoreMessageUtil)
    }
  }

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "MessageUtil", NULL, 0x2, NULL, NULL },
    { "formatLocationForSimpleParsingErrorWithFreemarkerTemplateTemplate:withInt:withInt:", "formatLocationForSimpleParsingError", "Ljava.lang.String;", 0x8, NULL, NULL },
    { "formatLocationForSimpleParsingErrorWithNSString:withInt:withInt:", "formatLocationForSimpleParsingError", "Ljava.lang.String;", 0x8, NULL, NULL },
    { "formatLocationForDependentParsingErrorWithFreemarkerTemplateTemplate:withInt:withInt:", "formatLocationForDependentParsingError", "Ljava.lang.String;", 0x8, NULL, NULL },
    { "formatLocationForDependentParsingErrorWithNSString:withInt:withInt:", "formatLocationForDependentParsingError", "Ljava.lang.String;", 0x8, NULL, NULL },
    { "formatLocationForEvaluationErrorWithFreemarkerTemplateTemplate:withInt:withInt:", "formatLocationForEvaluationError", "Ljava.lang.String;", 0x8, NULL, NULL },
    { "formatLocationForEvaluationErrorWithFreemarkerCoreMacro:withInt:withInt:", "formatLocationForEvaluationError", "Ljava.lang.String;", 0x8, NULL, NULL },
    { "formatLocationForEvaluationErrorWithNSString:withInt:withInt:", "formatLocationForEvaluationError", "Ljava.lang.String;", 0x8, NULL, NULL },
    { "formatLocationWithNSString:withFreemarkerTemplateTemplate:withInt:withInt:", "formatLocation", "Ljava.lang.String;", 0xa, NULL, NULL },
    { "formatLocationWithNSString:withNSString:withInt:withInt:", "formatLocation", "Ljava.lang.String;", 0xa, NULL, NULL },
    { "formatLocationWithNSString:withNSString:withNSString:withBoolean:withInt:withInt:", "formatLocation", "Ljava.lang.String;", 0xa, NULL, NULL },
    { "formatPositionWithInt:withInt:", "formatPosition", "Ljava.lang.String;", 0x8, NULL, NULL },
    { "shortenWithNSString:withInt:", "shorten", "Ljava.lang.String;", 0x8, NULL, NULL },
    { "appendExpressionAsUntearableWithJavaLangStringBuffer:withFreemarkerCoreExpression:", "appendExpressionAsUntearable", "Ljava.lang.StringBuffer;", 0x8, NULL, NULL },
    { "newArgCntErrorWithNSString:withInt:withInt:", "newArgCntError", "Lfreemarker.template.TemplateModelException;", 0x8, NULL, NULL },
    { "newArgCntErrorWithNSString:withInt:withInt:withInt:", "newArgCntError", "Lfreemarker.template.TemplateModelException;", 0x8, NULL, NULL },
    { "newMethodArgMustBeStringExceptionWithNSString:withInt:withFreemarkerTemplateTemplateModel:", "newMethodArgMustBeStringException", "Lfreemarker.template.TemplateModelException;", 0x8, NULL, NULL },
    { "newMethodArgMustBeNumberExceptionWithNSString:withInt:withFreemarkerTemplateTemplateModel:", "newMethodArgMustBeNumberException", "Lfreemarker.template.TemplateModelException;", 0x8, NULL, NULL },
    { "newMethodArgMustBeBooleanExceptionWithNSString:withInt:withFreemarkerTemplateTemplateModel:", "newMethodArgMustBeBooleanException", "Lfreemarker.template.TemplateModelException;", 0x8, NULL, NULL },
    { "newMethodArgMustBeExtendedHashExceptionWithNSString:withInt:withFreemarkerTemplateTemplateModel:", "newMethodArgMustBeExtendedHashException", "Lfreemarker.template.TemplateModelException;", 0x8, NULL, NULL },
    { "newMethodArgMustBeSequenceExceptionWithNSString:withInt:withFreemarkerTemplateTemplateModel:", "newMethodArgMustBeSequenceException", "Lfreemarker.template.TemplateModelException;", 0x8, NULL, NULL },
    { "newMethodArgMustBeSequenceOrCollectionExceptionWithNSString:withInt:withFreemarkerTemplateTemplateModel:", "newMethodArgMustBeSequenceOrCollectionException", "Lfreemarker.template.TemplateModelException;", 0x8, NULL, NULL },
    { "newMethodArgUnexpectedTypeExceptionWithNSString:withInt:withNSString:withFreemarkerTemplateTemplateModel:", "newMethodArgUnexpectedTypeException", "Lfreemarker.template.TemplateModelException;", 0x8, NULL, NULL },
    { "newMethodArgInvalidValueExceptionWithNSString:withInt:withNSObjectArray:", "newMethodArgInvalidValueException", "Lfreemarker.template.TemplateModelException;", 0x8, NULL, NULL },
    { "newMethodArgsInvalidValueExceptionWithNSString:withNSObjectArray:", "newMethodArgsInvalidValueException", "Lfreemarker.template.TemplateModelException;", 0x8, NULL, NULL },
    { "newInstantiatingClassNotAllowedExceptionWithNSString:withFreemarkerCoreEnvironment:", "newInstantiatingClassNotAllowedException", "Lfreemarker.template.TemplateException;", 0x8, NULL, NULL },
    { "newCantFormatUnknownTypeDateExceptionWithFreemarkerCoreExpression:withFreemarkerCoreUnknownDateTypeFormattingUnsupportedException:", "newCantFormatUnknownTypeDateException", "Lfreemarker.core._TemplateModelException;", 0x8, NULL, NULL },
    { "newCantFormatDateExceptionWithFreemarkerCoreExpression:withFreemarkerCoreUnformattableDateException:", "newCantFormatDateException", "Lfreemarker.template.TemplateModelException;", 0x8, NULL, NULL },
    { "getAOrAnWithNSString:", "getAOrAn", "Ljava.lang.String;", 0x8, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "UNKNOWN_DATE_TO_STRING_ERROR_MESSAGE_", NULL, 0x18, "Ljava.lang.String;", &FreemarkerCoreMessageUtil_UNKNOWN_DATE_TO_STRING_ERROR_MESSAGE_, NULL,  },
    { "UNKNOWN_DATE_TYPE_ERROR_TIP_", NULL, 0x18, "Ljava.lang.String;", &FreemarkerCoreMessageUtil_UNKNOWN_DATE_TYPE_ERROR_TIP_, NULL,  },
    { "UNKNOWN_DATE_TO_STRING_TIPS_", NULL, 0x18, "[Ljava.lang.String;", &FreemarkerCoreMessageUtil_UNKNOWN_DATE_TO_STRING_TIPS_, NULL,  },
    { "EMBEDDED_MESSAGE_BEGIN_", NULL, 0x18, "Ljava.lang.String;", &FreemarkerCoreMessageUtil_EMBEDDED_MESSAGE_BEGIN_, NULL,  },
    { "EMBEDDED_MESSAGE_END_", NULL, 0x18, "Ljava.lang.String;", &FreemarkerCoreMessageUtil_EMBEDDED_MESSAGE_END_, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerCoreMessageUtil = { 2, "MessageUtil", "freemarker.core", NULL, 0x0, 29, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerCoreMessageUtil;
}

@end


#line 50
void FreemarkerCoreMessageUtil_init(FreemarkerCoreMessageUtil *self) {
  (void) NSObject_init(self);
}


#line 50
FreemarkerCoreMessageUtil *new_FreemarkerCoreMessageUtil_init() {
  FreemarkerCoreMessageUtil *self = [FreemarkerCoreMessageUtil alloc];
  FreemarkerCoreMessageUtil_init(self);
  return self;
}


#line 52
NSString *FreemarkerCoreMessageUtil_formatLocationForSimpleParsingErrorWithFreemarkerTemplateTemplate_withInt_withInt_(FreemarkerTemplateTemplate *template_, jint line, jint column) {
  FreemarkerCoreMessageUtil_initialize();
  
#line 53
  return FreemarkerCoreMessageUtil_formatLocationWithNSString_withFreemarkerTemplateTemplate_withInt_withInt_(@"in", template_, line, column);
}


#line 56
NSString *FreemarkerCoreMessageUtil_formatLocationForSimpleParsingErrorWithNSString_withInt_withInt_(NSString *templateSourceName, jint line, jint column) {
  FreemarkerCoreMessageUtil_initialize();
  
#line 57
  return FreemarkerCoreMessageUtil_formatLocationWithNSString_withNSString_withInt_withInt_(@"in", templateSourceName, line, column);
}


#line 60
NSString *FreemarkerCoreMessageUtil_formatLocationForDependentParsingErrorWithFreemarkerTemplateTemplate_withInt_withInt_(FreemarkerTemplateTemplate *template_, jint line, jint column) {
  FreemarkerCoreMessageUtil_initialize();
  
#line 61
  return FreemarkerCoreMessageUtil_formatLocationWithNSString_withFreemarkerTemplateTemplate_withInt_withInt_(@"on", template_, line, column);
}


#line 64
NSString *FreemarkerCoreMessageUtil_formatLocationForDependentParsingErrorWithNSString_withInt_withInt_(NSString *templateSourceName, jint line, jint column) {
  FreemarkerCoreMessageUtil_initialize();
  
#line 65
  return FreemarkerCoreMessageUtil_formatLocationWithNSString_withNSString_withInt_withInt_(@"on", templateSourceName, line, column);
}


#line 68
NSString *FreemarkerCoreMessageUtil_formatLocationForEvaluationErrorWithFreemarkerTemplateTemplate_withInt_withInt_(FreemarkerTemplateTemplate *template_, jint line, jint column) {
  FreemarkerCoreMessageUtil_initialize();
  
#line 69
  return FreemarkerCoreMessageUtil_formatLocationWithNSString_withFreemarkerTemplateTemplate_withInt_withInt_(@"at", template_, line, column);
}


#line 72
NSString *FreemarkerCoreMessageUtil_formatLocationForEvaluationErrorWithFreemarkerCoreMacro_withInt_withInt_(FreemarkerCoreMacro *macro, jint line, jint column) {
  FreemarkerCoreMessageUtil_initialize();
  
#line 73
  FreemarkerTemplateTemplate *t = [((FreemarkerCoreMacro *) nil_chk(macro)) getTemplate];
  return FreemarkerCoreMessageUtil_formatLocationWithNSString_withNSString_withNSString_withBoolean_withInt_withInt_(@"at", t != nil ? [t getSourceName] : nil, [macro getName], [macro isFunction], line, column);
}


#line 77
NSString *FreemarkerCoreMessageUtil_formatLocationForEvaluationErrorWithNSString_withInt_withInt_(NSString *templateSourceName, jint line, jint column) {
  FreemarkerCoreMessageUtil_initialize();
  
#line 78
  return FreemarkerCoreMessageUtil_formatLocationWithNSString_withNSString_withInt_withInt_(@"at", templateSourceName, line, column);
}


#line 81
NSString *FreemarkerCoreMessageUtil_formatLocationWithNSString_withFreemarkerTemplateTemplate_withInt_withInt_(NSString *preposition, FreemarkerTemplateTemplate *template_, jint line, jint column) {
  FreemarkerCoreMessageUtil_initialize();
  
#line 82
  return FreemarkerCoreMessageUtil_formatLocationWithNSString_withNSString_withInt_withInt_(preposition, template_ != nil ? [template_ getSourceName] : nil, line, column);
}


#line 85
NSString *FreemarkerCoreMessageUtil_formatLocationWithNSString_withNSString_withInt_withInt_(NSString *preposition, NSString *templateSourceName, jint line, jint column) {
  FreemarkerCoreMessageUtil_initialize();
  
#line 86
  return FreemarkerCoreMessageUtil_formatLocationWithNSString_withNSString_withNSString_withBoolean_withInt_withInt_(
#line 87
  preposition, templateSourceName,
#line 88
  nil, NO,
#line 89
  line, column);
}


#line 92
NSString *FreemarkerCoreMessageUtil_formatLocationWithNSString_withNSString_withNSString_withBoolean_withInt_withInt_(NSString *preposition, NSString *templateSourceName, NSString *macroOrFuncName, jboolean isFunction, jint line, jint column) {
  FreemarkerCoreMessageUtil_initialize();
  
#line 96
  NSString *templateDesc;
  if (line < 0) {
    templateDesc = @"?eval-ed string";
    macroOrFuncName = nil;
  }
  else {
    
#line 101
    templateDesc = templateSourceName != nil ? JreStrcat("$$", @"template ", FreemarkerTemplateUtilityStringUtil_jQuoteNoXSSWithNSString_(
#line 102
    templateSourceName)) :
#line 103
    @"nameless template";
  }
  return JreStrcat("$$$C$C$", @"in ", templateDesc,
#line 106
  (macroOrFuncName != nil ? JreStrcat("$$$", @" in ",
#line 107
  (isFunction ? @"function " : @"macro "), FreemarkerTemplateUtilityStringUtil_jQuoteWithNSString_(macroOrFuncName)) :
#line 108
  @""), ' ',
#line 110
  preposition, ' ', FreemarkerCoreMessageUtil_formatPositionWithInt_withInt_(line, column));
}


#line 113
NSString *FreemarkerCoreMessageUtil_formatPositionWithInt_withInt_(jint line, jint column) {
  FreemarkerCoreMessageUtil_initialize();
  
#line 114
  return JreStrcat("$I$I", @"line ", (line >= 0 ? line : line - (FreemarkerCoreTemplateObject_RUNTIME_EVAL_LINE_DISPLACEMENT - 1)), @", column ",
#line 115
  column);
}


#line 123
NSString *FreemarkerCoreMessageUtil_shortenWithNSString_withInt_(NSString *s, jint maxLength) {
  FreemarkerCoreMessageUtil_initialize();
  
#line 124
  if (maxLength < 5) maxLength = 5;
  
#line 126
  jboolean isTruncated = NO;
  
#line 128
  jint brIdx = [((NSString *) nil_chk(s)) indexOf:0x000a];
  if (brIdx != -1) {
    s = [s substring:0 endIndex:brIdx];
    isTruncated = YES;
  }
  
#line 132
  ;
  brIdx = [((NSString *) nil_chk(s)) indexOf:0x000d];
  if (brIdx != -1) {
    s = [s substring:0 endIndex:brIdx];
    isTruncated = YES;
  }
  
#line 139
  if (((jint) [((NSString *) nil_chk(s)) length]) > maxLength) {
    s = [s substring:0 endIndex:maxLength - 3];
    isTruncated = YES;
  }
  
#line 144
  if (!isTruncated) {
    return s;
  }
  else {
    
#line 147
    if ([((NSString *) nil_chk(s)) hasSuffix:@"."]) {
      if ([s hasSuffix:@".."]) {
        if ([s hasSuffix:@"..."]) {
          return s;
        }
        else {
          
#line 152
          return JreStrcat("$C", s, '.');
        }
      }
      else {
        
#line 155
        return JreStrcat("$$", s, @"..");
      }
    }
    else {
      
#line 158
      return JreStrcat("$$", s, @"...");
    }
  }
}


#line 163
JavaLangStringBuffer *FreemarkerCoreMessageUtil_appendExpressionAsUntearableWithJavaLangStringBuffer_withFreemarkerCoreExpression_(JavaLangStringBuffer *sb, FreemarkerCoreExpression *argExp) {
  FreemarkerCoreMessageUtil_initialize();
  
#line 164
  jboolean needParen =
#line 165
  !([argExp isKindOfClass:[FreemarkerCoreNumberLiteral class]]) &&
#line 166
  !([argExp isKindOfClass:[FreemarkerCoreStringLiteral class]]) &&
#line 167
  !([argExp isKindOfClass:[FreemarkerCoreBooleanLiteral class]]) &&
#line 168
  !([argExp isKindOfClass:[FreemarkerCoreListLiteral class]]) &&
#line 169
  !([argExp isKindOfClass:[FreemarkerCoreHashLiteral class]]) &&
#line 170
  !([argExp isKindOfClass:[FreemarkerCoreIdentifier class]]) &&
#line 171
  !([argExp isKindOfClass:[FreemarkerCoreDot class]]) &&
#line 172
  !([argExp isKindOfClass:[FreemarkerCoreDynamicKeyName class]]) &&
#line 173
  !([argExp isKindOfClass:[FreemarkerCoreMethodCall class]]) &&
#line 174
  !([argExp isKindOfClass:[FreemarkerCoreBuiltIn class]]);
  if (needParen) (void) [((JavaLangStringBuffer *) nil_chk(sb)) appendWithChar:'('];
  (void) [((JavaLangStringBuffer *) nil_chk(sb)) appendWithNSString:[((FreemarkerCoreExpression *) nil_chk(argExp)) getCanonicalForm]];
  if (needParen) (void) [sb appendWithChar:')'];
  return sb;
}


#line 181
FreemarkerTemplateTemplateModelException *FreemarkerCoreMessageUtil_newArgCntErrorWithNSString_withInt_withInt_(NSString *methodName, jint argCnt, jint expectedCnt) {
  FreemarkerCoreMessageUtil_initialize();
  
#line 182
  return FreemarkerCoreMessageUtil_newArgCntErrorWithNSString_withInt_withInt_withInt_(methodName, argCnt, expectedCnt, expectedCnt);
}


#line 185
FreemarkerTemplateTemplateModelException *FreemarkerCoreMessageUtil_newArgCntErrorWithNSString_withInt_withInt_withInt_(NSString *methodName, jint argCnt, jint minCnt, jint maxCnt) {
  FreemarkerCoreMessageUtil_initialize();
  
#line 186
  JavaUtilArrayList *desc = new_JavaUtilArrayList_initWithInt_(20);
  
#line 188
  [desc addWithId:methodName];
  
#line 190
  [desc addWithId:@"("];
  if (maxCnt != 0) [desc addWithId:@"..."];
  [desc addWithId:@") expects "];
  
#line 194
  if (minCnt == maxCnt) {
    if (maxCnt == 0) {
      [desc addWithId:@"no"];
    }
    else {
      
#line 198
      [desc addWithId:new_JavaLangInteger_initWithInt_(maxCnt)];
    }
  }
  else
#line 200
  if (maxCnt - minCnt == 1) {
    [desc addWithId:new_JavaLangInteger_initWithInt_(minCnt)];
    [desc addWithId:@" or "];
    [desc addWithId:new_JavaLangInteger_initWithInt_(maxCnt)];
  }
  else {
    
#line 205
    [desc addWithId:new_JavaLangInteger_initWithInt_(minCnt)];
    if (maxCnt != JavaLangInteger_MAX_VALUE) {
      [desc addWithId:@" to "];
      [desc addWithId:new_JavaLangInteger_initWithInt_(maxCnt)];
    }
    else {
      
#line 210
      [desc addWithId:@" or more (unlimited)"];
    }
  }
  [desc addWithId:@" argument"];
  if (maxCnt > 1) [desc addWithId:@"s"];
  
#line 216
  [desc addWithId:@" but has received "];
  if (argCnt == 0) {
    [desc addWithId:@"none"];
  }
  else {
    
#line 220
    [desc addWithId:new_JavaLangInteger_initWithInt_(argCnt)];
  }
  [desc addWithId:@"."];
  
#line 224
  return new_FreemarkerCore_TemplateModelException_initWithNSObjectArray_([desc toArray]);
}


#line 227
FreemarkerTemplateTemplateModelException *FreemarkerCoreMessageUtil_newMethodArgMustBeStringExceptionWithNSString_withInt_withFreemarkerTemplateTemplateModel_(NSString *methodName, jint argIdx, id<FreemarkerTemplateTemplateModel> arg) {
  FreemarkerCoreMessageUtil_initialize();
  
#line 228
  return FreemarkerCoreMessageUtil_newMethodArgUnexpectedTypeExceptionWithNSString_withInt_withNSString_withFreemarkerTemplateTemplateModel_(methodName, argIdx, @"string", arg);
}


#line 231
FreemarkerTemplateTemplateModelException *FreemarkerCoreMessageUtil_newMethodArgMustBeNumberExceptionWithNSString_withInt_withFreemarkerTemplateTemplateModel_(NSString *methodName, jint argIdx, id<FreemarkerTemplateTemplateModel> arg) {
  FreemarkerCoreMessageUtil_initialize();
  
#line 232
  return FreemarkerCoreMessageUtil_newMethodArgUnexpectedTypeExceptionWithNSString_withInt_withNSString_withFreemarkerTemplateTemplateModel_(methodName, argIdx, @"number", arg);
}


#line 235
FreemarkerTemplateTemplateModelException *FreemarkerCoreMessageUtil_newMethodArgMustBeBooleanExceptionWithNSString_withInt_withFreemarkerTemplateTemplateModel_(NSString *methodName, jint argIdx, id<FreemarkerTemplateTemplateModel> arg) {
  FreemarkerCoreMessageUtil_initialize();
  
#line 236
  return FreemarkerCoreMessageUtil_newMethodArgUnexpectedTypeExceptionWithNSString_withInt_withNSString_withFreemarkerTemplateTemplateModel_(methodName, argIdx, @"boolean", arg);
}


#line 239
FreemarkerTemplateTemplateModelException *FreemarkerCoreMessageUtil_newMethodArgMustBeExtendedHashExceptionWithNSString_withInt_withFreemarkerTemplateTemplateModel_(NSString *methodName, jint argIdx, id<FreemarkerTemplateTemplateModel> arg) {
  FreemarkerCoreMessageUtil_initialize();
  return FreemarkerCoreMessageUtil_newMethodArgUnexpectedTypeExceptionWithNSString_withInt_withNSString_withFreemarkerTemplateTemplateModel_(methodName, argIdx, @"extended hash", arg);
}

FreemarkerTemplateTemplateModelException *FreemarkerCoreMessageUtil_newMethodArgMustBeSequenceExceptionWithNSString_withInt_withFreemarkerTemplateTemplateModel_(NSString *methodName, jint argIdx, id<FreemarkerTemplateTemplateModel> arg) {
  FreemarkerCoreMessageUtil_initialize();
  return FreemarkerCoreMessageUtil_newMethodArgUnexpectedTypeExceptionWithNSString_withInt_withNSString_withFreemarkerTemplateTemplateModel_(methodName, argIdx, @"sequence", arg);
}

FreemarkerTemplateTemplateModelException *FreemarkerCoreMessageUtil_newMethodArgMustBeSequenceOrCollectionExceptionWithNSString_withInt_withFreemarkerTemplateTemplateModel_(NSString *methodName, jint argIdx, id<FreemarkerTemplateTemplateModel> arg) {
  FreemarkerCoreMessageUtil_initialize();
  return FreemarkerCoreMessageUtil_newMethodArgUnexpectedTypeExceptionWithNSString_withInt_withNSString_withFreemarkerTemplateTemplateModel_(methodName, argIdx, @"sequence or collection", arg);
}

FreemarkerTemplateTemplateModelException *FreemarkerCoreMessageUtil_newMethodArgUnexpectedTypeExceptionWithNSString_withInt_withNSString_withFreemarkerTemplateTemplateModel_(NSString *methodName, jint argIdx, NSString *expectedType, id<FreemarkerTemplateTemplateModel> arg) {
  FreemarkerCoreMessageUtil_initialize();
  return new_FreemarkerCore_TemplateModelException_initWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){
#line 257
    methodName, @"(...) expects ", new_FreemarkerCore_DelayedAOrAn_initWithId_(expectedType), @" as argument #", new_JavaLangInteger_initWithInt_(argIdx + 1),
#line 258
    @", but received ", new_FreemarkerCore_DelayedAOrAn_initWithId_(new_FreemarkerCore_DelayedFTLTypeDescription_initWithFreemarkerTemplateTemplateModel_(arg)), @"." } count:8 type:NSObject_class_()]);
  }


#line 264
FreemarkerTemplateTemplateModelException *FreemarkerCoreMessageUtil_newMethodArgInvalidValueExceptionWithNSString_withInt_withNSObjectArray_(NSString *methodName, jint argIdx, IOSObjectArray *details) {
  FreemarkerCoreMessageUtil_initialize();
  return new_FreemarkerCore_TemplateModelException_initWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){
#line 267
    methodName, @"(...) argument #", new_JavaLangInteger_initWithInt_(argIdx + 1),
#line 268
    @" had invalid value: ", details } count:5 type:NSObject_class_()]);
  }


#line 274
FreemarkerTemplateTemplateModelException *FreemarkerCoreMessageUtil_newMethodArgsInvalidValueExceptionWithNSString_withNSObjectArray_(NSString *methodName, IOSObjectArray *details) {
  FreemarkerCoreMessageUtil_initialize();
  return new_FreemarkerCore_TemplateModelException_initWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){
#line 277
    methodName, @"(...) arguments have invalid value: ", details } count:3 type:NSObject_class_()]);
  }


#line 280
FreemarkerTemplateTemplateException *FreemarkerCoreMessageUtil_newInstantiatingClassNotAllowedExceptionWithNSString_withFreemarkerCoreEnvironment_(NSString *className_, FreemarkerCoreEnvironment *env) {
  FreemarkerCoreMessageUtil_initialize();
  
#line 281
  return new_FreemarkerCore_MiscTemplateException_initWithFreemarkerCoreEnvironment_withNSObjectArray_(env, [IOSObjectArray newArrayWithObjects:(id[]){
#line 282
    @"Instantiating ", className_, @" is not allowed in the template for security reasons." } count:3 type:NSObject_class_()]);
  }


#line 285
FreemarkerCore_TemplateModelException *FreemarkerCoreMessageUtil_newCantFormatUnknownTypeDateExceptionWithFreemarkerCoreExpression_withFreemarkerCoreUnknownDateTypeFormattingUnsupportedException_(FreemarkerCoreExpression *dateSourceExpr, FreemarkerCoreUnknownDateTypeFormattingUnsupportedException *cause) {
  FreemarkerCoreMessageUtil_initialize();
  return new_FreemarkerCore_TemplateModelException_initWithJavaLangThrowable_withFreemarkerCoreEnvironment_withFreemarkerCore_ErrorDescriptionBuilder_(cause, nil, [((FreemarkerCore_ErrorDescriptionBuilder *) nil_chk([new_FreemarkerCore_ErrorDescriptionBuilder_initWithNSString_(
#line 288
  FreemarkerCoreMessageUtil_UNKNOWN_DATE_TO_STRING_ERROR_MESSAGE_) blameWithFreemarkerCoreExpression:
#line 289
  dateSourceExpr])) tipsWithNSObjectArray:
#line 290
  FreemarkerCoreMessageUtil_UNKNOWN_DATE_TO_STRING_TIPS_]);
}


#line 293
FreemarkerTemplateTemplateModelException *FreemarkerCoreMessageUtil_newCantFormatDateExceptionWithFreemarkerCoreExpression_withFreemarkerCoreUnformattableDateException_(FreemarkerCoreExpression *dateSourceExpr, FreemarkerCoreUnformattableDateException *cause) {
  FreemarkerCoreMessageUtil_initialize();
  return new_FreemarkerCore_TemplateModelException_initWithJavaLangThrowable_withFreemarkerCoreEnvironment_withFreemarkerCore_ErrorDescriptionBuilder_(cause, nil, [new_FreemarkerCore_ErrorDescriptionBuilder_initWithNSString_(
#line 296
  [((FreemarkerCoreUnformattableDateException *) nil_chk(cause)) getMessage]) blameWithFreemarkerCoreExpression:
#line 297
  dateSourceExpr]);
}


#line 303
NSString *FreemarkerCoreMessageUtil_getAOrAnWithNSString_(NSString *s) {
  FreemarkerCoreMessageUtil_initialize();
  
#line 304
  if (s == nil) return nil;
  if (((jint) [((NSString *) nil_chk(s)) length]) == 0) return @"";
  
#line 307
  jchar fc = JavaLangCharacter_toLowerCaseWithChar_([s charAtWithInt:0]);
  if (fc == 'a' || fc == 'e' || fc == 'i') {
    return @"an";
  }
  else
#line 310
  if (fc == 'h') {
    NSString *ls = [s lowercaseString];
    if ([((NSString *) nil_chk(ls)) hasPrefix:@"has"] || [ls hasPrefix:@"hi"]) {
      return @"a";
    }
    else
#line 314
    if ([ls hasPrefix:@"ht"]) {
      return @"an";
    }
    else {
      
#line 317
      return @"a(n)";
    }
  }
  else
#line 319
  if (fc == 'u' || fc == 'o') {
    return @"a(n)";
  }
  else {
    
#line 322
    jchar sc = (((jint) [s length]) > 1) ? [s charAtWithInt:1] : 0x0000;
    if (fc == 'x' && !(sc == 'a' || sc == 'e' || sc == 'i' || sc == 'a' || sc == 'o' || sc == 'u')) {
      return @"an";
    }
    else {
      
#line 326
      return @"a";
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreMessageUtil)
