//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/TemplateElement.java
//


#include "BlockAssignment.h"
#include "Environment.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "Macro.h"
#include "MixedContent.h"
#include "ParseException.h"
#include "SimpleSequence.h"
#include "TemplateElement.h"
#include "TemplateException.h"
#include "TemplateNodeModel.h"
#include "TemplateObject.h"
#include "TemplateSequenceModel.h"
#include "TreeNode.h"
#include "_ArrayEnumeration.h"
#include "java/io/IOException.h"
#include "java/lang/ArrayIndexOutOfBoundsException.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/util/Collections.h"
#include "java/util/Enumeration.h"
#include "java/util/List.h"

#line 0 "/Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/TemplateElement.java"

#define FreemarkerCoreTemplateElement_INITIAL_REGULATED_CHILD_BUFFER_CAPACITY 6

@interface FreemarkerCoreTemplateElement () {
 @public
  FreemarkerCoreTemplateElement *parent_;
  /**
   @brief Used by elements that has no fixed schema for its child elements.
   For example, a <code>#case</code> can enclose any kind of elements. Only one of #nestedBlock and #regulatedChildBuffer can be non- <code>null</code> . This element is typically a MixedContent , at least before #postParseCleanup(boolean) (which optimizes out MixedContent with child count less than 2).
   */
  FreemarkerCoreTemplateElement *nestedBlock_;
  /**
   @brief Used by elements that has a fixed schema for its child elements.
   For example, <code>#switch</code> can only have <code>#case</code> and <code>#default</code> child elements. Only one of #nestedBlock and #regulatedChildBuffer can be non- <code>null</code> .
   */
  IOSObjectArray *regulatedChildBuffer_;
  jint regulatedChildCount_;
  /**
   @brief The index of the element in the parent's #regulatedChildBuffer array, or 0 if this is the #nestedBlock of the parent.
   @since 2.3.23
   */
  jint index_;
}

- (FreemarkerCoreTemplateElement *)getFirstChild;

- (FreemarkerCoreTemplateElement *)getLastChild;

- (FreemarkerCoreTemplateElement *)getFirstLeaf;

- (FreemarkerCoreTemplateElement *)getLastLeaf;

@end

J2OBJC_FIELD_SETTER(FreemarkerCoreTemplateElement, parent_, FreemarkerCoreTemplateElement *)
J2OBJC_FIELD_SETTER(FreemarkerCoreTemplateElement, nestedBlock_, FreemarkerCoreTemplateElement *)
J2OBJC_FIELD_SETTER(FreemarkerCoreTemplateElement, regulatedChildBuffer_, IOSObjectArray *)

J2OBJC_STATIC_FIELD_GETTER(FreemarkerCoreTemplateElement, INITIAL_REGULATED_CHILD_BUFFER_CAPACITY, jint)

__attribute__((unused)) static void FreemarkerCoreTemplateElement_setRegulatedChildBufferCapacityWithInt_(FreemarkerCoreTemplateElement *self, jint capacity);

__attribute__((unused)) static void FreemarkerCoreTemplateElement_addRegulatedChildWithInt_withFreemarkerCoreTemplateElement_(FreemarkerCoreTemplateElement *self, jint index, FreemarkerCoreTemplateElement *nestedElement);

__attribute__((unused)) static FreemarkerCoreTemplateElement *FreemarkerCoreTemplateElement_getFirstChild(FreemarkerCoreTemplateElement *self);

__attribute__((unused)) static FreemarkerCoreTemplateElement *FreemarkerCoreTemplateElement_getLastChild(FreemarkerCoreTemplateElement *self);

__attribute__((unused)) static FreemarkerCoreTemplateElement *FreemarkerCoreTemplateElement_getFirstLeaf(FreemarkerCoreTemplateElement *self);

__attribute__((unused)) static FreemarkerCoreTemplateElement *FreemarkerCoreTemplateElement_getLastLeaf(FreemarkerCoreTemplateElement *self);


#line 38
@implementation FreemarkerCoreTemplateElement


#line 74
- (void)acceptWithFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}


#line 89
- (NSString *)getDescription {
  return [self dumpWithBoolean:NO];
}


#line 96
- (NSString *)getCanonicalForm {
  return [self dumpWithBoolean:YES];
}


#line 106
- (jboolean)isShownInStackTrace {
  return YES;
}


#line 116
- (jboolean)isNestedBlockRepeater {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 125
- (NSString *)dumpWithBoolean:(jboolean)canonical {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 129
- (id<FreemarkerTemplateTemplateNodeModel>)getParentNode {
  
#line 131
  return nil;
}


#line 134
- (NSString *)getNodeNamespace {
  return nil;
}

- (NSString *)getNodeType {
  return @"element";
}

- (id<FreemarkerTemplateTemplateSequenceModel>)getChildNodes {
  if (regulatedChildBuffer_ != nil) {
    FreemarkerTemplateSimpleSequence *seq = new_FreemarkerTemplateSimpleSequence_initWithInt_(regulatedChildCount_);
    for (jint i = 0; i < regulatedChildCount_; i++) {
      [seq addWithId:IOSObjectArray_Get(regulatedChildBuffer_, i)];
    }
    return seq;
  }
  FreemarkerTemplateSimpleSequence *result = new_FreemarkerTemplateSimpleSequence_initWithInt_(1);
  if (nestedBlock_ != nil) {
    [result addWithId:nestedBlock_];
  }
  return result;
}

- (NSString *)getNodeName {
  NSString *classname = [[self getClass] getName];
  jint shortNameOffset = [((NSString *) nil_chk(classname)) lastIndexOf:'.'] + 1;
  return [classname substring:shortNameOffset];
}


#line 165
- (jboolean)isLeaf {
  return nestedBlock_ == nil && regulatedChildCount_ == 0;
}


#line 172
- (jboolean)getAllowsChildren {
  return ![self isLeaf];
}


#line 179
- (jint)getIndexWithRepackagedJavaxSwingTreeTreeNode:(id<RepackagedJavaxSwingTreeTreeNode>)node {
  if ([nestedBlock_ isKindOfClass:[FreemarkerCoreMixedContent class]]) {
    return [((FreemarkerCoreTemplateElement *) nil_chk(nestedBlock_)) getIndexWithRepackagedJavaxSwingTreeTreeNode:node];
  }
  if (nestedBlock_ != nil) {
    if (node == nestedBlock_) {
      return 0;
    }
  }
  else {
    
#line 188
    for (jint i = 0; i < regulatedChildCount_; i++) {
      if ([((FreemarkerCoreTemplateElement *) nil_chk(IOSObjectArray_Get(nil_chk(regulatedChildBuffer_), i))) isEqual:node]) {
        return i;
      }
    }
  }
  return -1;
}


#line 197
- (jint)getChildCount {
  if ([nestedBlock_ isKindOfClass:[FreemarkerCoreMixedContent class]]) {
    return [((FreemarkerCoreTemplateElement *) nil_chk(nestedBlock_)) getChildCount];
  }
  if (nestedBlock_ != nil) {
    return 1;
  }
  return regulatedChildCount_;
}


#line 211
- (id<JavaUtilEnumeration>)children {
  if ([nestedBlock_ isKindOfClass:[FreemarkerCoreMixedContent class]]) {
    return [((FreemarkerCoreTemplateElement *) nil_chk(nestedBlock_)) children];
  }
  if (nestedBlock_ != nil) {
    return JavaUtilCollections_enumerationWithJavaUtilCollection_(JavaUtilCollections_singletonListWithId_(nestedBlock_));
  }
  else if (regulatedChildBuffer_ != nil) {
    return new_FreemarkerCore_ArrayEnumeration_initWithNSObjectArray_withInt_(regulatedChildBuffer_, regulatedChildCount_);
  }
  return JavaUtilCollections_enumerationWithJavaUtilCollection_(JavaUtilCollections_get_EMPTY_LIST_());
}


#line 228
- (id<RepackagedJavaxSwingTreeTreeNode>)getChildAtWithInt:(jint)index {
  if ([nestedBlock_ isKindOfClass:[FreemarkerCoreMixedContent class]]) {
    return [((FreemarkerCoreTemplateElement *) nil_chk(nestedBlock_)) getChildAtWithInt:index];
  }
  if (nestedBlock_ != nil) {
    if (index == 0) {
      return nestedBlock_;
    }
    @throw new_JavaLangArrayIndexOutOfBoundsException_initWithNSString_(@"invalid index");
  }
  else if (regulatedChildCount_ != 0) {
    @try {
      return IOSObjectArray_Get(nil_chk(regulatedChildBuffer_), index);
    }
    @catch (
#line 241
    JavaLangArrayIndexOutOfBoundsException *e) {
      
#line 243
      @throw new_JavaLangIndexOutOfBoundsException_initWithNSString_(JreStrcat("$I$I", @"Index: ", index, @", Size: ", regulatedChildCount_));
    }
  }
  @throw new_JavaLangArrayIndexOutOfBoundsException_initWithNSString_(@"Template element has no children");
}


#line 249
- (void)setChildAtWithInt:(jint)index
withFreemarkerCoreTemplateElement:(FreemarkerCoreTemplateElement *)element {
  if ([nestedBlock_ isKindOfClass:[FreemarkerCoreMixedContent class]]) {
    [((FreemarkerCoreTemplateElement *) nil_chk(nestedBlock_)) setChildAtWithInt:index withFreemarkerCoreTemplateElement:element];
  }
  else if (nestedBlock_ != nil) {
    if (index == 0) {
      nestedBlock_ = element;
      ((FreemarkerCoreTemplateElement *) nil_chk(element))->index_ = 0;
      element->parent_ = self;
    }
    else {
      @throw new_JavaLangIndexOutOfBoundsException_initWithNSString_(@"invalid index");
    }
  }
  else if (regulatedChildBuffer_ != nil) {
    (void) IOSObjectArray_Set(regulatedChildBuffer_, index, element);
    ((FreemarkerCoreTemplateElement *) nil_chk(element))->index_ = index;
    element->parent_ = self;
  }
  else {
    @throw new_JavaLangIndexOutOfBoundsException_initWithNSString_(@"element has no children");
  }
}


#line 277
- (id<RepackagedJavaxSwingTreeTreeNode>)getParent {
  return parent_;
}

- (void)setRegulatedChildBufferCapacityWithInt:(jint)capacity {
  FreemarkerCoreTemplateElement_setRegulatedChildBufferCapacityWithInt_(self, capacity);
}


#line 290
- (void)addRegulatedChildWithFreemarkerCoreTemplateElement:(FreemarkerCoreTemplateElement *)nestedElement {
  FreemarkerCoreTemplateElement_addRegulatedChildWithInt_withFreemarkerCoreTemplateElement_(self, regulatedChildCount_, nestedElement);
}

- (void)addRegulatedChildWithInt:(jint)index
withFreemarkerCoreTemplateElement:(FreemarkerCoreTemplateElement *)nestedElement {
  FreemarkerCoreTemplateElement_addRegulatedChildWithInt_withFreemarkerCoreTemplateElement_(self, index, nestedElement);
}


#line 318
- (jint)getRegulatedChildCount {
  return regulatedChildCount_;
}

- (FreemarkerCoreTemplateElement *)getRegulatedChildWithInt:(jint)index {
  return IOSObjectArray_Get(nil_chk(regulatedChildBuffer_), index);
}

- (jint)getIndex {
  return index_;
}


#line 333
- (FreemarkerCoreTemplateElement *)getParentElement {
  return parent_;
}

- (FreemarkerCoreTemplateElement *)getNestedBlock {
  return nestedBlock_;
}

- (void)setNestedBlockWithFreemarkerCoreTemplateElement:(FreemarkerCoreTemplateElement *)nestedBlock {
  if (nestedBlock != nil) {
    nestedBlock->parent_ = self;
    nestedBlock->index_ = 0;
  }
  self->nestedBlock_ = nestedBlock;
}


#line 353
- (void)setFieldsForRootElement {
  index_ = 0;
  parent_ = nil;
}


#line 369
- (FreemarkerCoreTemplateElement *)postParseCleanupWithBoolean:(jboolean)stripWhitespace {
  jint regulatedChildCount = self->regulatedChildCount_;
  if (regulatedChildCount != 0) {
    for (jint i = 0; i < regulatedChildCount; i++) {
      FreemarkerCoreTemplateElement *te = IOSObjectArray_Get(nil_chk(regulatedChildBuffer_), i);
      te = [((FreemarkerCoreTemplateElement *) nil_chk(te)) postParseCleanupWithBoolean:stripWhitespace];
      (void) IOSObjectArray_Set(regulatedChildBuffer_, i, te);
      ((FreemarkerCoreTemplateElement *) nil_chk(te))->parent_ = self;
      te->index_ = i;
    }
    if (stripWhitespace) {
      for (jint i = 0; i < regulatedChildCount; i++) {
        FreemarkerCoreTemplateElement *te = IOSObjectArray_Get(nil_chk(regulatedChildBuffer_), i);
        if ([((FreemarkerCoreTemplateElement *) nil_chk(te)) isIgnorable]) {
          regulatedChildCount--;
          for (jint j = i; j < regulatedChildCount; j++) {
            FreemarkerCoreTemplateElement *te2 = IOSObjectArray_Get(regulatedChildBuffer_, j + 1);
            (void) IOSObjectArray_Set(regulatedChildBuffer_, j, te2);
            ((FreemarkerCoreTemplateElement *) nil_chk(te2))->index_ = j;
          }
          (void) IOSObjectArray_Set(regulatedChildBuffer_, regulatedChildCount, nil);
          self->regulatedChildCount_ = regulatedChildCount;
          i--;
        }
      }
    }
    if (regulatedChildCount < ((IOSObjectArray *) nil_chk(regulatedChildBuffer_))->size_ &&
#line 396
    regulatedChildCount <= regulatedChildBuffer_->size_ * 3 / 4) {
      IOSObjectArray *trimmedregulatedChildBuffer = [IOSObjectArray newArrayWithLength:regulatedChildCount type:FreemarkerCoreTemplateElement_class_()];
      for (jint i = 0; i < regulatedChildCount; i++) {
        (void) IOSObjectArray_Set(trimmedregulatedChildBuffer, i, IOSObjectArray_Get(regulatedChildBuffer_, i));
      }
      regulatedChildBuffer_ = trimmedregulatedChildBuffer;
    }
  }
  else
#line 403
  if (nestedBlock_ != nil) {
    nestedBlock_ = [nestedBlock_ postParseCleanupWithBoolean:stripWhitespace];
    if ([((FreemarkerCoreTemplateElement *) nil_chk(nestedBlock_)) isIgnorable]) {
      nestedBlock_ = nil;
    }
    else {
      
#line 408
      nestedBlock_->parent_ = self;
    }
  }
  return self;
}


#line 414
- (jboolean)isIgnorable {
  return NO;
}


#line 421
- (FreemarkerCoreTemplateElement *)prevTerminalNode {
  FreemarkerCoreTemplateElement *prev = [self previousSibling];
  if (prev != nil) {
    return FreemarkerCoreTemplateElement_getLastLeaf(prev);
  }
  else if (parent_ != nil) {
    return [parent_ prevTerminalNode];
  }
  return nil;
}

- (FreemarkerCoreTemplateElement *)nextTerminalNode {
  FreemarkerCoreTemplateElement *next = [self nextSibling];
  if (next != nil) {
    return FreemarkerCoreTemplateElement_getFirstLeaf(next);
  }
  else if (parent_ != nil) {
    return [parent_ nextTerminalNode];
  }
  return nil;
}

- (FreemarkerCoreTemplateElement *)previousSibling {
  if (parent_ == nil) {
    return nil;
  }
  return index_ > 0 ? IOSObjectArray_Get(nil_chk(((FreemarkerCoreTemplateElement *) nil_chk(parent_))->regulatedChildBuffer_), index_ - 1) : nil;
}

- (FreemarkerCoreTemplateElement *)nextSibling {
  if (parent_ == nil) {
    return nil;
  }
  return index_ + 1 < ((FreemarkerCoreTemplateElement *) nil_chk(parent_))->regulatedChildCount_ ? IOSObjectArray_Get(nil_chk(parent_->regulatedChildBuffer_), index_ + 1) : nil;
}

- (FreemarkerCoreTemplateElement *)getFirstChild {
  return FreemarkerCoreTemplateElement_getFirstChild(self);
}


#line 467
- (FreemarkerCoreTemplateElement *)getLastChild {
  return FreemarkerCoreTemplateElement_getLastChild(self);
}


#line 478
- (FreemarkerCoreTemplateElement *)getFirstLeaf {
  return FreemarkerCoreTemplateElement_getFirstLeaf(self);
}


#line 487
- (FreemarkerCoreTemplateElement *)getLastLeaf {
  return FreemarkerCoreTemplateElement_getLastLeaf(self);
}


#line 500
- (jboolean)isOutputCacheable {
  return NO;
}


#line 509
- (jboolean)heedsOpeningWhitespace {
  return NO;
}


#line 518
- (jboolean)heedsTrailingWhitespace {
  return NO;
}

- (instancetype)init {
  FreemarkerCoreTemplateElement_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "acceptWithFreemarkerCoreEnvironment:", "accept", "V", 0x400, "Lfreemarker.template.TemplateException;Ljava.io.IOException;", NULL },
    { "getDescription", NULL, "Ljava.lang.String;", 0x11, NULL, NULL },
    { "getCanonicalForm", NULL, "Ljava.lang.String;", 0x11, NULL, NULL },
    { "isShownInStackTrace", NULL, "Z", 0x0, NULL, NULL },
    { "isNestedBlockRepeater", NULL, "Z", 0x400, NULL, NULL },
    { "dumpWithBoolean:", "dump", "Ljava.lang.String;", 0x404, NULL, NULL },
    { "getParentNode", NULL, "Lfreemarker.template.TemplateNodeModel;", 0x1, NULL, NULL },
    { "getNodeNamespace", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getNodeType", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getChildNodes", NULL, "Lfreemarker.template.TemplateSequenceModel;", 0x1, NULL, NULL },
    { "getNodeName", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "isLeaf", NULL, "Z", 0x1, NULL, NULL },
    { "getAllowsChildren", NULL, "Z", 0x1, NULL, NULL },
    { "getIndexWithRepackagedJavaxSwingTreeTreeNode:", "getIndex", "I", 0x1, NULL, NULL },
    { "getChildCount", NULL, "I", 0x1, NULL, NULL },
    { "children", NULL, "Ljava.util.Enumeration;", 0x1, NULL, NULL },
    { "getChildAtWithInt:", "getChildAt", "Lrepackaged.javax.swing.tree.TreeNode;", 0x1, NULL, NULL },
    { "setChildAtWithInt:withFreemarkerCoreTemplateElement:", "setChildAt", "V", 0x1, NULL, NULL },
    { "getParent", NULL, "Lrepackaged.javax.swing.tree.TreeNode;", 0x1, NULL, NULL },
    { "setRegulatedChildBufferCapacityWithInt:", "setRegulatedChildBufferCapacity", "V", 0x10, NULL, NULL },
    { "addRegulatedChildWithFreemarkerCoreTemplateElement:", "addRegulatedChild", "V", 0x10, NULL, NULL },
    { "addRegulatedChildWithInt:withFreemarkerCoreTemplateElement:", "addRegulatedChild", "V", 0x10, NULL, NULL },
    { "getRegulatedChildCount", NULL, "I", 0x10, NULL, NULL },
    { "getRegulatedChildWithInt:", "getRegulatedChild", "Lfreemarker.core.TemplateElement;", 0x10, NULL, NULL },
    { "getIndex", NULL, "I", 0x10, NULL, NULL },
    { "getParentElement", NULL, "Lfreemarker.core.TemplateElement;", 0x10, NULL, NULL },
    { "getNestedBlock", NULL, "Lfreemarker.core.TemplateElement;", 0x10, NULL, NULL },
    { "setNestedBlockWithFreemarkerCoreTemplateElement:", "setNestedBlock", "V", 0x10, NULL, NULL },
    { "setFieldsForRootElement", NULL, "V", 0x10, NULL, NULL },
    { "postParseCleanupWithBoolean:", "postParseCleanup", "Lfreemarker.core.TemplateElement;", 0x0, "Lfreemarker.core.ParseException;", NULL },
    { "isIgnorable", NULL, "Z", 0x0, NULL, NULL },
    { "prevTerminalNode", NULL, "Lfreemarker.core.TemplateElement;", 0x0, NULL, NULL },
    { "nextTerminalNode", NULL, "Lfreemarker.core.TemplateElement;", 0x0, NULL, NULL },
    { "previousSibling", NULL, "Lfreemarker.core.TemplateElement;", 0x0, NULL, NULL },
    { "nextSibling", NULL, "Lfreemarker.core.TemplateElement;", 0x0, NULL, NULL },
    { "getFirstChild", NULL, "Lfreemarker.core.TemplateElement;", 0x2, NULL, NULL },
    { "getLastChild", NULL, "Lfreemarker.core.TemplateElement;", 0x2, NULL, NULL },
    { "getFirstLeaf", NULL, "Lfreemarker.core.TemplateElement;", 0x2, NULL, NULL },
    { "getLastLeaf", NULL, "Lfreemarker.core.TemplateElement;", 0x2, NULL, NULL },
    { "isOutputCacheable", NULL, "Z", 0x0, NULL, NULL },
    { "heedsOpeningWhitespace", NULL, "Z", 0x0, NULL, NULL },
    { "heedsTrailingWhitespace", NULL, "Z", 0x0, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "INITIAL_REGULATED_CHILD_BUFFER_CAPACITY_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = FreemarkerCoreTemplateElement_INITIAL_REGULATED_CHILD_BUFFER_CAPACITY },
    { "parent_", NULL, 0x2, "Lfreemarker.core.TemplateElement;", NULL, NULL,  },
    { "nestedBlock_", NULL, 0x2, "Lfreemarker.core.TemplateElement;", NULL, NULL,  },
    { "regulatedChildBuffer_", NULL, 0x2, "[Lfreemarker.core.TemplateElement;", NULL, NULL,  },
    { "regulatedChildCount_", NULL, 0x2, "I", NULL, NULL,  },
    { "index_", NULL, 0x2, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerCoreTemplateElement = { 2, "TemplateElement", "freemarker.core", NULL, 0x401, 43, methods, 6, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerCoreTemplateElement;
}

@end


#line 281
void FreemarkerCoreTemplateElement_setRegulatedChildBufferCapacityWithInt_(FreemarkerCoreTemplateElement *self, jint capacity) {
  jint ln = self->regulatedChildCount_;
  IOSObjectArray *newRegulatedChildBuffer = [IOSObjectArray newArrayWithLength:capacity type:FreemarkerCoreTemplateElement_class_()];
  for (jint i = 0; i < ln; i++) {
    (void) IOSObjectArray_Set(newRegulatedChildBuffer, i, IOSObjectArray_Get(nil_chk(self->regulatedChildBuffer_), i));
  }
  self->regulatedChildBuffer_ = newRegulatedChildBuffer;
}


#line 294
void FreemarkerCoreTemplateElement_addRegulatedChildWithInt_withFreemarkerCoreTemplateElement_(FreemarkerCoreTemplateElement *self, jint index, FreemarkerCoreTemplateElement *nestedElement) {
  jint lRegulatedChildCount = self->regulatedChildCount_;
  
#line 297
  IOSObjectArray *lRegulatedChildBuffer = self->regulatedChildBuffer_;
  if (lRegulatedChildBuffer == nil) {
    lRegulatedChildBuffer = [IOSObjectArray newArrayWithLength:FreemarkerCoreTemplateElement_INITIAL_REGULATED_CHILD_BUFFER_CAPACITY type:FreemarkerCoreTemplateElement_class_()];
    self->regulatedChildBuffer_ = lRegulatedChildBuffer;
  }
  else
#line 301
  if (lRegulatedChildCount == lRegulatedChildBuffer->size_) {
    FreemarkerCoreTemplateElement_setRegulatedChildBufferCapacityWithInt_(self, lRegulatedChildCount != 0 ? lRegulatedChildCount * 2 : 1);
    lRegulatedChildBuffer = self->regulatedChildBuffer_;
  }
  
#line 307
  for (jint i = lRegulatedChildCount; i > index; i--) {
    FreemarkerCoreTemplateElement *movedElement = IOSObjectArray_Get(nil_chk(lRegulatedChildBuffer), i - 1);
    ((FreemarkerCoreTemplateElement *) nil_chk(movedElement))->index_ = i;
    (void) IOSObjectArray_Set(lRegulatedChildBuffer, i, movedElement);
  }
  ((FreemarkerCoreTemplateElement *) nil_chk(nestedElement))->index_ = index;
  nestedElement->parent_ = self;
  (void) IOSObjectArray_Set(nil_chk(lRegulatedChildBuffer), index, nestedElement);
  self->regulatedChildCount_ = lRegulatedChildCount + 1;
}


#line 457
FreemarkerCoreTemplateElement *FreemarkerCoreTemplateElement_getFirstChild(FreemarkerCoreTemplateElement *self) {
  if (self->nestedBlock_ != nil) {
    return self->nestedBlock_;
  }
  if (self->regulatedChildCount_ == 0) {
    return nil;
  }
  return IOSObjectArray_Get(nil_chk(self->regulatedChildBuffer_), 0);
}

FreemarkerCoreTemplateElement *FreemarkerCoreTemplateElement_getLastChild(FreemarkerCoreTemplateElement *self) {
  if (self->nestedBlock_ != nil) {
    return self->nestedBlock_;
  }
  jint regulatedChildCount = self->regulatedChildCount_;
  if (regulatedChildCount == 0) {
    return nil;
  }
  return IOSObjectArray_Get(nil_chk(self->regulatedChildBuffer_), regulatedChildCount - 1);
}

FreemarkerCoreTemplateElement *FreemarkerCoreTemplateElement_getFirstLeaf(FreemarkerCoreTemplateElement *self) {
  FreemarkerCoreTemplateElement *te = self;
  while (![te isLeaf] && !([te isKindOfClass:[FreemarkerCoreMacro class]]) && !([te isKindOfClass:[FreemarkerCoreBlockAssignment class]])) {
    
#line 482
    te = FreemarkerCoreTemplateElement_getFirstChild(te);
  }
  return te;
}


#line 487
FreemarkerCoreTemplateElement *FreemarkerCoreTemplateElement_getLastLeaf(FreemarkerCoreTemplateElement *self) {
  FreemarkerCoreTemplateElement *te = self;
  while (![te isLeaf] && !([te isKindOfClass:[FreemarkerCoreMacro class]]) && !([te isKindOfClass:[FreemarkerCoreBlockAssignment class]])) {
    
#line 491
    te = FreemarkerCoreTemplateElement_getLastChild(te);
  }
  return te;
}

void FreemarkerCoreTemplateElement_init(FreemarkerCoreTemplateElement *self) {
  (void) FreemarkerCoreTemplateObject_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreTemplateElement)
