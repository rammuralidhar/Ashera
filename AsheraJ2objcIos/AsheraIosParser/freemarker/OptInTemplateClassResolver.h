//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/OptInTemplateClassResolver.java
//

#ifndef _FreemarkerCoreOptInTemplateClassResolver_H_
#define _FreemarkerCoreOptInTemplateClassResolver_H_

#include "J2ObjC_header.h"
#include "TemplateClassResolver.h"

@class FreemarkerCoreEnvironment;
@class FreemarkerTemplateTemplate;
@class IOSClass;
@protocol JavaUtilList;
@protocol JavaUtilSet;

/**
 @brief A TemplateClassResolver that resolves only the classes whose name was specified in the constructor.
 */
@interface FreemarkerCoreOptInTemplateClassResolver : NSObject < FreemarkerCoreTemplateClassResolver >

#pragma mark Public

/**
 @brief Creates a new instance.
 @param allowedClasses the Set of String -s that contains the full-qualified names of the allowed classes. Can be <code>null</code> (means not class is allowed).
 @param trustedTemplates the List of String -s that contains template names (i.e., template root directory relative paths) and prefix patterns (like <code>"include/\*"</code>) of templates for which TemplateClassResolver#SAFER_RESOLVER will be used (which is not as safe as OptInTemplateClassResolver ). The list items need not start with <code>"/"</code> (if they are, it will be removed). List items ending with <code>"*"</code> are treated as prefixes (i.e. <code>"foo*"</code> matches <code>"foobar"</code>, <code>"foo/bar/baaz"</code>, <code>"foowhatever/bar/baaz"</code>, etc.). The <code>"*"</code> has no special meaning anywhere else. The matched template name is the name (template root directory relative path) of the template that directly (lexically) contains the operation (like <code>?new</code>) that wants to get the class. Thus, if a trusted template includes a non-trusted template, the <code>allowedClasses</code> restriction will apply in the included template. This parameter can be <code>null</code> (means no trusted templates).
 */
- (instancetype)initWithJavaUtilSet:(id<JavaUtilSet>)allowedClasses
                   withJavaUtilList:(id<JavaUtilList>)trustedTemplates;

- (IOSClass *)resolveWithNSString:(NSString *)className_
    withFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env
   withFreemarkerTemplateTemplate:(FreemarkerTemplateTemplate *)template_;

#pragma mark Protected

/**
 @brief Extract the template name from the template object which will be matched against the trusted template names and pattern.
 */
- (NSString *)safeGetTemplateNameWithFreemarkerTemplateTemplate:(FreemarkerTemplateTemplate *)template_;

@end

J2OBJC_EMPTY_STATIC_INIT(FreemarkerCoreOptInTemplateClassResolver)

FOUNDATION_EXPORT void FreemarkerCoreOptInTemplateClassResolver_initWithJavaUtilSet_withJavaUtilList_(FreemarkerCoreOptInTemplateClassResolver *self, id<JavaUtilSet> allowedClasses, id<JavaUtilList> trustedTemplates);

FOUNDATION_EXPORT FreemarkerCoreOptInTemplateClassResolver *new_FreemarkerCoreOptInTemplateClassResolver_initWithJavaUtilSet_withJavaUtilList_(id<JavaUtilSet> allowedClasses, id<JavaUtilList> trustedTemplates) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerCoreOptInTemplateClassResolver)

#endif // _FreemarkerCoreOptInTemplateClassResolver_H_
