//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/template/utility/StandardCompress.java
//


#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "StandardCompress.h"
#include "TemplateBooleanModel.h"
#include "TemplateModelException.h"
#include "TemplateNumberModel.h"
#include "java/io/IOException.h"
#include "java/io/Writer.h"
#include "java/lang/Character.h"
#include "java/lang/ClassCastException.h"
#include "java/util/Map.h"

#line 0 "/Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/template/utility/StandardCompress.java"

@interface FreemarkerTemplateUtilityStandardCompress () {
 @public
  jint defaultBufferSize_;
}

@end

static NSString *FreemarkerTemplateUtilityStandardCompress_BUFFER_SIZE_KEY_ = 
#line 70
@"buffer_size";
J2OBJC_STATIC_FIELD_GETTER(FreemarkerTemplateUtilityStandardCompress, BUFFER_SIZE_KEY_, NSString *)

static NSString *FreemarkerTemplateUtilityStandardCompress_SINGLE_LINE_KEY_ = 
#line 71
@"single_line";
J2OBJC_STATIC_FIELD_GETTER(FreemarkerTemplateUtilityStandardCompress, SINGLE_LINE_KEY_, NSString *)

#define FreemarkerTemplateUtilityStandardCompress_StandardCompressWriter_MAX_EOL_LENGTH 2
#define FreemarkerTemplateUtilityStandardCompress_StandardCompressWriter_AT_BEGINNING 0
#define FreemarkerTemplateUtilityStandardCompress_StandardCompressWriter_SINGLE_LINE 1
#define FreemarkerTemplateUtilityStandardCompress_StandardCompressWriter_INIT 2
#define FreemarkerTemplateUtilityStandardCompress_StandardCompressWriter_SAW_CR 3
#define FreemarkerTemplateUtilityStandardCompress_StandardCompressWriter_LINEBREAK_CR 4
#define FreemarkerTemplateUtilityStandardCompress_StandardCompressWriter_LINEBREAK_CRLF 5
#define FreemarkerTemplateUtilityStandardCompress_StandardCompressWriter_LINEBREAK_LF 6

@interface FreemarkerTemplateUtilityStandardCompress_StandardCompressWriter : JavaIoWriter {
 @public
  JavaIoWriter *out_;
  IOSCharArray *buf_;
  jboolean singleLine_;
  jint pos_;
  jboolean inWhitespace_;
  jint lineBreakState_;
}

- (instancetype)initWithJavaIoWriter:(JavaIoWriter *)outArg
                             withInt:(jint)bufSize
                         withBoolean:(jboolean)singleLine;

- (void)writeWithCharArray:(IOSCharArray *)cbuf
                   withInt:(jint)off
                   withInt:(jint)len;

- (void)writeHelperWithCharArray:(IOSCharArray *)cbuf
                         withInt:(jint)off
                         withInt:(jint)len;

- (void)updateLineBreakStateWithChar:(jchar)c;

- (void)writeLineBreakOrSpace;

- (void)flushInternal;

- (void)flush;

- (void)close;

@end

J2OBJC_EMPTY_STATIC_INIT(FreemarkerTemplateUtilityStandardCompress_StandardCompressWriter)

J2OBJC_FIELD_SETTER(FreemarkerTemplateUtilityStandardCompress_StandardCompressWriter, out_, JavaIoWriter *)
J2OBJC_FIELD_SETTER(FreemarkerTemplateUtilityStandardCompress_StandardCompressWriter, buf_, IOSCharArray *)

J2OBJC_STATIC_FIELD_GETTER(FreemarkerTemplateUtilityStandardCompress_StandardCompressWriter, MAX_EOL_LENGTH, jint)

J2OBJC_STATIC_FIELD_GETTER(FreemarkerTemplateUtilityStandardCompress_StandardCompressWriter, AT_BEGINNING, jint)

J2OBJC_STATIC_FIELD_GETTER(FreemarkerTemplateUtilityStandardCompress_StandardCompressWriter, SINGLE_LINE, jint)

J2OBJC_STATIC_FIELD_GETTER(FreemarkerTemplateUtilityStandardCompress_StandardCompressWriter, INIT, jint)

J2OBJC_STATIC_FIELD_GETTER(FreemarkerTemplateUtilityStandardCompress_StandardCompressWriter, SAW_CR, jint)

J2OBJC_STATIC_FIELD_GETTER(FreemarkerTemplateUtilityStandardCompress_StandardCompressWriter, LINEBREAK_CR, jint)

J2OBJC_STATIC_FIELD_GETTER(FreemarkerTemplateUtilityStandardCompress_StandardCompressWriter, LINEBREAK_CRLF, jint)

J2OBJC_STATIC_FIELD_GETTER(FreemarkerTemplateUtilityStandardCompress_StandardCompressWriter, LINEBREAK_LF, jint)

__attribute__((unused)) static void FreemarkerTemplateUtilityStandardCompress_StandardCompressWriter_initWithJavaIoWriter_withInt_withBoolean_(FreemarkerTemplateUtilityStandardCompress_StandardCompressWriter *self, JavaIoWriter *outArg, jint bufSize, jboolean singleLine);

__attribute__((unused)) static FreemarkerTemplateUtilityStandardCompress_StandardCompressWriter *new_FreemarkerTemplateUtilityStandardCompress_StandardCompressWriter_initWithJavaIoWriter_withInt_withBoolean_(JavaIoWriter *outArg, jint bufSize, jboolean singleLine) NS_RETURNS_RETAINED;

__attribute__((unused)) static void FreemarkerTemplateUtilityStandardCompress_StandardCompressWriter_writeHelperWithCharArray_withInt_withInt_(FreemarkerTemplateUtilityStandardCompress_StandardCompressWriter *self, IOSCharArray *cbuf, jint off, jint len);

__attribute__((unused)) static void FreemarkerTemplateUtilityStandardCompress_StandardCompressWriter_updateLineBreakStateWithChar_(FreemarkerTemplateUtilityStandardCompress_StandardCompressWriter *self, jchar c);

__attribute__((unused)) static void FreemarkerTemplateUtilityStandardCompress_StandardCompressWriter_writeLineBreakOrSpace(FreemarkerTemplateUtilityStandardCompress_StandardCompressWriter *self);

__attribute__((unused)) static void FreemarkerTemplateUtilityStandardCompress_StandardCompressWriter_flushInternal(FreemarkerTemplateUtilityStandardCompress_StandardCompressWriter *self);

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerTemplateUtilityStandardCompress_StandardCompressWriter)

J2OBJC_INITIALIZED_DEFN(FreemarkerTemplateUtilityStandardCompress)

FreemarkerTemplateUtilityStandardCompress *FreemarkerTemplateUtilityStandardCompress_INSTANCE_;


#line 69
@implementation FreemarkerTemplateUtilityStandardCompress


#line 76
- (instancetype)init {
  FreemarkerTemplateUtilityStandardCompress_init(self);
  return self;
}


#line 84
- (instancetype)initWithInt:(jint)defaultBufferSize {
  FreemarkerTemplateUtilityStandardCompress_initWithInt_(self, defaultBufferSize);
  return self;
}

- (JavaIoWriter *)getWriterWithJavaIoWriter:(JavaIoWriter *)outArg
                            withJavaUtilMap:(id<JavaUtilMap>)args {
  
#line 92
  jint bufferSize = defaultBufferSize_;
  jboolean singleLine = NO;
  if (args != nil) {
    @try {
      id<FreemarkerTemplateTemplateNumberModel> num = (id<FreemarkerTemplateTemplateNumberModel>) check_protocol_cast([args getWithId:FreemarkerTemplateUtilityStandardCompress_BUFFER_SIZE_KEY_], @protocol(FreemarkerTemplateTemplateNumberModel));
      if (num != nil)
#line 98
      bufferSize = [((NSNumber *) nil_chk([num getAsNumber])) intValue];
    }
    @catch (
#line 99
    JavaLangClassCastException *e) {
      @throw new_FreemarkerTemplateTemplateModelException_initWithNSString_(JreStrcat("$$", @"Expecting numerical argument to ", FreemarkerTemplateUtilityStandardCompress_BUFFER_SIZE_KEY_));
    }
    @try {
      id<FreemarkerTemplateTemplateBooleanModel> flag = (id<FreemarkerTemplateTemplateBooleanModel>) check_protocol_cast([args getWithId:FreemarkerTemplateUtilityStandardCompress_SINGLE_LINE_KEY_], @protocol(FreemarkerTemplateTemplateBooleanModel));
      if (flag != nil)
#line 105
      singleLine = [flag getAsBoolean];
    }
    @catch (
#line 106
    JavaLangClassCastException *e) {
      @throw new_FreemarkerTemplateTemplateModelException_initWithNSString_(JreStrcat("$$", @"Expecting boolean argument to ", FreemarkerTemplateUtilityStandardCompress_SINGLE_LINE_KEY_));
    }
  }
  return new_FreemarkerTemplateUtilityStandardCompress_StandardCompressWriter_initWithJavaIoWriter_withInt_withBoolean_(outArg, bufferSize, singleLine);
}

+ (void)initialize {
  if (self == [FreemarkerTemplateUtilityStandardCompress class]) {
    FreemarkerTemplateUtilityStandardCompress_INSTANCE_ = new_FreemarkerTemplateUtilityStandardCompress_init();
    J2OBJC_SET_INITIALIZED(FreemarkerTemplateUtilityStandardCompress)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "StandardCompress", NULL, 0x1, NULL, NULL },
    { "initWithInt:", "StandardCompress", NULL, 0x1, NULL, NULL },
    { "getWriterWithJavaIoWriter:withJavaUtilMap:", "getWriter", "Ljava.io.Writer;", 0x1, "Lfreemarker.template.TemplateModelException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "BUFFER_SIZE_KEY_", NULL, 0x1a, "Ljava.lang.String;", &FreemarkerTemplateUtilityStandardCompress_BUFFER_SIZE_KEY_, NULL,  },
    { "SINGLE_LINE_KEY_", NULL, 0x1a, "Ljava.lang.String;", &FreemarkerTemplateUtilityStandardCompress_SINGLE_LINE_KEY_, NULL,  },
    { "defaultBufferSize_", NULL, 0x2, "I", NULL, NULL,  },
    { "INSTANCE_", NULL, 0x19, "Lfreemarker.template.utility.StandardCompress;", &FreemarkerTemplateUtilityStandardCompress_INSTANCE_, NULL,  },
  };
  static const char *inner_classes[] = {"Lfreemarker.template.utility.StandardCompress$StandardCompressWriter;"};
  static const J2ObjcClassInfo _FreemarkerTemplateUtilityStandardCompress = { 2, "StandardCompress", "freemarker.template.utility", NULL, 0x1, 3, methods, 4, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_FreemarkerTemplateUtilityStandardCompress;
}

@end


#line 76
void FreemarkerTemplateUtilityStandardCompress_init(FreemarkerTemplateUtilityStandardCompress *self) {
  (void) FreemarkerTemplateUtilityStandardCompress_initWithInt_(self,
#line 78
  2048);
}


#line 76
FreemarkerTemplateUtilityStandardCompress *new_FreemarkerTemplateUtilityStandardCompress_init() {
  FreemarkerTemplateUtilityStandardCompress *self = [FreemarkerTemplateUtilityStandardCompress alloc];
  FreemarkerTemplateUtilityStandardCompress_init(self);
  return self;
}


#line 84
void FreemarkerTemplateUtilityStandardCompress_initWithInt_(FreemarkerTemplateUtilityStandardCompress *self, jint defaultBufferSize) {
  (void) NSObject_init(self);
  self->defaultBufferSize_ = defaultBufferSize;
}


#line 84
FreemarkerTemplateUtilityStandardCompress *new_FreemarkerTemplateUtilityStandardCompress_initWithInt_(jint defaultBufferSize) {
  FreemarkerTemplateUtilityStandardCompress *self = [FreemarkerTemplateUtilityStandardCompress alloc];
  FreemarkerTemplateUtilityStandardCompress_initWithInt_(self, defaultBufferSize);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerTemplateUtilityStandardCompress)


#line 113
@implementation FreemarkerTemplateUtilityStandardCompress_StandardCompressWriter


#line 133
- (instancetype)initWithJavaIoWriter:(JavaIoWriter *)outArg
                             withInt:(jint)bufSize
                         withBoolean:(jboolean)singleLine {
  FreemarkerTemplateUtilityStandardCompress_StandardCompressWriter_initWithJavaIoWriter_withInt_withBoolean_(self, outArg, bufSize, singleLine);
  return self;
}


#line 139
- (void)writeWithCharArray:(IOSCharArray *)cbuf
                   withInt:(jint)off
                   withInt:(jint)len {
  for (; ; ) {
    
#line 142
    jint room = ((IOSCharArray *) nil_chk(buf_))->size_ - pos_ - FreemarkerTemplateUtilityStandardCompress_StandardCompressWriter_MAX_EOL_LENGTH;
    if (room >= len) {
      FreemarkerTemplateUtilityStandardCompress_StandardCompressWriter_writeHelperWithCharArray_withInt_withInt_(self, cbuf, off, len);
      break;
    }
    else
#line 146
    if (room <= 0) {
      FreemarkerTemplateUtilityStandardCompress_StandardCompressWriter_flushInternal(self);
    }
    else {
      
#line 149
      FreemarkerTemplateUtilityStandardCompress_StandardCompressWriter_writeHelperWithCharArray_withInt_withInt_(self, cbuf, off, room);
      FreemarkerTemplateUtilityStandardCompress_StandardCompressWriter_flushInternal(self);
      off += room;
      len -= room;
    }
  }
}


#line 157
- (void)writeHelperWithCharArray:(IOSCharArray *)cbuf
                         withInt:(jint)off
                         withInt:(jint)len {
  FreemarkerTemplateUtilityStandardCompress_StandardCompressWriter_writeHelperWithCharArray_withInt_withInt_(self, cbuf, off, len);
}


#line 180
- (void)updateLineBreakStateWithChar:(jchar)c {
  FreemarkerTemplateUtilityStandardCompress_StandardCompressWriter_updateLineBreakStateWithChar_(self, c);
}


#line 199
- (void)writeLineBreakOrSpace {
  FreemarkerTemplateUtilityStandardCompress_StandardCompressWriter_writeLineBreakOrSpace(self);
}


#line 223
- (void)flushInternal {
  FreemarkerTemplateUtilityStandardCompress_StandardCompressWriter_flushInternal(self);
}


#line 228
- (void)flush {
  FreemarkerTemplateUtilityStandardCompress_StandardCompressWriter_flushInternal(self);
  [((JavaIoWriter *) nil_chk(out_)) flush];
}

- (void)close {
  FreemarkerTemplateUtilityStandardCompress_StandardCompressWriter_flushInternal(self);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaIoWriter:withInt:withBoolean:", "StandardCompressWriter", NULL, 0x1, NULL, NULL },
    { "writeWithCharArray:withInt:withInt:", "write", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "writeHelperWithCharArray:withInt:withInt:", "writeHelper", "V", 0x2, NULL, NULL },
    { "updateLineBreakStateWithChar:", "updateLineBreakState", "V", 0x2, NULL, NULL },
    { "writeLineBreakOrSpace", NULL, "V", 0x2, NULL, NULL },
    { "flushInternal", NULL, "V", 0x2, "Ljava.io.IOException;", NULL },
    { "flush", NULL, "V", 0x1, "Ljava.io.IOException;", NULL },
    { "close", NULL, "V", 0x1, "Ljava.io.IOException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "MAX_EOL_LENGTH_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = FreemarkerTemplateUtilityStandardCompress_StandardCompressWriter_MAX_EOL_LENGTH },
    { "AT_BEGINNING_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = FreemarkerTemplateUtilityStandardCompress_StandardCompressWriter_AT_BEGINNING },
    { "SINGLE_LINE_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = FreemarkerTemplateUtilityStandardCompress_StandardCompressWriter_SINGLE_LINE },
    { "INIT_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = FreemarkerTemplateUtilityStandardCompress_StandardCompressWriter_INIT },
    { "SAW_CR_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = FreemarkerTemplateUtilityStandardCompress_StandardCompressWriter_SAW_CR },
    { "LINEBREAK_CR_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = FreemarkerTemplateUtilityStandardCompress_StandardCompressWriter_LINEBREAK_CR },
    { "LINEBREAK_CRLF_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = FreemarkerTemplateUtilityStandardCompress_StandardCompressWriter_LINEBREAK_CRLF },
    { "LINEBREAK_LF_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = FreemarkerTemplateUtilityStandardCompress_StandardCompressWriter_LINEBREAK_LF },
    { "out_", NULL, 0x12, "Ljava.io.Writer;", NULL, NULL,  },
    { "buf_", NULL, 0x12, "[C", NULL, NULL,  },
    { "singleLine_", NULL, 0x12, "Z", NULL, NULL,  },
    { "pos_", NULL, 0x2, "I", NULL, NULL,  },
    { "inWhitespace_", NULL, 0x2, "Z", NULL, NULL,  },
    { "lineBreakState_", NULL, 0x2, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerTemplateUtilityStandardCompress_StandardCompressWriter = { 2, "StandardCompressWriter", "freemarker.template.utility", "StandardCompress", 0xa, 8, methods, 14, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerTemplateUtilityStandardCompress_StandardCompressWriter;
}

@end


#line 133
void FreemarkerTemplateUtilityStandardCompress_StandardCompressWriter_initWithJavaIoWriter_withInt_withBoolean_(FreemarkerTemplateUtilityStandardCompress_StandardCompressWriter *self, JavaIoWriter *outArg, jint bufSize, jboolean singleLine) {
  (void) JavaIoWriter_init(self);
  self->pos_ =
#line 129
  0;
  self->inWhitespace_ = YES;
  self->lineBreakState_ = FreemarkerTemplateUtilityStandardCompress_StandardCompressWriter_AT_BEGINNING;
  
#line 134
  self->out_ = outArg;
  self->singleLine_ = singleLine;
  self->buf_ = [IOSCharArray newArrayWithLength:bufSize];
}


#line 133
FreemarkerTemplateUtilityStandardCompress_StandardCompressWriter *new_FreemarkerTemplateUtilityStandardCompress_StandardCompressWriter_initWithJavaIoWriter_withInt_withBoolean_(JavaIoWriter *outArg, jint bufSize, jboolean singleLine) {
  FreemarkerTemplateUtilityStandardCompress_StandardCompressWriter *self = [FreemarkerTemplateUtilityStandardCompress_StandardCompressWriter alloc];
  FreemarkerTemplateUtilityStandardCompress_StandardCompressWriter_initWithJavaIoWriter_withInt_withBoolean_(self, outArg, bufSize, singleLine);
  return self;
}


#line 157
void FreemarkerTemplateUtilityStandardCompress_StandardCompressWriter_writeHelperWithCharArray_withInt_withInt_(FreemarkerTemplateUtilityStandardCompress_StandardCompressWriter *self, IOSCharArray *cbuf, jint off, jint len) {
  for (jint i = off, end = off + len; i < end; i++) {
    jchar c = IOSCharArray_Get(nil_chk(cbuf), i);
    if (JavaLangCharacter_isWhitespaceWithChar_(c)) {
      self->inWhitespace_ = YES;
      FreemarkerTemplateUtilityStandardCompress_StandardCompressWriter_updateLineBreakStateWithChar_(self, c);
    }
    else
#line 163
    if (self->inWhitespace_) {
      self->inWhitespace_ = NO;
      FreemarkerTemplateUtilityStandardCompress_StandardCompressWriter_writeLineBreakOrSpace(self);
      *IOSCharArray_GetRef(nil_chk(self->buf_), self->pos_++) = c;
    }
    else {
      
#line 168
      *IOSCharArray_GetRef(nil_chk(self->buf_), self->pos_++) = c;
    }
  }
}


#line 180
void FreemarkerTemplateUtilityStandardCompress_StandardCompressWriter_updateLineBreakStateWithChar_(FreemarkerTemplateUtilityStandardCompress_StandardCompressWriter *self, jchar c) {
  
#line 182
  switch (self->lineBreakState_) {
    case FreemarkerTemplateUtilityStandardCompress_StandardCompressWriter_INIT:
    if (c == 0x000d) {
      self->lineBreakState_ = FreemarkerTemplateUtilityStandardCompress_StandardCompressWriter_SAW_CR;
    }
    else
#line 186
    if (c == 0x000a) {
      self->lineBreakState_ = FreemarkerTemplateUtilityStandardCompress_StandardCompressWriter_LINEBREAK_LF;
    }
    break;
    case FreemarkerTemplateUtilityStandardCompress_StandardCompressWriter_SAW_CR:
    if (c == 0x000a) {
      self->lineBreakState_ = FreemarkerTemplateUtilityStandardCompress_StandardCompressWriter_LINEBREAK_CRLF;
    }
    else {
      
#line 194
      self->lineBreakState_ = FreemarkerTemplateUtilityStandardCompress_StandardCompressWriter_LINEBREAK_CR;
    }
  }
}


#line 199
void FreemarkerTemplateUtilityStandardCompress_StandardCompressWriter_writeLineBreakOrSpace(FreemarkerTemplateUtilityStandardCompress_StandardCompressWriter *self) {
  
#line 201
  switch (self->lineBreakState_) {
    case FreemarkerTemplateUtilityStandardCompress_StandardCompressWriter_SAW_CR:
    
#line 204
    case FreemarkerTemplateUtilityStandardCompress_StandardCompressWriter_LINEBREAK_CR:
    *IOSCharArray_GetRef(nil_chk(self->buf_), self->pos_++) = 0x000d;
    break;
    case FreemarkerTemplateUtilityStandardCompress_StandardCompressWriter_LINEBREAK_CRLF:
    *IOSCharArray_GetRef(nil_chk(self->buf_), self->pos_++) = 0x000d;
    
#line 210
    case FreemarkerTemplateUtilityStandardCompress_StandardCompressWriter_LINEBREAK_LF:
    *IOSCharArray_GetRef(nil_chk(self->buf_), self->pos_++) = 0x000a;
    break;
    case FreemarkerTemplateUtilityStandardCompress_StandardCompressWriter_AT_BEGINNING:
    
#line 215
    break;
    case FreemarkerTemplateUtilityStandardCompress_StandardCompressWriter_INIT:
    case FreemarkerTemplateUtilityStandardCompress_StandardCompressWriter_SINGLE_LINE:
    *IOSCharArray_GetRef(nil_chk(self->buf_), self->pos_++) = ' ';
  }
  self->lineBreakState_ = (self->singleLine_) ? FreemarkerTemplateUtilityStandardCompress_StandardCompressWriter_SINGLE_LINE : FreemarkerTemplateUtilityStandardCompress_StandardCompressWriter_INIT;
}


#line 223
void FreemarkerTemplateUtilityStandardCompress_StandardCompressWriter_flushInternal(FreemarkerTemplateUtilityStandardCompress_StandardCompressWriter *self) {
  [((JavaIoWriter *) nil_chk(self->out_)) writeWithCharArray:self->buf_ withInt:0 withInt:self->pos_];
  self->pos_ = 0;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerTemplateUtilityStandardCompress_StandardCompressWriter)
