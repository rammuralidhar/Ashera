//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/ExistenceBuiltins.java
//


#include "BuiltIn.h"
#include "Environment.h"
#include "ExistenceBuiltins.h"
#include "Expression.h"
#include "IOSClass.h"
#include "InvalidReferenceException.h"
#include "J2ObjC_source.h"
#include "MessageUtil.h"
#include "ParentheticalExpression.h"
#include "TemplateBooleanModel.h"
#include "TemplateException.h"
#include "TemplateMethodModelEx.h"
#include "TemplateModel.h"
#include "TemplateModelException.h"
#include "java/lang/Integer.h"
#include "java/util/List.h"

#line 0 "/Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/ExistenceBuiltins.java"

@interface FreemarkerCoreExistenceBuiltins ()

- (instancetype)init;

@end

__attribute__((unused)) static void FreemarkerCoreExistenceBuiltins_init(FreemarkerCoreExistenceBuiltins *self);

__attribute__((unused)) static FreemarkerCoreExistenceBuiltins *new_FreemarkerCoreExistenceBuiltins_init() NS_RETURNS_RETAINED;

@interface FreemarkerCoreExistenceBuiltins_ExistenceBuiltIn ()

- (instancetype)init;

@end

__attribute__((unused)) static void FreemarkerCoreExistenceBuiltins_ExistenceBuiltIn_init(FreemarkerCoreExistenceBuiltins_ExistenceBuiltIn *self);

static id<FreemarkerTemplateTemplateMethodModelEx> FreemarkerCoreExistenceBuiltins_defaultBI_FIRST_NON_NULL_METHOD_;
J2OBJC_STATIC_FIELD_GETTER(FreemarkerCoreExistenceBuiltins_defaultBI, FIRST_NON_NULL_METHOD_, id<FreemarkerTemplateTemplateMethodModelEx>)

@interface FreemarkerCoreExistenceBuiltins_defaultBI_ConstantMethod : NSObject < FreemarkerTemplateTemplateMethodModelEx > {
 @public
  id<FreemarkerTemplateTemplateModel> constant_;
}

- (instancetype)initWithFreemarkerTemplateTemplateModel:(id<FreemarkerTemplateTemplateModel>)constant;

- (id)execWithJavaUtilList:(id<JavaUtilList>)args;

@end

J2OBJC_EMPTY_STATIC_INIT(FreemarkerCoreExistenceBuiltins_defaultBI_ConstantMethod)

J2OBJC_FIELD_SETTER(FreemarkerCoreExistenceBuiltins_defaultBI_ConstantMethod, constant_, id<FreemarkerTemplateTemplateModel>)

__attribute__((unused)) static void FreemarkerCoreExistenceBuiltins_defaultBI_ConstantMethod_initWithFreemarkerTemplateTemplateModel_(FreemarkerCoreExistenceBuiltins_defaultBI_ConstantMethod *self, id<FreemarkerTemplateTemplateModel> constant);

__attribute__((unused)) static FreemarkerCoreExistenceBuiltins_defaultBI_ConstantMethod *new_FreemarkerCoreExistenceBuiltins_defaultBI_ConstantMethod_initWithFreemarkerTemplateTemplateModel_(id<FreemarkerTemplateTemplateModel> constant) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerCoreExistenceBuiltins_defaultBI_ConstantMethod)

@interface FreemarkerCoreExistenceBuiltins_defaultBI_$1 : NSObject < FreemarkerTemplateTemplateMethodModelEx >

- (id)execWithJavaUtilList:(id<JavaUtilList>)args;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(FreemarkerCoreExistenceBuiltins_defaultBI_$1)

__attribute__((unused)) static void FreemarkerCoreExistenceBuiltins_defaultBI_$1_init(FreemarkerCoreExistenceBuiltins_defaultBI_$1 *self);

__attribute__((unused)) static FreemarkerCoreExistenceBuiltins_defaultBI_$1 *new_FreemarkerCoreExistenceBuiltins_defaultBI_$1_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerCoreExistenceBuiltins_defaultBI_$1)


#line 30
@implementation FreemarkerCoreExistenceBuiltins


#line 33
- (instancetype)init {
  FreemarkerCoreExistenceBuiltins_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "ExistenceBuiltins", NULL, 0x2, NULL, NULL },
  };
  static const char *inner_classes[] = {"Lfreemarker.core.ExistenceBuiltins$ExistenceBuiltIn;", "Lfreemarker.core.ExistenceBuiltins$defaultBI;", "Lfreemarker.core.ExistenceBuiltins$existsBI;", "Lfreemarker.core.ExistenceBuiltins$has_contentBI;", "Lfreemarker.core.ExistenceBuiltins$if_existsBI;"};
  static const J2ObjcClassInfo _FreemarkerCoreExistenceBuiltins = { 2, "ExistenceBuiltins", "freemarker.core", NULL, 0x0, 1, methods, 0, NULL, 0, NULL, 5, inner_classes, NULL, NULL };
  return &_FreemarkerCoreExistenceBuiltins;
}

@end


#line 33
void FreemarkerCoreExistenceBuiltins_init(FreemarkerCoreExistenceBuiltins *self) {
  (void) NSObject_init(self);
}


#line 33
FreemarkerCoreExistenceBuiltins *new_FreemarkerCoreExistenceBuiltins_init() {
  FreemarkerCoreExistenceBuiltins *self = [FreemarkerCoreExistenceBuiltins alloc];
  FreemarkerCoreExistenceBuiltins_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreExistenceBuiltins)


#line 35
@implementation FreemarkerCoreExistenceBuiltins_ExistenceBuiltIn

- (id<FreemarkerTemplateTemplateModel>)evalMaybeNonexistentTargetWithFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env {
  id<FreemarkerTemplateTemplateModel> tm;
  if ([target_ isKindOfClass:[FreemarkerCoreParentheticalExpression class]]) {
    jboolean lastFIRE = [((FreemarkerCoreEnvironment *) nil_chk(env)) setFastInvalidReferenceExceptionsWithBoolean:YES];
    @try {
      tm = [((FreemarkerCoreExpression *) nil_chk(target_)) evalWithFreemarkerCoreEnvironment:env];
    }
    @catch (
#line 43
    FreemarkerCoreInvalidReferenceException *ire) {
      tm = nil;
    }
    @finally {
      
#line 46
      [env setFastInvalidReferenceExceptionsWithBoolean:lastFIRE];
    }
  }
  else {
    
#line 49
    tm = [((FreemarkerCoreExpression *) nil_chk(target_)) evalWithFreemarkerCoreEnvironment:env];
  }
  return tm;
}

- (instancetype)init {
  FreemarkerCoreExistenceBuiltins_ExistenceBuiltIn_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "evalMaybeNonexistentTargetWithFreemarkerCoreEnvironment:", "evalMaybeNonexistentTarget", "Lfreemarker.template.TemplateModel;", 0x4, "Lfreemarker.template.TemplateException;", NULL },
    { "init", NULL, NULL, 0x2, NULL, NULL },
  };
  static const J2ObjcClassInfo _FreemarkerCoreExistenceBuiltins_ExistenceBuiltIn = { 2, "ExistenceBuiltIn", "freemarker.core", "ExistenceBuiltins", 0x40a, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerCoreExistenceBuiltins_ExistenceBuiltIn;
}

@end

void FreemarkerCoreExistenceBuiltins_ExistenceBuiltIn_init(FreemarkerCoreExistenceBuiltins_ExistenceBuiltIn *self) {
  (void) FreemarkerCoreBuiltIn_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreExistenceBuiltins_ExistenceBuiltIn)

J2OBJC_INITIALIZED_DEFN(FreemarkerCoreExistenceBuiltins_defaultBI)


#line 56
@implementation FreemarkerCoreExistenceBuiltins_defaultBI

- (id<FreemarkerTemplateTemplateModel>)_evalWithFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env {
  id<FreemarkerTemplateTemplateModel> model = [self evalMaybeNonexistentTargetWithFreemarkerCoreEnvironment:env];
  return model == nil ? ((id) FreemarkerCoreExistenceBuiltins_defaultBI_FIRST_NON_NULL_METHOD_) : new_FreemarkerCoreExistenceBuiltins_defaultBI_ConstantMethod_initWithFreemarkerTemplateTemplateModel_(model);
}

- (instancetype)init {
  FreemarkerCoreExistenceBuiltins_defaultBI_init(self);
  return self;
}

+ (void)initialize {
  if (self == [FreemarkerCoreExistenceBuiltins_defaultBI class]) {
    FreemarkerCoreExistenceBuiltins_defaultBI_FIRST_NON_NULL_METHOD_ = new_FreemarkerCoreExistenceBuiltins_defaultBI_$1_init();
    J2OBJC_SET_INITIALIZED(FreemarkerCoreExistenceBuiltins_defaultBI)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "_evalWithFreemarkerCoreEnvironment:", "_eval", "Lfreemarker.template.TemplateModel;", 0x0, "Lfreemarker.template.TemplateException;", NULL },
    { "init", NULL, NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "FIRST_NON_NULL_METHOD_", NULL, 0x1a, "Lfreemarker.template.TemplateMethodModelEx;", &FreemarkerCoreExistenceBuiltins_defaultBI_FIRST_NON_NULL_METHOD_, NULL,  },
  };
  static const char *inner_classes[] = {"Lfreemarker.core.ExistenceBuiltins$defaultBI$ConstantMethod;"};
  static const J2ObjcClassInfo _FreemarkerCoreExistenceBuiltins_defaultBI = { 2, "defaultBI", "freemarker.core", "ExistenceBuiltins", 0x8, 2, methods, 1, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_FreemarkerCoreExistenceBuiltins_defaultBI;
}

@end

void FreemarkerCoreExistenceBuiltins_defaultBI_init(FreemarkerCoreExistenceBuiltins_defaultBI *self) {
  (void) FreemarkerCoreExistenceBuiltins_ExistenceBuiltIn_init(self);
}

FreemarkerCoreExistenceBuiltins_defaultBI *new_FreemarkerCoreExistenceBuiltins_defaultBI_init() {
  FreemarkerCoreExistenceBuiltins_defaultBI *self = [FreemarkerCoreExistenceBuiltins_defaultBI alloc];
  FreemarkerCoreExistenceBuiltins_defaultBI_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreExistenceBuiltins_defaultBI)


#line 63
@implementation FreemarkerCoreExistenceBuiltins_defaultBI_ConstantMethod


#line 67
- (instancetype)initWithFreemarkerTemplateTemplateModel:(id<FreemarkerTemplateTemplateModel>)constant {
  FreemarkerCoreExistenceBuiltins_defaultBI_ConstantMethod_initWithFreemarkerTemplateTemplateModel_(self, constant);
  return self;
}


#line 71
- (id)execWithJavaUtilList:(id<JavaUtilList>)args {
  return constant_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithFreemarkerTemplateTemplateModel:", "ConstantMethod", NULL, 0x0, NULL, NULL },
    { "execWithJavaUtilList:", "exec", "Ljava.lang.Object;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "constant_", NULL, 0x12, "Lfreemarker.template.TemplateModel;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerCoreExistenceBuiltins_defaultBI_ConstantMethod = { 2, "ConstantMethod", "freemarker.core", "ExistenceBuiltins$defaultBI", 0xa, 2, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerCoreExistenceBuiltins_defaultBI_ConstantMethod;
}

@end


#line 67
void FreemarkerCoreExistenceBuiltins_defaultBI_ConstantMethod_initWithFreemarkerTemplateTemplateModel_(FreemarkerCoreExistenceBuiltins_defaultBI_ConstantMethod *self, id<FreemarkerTemplateTemplateModel> constant) {
  (void) NSObject_init(self);
  
#line 68
  self->constant_ = constant;
}


#line 67
FreemarkerCoreExistenceBuiltins_defaultBI_ConstantMethod *new_FreemarkerCoreExistenceBuiltins_defaultBI_ConstantMethod_initWithFreemarkerTemplateTemplateModel_(id<FreemarkerTemplateTemplateModel> constant) {
  FreemarkerCoreExistenceBuiltins_defaultBI_ConstantMethod *self = [FreemarkerCoreExistenceBuiltins_defaultBI_ConstantMethod alloc];
  FreemarkerCoreExistenceBuiltins_defaultBI_ConstantMethod_initWithFreemarkerTemplateTemplateModel_(self, constant);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreExistenceBuiltins_defaultBI_ConstantMethod)

@implementation FreemarkerCoreExistenceBuiltins_defaultBI_$1


#line 82
- (id)execWithJavaUtilList:(id<JavaUtilList>)args {
  jint argCnt = [((id<JavaUtilList>) nil_chk(args)) size];
  if (argCnt == 0) @throw FreemarkerCoreMessageUtil_newArgCntErrorWithNSString_withInt_withInt_withInt_(@"?default", argCnt, 1, JavaLangInteger_MAX_VALUE);
  for (jint i = 0; i < argCnt; i++) {
    id<FreemarkerTemplateTemplateModel> result = (id<FreemarkerTemplateTemplateModel>) check_protocol_cast([args getWithInt:i], @protocol(FreemarkerTemplateTemplateModel));
    if (result != nil) return result;
  }
  return nil;
}

- (instancetype)init {
  FreemarkerCoreExistenceBuiltins_defaultBI_$1_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "execWithJavaUtilList:", "exec", "Ljava.lang.Object;", 0x1, "Lfreemarker.template.TemplateModelException;", NULL },
    { "init", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcClassInfo _FreemarkerCoreExistenceBuiltins_defaultBI_$1 = { 2, "", "freemarker.core", "ExistenceBuiltins$defaultBI", 0x8008, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerCoreExistenceBuiltins_defaultBI_$1;
}

@end

void FreemarkerCoreExistenceBuiltins_defaultBI_$1_init(FreemarkerCoreExistenceBuiltins_defaultBI_$1 *self) {
  (void) NSObject_init(self);
}

FreemarkerCoreExistenceBuiltins_defaultBI_$1 *new_FreemarkerCoreExistenceBuiltins_defaultBI_$1_init() {
  FreemarkerCoreExistenceBuiltins_defaultBI_$1 *self = [FreemarkerCoreExistenceBuiltins_defaultBI_$1 alloc];
  FreemarkerCoreExistenceBuiltins_defaultBI_$1_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreExistenceBuiltins_defaultBI_$1)


#line 94
@implementation FreemarkerCoreExistenceBuiltins_existsBI


#line 95
- (id<FreemarkerTemplateTemplateModel>)_evalWithFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env {
  return [self evalMaybeNonexistentTargetWithFreemarkerCoreEnvironment:env] == nil ? FreemarkerTemplateTemplateBooleanModel_get_FALSE__() : FreemarkerTemplateTemplateBooleanModel_get_TRUE__();
}

- (jboolean)evalToBooleanWithFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env {
  return [self _evalWithFreemarkerCoreEnvironment:env] == FreemarkerTemplateTemplateBooleanModel_get_TRUE__();
}

- (instancetype)init {
  FreemarkerCoreExistenceBuiltins_existsBI_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "_evalWithFreemarkerCoreEnvironment:", "_eval", "Lfreemarker.template.TemplateModel;", 0x0, "Lfreemarker.template.TemplateException;", NULL },
    { "evalToBooleanWithFreemarkerCoreEnvironment:", "evalToBoolean", "Z", 0x0, "Lfreemarker.template.TemplateException;", NULL },
    { "init", NULL, NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcClassInfo _FreemarkerCoreExistenceBuiltins_existsBI = { 2, "existsBI", "freemarker.core", "ExistenceBuiltins", 0x8, 3, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerCoreExistenceBuiltins_existsBI;
}

@end

void FreemarkerCoreExistenceBuiltins_existsBI_init(FreemarkerCoreExistenceBuiltins_existsBI *self) {
  (void) FreemarkerCoreExistenceBuiltins_ExistenceBuiltIn_init(self);
}

FreemarkerCoreExistenceBuiltins_existsBI *new_FreemarkerCoreExistenceBuiltins_existsBI_init() {
  FreemarkerCoreExistenceBuiltins_existsBI *self = [FreemarkerCoreExistenceBuiltins_existsBI alloc];
  FreemarkerCoreExistenceBuiltins_existsBI_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreExistenceBuiltins_existsBI)


#line 104
@implementation FreemarkerCoreExistenceBuiltins_has_contentBI


#line 105
- (id<FreemarkerTemplateTemplateModel>)_evalWithFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env {
  return FreemarkerCoreExpression_isEmptyWithFreemarkerTemplateTemplateModel_([self evalMaybeNonexistentTargetWithFreemarkerCoreEnvironment:env]) ? FreemarkerTemplateTemplateBooleanModel_get_FALSE__() : FreemarkerTemplateTemplateBooleanModel_get_TRUE__();
}


#line 111
- (jboolean)evalToBooleanWithFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env {
  return [self _evalWithFreemarkerCoreEnvironment:env] == FreemarkerTemplateTemplateBooleanModel_get_TRUE__();
}

- (instancetype)init {
  FreemarkerCoreExistenceBuiltins_has_contentBI_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "_evalWithFreemarkerCoreEnvironment:", "_eval", "Lfreemarker.template.TemplateModel;", 0x0, "Lfreemarker.template.TemplateException;", NULL },
    { "evalToBooleanWithFreemarkerCoreEnvironment:", "evalToBoolean", "Z", 0x0, "Lfreemarker.template.TemplateException;", NULL },
    { "init", NULL, NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcClassInfo _FreemarkerCoreExistenceBuiltins_has_contentBI = { 2, "has_contentBI", "freemarker.core", "ExistenceBuiltins", 0x8, 3, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerCoreExistenceBuiltins_has_contentBI;
}

@end

void FreemarkerCoreExistenceBuiltins_has_contentBI_init(FreemarkerCoreExistenceBuiltins_has_contentBI *self) {
  (void) FreemarkerCoreExistenceBuiltins_ExistenceBuiltIn_init(self);
}

FreemarkerCoreExistenceBuiltins_has_contentBI *new_FreemarkerCoreExistenceBuiltins_has_contentBI_init() {
  FreemarkerCoreExistenceBuiltins_has_contentBI *self = [FreemarkerCoreExistenceBuiltins_has_contentBI alloc];
  FreemarkerCoreExistenceBuiltins_has_contentBI_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreExistenceBuiltins_has_contentBI)


#line 116
@implementation FreemarkerCoreExistenceBuiltins_if_existsBI


#line 117
- (id<FreemarkerTemplateTemplateModel>)_evalWithFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env {
  
#line 120
  id<FreemarkerTemplateTemplateModel> model = [self evalMaybeNonexistentTargetWithFreemarkerCoreEnvironment:env];
  return model == nil ? FreemarkerTemplateTemplateModel_get_NOTHING_() : model;
}

- (instancetype)init {
  FreemarkerCoreExistenceBuiltins_if_existsBI_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "_evalWithFreemarkerCoreEnvironment:", "_eval", "Lfreemarker.template.TemplateModel;", 0x0, "Lfreemarker.template.TemplateException;", NULL },
    { "init", NULL, NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcClassInfo _FreemarkerCoreExistenceBuiltins_if_existsBI = { 2, "if_existsBI", "freemarker.core", "ExistenceBuiltins", 0x8, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerCoreExistenceBuiltins_if_existsBI;
}

@end

void FreemarkerCoreExistenceBuiltins_if_existsBI_init(FreemarkerCoreExistenceBuiltins_if_existsBI *self) {
  (void) FreemarkerCoreExistenceBuiltins_ExistenceBuiltIn_init(self);
}

FreemarkerCoreExistenceBuiltins_if_existsBI *new_FreemarkerCoreExistenceBuiltins_if_existsBI_init() {
  FreemarkerCoreExistenceBuiltins_if_existsBI *self = [FreemarkerCoreExistenceBuiltins_if_existsBI alloc];
  FreemarkerCoreExistenceBuiltins_if_existsBI_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreExistenceBuiltins_if_existsBI)
