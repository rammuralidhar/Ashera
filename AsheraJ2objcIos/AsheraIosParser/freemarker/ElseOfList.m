//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/ElseOfList.java
//


#include "ElseOfList.h"
#include "Environment.h"
#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "ParameterRole.h"
#include "TemplateElement.h"
#include "TemplateException.h"
#include "java/io/IOException.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/StringBuffer.h"

#line 0 "/Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/ElseOfList.java"


#line 26
@implementation FreemarkerCoreElseOfList

- (instancetype)initWithFreemarkerCoreTemplateElement:(FreemarkerCoreTemplateElement *)block {
  FreemarkerCoreElseOfList_initWithFreemarkerCoreTemplateElement_(self, block);
  return self;
}


#line 32
- (void)acceptWithFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env {
  
#line 34
  if ([self getNestedBlock] != nil) {
    [((FreemarkerCoreEnvironment *) nil_chk(env)) visitByHiddingParentWithFreemarkerCoreTemplateElement:[self getNestedBlock]];
  }
}


#line 39
- (NSString *)dumpWithBoolean:(jboolean)canonical {
  if (canonical) {
    JavaLangStringBuffer *buf = new_JavaLangStringBuffer_init();
    (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([buf appendWithChar:'<'])) appendWithNSString:[self getNodeTypeSymbol]])) appendWithChar:'>'];
    if ([self getNestedBlock] != nil) {
      (void) [buf appendWithNSString:[((FreemarkerCoreTemplateElement *) nil_chk([self getNestedBlock])) getCanonicalForm]];
    }
    return [buf description];
  }
  else {
    
#line 48
    return [self getNodeTypeSymbol];
  }
}


#line 52
- (NSString *)getNodeTypeSymbol {
  return @"#else";
}

- (jint)getParameterCount {
  return 0;
}

- (id)getParameterValueWithInt:(jint)idx {
  @throw new_JavaLangIndexOutOfBoundsException_init();
}

- (FreemarkerCoreParameterRole *)getParameterRoleWithInt:(jint)idx {
  @throw new_JavaLangIndexOutOfBoundsException_init();
}

- (jboolean)isNestedBlockRepeater {
  return NO;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithFreemarkerCoreTemplateElement:", "ElseOfList", NULL, 0x0, NULL, NULL },
    { "acceptWithFreemarkerCoreEnvironment:", "accept", "V", 0x0, "Lfreemarker.template.TemplateException;Ljava.io.IOException;", NULL },
    { "dumpWithBoolean:", "dump", "Ljava.lang.String;", 0x4, NULL, NULL },
    { "getNodeTypeSymbol", NULL, "Ljava.lang.String;", 0x0, NULL, NULL },
    { "getParameterCount", NULL, "I", 0x0, NULL, NULL },
    { "getParameterValueWithInt:", "getParameterValue", "Ljava.lang.Object;", 0x0, NULL, NULL },
    { "getParameterRoleWithInt:", "getParameterRole", "Lfreemarker.core.ParameterRole;", 0x0, NULL, NULL },
    { "isNestedBlockRepeater", NULL, "Z", 0x0, NULL, NULL },
  };
  static const J2ObjcClassInfo _FreemarkerCoreElseOfList = { 2, "ElseOfList", "freemarker.core", NULL, 0x10, 8, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerCoreElseOfList;
}

@end


#line 28
void FreemarkerCoreElseOfList_initWithFreemarkerCoreTemplateElement_(FreemarkerCoreElseOfList *self, FreemarkerCoreTemplateElement *block) {
  (void) FreemarkerCoreTemplateElement_init(self);
  
#line 29
  [self setNestedBlockWithFreemarkerCoreTemplateElement:block];
}


#line 28
FreemarkerCoreElseOfList *new_FreemarkerCoreElseOfList_initWithFreemarkerCoreTemplateElement_(FreemarkerCoreTemplateElement *block) {
  FreemarkerCoreElseOfList *self = [FreemarkerCoreElseOfList alloc];
  FreemarkerCoreElseOfList_initWithFreemarkerCoreTemplateElement_(self, block);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreElseOfList)
