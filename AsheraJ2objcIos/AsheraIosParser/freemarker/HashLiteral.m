//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/HashLiteral.java
//


#include "CollectionAndSequence.h"
#include "Environment.h"
#include "Expression.h"
#include "HashLiteral.h"
#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "ParameterRole.h"
#include "SimpleSequence.h"
#include "TemplateCollectionModel.h"
#include "TemplateException.h"
#include "TemplateHashModelEx.h"
#include "TemplateModel.h"
#include "_TemplateAPI.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/StringBuffer.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/HashMap.h"
#include "java/util/LinkedHashMap.h"
#include "java/util/ListIterator.h"
#include "java/util/Set.h"

#line 0 "/Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/HashLiteral.java"

@interface FreemarkerCoreHashLiteral () {
 @public
  JavaUtilArrayList *keys_, *values_;
  jint size_;
}

- (void)checkIndexWithInt:(jint)idx;

@end

J2OBJC_FIELD_SETTER(FreemarkerCoreHashLiteral, keys_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(FreemarkerCoreHashLiteral, values_, JavaUtilArrayList *)

__attribute__((unused)) static void FreemarkerCoreHashLiteral_checkIndexWithInt_(FreemarkerCoreHashLiteral *self, jint idx);

@interface FreemarkerCoreHashLiteral_SequenceHash : NSObject < FreemarkerTemplateTemplateHashModelEx > {
 @public
  FreemarkerCoreHashLiteral *this$0_;
  JavaUtilHashMap *map_;
  id<FreemarkerTemplateTemplateCollectionModel> keyCollection_, valueCollection_;
}

- (instancetype)initWithFreemarkerCoreHashLiteral:(FreemarkerCoreHashLiteral *)outer$
                    withFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env;

- (jint)size;

- (id<FreemarkerTemplateTemplateCollectionModel>)keys;

- (id<FreemarkerTemplateTemplateCollectionModel>)values;

- (id<FreemarkerTemplateTemplateModel>)getWithNSString:(NSString *)key;

- (jboolean)isEmpty;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(FreemarkerCoreHashLiteral_SequenceHash)

J2OBJC_FIELD_SETTER(FreemarkerCoreHashLiteral_SequenceHash, this$0_, FreemarkerCoreHashLiteral *)
J2OBJC_FIELD_SETTER(FreemarkerCoreHashLiteral_SequenceHash, map_, JavaUtilHashMap *)
J2OBJC_FIELD_SETTER(FreemarkerCoreHashLiteral_SequenceHash, keyCollection_, id<FreemarkerTemplateTemplateCollectionModel>)
J2OBJC_FIELD_SETTER(FreemarkerCoreHashLiteral_SequenceHash, valueCollection_, id<FreemarkerTemplateTemplateCollectionModel>)

__attribute__((unused)) static void FreemarkerCoreHashLiteral_SequenceHash_initWithFreemarkerCoreHashLiteral_withFreemarkerCoreEnvironment_(FreemarkerCoreHashLiteral_SequenceHash *self, FreemarkerCoreHashLiteral *outer$, FreemarkerCoreEnvironment *env);

__attribute__((unused)) static FreemarkerCoreHashLiteral_SequenceHash *new_FreemarkerCoreHashLiteral_SequenceHash_initWithFreemarkerCoreHashLiteral_withFreemarkerCoreEnvironment_(FreemarkerCoreHashLiteral *outer$, FreemarkerCoreEnvironment *env) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerCoreHashLiteral_SequenceHash)


#line 31
@implementation FreemarkerCoreHashLiteral


#line 36
- (instancetype)initWithJavaUtilArrayList:(JavaUtilArrayList *)keys
                    withJavaUtilArrayList:(JavaUtilArrayList *)values {
  FreemarkerCoreHashLiteral_initWithJavaUtilArrayList_withJavaUtilArrayList_(self, keys, values);
  return self;
}


#line 44
- (id<FreemarkerTemplateTemplateModel>)_evalWithFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env {
  return new_FreemarkerCoreHashLiteral_SequenceHash_initWithFreemarkerCoreHashLiteral_withFreemarkerCoreEnvironment_(self, env);
}

- (NSString *)getCanonicalForm {
  JavaLangStringBuffer *buf = new_JavaLangStringBuffer_initWithNSString_(@"{");
  for (jint i = 0; i < size_; i++) {
    FreemarkerCoreExpression *key = (FreemarkerCoreExpression *) check_class_cast([((JavaUtilArrayList *) nil_chk(keys_)) getWithInt:i], [FreemarkerCoreExpression class]);
    FreemarkerCoreExpression *value = (FreemarkerCoreExpression *) check_class_cast([((JavaUtilArrayList *) nil_chk(values_)) getWithInt:i], [FreemarkerCoreExpression class]);
    (void) [buf appendWithNSString:[((FreemarkerCoreExpression *) nil_chk(key)) getCanonicalForm]];
    (void) [buf appendWithNSString:@": "];
    (void) [buf appendWithNSString:[((FreemarkerCoreExpression *) nil_chk(value)) getCanonicalForm]];
    if (i != size_ - 1) {
      (void) [buf appendWithNSString:@", "];
    }
  }
  (void) [buf appendWithNSString:@"}"];
  return [buf description];
}

- (NSString *)getNodeTypeSymbol {
  return @"{...}";
}

- (jboolean)isLiteral {
  if (constantValue_ != nil) {
    return YES;
  }
  for (jint i = 0; i < size_; i++) {
    FreemarkerCoreExpression *key = (FreemarkerCoreExpression *) check_class_cast([((JavaUtilArrayList *) nil_chk(keys_)) getWithInt:i], [FreemarkerCoreExpression class]);
    FreemarkerCoreExpression *value = (FreemarkerCoreExpression *) check_class_cast([((JavaUtilArrayList *) nil_chk(values_)) getWithInt:i], [FreemarkerCoreExpression class]);
    if (![((FreemarkerCoreExpression *) nil_chk(key)) isLiteral] || ![((FreemarkerCoreExpression *) nil_chk(value)) isLiteral]) {
      return NO;
    }
  }
  return YES;
}


#line 83
- (FreemarkerCoreExpression *)deepCloneWithIdentifierReplaced_innerWithNSString:(NSString *)replacedIdentifier
                                                   withFreemarkerCoreExpression:(FreemarkerCoreExpression *)replacement
                                 withFreemarkerCoreExpression_ReplacemenetState:(FreemarkerCoreExpression_ReplacemenetState *)replacementState {
  
#line 85
  JavaUtilArrayList *clonedKeys = (JavaUtilArrayList *) check_class_cast([((JavaUtilArrayList *) nil_chk(keys_)) clone], [JavaUtilArrayList class]);
  for (id<JavaUtilListIterator> iter = [((JavaUtilArrayList *) nil_chk(clonedKeys)) listIterator]; [((id<JavaUtilListIterator>) nil_chk(iter)) hasNext]; ) {
    [iter setWithId:[((FreemarkerCoreExpression *) nil_chk(((FreemarkerCoreExpression *) check_class_cast([iter next], [FreemarkerCoreExpression class])))) deepCloneWithIdentifierReplacedWithNSString:
#line 88
    replacedIdentifier withFreemarkerCoreExpression:replacement withFreemarkerCoreExpression_ReplacemenetState:replacementState]];
  }
  JavaUtilArrayList *clonedValues = (JavaUtilArrayList *) check_class_cast([((JavaUtilArrayList *) nil_chk(values_)) clone], [JavaUtilArrayList class]);
  for (id<JavaUtilListIterator> iter = [((JavaUtilArrayList *) nil_chk(clonedValues)) listIterator]; [((id<JavaUtilListIterator>) nil_chk(iter)) hasNext]; ) {
    [iter setWithId:[((FreemarkerCoreExpression *) nil_chk(((FreemarkerCoreExpression *) check_class_cast([iter next], [FreemarkerCoreExpression class])))) deepCloneWithIdentifierReplacedWithNSString:
#line 93
    replacedIdentifier withFreemarkerCoreExpression:replacement withFreemarkerCoreExpression_ReplacemenetState:replacementState]];
  }
  return new_FreemarkerCoreHashLiteral_initWithJavaUtilArrayList_withJavaUtilArrayList_(clonedKeys, clonedValues);
}


#line 173
- (jint)getParameterCount {
  return size_ * 2;
}

- (id)getParameterValueWithInt:(jint)idx {
  FreemarkerCoreHashLiteral_checkIndexWithInt_(self, idx);
  return idx % 2 == 0 ? [((JavaUtilArrayList *) nil_chk(keys_)) getWithInt:idx / 2] : [((JavaUtilArrayList *) nil_chk(values_)) getWithInt:idx / 2];
}

- (FreemarkerCoreParameterRole *)getParameterRoleWithInt:(jint)idx {
  FreemarkerCoreHashLiteral_checkIndexWithInt_(self, idx);
  return idx % 2 == 0 ? FreemarkerCoreParameterRole_get_ITEM_KEY_() : FreemarkerCoreParameterRole_get_ITEM_VALUE_();
}

- (void)checkIndexWithInt:(jint)idx {
  FreemarkerCoreHashLiteral_checkIndexWithInt_(self, idx);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaUtilArrayList:withJavaUtilArrayList:", "HashLiteral", NULL, 0x0, NULL, NULL },
    { "_evalWithFreemarkerCoreEnvironment:", "_eval", "Lfreemarker.template.TemplateModel;", 0x0, "Lfreemarker.template.TemplateException;", NULL },
    { "getCanonicalForm", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getNodeTypeSymbol", NULL, "Ljava.lang.String;", 0x0, NULL, NULL },
    { "isLiteral", NULL, "Z", 0x0, NULL, NULL },
    { "deepCloneWithIdentifierReplaced_innerWithNSString:withFreemarkerCoreExpression:withFreemarkerCoreExpression_ReplacemenetState:", "deepCloneWithIdentifierReplaced_inner", "Lfreemarker.core.Expression;", 0x4, NULL, NULL },
    { "getParameterCount", NULL, "I", 0x0, NULL, NULL },
    { "getParameterValueWithInt:", "getParameterValue", "Ljava.lang.Object;", 0x0, NULL, NULL },
    { "getParameterRoleWithInt:", "getParameterRole", "Lfreemarker.core.ParameterRole;", 0x0, NULL, NULL },
    { "checkIndexWithInt:", "checkIndex", "V", 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "keys_", NULL, 0x12, "Ljava.util.ArrayList;", NULL, NULL,  },
    { "values_", NULL, 0x12, "Ljava.util.ArrayList;", NULL, NULL,  },
    { "size_", NULL, 0x12, "I", NULL, NULL,  },
  };
  static const char *inner_classes[] = {"Lfreemarker.core.HashLiteral$SequenceHash;"};
  static const J2ObjcClassInfo _FreemarkerCoreHashLiteral = { 2, "HashLiteral", "freemarker.core", NULL, 0x10, 10, methods, 3, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_FreemarkerCoreHashLiteral;
}

@end


#line 36
void FreemarkerCoreHashLiteral_initWithJavaUtilArrayList_withJavaUtilArrayList_(FreemarkerCoreHashLiteral *self, JavaUtilArrayList *keys, JavaUtilArrayList *values) {
  (void) FreemarkerCoreExpression_init(self);
  
#line 37
  self->keys_ = keys;
  self->values_ = values;
  self->size_ = [((JavaUtilArrayList *) nil_chk(keys)) size];
  [keys trimToSize];
  [((JavaUtilArrayList *) nil_chk(values)) trimToSize];
}


#line 36
FreemarkerCoreHashLiteral *new_FreemarkerCoreHashLiteral_initWithJavaUtilArrayList_withJavaUtilArrayList_(JavaUtilArrayList *keys, JavaUtilArrayList *values) {
  FreemarkerCoreHashLiteral *self = [FreemarkerCoreHashLiteral alloc];
  FreemarkerCoreHashLiteral_initWithJavaUtilArrayList_withJavaUtilArrayList_(self, keys, values);
  return self;
}


#line 187
void FreemarkerCoreHashLiteral_checkIndexWithInt_(FreemarkerCoreHashLiteral *self, jint idx) {
  if (idx >= self->size_ * 2) {
    @throw new_JavaLangIndexOutOfBoundsException_init();
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreHashLiteral)


#line 98
@implementation FreemarkerCoreHashLiteral_SequenceHash


#line 103
- (instancetype)initWithFreemarkerCoreHashLiteral:(FreemarkerCoreHashLiteral *)outer$
                    withFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env {
  FreemarkerCoreHashLiteral_SequenceHash_initWithFreemarkerCoreHashLiteral_withFreemarkerCoreEnvironment_(self, outer$, env);
  return self;
}


#line 139
- (jint)size {
  return this$0_->size_;
}

- (id<FreemarkerTemplateTemplateCollectionModel>)keys {
  if (keyCollection_ == nil) {
    
#line 146
    keyCollection_ = new_FreemarkerCoreCollectionAndSequence_initWithFreemarkerTemplateTemplateSequenceModel_(new_FreemarkerTemplateSimpleSequence_initWithJavaUtilCollection_([((JavaUtilHashMap *) nil_chk(map_)) keySet]));
  }
  return keyCollection_;
}


#line 151
- (id<FreemarkerTemplateTemplateCollectionModel>)values {
  if (valueCollection_ == nil) {
    
#line 154
    valueCollection_ = new_FreemarkerCoreCollectionAndSequence_initWithFreemarkerTemplateTemplateSequenceModel_(new_FreemarkerTemplateSimpleSequence_initWithJavaUtilCollection_([((JavaUtilHashMap *) nil_chk(map_)) values]));
  }
  return valueCollection_;
}


#line 159
- (id<FreemarkerTemplateTemplateModel>)getWithNSString:(NSString *)key {
  return (id<FreemarkerTemplateTemplateModel>) check_protocol_cast([((JavaUtilHashMap *) nil_chk(map_)) getWithId:key], @protocol(FreemarkerTemplateTemplateModel));
}

- (jboolean)isEmpty {
  return this$0_->size_ == 0;
}

- (NSString *)description {
  return [this$0_ getCanonicalForm];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithFreemarkerCoreHashLiteral:withFreemarkerCoreEnvironment:", "SequenceHash", NULL, 0x0, NULL, NULL },
    { "size", NULL, "I", 0x1, NULL, NULL },
    { "keys", NULL, "Lfreemarker.template.TemplateCollectionModel;", 0x1, NULL, NULL },
    { "values", NULL, "Lfreemarker.template.TemplateCollectionModel;", 0x1, NULL, NULL },
    { "getWithNSString:", "get", "Lfreemarker.template.TemplateModel;", 0x1, NULL, NULL },
    { "isEmpty", NULL, "Z", 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lfreemarker.core.HashLiteral;", NULL, NULL,  },
    { "map_", NULL, 0x2, "Ljava.util.HashMap;", NULL, NULL,  },
    { "keyCollection_", NULL, 0x2, "Lfreemarker.template.TemplateCollectionModel;", NULL, NULL,  },
    { "valueCollection_", NULL, 0x2, "Lfreemarker.template.TemplateCollectionModel;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerCoreHashLiteral_SequenceHash = { 2, "SequenceHash", "freemarker.core", "HashLiteral", 0x2, 7, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerCoreHashLiteral_SequenceHash;
}

@end


#line 103
void FreemarkerCoreHashLiteral_SequenceHash_initWithFreemarkerCoreHashLiteral_withFreemarkerCoreEnvironment_(FreemarkerCoreHashLiteral_SequenceHash *self, FreemarkerCoreHashLiteral *outer$, FreemarkerCoreEnvironment *env) {
  self->this$0_ = outer$;
  (void) NSObject_init(self);
  
#line 104
  if (FreemarkerTemplate_TemplateAPI_getTemplateLanguageVersionAsIntWithFreemarkerCoreTemplateObject_(outer$) >= FreemarkerTemplate_TemplateAPI_get_VERSION_INT_2_3_21_()) {
    self->map_ = new_JavaUtilLinkedHashMap_init();
    for (jint i = 0; i < outer$->size_; i++) {
      FreemarkerCoreExpression *keyExp = (FreemarkerCoreExpression *) check_class_cast([((JavaUtilArrayList *) nil_chk(outer$->keys_)) getWithInt:i], [FreemarkerCoreExpression class]);
      FreemarkerCoreExpression *valExp = (FreemarkerCoreExpression *) check_class_cast([((JavaUtilArrayList *) nil_chk(outer$->values_)) getWithInt:i], [FreemarkerCoreExpression class]);
      NSString *key = [((FreemarkerCoreExpression *) nil_chk(keyExp)) evalAndCoerceToStringWithFreemarkerCoreEnvironment:env];
      id<FreemarkerTemplateTemplateModel> value = [((FreemarkerCoreExpression *) nil_chk(valExp)) evalWithFreemarkerCoreEnvironment:env];
      if (env == nil || ![env isClassicCompatible]) {
        [valExp assertNonNullWithFreemarkerTemplateTemplateModel:value withFreemarkerCoreEnvironment:env];
      }
      (void) [self->map_ putWithId:key withId:value];
    }
  }
  else {
    
#line 119
    self->map_ = new_JavaUtilHashMap_init();
    JavaUtilArrayList *keyList = new_JavaUtilArrayList_initWithInt_(outer$->size_);
    JavaUtilArrayList *valueList = new_JavaUtilArrayList_initWithInt_(outer$->size_);
    for (jint i = 0; i < outer$->size_; i++) {
      FreemarkerCoreExpression *keyExp = (FreemarkerCoreExpression *) check_class_cast([((JavaUtilArrayList *) nil_chk(outer$->keys_)) getWithInt:i], [FreemarkerCoreExpression class]);
      FreemarkerCoreExpression *valExp = (FreemarkerCoreExpression *) check_class_cast([((JavaUtilArrayList *) nil_chk(outer$->values_)) getWithInt:i], [FreemarkerCoreExpression class]);
      NSString *key = [((FreemarkerCoreExpression *) nil_chk(keyExp)) evalAndCoerceToStringWithFreemarkerCoreEnvironment:env];
      id<FreemarkerTemplateTemplateModel> value = [((FreemarkerCoreExpression *) nil_chk(valExp)) evalWithFreemarkerCoreEnvironment:env];
      if (env == nil || ![env isClassicCompatible]) {
        [valExp assertNonNullWithFreemarkerTemplateTemplateModel:value withFreemarkerCoreEnvironment:env];
      }
      (void) [self->map_ putWithId:key withId:value];
      [keyList addWithId:key];
      [valueList addWithId:value];
    }
    self->keyCollection_ = new_FreemarkerCoreCollectionAndSequence_initWithFreemarkerTemplateTemplateSequenceModel_(new_FreemarkerTemplateSimpleSequence_initWithJavaUtilCollection_(keyList));
    self->valueCollection_ = new_FreemarkerCoreCollectionAndSequence_initWithFreemarkerTemplateTemplateSequenceModel_(new_FreemarkerTemplateSimpleSequence_initWithJavaUtilCollection_(valueList));
  }
}


#line 103
FreemarkerCoreHashLiteral_SequenceHash *new_FreemarkerCoreHashLiteral_SequenceHash_initWithFreemarkerCoreHashLiteral_withFreemarkerCoreEnvironment_(FreemarkerCoreHashLiteral *outer$, FreemarkerCoreEnvironment *env) {
  FreemarkerCoreHashLiteral_SequenceHash *self = [FreemarkerCoreHashLiteral_SequenceHash alloc];
  FreemarkerCoreHashLiteral_SequenceHash_initWithFreemarkerCoreHashLiteral_withFreemarkerCoreEnvironment_(self, outer$, env);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreHashLiteral_SequenceHash)
