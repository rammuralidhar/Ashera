//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/template/Version.java
//


#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "StringUtil.h"
#include "Version.h"
#include "java/lang/Boolean.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/util/Date.h"

#line 0 "/Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/template/Version.java"

@interface FreemarkerTemplateVersion () {
 @public
  jint major_;
  jint minor_;
  jint micro_;
  NSString *extraInfo_;
  NSString *originalStringValue_;
  JavaLangBoolean *gaeCompliant_;
  JavaUtilDate *buildDate_;
  jint intValue_;
  NSString *calculatedStringValue_;
  jint hashCode_;
}

- (jboolean)isNumberWithChar:(jchar)c;

- (jint)calculateIntValue;

- (NSString *)getStringValue;

@end

J2OBJC_FIELD_SETTER(FreemarkerTemplateVersion, extraInfo_, NSString *)
J2OBJC_FIELD_SETTER(FreemarkerTemplateVersion, originalStringValue_, NSString *)
J2OBJC_FIELD_SETTER(FreemarkerTemplateVersion, gaeCompliant_, JavaLangBoolean *)
J2OBJC_FIELD_SETTER(FreemarkerTemplateVersion, buildDate_, JavaUtilDate *)
J2OBJC_FIELD_SETTER(FreemarkerTemplateVersion, calculatedStringValue_, NSString *)

__attribute__((unused)) static jboolean FreemarkerTemplateVersion_isNumberWithChar_(FreemarkerTemplateVersion *self, jchar c);

__attribute__((unused)) static jint FreemarkerTemplateVersion_calculateIntValue(FreemarkerTemplateVersion *self);

__attribute__((unused)) static NSString *FreemarkerTemplateVersion_getStringValue(FreemarkerTemplateVersion *self);


#line 33
@implementation FreemarkerTemplateVersion


#line 51
- (instancetype)initWithNSString:(NSString *)stringValue {
  FreemarkerTemplateVersion_initWithNSString_(self, stringValue);
  return self;
}


#line 58
- (instancetype)initWithNSString:(NSString *)stringValue
             withJavaLangBoolean:(JavaLangBoolean *)gaeCompliant
                withJavaUtilDate:(JavaUtilDate *)buildDate {
  FreemarkerTemplateVersion_initWithNSString_withJavaLangBoolean_withJavaUtilDate_(self, stringValue, gaeCompliant, buildDate);
  return self;
}


#line 120
- (jboolean)isNumberWithChar:(jchar)c {
  return FreemarkerTemplateVersion_isNumberWithChar_(self, c);
}

- (instancetype)initWithInt:(jint)major
                    withInt:(jint)minor
                    withInt:(jint)micro {
  FreemarkerTemplateVersion_initWithInt_withInt_withInt_(self, major, minor, micro);
  return self;
}


#line 128
- (instancetype)initWithInt:(jint)major
                    withInt:(jint)minor
                    withInt:(jint)micro
               withNSString:(NSString *)extraInfo
        withJavaLangBoolean:(JavaLangBoolean *)gaeCompatible
           withJavaUtilDate:(JavaUtilDate *)buildDate {
  FreemarkerTemplateVersion_initWithInt_withInt_withInt_withNSString_withJavaLangBoolean_withJavaUtilDate_(self, major, minor, micro, extraInfo, gaeCompatible, buildDate);
  return self;
}


#line 139
- (jint)calculateIntValue {
  return FreemarkerTemplateVersion_calculateIntValue(self);
}

+ (jint)intValueForWithInt:(jint)major
                   withInt:(jint)minor
                   withInt:(jint)micro {
  return FreemarkerTemplateVersion_intValueForWithInt_withInt_withInt_(major, minor, micro);
}


#line 147
- (NSString *)getStringValue {
  return FreemarkerTemplateVersion_getStringValue(self);
}


#line 162
- (NSString *)description {
  return FreemarkerTemplateVersion_getStringValue(self);
}


#line 169
- (jint)getMajor {
  return major_;
}


#line 176
- (jint)getMinor {
  return minor_;
}


#line 183
- (jint)getMicro {
  return micro_;
}


#line 193
- (NSString *)getExtraInfo {
  return extraInfo_;
}


#line 200
- (JavaLangBoolean *)isGAECompliant {
  return gaeCompliant_;
}


#line 207
- (JavaUtilDate *)getBuildDate {
  return buildDate_;
}


#line 214
- (jint)intValue {
  return intValue_;
}

- (NSUInteger)hash {
  jint r = hashCode_;
  if (r != 0) return r;
  @synchronized(self) {
    if (hashCode_ == 0) {
      jint prime = 31;
      jint result = 1;
      result = prime * result + (buildDate_ == nil ? 0 : ((jint) [buildDate_ hash]));
      result = prime * result + (extraInfo_ == nil ? 0 : ((jint) [extraInfo_ hash]));
      result = prime * result + (gaeCompliant_ == nil ? 0 : ((jint) [gaeCompliant_ hash]));
      result = prime * result + intValue_;
      if (result == 0) result = -1;
      hashCode_ = result;
    }
    return hashCode_;
  }
}

- (jboolean)isEqual:(id)obj {
  if (self == obj) return YES;
  if (obj == nil) return NO;
  if ([self getClass] != [nil_chk(obj) getClass]) return NO;
  
#line 241
  FreemarkerTemplateVersion *other = (FreemarkerTemplateVersion *) check_class_cast(obj, [FreemarkerTemplateVersion class]);
  
#line 243
  if (intValue_ != other->intValue_) return NO;
  
#line 245
  if (((jint) [other hash]) != ((jint) [self hash])) return NO;
  
#line 247
  if (buildDate_ == nil) {
    if (other->buildDate_ != nil) return NO;
  }
  else
#line 249
  if (![buildDate_ isEqual:other->buildDate_]) {
    return NO;
  }
  
#line 253
  if (extraInfo_ == nil) {
    if (other->extraInfo_ != nil) return NO;
  }
  else
#line 255
  if (![extraInfo_ isEqual:other->extraInfo_]) {
    return NO;
  }
  
#line 259
  if (gaeCompliant_ == nil) {
    if (other->gaeCompliant_ != nil) return NO;
  }
  else
#line 261
  if (![gaeCompliant_ isEqual:other->gaeCompliant_]) {
    return NO;
  }
  
#line 265
  return YES;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithNSString:", "Version", NULL, 0x1, NULL, NULL },
    { "initWithNSString:withJavaLangBoolean:withJavaUtilDate:", "Version", NULL, 0x1, NULL, NULL },
    { "isNumberWithChar:", "isNumber", "Z", 0x2, NULL, NULL },
    { "initWithInt:withInt:withInt:", "Version", NULL, 0x1, NULL, NULL },
    { "initWithInt:withInt:withInt:withNSString:withJavaLangBoolean:withJavaUtilDate:", "Version", NULL, 0x1, NULL, NULL },
    { "calculateIntValue", NULL, "I", 0x2, NULL, NULL },
    { "intValueForWithInt:withInt:withInt:", "intValueFor", "I", 0x9, NULL, NULL },
    { "getStringValue", NULL, "Ljava.lang.String;", 0x2, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getMajor", NULL, "I", 0x1, NULL, NULL },
    { "getMinor", NULL, "I", 0x1, NULL, NULL },
    { "getMicro", NULL, "I", 0x1, NULL, NULL },
    { "getExtraInfo", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "isGAECompliant", NULL, "Ljava.lang.Boolean;", 0x1, NULL, NULL },
    { "getBuildDate", NULL, "Ljava.util.Date;", 0x1, NULL, NULL },
    { "intValue", NULL, "I", 0x1, NULL, NULL },
    { "hash", "hashCode", "I", 0x1, NULL, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "major_", NULL, 0x12, "I", NULL, NULL,  },
    { "minor_", NULL, 0x12, "I", NULL, NULL,  },
    { "micro_", NULL, 0x12, "I", NULL, NULL,  },
    { "extraInfo_", NULL, 0x12, "Ljava.lang.String;", NULL, NULL,  },
    { "originalStringValue_", NULL, 0x12, "Ljava.lang.String;", NULL, NULL,  },
    { "gaeCompliant_", NULL, 0x12, "Ljava.lang.Boolean;", NULL, NULL,  },
    { "buildDate_", NULL, 0x12, "Ljava.util.Date;", NULL, NULL,  },
    { "intValue_", NULL, 0x12, "I", NULL, NULL,  },
    { "calculatedStringValue_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "hashCode_", NULL, 0x2, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerTemplateVersion = { 2, "Version", "freemarker.template", NULL, 0x11, 18, methods, 10, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerTemplateVersion;
}

@end


#line 51
void FreemarkerTemplateVersion_initWithNSString_(FreemarkerTemplateVersion *self, NSString *stringValue) {
  (void) FreemarkerTemplateVersion_initWithNSString_withJavaLangBoolean_withJavaUtilDate_(self, stringValue, nil, nil);
}


#line 51
FreemarkerTemplateVersion *new_FreemarkerTemplateVersion_initWithNSString_(NSString *stringValue) {
  FreemarkerTemplateVersion *self = [FreemarkerTemplateVersion alloc];
  FreemarkerTemplateVersion_initWithNSString_(self, stringValue);
  return self;
}


#line 58
void FreemarkerTemplateVersion_initWithNSString_withJavaLangBoolean_withJavaUtilDate_(FreemarkerTemplateVersion *self, NSString *stringValue, JavaLangBoolean *gaeCompliant, JavaUtilDate *buildDate) {
  (void) NSObject_init(self);
  
#line 59
  stringValue = [((NSString *) nil_chk(stringValue)) trim];
  self->originalStringValue_ = stringValue;
  
#line 62
  IOSIntArray *parts = [IOSIntArray newArrayWithLength:3];
  NSString *extraInfoTmp = nil;
  {
    jint partIdx = 0;
    for (jint i = 0; i < ((jint) [((NSString *) nil_chk(stringValue)) length]); i++) {
      jchar c = [stringValue charAtWithInt:i];
      if (FreemarkerTemplateVersion_isNumberWithChar_(self, c)) {
        *IOSIntArray_GetRef(parts, partIdx) = IOSIntArray_Get(parts, partIdx) * 10 + (c - '0');
      }
      else {
        
#line 71
        if (i == 0) {
          @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$", @"The version number string ", FreemarkerTemplateUtilityStringUtil_jQuoteWithNSString_(
#line 73
          stringValue), @" doesn't start with a number."));
        }
        
#line 76
        if (c == '.') {
          jchar nextC = i + 1 >= ((jint) [stringValue length]) ? 0 : [stringValue charAtWithInt:i + 1];
          if (nextC == '.') {
            @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$", @"The version number string ", FreemarkerTemplateUtilityStringUtil_jQuoteWithNSString_(
#line 80
            stringValue), @" contains multiple dots after a number."));
          }
          
#line 83
          if (partIdx == 2 || !FreemarkerTemplateVersion_isNumberWithChar_(self, nextC)) {
            extraInfoTmp = [stringValue substring:i];
            break;
          }
          else {
            
#line 87
            partIdx++;
          }
        }
        else {
          
#line 90
          extraInfoTmp = [stringValue substring:i];
          break;
        }
      }
    }
    
#line 96
    if (extraInfoTmp != nil) {
      jchar firstChar = [extraInfoTmp charAtWithInt:0];
      if (firstChar == '.' || firstChar == '-' || firstChar == '_') {
        extraInfoTmp = [extraInfoTmp substring:1];
        if (((jint) [((NSString *) nil_chk(extraInfoTmp)) length]) == 0) {
          @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$C$", @"The version number string ", FreemarkerTemplateUtilityStringUtil_jQuoteWithNSString_(
#line 102
          stringValue), @" has an extra info section opened with \"",
#line 103
          firstChar, @"\", but it's empty."));
        }
      }
    }
  }
  self->extraInfo_ = extraInfoTmp;
  
#line 110
  self->major_ = IOSIntArray_Get(parts, 0);
  self->minor_ = IOSIntArray_Get(parts, 1);
  self->micro_ = IOSIntArray_Get(parts, 2);
  self->intValue_ = FreemarkerTemplateVersion_calculateIntValue(self);
  
#line 115
  self->gaeCompliant_ = gaeCompliant;
  self->buildDate_ = buildDate;
}


#line 58
FreemarkerTemplateVersion *new_FreemarkerTemplateVersion_initWithNSString_withJavaLangBoolean_withJavaUtilDate_(NSString *stringValue, JavaLangBoolean *gaeCompliant, JavaUtilDate *buildDate) {
  FreemarkerTemplateVersion *self = [FreemarkerTemplateVersion alloc];
  FreemarkerTemplateVersion_initWithNSString_withJavaLangBoolean_withJavaUtilDate_(self, stringValue, gaeCompliant, buildDate);
  return self;
}


#line 120
jboolean FreemarkerTemplateVersion_isNumberWithChar_(FreemarkerTemplateVersion *self, jchar c) {
  return c >= '0' && c <= '9';
}

void FreemarkerTemplateVersion_initWithInt_withInt_withInt_(FreemarkerTemplateVersion *self, jint major, jint minor, jint micro) {
  (void) FreemarkerTemplateVersion_initWithInt_withInt_withInt_withNSString_withJavaLangBoolean_withJavaUtilDate_(self, major, minor, micro, nil, nil, nil);
}


#line 124
FreemarkerTemplateVersion *new_FreemarkerTemplateVersion_initWithInt_withInt_withInt_(jint major, jint minor, jint micro) {
  FreemarkerTemplateVersion *self = [FreemarkerTemplateVersion alloc];
  FreemarkerTemplateVersion_initWithInt_withInt_withInt_(self, major, minor, micro);
  return self;
}


#line 128
void FreemarkerTemplateVersion_initWithInt_withInt_withInt_withNSString_withJavaLangBoolean_withJavaUtilDate_(FreemarkerTemplateVersion *self, jint major, jint minor, jint micro, NSString *extraInfo, JavaLangBoolean *gaeCompatible, JavaUtilDate *buildDate) {
  (void) NSObject_init(self);
  
#line 129
  self->major_ = major;
  self->minor_ = minor;
  self->micro_ = micro;
  self->extraInfo_ = extraInfo;
  self->gaeCompliant_ = gaeCompatible;
  self->buildDate_ = buildDate;
  self->intValue_ = FreemarkerTemplateVersion_calculateIntValue(self);
  self->originalStringValue_ = nil;
}


#line 128
FreemarkerTemplateVersion *new_FreemarkerTemplateVersion_initWithInt_withInt_withInt_withNSString_withJavaLangBoolean_withJavaUtilDate_(jint major, jint minor, jint micro, NSString *extraInfo, JavaLangBoolean *gaeCompatible, JavaUtilDate *buildDate) {
  FreemarkerTemplateVersion *self = [FreemarkerTemplateVersion alloc];
  FreemarkerTemplateVersion_initWithInt_withInt_withInt_withNSString_withJavaLangBoolean_withJavaUtilDate_(self, major, minor, micro, extraInfo, gaeCompatible, buildDate);
  return self;
}


#line 139
jint FreemarkerTemplateVersion_calculateIntValue(FreemarkerTemplateVersion *self) {
  return FreemarkerTemplateVersion_intValueForWithInt_withInt_withInt_(self->major_, self->minor_, self->micro_);
}

jint FreemarkerTemplateVersion_intValueForWithInt_withInt_withInt_(jint major, jint minor, jint micro) {
  FreemarkerTemplateVersion_initialize();
  
#line 144
  return major * 1000000 + minor * 1000 + micro;
}


#line 147
NSString *FreemarkerTemplateVersion_getStringValue(FreemarkerTemplateVersion *self) {
  if (self->originalStringValue_ != nil) return self->originalStringValue_;
  
#line 150
  @synchronized(self) {
    if (self->calculatedStringValue_ == nil) {
      self->calculatedStringValue_ = JreStrcat("ICICI", self->major_, '.', self->minor_, '.', self->micro_);
      if (self->extraInfo_ != nil) self->calculatedStringValue_ = JreStrcat("$$", self->calculatedStringValue_, JreStrcat("C$", '-', self->extraInfo_));
    }
    return self->calculatedStringValue_;
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerTemplateVersion)
