//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/ext/beans/EnumerationModel.java
//


#include "BeanModel.h"
#include "BeansWrapper.h"
#include "EnumerationModel.h"
#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "TemplateModel.h"
#include "TemplateModelException.h"
#include "TemplateModelIterator.h"
#include "java/util/Enumeration.h"
#include "java/util/NoSuchElementException.h"

#line 0 "/Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/ext/beans/EnumerationModel.java"

@interface FreemarkerExtBeansEnumerationModel () {
 @public
  jboolean accessed_;
}

@end


#line 37
@implementation FreemarkerExtBeansEnumerationModel


#line 54
- (instancetype)initWithJavaUtilEnumeration:(id<JavaUtilEnumeration>)enumeration
         withFreemarkerExtBeansBeansWrapper:(FreemarkerExtBeansBeansWrapper *)wrapper {
  FreemarkerExtBeansEnumerationModel_initWithJavaUtilEnumeration_withFreemarkerExtBeansBeansWrapper_(self, enumeration, wrapper);
  return self;
}


#line 63
- (id<FreemarkerTemplateTemplateModelIterator>)iterator {
  
#line 65
  @synchronized(self) {
    if (accessed_) {
      @throw new_FreemarkerTemplateTemplateModelException_initWithNSString_(@"This collection is stateful and can not be iterated over the second time.");
    }
    
#line 71
    accessed_ = YES;
  }
  return self;
}


#line 79
- (jboolean)hasNext {
  return [((id<JavaUtilEnumeration>) nil_chk(((id<JavaUtilEnumeration>) check_protocol_cast(object_, @protocol(JavaUtilEnumeration))))) hasMoreElements];
}


#line 87
- (id<FreemarkerTemplateTemplateModel>)next {
  
#line 91
  @try {
    return [self wrapWithId:[((id<JavaUtilEnumeration>) nil_chk(((id<JavaUtilEnumeration>) check_protocol_cast(object_, @protocol(JavaUtilEnumeration))))) nextElement]];
  }
  @catch (JavaUtilNoSuchElementException *e) {
    @throw new_FreemarkerTemplateTemplateModelException_initWithNSString_(
#line 96
    @"No more elements in the enumeration.");
  }
}


#line 105
- (jboolean)getAsBoolean {
  return [self hasNext];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaUtilEnumeration:withFreemarkerExtBeansBeansWrapper:", "EnumerationModel", NULL, 0x1, NULL, NULL },
    { "iterator", NULL, "Lfreemarker.template.TemplateModelIterator;", 0x1, "Lfreemarker.template.TemplateModelException;", NULL },
    { "hasNext", NULL, "Z", 0x1, NULL, NULL },
    { "next", NULL, "Lfreemarker.template.TemplateModel;", 0x1, "Lfreemarker.template.TemplateModelException;", NULL },
    { "getAsBoolean", NULL, "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "accessed_", NULL, 0x2, "Z", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerExtBeansEnumerationModel = { 2, "EnumerationModel", "freemarker.ext.beans", NULL, 0x1, 5, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerExtBeansEnumerationModel;
}

@end


#line 54
void FreemarkerExtBeansEnumerationModel_initWithJavaUtilEnumeration_withFreemarkerExtBeansBeansWrapper_(FreemarkerExtBeansEnumerationModel *self, id<JavaUtilEnumeration> enumeration, FreemarkerExtBeansBeansWrapper *wrapper) {
  (void) FreemarkerExtBeansBeanModel_initWithId_withFreemarkerExtBeansBeansWrapper_(self,
#line 56
  enumeration, wrapper);
  self->accessed_ =
#line 44
  NO;
}


#line 54
FreemarkerExtBeansEnumerationModel *new_FreemarkerExtBeansEnumerationModel_initWithJavaUtilEnumeration_withFreemarkerExtBeansBeansWrapper_(id<JavaUtilEnumeration> enumeration, FreemarkerExtBeansBeansWrapper *wrapper) {
  FreemarkerExtBeansEnumerationModel *self = [FreemarkerExtBeansEnumerationModel alloc];
  FreemarkerExtBeansEnumerationModel_initWithJavaUtilEnumeration_withFreemarkerExtBeansBeansWrapper_(self, enumeration, wrapper);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerExtBeansEnumerationModel)
