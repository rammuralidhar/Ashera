//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/cache/FileTemplateLoader.java
//


#include "FileTemplateLoader.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "Logger.h"
#include "MruCacheStorage.h"
#include "SecurityUtilities.h"
#include "StringUtil.h"
#include "TemplateLoaderUtils.h"
#include "java/io/File.h"
#include "java/io/FileInputStream.h"
#include "java/io/FileNotFoundException.h"
#include "java/io/IOException.h"
#include "java/io/InputStreamReader.h"
#include "java/io/Reader.h"
#include "java/lang/Boolean.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Long.h"
#include "java/lang/SecurityException.h"
#include "java/security/AccessController.h"
#include "java/security/PrivilegedAction.h"
#include "java/security/PrivilegedActionException.h"
#include "java/security/PrivilegedExceptionAction.h"

#line 0 "/Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/cache/FileTemplateLoader.java"

#define FreemarkerCacheFileTemplateLoader_CASE_CHECH_CACHE_HARD_SIZE 50
#define FreemarkerCacheFileTemplateLoader_CASE_CHECK_CACHE__SOFT_SIZE 1000

@interface FreemarkerCacheFileTemplateLoader () {
 @public
  NSString *canonicalBasePath_;
  jboolean emulateCaseSensitiveFileSystem_;
  FreemarkerCacheMruCacheStorage *correctCasePaths_;
}

/**
 @brief Called by #findTemplateSource(String) when #getEmulateCaseSensitiveFileSystem() is <code>true</code> .
 Should throw FileNotFoundException if there's a mismatch; the error message should contain both the requested and the correct file name.
 */
- (jboolean)isNameCaseCorrectWithJavaIoFile:(JavaIoFile *)source;

@end

J2OBJC_FIELD_SETTER(FreemarkerCacheFileTemplateLoader, canonicalBasePath_, NSString *)
J2OBJC_FIELD_SETTER(FreemarkerCacheFileTemplateLoader, correctCasePaths_, FreemarkerCacheMruCacheStorage *)

static jboolean FreemarkerCacheFileTemplateLoader_EMULATE_CASE_SENSITIVE_FILE_SYSTEM_DEFAULT_;
J2OBJC_STATIC_FIELD_GETTER(FreemarkerCacheFileTemplateLoader, EMULATE_CASE_SENSITIVE_FILE_SYSTEM_DEFAULT_, jboolean)

J2OBJC_STATIC_FIELD_GETTER(FreemarkerCacheFileTemplateLoader, CASE_CHECH_CACHE_HARD_SIZE, jint)

J2OBJC_STATIC_FIELD_GETTER(FreemarkerCacheFileTemplateLoader, CASE_CHECK_CACHE__SOFT_SIZE, jint)

static jboolean FreemarkerCacheFileTemplateLoader_SEP_IS_SLASH_;
J2OBJC_STATIC_FIELD_GETTER(FreemarkerCacheFileTemplateLoader, SEP_IS_SLASH_, jboolean)

static FreemarkerLogLogger *FreemarkerCacheFileTemplateLoader_LOG_;
J2OBJC_STATIC_FIELD_GETTER(FreemarkerCacheFileTemplateLoader, LOG_, FreemarkerLogLogger *)

__attribute__((unused)) static jboolean FreemarkerCacheFileTemplateLoader_isNameCaseCorrectWithJavaIoFile_(FreemarkerCacheFileTemplateLoader *self, JavaIoFile *source);

@interface FreemarkerCacheFileTemplateLoader_$1 : NSObject < JavaSecurityPrivilegedExceptionAction > {
 @public
  JavaIoFile *val$baseDir_;
  jboolean val$disableCanonicalPathCheck_;
}

- (id)run;

- (instancetype)initWithJavaIoFile:(JavaIoFile *)capture$0
                       withBoolean:(jboolean)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(FreemarkerCacheFileTemplateLoader_$1)

J2OBJC_FIELD_SETTER(FreemarkerCacheFileTemplateLoader_$1, val$baseDir_, JavaIoFile *)

__attribute__((unused)) static void FreemarkerCacheFileTemplateLoader_$1_initWithJavaIoFile_withBoolean_(FreemarkerCacheFileTemplateLoader_$1 *self, JavaIoFile *capture$0, jboolean capture$1);

__attribute__((unused)) static FreemarkerCacheFileTemplateLoader_$1 *new_FreemarkerCacheFileTemplateLoader_$1_initWithJavaIoFile_withBoolean_(JavaIoFile *capture$0, jboolean capture$1) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerCacheFileTemplateLoader_$1)

@interface FreemarkerCacheFileTemplateLoader_$2 : NSObject < JavaSecurityPrivilegedExceptionAction > {
 @public
  FreemarkerCacheFileTemplateLoader *this$0_;
  NSString *val$name_;
}

- (id)run;

- (instancetype)initWithFreemarkerCacheFileTemplateLoader:(FreemarkerCacheFileTemplateLoader *)outer$
                                             withNSString:(NSString *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(FreemarkerCacheFileTemplateLoader_$2)

J2OBJC_FIELD_SETTER(FreemarkerCacheFileTemplateLoader_$2, this$0_, FreemarkerCacheFileTemplateLoader *)
J2OBJC_FIELD_SETTER(FreemarkerCacheFileTemplateLoader_$2, val$name_, NSString *)

__attribute__((unused)) static void FreemarkerCacheFileTemplateLoader_$2_initWithFreemarkerCacheFileTemplateLoader_withNSString_(FreemarkerCacheFileTemplateLoader_$2 *self, FreemarkerCacheFileTemplateLoader *outer$, NSString *capture$0);

__attribute__((unused)) static FreemarkerCacheFileTemplateLoader_$2 *new_FreemarkerCacheFileTemplateLoader_$2_initWithFreemarkerCacheFileTemplateLoader_withNSString_(FreemarkerCacheFileTemplateLoader *outer$, NSString *capture$0) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerCacheFileTemplateLoader_$2)

@interface FreemarkerCacheFileTemplateLoader_$3 : NSObject < JavaSecurityPrivilegedAction > {
 @public
  id val$templateSource_;
}

- (id)run;

- (instancetype)initWithId:(id)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(FreemarkerCacheFileTemplateLoader_$3)

J2OBJC_FIELD_SETTER(FreemarkerCacheFileTemplateLoader_$3, val$templateSource_, id)

__attribute__((unused)) static void FreemarkerCacheFileTemplateLoader_$3_initWithId_(FreemarkerCacheFileTemplateLoader_$3 *self, id capture$0);

__attribute__((unused)) static FreemarkerCacheFileTemplateLoader_$3 *new_FreemarkerCacheFileTemplateLoader_$3_initWithId_(id capture$0) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerCacheFileTemplateLoader_$3)

@interface FreemarkerCacheFileTemplateLoader_$4 : NSObject < JavaSecurityPrivilegedExceptionAction > {
 @public
  id val$templateSource_;
  NSString *val$encoding_;
}

- (id)run;

- (instancetype)initWithId:(id)capture$0
              withNSString:(NSString *)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(FreemarkerCacheFileTemplateLoader_$4)

J2OBJC_FIELD_SETTER(FreemarkerCacheFileTemplateLoader_$4, val$templateSource_, id)
J2OBJC_FIELD_SETTER(FreemarkerCacheFileTemplateLoader_$4, val$encoding_, NSString *)

__attribute__((unused)) static void FreemarkerCacheFileTemplateLoader_$4_initWithId_withNSString_(FreemarkerCacheFileTemplateLoader_$4 *self, id capture$0, NSString *capture$1);

__attribute__((unused)) static FreemarkerCacheFileTemplateLoader_$4 *new_FreemarkerCacheFileTemplateLoader_$4_initWithId_withNSString_(id capture$0, NSString *capture$1) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerCacheFileTemplateLoader_$4)

J2OBJC_INITIALIZED_DEFN(FreemarkerCacheFileTemplateLoader)

NSString *FreemarkerCacheFileTemplateLoader_SYSTEM_PROPERTY_NAME_EMULATE_CASE_SENSITIVE_FILE_SYSTEM_ = 
#line 50
@"org.freemarker.emulateCaseSensitiveFileSystem";


#line 42
@implementation FreemarkerCacheFileTemplateLoader


#line 83
- (instancetype)init {
  FreemarkerCacheFileTemplateLoader_init(self);
  return self;
}


#line 97
- (instancetype)initWithJavaIoFile:(JavaIoFile *)baseDir {
  FreemarkerCacheFileTemplateLoader_initWithJavaIoFile_(self, baseDir);
  return self;
}


#line 120
- (instancetype)initWithJavaIoFile:(JavaIoFile *)baseDir
                       withBoolean:(jboolean)disableCanonicalPathCheck {
  FreemarkerCacheFileTemplateLoader_initWithJavaIoFile_withBoolean_(self, baseDir, disableCanonicalPathCheck);
  return self;
}


#line 162
- (id)findTemplateSourceWithNSString:(NSString *)name {
  
#line 166
  @try {
    return JavaSecurityAccessController_doPrivilegedWithJavaSecurityPrivilegedExceptionAction_(new_FreemarkerCacheFileTemplateLoader_$2_initWithFreemarkerCacheFileTemplateLoader_withNSString_(self, name));
  }
  @catch (
#line 194
  JavaSecurityPrivilegedActionException *e) {
    
#line 196
    @throw (JavaIoIOException *) check_class_cast([((JavaSecurityPrivilegedActionException *) nil_chk(e)) getException], [JavaIoIOException class]);
  }
}


#line 200
- (jlong)getLastModifiedWithId:(id)templateSource {
  
#line 202
  return [((JavaLangLong *) nil_chk(((JavaLangLong *) check_class_cast((JavaSecurityAccessController_doPrivilegedWithJavaSecurityPrivilegedAction_(new_FreemarkerCacheFileTemplateLoader_$3_initWithId_(templateSource))), [JavaLangLong class])))) longLongValue];
}


#line 213
- (JavaIoReader *)getReaderWithId:(id)templateSource
                     withNSString:(NSString *)encoding {
  
#line 217
  @try {
    
#line 219
    return (JavaIoReader *) check_class_cast(JavaSecurityAccessController_doPrivilegedWithJavaSecurityPrivilegedExceptionAction_(new_FreemarkerCacheFileTemplateLoader_$4_initWithId_withNSString_(templateSource, encoding)), [JavaIoReader class]);
  }
  @catch (
#line 234
  JavaSecurityPrivilegedActionException *e) {
    
#line 236
    @throw (JavaIoIOException *) check_class_cast([((JavaSecurityPrivilegedActionException *) nil_chk(e)) getException], [JavaIoIOException class]);
  }
}


#line 245
- (jboolean)isNameCaseCorrectWithJavaIoFile:(JavaIoFile *)source {
  return FreemarkerCacheFileTemplateLoader_isNameCaseCorrectWithJavaIoFile_(self, source);
}


#line 288
- (void)closeTemplateSourceWithId:(id)templateSource {
}


#line 299
- (JavaIoFile *)getBaseDirectory {
  return baseDir_;
}


#line 316
- (void)setEmulateCaseSensitiveFileSystemWithBoolean:(jboolean)nameCaseChecked {
  
#line 318
  if (nameCaseChecked) {
    if (correctCasePaths_ == nil) {
      correctCasePaths_ = new_FreemarkerCacheMruCacheStorage_initWithInt_withInt_(FreemarkerCacheFileTemplateLoader_CASE_CHECH_CACHE_HARD_SIZE, FreemarkerCacheFileTemplateLoader_CASE_CHECK_CACHE__SOFT_SIZE);
    }
  }
  else {
    
#line 323
    correctCasePaths_ = nil;
  }
  
#line 326
  self->emulateCaseSensitiveFileSystem_ = nameCaseChecked;
}

- (jboolean)getEmulateCaseSensitiveFileSystem {
  return emulateCaseSensitiveFileSystem_;
}


#line 346
- (jboolean)getEmulateCaseSensitiveFileSystemDefault {
  return FreemarkerCacheFileTemplateLoader_EMULATE_CASE_SENSITIVE_FILE_SYSTEM_DEFAULT_;
}


#line 355
- (NSString *)description {
  
#line 358
  return JreStrcat("$$@C$$C", FreemarkerCacheTemplateLoaderUtils_getClassNameForToStringWithFreemarkerCacheTemplateLoader_(self), @"(baseDir=\"",
#line 359
  baseDir_, '"',
#line 360
  (canonicalBasePath_ != nil ? JreStrcat("$$C", @", canonicalBasePath=\"", canonicalBasePath_, '"') : @""),
#line 361
  (emulateCaseSensitiveFileSystem_ ? @", emulateCaseSensitiveFileSystem=true" : @""), ')');
}

+ (void)initialize {
  if (self == [FreemarkerCacheFileTemplateLoader class]) {
    {
      
#line 53
      NSString *s = FreemarkerTemplateUtilitySecurityUtilities_getSystemPropertyWithNSString_withNSString_(FreemarkerCacheFileTemplateLoader_SYSTEM_PROPERTY_NAME_EMULATE_CASE_SENSITIVE_FILE_SYSTEM_,
#line 54
      @"false");
      jboolean emuCaseSensFS;
      @try {
        emuCaseSensFS = FreemarkerTemplateUtilityStringUtil_getYesNoWithNSString_(s);
      }
      @catch (
#line 58
      JavaLangException *e) {
        emuCaseSensFS = NO;
      }
      FreemarkerCacheFileTemplateLoader_EMULATE_CASE_SENSITIVE_FILE_SYSTEM_DEFAULT_ = emuCaseSensFS;
    }
    FreemarkerCacheFileTemplateLoader_SEP_IS_SLASH_ = (
#line 66
    JavaIoFile_get_separatorChar_() == '/');
    FreemarkerCacheFileTemplateLoader_LOG_ = FreemarkerLogLogger_getLoggerWithNSString_(
#line 68
    @"freemarker.cache");
    J2OBJC_SET_INITIALIZED(FreemarkerCacheFileTemplateLoader)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "FileTemplateLoader", NULL, 0x1, "Ljava.io.IOException;", NULL },
    { "initWithJavaIoFile:", "FileTemplateLoader", NULL, 0x1, "Ljava.io.IOException;", NULL },
    { "initWithJavaIoFile:withBoolean:", "FileTemplateLoader", NULL, 0x1, "Ljava.io.IOException;", NULL },
    { "findTemplateSourceWithNSString:", "findTemplateSource", "Ljava.lang.Object;", 0x1, "Ljava.io.IOException;", NULL },
    { "getLastModifiedWithId:", "getLastModified", "J", 0x1, NULL, NULL },
    { "getReaderWithId:withNSString:", "getReader", "Ljava.io.Reader;", 0x1, "Ljava.io.IOException;", NULL },
    { "isNameCaseCorrectWithJavaIoFile:", "isNameCaseCorrect", "Z", 0x2, "Ljava.io.IOException;", NULL },
    { "closeTemplateSourceWithId:", "closeTemplateSource", "V", 0x1, NULL, NULL },
    { "getBaseDirectory", NULL, "Ljava.io.File;", 0x1, NULL, NULL },
    { "setEmulateCaseSensitiveFileSystemWithBoolean:", "setEmulateCaseSensitiveFileSystem", "V", 0x1, NULL, NULL },
    { "getEmulateCaseSensitiveFileSystem", NULL, "Z", 0x1, NULL, NULL },
    { "getEmulateCaseSensitiveFileSystemDefault", NULL, "Z", 0x4, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "SYSTEM_PROPERTY_NAME_EMULATE_CASE_SENSITIVE_FILE_SYSTEM_", NULL, 0x9, "Ljava.lang.String;", &FreemarkerCacheFileTemplateLoader_SYSTEM_PROPERTY_NAME_EMULATE_CASE_SENSITIVE_FILE_SYSTEM_, NULL,  },
    { "EMULATE_CASE_SENSITIVE_FILE_SYSTEM_DEFAULT_", NULL, 0x1a, "Z", &FreemarkerCacheFileTemplateLoader_EMULATE_CASE_SENSITIVE_FILE_SYSTEM_DEFAULT_, NULL,  },
    { "CASE_CHECH_CACHE_HARD_SIZE_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = FreemarkerCacheFileTemplateLoader_CASE_CHECH_CACHE_HARD_SIZE },
    { "CASE_CHECK_CACHE__SOFT_SIZE_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = FreemarkerCacheFileTemplateLoader_CASE_CHECK_CACHE__SOFT_SIZE },
    { "SEP_IS_SLASH_", NULL, 0x1a, "Z", &FreemarkerCacheFileTemplateLoader_SEP_IS_SLASH_, NULL,  },
    { "LOG_", NULL, 0x1a, "Lfreemarker.log.Logger;", &FreemarkerCacheFileTemplateLoader_LOG_, NULL,  },
    { "baseDir_", NULL, 0x11, "Ljava.io.File;", NULL, NULL,  },
    { "canonicalBasePath_", NULL, 0x12, "Ljava.lang.String;", NULL, NULL,  },
    { "emulateCaseSensitiveFileSystem_", NULL, 0x2, "Z", NULL, NULL,  },
    { "correctCasePaths_", NULL, 0x2, "Lfreemarker.cache.MruCacheStorage;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerCacheFileTemplateLoader = { 2, "FileTemplateLoader", "freemarker.cache", NULL, 0x1, 13, methods, 10, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerCacheFileTemplateLoader;
}

@end


#line 83
void FreemarkerCacheFileTemplateLoader_init(FreemarkerCacheFileTemplateLoader *self) {
  (void) FreemarkerCacheFileTemplateLoader_initWithJavaIoFile_(self, new_JavaIoFile_initWithNSString_(FreemarkerTemplateUtilitySecurityUtilities_getSystemPropertyWithNSString_(
#line 87
  @"user.dir")));
}


#line 83
FreemarkerCacheFileTemplateLoader *new_FreemarkerCacheFileTemplateLoader_init() {
  FreemarkerCacheFileTemplateLoader *self = [FreemarkerCacheFileTemplateLoader alloc];
  FreemarkerCacheFileTemplateLoader_init(self);
  return self;
}


#line 97
void FreemarkerCacheFileTemplateLoader_initWithJavaIoFile_(FreemarkerCacheFileTemplateLoader *self, JavaIoFile *baseDir) {
  (void) FreemarkerCacheFileTemplateLoader_initWithJavaIoFile_withBoolean_(self,
#line 101
  baseDir, NO);
}


#line 97
FreemarkerCacheFileTemplateLoader *new_FreemarkerCacheFileTemplateLoader_initWithJavaIoFile_(JavaIoFile *baseDir) {
  FreemarkerCacheFileTemplateLoader *self = [FreemarkerCacheFileTemplateLoader alloc];
  FreemarkerCacheFileTemplateLoader_initWithJavaIoFile_(self, baseDir);
  return self;
}


#line 120
void FreemarkerCacheFileTemplateLoader_initWithJavaIoFile_withBoolean_(FreemarkerCacheFileTemplateLoader *self, JavaIoFile *baseDir, jboolean disableCanonicalPathCheck) {
  (void) NSObject_init(self);
  
#line 124
  @try {
    IOSObjectArray *retval = (IOSObjectArray *) check_class_cast(JavaSecurityAccessController_doPrivilegedWithJavaSecurityPrivilegedExceptionAction_(new_FreemarkerCacheFileTemplateLoader_$1_initWithJavaIoFile_withBoolean_(baseDir, disableCanonicalPathCheck)), [IOSObjectArray class]);
    
#line 151
    self->baseDir_ = (JavaIoFile *) check_class_cast(IOSObjectArray_Get(nil_chk(retval), 0), [JavaIoFile class]);
    self->canonicalBasePath_ = (NSString *) check_class_cast(IOSObjectArray_Get(retval, 1), [NSString class]);
    
#line 154
    [self setEmulateCaseSensitiveFileSystemWithBoolean:[self getEmulateCaseSensitiveFileSystemDefault]];
  }
  @catch (JavaSecurityPrivilegedActionException *e) {
    
#line 158
    @throw (JavaIoIOException *) check_class_cast([((JavaSecurityPrivilegedActionException *) nil_chk(e)) getException], [JavaIoIOException class]);
  }
}


#line 120
FreemarkerCacheFileTemplateLoader *new_FreemarkerCacheFileTemplateLoader_initWithJavaIoFile_withBoolean_(JavaIoFile *baseDir, jboolean disableCanonicalPathCheck) {
  FreemarkerCacheFileTemplateLoader *self = [FreemarkerCacheFileTemplateLoader alloc];
  FreemarkerCacheFileTemplateLoader_initWithJavaIoFile_withBoolean_(self, baseDir, disableCanonicalPathCheck);
  return self;
}


#line 245
jboolean FreemarkerCacheFileTemplateLoader_isNameCaseCorrectWithJavaIoFile_(FreemarkerCacheFileTemplateLoader *self, JavaIoFile *source) {
  NSString *sourcePath = [((JavaIoFile *) nil_chk(source)) getPath];
  if ([((FreemarkerCacheMruCacheStorage *) nil_chk(self->correctCasePaths_)) getWithId:sourcePath] != nil) {
    return YES;
  }
  
#line 251
  JavaIoFile *parentDir = [source getParentFile];
  if (parentDir != nil) {
    if (![((JavaIoFile *) nil_chk(self->baseDir_)) isEqual:parentDir] && !FreemarkerCacheFileTemplateLoader_isNameCaseCorrectWithJavaIoFile_(self, parentDir)) {
      return NO;
    }
    
#line 257
    IOSObjectArray *listing = [parentDir list];
    if (listing != nil) {
      NSString *fileName = [source getName];
      
#line 261
      jboolean identicalNameFound = NO;
      for (jint i = 0; !identicalNameFound && i < listing->size_; i++) {
        if ([((NSString *) nil_chk(fileName)) isEqual:IOSObjectArray_Get(listing, i)]) {
          identicalNameFound = YES;
        }
      }
      
#line 268
      if (!identicalNameFound) {
        
#line 270
        for (jint i = 0; i < listing->size_; i++) {
          NSString *listingEntry = IOSObjectArray_Get(listing, i);
          if ([((NSString *) nil_chk(fileName)) equalsIgnoreCase:listingEntry]) {
            if ([((FreemarkerLogLogger *) nil_chk(FreemarkerCacheFileTemplateLoader_LOG_)) isDebugEnabled]) {
              [FreemarkerCacheFileTemplateLoader_LOG_ debugWithNSString:JreStrcat("$$", @"Emulating file-not-found because of letter case differences to the real file, for: ",
#line 275
              sourcePath)];
            }
            return NO;
          }
        }
      }
    }
  }
  
#line 284
  [self->correctCasePaths_ putWithId:sourcePath withId:JavaLangBoolean_get_TRUE__()];
  return YES;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCacheFileTemplateLoader)

@implementation FreemarkerCacheFileTemplateLoader_$1


#line 126
- (id)run {
  if (![((JavaIoFile *) nil_chk(val$baseDir_)) exists]) {
    @throw new_JavaIoFileNotFoundException_initWithNSString_(JreStrcat("@$", val$baseDir_, @" does not exist."));
  }
  if (![val$baseDir_ isDirectory]) {
    @throw new_JavaIoIOException_initWithNSString_(JreStrcat("@$", val$baseDir_, @" is not a directory."));
  }
  IOSObjectArray *retval = [IOSObjectArray newArrayWithLength:2 type:NSObject_class_()];
  if (val$disableCanonicalPathCheck_) {
    (void) IOSObjectArray_Set(retval, 0, val$baseDir_);
    (void) IOSObjectArray_Set(retval, 1, nil);
  }
  else {
    (void) IOSObjectArray_Set(retval, 0, [val$baseDir_ getCanonicalFile]);
    NSString *basePath = [((JavaIoFile *) nil_chk(((JavaIoFile *) check_class_cast(IOSObjectArray_Get(retval, 0), [JavaIoFile class])))) getPath];
    
#line 143
    if (![((NSString *) nil_chk(basePath)) hasSuffix:JavaIoFile_get_separator_()]) {
      basePath = JreStrcat("$C", basePath, JavaIoFile_get_separatorChar_());
    }
    (void) IOSObjectArray_Set(retval, 1, basePath);
  }
  return retval;
}

- (instancetype)initWithJavaIoFile:(JavaIoFile *)capture$0
                       withBoolean:(jboolean)capture$1 {
  FreemarkerCacheFileTemplateLoader_$1_initWithJavaIoFile_withBoolean_(self, capture$0, capture$1);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "run", NULL, "Ljava.lang.Object;", 0x1, "Ljava.io.IOException;", NULL },
    { "initWithJavaIoFile:withBoolean:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "val$baseDir_", NULL, 0x1012, "Ljava.io.File;", NULL, NULL,  },
    { "val$disableCanonicalPathCheck_", NULL, 0x1012, "Z", NULL, NULL,  },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "FreemarkerCacheFileTemplateLoader", "initWithJavaIoFile:withBoolean:" };
  static const J2ObjcClassInfo _FreemarkerCacheFileTemplateLoader_$1 = { 2, "", "freemarker.cache", "FileTemplateLoader", 0x8008, 2, methods, 2, fields, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_FreemarkerCacheFileTemplateLoader_$1;
}

@end

void FreemarkerCacheFileTemplateLoader_$1_initWithJavaIoFile_withBoolean_(FreemarkerCacheFileTemplateLoader_$1 *self, JavaIoFile *capture$0, jboolean capture$1) {
  self->val$baseDir_ = capture$0;
  self->val$disableCanonicalPathCheck_ = capture$1;
  (void) NSObject_init(self);
}

FreemarkerCacheFileTemplateLoader_$1 *new_FreemarkerCacheFileTemplateLoader_$1_initWithJavaIoFile_withBoolean_(JavaIoFile *capture$0, jboolean capture$1) {
  FreemarkerCacheFileTemplateLoader_$1 *self = [FreemarkerCacheFileTemplateLoader_$1 alloc];
  FreemarkerCacheFileTemplateLoader_$1_initWithJavaIoFile_withBoolean_(self, capture$0, capture$1);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCacheFileTemplateLoader_$1)

@implementation FreemarkerCacheFileTemplateLoader_$2


#line 168
- (id)run {
  JavaIoFile *source = new_JavaIoFile_initWithJavaIoFile_withNSString_(this$0_->baseDir_, FreemarkerCacheFileTemplateLoader_get_SEP_IS_SLASH_() ? val$name_ :
#line 170
  [((NSString *) nil_chk(val$name_)) replace:'/' withChar:JavaIoFile_get_separatorChar_()]);
  if (![source isFile]) {
    return nil;
  }
  
#line 177
  if (this$0_->canonicalBasePath_ != nil) {
    NSString *normalized = [source getCanonicalPath];
    if (![((NSString *) nil_chk(normalized)) hasPrefix:this$0_->canonicalBasePath_]) {
      @throw new_JavaLangSecurityException_initWithNSString_(JreStrcat("$$$$$", [source getAbsolutePath], @" resolves to ",
#line 181
      normalized, @" which  doesn't start with ", this$0_->canonicalBasePath_));
    }
  }
  
#line 186
  if (this$0_->emulateCaseSensitiveFileSystem_ && !FreemarkerCacheFileTemplateLoader_isNameCaseCorrectWithJavaIoFile_(this$0_, source)) {
    return nil;
  }
  
#line 190
  return source;
}

- (instancetype)initWithFreemarkerCacheFileTemplateLoader:(FreemarkerCacheFileTemplateLoader *)outer$
                                             withNSString:(NSString *)capture$0 {
  FreemarkerCacheFileTemplateLoader_$2_initWithFreemarkerCacheFileTemplateLoader_withNSString_(self, outer$, capture$0);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "run", NULL, "Ljava.lang.Object;", 0x1, "Ljava.io.IOException;", NULL },
    { "initWithFreemarkerCacheFileTemplateLoader:withNSString:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lfreemarker.cache.FileTemplateLoader;", NULL, NULL,  },
    { "val$name_", NULL, 0x1012, "Ljava.lang.String;", NULL, NULL,  },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "FreemarkerCacheFileTemplateLoader", "findTemplateSourceWithNSString:" };
  static const J2ObjcClassInfo _FreemarkerCacheFileTemplateLoader_$2 = { 2, "", "freemarker.cache", "FileTemplateLoader", 0x8008, 2, methods, 2, fields, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_FreemarkerCacheFileTemplateLoader_$2;
}

@end

void FreemarkerCacheFileTemplateLoader_$2_initWithFreemarkerCacheFileTemplateLoader_withNSString_(FreemarkerCacheFileTemplateLoader_$2 *self, FreemarkerCacheFileTemplateLoader *outer$, NSString *capture$0) {
  self->this$0_ = outer$;
  self->val$name_ = capture$0;
  (void) NSObject_init(self);
}

FreemarkerCacheFileTemplateLoader_$2 *new_FreemarkerCacheFileTemplateLoader_$2_initWithFreemarkerCacheFileTemplateLoader_withNSString_(FreemarkerCacheFileTemplateLoader *outer$, NSString *capture$0) {
  FreemarkerCacheFileTemplateLoader_$2 *self = [FreemarkerCacheFileTemplateLoader_$2 alloc];
  FreemarkerCacheFileTemplateLoader_$2_initWithFreemarkerCacheFileTemplateLoader_withNSString_(self, outer$, capture$0);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCacheFileTemplateLoader_$2)

@implementation FreemarkerCacheFileTemplateLoader_$3


#line 204
- (id)run {
  
#line 206
  return new_JavaLangLong_initWithLong_([((JavaIoFile *) nil_chk(((JavaIoFile *) check_class_cast(val$templateSource_, [JavaIoFile class])))) lastModified]);
}

- (instancetype)initWithId:(id)capture$0 {
  FreemarkerCacheFileTemplateLoader_$3_initWithId_(self, capture$0);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "run", NULL, "Ljava.lang.Object;", 0x1, NULL, NULL },
    { "initWithId:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "val$templateSource_", NULL, 0x1012, "Ljava.lang.Object;", NULL, NULL,  },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "FreemarkerCacheFileTemplateLoader", "getLastModifiedWithId:" };
  static const J2ObjcClassInfo _FreemarkerCacheFileTemplateLoader_$3 = { 2, "", "freemarker.cache", "FileTemplateLoader", 0x8008, 2, methods, 1, fields, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_FreemarkerCacheFileTemplateLoader_$3;
}

@end

void FreemarkerCacheFileTemplateLoader_$3_initWithId_(FreemarkerCacheFileTemplateLoader_$3 *self, id capture$0) {
  self->val$templateSource_ = capture$0;
  (void) NSObject_init(self);
}

FreemarkerCacheFileTemplateLoader_$3 *new_FreemarkerCacheFileTemplateLoader_$3_initWithId_(id capture$0) {
  FreemarkerCacheFileTemplateLoader_$3 *self = [FreemarkerCacheFileTemplateLoader_$3 alloc];
  FreemarkerCacheFileTemplateLoader_$3_initWithId_(self, capture$0);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCacheFileTemplateLoader_$3)

@implementation FreemarkerCacheFileTemplateLoader_$4


#line 221
- (id)run {
  
#line 225
  if (!([val$templateSource_ isKindOfClass:[JavaIoFile class]])) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"templateSource wasn't a File, but a: ",
#line 228
    [[nil_chk(val$templateSource_) getClass] getName]));
  }
  return new_JavaIoInputStreamReader_initWithJavaIoInputStream_withNSString_(new_JavaIoFileInputStream_initWithJavaIoFile_((JavaIoFile *) check_class_cast(val$templateSource_, [JavaIoFile class])), val$encoding_);
}

- (instancetype)initWithId:(id)capture$0
              withNSString:(NSString *)capture$1 {
  FreemarkerCacheFileTemplateLoader_$4_initWithId_withNSString_(self, capture$0, capture$1);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "run", NULL, "Ljava.lang.Object;", 0x1, "Ljava.io.IOException;", NULL },
    { "initWithId:withNSString:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "val$templateSource_", NULL, 0x1012, "Ljava.lang.Object;", NULL, NULL,  },
    { "val$encoding_", NULL, 0x1012, "Ljava.lang.String;", NULL, NULL,  },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "FreemarkerCacheFileTemplateLoader", "getReaderWithId:withNSString:" };
  static const J2ObjcClassInfo _FreemarkerCacheFileTemplateLoader_$4 = { 2, "", "freemarker.cache", "FileTemplateLoader", 0x8008, 2, methods, 2, fields, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_FreemarkerCacheFileTemplateLoader_$4;
}

@end

void FreemarkerCacheFileTemplateLoader_$4_initWithId_withNSString_(FreemarkerCacheFileTemplateLoader_$4 *self, id capture$0, NSString *capture$1) {
  self->val$templateSource_ = capture$0;
  self->val$encoding_ = capture$1;
  (void) NSObject_init(self);
}

FreemarkerCacheFileTemplateLoader_$4 *new_FreemarkerCacheFileTemplateLoader_$4_initWithId_withNSString_(id capture$0, NSString *capture$1) {
  FreemarkerCacheFileTemplateLoader_$4 *self = [FreemarkerCacheFileTemplateLoader_$4 alloc];
  FreemarkerCacheFileTemplateLoader_$4_initWithId_withNSString_(self, capture$0, capture$1);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCacheFileTemplateLoader_$4)
