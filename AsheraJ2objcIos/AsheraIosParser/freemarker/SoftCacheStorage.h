//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/cache/SoftCacheStorage.java
//

#ifndef _FreemarkerCacheSoftCacheStorage_H_
#define _FreemarkerCacheSoftCacheStorage_H_

#include "CacheStorageWithGetSize.h"
#include "ConcurrentCacheStorage.h"
#include "J2ObjC_header.h"

@protocol JavaUtilMap;

/**
 @brief Soft cache storage is a cache storage that uses SoftReference  objects to hold the objects it was passed, therefore allows the garbage collector to purge the cache when it determines that it wants to free up memory.
 This class is thread-safe to the extent that its underlying map is. The default implementation uses a concurrent map on Java 5 and above, so it's thread-safe in that case.
 */
@interface FreemarkerCacheSoftCacheStorage : NSObject < FreemarkerCacheConcurrentCacheStorage, FreemarkerCacheCacheStorageWithGetSize >

#pragma mark Public

- (instancetype)init;

- (instancetype)initWithJavaUtilMap:(id<JavaUtilMap>)backingMap;

- (void)clear;

- (id)getWithId:(id)key;

/**
 @brief Returns a close approximation of the number of cache entries.
 @since 2.3.21
 */
- (jint)getSize;

- (jboolean)isConcurrent;

- (void)putWithId:(id)key
           withId:(id)value;

- (void)removeWithId:(id)key;

@end

J2OBJC_STATIC_INIT(FreemarkerCacheSoftCacheStorage)

FOUNDATION_EXPORT void FreemarkerCacheSoftCacheStorage_init(FreemarkerCacheSoftCacheStorage *self);

FOUNDATION_EXPORT FreemarkerCacheSoftCacheStorage *new_FreemarkerCacheSoftCacheStorage_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void FreemarkerCacheSoftCacheStorage_initWithJavaUtilMap_(FreemarkerCacheSoftCacheStorage *self, id<JavaUtilMap> backingMap);

FOUNDATION_EXPORT FreemarkerCacheSoftCacheStorage *new_FreemarkerCacheSoftCacheStorage_initWithJavaUtilMap_(id<JavaUtilMap> backingMap) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerCacheSoftCacheStorage)

#endif // _FreemarkerCacheSoftCacheStorage_H_
