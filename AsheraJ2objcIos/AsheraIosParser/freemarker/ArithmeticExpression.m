//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/ArithmeticExpression.java
//


#include "ArithmeticEngine.h"
#include "ArithmeticExpression.h"
#include "Environment.h"
#include "Expression.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "ParameterRole.h"
#include "SimpleNumber.h"
#include "Template.h"
#include "TemplateException.h"
#include "TemplateModel.h"
#include "TemplateObject.h"
#include "_MiscTemplateException.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/Integer.h"

#line 0 "/Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/ArithmeticExpression.java"

@interface FreemarkerCoreArithmeticExpression () {
 @public
  FreemarkerCoreExpression *lho_;
  FreemarkerCoreExpression *rho_;
  jint operator__;
}

@end

J2OBJC_FIELD_SETTER(FreemarkerCoreArithmeticExpression, lho_, FreemarkerCoreExpression *)
J2OBJC_FIELD_SETTER(FreemarkerCoreArithmeticExpression, rho_, FreemarkerCoreExpression *)

static IOSCharArray *FreemarkerCoreArithmeticExpression_OPERATOR_IMAGES_;
J2OBJC_STATIC_FIELD_GETTER(FreemarkerCoreArithmeticExpression, OPERATOR_IMAGES_, IOSCharArray *)

J2OBJC_INITIALIZED_DEFN(FreemarkerCoreArithmeticExpression)


#line 27
@implementation FreemarkerCoreArithmeticExpression


#line 40
- (instancetype)initWithFreemarkerCoreExpression:(FreemarkerCoreExpression *)lho
                    withFreemarkerCoreExpression:(FreemarkerCoreExpression *)rho
                                         withInt:(jint)operator_ {
  FreemarkerCoreArithmeticExpression_initWithFreemarkerCoreExpression_withFreemarkerCoreExpression_withInt_(self, lho, rho, operator_);
  return self;
}


#line 46
- (id<FreemarkerTemplateTemplateModel>)_evalWithFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env {
  return FreemarkerCoreArithmeticExpression__evalWithFreemarkerCoreEnvironment_withFreemarkerCoreTemplateObject_withNSNumber_withInt_withNSNumber_(env, self, [((FreemarkerCoreExpression *) nil_chk(lho_)) evalToNumberWithFreemarkerCoreEnvironment:env], operator__, [((FreemarkerCoreExpression *) nil_chk(rho_)) evalToNumberWithFreemarkerCoreEnvironment:env]);
}

+ (id<FreemarkerTemplateTemplateModel>)_evalWithFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env
                                         withFreemarkerCoreTemplateObject:(FreemarkerCoreTemplateObject *)parent
                                                             withNSNumber:(NSNumber *)lhoNumber
                                                                  withInt:(jint)operator_
                                                             withNSNumber:(NSNumber *)rhoNumber {
  return FreemarkerCoreArithmeticExpression__evalWithFreemarkerCoreEnvironment_withFreemarkerCoreTemplateObject_withNSNumber_withInt_withNSNumber_(env, parent, lhoNumber, operator_, rhoNumber);
}


#line 76
- (NSString *)getCanonicalForm {
  return JreStrcat("$CCC$", [((FreemarkerCoreExpression *) nil_chk(lho_)) getCanonicalForm], ' ', FreemarkerCoreArithmeticExpression_getOperatorSymbolWithInt_(operator__), ' ', [((FreemarkerCoreExpression *) nil_chk(rho_)) getCanonicalForm]);
}

- (NSString *)getNodeTypeSymbol {
  return NSString_valueOfChar_(FreemarkerCoreArithmeticExpression_getOperatorSymbolWithInt_(operator__));
}

+ (jchar)getOperatorSymbolWithInt:(jint)operator_ {
  return FreemarkerCoreArithmeticExpression_getOperatorSymbolWithInt_(operator_);
}

- (jboolean)isLiteral {
  return constantValue_ != nil || ([((FreemarkerCoreExpression *) nil_chk(lho_)) isLiteral] && [((FreemarkerCoreExpression *) nil_chk(rho_)) isLiteral]);
}

- (FreemarkerCoreExpression *)deepCloneWithIdentifierReplaced_innerWithNSString:(NSString *)replacedIdentifier
                                                   withFreemarkerCoreExpression:(FreemarkerCoreExpression *)replacement
                                 withFreemarkerCoreExpression_ReplacemenetState:(FreemarkerCoreExpression_ReplacemenetState *)replacementState {
  
#line 94
  return new_FreemarkerCoreArithmeticExpression_initWithFreemarkerCoreExpression_withFreemarkerCoreExpression_withInt_(
#line 95
  [((FreemarkerCoreExpression *) nil_chk(lho_)) deepCloneWithIdentifierReplacedWithNSString:replacedIdentifier withFreemarkerCoreExpression:replacement withFreemarkerCoreExpression_ReplacemenetState:replacementState],
#line 96
  [((FreemarkerCoreExpression *) nil_chk(rho_)) deepCloneWithIdentifierReplacedWithNSString:replacedIdentifier withFreemarkerCoreExpression:replacement withFreemarkerCoreExpression_ReplacemenetState:replacementState],
#line 97
  operator__);
}


#line 100
- (jint)getParameterCount {
  return 3;
}

- (id)getParameterValueWithInt:(jint)idx {
  switch (idx) {
    case 0:
    
#line 106
    return lho_;
    case 1:
    
#line 107
    return rho_;
    case 2:
    
#line 108
    return new_JavaLangInteger_initWithInt_(operator__);
    default:
    
#line 109
    @throw new_JavaLangIndexOutOfBoundsException_init();
  }
}


#line 113
- (FreemarkerCoreParameterRole *)getParameterRoleWithInt:(jint)idx {
  switch (idx) {
    case 0:
    
#line 115
    return FreemarkerCoreParameterRole_get_LEFT_HAND_OPERAND_();
    case 1:
    
#line 116
    return FreemarkerCoreParameterRole_get_RIGHT_HAND_OPERAND_();
    case 2:
    
#line 117
    return FreemarkerCoreParameterRole_get_AST_NODE_SUBTYPE_();
    default:
    
#line 118
    @throw new_JavaLangIndexOutOfBoundsException_init();
  }
}

+ (void)initialize {
  if (self == [FreemarkerCoreArithmeticExpression class]) {
    FreemarkerCoreArithmeticExpression_OPERATOR_IMAGES_ = [IOSCharArray newArrayWithChars:(jchar[]){
#line 34
      '-', '*', '/', '%' } count:4];
      J2OBJC_SET_INITIALIZED(FreemarkerCoreArithmeticExpression)
    }
  }

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithFreemarkerCoreExpression:withFreemarkerCoreExpression:withInt:", "ArithmeticExpression", NULL, 0x0, NULL, NULL },
    { "_evalWithFreemarkerCoreEnvironment:", "_eval", "Lfreemarker.template.TemplateModel;", 0x0, "Lfreemarker.template.TemplateException;", NULL },
    { "_evalWithFreemarkerCoreEnvironment:withFreemarkerCoreTemplateObject:withNSNumber:withInt:withNSNumber:", "_eval", "Lfreemarker.template.TemplateModel;", 0x8, "Lfreemarker.template.TemplateException;Lfreemarker.core._MiscTemplateException;", NULL },
    { "getCanonicalForm", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getNodeTypeSymbol", NULL, "Ljava.lang.String;", 0x0, NULL, NULL },
    { "getOperatorSymbolWithInt:", "getOperatorSymbol", "C", 0x8, NULL, NULL },
    { "isLiteral", NULL, "Z", 0x0, NULL, NULL },
    { "deepCloneWithIdentifierReplaced_innerWithNSString:withFreemarkerCoreExpression:withFreemarkerCoreExpression_ReplacemenetState:", "deepCloneWithIdentifierReplaced_inner", "Lfreemarker.core.Expression;", 0x4, NULL, NULL },
    { "getParameterCount", NULL, "I", 0x0, NULL, NULL },
    { "getParameterValueWithInt:", "getParameterValue", "Ljava.lang.Object;", 0x0, NULL, NULL },
    { "getParameterRoleWithInt:", "getParameterRole", "Lfreemarker.core.ParameterRole;", 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "TYPE_SUBSTRACTION_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = FreemarkerCoreArithmeticExpression_TYPE_SUBSTRACTION },
    { "TYPE_MULTIPLICATION_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = FreemarkerCoreArithmeticExpression_TYPE_MULTIPLICATION },
    { "TYPE_DIVISION_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = FreemarkerCoreArithmeticExpression_TYPE_DIVISION },
    { "TYPE_MODULO_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = FreemarkerCoreArithmeticExpression_TYPE_MODULO },
    { "OPERATOR_IMAGES_", NULL, 0x1a, "[C", &FreemarkerCoreArithmeticExpression_OPERATOR_IMAGES_, NULL,  },
    { "lho_", NULL, 0x12, "Lfreemarker.core.Expression;", NULL, NULL,  },
    { "rho_", NULL, 0x12, "Lfreemarker.core.Expression;", NULL, NULL,  },
    { "operator__", "operator", 0x12, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerCoreArithmeticExpression = { 2, "ArithmeticExpression", "freemarker.core", NULL, 0x10, 11, methods, 8, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerCoreArithmeticExpression;
}

@end


#line 40
void FreemarkerCoreArithmeticExpression_initWithFreemarkerCoreExpression_withFreemarkerCoreExpression_withInt_(FreemarkerCoreArithmeticExpression *self, FreemarkerCoreExpression *lho, FreemarkerCoreExpression *rho, jint operator_) {
  (void) FreemarkerCoreExpression_init(self);
  
#line 41
  self->lho_ = lho;
  self->rho_ = rho;
  self->operator__ = operator_;
}


#line 40
FreemarkerCoreArithmeticExpression *new_FreemarkerCoreArithmeticExpression_initWithFreemarkerCoreExpression_withFreemarkerCoreExpression_withInt_(FreemarkerCoreExpression *lho, FreemarkerCoreExpression *rho, jint operator_) {
  FreemarkerCoreArithmeticExpression *self = [FreemarkerCoreArithmeticExpression alloc];
  FreemarkerCoreArithmeticExpression_initWithFreemarkerCoreExpression_withFreemarkerCoreExpression_withInt_(self, lho, rho, operator_);
  return self;
}


#line 50
id<FreemarkerTemplateTemplateModel> FreemarkerCoreArithmeticExpression__evalWithFreemarkerCoreEnvironment_withFreemarkerCoreTemplateObject_withNSNumber_withInt_withNSNumber_(FreemarkerCoreEnvironment *env, FreemarkerCoreTemplateObject *parent, NSNumber *lhoNumber, jint operator_, NSNumber *rhoNumber) {
  FreemarkerCoreArithmeticExpression_initialize();
  FreemarkerCoreArithmeticEngine *ae =
#line 53
  env != nil ?
#line 54
  [env getArithmeticEngine] :
#line 55
  [((FreemarkerTemplateTemplate *) nil_chk([((FreemarkerCoreTemplateObject *) nil_chk(parent)) getTemplate])) getArithmeticEngine];
  switch (operator_) {
    case FreemarkerCoreArithmeticExpression_TYPE_SUBSTRACTION:
    return new_FreemarkerTemplateSimpleNumber_initWithNSNumber_([ae subtractWithNSNumber:lhoNumber withNSNumber:rhoNumber]);
    case FreemarkerCoreArithmeticExpression_TYPE_MULTIPLICATION:
    return new_FreemarkerTemplateSimpleNumber_initWithNSNumber_([ae multiplyWithNSNumber:lhoNumber withNSNumber:rhoNumber]);
    case FreemarkerCoreArithmeticExpression_TYPE_DIVISION:
    return new_FreemarkerTemplateSimpleNumber_initWithNSNumber_([ae divideWithNSNumber:lhoNumber withNSNumber:rhoNumber]);
    case FreemarkerCoreArithmeticExpression_TYPE_MODULO:
    return new_FreemarkerTemplateSimpleNumber_initWithNSNumber_([ae modulusWithNSNumber:lhoNumber withNSNumber:rhoNumber]);
    default:
    if ([parent isKindOfClass:[FreemarkerCoreExpression class]]) {
      @throw new_FreemarkerCore_MiscTemplateException_initWithFreemarkerCoreExpression_withNSObjectArray_((FreemarkerCoreExpression *) check_class_cast(parent, [FreemarkerCoreExpression class]), [IOSObjectArray newArrayWithObjects:(id[]){
#line 68
        @"Unknown operation: ", new_JavaLangInteger_initWithInt_(operator_) } count:2 type:NSObject_class_()]);
      }
      else {
        
#line 70
        @throw new_FreemarkerCore_MiscTemplateException_initWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){
#line 71
          @"Unknown operation: ", new_JavaLangInteger_initWithInt_(operator_) } count:2 type:NSObject_class_()]);
        }
      }
    }

jchar FreemarkerCoreArithmeticExpression_getOperatorSymbolWithInt_(jint operator_) {
  FreemarkerCoreArithmeticExpression_initialize();
  
#line 85
  return IOSCharArray_Get(nil_chk(FreemarkerCoreArithmeticExpression_OPERATOR_IMAGES_), operator_);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreArithmeticExpression)
