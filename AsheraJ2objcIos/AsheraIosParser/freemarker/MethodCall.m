//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/MethodCall.java
//


#include "Environment.h"
#include "Expression.h"
#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "ListLiteral.h"
#include "Macro.h"
#include "MethodCall.h"
#include "NonMethodException.h"
#include "NullWriter.h"
#include "ObjectWrapper.h"
#include "ParameterRole.h"
#include "TemplateException.h"
#include "TemplateMethodModel.h"
#include "TemplateMethodModelEx.h"
#include "TemplateModel.h"
#include "_MiscTemplateException.h"
#include "java/io/IOException.h"
#include "java/io/Writer.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/StringBuffer.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"

#line 0 "/Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/MethodCall.java"

@interface FreemarkerCoreMethodCall () {
 @public
  FreemarkerCoreExpression *target_;
  FreemarkerCoreListLiteral *arguments_;
}

- (instancetype)initWithFreemarkerCoreExpression:(FreemarkerCoreExpression *)target
                   withFreemarkerCoreListLiteral:(FreemarkerCoreListLiteral *)arguments;

@end

J2OBJC_FIELD_SETTER(FreemarkerCoreMethodCall, target_, FreemarkerCoreExpression *)
J2OBJC_FIELD_SETTER(FreemarkerCoreMethodCall, arguments_, FreemarkerCoreListLiteral *)

__attribute__((unused)) static void FreemarkerCoreMethodCall_initWithFreemarkerCoreExpression_withFreemarkerCoreListLiteral_(FreemarkerCoreMethodCall *self, FreemarkerCoreExpression *target, FreemarkerCoreListLiteral *arguments);

__attribute__((unused)) static FreemarkerCoreMethodCall *new_FreemarkerCoreMethodCall_initWithFreemarkerCoreExpression_withFreemarkerCoreListLiteral_(FreemarkerCoreExpression *target, FreemarkerCoreListLiteral *arguments) NS_RETURNS_RETAINED;


#line 39
@implementation FreemarkerCoreMethodCall


#line 44
- (instancetype)initWithFreemarkerCoreExpression:(FreemarkerCoreExpression *)target
                           withJavaUtilArrayList:(JavaUtilArrayList *)arguments {
  FreemarkerCoreMethodCall_initWithFreemarkerCoreExpression_withJavaUtilArrayList_(self, target, arguments);
  return self;
}


#line 48
- (instancetype)initWithFreemarkerCoreExpression:(FreemarkerCoreExpression *)target
                   withFreemarkerCoreListLiteral:(FreemarkerCoreListLiteral *)arguments {
  FreemarkerCoreMethodCall_initWithFreemarkerCoreExpression_withFreemarkerCoreListLiteral_(self, target, arguments);
  return self;
}


#line 53
- (id<FreemarkerTemplateTemplateModel>)_evalWithFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env {
  
#line 55
  id<FreemarkerTemplateTemplateModel> targetModel = [((FreemarkerCoreExpression *) nil_chk(target_)) evalWithFreemarkerCoreEnvironment:env];
  if ([FreemarkerTemplateTemplateMethodModel_class_() isInstance:targetModel]) {
    id<FreemarkerTemplateTemplateMethodModel> targetMethod = (id<FreemarkerTemplateTemplateMethodModel>) check_protocol_cast(targetModel, @protocol(FreemarkerTemplateTemplateMethodModel));
    id<JavaUtilList> argumentStrings =
#line 59
    [FreemarkerTemplateTemplateMethodModelEx_class_() isInstance:targetMethod] ?
#line 60
    [((FreemarkerCoreListLiteral *) nil_chk(arguments_)) getModelListWithFreemarkerCoreEnvironment:env] :
#line 61
    [((FreemarkerCoreListLiteral *) nil_chk(arguments_)) getValueListWithFreemarkerCoreEnvironment:env];
    id result = [((id<FreemarkerTemplateTemplateMethodModel>) nil_chk(targetMethod)) execWithJavaUtilList:argumentStrings];
    return [((id<FreemarkerTemplateObjectWrapper>) nil_chk([((FreemarkerCoreEnvironment *) nil_chk(env)) getObjectWrapper])) wrapWithId:result];
  }
  else if ([targetModel isKindOfClass:[FreemarkerCoreMacro class]]) {
    FreemarkerCoreMacro *func = (FreemarkerCoreMacro *) check_class_cast(targetModel, [FreemarkerCoreMacro class]);
    [((FreemarkerCoreEnvironment *) nil_chk(env)) setLastReturnValueWithFreemarkerTemplateTemplateModel:nil];
    if (![((FreemarkerCoreMacro *) nil_chk(func)) isFunction]) {
      @throw new_FreemarkerCore_MiscTemplateException_initWithFreemarkerCoreEnvironment_withNSString_(env, @"A macro cannot be called in an expression. (Functions can be.)");
    }
    JavaIoWriter *prevOut = [env getOut];
    @try {
      [env setOutWithJavaIoWriter:FreemarkerTemplateUtilityNullWriter_get_INSTANCE_()];
      [env invokeWithFreemarkerCoreMacro:func withJavaUtilMap:nil withJavaUtilList:((FreemarkerCoreListLiteral *) nil_chk(arguments_))->items_ withJavaUtilList:nil withFreemarkerCoreTemplateElement:nil];
    }
    @catch (
#line 75
    JavaIoIOException *e) {
      
#line 77
      @throw new_FreemarkerTemplateTemplateException_initWithNSString_withJavaLangException_withFreemarkerCoreEnvironment_(@"Unexpected exception during function execution", e, env);
    }
    @finally {
      
#line 79
      [env setOutWithJavaIoWriter:prevOut];
    }
    return [env getLastReturnValue];
  }
  else {
    @throw new_FreemarkerCoreNonMethodException_initWithFreemarkerCoreExpression_withFreemarkerTemplateTemplateModel_withFreemarkerCoreEnvironment_(target_, targetModel, env);
  }
}


#line 88
- (NSString *)getCanonicalForm {
  JavaLangStringBuffer *buf = new_JavaLangStringBuffer_init();
  (void) [buf appendWithNSString:[((FreemarkerCoreExpression *) nil_chk(target_)) getCanonicalForm]];
  (void) [buf appendWithNSString:@"("];
  NSString *list = [((FreemarkerCoreListLiteral *) nil_chk(arguments_)) getCanonicalForm];
  (void) [buf appendWithNSString:[list substring:1 endIndex:((jint) [((NSString *) nil_chk(list)) length]) - 1]];
  (void) [buf appendWithNSString:@")"];
  return [buf description];
}

- (NSString *)getNodeTypeSymbol {
  return @"...(...)";
}

- (id<FreemarkerTemplateTemplateModel>)getConstantValue {
  return nil;
}

- (jboolean)isLiteral {
  return NO;
}

- (FreemarkerCoreExpression *)deepCloneWithIdentifierReplaced_innerWithNSString:(NSString *)replacedIdentifier
                                                   withFreemarkerCoreExpression:(FreemarkerCoreExpression *)replacement
                                 withFreemarkerCoreExpression_ReplacemenetState:(FreemarkerCoreExpression_ReplacemenetState *)replacementState {
  
#line 112
  return new_FreemarkerCoreMethodCall_initWithFreemarkerCoreExpression_withFreemarkerCoreListLiteral_(
#line 113
  [((FreemarkerCoreExpression *) nil_chk(target_)) deepCloneWithIdentifierReplacedWithNSString:replacedIdentifier withFreemarkerCoreExpression:replacement withFreemarkerCoreExpression_ReplacemenetState:replacementState],
#line 114
  (FreemarkerCoreListLiteral *) check_class_cast([((FreemarkerCoreListLiteral *) nil_chk(arguments_)) deepCloneWithIdentifierReplacedWithNSString:replacedIdentifier withFreemarkerCoreExpression:replacement withFreemarkerCoreExpression_ReplacemenetState:replacementState], [FreemarkerCoreListLiteral class]));
}


#line 117
- (jint)getParameterCount {
  return 1 + [((JavaUtilArrayList *) nil_chk(((FreemarkerCoreListLiteral *) nil_chk(arguments_))->items_)) size];
}

- (id)getParameterValueWithInt:(jint)idx {
  if (idx == 0) {
    return target_;
  }
  else
#line 124
  if (idx < [self getParameterCount]) {
    return [((JavaUtilArrayList *) nil_chk(((FreemarkerCoreListLiteral *) nil_chk(arguments_))->items_)) getWithInt:idx - 1];
  }
  else {
    
#line 127
    @throw new_JavaLangIndexOutOfBoundsException_init();
  }
}


#line 131
- (FreemarkerCoreParameterRole *)getParameterRoleWithInt:(jint)idx {
  if (idx == 0) {
    return FreemarkerCoreParameterRole_get_CALLEE_();
  }
  else
#line 134
  if (idx < [self getParameterCount]) {
    return FreemarkerCoreParameterRole_get_ARGUMENT_VALUE_();
  }
  else {
    
#line 137
    @throw new_JavaLangIndexOutOfBoundsException_init();
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithFreemarkerCoreExpression:withJavaUtilArrayList:", "MethodCall", NULL, 0x0, NULL, NULL },
    { "initWithFreemarkerCoreExpression:withFreemarkerCoreListLiteral:", "MethodCall", NULL, 0x2, NULL, NULL },
    { "_evalWithFreemarkerCoreEnvironment:", "_eval", "Lfreemarker.template.TemplateModel;", 0x0, "Lfreemarker.template.TemplateException;", NULL },
    { "getCanonicalForm", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getNodeTypeSymbol", NULL, "Ljava.lang.String;", 0x0, NULL, NULL },
    { "getConstantValue", NULL, "Lfreemarker.template.TemplateModel;", 0x0, NULL, NULL },
    { "isLiteral", NULL, "Z", 0x0, NULL, NULL },
    { "deepCloneWithIdentifierReplaced_innerWithNSString:withFreemarkerCoreExpression:withFreemarkerCoreExpression_ReplacemenetState:", "deepCloneWithIdentifierReplaced_inner", "Lfreemarker.core.Expression;", 0x4, NULL, NULL },
    { "getParameterCount", NULL, "I", 0x0, NULL, NULL },
    { "getParameterValueWithInt:", "getParameterValue", "Ljava.lang.Object;", 0x0, NULL, NULL },
    { "getParameterRoleWithInt:", "getParameterRole", "Lfreemarker.core.ParameterRole;", 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "target_", NULL, 0x12, "Lfreemarker.core.Expression;", NULL, NULL,  },
    { "arguments_", NULL, 0x12, "Lfreemarker.core.ListLiteral;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerCoreMethodCall = { 2, "MethodCall", "freemarker.core", NULL, 0x10, 11, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerCoreMethodCall;
}

@end


#line 44
void FreemarkerCoreMethodCall_initWithFreemarkerCoreExpression_withJavaUtilArrayList_(FreemarkerCoreMethodCall *self, FreemarkerCoreExpression *target, JavaUtilArrayList *arguments) {
  (void) FreemarkerCoreMethodCall_initWithFreemarkerCoreExpression_withFreemarkerCoreListLiteral_(self, target, new_FreemarkerCoreListLiteral_initWithJavaUtilArrayList_(arguments));
}


#line 44
FreemarkerCoreMethodCall *new_FreemarkerCoreMethodCall_initWithFreemarkerCoreExpression_withJavaUtilArrayList_(FreemarkerCoreExpression *target, JavaUtilArrayList *arguments) {
  FreemarkerCoreMethodCall *self = [FreemarkerCoreMethodCall alloc];
  FreemarkerCoreMethodCall_initWithFreemarkerCoreExpression_withJavaUtilArrayList_(self, target, arguments);
  return self;
}


#line 48
void FreemarkerCoreMethodCall_initWithFreemarkerCoreExpression_withFreemarkerCoreListLiteral_(FreemarkerCoreMethodCall *self, FreemarkerCoreExpression *target, FreemarkerCoreListLiteral *arguments) {
  (void) FreemarkerCoreExpression_init(self);
  
#line 49
  self->target_ = target;
  self->arguments_ = arguments;
}


#line 48
FreemarkerCoreMethodCall *new_FreemarkerCoreMethodCall_initWithFreemarkerCoreExpression_withFreemarkerCoreListLiteral_(FreemarkerCoreExpression *target, FreemarkerCoreListLiteral *arguments) {
  FreemarkerCoreMethodCall *self = [FreemarkerCoreMethodCall alloc];
  FreemarkerCoreMethodCall_initWithFreemarkerCoreExpression_withFreemarkerCoreListLiteral_(self, target, arguments);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreMethodCall)
