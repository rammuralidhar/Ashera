//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/DollarVariable.java
//


#include "DollarVariable.h"
#include "Environment.h"
#include "Expression.h"
#include "IOSClass.h"
#include "Interpolation.h"
#include "J2ObjC_source.h"
#include "ParameterRole.h"
#include "StringUtil.h"
#include "TemplateException.h"
#include "java/io/IOException.h"
#include "java/io/Writer.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/StringBuffer.h"

#line 0 "/Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/DollarVariable.java"

@interface FreemarkerCoreDollarVariable () {
 @public
  FreemarkerCoreExpression *expression_;
  FreemarkerCoreExpression *escapedExpression_;
}

@end

J2OBJC_FIELD_SETTER(FreemarkerCoreDollarVariable, expression_, FreemarkerCoreExpression *)
J2OBJC_FIELD_SETTER(FreemarkerCoreDollarVariable, escapedExpression_, FreemarkerCoreExpression *)


#line 27
@implementation FreemarkerCoreDollarVariable


#line 32
- (instancetype)initWithFreemarkerCoreExpression:(FreemarkerCoreExpression *)expression
                    withFreemarkerCoreExpression:(FreemarkerCoreExpression *)escapedExpression {
  FreemarkerCoreDollarVariable_initWithFreemarkerCoreExpression_withFreemarkerCoreExpression_(self, expression, escapedExpression);
  return self;
}


#line 40
- (void)acceptWithFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env {
  [((JavaIoWriter *) nil_chk([((FreemarkerCoreEnvironment *) nil_chk(env)) getOut])) writeWithNSString:[((FreemarkerCoreExpression *) nil_chk(escapedExpression_)) evalAndCoerceToStringWithFreemarkerCoreEnvironment:env]];
}

- (NSString *)dumpWithBoolean:(jboolean)canonical
                  withBoolean:(jboolean)inStringLiteral {
  JavaLangStringBuffer *sb = new_JavaLangStringBuffer_init();
  (void) [sb appendWithNSString:@"${"];
  NSString *exprCF = [((FreemarkerCoreExpression *) nil_chk(expression_)) getCanonicalForm];
  (void) [sb appendWithNSString:inStringLiteral ? FreemarkerTemplateUtilityStringUtil_FTLStringLiteralEncWithNSString_withChar_(exprCF, '"') : exprCF];
  (void) [sb appendWithNSString:@"}"];
  if (!canonical && expression_ != escapedExpression_) {
    (void) [sb appendWithNSString:@" auto-escaped"];
  }
  return [sb description];
}


#line 56
- (NSString *)getNodeTypeSymbol {
  return @"${...}";
}

- (jboolean)heedsOpeningWhitespace {
  return YES;
}

- (jboolean)heedsTrailingWhitespace {
  return YES;
}

- (jint)getParameterCount {
  return 1;
}

- (id)getParameterValueWithInt:(jint)idx {
  if (idx != 0) @throw new_JavaLangIndexOutOfBoundsException_init();
  return expression_;
}

- (FreemarkerCoreParameterRole *)getParameterRoleWithInt:(jint)idx {
  if (idx != 0) @throw new_JavaLangIndexOutOfBoundsException_init();
  return FreemarkerCoreParameterRole_get_CONTENT_();
}

- (jboolean)isNestedBlockRepeater {
  return NO;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithFreemarkerCoreExpression:withFreemarkerCoreExpression:", "DollarVariable", NULL, 0x0, NULL, NULL },
    { "acceptWithFreemarkerCoreEnvironment:", "accept", "V", 0x0, "Lfreemarker.template.TemplateException;Ljava.io.IOException;", NULL },
    { "dumpWithBoolean:withBoolean:", "dump", "Ljava.lang.String;", 0x4, NULL, NULL },
    { "getNodeTypeSymbol", NULL, "Ljava.lang.String;", 0x0, NULL, NULL },
    { "heedsOpeningWhitespace", NULL, "Z", 0x0, NULL, NULL },
    { "heedsTrailingWhitespace", NULL, "Z", 0x0, NULL, NULL },
    { "getParameterCount", NULL, "I", 0x0, NULL, NULL },
    { "getParameterValueWithInt:", "getParameterValue", "Ljava.lang.Object;", 0x0, NULL, NULL },
    { "getParameterRoleWithInt:", "getParameterRole", "Lfreemarker.core.ParameterRole;", 0x0, NULL, NULL },
    { "isNestedBlockRepeater", NULL, "Z", 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "expression_", NULL, 0x12, "Lfreemarker.core.Expression;", NULL, NULL,  },
    { "escapedExpression_", NULL, 0x12, "Lfreemarker.core.Expression;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerCoreDollarVariable = { 2, "DollarVariable", "freemarker.core", NULL, 0x10, 10, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerCoreDollarVariable;
}

@end


#line 32
void FreemarkerCoreDollarVariable_initWithFreemarkerCoreExpression_withFreemarkerCoreExpression_(FreemarkerCoreDollarVariable *self, FreemarkerCoreExpression *expression, FreemarkerCoreExpression *escapedExpression) {
  (void) FreemarkerCoreInterpolation_init(self);
  
#line 33
  self->expression_ = expression;
  self->escapedExpression_ = escapedExpression;
}


#line 32
FreemarkerCoreDollarVariable *new_FreemarkerCoreDollarVariable_initWithFreemarkerCoreExpression_withFreemarkerCoreExpression_(FreemarkerCoreExpression *expression, FreemarkerCoreExpression *escapedExpression) {
  FreemarkerCoreDollarVariable *self = [FreemarkerCoreDollarVariable alloc];
  FreemarkerCoreDollarVariable_initWithFreemarkerCoreExpression_withFreemarkerCoreExpression_(self, expression, escapedExpression);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreDollarVariable)
