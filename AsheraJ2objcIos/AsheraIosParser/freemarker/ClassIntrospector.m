//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/ext/beans/ClassIntrospector.java
//


#include "BeansWrapper.h"
#include "BugException.h"
#include "ClassBasedModelFactory.h"
#include "ClassChangeNotifier.h"
#include "ClassIntrospector.h"
#include "ClassIntrospectorBuilder.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "Logger.h"
#include "MethodAppearanceFineTuner.h"
#include "MethodSorter.h"
#include "ModelCache.h"
#include "NullArgumentException.h"
#include "OverloadedMethods.h"
#include "SecurityUtilities.h"
#include "SimpleMethod.h"
#include "UnsafeMethods.h"
#include "_ConcurrentMapFactory.h"
#include "java/lang/ClassNotFoundException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/SecurityException.h"
#include "java/lang/Throwable.h"
#include "java/lang/ref/Reference.h"
#include "java/lang/ref/ReferenceQueue.h"
#include "java/lang/ref/WeakReference.h"
#include "java/lang/reflect/AccessibleObject.h"
#include "java/lang/reflect/Constructor.h"
#include "java/lang/reflect/Field.h"
#include "java/lang/reflect/Method.h"
#include "java/lang/reflect/Modifier.h"
#include "java/util/Arrays.h"
#include "java/util/Collections.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/LinkedList.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"

@class FreemarkerExtBeansClassIntrospector_MethodSignature;

#line 0 "/Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/ext/beans/ClassIntrospector.java"

@interface FreemarkerExtBeansClassIntrospector () {
 @public
  /**
   @brief See #getHasSharedInstanceRestrictons()
   */
  jboolean hasSharedInstanceRestrictons_;
  /**
   @brief See #isShared()
   */
  jboolean shared_;
  id sharedLock_;
  id<JavaUtilMap> cache_;
  jboolean isCacheConcurrentMap_;
  id<JavaUtilSet> cacheClassNames_;
  id<JavaUtilSet> classIntrospectionsInProgress_;
  id<JavaUtilList> modelFactories_;
  JavaLangRefReferenceQueue *modelFactoriesRefQueue_;
  jint clearingCounter_;
}

/**
 @brief Creates a Map with the content as described for the return value of #get(Class) .
 */
- (id<JavaUtilMap>)createClassIntrospectionDataWithIOSClass:(IOSClass *)clazz;

- (void)addFieldsToClassIntrospectionDataWithJavaUtilMap:(id<JavaUtilMap>)introspData
                                            withIOSClass:(IOSClass *)clazz;

- (void)addGenericGetToClassIntrospectionDataWithJavaUtilMap:(id<JavaUtilMap>)introspData
                                             withJavaUtilMap:(id<JavaUtilMap>)accessibleMethods;

- (void)addConstructorsToClassIntrospectionDataWithJavaUtilMap:(id<JavaUtilMap>)introspData
                                                  withIOSClass:(IOSClass *)clazz;

/**
 @brief Retrieves mapping of MethodSignature -s to a List of accessible methods for a class.
 In case the class is not public, retrieves methods with same signature as its public methods from public superclasses and interfaces. Basically upcasts every method to the nearest accessible method.
 */
+ (id<JavaUtilMap>)discoverAccessibleMethodsWithIOSClass:(IOSClass *)clazz;

+ (void)discoverAccessibleMethodsWithIOSClass:(IOSClass *)clazz
                              withJavaUtilMap:(id<JavaUtilMap>)accessibles;

+ (JavaLangReflectMethod *)getMatchingAccessibleMethodWithJavaLangReflectMethod:(JavaLangReflectMethod *)m
                                                                withJavaUtilMap:(id<JavaUtilMap>)accessibles;

+ (JavaLangReflectMethod *)getFirstAccessibleMethodWithFreemarkerExtBeansClassIntrospector_MethodSignature:(FreemarkerExtBeansClassIntrospector_MethodSignature *)sig
                                                                                           withJavaUtilMap:(id<JavaUtilMap>)accessibles;

+ (id<JavaUtilMap>)getArgTypesWithJavaUtilMap:(id<JavaUtilMap>)classMap;

- (void)forcedClearCache;

- (void)onSameNameClassesDetectedWithNSString:(NSString *)className_;

- (void)registerModelFactoryWithId:(id)mf;

- (void)removeClearedModelFactoryReferences;

@end

J2OBJC_FIELD_SETTER(FreemarkerExtBeansClassIntrospector, sharedLock_, id)
J2OBJC_FIELD_SETTER(FreemarkerExtBeansClassIntrospector, cache_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(FreemarkerExtBeansClassIntrospector, cacheClassNames_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(FreemarkerExtBeansClassIntrospector, classIntrospectionsInProgress_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(FreemarkerExtBeansClassIntrospector, modelFactories_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(FreemarkerExtBeansClassIntrospector, modelFactoriesRefQueue_, JavaLangRefReferenceQueue *)

static FreemarkerLogLogger *FreemarkerExtBeansClassIntrospector_LOG_;
J2OBJC_STATIC_FIELD_GETTER(FreemarkerExtBeansClassIntrospector, LOG_, FreemarkerLogLogger *)

static NSString *FreemarkerExtBeansClassIntrospector_JREBEL_SDK_CLASS_NAME_ = 
#line 60
@"org.zeroturnaround.javarebel.ClassEventListener";
J2OBJC_STATIC_FIELD_GETTER(FreemarkerExtBeansClassIntrospector, JREBEL_SDK_CLASS_NAME_, NSString *)

static NSString *FreemarkerExtBeansClassIntrospector_JREBEL_INTEGRATION_ERROR_MSG_ = 
#line 62
@"Error initializing JRebel integration. JRebel integration disabled.";
J2OBJC_STATIC_FIELD_GETTER(FreemarkerExtBeansClassIntrospector, JREBEL_INTEGRATION_ERROR_MSG_, NSString *)

static id<FreemarkerExtBeansClassChangeNotifier> FreemarkerExtBeansClassIntrospector_CLASS_CHANGE_NOTIFIER_;
J2OBJC_STATIC_FIELD_GETTER(FreemarkerExtBeansClassIntrospector, CLASS_CHANGE_NOTIFIER_, id<FreemarkerExtBeansClassChangeNotifier>)

static id FreemarkerExtBeansClassIntrospector_ARGTYPES_KEY_;
J2OBJC_STATIC_FIELD_GETTER(FreemarkerExtBeansClassIntrospector, ARGTYPES_KEY_, id)

__attribute__((unused)) static id<JavaUtilMap> FreemarkerExtBeansClassIntrospector_createClassIntrospectionDataWithIOSClass_(FreemarkerExtBeansClassIntrospector *self, IOSClass *clazz);

__attribute__((unused)) static void FreemarkerExtBeansClassIntrospector_addFieldsToClassIntrospectionDataWithJavaUtilMap_withIOSClass_(FreemarkerExtBeansClassIntrospector *self, id<JavaUtilMap> introspData, IOSClass *clazz);

__attribute__((unused)) static void FreemarkerExtBeansClassIntrospector_addGenericGetToClassIntrospectionDataWithJavaUtilMap_withJavaUtilMap_(FreemarkerExtBeansClassIntrospector *self, id<JavaUtilMap> introspData, id<JavaUtilMap> accessibleMethods);

__attribute__((unused)) static void FreemarkerExtBeansClassIntrospector_addConstructorsToClassIntrospectionDataWithJavaUtilMap_withIOSClass_(FreemarkerExtBeansClassIntrospector *self, id<JavaUtilMap> introspData, IOSClass *clazz);

__attribute__((unused)) static id<JavaUtilMap> FreemarkerExtBeansClassIntrospector_discoverAccessibleMethodsWithIOSClass_(IOSClass *clazz);

__attribute__((unused)) static void FreemarkerExtBeansClassIntrospector_discoverAccessibleMethodsWithIOSClass_withJavaUtilMap_(IOSClass *clazz, id<JavaUtilMap> accessibles);

__attribute__((unused)) static JavaLangReflectMethod *FreemarkerExtBeansClassIntrospector_getMatchingAccessibleMethodWithJavaLangReflectMethod_withJavaUtilMap_(JavaLangReflectMethod *m, id<JavaUtilMap> accessibles);

__attribute__((unused)) static JavaLangReflectMethod *FreemarkerExtBeansClassIntrospector_getFirstAccessibleMethodWithFreemarkerExtBeansClassIntrospector_MethodSignature_withJavaUtilMap_(FreemarkerExtBeansClassIntrospector_MethodSignature *sig, id<JavaUtilMap> accessibles);

__attribute__((unused)) static id<JavaUtilMap> FreemarkerExtBeansClassIntrospector_getArgTypesWithJavaUtilMap_(id<JavaUtilMap> classMap);

__attribute__((unused)) static void FreemarkerExtBeansClassIntrospector_forcedClearCache(FreemarkerExtBeansClassIntrospector *self);

__attribute__((unused)) static void FreemarkerExtBeansClassIntrospector_onSameNameClassesDetectedWithNSString_(FreemarkerExtBeansClassIntrospector *self, NSString *className_);

__attribute__((unused)) static void FreemarkerExtBeansClassIntrospector_registerModelFactoryWithId_(FreemarkerExtBeansClassIntrospector *self, id mf);

__attribute__((unused)) static void FreemarkerExtBeansClassIntrospector_removeClearedModelFactoryReferences(FreemarkerExtBeansClassIntrospector *self);

@interface FreemarkerExtBeansClassIntrospector_MethodSignature : NSObject {
 @public
  NSString *name_;
  IOSObjectArray *args_;
}

- (instancetype)initWithNSString:(NSString *)name
               withIOSClassArray:(IOSObjectArray *)args;

- (instancetype)initWithJavaLangReflectMethod:(JavaLangReflectMethod *)method;

- (jboolean)isEqual:(id)o;

- (NSUInteger)hash;

@end

J2OBJC_STATIC_INIT(FreemarkerExtBeansClassIntrospector_MethodSignature)

J2OBJC_FIELD_SETTER(FreemarkerExtBeansClassIntrospector_MethodSignature, name_, NSString *)
J2OBJC_FIELD_SETTER(FreemarkerExtBeansClassIntrospector_MethodSignature, args_, IOSObjectArray *)

static FreemarkerExtBeansClassIntrospector_MethodSignature *FreemarkerExtBeansClassIntrospector_MethodSignature_GET_STRING_SIGNATURE_;
J2OBJC_STATIC_FIELD_GETTER(FreemarkerExtBeansClassIntrospector_MethodSignature, GET_STRING_SIGNATURE_, FreemarkerExtBeansClassIntrospector_MethodSignature *)

static FreemarkerExtBeansClassIntrospector_MethodSignature *FreemarkerExtBeansClassIntrospector_MethodSignature_GET_OBJECT_SIGNATURE_;
J2OBJC_STATIC_FIELD_GETTER(FreemarkerExtBeansClassIntrospector_MethodSignature, GET_OBJECT_SIGNATURE_, FreemarkerExtBeansClassIntrospector_MethodSignature *)

__attribute__((unused)) static void FreemarkerExtBeansClassIntrospector_MethodSignature_initWithNSString_withIOSClassArray_(FreemarkerExtBeansClassIntrospector_MethodSignature *self, NSString *name, IOSObjectArray *args);

__attribute__((unused)) static FreemarkerExtBeansClassIntrospector_MethodSignature *new_FreemarkerExtBeansClassIntrospector_MethodSignature_initWithNSString_withIOSClassArray_(NSString *name, IOSObjectArray *args) NS_RETURNS_RETAINED;

__attribute__((unused)) static void FreemarkerExtBeansClassIntrospector_MethodSignature_initWithJavaLangReflectMethod_(FreemarkerExtBeansClassIntrospector_MethodSignature *self, JavaLangReflectMethod *method);

__attribute__((unused)) static FreemarkerExtBeansClassIntrospector_MethodSignature *new_FreemarkerExtBeansClassIntrospector_MethodSignature_initWithJavaLangReflectMethod_(JavaLangReflectMethod *method) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerExtBeansClassIntrospector_MethodSignature)

J2OBJC_INITIALIZED_DEFN(FreemarkerExtBeansClassIntrospector)

jboolean FreemarkerExtBeansClassIntrospector_DEVELOPMENT_MODE_;
id FreemarkerExtBeansClassIntrospector_CONSTRUCTORS_KEY_;
id FreemarkerExtBeansClassIntrospector_GENERIC_GET_KEY_;


#line 52
@implementation FreemarkerExtBeansClassIntrospector


#line 156
- (instancetype)initWithFreemarkerExtBeansClassIntrospectorBuilder:(FreemarkerExtBeansClassIntrospectorBuilder *)pa
                                                            withId:(id)sharedLock {
  FreemarkerExtBeansClassIntrospector_initWithFreemarkerExtBeansClassIntrospectorBuilder_withId_(self, pa, sharedLock);
  return self;
}


#line 165
- (instancetype)initWithFreemarkerExtBeansClassIntrospectorBuilder:(FreemarkerExtBeansClassIntrospectorBuilder *)builder
                                                            withId:(id)sharedLock
                                                       withBoolean:(jboolean)hasSharedInstanceRestrictons
                                                       withBoolean:(jboolean)shared {
  FreemarkerExtBeansClassIntrospector_initWithFreemarkerExtBeansClassIntrospectorBuilder_withId_withBoolean_withBoolean_(self, builder, sharedLock, hasSharedInstanceRestrictons, shared);
  return self;
}


#line 189
- (FreemarkerExtBeansClassIntrospectorBuilder *)getPropertyAssignments {
  return new_FreemarkerExtBeansClassIntrospectorBuilder_initWithFreemarkerExtBeansClassIntrospector_(self);
}


#line 203
- (id<JavaUtilMap>)getWithIOSClass:(IOSClass *)clazz {
  if (isCacheConcurrentMap_) {
    id<JavaUtilMap> introspData = (id<JavaUtilMap>) check_protocol_cast([((id<JavaUtilMap>) nil_chk(cache_)) getWithId:clazz], @protocol(JavaUtilMap));
    if (introspData != nil) return introspData;
  }
  
#line 209
  NSString *className_;
  @synchronized(sharedLock_) {
    id<JavaUtilMap> introspData = (id<JavaUtilMap>) check_protocol_cast([((id<JavaUtilMap>) nil_chk(cache_)) getWithId:clazz], @protocol(JavaUtilMap));
    if (introspData != nil) return introspData;
    
#line 214
    className_ = [((IOSClass *) nil_chk(clazz)) getName];
    if ([((id<JavaUtilSet>) nil_chk(cacheClassNames_)) containsWithId:className_]) {
      FreemarkerExtBeansClassIntrospector_onSameNameClassesDetectedWithNSString_(self, className_);
    }
    
#line 219
    while (introspData == nil && [((id<JavaUtilSet>) nil_chk(classIntrospectionsInProgress_)) containsWithId:clazz]) {
      
#line 222
      @try {
        [nil_chk(sharedLock_) wait];
        introspData = (id<JavaUtilMap>) check_protocol_cast([cache_ getWithId:clazz], @protocol(JavaUtilMap));
      }
      @catch (
#line 225
      JavaLangInterruptedException *e) {
        @throw new_JavaLangRuntimeException_initWithNSString_(JreStrcat("$@", @"Class inrospection data lookup aborded: ",
#line 227
        e));
      }
    }
    if (introspData != nil) return introspData;
    
#line 233
    [((id<JavaUtilSet>) nil_chk(classIntrospectionsInProgress_)) addWithId:clazz];
  }
  @try {
    id<JavaUtilMap> introspData = FreemarkerExtBeansClassIntrospector_createClassIntrospectionDataWithIOSClass_(self, clazz);
    @synchronized(sharedLock_) {
      (void) [cache_ putWithId:clazz withId:introspData];
      [cacheClassNames_ addWithId:className_];
    }
    return introspData;
  }
  @finally {
    
#line 243
    @synchronized(sharedLock_) {
      [classIntrospectionsInProgress_ removeWithId:clazz];
      [nil_chk(sharedLock_) notifyAll];
    }
  }
}


#line 253
- (id<JavaUtilMap>)createClassIntrospectionDataWithIOSClass:(IOSClass *)clazz {
  return FreemarkerExtBeansClassIntrospector_createClassIntrospectionDataWithIOSClass_(self, clazz);
}


#line 285
- (void)addFieldsToClassIntrospectionDataWithJavaUtilMap:(id<JavaUtilMap>)introspData
                                            withIOSClass:(IOSClass *)clazz {
  FreemarkerExtBeansClassIntrospector_addFieldsToClassIntrospectionDataWithJavaUtilMap_withIOSClass_(self, introspData, clazz);
}


#line 410
- (void)addGenericGetToClassIntrospectionDataWithJavaUtilMap:(id<JavaUtilMap>)introspData
                                             withJavaUtilMap:(id<JavaUtilMap>)accessibleMethods {
  FreemarkerExtBeansClassIntrospector_addGenericGetToClassIntrospectionDataWithJavaUtilMap_withJavaUtilMap_(self, introspData, accessibleMethods);
}


#line 423
- (void)addConstructorsToClassIntrospectionDataWithJavaUtilMap:(id<JavaUtilMap>)introspData
                                                  withIOSClass:(IOSClass *)clazz {
  FreemarkerExtBeansClassIntrospector_addConstructorsToClassIntrospectionDataWithJavaUtilMap_withIOSClass_(self, introspData, clazz);
}


#line 447
+ (id<JavaUtilMap>)discoverAccessibleMethodsWithIOSClass:(IOSClass *)clazz {
  return FreemarkerExtBeansClassIntrospector_discoverAccessibleMethodsWithIOSClass_(clazz);
}


#line 453
+ (void)discoverAccessibleMethodsWithIOSClass:(IOSClass *)clazz
                              withJavaUtilMap:(id<JavaUtilMap>)accessibles {
  FreemarkerExtBeansClassIntrospector_discoverAccessibleMethodsWithIOSClass_withJavaUtilMap_(clazz, accessibles);
}


#line 497
+ (JavaLangReflectMethod *)getMatchingAccessibleMethodWithJavaLangReflectMethod:(JavaLangReflectMethod *)m
                                                                withJavaUtilMap:(id<JavaUtilMap>)accessibles {
  return FreemarkerExtBeansClassIntrospector_getMatchingAccessibleMethodWithJavaLangReflectMethod_withJavaUtilMap_(m, accessibles);
}


#line 515
+ (JavaLangReflectMethod *)getFirstAccessibleMethodWithFreemarkerExtBeansClassIntrospector_MethodSignature:(FreemarkerExtBeansClassIntrospector_MethodSignature *)sig
                                                                                           withJavaUtilMap:(id<JavaUtilMap>)accessibles {
  return FreemarkerExtBeansClassIntrospector_getFirstAccessibleMethodWithFreemarkerExtBeansClassIntrospector_MethodSignature_withJavaUtilMap_(sig, accessibles);
}


#line 530
- (jboolean)isAllowedToExposeWithJavaLangReflectMethod:(JavaLangReflectMethod *)method {
  return exposureLevel_ < FreemarkerExtBeansBeansWrapper_EXPOSE_SAFE || !FreemarkerExtBeansUnsafeMethods_isUnsafeMethodWithJavaLangReflectMethod_(method);
}

+ (id<JavaUtilMap>)getArgTypesWithJavaUtilMap:(id<JavaUtilMap>)classMap {
  return FreemarkerExtBeansClassIntrospector_getArgTypesWithJavaUtilMap_(classMap);
}


#line 582
- (void)clearCache {
  if ([self getHasSharedInstanceRestrictons]) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$$$", @"It's not allowed to clear the whole cache in a read-only ",
#line 585
    [[self getClass] getName], @"instance. Use removeFromClassIntrospectionCache(String prefix) instead."));
  }
  
#line 588
  FreemarkerExtBeansClassIntrospector_forcedClearCache(self);
}


#line 591
- (void)forcedClearCache {
  FreemarkerExtBeansClassIntrospector_forcedClearCache(self);
}


#line 619
- (void)removeWithIOSClass:(IOSClass *)clazz {
  @synchronized(sharedLock_) {
    (void) [((id<JavaUtilMap>) nil_chk(cache_)) removeWithId:clazz];
    [((id<JavaUtilSet>) nil_chk(cacheClassNames_)) removeWithId:[((IOSClass *) nil_chk(clazz)) getName]];
    clearingCounter_++;
    
#line 625
    for (id<JavaUtilIterator> it = [((id<JavaUtilList>) nil_chk(modelFactories_)) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
      id regedMf = [((JavaLangRefWeakReference *) nil_chk(((JavaLangRefWeakReference *) check_class_cast([it next], [JavaLangRefWeakReference class])))) get];
      if (regedMf != nil) {
        if ([regedMf isKindOfClass:[FreemarkerExtBeansClassBasedModelFactory class]]) {
          [((FreemarkerExtBeansClassBasedModelFactory *) check_class_cast(regedMf, [FreemarkerExtBeansClassBasedModelFactory class])) removeFromCacheWithIOSClass:clazz];
        }
        else
#line 630
        if ([regedMf isKindOfClass:[FreemarkerExtUtilModelCache class]]) {
          [((FreemarkerExtUtilModelCache *) check_class_cast(regedMf, [FreemarkerExtUtilModelCache class])) clearCache];
        }
        else {
          
#line 633
          @throw new_FreemarkerCoreBugException_init();
        }
      }
    }
    
#line 638
    FreemarkerExtBeansClassIntrospector_removeClearedModelFactoryReferences(self);
  }
}


#line 645
- (jint)getClearingCounter {
  @synchronized(sharedLock_) {
    return clearingCounter_;
  }
}

- (void)onSameNameClassesDetectedWithNSString:(NSString *)className_ {
  FreemarkerExtBeansClassIntrospector_onSameNameClassesDetectedWithNSString_(self, className_);
}


#line 668
- (void)registerModelFactoryWithFreemarkerExtBeansClassBasedModelFactory:(FreemarkerExtBeansClassBasedModelFactory *)mf {
  FreemarkerExtBeansClassIntrospector_registerModelFactoryWithId_(self, mf);
}

- (void)registerModelFactoryWithFreemarkerExtUtilModelCache:(FreemarkerExtUtilModelCache *)mf {
  FreemarkerExtBeansClassIntrospector_registerModelFactoryWithId_(self, mf);
}

- (void)registerModelFactoryWithId:(id)mf {
  FreemarkerExtBeansClassIntrospector_registerModelFactoryWithId_(self, mf);
}


#line 684
- (void)unregisterModelFactoryWithFreemarkerExtBeansClassBasedModelFactory:(FreemarkerExtBeansClassBasedModelFactory *)mf {
  [self unregisterModelFactoryWithId:mf];
}

- (void)unregisterModelFactoryWithFreemarkerExtUtilModelCache:(FreemarkerExtUtilModelCache *)mf {
  [self unregisterModelFactoryWithId:mf];
}

- (void)unregisterModelFactoryWithId:(id)mf {
  @synchronized(sharedLock_) {
    for (id<JavaUtilIterator> it = [((id<JavaUtilList>) nil_chk(modelFactories_)) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
      id regedMf = [((JavaLangRefReference *) nil_chk(((JavaLangRefReference *) check_class_cast([it next], [JavaLangRefReference class])))) get];
      if (regedMf == mf) {
        [it remove];
      }
    }
  }
}


#line 704
- (void)removeClearedModelFactoryReferences {
  FreemarkerExtBeansClassIntrospector_removeClearedModelFactoryReferences(self);
}


#line 721
+ (IOSObjectArray *)getArgTypesWithJavaUtilMap:(id<JavaUtilMap>)classMap
           withJavaLangReflectAccessibleObject:(JavaLangReflectAccessibleObject *)methodOrCtor {
  return FreemarkerExtBeansClassIntrospector_getArgTypesWithJavaUtilMap_withJavaLangReflectAccessibleObject_(classMap, methodOrCtor);
}


#line 729
- (jint)keyCountWithIOSClass:(IOSClass *)clazz {
  id<JavaUtilMap> map = [self getWithIOSClass:clazz];
  jint count = [((id<JavaUtilMap>) nil_chk(map)) size];
  if ([map containsKeyWithId:FreemarkerExtBeansClassIntrospector_CONSTRUCTORS_KEY_]) count--;
  if ([map containsKeyWithId:FreemarkerExtBeansClassIntrospector_GENERIC_GET_KEY_]) count--;
  if ([map containsKeyWithId:FreemarkerExtBeansClassIntrospector_ARGTYPES_KEY_]) count--;
  return count;
}


#line 742
- (id<JavaUtilSet>)keySetWithIOSClass:(IOSClass *)clazz {
  id<JavaUtilSet> set = new_JavaUtilHashSet_initWithJavaUtilCollection_([((id<JavaUtilMap>) nil_chk([self getWithIOSClass:clazz])) keySet]);
  [set removeWithId:FreemarkerExtBeansClassIntrospector_CONSTRUCTORS_KEY_];
  [set removeWithId:FreemarkerExtBeansClassIntrospector_GENERIC_GET_KEY_];
  [set removeWithId:FreemarkerExtBeansClassIntrospector_ARGTYPES_KEY_];
  return set;
}


#line 753
- (jint)getExposureLevel {
  return exposureLevel_;
}

- (jboolean)getExposeFields {
  return exposeFields_;
}

- (id<FreemarkerExtBeansMethodAppearanceFineTuner>)getMethodAppearanceFineTuner {
  return methodAppearanceFineTuner_;
}

- (id<FreemarkerExtBeansMethodSorter>)getMethodSorter {
  return methodSorter_;
}


#line 773
- (jboolean)getHasSharedInstanceRestrictons {
  return hasSharedInstanceRestrictons_;
}


#line 782
- (jboolean)isShared {
  return shared_;
}


#line 790
- (id)getSharedLock {
  return sharedLock_;
}


#line 798
- (IOSObjectArray *)getRegisteredModelFactoriesSnapshot {
  @synchronized(sharedLock_) {
    return [((id<JavaUtilList>) nil_chk(modelFactories_)) toArray];
  }
}

+ (void)initialize {
  if (self == [FreemarkerExtBeansClassIntrospector class]) {
    FreemarkerExtBeansClassIntrospector_LOG_ = FreemarkerLogLogger_getLoggerWithNSString_(
#line 58
    @"freemarker.beans");
    FreemarkerExtBeansClassIntrospector_DEVELOPMENT_MODE_ =
#line 68
    [@"true" isEqual:FreemarkerTemplateUtilitySecurityUtilities_getSystemPropertyWithNSString_withNSString_(@"freemarker.development",
#line 69
    @"false")];
    {
      
#line 73
      jboolean jRebelAvailable;
      @try {
        (void) IOSClass_forName_(FreemarkerExtBeansClassIntrospector_JREBEL_SDK_CLASS_NAME_);
        jRebelAvailable = YES;
      }
      @catch (
#line 77
      JavaLangThrowable *e) {
        jRebelAvailable = NO;
        @try {
          if (!([e isKindOfClass:[JavaLangClassNotFoundException class]])) {
            [((FreemarkerLogLogger *) nil_chk(FreemarkerExtBeansClassIntrospector_LOG_)) errorWithNSString:FreemarkerExtBeansClassIntrospector_JREBEL_INTEGRATION_ERROR_MSG_ withJavaLangThrowable:e];
          }
        }
        @catch (
#line 83
        JavaLangThrowable *loggingE) {
        }
      }
      
#line 88
      id<FreemarkerExtBeansClassChangeNotifier> classChangeNotifier;
      if (jRebelAvailable) {
        @try {
          classChangeNotifier = (id<FreemarkerExtBeansClassChangeNotifier>) check_protocol_cast(
#line 92
          [((IOSClass *) nil_chk(IOSClass_forName_(@"freemarker.ext.beans.JRebelClassChangeNotifier"))) newInstance], @protocol(FreemarkerExtBeansClassChangeNotifier));
        }
        @catch (
#line 93
        JavaLangThrowable *e) {
          classChangeNotifier = nil;
          @try {
            [((FreemarkerLogLogger *) nil_chk(FreemarkerExtBeansClassIntrospector_LOG_)) errorWithNSString:FreemarkerExtBeansClassIntrospector_JREBEL_INTEGRATION_ERROR_MSG_ withJavaLangThrowable:e];
          }
          @catch (
#line 97
          JavaLangThrowable *loggingE) {
          }
        }
      }
      else {
        classChangeNotifier = nil;
      }
      
#line 105
      FreemarkerExtBeansClassIntrospector_CLASS_CHANGE_NOTIFIER_ = classChangeNotifier;
    }
    FreemarkerExtBeansClassIntrospector_ARGTYPES_KEY_ = new_NSObject_init();
    FreemarkerExtBeansClassIntrospector_CONSTRUCTORS_KEY_ = new_NSObject_init();
    FreemarkerExtBeansClassIntrospector_GENERIC_GET_KEY_ = new_NSObject_init();
    J2OBJC_SET_INITIALIZED(FreemarkerExtBeansClassIntrospector)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithFreemarkerExtBeansClassIntrospectorBuilder:withId:", "ClassIntrospector", NULL, 0x0, NULL, NULL },
    { "initWithFreemarkerExtBeansClassIntrospectorBuilder:withId:withBoolean:withBoolean:", "ClassIntrospector", NULL, 0x0, NULL, NULL },
    { "getPropertyAssignments", NULL, "Lfreemarker.ext.beans.ClassIntrospectorBuilder;", 0x0, NULL, NULL },
    { "getWithIOSClass:", "get", "Ljava.util.Map;", 0x0, NULL, NULL },
    { "createClassIntrospectionDataWithIOSClass:", "createClassIntrospectionData", "Ljava.util.Map;", 0x2, NULL, NULL },
    { "addFieldsToClassIntrospectionDataWithJavaUtilMap:withIOSClass:", "addFieldsToClassIntrospectionData", "V", 0x2, "Ljava.lang.SecurityException;", NULL },
    { "addGenericGetToClassIntrospectionDataWithJavaUtilMap:withJavaUtilMap:", "addGenericGetToClassIntrospectionData", "V", 0x2, NULL, NULL },
    { "addConstructorsToClassIntrospectionDataWithJavaUtilMap:withIOSClass:", "addConstructorsToClassIntrospectionData", "V", 0x2, NULL, NULL },
    { "discoverAccessibleMethodsWithIOSClass:", "discoverAccessibleMethods", "Ljava.util.Map;", 0xa, NULL, NULL },
    { "discoverAccessibleMethodsWithIOSClass:withJavaUtilMap:", "discoverAccessibleMethods", "V", 0xa, NULL, NULL },
    { "getMatchingAccessibleMethodWithJavaLangReflectMethod:withJavaUtilMap:", "getMatchingAccessibleMethod", "Ljava.lang.reflect.Method;", 0xa, NULL, NULL },
    { "getFirstAccessibleMethodWithFreemarkerExtBeansClassIntrospector_MethodSignature:withJavaUtilMap:", "getFirstAccessibleMethod", "Ljava.lang.reflect.Method;", 0xa, NULL, NULL },
    { "isAllowedToExposeWithJavaLangReflectMethod:", "isAllowedToExpose", "Z", 0x0, NULL, NULL },
    { "getArgTypesWithJavaUtilMap:", "getArgTypes", "Ljava.util.Map;", 0xa, NULL, NULL },
    { "clearCache", NULL, "V", 0x0, NULL, NULL },
    { "forcedClearCache", NULL, "V", 0x2, NULL, NULL },
    { "removeWithIOSClass:", "remove", "V", 0x0, NULL, NULL },
    { "getClearingCounter", NULL, "I", 0x0, NULL, NULL },
    { "onSameNameClassesDetectedWithNSString:", "onSameNameClassesDetected", "V", 0x2, NULL, NULL },
    { "registerModelFactoryWithFreemarkerExtBeansClassBasedModelFactory:", "registerModelFactory", "V", 0x0, NULL, NULL },
    { "registerModelFactoryWithFreemarkerExtUtilModelCache:", "registerModelFactory", "V", 0x0, NULL, NULL },
    { "registerModelFactoryWithId:", "registerModelFactory", "V", 0x2, NULL, NULL },
    { "unregisterModelFactoryWithFreemarkerExtBeansClassBasedModelFactory:", "unregisterModelFactory", "V", 0x0, NULL, NULL },
    { "unregisterModelFactoryWithFreemarkerExtUtilModelCache:", "unregisterModelFactory", "V", 0x0, NULL, NULL },
    { "unregisterModelFactoryWithId:", "unregisterModelFactory", "V", 0x0, NULL, NULL },
    { "removeClearedModelFactoryReferences", NULL, "V", 0x2, NULL, NULL },
    { "getArgTypesWithJavaUtilMap:withJavaLangReflectAccessibleObject:", "getArgTypes", "[Ljava.lang.Class;", 0x8, NULL, NULL },
    { "keyCountWithIOSClass:", "keyCount", "I", 0x0, NULL, NULL },
    { "keySetWithIOSClass:", "keySet", "Ljava.util.Set;", 0x0, NULL, NULL },
    { "getExposureLevel", NULL, "I", 0x0, NULL, NULL },
    { "getExposeFields", NULL, "Z", 0x0, NULL, NULL },
    { "getMethodAppearanceFineTuner", NULL, "Lfreemarker.ext.beans.MethodAppearanceFineTuner;", 0x0, NULL, NULL },
    { "getMethodSorter", NULL, "Lfreemarker.ext.beans.MethodSorter;", 0x0, NULL, NULL },
    { "getHasSharedInstanceRestrictons", NULL, "Z", 0x0, NULL, NULL },
    { "isShared", NULL, "Z", 0x0, NULL, NULL },
    { "getSharedLock", NULL, "Ljava.lang.Object;", 0x0, NULL, NULL },
    { "getRegisteredModelFactoriesSnapshot", NULL, "[Ljava.lang.Object;", 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "LOG_", NULL, 0x1a, "Lfreemarker.log.Logger;", &FreemarkerExtBeansClassIntrospector_LOG_, NULL,  },
    { "JREBEL_SDK_CLASS_NAME_", NULL, 0x1a, "Ljava.lang.String;", &FreemarkerExtBeansClassIntrospector_JREBEL_SDK_CLASS_NAME_, NULL,  },
    { "JREBEL_INTEGRATION_ERROR_MSG_", NULL, 0x1a, "Ljava.lang.String;", &FreemarkerExtBeansClassIntrospector_JREBEL_INTEGRATION_ERROR_MSG_, NULL,  },
    { "DEVELOPMENT_MODE_", NULL, 0x18, "Z", &FreemarkerExtBeansClassIntrospector_DEVELOPMENT_MODE_, NULL,  },
    { "CLASS_CHANGE_NOTIFIER_", NULL, 0x1a, "Lfreemarker.ext.beans.ClassChangeNotifier;", &FreemarkerExtBeansClassIntrospector_CLASS_CHANGE_NOTIFIER_, NULL,  },
    { "ARGTYPES_KEY_", NULL, 0x1a, "Ljava.lang.Object;", &FreemarkerExtBeansClassIntrospector_ARGTYPES_KEY_, NULL,  },
    { "CONSTRUCTORS_KEY_", NULL, 0x18, "Ljava.lang.Object;", &FreemarkerExtBeansClassIntrospector_CONSTRUCTORS_KEY_, NULL,  },
    { "GENERIC_GET_KEY_", NULL, 0x18, "Ljava.lang.Object;", &FreemarkerExtBeansClassIntrospector_GENERIC_GET_KEY_, NULL,  },
    { "exposureLevel_", NULL, 0x10, "I", NULL, NULL,  },
    { "exposeFields_", NULL, 0x10, "Z", NULL, NULL,  },
    { "methodAppearanceFineTuner_", NULL, 0x10, "Lfreemarker.ext.beans.MethodAppearanceFineTuner;", NULL, NULL,  },
    { "methodSorter_", NULL, 0x10, "Lfreemarker.ext.beans.MethodSorter;", NULL, NULL,  },
    { "bugfixed_", NULL, 0x10, "Z", NULL, NULL,  },
    { "hasSharedInstanceRestrictons_", NULL, 0x12, "Z", NULL, NULL,  },
    { "shared_", NULL, 0x12, "Z", NULL, NULL,  },
    { "sharedLock_", NULL, 0x12, "Ljava.lang.Object;", NULL, NULL,  },
    { "cache_", NULL, 0x12, "Ljava.util.Map;", NULL, NULL,  },
    { "isCacheConcurrentMap_", NULL, 0x12, "Z", NULL, NULL,  },
    { "cacheClassNames_", NULL, 0x12, "Ljava.util.Set;", NULL, NULL,  },
    { "classIntrospectionsInProgress_", NULL, 0x12, "Ljava.util.Set;", NULL, NULL,  },
    { "modelFactories_", NULL, 0x12, "Ljava.util.List;", NULL, NULL,  },
    { "modelFactoriesRefQueue_", NULL, 0x12, "Ljava.lang.ref.ReferenceQueue;", NULL, NULL,  },
    { "clearingCounter_", NULL, 0x2, "I", NULL, NULL,  },
  };
  static const char *inner_classes[] = {"Lfreemarker.ext.beans.ClassIntrospector$MethodSignature;"};
  static const J2ObjcClassInfo _FreemarkerExtBeansClassIntrospector = { 2, "ClassIntrospector", "freemarker.ext.beans", NULL, 0x0, 37, methods, 23, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_FreemarkerExtBeansClassIntrospector;
}

@end


#line 156
void FreemarkerExtBeansClassIntrospector_initWithFreemarkerExtBeansClassIntrospectorBuilder_withId_(FreemarkerExtBeansClassIntrospector *self, FreemarkerExtBeansClassIntrospectorBuilder *pa, id sharedLock) {
  (void) FreemarkerExtBeansClassIntrospector_initWithFreemarkerExtBeansClassIntrospectorBuilder_withId_withBoolean_withBoolean_(self, pa, sharedLock, NO, NO);
}


#line 156
FreemarkerExtBeansClassIntrospector *new_FreemarkerExtBeansClassIntrospector_initWithFreemarkerExtBeansClassIntrospectorBuilder_withId_(FreemarkerExtBeansClassIntrospectorBuilder *pa, id sharedLock) {
  FreemarkerExtBeansClassIntrospector *self = [FreemarkerExtBeansClassIntrospector alloc];
  FreemarkerExtBeansClassIntrospector_initWithFreemarkerExtBeansClassIntrospectorBuilder_withId_(self, pa, sharedLock);
  return self;
}


#line 165
void FreemarkerExtBeansClassIntrospector_initWithFreemarkerExtBeansClassIntrospectorBuilder_withId_withBoolean_withBoolean_(FreemarkerExtBeansClassIntrospector *self, FreemarkerExtBeansClassIntrospectorBuilder *builder, id sharedLock, jboolean hasSharedInstanceRestrictons, jboolean shared) {
  (void) NSObject_init(self);
  self->cache_ = FreemarkerCore_ConcurrentMapFactory_newMaybeConcurrentHashMapWithInt_withFloat_withInt_(
#line 136
  0,
#line 137
  0.75f, 16);
  self->isCacheConcurrentMap_ = FreemarkerCore_ConcurrentMapFactory_isConcurrentWithJavaUtilMap_(self->cache_);
  self->cacheClassNames_ = new_JavaUtilHashSet_initWithInt_(0);
  self->classIntrospectionsInProgress_ = new_JavaUtilHashSet_initWithInt_(0);
  self->modelFactories_ = new_JavaUtilLinkedList_init();
  self->modelFactoriesRefQueue_ = new_JavaLangRefReferenceQueue_init();
  
#line 167
  FreemarkerTemplateUtilityNullArgumentException_checkWithNSString_withId_(@"sharedLock", sharedLock);
  
#line 169
  self->exposureLevel_ = [((FreemarkerExtBeansClassIntrospectorBuilder *) nil_chk(builder)) getExposureLevel];
  self->exposeFields_ = [builder getExposeFields];
  self->methodAppearanceFineTuner_ = [builder getMethodAppearanceFineTuner];
  self->methodSorter_ = [builder getMethodSorter];
  self->bugfixed_ = [builder isBugfixed];
  
#line 175
  self->sharedLock_ = sharedLock;
  
#line 177
  self->hasSharedInstanceRestrictons_ = hasSharedInstanceRestrictons;
  self->shared_ = shared;
  
#line 180
  if (FreemarkerExtBeansClassIntrospector_CLASS_CHANGE_NOTIFIER_ != nil) {
    [FreemarkerExtBeansClassIntrospector_CLASS_CHANGE_NOTIFIER_ subscribeWithFreemarkerExtBeansClassIntrospector:self];
  }
}


#line 165
FreemarkerExtBeansClassIntrospector *new_FreemarkerExtBeansClassIntrospector_initWithFreemarkerExtBeansClassIntrospectorBuilder_withId_withBoolean_withBoolean_(FreemarkerExtBeansClassIntrospectorBuilder *builder, id sharedLock, jboolean hasSharedInstanceRestrictons, jboolean shared) {
  FreemarkerExtBeansClassIntrospector *self = [FreemarkerExtBeansClassIntrospector alloc];
  FreemarkerExtBeansClassIntrospector_initWithFreemarkerExtBeansClassIntrospectorBuilder_withId_withBoolean_withBoolean_(self, builder, sharedLock, hasSharedInstanceRestrictons, shared);
  return self;
}


#line 253
id<JavaUtilMap> FreemarkerExtBeansClassIntrospector_createClassIntrospectionDataWithIOSClass_(FreemarkerExtBeansClassIntrospector *self, IOSClass *clazz) {
  id<JavaUtilMap> introspData = new_JavaUtilHashMap_init();
  
#line 256
  if (self->exposeFields_) {
    FreemarkerExtBeansClassIntrospector_addFieldsToClassIntrospectionDataWithJavaUtilMap_withIOSClass_(self, introspData, clazz);
  }
  
#line 260
  id<JavaUtilMap> accessibleMethods = FreemarkerExtBeansClassIntrospector_discoverAccessibleMethodsWithIOSClass_(clazz);
  
#line 262
  FreemarkerExtBeansClassIntrospector_addGenericGetToClassIntrospectionDataWithJavaUtilMap_withJavaUtilMap_(self, introspData, accessibleMethods);
  
#line 273
  FreemarkerExtBeansClassIntrospector_addConstructorsToClassIntrospectionDataWithJavaUtilMap_withIOSClass_(self, introspData, clazz);
  
#line 275
  if ([introspData size] > 1) {
    return introspData;
  }
  else
#line 277
  if ([introspData size] == 0) {
    return JavaUtilCollections_get_EMPTY_MAP_();
  }
  else {
    
#line 280
    id<JavaUtilMap_Entry> e = (id<JavaUtilMap_Entry>) check_protocol_cast([((id<JavaUtilIterator>) nil_chk([((id<JavaUtilSet>) nil_chk([introspData entrySet])) iterator])) next], @protocol(JavaUtilMap_Entry));
    return JavaUtilCollections_singletonMapWithId_withId_([((id<JavaUtilMap_Entry>) nil_chk(e)) getKey], [e getValue]);
  }
}


#line 285
void FreemarkerExtBeansClassIntrospector_addFieldsToClassIntrospectionDataWithJavaUtilMap_withIOSClass_(FreemarkerExtBeansClassIntrospector *self, id<JavaUtilMap> introspData, IOSClass *clazz) {
  
#line 287
  IOSObjectArray *fields = [((IOSClass *) nil_chk(clazz)) getFields];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(fields))->size_; i++) {
    JavaLangReflectField *field = IOSObjectArray_Get(fields, i);
    if (([((JavaLangReflectField *) nil_chk(field)) getModifiers] & JavaLangReflectModifier_STATIC) == 0) {
      (void) [((id<JavaUtilMap>) nil_chk(introspData)) putWithId:[field getName] withId:field];
    }
  }
}


#line 410
void FreemarkerExtBeansClassIntrospector_addGenericGetToClassIntrospectionDataWithJavaUtilMap_withJavaUtilMap_(FreemarkerExtBeansClassIntrospector *self, id<JavaUtilMap> introspData, id<JavaUtilMap> accessibleMethods) {
  
#line 412
  JavaLangReflectMethod *genericGet = FreemarkerExtBeansClassIntrospector_getFirstAccessibleMethodWithFreemarkerExtBeansClassIntrospector_MethodSignature_withJavaUtilMap_(FreemarkerExtBeansClassIntrospector_MethodSignature_get_GET_STRING_SIGNATURE_(),
#line 413
  accessibleMethods);
  if (genericGet == nil) {
    genericGet = FreemarkerExtBeansClassIntrospector_getFirstAccessibleMethodWithFreemarkerExtBeansClassIntrospector_MethodSignature_withJavaUtilMap_(FreemarkerExtBeansClassIntrospector_MethodSignature_get_GET_OBJECT_SIGNATURE_(),
#line 416
    accessibleMethods);
  }
  if (genericGet != nil) {
    (void) [((id<JavaUtilMap>) nil_chk(introspData)) putWithId:FreemarkerExtBeansClassIntrospector_GENERIC_GET_KEY_ withId:genericGet];
  }
}


#line 423
void FreemarkerExtBeansClassIntrospector_addConstructorsToClassIntrospectionDataWithJavaUtilMap_withIOSClass_(FreemarkerExtBeansClassIntrospector *self, id<JavaUtilMap> introspData, IOSClass *clazz) {
  
#line 425
  @try {
    IOSObjectArray *ctors = [((IOSClass *) nil_chk(clazz)) getConstructors];
    if (((IOSObjectArray *) nil_chk(ctors))->size_ == 1) {
      JavaLangReflectConstructor *ctor = IOSObjectArray_Get(ctors, 0);
      (void) [((id<JavaUtilMap>) nil_chk(introspData)) putWithId:FreemarkerExtBeansClassIntrospector_CONSTRUCTORS_KEY_ withId:new_FreemarkerExtBeansSimpleMethod_initWithJavaLangReflectMember_withIOSClassArray_(ctor, [((JavaLangReflectConstructor *) nil_chk(ctor)) getParameterTypes])];
    }
    else
#line 430
    if (ctors->size_ > 1) {
      FreemarkerExtBeansOverloadedMethods *ctorMap = new_FreemarkerExtBeansOverloadedMethods_initWithBoolean_(self->bugfixed_);
      for (jint i = 0; i < ctors->size_; i++) {
        [ctorMap addConstructorWithJavaLangReflectConstructor:IOSObjectArray_Get(ctors, i)];
      }
      (void) [((id<JavaUtilMap>) nil_chk(introspData)) putWithId:FreemarkerExtBeansClassIntrospector_CONSTRUCTORS_KEY_ withId:ctorMap];
    }
  }
  @catch (
#line 437
  JavaLangSecurityException *e) {
    [((FreemarkerLogLogger *) nil_chk(FreemarkerExtBeansClassIntrospector_LOG_)) warnWithNSString:JreStrcat("$$", @"Can't discover constructors for class ", [((IOSClass *) nil_chk(clazz)) getName]) withJavaLangThrowable:e];
  }
}


#line 447
id<JavaUtilMap> FreemarkerExtBeansClassIntrospector_discoverAccessibleMethodsWithIOSClass_(IOSClass *clazz) {
  FreemarkerExtBeansClassIntrospector_initialize();
  
#line 448
  id<JavaUtilMap> accessibles = new_JavaUtilHashMap_init();
  FreemarkerExtBeansClassIntrospector_discoverAccessibleMethodsWithIOSClass_withJavaUtilMap_(clazz, accessibles);
  return accessibles;
}


#line 453
void FreemarkerExtBeansClassIntrospector_discoverAccessibleMethodsWithIOSClass_withJavaUtilMap_(IOSClass *clazz, id<JavaUtilMap> accessibles) {
  FreemarkerExtBeansClassIntrospector_initialize();
  
#line 454
  if (JavaLangReflectModifier_isPublicWithInt_([((IOSClass *) nil_chk(clazz)) getModifiers])) {
    @try {
      IOSObjectArray *methods = [clazz getMethods];
      for (jint i = 0; i < ((IOSObjectArray *) nil_chk(methods))->size_; i++) {
        JavaLangReflectMethod *method = IOSObjectArray_Get(methods, i);
        FreemarkerExtBeansClassIntrospector_MethodSignature *sig = new_FreemarkerExtBeansClassIntrospector_MethodSignature_initWithJavaLangReflectMethod_(method);
        
#line 471
        id<JavaUtilList> methodList = (id<JavaUtilList>) check_protocol_cast([((id<JavaUtilMap>) nil_chk(accessibles)) getWithId:sig], @protocol(JavaUtilList));
        if (methodList == nil) {
          methodList = new_JavaUtilLinkedList_init();
          (void) [accessibles putWithId:sig withId:methodList];
        }
        [((id<JavaUtilList>) nil_chk(methodList)) addWithId:method];
      }
      return;
    }
    @catch (
#line 479
    JavaLangSecurityException *e) {
      [((FreemarkerLogLogger *) nil_chk(FreemarkerExtBeansClassIntrospector_LOG_)) warnWithNSString:JreStrcat("$$$", @"Could not discover accessible methods of class ",
#line 481
      [clazz getName], @", attemping superclasses/interfaces.") withJavaLangThrowable:
#line 482
      e];
    }
  }
  
#line 487
  IOSObjectArray *interfaces = [clazz getInterfaces];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(interfaces))->size_; i++) {
    FreemarkerExtBeansClassIntrospector_discoverAccessibleMethodsWithIOSClass_withJavaUtilMap_(IOSObjectArray_Get(interfaces, i), accessibles);
  }
  IOSClass *superclass_ = [clazz getSuperclass];
  if (superclass_ != nil) {
    FreemarkerExtBeansClassIntrospector_discoverAccessibleMethodsWithIOSClass_withJavaUtilMap_(superclass_, accessibles);
  }
}


#line 497
JavaLangReflectMethod *FreemarkerExtBeansClassIntrospector_getMatchingAccessibleMethodWithJavaLangReflectMethod_withJavaUtilMap_(JavaLangReflectMethod *m, id<JavaUtilMap> accessibles) {
  FreemarkerExtBeansClassIntrospector_initialize();
  
#line 498
  if (m == nil) {
    return nil;
  }
  FreemarkerExtBeansClassIntrospector_MethodSignature *sig = new_FreemarkerExtBeansClassIntrospector_MethodSignature_initWithJavaLangReflectMethod_(m);
  id<JavaUtilList> l = (id<JavaUtilList>) check_protocol_cast([((id<JavaUtilMap>) nil_chk(accessibles)) getWithId:sig], @protocol(JavaUtilList));
  if (l == nil) {
    return nil;
  }
  for (id<JavaUtilIterator> iterator = [((id<JavaUtilList>) nil_chk(l)) iterator]; [((id<JavaUtilIterator>) nil_chk(iterator)) hasNext]; ) {
    JavaLangReflectMethod *am = (JavaLangReflectMethod *) check_class_cast([iterator next], [JavaLangReflectMethod class]);
    if ([((JavaLangReflectMethod *) nil_chk(am)) getReturnType] == [((JavaLangReflectMethod *) nil_chk(m)) getReturnType]) {
      return am;
    }
  }
  return nil;
}


#line 515
JavaLangReflectMethod *FreemarkerExtBeansClassIntrospector_getFirstAccessibleMethodWithFreemarkerExtBeansClassIntrospector_MethodSignature_withJavaUtilMap_(FreemarkerExtBeansClassIntrospector_MethodSignature *sig, id<JavaUtilMap> accessibles) {
  FreemarkerExtBeansClassIntrospector_initialize();
  
#line 516
  id<JavaUtilList> l = (id<JavaUtilList>) check_protocol_cast([((id<JavaUtilMap>) nil_chk(accessibles)) getWithId:sig], @protocol(JavaUtilList));
  if (l == nil || [l isEmpty]) {
    return nil;
  }
  return (JavaLangReflectMethod *) check_class_cast([((id<JavaUtilIterator>) nil_chk([((id<JavaUtilList>) nil_chk(l)) iterator])) next], [JavaLangReflectMethod class]);
}


#line 534
id<JavaUtilMap> FreemarkerExtBeansClassIntrospector_getArgTypesWithJavaUtilMap_(id<JavaUtilMap> classMap) {
  FreemarkerExtBeansClassIntrospector_initialize();
  
#line 535
  id<JavaUtilMap> argTypes = (id<JavaUtilMap>) check_protocol_cast([((id<JavaUtilMap>) nil_chk(classMap)) getWithId:FreemarkerExtBeansClassIntrospector_ARGTYPES_KEY_], @protocol(JavaUtilMap));
  if (argTypes == nil) {
    argTypes = new_JavaUtilHashMap_init();
    (void) [classMap putWithId:FreemarkerExtBeansClassIntrospector_ARGTYPES_KEY_ withId:argTypes];
  }
  return argTypes;
}


#line 591
void FreemarkerExtBeansClassIntrospector_forcedClearCache(FreemarkerExtBeansClassIntrospector *self) {
  @synchronized(self->sharedLock_) {
    [((id<JavaUtilMap>) nil_chk(self->cache_)) clear];
    [((id<JavaUtilSet>) nil_chk(self->cacheClassNames_)) clear];
    self->clearingCounter_++;
    
#line 597
    for (id<JavaUtilIterator> it = [((id<JavaUtilList>) nil_chk(self->modelFactories_)) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
      id regedMf = [((JavaLangRefWeakReference *) nil_chk(((JavaLangRefWeakReference *) check_class_cast([it next], [JavaLangRefWeakReference class])))) get];
      if (regedMf != nil) {
        if ([regedMf isKindOfClass:[FreemarkerExtBeansClassBasedModelFactory class]]) {
          [((FreemarkerExtBeansClassBasedModelFactory *) check_class_cast(regedMf, [FreemarkerExtBeansClassBasedModelFactory class])) clearCache];
        }
        else
#line 602
        if ([regedMf isKindOfClass:[FreemarkerExtUtilModelCache class]]) {
          [((FreemarkerExtUtilModelCache *) check_class_cast(regedMf, [FreemarkerExtUtilModelCache class])) clearCache];
        }
        else {
          
#line 605
          @throw new_FreemarkerCoreBugException_init();
        }
      }
    }
    
#line 610
    FreemarkerExtBeansClassIntrospector_removeClearedModelFactoryReferences(self);
  }
}


#line 651
void FreemarkerExtBeansClassIntrospector_onSameNameClassesDetectedWithNSString_(FreemarkerExtBeansClassIntrospector *self, NSString *className_) {
  
#line 656
  if ([((FreemarkerLogLogger *) nil_chk(FreemarkerExtBeansClassIntrospector_LOG_)) isInfoEnabled]) {
    [FreemarkerExtBeansClassIntrospector_LOG_ infoWithNSString:JreStrcat("$$$", @"Detected multiple classes with the same name, \"",
#line 658
    className_, @"\". Assuming it was a class-reloading. Clearing class introspection caches to release old data.")];
  }
  
#line 662
  FreemarkerExtBeansClassIntrospector_forcedClearCache(self);
}


#line 676
void FreemarkerExtBeansClassIntrospector_registerModelFactoryWithId_(FreemarkerExtBeansClassIntrospector *self, id mf) {
  
#line 678
  @synchronized(self->sharedLock_) {
    [((id<JavaUtilList>) nil_chk(self->modelFactories_)) addWithId:new_JavaLangRefWeakReference_initWithId_withJavaLangRefReferenceQueue_(mf, self->modelFactoriesRefQueue_)];
    FreemarkerExtBeansClassIntrospector_removeClearedModelFactoryReferences(self);
  }
}


#line 704
void FreemarkerExtBeansClassIntrospector_removeClearedModelFactoryReferences(FreemarkerExtBeansClassIntrospector *self) {
  JavaLangRefReference *cleardRef;
  while ((cleardRef = [((JavaLangRefReferenceQueue *) nil_chk(self->modelFactoriesRefQueue_)) poll]) != nil) {
    @synchronized(self->sharedLock_) {
      for (id<JavaUtilIterator> it = [((id<JavaUtilList>) nil_chk(self->modelFactories_)) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
        if ([it next] == cleardRef) {
          [it remove];
          goto break_findCleardRef;
        }
      }
      break_findCleardRef: ;
    }
  }
}


#line 721
IOSObjectArray *FreemarkerExtBeansClassIntrospector_getArgTypesWithJavaUtilMap_withJavaLangReflectAccessibleObject_(id<JavaUtilMap> classMap, JavaLangReflectAccessibleObject *methodOrCtor) {
  FreemarkerExtBeansClassIntrospector_initialize();
  
#line 722
  return (IOSObjectArray *) check_class_cast([((id<JavaUtilMap>) nil_chk(((id<JavaUtilMap>) check_protocol_cast([((id<JavaUtilMap>) nil_chk(classMap)) getWithId:FreemarkerExtBeansClassIntrospector_ARGTYPES_KEY_], @protocol(JavaUtilMap))))) getWithId:methodOrCtor], [IOSObjectArray class]);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerExtBeansClassIntrospector)

J2OBJC_INITIALIZED_DEFN(FreemarkerExtBeansClassIntrospector_MethodSignature)


#line 543
@implementation FreemarkerExtBeansClassIntrospector_MethodSignature


#line 552
- (instancetype)initWithNSString:(NSString *)name
               withIOSClassArray:(IOSObjectArray *)args {
  FreemarkerExtBeansClassIntrospector_MethodSignature_initWithNSString_withIOSClassArray_(self, name, args);
  return self;
}


#line 557
- (instancetype)initWithJavaLangReflectMethod:(JavaLangReflectMethod *)method {
  FreemarkerExtBeansClassIntrospector_MethodSignature_initWithJavaLangReflectMethod_(self, method);
  return self;
}


#line 561
- (jboolean)isEqual:(id)o {
  if ([o isKindOfClass:[FreemarkerExtBeansClassIntrospector_MethodSignature class]]) {
    FreemarkerExtBeansClassIntrospector_MethodSignature *ms = (FreemarkerExtBeansClassIntrospector_MethodSignature *) check_class_cast(o, [FreemarkerExtBeansClassIntrospector_MethodSignature class]);
    return [((NSString *) nil_chk(((FreemarkerExtBeansClassIntrospector_MethodSignature *) nil_chk(ms))->name_)) isEqual:name_] && JavaUtilArrays_equalsWithNSObjectArray_withNSObjectArray_(args_, ms->args_);
  }
  return NO;
}

- (NSUInteger)hash {
  return ((jint) [((NSString *) nil_chk(name_)) hash]) ^ ((IOSObjectArray *) nil_chk(args_))->size_;
}

+ (void)initialize {
  if (self == [FreemarkerExtBeansClassIntrospector_MethodSignature class]) {
    FreemarkerExtBeansClassIntrospector_MethodSignature_GET_STRING_SIGNATURE_ = new_FreemarkerExtBeansClassIntrospector_MethodSignature_initWithNSString_withIOSClassArray_(
#line 545
    @"get", [IOSObjectArray newArrayWithObjects:(id[]){ NSString_class_() } count:1 type:IOSClass_class_()]);
    FreemarkerExtBeansClassIntrospector_MethodSignature_GET_OBJECT_SIGNATURE_ = new_FreemarkerExtBeansClassIntrospector_MethodSignature_initWithNSString_withIOSClassArray_(
#line 547
    @"get", [IOSObjectArray newArrayWithObjects:(id[]){ NSObject_class_() } count:1 type:IOSClass_class_()]);
    J2OBJC_SET_INITIALIZED(FreemarkerExtBeansClassIntrospector_MethodSignature)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithNSString:withIOSClassArray:", "MethodSignature", NULL, 0x2, NULL, NULL },
    { "initWithJavaLangReflectMethod:", "MethodSignature", NULL, 0x0, NULL, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL, NULL },
    { "hash", "hashCode", "I", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "GET_STRING_SIGNATURE_", NULL, 0x1a, "Lfreemarker.ext.beans.ClassIntrospector$MethodSignature;", &FreemarkerExtBeansClassIntrospector_MethodSignature_GET_STRING_SIGNATURE_, NULL,  },
    { "GET_OBJECT_SIGNATURE_", NULL, 0x1a, "Lfreemarker.ext.beans.ClassIntrospector$MethodSignature;", &FreemarkerExtBeansClassIntrospector_MethodSignature_GET_OBJECT_SIGNATURE_, NULL,  },
    { "name_", NULL, 0x12, "Ljava.lang.String;", NULL, NULL,  },
    { "args_", NULL, 0x12, "[Ljava.lang.Class;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerExtBeansClassIntrospector_MethodSignature = { 2, "MethodSignature", "freemarker.ext.beans", "ClassIntrospector", 0x1a, 4, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerExtBeansClassIntrospector_MethodSignature;
}

@end


#line 552
void FreemarkerExtBeansClassIntrospector_MethodSignature_initWithNSString_withIOSClassArray_(FreemarkerExtBeansClassIntrospector_MethodSignature *self, NSString *name, IOSObjectArray *args) {
  (void) NSObject_init(self);
  
#line 553
  self->name_ = name;
  self->args_ = args;
}


#line 552
FreemarkerExtBeansClassIntrospector_MethodSignature *new_FreemarkerExtBeansClassIntrospector_MethodSignature_initWithNSString_withIOSClassArray_(NSString *name, IOSObjectArray *args) {
  FreemarkerExtBeansClassIntrospector_MethodSignature *self = [FreemarkerExtBeansClassIntrospector_MethodSignature alloc];
  FreemarkerExtBeansClassIntrospector_MethodSignature_initWithNSString_withIOSClassArray_(self, name, args);
  return self;
}


#line 557
void FreemarkerExtBeansClassIntrospector_MethodSignature_initWithJavaLangReflectMethod_(FreemarkerExtBeansClassIntrospector_MethodSignature *self, JavaLangReflectMethod *method) {
  (void) FreemarkerExtBeansClassIntrospector_MethodSignature_initWithNSString_withIOSClassArray_(self, [((JavaLangReflectMethod *) nil_chk(method)) getName], [method getParameterTypes]);
}


#line 557
FreemarkerExtBeansClassIntrospector_MethodSignature *new_FreemarkerExtBeansClassIntrospector_MethodSignature_initWithJavaLangReflectMethod_(JavaLangReflectMethod *method) {
  FreemarkerExtBeansClassIntrospector_MethodSignature *self = [FreemarkerExtBeansClassIntrospector_MethodSignature alloc];
  FreemarkerExtBeansClassIntrospector_MethodSignature_initWithJavaLangReflectMethod_(self, method);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerExtBeansClassIntrospector_MethodSignature)
