//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/template/MalformedTemplateNameException.java
//


#include "J2ObjC_source.h"
#include "MalformedTemplateNameException.h"
#include "StringUtil.h"
#include "java/io/IOException.h"

#line 0 "/Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/template/MalformedTemplateNameException.java"

@interface FreemarkerTemplateMalformedTemplateNameException () {
 @public
  NSString *templateName_;
  NSString *malformednessDescription_;
}

@end

J2OBJC_FIELD_SETTER(FreemarkerTemplateMalformedTemplateNameException, templateName_, NSString *)
J2OBJC_FIELD_SETTER(FreemarkerTemplateMalformedTemplateNameException, malformednessDescription_, NSString *)


#line 34
@implementation FreemarkerTemplateMalformedTemplateNameException


#line 39
- (instancetype)initWithNSString:(NSString *)templateName
                    withNSString:(NSString *)malformednessDescription {
  FreemarkerTemplateMalformedTemplateNameException_initWithNSString_withNSString_(self, templateName, malformednessDescription);
  return self;
}

- (NSString *)getTemplateName {
  return templateName_;
}

- (NSString *)getMalformednessDescription {
  return malformednessDescription_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithNSString:withNSString:", "MalformedTemplateNameException", NULL, 0x1, NULL, NULL },
    { "getTemplateName", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getMalformednessDescription", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "templateName_", NULL, 0x12, "Ljava.lang.String;", NULL, NULL,  },
    { "malformednessDescription_", NULL, 0x12, "Ljava.lang.String;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerTemplateMalformedTemplateNameException = { 2, "MalformedTemplateNameException", "freemarker.template", NULL, 0x1, 3, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerTemplateMalformedTemplateNameException;
}

@end


#line 39
void FreemarkerTemplateMalformedTemplateNameException_initWithNSString_withNSString_(FreemarkerTemplateMalformedTemplateNameException *self, NSString *templateName, NSString *malformednessDescription) {
  (void) JavaIoIOException_initWithNSString_(self, JreStrcat("$$$$", @"Malformed template name, ", FreemarkerTemplateUtilityStringUtil_jQuoteWithNSString_(templateName), @": ", malformednessDescription));
  self->templateName_ = templateName;
  self->malformednessDescription_ = malformednessDescription;
}


#line 39
FreemarkerTemplateMalformedTemplateNameException *new_FreemarkerTemplateMalformedTemplateNameException_initWithNSString_withNSString_(NSString *templateName, NSString *malformednessDescription) {
  FreemarkerTemplateMalformedTemplateNameException *self = [FreemarkerTemplateMalformedTemplateNameException alloc];
  FreemarkerTemplateMalformedTemplateNameException_initWithNSString_withNSString_(self, templateName, malformednessDescription);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerTemplateMalformedTemplateNameException)
