//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/ext/beans/IteratorModel.java
//

#ifndef _FreemarkerExtBeansIteratorModel_H_
#define _FreemarkerExtBeansIteratorModel_H_

#include "BeanModel.h"
#include "J2ObjC_header.h"
#include "TemplateCollectionModel.h"
#include "TemplateModelIterator.h"

@class FreemarkerExtBeansBeansWrapper;
@protocol FreemarkerTemplateTemplateModel;
@protocol JavaUtilIterator;

/**
 @brief <p>A class that adds TemplateModelIterator functionality to the Iterator interface implementers.
 </p> <p>It differs from the freemarker.template.SimpleCollection in that it inherits from BeanModel , and therefore you can call methods on it directly, even to the effect of calling <tt>iterator.remove()</tt> in the template.</p> <p>Using the model as a collection model is NOT thread-safe, as iterators are inherently not thread-safe. Further, you can iterate over it only once. Attempts to call the #iterator() method after it was already driven to the end once will throw an exception.</p>
 */
@interface FreemarkerExtBeansIteratorModel : FreemarkerExtBeansBeanModel < FreemarkerTemplateTemplateModelIterator, FreemarkerTemplateTemplateCollectionModel >

#pragma mark Public

/**
 @brief Creates a new model that wraps the specified iterator object.
 @param iterator the iterator object to wrap into a model.
 @param wrapper the BeansWrapper associated with this model. Every model has to have an associated BeansWrapper instance. The model gains many attributes from its wrapper, including the caching behavior, method exposure level, method-over-item shadowing policy etc.
 */
- (instancetype)initWithJavaUtilIterator:(id<JavaUtilIterator>)iterator
      withFreemarkerExtBeansBeansWrapper:(FreemarkerExtBeansBeansWrapper *)wrapper;

/**
 @brief Returns Iterator#hasNext() .
 Therefore, an iterator that has no more element evaluates to false, and an iterator that has further elements evaluates to true.
 */
- (jboolean)getAsBoolean;

/**
 @brief Calls underlying Iterator#hasNext() .
 */
- (jboolean)hasNext;

/**
 @brief This allows the iterator to be used in a <tt>&lt;#list&gt;</tt> block.
 @return "this"
 */
- (id<FreemarkerTemplateTemplateModelIterator>)iterator;

/**
 @brief Calls underlying Iterator#next() and wraps the result.
 */
- (id<FreemarkerTemplateTemplateModel>)next;

@end

J2OBJC_EMPTY_STATIC_INIT(FreemarkerExtBeansIteratorModel)

FOUNDATION_EXPORT void FreemarkerExtBeansIteratorModel_initWithJavaUtilIterator_withFreemarkerExtBeansBeansWrapper_(FreemarkerExtBeansIteratorModel *self, id<JavaUtilIterator> iterator, FreemarkerExtBeansBeansWrapper *wrapper);

FOUNDATION_EXPORT FreemarkerExtBeansIteratorModel *new_FreemarkerExtBeansIteratorModel_initWithJavaUtilIterator_withFreemarkerExtBeansBeansWrapper_(id<JavaUtilIterator> iterator, FreemarkerExtBeansBeansWrapper *wrapper) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerExtBeansIteratorModel)

#endif // _FreemarkerExtBeansIteratorModel_H_
