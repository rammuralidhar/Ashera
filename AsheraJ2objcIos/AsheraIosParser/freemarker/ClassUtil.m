//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/template/utility/ClassUtil.java
//


#include "AdapterTemplateModel.h"
#include "BeanModel.h"
#include "BooleanModel.h"
#include "ClassUtil.h"
#include "CollectionModel.h"
#include "DateModel.h"
#include "EnumerationModel.h"
#include "Environment.h"
#include "IOSClass.h"
#include "IteratorModel.h"
#include "J2ObjC_source.h"
#include "Macro.h"
#include "MapModel.h"
#include "NumberModel.h"
#include "OverloadedMethodsModel.h"
#include "SimpleMethodModel.h"
#include "StringModel.h"
#include "TemplateBooleanModel.h"
#include "TemplateCollectionModel.h"
#include "TemplateCollectionModelEx.h"
#include "TemplateDateModel.h"
#include "TemplateDirectiveModel.h"
#include "TemplateHashModel.h"
#include "TemplateHashModelEx.h"
#include "TemplateMethodModel.h"
#include "TemplateMethodModelEx.h"
#include "TemplateModel.h"
#include "TemplateModelIterator.h"
#include "TemplateNodeModel.h"
#include "TemplateNumberModel.h"
#include "TemplateScalarModel.h"
#include "TemplateSequenceModel.h"
#include "TemplateTransformModel.h"
#include "WrapperTemplateModel.h"
#include "java/lang/Boolean.h"
#include "java/lang/Byte.h"
#include "java/lang/Character.h"
#include "java/lang/ClassLoader.h"
#include "java/lang/ClassNotFoundException.h"
#include "java/lang/Double.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/SecurityException.h"
#include "java/lang/Short.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/Thread.h"
#include "java/lang/Throwable.h"
#include "java/lang/Void.h"
#include "java/util/HashSet.h"
#include "java/util/Set.h"

#line 0 "/Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/template/utility/ClassUtil.java"

@interface FreemarkerTemplateUtilityClassUtil ()

- (instancetype)init;

/**
 @brief Returns the TemplateModel interface that is the most characteristic of the object, or <code>null</code> .
 */
+ (IOSClass *)getPrimaryTemplateModelInterfaceWithFreemarkerTemplateTemplateModel:(id<FreemarkerTemplateTemplateModel>)tm;

+ (void)appendTemplateModelTypeNameWithJavaLangStringBuffer:(JavaLangStringBuffer *)sb
                                            withJavaUtilSet:(id<JavaUtilSet>)typeNamesAppended
                                               withIOSClass:(IOSClass *)cl;

+ (IOSClass *)getUnwrappedClassWithFreemarkerTemplateTemplateModel:(id<FreemarkerTemplateTemplateModel>)tm;

+ (void)appendTypeNameWithJavaLangStringBuffer:(JavaLangStringBuffer *)sb
                               withJavaUtilSet:(id<JavaUtilSet>)typeNamesAppended
                                  withNSString:(NSString *)name;

@end

__attribute__((unused)) static void FreemarkerTemplateUtilityClassUtil_init(FreemarkerTemplateUtilityClassUtil *self);

__attribute__((unused)) static FreemarkerTemplateUtilityClassUtil *new_FreemarkerTemplateUtilityClassUtil_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static IOSClass *FreemarkerTemplateUtilityClassUtil_getPrimaryTemplateModelInterfaceWithFreemarkerTemplateTemplateModel_(id<FreemarkerTemplateTemplateModel> tm);

__attribute__((unused)) static void FreemarkerTemplateUtilityClassUtil_appendTemplateModelTypeNameWithJavaLangStringBuffer_withJavaUtilSet_withIOSClass_(JavaLangStringBuffer *sb, id<JavaUtilSet> typeNamesAppended, IOSClass *cl);

__attribute__((unused)) static IOSClass *FreemarkerTemplateUtilityClassUtil_getUnwrappedClassWithFreemarkerTemplateTemplateModel_(id<FreemarkerTemplateTemplateModel> tm);

__attribute__((unused)) static void FreemarkerTemplateUtilityClassUtil_appendTypeNameWithJavaLangStringBuffer_withJavaUtilSet_withNSString_(JavaLangStringBuffer *sb, id<JavaUtilSet> typeNamesAppended, NSString *name);


#line 56
@implementation FreemarkerTemplateUtilityClassUtil

- (instancetype)init {
  FreemarkerTemplateUtilityClassUtil_init(self);
  return self;
}


#line 68
+ (IOSClass *)forNameWithNSString:(NSString *)className_ {
  return FreemarkerTemplateUtilityClassUtil_forNameWithNSString_(className_);
}


#line 96
+ (NSString *)getShortClassNameWithIOSClass:(IOSClass *)pClass {
  return FreemarkerTemplateUtilityClassUtil_getShortClassNameWithIOSClass_(pClass);
}


#line 111
+ (NSString *)getShortClassNameWithIOSClass:(IOSClass *)pClass
                                withBoolean:(jboolean)shortenFreeMarkerClasses {
  return FreemarkerTemplateUtilityClassUtil_getShortClassNameWithIOSClass_withBoolean_(pClass, shortenFreeMarkerClasses);
}


#line 145
+ (NSString *)getShortClassNameOfObjectWithId:(id)obj {
  return FreemarkerTemplateUtilityClassUtil_getShortClassNameOfObjectWithId_(obj);
}


#line 155
+ (NSString *)getShortClassNameOfObjectWithId:(id)obj
                                  withBoolean:(jboolean)shortenFreeMarkerClasses {
  return FreemarkerTemplateUtilityClassUtil_getShortClassNameOfObjectWithId_withBoolean_(obj, shortenFreeMarkerClasses);
}


#line 166
+ (IOSClass *)getPrimaryTemplateModelInterfaceWithFreemarkerTemplateTemplateModel:(id<FreemarkerTemplateTemplateModel>)tm {
  return FreemarkerTemplateUtilityClassUtil_getPrimaryTemplateModelInterfaceWithFreemarkerTemplateTemplateModel_(tm);
}


#line 195
+ (void)appendTemplateModelTypeNameWithJavaLangStringBuffer:(JavaLangStringBuffer *)sb
                                            withJavaUtilSet:(id<JavaUtilSet>)typeNamesAppended
                                               withIOSClass:(IOSClass *)cl {
  FreemarkerTemplateUtilityClassUtil_appendTemplateModelTypeNameWithJavaLangStringBuffer_withJavaUtilSet_withIOSClass_(sb, typeNamesAppended, cl);
}


#line 244
+ (IOSClass *)getUnwrappedClassWithFreemarkerTemplateTemplateModel:(id<FreemarkerTemplateTemplateModel>)tm {
  return FreemarkerTemplateUtilityClassUtil_getUnwrappedClassWithFreemarkerTemplateTemplateModel_(tm);
}


#line 260
+ (void)appendTypeNameWithJavaLangStringBuffer:(JavaLangStringBuffer *)sb
                               withJavaUtilSet:(id<JavaUtilSet>)typeNamesAppended
                                  withNSString:(NSString *)name {
  FreemarkerTemplateUtilityClassUtil_appendTypeNameWithJavaLangStringBuffer_withJavaUtilSet_withNSString_(sb, typeNamesAppended, name);
}


#line 276
+ (NSString *)getFTLTypeDescriptionWithFreemarkerTemplateTemplateModel:(id<FreemarkerTemplateTemplateModel>)tm {
  return FreemarkerTemplateUtilityClassUtil_getFTLTypeDescriptionWithFreemarkerTemplateTemplateModel_(tm);
}


#line 329
+ (IOSClass *)primitiveClassToBoxingClassWithIOSClass:(IOSClass *)primitiveClass {
  return FreemarkerTemplateUtilityClassUtil_primitiveClassToBoxingClassWithIOSClass_(primitiveClass);
}


#line 348
+ (IOSClass *)boxingClassToPrimitiveClassWithIOSClass:(IOSClass *)boxingClass {
  return FreemarkerTemplateUtilityClassUtil_boxingClassToPrimitiveClassWithIOSClass_(boxingClass);
}


#line 369
+ (jboolean)isNumericalWithIOSClass:(IOSClass *)type {
  return FreemarkerTemplateUtilityClassUtil_isNumericalWithIOSClass_(type);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "ClassUtil", NULL, 0x2, NULL, NULL },
    { "forNameWithNSString:", "forName", "Ljava.lang.Class;", 0x9, "Ljava.lang.ClassNotFoundException;", NULL },
    { "getShortClassNameWithIOSClass:", "getShortClassName", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "getShortClassNameWithIOSClass:withBoolean:", "getShortClassName", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "getShortClassNameOfObjectWithId:", "getShortClassNameOfObject", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "getShortClassNameOfObjectWithId:withBoolean:", "getShortClassNameOfObject", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "getPrimaryTemplateModelInterfaceWithFreemarkerTemplateTemplateModel:", "getPrimaryTemplateModelInterface", "Ljava.lang.Class;", 0xa, NULL, NULL },
    { "appendTemplateModelTypeNameWithJavaLangStringBuffer:withJavaUtilSet:withIOSClass:", "appendTemplateModelTypeName", "V", 0xa, NULL, NULL },
    { "getUnwrappedClassWithFreemarkerTemplateTemplateModel:", "getUnwrappedClass", "Ljava.lang.Class;", 0xa, NULL, NULL },
    { "appendTypeNameWithJavaLangStringBuffer:withJavaUtilSet:withNSString:", "appendTypeName", "V", 0xa, NULL, NULL },
    { "getFTLTypeDescriptionWithFreemarkerTemplateTemplateModel:", "getFTLTypeDescription", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "primitiveClassToBoxingClassWithIOSClass:", "primitiveClassToBoxingClass", "Ljava.lang.Class;", 0x9, NULL, NULL },
    { "boxingClassToPrimitiveClassWithIOSClass:", "boxingClassToPrimitiveClass", "Ljava.lang.Class;", 0x9, NULL, NULL },
    { "isNumericalWithIOSClass:", "isNumerical", "Z", 0x9, NULL, NULL },
  };
  static const J2ObjcClassInfo _FreemarkerTemplateUtilityClassUtil = { 2, "ClassUtil", "freemarker.template.utility", NULL, 0x1, 14, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerTemplateUtilityClassUtil;
}

@end


#line 58
void FreemarkerTemplateUtilityClassUtil_init(FreemarkerTemplateUtilityClassUtil *self) {
  (void) NSObject_init(self);
}


#line 58
FreemarkerTemplateUtilityClassUtil *new_FreemarkerTemplateUtilityClassUtil_init() {
  FreemarkerTemplateUtilityClassUtil *self = [FreemarkerTemplateUtilityClassUtil alloc];
  FreemarkerTemplateUtilityClassUtil_init(self);
  return self;
}


#line 68
IOSClass *FreemarkerTemplateUtilityClassUtil_forNameWithNSString_(NSString *className_) {
  FreemarkerTemplateUtilityClassUtil_initialize();
  
#line 72
  @try {
    
#line 74
    JavaLangClassLoader *ctcl = [((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) getContextClassLoader];
    if (ctcl != nil) {
      return IOSClass_forName_initialize_classLoader_(className_, YES, ctcl);
    }
  }
  @catch (JavaLangClassNotFoundException *e) {
    
#line 81
    ;
  }
  @catch (JavaLangSecurityException *e) {
    
#line 85
    ;
  }
  
#line 88
  return IOSClass_forName_(className_);
}


#line 96
NSString *FreemarkerTemplateUtilityClassUtil_getShortClassNameWithIOSClass_(IOSClass *pClass) {
  FreemarkerTemplateUtilityClassUtil_initialize();
  
#line 97
  return FreemarkerTemplateUtilityClassUtil_getShortClassNameWithIOSClass_withBoolean_(pClass, NO);
}


#line 111
NSString *FreemarkerTemplateUtilityClassUtil_getShortClassNameWithIOSClass_withBoolean_(IOSClass *pClass, jboolean shortenFreeMarkerClasses) {
  FreemarkerTemplateUtilityClassUtil_initialize();
  
#line 112
  if (pClass == nil) {
    return nil;
  }
  else
#line 114
  if ([pClass isArray]) {
    return JreStrcat("$$", FreemarkerTemplateUtilityClassUtil_getShortClassNameWithIOSClass_([pClass getComponentType]), @"[]");
  }
  else {
    
#line 117
    NSString *cn = [pClass getName];
    if ([((NSString *) nil_chk(cn)) hasPrefix:@"java.lang."] || [cn hasPrefix:@"java.util."]) {
      return [cn substring:10];
    }
    else {
      
#line 121
      if (shortenFreeMarkerClasses) {
        if ([cn hasPrefix:@"freemarker.template."]) {
          return JreStrcat("$$", @"f.t", [cn substring:19]);
        }
        else
#line 124
        if ([cn hasPrefix:@"freemarker.ext.beans."]) {
          return JreStrcat("$$", @"f.e.b", [cn substring:20]);
        }
        else
#line 126
        if ([cn hasPrefix:@"freemarker.core."]) {
          return JreStrcat("$$", @"f.c", [cn substring:15]);
        }
        else
#line 128
        if ([cn hasPrefix:@"freemarker.ext."]) {
          return JreStrcat("$$", @"f.e", [cn substring:14]);
        }
        else
#line 130
        if ([cn hasPrefix:@"freemarker."]) {
          return JreStrcat("C$", 'f', [cn substring:10]);
        }
      }
      
#line 135
      return cn;
    }
  }
}


#line 145
NSString *FreemarkerTemplateUtilityClassUtil_getShortClassNameOfObjectWithId_(id obj) {
  FreemarkerTemplateUtilityClassUtil_initialize();
  
#line 146
  return FreemarkerTemplateUtilityClassUtil_getShortClassNameOfObjectWithId_withBoolean_(obj, NO);
}


#line 155
NSString *FreemarkerTemplateUtilityClassUtil_getShortClassNameOfObjectWithId_withBoolean_(id obj, jboolean shortenFreeMarkerClasses) {
  FreemarkerTemplateUtilityClassUtil_initialize();
  
#line 156
  if (obj == nil) {
    return @"Null";
  }
  else {
    
#line 159
    return FreemarkerTemplateUtilityClassUtil_getShortClassNameWithIOSClass_withBoolean_([obj getClass], shortenFreeMarkerClasses);
  }
}


#line 166
IOSClass *FreemarkerTemplateUtilityClassUtil_getPrimaryTemplateModelInterfaceWithFreemarkerTemplateTemplateModel_(id<FreemarkerTemplateTemplateModel> tm) {
  FreemarkerTemplateUtilityClassUtil_initialize();
  
#line 167
  if ([tm isKindOfClass:[FreemarkerExtBeansBeanModel class]]) {
    if ([tm isKindOfClass:[FreemarkerExtBeansCollectionModel class]]) {
      return FreemarkerTemplateTemplateSequenceModel_class_();
    }
    else
#line 170
    if ([tm isKindOfClass:[FreemarkerExtBeansIteratorModel class]] || [tm isKindOfClass:[FreemarkerExtBeansEnumerationModel class]]) {
      return FreemarkerTemplateTemplateCollectionModel_class_();
    }
    else
#line 172
    if ([tm isKindOfClass:[FreemarkerExtBeansMapModel class]]) {
      return FreemarkerTemplateTemplateHashModelEx_class_();
    }
    else
#line 174
    if ([tm isKindOfClass:[FreemarkerExtBeansNumberModel class]]) {
      return FreemarkerTemplateTemplateNumberModel_class_();
    }
    else
#line 176
    if ([tm isKindOfClass:[FreemarkerExtBeansBooleanModel class]]) {
      return FreemarkerTemplateTemplateBooleanModel_class_();
    }
    else
#line 178
    if ([tm isKindOfClass:[FreemarkerExtBeansDateModel class]]) {
      return FreemarkerTemplateTemplateDateModel_class_();
    }
    else
#line 180
    if ([tm isKindOfClass:[FreemarkerExtBeansStringModel class]]) {
      id wrapped = [((FreemarkerExtBeansBeanModel *) nil_chk(((FreemarkerExtBeansBeanModel *) check_class_cast(tm, [FreemarkerExtBeansBeanModel class])))) getWrappedObject];
      return [wrapped isKindOfClass:[NSString class]] ?
#line 183
      FreemarkerTemplateTemplateScalarModel_class_() :
#line 184
      ([FreemarkerTemplateTemplateHashModelEx_class_() isInstance:tm] ? FreemarkerTemplateTemplateHashModelEx_class_() : nil);
    }
    else {
      
#line 186
      return nil;
    }
  }
  else
#line 188
  if ([tm isKindOfClass:[FreemarkerExtBeansSimpleMethodModel class]] || [tm isKindOfClass:[FreemarkerExtBeansOverloadedMethodsModel class]]) {
    return FreemarkerTemplateTemplateMethodModelEx_class_();
  }
  else {
    
#line 191
    return nil;
  }
}


#line 195
void FreemarkerTemplateUtilityClassUtil_appendTemplateModelTypeNameWithJavaLangStringBuffer_withJavaUtilSet_withIOSClass_(JavaLangStringBuffer *sb, id<JavaUtilSet> typeNamesAppended, IOSClass *cl) {
  FreemarkerTemplateUtilityClassUtil_initialize();
  
#line 196
  if ([FreemarkerTemplateTemplateNodeModel_class_() isAssignableFrom:cl]) {
    FreemarkerTemplateUtilityClassUtil_appendTypeNameWithJavaLangStringBuffer_withJavaUtilSet_withNSString_(sb, typeNamesAppended, @"node");
  }
  
#line 200
  if ([FreemarkerTemplateTemplateDirectiveModel_class_() isAssignableFrom:cl]) {
    FreemarkerTemplateUtilityClassUtil_appendTypeNameWithJavaLangStringBuffer_withJavaUtilSet_withNSString_(sb, typeNamesAppended, @"directive");
  }
  else
#line 202
  if ([FreemarkerTemplateTemplateTransformModel_class_() isAssignableFrom:cl]) {
    FreemarkerTemplateUtilityClassUtil_appendTypeNameWithJavaLangStringBuffer_withJavaUtilSet_withNSString_(sb, typeNamesAppended, @"transform");
  }
  
#line 206
  if ([FreemarkerTemplateTemplateSequenceModel_class_() isAssignableFrom:cl]) {
    FreemarkerTemplateUtilityClassUtil_appendTypeNameWithJavaLangStringBuffer_withJavaUtilSet_withNSString_(sb, typeNamesAppended, @"sequence");
  }
  else
#line 208
  if ([FreemarkerTemplateTemplateCollectionModel_class_() isAssignableFrom:cl]) {
    FreemarkerTemplateUtilityClassUtil_appendTypeNameWithJavaLangStringBuffer_withJavaUtilSet_withNSString_(sb, typeNamesAppended,
#line 210
    [FreemarkerTemplateTemplateCollectionModelEx_class_() isAssignableFrom:cl] ? @"extended_collection" : @"collection");
  }
  else
#line 211
  if ([FreemarkerTemplateTemplateModelIterator_class_() isAssignableFrom:cl]) {
    FreemarkerTemplateUtilityClassUtil_appendTypeNameWithJavaLangStringBuffer_withJavaUtilSet_withNSString_(sb, typeNamesAppended, @"iterator");
  }
  
#line 215
  if ([FreemarkerTemplateTemplateMethodModel_class_() isAssignableFrom:cl]) {
    FreemarkerTemplateUtilityClassUtil_appendTypeNameWithJavaLangStringBuffer_withJavaUtilSet_withNSString_(sb, typeNamesAppended, @"method");
  }
  
#line 219
  if ([FreemarkerCoreEnvironment_Namespace_class_() isAssignableFrom:cl]) {
    FreemarkerTemplateUtilityClassUtil_appendTypeNameWithJavaLangStringBuffer_withJavaUtilSet_withNSString_(sb, typeNamesAppended, @"namespace");
  }
  else
#line 221
  if ([FreemarkerTemplateTemplateHashModelEx_class_() isAssignableFrom:cl]) {
    FreemarkerTemplateUtilityClassUtil_appendTypeNameWithJavaLangStringBuffer_withJavaUtilSet_withNSString_(sb, typeNamesAppended, @"extended_hash");
  }
  else
#line 223
  if ([FreemarkerTemplateTemplateHashModel_class_() isAssignableFrom:cl]) {
    FreemarkerTemplateUtilityClassUtil_appendTypeNameWithJavaLangStringBuffer_withJavaUtilSet_withNSString_(sb, typeNamesAppended, @"hash");
  }
  
#line 227
  if ([FreemarkerTemplateTemplateNumberModel_class_() isAssignableFrom:cl]) {
    FreemarkerTemplateUtilityClassUtil_appendTypeNameWithJavaLangStringBuffer_withJavaUtilSet_withNSString_(sb, typeNamesAppended, @"number");
  }
  
#line 231
  if ([FreemarkerTemplateTemplateDateModel_class_() isAssignableFrom:cl]) {
    FreemarkerTemplateUtilityClassUtil_appendTypeNameWithJavaLangStringBuffer_withJavaUtilSet_withNSString_(sb, typeNamesAppended, @"date_or_time_or_datetime");
  }
  
#line 235
  if ([FreemarkerTemplateTemplateBooleanModel_class_() isAssignableFrom:cl]) {
    FreemarkerTemplateUtilityClassUtil_appendTypeNameWithJavaLangStringBuffer_withJavaUtilSet_withNSString_(sb, typeNamesAppended, @"boolean");
  }
  
#line 239
  if ([FreemarkerTemplateTemplateScalarModel_class_() isAssignableFrom:cl]) {
    FreemarkerTemplateUtilityClassUtil_appendTypeNameWithJavaLangStringBuffer_withJavaUtilSet_withNSString_(sb, typeNamesAppended, @"string");
  }
}


#line 244
IOSClass *FreemarkerTemplateUtilityClassUtil_getUnwrappedClassWithFreemarkerTemplateTemplateModel_(id<FreemarkerTemplateTemplateModel> tm) {
  FreemarkerTemplateUtilityClassUtil_initialize();
  
#line 245
  id unwrapped;
  @try {
    if ([FreemarkerExtUtilWrapperTemplateModel_class_() isInstance:tm]) {
      unwrapped = [((id<FreemarkerExtUtilWrapperTemplateModel>) nil_chk(((id<FreemarkerExtUtilWrapperTemplateModel>) check_protocol_cast(tm, @protocol(FreemarkerExtUtilWrapperTemplateModel))))) getWrappedObject];
    }
    else
#line 249
    if ([FreemarkerTemplateAdapterTemplateModel_class_() isInstance:tm]) {
      unwrapped = [((id<FreemarkerTemplateAdapterTemplateModel>) nil_chk(((id<FreemarkerTemplateAdapterTemplateModel>) check_protocol_cast(tm, @protocol(FreemarkerTemplateAdapterTemplateModel))))) getAdaptedObjectWithIOSClass:NSObject_class_()];
    }
    else {
      
#line 252
      unwrapped = nil;
    }
  }
  @catch (
#line 254
  JavaLangThrowable *e) {
    unwrapped = nil;
  }
  return unwrapped != nil ? [unwrapped getClass] : nil;
}


#line 260
void FreemarkerTemplateUtilityClassUtil_appendTypeNameWithJavaLangStringBuffer_withJavaUtilSet_withNSString_(JavaLangStringBuffer *sb, id<JavaUtilSet> typeNamesAppended, NSString *name) {
  FreemarkerTemplateUtilityClassUtil_initialize();
  
#line 261
  if (![((id<JavaUtilSet>) nil_chk(typeNamesAppended)) containsWithId:name]) {
    if ([((JavaLangStringBuffer *) nil_chk(sb)) length] != 0) (void) [sb appendWithNSString:@"+"];
    (void) [sb appendWithNSString:name];
    [typeNamesAppended addWithId:name];
  }
}


#line 276
NSString *FreemarkerTemplateUtilityClassUtil_getFTLTypeDescriptionWithFreemarkerTemplateTemplateModel_(id<FreemarkerTemplateTemplateModel> tm) {
  FreemarkerTemplateUtilityClassUtil_initialize();
  
#line 277
  if (tm == nil) {
    return @"Null";
  }
  else {
    
#line 280
    id<JavaUtilSet> typeNamesAppended = new_JavaUtilHashSet_init();
    
#line 282
    JavaLangStringBuffer *sb = new_JavaLangStringBuffer_init();
    
#line 284
    IOSClass *primaryInterface = FreemarkerTemplateUtilityClassUtil_getPrimaryTemplateModelInterfaceWithFreemarkerTemplateTemplateModel_(tm);
    if (primaryInterface != nil) {
      FreemarkerTemplateUtilityClassUtil_appendTemplateModelTypeNameWithJavaLangStringBuffer_withJavaUtilSet_withIOSClass_(sb, typeNamesAppended, primaryInterface);
    }
    
#line 289
    if ([tm isKindOfClass:[FreemarkerCoreMacro class]]) {
      FreemarkerTemplateUtilityClassUtil_appendTypeNameWithJavaLangStringBuffer_withJavaUtilSet_withNSString_(sb, typeNamesAppended, [((FreemarkerCoreMacro *) check_class_cast(tm, [FreemarkerCoreMacro class])) isFunction] ? @"function" : @"macro");
    }
    
#line 293
    FreemarkerTemplateUtilityClassUtil_appendTemplateModelTypeNameWithJavaLangStringBuffer_withJavaUtilSet_withIOSClass_(sb, typeNamesAppended, [tm getClass]);
    
#line 295
    NSString *javaClassName;
    IOSClass *unwrappedClass = FreemarkerTemplateUtilityClassUtil_getUnwrappedClassWithFreemarkerTemplateTemplateModel_(tm);
    if (unwrappedClass != nil) {
      javaClassName = FreemarkerTemplateUtilityClassUtil_getShortClassNameWithIOSClass_withBoolean_(unwrappedClass, YES);
    }
    else {
      
#line 300
      javaClassName = nil;
    }
    
#line 303
    (void) [sb appendWithNSString:@" ("];
    NSString *modelClassName = FreemarkerTemplateUtilityClassUtil_getShortClassNameWithIOSClass_withBoolean_([tm getClass], YES);
    if (javaClassName == nil) {
      (void) [sb appendWithNSString:@"wrapper: "];
      (void) [sb appendWithNSString:modelClassName];
    }
    else {
      
#line 309
      (void) [sb appendWithNSString:javaClassName];
      (void) [sb appendWithNSString:@" wrapped into "];
      (void) [sb appendWithNSString:modelClassName];
    }
    (void) [sb appendWithNSString:@")"];
    
#line 315
    return [sb description];
  }
}


#line 329
IOSClass *FreemarkerTemplateUtilityClassUtil_primitiveClassToBoxingClassWithIOSClass_(IOSClass *primitiveClass) {
  FreemarkerTemplateUtilityClassUtil_initialize();
  if (primitiveClass == [IOSClass intClass]) return JavaLangInteger_class_();
  if (primitiveClass == [IOSClass booleanClass]) return JavaLangBoolean_class_();
  if (primitiveClass == [IOSClass longClass]) return JavaLangLong_class_();
  if (primitiveClass == [IOSClass doubleClass]) return JavaLangDouble_class_();
  if (primitiveClass == [IOSClass charClass]) return JavaLangCharacter_class_();
  if (primitiveClass == [IOSClass floatClass]) return JavaLangFloat_class_();
  if (primitiveClass == [IOSClass byteClass]) return JavaLangByte_class_();
  if (primitiveClass == [IOSClass shortClass]) return JavaLangShort_class_();
  if (primitiveClass == [IOSClass voidClass]) return JavaLangVoid_class_();
  return primitiveClass;
}


#line 348
IOSClass *FreemarkerTemplateUtilityClassUtil_boxingClassToPrimitiveClassWithIOSClass_(IOSClass *boxingClass) {
  FreemarkerTemplateUtilityClassUtil_initialize();
  if (boxingClass == JavaLangInteger_class_()) return [IOSClass intClass];
  if (boxingClass == JavaLangBoolean_class_()) return [IOSClass booleanClass];
  if (boxingClass == JavaLangLong_class_()) return [IOSClass longClass];
  if (boxingClass == JavaLangDouble_class_()) return [IOSClass doubleClass];
  if (boxingClass == JavaLangCharacter_class_()) return [IOSClass charClass];
  if (boxingClass == JavaLangFloat_class_()) return [IOSClass floatClass];
  if (boxingClass == JavaLangByte_class_()) return [IOSClass byteClass];
  if (boxingClass == JavaLangShort_class_()) return [IOSClass shortClass];
  if (boxingClass == JavaLangVoid_class_()) return [IOSClass voidClass];
  return boxingClass;
}


#line 369
jboolean FreemarkerTemplateUtilityClassUtil_isNumericalWithIOSClass_(IOSClass *type) {
  FreemarkerTemplateUtilityClassUtil_initialize();
  
#line 370
  return [NSNumber_class_() isAssignableFrom:type] || (
#line 371
  [((IOSClass *) nil_chk(type)) isPrimitive] && type != JavaLangBoolean_get_TYPE_() && type != JavaLangCharacter_get_TYPE_() && type != JavaLangVoid_get_TYPE_());
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerTemplateUtilityClassUtil)
