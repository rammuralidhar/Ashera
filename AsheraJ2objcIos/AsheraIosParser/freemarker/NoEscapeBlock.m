//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/NoEscapeBlock.java
//


#include "Environment.h"
#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "NoEscapeBlock.h"
#include "ParameterRole.h"
#include "TemplateElement.h"
#include "TemplateException.h"
#include "java/io/IOException.h"
#include "java/lang/IndexOutOfBoundsException.h"

#line 0 "/Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/NoEscapeBlock.java"


#line 25
@implementation FreemarkerCoreNoEscapeBlock

- (instancetype)initWithFreemarkerCoreTemplateElement:(FreemarkerCoreTemplateElement *)nestedBlock {
  FreemarkerCoreNoEscapeBlock_initWithFreemarkerCoreTemplateElement_(self, nestedBlock);
  return self;
}


#line 31
- (void)acceptWithFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env {
  if ([self getNestedBlock] != nil) {
    [((FreemarkerCoreEnvironment *) nil_chk(env)) visitWithFreemarkerCoreTemplateElement:[self getNestedBlock]];
  }
}

- (NSString *)dumpWithBoolean:(jboolean)canonical {
  if (canonical) {
    return JreStrcat("C$C$$$C", '<', [self getNodeTypeSymbol], '>', [((FreemarkerCoreTemplateElement *) nil_chk([self getNestedBlock])) getCanonicalForm], @"</",
#line 40
    [self getNodeTypeSymbol], '>');
  }
  else {
    
#line 42
    return [self getNodeTypeSymbol];
  }
}


#line 46
- (jint)getParameterCount {
  return 0;
}

- (id)getParameterValueWithInt:(jint)idx {
  @throw new_JavaLangIndexOutOfBoundsException_init();
}

- (FreemarkerCoreParameterRole *)getParameterRoleWithInt:(jint)idx {
  @throw new_JavaLangIndexOutOfBoundsException_init();
}

- (NSString *)getNodeTypeSymbol {
  return @"#noescape";
}

- (jboolean)isOutputCacheable {
  return YES;
}

- (jboolean)isNestedBlockRepeater {
  return NO;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithFreemarkerCoreTemplateElement:", "NoEscapeBlock", NULL, 0x0, NULL, NULL },
    { "acceptWithFreemarkerCoreEnvironment:", "accept", "V", 0x0, "Lfreemarker.template.TemplateException;Ljava.io.IOException;", NULL },
    { "dumpWithBoolean:", "dump", "Ljava.lang.String;", 0x4, NULL, NULL },
    { "getParameterCount", NULL, "I", 0x0, NULL, NULL },
    { "getParameterValueWithInt:", "getParameterValue", "Ljava.lang.Object;", 0x0, NULL, NULL },
    { "getParameterRoleWithInt:", "getParameterRole", "Lfreemarker.core.ParameterRole;", 0x0, NULL, NULL },
    { "getNodeTypeSymbol", NULL, "Ljava.lang.String;", 0x0, NULL, NULL },
    { "isOutputCacheable", NULL, "Z", 0x0, NULL, NULL },
    { "isNestedBlockRepeater", NULL, "Z", 0x0, NULL, NULL },
  };
  static const J2ObjcClassInfo _FreemarkerCoreNoEscapeBlock = { 2, "NoEscapeBlock", "freemarker.core", NULL, 0x0, 9, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerCoreNoEscapeBlock;
}

@end


#line 27
void FreemarkerCoreNoEscapeBlock_initWithFreemarkerCoreTemplateElement_(FreemarkerCoreNoEscapeBlock *self, FreemarkerCoreTemplateElement *nestedBlock) {
  (void) FreemarkerCoreTemplateElement_init(self);
  
#line 28
  [self setNestedBlockWithFreemarkerCoreTemplateElement:nestedBlock];
}


#line 27
FreemarkerCoreNoEscapeBlock *new_FreemarkerCoreNoEscapeBlock_initWithFreemarkerCoreTemplateElement_(FreemarkerCoreTemplateElement *nestedBlock) {
  FreemarkerCoreNoEscapeBlock *self = [FreemarkerCoreNoEscapeBlock alloc];
  FreemarkerCoreNoEscapeBlock_initWithFreemarkerCoreTemplateElement_(self, nestedBlock);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreNoEscapeBlock)
