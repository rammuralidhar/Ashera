//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/template/TemplateException.java
//

#ifndef _FreemarkerTemplateTemplateException_H_
#define _FreemarkerTemplateTemplateException_H_

#include "J2ObjC_header.h"
#include "java/lang/Exception.h"

@class FreemarkerCoreEnvironment;
@class FreemarkerCoreExpression;
@class FreemarkerCore_ErrorDescriptionBuilder;
@class JavaIoPrintStream;
@class JavaIoPrintWriter;
@class JavaLangInteger;
@class JavaLangThrowable;

/**
 @brief Runtime exception in a template (as opposed to a parsing-time exception: ParseException ).
 It prints a special stack trace that contains the template-language stack trace along the usual Java stack trace.
 */
@interface FreemarkerTemplateTemplateException : JavaLangException

#pragma mark Public

/**
 @brief Constructs a TemplateException with no specified detail message or underlying cause.
 */
- (instancetype)initWithFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env;

/**
 @brief The same as #TemplateException(Throwable,Environment) ; it's exists only for binary backward-compatibility.
 */
- (instancetype)initWithJavaLangException:(JavaLangException *)cause
            withFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env;

/**
 @brief Constructs a TemplateException with the given detail message, but no underlying cause exception.
 @param description the description of the error that occurred
 */
- (instancetype)initWithNSString:(NSString *)description_
   withFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env;

/**
 @brief The same as #TemplateException(String,Throwable,Environment) ; it's exists only for binary backward-compatibility.
 */
- (instancetype)initWithNSString:(NSString *)description_
           withJavaLangException:(JavaLangException *)cause
   withFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env;

/**
 @brief Constructs a TemplateException with both a description of the error that occurred and the underlying Exception that caused this exception to be raised.
 @param description the description of the error that occurred
 @param cause the underlying Exception that caused this exception to be raised
 @since 2.3.20
 */
- (instancetype)initWithNSString:(NSString *)description_
           withJavaLangThrowable:(JavaLangThrowable *)cause
   withFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env;

/**
 @brief Constructs a TemplateException with the given underlying Exception, but no detail message.
 @param cause the underlying Exception that caused this exception to be raised
 @since 2.3.20
 */
- (instancetype)initWithJavaLangThrowable:(JavaLangThrowable *)cause
            withFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env;

/**
 @brief If there was a blamed expression attached to this exception, it returns its canonical form, otherwise it returns <code>null</code> .
 This expression should always be inside the failing FTL instruction. <p>The typical application of this is getting the undefined expression from InvalidReferenceException -s.
 @since 2.3.21
 */
- (NSString *)getBlamedExpressionString;

/**
 */
- (JavaLangException *)getCauseException;

/**
 @brief 1-based column number of the failing section, or <code>null</code> if the information is not available.
 @since 2.3.21
 */
- (JavaLangInteger *)getColumnNumber;

/**
 @brief 1-based column number of the last character of the failing template section, or <code>null</code> if the information is not available.
 Note that unlike with Java string API-s, this column number is inclusive.
 @since 2.3.21
 */
- (JavaLangInteger *)getEndColumnNumber;

/**
 @brief 1-based line number of the last line that contains the failing section, or <code>null</code> if the information is not available.
 @since 2.3.21
 */
- (JavaLangInteger *)getEndLineNumber;

/**
 @return the execution environment in which the exception occurred. <code>null</code> if the exception was deserialized.
 */
- (FreemarkerCoreEnvironment *)getEnvironment;

/**
 @brief Returns the snapshot of the FTL stack trace at the time this exception was created.
 */
- (NSString *)getFTLInstructionStack;

/**
 @brief 1-based line number of the failing section, or <code>null</code> if the information is not available.
 @since 2.3.21
 */
- (JavaLangInteger *)getLineNumber;

- (NSString *)getMessage;

/**
 @brief Similar to #getMessage() , but it doesn't contain the position of the failing instruction at then end of the text.
 It might contains the position of the failing <em>expression</em> though as part of the expression quotation, as that's the part of the description.
 */
- (NSString *)getMessageWithoutStackTop;

/**
 @brief Returns the name ( Template#getName() ) of the template where the error has occurred, or <code>null</code> if the information isn't available.
 This shouldn't be used for showing the error position; use #getTemplateSourceName() instead.
 @since 2.3.21
 */
- (NSString *)getTemplateName;

/**
 @brief Returns the source name ( Template#getSourceName() ) of the template where the error has occurred, or <code>null</code> if the information isn't available.
 This is what should be used for showing the error position.
 @since 2.3.22
 */
- (NSString *)getTemplateSourceName;

/**
 @brief Overrides Throwable#printStackTrace(PrintStream) so that it will include the FTL stack trace.
 */
- (void)printStackTraceWithJavaIoPrintStream:(JavaIoPrintStream *)outArg;

/**
 @param heading should the heading at the top be printed
 @param ftlStackTrace should the FTL stack trace be printed
 @param javaStackTrace should the Java stack trace be printed
 @since 2.3.20
 */
- (void)printStackTraceWithJavaIoPrintStream:(JavaIoPrintStream *)outArg
                                 withBoolean:(jboolean)heading
                                 withBoolean:(jboolean)ftlStackTrace
                                 withBoolean:(jboolean)javaStackTrace;

/**
 @brief Overrides Throwable#printStackTrace(PrintWriter) so that it will include the FTL stack trace.
 */
- (void)printStackTraceWithJavaIoPrintWriter:(JavaIoPrintWriter *)outArg;

/**
 @param heading should the heading at the top be printed
 @param ftlStackTrace should the FTL stack trace be printed
 @param javaStackTrace should the Java stack trace be printed
 @since 2.3.20
 */
- (void)printStackTraceWithJavaIoPrintWriter:(JavaIoPrintWriter *)outArg
                                 withBoolean:(jboolean)heading
                                 withBoolean:(jboolean)ftlStackTrace
                                 withBoolean:(jboolean)javaStackTrace;

/**
 @brief Prints the stack trace as if wasn't overridden by TemplateException .
 @since 2.3.20
 */
- (void)printStandardStackTraceWithJavaIoPrintStream:(JavaIoPrintStream *)ps;

/**
 @brief Prints the stack trace as if wasn't overridden by TemplateException .
 @since 2.3.20
 */
- (void)printStandardStackTraceWithJavaIoPrintWriter:(JavaIoPrintWriter *)pw;

#pragma mark Protected

/**
 @brief Don't use this; this is to be used internally by FreeMarker.
 No backward compatibility guarantees.
 @param blamedExpr Maybe <code>null</code> . The FTL stack in the Environment only specifies the error location with "template element" granularity, and this can be used to point to the expression inside the template element.
 */
- (instancetype)initWithJavaLangThrowable:(JavaLangThrowable *)cause
            withFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env
             withFreemarkerCoreExpression:(FreemarkerCoreExpression *)blamedExpr
withFreemarkerCore_ErrorDescriptionBuilder:(FreemarkerCore_ErrorDescriptionBuilder *)descriptionBuilder;

@end

J2OBJC_EMPTY_STATIC_INIT(FreemarkerTemplateTemplateException)

FOUNDATION_EXPORT void FreemarkerTemplateTemplateException_initWithFreemarkerCoreEnvironment_(FreemarkerTemplateTemplateException *self, FreemarkerCoreEnvironment *env);

FOUNDATION_EXPORT FreemarkerTemplateTemplateException *new_FreemarkerTemplateTemplateException_initWithFreemarkerCoreEnvironment_(FreemarkerCoreEnvironment *env) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void FreemarkerTemplateTemplateException_initWithNSString_withFreemarkerCoreEnvironment_(FreemarkerTemplateTemplateException *self, NSString *description_, FreemarkerCoreEnvironment *env);

FOUNDATION_EXPORT FreemarkerTemplateTemplateException *new_FreemarkerTemplateTemplateException_initWithNSString_withFreemarkerCoreEnvironment_(NSString *description_, FreemarkerCoreEnvironment *env) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void FreemarkerTemplateTemplateException_initWithJavaLangException_withFreemarkerCoreEnvironment_(FreemarkerTemplateTemplateException *self, JavaLangException *cause, FreemarkerCoreEnvironment *env);

FOUNDATION_EXPORT FreemarkerTemplateTemplateException *new_FreemarkerTemplateTemplateException_initWithJavaLangException_withFreemarkerCoreEnvironment_(JavaLangException *cause, FreemarkerCoreEnvironment *env) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void FreemarkerTemplateTemplateException_initWithJavaLangThrowable_withFreemarkerCoreEnvironment_(FreemarkerTemplateTemplateException *self, JavaLangThrowable *cause, FreemarkerCoreEnvironment *env);

FOUNDATION_EXPORT FreemarkerTemplateTemplateException *new_FreemarkerTemplateTemplateException_initWithJavaLangThrowable_withFreemarkerCoreEnvironment_(JavaLangThrowable *cause, FreemarkerCoreEnvironment *env) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void FreemarkerTemplateTemplateException_initWithNSString_withJavaLangException_withFreemarkerCoreEnvironment_(FreemarkerTemplateTemplateException *self, NSString *description_, JavaLangException *cause, FreemarkerCoreEnvironment *env);

FOUNDATION_EXPORT FreemarkerTemplateTemplateException *new_FreemarkerTemplateTemplateException_initWithNSString_withJavaLangException_withFreemarkerCoreEnvironment_(NSString *description_, JavaLangException *cause, FreemarkerCoreEnvironment *env) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void FreemarkerTemplateTemplateException_initWithNSString_withJavaLangThrowable_withFreemarkerCoreEnvironment_(FreemarkerTemplateTemplateException *self, NSString *description_, JavaLangThrowable *cause, FreemarkerCoreEnvironment *env);

FOUNDATION_EXPORT FreemarkerTemplateTemplateException *new_FreemarkerTemplateTemplateException_initWithNSString_withJavaLangThrowable_withFreemarkerCoreEnvironment_(NSString *description_, JavaLangThrowable *cause, FreemarkerCoreEnvironment *env) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void FreemarkerTemplateTemplateException_initWithJavaLangThrowable_withFreemarkerCoreEnvironment_withFreemarkerCoreExpression_withFreemarkerCore_ErrorDescriptionBuilder_(FreemarkerTemplateTemplateException *self, JavaLangThrowable *cause, FreemarkerCoreEnvironment *env, FreemarkerCoreExpression *blamedExpr, FreemarkerCore_ErrorDescriptionBuilder *descriptionBuilder);

FOUNDATION_EXPORT FreemarkerTemplateTemplateException *new_FreemarkerTemplateTemplateException_initWithJavaLangThrowable_withFreemarkerCoreEnvironment_withFreemarkerCoreExpression_withFreemarkerCore_ErrorDescriptionBuilder_(JavaLangThrowable *cause, FreemarkerCoreEnvironment *env, FreemarkerCoreExpression *blamedExpr, FreemarkerCore_ErrorDescriptionBuilder *descriptionBuilder) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerTemplateTemplateException)

#endif // _FreemarkerTemplateTemplateException_H_
