//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/ext/beans/ClassBasedModelFactory.java
//


#include "BeansWrapper.h"
#include "ClassBasedModelFactory.h"
#include "ClassIntrospector.h"
#include "ClassUtil.h"
#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "TemplateModel.h"
#include "TemplateModelException.h"
#include "_ConcurrentMapFactory.h"
#include "java/lang/ClassNotFoundException.h"
#include "java/lang/Exception.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/RuntimeException.h"
#include "java/util/HashSet.h"
#include "java/util/Map.h"
#include "java/util/Set.h"

#line 0 "/Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/ext/beans/ClassBasedModelFactory.java"

@interface FreemarkerExtBeansClassBasedModelFactory () {
 @public
  FreemarkerExtBeansBeansWrapper *wrapper_;
  id<JavaUtilMap> cache_;
  jboolean isCacheConcurrentMap_;
  id<JavaUtilSet> classIntrospectionsInProgress_;
}

- (id<FreemarkerTemplateTemplateModel>)getInternalWithNSString:(NSString *)key;

@end

J2OBJC_FIELD_SETTER(FreemarkerExtBeansClassBasedModelFactory, wrapper_, FreemarkerExtBeansBeansWrapper *)
J2OBJC_FIELD_SETTER(FreemarkerExtBeansClassBasedModelFactory, cache_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(FreemarkerExtBeansClassBasedModelFactory, classIntrospectionsInProgress_, id<JavaUtilSet>)

__attribute__((unused)) static id<FreemarkerTemplateTemplateModel> FreemarkerExtBeansClassBasedModelFactory_getInternalWithNSString_(FreemarkerExtBeansClassBasedModelFactory *self, NSString *key);


#line 32
@implementation FreemarkerExtBeansClassBasedModelFactory


#line 41
- (instancetype)initWithFreemarkerExtBeansBeansWrapper:(FreemarkerExtBeansBeansWrapper *)wrapper {
  FreemarkerExtBeansClassBasedModelFactory_initWithFreemarkerExtBeansBeansWrapper_(self, wrapper);
  return self;
}


#line 45
- (id<FreemarkerTemplateTemplateModel>)getWithNSString:(NSString *)key {
  @try {
    return FreemarkerExtBeansClassBasedModelFactory_getInternalWithNSString_(self, key);
  }
  @catch (
#line 48
  JavaLangException *e) {
    if ([e isKindOfClass:[FreemarkerTemplateTemplateModelException class]]) {
      @throw (FreemarkerTemplateTemplateModelException *) check_class_cast(e, [FreemarkerTemplateTemplateModelException class]);
    }
    else {
      
#line 52
      @throw new_FreemarkerTemplateTemplateModelException_initWithJavaLangException_(e);
    }
  }
}


#line 57
- (id<FreemarkerTemplateTemplateModel>)getInternalWithNSString:(NSString *)key {
  return FreemarkerExtBeansClassBasedModelFactory_getInternalWithNSString_(self, key);
}


#line 123
- (void)clearCache {
  @synchronized([((FreemarkerExtBeansBeansWrapper *) nil_chk(wrapper_)) getSharedIntrospectionLock]) {
    [((id<JavaUtilMap>) nil_chk(cache_)) clear];
  }
}

- (void)removeFromCacheWithIOSClass:(IOSClass *)clazz {
  @synchronized([((FreemarkerExtBeansBeansWrapper *) nil_chk(wrapper_)) getSharedIntrospectionLock]) {
    (void) [((id<JavaUtilMap>) nil_chk(cache_)) removeWithId:[((IOSClass *) nil_chk(clazz)) getName]];
  }
}

- (jboolean)isEmpty {
  return NO;
}

- (id<FreemarkerTemplateTemplateModel>)createModelWithIOSClass:(IOSClass *)clazz {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 142
- (FreemarkerExtBeansBeansWrapper *)getWrapper {
  return wrapper_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithFreemarkerExtBeansBeansWrapper:", "ClassBasedModelFactory", NULL, 0x4, NULL, NULL },
    { "getWithNSString:", "get", "Lfreemarker.template.TemplateModel;", 0x1, "Lfreemarker.template.TemplateModelException;", NULL },
    { "getInternalWithNSString:", "getInternal", "Lfreemarker.template.TemplateModel;", 0x2, "Lfreemarker.template.TemplateModelException;Ljava.lang.ClassNotFoundException;", NULL },
    { "clearCache", NULL, "V", 0x0, NULL, NULL },
    { "removeFromCacheWithIOSClass:", "removeFromCache", "V", 0x0, NULL, NULL },
    { "isEmpty", NULL, "Z", 0x1, NULL, NULL },
    { "createModelWithIOSClass:", "createModel", "Lfreemarker.template.TemplateModel;", 0x404, "Lfreemarker.template.TemplateModelException;", NULL },
    { "getWrapper", NULL, "Lfreemarker.ext.beans.BeansWrapper;", 0x4, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "wrapper_", NULL, 0x12, "Lfreemarker.ext.beans.BeansWrapper;", NULL, NULL,  },
    { "cache_", NULL, 0x12, "Ljava.util.Map;", NULL, NULL,  },
    { "isCacheConcurrentMap_", NULL, 0x12, "Z", NULL, NULL,  },
    { "classIntrospectionsInProgress_", NULL, 0x12, "Ljava.util.Set;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerExtBeansClassBasedModelFactory = { 2, "ClassBasedModelFactory", "freemarker.ext.beans", NULL, 0x400, 8, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerExtBeansClassBasedModelFactory;
}

@end


#line 41
void FreemarkerExtBeansClassBasedModelFactory_initWithFreemarkerExtBeansBeansWrapper_(FreemarkerExtBeansClassBasedModelFactory *self, FreemarkerExtBeansBeansWrapper *wrapper) {
  (void) NSObject_init(self);
  self->cache_ = FreemarkerCore_ConcurrentMapFactory_newMaybeConcurrentHashMap();
  self->isCacheConcurrentMap_ = FreemarkerCore_ConcurrentMapFactory_isConcurrentWithJavaUtilMap_(self->cache_);
  self->classIntrospectionsInProgress_ = new_JavaUtilHashSet_init();
  
#line 42
  self->wrapper_ = wrapper;
}


#line 57
id<FreemarkerTemplateTemplateModel> FreemarkerExtBeansClassBasedModelFactory_getInternalWithNSString_(FreemarkerExtBeansClassBasedModelFactory *self, NSString *key) {
  if (self->isCacheConcurrentMap_) {
    id<FreemarkerTemplateTemplateModel> model = (id<FreemarkerTemplateTemplateModel>) check_protocol_cast([((id<JavaUtilMap>) nil_chk(self->cache_)) getWithId:key], @protocol(FreemarkerTemplateTemplateModel));
    if (model != nil) return model;
  }
  
#line 63
  FreemarkerExtBeansClassIntrospector *classIntrospector;
  jint classIntrospectorClearingCounter;
  id sharedLock = [((FreemarkerExtBeansBeansWrapper *) nil_chk(self->wrapper_)) getSharedIntrospectionLock];
  @synchronized(sharedLock) {
    id<FreemarkerTemplateTemplateModel> model = (id<FreemarkerTemplateTemplateModel>) check_protocol_cast([((id<JavaUtilMap>) nil_chk(self->cache_)) getWithId:key], @protocol(FreemarkerTemplateTemplateModel));
    if (model != nil) return model;
    
#line 70
    while (model == nil &&
#line 71
    [((id<JavaUtilSet>) nil_chk(self->classIntrospectionsInProgress_)) containsWithId:key]) {
      
#line 74
      @try {
        [nil_chk(sharedLock) wait];
        model = (id<FreemarkerTemplateTemplateModel>) check_protocol_cast([self->cache_ getWithId:key], @protocol(FreemarkerTemplateTemplateModel));
      }
      @catch (
#line 77
      JavaLangInterruptedException *e) {
        @throw new_JavaLangRuntimeException_initWithNSString_(JreStrcat("$@", @"Class inrospection data lookup aborded: ",
#line 79
        e));
      }
    }
    if (model != nil) return model;
    
#line 85
    [((id<JavaUtilSet>) nil_chk(self->classIntrospectionsInProgress_)) addWithId:key];
    
#line 89
    classIntrospector = [self->wrapper_ getClassIntrospector];
    classIntrospectorClearingCounter = [((FreemarkerExtBeansClassIntrospector *) nil_chk(classIntrospector)) getClearingCounter];
  }
  @try {
    IOSClass *clazz = FreemarkerTemplateUtilityClassUtil_forNameWithNSString_(key);
    
#line 99
    (void) [classIntrospector getWithIOSClass:clazz];
    
#line 101
    id<FreemarkerTemplateTemplateModel> model = [self createModelWithIOSClass:clazz];
    
#line 105
    if (model != nil) {
      @synchronized(sharedLock) {
        
#line 108
        if (classIntrospector == [self->wrapper_ getClassIntrospector] &&
#line 109
        classIntrospectorClearingCounter == [classIntrospector getClearingCounter]) {
          (void) [self->cache_ putWithId:key withId:model];
        }
      }
    }
    return model;
  }
  @finally {
    
#line 116
    @synchronized(sharedLock) {
      [self->classIntrospectionsInProgress_ removeWithId:key];
      [nil_chk(sharedLock) notifyAll];
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerExtBeansClassBasedModelFactory)
