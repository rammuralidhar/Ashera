//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/template/DefaultMapAdapter.java
//

#ifndef _FreemarkerTemplateDefaultMapAdapter_H_
#define _FreemarkerTemplateDefaultMapAdapter_H_

#include "AdapterTemplateModel.h"
#include "J2ObjC_header.h"
#include "TemplateHashModelEx.h"
#include "TemplateModelWithAPISupport.h"
#include "WrapperTemplateModel.h"
#include "WrappingTemplateModel.h"
#include "java/io/Serializable.h"

@class IOSClass;
@protocol FreemarkerTemplateTemplateCollectionModel;
@protocol FreemarkerTemplateTemplateModel;
@protocol FreemarkerTemplateUtilityObjectWrapperWithAPISupport;
@protocol JavaUtilMap;

/**
 @brief Adapts a Map to the corresponding TemplateModel interface(s), most importantly to TemplateHashModelEx .
 If you aren't wrapping an already existing Map , but build a hash specifically to be used from a template, also consider using SimpleHash (see comparison there). <p> Thread safety: A DefaultMapAdapter is as thread-safe as the Map that it wraps is. Normally you only have to consider read-only access, as the FreeMarker template language doesn't allow writing these hashes (though of course, Java methods called from the template can violate this rule). <p> This adapter is used by DefaultObjectWrapper if its <code>useAdaptersForCollections</code> property is <code>true</code> , which is the default when its <code>incompatibleImprovements</code> property is 2.3.22 or higher.
 @since 2.3.22
 */
@interface FreemarkerTemplateDefaultMapAdapter : FreemarkerTemplateWrappingTemplateModel < FreemarkerTemplateTemplateHashModelEx, FreemarkerTemplateAdapterTemplateModel, FreemarkerExtUtilWrapperTemplateModel, FreemarkerTemplateTemplateModelWithAPISupport, JavaIoSerializable >

#pragma mark Public

/**
 @brief Factory method for creating new adapter instances.
 @param map The map to adapt; can't be <code>null</code> .
 @param wrapper The ObjectWrapper used to wrap the items in the array.
 */
+ (FreemarkerTemplateDefaultMapAdapter *)adaptWithJavaUtilMap:(id<JavaUtilMap>)map
     withFreemarkerTemplateUtilityObjectWrapperWithAPISupport:(id<FreemarkerTemplateUtilityObjectWrapperWithAPISupport>)wrapper;

- (id<FreemarkerTemplateTemplateModel>)getWithNSString:(NSString *)key;

- (id)getAdaptedObjectWithIOSClass:(IOSClass *)hint;

- (id<FreemarkerTemplateTemplateModel>)getAPI;

- (id)getWrappedObject;

- (jboolean)isEmpty;

- (id<FreemarkerTemplateTemplateCollectionModel>)keys;

- (jint)size;

- (id<FreemarkerTemplateTemplateCollectionModel>)values;

@end

J2OBJC_EMPTY_STATIC_INIT(FreemarkerTemplateDefaultMapAdapter)

FOUNDATION_EXPORT FreemarkerTemplateDefaultMapAdapter *FreemarkerTemplateDefaultMapAdapter_adaptWithJavaUtilMap_withFreemarkerTemplateUtilityObjectWrapperWithAPISupport_(id<JavaUtilMap> map, id<FreemarkerTemplateUtilityObjectWrapperWithAPISupport> wrapper);

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerTemplateDefaultMapAdapter)

#endif // _FreemarkerTemplateDefaultMapAdapter_H_
