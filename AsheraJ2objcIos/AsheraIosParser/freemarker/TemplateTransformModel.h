//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/template/TemplateTransformModel.java
//

#ifndef _FreemarkerTemplateTemplateTransformModel_H_
#define _FreemarkerTemplateTemplateTransformModel_H_

#include "J2ObjC_header.h"
#include "TemplateModel.h"

@class JavaIoWriter;
@protocol JavaUtilMap;

/**
 @brief "transform" template language data type: user-defined directives (much like macros) specialized on filtering output; you should rather use the newer TemplateDirectiveModel instead.
 This certainly will be deprecated in FreeMarker 2.4.
 */
@protocol FreemarkerTemplateTemplateTransformModel < FreemarkerTemplateTemplateModel, NSObject, JavaObject >

/**
 @brief Returns a writer that will be used by the engine to feed the transformation input to the transform.
 Each call to this method must return a new instance of the writer so that the transformation is thread-safe.
 @param out the character stream to which to write the transformed output
 @param args the arguments (if any) passed to the transformation as a map of key/value pairs where the keys are strings and the arguments are TemplateModel instances. This is never null. If you need to convert the template models to POJOs, you can use the utility methods in the DeepUnwrap class.
 @return a writer to which the engine will feed the transformation input, or null if the transform does not support nested content (body). The returned writer can implement the TransformControl interface if it needs advanced control over the evaluation of the transformation body.
 */
- (JavaIoWriter *)getWriterWithJavaIoWriter:(JavaIoWriter *)outArg
                            withJavaUtilMap:(id<JavaUtilMap>)args;

@end

J2OBJC_EMPTY_STATIC_INIT(FreemarkerTemplateTemplateTransformModel)

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerTemplateTemplateTransformModel)

#endif // _FreemarkerTemplateTemplateTransformModel_H_
