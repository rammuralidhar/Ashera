//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/BuiltinVariable.java
//


#include "BuiltinVariable.h"
#include "Configuration.h"
#include "Environment.h"
#include "Expression.h"
#include "FMParserTokenManager.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "Macro.h"
#include "ObjectWrapper.h"
#include "ParameterRole.h"
#include "ParseException.h"
#include "SimpleDate.h"
#include "SimpleScalar.h"
#include "StringUtil.h"
#include "Template.h"
#include "TemplateDateModel.h"
#include "TemplateException.h"
#include "TemplateHashModel.h"
#include "TemplateModel.h"
#include "TemplateModelException.h"
#include "TemplateNodeModel.h"
#include "Token.h"
#include "Version.h"
#include "_CoreStringUtils.h"
#include "_MiscTemplateException.h"
#include "_TemplateAPI.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/StringBuffer.h"
#include "java/util/Arrays.h"
#include "java/util/Date.h"
#include "java/util/Locale.h"

#line 0 "/Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/BuiltinVariable.java"

@interface FreemarkerCoreBuiltinVariable () {
 @public
  NSString *name_;
}

@end

J2OBJC_FIELD_SETTER(FreemarkerCoreBuiltinVariable, name_, NSString *)

J2OBJC_INITIALIZED_DEFN(FreemarkerCoreBuiltinVariable)

NSString *FreemarkerCoreBuiltinVariable_TEMPLATE_NAME_CC_ = 
#line 38
@"templateName";
NSString *FreemarkerCoreBuiltinVariable_TEMPLATE_NAME_ = 
#line 39
@"template_name";
NSString *FreemarkerCoreBuiltinVariable_MAIN_TEMPLATE_NAME_CC_ = 
#line 40
@"mainTemplateName";
NSString *FreemarkerCoreBuiltinVariable_MAIN_TEMPLATE_NAME_ = 
#line 41
@"main_template_name";
NSString *FreemarkerCoreBuiltinVariable_CURRENT_TEMPLATE_NAME_CC_ = 
#line 42
@"currentTemplateName";
NSString *FreemarkerCoreBuiltinVariable_CURRENT_TEMPLATE_NAME_ = 
#line 43
@"current_template_name";
NSString *FreemarkerCoreBuiltinVariable_NAMESPACE_ = 
#line 44
@"namespace";
NSString *FreemarkerCoreBuiltinVariable_MAIN_ = 
#line 45
@"main";
NSString *FreemarkerCoreBuiltinVariable_GLOBALS_ = 
#line 46
@"globals";
NSString *FreemarkerCoreBuiltinVariable_LOCALS_ = 
#line 47
@"locals";
NSString *FreemarkerCoreBuiltinVariable_DATA_MODEL_CC_ = 
#line 48
@"dataModel";
NSString *FreemarkerCoreBuiltinVariable_DATA_MODEL_ = 
#line 49
@"data_model";
NSString *FreemarkerCoreBuiltinVariable_LANG_ = 
#line 50
@"lang";
NSString *FreemarkerCoreBuiltinVariable_LOCALE_ = @"locale";
NSString *FreemarkerCoreBuiltinVariable_LOCALE_OBJECT_CC_ = @"localeObject";
NSString *FreemarkerCoreBuiltinVariable_LOCALE_OBJECT_ = @"locale_object";
NSString *FreemarkerCoreBuiltinVariable_CURRENT_NODE_CC_ = @"currentNode";
NSString *FreemarkerCoreBuiltinVariable_CURRENT_NODE_ = @"current_node";
NSString *FreemarkerCoreBuiltinVariable_NODE_ = @"node";
NSString *FreemarkerCoreBuiltinVariable_PASS_ = @"pass";
NSString *FreemarkerCoreBuiltinVariable_VARS_ = @"vars";
NSString *FreemarkerCoreBuiltinVariable_VERSION_ = @"version";
NSString *FreemarkerCoreBuiltinVariable_ERROR_ = @"error";
NSString *FreemarkerCoreBuiltinVariable_OUTPUT_ENCODING_CC_ = @"outputEncoding";
NSString *FreemarkerCoreBuiltinVariable_OUTPUT_ENCODING_ = @"output_encoding";
NSString *FreemarkerCoreBuiltinVariable_URL_ESCAPING_CHARSET_CC_ = @"urlEscapingCharset";
NSString *FreemarkerCoreBuiltinVariable_URL_ESCAPING_CHARSET_ = @"url_escaping_charset";
NSString *FreemarkerCoreBuiltinVariable_NOW_ = @"now";
IOSObjectArray *FreemarkerCoreBuiltinVariable_SPEC_VAR_NAMES_;


#line 36
@implementation FreemarkerCoreBuiltinVariable


#line 100
- (instancetype)initWithFreemarkerCoreToken:(FreemarkerCoreToken *)nameTk
     withFreemarkerCoreFMParserTokenManager:(FreemarkerCoreFMParserTokenManager *)tokenManager {
  FreemarkerCoreBuiltinVariable_initWithFreemarkerCoreToken_withFreemarkerCoreFMParserTokenManager_(self, nameTk, tokenManager);
  return self;
}


#line 136
- (id<FreemarkerTemplateTemplateModel>)_evalWithFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env {
  if (name_ == FreemarkerCoreBuiltinVariable_NAMESPACE_) {
    return [((FreemarkerCoreEnvironment *) nil_chk(env)) getCurrentNamespace];
  }
  if (name_ == FreemarkerCoreBuiltinVariable_MAIN_) {
    return [((FreemarkerCoreEnvironment *) nil_chk(env)) getMainNamespace];
  }
  if (name_ == FreemarkerCoreBuiltinVariable_GLOBALS_) {
    return [((FreemarkerCoreEnvironment *) nil_chk(env)) getGlobalVariables];
  }
  if (name_ == FreemarkerCoreBuiltinVariable_LOCALS_) {
    FreemarkerCoreMacro_Context *ctx = [((FreemarkerCoreEnvironment *) nil_chk(env)) getCurrentMacroContext];
    return ctx == nil ? nil : [ctx getLocals];
  }
  if (name_ == FreemarkerCoreBuiltinVariable_DATA_MODEL_ || name_ == FreemarkerCoreBuiltinVariable_DATA_MODEL_CC_) {
    return [((FreemarkerCoreEnvironment *) nil_chk(env)) getDataModel];
  }
  if (name_ == FreemarkerCoreBuiltinVariable_VARS_) {
    return new_FreemarkerCoreBuiltinVariable_VarsHash_initWithFreemarkerCoreEnvironment_(env);
  }
  if (name_ == FreemarkerCoreBuiltinVariable_LOCALE_) {
    return new_FreemarkerTemplateSimpleScalar_initWithNSString_([((JavaUtilLocale *) nil_chk([((FreemarkerCoreEnvironment *) nil_chk(env)) getLocale])) description]);
  }
  if (name_ == FreemarkerCoreBuiltinVariable_LOCALE_OBJECT_ || name_ == FreemarkerCoreBuiltinVariable_LOCALE_OBJECT_CC_) {
    return [((id<FreemarkerTemplateObjectWrapper>) nil_chk([((FreemarkerCoreEnvironment *) nil_chk(env)) getObjectWrapper])) wrapWithId:[env getLocale]];
  }
  if (name_ == FreemarkerCoreBuiltinVariable_LANG_) {
    return new_FreemarkerTemplateSimpleScalar_initWithNSString_([((JavaUtilLocale *) nil_chk([((FreemarkerCoreEnvironment *) nil_chk(env)) getLocale])) getLanguage]);
  }
  if (name_ == FreemarkerCoreBuiltinVariable_CURRENT_NODE_ || name_ == FreemarkerCoreBuiltinVariable_NODE_ || name_ == FreemarkerCoreBuiltinVariable_CURRENT_NODE_CC_) {
    return [((FreemarkerCoreEnvironment *) nil_chk(env)) getCurrentVisitorNode];
  }
  if (name_ == FreemarkerCoreBuiltinVariable_TEMPLATE_NAME_ || name_ == FreemarkerCoreBuiltinVariable_TEMPLATE_NAME_CC_) {
    
#line 172
    return ([((FreemarkerTemplateVersion *) nil_chk([((FreemarkerTemplateConfiguration *) nil_chk([((FreemarkerCoreEnvironment *) nil_chk(env)) getConfiguration])) getIncompatibleImprovements])) intValue] >= FreemarkerTemplate_TemplateAPI_get_VERSION_INT_2_3_23_()) ? new_FreemarkerTemplateSimpleScalar_initWithNSString_(
#line 173
    [((FreemarkerTemplateTemplate *) nil_chk([env getTemplate230])) getName]) : new_FreemarkerTemplateSimpleScalar_initWithNSString_(
#line 174
    [((FreemarkerTemplateTemplate *) nil_chk([env getTemplate])) getName]);
  }
  if (name_ == FreemarkerCoreBuiltinVariable_MAIN_TEMPLATE_NAME_ || name_ == FreemarkerCoreBuiltinVariable_MAIN_TEMPLATE_NAME_CC_) {
    return FreemarkerTemplateSimpleScalar_newInstanceOrNullWithNSString_([((FreemarkerTemplateTemplate *) nil_chk([((FreemarkerCoreEnvironment *) nil_chk(env)) getMainTemplate])) getName]);
  }
  if (name_ == FreemarkerCoreBuiltinVariable_CURRENT_TEMPLATE_NAME_ || name_ == FreemarkerCoreBuiltinVariable_CURRENT_TEMPLATE_NAME_CC_) {
    return FreemarkerTemplateSimpleScalar_newInstanceOrNullWithNSString_([((FreemarkerTemplateTemplate *) nil_chk([((FreemarkerCoreEnvironment *) nil_chk(env)) getCurrentTemplate])) getName]);
  }
  if (name_ == FreemarkerCoreBuiltinVariable_PASS_) {
    return FreemarkerCoreMacro_get_DO_NOTHING_MACRO_();
  }
  if (name_ == FreemarkerCoreBuiltinVariable_VERSION_) {
    return new_FreemarkerTemplateSimpleScalar_initWithNSString_(FreemarkerTemplateConfiguration_getVersionNumber());
  }
  if (name_ == FreemarkerCoreBuiltinVariable_OUTPUT_ENCODING_ || name_ == FreemarkerCoreBuiltinVariable_OUTPUT_ENCODING_CC_) {
    NSString *s = [((FreemarkerCoreEnvironment *) nil_chk(env)) getOutputEncoding];
    return FreemarkerTemplateSimpleScalar_newInstanceOrNullWithNSString_(s);
  }
  if (name_ == FreemarkerCoreBuiltinVariable_URL_ESCAPING_CHARSET_ || name_ == FreemarkerCoreBuiltinVariable_URL_ESCAPING_CHARSET_CC_) {
    NSString *s = [((FreemarkerCoreEnvironment *) nil_chk(env)) getURLEscapingCharset];
    return FreemarkerTemplateSimpleScalar_newInstanceOrNullWithNSString_(s);
  }
  if (name_ == FreemarkerCoreBuiltinVariable_ERROR_) {
    return new_FreemarkerTemplateSimpleScalar_initWithNSString_([((FreemarkerCoreEnvironment *) nil_chk(env)) getCurrentRecoveredErrorMessage]);
  }
  if (name_ == FreemarkerCoreBuiltinVariable_NOW_) {
    return new_FreemarkerTemplateSimpleDate_initWithJavaUtilDate_withInt_(new_JavaUtilDate_init(), FreemarkerTemplateTemplateDateModel_DATETIME);
  }
  @throw new_FreemarkerCore_MiscTemplateException_initWithFreemarkerCoreExpression_withNSObjectArray_(self, [IOSObjectArray newArrayWithObjects:(id[]){ @"Invalid built-in variable: ", name_ } count:2 type:NSObject_class_()]);
}


#line 205
- (NSString *)description {
  return JreStrcat("C$", '.', name_);
}

- (NSString *)getCanonicalForm {
  return JreStrcat("C$", '.', name_);
}

- (NSString *)getNodeTypeSymbol {
  return [self getCanonicalForm];
}

- (jboolean)isLiteral {
  return NO;
}

- (FreemarkerCoreExpression *)deepCloneWithIdentifierReplaced_innerWithNSString:(NSString *)replacedIdentifier
                                                   withFreemarkerCoreExpression:(FreemarkerCoreExpression *)replacement
                                 withFreemarkerCoreExpression_ReplacemenetState:(FreemarkerCoreExpression_ReplacemenetState *)replacementState {
  
#line 223
  return self;
}


#line 243
- (jint)getParameterCount {
  return 0;
}

- (id)getParameterValueWithInt:(jint)idx {
  @throw new_JavaLangIndexOutOfBoundsException_init();
}

- (FreemarkerCoreParameterRole *)getParameterRoleWithInt:(jint)idx {
  @throw new_JavaLangIndexOutOfBoundsException_init();
}

+ (void)initialize {
  if (self == [FreemarkerCoreBuiltinVariable class]) {
    FreemarkerCoreBuiltinVariable_SPEC_VAR_NAMES_ = [IOSObjectArray newArrayWithObjects:(id[]){
#line 68
      FreemarkerCoreBuiltinVariable_CURRENT_NODE_CC_,
#line 69
      FreemarkerCoreBuiltinVariable_CURRENT_TEMPLATE_NAME_CC_,
#line 70
      FreemarkerCoreBuiltinVariable_CURRENT_NODE_,
#line 71
      FreemarkerCoreBuiltinVariable_CURRENT_TEMPLATE_NAME_,
#line 72
      FreemarkerCoreBuiltinVariable_DATA_MODEL_CC_,
#line 73
      FreemarkerCoreBuiltinVariable_DATA_MODEL_,
#line 74
      FreemarkerCoreBuiltinVariable_ERROR_,
#line 75
      FreemarkerCoreBuiltinVariable_GLOBALS_,
#line 76
      FreemarkerCoreBuiltinVariable_LANG_,
#line 77
      FreemarkerCoreBuiltinVariable_LOCALE_,
#line 78
      FreemarkerCoreBuiltinVariable_LOCALE_OBJECT_CC_,
#line 79
      FreemarkerCoreBuiltinVariable_LOCALE_OBJECT_,
#line 80
      FreemarkerCoreBuiltinVariable_LOCALS_,
#line 81
      FreemarkerCoreBuiltinVariable_MAIN_,
#line 82
      FreemarkerCoreBuiltinVariable_MAIN_TEMPLATE_NAME_CC_,
#line 83
      FreemarkerCoreBuiltinVariable_MAIN_TEMPLATE_NAME_,
#line 84
      FreemarkerCoreBuiltinVariable_NAMESPACE_,
#line 85
      FreemarkerCoreBuiltinVariable_NODE_,
#line 86
      FreemarkerCoreBuiltinVariable_NOW_,
#line 87
      FreemarkerCoreBuiltinVariable_OUTPUT_ENCODING_CC_,
#line 88
      FreemarkerCoreBuiltinVariable_OUTPUT_ENCODING_,
#line 89
      FreemarkerCoreBuiltinVariable_PASS_,
#line 90
      FreemarkerCoreBuiltinVariable_TEMPLATE_NAME_CC_,
#line 91
      FreemarkerCoreBuiltinVariable_TEMPLATE_NAME_,
#line 92
      FreemarkerCoreBuiltinVariable_URL_ESCAPING_CHARSET_CC_,
#line 93
      FreemarkerCoreBuiltinVariable_URL_ESCAPING_CHARSET_,
#line 94
      FreemarkerCoreBuiltinVariable_VARS_,
#line 95
      FreemarkerCoreBuiltinVariable_VERSION_ } count:28 type:NSString_class_()];
      J2OBJC_SET_INITIALIZED(FreemarkerCoreBuiltinVariable)
    }
  }

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithFreemarkerCoreToken:withFreemarkerCoreFMParserTokenManager:", "BuiltinVariable", NULL, 0x0, "Lfreemarker.core.ParseException;", NULL },
    { "_evalWithFreemarkerCoreEnvironment:", "_eval", "Lfreemarker.template.TemplateModel;", 0x0, "Lfreemarker.template.TemplateException;", NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getCanonicalForm", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getNodeTypeSymbol", NULL, "Ljava.lang.String;", 0x0, NULL, NULL },
    { "isLiteral", NULL, "Z", 0x0, NULL, NULL },
    { "deepCloneWithIdentifierReplaced_innerWithNSString:withFreemarkerCoreExpression:withFreemarkerCoreExpression_ReplacemenetState:", "deepCloneWithIdentifierReplaced_inner", "Lfreemarker.core.Expression;", 0x4, NULL, NULL },
    { "getParameterCount", NULL, "I", 0x0, NULL, NULL },
    { "getParameterValueWithInt:", "getParameterValue", "Ljava.lang.Object;", 0x0, NULL, NULL },
    { "getParameterRoleWithInt:", "getParameterRole", "Lfreemarker.core.ParameterRole;", 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "TEMPLATE_NAME_CC_", NULL, 0x18, "Ljava.lang.String;", &FreemarkerCoreBuiltinVariable_TEMPLATE_NAME_CC_, NULL,  },
    { "TEMPLATE_NAME_", NULL, 0x18, "Ljava.lang.String;", &FreemarkerCoreBuiltinVariable_TEMPLATE_NAME_, NULL,  },
    { "MAIN_TEMPLATE_NAME_CC_", NULL, 0x18, "Ljava.lang.String;", &FreemarkerCoreBuiltinVariable_MAIN_TEMPLATE_NAME_CC_, NULL,  },
    { "MAIN_TEMPLATE_NAME_", NULL, 0x18, "Ljava.lang.String;", &FreemarkerCoreBuiltinVariable_MAIN_TEMPLATE_NAME_, NULL,  },
    { "CURRENT_TEMPLATE_NAME_CC_", NULL, 0x18, "Ljava.lang.String;", &FreemarkerCoreBuiltinVariable_CURRENT_TEMPLATE_NAME_CC_, NULL,  },
    { "CURRENT_TEMPLATE_NAME_", NULL, 0x18, "Ljava.lang.String;", &FreemarkerCoreBuiltinVariable_CURRENT_TEMPLATE_NAME_, NULL,  },
    { "NAMESPACE_", NULL, 0x18, "Ljava.lang.String;", &FreemarkerCoreBuiltinVariable_NAMESPACE_, NULL,  },
    { "MAIN_", NULL, 0x18, "Ljava.lang.String;", &FreemarkerCoreBuiltinVariable_MAIN_, NULL,  },
    { "GLOBALS_", NULL, 0x18, "Ljava.lang.String;", &FreemarkerCoreBuiltinVariable_GLOBALS_, NULL,  },
    { "LOCALS_", NULL, 0x18, "Ljava.lang.String;", &FreemarkerCoreBuiltinVariable_LOCALS_, NULL,  },
    { "DATA_MODEL_CC_", NULL, 0x18, "Ljava.lang.String;", &FreemarkerCoreBuiltinVariable_DATA_MODEL_CC_, NULL,  },
    { "DATA_MODEL_", NULL, 0x18, "Ljava.lang.String;", &FreemarkerCoreBuiltinVariable_DATA_MODEL_, NULL,  },
    { "LANG_", NULL, 0x18, "Ljava.lang.String;", &FreemarkerCoreBuiltinVariable_LANG_, NULL,  },
    { "LOCALE_", NULL, 0x18, "Ljava.lang.String;", &FreemarkerCoreBuiltinVariable_LOCALE_, NULL,  },
    { "LOCALE_OBJECT_CC_", NULL, 0x18, "Ljava.lang.String;", &FreemarkerCoreBuiltinVariable_LOCALE_OBJECT_CC_, NULL,  },
    { "LOCALE_OBJECT_", NULL, 0x18, "Ljava.lang.String;", &FreemarkerCoreBuiltinVariable_LOCALE_OBJECT_, NULL,  },
    { "CURRENT_NODE_CC_", NULL, 0x18, "Ljava.lang.String;", &FreemarkerCoreBuiltinVariable_CURRENT_NODE_CC_, NULL,  },
    { "CURRENT_NODE_", NULL, 0x18, "Ljava.lang.String;", &FreemarkerCoreBuiltinVariable_CURRENT_NODE_, NULL,  },
    { "NODE_", NULL, 0x18, "Ljava.lang.String;", &FreemarkerCoreBuiltinVariable_NODE_, NULL,  },
    { "PASS_", NULL, 0x18, "Ljava.lang.String;", &FreemarkerCoreBuiltinVariable_PASS_, NULL,  },
    { "VARS_", NULL, 0x18, "Ljava.lang.String;", &FreemarkerCoreBuiltinVariable_VARS_, NULL,  },
    { "VERSION_", NULL, 0x18, "Ljava.lang.String;", &FreemarkerCoreBuiltinVariable_VERSION_, NULL,  },
    { "ERROR_", NULL, 0x18, "Ljava.lang.String;", &FreemarkerCoreBuiltinVariable_ERROR_, NULL,  },
    { "OUTPUT_ENCODING_CC_", NULL, 0x18, "Ljava.lang.String;", &FreemarkerCoreBuiltinVariable_OUTPUT_ENCODING_CC_, NULL,  },
    { "OUTPUT_ENCODING_", NULL, 0x18, "Ljava.lang.String;", &FreemarkerCoreBuiltinVariable_OUTPUT_ENCODING_, NULL,  },
    { "URL_ESCAPING_CHARSET_CC_", NULL, 0x18, "Ljava.lang.String;", &FreemarkerCoreBuiltinVariable_URL_ESCAPING_CHARSET_CC_, NULL,  },
    { "URL_ESCAPING_CHARSET_", NULL, 0x18, "Ljava.lang.String;", &FreemarkerCoreBuiltinVariable_URL_ESCAPING_CHARSET_, NULL,  },
    { "NOW_", NULL, 0x18, "Ljava.lang.String;", &FreemarkerCoreBuiltinVariable_NOW_, NULL,  },
    { "SPEC_VAR_NAMES_", NULL, 0x18, "[Ljava.lang.String;", &FreemarkerCoreBuiltinVariable_SPEC_VAR_NAMES_, NULL,  },
    { "name_", NULL, 0x12, "Ljava.lang.String;", NULL, NULL,  },
  };
  static const char *inner_classes[] = {"Lfreemarker.core.BuiltinVariable$VarsHash;"};
  static const J2ObjcClassInfo _FreemarkerCoreBuiltinVariable = { 2, "BuiltinVariable", "freemarker.core", NULL, 0x10, 10, methods, 30, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_FreemarkerCoreBuiltinVariable;
}

@end


#line 100
void FreemarkerCoreBuiltinVariable_initWithFreemarkerCoreToken_withFreemarkerCoreFMParserTokenManager_(FreemarkerCoreBuiltinVariable *self, FreemarkerCoreToken *nameTk, FreemarkerCoreFMParserTokenManager *tokenManager) {
  (void) FreemarkerCoreExpression_init(self);
  
#line 101
  NSString *name = ((FreemarkerCoreToken *) nil_chk(nameTk))->image_;
  if (JavaUtilArrays_binarySearchWithNSObjectArray_withId_(FreemarkerCoreBuiltinVariable_SPEC_VAR_NAMES_, name) < 0) {
    JavaLangStringBuffer *sb = new_JavaLangStringBuffer_init();
    (void) [sb appendWithNSString:@"Unknown special variable name: "];
    (void) [((JavaLangStringBuffer *) nil_chk([sb appendWithNSString:FreemarkerTemplateUtilityStringUtil_jQuoteWithNSString_(name)])) appendWithNSString:@"."];
    
#line 107
    jint shownNamingConvention;
    {
      jint namingConvention = ((FreemarkerCoreFMParserTokenManager *) nil_chk(tokenManager))->namingConvention_;
      shownNamingConvention = namingConvention != FreemarkerTemplateConfiguration_AUTO_DETECT_NAMING_CONVENTION ?
#line 111
      namingConvention : FreemarkerTemplateConfiguration_LEGACY_NAMING_CONVENTION;
    }
    
#line 114
    (void) [sb appendWithNSString:@" The allowed special variable names are: "];
    jboolean first = YES;
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(FreemarkerCoreBuiltinVariable_SPEC_VAR_NAMES_))->size_; i++) {
      NSString *correctName = IOSObjectArray_Get(FreemarkerCoreBuiltinVariable_SPEC_VAR_NAMES_, i);
      jint correctNameNamingConvetion = FreemarkerCore_CoreStringUtils_getIdentifierNamingConventionWithNSString_(correctName);
      if (shownNamingConvention == FreemarkerTemplateConfiguration_CAMEL_CASE_NAMING_CONVENTION ?
#line 120
      correctNameNamingConvetion != FreemarkerTemplateConfiguration_LEGACY_NAMING_CONVENTION :
#line 121
      correctNameNamingConvetion != FreemarkerTemplateConfiguration_CAMEL_CASE_NAMING_CONVENTION) {
        if (first) {
          first = NO;
        }
        else {
          
#line 125
          (void) [sb appendWithNSString:@", "];
        }
        (void) [sb appendWithNSString:correctName];
      }
    }
    @throw new_FreemarkerCoreParseException_initWithNSString_withId_withId_([sb description], nil, nameTk);
  }
  
#line 133
  self->name_ = [((NSString *) nil_chk(name)) intern];
}


#line 100
FreemarkerCoreBuiltinVariable *new_FreemarkerCoreBuiltinVariable_initWithFreemarkerCoreToken_withFreemarkerCoreFMParserTokenManager_(FreemarkerCoreToken *nameTk, FreemarkerCoreFMParserTokenManager *tokenManager) {
  FreemarkerCoreBuiltinVariable *self = [FreemarkerCoreBuiltinVariable alloc];
  FreemarkerCoreBuiltinVariable_initWithFreemarkerCoreToken_withFreemarkerCoreFMParserTokenManager_(self, nameTk, tokenManager);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreBuiltinVariable)


#line 226
@implementation FreemarkerCoreBuiltinVariable_VarsHash


#line 230
- (instancetype)initWithFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env {
  FreemarkerCoreBuiltinVariable_VarsHash_initWithFreemarkerCoreEnvironment_(self, env);
  return self;
}


#line 234
- (id<FreemarkerTemplateTemplateModel>)getWithNSString:(NSString *)key {
  return [((FreemarkerCoreEnvironment *) nil_chk(env_)) getVariableWithNSString:key];
}

- (jboolean)isEmpty {
  return NO;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithFreemarkerCoreEnvironment:", "VarsHash", NULL, 0x0, NULL, NULL },
    { "getWithNSString:", "get", "Lfreemarker.template.TemplateModel;", 0x1, "Lfreemarker.template.TemplateModelException;", NULL },
    { "isEmpty", NULL, "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "env_", NULL, 0x0, "Lfreemarker.core.Environment;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerCoreBuiltinVariable_VarsHash = { 2, "VarsHash", "freemarker.core", "BuiltinVariable", 0x8, 3, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerCoreBuiltinVariable_VarsHash;
}

@end


#line 230
void FreemarkerCoreBuiltinVariable_VarsHash_initWithFreemarkerCoreEnvironment_(FreemarkerCoreBuiltinVariable_VarsHash *self, FreemarkerCoreEnvironment *env) {
  (void) NSObject_init(self);
  
#line 231
  self->env_ = env;
}


#line 230
FreemarkerCoreBuiltinVariable_VarsHash *new_FreemarkerCoreBuiltinVariable_VarsHash_initWithFreemarkerCoreEnvironment_(FreemarkerCoreEnvironment *env) {
  FreemarkerCoreBuiltinVariable_VarsHash *self = [FreemarkerCoreBuiltinVariable_VarsHash alloc];
  FreemarkerCoreBuiltinVariable_VarsHash_initWithFreemarkerCoreEnvironment_(self, env);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreBuiltinVariable_VarsHash)
