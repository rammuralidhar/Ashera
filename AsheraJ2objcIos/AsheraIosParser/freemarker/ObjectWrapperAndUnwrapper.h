//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/template/ObjectWrapperAndUnwrapper.java
//

#ifndef _FreemarkerTemplateObjectWrapperAndUnwrapper_H_
#define _FreemarkerTemplateObjectWrapperAndUnwrapper_H_

#include "J2ObjC_header.h"
#include "ObjectWrapper.h"

@class IOSClass;
@protocol FreemarkerTemplateTemplateModel;

/**
 @brief <b>Experimental - subject to change:</b> Adds functionality to ObjectWrapper that creates a plain Java object from a TemplateModel .
 This is usually implemented by ObjectWrapper -s and reverses ObjectWrapper#wrap(Object) . However, an implementation of this interface should make a reasonable effort to "unwrap" TemplateModel -s that wasn't the result of object wrapping (such as those created directly in FTL), or which was created by another ObjectWrapper . The author of an ObjectWrapperAndUnwrapper should be aware of the TemplateModelAdapter and WrapperTemplateModel interfaces, which should be used for unwrapping if the TemplateModel implements them. <p> <b>Experimental status warning:</b> This interface is subject to change on non-backward compatible ways, hence, it shouldn't be implemented outside FreeMarker yet.
 @since 2.3.22
 */
@protocol FreemarkerTemplateObjectWrapperAndUnwrapper < FreemarkerTemplateObjectWrapper, NSObject, JavaObject >

/**
 @brief Unwraps a TemplateModel to a plain Java object.
 @return The plain Java object. Can be <code>null</code> , if <code>null</code> is the appropriate Java value to represent the template model. <code>null</code> must not be used to indicate an unwrapping failure. It must NOT be #CANT_UNWRAP_TO_TARGET_CLASS .
 @throws TemplateModelException If the unwrapping fails from any reason.
 @since 2.3.22
 */
- (id)unwrapWithFreemarkerTemplateTemplateModel:(id<FreemarkerTemplateTemplateModel>)tm;

/**
 @brief Attempts to unwrap a TemplateModel to a plain Java object that's the instance of the given class (or is <code>null</code> ).
 @param targetClass The class that the return value must be an instance of (except when the return value is <code>null</code> ). Can't be <code>null</code> ; if the caller doesn't care, it should either use {#unwrap(TemplateModel)}, or <code>Object.class</code> as the parameter value.
 @return The unwrapped value that's either an instance of <code>targetClass</code> , or is <code>null</code> (if <code>null</code> is the appropriate Java value to represent the template model), or is #CANT_UNWRAP_TO_TARGET_CLASS if the unwrapping can't satisfy the <code>targetClass</code> (nor the result can be <code>null</code> ). However, #CANT_UNWRAP_TO_TARGET_CLASS must not be returned if the <code>targetClass</code> parameter was <code>Object.class</code> .
 @throws TemplateModelException If the unwrapping fails for a reason than doesn't fit the meaning of the #CANT_UNWRAP_TO_TARGET_CLASS return value.
 @since 2.3.22
 */
- (id)tryUnwrapToWithFreemarkerTemplateTemplateModel:(id<FreemarkerTemplateTemplateModel>)tm
                                        withIOSClass:(IOSClass *)targetClass;

@end

@interface FreemarkerTemplateObjectWrapperAndUnwrapper : NSObject
@end

J2OBJC_STATIC_INIT(FreemarkerTemplateObjectWrapperAndUnwrapper)

FOUNDATION_EXPORT id FreemarkerTemplateObjectWrapperAndUnwrapper_CANT_UNWRAP_TO_TARGET_CLASS_;
J2OBJC_STATIC_FIELD_GETTER(FreemarkerTemplateObjectWrapperAndUnwrapper, CANT_UNWRAP_TO_TARGET_CLASS_, id)

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerTemplateObjectWrapperAndUnwrapper)

#endif // _FreemarkerTemplateObjectWrapperAndUnwrapper_H_
