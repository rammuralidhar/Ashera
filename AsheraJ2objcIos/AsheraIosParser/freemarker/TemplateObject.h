//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/TemplateObject.java
//

#ifndef _FreemarkerCoreTemplateObject_H_
#define _FreemarkerCoreTemplateObject_H_

#include "J2ObjC_header.h"

@class FreemarkerCoreParameterRole;
@class FreemarkerCoreToken;
@class FreemarkerTemplateTemplate;

#define FreemarkerCoreTemplateObject_RUNTIME_EVAL_LINE_DISPLACEMENT -1000000000

/**
 @brief <b>Internal API - subject to change:</b> Represent a node in the parsed template (either a Expression or a TemplateElement ).
 */
@interface FreemarkerCoreTemplateObject : NSObject {
 @public
  jint beginColumn_, beginLine_, endColumn_, endLine_;
}

#pragma mark Public

- (instancetype)init;

/**
 @return whether the point in the template file specified by the column and line numbers is contained within this template object.
 */
- (jboolean)containsWithInt:(jint)column
                    withInt:(jint)line;

- (jint)getBeginColumn;

- (jint)getBeginLine;

/**
 @brief FTL generated from the AST of the node, which must be parseable to an AST that does the same as the original source, assuming we turn off automatic white-space removal when parsing the canonical form.
 */
- (NSString *)getCanonicalForm;

- (jint)getEndColumn;

- (jint)getEndLine;

- (NSString *)getEndLocation;

/**
 @brief As of 2.3.20. the same as #getEndLocation .
 Meant to be used where there's a risk of XSS when viewing error messages.
 */
- (NSString *)getEndLocationQuoted;

- (NSString *)getSource;

/**
 @brief Returns a string that indicates where in the template source, this object is.
 */
- (NSString *)getStartLocation;

/**
 @brief As of 2.3.20. the same as #getStartLocation .
 Meant to be used where there's a risk of XSS when viewing error messages.
 */
- (NSString *)getStartLocationQuoted;

/**
 */
- (FreemarkerTemplateTemplate *)getTemplate;

- (NSString *)description;

#pragma mark Package-Private

- (FreemarkerCoreTemplateObject *)copyLocationFromWithFreemarkerCoreTemplateObject:(FreemarkerCoreTemplateObject *)from OBJC_METHOD_FAMILY_NONE;

/**
 @brief A very sort single-line string that describes what kind of AST node this is, without describing any embedded expression or child element.
 Examples: <code>"#if"</code> , <code>"+"</code> , <tt>"${...}</tt>. These values should be suitable as tree node labels in a tree view. Yet, they should be consistent and complete enough so that an AST that is equivalent with the original could be reconstructed from the tree view. Thus, for literal values that are leaf nodes the symbols should be the canonical form of value. Note that TemplateElement#getDescription() has similar role, only it doesn't go under the element level (i.e. down to the expression level), instead it always prints the embedded expressions itself.
 */
- (NSString *)getNodeTypeSymbol;

/**
 @brief Returns highest valid parameter index + 1.
 So one should scan indexes with #getParameterValue(int) starting from 0 up until but excluding this. For example, for the binary "+" operator this will give 2, so the legal indexes are 0 and 1. Note that if a parameter is optional in a template-object-type and happens to be omitted in an instance, this will still return the same value and the value of that parameter will be <code>null</code> .
 */
- (jint)getParameterCount;

/**
 @brief Returns the role of the parameter at the given index, like ParameterRole#LEFT_HAND_OPERAND .
 As of this writing (2013-06-17), for directive parameters it will always give ParameterRole#UNKNOWN , because there was no need to be more specific so far. This should be improved as need.
 @throws IndexOutOfBoundsException if <code>idx</code> is less than 0 or not less than #getParameterCount() .
 */
- (FreemarkerCoreParameterRole *)getParameterRoleWithInt:(jint)idx;

/**
 @brief Returns the value of the parameter identified by the index.
 For example, the binary "+" operator will have an LHO Expression at index 0, and and RHO Expression at index 1. Or, the binary "." operator will have an LHO Expression at index 0, and an RHO String (!) at index 1. Or, the <code>#include</code> directive will have a path Expression at index 0, a "parse" Expression at index 1, etc. <p>The index value doesn't correspond to the source-code location in general. It's an arbitrary identifier that corresponds to the role of the parameter instead. This also means that when a parameter is omitted, the index of the other parameters won't shift.
 @return <code>null</code> or any kind of Object , very often an Expression . However, if there's a TemplateObject stored inside the returned value, it must itself be be a TemplateObject too, otherwise the AST couldn't be (easily) fully traversed. That is, non- TemplateObject values can only be used for leafs.
 @throws IndexOutOfBoundsException if <code>idx</code> is less than 0 or not less than #getParameterCount() .
 */
- (id)getParameterValueWithInt:(jint)idx;

- (void)setLocationWithFreemarkerTemplateTemplate:(FreemarkerTemplateTemplate *)template_
                                          withInt:(jint)beginColumn
                                          withInt:(jint)beginLine
                                          withInt:(jint)endColumn
                                          withInt:(jint)endLine;

- (void)setLocationWithFreemarkerTemplateTemplate:(FreemarkerTemplateTemplate *)template_
                 withFreemarkerCoreTemplateObject:(FreemarkerCoreTemplateObject *)begin
                 withFreemarkerCoreTemplateObject:(FreemarkerCoreTemplateObject *)end;

- (void)setLocationWithFreemarkerTemplateTemplate:(FreemarkerTemplateTemplate *)template_
                 withFreemarkerCoreTemplateObject:(FreemarkerCoreTemplateObject *)begin
                          withFreemarkerCoreToken:(FreemarkerCoreToken *)end;

- (void)setLocationWithFreemarkerTemplateTemplate:(FreemarkerTemplateTemplate *)template_
                          withFreemarkerCoreToken:(FreemarkerCoreToken *)begin
                 withFreemarkerCoreTemplateObject:(FreemarkerCoreTemplateObject *)end;

- (void)setLocationWithFreemarkerTemplateTemplate:(FreemarkerTemplateTemplate *)template_
                          withFreemarkerCoreToken:(FreemarkerCoreToken *)begin
                          withFreemarkerCoreToken:(FreemarkerCoreToken *)end;

@end

J2OBJC_EMPTY_STATIC_INIT(FreemarkerCoreTemplateObject)

J2OBJC_STATIC_FIELD_GETTER(FreemarkerCoreTemplateObject, RUNTIME_EVAL_LINE_DISPLACEMENT, jint)

FOUNDATION_EXPORT void FreemarkerCoreTemplateObject_init(FreemarkerCoreTemplateObject *self);

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerCoreTemplateObject)

#endif // _FreemarkerCoreTemplateObject_H_
