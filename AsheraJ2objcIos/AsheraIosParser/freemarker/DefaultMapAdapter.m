//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/template/DefaultMapAdapter.java
//


#include "DefaultMapAdapter.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "ObjectWrapper.h"
#include "ObjectWrapperWithAPISupport.h"
#include "SimpleCollection.h"
#include "TemplateCollectionModel.h"
#include "TemplateHashModel.h"
#include "TemplateModel.h"
#include "TemplateModelException.h"
#include "WrappingTemplateModel.h"
#include "_DelayedJQuote.h"
#include "_TemplateModelException.h"
#include "java/lang/Character.h"
#include "java/lang/ClassCastException.h"
#include "java/lang/NullPointerException.h"
#include "java/util/Collection.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/SortedMap.h"

#line 0 "/Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/template/DefaultMapAdapter.java"

@interface FreemarkerTemplateDefaultMapAdapter () {
 @public
  id<JavaUtilMap> map_;
}

- (instancetype)initWithJavaUtilMap:(id<JavaUtilMap>)map
withFreemarkerTemplateObjectWrapper:(id<FreemarkerTemplateObjectWrapper>)wrapper;

@end

J2OBJC_FIELD_SETTER(FreemarkerTemplateDefaultMapAdapter, map_, id<JavaUtilMap>)

__attribute__((unused)) static void FreemarkerTemplateDefaultMapAdapter_initWithJavaUtilMap_withFreemarkerTemplateObjectWrapper_(FreemarkerTemplateDefaultMapAdapter *self, id<JavaUtilMap> map, id<FreemarkerTemplateObjectWrapper> wrapper);

__attribute__((unused)) static FreemarkerTemplateDefaultMapAdapter *new_FreemarkerTemplateDefaultMapAdapter_initWithJavaUtilMap_withFreemarkerTemplateObjectWrapper_(id<JavaUtilMap> map, id<FreemarkerTemplateObjectWrapper> wrapper) NS_RETURNS_RETAINED;


#line 44
@implementation FreemarkerTemplateDefaultMapAdapter


#line 58
+ (FreemarkerTemplateDefaultMapAdapter *)adaptWithJavaUtilMap:(id<JavaUtilMap>)map
     withFreemarkerTemplateUtilityObjectWrapperWithAPISupport:(id<FreemarkerTemplateUtilityObjectWrapperWithAPISupport>)wrapper {
  return FreemarkerTemplateDefaultMapAdapter_adaptWithJavaUtilMap_withFreemarkerTemplateUtilityObjectWrapperWithAPISupport_(map, wrapper);
}


#line 62
- (instancetype)initWithJavaUtilMap:(id<JavaUtilMap>)map
withFreemarkerTemplateObjectWrapper:(id<FreemarkerTemplateObjectWrapper>)wrapper {
  FreemarkerTemplateDefaultMapAdapter_initWithJavaUtilMap_withFreemarkerTemplateObjectWrapper_(self, map, wrapper);
  return self;
}


#line 67
- (id<FreemarkerTemplateTemplateModel>)getWithNSString:(NSString *)key {
  id val;
  @try {
    val = [((id<JavaUtilMap>) nil_chk(map_)) getWithId:key];
  }
  @catch (
#line 71
  JavaLangClassCastException *e) {
    @throw new_FreemarkerCore_TemplateModelException_initWithJavaLangThrowable_withNSObjectArray_(
#line 73
    e, [IOSObjectArray newArrayWithObjects:(id[]){
#line 74
      @"ClassCastException while getting Map entry with String key ", new_FreemarkerCore_DelayedJQuote_initWithId_(
#line 75
      key) } count:2 type:NSObject_class_()]);
    }
    @catch (JavaLangNullPointerException *e) {
      @throw new_FreemarkerCore_TemplateModelException_initWithJavaLangThrowable_withNSObjectArray_(
#line 79
      e, [IOSObjectArray newArrayWithObjects:(id[]){
#line 80
        @"NullPointerException while getting Map entry with String key ", new_FreemarkerCore_DelayedJQuote_initWithId_(
#line 81
        key) } count:2 type:NSObject_class_()]);
      }
      
#line 85
      if (val == nil) {
        
#line 88
        if (((jint) [((NSString *) nil_chk(key)) length]) == 1 && !([JavaUtilSortedMap_class_() isInstance:map_])) {
          JavaLangCharacter *charKey = new_JavaLangCharacter_initWithChar_([key charAtWithInt:0]);
          @try {
            val = [((id<JavaUtilMap>) nil_chk(map_)) getWithId:charKey];
            if (val == nil) {
              id<FreemarkerTemplateTemplateModel> wrappedNull = [self wrapWithId:nil];
              if (wrappedNull == nil || !([map_ containsKeyWithId:key] || [map_ containsKeyWithId:charKey])) {
                return nil;
              }
              else {
                
#line 97
                return wrappedNull;
              }
            }
          }
          @catch (
#line 100
          JavaLangClassCastException *e) {
            @throw new_FreemarkerCore_TemplateModelException_initWithJavaLangThrowable_withNSObjectArray_(
#line 102
            e, [IOSObjectArray newArrayWithObjects:(id[]){
#line 103
              @"Class casting exception while getting Map entry with Character key ", new_FreemarkerCore_DelayedJQuote_initWithId_(
#line 104
              charKey) } count:2 type:NSObject_class_()]);
            }
            @catch (JavaLangNullPointerException *e) {
              @throw new_FreemarkerCore_TemplateModelException_initWithJavaLangThrowable_withNSObjectArray_(
#line 108
              e, [IOSObjectArray newArrayWithObjects:(id[]){
#line 109
                @"NullPointerException while getting Map entry with Character key ", new_FreemarkerCore_DelayedJQuote_initWithId_(
#line 110
                charKey) } count:2 type:NSObject_class_()]);
              }
            }
            else {
              id<FreemarkerTemplateTemplateModel> wrappedNull = [self wrapWithId:nil];
              if (wrappedNull == nil || ![((id<JavaUtilMap>) nil_chk(map_)) containsKeyWithId:key]) {
                return nil;
              }
              else {
                
#line 118
                return wrappedNull;
              }
            }
          }
          
#line 123
          return [self wrapWithId:val];
        }


#line 126
- (jboolean)isEmpty {
  return [((id<JavaUtilMap>) nil_chk(map_)) isEmpty];
}

- (jint)size {
  return [((id<JavaUtilMap>) nil_chk(map_)) size];
}

- (id<FreemarkerTemplateTemplateCollectionModel>)keys {
  return new_FreemarkerTemplateSimpleCollection_initWithJavaUtilCollection_withFreemarkerTemplateObjectWrapper_([((id<JavaUtilMap>) nil_chk(map_)) keySet], [self getObjectWrapper]);
}

- (id<FreemarkerTemplateTemplateCollectionModel>)values {
  return new_FreemarkerTemplateSimpleCollection_initWithJavaUtilCollection_withFreemarkerTemplateObjectWrapper_([((id<JavaUtilMap>) nil_chk(map_)) values], [self getObjectWrapper]);
}

- (id)getAdaptedObjectWithIOSClass:(IOSClass *)hint {
  return map_;
}

- (id)getWrappedObject {
  return map_;
}

- (id<FreemarkerTemplateTemplateModel>)getAPI {
  return [((id<FreemarkerTemplateUtilityObjectWrapperWithAPISupport>) nil_chk(((id<FreemarkerTemplateUtilityObjectWrapperWithAPISupport>) check_protocol_cast([self getObjectWrapper], @protocol(FreemarkerTemplateUtilityObjectWrapperWithAPISupport))))) wrapAsAPIWithId:map_];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "adaptWithJavaUtilMap:withFreemarkerTemplateUtilityObjectWrapperWithAPISupport:", "adapt", "Lfreemarker.template.DefaultMapAdapter;", 0x9, NULL, NULL },
    { "initWithJavaUtilMap:withFreemarkerTemplateObjectWrapper:", "DefaultMapAdapter", NULL, 0x2, NULL, NULL },
    { "getWithNSString:", "get", "Lfreemarker.template.TemplateModel;", 0x1, "Lfreemarker.template.TemplateModelException;", NULL },
    { "isEmpty", NULL, "Z", 0x1, NULL, NULL },
    { "size", NULL, "I", 0x1, NULL, NULL },
    { "keys", NULL, "Lfreemarker.template.TemplateCollectionModel;", 0x1, NULL, NULL },
    { "values", NULL, "Lfreemarker.template.TemplateCollectionModel;", 0x1, NULL, NULL },
    { "getAdaptedObjectWithIOSClass:", "getAdaptedObject", "Ljava.lang.Object;", 0x1, NULL, NULL },
    { "getWrappedObject", NULL, "Ljava.lang.Object;", 0x1, NULL, NULL },
    { "getAPI", NULL, "Lfreemarker.template.TemplateModel;", 0x1, "Lfreemarker.template.TemplateModelException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "map_", NULL, 0x12, "Ljava.util.Map;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerTemplateDefaultMapAdapter = { 2, "DefaultMapAdapter", "freemarker.template", NULL, 0x1, 10, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerTemplateDefaultMapAdapter;
}

@end


#line 58
FreemarkerTemplateDefaultMapAdapter *FreemarkerTemplateDefaultMapAdapter_adaptWithJavaUtilMap_withFreemarkerTemplateUtilityObjectWrapperWithAPISupport_(id<JavaUtilMap> map, id<FreemarkerTemplateUtilityObjectWrapperWithAPISupport> wrapper) {
  FreemarkerTemplateDefaultMapAdapter_initialize();
  
#line 59
  return new_FreemarkerTemplateDefaultMapAdapter_initWithJavaUtilMap_withFreemarkerTemplateObjectWrapper_(map, wrapper);
}


#line 62
void FreemarkerTemplateDefaultMapAdapter_initWithJavaUtilMap_withFreemarkerTemplateObjectWrapper_(FreemarkerTemplateDefaultMapAdapter *self, id<JavaUtilMap> map, id<FreemarkerTemplateObjectWrapper> wrapper) {
  (void) FreemarkerTemplateWrappingTemplateModel_initWithFreemarkerTemplateObjectWrapper_(self, wrapper);
  self->map_ = map;
}


#line 62
FreemarkerTemplateDefaultMapAdapter *new_FreemarkerTemplateDefaultMapAdapter_initWithJavaUtilMap_withFreemarkerTemplateObjectWrapper_(id<JavaUtilMap> map, id<FreemarkerTemplateObjectWrapper> wrapper) {
  FreemarkerTemplateDefaultMapAdapter *self = [FreemarkerTemplateDefaultMapAdapter alloc];
  FreemarkerTemplateDefaultMapAdapter_initWithJavaUtilMap_withFreemarkerTemplateObjectWrapper_(self, map, wrapper);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerTemplateDefaultMapAdapter)
