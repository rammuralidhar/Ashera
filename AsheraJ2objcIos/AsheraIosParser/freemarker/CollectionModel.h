//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/ext/beans/CollectionModel.java
//

#ifndef _FreemarkerExtBeansCollectionModel_H_
#define _FreemarkerExtBeansCollectionModel_H_

#include "J2ObjC_header.h"
#include "StringModel.h"
#include "TemplateCollectionModel.h"
#include "TemplateSequenceModel.h"

@class FreemarkerExtBeansBeansWrapper;
@protocol FreemarkerExtUtilModelFactory;
@protocol FreemarkerTemplateTemplateModel;
@protocol FreemarkerTemplateTemplateModelIterator;
@protocol JavaUtilCollection;

/**
 @brief <p>A special case of BeanModel that can wrap Java collections and that implements the TemplateCollectionModel in order to be usable in a <tt>&lt;#list&gt;</tt> block.
 </p>
 */
@interface FreemarkerExtBeansCollectionModel : FreemarkerExtBeansStringModel < FreemarkerTemplateTemplateCollectionModel, FreemarkerTemplateTemplateSequenceModel >

#pragma mark Public

/**
 @brief Creates a new model that wraps the specified collection object.
 @param collection the collection object to wrap into a model.
 @param wrapper the BeansWrapper associated with this model. Every model has to have an associated BeansWrapper instance. The model gains many attributes from its wrapper, including the caching behavior, method exposure level, method-over-item shadowing policy etc.
 */
- (instancetype)initWithJavaUtilCollection:(id<JavaUtilCollection>)collection
        withFreemarkerExtBeansBeansWrapper:(FreemarkerExtBeansBeansWrapper *)wrapper;

/**
 @brief Retrieves the i-th object from the collection, wrapped as a TemplateModel.
 @throws TemplateModelException if the index is out of bounds, or the underlying collection is not a List.
 */
- (id<FreemarkerTemplateTemplateModel>)getWithInt:(jint)index;

/**
 @brief Tells if #get(int) will always fail for this object.
 As this object implements TemplateSequenceModel , #get(int) should always work, but due to a design flaw, for non- List wrapped objects #get(int) will always fail. This method exists to ease working this problem around.
 @since 2.3.17
 */
- (jboolean)getSupportsIndexedAccess;

- (id<FreemarkerTemplateTemplateModelIterator>)iterator;

- (jint)size;

@end

J2OBJC_STATIC_INIT(FreemarkerExtBeansCollectionModel)

FOUNDATION_EXPORT id<FreemarkerExtUtilModelFactory> FreemarkerExtBeansCollectionModel_FACTORY_;
J2OBJC_STATIC_FIELD_GETTER(FreemarkerExtBeansCollectionModel, FACTORY_, id<FreemarkerExtUtilModelFactory>)

FOUNDATION_EXPORT void FreemarkerExtBeansCollectionModel_initWithJavaUtilCollection_withFreemarkerExtBeansBeansWrapper_(FreemarkerExtBeansCollectionModel *self, id<JavaUtilCollection> collection, FreemarkerExtBeansBeansWrapper *wrapper);

FOUNDATION_EXPORT FreemarkerExtBeansCollectionModel *new_FreemarkerExtBeansCollectionModel_initWithJavaUtilCollection_withFreemarkerExtBeansBeansWrapper_(id<JavaUtilCollection> collection, FreemarkerExtBeansBeansWrapper *wrapper) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerExtBeansCollectionModel)

#endif // _FreemarkerExtBeansCollectionModel_H_
