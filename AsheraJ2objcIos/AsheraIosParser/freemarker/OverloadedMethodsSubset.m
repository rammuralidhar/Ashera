//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/ext/beans/OverloadedMethodsSubset.java
//


#include "ArgumentTypes.h"
#include "BeansWrapper.h"
#include "CallableMemberDescriptor.h"
#include "ClassUtil.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "MaybeEmptyCallableMemberDescriptor.h"
#include "MaybeEmptyMemberAndArguments.h"
#include "NullArgumentException.h"
#include "OverloadedMethodsSubset.h"
#include "ReflectionCallableMemberDescriptor.h"
#include "TemplateModelException.h"
#include "TypeFlags.h"
#include "_ConcurrentMapFactory.h"
#include "_MethodUtil.h"
#include "java/io/Serializable.h"
#include "java/lang/Byte.h"
#include "java/lang/Character.h"
#include "java/lang/Comparable.h"
#include "java/lang/Double.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/Short.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "java/util/Iterator.h"
#include "java/util/LinkedList.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"

#line 0 "/Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/ext/beans/OverloadedMethodsSubset.java"

@interface FreemarkerExtBeansOverloadedMethodsSubset () {
 @public
  IOSObjectArray *unwrappingHintsByParamCount_;
  /**
   @brief Tells what types occur at a given parameter position with a bit field.
   See TypeFlags .
   */
  IOSObjectArray *typeFlagsByParamCount_;
  id<JavaUtilMap> argTypesToMemberDescCache_;
  jboolean isArgTypesToMemberDescCacheConcurrentMap_;
  id<JavaUtilList> memberDescs_;
}

@end

J2OBJC_FIELD_SETTER(FreemarkerExtBeansOverloadedMethodsSubset, unwrappingHintsByParamCount_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(FreemarkerExtBeansOverloadedMethodsSubset, typeFlagsByParamCount_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(FreemarkerExtBeansOverloadedMethodsSubset, argTypesToMemberDescCache_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(FreemarkerExtBeansOverloadedMethodsSubset, memberDescs_, id<JavaUtilList>)

static IOSObjectArray *FreemarkerExtBeansOverloadedMethodsSubset_ZERO_PARAM_COUNT_TYPE_FLAGS_ARRAY_;
J2OBJC_STATIC_FIELD_GETTER(FreemarkerExtBeansOverloadedMethodsSubset, ZERO_PARAM_COUNT_TYPE_FLAGS_ARRAY_, IOSObjectArray *)

__attribute__((unused)) static void FreemarkerExtBeansOverloadedMethodsSubset_mergeInTypesFlagsWithInt_withIntArray_(FreemarkerExtBeansOverloadedMethodsSubset *self, jint dstParamCount, IOSIntArray *srcTypeFlagsByParamIdx);

J2OBJC_INITIALIZED_DEFN(FreemarkerExtBeansOverloadedMethodsSubset)

IOSIntArray *FreemarkerExtBeansOverloadedMethodsSubset_ALL_ZEROS_ARRAY_;


#line 36
@implementation FreemarkerExtBeansOverloadedMethodsSubset


#line 69
- (instancetype)initWithBoolean:(jboolean)bugfixed {
  FreemarkerExtBeansOverloadedMethodsSubset_initWithBoolean_(self, bugfixed);
  return self;
}


#line 73
- (void)addCallableMemberDescriptorWithFreemarkerExtBeansReflectionCallableMemberDescriptor:(FreemarkerExtBeansReflectionCallableMemberDescriptor *)memberDesc {
  [((id<JavaUtilList>) nil_chk(memberDescs_)) addWithId:memberDesc];
  
#line 78
  IOSObjectArray *prepedParamTypes = [self preprocessParameterTypesWithFreemarkerExtBeansCallableMemberDescriptor:memberDesc];
  jint paramCount = ((IOSObjectArray *) nil_chk(prepedParamTypes))->size_;
  
#line 82
  if (unwrappingHintsByParamCount_ == nil) {
    unwrappingHintsByParamCount_ = [IOSObjectArray newArrayWithLength:paramCount + 1 type:IOSClass_arrayType(IOSClass_class_(), 1)];
    (void) IOSObjectArray_Set(unwrappingHintsByParamCount_, paramCount, (IOSObjectArray *) check_class_cast([prepedParamTypes clone], [IOSObjectArray class]));
  }
  else
#line 85
  if (unwrappingHintsByParamCount_->size_ <= paramCount) {
    IOSObjectArray *newUnwrappingHintsByParamCount = [IOSObjectArray newArrayWithLength:paramCount + 1 type:IOSClass_arrayType(IOSClass_class_(), 1)];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(unwrappingHintsByParamCount_, 0, newUnwrappingHintsByParamCount, 0,
#line 88
    unwrappingHintsByParamCount_->size_);
    unwrappingHintsByParamCount_ = newUnwrappingHintsByParamCount;
    (void) IOSObjectArray_Set(unwrappingHintsByParamCount_, paramCount, (IOSObjectArray *) check_class_cast([prepedParamTypes clone], [IOSObjectArray class]));
  }
  else {
    
#line 92
    IOSObjectArray *unwrappingHints = IOSObjectArray_Get(unwrappingHintsByParamCount_, paramCount);
    if (unwrappingHints == nil) {
      (void) IOSObjectArray_Set(unwrappingHintsByParamCount_, paramCount, (IOSObjectArray *) check_class_cast([prepedParamTypes clone], [IOSObjectArray class]));
    }
    else {
      
#line 96
      for (jint paramIdx = 0; paramIdx < prepedParamTypes->size_; paramIdx++) {
        
#line 104
        (void) IOSObjectArray_Set(unwrappingHints, paramIdx, [self getCommonSupertypeForUnwrappingHintWithIOSClass:IOSObjectArray_Get(
#line 105
        unwrappingHints, paramIdx) withIOSClass:IOSObjectArray_Get(prepedParamTypes, paramIdx)]);
      }
    }
  }
  
#line 110
  IOSIntArray *typeFlagsByParamIdx = FreemarkerExtBeansOverloadedMethodsSubset_ALL_ZEROS_ARRAY_;
  if (bugfixed_) {
    
#line 113
    for (jint paramIdx = 0; paramIdx < paramCount; paramIdx++) {
      jint typeFlags = FreemarkerExtBeansTypeFlags_classToTypeFlagsWithIOSClass_(IOSObjectArray_Get(prepedParamTypes, paramIdx));
      if (typeFlags != 0) {
        if (typeFlagsByParamIdx == FreemarkerExtBeansOverloadedMethodsSubset_ALL_ZEROS_ARRAY_) {
          typeFlagsByParamIdx = [IOSIntArray newArrayWithLength:paramCount];
        }
        *IOSIntArray_GetRef(nil_chk(typeFlagsByParamIdx), paramIdx) = typeFlags;
      }
    }
    FreemarkerExtBeansOverloadedMethodsSubset_mergeInTypesFlagsWithInt_withIntArray_(self, paramCount, typeFlagsByParamIdx);
  }
  
#line 125
  [self afterWideningUnwrappingHintsWithIOSClassArray:
#line 126
  bugfixed_ ? prepedParamTypes : IOSObjectArray_Get(nil_chk(unwrappingHintsByParamCount_), paramCount) withIntArray:
#line 127
  typeFlagsByParamIdx];
}


#line 130
- (IOSObjectArray *)getUnwrappingHintsByParamCount {
  return unwrappingHintsByParamCount_;
}

- (FreemarkerExtBeansMaybeEmptyCallableMemberDescriptor *)getMemberDescriptorForArgsWithNSObjectArray:(IOSObjectArray *)args
                                                                                          withBoolean:(jboolean)varArg {
  FreemarkerExtBeansArgumentTypes *argTypes = new_FreemarkerExtBeansArgumentTypes_initWithNSObjectArray_withBoolean_(args, bugfixed_);
  FreemarkerExtBeansMaybeEmptyCallableMemberDescriptor *memberDesc =
#line 137
  isArgTypesToMemberDescCacheConcurrentMap_ ?
#line 138
  (FreemarkerExtBeansMaybeEmptyCallableMemberDescriptor *) check_class_cast([((id<JavaUtilMap>) nil_chk(argTypesToMemberDescCache_)) getWithId:argTypes], [FreemarkerExtBeansMaybeEmptyCallableMemberDescriptor class]) :
#line 139
  nil;
  if (memberDesc == nil) {
    @synchronized(argTypesToMemberDescCache_) {
      memberDesc = (FreemarkerExtBeansMaybeEmptyCallableMemberDescriptor *) check_class_cast([((id<JavaUtilMap>) nil_chk(argTypesToMemberDescCache_)) getWithId:argTypes], [FreemarkerExtBeansMaybeEmptyCallableMemberDescriptor class]);
      if (memberDesc == nil) {
        memberDesc = [argTypes getMostSpecificWithJavaUtilList:memberDescs_ withBoolean:varArg];
        (void) [argTypesToMemberDescCache_ putWithId:argTypes withId:memberDesc];
      }
    }
  }
  return memberDesc;
}


#line 152
- (id<JavaUtilIterator>)getMemberDescriptors {
  return [((id<JavaUtilList>) nil_chk(memberDescs_)) iterator];
}

- (IOSObjectArray *)preprocessParameterTypesWithFreemarkerExtBeansCallableMemberDescriptor:(FreemarkerExtBeansCallableMemberDescriptor *)memberDesc {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 157
- (void)afterWideningUnwrappingHintsWithIOSClassArray:(IOSObjectArray *)paramTypes
                                         withIntArray:(IOSIntArray *)paramNumericalTypes {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}


#line 159
- (FreemarkerExtBeansMaybeEmptyMemberAndArguments *)getMemberAndArgumentsWithJavaUtilList:(id<JavaUtilList>)tmArgs
                                                       withFreemarkerExtBeansBeansWrapper:(FreemarkerExtBeansBeansWrapper *)unwrapper {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 174
- (IOSClass *)getCommonSupertypeForUnwrappingHintWithIOSClass:(IOSClass *)c1
                                                 withIOSClass:(IOSClass *)c2 {
  if (c1 == c2) return c1;
  
#line 179
  if (bugfixed_) {
    
#line 181
    jboolean c1WasPrim;
    if ([((IOSClass *) nil_chk(c1)) isPrimitive]) {
      c1 = FreemarkerTemplateUtilityClassUtil_primitiveClassToBoxingClassWithIOSClass_(c1);
      c1WasPrim = YES;
    }
    else {
      
#line 186
      c1WasPrim = NO;
    }
    
#line 190
    jboolean c2WasPrim;
    if ([((IOSClass *) nil_chk(c2)) isPrimitive]) {
      c2 = FreemarkerTemplateUtilityClassUtil_primitiveClassToBoxingClassWithIOSClass_(c2);
      c2WasPrim = YES;
    }
    else {
      
#line 195
      c2WasPrim = NO;
    }
    
#line 198
    if (c1 == c2) {
      
#line 202
      return c1;
    }
    else
#line 203
    if ([NSNumber_class_() isAssignableFrom:c1] && [NSNumber_class_() isAssignableFrom:c2]) {
      
#line 208
      return NSNumber_class_();
    }
    else
#line 209
    if (c1WasPrim || c2WasPrim) {
      
#line 214
      return NSObject_class_();
    }
  }
  else {
    if ([((IOSClass *) nil_chk(c2)) isPrimitive]) {
      if (c2 == JavaLangByte_get_TYPE_()) c2 = JavaLangByte_class_();
      else if (c2 == JavaLangShort_get_TYPE_()) c2 = JavaLangShort_class_();
      else if (c2 == JavaLangCharacter_get_TYPE_()) c2 = JavaLangCharacter_class_();
      else if (c2 == JavaLangInteger_get_TYPE_()) c2 = JavaLangInteger_class_();
      else if (c2 == JavaLangFloat_get_TYPE_()) c2 = JavaLangFloat_class_();
      else if (c2 == JavaLangLong_get_TYPE_()) c2 = JavaLangLong_class_();
      else if (c2 == JavaLangDouble_get_TYPE_()) c2 = JavaLangDouble_class_();
    }
  }
  
#line 233
  id<JavaUtilSet> commonTypes = FreemarkerExtBeans_MethodUtil_getAssignablesWithIOSClass_withIOSClass_(c1, c2);
  [((id<JavaUtilSet>) nil_chk(commonTypes)) retainAllWithJavaUtilCollection:FreemarkerExtBeans_MethodUtil_getAssignablesWithIOSClass_withIOSClass_(c2, c1)];
  if ([commonTypes isEmpty]) {
    
#line 238
    return NSObject_class_();
  }
  
#line 245
  id<JavaUtilList> max = new_JavaUtilArrayList_init();
  for (id<JavaUtilIterator> commonTypesIter = [commonTypes iterator]; [((id<JavaUtilIterator>) nil_chk(commonTypesIter)) hasNext]; ) {
    {
      
#line 247
      IOSClass *clazz = (IOSClass *) check_class_cast([commonTypesIter next], [IOSClass class]);
      for (id<JavaUtilIterator> maxIter = [max iterator]; [((id<JavaUtilIterator>) nil_chk(maxIter)) hasNext]; ) {
        IOSClass *maxClazz = (IOSClass *) check_class_cast([maxIter next], [IOSClass class]);
        if (FreemarkerExtBeans_MethodUtil_isMoreOrSameSpecificParameterTypeWithIOSClass_withIOSClass_withBoolean_withInt_(maxClazz, clazz, NO, 0) != 0) {
          
#line 252
          goto continue_listCommonTypes;
        }
        if (FreemarkerExtBeans_MethodUtil_isMoreOrSameSpecificParameterTypeWithIOSClass_withIOSClass_withBoolean_withInt_(clazz, maxClazz, NO, 0) != 0) {
          
#line 257
          [maxIter remove];
        }
      }
      
#line 265
      [max addWithId:clazz];
    }
    continue_listCommonTypes: ;
  }
  
#line 268
  if ([max size] > 1) {
    if (bugfixed_) {
      
#line 271
      for (id<JavaUtilIterator> it = [max iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
        IOSClass *maxCl = (IOSClass *) check_class_cast([it next], [IOSClass class]);
        if (![((IOSClass *) nil_chk(maxCl)) isInterface]) {
          if (maxCl != NSObject_class_()) {
            
#line 276
            return maxCl;
          }
          else {
            [it remove];
          }
        }
      }
      
#line 286
      [max removeWithId:NSCopying_class_()];
      if ([max size] > 1) {
        [max removeWithId:JavaIoSerializable_class_()];
        if ([max size] > 1) {
          [max removeWithId:JavaLangComparable_class_()];
          if ([max size] > 1) {
            return NSObject_class_();
          }
        }
      }
    }
    else {
      
#line 297
      return NSObject_class_();
    }
  }
  
#line 301
  return (IOSClass *) check_class_cast([max getWithInt:0], [IOSClass class]);
}


#line 309
- (IOSIntArray *)getTypeFlagsWithInt:(jint)paramCount {
  return typeFlagsByParamCount_ != nil && typeFlagsByParamCount_->size_ > paramCount ? IOSObjectArray_Get(
#line 311
  typeFlagsByParamCount_, paramCount) :
#line 312
  nil;
}


#line 324
- (void)mergeInTypesFlagsWithInt:(jint)dstParamCount
                    withIntArray:(IOSIntArray *)srcTypeFlagsByParamIdx {
  FreemarkerExtBeansOverloadedMethodsSubset_mergeInTypesFlagsWithInt_withIntArray_(self, dstParamCount, srcTypeFlagsByParamIdx);
}


#line 399
- (void)forceNumberArgumentsToParameterTypesWithNSObjectArray:(IOSObjectArray *)args
                                            withIOSClassArray:(IOSObjectArray *)paramTypes
                                                 withIntArray:(IOSIntArray *)typeFlagsByParamIndex {
  
#line 401
  jint paramTypesLen = ((IOSObjectArray *) nil_chk(paramTypes))->size_;
  jint argsLen = ((IOSObjectArray *) nil_chk(args))->size_;
  for (jint argIdx = 0; argIdx < argsLen; argIdx++) {
    jint paramTypeIdx = argIdx < paramTypesLen ? argIdx : paramTypesLen - 1;
    jint typeFlags = IOSIntArray_Get(nil_chk(typeFlagsByParamIndex), paramTypeIdx);
    
#line 409
    if ((typeFlags & FreemarkerExtBeansTypeFlags_WIDENED_NUMERICAL_UNWRAPPING_HINT) != 0) {
      id arg = IOSObjectArray_Get(args, argIdx);
      
#line 412
      if ([arg isKindOfClass:[NSNumber class]]) {
        IOSClass *targetType = IOSObjectArray_Get(paramTypes, paramTypeIdx);
        NSNumber *convertedArg = FreemarkerExtBeansBeansWrapper_forceUnwrappedNumberToTypeWithNSNumber_withIOSClass_withBoolean_(
#line 415
        (NSNumber *) check_class_cast(arg, [NSNumber class]), targetType, bugfixed_);
        if (convertedArg != nil) {
          (void) IOSObjectArray_Set(args, argIdx, convertedArg);
        }
      }
    }
  }
}

+ (void)initialize {
  if (self == [FreemarkerExtBeansOverloadedMethodsSubset class]) {
    FreemarkerExtBeansOverloadedMethodsSubset_ALL_ZEROS_ARRAY_ = [IOSIntArray newArrayWithLength:
#line 43
    0];
    FreemarkerExtBeansOverloadedMethodsSubset_ZERO_PARAM_COUNT_TYPE_FLAGS_ARRAY_ = [IOSObjectArray newArrayWithLength:
#line 45
    1 type:IOSClass_intArray(1)];
    {
      
#line 47
      (void) IOSObjectArray_Set(FreemarkerExtBeansOverloadedMethodsSubset_ZERO_PARAM_COUNT_TYPE_FLAGS_ARRAY_, 0, FreemarkerExtBeansOverloadedMethodsSubset_ALL_ZEROS_ARRAY_);
    }
    J2OBJC_SET_INITIALIZED(FreemarkerExtBeansOverloadedMethodsSubset)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithBoolean:", "OverloadedMethodsSubset", NULL, 0x0, NULL, NULL },
    { "addCallableMemberDescriptorWithFreemarkerExtBeansReflectionCallableMemberDescriptor:", "addCallableMemberDescriptor", "V", 0x0, NULL, NULL },
    { "getUnwrappingHintsByParamCount", NULL, "[[Ljava.lang.Class;", 0x0, NULL, NULL },
    { "getMemberDescriptorForArgsWithNSObjectArray:withBoolean:", "getMemberDescriptorForArgs", "Lfreemarker.ext.beans.MaybeEmptyCallableMemberDescriptor;", 0x10, NULL, NULL },
    { "getMemberDescriptors", NULL, "Ljava.util.Iterator;", 0x0, NULL, NULL },
    { "preprocessParameterTypesWithFreemarkerExtBeansCallableMemberDescriptor:", "preprocessParameterTypes", "[Ljava.lang.Class;", 0x400, NULL, NULL },
    { "afterWideningUnwrappingHintsWithIOSClassArray:withIntArray:", "afterWideningUnwrappingHints", "V", 0x400, NULL, NULL },
    { "getMemberAndArgumentsWithJavaUtilList:withFreemarkerExtBeansBeansWrapper:", "getMemberAndArguments", "Lfreemarker.ext.beans.MaybeEmptyMemberAndArguments;", 0x400, "Lfreemarker.template.TemplateModelException;", NULL },
    { "getCommonSupertypeForUnwrappingHintWithIOSClass:withIOSClass:", "getCommonSupertypeForUnwrappingHint", "Ljava.lang.Class;", 0x4, NULL, NULL },
    { "getTypeFlagsWithInt:", "getTypeFlags", "[I", 0x14, NULL, NULL },
    { "mergeInTypesFlagsWithInt:withIntArray:", "mergeInTypesFlags", "V", 0x14, NULL, NULL },
    { "forceNumberArgumentsToParameterTypesWithNSObjectArray:withIOSClassArray:withIntArray:", "forceNumberArgumentsToParameterTypes", "V", 0x4, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "ALL_ZEROS_ARRAY_", NULL, 0x18, "[I", &FreemarkerExtBeansOverloadedMethodsSubset_ALL_ZEROS_ARRAY_, NULL,  },
    { "ZERO_PARAM_COUNT_TYPE_FLAGS_ARRAY_", NULL, 0x1a, "[[I", &FreemarkerExtBeansOverloadedMethodsSubset_ZERO_PARAM_COUNT_TYPE_FLAGS_ARRAY_, NULL,  },
    { "unwrappingHintsByParamCount_", NULL, 0x2, "[[Ljava.lang.Class;", NULL, NULL,  },
    { "typeFlagsByParamCount_", NULL, 0x2, "[[I", NULL, NULL,  },
    { "argTypesToMemberDescCache_", NULL, 0x12, "Ljava.util.Map;", NULL, NULL,  },
    { "isArgTypesToMemberDescCacheConcurrentMap_", NULL, 0x12, "Z", NULL, NULL,  },
    { "memberDescs_", NULL, 0x12, "Ljava.util.List;", NULL, NULL,  },
    { "bugfixed_", NULL, 0x14, "Z", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerExtBeansOverloadedMethodsSubset = { 2, "OverloadedMethodsSubset", "freemarker.ext.beans", NULL, 0x400, 12, methods, 8, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerExtBeansOverloadedMethodsSubset;
}

@end


#line 69
void FreemarkerExtBeansOverloadedMethodsSubset_initWithBoolean_(FreemarkerExtBeansOverloadedMethodsSubset *self, jboolean bugfixed) {
  (void) NSObject_init(self);
  self->argTypesToMemberDescCache_ = FreemarkerCore_ConcurrentMapFactory_newMaybeConcurrentHashMapWithInt_withFloat_withInt_(
#line 60
  6, 0.75f, 1);
  self->isArgTypesToMemberDescCacheConcurrentMap_ = FreemarkerCore_ConcurrentMapFactory_isConcurrentWithJavaUtilMap_(self->argTypesToMemberDescCache_);
  self->memberDescs_ = new_JavaUtilLinkedList_init();
  
#line 70
  self->bugfixed_ = bugfixed;
}


#line 324
void FreemarkerExtBeansOverloadedMethodsSubset_mergeInTypesFlagsWithInt_withIntArray_(FreemarkerExtBeansOverloadedMethodsSubset *self, jint dstParamCount, IOSIntArray *srcTypeFlagsByParamIdx) {
  FreemarkerTemplateUtilityNullArgumentException_checkWithNSString_withId_(@"srcTypesFlagsByParamIdx", srcTypeFlagsByParamIdx);
  
#line 328
  if (dstParamCount == 0) {
    if (self->typeFlagsByParamCount_ == nil) {
      self->typeFlagsByParamCount_ = FreemarkerExtBeansOverloadedMethodsSubset_ZERO_PARAM_COUNT_TYPE_FLAGS_ARRAY_;
    }
    else
#line 331
    if (self->typeFlagsByParamCount_ != FreemarkerExtBeansOverloadedMethodsSubset_ZERO_PARAM_COUNT_TYPE_FLAGS_ARRAY_) {
      (void) IOSObjectArray_Set(self->typeFlagsByParamCount_, 0, FreemarkerExtBeansOverloadedMethodsSubset_ALL_ZEROS_ARRAY_);
    }
    return;
  }
  
#line 338
  if (self->typeFlagsByParamCount_ == nil) {
    self->typeFlagsByParamCount_ = [IOSObjectArray newArrayWithLength:dstParamCount + 1 type:IOSClass_intArray(1)];
  }
  else
#line 340
  if (self->typeFlagsByParamCount_->size_ <= dstParamCount) {
    IOSObjectArray *newTypeFlagsByParamCount = [IOSObjectArray newArrayWithLength:dstParamCount + 1 type:IOSClass_intArray(1)];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->typeFlagsByParamCount_, 0, newTypeFlagsByParamCount, 0, self->typeFlagsByParamCount_->size_);
    
#line 344
    self->typeFlagsByParamCount_ = newTypeFlagsByParamCount;
  }
  
#line 347
  IOSIntArray *dstTypeFlagsByParamIdx = IOSObjectArray_Get(nil_chk(self->typeFlagsByParamCount_), dstParamCount);
  if (dstTypeFlagsByParamIdx == nil) {
    
#line 351
    if (srcTypeFlagsByParamIdx != FreemarkerExtBeansOverloadedMethodsSubset_ALL_ZEROS_ARRAY_) {
      jint srcParamCount = ((IOSIntArray *) nil_chk(srcTypeFlagsByParamIdx))->size_;
      dstTypeFlagsByParamIdx = [IOSIntArray newArrayWithLength:dstParamCount];
      for (jint paramIdx = 0; paramIdx < dstParamCount; paramIdx++) {
        *IOSIntArray_GetRef(dstTypeFlagsByParamIdx, paramIdx) = IOSIntArray_Get(
#line 356
        srcTypeFlagsByParamIdx, paramIdx < srcParamCount ? paramIdx : srcParamCount - 1);
      }
    }
    else {
      
#line 359
      dstTypeFlagsByParamIdx = FreemarkerExtBeansOverloadedMethodsSubset_ALL_ZEROS_ARRAY_;
    }
    
#line 362
    (void) IOSObjectArray_Set(self->typeFlagsByParamCount_, dstParamCount, dstTypeFlagsByParamIdx);
  }
  else {
    
#line 366
    if (srcTypeFlagsByParamIdx == dstTypeFlagsByParamIdx) {
      
#line 368
      return;
    }
    
#line 372
    if (dstTypeFlagsByParamIdx == FreemarkerExtBeansOverloadedMethodsSubset_ALL_ZEROS_ARRAY_ && dstParamCount > 0) {
      dstTypeFlagsByParamIdx = [IOSIntArray newArrayWithLength:dstParamCount];
      (void) IOSObjectArray_Set(self->typeFlagsByParamCount_, dstParamCount, dstTypeFlagsByParamIdx);
    }
    
#line 377
    for (jint paramIdx = 0; paramIdx < dstParamCount; paramIdx++) {
      jint srcParamTypeFlags;
      if (srcTypeFlagsByParamIdx != FreemarkerExtBeansOverloadedMethodsSubset_ALL_ZEROS_ARRAY_) {
        jint srcParamCount = ((IOSIntArray *) nil_chk(srcTypeFlagsByParamIdx))->size_;
        srcParamTypeFlags = IOSIntArray_Get(srcTypeFlagsByParamIdx, paramIdx < srcParamCount ? paramIdx : srcParamCount - 1);
      }
      else {
        
#line 383
        srcParamTypeFlags = 0;
      }
      
#line 386
      jint dstParamTypesFlags = IOSIntArray_Get(dstTypeFlagsByParamIdx, paramIdx);
      if (dstParamTypesFlags != srcParamTypeFlags) {
        jint mergedTypeFlags = dstParamTypesFlags | srcParamTypeFlags;
        if ((mergedTypeFlags & FreemarkerExtBeansTypeFlags_MASK_ALL_NUMERICALS) != 0) {
          
#line 391
          mergedTypeFlags |= FreemarkerExtBeansTypeFlags_WIDENED_NUMERICAL_UNWRAPPING_HINT;
        }
        *IOSIntArray_GetRef(dstTypeFlagsByParamIdx, paramIdx) = mergedTypeFlags;
      }
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerExtBeansOverloadedMethodsSubset)
