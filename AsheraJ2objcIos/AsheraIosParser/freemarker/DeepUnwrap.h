//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/template/utility/DeepUnwrap.java
//

#ifndef _FreemarkerTemplateUtilityDeepUnwrap_H_
#define _FreemarkerTemplateUtilityDeepUnwrap_H_

#include "J2ObjC_header.h"

@protocol FreemarkerTemplateTemplateModel;

/**
 @brief Utility methods for unwrapping TemplateModel -s.
 */
@interface FreemarkerTemplateUtilityDeepUnwrap : NSObject

#pragma mark Public

- (instancetype)init;

/**
 @brief Same as #unwrap(TemplateModel) , but it doesn't throw exception if it doesn't know how to unwrap the model, but rather returns it as-is.
 @since 2.3.14
 */
+ (id)permissiveUnwrapWithFreemarkerTemplateTemplateModel:(id<FreemarkerTemplateTemplateModel>)model;

/**
 */
+ (id)premissiveUnwrapWithFreemarkerTemplateTemplateModel:(id<FreemarkerTemplateTemplateModel>)model;

/**
 @brief Unwraps TemplateModel -s recursively.
 The converting of the TemplateModel object happens with the following rules: <ol> <li>If the object implements AdapterTemplateModel , then the result of AdapterTemplateModel#getAdaptedObject(Class) for <tt>Object.class</tt> is returned. <li>If the object implements WrapperTemplateModel , then the result of WrapperTemplateModel#getWrappedObject() is returned. <li>If the object is identical to the null model of the current object wrapper, null is returned. <li>If the object implements TemplateScalarModel , then the result of TemplateScalarModel#getAsString() is returned. <li>If the object implements TemplateNumberModel , then the result of TemplateNumberModel#getAsNumber() is returned. <li>If the object implements TemplateDateModel , then the result of TemplateDateModel#getAsDate() is returned. <li>If the object implements TemplateBooleanModel , then the result of TemplateBooleanModel#getAsBoolean() is returned. <li>If the object implements TemplateSequenceModel or TemplateCollectionModel , then a <code>java.util.ArrayList</code> is constructed from the subvariables, and each subvariable is unwrapped with the rules described here (recursive unwrapping). <li>If the object implements TemplateHashModelEx , then a <code>java.util.HashMap</code> is constructed from the subvariables, and each subvariable is unwrapped with the rules described here (recursive unwrapping). <li>Throw a <code>TemplateModelException</code>, because it doesn't know how to unwrap the object. </ol>
 */
+ (id)unwrapWithFreemarkerTemplateTemplateModel:(id<FreemarkerTemplateTemplateModel>)model;

@end

J2OBJC_STATIC_INIT(FreemarkerTemplateUtilityDeepUnwrap)

FOUNDATION_EXPORT id FreemarkerTemplateUtilityDeepUnwrap_unwrapWithFreemarkerTemplateTemplateModel_(id<FreemarkerTemplateTemplateModel> model);

FOUNDATION_EXPORT id FreemarkerTemplateUtilityDeepUnwrap_permissiveUnwrapWithFreemarkerTemplateTemplateModel_(id<FreemarkerTemplateTemplateModel> model);

FOUNDATION_EXPORT id FreemarkerTemplateUtilityDeepUnwrap_premissiveUnwrapWithFreemarkerTemplateTemplateModel_(id<FreemarkerTemplateTemplateModel> model);

FOUNDATION_EXPORT void FreemarkerTemplateUtilityDeepUnwrap_init(FreemarkerTemplateUtilityDeepUnwrap *self);

FOUNDATION_EXPORT FreemarkerTemplateUtilityDeepUnwrap *new_FreemarkerTemplateUtilityDeepUnwrap_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerTemplateUtilityDeepUnwrap)

#endif // _FreemarkerTemplateUtilityDeepUnwrap_H_
