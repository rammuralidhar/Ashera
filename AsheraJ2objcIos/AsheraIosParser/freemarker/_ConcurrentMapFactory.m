//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/_ConcurrentMapFactory.java
//


#include "BugException.h"
#include "ClassUtil.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "UndeclaredThrowableException.h"
#include "_ConcurrentMapFactory.h"
#include "java/lang/ClassNotFoundException.h"
#include "java/lang/Exception.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/reflect/Constructor.h"
#include "java/util/Collections.h"
#include "java/util/HashMap.h"
#include "java/util/Map.h"

#line 0 "/Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/_ConcurrentMapFactory.java"

static IOSClass *FreemarkerCore_ConcurrentMapFactory_concurrentMapClass_;
J2OBJC_STATIC_FIELD_GETTER(FreemarkerCore_ConcurrentMapFactory, concurrentMapClass_, IOSClass *)

static IOSClass *FreemarkerCore_ConcurrentMapFactory_bestHashMapClass_;
J2OBJC_STATIC_FIELD_GETTER(FreemarkerCore_ConcurrentMapFactory, bestHashMapClass_, IOSClass *)

static JavaLangReflectConstructor *FreemarkerCore_ConcurrentMapFactory_bestHashMapClassConstructor_;
J2OBJC_STATIC_FIELD_GETTER(FreemarkerCore_ConcurrentMapFactory, bestHashMapClassConstructor_, JavaLangReflectConstructor *)

static jint FreemarkerCore_ConcurrentMapFactory_bestHashMapClassConstructorParamCnt_;
J2OBJC_STATIC_FIELD_GETTER(FreemarkerCore_ConcurrentMapFactory, bestHashMapClassConstructorParamCnt_, jint)

J2OBJC_INITIALIZED_DEFN(FreemarkerCore_ConcurrentMapFactory)


#line 37
@implementation FreemarkerCore_ConcurrentMapFactory


#line 79
+ (id<JavaUtilMap>)newMaybeConcurrentHashMap {
  return FreemarkerCore_ConcurrentMapFactory_newMaybeConcurrentHashMap();
}


#line 87
+ (id<JavaUtilMap>)newMaybeConcurrentHashMapWithInt:(jint)initialCapacity
                                          withFloat:(jfloat)loadFactor
                                            withInt:(jint)concurrencyLevel {
  return FreemarkerCore_ConcurrentMapFactory_newMaybeConcurrentHashMapWithInt_withFloat_withInt_(initialCapacity, loadFactor, concurrencyLevel);
}


#line 107
+ (id<JavaUtilMap>)newThreadSafeMap {
  return FreemarkerCore_ConcurrentMapFactory_newThreadSafeMap();
}


#line 112
+ (jboolean)concurrentMapsAvailable {
  return FreemarkerCore_ConcurrentMapFactory_concurrentMapsAvailable();
}


#line 119
+ (jboolean)isConcurrentWithJavaUtilMap:(id<JavaUtilMap>)map {
  return FreemarkerCore_ConcurrentMapFactory_isConcurrentWithJavaUtilMap_(map);
}

- (instancetype)init {
  FreemarkerCore_ConcurrentMapFactory_init(self);
  return self;
}

+ (void)initialize {
  if (self == [FreemarkerCore_ConcurrentMapFactory class]) {
    {
      
#line 40
      IOSClass *c;
      @try {
        c = FreemarkerTemplateUtilityClassUtil_forNameWithNSString_(@"java.util.concurrent.ConcurrentMap");
      }
      @catch (
#line 43
      JavaLangClassNotFoundException *e) {
        c = nil;
      }
      FreemarkerCore_ConcurrentMapFactory_concurrentMapClass_ = c;
    }
    {
      
#line 53
      IOSClass *c;
      JavaLangReflectConstructor *constr;
      jint constrParamCnt;
      @try {
        c = FreemarkerTemplateUtilityClassUtil_forNameWithNSString_(@"java.util.concurrent.ConcurrentHashMap");
        @try {
          constr = [((IOSClass *) nil_chk(c)) getConstructor:[IOSObjectArray newArrayWithObjects:(id[]){ JavaLangInteger_get_TYPE_(), JavaLangFloat_get_TYPE_(), JavaLangInteger_get_TYPE_() } count:3 type:IOSClass_class_()]];
          constrParamCnt = 3;
        }
        @catch (
#line 61
        JavaLangException *e) {
          @throw new_JavaLangRuntimeException_initWithNSString_withJavaLangThrowable_(@"Failed to get ConcurrentHashMap constructor", e);
        }
      }
      @catch (
#line 64
      JavaLangClassNotFoundException *e) {
        c = JavaUtilHashMap_class_();
        @try {
          constr = [c getConstructor:[IOSObjectArray newArrayWithObjects:(id[]){ JavaLangInteger_get_TYPE_(), JavaLangFloat_get_TYPE_() } count:2 type:IOSClass_class_()]];
          constrParamCnt = 2;
        }
        @catch (
#line 69
        JavaLangException *e2) {
          @throw new_JavaLangRuntimeException_initWithNSString_withJavaLangThrowable_(@"Failed to get HashMap constructor", e2);
        }
      }
      
#line 74
      FreemarkerCore_ConcurrentMapFactory_bestHashMapClass_ = c;
      FreemarkerCore_ConcurrentMapFactory_bestHashMapClassConstructor_ = constr;
      FreemarkerCore_ConcurrentMapFactory_bestHashMapClassConstructorParamCnt_ = constrParamCnt;
    }
    J2OBJC_SET_INITIALIZED(FreemarkerCore_ConcurrentMapFactory)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "newMaybeConcurrentHashMap", NULL, "Ljava.util.Map;", 0x9, NULL, NULL },
    { "newMaybeConcurrentHashMapWithInt:withFloat:withInt:", "newMaybeConcurrentHashMap", "Ljava.util.Map;", 0x9, NULL, NULL },
    { "newThreadSafeMap", NULL, "Ljava.util.Map;", 0x9, NULL, NULL },
    { "concurrentMapsAvailable", NULL, "Z", 0x9, NULL, NULL },
    { "isConcurrentWithJavaUtilMap:", "isConcurrent", "Z", 0x9, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "concurrentMapClass_", NULL, 0x1a, "Ljava.lang.Class;", &FreemarkerCore_ConcurrentMapFactory_concurrentMapClass_, NULL,  },
    { "bestHashMapClass_", NULL, 0x1a, "Ljava.lang.Class;", &FreemarkerCore_ConcurrentMapFactory_bestHashMapClass_, NULL,  },
    { "bestHashMapClassConstructor_", NULL, 0x1a, "Ljava.lang.reflect.Constructor;", &FreemarkerCore_ConcurrentMapFactory_bestHashMapClassConstructor_, NULL,  },
    { "bestHashMapClassConstructorParamCnt_", NULL, 0x1a, "I", &FreemarkerCore_ConcurrentMapFactory_bestHashMapClassConstructorParamCnt_, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerCore_ConcurrentMapFactory = { 2, "_ConcurrentMapFactory", "freemarker.core", NULL, 0x1, 6, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerCore_ConcurrentMapFactory;
}

@end


#line 79
id<JavaUtilMap> FreemarkerCore_ConcurrentMapFactory_newMaybeConcurrentHashMap() {
  FreemarkerCore_ConcurrentMapFactory_initialize();
  
#line 80
  @try {
    return (id<JavaUtilMap>) check_protocol_cast([((IOSClass *) nil_chk(FreemarkerCore_ConcurrentMapFactory_bestHashMapClass_)) newInstance], @protocol(JavaUtilMap));
  }
  @catch (
#line 82
  JavaLangException *e) {
    @throw new_FreemarkerTemplateUtilityUndeclaredThrowableException_initWithJavaLangThrowable_(e);
  }
}


#line 87
id<JavaUtilMap> FreemarkerCore_ConcurrentMapFactory_newMaybeConcurrentHashMapWithInt_withFloat_withInt_(jint initialCapacity, jfloat loadFactor, jint concurrencyLevel) {
  FreemarkerCore_ConcurrentMapFactory_initialize();
  
#line 88
  @try {
    if (FreemarkerCore_ConcurrentMapFactory_bestHashMapClassConstructorParamCnt_ == 3) {
      return (id<JavaUtilMap>) check_protocol_cast([((JavaLangReflectConstructor *) nil_chk(FreemarkerCore_ConcurrentMapFactory_bestHashMapClassConstructor_)) newInstanceWithNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ new_JavaLangInteger_initWithInt_(
#line 91
      initialCapacity), new_JavaLangFloat_initWithFloat_(loadFactor), new_JavaLangInteger_initWithInt_(concurrencyLevel) } count:3 type:NSObject_class_()]], @protocol(JavaUtilMap));
    }
    else
#line 92
    if (FreemarkerCore_ConcurrentMapFactory_bestHashMapClassConstructorParamCnt_ == 2) {
      return (id<JavaUtilMap>) check_protocol_cast([((JavaLangReflectConstructor *) nil_chk(FreemarkerCore_ConcurrentMapFactory_bestHashMapClassConstructor_)) newInstanceWithNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ new_JavaLangInteger_initWithInt_(
#line 94
      initialCapacity), new_JavaLangFloat_initWithFloat_(loadFactor) } count:2 type:NSObject_class_()]], @protocol(JavaUtilMap));
    }
    else {
      
#line 96
      @throw new_FreemarkerCoreBugException_init();
    }
  }
  @catch (
#line 98
  JavaLangException *e) {
    @throw new_FreemarkerTemplateUtilityUndeclaredThrowableException_initWithJavaLangThrowable_(e);
  }
}


#line 107
id<JavaUtilMap> FreemarkerCore_ConcurrentMapFactory_newThreadSafeMap() {
  FreemarkerCore_ConcurrentMapFactory_initialize();
  
#line 108
  id<JavaUtilMap> map = FreemarkerCore_ConcurrentMapFactory_newMaybeConcurrentHashMap();
  return FreemarkerCore_ConcurrentMapFactory_isConcurrentWithJavaUtilMap_(map) ? ((id) map) : ((id) JavaUtilCollections_synchronizedMapWithJavaUtilMap_(map));
}


#line 112
jboolean FreemarkerCore_ConcurrentMapFactory_concurrentMapsAvailable() {
  FreemarkerCore_ConcurrentMapFactory_initialize();
  
#line 113
  return FreemarkerCore_ConcurrentMapFactory_concurrentMapClass_ != nil;
}

jboolean FreemarkerCore_ConcurrentMapFactory_isConcurrentWithJavaUtilMap_(id<JavaUtilMap> map) {
  FreemarkerCore_ConcurrentMapFactory_initialize();
  
#line 120
  return FreemarkerCore_ConcurrentMapFactory_concurrentMapClass_ != nil && [FreemarkerCore_ConcurrentMapFactory_concurrentMapClass_ isInstance:map];
}

void FreemarkerCore_ConcurrentMapFactory_init(FreemarkerCore_ConcurrentMapFactory *self) {
  (void) NSObject_init(self);
}

FreemarkerCore_ConcurrentMapFactory *new_FreemarkerCore_ConcurrentMapFactory_init() {
  FreemarkerCore_ConcurrentMapFactory *self = [FreemarkerCore_ConcurrentMapFactory alloc];
  FreemarkerCore_ConcurrentMapFactory_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCore_ConcurrentMapFactory)
