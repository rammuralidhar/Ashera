//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/ext/beans/BeansModelCache.java
//


#include "BeansModelCache.h"
#include "BeansWrapper.h"
#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "ModelCache.h"
#include "ModelFactory.h"
#include "TemplateModel.h"
#include "_ConcurrentMapFactory.h"
#include "java/lang/Boolean.h"
#include "java/util/HashSet.h"
#include "java/util/Map.h"
#include "java/util/Set.h"

#line 0 "/Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/ext/beans/BeansModelCache.java"

@interface FreemarkerExtBeansBeansModelCache () {
 @public
  id<JavaUtilMap> classToFactory_;
  jboolean classToFactoryIsConcurrent_;
  id<JavaUtilSet> mappedClassNames_;
  FreemarkerExtBeansBeansWrapper *wrapper_;
}

@end

J2OBJC_FIELD_SETTER(FreemarkerExtBeansBeansModelCache, classToFactory_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(FreemarkerExtBeansBeansModelCache, mappedClassNames_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(FreemarkerExtBeansBeansModelCache, wrapper_, FreemarkerExtBeansBeansWrapper *)


#line 28
@implementation FreemarkerExtBeansBeansModelCache


#line 37
- (instancetype)initWithFreemarkerExtBeansBeansWrapper:(FreemarkerExtBeansBeansWrapper *)wrapper {
  FreemarkerExtBeansBeansModelCache_initWithFreemarkerExtBeansBeansWrapper_(self, wrapper);
  return self;
}


#line 41
- (jboolean)isCacheableWithId:(id)object {
  return [nil_chk(object) getClass] != JavaLangBoolean_class_();
}

- (id<FreemarkerTemplateTemplateModel>)createWithId:(id)object {
  IOSClass *clazz = [nil_chk(object) getClass];
  
#line 48
  id<FreemarkerExtUtilModelFactory> factory = nil;
  
#line 50
  if (classToFactoryIsConcurrent_) {
    factory = (id<FreemarkerExtUtilModelFactory>) check_protocol_cast([((id<JavaUtilMap>) nil_chk(classToFactory_)) getWithId:clazz], @protocol(FreemarkerExtUtilModelFactory));
  }
  
#line 54
  if (factory == nil) {
    @synchronized(classToFactory_) {
      factory = (id<FreemarkerExtUtilModelFactory>) check_protocol_cast([((id<JavaUtilMap>) nil_chk(classToFactory_)) getWithId:clazz], @protocol(FreemarkerExtUtilModelFactory));
      if (factory == nil) {
        NSString *className_ = [clazz getName];
        
#line 60
        if (![((id<JavaUtilSet>) nil_chk(mappedClassNames_)) addWithId:className_]) {
          [classToFactory_ clear];
          [mappedClassNames_ clear];
          [mappedClassNames_ addWithId:className_];
        }
        factory = [((FreemarkerExtBeansBeansWrapper *) nil_chk(wrapper_)) getModelFactoryWithIOSClass:clazz];
        (void) [classToFactory_ putWithId:clazz withId:factory];
      }
    }
  }
  
#line 71
  return [((id<FreemarkerExtUtilModelFactory>) nil_chk(factory)) createWithId:object withFreemarkerTemplateObjectWrapper:wrapper_];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithFreemarkerExtBeansBeansWrapper:", "BeansModelCache", NULL, 0x0, NULL, NULL },
    { "isCacheableWithId:", "isCacheable", "Z", 0x4, NULL, NULL },
    { "createWithId:", "create", "Lfreemarker.template.TemplateModel;", 0x4, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "classToFactory_", NULL, 0x12, "Ljava.util.Map;", NULL, NULL,  },
    { "classToFactoryIsConcurrent_", NULL, 0x12, "Z", NULL, NULL,  },
    { "mappedClassNames_", NULL, 0x12, "Ljava.util.Set;", NULL, NULL,  },
    { "wrapper_", NULL, 0x12, "Lfreemarker.ext.beans.BeansWrapper;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerExtBeansBeansModelCache = { 2, "BeansModelCache", "freemarker.ext.beans", NULL, 0x1, 3, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerExtBeansBeansModelCache;
}

@end


#line 37
void FreemarkerExtBeansBeansModelCache_initWithFreemarkerExtBeansBeansWrapper_(FreemarkerExtBeansBeansModelCache *self, FreemarkerExtBeansBeansWrapper *wrapper) {
  (void) FreemarkerExtUtilModelCache_init(self);
  self->classToFactory_ = FreemarkerCore_ConcurrentMapFactory_newMaybeConcurrentHashMap();
  self->classToFactoryIsConcurrent_ = FreemarkerCore_ConcurrentMapFactory_isConcurrentWithJavaUtilMap_(self->classToFactory_);
  self->mappedClassNames_ = new_JavaUtilHashSet_init();
  
#line 38
  self->wrapper_ = wrapper;
}


#line 37
FreemarkerExtBeansBeansModelCache *new_FreemarkerExtBeansBeansModelCache_initWithFreemarkerExtBeansBeansWrapper_(FreemarkerExtBeansBeansWrapper *wrapper) {
  FreemarkerExtBeansBeansModelCache *self = [FreemarkerExtBeansBeansModelCache alloc];
  FreemarkerExtBeansBeansModelCache_initWithFreemarkerExtBeansBeansWrapper_(self, wrapper);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerExtBeansBeansModelCache)
