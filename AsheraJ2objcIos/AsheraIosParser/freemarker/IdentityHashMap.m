//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/ext/util/IdentityHashMap.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IdentityHashMap.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/io/ObjectInputStream.h"
#include "java/io/ObjectOutputStream.h"
#include "java/lang/ClassNotFoundException.h"
#include "java/lang/CloneNotSupportedException.h"
#include "java/lang/Float.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/InternalError.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "java/util/AbstractCollection.h"
#include "java/util/AbstractMap.h"
#include "java/util/AbstractSet.h"
#include "java/util/Collection.h"
#include "java/util/ConcurrentModificationException.h"
#include "java/util/Iterator.h"
#include "java/util/Map.h"
#include "java/util/NoSuchElementException.h"
#include "java/util/Set.h"

@class FreemarkerExtUtilIdentityHashMap_EmptyHashIterator;

#line 0 "/Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/ext/util/IdentityHashMap.java"

#define FreemarkerExtUtilIdentityHashMap_KEYS 0
#define FreemarkerExtUtilIdentityHashMap_VALUES 1
#define FreemarkerExtUtilIdentityHashMap_ENTRIES 2

@interface FreemarkerExtUtilIdentityHashMap () {
 @public
  /**
   @brief The hash table data.
   */
  IOSObjectArray *table_;
  /**
   @brief The total number of mappings in the hash table.
   */
  jint count_;
  /**
   @brief The table is rehashed when its size exceeds this threshold.
   (The value of this field is (int)(capacity * loadFactor).)
   */
  jint threshold_;
  /**
   @brief The load factor for the hashtable.
   */
  jfloat loadFactor_;
  /**
   @brief The number of times this IdentityHashMap has been structurally modified Structural modifications are those that change the number of mappings in the IdentityHashMap or otherwise modify its internal structure (e.g., rehash).
   This field is used to make iterators on Collection-views of the IdentityHashMap fail-fast.  (See ConcurrentModificationException).
   */
  jint modCount_;
  id<JavaUtilSet> keySet_IdentityHashMap_;
  id<JavaUtilSet> entrySet_;
  id<JavaUtilCollection> values_;
}

/**
 @brief Rehashes the contents of this map into a new <tt>IdentityHashMap</tt> instance with a larger capacity.
 This method is called automatically when the number of keys in this map exceeds its capacity and load factor.
 */
- (void)rehash;

- (id<JavaUtilIterator>)getHashIteratorWithInt:(jint)type;

/**
 @brief Save the state of the <tt>IdentityHashMap</tt> instance to a stream (i.e., serialize it).
 The <i>capacity</i> of the IdentityHashMap (the length of the bucket array) is emitted (int), followed  by the <i>size</i> of the IdentityHashMap (the number of key-value mappings), followed by the key (Object) and value (Object) for each key-value mapping represented by the IdentityHashMap The key-value mappings are emitted in no particular order.
 */
- (void)writeObjectWithJavaIoObjectOutputStream:(JavaIoObjectOutputStream *)s;

/**
 @brief Reconstitute the <tt>IdentityHashMap</tt> instance from a stream (i.e., deserialize it).
 */
- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)s;

@end

J2OBJC_FIELD_SETTER(FreemarkerExtUtilIdentityHashMap, table_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(FreemarkerExtUtilIdentityHashMap, keySet_IdentityHashMap_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(FreemarkerExtUtilIdentityHashMap, entrySet_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(FreemarkerExtUtilIdentityHashMap, values_, id<JavaUtilCollection>)

J2OBJC_STATIC_FIELD_GETTER(FreemarkerExtUtilIdentityHashMap, KEYS, jint)

J2OBJC_STATIC_FIELD_GETTER(FreemarkerExtUtilIdentityHashMap, VALUES, jint)

J2OBJC_STATIC_FIELD_GETTER(FreemarkerExtUtilIdentityHashMap, ENTRIES, jint)

static FreemarkerExtUtilIdentityHashMap_EmptyHashIterator *FreemarkerExtUtilIdentityHashMap_emptyHashIterator_;
J2OBJC_STATIC_FIELD_GETTER(FreemarkerExtUtilIdentityHashMap, emptyHashIterator_, FreemarkerExtUtilIdentityHashMap_EmptyHashIterator *)
J2OBJC_STATIC_FIELD_SETTER(FreemarkerExtUtilIdentityHashMap, emptyHashIterator_, FreemarkerExtUtilIdentityHashMap_EmptyHashIterator *)

__attribute__((unused)) static void FreemarkerExtUtilIdentityHashMap_rehash(FreemarkerExtUtilIdentityHashMap *self);

__attribute__((unused)) static id<JavaUtilIterator> FreemarkerExtUtilIdentityHashMap_getHashIteratorWithInt_(FreemarkerExtUtilIdentityHashMap *self, jint type);

/**
 @brief IdentityHashMap collision list entry.
 */
@interface FreemarkerExtUtilIdentityHashMap_Entry : NSObject < JavaUtilMap_Entry > {
 @public
  jint hash__;
  id key_;
  id value_;
  FreemarkerExtUtilIdentityHashMap_Entry *next_;
}

- (instancetype)initWithInt:(jint)hash_
                     withId:(id)key
                     withId:(id)value
withFreemarkerExtUtilIdentityHashMap_Entry:(FreemarkerExtUtilIdentityHashMap_Entry *)next;

- (id)clone;

- (id)getKey;

- (id)getValue;

- (id)setValueWithId:(id)value;

- (jboolean)isEqual:(id)o;

- (NSUInteger)hash;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(FreemarkerExtUtilIdentityHashMap_Entry)

J2OBJC_FIELD_SETTER(FreemarkerExtUtilIdentityHashMap_Entry, key_, id)
J2OBJC_FIELD_SETTER(FreemarkerExtUtilIdentityHashMap_Entry, value_, id)
J2OBJC_FIELD_SETTER(FreemarkerExtUtilIdentityHashMap_Entry, next_, FreemarkerExtUtilIdentityHashMap_Entry *)

__attribute__((unused)) static void FreemarkerExtUtilIdentityHashMap_Entry_initWithInt_withId_withId_withFreemarkerExtUtilIdentityHashMap_Entry_(FreemarkerExtUtilIdentityHashMap_Entry *self, jint hash_, id key, id value, FreemarkerExtUtilIdentityHashMap_Entry *next);

__attribute__((unused)) static FreemarkerExtUtilIdentityHashMap_Entry *new_FreemarkerExtUtilIdentityHashMap_Entry_initWithInt_withId_withId_withFreemarkerExtUtilIdentityHashMap_Entry_(jint hash_, id key, id value, FreemarkerExtUtilIdentityHashMap_Entry *next) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerExtUtilIdentityHashMap_Entry)

@interface FreemarkerExtUtilIdentityHashMap_EmptyHashIterator : NSObject < JavaUtilIterator >

- (instancetype)init;

- (jboolean)hasNext;

- (id)next;

- (void)remove;

@end

J2OBJC_EMPTY_STATIC_INIT(FreemarkerExtUtilIdentityHashMap_EmptyHashIterator)

__attribute__((unused)) static void FreemarkerExtUtilIdentityHashMap_EmptyHashIterator_init(FreemarkerExtUtilIdentityHashMap_EmptyHashIterator *self);

__attribute__((unused)) static FreemarkerExtUtilIdentityHashMap_EmptyHashIterator *new_FreemarkerExtUtilIdentityHashMap_EmptyHashIterator_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerExtUtilIdentityHashMap_EmptyHashIterator)

@interface FreemarkerExtUtilIdentityHashMap_HashIterator : NSObject < JavaUtilIterator > {
 @public
  FreemarkerExtUtilIdentityHashMap *this$0_;
  IOSObjectArray *table_;
  jint index_;
  FreemarkerExtUtilIdentityHashMap_Entry *entry__;
  FreemarkerExtUtilIdentityHashMap_Entry *lastReturned_;
  jint type_;
  /**
   @brief The modCount value that the iterator believes that the backing List should have.
   If this expectation is violated, the iterator has detected concurrent modification.
   */
  jint expectedModCount_;
}

- (instancetype)initWithFreemarkerExtUtilIdentityHashMap:(FreemarkerExtUtilIdentityHashMap *)outer$
                                                 withInt:(jint)type;

- (jboolean)hasNext;

- (id)next;

- (void)remove;

@end

J2OBJC_EMPTY_STATIC_INIT(FreemarkerExtUtilIdentityHashMap_HashIterator)

J2OBJC_FIELD_SETTER(FreemarkerExtUtilIdentityHashMap_HashIterator, this$0_, FreemarkerExtUtilIdentityHashMap *)
J2OBJC_FIELD_SETTER(FreemarkerExtUtilIdentityHashMap_HashIterator, table_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(FreemarkerExtUtilIdentityHashMap_HashIterator, entry__, FreemarkerExtUtilIdentityHashMap_Entry *)
J2OBJC_FIELD_SETTER(FreemarkerExtUtilIdentityHashMap_HashIterator, lastReturned_, FreemarkerExtUtilIdentityHashMap_Entry *)

__attribute__((unused)) static void FreemarkerExtUtilIdentityHashMap_HashIterator_initWithFreemarkerExtUtilIdentityHashMap_withInt_(FreemarkerExtUtilIdentityHashMap_HashIterator *self, FreemarkerExtUtilIdentityHashMap *outer$, jint type);

__attribute__((unused)) static FreemarkerExtUtilIdentityHashMap_HashIterator *new_FreemarkerExtUtilIdentityHashMap_HashIterator_initWithFreemarkerExtUtilIdentityHashMap_withInt_(FreemarkerExtUtilIdentityHashMap *outer$, jint type) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerExtUtilIdentityHashMap_HashIterator)

@interface FreemarkerExtUtilIdentityHashMap_$1 : JavaUtilAbstractSet {
 @public
  FreemarkerExtUtilIdentityHashMap *this$0_;
}

- (id<JavaUtilIterator>)iterator;

- (jint)size;

- (jboolean)containsWithId:(id)o;

- (jboolean)removeWithId:(id)o;

- (void)clear;

- (instancetype)initWithFreemarkerExtUtilIdentityHashMap:(FreemarkerExtUtilIdentityHashMap *)outer$;


@end

J2OBJC_EMPTY_STATIC_INIT(FreemarkerExtUtilIdentityHashMap_$1)

J2OBJC_FIELD_SETTER(FreemarkerExtUtilIdentityHashMap_$1, this$0_, FreemarkerExtUtilIdentityHashMap *)

__attribute__((unused)) static void FreemarkerExtUtilIdentityHashMap_$1_initWithFreemarkerExtUtilIdentityHashMap_(FreemarkerExtUtilIdentityHashMap_$1 *self, FreemarkerExtUtilIdentityHashMap *outer$);

__attribute__((unused)) static FreemarkerExtUtilIdentityHashMap_$1 *new_FreemarkerExtUtilIdentityHashMap_$1_initWithFreemarkerExtUtilIdentityHashMap_(FreemarkerExtUtilIdentityHashMap *outer$) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerExtUtilIdentityHashMap_$1)

@interface FreemarkerExtUtilIdentityHashMap_$2 : JavaUtilAbstractCollection {
 @public
  FreemarkerExtUtilIdentityHashMap *this$0_;
}

- (id<JavaUtilIterator>)iterator;

- (jint)size;

- (jboolean)containsWithId:(id)o;

- (void)clear;

- (instancetype)initWithFreemarkerExtUtilIdentityHashMap:(FreemarkerExtUtilIdentityHashMap *)outer$;


@end

J2OBJC_EMPTY_STATIC_INIT(FreemarkerExtUtilIdentityHashMap_$2)

J2OBJC_FIELD_SETTER(FreemarkerExtUtilIdentityHashMap_$2, this$0_, FreemarkerExtUtilIdentityHashMap *)

__attribute__((unused)) static void FreemarkerExtUtilIdentityHashMap_$2_initWithFreemarkerExtUtilIdentityHashMap_(FreemarkerExtUtilIdentityHashMap_$2 *self, FreemarkerExtUtilIdentityHashMap *outer$);

__attribute__((unused)) static FreemarkerExtUtilIdentityHashMap_$2 *new_FreemarkerExtUtilIdentityHashMap_$2_initWithFreemarkerExtUtilIdentityHashMap_(FreemarkerExtUtilIdentityHashMap *outer$) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerExtUtilIdentityHashMap_$2)

@interface FreemarkerExtUtilIdentityHashMap_$3 : JavaUtilAbstractSet {
 @public
  FreemarkerExtUtilIdentityHashMap *this$0_;
}

- (id<JavaUtilIterator>)iterator;

- (jboolean)containsWithId:(id)o;

- (jboolean)removeWithId:(id)o;

- (jint)size;

- (void)clear;

- (instancetype)initWithFreemarkerExtUtilIdentityHashMap:(FreemarkerExtUtilIdentityHashMap *)outer$;


@end

J2OBJC_EMPTY_STATIC_INIT(FreemarkerExtUtilIdentityHashMap_$3)

J2OBJC_FIELD_SETTER(FreemarkerExtUtilIdentityHashMap_$3, this$0_, FreemarkerExtUtilIdentityHashMap *)

__attribute__((unused)) static void FreemarkerExtUtilIdentityHashMap_$3_initWithFreemarkerExtUtilIdentityHashMap_(FreemarkerExtUtilIdentityHashMap_$3 *self, FreemarkerExtUtilIdentityHashMap *outer$);

__attribute__((unused)) static FreemarkerExtUtilIdentityHashMap_$3 *new_FreemarkerExtUtilIdentityHashMap_$3_initWithFreemarkerExtUtilIdentityHashMap_(FreemarkerExtUtilIdentityHashMap *outer$) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerExtUtilIdentityHashMap_$3)

J2OBJC_INITIALIZED_DEFN(FreemarkerExtUtilIdentityHashMap)


#line 35
@implementation FreemarkerExtUtilIdentityHashMap


#line 80
- (instancetype)initWithInt:(jint)initialCapacity
                  withFloat:(jfloat)loadFactor {
  FreemarkerExtUtilIdentityHashMap_initWithInt_withFloat_(self, initialCapacity, loadFactor);
  return self;
}


#line 103
- (instancetype)initWithInt:(jint)initialCapacity {
  FreemarkerExtUtilIdentityHashMap_initWithInt_(self, initialCapacity);
  return self;
}


#line 112
- (instancetype)init {
  FreemarkerExtUtilIdentityHashMap_init(self);
  return self;
}


#line 125
- (instancetype)initWithJavaUtilMap:(id<JavaUtilMap>)t {
  FreemarkerExtUtilIdentityHashMap_initWithJavaUtilMap_(self, t);
  return self;
}


#line 136
- (jint)size {
  
#line 138
  return count_;
}


#line 146
- (jboolean)isEmpty {
  
#line 148
  return count_ == 0;
}


#line 159
- (jboolean)containsValueWithId:(id)value {
  
#line 161
  IOSObjectArray *tab = table_;
  
#line 163
  if (value == nil) {
    
#line 165
    for (jint i = ((IOSObjectArray *) nil_chk(tab))->size_; i-- > 0; )
#line 166
    for (FreemarkerExtUtilIdentityHashMap_Entry *e = IOSObjectArray_Get(tab, i); e != nil; e = e->next_)
#line 167
    if (((FreemarkerExtUtilIdentityHashMap_Entry *) nil_chk(e))->value_ == nil)
#line 168
    return YES;
  }
  else {
    
#line 172
    for (jint i = ((IOSObjectArray *) nil_chk(tab))->size_; i-- > 0; )
#line 173
    for (FreemarkerExtUtilIdentityHashMap_Entry *e = IOSObjectArray_Get(tab, i); e != nil; e = e->next_)
#line 174
    if ([value isEqual:((FreemarkerExtUtilIdentityHashMap_Entry *) nil_chk(e))->value_])
#line 175
    return YES;
  }
  
#line 178
  return NO;
}


#line 189
- (jboolean)containsKeyWithId:(id)key {
  
#line 191
  IOSObjectArray *tab = table_;
  if (key != nil) {
    
#line 194
    jint hash_ = JavaLangSystem_identityHashCodeWithId_(key);
    jint index = (hash_ & (jint) 0x7FFFFFFF) % ((IOSObjectArray *) nil_chk(tab))->size_;
    for (FreemarkerExtUtilIdentityHashMap_Entry *e = IOSObjectArray_Get(tab, index); e != nil; e = e->next_)
#line 197
    if (((FreemarkerExtUtilIdentityHashMap_Entry *) nil_chk(e))->hash__ == hash_ && key == e->key_)
#line 198
    return YES;
  }
  else {
    
#line 202
    for (FreemarkerExtUtilIdentityHashMap_Entry *e = IOSObjectArray_Get(nil_chk(tab), 0); e != nil; e = e->next_)
#line 203
    if (((FreemarkerExtUtilIdentityHashMap_Entry *) nil_chk(e))->key_ == nil)
#line 204
    return YES;
  }
  
#line 207
  return NO;
}


#line 221
- (id)getWithId:(id)key {
  
#line 223
  IOSObjectArray *tab = table_;
  
#line 225
  if (key != nil) {
    
#line 227
    jint hash_ = JavaLangSystem_identityHashCodeWithId_(key);
    jint index = (hash_ & (jint) 0x7FFFFFFF) % ((IOSObjectArray *) nil_chk(tab))->size_;
    for (FreemarkerExtUtilIdentityHashMap_Entry *e = IOSObjectArray_Get(tab, index); e != nil; e = e->next_)
#line 230
    if ((((FreemarkerExtUtilIdentityHashMap_Entry *) nil_chk(e))->hash__ == hash_) && key == e->key_)
#line 231
    return e->value_;
  }
  else {
    
#line 235
    for (FreemarkerExtUtilIdentityHashMap_Entry *e = IOSObjectArray_Get(nil_chk(tab), 0); e != nil; e = e->next_)
#line 236
    if (((FreemarkerExtUtilIdentityHashMap_Entry *) nil_chk(e))->key_ == nil)
#line 237
    return e->value_;
  }
  
#line 240
  return nil;
}


#line 248
- (void)rehash {
  FreemarkerExtUtilIdentityHashMap_rehash(self);
}


#line 286
- (id)putWithId:(id)key
         withId:(id)value {
  
#line 289
  IOSObjectArray *tab = table_;
  jint hash_ = 0;
  jint index = 0;
  
#line 293
  if (key != nil) {
    
#line 295
    hash_ = JavaLangSystem_identityHashCodeWithId_(key);
    index = (hash_ & (jint) 0x7FFFFFFF) % ((IOSObjectArray *) nil_chk(tab))->size_;
    for (FreemarkerExtUtilIdentityHashMap_Entry *e = IOSObjectArray_Get(tab, index); e != nil; e = e->next_) {
      
#line 299
      if ((((FreemarkerExtUtilIdentityHashMap_Entry *) nil_chk(e))->hash__ == hash_) && key == e->key_) {
        
#line 301
        id old = e->value_;
        e->value_ = value;
        return old;
      }
    }
  }
  else {
    
#line 309
    for (FreemarkerExtUtilIdentityHashMap_Entry *e = IOSObjectArray_Get(nil_chk(tab), 0); e != nil; e = e->next_) {
      
#line 311
      if (((FreemarkerExtUtilIdentityHashMap_Entry *) nil_chk(e))->key_ == nil) {
        
#line 313
        id old = e->value_;
        e->value_ = value;
        return old;
      }
    }
  }
  
#line 320
  modCount_++;
  if (count_ >= threshold_) {
    
#line 324
    FreemarkerExtUtilIdentityHashMap_rehash(self);
    
#line 326
    tab = table_;
    index = (hash_ & (jint) 0x7FFFFFFF) % ((IOSObjectArray *) nil_chk(tab))->size_;
  }
  
#line 331
  FreemarkerExtUtilIdentityHashMap_Entry *e = new_FreemarkerExtUtilIdentityHashMap_Entry_initWithInt_withId_withId_withFreemarkerExtUtilIdentityHashMap_Entry_(hash_, key, value, IOSObjectArray_Get(nil_chk(tab), index));
  (void) IOSObjectArray_Set(tab, index, e);
  count_++;
  return nil;
}


#line 346
- (id)removeWithId:(id)key {
  
#line 348
  IOSObjectArray *tab = table_;
  
#line 350
  if (key != nil) {
    
#line 352
    jint hash_ = JavaLangSystem_identityHashCodeWithId_(key);
    jint index = (hash_ & (jint) 0x7FFFFFFF) % ((IOSObjectArray *) nil_chk(tab))->size_;
    
#line 355
    for (FreemarkerExtUtilIdentityHashMap_Entry *e = IOSObjectArray_Get(tab, index), *prev = nil;
#line 356
    e != nil;
#line 357
    prev = e, e = e->next_) {
      
#line 359
      if ((((FreemarkerExtUtilIdentityHashMap_Entry *) nil_chk(e))->hash__ == hash_) && key == e->key_) {
        
#line 361
        modCount_++;
        if (prev != nil)
#line 363
        prev->next_ = e->next_;
        else
#line 365
        (void) IOSObjectArray_Set(tab, index, e->next_);
        
#line 367
        count_--;
        id oldValue = e->value_;
        e->value_ = nil;
        return oldValue;
      }
    }
  }
  else {
    
#line 376
    for (FreemarkerExtUtilIdentityHashMap_Entry *e = IOSObjectArray_Get(nil_chk(tab), 0), *prev = nil;
#line 377
    e != nil;
#line 378
    prev = e, e = e->next_) {
      
#line 380
      if (((FreemarkerExtUtilIdentityHashMap_Entry *) nil_chk(e))->key_ == nil) {
        
#line 382
        modCount_++;
        if (prev != nil)
#line 384
        prev->next_ = e->next_;
        else
#line 386
        (void) IOSObjectArray_Set(tab, 0, e->next_);
        
#line 388
        count_--;
        id oldValue = e->value_;
        e->value_ = nil;
        return oldValue;
      }
    }
  }
  
#line 396
  return nil;
}


#line 407
- (void)putAllWithJavaUtilMap:(id<JavaUtilMap>)t {
  
#line 409
  id<JavaUtilIterator> i = [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(t)) entrySet])) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(i)) hasNext]) {
    
#line 412
    id<JavaUtilMap_Entry> e = (id<JavaUtilMap_Entry>) check_protocol_cast([i next], @protocol(JavaUtilMap_Entry));
    (void) [self putWithId:[((id<JavaUtilMap_Entry>) nil_chk(e)) getKey] withId:[e getValue]];
  }
}


#line 420
- (void)clear {
  
#line 422
  IOSObjectArray *tab = table_;
  modCount_++;
  for (jint index = ((IOSObjectArray *) nil_chk(tab))->size_; --index >= 0; )
#line 425
  (void) IOSObjectArray_Set(tab, index, nil);
  count_ = 0;
}


#line 435
- (id)clone {
  
#line 437
  @try {
    
#line 439
    FreemarkerExtUtilIdentityHashMap *t = (FreemarkerExtUtilIdentityHashMap *) check_class_cast([super clone], [FreemarkerExtUtilIdentityHashMap class]);
    ((FreemarkerExtUtilIdentityHashMap *) nil_chk(t))->table_ = [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(table_))->size_ type:FreemarkerExtUtilIdentityHashMap_Entry_class_()];
    for (jint i = table_->size_; i-- > 0; ) {
      
#line 443
      (void) IOSObjectArray_Set(t->table_, i,
#line 444
      (IOSObjectArray_Get(table_, i) != nil) ? (FreemarkerExtUtilIdentityHashMap_Entry *) check_class_cast([((FreemarkerExtUtilIdentityHashMap_Entry *) nil_chk(IOSObjectArray_Get(table_, i))) clone], [FreemarkerExtUtilIdentityHashMap_Entry class]) : nil);
    }
    t->keySet_IdentityHashMap_ = nil;
    t->entrySet_ = nil;
    t->values_ = nil;
    t->modCount_ = 0;
    return t;
  }
  @catch (JavaLangCloneNotSupportedException *e) {
    
#line 455
    @throw new_JavaLangInternalError_init();
  }
}


#line 476
- (id<JavaUtilSet>)keySet {
  
#line 478
  if (keySet_IdentityHashMap_ == nil) {
    
#line 480
    keySet_IdentityHashMap_ = new_FreemarkerExtUtilIdentityHashMap_$1_initWithFreemarkerExtUtilIdentityHashMap_(self);
  }
  
#line 506
  return keySet_IdentityHashMap_;
}


#line 520
- (id<JavaUtilCollection>)values {
  
#line 522
  if (values_ == nil) {
    
#line 524
    values_ = new_FreemarkerExtUtilIdentityHashMap_$2_initWithFreemarkerExtUtilIdentityHashMap_(self);
  }
  
#line 544
  return values_;
}


#line 560
- (id<JavaUtilSet>)entrySet {
  
#line 562
  if (entrySet_ == nil) {
    
#line 564
    entrySet_ = new_FreemarkerExtUtilIdentityHashMap_$3_initWithFreemarkerExtUtilIdentityHashMap_(self);
  }
  
#line 629
  return entrySet_;
}


#line 632
- (id<JavaUtilIterator>)getHashIteratorWithInt:(jint)type {
  return FreemarkerExtUtilIdentityHashMap_getHashIteratorWithInt_(self, type);
}


#line 845
- (void)writeObjectWithJavaIoObjectOutputStream:(JavaIoObjectOutputStream *)s {
  
#line 849
  [((JavaIoObjectOutputStream *) nil_chk(s)) defaultWriteObject];
  
#line 852
  [s writeIntWithInt:((IOSObjectArray *) nil_chk(table_))->size_];
  
#line 855
  [s writeIntWithInt:count_];
  
#line 858
  for (jint index = table_->size_ - 1; index >= 0; index--) {
    
#line 860
    FreemarkerExtUtilIdentityHashMap_Entry *entry_ = IOSObjectArray_Get(table_, index);
    
#line 862
    while (entry_ != nil) {
      
#line 864
      [s writeObjectWithId:((FreemarkerExtUtilIdentityHashMap_Entry *) nil_chk(entry_))->key_];
      [s writeObjectWithId:entry_->value_];
      entry_ = entry_->next_;
    }
  }
}


#line 875
- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)s {
  
#line 879
  [((JavaIoObjectInputStream *) nil_chk(s)) defaultReadObject];
  
#line 882
  jint numBuckets = [s readInt];
  table_ = [IOSObjectArray newArrayWithLength:numBuckets type:FreemarkerExtUtilIdentityHashMap_Entry_class_()];
  
#line 886
  jint size = [s readInt];
  
#line 889
  for (jint i = 0; i < size; i++) {
    
#line 891
    id key = [s readObject];
    id value = [s readObject];
    (void) [self putWithId:key withId:value];
  }
}

- (jint)capacity {
  
#line 899
  return ((IOSObjectArray *) nil_chk(table_))->size_;
}


#line 902
- (jfloat)loadFactor {
  
#line 904
  return loadFactor_;
}

- (id)copyWithZone:(NSZone *)zone {
  return [self clone];
}

+ (void)initialize {
  if (self == [FreemarkerExtUtilIdentityHashMap class]) {
    FreemarkerExtUtilIdentityHashMap_emptyHashIterator_ = new_FreemarkerExtUtilIdentityHashMap_EmptyHashIterator_init();
    J2OBJC_SET_INITIALIZED(FreemarkerExtUtilIdentityHashMap)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithInt:withFloat:", "IdentityHashMap", NULL, 0x1, NULL, NULL },
    { "initWithInt:", "IdentityHashMap", NULL, 0x1, NULL, NULL },
    { "init", "IdentityHashMap", NULL, 0x1, NULL, NULL },
    { "initWithJavaUtilMap:", "IdentityHashMap", NULL, 0x1, NULL, NULL },
    { "size", NULL, "I", 0x1, NULL, NULL },
    { "isEmpty", NULL, "Z", 0x1, NULL, NULL },
    { "containsValueWithId:", "containsValue", "Z", 0x1, NULL, NULL },
    { "containsKeyWithId:", "containsKey", "Z", 0x1, NULL, NULL },
    { "getWithId:", "get", "Ljava.lang.Object;", 0x1, NULL, NULL },
    { "rehash", NULL, "V", 0x2, NULL, NULL },
    { "putWithId:withId:", "put", "Ljava.lang.Object;", 0x1, NULL, NULL },
    { "removeWithId:", "remove", "Ljava.lang.Object;", 0x1, NULL, NULL },
    { "putAllWithJavaUtilMap:", "putAll", "V", 0x1, NULL, NULL },
    { "clear", NULL, "V", 0x1, NULL, NULL },
    { "clone", NULL, "Ljava.lang.Object;", 0x1, NULL, NULL },
    { "keySet", NULL, "Ljava.util.Set;", 0x1, NULL, NULL },
    { "values", NULL, "Ljava.util.Collection;", 0x1, NULL, NULL },
    { "entrySet", NULL, "Ljava.util.Set;", 0x1, NULL, NULL },
    { "getHashIteratorWithInt:", "getHashIterator", "Ljava.util.Iterator;", 0x2, NULL, NULL },
    { "writeObjectWithJavaIoObjectOutputStream:", "writeObject", "V", 0x2, "Ljava.io.IOException;", NULL },
    { "readObjectWithJavaIoObjectInputStream:", "readObject", "V", 0x2, "Ljava.io.IOException;Ljava.lang.ClassNotFoundException;", NULL },
    { "capacity", NULL, "I", 0x0, NULL, NULL },
    { "loadFactor", NULL, "F", 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x19, "J", NULL, NULL, .constantValue.asLong = FreemarkerExtUtilIdentityHashMap_serialVersionUID },
    { "table_", NULL, 0x82, "[Lfreemarker.ext.util.IdentityHashMap$Entry;", NULL, NULL,  },
    { "count_", NULL, 0x82, "I", NULL, NULL,  },
    { "threshold_", NULL, 0x2, "I", NULL, NULL,  },
    { "loadFactor_", NULL, 0x2, "F", NULL, NULL,  },
    { "modCount_", NULL, 0x82, "I", NULL, NULL,  },
    { "keySet_IdentityHashMap_", "keySet", 0x82, "Ljava.util.Set;", NULL, NULL,  },
    { "entrySet_", NULL, 0x82, "Ljava.util.Set;", NULL, NULL,  },
    { "values_", NULL, 0x82, "Ljava.util.Collection;", NULL, NULL,  },
    { "KEYS_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = FreemarkerExtUtilIdentityHashMap_KEYS },
    { "VALUES_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = FreemarkerExtUtilIdentityHashMap_VALUES },
    { "ENTRIES_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = FreemarkerExtUtilIdentityHashMap_ENTRIES },
    { "emptyHashIterator_", NULL, 0xa, "Lfreemarker.ext.util.IdentityHashMap$EmptyHashIterator;", &FreemarkerExtUtilIdentityHashMap_emptyHashIterator_, NULL,  },
  };
  static const char *inner_classes[] = {"Lfreemarker.ext.util.IdentityHashMap$Entry;", "Lfreemarker.ext.util.IdentityHashMap$EmptyHashIterator;", "Lfreemarker.ext.util.IdentityHashMap$HashIterator;"};
  static const J2ObjcClassInfo _FreemarkerExtUtilIdentityHashMap = { 2, "IdentityHashMap", "freemarker.ext.util", NULL, 0x1, 23, methods, 13, fields, 0, NULL, 3, inner_classes, NULL, NULL };
  return &_FreemarkerExtUtilIdentityHashMap;
}

@end


#line 80
void FreemarkerExtUtilIdentityHashMap_initWithInt_withFloat_(FreemarkerExtUtilIdentityHashMap *self, jint initialCapacity, jfloat loadFactor) {
  (void) JavaUtilAbstractMap_init(self);
  self->modCount_ =
#line 69
  0;
  self->keySet_IdentityHashMap_ =
#line 461
  nil;
  self->entrySet_ = nil;
  self->values_ = nil;
  
#line 82
  if (initialCapacity < 0)
#line 83
  @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"Illegal Initial Capacity: ",
#line 84
  initialCapacity));
  if (loadFactor <= 0 || JavaLangFloat_isNaNWithFloat_(loadFactor))
#line 86
  @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$F", @"Illegal Load factor: ",
#line 87
  loadFactor));
  if (initialCapacity == 0)
#line 89
  initialCapacity = 1;
  self->loadFactor_ = loadFactor;
  self->table_ = [IOSObjectArray newArrayWithLength:initialCapacity type:FreemarkerExtUtilIdentityHashMap_Entry_class_()];
  self->threshold_ = J2ObjCFpToInt((initialCapacity * loadFactor));
}


#line 80
FreemarkerExtUtilIdentityHashMap *new_FreemarkerExtUtilIdentityHashMap_initWithInt_withFloat_(jint initialCapacity, jfloat loadFactor) {
  FreemarkerExtUtilIdentityHashMap *self = [FreemarkerExtUtilIdentityHashMap alloc];
  FreemarkerExtUtilIdentityHashMap_initWithInt_withFloat_(self, initialCapacity, loadFactor);
  return self;
}


#line 103
void FreemarkerExtUtilIdentityHashMap_initWithInt_(FreemarkerExtUtilIdentityHashMap *self, jint initialCapacity) {
  (void) FreemarkerExtUtilIdentityHashMap_initWithInt_withFloat_(self,
#line 105
  initialCapacity, 0.75f);
}


#line 103
FreemarkerExtUtilIdentityHashMap *new_FreemarkerExtUtilIdentityHashMap_initWithInt_(jint initialCapacity) {
  FreemarkerExtUtilIdentityHashMap *self = [FreemarkerExtUtilIdentityHashMap alloc];
  FreemarkerExtUtilIdentityHashMap_initWithInt_(self, initialCapacity);
  return self;
}


#line 112
void FreemarkerExtUtilIdentityHashMap_init(FreemarkerExtUtilIdentityHashMap *self) {
  (void) FreemarkerExtUtilIdentityHashMap_initWithInt_withFloat_(self,
#line 114
  11, 0.75f);
}


#line 112
FreemarkerExtUtilIdentityHashMap *new_FreemarkerExtUtilIdentityHashMap_init() {
  FreemarkerExtUtilIdentityHashMap *self = [FreemarkerExtUtilIdentityHashMap alloc];
  FreemarkerExtUtilIdentityHashMap_init(self);
  return self;
}


#line 125
void FreemarkerExtUtilIdentityHashMap_initWithJavaUtilMap_(FreemarkerExtUtilIdentityHashMap *self, id<JavaUtilMap> t) {
  (void) FreemarkerExtUtilIdentityHashMap_initWithInt_withFloat_(self, JavaLangMath_maxWithInt_withInt_(
#line 127
  2 * [((id<JavaUtilMap>) nil_chk(t)) size], 11), 0.75f);
  [self putAllWithJavaUtilMap:t];
}


#line 125
FreemarkerExtUtilIdentityHashMap *new_FreemarkerExtUtilIdentityHashMap_initWithJavaUtilMap_(id<JavaUtilMap> t) {
  FreemarkerExtUtilIdentityHashMap *self = [FreemarkerExtUtilIdentityHashMap alloc];
  FreemarkerExtUtilIdentityHashMap_initWithJavaUtilMap_(self, t);
  return self;
}


#line 248
void FreemarkerExtUtilIdentityHashMap_rehash(FreemarkerExtUtilIdentityHashMap *self) {
  
#line 250
  jint oldCapacity = ((IOSObjectArray *) nil_chk(self->table_))->size_;
  IOSObjectArray *oldMap = self->table_;
  
#line 253
  jint newCapacity = oldCapacity * 2 + 1;
  IOSObjectArray *newMap = [IOSObjectArray newArrayWithLength:newCapacity type:FreemarkerExtUtilIdentityHashMap_Entry_class_()];
  
#line 256
  self->modCount_++;
  self->threshold_ = J2ObjCFpToInt((newCapacity * self->loadFactor_));
  self->table_ = newMap;
  
#line 260
  for (jint i = oldCapacity; i-- > 0; ) {
    
#line 262
    for (FreemarkerExtUtilIdentityHashMap_Entry *old = IOSObjectArray_Get(oldMap, i); old != nil; ) {
      
#line 264
      FreemarkerExtUtilIdentityHashMap_Entry *e = old;
      old = ((FreemarkerExtUtilIdentityHashMap_Entry *) nil_chk(old))->next_;
      
#line 267
      jint index = (((FreemarkerExtUtilIdentityHashMap_Entry *) nil_chk(e))->hash__ & (jint) 0x7FFFFFFF) % newCapacity;
      e->next_ = IOSObjectArray_Get(newMap, index);
      (void) IOSObjectArray_Set(newMap, index, e);
    }
  }
}


#line 632
id<JavaUtilIterator> FreemarkerExtUtilIdentityHashMap_getHashIteratorWithInt_(FreemarkerExtUtilIdentityHashMap *self, jint type) {
  
#line 634
  if (self->count_ == 0) {
    
#line 636
    return FreemarkerExtUtilIdentityHashMap_emptyHashIterator_;
  }
  else {
    
#line 640
    return new_FreemarkerExtUtilIdentityHashMap_HashIterator_initWithFreemarkerExtUtilIdentityHashMap_withInt_(self, type);
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerExtUtilIdentityHashMap)


#line 647
@implementation FreemarkerExtUtilIdentityHashMap_Entry


#line 654
- (instancetype)initWithInt:(jint)hash_
                     withId:(id)key
                     withId:(id)value
withFreemarkerExtUtilIdentityHashMap_Entry:(FreemarkerExtUtilIdentityHashMap_Entry *)next {
  FreemarkerExtUtilIdentityHashMap_Entry_initWithInt_withId_withId_withFreemarkerExtUtilIdentityHashMap_Entry_(self, hash_, key, value, next);
  return self;
}

- (id)clone {
  
#line 664
  return new_FreemarkerExtUtilIdentityHashMap_Entry_initWithInt_withId_withId_withFreemarkerExtUtilIdentityHashMap_Entry_(
#line 665
  hash__,
#line 666
  key_,
#line 667
  value_,
#line 668
  (next_ == nil ? nil : (FreemarkerExtUtilIdentityHashMap_Entry *) check_class_cast([next_ clone], [FreemarkerExtUtilIdentityHashMap_Entry class])));
}


#line 673
- (id)getKey {
  
#line 675
  return key_;
}


#line 678
- (id)getValue {
  
#line 680
  return value_;
}


#line 683
- (id)setValueWithId:(id)value {
  
#line 685
  id oldValue = self->value_;
  self->value_ = value;
  return oldValue;
}


#line 690
- (jboolean)isEqual:(id)o {
  
#line 692
  if (!([JavaUtilMap_Entry_class_() isInstance:o]))
#line 693
  return NO;
  id<JavaUtilMap_Entry> e = (id<JavaUtilMap_Entry>) check_protocol_cast(o, @protocol(JavaUtilMap_Entry));
  
#line 696
  return (key_ == [((id<JavaUtilMap_Entry>) nil_chk(e)) getKey]) &&
#line 697
  (value_ == nil ?
#line 698
  [e getValue] == nil :
#line 699
  [value_ isEqual:[e getValue]]);
}


#line 702
- (NSUInteger)hash {
  
#line 704
  return hash__ ^ (value_ == nil ? 0 : ((jint) [value_ hash]));
}


#line 707
- (NSString *)description {
  
#line 709
  return JreStrcat("@C@", key_, '=', value_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithInt:withId:withId:withFreemarkerExtUtilIdentityHashMap_Entry:", "Entry", NULL, 0x0, NULL, NULL },
    { "clone", NULL, "Ljava.lang.Object;", 0x4, NULL, NULL },
    { "getKey", NULL, "Ljava.lang.Object;", 0x1, NULL, NULL },
    { "getValue", NULL, "Ljava.lang.Object;", 0x1, NULL, NULL },
    { "setValueWithId:", "setValue", "Ljava.lang.Object;", 0x1, NULL, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL, NULL },
    { "hash", "hashCode", "I", 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "hash__", "hash", 0x0, "I", NULL, NULL,  },
    { "key_", NULL, 0x0, "Ljava.lang.Object;", NULL, NULL,  },
    { "value_", NULL, 0x0, "Ljava.lang.Object;", NULL, NULL,  },
    { "next_", NULL, 0x0, "Lfreemarker.ext.util.IdentityHashMap$Entry;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerExtUtilIdentityHashMap_Entry = { 2, "Entry", "freemarker.ext.util", "IdentityHashMap", 0xa, 8, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerExtUtilIdentityHashMap_Entry;
}

@end


#line 654
void FreemarkerExtUtilIdentityHashMap_Entry_initWithInt_withId_withId_withFreemarkerExtUtilIdentityHashMap_Entry_(FreemarkerExtUtilIdentityHashMap_Entry *self, jint hash_, id key, id value, FreemarkerExtUtilIdentityHashMap_Entry *next) {
  (void) NSObject_init(self);
  self->hash__ = hash_;
  self->key_ = key;
  self->value_ = value;
  self->next_ = next;
}


#line 654
FreemarkerExtUtilIdentityHashMap_Entry *new_FreemarkerExtUtilIdentityHashMap_Entry_initWithInt_withId_withId_withFreemarkerExtUtilIdentityHashMap_Entry_(jint hash_, id key, id value, FreemarkerExtUtilIdentityHashMap_Entry *next) {
  FreemarkerExtUtilIdentityHashMap_Entry *self = [FreemarkerExtUtilIdentityHashMap_Entry alloc];
  FreemarkerExtUtilIdentityHashMap_Entry_initWithInt_withId_withId_withFreemarkerExtUtilIdentityHashMap_Entry_(self, hash_, key, value, next);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerExtUtilIdentityHashMap_Entry)


#line 721
@implementation FreemarkerExtUtilIdentityHashMap_EmptyHashIterator


#line 724
- (instancetype)init {
  FreemarkerExtUtilIdentityHashMap_EmptyHashIterator_init(self);
  return self;
}

- (jboolean)hasNext {
  
#line 731
  return NO;
}


#line 734
- (id)next {
  
#line 736
  @throw new_JavaUtilNoSuchElementException_init();
}


#line 739
- (void)remove {
  
#line 741
  @throw new_JavaLangIllegalStateException_init();
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "EmptyHashIterator", NULL, 0x0, NULL, NULL },
    { "hasNext", NULL, "Z", 0x1, NULL, NULL },
    { "next", NULL, "Ljava.lang.Object;", 0x1, NULL, NULL },
    { "remove", NULL, "V", 0x1, NULL, NULL },
  };
  static const J2ObjcClassInfo _FreemarkerExtUtilIdentityHashMap_EmptyHashIterator = { 2, "EmptyHashIterator", "freemarker.ext.util", "IdentityHashMap", 0xa, 4, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerExtUtilIdentityHashMap_EmptyHashIterator;
}

@end


#line 724
void FreemarkerExtUtilIdentityHashMap_EmptyHashIterator_init(FreemarkerExtUtilIdentityHashMap_EmptyHashIterator *self) {
  (void) NSObject_init(self);
}


#line 724
FreemarkerExtUtilIdentityHashMap_EmptyHashIterator *new_FreemarkerExtUtilIdentityHashMap_EmptyHashIterator_init() {
  FreemarkerExtUtilIdentityHashMap_EmptyHashIterator *self = [FreemarkerExtUtilIdentityHashMap_EmptyHashIterator alloc];
  FreemarkerExtUtilIdentityHashMap_EmptyHashIterator_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerExtUtilIdentityHashMap_EmptyHashIterator)


#line 746
@implementation FreemarkerExtUtilIdentityHashMap_HashIterator


#line 761
- (instancetype)initWithFreemarkerExtUtilIdentityHashMap:(FreemarkerExtUtilIdentityHashMap *)outer$
                                                 withInt:(jint)type {
  FreemarkerExtUtilIdentityHashMap_HashIterator_initWithFreemarkerExtUtilIdentityHashMap_withInt_(self, outer$, type);
  return self;
}


#line 766
- (jboolean)hasNext {
  
#line 768
  FreemarkerExtUtilIdentityHashMap_Entry *e = entry__;
  jint i = index_;
  IOSObjectArray *t = table_;
  
#line 772
  while (e == nil && i > 0)
#line 773
  e = IOSObjectArray_Get(nil_chk(t), --i);
  entry__ = e;
  index_ = i;
  return e != nil;
}


#line 779
- (id)next {
  
#line 781
  if (this$0_->modCount_ != expectedModCount_)
#line 782
  @throw new_JavaUtilConcurrentModificationException_init();
  
#line 784
  FreemarkerExtUtilIdentityHashMap_Entry *et = entry__;
  jint i = index_;
  IOSObjectArray *t = table_;
  
#line 789
  while (et == nil && i > 0)
#line 790
  et = IOSObjectArray_Get(nil_chk(t), --i);
  
#line 792
  entry__ = et;
  index_ = i;
  if (et != nil) {
    
#line 796
    FreemarkerExtUtilIdentityHashMap_Entry *e = lastReturned_ = entry__;
    entry__ = e->next_;
    return type_ == FreemarkerExtUtilIdentityHashMap_KEYS ? e->key_ : (type_ == FreemarkerExtUtilIdentityHashMap_VALUES ? e->value_ : e);
  }
  @throw new_JavaUtilNoSuchElementException_init();
}


#line 803
- (void)remove {
  
#line 805
  if (lastReturned_ == nil)
#line 806
  @throw new_JavaLangIllegalStateException_init();
  if (this$0_->modCount_ != expectedModCount_)
#line 808
  @throw new_JavaUtilConcurrentModificationException_init();
  
#line 810
  IOSObjectArray *tab = this$0_->table_;
  jint index = (((FreemarkerExtUtilIdentityHashMap_Entry *) nil_chk(lastReturned_))->hash__ & (jint) 0x7FFFFFFF) % ((IOSObjectArray *) nil_chk(tab))->size_;
  
#line 813
  for (FreemarkerExtUtilIdentityHashMap_Entry *e = IOSObjectArray_Get(tab, index), *prev = nil;
#line 814
  e != nil;
#line 815
  prev = e, e = ((FreemarkerExtUtilIdentityHashMap_Entry *) nil_chk(e))->next_) {
    
#line 817
    if (e == lastReturned_) {
      
#line 819
      this$0_->modCount_++;
      expectedModCount_++;
      if (prev == nil)
#line 822
      (void) IOSObjectArray_Set(tab, index, ((FreemarkerExtUtilIdentityHashMap_Entry *) nil_chk(e))->next_);
      else
#line 824
      prev->next_ = ((FreemarkerExtUtilIdentityHashMap_Entry *) nil_chk(e))->next_;
      this$0_->count_--;
      lastReturned_ = nil;
      return;
    }
  }
  @throw new_JavaUtilConcurrentModificationException_init();
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithFreemarkerExtUtilIdentityHashMap:withInt:", "HashIterator", NULL, 0x0, NULL, NULL },
    { "hasNext", NULL, "Z", 0x1, NULL, NULL },
    { "next", NULL, "Ljava.lang.Object;", 0x1, NULL, NULL },
    { "remove", NULL, "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lfreemarker.ext.util.IdentityHashMap;", NULL, NULL,  },
    { "table_", NULL, 0x0, "[Lfreemarker.ext.util.IdentityHashMap$Entry;", NULL, NULL,  },
    { "index_", NULL, 0x0, "I", NULL, NULL,  },
    { "entry__", "entry", 0x0, "Lfreemarker.ext.util.IdentityHashMap$Entry;", NULL, NULL,  },
    { "lastReturned_", NULL, 0x0, "Lfreemarker.ext.util.IdentityHashMap$Entry;", NULL, NULL,  },
    { "type_", NULL, 0x0, "I", NULL, NULL,  },
    { "expectedModCount_", NULL, 0x2, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerExtUtilIdentityHashMap_HashIterator = { 2, "HashIterator", "freemarker.ext.util", "IdentityHashMap", 0x2, 4, methods, 7, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerExtUtilIdentityHashMap_HashIterator;
}

@end


#line 761
void FreemarkerExtUtilIdentityHashMap_HashIterator_initWithFreemarkerExtUtilIdentityHashMap_withInt_(FreemarkerExtUtilIdentityHashMap_HashIterator *self, FreemarkerExtUtilIdentityHashMap *outer$, jint type) {
  self->this$0_ = outer$;
  (void) NSObject_init(self);
  self->table_ =
#line 748
  outer$->table_;
  self->index_ = ((IOSObjectArray *) nil_chk(self->table_))->size_;
  self->entry__ = nil;
  self->lastReturned_ = nil;
  self->expectedModCount_ = outer$->modCount_;
  
#line 763
  self->type_ = type;
}


#line 761
FreemarkerExtUtilIdentityHashMap_HashIterator *new_FreemarkerExtUtilIdentityHashMap_HashIterator_initWithFreemarkerExtUtilIdentityHashMap_withInt_(FreemarkerExtUtilIdentityHashMap *outer$, jint type) {
  FreemarkerExtUtilIdentityHashMap_HashIterator *self = [FreemarkerExtUtilIdentityHashMap_HashIterator alloc];
  FreemarkerExtUtilIdentityHashMap_HashIterator_initWithFreemarkerExtUtilIdentityHashMap_withInt_(self, outer$, type);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerExtUtilIdentityHashMap_HashIterator)

@implementation FreemarkerExtUtilIdentityHashMap_$1


#line 482
- (id<JavaUtilIterator>)iterator {
  
#line 484
  return FreemarkerExtUtilIdentityHashMap_getHashIteratorWithInt_(this$0_, FreemarkerExtUtilIdentityHashMap_KEYS);
}


#line 486
- (jint)size {
  
#line 488
  return this$0_->count_;
}


#line 490
- (jboolean)containsWithId:(id)o {
  
#line 492
  return [this$0_ containsKeyWithId:o];
}


#line 494
- (jboolean)removeWithId:(id)o {
  
#line 496
  jint oldSize = this$0_->count_;
  (void) [this$0_ removeWithId:o];
  return this$0_->count_ != oldSize;
}


#line 500
- (void)clear {
  
#line 502
  [this$0_ clear];
}

- (instancetype)initWithFreemarkerExtUtilIdentityHashMap:(FreemarkerExtUtilIdentityHashMap *)outer$ {
  FreemarkerExtUtilIdentityHashMap_$1_initWithFreemarkerExtUtilIdentityHashMap_(self, outer$);
  return self;
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "iterator", NULL, "Ljava.util.Iterator;", 0x1, NULL, NULL },
    { "size", NULL, "I", 0x1, NULL, NULL },
    { "containsWithId:", "contains", "Z", 0x1, NULL, NULL },
    { "removeWithId:", "remove", "Z", 0x1, NULL, NULL },
    { "clear", NULL, "V", 0x1, NULL, NULL },
    { "initWithFreemarkerExtUtilIdentityHashMap:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lfreemarker.ext.util.IdentityHashMap;", NULL, NULL,  },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "FreemarkerExtUtilIdentityHashMap", "keySet" };
  static const J2ObjcClassInfo _FreemarkerExtUtilIdentityHashMap_$1 = { 2, "", "freemarker.ext.util", "IdentityHashMap", 0x8008, 6, methods, 1, fields, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_FreemarkerExtUtilIdentityHashMap_$1;
}

@end

void FreemarkerExtUtilIdentityHashMap_$1_initWithFreemarkerExtUtilIdentityHashMap_(FreemarkerExtUtilIdentityHashMap_$1 *self, FreemarkerExtUtilIdentityHashMap *outer$) {
  self->this$0_ = outer$;
  (void) JavaUtilAbstractSet_init(self);
}

FreemarkerExtUtilIdentityHashMap_$1 *new_FreemarkerExtUtilIdentityHashMap_$1_initWithFreemarkerExtUtilIdentityHashMap_(FreemarkerExtUtilIdentityHashMap *outer$) {
  FreemarkerExtUtilIdentityHashMap_$1 *self = [FreemarkerExtUtilIdentityHashMap_$1 alloc];
  FreemarkerExtUtilIdentityHashMap_$1_initWithFreemarkerExtUtilIdentityHashMap_(self, outer$);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerExtUtilIdentityHashMap_$1)

@implementation FreemarkerExtUtilIdentityHashMap_$2


#line 526
- (id<JavaUtilIterator>)iterator {
  
#line 528
  return FreemarkerExtUtilIdentityHashMap_getHashIteratorWithInt_(this$0_, FreemarkerExtUtilIdentityHashMap_VALUES);
}


#line 530
- (jint)size {
  
#line 532
  return this$0_->count_;
}


#line 534
- (jboolean)containsWithId:(id)o {
  
#line 536
  return [this$0_ containsValueWithId:o];
}


#line 538
- (void)clear {
  
#line 540
  [this$0_ clear];
}

- (instancetype)initWithFreemarkerExtUtilIdentityHashMap:(FreemarkerExtUtilIdentityHashMap *)outer$ {
  FreemarkerExtUtilIdentityHashMap_$2_initWithFreemarkerExtUtilIdentityHashMap_(self, outer$);
  return self;
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "iterator", NULL, "Ljava.util.Iterator;", 0x1, NULL, NULL },
    { "size", NULL, "I", 0x1, NULL, NULL },
    { "containsWithId:", "contains", "Z", 0x1, NULL, NULL },
    { "clear", NULL, "V", 0x1, NULL, NULL },
    { "initWithFreemarkerExtUtilIdentityHashMap:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lfreemarker.ext.util.IdentityHashMap;", NULL, NULL,  },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "FreemarkerExtUtilIdentityHashMap", "values" };
  static const J2ObjcClassInfo _FreemarkerExtUtilIdentityHashMap_$2 = { 2, "", "freemarker.ext.util", "IdentityHashMap", 0x8008, 5, methods, 1, fields, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_FreemarkerExtUtilIdentityHashMap_$2;
}

@end

void FreemarkerExtUtilIdentityHashMap_$2_initWithFreemarkerExtUtilIdentityHashMap_(FreemarkerExtUtilIdentityHashMap_$2 *self, FreemarkerExtUtilIdentityHashMap *outer$) {
  self->this$0_ = outer$;
  (void) JavaUtilAbstractCollection_init(self);
}

FreemarkerExtUtilIdentityHashMap_$2 *new_FreemarkerExtUtilIdentityHashMap_$2_initWithFreemarkerExtUtilIdentityHashMap_(FreemarkerExtUtilIdentityHashMap *outer$) {
  FreemarkerExtUtilIdentityHashMap_$2 *self = [FreemarkerExtUtilIdentityHashMap_$2 alloc];
  FreemarkerExtUtilIdentityHashMap_$2_initWithFreemarkerExtUtilIdentityHashMap_(self, outer$);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerExtUtilIdentityHashMap_$2)

@implementation FreemarkerExtUtilIdentityHashMap_$3


#line 566
- (id<JavaUtilIterator>)iterator {
  
#line 568
  return FreemarkerExtUtilIdentityHashMap_getHashIteratorWithInt_(this$0_, FreemarkerExtUtilIdentityHashMap_ENTRIES);
}


#line 571
- (jboolean)containsWithId:(id)o {
  
#line 573
  if (!([JavaUtilMap_Entry_class_() isInstance:o]))
#line 574
  return NO;
  id<JavaUtilMap_Entry> entry_ = (id<JavaUtilMap_Entry>) check_protocol_cast(o, @protocol(JavaUtilMap_Entry));
  id key = [((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey];
  IOSObjectArray *tab = this$0_->table_;
  jint hash_ = (key == nil ? 0 : JavaLangSystem_identityHashCodeWithId_(key));
  jint index = (hash_ & (jint) 0x7FFFFFFF) % ((IOSObjectArray *) nil_chk(tab))->size_;
  
#line 581
  for (FreemarkerExtUtilIdentityHashMap_Entry *e = IOSObjectArray_Get(tab, index); e != nil; e = e->next_)
#line 582
  if (((FreemarkerExtUtilIdentityHashMap_Entry *) nil_chk(e))->hash__ == hash_ && [e isEqual:entry_])
#line 583
  return YES;
  return NO;
}


#line 587
- (jboolean)removeWithId:(id)o {
  
#line 589
  if (!([JavaUtilMap_Entry_class_() isInstance:o]))
#line 590
  return NO;
  id<JavaUtilMap_Entry> entry_ = (id<JavaUtilMap_Entry>) check_protocol_cast(o, @protocol(JavaUtilMap_Entry));
  id key = [((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey];
  IOSObjectArray *tab = this$0_->table_;
  jint hash_ = (key == nil ? 0 : JavaLangSystem_identityHashCodeWithId_(key));
  jint index = (hash_ & (jint) 0x7FFFFFFF) % ((IOSObjectArray *) nil_chk(tab))->size_;
  
#line 597
  for (FreemarkerExtUtilIdentityHashMap_Entry *e = IOSObjectArray_Get(tab, index), *prev = nil;
#line 598
  e != nil;
#line 599
  prev = e, e = e->next_) {
    
#line 601
    if (((FreemarkerExtUtilIdentityHashMap_Entry *) nil_chk(e))->hash__ == hash_ && [e isEqual:entry_]) {
      
#line 603
      this$0_->modCount_++;
      if (prev != nil)
#line 605
      prev->next_ = e->next_;
      else
#line 607
      (void) IOSObjectArray_Set(tab, index, e->next_);
      
#line 609
      this$0_->count_--;
      e->value_ = nil;
      return YES;
    }
  }
  return NO;
}


#line 617
- (jint)size {
  
#line 619
  return this$0_->count_;
}


#line 622
- (void)clear {
  
#line 624
  [this$0_ clear];
}

- (instancetype)initWithFreemarkerExtUtilIdentityHashMap:(FreemarkerExtUtilIdentityHashMap *)outer$ {
  FreemarkerExtUtilIdentityHashMap_$3_initWithFreemarkerExtUtilIdentityHashMap_(self, outer$);
  return self;
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "iterator", NULL, "Ljava.util.Iterator;", 0x1, NULL, NULL },
    { "containsWithId:", "contains", "Z", 0x1, NULL, NULL },
    { "removeWithId:", "remove", "Z", 0x1, NULL, NULL },
    { "size", NULL, "I", 0x1, NULL, NULL },
    { "clear", NULL, "V", 0x1, NULL, NULL },
    { "initWithFreemarkerExtUtilIdentityHashMap:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lfreemarker.ext.util.IdentityHashMap;", NULL, NULL,  },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "FreemarkerExtUtilIdentityHashMap", "entrySet" };
  static const J2ObjcClassInfo _FreemarkerExtUtilIdentityHashMap_$3 = { 2, "", "freemarker.ext.util", "IdentityHashMap", 0x8008, 6, methods, 1, fields, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_FreemarkerExtUtilIdentityHashMap_$3;
}

@end

void FreemarkerExtUtilIdentityHashMap_$3_initWithFreemarkerExtUtilIdentityHashMap_(FreemarkerExtUtilIdentityHashMap_$3 *self, FreemarkerExtUtilIdentityHashMap *outer$) {
  self->this$0_ = outer$;
  (void) JavaUtilAbstractSet_init(self);
}

FreemarkerExtUtilIdentityHashMap_$3 *new_FreemarkerExtUtilIdentityHashMap_$3_initWithFreemarkerExtUtilIdentityHashMap_(FreemarkerExtUtilIdentityHashMap *outer$) {
  FreemarkerExtUtilIdentityHashMap_$3 *self = [FreemarkerExtUtilIdentityHashMap_$3 alloc];
  FreemarkerExtUtilIdentityHashMap_$3_initWithFreemarkerExtUtilIdentityHashMap_(self, outer$);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerExtUtilIdentityHashMap_$3)
