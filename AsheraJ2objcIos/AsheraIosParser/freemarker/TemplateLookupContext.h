//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/cache/TemplateLookupContext.java
//

#ifndef _FreemarkerCacheTemplateLookupContext_H_
#define _FreemarkerCacheTemplateLookupContext_H_

#include "J2ObjC_header.h"

@class FreemarkerCacheTemplateLookupResult;
@class JavaUtilLocale;

/**
 @brief Used as the parameter of TemplateLookupStrategy#lookup(TemplateLookupContext) .
 You can't create instances of this, only receive them from FreeMarker.
 @since 2.3.22
 */
@interface FreemarkerCacheTemplateLookupContext : NSObject

#pragma mark Public

/**
 @brief Creates a not-found lookup result that then can be used as the return value of TemplateLookupStrategy#lookup(TemplateLookupContext) .
 (In the current implementation it just always returns the same static singleton, but that might need to change in the future.)
 */
- (FreemarkerCacheTemplateLookupResult *)createNegativeLookupResult;

/**
 @brief Returns the value of the <code>customLookupCondition</code> parameter of Configuration#getTemplate(String,Locale,Object,String,boolean,boolean) ; see requirements there, such as having a proper Object#equals(Object) and Object#hashCode() method.
 The interpretation of this value is up to the custom TemplateLookupStrategy . Usually, it's used similarly to as the default lookup strategy uses #getTemplateLocale() , that is, to look for a template variation that satisfies the condition, and then maybe fall back to more generic template if that's missing.
 */
- (id)getCustomLookupCondition;

/**
 @brief <code>null</code> if localized lookup is disabled (see Configuration#getLocalizedLookup() ), otherwise the locale requested.
 */
- (JavaUtilLocale *)getTemplateLocale;

/**
 @brief The normalized name (path) of the template (relatively to the TemplateLoader ).
 Not <code>null</code> .
 */
- (NSString *)getTemplateName;

/**
 @brief Finds the template source based on its <em>normalized</em> name; handles <code>*</code> steps (so called acquisition), otherwise it just calls TemplateLoader#findTemplateSource(String) .
 @param templateName Must be a normalized name, like <code>"foo/bar/baaz.ftl"</code> . A name is not normalized when, among others, it starts with <code>/</code> , or contains <code>.</code> or <code>..</code> paths steps, or it uses backslash ( <code>\</code> ) instead of <code>/</code> . A normalized name might contains "*" steps.
 @return The result of the lookup. Not <code>null</code> ; check TemplateLookupResult#isPositive() to see if the lookup has found anything.
 */
- (FreemarkerCacheTemplateLookupResult *)lookupWithAcquisitionStrategyWithNSString:(NSString *)templateName;

/**
 @brief Finds the template source based on its <em>normalized</em> name; tries localized variations going from most specific to less specific, and for each variation it delegates to #lookupWithAcquisitionStrategy(String) .
 If <code>templateLocale</code> is <code>null</code> (typically, because Configuration#getLocalizedLookup() is <code>false</code> )), then it's the same as calling #lookupWithAcquisitionStrategy(String) directly. This is the default strategy of FreeMarker (at least in 2.3.x), so for more information, see TemplateLookupStrategy#DEFAULT_2_3_0 .
 */
- (FreemarkerCacheTemplateLookupResult *)lookupWithLocalizedThenAcquisitionStrategyWithNSString:(NSString *)templateName
                                                                             withJavaUtilLocale:(JavaUtilLocale *)templateLocale;

#pragma mark Package-Private

/**
 @brief Default visibility to prevent extending the class from outside this package.
 */
- (instancetype)initWithNSString:(NSString *)templateName
              withJavaUtilLocale:(JavaUtilLocale *)templateLocale
                          withId:(id)customLookupCondition;

@end

J2OBJC_EMPTY_STATIC_INIT(FreemarkerCacheTemplateLookupContext)

FOUNDATION_EXPORT void FreemarkerCacheTemplateLookupContext_initWithNSString_withJavaUtilLocale_withId_(FreemarkerCacheTemplateLookupContext *self, NSString *templateName, JavaUtilLocale *templateLocale, id customLookupCondition);

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerCacheTemplateLookupContext)

#endif // _FreemarkerCacheTemplateLookupContext_H_
