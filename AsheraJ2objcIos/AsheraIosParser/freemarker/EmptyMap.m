//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/template/EmptyMap.java
//


#include "EmptyMap.h"
#include "J2ObjC_source.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"

#line 0 "/Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/template/EmptyMap.java"

J2OBJC_INITIALIZED_DEFN(FreemarkerTemplateEmptyMap)

FreemarkerTemplateEmptyMap *FreemarkerTemplateEmptyMap_instance_;


#line 31
@implementation FreemarkerTemplateEmptyMap


#line 34
- (void)clear {
}


#line 38
- (jboolean)containsKeyWithId:(id)arg0 {
  return NO;
}

- (jboolean)containsValueWithId:(id)arg0 {
  return NO;
}

- (id<JavaUtilSet>)entrySet {
  return JavaUtilCollections_get_EMPTY_SET_();
}

- (id)getWithId:(id)arg0 {
  return nil;
}

- (jboolean)isEmpty {
  return YES;
}

- (id<JavaUtilSet>)keySet {
  return JavaUtilCollections_get_EMPTY_SET_();
}

- (id)putWithId:(id)arg0
         withId:(id)arg1 {
  @throw new_JavaLangUnsupportedOperationException_initWithNSString_(@"This Map is read-only.");
}


#line 66
- (void)putAllWithJavaUtilMap:(id<JavaUtilMap>)arg0 {
  
#line 69
  if ([((id<JavaUtilIterator>) nil_chk([((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(arg0)) entrySet])) iterator])) hasNext]) {
    @throw new_JavaLangUnsupportedOperationException_initWithNSString_(@"This Map is read-only.");
  }
}

- (id)removeWithId:(id)arg0 {
  return nil;
}

- (jint)size {
  return 0;
}

- (id<JavaUtilCollection>)values {
  return JavaUtilCollections_get_EMPTY_LIST_();
}

- (instancetype)init {
  FreemarkerTemplateEmptyMap_init(self);
  return self;
}

- (id)copyWithZone:(NSZone *)zone {
  return [self clone];
}

+ (void)initialize {
  if (self == [FreemarkerTemplateEmptyMap class]) {
    FreemarkerTemplateEmptyMap_instance_ = new_FreemarkerTemplateEmptyMap_init();
    J2OBJC_SET_INITIALIZED(FreemarkerTemplateEmptyMap)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "clear", NULL, "V", 0x1, NULL, NULL },
    { "containsKeyWithId:", "containsKey", "Z", 0x1, NULL, NULL },
    { "containsValueWithId:", "containsValue", "Z", 0x1, NULL, NULL },
    { "entrySet", NULL, "Ljava.util.Set;", 0x1, NULL, NULL },
    { "getWithId:", "get", "Ljava.lang.Object;", 0x1, NULL, NULL },
    { "isEmpty", NULL, "Z", 0x1, NULL, NULL },
    { "keySet", NULL, "Ljava.util.Set;", 0x1, NULL, NULL },
    { "putWithId:withId:", "put", "Ljava.lang.Object;", 0x1, NULL, NULL },
    { "putAllWithJavaUtilMap:", "putAll", "V", 0x1, NULL, NULL },
    { "removeWithId:", "remove", "Ljava.lang.Object;", 0x1, NULL, NULL },
    { "size", NULL, "I", 0x1, NULL, NULL },
    { "values", NULL, "Ljava.util.Collection;", 0x1, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "instance_", NULL, 0x19, "Lfreemarker.template.EmptyMap;", &FreemarkerTemplateEmptyMap_instance_, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerTemplateEmptyMap = { 2, "EmptyMap", "freemarker.template", NULL, 0x1, 13, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerTemplateEmptyMap;
}

@end

void FreemarkerTemplateEmptyMap_init(FreemarkerTemplateEmptyMap *self) {
  (void) NSObject_init(self);
}

FreemarkerTemplateEmptyMap *new_FreemarkerTemplateEmptyMap_init() {
  FreemarkerTemplateEmptyMap *self = [FreemarkerTemplateEmptyMap alloc];
  FreemarkerTemplateEmptyMap_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerTemplateEmptyMap)
