//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/cache/URLTemplateLoader.java
//


#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "URLTemplateLoader.h"
#include "URLTemplateSource.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/InputStreamReader.h"
#include "java/io/Reader.h"
#include "java/lang/Boolean.h"
#include "java/net/URL.h"

#line 0 "/Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/cache/URLTemplateLoader.java"

@interface FreemarkerCacheURLTemplateLoader () {
 @public
  JavaLangBoolean *urlConnectionUsesCaches_;
}

@end

J2OBJC_FIELD_SETTER(FreemarkerCacheURLTemplateLoader, urlConnectionUsesCaches_, JavaLangBoolean *)


#line 34
@implementation FreemarkerCacheURLTemplateLoader


#line 39
- (id)findTemplateSourceWithNSString:(NSString *)name {
  
#line 43
  JavaNetURL *url = [self getURLWithNSString:name];
  return url == nil ? nil : new_FreemarkerCacheURLTemplateSource_initWithJavaNetURL_withJavaLangBoolean_(url, [self getURLConnectionUsesCaches]);
}


#line 55
- (JavaNetURL *)getURLWithNSString:(NSString *)name {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 57
- (jlong)getLastModifiedWithId:(id)templateSource {
  
#line 59
  return [((FreemarkerCacheURLTemplateSource *) nil_chk(((FreemarkerCacheURLTemplateSource *) check_class_cast(templateSource, [FreemarkerCacheURLTemplateSource class])))) lastModified];
}


#line 62
- (JavaIoReader *)getReaderWithId:(id)templateSource
                     withNSString:(NSString *)encoding {
  
#line 66
  return new_JavaIoInputStreamReader_initWithJavaIoInputStream_withNSString_(
#line 67
  [((FreemarkerCacheURLTemplateSource *) nil_chk(((FreemarkerCacheURLTemplateSource *) check_class_cast(templateSource, [FreemarkerCacheURLTemplateSource class])))) getInputStream],
#line 68
  encoding);
}


#line 71
- (void)closeTemplateSourceWithId:(id)templateSource {
  
#line 75
  [((FreemarkerCacheURLTemplateSource *) nil_chk(((FreemarkerCacheURLTemplateSource *) check_class_cast(templateSource, [FreemarkerCacheURLTemplateSource class])))) close];
}


#line 85
+ (NSString *)canonicalizePrefixWithNSString:(NSString *)prefix {
  return FreemarkerCacheURLTemplateLoader_canonicalizePrefixWithNSString_(prefix);
}


#line 102
- (JavaLangBoolean *)getURLConnectionUsesCaches {
  return urlConnectionUsesCaches_;
}


#line 122
- (void)setURLConnectionUsesCachesWithJavaLangBoolean:(JavaLangBoolean *)urlConnectionUsesCaches {
  self->urlConnectionUsesCaches_ = urlConnectionUsesCaches;
}

- (instancetype)init {
  FreemarkerCacheURLTemplateLoader_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "findTemplateSourceWithNSString:", "findTemplateSource", "Ljava.lang.Object;", 0x1, "Ljava.io.IOException;", NULL },
    { "getURLWithNSString:", "getURL", "Ljava.net.URL;", 0x404, NULL, NULL },
    { "getLastModifiedWithId:", "getLastModified", "J", 0x1, NULL, NULL },
    { "getReaderWithId:withNSString:", "getReader", "Ljava.io.Reader;", 0x1, "Ljava.io.IOException;", NULL },
    { "closeTemplateSourceWithId:", "closeTemplateSource", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "canonicalizePrefixWithNSString:", "canonicalizePrefix", "Ljava.lang.String;", 0xc, NULL, NULL },
    { "getURLConnectionUsesCaches", NULL, "Ljava.lang.Boolean;", 0x1, NULL, NULL },
    { "setURLConnectionUsesCachesWithJavaLangBoolean:", "setURLConnectionUsesCaches", "V", 0x1, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "urlConnectionUsesCaches_", NULL, 0x2, "Ljava.lang.Boolean;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerCacheURLTemplateLoader = { 2, "URLTemplateLoader", "freemarker.cache", NULL, 0x401, 9, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerCacheURLTemplateLoader;
}

@end


#line 85
NSString *FreemarkerCacheURLTemplateLoader_canonicalizePrefixWithNSString_(NSString *prefix) {
  FreemarkerCacheURLTemplateLoader_initialize();
  
#line 88
  prefix = [((NSString *) nil_chk(prefix)) replace:'\\' withChar:'/'];
  
#line 90
  if (((jint) [((NSString *) nil_chk(prefix)) length]) > 0 && ![prefix hasSuffix:@"/"]) {
    
#line 92
    prefix = JreStrcat("$C", prefix, '/');
  }
  return prefix;
}

void FreemarkerCacheURLTemplateLoader_init(FreemarkerCacheURLTemplateLoader *self) {
  (void) NSObject_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCacheURLTemplateLoader)
