//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/cache/MultiTemplateLoader.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "MultiTemplateLoader.h"
#include "StatefulTemplateLoader.h"
#include "TemplateLoader.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "java/lang/StringBuffer.h"
#include "java/util/Collections.h"
#include "java/util/HashMap.h"
#include "java/util/Map.h"

#line 0 "/Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/cache/MultiTemplateLoader.java"

@interface FreemarkerCacheMultiTemplateLoader () {
 @public
  IOSObjectArray *loaders_;
  id<JavaUtilMap> lastLoaderForName_;
}

- (id)modifyForIcIWithId:(id)source;

@end

J2OBJC_FIELD_SETTER(FreemarkerCacheMultiTemplateLoader, loaders_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(FreemarkerCacheMultiTemplateLoader, lastLoaderForName_, id<JavaUtilMap>)

@interface FreemarkerCacheMultiTemplateLoader_MultiSource () {
 @public
  id source_;
  id<FreemarkerCacheTemplateLoader> loader_;
}

@end

J2OBJC_FIELD_SETTER(FreemarkerCacheMultiTemplateLoader_MultiSource, source_, id)
J2OBJC_FIELD_SETTER(FreemarkerCacheMultiTemplateLoader_MultiSource, loader_, id<FreemarkerCacheTemplateLoader>)


#line 36
@implementation FreemarkerCacheMultiTemplateLoader


#line 48
- (instancetype)initWithFreemarkerCacheTemplateLoaderArray:(IOSObjectArray *)loaders {
  FreemarkerCacheMultiTemplateLoader_initWithFreemarkerCacheTemplateLoaderArray_(self, loaders);
  return self;
}

- (id)findTemplateSourceWithNSString:(NSString *)name {
  
#line 59
  id<FreemarkerCacheTemplateLoader> lastLoader = (id<FreemarkerCacheTemplateLoader>) check_protocol_cast([((id<JavaUtilMap>) nil_chk(lastLoaderForName_)) getWithId:name], @protocol(FreemarkerCacheTemplateLoader));
  if (lastLoader != nil) {
    
#line 62
    id source = [lastLoader findTemplateSourceWithNSString:name];
    if (source != nil) {
      
#line 65
      return new_FreemarkerCacheMultiTemplateLoader_MultiSource_initWithId_withFreemarkerCacheTemplateLoader_(source, lastLoader);
    }
  }
  
#line 73
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(loaders_))->size_; ++i) {
    
#line 75
    id<FreemarkerCacheTemplateLoader> loader = IOSObjectArray_Get(loaders_, i);
    id source = [((id<FreemarkerCacheTemplateLoader>) nil_chk(loader)) findTemplateSourceWithNSString:name];
    if (source != nil) {
      
#line 79
      (void) [lastLoaderForName_ putWithId:name withId:loader];
      return new_FreemarkerCacheMultiTemplateLoader_MultiSource_initWithId_withFreemarkerCacheTemplateLoader_(source, loader);
    }
  }
  
#line 84
  (void) [lastLoaderForName_ removeWithId:name];
  
#line 86
  return nil;
}

- (id)modifyForIcIWithId:(id)source {
  
#line 91
  return nil;
}


#line 94
- (jlong)getLastModifiedWithId:(id)templateSource {
  
#line 96
  return [((FreemarkerCacheMultiTemplateLoader_MultiSource *) nil_chk(((FreemarkerCacheMultiTemplateLoader_MultiSource *) check_class_cast(templateSource, [FreemarkerCacheMultiTemplateLoader_MultiSource class])))) getLastModified];
}


#line 99
- (JavaIoReader *)getReaderWithId:(id)templateSource
                     withNSString:(NSString *)encoding {
  
#line 103
  return [((FreemarkerCacheMultiTemplateLoader_MultiSource *) nil_chk(((FreemarkerCacheMultiTemplateLoader_MultiSource *) check_class_cast(templateSource, [FreemarkerCacheMultiTemplateLoader_MultiSource class])))) getReaderWithNSString:encoding];
}

- (void)closeTemplateSourceWithId:(id)templateSource {
  
#line 110
  [((FreemarkerCacheMultiTemplateLoader_MultiSource *) nil_chk(((FreemarkerCacheMultiTemplateLoader_MultiSource *) check_class_cast(templateSource, [FreemarkerCacheMultiTemplateLoader_MultiSource class])))) close];
}


#line 113
- (void)resetState {
  
#line 115
  [((id<JavaUtilMap>) nil_chk(lastLoaderForName_)) clear];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(loaders_))->size_; i++) {
    id<FreemarkerCacheTemplateLoader> loader = IOSObjectArray_Get(loaders_, i);
    if ([FreemarkerCacheStatefulTemplateLoader_class_() isInstance:loader]) {
      [((id<FreemarkerCacheStatefulTemplateLoader>) nil_chk(((id<FreemarkerCacheStatefulTemplateLoader>) check_protocol_cast(loader, @protocol(FreemarkerCacheStatefulTemplateLoader))))) resetState];
    }
  }
}


#line 185
- (NSString *)description {
  JavaLangStringBuffer *sb = new_JavaLangStringBuffer_init();
  (void) [sb appendWithNSString:@"MultiTemplateLoader("];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(loaders_))->size_; i++) {
    if (i != 0) {
      (void) [sb appendWithNSString:@", "];
    }
    (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([sb appendWithNSString:@"loader"])) appendWithInt:i + 1])) appendWithNSString:@" = "])) appendWithId:IOSObjectArray_Get(loaders_, i)];
  }
  (void) [sb appendWithNSString:@")"];
  return [sb description];
}


#line 203
- (jint)getTemplateLoaderCount {
  return ((IOSObjectArray *) nil_chk(loaders_))->size_;
}


#line 213
- (id<FreemarkerCacheTemplateLoader>)getTemplateLoaderWithInt:(jint)index {
  return IOSObjectArray_Get(nil_chk(loaders_), index);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithFreemarkerCacheTemplateLoaderArray:", "MultiTemplateLoader", NULL, 0x1, NULL, NULL },
    { "findTemplateSourceWithNSString:", "findTemplateSource", "Ljava.lang.Object;", 0x1, "Ljava.io.IOException;", NULL },
    { "modifyForIcIWithId:", "modifyForIcI", "Ljava.lang.Object;", 0x2, NULL, NULL },
    { "getLastModifiedWithId:", "getLastModified", "J", 0x1, NULL, NULL },
    { "getReaderWithId:withNSString:", "getReader", "Ljava.io.Reader;", 0x1, "Ljava.io.IOException;", NULL },
    { "closeTemplateSourceWithId:", "closeTemplateSource", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "resetState", NULL, "V", 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getTemplateLoaderCount", NULL, "I", 0x1, NULL, NULL },
    { "getTemplateLoaderWithInt:", "getTemplateLoader", "Lfreemarker.cache.TemplateLoader;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "loaders_", NULL, 0x12, "[Lfreemarker.cache.TemplateLoader;", NULL, NULL,  },
    { "lastLoaderForName_", NULL, 0x12, "Ljava.util.Map;", NULL, NULL,  },
  };
  static const char *inner_classes[] = {"Lfreemarker.cache.MultiTemplateLoader$MultiSource;"};
  static const J2ObjcClassInfo _FreemarkerCacheMultiTemplateLoader = { 2, "MultiTemplateLoader", "freemarker.cache", NULL, 0x1, 10, methods, 2, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_FreemarkerCacheMultiTemplateLoader;
}

@end


#line 48
void FreemarkerCacheMultiTemplateLoader_initWithFreemarkerCacheTemplateLoaderArray_(FreemarkerCacheMultiTemplateLoader *self, IOSObjectArray *loaders) {
  (void) NSObject_init(self);
  self->lastLoaderForName_ = JavaUtilCollections_synchronizedMapWithJavaUtilMap_(new_JavaUtilHashMap_init());
  
#line 50
  self->loaders_ = (IOSObjectArray *) check_class_cast([((IOSObjectArray *) nil_chk(loaders)) clone], [IOSObjectArray class]);
}


#line 48
FreemarkerCacheMultiTemplateLoader *new_FreemarkerCacheMultiTemplateLoader_initWithFreemarkerCacheTemplateLoaderArray_(IOSObjectArray *loaders) {
  FreemarkerCacheMultiTemplateLoader *self = [FreemarkerCacheMultiTemplateLoader alloc];
  FreemarkerCacheMultiTemplateLoader_initWithFreemarkerCacheTemplateLoaderArray_(self, loaders);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCacheMultiTemplateLoader)


#line 128
@implementation FreemarkerCacheMultiTemplateLoader_MultiSource


#line 134
- (instancetype)initWithId:(id)source
withFreemarkerCacheTemplateLoader:(id<FreemarkerCacheTemplateLoader>)loader {
  FreemarkerCacheMultiTemplateLoader_MultiSource_initWithId_withFreemarkerCacheTemplateLoader_(self, source, loader);
  return self;
}

- (jlong)getLastModified {
  
#line 142
  return [((id<FreemarkerCacheTemplateLoader>) nil_chk(loader_)) getLastModifiedWithId:source_];
}


#line 145
- (JavaIoReader *)getReaderWithNSString:(NSString *)encoding {
  
#line 149
  return [((id<FreemarkerCacheTemplateLoader>) nil_chk(loader_)) getReaderWithId:source_ withNSString:encoding];
}


#line 152
- (void)close {
  
#line 156
  [((id<FreemarkerCacheTemplateLoader>) nil_chk(loader_)) closeTemplateSourceWithId:source_];
}


#line 159
- (id)getWrappedSource {
  return source_;
}

- (jboolean)isEqual:(id)o {
  if ([o isKindOfClass:[FreemarkerCacheMultiTemplateLoader_MultiSource class]]) {
    FreemarkerCacheMultiTemplateLoader_MultiSource *m = (FreemarkerCacheMultiTemplateLoader_MultiSource *) check_class_cast(o, [FreemarkerCacheMultiTemplateLoader_MultiSource class]);
    return [((id<FreemarkerCacheTemplateLoader>) nil_chk(((FreemarkerCacheMultiTemplateLoader_MultiSource *) nil_chk(m))->loader_)) isEqual:loader_] && [nil_chk(m->source_) isEqual:source_];
  }
  return NO;
}

- (NSUInteger)hash {
  return ((jint) [((id<FreemarkerCacheTemplateLoader>) nil_chk(loader_)) hash]) + 31 * ((jint) [nil_chk(source_) hash]);
}

- (NSString *)description {
  return [nil_chk(source_) description];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithId:withFreemarkerCacheTemplateLoader:", "MultiSource", NULL, 0x0, NULL, NULL },
    { "getLastModified", NULL, "J", 0x0, NULL, NULL },
    { "getReaderWithNSString:", "getReader", "Ljava.io.Reader;", 0x0, "Ljava.io.IOException;", NULL },
    { "close", NULL, "V", 0x0, "Ljava.io.IOException;", NULL },
    { "getWrappedSource", NULL, "Ljava.lang.Object;", 0x0, NULL, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL, NULL },
    { "hash", "hashCode", "I", 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "source_", NULL, 0x12, "Ljava.lang.Object;", NULL, NULL,  },
    { "loader_", NULL, 0x12, "Lfreemarker.cache.TemplateLoader;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerCacheMultiTemplateLoader_MultiSource = { 2, "MultiSource", "freemarker.cache", "MultiTemplateLoader", 0x18, 8, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerCacheMultiTemplateLoader_MultiSource;
}

@end


#line 134
void FreemarkerCacheMultiTemplateLoader_MultiSource_initWithId_withFreemarkerCacheTemplateLoader_(FreemarkerCacheMultiTemplateLoader_MultiSource *self, id source, id<FreemarkerCacheTemplateLoader> loader) {
  (void) NSObject_init(self);
  self->source_ = source;
  self->loader_ = loader;
}


#line 134
FreemarkerCacheMultiTemplateLoader_MultiSource *new_FreemarkerCacheMultiTemplateLoader_MultiSource_initWithId_withFreemarkerCacheTemplateLoader_(id source, id<FreemarkerCacheTemplateLoader> loader) {
  FreemarkerCacheMultiTemplateLoader_MultiSource *self = [FreemarkerCacheMultiTemplateLoader_MultiSource alloc];
  FreemarkerCacheMultiTemplateLoader_MultiSource_initWithId_withFreemarkerCacheTemplateLoader_(self, source, loader);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCacheMultiTemplateLoader_MultiSource)
