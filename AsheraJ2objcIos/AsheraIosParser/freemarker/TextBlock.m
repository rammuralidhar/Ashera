//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/TextBlock.java
//


#include "Assignment.h"
#include "AssignmentInstruction.h"
#include "Comment.h"
#include "Environment.h"
#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "LibraryLoad.h"
#include "Macro.h"
#include "ParameterRole.h"
#include "PropertySetting.h"
#include "StringUtil.h"
#include "TemplateElement.h"
#include "TextBlock.h"
#include "TrimInstruction.h"
#include "java/io/IOException.h"
#include "java/io/Writer.h"
#include "java/lang/Character.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/System.h"

#line 0 "/Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/TextBlock.java"

@interface FreemarkerCoreTextBlock () {
 @public
  IOSCharArray *text_;
  jboolean unparsed_;
}

- (instancetype)initWithCharArray:(IOSCharArray *)text
                      withBoolean:(jboolean)unparsed;

/**
 @brief Scans forward the nodes on the same line to see whether there is a deliberate left trim in effect.
 Returns true if the left trim was present.
 */
- (jboolean)deliberateLeftTrim;

/**
 @brief Checks for the presence of a t or rt directive on the same line.
 Returns true if the right trim directive was present.
 */
- (jboolean)deliberateRightTrim;

- (jint)firstNewLineIndex;

- (jint)lastNewLineIndex;

/**
 @brief figures out how many opening whitespace characters to strip in the post-parse cleanup phase.
 */
- (jint)openingCharsToStrip;

/**
 @brief figures out how many trailing whitespace characters to strip in the post-parse cleanup phase.
 */
- (jint)trailingCharsToStrip;

- (jboolean)nonOutputtingTypeWithFreemarkerCoreTemplateElement:(FreemarkerCoreTemplateElement *)element;

+ (IOSCharArray *)substringWithCharArray:(IOSCharArray *)c
                                 withInt:(jint)from
                                 withInt:(jint)to;

+ (IOSCharArray *)substringWithCharArray:(IOSCharArray *)c
                                 withInt:(jint)from;

+ (IOSCharArray *)concatWithCharArray:(IOSCharArray *)c1
                        withCharArray:(IOSCharArray *)c2;

@end

J2OBJC_FIELD_SETTER(FreemarkerCoreTextBlock, text_, IOSCharArray *)

static IOSCharArray *FreemarkerCoreTextBlock_EMPTY_CHAR_ARRAY_;
J2OBJC_STATIC_FIELD_GETTER(FreemarkerCoreTextBlock, EMPTY_CHAR_ARRAY_, IOSCharArray *)

__attribute__((unused)) static void FreemarkerCoreTextBlock_initWithCharArray_withBoolean_(FreemarkerCoreTextBlock *self, IOSCharArray *text, jboolean unparsed);

__attribute__((unused)) static FreemarkerCoreTextBlock *new_FreemarkerCoreTextBlock_initWithCharArray_withBoolean_(IOSCharArray *text, jboolean unparsed) NS_RETURNS_RETAINED;

__attribute__((unused)) static jboolean FreemarkerCoreTextBlock_deliberateLeftTrim(FreemarkerCoreTextBlock *self);

__attribute__((unused)) static jboolean FreemarkerCoreTextBlock_deliberateRightTrim(FreemarkerCoreTextBlock *self);

__attribute__((unused)) static jint FreemarkerCoreTextBlock_firstNewLineIndex(FreemarkerCoreTextBlock *self);

__attribute__((unused)) static jint FreemarkerCoreTextBlock_lastNewLineIndex(FreemarkerCoreTextBlock *self);

__attribute__((unused)) static jint FreemarkerCoreTextBlock_openingCharsToStrip(FreemarkerCoreTextBlock *self);

__attribute__((unused)) static jint FreemarkerCoreTextBlock_trailingCharsToStrip(FreemarkerCoreTextBlock *self);

__attribute__((unused)) static jboolean FreemarkerCoreTextBlock_nonOutputtingTypeWithFreemarkerCoreTemplateElement_(FreemarkerCoreTextBlock *self, FreemarkerCoreTemplateElement *element);

__attribute__((unused)) static IOSCharArray *FreemarkerCoreTextBlock_substringWithCharArray_withInt_withInt_(IOSCharArray *c, jint from, jint to);

__attribute__((unused)) static IOSCharArray *FreemarkerCoreTextBlock_substringWithCharArray_withInt_(IOSCharArray *c, jint from);

__attribute__((unused)) static IOSCharArray *FreemarkerCoreTextBlock_concatWithCharArray_withCharArray_(IOSCharArray *c1, IOSCharArray *c2);

J2OBJC_INITIALIZED_DEFN(FreemarkerCoreTextBlock)

FreemarkerCoreTextBlock *FreemarkerCoreTextBlock_EMPTY_BLOCK_;


#line 26
@implementation FreemarkerCoreTextBlock


#line 37
- (instancetype)initWithNSString:(NSString *)text {
  FreemarkerCoreTextBlock_initWithNSString_(self, text);
  return self;
}


#line 41
- (instancetype)initWithNSString:(NSString *)text
                     withBoolean:(jboolean)unparsed {
  FreemarkerCoreTextBlock_initWithNSString_withBoolean_(self, text, unparsed);
  return self;
}


#line 45
- (instancetype)initWithCharArray:(IOSCharArray *)text
                      withBoolean:(jboolean)unparsed {
  FreemarkerCoreTextBlock_initWithCharArray_withBoolean_(self, text, unparsed);
  return self;
}


#line 53
- (void)acceptWithFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env {
  
#line 56
  [((JavaIoWriter *) nil_chk([((FreemarkerCoreEnvironment *) nil_chk(env)) getOut])) writeWithCharArray:text_];
}

- (NSString *)dumpWithBoolean:(jboolean)canonical {
  if (canonical) {
    NSString *text = [NSString stringWithCharacters:self->text_];
    if (unparsed_) {
      return JreStrcat("$$$", @"<#noparse>", text, @"</#noparse>");
    }
    return text;
  }
  else {
    
#line 67
    return JreStrcat("$$", @"text ", FreemarkerTemplateUtilityStringUtil_jQuoteWithNSString_([NSString stringWithCharacters:text_]));
  }
}


#line 71
- (NSString *)getNodeTypeSymbol {
  return @"#text";
}

- (jint)getParameterCount {
  return 1;
}

- (id)getParameterValueWithInt:(jint)idx {
  if (idx != 0) @throw new_JavaLangIndexOutOfBoundsException_init();
  return [NSString stringWithCharacters:text_];
}

- (FreemarkerCoreParameterRole *)getParameterRoleWithInt:(jint)idx {
  if (idx != 0) @throw new_JavaLangIndexOutOfBoundsException_init();
  return FreemarkerCoreParameterRole_get_CONTENT_();
}

- (FreemarkerCoreTemplateElement *)postParseCleanupWithBoolean:(jboolean)stripWhitespace {
  if (((IOSCharArray *) nil_chk(text_))->size_ == 0) return self;
  jint openingCharsToStrip = 0, trailingCharsToStrip = 0;
  jboolean deliberateLeftTrim = FreemarkerCoreTextBlock_deliberateLeftTrim(self);
  jboolean deliberateRightTrim = FreemarkerCoreTextBlock_deliberateRightTrim(self);
  if (!stripWhitespace || text_->size_ == 0) {
    return self;
  }
  if ([((FreemarkerCoreTemplateElement *) nil_chk([self getParentElement])) getParentElement] == nil && [self previousSibling] == nil) return self;
  if (!deliberateLeftTrim) {
    trailingCharsToStrip = FreemarkerCoreTextBlock_trailingCharsToStrip(self);
  }
  if (!deliberateRightTrim) {
    openingCharsToStrip = FreemarkerCoreTextBlock_openingCharsToStrip(self);
  }
  if (openingCharsToStrip == 0 && trailingCharsToStrip == 0) {
    return self;
  }
  self->text_ = FreemarkerCoreTextBlock_substringWithCharArray_withInt_withInt_(text_, openingCharsToStrip, text_->size_ - trailingCharsToStrip);
  if (openingCharsToStrip > 0) {
    self->beginLine_++;
    self->beginColumn_ = 1;
  }
  if (trailingCharsToStrip > 0) {
    self->endColumn_ = 0;
  }
  return self;
}


#line 122
- (jboolean)deliberateLeftTrim {
  return FreemarkerCoreTextBlock_deliberateLeftTrim(self);
}


#line 161
- (jboolean)deliberateRightTrim {
  return FreemarkerCoreTextBlock_deliberateRightTrim(self);
}


#line 222
- (jint)firstNewLineIndex {
  return FreemarkerCoreTextBlock_firstNewLineIndex(self);
}


#line 233
- (jint)lastNewLineIndex {
  return FreemarkerCoreTextBlock_lastNewLineIndex(self);
}


#line 248
- (jint)openingCharsToStrip {
  return FreemarkerCoreTextBlock_openingCharsToStrip(self);
}


#line 280
- (jint)trailingCharsToStrip {
  return FreemarkerCoreTextBlock_trailingCharsToStrip(self);
}


#line 302
- (jboolean)heedsTrailingWhitespace {
  if ([self isIgnorable]) {
    return NO;
  }
  for (jint i = 0; i < ((IOSCharArray *) nil_chk(text_))->size_; i++) {
    jchar c = IOSCharArray_Get(text_, i);
    if (c == 0x000a || c == 0x000d) {
      return NO;
    }
    if (!JavaLangCharacter_isWhitespaceWithChar_(c)) {
      return YES;
    }
  }
  return YES;
}

- (jboolean)heedsOpeningWhitespace {
  if ([self isIgnorable]) {
    return NO;
  }
  for (jint i = ((IOSCharArray *) nil_chk(text_))->size_ - 1; i >= 0; i--) {
    jchar c = IOSCharArray_Get(text_, i);
    if (c == 0x000a || c == 0x000d) {
      return NO;
    }
    if (!JavaLangCharacter_isWhitespaceWithChar_(c)) {
      return YES;
    }
  }
  return YES;
}

- (jboolean)isIgnorable {
  if (text_ == nil || text_->size_ == 0) {
    return YES;
  }
  if (!FreemarkerTemplateUtilityStringUtil_isTrimmableToEmptyWithCharArray_(text_)) {
    return NO;
  }
  jboolean atTopLevel = [((FreemarkerCoreTemplateElement *) nil_chk([self getParentElement])) getParentElement] == nil;
  FreemarkerCoreTemplateElement *prevSibling = [self previousSibling];
  FreemarkerCoreTemplateElement *nextSibling = [self nextSibling];
  return ((prevSibling == nil && atTopLevel) || FreemarkerCoreTextBlock_nonOutputtingTypeWithFreemarkerCoreTemplateElement_(self, prevSibling)) &&
#line 345
  ((nextSibling == nil && atTopLevel) || FreemarkerCoreTextBlock_nonOutputtingTypeWithFreemarkerCoreTemplateElement_(self, nextSibling));
}

- (jboolean)nonOutputtingTypeWithFreemarkerCoreTemplateElement:(FreemarkerCoreTemplateElement *)element {
  return FreemarkerCoreTextBlock_nonOutputtingTypeWithFreemarkerCoreTemplateElement_(self, element);
}


#line 358
+ (IOSCharArray *)substringWithCharArray:(IOSCharArray *)c
                                 withInt:(jint)from
                                 withInt:(jint)to {
  return FreemarkerCoreTextBlock_substringWithCharArray_withInt_withInt_(c, from, to);
}

+ (IOSCharArray *)substringWithCharArray:(IOSCharArray *)c
                                 withInt:(jint)from {
  return FreemarkerCoreTextBlock_substringWithCharArray_withInt_(c, from);
}


#line 368
+ (IOSCharArray *)concatWithCharArray:(IOSCharArray *)c1
                        withCharArray:(IOSCharArray *)c2 {
  return FreemarkerCoreTextBlock_concatWithCharArray_withCharArray_(c1, c2);
}


#line 375
- (jboolean)isOutputCacheable {
  return YES;
}

- (jboolean)isNestedBlockRepeater {
  return NO;
}

+ (void)initialize {
  if (self == [FreemarkerCoreTextBlock class]) {
    FreemarkerCoreTextBlock_EMPTY_CHAR_ARRAY_ = [IOSCharArray newArrayWithLength:
#line 27
    0];
    FreemarkerCoreTextBlock_EMPTY_BLOCK_ = new_FreemarkerCoreTextBlock_initWithCharArray_withBoolean_(
#line 28
    FreemarkerCoreTextBlock_EMPTY_CHAR_ARRAY_, NO);
    J2OBJC_SET_INITIALIZED(FreemarkerCoreTextBlock)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithNSString:", "TextBlock", NULL, 0x1, NULL, NULL },
    { "initWithNSString:withBoolean:", "TextBlock", NULL, 0x1, NULL, NULL },
    { "initWithCharArray:withBoolean:", "TextBlock", NULL, 0x2, NULL, NULL },
    { "acceptWithFreemarkerCoreEnvironment:", "accept", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "dumpWithBoolean:", "dump", "Ljava.lang.String;", 0x4, NULL, NULL },
    { "getNodeTypeSymbol", NULL, "Ljava.lang.String;", 0x0, NULL, NULL },
    { "getParameterCount", NULL, "I", 0x0, NULL, NULL },
    { "getParameterValueWithInt:", "getParameterValue", "Ljava.lang.Object;", 0x0, NULL, NULL },
    { "getParameterRoleWithInt:", "getParameterRole", "Lfreemarker.core.ParameterRole;", 0x0, NULL, NULL },
    { "postParseCleanupWithBoolean:", "postParseCleanup", "Lfreemarker.core.TemplateElement;", 0x0, NULL, NULL },
    { "deliberateLeftTrim", NULL, "Z", 0x2, NULL, NULL },
    { "deliberateRightTrim", NULL, "Z", 0x2, NULL, NULL },
    { "firstNewLineIndex", NULL, "I", 0x2, NULL, NULL },
    { "lastNewLineIndex", NULL, "I", 0x2, NULL, NULL },
    { "openingCharsToStrip", NULL, "I", 0x2, NULL, NULL },
    { "trailingCharsToStrip", NULL, "I", 0x2, NULL, NULL },
    { "heedsTrailingWhitespace", NULL, "Z", 0x0, NULL, NULL },
    { "heedsOpeningWhitespace", NULL, "Z", 0x0, NULL, NULL },
    { "isIgnorable", NULL, "Z", 0x0, NULL, NULL },
    { "nonOutputtingTypeWithFreemarkerCoreTemplateElement:", "nonOutputtingType", "Z", 0x2, NULL, NULL },
    { "substringWithCharArray:withInt:withInt:", "substring", "[C", 0xa, NULL, NULL },
    { "substringWithCharArray:withInt:", "substring", "[C", 0xa, NULL, NULL },
    { "concatWithCharArray:withCharArray:", "concat", "[C", 0xa, NULL, NULL },
    { "isOutputCacheable", NULL, "Z", 0x0, NULL, NULL },
    { "isNestedBlockRepeater", NULL, "Z", 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "EMPTY_CHAR_ARRAY_", NULL, 0x1a, "[C", &FreemarkerCoreTextBlock_EMPTY_CHAR_ARRAY_, NULL,  },
    { "EMPTY_BLOCK_", NULL, 0x18, "Lfreemarker.core.TextBlock;", &FreemarkerCoreTextBlock_EMPTY_BLOCK_, NULL,  },
    { "text_", NULL, 0x2, "[C", NULL, NULL,  },
    { "unparsed_", NULL, 0x12, "Z", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerCoreTextBlock = { 2, "TextBlock", "freemarker.core", NULL, 0x11, 25, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerCoreTextBlock;
}

@end


#line 37
void FreemarkerCoreTextBlock_initWithNSString_(FreemarkerCoreTextBlock *self, NSString *text) {
  (void) FreemarkerCoreTextBlock_initWithNSString_withBoolean_(self, text, NO);
}


#line 37
FreemarkerCoreTextBlock *new_FreemarkerCoreTextBlock_initWithNSString_(NSString *text) {
  FreemarkerCoreTextBlock *self = [FreemarkerCoreTextBlock alloc];
  FreemarkerCoreTextBlock_initWithNSString_(self, text);
  return self;
}


#line 41
void FreemarkerCoreTextBlock_initWithNSString_withBoolean_(FreemarkerCoreTextBlock *self, NSString *text, jboolean unparsed) {
  (void) FreemarkerCoreTextBlock_initWithCharArray_withBoolean_(self, [((NSString *) nil_chk(text)) toCharArray], unparsed);
}


#line 41
FreemarkerCoreTextBlock *new_FreemarkerCoreTextBlock_initWithNSString_withBoolean_(NSString *text, jboolean unparsed) {
  FreemarkerCoreTextBlock *self = [FreemarkerCoreTextBlock alloc];
  FreemarkerCoreTextBlock_initWithNSString_withBoolean_(self, text, unparsed);
  return self;
}


#line 45
void FreemarkerCoreTextBlock_initWithCharArray_withBoolean_(FreemarkerCoreTextBlock *self, IOSCharArray *text, jboolean unparsed) {
  (void) FreemarkerCoreTemplateElement_init(self);
  
#line 46
  self->text_ = text;
  self->unparsed_ = unparsed;
}


#line 45
FreemarkerCoreTextBlock *new_FreemarkerCoreTextBlock_initWithCharArray_withBoolean_(IOSCharArray *text, jboolean unparsed) {
  FreemarkerCoreTextBlock *self = [FreemarkerCoreTextBlock alloc];
  FreemarkerCoreTextBlock_initWithCharArray_withBoolean_(self, text, unparsed);
  return self;
}


#line 122
jboolean FreemarkerCoreTextBlock_deliberateLeftTrim(FreemarkerCoreTextBlock *self) {
  jboolean result = NO;
  for (FreemarkerCoreTemplateElement *elem = [self nextTerminalNode];
#line 125
  elem != nil && elem->beginLine_ == self->endLine_;
#line 126
  elem = [((FreemarkerCoreTemplateElement *) nil_chk(elem)) nextTerminalNode]) {
    
#line 128
    if ([elem isKindOfClass:[FreemarkerCoreTrimInstruction class]]) {
      FreemarkerCoreTrimInstruction *ti = (FreemarkerCoreTrimInstruction *) check_class_cast(elem, [FreemarkerCoreTrimInstruction class]);
      if (!((FreemarkerCoreTrimInstruction *) nil_chk(ti))->left_ && !ti->right_) {
        result = YES;
      }
      if (ti->left_) {
        result = YES;
        jint lastNewLineIndex = FreemarkerCoreTextBlock_lastNewLineIndex(self);
        if (lastNewLineIndex >= 0 || self->beginColumn_ == 1) {
          IOSCharArray *firstPart = FreemarkerCoreTextBlock_substringWithCharArray_withInt_withInt_(self->text_, 0, lastNewLineIndex + 1);
          IOSCharArray *lastLine = FreemarkerCoreTextBlock_substringWithCharArray_withInt_(self->text_, 1 + lastNewLineIndex);
          if (FreemarkerTemplateUtilityStringUtil_isTrimmableToEmptyWithCharArray_(lastLine)) {
            self->text_ = firstPart;
            self->endColumn_ = 0;
          }
          else {
            
#line 143
            jint i = 0;
            while (JavaLangCharacter_isWhitespaceWithChar_(IOSCharArray_Get(nil_chk(lastLine), i))) {
              i++;
            }
            IOSCharArray *printablePart = FreemarkerCoreTextBlock_substringWithCharArray_withInt_(lastLine, i);
            self->text_ = FreemarkerCoreTextBlock_concatWithCharArray_withCharArray_(firstPart, printablePart);
          }
        }
      }
    }
  }
  return result;
}


#line 161
jboolean FreemarkerCoreTextBlock_deliberateRightTrim(FreemarkerCoreTextBlock *self) {
  jboolean result = NO;
  for (FreemarkerCoreTemplateElement *elem = [self prevTerminalNode];
#line 164
  elem != nil && elem->endLine_ == self->beginLine_;
#line 165
  elem = [((FreemarkerCoreTemplateElement *) nil_chk(elem)) prevTerminalNode]) {
    
#line 167
    if ([elem isKindOfClass:[FreemarkerCoreTrimInstruction class]]) {
      FreemarkerCoreTrimInstruction *ti = (FreemarkerCoreTrimInstruction *) check_class_cast(elem, [FreemarkerCoreTrimInstruction class]);
      if (!((FreemarkerCoreTrimInstruction *) nil_chk(ti))->left_ && !ti->right_) {
        result = YES;
      }
      if (ti->right_) {
        result = YES;
        jint firstLineIndex = FreemarkerCoreTextBlock_firstNewLineIndex(self) + 1;
        if (firstLineIndex == 0) {
          return NO;
        }
        if (((IOSCharArray *) nil_chk(self->text_))->size_ > firstLineIndex &&
#line 179
        IOSCharArray_Get(self->text_, firstLineIndex - 1) == 0x000d &&
#line 180
        IOSCharArray_Get(self->text_, firstLineIndex) == 0x000a) {
          
#line 182
          firstLineIndex++;
        }
        IOSCharArray *trailingPart = FreemarkerCoreTextBlock_substringWithCharArray_withInt_(self->text_, firstLineIndex);
        IOSCharArray *openingPart = FreemarkerCoreTextBlock_substringWithCharArray_withInt_withInt_(self->text_, 0, firstLineIndex);
        if (FreemarkerTemplateUtilityStringUtil_isTrimmableToEmptyWithCharArray_(openingPart)) {
          self->text_ = trailingPart;
          self->beginLine_++;
          self->beginColumn_ = 1;
        }
        else {
          
#line 191
          jint lastNonWS = ((IOSCharArray *) nil_chk(openingPart))->size_ - 1;
          while (JavaLangCharacter_isWhitespaceWithChar_(IOSCharArray_Get(self->text_, lastNonWS))) {
            lastNonWS--;
          }
          IOSCharArray *printablePart = FreemarkerCoreTextBlock_substringWithCharArray_withInt_withInt_(self->text_, 0, lastNonWS + 1);
          if (FreemarkerTemplateUtilityStringUtil_isTrimmableToEmptyWithCharArray_(trailingPart)) {
            
#line 198
            jboolean trimTrailingPart = YES;
            for (FreemarkerCoreTemplateElement *te = [self nextTerminalNode];
#line 200
            te != nil && te->beginLine_ == self->endLine_;
#line 201
            te = [te nextTerminalNode]) {
              
#line 203
              if ([((FreemarkerCoreTemplateElement *) nil_chk(te)) heedsOpeningWhitespace]) {
                
#line 205
                trimTrailingPart = NO;
              }
              if ([te isKindOfClass:[FreemarkerCoreTrimInstruction class]] && ((FreemarkerCoreTrimInstruction *) check_class_cast(te, [FreemarkerCoreTrimInstruction class]))->left_) {
                trimTrailingPart = YES;
                break;
              }
            }
            if (trimTrailingPart) trailingPart = FreemarkerCoreTextBlock_EMPTY_CHAR_ARRAY_;
          }
          self->text_ = FreemarkerCoreTextBlock_concatWithCharArray_withCharArray_(printablePart, trailingPart);
        }
      }
    }
  }
  return result;
}


#line 222
jint FreemarkerCoreTextBlock_firstNewLineIndex(FreemarkerCoreTextBlock *self) {
  IOSCharArray *text = self->text_;
  for (jint i = 0; i < ((IOSCharArray *) nil_chk(text))->size_; i++) {
    jchar c = IOSCharArray_Get(text, i);
    if (c == 0x000d || c == 0x000a) {
      return i;
    }
  }
  return -1;
}

jint FreemarkerCoreTextBlock_lastNewLineIndex(FreemarkerCoreTextBlock *self) {
  IOSCharArray *text = self->text_;
  for (jint i = ((IOSCharArray *) nil_chk(text))->size_ - 1; i >= 0; i--) {
    jchar c = IOSCharArray_Get(text, i);
    if (c == 0x000d || c == 0x000a) {
      return i;
    }
  }
  return -1;
}


#line 248
jint FreemarkerCoreTextBlock_openingCharsToStrip(FreemarkerCoreTextBlock *self) {
  jint newlineIndex = FreemarkerCoreTextBlock_firstNewLineIndex(self);
  if (newlineIndex == -1 && self->beginColumn_ != 1) {
    return 0;
  }
  ++newlineIndex;
  if (((IOSCharArray *) nil_chk(self->text_))->size_ > newlineIndex) {
    if (newlineIndex > 0 && IOSCharArray_Get(self->text_, newlineIndex - 1) == 0x000d && IOSCharArray_Get(self->text_, newlineIndex) == 0x000a) {
      ++newlineIndex;
    }
  }
  if (!FreemarkerTemplateUtilityStringUtil_isTrimmableToEmptyWithCharArray_withInt_withInt_(self->text_, 0, newlineIndex)) {
    return 0;
  }
  
#line 264
  for (FreemarkerCoreTemplateElement *elem = [self prevTerminalNode];
#line 265
  elem != nil && elem->endLine_ == self->beginLine_;
#line 266
  elem = [elem prevTerminalNode]) {
    
#line 268
    if ([((FreemarkerCoreTemplateElement *) nil_chk(elem)) heedsOpeningWhitespace]) {
      
#line 270
      return 0;
    }
  }
  return newlineIndex;
}

jint FreemarkerCoreTextBlock_trailingCharsToStrip(FreemarkerCoreTextBlock *self) {
  jint lastNewlineIndex = FreemarkerCoreTextBlock_lastNewLineIndex(self);
  if (lastNewlineIndex == -1 && self->beginColumn_ != 1) {
    return 0;
  }
  if (!FreemarkerTemplateUtilityStringUtil_isTrimmableToEmptyWithCharArray_withInt_(self->text_, lastNewlineIndex + 1)) {
    return 0;
  }
  
#line 290
  for (FreemarkerCoreTemplateElement *elem = [self nextTerminalNode];
#line 291
  elem != nil && elem->beginLine_ == self->endLine_;
#line 292
  elem = [elem nextTerminalNode]) {
    
#line 294
    if ([((FreemarkerCoreTemplateElement *) nil_chk(elem)) heedsTrailingWhitespace]) {
      
#line 296
      return 0;
    }
  }
  return ((IOSCharArray *) nil_chk(self->text_))->size_ - (lastNewlineIndex + 1);
}


#line 349
jboolean FreemarkerCoreTextBlock_nonOutputtingTypeWithFreemarkerCoreTemplateElement_(FreemarkerCoreTextBlock *self, FreemarkerCoreTemplateElement *element) {
  return ([element isKindOfClass:[FreemarkerCoreMacro class]] ||
#line 351
  [element isKindOfClass:[FreemarkerCoreAssignment class]] ||
#line 352
  [element isKindOfClass:[FreemarkerCoreAssignmentInstruction class]] ||
#line 353
  [element isKindOfClass:[FreemarkerCorePropertySetting class]] ||
#line 354
  [element isKindOfClass:[FreemarkerCoreLibraryLoad class]] ||
#line 355
  [element isKindOfClass:[FreemarkerCoreComment class]]);
}


#line 358
IOSCharArray *FreemarkerCoreTextBlock_substringWithCharArray_withInt_withInt_(IOSCharArray *c, jint from, jint to) {
  FreemarkerCoreTextBlock_initialize();
  
#line 359
  IOSCharArray *c2 = [IOSCharArray newArrayWithLength:to - from];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(c, from, c2, 0, c2->size_);
  return c2;
}


#line 364
IOSCharArray *FreemarkerCoreTextBlock_substringWithCharArray_withInt_(IOSCharArray *c, jint from) {
  FreemarkerCoreTextBlock_initialize();
  
#line 365
  return FreemarkerCoreTextBlock_substringWithCharArray_withInt_withInt_(c, from, ((IOSCharArray *) nil_chk(c))->size_);
}


#line 368
IOSCharArray *FreemarkerCoreTextBlock_concatWithCharArray_withCharArray_(IOSCharArray *c1, IOSCharArray *c2) {
  FreemarkerCoreTextBlock_initialize();
  
#line 369
  IOSCharArray *c = [IOSCharArray newArrayWithLength:((IOSCharArray *) nil_chk(c1))->size_ + ((IOSCharArray *) nil_chk(c2))->size_];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(c1, 0, c, 0, c1->size_);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(c2, 0, c, c1->size_, c2->size_);
  return c;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreTextBlock)
