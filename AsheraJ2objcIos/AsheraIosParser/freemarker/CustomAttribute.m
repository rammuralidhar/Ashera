//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/CustomAttribute.java
//


#include "BugException.h"
#include "Configurable.h"
#include "Configuration.h"
#include "CustomAttribute.h"
#include "Environment.h"
#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "Template.h"
#include "java/lang/Error.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/UnsupportedOperationException.h"

#line 0 "/Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/CustomAttribute.java"

@interface FreemarkerCoreCustomAttribute () {
 @public
  id key_;
  jint scope_;
}

- (FreemarkerCoreEnvironment *)getRequiredCurrentEnvironment;

- (FreemarkerCoreConfigurable *)getScopeConfigurableWithFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env;

@end

J2OBJC_FIELD_SETTER(FreemarkerCoreCustomAttribute, key_, id)

__attribute__((unused)) static FreemarkerCoreEnvironment *FreemarkerCoreCustomAttribute_getRequiredCurrentEnvironment(FreemarkerCoreCustomAttribute *self);

__attribute__((unused)) static FreemarkerCoreConfigurable *FreemarkerCoreCustomAttribute_getScopeConfigurableWithFreemarkerCoreEnvironment_(FreemarkerCoreCustomAttribute *self, FreemarkerCoreEnvironment *env);


#line 40
@implementation FreemarkerCoreCustomAttribute


#line 67
- (instancetype)initWithInt:(jint)scope {
  FreemarkerCoreCustomAttribute_initWithInt_(self, scope);
  return self;
}


#line 82
- (id)create {
  return nil;
}


#line 100
- (id)getWithFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env {
  return [((FreemarkerCoreConfigurable *) nil_chk(FreemarkerCoreCustomAttribute_getScopeConfigurableWithFreemarkerCoreEnvironment_(self, env))) getCustomAttributeWithId:key_ withFreemarkerCoreCustomAttribute:self];
}


#line 111
- (id)get {
  return [((FreemarkerCoreConfigurable *) nil_chk(FreemarkerCoreCustomAttribute_getScopeConfigurableWithFreemarkerCoreEnvironment_(self, FreemarkerCoreCustomAttribute_getRequiredCurrentEnvironment(self)))) getCustomAttributeWithId:key_ withFreemarkerCoreCustomAttribute:self];
}


#line 123
- (id)getWithFreemarkerTemplateTemplate:(FreemarkerTemplateTemplate *)template_ {
  if (scope_ != FreemarkerCoreCustomAttribute_SCOPE_TEMPLATE) {
    @throw new_JavaLangUnsupportedOperationException_initWithNSString_(@"This is not a template-scope attribute");
  }
  return [((FreemarkerCoreConfigurable *) nil_chk((template_))) getCustomAttributeWithId:key_ withFreemarkerCoreCustomAttribute:self];
}


#line 140
- (id)getWithFreemarkerTemplateConfiguration:(FreemarkerTemplateConfiguration *)cfg {
  if (scope_ != FreemarkerCoreCustomAttribute_SCOPE_CONFIGURATION) {
    @throw new_JavaLangUnsupportedOperationException_initWithNSString_(@"This is not a template-scope attribute");
  }
  return [((FreemarkerCoreConfigurable *) nil_chk((cfg))) getCustomAttributeWithId:key_ withFreemarkerCoreCustomAttribute:self];
}


#line 163
- (void)setWithId:(id)value
withFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env {
  [((FreemarkerCoreConfigurable *) nil_chk(FreemarkerCoreCustomAttribute_getScopeConfigurableWithFreemarkerCoreEnvironment_(self, env))) setCustomAttributeWithId:key_ withId:value];
}


#line 175
- (void)setWithId:(id)value {
  [((FreemarkerCoreConfigurable *) nil_chk(FreemarkerCoreCustomAttribute_getScopeConfigurableWithFreemarkerCoreEnvironment_(self, FreemarkerCoreCustomAttribute_getRequiredCurrentEnvironment(self)))) setCustomAttributeWithId:key_ withId:value];
}


#line 190
- (void)setWithId:(id)value
withFreemarkerTemplateTemplate:(FreemarkerTemplateTemplate *)template_ {
  if (scope_ != FreemarkerCoreCustomAttribute_SCOPE_TEMPLATE) {
    @throw new_JavaLangUnsupportedOperationException_initWithNSString_(@"This is not a template-scope attribute");
  }
  [((FreemarkerCoreConfigurable *) nil_chk((template_))) setCustomAttributeWithId:key_ withId:value];
}


#line 210
- (void)setWithId:(id)value
withFreemarkerTemplateConfiguration:(FreemarkerTemplateConfiguration *)cfg {
  if (scope_ != FreemarkerCoreCustomAttribute_SCOPE_CONFIGURATION) {
    @throw new_JavaLangUnsupportedOperationException_initWithNSString_(@"This is not a configuration-scope attribute");
  }
  [((FreemarkerCoreConfigurable *) nil_chk((cfg))) setCustomAttributeWithId:key_ withId:value];
}


#line 217
- (FreemarkerCoreEnvironment *)getRequiredCurrentEnvironment {
  return FreemarkerCoreCustomAttribute_getRequiredCurrentEnvironment(self);
}


#line 225
- (FreemarkerCoreConfigurable *)getScopeConfigurableWithFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env {
  return FreemarkerCoreCustomAttribute_getScopeConfigurableWithFreemarkerCoreEnvironment_(self, env);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithInt:", "CustomAttribute", NULL, 0x1, NULL, NULL },
    { "create", NULL, "Ljava.lang.Object;", 0x4, NULL, NULL },
    { "getWithFreemarkerCoreEnvironment:", "get", "Ljava.lang.Object;", 0x11, NULL, NULL },
    { "get", NULL, "Ljava.lang.Object;", 0x11, NULL, NULL },
    { "getWithFreemarkerTemplateTemplate:", "get", "Ljava.lang.Object;", 0x11, NULL, NULL },
    { "getWithFreemarkerTemplateConfiguration:", "get", "Ljava.lang.Object;", 0x11, NULL, NULL },
    { "setWithId:withFreemarkerCoreEnvironment:", "set", "V", 0x11, NULL, NULL },
    { "setWithId:", "set", "V", 0x11, NULL, NULL },
    { "setWithId:withFreemarkerTemplateTemplate:", "set", "V", 0x11, NULL, NULL },
    { "setWithId:withFreemarkerTemplateConfiguration:", "set", "V", 0x11, NULL, NULL },
    { "getRequiredCurrentEnvironment", NULL, "Lfreemarker.core.Environment;", 0x2, NULL, NULL },
    { "getScopeConfigurableWithFreemarkerCoreEnvironment:", "getScopeConfigurable", "Lfreemarker.core.Configurable;", 0x2, "Ljava.lang.Error;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "SCOPE_ENVIRONMENT_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = FreemarkerCoreCustomAttribute_SCOPE_ENVIRONMENT },
    { "SCOPE_TEMPLATE_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = FreemarkerCoreCustomAttribute_SCOPE_TEMPLATE },
    { "SCOPE_CONFIGURATION_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = FreemarkerCoreCustomAttribute_SCOPE_CONFIGURATION },
    { "key_", NULL, 0x12, "Ljava.lang.Object;", NULL, NULL,  },
    { "scope_", NULL, 0x12, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerCoreCustomAttribute = { 2, "CustomAttribute", "freemarker.core", NULL, 0x1, 12, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerCoreCustomAttribute;
}

@end


#line 67
void FreemarkerCoreCustomAttribute_initWithInt_(FreemarkerCoreCustomAttribute *self, jint scope) {
  (void) NSObject_init(self);
  self->key_ = new_NSObject_init();
  
#line 68
  if (scope != FreemarkerCoreCustomAttribute_SCOPE_ENVIRONMENT &&
#line 69
  scope != FreemarkerCoreCustomAttribute_SCOPE_TEMPLATE &&
#line 70
  scope != FreemarkerCoreCustomAttribute_SCOPE_CONFIGURATION) {
    @throw new_JavaLangIllegalArgumentException_init();
  }
  self->scope_ = scope;
}


#line 67
FreemarkerCoreCustomAttribute *new_FreemarkerCoreCustomAttribute_initWithInt_(jint scope) {
  FreemarkerCoreCustomAttribute *self = [FreemarkerCoreCustomAttribute alloc];
  FreemarkerCoreCustomAttribute_initWithInt_(self, scope);
  return self;
}


#line 217
FreemarkerCoreEnvironment *FreemarkerCoreCustomAttribute_getRequiredCurrentEnvironment(FreemarkerCoreCustomAttribute *self) {
  FreemarkerCoreEnvironment *c = FreemarkerCoreEnvironment_getCurrentEnvironment();
  if (c == nil) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"No current environment");
  }
  return c;
}

FreemarkerCoreConfigurable *FreemarkerCoreCustomAttribute_getScopeConfigurableWithFreemarkerCoreEnvironment_(FreemarkerCoreCustomAttribute *self, FreemarkerCoreEnvironment *env) {
  switch (self->scope_) {
    case FreemarkerCoreCustomAttribute_SCOPE_ENVIRONMENT:
    return env;
    case FreemarkerCoreCustomAttribute_SCOPE_TEMPLATE:
    return [((FreemarkerCoreEnvironment *) nil_chk(env)) getParent];
    case FreemarkerCoreCustomAttribute_SCOPE_CONFIGURATION:
    return [((FreemarkerCoreConfigurable *) nil_chk([((FreemarkerCoreEnvironment *) nil_chk(env)) getParent])) getParent];
    default:
    @throw new_FreemarkerCoreBugException_init();
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreCustomAttribute)
