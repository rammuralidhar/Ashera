//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/ext/beans/_MethodUtil.java
//

#ifndef _FreemarkerExtBeans_MethodUtil_H_
#define _FreemarkerExtBeans_MethodUtil_H_

#include "J2ObjC_header.h"

@class FreemarkerExtBeansCallableMemberDescriptor;
@class FreemarkerTemplateTemplateModelException;
@class IOSClass;
@class IOSObjectArray;
@class JavaLangThrowable;
@protocol JavaLangReflectMember;
@protocol JavaUtilSet;

/**
 @brief For internal use only; don't depend on this, there's no backward compatibility guarantee at all!
 This class is to work around the lack of module system in Java, i.e., so that other FreeMarker packages can access things inside this package that users shouldn't.
 */
@interface FreemarkerExtBeans_MethodUtil : NSObject

#pragma mark Public

/**
 @brief Attention, this doesn't handle primitive classes correctly, nor numerical conversions.
 */
+ (id<JavaUtilSet>)getAssignablesWithIOSClass:(IOSClass *)c1
                                 withIOSClass:(IOSClass *)c2;

+ (IOSObjectArray *)getParameterTypesWithJavaLangReflectMember:(id<JavaLangReflectMember>)member;

+ (IOSObjectArray *)invocationErrorMessageStartWithJavaLangReflectMember:(id<JavaLangReflectMember>)member;

/**
 @brief Determines whether the type given as the 1st argument is convertible to the type given as the 2nd argument for method call argument conversion.
 This follows the rules of the Java reflection-based method call, except that since we don't have the value here, a boxed class is never seen as convertible to a primitive type.
 @return 0 means <code>false</code> , non-0 means <code>true</code> . That is, 0 is returned less specificity or incomparable specificity, also when if then method was aborted because of <code>ifHigherThan</code> . The absolute value of the returned non-0 number symbolizes how more specific it is: <ul> <li>1: The two classes are identical</li> <li>2: The 1st type is primitive, the 2nd type is the corresponding boxing class</li> <li>3: Both classes are numerical, and one is convertible into the other with widening conversion. E.g., <code>int</code> is convertible to <code>long</code> and {#code double}, hence <code>int</code> is more specific. This ignores primitive VS boxed mismatches, except that a boxed class is never seen as convertible to a primitive class.</li> <li>4: One class is <code>instanceof</code> of the other, but they aren't identical. But unlike in Java, primitive numerical types are <code>instanceof</code>  Number here.</li> </ul>
 */
+ (jint)isMoreOrSameSpecificParameterTypeWithIOSClass:(IOSClass *)specific
                                         withIOSClass:(IOSClass *)generic
                                          withBoolean:(jboolean)bugfixed
                                              withInt:(jint)ifHigherThan;

+ (jboolean)isVarargsWithJavaLangReflectMember:(id<JavaLangReflectMember>)member;

+ (FreemarkerTemplateTemplateModelException *)newInvocationTemplateModelExceptionWithId:(id)object
                                         withFreemarkerExtBeansCallableMemberDescriptor:(FreemarkerExtBeansCallableMemberDescriptor *)callableMemberDescriptor
                                                                  withJavaLangThrowable:(JavaLangThrowable *)e OBJC_METHOD_FAMILY_NONE;

+ (FreemarkerTemplateTemplateModelException *)newInvocationTemplateModelExceptionWithId:(id)object
                                                              withJavaLangReflectMember:(id<JavaLangReflectMember>)member
                                                                  withJavaLangThrowable:(JavaLangThrowable *)e OBJC_METHOD_FAMILY_NONE;

/**
 @brief Returns a more streamlined method or constructor description than <code>Member.toString()</code> does.
 */
+ (NSString *)toStringWithJavaLangReflectMember:(id<JavaLangReflectMember>)member;

@end

J2OBJC_STATIC_INIT(FreemarkerExtBeans_MethodUtil)

FOUNDATION_EXPORT jint FreemarkerExtBeans_MethodUtil_isMoreOrSameSpecificParameterTypeWithIOSClass_withIOSClass_withBoolean_withInt_(IOSClass *specific, IOSClass *generic, jboolean bugfixed, jint ifHigherThan);

FOUNDATION_EXPORT id<JavaUtilSet> FreemarkerExtBeans_MethodUtil_getAssignablesWithIOSClass_withIOSClass_(IOSClass *c1, IOSClass *c2);

FOUNDATION_EXPORT IOSObjectArray *FreemarkerExtBeans_MethodUtil_getParameterTypesWithJavaLangReflectMember_(id<JavaLangReflectMember> member);

FOUNDATION_EXPORT jboolean FreemarkerExtBeans_MethodUtil_isVarargsWithJavaLangReflectMember_(id<JavaLangReflectMember> member);

FOUNDATION_EXPORT NSString *FreemarkerExtBeans_MethodUtil_toStringWithJavaLangReflectMember_(id<JavaLangReflectMember> member);

FOUNDATION_EXPORT IOSObjectArray *FreemarkerExtBeans_MethodUtil_invocationErrorMessageStartWithJavaLangReflectMember_(id<JavaLangReflectMember> member);

FOUNDATION_EXPORT FreemarkerTemplateTemplateModelException *FreemarkerExtBeans_MethodUtil_newInvocationTemplateModelExceptionWithId_withJavaLangReflectMember_withJavaLangThrowable_(id object, id<JavaLangReflectMember> member, JavaLangThrowable *e);

FOUNDATION_EXPORT FreemarkerTemplateTemplateModelException *FreemarkerExtBeans_MethodUtil_newInvocationTemplateModelExceptionWithId_withFreemarkerExtBeansCallableMemberDescriptor_withJavaLangThrowable_(id object, FreemarkerExtBeansCallableMemberDescriptor *callableMemberDescriptor, JavaLangThrowable *e);

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerExtBeans_MethodUtil)

#endif // _FreemarkerExtBeans_MethodUtil_H_
