//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/EscapeBlock.java
//


#include "Environment.h"
#include "EscapeBlock.h"
#include "Expression.h"
#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "ParameterRole.h"
#include "TemplateElement.h"
#include "TemplateException.h"
#include "_CoreStringUtils.h"
#include "java/io/IOException.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/StringBuffer.h"

#line 0 "/Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/EscapeBlock.java"

@interface FreemarkerCoreEscapeBlock () {
 @public
  NSString *variable_;
  FreemarkerCoreExpression *expr_;
  FreemarkerCoreExpression *escapedExpr_;
}

@end

J2OBJC_FIELD_SETTER(FreemarkerCoreEscapeBlock, variable_, NSString *)
J2OBJC_FIELD_SETTER(FreemarkerCoreEscapeBlock, expr_, FreemarkerCoreExpression *)
J2OBJC_FIELD_SETTER(FreemarkerCoreEscapeBlock, escapedExpr_, FreemarkerCoreExpression *)


#line 27
@implementation FreemarkerCoreEscapeBlock


#line 34
- (instancetype)initWithNSString:(NSString *)variable
    withFreemarkerCoreExpression:(FreemarkerCoreExpression *)expr
    withFreemarkerCoreExpression:(FreemarkerCoreExpression *)escapedExpr {
  FreemarkerCoreEscapeBlock_initWithNSString_withFreemarkerCoreExpression_withFreemarkerCoreExpression_(self, variable, expr, escapedExpr);
  return self;
}


#line 40
- (void)setContentWithFreemarkerCoreTemplateElement:(FreemarkerCoreTemplateElement *)nestedBlock {
  [self setNestedBlockWithFreemarkerCoreTemplateElement:nestedBlock];
  
#line 43
  self->escapedExpr_ = nil;
}


#line 46
- (void)acceptWithFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env {
  if ([self getNestedBlock] != nil) {
    [((FreemarkerCoreEnvironment *) nil_chk(env)) visitWithFreemarkerCoreTemplateElement:[self getNestedBlock]];
  }
}

- (FreemarkerCoreExpression *)doEscapeWithFreemarkerCoreExpression:(FreemarkerCoreExpression *)expression {
  return [((FreemarkerCoreExpression *) nil_chk(escapedExpr_)) deepCloneWithIdentifierReplacedWithNSString:variable_ withFreemarkerCoreExpression:expression withFreemarkerCoreExpression_ReplacemenetState:new_FreemarkerCoreExpression_ReplacemenetState_init()];
}

- (NSString *)dumpWithBoolean:(jboolean)canonical {
  JavaLangStringBuffer *sb = new_JavaLangStringBuffer_init();
  if (canonical) (void) [sb appendWithChar:'<'];
  (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([sb appendWithNSString:[self getNodeTypeSymbol]])) appendWithChar:
#line 60
  ' '])) appendWithNSString:FreemarkerCore_CoreStringUtils_toFTLTopLevelIdentifierReferenceWithNSString_(variable_)])) appendWithNSString:
#line 61
  @" as "])) appendWithNSString:[((FreemarkerCoreExpression *) nil_chk(expr_)) getCanonicalForm]];
  if (canonical) {
    (void) [sb appendWithChar:'>'];
    if ([self getNestedBlock] != nil) {
      (void) [sb appendWithNSString:[((FreemarkerCoreTemplateElement *) nil_chk([self getNestedBlock])) getCanonicalForm]];
    }
    (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([sb appendWithNSString:@"</"])) appendWithNSString:[self getNodeTypeSymbol]])) appendWithChar:'>'];
  }
  return [sb description];
}


#line 72
- (NSString *)getNodeTypeSymbol {
  return @"#escape";
}

- (jboolean)isShownInStackTrace {
  return NO;
}

- (jint)getParameterCount {
  return 2;
}

- (id)getParameterValueWithInt:(jint)idx {
  switch (idx) {
    case 0:
    
#line 86
    return variable_;
    case 1:
    
#line 87
    return expr_;
    default:
    
#line 88
    @throw new_JavaLangIndexOutOfBoundsException_init();
  }
}


#line 92
- (FreemarkerCoreParameterRole *)getParameterRoleWithInt:(jint)idx {
  switch (idx) {
    case 0:
    
#line 94
    return FreemarkerCoreParameterRole_get_PLACEHOLDER_VARIABLE_();
    case 1:
    
#line 95
    return FreemarkerCoreParameterRole_get_EXPRESSION_TEMPLATE_();
    default:
    
#line 96
    @throw new_JavaLangIndexOutOfBoundsException_init();
  }
}


#line 100
- (jboolean)isOutputCacheable {
  return YES;
}

- (jboolean)isNestedBlockRepeater {
  return NO;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithNSString:withFreemarkerCoreExpression:withFreemarkerCoreExpression:", "EscapeBlock", NULL, 0x0, NULL, NULL },
    { "setContentWithFreemarkerCoreTemplateElement:", "setContent", "V", 0x0, NULL, NULL },
    { "acceptWithFreemarkerCoreEnvironment:", "accept", "V", 0x0, "Lfreemarker.template.TemplateException;Ljava.io.IOException;", NULL },
    { "doEscapeWithFreemarkerCoreExpression:", "doEscape", "Lfreemarker.core.Expression;", 0x0, NULL, NULL },
    { "dumpWithBoolean:", "dump", "Ljava.lang.String;", 0x4, NULL, NULL },
    { "getNodeTypeSymbol", NULL, "Ljava.lang.String;", 0x0, NULL, NULL },
    { "isShownInStackTrace", NULL, "Z", 0x0, NULL, NULL },
    { "getParameterCount", NULL, "I", 0x0, NULL, NULL },
    { "getParameterValueWithInt:", "getParameterValue", "Ljava.lang.Object;", 0x0, NULL, NULL },
    { "getParameterRoleWithInt:", "getParameterRole", "Lfreemarker.core.ParameterRole;", 0x0, NULL, NULL },
    { "isOutputCacheable", NULL, "Z", 0x0, NULL, NULL },
    { "isNestedBlockRepeater", NULL, "Z", 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "variable_", NULL, 0x12, "Ljava.lang.String;", NULL, NULL,  },
    { "expr_", NULL, 0x12, "Lfreemarker.core.Expression;", NULL, NULL,  },
    { "escapedExpr_", NULL, 0x2, "Lfreemarker.core.Expression;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerCoreEscapeBlock = { 2, "EscapeBlock", "freemarker.core", NULL, 0x0, 12, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerCoreEscapeBlock;
}

@end


#line 34
void FreemarkerCoreEscapeBlock_initWithNSString_withFreemarkerCoreExpression_withFreemarkerCoreExpression_(FreemarkerCoreEscapeBlock *self, NSString *variable, FreemarkerCoreExpression *expr, FreemarkerCoreExpression *escapedExpr) {
  (void) FreemarkerCoreTemplateElement_init(self);
  
#line 35
  self->variable_ = variable;
  self->expr_ = expr;
  self->escapedExpr_ = escapedExpr;
}


#line 34
FreemarkerCoreEscapeBlock *new_FreemarkerCoreEscapeBlock_initWithNSString_withFreemarkerCoreExpression_withFreemarkerCoreExpression_(NSString *variable, FreemarkerCoreExpression *expr, FreemarkerCoreExpression *escapedExpr) {
  FreemarkerCoreEscapeBlock *self = [FreemarkerCoreEscapeBlock alloc];
  FreemarkerCoreEscapeBlock_initWithNSString_withFreemarkerCoreExpression_withFreemarkerCoreExpression_(self, variable, expr, escapedExpr);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreEscapeBlock)
