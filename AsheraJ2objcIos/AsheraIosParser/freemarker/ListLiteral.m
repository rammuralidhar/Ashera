//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/ListLiteral.java
//


#include "Environment.h"
#include "Expression.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "ListLiteral.h"
#include "ParameterRole.h"
#include "SimpleSequence.h"
#include "StringLiteral.h"
#include "TemplateException.h"
#include "TemplateModel.h"
#include "TemplateSequenceModel.h"
#include "_DelayedGetMessage.h"
#include "_DelayedJQuote.h"
#include "_MiscTemplateException.h"
#include "java/io/IOException.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/StringBuffer.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/ListIterator.h"

#line 0 "/Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/ListLiteral.java"

@interface FreemarkerCoreListLiteral ()

- (void)checkIndexWithInt:(jint)idx;

@end

__attribute__((unused)) static void FreemarkerCoreListLiteral_checkIndexWithInt_(FreemarkerCoreListLiteral *self, jint idx);


#line 33
@implementation FreemarkerCoreListLiteral


#line 37
- (instancetype)initWithJavaUtilArrayList:(JavaUtilArrayList *)items {
  FreemarkerCoreListLiteral_initWithJavaUtilArrayList_(self, items);
  return self;
}

- (id<FreemarkerTemplateTemplateModel>)_evalWithFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env {
  FreemarkerTemplateSimpleSequence *list = new_FreemarkerTemplateSimpleSequence_initWithInt_([((JavaUtilArrayList *) nil_chk(items_)) size]);
  for (id<JavaUtilIterator> it = [items_ iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    FreemarkerCoreExpression *exp = (FreemarkerCoreExpression *) check_class_cast([it next], [FreemarkerCoreExpression class]);
    id<FreemarkerTemplateTemplateModel> tm = [((FreemarkerCoreExpression *) nil_chk(exp)) evalWithFreemarkerCoreEnvironment:env];
    if (env == nil || ![env isClassicCompatible]) {
      [exp assertNonNullWithFreemarkerTemplateTemplateModel:tm withFreemarkerCoreEnvironment:env];
    }
    [list addWithId:tm];
  }
  return list;
}


#line 59
- (id<JavaUtilList>)getValueListWithFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env {
  jint size = [((JavaUtilArrayList *) nil_chk(items_)) size];
  switch (size) {
    case 0:
    {
      
#line 63
      return JavaUtilCollections_get_EMPTY_LIST_();
    }
    case 1:
    {
      
#line 66
      return JavaUtilCollections_singletonListWithId_([((FreemarkerCoreExpression *) nil_chk(((FreemarkerCoreExpression *) check_class_cast([items_ getWithInt:0], [FreemarkerCoreExpression class])))) evalAndCoerceToStringWithFreemarkerCoreEnvironment:env]);
    }
    default:
    {
      
#line 69
      id<JavaUtilList> result = new_JavaUtilArrayList_initWithInt_([items_ size]);
      for (id<JavaUtilListIterator> iterator = [items_ listIterator]; [((id<JavaUtilListIterator>) nil_chk(iterator)) hasNext]; ) {
        FreemarkerCoreExpression *exp = (FreemarkerCoreExpression *) check_class_cast([iterator next], [FreemarkerCoreExpression class]);
        [result addWithId:[((FreemarkerCoreExpression *) nil_chk(exp)) evalAndCoerceToStringWithFreemarkerCoreEnvironment:env]];
      }
      return result;
    }
  }
}


#line 82
- (id<JavaUtilList>)getModelListWithFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env {
  jint size = [((JavaUtilArrayList *) nil_chk(items_)) size];
  switch (size) {
    case 0:
    {
      
#line 86
      return JavaUtilCollections_get_EMPTY_LIST_();
    }
    case 1:
    {
      
#line 89
      return JavaUtilCollections_singletonListWithId_([((FreemarkerCoreExpression *) nil_chk(((FreemarkerCoreExpression *) check_class_cast([items_ getWithInt:0], [FreemarkerCoreExpression class])))) evalWithFreemarkerCoreEnvironment:env]);
    }
    default:
    {
      
#line 92
      id<JavaUtilList> result = new_JavaUtilArrayList_initWithInt_([items_ size]);
      for (id<JavaUtilListIterator> iterator = [items_ listIterator]; [((id<JavaUtilListIterator>) nil_chk(iterator)) hasNext]; ) {
        FreemarkerCoreExpression *exp = (FreemarkerCoreExpression *) check_class_cast([iterator next], [FreemarkerCoreExpression class]);
        [result addWithId:[((FreemarkerCoreExpression *) nil_chk(exp)) evalWithFreemarkerCoreEnvironment:env]];
      }
      return result;
    }
  }
}


#line 102
- (NSString *)getCanonicalForm {
  JavaLangStringBuffer *buf = new_JavaLangStringBuffer_initWithNSString_(@"[");
  jint size = [((JavaUtilArrayList *) nil_chk(items_)) size];
  for (jint i = 0; i < size; i++) {
    FreemarkerCoreExpression *value = (FreemarkerCoreExpression *) check_class_cast([items_ getWithInt:i], [FreemarkerCoreExpression class]);
    (void) [buf appendWithNSString:[((FreemarkerCoreExpression *) nil_chk(value)) getCanonicalForm]];
    if (i != size - 1) {
      (void) [buf appendWithNSString:@", "];
    }
  }
  (void) [buf appendWithNSString:@"]"];
  return [buf description];
}

- (NSString *)getNodeTypeSymbol {
  return @"[...]";
}

- (jboolean)isLiteral {
  if (constantValue_ != nil) {
    return YES;
  }
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(items_)) size]; i++) {
    FreemarkerCoreExpression *exp = (FreemarkerCoreExpression *) check_class_cast([items_ getWithInt:i], [FreemarkerCoreExpression class]);
    if (![((FreemarkerCoreExpression *) nil_chk(exp)) isLiteral]) {
      return NO;
    }
  }
  return YES;
}


#line 135
- (id<FreemarkerTemplateTemplateSequenceModel>)evaluateStringsToNamespacesWithFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env {
  id<FreemarkerTemplateTemplateSequenceModel> val = (id<FreemarkerTemplateTemplateSequenceModel>) check_protocol_cast([self evalWithFreemarkerCoreEnvironment:env], @protocol(FreemarkerTemplateTemplateSequenceModel));
  FreemarkerTemplateSimpleSequence *result = new_FreemarkerTemplateSimpleSequence_initWithInt_([((id<FreemarkerTemplateTemplateSequenceModel>) nil_chk(val)) size]);
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(items_)) size]; i++) {
    id itemExpr = [items_ getWithInt:i];
    if ([itemExpr isKindOfClass:[FreemarkerCoreStringLiteral class]]) {
      NSString *s = [((FreemarkerCoreStringLiteral *) nil_chk(((FreemarkerCoreStringLiteral *) check_class_cast(itemExpr, [FreemarkerCoreStringLiteral class])))) getAsString];
      @try {
        FreemarkerCoreEnvironment_Namespace *ns = [((FreemarkerCoreEnvironment *) nil_chk(env)) importLibWithNSString:s withNSString:nil];
        [result addWithId:ns];
      }
      @catch (JavaIoIOException *ioe) {
        @throw new_FreemarkerCore_MiscTemplateException_initWithFreemarkerCoreExpression_withNSObjectArray_(((FreemarkerCoreStringLiteral *) check_class_cast(itemExpr, [FreemarkerCoreStringLiteral class])), [IOSObjectArray newArrayWithObjects:(id[]){
#line 148
          @"Couldn't import library ", new_FreemarkerCore_DelayedJQuote_initWithId_(s), @": ", new_FreemarkerCore_DelayedGetMessage_initWithJavaLangThrowable_(
#line 149
          ioe) } count:4 type:NSObject_class_()]);
        }
      }
      else {
        [result addWithId:[val getWithInt:i]];
      }
    }
    return result;
  }


#line 159
- (FreemarkerCoreExpression *)deepCloneWithIdentifierReplaced_innerWithNSString:(NSString *)replacedIdentifier
                                                   withFreemarkerCoreExpression:(FreemarkerCoreExpression *)replacement
                                 withFreemarkerCoreExpression_ReplacemenetState:(FreemarkerCoreExpression_ReplacemenetState *)replacementState {
  
#line 161
  JavaUtilArrayList *clonedValues = (JavaUtilArrayList *) check_class_cast([((JavaUtilArrayList *) nil_chk(items_)) clone], [JavaUtilArrayList class]);
  for (id<JavaUtilListIterator> iter = [((JavaUtilArrayList *) nil_chk(clonedValues)) listIterator]; [((id<JavaUtilListIterator>) nil_chk(iter)) hasNext]; ) {
    [iter setWithId:[((FreemarkerCoreExpression *) nil_chk(((FreemarkerCoreExpression *) check_class_cast([iter next], [FreemarkerCoreExpression class])))) deepCloneWithIdentifierReplacedWithNSString:
#line 164
    replacedIdentifier withFreemarkerCoreExpression:replacement withFreemarkerCoreExpression_ReplacemenetState:replacementState]];
  }
  return new_FreemarkerCoreListLiteral_initWithJavaUtilArrayList_(clonedValues);
}


#line 169
- (jint)getParameterCount {
  return items_ != nil ? [items_ size] : 0;
}

- (id)getParameterValueWithInt:(jint)idx {
  FreemarkerCoreListLiteral_checkIndexWithInt_(self, idx);
  return [((JavaUtilArrayList *) nil_chk(items_)) getWithInt:idx];
}

- (FreemarkerCoreParameterRole *)getParameterRoleWithInt:(jint)idx {
  FreemarkerCoreListLiteral_checkIndexWithInt_(self, idx);
  return FreemarkerCoreParameterRole_get_ITEM_VALUE_();
}

- (void)checkIndexWithInt:(jint)idx {
  FreemarkerCoreListLiteral_checkIndexWithInt_(self, idx);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaUtilArrayList:", "ListLiteral", NULL, 0x0, NULL, NULL },
    { "_evalWithFreemarkerCoreEnvironment:", "_eval", "Lfreemarker.template.TemplateModel;", 0x0, "Lfreemarker.template.TemplateException;", NULL },
    { "getValueListWithFreemarkerCoreEnvironment:", "getValueList", "Ljava.util.List;", 0x0, "Lfreemarker.template.TemplateException;", NULL },
    { "getModelListWithFreemarkerCoreEnvironment:", "getModelList", "Ljava.util.List;", 0x0, "Lfreemarker.template.TemplateException;", NULL },
    { "getCanonicalForm", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getNodeTypeSymbol", NULL, "Ljava.lang.String;", 0x0, NULL, NULL },
    { "isLiteral", NULL, "Z", 0x0, NULL, NULL },
    { "evaluateStringsToNamespacesWithFreemarkerCoreEnvironment:", "evaluateStringsToNamespaces", "Lfreemarker.template.TemplateSequenceModel;", 0x0, "Lfreemarker.template.TemplateException;", NULL },
    { "deepCloneWithIdentifierReplaced_innerWithNSString:withFreemarkerCoreExpression:withFreemarkerCoreExpression_ReplacemenetState:", "deepCloneWithIdentifierReplaced_inner", "Lfreemarker.core.Expression;", 0x4, NULL, NULL },
    { "getParameterCount", NULL, "I", 0x0, NULL, NULL },
    { "getParameterValueWithInt:", "getParameterValue", "Ljava.lang.Object;", 0x0, NULL, NULL },
    { "getParameterRoleWithInt:", "getParameterRole", "Lfreemarker.core.ParameterRole;", 0x0, NULL, NULL },
    { "checkIndexWithInt:", "checkIndex", "V", 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "items_", NULL, 0x10, "Ljava.util.ArrayList;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerCoreListLiteral = { 2, "ListLiteral", "freemarker.core", NULL, 0x10, 13, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerCoreListLiteral;
}

@end


#line 37
void FreemarkerCoreListLiteral_initWithJavaUtilArrayList_(FreemarkerCoreListLiteral *self, JavaUtilArrayList *items) {
  (void) FreemarkerCoreExpression_init(self);
  
#line 38
  self->items_ = items;
  [((JavaUtilArrayList *) nil_chk(items)) trimToSize];
}


#line 37
FreemarkerCoreListLiteral *new_FreemarkerCoreListLiteral_initWithJavaUtilArrayList_(JavaUtilArrayList *items) {
  FreemarkerCoreListLiteral *self = [FreemarkerCoreListLiteral alloc];
  FreemarkerCoreListLiteral_initWithJavaUtilArrayList_(self, items);
  return self;
}


#line 183
void FreemarkerCoreListLiteral_checkIndexWithInt_(FreemarkerCoreListLiteral *self, jint idx) {
  if (self->items_ == nil || idx >= [self->items_ size]) {
    @throw new_JavaLangIndexOutOfBoundsException_init();
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreListLiteral)
