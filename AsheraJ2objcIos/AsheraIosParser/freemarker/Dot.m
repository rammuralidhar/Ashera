//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/Dot.java
//


#include "Dot.h"
#include "Environment.h"
#include "Expression.h"
#include "IOSClass.h"
#include "Identifier.h"
#include "J2ObjC_source.h"
#include "NonHashException.h"
#include "ParameterRole.h"
#include "TemplateException.h"
#include "TemplateHashModel.h"
#include "TemplateModel.h"
#include "_CoreStringUtils.h"

#line 0 "/Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/Dot.java"

@interface FreemarkerCoreDot () {
 @public
  FreemarkerCoreExpression *target_;
  NSString *key_;
}

@end

J2OBJC_FIELD_SETTER(FreemarkerCoreDot, target_, FreemarkerCoreExpression *)
J2OBJC_FIELD_SETTER(FreemarkerCoreDot, key_, NSString *)


#line 27
@implementation FreemarkerCoreDot


#line 31
- (instancetype)initWithFreemarkerCoreExpression:(FreemarkerCoreExpression *)target
                                    withNSString:(NSString *)key {
  FreemarkerCoreDot_initWithFreemarkerCoreExpression_withNSString_(self, target, key);
  return self;
}


#line 36
- (id<FreemarkerTemplateTemplateModel>)_evalWithFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env {
  
#line 38
  id<FreemarkerTemplateTemplateModel> leftModel = [((FreemarkerCoreExpression *) nil_chk(target_)) evalWithFreemarkerCoreEnvironment:env];
  if ([FreemarkerTemplateTemplateHashModel_class_() isInstance:leftModel]) {
    return [((id<FreemarkerTemplateTemplateHashModel>) nil_chk(((id<FreemarkerTemplateTemplateHashModel>) check_protocol_cast(leftModel, @protocol(FreemarkerTemplateTemplateHashModel))))) getWithNSString:key_];
  }
  if (leftModel == nil && [((FreemarkerCoreEnvironment *) nil_chk(env)) isClassicCompatible]) {
    return nil;
  }
  @throw new_FreemarkerCoreNonHashException_initWithFreemarkerCoreExpression_withFreemarkerTemplateTemplateModel_withFreemarkerCoreEnvironment_(target_, leftModel, env);
}


#line 48
- (NSString *)getCanonicalForm {
  return JreStrcat("$$$", [((FreemarkerCoreExpression *) nil_chk(target_)) getCanonicalForm], [self getNodeTypeSymbol], FreemarkerCore_CoreStringUtils_toFTLIdentifierReferenceAfterDotWithNSString_(key_));
}

- (NSString *)getNodeTypeSymbol {
  return @".";
}

- (jboolean)isLiteral {
  return [((FreemarkerCoreExpression *) nil_chk(target_)) isLiteral];
}

- (FreemarkerCoreExpression *)deepCloneWithIdentifierReplaced_innerWithNSString:(NSString *)replacedIdentifier
                                                   withFreemarkerCoreExpression:(FreemarkerCoreExpression *)replacement
                                 withFreemarkerCoreExpression_ReplacemenetState:(FreemarkerCoreExpression_ReplacemenetState *)replacementState {
  
#line 62
  return new_FreemarkerCoreDot_initWithFreemarkerCoreExpression_withNSString_(
#line 63
  [((FreemarkerCoreExpression *) nil_chk(target_)) deepCloneWithIdentifierReplacedWithNSString:replacedIdentifier withFreemarkerCoreExpression:replacement withFreemarkerCoreExpression_ReplacemenetState:replacementState],
#line 64
  key_);
}


#line 67
- (jint)getParameterCount {
  return 2;
}

- (id)getParameterValueWithInt:(jint)idx {
  return idx == 0 ? target_ : key_;
}

- (FreemarkerCoreParameterRole *)getParameterRoleWithInt:(jint)idx {
  return FreemarkerCoreParameterRole_forBinaryOperatorOperandWithInt_(idx);
}

- (NSString *)getRHO {
  return key_;
}

- (jboolean)onlyHasIdentifiers {
  return ([target_ isKindOfClass:[FreemarkerCoreIdentifier class]]) || (([target_ isKindOfClass:[FreemarkerCoreDot class]]) && [((FreemarkerCoreDot *) nil_chk(((FreemarkerCoreDot *) check_class_cast(target_, [FreemarkerCoreDot class])))) onlyHasIdentifiers]);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithFreemarkerCoreExpression:withNSString:", "Dot", NULL, 0x0, NULL, NULL },
    { "_evalWithFreemarkerCoreEnvironment:", "_eval", "Lfreemarker.template.TemplateModel;", 0x0, "Lfreemarker.template.TemplateException;", NULL },
    { "getCanonicalForm", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getNodeTypeSymbol", NULL, "Ljava.lang.String;", 0x0, NULL, NULL },
    { "isLiteral", NULL, "Z", 0x0, NULL, NULL },
    { "deepCloneWithIdentifierReplaced_innerWithNSString:withFreemarkerCoreExpression:withFreemarkerCoreExpression_ReplacemenetState:", "deepCloneWithIdentifierReplaced_inner", "Lfreemarker.core.Expression;", 0x4, NULL, NULL },
    { "getParameterCount", NULL, "I", 0x0, NULL, NULL },
    { "getParameterValueWithInt:", "getParameterValue", "Ljava.lang.Object;", 0x0, NULL, NULL },
    { "getParameterRoleWithInt:", "getParameterRole", "Lfreemarker.core.ParameterRole;", 0x0, NULL, NULL },
    { "getRHO", NULL, "Ljava.lang.String;", 0x0, NULL, NULL },
    { "onlyHasIdentifiers", NULL, "Z", 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "target_", NULL, 0x12, "Lfreemarker.core.Expression;", NULL, NULL,  },
    { "key_", NULL, 0x12, "Ljava.lang.String;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerCoreDot = { 2, "Dot", "freemarker.core", NULL, 0x10, 11, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerCoreDot;
}

@end


#line 31
void FreemarkerCoreDot_initWithFreemarkerCoreExpression_withNSString_(FreemarkerCoreDot *self, FreemarkerCoreExpression *target, NSString *key) {
  (void) FreemarkerCoreExpression_init(self);
  
#line 32
  self->target_ = target;
  self->key_ = key;
}


#line 31
FreemarkerCoreDot *new_FreemarkerCoreDot_initWithFreemarkerCoreExpression_withNSString_(FreemarkerCoreExpression *target, NSString *key) {
  FreemarkerCoreDot *self = [FreemarkerCoreDot alloc];
  FreemarkerCoreDot_initWithFreemarkerCoreExpression_withNSString_(self, target, key);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreDot)
