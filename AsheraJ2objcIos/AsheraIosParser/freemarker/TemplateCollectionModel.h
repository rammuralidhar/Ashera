//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/template/TemplateCollectionModel.java
//

#ifndef _FreemarkerTemplateTemplateCollectionModel_H_
#define _FreemarkerTemplateTemplateCollectionModel_H_

#include "J2ObjC_header.h"
#include "TemplateModel.h"

@protocol FreemarkerTemplateTemplateModelIterator;

/**
 @brief "collection" template language data type: a collection of values that can be enumerated, but can't be or not meant to be accessed by index or key.
 As such, this is not a super-interface of TemplateSequenceModel , and implementations of that interface needn't also implement this interface just because they can. They should though, if enumeration with this interface is significantly faster than enumeration by index. The <code>#list</code> directive will enumerate using this interface if it's available. <p> The enumeration should be repeatable if that's possible with reasonable effort, otherwise a second enumeration attempt is allowed to throw an TemplateModelException . Generally, the interface user Java code need not handle that kind of exception, as in practice only the template author can handle it, by not listing such collections twice. <p> Note that to wrap Java's Collection , you should implement TemplateCollectionModelEx , not just this interface.
 */
@protocol FreemarkerTemplateTemplateCollectionModel < FreemarkerTemplateTemplateModel, NSObject, JavaObject >

/**
 @brief Retrieves a template model iterator that is used to iterate over the elements in this collection.
 */
- (id<FreemarkerTemplateTemplateModelIterator>)iterator;

@end

J2OBJC_EMPTY_STATIC_INIT(FreemarkerTemplateTemplateCollectionModel)

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerTemplateTemplateCollectionModel)

#endif // _FreemarkerTemplateTemplateCollectionModel_H_
