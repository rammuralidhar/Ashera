//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/ext/beans/BeansWrapperConfiguration.java
//


#include "BeansWrapper.h"
#include "BeansWrapperConfiguration.h"
#include "ClassIntrospectorBuilder.h"
#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "MethodAppearanceFineTuner.h"
#include "MethodSorter.h"
#include "ObjectWrapper.h"
#include "TemplateDateModel.h"
#include "Version.h"
#include "_TemplateAPI.h"
#include "java/lang/CloneNotSupportedException.h"
#include "java/lang/RuntimeException.h"

#line 0 "/Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/ext/beans/BeansWrapperConfiguration.java"

@interface FreemarkerExtBeansBeansWrapperConfiguration () {
 @public
  FreemarkerTemplateVersion *incompatibleImprovements_;
  jboolean simpleMapWrapper_;
  jint defaultDateType_;
  id<FreemarkerTemplateObjectWrapper> outerIdentity_;
  jboolean strict_;
  jboolean useModelCache_;
}

@end

J2OBJC_FIELD_SETTER(FreemarkerExtBeansBeansWrapperConfiguration, incompatibleImprovements_, FreemarkerTemplateVersion *)
J2OBJC_FIELD_SETTER(FreemarkerExtBeansBeansWrapperConfiguration, outerIdentity_, id<FreemarkerTemplateObjectWrapper>)


#line 38
@implementation FreemarkerExtBeansBeansWrapperConfiguration


#line 73
- (instancetype)initWithFreemarkerTemplateVersion:(FreemarkerTemplateVersion *)incompatibleImprovements
                                      withBoolean:(jboolean)isIncompImprsAlreadyNormalized {
  FreemarkerExtBeansBeansWrapperConfiguration_initWithFreemarkerTemplateVersion_withBoolean_(self, incompatibleImprovements, isIncompImprsAlreadyNormalized);
  return self;
}


#line 87
- (instancetype)initWithFreemarkerTemplateVersion:(FreemarkerTemplateVersion *)incompatibleImprovements {
  FreemarkerExtBeansBeansWrapperConfiguration_initWithFreemarkerTemplateVersion_(self, incompatibleImprovements);
  return self;
}


#line 91
- (NSUInteger)hash {
  jint prime = 31;
  jint result = 1;
  result = prime * result + ((jint) [((FreemarkerTemplateVersion *) nil_chk(incompatibleImprovements_)) hash]);
  result = prime * result + (simpleMapWrapper_ ? 1231 : 1237);
  result = prime * result + defaultDateType_;
  result = prime * result + (outerIdentity_ != nil ? ((jint) [outerIdentity_ hash]) : 0);
  result = prime * result + (strict_ ? 1231 : 1237);
  result = prime * result + (useModelCache_ ? 1231 : 1237);
  result = prime * result + ((jint) [((FreemarkerExtBeansClassIntrospectorBuilder *) nil_chk(classIntrospectorFactory_)) hash]);
  return result;
}


#line 108
- (jboolean)isEqual:(id)obj {
  if (self == obj) return YES;
  if (obj == nil) return NO;
  if ([self getClass] != [nil_chk(obj) getClass]) return NO;
  FreemarkerExtBeansBeansWrapperConfiguration *other = (FreemarkerExtBeansBeansWrapperConfiguration *) check_class_cast(obj, [FreemarkerExtBeansBeansWrapperConfiguration class]);
  
#line 114
  if (![((FreemarkerTemplateVersion *) nil_chk(incompatibleImprovements_)) isEqual:other->incompatibleImprovements_]) return NO;
  if (simpleMapWrapper_ != other->simpleMapWrapper_) return NO;
  if (defaultDateType_ != other->defaultDateType_) return NO;
  if (outerIdentity_ != other->outerIdentity_) return NO;
  if (strict_ != other->strict_) return NO;
  if (useModelCache_ != other->useModelCache_) return NO;
  if (![((FreemarkerExtBeansClassIntrospectorBuilder *) nil_chk(classIntrospectorFactory_)) isEqual:other->classIntrospectorFactory_]) return NO;
  
#line 122
  return YES;
}


#line 125
- (id)cloneWithBoolean:(jboolean)deepCloneKey {
  @try {
    FreemarkerExtBeansBeansWrapperConfiguration *clone = (FreemarkerExtBeansBeansWrapperConfiguration *) check_class_cast([super clone], [FreemarkerExtBeansBeansWrapperConfiguration class]);
    if (deepCloneKey) {
      ((FreemarkerExtBeansBeansWrapperConfiguration *) nil_chk(clone))->classIntrospectorFactory_ =
#line 130
      (FreemarkerExtBeansClassIntrospectorBuilder *) check_class_cast([((FreemarkerExtBeansClassIntrospectorBuilder *) nil_chk(classIntrospectorFactory_)) clone], [FreemarkerExtBeansClassIntrospectorBuilder class]);
    }
    return clone;
  }
  @catch (
#line 133
  JavaLangCloneNotSupportedException *e) {
    @throw new_JavaLangRuntimeException_initWithNSString_withJavaLangThrowable_(@"Failed to clone BeansWrapperConfiguration", e);
  }
}


#line 138
- (jboolean)isSimpleMapWrapper {
  return simpleMapWrapper_;
}


#line 143
- (void)setSimpleMapWrapperWithBoolean:(jboolean)simpleMapWrapper {
  self->simpleMapWrapper_ = simpleMapWrapper;
}

- (jint)getDefaultDateType {
  return defaultDateType_;
}


#line 152
- (void)setDefaultDateTypeWithInt:(jint)defaultDateType {
  self->defaultDateType_ = defaultDateType;
}

- (id<FreemarkerTemplateObjectWrapper>)getOuterIdentity {
  return outerIdentity_;
}


#line 164
- (void)setOuterIdentityWithFreemarkerTemplateObjectWrapper:(id<FreemarkerTemplateObjectWrapper>)outerIdentity {
  self->outerIdentity_ = outerIdentity;
}

- (jboolean)isStrict {
  return strict_;
}


#line 173
- (void)setStrictWithBoolean:(jboolean)strict {
  self->strict_ = strict;
}

- (jboolean)getUseModelCache {
  return useModelCache_;
}


#line 182
- (void)setUseModelCacheWithBoolean:(jboolean)useModelCache {
  self->useModelCache_ = useModelCache;
}

- (FreemarkerTemplateVersion *)getIncompatibleImprovements {
  return incompatibleImprovements_;
}

- (jint)getExposureLevel {
  return [((FreemarkerExtBeansClassIntrospectorBuilder *) nil_chk(classIntrospectorFactory_)) getExposureLevel];
}


#line 195
- (void)setExposureLevelWithInt:(jint)exposureLevel {
  [((FreemarkerExtBeansClassIntrospectorBuilder *) nil_chk(classIntrospectorFactory_)) setExposureLevelWithInt:exposureLevel];
}

- (jboolean)getExposeFields {
  return [((FreemarkerExtBeansClassIntrospectorBuilder *) nil_chk(classIntrospectorFactory_)) getExposeFields];
}


#line 204
- (void)setExposeFieldsWithBoolean:(jboolean)exposeFields {
  [((FreemarkerExtBeansClassIntrospectorBuilder *) nil_chk(classIntrospectorFactory_)) setExposeFieldsWithBoolean:exposeFields];
}

- (id<FreemarkerExtBeansMethodAppearanceFineTuner>)getMethodAppearanceFineTuner {
  return [((FreemarkerExtBeansClassIntrospectorBuilder *) nil_chk(classIntrospectorFactory_)) getMethodAppearanceFineTuner];
}


#line 217
- (void)setMethodAppearanceFineTunerWithFreemarkerExtBeansMethodAppearanceFineTuner:(id<FreemarkerExtBeansMethodAppearanceFineTuner>)methodAppearanceFineTuner {
  [((FreemarkerExtBeansClassIntrospectorBuilder *) nil_chk(classIntrospectorFactory_)) setMethodAppearanceFineTunerWithFreemarkerExtBeansMethodAppearanceFineTuner:methodAppearanceFineTuner];
}

- (id<FreemarkerExtBeansMethodSorter>)getMethodSorter {
  return [((FreemarkerExtBeansClassIntrospectorBuilder *) nil_chk(classIntrospectorFactory_)) getMethodSorter];
}

- (void)setMethodSorterWithFreemarkerExtBeansMethodSorter:(id<FreemarkerExtBeansMethodSorter>)methodSorter {
  [((FreemarkerExtBeansClassIntrospectorBuilder *) nil_chk(classIntrospectorFactory_)) setMethodSorterWithFreemarkerExtBeansMethodSorter:methodSorter];
}

- (id)copyWithZone:(NSZone *)zone {
  return [self clone];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithFreemarkerTemplateVersion:withBoolean:", "BeansWrapperConfiguration", NULL, 0x4, NULL, NULL },
    { "initWithFreemarkerTemplateVersion:", "BeansWrapperConfiguration", NULL, 0x4, NULL, NULL },
    { "hash", "hashCode", "I", 0x1, NULL, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL, NULL },
    { "cloneWithBoolean:", "clone", "Ljava.lang.Object;", 0x4, NULL, NULL },
    { "isSimpleMapWrapper", NULL, "Z", 0x1, NULL, NULL },
    { "setSimpleMapWrapperWithBoolean:", "setSimpleMapWrapper", "V", 0x1, NULL, NULL },
    { "getDefaultDateType", NULL, "I", 0x1, NULL, NULL },
    { "setDefaultDateTypeWithInt:", "setDefaultDateType", "V", 0x1, NULL, NULL },
    { "getOuterIdentity", NULL, "Lfreemarker.template.ObjectWrapper;", 0x1, NULL, NULL },
    { "setOuterIdentityWithFreemarkerTemplateObjectWrapper:", "setOuterIdentity", "V", 0x1, NULL, NULL },
    { "isStrict", NULL, "Z", 0x1, NULL, NULL },
    { "setStrictWithBoolean:", "setStrict", "V", 0x1, NULL, NULL },
    { "getUseModelCache", NULL, "Z", 0x1, NULL, NULL },
    { "setUseModelCacheWithBoolean:", "setUseModelCache", "V", 0x1, NULL, NULL },
    { "getIncompatibleImprovements", NULL, "Lfreemarker.template.Version;", 0x1, NULL, NULL },
    { "getExposureLevel", NULL, "I", 0x1, NULL, NULL },
    { "setExposureLevelWithInt:", "setExposureLevel", "V", 0x1, NULL, NULL },
    { "getExposeFields", NULL, "Z", 0x1, NULL, NULL },
    { "setExposeFieldsWithBoolean:", "setExposeFields", "V", 0x1, NULL, NULL },
    { "getMethodAppearanceFineTuner", NULL, "Lfreemarker.ext.beans.MethodAppearanceFineTuner;", 0x1, NULL, NULL },
    { "setMethodAppearanceFineTunerWithFreemarkerExtBeansMethodAppearanceFineTuner:", "setMethodAppearanceFineTuner", "V", 0x1, NULL, NULL },
    { "getMethodSorter", NULL, "Lfreemarker.ext.beans.MethodSorter;", 0x0, NULL, NULL },
    { "setMethodSorterWithFreemarkerExtBeansMethodSorter:", "setMethodSorter", "V", 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "incompatibleImprovements_", NULL, 0x12, "Lfreemarker.template.Version;", NULL, NULL,  },
    { "classIntrospectorFactory_", NULL, 0x4, "Lfreemarker.ext.beans.ClassIntrospectorBuilder;", NULL, NULL,  },
    { "simpleMapWrapper_", NULL, 0x2, "Z", NULL, NULL,  },
    { "defaultDateType_", NULL, 0x2, "I", NULL, NULL,  },
    { "outerIdentity_", NULL, 0x2, "Lfreemarker.template.ObjectWrapper;", NULL, NULL,  },
    { "strict_", NULL, 0x2, "Z", NULL, NULL,  },
    { "useModelCache_", NULL, 0x2, "Z", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerExtBeansBeansWrapperConfiguration = { 2, "BeansWrapperConfiguration", "freemarker.ext.beans", NULL, 0x401, 24, methods, 7, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerExtBeansBeansWrapperConfiguration;
}

@end


#line 73
void FreemarkerExtBeansBeansWrapperConfiguration_initWithFreemarkerTemplateVersion_withBoolean_(FreemarkerExtBeansBeansWrapperConfiguration *self, FreemarkerTemplateVersion *incompatibleImprovements, jboolean isIncompImprsAlreadyNormalized) {
  (void) NSObject_init(self);
  self->simpleMapWrapper_ =
#line 45
  NO;
  self->defaultDateType_ = FreemarkerTemplateTemplateDateModel_UNKNOWN;
  self->outerIdentity_ = nil;
  self->strict_ = NO;
  self->useModelCache_ = NO;
  
#line 74
  FreemarkerTemplate_TemplateAPI_checkVersionNotNullAndSupportedWithFreemarkerTemplateVersion_(incompatibleImprovements);
  
#line 76
  incompatibleImprovements = isIncompImprsAlreadyNormalized ?
#line 77
  incompatibleImprovements : FreemarkerExtBeansBeansWrapper_normalizeIncompatibleImprovementsVersionWithFreemarkerTemplateVersion_(
#line 78
  incompatibleImprovements);
  self->incompatibleImprovements_ = incompatibleImprovements;
  
#line 81
  self->classIntrospectorFactory_ = new_FreemarkerExtBeansClassIntrospectorBuilder_initWithFreemarkerTemplateVersion_(incompatibleImprovements);
}


#line 87
void FreemarkerExtBeansBeansWrapperConfiguration_initWithFreemarkerTemplateVersion_(FreemarkerExtBeansBeansWrapperConfiguration *self, FreemarkerTemplateVersion *incompatibleImprovements) {
  (void) FreemarkerExtBeansBeansWrapperConfiguration_initWithFreemarkerTemplateVersion_withBoolean_(self, incompatibleImprovements, NO);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerExtBeansBeansWrapperConfiguration)
