//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/FMParserTokenManager.java
//


#include "Configuration.h"
#include "FMParser.h"
#include "FMParserConstants.h"
#include "FMParserTokenManager.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "MessageUtil.h"
#include "SimpleCharStream.h"
#include "StringUtil.h"
#include "Template.h"
#include "Token.h"
#include "TokenMgrError.h"
#include "Version.h"
#include "_CoreAPI.h"
#include "_CoreStringUtils.h"
#include "_TemplateAPI.h"
#include "java/io/IOException.h"
#include "java/io/PrintStream.h"
#include "java/lang/Character.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/util/Set.h"
#include "java/util/StringTokenizer.h"

#line 0 "/Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/FMParserTokenManager.java"

@interface FreemarkerCoreFMParserTokenManager () {
 @public
  /**
   @brief Keeps track of how deeply nested we have the hash literals.
   This is necessary since we need to be able to distinguish the } used to close a hash literal and the one used to close a ${
   */
  FreemarkerCoreFMParser *parser_;
  jint hashLiteralNesting_;
  jint parenthesisNesting_;
  jint bracketNesting_;
  jboolean inFTLHeader_;
  IOSIntArray *jjrounds_;
  IOSIntArray *jjstateSet_;
  JavaLangStringBuilder *jjimage_;
  JavaLangStringBuilder *image_;
  jint jjimageLen_;
  jint lengthOfMatch_;
}

- (void)strictSyntaxCheckWithFreemarkerCoreToken:(FreemarkerCoreToken *)tok
                                         withInt:(jint)tokenNamingConvention
                                         withInt:(jint)newLexState;

- (FreemarkerCoreTokenMgrError *)newNameConventionMismatchExceptionWithFreemarkerCoreToken:(FreemarkerCoreToken *)tok OBJC_METHOD_FAMILY_NONE;

/**
 @brief Used for tags whose name isn't affected by naming convention.
 */
- (void)strictSyntaxCheckWithFreemarkerCoreToken:(FreemarkerCoreToken *)tok
                                         withInt:(jint)newLexState;

- (jboolean)isStrictTagWithNSString:(NSString *)image;

/**
 @brief Detects the naming convention used, both in start- and end-tag tokens.
 @param charIdxInName The index of the deciding character relatively to the first letter of the name.
 */
+ (jint)getTagNamingConventionWithFreemarkerCoreToken:(FreemarkerCoreToken *)tok
                                              withInt:(jint)charIdxInName;

- (void)unifiedCallWithFreemarkerCoreToken:(FreemarkerCoreToken *)tok;

- (void)unifiedCallEndWithFreemarkerCoreToken:(FreemarkerCoreToken *)tok;

- (void)closeBracketWithFreemarkerCoreToken:(FreemarkerCoreToken *)tok;

- (void)eatNewline;

- (void)ftlHeaderWithFreemarkerCoreToken:(FreemarkerCoreToken *)matchedToken;

- (jint)jjMoveStringLiteralDfa0_7;

- (jint)jjMoveNfa_7WithInt:(jint)startState
                   withInt:(jint)curPos;

- (jint)jjStopStringLiteralDfa_1WithInt:(jint)pos
                               withLong:(jlong)active0
                               withLong:(jlong)active1;

- (jint)jjStartNfa_1WithInt:(jint)pos
                   withLong:(jlong)active0
                   withLong:(jlong)active1;

- (jint)jjStopAtPosWithInt:(jint)pos
                   withInt:(jint)kind;

- (jint)jjMoveStringLiteralDfa0_1;

- (jint)jjMoveStringLiteralDfa1_1WithLong:(jlong)active1;

- (jint)jjMoveNfa_1WithInt:(jint)startState
                   withInt:(jint)curPos;

- (jint)jjStopStringLiteralDfa_0WithInt:(jint)pos
                               withLong:(jlong)active0
                               withLong:(jlong)active1;

- (jint)jjStartNfa_0WithInt:(jint)pos
                   withLong:(jlong)active0
                   withLong:(jlong)active1;

- (jint)jjMoveStringLiteralDfa0_0;

- (jint)jjMoveStringLiteralDfa1_0WithLong:(jlong)active1;

- (jint)jjMoveNfa_0WithInt:(jint)startState
                   withInt:(jint)curPos;

- (jint)jjStopStringLiteralDfa_2WithInt:(jint)pos
                               withLong:(jlong)active0
                               withLong:(jlong)active1
                               withLong:(jlong)active2;

- (jint)jjStartNfa_2WithInt:(jint)pos
                   withLong:(jlong)active0
                   withLong:(jlong)active1
                   withLong:(jlong)active2;

- (jint)jjMoveStringLiteralDfa0_2;

- (jint)jjMoveStringLiteralDfa1_2WithLong:(jlong)active1
                                 withLong:(jlong)active2;

- (jint)jjMoveStringLiteralDfa2_2WithLong:(jlong)old1
                                 withLong:(jlong)active1
                                 withLong:(jlong)old2
                                 withLong:(jlong)active2;

- (jint)jjMoveStringLiteralDfa3_2WithLong:(jlong)old1
                                 withLong:(jlong)active1
                                 withLong:(jlong)old2
                                 withLong:(jlong)active2;

- (jint)jjMoveStringLiteralDfa4_2WithLong:(jlong)old1
                                 withLong:(jlong)active1
                                 withLong:(jlong)old2
                                 withLong:(jlong)active2;

- (jint)jjStartNfaWithStates_2WithInt:(jint)pos
                              withInt:(jint)kind
                              withInt:(jint)state;

- (jint)jjMoveNfa_2WithInt:(jint)startState
                   withInt:(jint)curPos;

- (jint)jjStopStringLiteralDfa_3WithInt:(jint)pos
                               withLong:(jlong)active0
                               withLong:(jlong)active1
                               withLong:(jlong)active2;

- (jint)jjStartNfa_3WithInt:(jint)pos
                   withLong:(jlong)active0
                   withLong:(jlong)active1
                   withLong:(jlong)active2;

- (jint)jjMoveStringLiteralDfa0_3;

- (jint)jjMoveStringLiteralDfa1_3WithLong:(jlong)active1
                                 withLong:(jlong)active2;

- (jint)jjMoveStringLiteralDfa2_3WithLong:(jlong)old1
                                 withLong:(jlong)active1
                                 withLong:(jlong)old2
                                 withLong:(jlong)active2;

- (jint)jjMoveStringLiteralDfa3_3WithLong:(jlong)old1
                                 withLong:(jlong)active1
                                 withLong:(jlong)old2
                                 withLong:(jlong)active2;

- (jint)jjMoveStringLiteralDfa4_3WithLong:(jlong)old1
                                 withLong:(jlong)active1
                                 withLong:(jlong)old2
                                 withLong:(jlong)active2;

- (jint)jjStartNfaWithStates_3WithInt:(jint)pos
                              withInt:(jint)kind
                              withInt:(jint)state;

- (jint)jjMoveNfa_3WithInt:(jint)startState
                   withInt:(jint)curPos;

- (jint)jjStopStringLiteralDfa_5WithInt:(jint)pos
                               withLong:(jlong)active0
                               withLong:(jlong)active1;

- (jint)jjStartNfa_5WithInt:(jint)pos
                   withLong:(jlong)active0
                   withLong:(jlong)active1;

- (jint)jjMoveStringLiteralDfa0_5;

- (jint)jjStartNfaWithStates_5WithInt:(jint)pos
                              withInt:(jint)kind
                              withInt:(jint)state;

- (jint)jjMoveNfa_5WithInt:(jint)startState
                   withInt:(jint)curPos;

- (jint)jjStopStringLiteralDfa_6WithInt:(jint)pos
                               withLong:(jlong)active0
                               withLong:(jlong)active1
                               withLong:(jlong)active2;

- (jint)jjStartNfa_6WithInt:(jint)pos
                   withLong:(jlong)active0
                   withLong:(jlong)active1
                   withLong:(jlong)active2;

- (jint)jjMoveStringLiteralDfa0_6;

- (jint)jjMoveStringLiteralDfa1_6WithLong:(jlong)active1
                                 withLong:(jlong)active2;

- (jint)jjMoveStringLiteralDfa2_6WithLong:(jlong)old1
                                 withLong:(jlong)active1
                                 withLong:(jlong)old2
                                 withLong:(jlong)active2;

- (jint)jjMoveStringLiteralDfa3_6WithLong:(jlong)old1
                                 withLong:(jlong)active1
                                 withLong:(jlong)old2
                                 withLong:(jlong)active2;

- (jint)jjMoveStringLiteralDfa4_6WithLong:(jlong)old1
                                 withLong:(jlong)active1
                                 withLong:(jlong)old2
                                 withLong:(jlong)active2;

- (jint)jjStartNfaWithStates_6WithInt:(jint)pos
                              withInt:(jint)kind
                              withInt:(jint)state;

- (jint)jjMoveNfa_6WithInt:(jint)startState
                   withInt:(jint)curPos;

- (jint)jjStopStringLiteralDfa_4WithInt:(jint)pos
                               withLong:(jlong)active0
                               withLong:(jlong)active1
                               withLong:(jlong)active2;

- (jint)jjStartNfa_4WithInt:(jint)pos
                   withLong:(jlong)active0
                   withLong:(jlong)active1
                   withLong:(jlong)active2;

- (jint)jjMoveStringLiteralDfa0_4;

- (jint)jjMoveStringLiteralDfa1_4WithLong:(jlong)active1
                                 withLong:(jlong)active2;

- (jint)jjMoveStringLiteralDfa2_4WithLong:(jlong)old1
                                 withLong:(jlong)active1
                                 withLong:(jlong)old2
                                 withLong:(jlong)active2;

- (jint)jjMoveStringLiteralDfa3_4WithLong:(jlong)old1
                                 withLong:(jlong)active1
                                 withLong:(jlong)old2
                                 withLong:(jlong)active2;

- (jint)jjMoveStringLiteralDfa4_4WithLong:(jlong)old1
                                 withLong:(jlong)active1
                                 withLong:(jlong)old2
                                 withLong:(jlong)active2;

- (jint)jjStartNfaWithStates_4WithInt:(jint)pos
                              withInt:(jint)kind
                              withInt:(jint)state;

- (jint)jjMoveNfa_4WithInt:(jint)startState
                   withInt:(jint)curPos;

+ (jboolean)jjCanMove_0WithInt:(jint)hiByte
                       withInt:(jint)i1
                       withInt:(jint)i2
                      withLong:(jlong)l1
                      withLong:(jlong)l2;

+ (jboolean)jjCanMove_1WithInt:(jint)hiByte
                       withInt:(jint)i1
                       withInt:(jint)i2
                      withLong:(jlong)l1
                      withLong:(jlong)l2;

- (void)jjCheckNAddWithInt:(jint)state;

- (void)jjAddStatesWithInt:(jint)start
                   withInt:(jint)end;

- (void)jjCheckNAddTwoStatesWithInt:(jint)state1
                            withInt:(jint)state2;

- (void)jjCheckNAddStatesWithInt:(jint)start
                         withInt:(jint)end;

- (void)ReInitRounds;

@end

J2OBJC_FIELD_SETTER(FreemarkerCoreFMParserTokenManager, parser_, FreemarkerCoreFMParser *)
J2OBJC_FIELD_SETTER(FreemarkerCoreFMParserTokenManager, jjrounds_, IOSIntArray *)
J2OBJC_FIELD_SETTER(FreemarkerCoreFMParserTokenManager, jjstateSet_, IOSIntArray *)
J2OBJC_FIELD_SETTER(FreemarkerCoreFMParserTokenManager, jjimage_, JavaLangStringBuilder *)
J2OBJC_FIELD_SETTER(FreemarkerCoreFMParserTokenManager, image_, JavaLangStringBuilder *)

static NSString *FreemarkerCoreFMParserTokenManager_PLANNED_DIRECTIVE_HINT_ = @"(If you have seen this directive in use elsewhere, this was a planned directive, so maybe you need to upgrade FreeMarker.)";
J2OBJC_STATIC_FIELD_GETTER(FreemarkerCoreFMParserTokenManager, PLANNED_DIRECTIVE_HINT_, NSString *)

__attribute__((unused)) static void FreemarkerCoreFMParserTokenManager_strictSyntaxCheckWithFreemarkerCoreToken_withInt_withInt_(FreemarkerCoreFMParserTokenManager *self, FreemarkerCoreToken *tok, jint tokenNamingConvention, jint newLexState);

__attribute__((unused)) static FreemarkerCoreTokenMgrError *FreemarkerCoreFMParserTokenManager_newNameConventionMismatchExceptionWithFreemarkerCoreToken_(FreemarkerCoreFMParserTokenManager *self, FreemarkerCoreToken *tok);

__attribute__((unused)) static void FreemarkerCoreFMParserTokenManager_strictSyntaxCheckWithFreemarkerCoreToken_withInt_(FreemarkerCoreFMParserTokenManager *self, FreemarkerCoreToken *tok, jint newLexState);

__attribute__((unused)) static jboolean FreemarkerCoreFMParserTokenManager_isStrictTagWithNSString_(FreemarkerCoreFMParserTokenManager *self, NSString *image);

__attribute__((unused)) static jint FreemarkerCoreFMParserTokenManager_getTagNamingConventionWithFreemarkerCoreToken_withInt_(FreemarkerCoreToken *tok, jint charIdxInName);

__attribute__((unused)) static void FreemarkerCoreFMParserTokenManager_unifiedCallWithFreemarkerCoreToken_(FreemarkerCoreFMParserTokenManager *self, FreemarkerCoreToken *tok);

__attribute__((unused)) static void FreemarkerCoreFMParserTokenManager_unifiedCallEndWithFreemarkerCoreToken_(FreemarkerCoreFMParserTokenManager *self, FreemarkerCoreToken *tok);

__attribute__((unused)) static void FreemarkerCoreFMParserTokenManager_closeBracketWithFreemarkerCoreToken_(FreemarkerCoreFMParserTokenManager *self, FreemarkerCoreToken *tok);

__attribute__((unused)) static void FreemarkerCoreFMParserTokenManager_eatNewline(FreemarkerCoreFMParserTokenManager *self);

__attribute__((unused)) static void FreemarkerCoreFMParserTokenManager_ftlHeaderWithFreemarkerCoreToken_(FreemarkerCoreFMParserTokenManager *self, FreemarkerCoreToken *matchedToken);

__attribute__((unused)) static jint FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa0_7(FreemarkerCoreFMParserTokenManager *self);

__attribute__((unused)) static jint FreemarkerCoreFMParserTokenManager_jjMoveNfa_7WithInt_withInt_(FreemarkerCoreFMParserTokenManager *self, jint startState, jint curPos);

__attribute__((unused)) static jint FreemarkerCoreFMParserTokenManager_jjStopStringLiteralDfa_1WithInt_withLong_withLong_(FreemarkerCoreFMParserTokenManager *self, jint pos, jlong active0, jlong active1);

__attribute__((unused)) static jint FreemarkerCoreFMParserTokenManager_jjStartNfa_1WithInt_withLong_withLong_(FreemarkerCoreFMParserTokenManager *self, jint pos, jlong active0, jlong active1);

__attribute__((unused)) static jint FreemarkerCoreFMParserTokenManager_jjStopAtPosWithInt_withInt_(FreemarkerCoreFMParserTokenManager *self, jint pos, jint kind);

__attribute__((unused)) static jint FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa0_1(FreemarkerCoreFMParserTokenManager *self);

__attribute__((unused)) static jint FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa1_1WithLong_(FreemarkerCoreFMParserTokenManager *self, jlong active1);

__attribute__((unused)) static jint FreemarkerCoreFMParserTokenManager_jjMoveNfa_1WithInt_withInt_(FreemarkerCoreFMParserTokenManager *self, jint startState, jint curPos);

__attribute__((unused)) static jint FreemarkerCoreFMParserTokenManager_jjStopStringLiteralDfa_0WithInt_withLong_withLong_(FreemarkerCoreFMParserTokenManager *self, jint pos, jlong active0, jlong active1);

__attribute__((unused)) static jint FreemarkerCoreFMParserTokenManager_jjStartNfa_0WithInt_withLong_withLong_(FreemarkerCoreFMParserTokenManager *self, jint pos, jlong active0, jlong active1);

__attribute__((unused)) static jint FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa0_0(FreemarkerCoreFMParserTokenManager *self);

__attribute__((unused)) static jint FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa1_0WithLong_(FreemarkerCoreFMParserTokenManager *self, jlong active1);

__attribute__((unused)) static jint FreemarkerCoreFMParserTokenManager_jjMoveNfa_0WithInt_withInt_(FreemarkerCoreFMParserTokenManager *self, jint startState, jint curPos);

__attribute__((unused)) static jint FreemarkerCoreFMParserTokenManager_jjStopStringLiteralDfa_2WithInt_withLong_withLong_withLong_(FreemarkerCoreFMParserTokenManager *self, jint pos, jlong active0, jlong active1, jlong active2);

__attribute__((unused)) static jint FreemarkerCoreFMParserTokenManager_jjStartNfa_2WithInt_withLong_withLong_withLong_(FreemarkerCoreFMParserTokenManager *self, jint pos, jlong active0, jlong active1, jlong active2);

__attribute__((unused)) static jint FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa0_2(FreemarkerCoreFMParserTokenManager *self);

__attribute__((unused)) static jint FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa1_2WithLong_withLong_(FreemarkerCoreFMParserTokenManager *self, jlong active1, jlong active2);

__attribute__((unused)) static jint FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa2_2WithLong_withLong_withLong_withLong_(FreemarkerCoreFMParserTokenManager *self, jlong old1, jlong active1, jlong old2, jlong active2);

__attribute__((unused)) static jint FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa3_2WithLong_withLong_withLong_withLong_(FreemarkerCoreFMParserTokenManager *self, jlong old1, jlong active1, jlong old2, jlong active2);

__attribute__((unused)) static jint FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa4_2WithLong_withLong_withLong_withLong_(FreemarkerCoreFMParserTokenManager *self, jlong old1, jlong active1, jlong old2, jlong active2);

__attribute__((unused)) static jint FreemarkerCoreFMParserTokenManager_jjStartNfaWithStates_2WithInt_withInt_withInt_(FreemarkerCoreFMParserTokenManager *self, jint pos, jint kind, jint state);

__attribute__((unused)) static jint FreemarkerCoreFMParserTokenManager_jjMoveNfa_2WithInt_withInt_(FreemarkerCoreFMParserTokenManager *self, jint startState, jint curPos);

__attribute__((unused)) static jint FreemarkerCoreFMParserTokenManager_jjStopStringLiteralDfa_3WithInt_withLong_withLong_withLong_(FreemarkerCoreFMParserTokenManager *self, jint pos, jlong active0, jlong active1, jlong active2);

__attribute__((unused)) static jint FreemarkerCoreFMParserTokenManager_jjStartNfa_3WithInt_withLong_withLong_withLong_(FreemarkerCoreFMParserTokenManager *self, jint pos, jlong active0, jlong active1, jlong active2);

__attribute__((unused)) static jint FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa0_3(FreemarkerCoreFMParserTokenManager *self);

__attribute__((unused)) static jint FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa1_3WithLong_withLong_(FreemarkerCoreFMParserTokenManager *self, jlong active1, jlong active2);

__attribute__((unused)) static jint FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa2_3WithLong_withLong_withLong_withLong_(FreemarkerCoreFMParserTokenManager *self, jlong old1, jlong active1, jlong old2, jlong active2);

__attribute__((unused)) static jint FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa3_3WithLong_withLong_withLong_withLong_(FreemarkerCoreFMParserTokenManager *self, jlong old1, jlong active1, jlong old2, jlong active2);

__attribute__((unused)) static jint FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa4_3WithLong_withLong_withLong_withLong_(FreemarkerCoreFMParserTokenManager *self, jlong old1, jlong active1, jlong old2, jlong active2);

__attribute__((unused)) static jint FreemarkerCoreFMParserTokenManager_jjStartNfaWithStates_3WithInt_withInt_withInt_(FreemarkerCoreFMParserTokenManager *self, jint pos, jint kind, jint state);

__attribute__((unused)) static jint FreemarkerCoreFMParserTokenManager_jjMoveNfa_3WithInt_withInt_(FreemarkerCoreFMParserTokenManager *self, jint startState, jint curPos);

__attribute__((unused)) static jint FreemarkerCoreFMParserTokenManager_jjStopStringLiteralDfa_5WithInt_withLong_withLong_(FreemarkerCoreFMParserTokenManager *self, jint pos, jlong active0, jlong active1);

__attribute__((unused)) static jint FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa0_5(FreemarkerCoreFMParserTokenManager *self);

__attribute__((unused)) static jint FreemarkerCoreFMParserTokenManager_jjStartNfaWithStates_5WithInt_withInt_withInt_(FreemarkerCoreFMParserTokenManager *self, jint pos, jint kind, jint state);

__attribute__((unused)) static jint FreemarkerCoreFMParserTokenManager_jjMoveNfa_5WithInt_withInt_(FreemarkerCoreFMParserTokenManager *self, jint startState, jint curPos);

__attribute__((unused)) static jint FreemarkerCoreFMParserTokenManager_jjStopStringLiteralDfa_6WithInt_withLong_withLong_withLong_(FreemarkerCoreFMParserTokenManager *self, jint pos, jlong active0, jlong active1, jlong active2);

__attribute__((unused)) static jint FreemarkerCoreFMParserTokenManager_jjStartNfa_6WithInt_withLong_withLong_withLong_(FreemarkerCoreFMParserTokenManager *self, jint pos, jlong active0, jlong active1, jlong active2);

__attribute__((unused)) static jint FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa0_6(FreemarkerCoreFMParserTokenManager *self);

__attribute__((unused)) static jint FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa1_6WithLong_withLong_(FreemarkerCoreFMParserTokenManager *self, jlong active1, jlong active2);

__attribute__((unused)) static jint FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa2_6WithLong_withLong_withLong_withLong_(FreemarkerCoreFMParserTokenManager *self, jlong old1, jlong active1, jlong old2, jlong active2);

__attribute__((unused)) static jint FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa3_6WithLong_withLong_withLong_withLong_(FreemarkerCoreFMParserTokenManager *self, jlong old1, jlong active1, jlong old2, jlong active2);

__attribute__((unused)) static jint FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa4_6WithLong_withLong_withLong_withLong_(FreemarkerCoreFMParserTokenManager *self, jlong old1, jlong active1, jlong old2, jlong active2);

__attribute__((unused)) static jint FreemarkerCoreFMParserTokenManager_jjStartNfaWithStates_6WithInt_withInt_withInt_(FreemarkerCoreFMParserTokenManager *self, jint pos, jint kind, jint state);

__attribute__((unused)) static jint FreemarkerCoreFMParserTokenManager_jjMoveNfa_6WithInt_withInt_(FreemarkerCoreFMParserTokenManager *self, jint startState, jint curPos);

__attribute__((unused)) static jint FreemarkerCoreFMParserTokenManager_jjStopStringLiteralDfa_4WithInt_withLong_withLong_withLong_(FreemarkerCoreFMParserTokenManager *self, jint pos, jlong active0, jlong active1, jlong active2);

__attribute__((unused)) static jint FreemarkerCoreFMParserTokenManager_jjStartNfa_4WithInt_withLong_withLong_withLong_(FreemarkerCoreFMParserTokenManager *self, jint pos, jlong active0, jlong active1, jlong active2);

__attribute__((unused)) static jint FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa0_4(FreemarkerCoreFMParserTokenManager *self);

__attribute__((unused)) static jint FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa1_4WithLong_withLong_(FreemarkerCoreFMParserTokenManager *self, jlong active1, jlong active2);

__attribute__((unused)) static jint FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa2_4WithLong_withLong_withLong_withLong_(FreemarkerCoreFMParserTokenManager *self, jlong old1, jlong active1, jlong old2, jlong active2);

__attribute__((unused)) static jint FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa3_4WithLong_withLong_withLong_withLong_(FreemarkerCoreFMParserTokenManager *self, jlong old1, jlong active1, jlong old2, jlong active2);

__attribute__((unused)) static jint FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa4_4WithLong_withLong_withLong_withLong_(FreemarkerCoreFMParserTokenManager *self, jlong old1, jlong active1, jlong old2, jlong active2);

__attribute__((unused)) static jint FreemarkerCoreFMParserTokenManager_jjStartNfaWithStates_4WithInt_withInt_withInt_(FreemarkerCoreFMParserTokenManager *self, jint pos, jint kind, jint state);

__attribute__((unused)) static jint FreemarkerCoreFMParserTokenManager_jjMoveNfa_4WithInt_withInt_(FreemarkerCoreFMParserTokenManager *self, jint startState, jint curPos);

__attribute__((unused)) static jboolean FreemarkerCoreFMParserTokenManager_jjCanMove_0WithInt_withInt_withInt_withLong_withLong_(jint hiByte, jint i1, jint i2, jlong l1, jlong l2);

__attribute__((unused)) static jboolean FreemarkerCoreFMParserTokenManager_jjCanMove_1WithInt_withInt_withInt_withLong_withLong_(jint hiByte, jint i1, jint i2, jlong l1, jlong l2);

__attribute__((unused)) static void FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(FreemarkerCoreFMParserTokenManager *self, jint state);

__attribute__((unused)) static void FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(FreemarkerCoreFMParserTokenManager *self, jint start, jint end);

__attribute__((unused)) static void FreemarkerCoreFMParserTokenManager_jjCheckNAddTwoStatesWithInt_withInt_(FreemarkerCoreFMParserTokenManager *self, jint state1, jint state2);

__attribute__((unused)) static void FreemarkerCoreFMParserTokenManager_jjCheckNAddStatesWithInt_withInt_(FreemarkerCoreFMParserTokenManager *self, jint start, jint end);

__attribute__((unused)) static void FreemarkerCoreFMParserTokenManager_ReInitRounds(FreemarkerCoreFMParserTokenManager *self);

J2OBJC_INITIALIZED_DEFN(FreemarkerCoreFMParserTokenManager)

IOSLongArray *FreemarkerCoreFMParserTokenManager_jjbitVec0_;
IOSLongArray *FreemarkerCoreFMParserTokenManager_jjbitVec2_;
IOSLongArray *FreemarkerCoreFMParserTokenManager_jjbitVec3_;
IOSLongArray *FreemarkerCoreFMParserTokenManager_jjbitVec4_;
IOSLongArray *FreemarkerCoreFMParserTokenManager_jjbitVec5_;
IOSLongArray *FreemarkerCoreFMParserTokenManager_jjbitVec6_;
IOSLongArray *FreemarkerCoreFMParserTokenManager_jjbitVec7_;
IOSLongArray *FreemarkerCoreFMParserTokenManager_jjbitVec8_;
IOSLongArray *FreemarkerCoreFMParserTokenManager_jjbitVec9_;
IOSLongArray *FreemarkerCoreFMParserTokenManager_jjbitVec10_;
IOSLongArray *FreemarkerCoreFMParserTokenManager_jjbitVec11_;
IOSLongArray *FreemarkerCoreFMParserTokenManager_jjbitVec12_;
IOSLongArray *FreemarkerCoreFMParserTokenManager_jjbitVec13_;
IOSLongArray *FreemarkerCoreFMParserTokenManager_jjbitVec14_;
IOSLongArray *FreemarkerCoreFMParserTokenManager_jjbitVec15_;
IOSLongArray *FreemarkerCoreFMParserTokenManager_jjbitVec16_;
IOSLongArray *FreemarkerCoreFMParserTokenManager_jjbitVec17_;
IOSLongArray *FreemarkerCoreFMParserTokenManager_jjbitVec18_;
IOSLongArray *FreemarkerCoreFMParserTokenManager_jjbitVec19_;
IOSLongArray *FreemarkerCoreFMParserTokenManager_jjbitVec20_;
IOSLongArray *FreemarkerCoreFMParserTokenManager_jjbitVec21_;
IOSLongArray *FreemarkerCoreFMParserTokenManager_jjbitVec22_;
IOSLongArray *FreemarkerCoreFMParserTokenManager_jjbitVec23_;
IOSLongArray *FreemarkerCoreFMParserTokenManager_jjbitVec24_;
IOSLongArray *FreemarkerCoreFMParserTokenManager_jjbitVec25_;
IOSIntArray *FreemarkerCoreFMParserTokenManager_jjnextStates_;
IOSObjectArray *FreemarkerCoreFMParserTokenManager_jjstrLiteralImages_;
IOSObjectArray *FreemarkerCoreFMParserTokenManager_lexStateNames_;
IOSIntArray *FreemarkerCoreFMParserTokenManager_jjnewLexState_;
IOSLongArray *FreemarkerCoreFMParserTokenManager_jjtoToken_;
IOSLongArray *FreemarkerCoreFMParserTokenManager_jjtoSkip_;


#line 11
@implementation FreemarkerCoreFMParserTokenManager


#line 44
- (void)setParserWithFreemarkerCoreFMParser:(FreemarkerCoreFMParser *)parser {
  self->parser_ = parser;
}

- (FreemarkerTemplateTemplate *)getTemplate {
  return parser_ != nil ? [parser_ getTemplate] : nil;
}


#line 56
- (void)strictSyntaxCheckWithFreemarkerCoreToken:(FreemarkerCoreToken *)tok
                                         withInt:(jint)tokenNamingConvention
                                         withInt:(jint)newLexState {
  FreemarkerCoreFMParserTokenManager_strictSyntaxCheckWithFreemarkerCoreToken_withInt_withInt_(self, tok, tokenNamingConvention, newLexState);
}


#line 106
- (void)checkNamingConventionWithFreemarkerCoreToken:(FreemarkerCoreToken *)tok {
  [self checkNamingConventionWithFreemarkerCoreToken:tok withInt:FreemarkerCore_CoreStringUtils_getIdentifierNamingConventionWithNSString_(((FreemarkerCoreToken *) nil_chk(tok))->image_)];
}

- (void)checkNamingConventionWithFreemarkerCoreToken:(FreemarkerCoreToken *)tok
                                             withInt:(jint)tokenNamingConvention {
  if (tokenNamingConvention != FreemarkerTemplateConfiguration_AUTO_DETECT_NAMING_CONVENTION) {
    if (namingConvention_ == FreemarkerTemplateConfiguration_AUTO_DETECT_NAMING_CONVENTION) {
      namingConvention_ = tokenNamingConvention;
      namingConventionEstabilisher_ = tok;
    }
    else
#line 115
    if (namingConvention_ != tokenNamingConvention) {
      @throw FreemarkerCoreFMParserTokenManager_newNameConventionMismatchExceptionWithFreemarkerCoreToken_(self, tok);
    }
  }
}


#line 121
- (FreemarkerCoreTokenMgrError *)newNameConventionMismatchExceptionWithFreemarkerCoreToken:(FreemarkerCoreToken *)tok {
  return FreemarkerCoreFMParserTokenManager_newNameConventionMismatchExceptionWithFreemarkerCoreToken_(self, tok);
}


#line 150
- (void)strictSyntaxCheckWithFreemarkerCoreToken:(FreemarkerCoreToken *)tok
                                         withInt:(jint)newLexState {
  FreemarkerCoreFMParserTokenManager_strictSyntaxCheckWithFreemarkerCoreToken_withInt_(self, tok, newLexState);
}


#line 154
- (jboolean)isStrictTagWithNSString:(NSString *)image {
  return FreemarkerCoreFMParserTokenManager_isStrictTagWithNSString_(self, image);
}


#line 164
+ (jint)getTagNamingConventionWithFreemarkerCoreToken:(FreemarkerCoreToken *)tok
                                              withInt:(jint)charIdxInName {
  return FreemarkerCoreFMParserTokenManager_getTagNamingConventionWithFreemarkerCoreToken_withInt_(tok, charIdxInName);
}

+ (jchar)getTagNameCharAtWithFreemarkerCoreToken:(FreemarkerCoreToken *)tok
                                         withInt:(jint)charIdxInName {
  return FreemarkerCoreFMParserTokenManager_getTagNameCharAtWithFreemarkerCoreToken_withInt_(tok, charIdxInName);
}


#line 185
- (void)unifiedCallWithFreemarkerCoreToken:(FreemarkerCoreToken *)tok {
  FreemarkerCoreFMParserTokenManager_unifiedCallWithFreemarkerCoreToken_(self, tok);
}


#line 202
- (void)unifiedCallEndWithFreemarkerCoreToken:(FreemarkerCoreToken *)tok {
  FreemarkerCoreFMParserTokenManager_unifiedCallEndWithFreemarkerCoreToken_(self, tok);
}


#line 214
- (void)closeBracketWithFreemarkerCoreToken:(FreemarkerCoreToken *)tok {
  FreemarkerCoreFMParserTokenManager_closeBracketWithFreemarkerCoreToken_(self, tok);
}


#line 227
- (void)eatNewline {
  FreemarkerCoreFMParserTokenManager_eatNewline(self);
}


#line 252
- (void)ftlHeaderWithFreemarkerCoreToken:(FreemarkerCoreToken *)matchedToken {
  FreemarkerCoreFMParserTokenManager_ftlHeaderWithFreemarkerCoreToken_(self, matchedToken);
}


#line 277
- (void)setDebugStreamWithJavaIoPrintStream:(JavaIoPrintStream *)ds {
  
#line 277
  debugStream_ = ds;
}


#line 278
- (jint)jjMoveStringLiteralDfa0_7 {
  return FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa0_7(self);
}


#line 288
- (jint)jjMoveNfa_7WithInt:(jint)startState
                   withInt:(jint)curPos {
  return FreemarkerCoreFMParserTokenManager_jjMoveNfa_7WithInt_withInt_(self, startState, curPos);
}


#line 455
- (jint)jjStopStringLiteralDfa_1WithInt:(jint)pos
                               withLong:(jlong)active0
                               withLong:(jlong)active1 {
  return FreemarkerCoreFMParserTokenManager_jjStopStringLiteralDfa_1WithInt_withLong_withLong_(self, pos, active0, active1);
}


#line 469
- (jint)jjStartNfa_1WithInt:(jint)pos
                   withLong:(jlong)active0
                   withLong:(jlong)active1 {
  return FreemarkerCoreFMParserTokenManager_jjStartNfa_1WithInt_withLong_withLong_(self, pos, active0, active1);
}


#line 472
- (jint)jjStopAtPosWithInt:(jint)pos
                   withInt:(jint)kind {
  return FreemarkerCoreFMParserTokenManager_jjStopAtPosWithInt_withInt_(self, pos, kind);
}


#line 478
- (jint)jjMoveStringLiteralDfa0_1 {
  return FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa0_1(self);
}


#line 489
- (jint)jjMoveStringLiteralDfa1_1WithLong:(jlong)active1 {
  return FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa1_1WithLong_(self, active1);
}


#line 508
- (jint)jjMoveNfa_1WithInt:(jint)startState
                   withInt:(jint)curPos {
  return FreemarkerCoreFMParserTokenManager_jjMoveNfa_1WithInt_withInt_(self, startState, curPos);
}


#line 627
- (jint)jjStopStringLiteralDfa_0WithInt:(jint)pos
                               withLong:(jlong)active0
                               withLong:(jlong)active1 {
  return FreemarkerCoreFMParserTokenManager_jjStopStringLiteralDfa_0WithInt_withLong_withLong_(self, pos, active0, active1);
}


#line 641
- (jint)jjStartNfa_0WithInt:(jint)pos
                   withLong:(jlong)active0
                   withLong:(jlong)active1 {
  return FreemarkerCoreFMParserTokenManager_jjStartNfa_0WithInt_withLong_withLong_(self, pos, active0, active1);
}


#line 644
- (jint)jjMoveStringLiteralDfa0_0 {
  return FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa0_0(self);
}


#line 655
- (jint)jjMoveStringLiteralDfa1_0WithLong:(jlong)active1 {
  return FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa1_0WithLong_(self, active1);
}


#line 743
- (jint)jjMoveNfa_0WithInt:(jint)startState
                   withInt:(jint)curPos {
  return FreemarkerCoreFMParserTokenManager_jjMoveNfa_0WithInt_withInt_(self, startState, curPos);
}


#line 3416
- (jint)jjStopStringLiteralDfa_2WithInt:(jint)pos
                               withLong:(jlong)active0
                               withLong:(jlong)active1
                               withLong:(jlong)active2 {
  return FreemarkerCoreFMParserTokenManager_jjStopStringLiteralDfa_2WithInt_withLong_withLong_withLong_(self, pos, active0, active1, active2);
}


#line 3469
- (jint)jjStartNfa_2WithInt:(jint)pos
                   withLong:(jlong)active0
                   withLong:(jlong)active1
                   withLong:(jlong)active2 {
  return FreemarkerCoreFMParserTokenManager_jjStartNfa_2WithInt_withLong_withLong_withLong_(self, pos, active0, active1, active2);
}


#line 3472
- (jint)jjMoveStringLiteralDfa0_2 {
  return FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa0_2(self);
}


#line 3536
- (jint)jjMoveStringLiteralDfa1_2WithLong:(jlong)active1
                                 withLong:(jlong)active2 {
  return FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa1_2WithLong_withLong_(self, active1, active2);
}


#line 3600
- (jint)jjMoveStringLiteralDfa2_2WithLong:(jlong)old1
                                 withLong:(jlong)active1
                                 withLong:(jlong)old2
                                 withLong:(jlong)active2 {
  return FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa2_2WithLong_withLong_withLong_withLong_(self, old1, active1, old2, active2);
}


#line 3629
- (jint)jjMoveStringLiteralDfa3_2WithLong:(jlong)old1
                                 withLong:(jlong)active1
                                 withLong:(jlong)old2
                                 withLong:(jlong)active2 {
  return FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa3_2WithLong_withLong_withLong_withLong_(self, old1, active1, old2, active2);
}


#line 3652
- (jint)jjMoveStringLiteralDfa4_2WithLong:(jlong)old1
                                 withLong:(jlong)active1
                                 withLong:(jlong)old2
                                 withLong:(jlong)active2 {
  return FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa4_2WithLong_withLong_withLong_withLong_(self, old1, active1, old2, active2);
}


#line 3675
- (jint)jjStartNfaWithStates_2WithInt:(jint)pos
                              withInt:(jint)kind
                              withInt:(jint)state {
  return FreemarkerCoreFMParserTokenManager_jjStartNfaWithStates_2WithInt_withInt_withInt_(self, pos, kind, state);
}


#line 3683
- (jint)jjMoveNfa_2WithInt:(jint)startState
                   withInt:(jint)curPos {
  return FreemarkerCoreFMParserTokenManager_jjMoveNfa_2WithInt_withInt_(self, startState, curPos);
}


#line 4256
- (jint)jjStopStringLiteralDfa_3WithInt:(jint)pos
                               withLong:(jlong)active0
                               withLong:(jlong)active1
                               withLong:(jlong)active2 {
  return FreemarkerCoreFMParserTokenManager_jjStopStringLiteralDfa_3WithInt_withLong_withLong_withLong_(self, pos, active0, active1, active2);
}


#line 4307
- (jint)jjStartNfa_3WithInt:(jint)pos
                   withLong:(jlong)active0
                   withLong:(jlong)active1
                   withLong:(jlong)active2 {
  return FreemarkerCoreFMParserTokenManager_jjStartNfa_3WithInt_withLong_withLong_withLong_(self, pos, active0, active1, active2);
}


#line 4310
- (jint)jjMoveStringLiteralDfa0_3 {
  return FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa0_3(self);
}


#line 4375
- (jint)jjMoveStringLiteralDfa1_3WithLong:(jlong)active1
                                 withLong:(jlong)active2 {
  return FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa1_3WithLong_withLong_(self, active1, active2);
}


#line 4441
- (jint)jjMoveStringLiteralDfa2_3WithLong:(jlong)old1
                                 withLong:(jlong)active1
                                 withLong:(jlong)old2
                                 withLong:(jlong)active2 {
  return FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa2_3WithLong_withLong_withLong_withLong_(self, old1, active1, old2, active2);
}


#line 4470
- (jint)jjMoveStringLiteralDfa3_3WithLong:(jlong)old1
                                 withLong:(jlong)active1
                                 withLong:(jlong)old2
                                 withLong:(jlong)active2 {
  return FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa3_3WithLong_withLong_withLong_withLong_(self, old1, active1, old2, active2);
}


#line 4493
- (jint)jjMoveStringLiteralDfa4_3WithLong:(jlong)old1
                                 withLong:(jlong)active1
                                 withLong:(jlong)old2
                                 withLong:(jlong)active2 {
  return FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa4_3WithLong_withLong_withLong_withLong_(self, old1, active1, old2, active2);
}


#line 4516
- (jint)jjStartNfaWithStates_3WithInt:(jint)pos
                              withInt:(jint)kind
                              withInt:(jint)state {
  return FreemarkerCoreFMParserTokenManager_jjStartNfaWithStates_3WithInt_withInt_withInt_(self, pos, kind, state);
}


#line 4524
- (jint)jjMoveNfa_3WithInt:(jint)startState
                   withInt:(jint)curPos {
  return FreemarkerCoreFMParserTokenManager_jjMoveNfa_3WithInt_withInt_(self, startState, curPos);
}


#line 5083
- (jint)jjStopStringLiteralDfa_5WithInt:(jint)pos
                               withLong:(jlong)active0
                               withLong:(jlong)active1 {
  return FreemarkerCoreFMParserTokenManager_jjStopStringLiteralDfa_5WithInt_withLong_withLong_(self, pos, active0, active1);
}


#line 5090
- (jint)jjStartNfa_5WithInt:(jint)pos
                   withLong:(jlong)active0
                   withLong:(jlong)active1 {
  return FreemarkerCoreFMParserTokenManager_jjMoveNfa_5WithInt_withInt_(self, FreemarkerCoreFMParserTokenManager_jjStopStringLiteralDfa_5WithInt_withLong_withLong_(self, pos, active0, active1), pos + 1);
}


#line 5093
- (jint)jjMoveStringLiteralDfa0_5 {
  return FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa0_5(self);
}


#line 5102
- (jint)jjStartNfaWithStates_5WithInt:(jint)pos
                              withInt:(jint)kind
                              withInt:(jint)state {
  return FreemarkerCoreFMParserTokenManager_jjStartNfaWithStates_5WithInt_withInt_withInt_(self, pos, kind, state);
}


#line 5110
- (jint)jjMoveNfa_5WithInt:(jint)startState
                   withInt:(jint)curPos {
  return FreemarkerCoreFMParserTokenManager_jjMoveNfa_5WithInt_withInt_(self, startState, curPos);
}


#line 5220
- (jint)jjStopStringLiteralDfa_6WithInt:(jint)pos
                               withLong:(jlong)active0
                               withLong:(jlong)active1
                               withLong:(jlong)active2 {
  return FreemarkerCoreFMParserTokenManager_jjStopStringLiteralDfa_6WithInt_withLong_withLong_withLong_(self, pos, active0, active1, active2);
}


#line 5271
- (jint)jjStartNfa_6WithInt:(jint)pos
                   withLong:(jlong)active0
                   withLong:(jlong)active1
                   withLong:(jlong)active2 {
  return FreemarkerCoreFMParserTokenManager_jjStartNfa_6WithInt_withLong_withLong_withLong_(self, pos, active0, active1, active2);
}


#line 5274
- (jint)jjMoveStringLiteralDfa0_6 {
  return FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa0_6(self);
}


#line 5338
- (jint)jjMoveStringLiteralDfa1_6WithLong:(jlong)active1
                                 withLong:(jlong)active2 {
  return FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa1_6WithLong_withLong_(self, active1, active2);
}


#line 5402
- (jint)jjMoveStringLiteralDfa2_6WithLong:(jlong)old1
                                 withLong:(jlong)active1
                                 withLong:(jlong)old2
                                 withLong:(jlong)active2 {
  return FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa2_6WithLong_withLong_withLong_withLong_(self, old1, active1, old2, active2);
}


#line 5431
- (jint)jjMoveStringLiteralDfa3_6WithLong:(jlong)old1
                                 withLong:(jlong)active1
                                 withLong:(jlong)old2
                                 withLong:(jlong)active2 {
  return FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa3_6WithLong_withLong_withLong_withLong_(self, old1, active1, old2, active2);
}


#line 5454
- (jint)jjMoveStringLiteralDfa4_6WithLong:(jlong)old1
                                 withLong:(jlong)active1
                                 withLong:(jlong)old2
                                 withLong:(jlong)active2 {
  return FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa4_6WithLong_withLong_withLong_withLong_(self, old1, active1, old2, active2);
}


#line 5477
- (jint)jjStartNfaWithStates_6WithInt:(jint)pos
                              withInt:(jint)kind
                              withInt:(jint)state {
  return FreemarkerCoreFMParserTokenManager_jjStartNfaWithStates_6WithInt_withInt_withInt_(self, pos, kind, state);
}


#line 5485
- (jint)jjMoveNfa_6WithInt:(jint)startState
                   withInt:(jint)curPos {
  return FreemarkerCoreFMParserTokenManager_jjMoveNfa_6WithInt_withInt_(self, startState, curPos);
}


#line 6038
- (jint)jjStopStringLiteralDfa_4WithInt:(jint)pos
                               withLong:(jlong)active0
                               withLong:(jlong)active1
                               withLong:(jlong)active2 {
  return FreemarkerCoreFMParserTokenManager_jjStopStringLiteralDfa_4WithInt_withLong_withLong_withLong_(self, pos, active0, active1, active2);
}


#line 6093
- (jint)jjStartNfa_4WithInt:(jint)pos
                   withLong:(jlong)active0
                   withLong:(jlong)active1
                   withLong:(jlong)active2 {
  return FreemarkerCoreFMParserTokenManager_jjStartNfa_4WithInt_withLong_withLong_withLong_(self, pos, active0, active1, active2);
}


#line 6096
- (jint)jjMoveStringLiteralDfa0_4 {
  return FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa0_4(self);
}


#line 6160
- (jint)jjMoveStringLiteralDfa1_4WithLong:(jlong)active1
                                 withLong:(jlong)active2 {
  return FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa1_4WithLong_withLong_(self, active1, active2);
}


#line 6224
- (jint)jjMoveStringLiteralDfa2_4WithLong:(jlong)old1
                                 withLong:(jlong)active1
                                 withLong:(jlong)old2
                                 withLong:(jlong)active2 {
  return FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa2_4WithLong_withLong_withLong_withLong_(self, old1, active1, old2, active2);
}


#line 6253
- (jint)jjMoveStringLiteralDfa3_4WithLong:(jlong)old1
                                 withLong:(jlong)active1
                                 withLong:(jlong)old2
                                 withLong:(jlong)active2 {
  return FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa3_4WithLong_withLong_withLong_withLong_(self, old1, active1, old2, active2);
}


#line 6276
- (jint)jjMoveStringLiteralDfa4_4WithLong:(jlong)old1
                                 withLong:(jlong)active1
                                 withLong:(jlong)old2
                                 withLong:(jlong)active2 {
  return FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa4_4WithLong_withLong_withLong_withLong_(self, old1, active1, old2, active2);
}


#line 6299
- (jint)jjStartNfaWithStates_4WithInt:(jint)pos
                              withInt:(jint)kind
                              withInt:(jint)state {
  return FreemarkerCoreFMParserTokenManager_jjStartNfaWithStates_4WithInt_withInt_withInt_(self, pos, kind, state);
}


#line 6307
- (jint)jjMoveNfa_4WithInt:(jint)startState
                   withInt:(jint)curPos {
  return FreemarkerCoreFMParserTokenManager_jjMoveNfa_4WithInt_withInt_(self, startState, curPos);
}


#line 6920
+ (jboolean)jjCanMove_0WithInt:(jint)hiByte
                       withInt:(jint)i1
                       withInt:(jint)i2
                      withLong:(jlong)l1
                      withLong:(jlong)l2 {
  return FreemarkerCoreFMParserTokenManager_jjCanMove_0WithInt_withInt_withInt_withLong_withLong_(hiByte, i1, i2, l1, l2);
}


#line 6932
+ (jboolean)jjCanMove_1WithInt:(jint)hiByte
                       withInt:(jint)i1
                       withInt:(jint)i2
                      withLong:(jlong)l1
                      withLong:(jlong)l2 {
  return FreemarkerCoreFMParserTokenManager_jjCanMove_1WithInt_withInt_withInt_withLong_withLong_(hiByte, i1, i2, l1, l2);
}


#line 7002
- (FreemarkerCoreToken *)jjFillToken {
  
#line 7004
  FreemarkerCoreToken *t;
  NSString *curTokenImage;
  jint beginLine;
  jint endLine;
  jint beginColumn;
  jint endColumn;
  NSString *im = IOSObjectArray_Get(nil_chk(FreemarkerCoreFMParserTokenManager_jjstrLiteralImages_), jjmatchedKind_);
  curTokenImage = (im == nil) ? [((FreemarkerCoreSimpleCharStream *) nil_chk(input_stream_)) GetImage] : im;
  beginLine = [((FreemarkerCoreSimpleCharStream *) nil_chk(input_stream_)) getBeginLine];
  beginColumn = [input_stream_ getBeginColumn];
  endLine = [input_stream_ getEndLine];
  endColumn = [input_stream_ getEndColumn];
  t = FreemarkerCoreToken_newTokenWithInt_withNSString_(jjmatchedKind_, curTokenImage);
  
#line 7018
  ((FreemarkerCoreToken *) nil_chk(t))->beginLine_ = beginLine;
  t->endLine_ = endLine;
  t->beginColumn_ = beginColumn;
  t->endColumn_ = endColumn;
  
#line 7023
  return t;
}


#line 7034
- (FreemarkerCoreToken *)getNextToken {
  
#line 7036
  FreemarkerCoreToken *matchedToken;
  jint curPos = 0;
  
#line 7040
  for (; ; ) {
    {
      @try {
        
#line 7044
        curChar_ = [((FreemarkerCoreSimpleCharStream *) nil_chk(input_stream_)) BeginToken];
      }
      @catch (JavaIoIOException *e) {
        
#line 7048
        jjmatchedKind_ = 0;
        jjmatchedPos_ = -1;
        matchedToken = [self jjFillToken];
        return matchedToken;
      }
      image_ = jjimage_;
      [((JavaLangStringBuilder *) nil_chk(image_)) setLengthWithInt:0];
      jjimageLen_ = 0;
      
#line 7057
      switch (curLexState_) {
        
#line 7059
        case 0:
        jjmatchedKind_ = (jint) 0x7fffffff;
        jjmatchedPos_ = 0;
        curPos = FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa0_0(self);
        break;
        case 1:
        jjmatchedKind_ = (jint) 0x7fffffff;
        jjmatchedPos_ = 0;
        curPos = FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa0_1(self);
        break;
        case 2:
        jjmatchedKind_ = (jint) 0x7fffffff;
        jjmatchedPos_ = 0;
        curPos = FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa0_2(self);
        break;
        case 3:
        jjmatchedKind_ = (jint) 0x7fffffff;
        jjmatchedPos_ = 0;
        curPos = FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa0_3(self);
        break;
        case 4:
        jjmatchedKind_ = (jint) 0x7fffffff;
        jjmatchedPos_ = 0;
        curPos = FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa0_4(self);
        break;
        case 5:
        @try {
          
#line 7085
          [((FreemarkerCoreSimpleCharStream *) nil_chk(input_stream_)) backupWithInt:0];
          while ((curChar_ < 64 && ((jlong) 0x4000000000000000LL & (LShift64(1LL, curChar_))) != 0LL) || (
#line 7087
          (RShift32(curChar_, 6)) == 1 && ((jlong) 0x20000000LL & (LShift64(1LL, (curChar_ & 077)))) != 0LL))
#line 7088
          curChar_ = [input_stream_ BeginToken];
        }
        @catch (JavaIoIOException *e1) {
          
#line 7090
          goto continue_EOFLoop;
        }
        
#line 7091
        jjmatchedKind_ = (jint) 0x7fffffff;
        jjmatchedPos_ = 0;
        curPos = FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa0_5(self);
        break;
        case 6:
        jjmatchedKind_ = (jint) 0x7fffffff;
        jjmatchedPos_ = 0;
        curPos = FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa0_6(self);
        break;
        case 7:
        jjmatchedKind_ = (jint) 0x7fffffff;
        jjmatchedPos_ = 0;
        curPos = FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa0_7(self);
        break;
      }
      if (jjmatchedKind_ != (jint) 0x7fffffff) {
        
#line 7108
        if (jjmatchedPos_ + 1 < curPos)
#line 7109
        [((FreemarkerCoreSimpleCharStream *) nil_chk(input_stream_)) backupWithInt:curPos - jjmatchedPos_ - 1];
        if ((IOSLongArray_Get(nil_chk(FreemarkerCoreFMParserTokenManager_jjtoToken_), RShift32(jjmatchedKind_, 6)) & (LShift64(1LL, (jjmatchedKind_ & 077)))) != 0LL) {
          
#line 7112
          matchedToken = [self jjFillToken];
          [self TokenLexicalActionsWithFreemarkerCoreToken:matchedToken];
          if (IOSIntArray_Get(nil_chk(FreemarkerCoreFMParserTokenManager_jjnewLexState_), jjmatchedKind_) != -1)
#line 7115
          curLexState_ = IOSIntArray_Get(FreemarkerCoreFMParserTokenManager_jjnewLexState_, jjmatchedKind_);
          return matchedToken;
        }
        else {
          
#line 7120
          [self SkipLexicalActionsWithFreemarkerCoreToken:nil];
          if (IOSIntArray_Get(nil_chk(FreemarkerCoreFMParserTokenManager_jjnewLexState_), jjmatchedKind_) != -1)
#line 7122
          curLexState_ = IOSIntArray_Get(FreemarkerCoreFMParserTokenManager_jjnewLexState_, jjmatchedKind_);
          goto continue_EOFLoop;
        }
      }
      jint error_line = [((FreemarkerCoreSimpleCharStream *) nil_chk(input_stream_)) getEndLine];
      jint error_column = [input_stream_ getEndColumn];
      NSString *error_after = nil;
      jboolean EOFSeen = NO;
      @try {
        
#line 7130
        [input_stream_ readChar];
        
#line 7130
        [input_stream_ backupWithInt:1];
      }
      @catch (
#line 7131
      JavaIoIOException *e1) {
        EOFSeen = YES;
        error_after = curPos <= 1 ? @"" : [input_stream_ GetImage];
        if (curChar_ == 0x000a || curChar_ == 0x000d) {
          error_line++;
          error_column = 0;
        }
        else
#line 7139
        error_column++;
      }
      if (!EOFSeen) {
        [input_stream_ backupWithInt:1];
        error_after = curPos <= 1 ? @"" : [input_stream_ GetImage];
      }
      @throw new_FreemarkerCoreTokenMgrError_initWithBoolean_withInt_withInt_withInt_withNSString_withChar_withInt_(EOFSeen, curLexState_, error_line, error_column, error_after, curChar_, FreemarkerCoreTokenMgrError_LEXICAL_ERROR);
    }
    continue_EOFLoop: ;
  }
}


#line 7149
- (void)SkipLexicalActionsWithFreemarkerCoreToken:(FreemarkerCoreToken *)matchedToken {
  
#line 7151
  switch (jjmatchedKind_) {
    
#line 7153
    case 83:
    (void) [((JavaLangStringBuilder *) nil_chk(image_)) appendWithCharArray:[((FreemarkerCoreSimpleCharStream *) nil_chk(input_stream_)) GetSuffixWithInt:jjimageLen_ + (lengthOfMatch_ = jjmatchedPos_ + 1)]];
    if (parenthesisNesting_ > 0) [self SwitchToWithInt:FreemarkerCoreFMParserConstants_IN_PAREN];
    else if (inInvocation_) [self SwitchToWithInt:FreemarkerCoreFMParserConstants_NAMED_PARAMETER_EXPRESSION];
    else [self SwitchToWithInt:FreemarkerCoreFMParserConstants_FM_EXPRESSION];
    break;
    default:
    break;
  }
}


#line 7163
- (void)TokenLexicalActionsWithFreemarkerCoreToken:(FreemarkerCoreToken *)matchedToken {
  {
    
#line 7269
    jint tagNamingConvention;
    
#line 7532
    NSString *s;
    
#line 7589
    JavaUtilStringTokenizer *st;
    
#line 7165
    switch (jjmatchedKind_) {
      
#line 7167
      case 6:
      (void) [((JavaLangStringBuilder *) nil_chk(image_)) appendWithCharArray:[((FreemarkerCoreSimpleCharStream *) nil_chk(input_stream_)) GetSuffixWithInt:jjimageLen_ + (lengthOfMatch_ = jjmatchedPos_ + 1)]];
      FreemarkerCoreFMParserTokenManager_strictSyntaxCheckWithFreemarkerCoreToken_withInt_(self, matchedToken, FreemarkerCoreFMParserConstants_DEFAULT);
      break;
      case 7:
      (void) [((JavaLangStringBuilder *) nil_chk(image_)) appendWithCharArray:[((FreemarkerCoreSimpleCharStream *) nil_chk(input_stream_)) GetSuffixWithInt:jjimageLen_ + (lengthOfMatch_ = jjmatchedPos_ + 1)]];
      FreemarkerCoreFMParserTokenManager_strictSyntaxCheckWithFreemarkerCoreToken_withInt_(self, matchedToken, FreemarkerCoreFMParserConstants_DEFAULT);
      break;
      case 8:
      (void) [((JavaLangStringBuilder *) nil_chk(image_)) appendWithCharArray:[((FreemarkerCoreSimpleCharStream *) nil_chk(input_stream_)) GetSuffixWithInt:jjimageLen_ + (lengthOfMatch_ = jjmatchedPos_ + 1)]];
      FreemarkerCoreFMParserTokenManager_strictSyntaxCheckWithFreemarkerCoreToken_withInt_(self, matchedToken, FreemarkerCoreFMParserConstants_FM_EXPRESSION);
      break;
      case 9:
      (void) [((JavaLangStringBuilder *) nil_chk(image_)) appendWithCharArray:[((FreemarkerCoreSimpleCharStream *) nil_chk(input_stream_)) GetSuffixWithInt:jjimageLen_ + (lengthOfMatch_ = jjmatchedPos_ + 1)]];
      FreemarkerCoreFMParserTokenManager_strictSyntaxCheckWithFreemarkerCoreToken_withInt_withInt_(self, matchedToken, FreemarkerCoreFMParserTokenManager_getTagNamingConventionWithFreemarkerCoreToken_withInt_(matchedToken, 4), FreemarkerCoreFMParserConstants_FM_EXPRESSION);
      break;
      case 10:
      (void) [((JavaLangStringBuilder *) nil_chk(image_)) appendWithCharArray:[((FreemarkerCoreSimpleCharStream *) nil_chk(input_stream_)) GetSuffixWithInt:jjimageLen_ + (lengthOfMatch_ = jjmatchedPos_ + 1)]];
      FreemarkerCoreFMParserTokenManager_strictSyntaxCheckWithFreemarkerCoreToken_withInt_(self, matchedToken, FreemarkerCoreFMParserConstants_FM_EXPRESSION);
      break;
      case 11:
      (void) [((JavaLangStringBuilder *) nil_chk(image_)) appendWithCharArray:[((FreemarkerCoreSimpleCharStream *) nil_chk(input_stream_)) GetSuffixWithInt:jjimageLen_ + (lengthOfMatch_ = jjmatchedPos_ + 1)]];
      FreemarkerCoreFMParserTokenManager_strictSyntaxCheckWithFreemarkerCoreToken_withInt_(self, matchedToken, FreemarkerCoreFMParserConstants_FM_EXPRESSION);
      break;
      case 13:
      (void) [((JavaLangStringBuilder *) nil_chk(image_)) appendWithCharArray:[((FreemarkerCoreSimpleCharStream *) nil_chk(input_stream_)) GetSuffixWithInt:jjimageLen_ + (lengthOfMatch_ = jjmatchedPos_ + 1)]];
      FreemarkerCoreFMParserTokenManager_strictSyntaxCheckWithFreemarkerCoreToken_withInt_withInt_(self, matchedToken, FreemarkerCoreFMParserTokenManager_getTagNamingConventionWithFreemarkerCoreToken_withInt_(matchedToken, 3), FreemarkerCoreFMParserConstants_FM_EXPRESSION);
      break;
      case 14:
      (void) [((JavaLangStringBuilder *) nil_chk(image_)) appendWithCharArray:[((FreemarkerCoreSimpleCharStream *) nil_chk(input_stream_)) GetSuffixWithInt:jjimageLen_ + (lengthOfMatch_ = jjmatchedPos_ + 1)]];
      FreemarkerCoreFMParserTokenManager_strictSyntaxCheckWithFreemarkerCoreToken_withInt_(self, matchedToken, FreemarkerCoreFMParserConstants_FM_EXPRESSION);
      break;
      case 15:
      (void) [((JavaLangStringBuilder *) nil_chk(image_)) appendWithCharArray:[((FreemarkerCoreSimpleCharStream *) nil_chk(input_stream_)) GetSuffixWithInt:jjimageLen_ + (lengthOfMatch_ = jjmatchedPos_ + 1)]];
      FreemarkerCoreFMParserTokenManager_strictSyntaxCheckWithFreemarkerCoreToken_withInt_(self, matchedToken, FreemarkerCoreFMParserConstants_FM_EXPRESSION);
      break;
      case 16:
      (void) [((JavaLangStringBuilder *) nil_chk(image_)) appendWithCharArray:[((FreemarkerCoreSimpleCharStream *) nil_chk(input_stream_)) GetSuffixWithInt:jjimageLen_ + (lengthOfMatch_ = jjmatchedPos_ + 1)]];
      FreemarkerCoreFMParserTokenManager_strictSyntaxCheckWithFreemarkerCoreToken_withInt_(self, matchedToken, FreemarkerCoreFMParserConstants_FM_EXPRESSION);
      break;
      case 17:
      (void) [((JavaLangStringBuilder *) nil_chk(image_)) appendWithCharArray:[((FreemarkerCoreSimpleCharStream *) nil_chk(input_stream_)) GetSuffixWithInt:jjimageLen_ + (lengthOfMatch_ = jjmatchedPos_ + 1)]];
      FreemarkerCoreFMParserTokenManager_strictSyntaxCheckWithFreemarkerCoreToken_withInt_(self, matchedToken, FreemarkerCoreFMParserConstants_FM_EXPRESSION);
      break;
      case 18:
      (void) [((JavaLangStringBuilder *) nil_chk(image_)) appendWithCharArray:[((FreemarkerCoreSimpleCharStream *) nil_chk(input_stream_)) GetSuffixWithInt:jjimageLen_ + (lengthOfMatch_ = jjmatchedPos_ + 1)]];
      FreemarkerCoreFMParserTokenManager_strictSyntaxCheckWithFreemarkerCoreToken_withInt_(self, matchedToken, FreemarkerCoreFMParserConstants_FM_EXPRESSION);
      break;
      case 19:
      (void) [((JavaLangStringBuilder *) nil_chk(image_)) appendWithCharArray:[((FreemarkerCoreSimpleCharStream *) nil_chk(input_stream_)) GetSuffixWithInt:jjimageLen_ + (lengthOfMatch_ = jjmatchedPos_ + 1)]];
      FreemarkerCoreFMParserTokenManager_strictSyntaxCheckWithFreemarkerCoreToken_withInt_(self, matchedToken, FreemarkerCoreFMParserConstants_FM_EXPRESSION);
      break;
      case 20:
      (void) [((JavaLangStringBuilder *) nil_chk(image_)) appendWithCharArray:[((FreemarkerCoreSimpleCharStream *) nil_chk(input_stream_)) GetSuffixWithInt:jjimageLen_ + (lengthOfMatch_ = jjmatchedPos_ + 1)]];
      FreemarkerCoreFMParserTokenManager_strictSyntaxCheckWithFreemarkerCoreToken_withInt_(self, matchedToken, FreemarkerCoreFMParserConstants_FM_EXPRESSION);
      break;
      case 21:
      (void) [((JavaLangStringBuilder *) nil_chk(image_)) appendWithCharArray:[((FreemarkerCoreSimpleCharStream *) nil_chk(input_stream_)) GetSuffixWithInt:jjimageLen_ + (lengthOfMatch_ = jjmatchedPos_ + 1)]];
      FreemarkerCoreFMParserTokenManager_strictSyntaxCheckWithFreemarkerCoreToken_withInt_(self, matchedToken, FreemarkerCoreFMParserConstants_FM_EXPRESSION);
      break;
      case 22:
      (void) [((JavaLangStringBuilder *) nil_chk(image_)) appendWithCharArray:[((FreemarkerCoreSimpleCharStream *) nil_chk(input_stream_)) GetSuffixWithInt:jjimageLen_ + (lengthOfMatch_ = jjmatchedPos_ + 1)]];
      FreemarkerCoreFMParserTokenManager_strictSyntaxCheckWithFreemarkerCoreToken_withInt_(self, matchedToken, FreemarkerCoreFMParserConstants_FM_EXPRESSION);
      break;
      case 23:
      (void) [((JavaLangStringBuilder *) nil_chk(image_)) appendWithCharArray:[((FreemarkerCoreSimpleCharStream *) nil_chk(input_stream_)) GetSuffixWithInt:jjimageLen_ + (lengthOfMatch_ = jjmatchedPos_ + 1)]];
      FreemarkerCoreFMParserTokenManager_strictSyntaxCheckWithFreemarkerCoreToken_withInt_(self, matchedToken, FreemarkerCoreFMParserConstants_FM_EXPRESSION);
      break;
      case 24:
      (void) [((JavaLangStringBuilder *) nil_chk(image_)) appendWithCharArray:[((FreemarkerCoreSimpleCharStream *) nil_chk(input_stream_)) GetSuffixWithInt:jjimageLen_ + (lengthOfMatch_ = jjmatchedPos_ + 1)]];
      FreemarkerCoreFMParserTokenManager_strictSyntaxCheckWithFreemarkerCoreToken_withInt_(self, matchedToken, FreemarkerCoreFMParserConstants_FM_EXPRESSION);
      break;
      case 25:
      (void) [((JavaLangStringBuilder *) nil_chk(image_)) appendWithCharArray:[((FreemarkerCoreSimpleCharStream *) nil_chk(input_stream_)) GetSuffixWithInt:jjimageLen_ + (lengthOfMatch_ = jjmatchedPos_ + 1)]];
      FreemarkerCoreFMParserTokenManager_strictSyntaxCheckWithFreemarkerCoreToken_withInt_(self, matchedToken, FreemarkerCoreFMParserConstants_FM_EXPRESSION);
      break;
      case 26:
      (void) [((JavaLangStringBuilder *) nil_chk(image_)) appendWithCharArray:[((FreemarkerCoreSimpleCharStream *) nil_chk(input_stream_)) GetSuffixWithInt:jjimageLen_ + (lengthOfMatch_ = jjmatchedPos_ + 1)]];
      FreemarkerCoreFMParserTokenManager_strictSyntaxCheckWithFreemarkerCoreToken_withInt_(self, matchedToken, FreemarkerCoreFMParserConstants_FM_EXPRESSION);
      break;
      case 27:
      (void) [((JavaLangStringBuilder *) nil_chk(image_)) appendWithCharArray:[((FreemarkerCoreSimpleCharStream *) nil_chk(input_stream_)) GetSuffixWithInt:jjimageLen_ + (lengthOfMatch_ = jjmatchedPos_ + 1)]];
      FreemarkerCoreFMParserTokenManager_strictSyntaxCheckWithFreemarkerCoreToken_withInt_(self, matchedToken, FreemarkerCoreFMParserConstants_FM_EXPRESSION);
      break;
      case 28:
      (void) [((JavaLangStringBuilder *) nil_chk(image_)) appendWithCharArray:[((FreemarkerCoreSimpleCharStream *) nil_chk(input_stream_)) GetSuffixWithInt:jjimageLen_ + (lengthOfMatch_ = jjmatchedPos_ + 1)]];
      FreemarkerCoreFMParserTokenManager_strictSyntaxCheckWithFreemarkerCoreToken_withInt_(self, matchedToken, FreemarkerCoreFMParserConstants_FM_EXPRESSION);
      break;
      case 29:
      (void) [((JavaLangStringBuilder *) nil_chk(image_)) appendWithCharArray:[((FreemarkerCoreSimpleCharStream *) nil_chk(input_stream_)) GetSuffixWithInt:jjimageLen_ + (lengthOfMatch_ = jjmatchedPos_ + 1)]];
      FreemarkerCoreFMParserTokenManager_strictSyntaxCheckWithFreemarkerCoreToken_withInt_(self, matchedToken, FreemarkerCoreFMParserConstants_DEFAULT);
      break;
      case 30:
      (void) [((JavaLangStringBuilder *) nil_chk(image_)) appendWithCharArray:[((FreemarkerCoreSimpleCharStream *) nil_chk(input_stream_)) GetSuffixWithInt:jjimageLen_ + (lengthOfMatch_ = jjmatchedPos_ + 1)]];
      FreemarkerCoreFMParserTokenManager_strictSyntaxCheckWithFreemarkerCoreToken_withInt_(self, matchedToken, FreemarkerCoreFMParserConstants_NO_PARSE);
      
#line 7261
      noparseTag_ = @"comment";
      break;
      case 31:
      (void) [((JavaLangStringBuilder *) nil_chk(image_)) appendWithCharArray:[((FreemarkerCoreSimpleCharStream *) nil_chk(input_stream_)) GetSuffixWithInt:jjimageLen_ + (lengthOfMatch_ = jjmatchedPos_ + 1)]];
      noparseTag_ = @"-->";
      
#line 7265
      FreemarkerCoreFMParserTokenManager_strictSyntaxCheckWithFreemarkerCoreToken_withInt_(self, matchedToken, FreemarkerCoreFMParserConstants_NO_PARSE);
      break;
      case 32:
      (void) [((JavaLangStringBuilder *) nil_chk(image_)) appendWithCharArray:[((FreemarkerCoreSimpleCharStream *) nil_chk(input_stream_)) GetSuffixWithInt:jjimageLen_ + (lengthOfMatch_ = jjmatchedPos_ + 1)]];
      tagNamingConvention = FreemarkerCoreFMParserTokenManager_getTagNamingConventionWithFreemarkerCoreToken_withInt_(matchedToken, 2);
      FreemarkerCoreFMParserTokenManager_strictSyntaxCheckWithFreemarkerCoreToken_withInt_withInt_(self, matchedToken, tagNamingConvention, FreemarkerCoreFMParserConstants_NO_PARSE);
      noparseTag_ = tagNamingConvention == FreemarkerTemplateConfiguration_CAMEL_CASE_NAMING_CONVENTION ? @"noParse" : @"noparse";
      break;
      case 33:
      (void) [((JavaLangStringBuilder *) nil_chk(image_)) appendWithCharArray:[((FreemarkerCoreSimpleCharStream *) nil_chk(input_stream_)) GetSuffixWithInt:jjimageLen_ + (lengthOfMatch_ = jjmatchedPos_ + 1)]];
      FreemarkerCoreFMParserTokenManager_strictSyntaxCheckWithFreemarkerCoreToken_withInt_(self, matchedToken, FreemarkerCoreFMParserConstants_DEFAULT);
      break;
      case 34:
      (void) [((JavaLangStringBuilder *) nil_chk(image_)) appendWithCharArray:[((FreemarkerCoreSimpleCharStream *) nil_chk(input_stream_)) GetSuffixWithInt:jjimageLen_ + (lengthOfMatch_ = jjmatchedPos_ + 1)]];
      FreemarkerCoreFMParserTokenManager_strictSyntaxCheckWithFreemarkerCoreToken_withInt_(self, matchedToken, FreemarkerCoreFMParserConstants_DEFAULT);
      break;
      case 35:
      (void) [((JavaLangStringBuilder *) nil_chk(image_)) appendWithCharArray:[((FreemarkerCoreSimpleCharStream *) nil_chk(input_stream_)) GetSuffixWithInt:jjimageLen_ + (lengthOfMatch_ = jjmatchedPos_ + 1)]];
      FreemarkerCoreFMParserTokenManager_strictSyntaxCheckWithFreemarkerCoreToken_withInt_(self, matchedToken, FreemarkerCoreFMParserConstants_DEFAULT);
      break;
      case 36:
      (void) [((JavaLangStringBuilder *) nil_chk(image_)) appendWithCharArray:[((FreemarkerCoreSimpleCharStream *) nil_chk(input_stream_)) GetSuffixWithInt:jjimageLen_ + (lengthOfMatch_ = jjmatchedPos_ + 1)]];
      FreemarkerCoreFMParserTokenManager_strictSyntaxCheckWithFreemarkerCoreToken_withInt_(self, matchedToken, FreemarkerCoreFMParserConstants_DEFAULT);
      break;
      case 37:
      (void) [((JavaLangStringBuilder *) nil_chk(image_)) appendWithCharArray:[((FreemarkerCoreSimpleCharStream *) nil_chk(input_stream_)) GetSuffixWithInt:jjimageLen_ + (lengthOfMatch_ = jjmatchedPos_ + 1)]];
      FreemarkerCoreFMParserTokenManager_strictSyntaxCheckWithFreemarkerCoreToken_withInt_(self, matchedToken, FreemarkerCoreFMParserConstants_DEFAULT);
      break;
      case 38:
      (void) [((JavaLangStringBuilder *) nil_chk(image_)) appendWithCharArray:[((FreemarkerCoreSimpleCharStream *) nil_chk(input_stream_)) GetSuffixWithInt:jjimageLen_ + (lengthOfMatch_ = jjmatchedPos_ + 1)]];
      FreemarkerCoreFMParserTokenManager_strictSyntaxCheckWithFreemarkerCoreToken_withInt_(self, matchedToken, FreemarkerCoreFMParserConstants_DEFAULT);
      break;
      case 39:
      (void) [((JavaLangStringBuilder *) nil_chk(image_)) appendWithCharArray:[((FreemarkerCoreSimpleCharStream *) nil_chk(input_stream_)) GetSuffixWithInt:jjimageLen_ + (lengthOfMatch_ = jjmatchedPos_ + 1)]];
      FreemarkerCoreFMParserTokenManager_strictSyntaxCheckWithFreemarkerCoreToken_withInt_withInt_(self, matchedToken, FreemarkerCoreFMParserTokenManager_getTagNamingConventionWithFreemarkerCoreToken_withInt_(matchedToken, 3), FreemarkerCoreFMParserConstants_DEFAULT);
      break;
      case 40:
      (void) [((JavaLangStringBuilder *) nil_chk(image_)) appendWithCharArray:[((FreemarkerCoreSimpleCharStream *) nil_chk(input_stream_)) GetSuffixWithInt:jjimageLen_ + (lengthOfMatch_ = jjmatchedPos_ + 1)]];
      FreemarkerCoreFMParserTokenManager_strictSyntaxCheckWithFreemarkerCoreToken_withInt_(self, matchedToken, FreemarkerCoreFMParserConstants_DEFAULT);
      break;
      case 41:
      (void) [((JavaLangStringBuilder *) nil_chk(image_)) appendWithCharArray:[((FreemarkerCoreSimpleCharStream *) nil_chk(input_stream_)) GetSuffixWithInt:jjimageLen_ + (lengthOfMatch_ = jjmatchedPos_ + 1)]];
      FreemarkerCoreFMParserTokenManager_strictSyntaxCheckWithFreemarkerCoreToken_withInt_(self, matchedToken, FreemarkerCoreFMParserConstants_DEFAULT);
      break;
      case 42:
      (void) [((JavaLangStringBuilder *) nil_chk(image_)) appendWithCharArray:[((FreemarkerCoreSimpleCharStream *) nil_chk(input_stream_)) GetSuffixWithInt:jjimageLen_ + (lengthOfMatch_ = jjmatchedPos_ + 1)]];
      FreemarkerCoreFMParserTokenManager_strictSyntaxCheckWithFreemarkerCoreToken_withInt_(self, matchedToken, FreemarkerCoreFMParserConstants_DEFAULT);
      break;
      case 43:
      (void) [((JavaLangStringBuilder *) nil_chk(image_)) appendWithCharArray:[((FreemarkerCoreSimpleCharStream *) nil_chk(input_stream_)) GetSuffixWithInt:jjimageLen_ + (lengthOfMatch_ = jjmatchedPos_ + 1)]];
      FreemarkerCoreFMParserTokenManager_strictSyntaxCheckWithFreemarkerCoreToken_withInt_(self, matchedToken, FreemarkerCoreFMParserConstants_DEFAULT);
      break;
      case 44:
      (void) [((JavaLangStringBuilder *) nil_chk(image_)) appendWithCharArray:[((FreemarkerCoreSimpleCharStream *) nil_chk(input_stream_)) GetSuffixWithInt:jjimageLen_ + (lengthOfMatch_ = jjmatchedPos_ + 1)]];
      FreemarkerCoreFMParserTokenManager_strictSyntaxCheckWithFreemarkerCoreToken_withInt_(self, matchedToken, FreemarkerCoreFMParserConstants_DEFAULT);
      break;
      case 45:
      (void) [((JavaLangStringBuilder *) nil_chk(image_)) appendWithCharArray:[((FreemarkerCoreSimpleCharStream *) nil_chk(input_stream_)) GetSuffixWithInt:jjimageLen_ + (lengthOfMatch_ = jjmatchedPos_ + 1)]];
      FreemarkerCoreFMParserTokenManager_strictSyntaxCheckWithFreemarkerCoreToken_withInt_(self, matchedToken, FreemarkerCoreFMParserConstants_DEFAULT);
      break;
      case 46:
      (void) [((JavaLangStringBuilder *) nil_chk(image_)) appendWithCharArray:[((FreemarkerCoreSimpleCharStream *) nil_chk(input_stream_)) GetSuffixWithInt:jjimageLen_ + (lengthOfMatch_ = jjmatchedPos_ + 1)]];
      FreemarkerCoreFMParserTokenManager_strictSyntaxCheckWithFreemarkerCoreToken_withInt_(self, matchedToken, FreemarkerCoreFMParserConstants_DEFAULT);
      break;
      case 47:
      (void) [((JavaLangStringBuilder *) nil_chk(image_)) appendWithCharArray:[((FreemarkerCoreSimpleCharStream *) nil_chk(input_stream_)) GetSuffixWithInt:jjimageLen_ + (lengthOfMatch_ = jjmatchedPos_ + 1)]];
      FreemarkerCoreFMParserTokenManager_strictSyntaxCheckWithFreemarkerCoreToken_withInt_(self, matchedToken, FreemarkerCoreFMParserConstants_DEFAULT);
      break;
      case 48:
      (void) [((JavaLangStringBuilder *) nil_chk(image_)) appendWithCharArray:[((FreemarkerCoreSimpleCharStream *) nil_chk(input_stream_)) GetSuffixWithInt:jjimageLen_ + (lengthOfMatch_ = jjmatchedPos_ + 1)]];
      FreemarkerCoreFMParserTokenManager_strictSyntaxCheckWithFreemarkerCoreToken_withInt_(self, matchedToken, FreemarkerCoreFMParserConstants_DEFAULT);
      break;
      case 49:
      (void) [((JavaLangStringBuilder *) nil_chk(image_)) appendWithCharArray:[((FreemarkerCoreSimpleCharStream *) nil_chk(input_stream_)) GetSuffixWithInt:jjimageLen_ + (lengthOfMatch_ = jjmatchedPos_ + 1)]];
      FreemarkerCoreFMParserTokenManager_strictSyntaxCheckWithFreemarkerCoreToken_withInt_(self, matchedToken, FreemarkerCoreFMParserConstants_DEFAULT);
      break;
      case 50:
      (void) [((JavaLangStringBuilder *) nil_chk(image_)) appendWithCharArray:[((FreemarkerCoreSimpleCharStream *) nil_chk(input_stream_)) GetSuffixWithInt:jjimageLen_ + (lengthOfMatch_ = jjmatchedPos_ + 1)]];
      FreemarkerCoreFMParserTokenManager_strictSyntaxCheckWithFreemarkerCoreToken_withInt_(self, matchedToken, FreemarkerCoreFMParserConstants_DEFAULT);
      break;
      case 51:
      (void) [((JavaLangStringBuilder *) nil_chk(image_)) appendWithCharArray:[((FreemarkerCoreSimpleCharStream *) nil_chk(input_stream_)) GetSuffixWithInt:jjimageLen_ + (lengthOfMatch_ = jjmatchedPos_ + 1)]];
      FreemarkerCoreFMParserTokenManager_strictSyntaxCheckWithFreemarkerCoreToken_withInt_(self, matchedToken, FreemarkerCoreFMParserConstants_DEFAULT);
      break;
      case 52:
      (void) [((JavaLangStringBuilder *) nil_chk(image_)) appendWithCharArray:[((FreemarkerCoreSimpleCharStream *) nil_chk(input_stream_)) GetSuffixWithInt:jjimageLen_ + (lengthOfMatch_ = jjmatchedPos_ + 1)]];
      FreemarkerCoreFMParserTokenManager_strictSyntaxCheckWithFreemarkerCoreToken_withInt_(self, matchedToken, FreemarkerCoreFMParserConstants_DEFAULT);
      break;
      case 53:
      (void) [((JavaLangStringBuilder *) nil_chk(image_)) appendWithCharArray:[((FreemarkerCoreSimpleCharStream *) nil_chk(input_stream_)) GetSuffixWithInt:jjimageLen_ + (lengthOfMatch_ = jjmatchedPos_ + 1)]];
      FreemarkerCoreFMParserTokenManager_strictSyntaxCheckWithFreemarkerCoreToken_withInt_(self, matchedToken, FreemarkerCoreFMParserConstants_DEFAULT);
      break;
      case 54:
      (void) [((JavaLangStringBuilder *) nil_chk(image_)) appendWithCharArray:[((FreemarkerCoreSimpleCharStream *) nil_chk(input_stream_)) GetSuffixWithInt:jjimageLen_ + (lengthOfMatch_ = jjmatchedPos_ + 1)]];
      FreemarkerCoreFMParserTokenManager_strictSyntaxCheckWithFreemarkerCoreToken_withInt_(self, matchedToken, FreemarkerCoreFMParserConstants_DEFAULT);
      break;
      case 55:
      (void) [((JavaLangStringBuilder *) nil_chk(image_)) appendWithCharArray:[((FreemarkerCoreSimpleCharStream *) nil_chk(input_stream_)) GetSuffixWithInt:jjimageLen_ + (lengthOfMatch_ = jjmatchedPos_ + 1)]];
      FreemarkerCoreFMParserTokenManager_strictSyntaxCheckWithFreemarkerCoreToken_withInt_(self, matchedToken, FreemarkerCoreFMParserConstants_DEFAULT);
      break;
      case 56:
      (void) [((JavaLangStringBuilder *) nil_chk(image_)) appendWithCharArray:[((FreemarkerCoreSimpleCharStream *) nil_chk(input_stream_)) GetSuffixWithInt:jjimageLen_ + (lengthOfMatch_ = jjmatchedPos_ + 1)]];
      FreemarkerCoreFMParserTokenManager_strictSyntaxCheckWithFreemarkerCoreToken_withInt_(self, matchedToken, FreemarkerCoreFMParserConstants_DEFAULT);
      break;
      case 57:
      (void) [((JavaLangStringBuilder *) nil_chk(image_)) appendWithCharArray:[((FreemarkerCoreSimpleCharStream *) nil_chk(input_stream_)) GetSuffixWithInt:jjimageLen_ + (lengthOfMatch_ = jjmatchedPos_ + 1)]];
      FreemarkerCoreFMParserTokenManager_strictSyntaxCheckWithFreemarkerCoreToken_withInt_(self, matchedToken, FreemarkerCoreFMParserConstants_DEFAULT);
      break;
      case 58:
      (void) [((JavaLangStringBuilder *) nil_chk(image_)) appendWithCharArray:[((FreemarkerCoreSimpleCharStream *) nil_chk(input_stream_)) GetSuffixWithInt:jjimageLen_ + (lengthOfMatch_ = jjmatchedPos_ + 1)]];
      FreemarkerCoreFMParserTokenManager_strictSyntaxCheckWithFreemarkerCoreToken_withInt_(self, matchedToken, FreemarkerCoreFMParserConstants_DEFAULT);
      break;
      case 59:
      (void) [((JavaLangStringBuilder *) nil_chk(image_)) appendWithCharArray:[((FreemarkerCoreSimpleCharStream *) nil_chk(input_stream_)) GetSuffixWithInt:jjimageLen_ + (lengthOfMatch_ = jjmatchedPos_ + 1)]];
      FreemarkerCoreFMParserTokenManager_strictSyntaxCheckWithFreemarkerCoreToken_withInt_(self, matchedToken, FreemarkerCoreFMParserConstants_FM_EXPRESSION);
      break;
      case 60:
      (void) [((JavaLangStringBuilder *) nil_chk(image_)) appendWithCharArray:[((FreemarkerCoreSimpleCharStream *) nil_chk(input_stream_)) GetSuffixWithInt:jjimageLen_ + (lengthOfMatch_ = jjmatchedPos_ + 1)]];
      FreemarkerCoreFMParserTokenManager_strictSyntaxCheckWithFreemarkerCoreToken_withInt_(self, matchedToken, FreemarkerCoreFMParserConstants_DEFAULT);
      break;
      case 61:
      (void) [((JavaLangStringBuilder *) nil_chk(image_)) appendWithCharArray:[((FreemarkerCoreSimpleCharStream *) nil_chk(input_stream_)) GetSuffixWithInt:jjimageLen_ + (lengthOfMatch_ = jjmatchedPos_ + 1)]];
      FreemarkerCoreFMParserTokenManager_strictSyntaxCheckWithFreemarkerCoreToken_withInt_(self, matchedToken, FreemarkerCoreFMParserConstants_FM_EXPRESSION);
      break;
      case 62:
      (void) [((JavaLangStringBuilder *) nil_chk(image_)) appendWithCharArray:[((FreemarkerCoreSimpleCharStream *) nil_chk(input_stream_)) GetSuffixWithInt:jjimageLen_ + (lengthOfMatch_ = jjmatchedPos_ + 1)]];
      FreemarkerCoreFMParserTokenManager_strictSyntaxCheckWithFreemarkerCoreToken_withInt_(self, matchedToken, FreemarkerCoreFMParserConstants_DEFAULT);
      break;
      case 63:
      (void) [((JavaLangStringBuilder *) nil_chk(image_)) appendWithCharArray:[((FreemarkerCoreSimpleCharStream *) nil_chk(input_stream_)) GetSuffixWithInt:jjimageLen_ + (lengthOfMatch_ = jjmatchedPos_ + 1)]];
      FreemarkerCoreFMParserTokenManager_strictSyntaxCheckWithFreemarkerCoreToken_withInt_(self, matchedToken, FreemarkerCoreFMParserConstants_FM_EXPRESSION);
      break;
      case 64:
      (void) [((JavaLangStringBuilder *) nil_chk(image_)) appendWithCharArray:[((FreemarkerCoreSimpleCharStream *) nil_chk(input_stream_)) GetSuffixWithInt:jjimageLen_ + (lengthOfMatch_ = jjmatchedPos_ + 1)]];
      FreemarkerCoreFMParserTokenManager_strictSyntaxCheckWithFreemarkerCoreToken_withInt_(self, matchedToken, FreemarkerCoreFMParserConstants_DEFAULT);
      break;
      case 65:
      (void) [((JavaLangStringBuilder *) nil_chk(image_)) appendWithCharArray:[((FreemarkerCoreSimpleCharStream *) nil_chk(input_stream_)) GetSuffixWithInt:jjimageLen_ + (lengthOfMatch_ = jjmatchedPos_ + 1)]];
      FreemarkerCoreFMParserTokenManager_strictSyntaxCheckWithFreemarkerCoreToken_withInt_withInt_(self, matchedToken, FreemarkerCoreFMParserTokenManager_getTagNamingConventionWithFreemarkerCoreToken_withInt_(matchedToken, 2), FreemarkerCoreFMParserConstants_DEFAULT);
      break;
      case 66:
      (void) [((JavaLangStringBuilder *) nil_chk(image_)) appendWithCharArray:[((FreemarkerCoreSimpleCharStream *) nil_chk(input_stream_)) GetSuffixWithInt:jjimageLen_ + (lengthOfMatch_ = jjmatchedPos_ + 1)]];
      FreemarkerCoreFMParserTokenManager_strictSyntaxCheckWithFreemarkerCoreToken_withInt_withInt_(self, matchedToken, FreemarkerCoreFMParserTokenManager_getTagNamingConventionWithFreemarkerCoreToken_withInt_(matchedToken, 2), FreemarkerCoreFMParserConstants_DEFAULT);
      break;
      case 67:
      (void) [((JavaLangStringBuilder *) nil_chk(image_)) appendWithCharArray:[((FreemarkerCoreSimpleCharStream *) nil_chk(input_stream_)) GetSuffixWithInt:jjimageLen_ + (lengthOfMatch_ = jjmatchedPos_ + 1)]];
      FreemarkerCoreFMParserTokenManager_unifiedCallWithFreemarkerCoreToken_(self, matchedToken);
      break;
      case 68:
      (void) [((JavaLangStringBuilder *) nil_chk(image_)) appendWithCharArray:[((FreemarkerCoreSimpleCharStream *) nil_chk(input_stream_)) GetSuffixWithInt:jjimageLen_ + (lengthOfMatch_ = jjmatchedPos_ + 1)]];
      FreemarkerCoreFMParserTokenManager_unifiedCallEndWithFreemarkerCoreToken_(self, matchedToken);
      break;
      case 69:
      (void) [((JavaLangStringBuilder *) nil_chk(image_)) appendWithCharArray:[((FreemarkerCoreSimpleCharStream *) nil_chk(input_stream_)) GetSuffixWithInt:jjimageLen_ + (lengthOfMatch_ = jjmatchedPos_ + 1)]];
      FreemarkerCoreFMParserTokenManager_ftlHeaderWithFreemarkerCoreToken_(self, matchedToken);
      break;
      case 70:
      (void) [((JavaLangStringBuilder *) nil_chk(image_)) appendWithCharArray:[((FreemarkerCoreSimpleCharStream *) nil_chk(input_stream_)) GetSuffixWithInt:jjimageLen_ + (lengthOfMatch_ = jjmatchedPos_ + 1)]];
      FreemarkerCoreFMParserTokenManager_ftlHeaderWithFreemarkerCoreToken_(self, matchedToken);
      break;
      case 71:
      (void) [((JavaLangStringBuilder *) nil_chk(image_)) appendWithCharArray:[((FreemarkerCoreSimpleCharStream *) nil_chk(input_stream_)) GetSuffixWithInt:jjimageLen_ + (lengthOfMatch_ = jjmatchedPos_ + 1)]];
      if (!directiveSyntaxEstablished_ && incompatibleImprovements_ < FreemarkerTemplate_TemplateAPI_get_VERSION_INT_2_3_19_()) {
        ((FreemarkerCoreToken *) nil_chk(matchedToken))->kind_ = FreemarkerCoreFMParserConstants_STATIC_TEXT_NON_WS;
      }
      else {
        
#line 7430
        jchar firstChar = [((NSString *) nil_chk(((FreemarkerCoreToken *) nil_chk(matchedToken))->image_)) charAtWithInt:0];
        
#line 7432
        if (!directiveSyntaxEstablished_ && autodetectTagSyntax_) {
          squBracTagSyntax_ = (firstChar == '[');
          directiveSyntaxEstablished_ = YES;
        }
        
#line 7437
        if (firstChar == '<' && squBracTagSyntax_) {
          matchedToken->kind_ = FreemarkerCoreFMParserConstants_STATIC_TEXT_NON_WS;
        }
        else
#line 7439
        if (firstChar == '[' && !squBracTagSyntax_) {
          matchedToken->kind_ = FreemarkerCoreFMParserConstants_STATIC_TEXT_NON_WS;
        }
        else
#line 7441
        if (strictEscapeSyntax_) {
          NSString *dn = matchedToken->image_;
          jint index = [dn indexOf:'#'];
          dn = [dn substring:index + 1];
          
#line 7450
          if ([((id<JavaUtilSet>) nil_chk(FreemarkerCore_CoreAPI_get_BUILT_IN_DIRECTIVE_NAMES_())) containsWithId:dn]) {
            @throw new_FreemarkerCoreTokenMgrError_initWithNSString_withInt_withInt_withInt_withInt_withInt_(JreStrcat("C$$", '#',
#line 7452
            dn, @" is an existing directive, but the tag is malformed.  (See FreeMarker Manual / Directive Reference.)"),
#line 7454
            FreemarkerCoreTokenMgrError_LEXICAL_ERROR,
#line 7455
            matchedToken->beginLine_, matchedToken->beginColumn_ + 1,
#line 7456
            matchedToken->endLine_, matchedToken->endColumn_);
          }
          
#line 7459
          NSString *tip = nil;
          if ([((NSString *) nil_chk(dn)) isEqual:@"set"] || [dn isEqual:@"var"]) {
            tip = JreStrcat("$$", @"Use #assign or #local or #global, depending on the intented scope (#assign is template-scope). ",
#line 7462
            FreemarkerCoreFMParserTokenManager_PLANNED_DIRECTIVE_HINT_);
          }
          else
#line 7463
          if ([dn isEqual:@"else_if"] || [dn isEqual:@"elif"]) {
            tip = @"Use #elseif.";
          }
          else
#line 7465
          if ([dn isEqual:@"no_escape"]) {
            tip = @"Use #noescape instead.";
          }
          else
#line 7467
          if ([dn isEqual:@"method"]) {
            tip = @"Use #function instead.";
          }
          else
#line 7469
          if ([dn isEqual:@"head"] || [dn isEqual:@"template"] || [dn isEqual:@"fm"]) {
            tip = @"You may meant #ftl.";
          }
          else
#line 7471
          if ([dn isEqual:@"try"] || [dn isEqual:@"atempt"]) {
            tip = @"You may meant #attempt.";
          }
          else
#line 7473
          if ([dn isEqual:@"for"] || [dn isEqual:@"each"] || [dn isEqual:@"iterate"] || [dn isEqual:@"iterator"]) {
            tip = @"You may meant #list (http://freemarker.org/docs/ref_directive_list.html).";
          }
          else
#line 7475
          if ([dn isEqual:@"prefix"]) {
            tip = JreStrcat("$$", @"You may meant #import. ", FreemarkerCoreFMParserTokenManager_PLANNED_DIRECTIVE_HINT_);
          }
          else
#line 7477
          if ([dn isEqual:@"item"] | [dn isEqual:@"row"] | [dn isEqual:@"rows"]) {
            tip = @"You may meant #items.";
          }
          else
#line 7479
          if ([dn isEqual:@"separator"] | [dn isEqual:@"separate"] | [dn isEqual:@"separ"]) {
            tip = @"You may meant #sep.";
          }
          else {
            
#line 7482
            tip = JreStrcat("$@C", @"Help (latest version): http://freemarker.org/docs/ref_directive_alphaidx.html; you're using FreeMarker ", FreemarkerTemplateConfiguration_getVersion(), '.');
          }
          
#line 7485
          @throw new_FreemarkerCoreTokenMgrError_initWithNSString_withInt_withInt_withInt_withInt_withInt_(JreStrcat("$$$", @"Unknown directive: #",
#line 7486
          dn, (tip != nil ? JreStrcat("$$", @". ", tip) : @"")),
#line 7487
          FreemarkerCoreTokenMgrError_LEXICAL_ERROR,
#line 7488
          matchedToken->beginLine_, matchedToken->beginColumn_ + 1,
#line 7489
          matchedToken->endLine_, matchedToken->endColumn_);
        }
      }
      break;
      case 124:
      (void) [((JavaLangStringBuilder *) nil_chk(image_)) appendWithNSString:IOSObjectArray_Get(nil_chk(FreemarkerCoreFMParserTokenManager_jjstrLiteralImages_), 124)];
      lengthOfMatch_ = ((jint) [((NSString *) nil_chk(IOSObjectArray_Get(FreemarkerCoreFMParserTokenManager_jjstrLiteralImages_, 124))) length]);
      ++bracketNesting_;
      break;
      case 125:
      (void) [((JavaLangStringBuilder *) nil_chk(image_)) appendWithNSString:IOSObjectArray_Get(nil_chk(FreemarkerCoreFMParserTokenManager_jjstrLiteralImages_), 125)];
      lengthOfMatch_ = ((jint) [((NSString *) nil_chk(IOSObjectArray_Get(FreemarkerCoreFMParserTokenManager_jjstrLiteralImages_, 125))) length]);
      FreemarkerCoreFMParserTokenManager_closeBracketWithFreemarkerCoreToken_(self, matchedToken);
      break;
      case 126:
      (void) [((JavaLangStringBuilder *) nil_chk(image_)) appendWithNSString:IOSObjectArray_Get(nil_chk(FreemarkerCoreFMParserTokenManager_jjstrLiteralImages_), 126)];
      lengthOfMatch_ = ((jint) [((NSString *) nil_chk(IOSObjectArray_Get(FreemarkerCoreFMParserTokenManager_jjstrLiteralImages_, 126))) length]);
      ++parenthesisNesting_;
      if (parenthesisNesting_ == 1) [self SwitchToWithInt:FreemarkerCoreFMParserConstants_IN_PAREN];
      break;
      case 127:
      (void) [((JavaLangStringBuilder *) nil_chk(image_)) appendWithNSString:IOSObjectArray_Get(nil_chk(FreemarkerCoreFMParserTokenManager_jjstrLiteralImages_), 127)];
      lengthOfMatch_ = ((jint) [((NSString *) nil_chk(IOSObjectArray_Get(FreemarkerCoreFMParserTokenManager_jjstrLiteralImages_, 127))) length]);
      --parenthesisNesting_;
      if (parenthesisNesting_ == 0) {
        if (inInvocation_) [self SwitchToWithInt:FreemarkerCoreFMParserConstants_NAMED_PARAMETER_EXPRESSION];
        else [self SwitchToWithInt:FreemarkerCoreFMParserConstants_FM_EXPRESSION];
      }
      break;
      case 128:
      (void) [((JavaLangStringBuilder *) nil_chk(image_)) appendWithNSString:IOSObjectArray_Get(nil_chk(FreemarkerCoreFMParserTokenManager_jjstrLiteralImages_), 128)];
      lengthOfMatch_ = ((jint) [((NSString *) nil_chk(IOSObjectArray_Get(FreemarkerCoreFMParserTokenManager_jjstrLiteralImages_, 128))) length]);
      ++hashLiteralNesting_;
      break;
      case 129:
      (void) [((JavaLangStringBuilder *) nil_chk(image_)) appendWithNSString:IOSObjectArray_Get(nil_chk(FreemarkerCoreFMParserTokenManager_jjstrLiteralImages_), 129)];
      lengthOfMatch_ = ((jint) [((NSString *) nil_chk(IOSObjectArray_Get(FreemarkerCoreFMParserTokenManager_jjstrLiteralImages_, 129))) length]);
      if (hashLiteralNesting_ == 0) [self SwitchToWithInt:FreemarkerCoreFMParserConstants_DEFAULT];
      else --hashLiteralNesting_;
      break;
      case 133:
      (void) [((JavaLangStringBuilder *) nil_chk(image_)) appendWithCharArray:[((FreemarkerCoreSimpleCharStream *) nil_chk(input_stream_)) GetSuffixWithInt:jjimageLen_ + (lengthOfMatch_ = jjmatchedPos_ + 1)]];
      
#line 7532
      s = ((FreemarkerCoreToken *) nil_chk(matchedToken))->image_;
      if ([((NSString *) nil_chk(s)) indexOf:'\\'] != -1) {
        jint srcLn = ((jint) [s length]);
        IOSCharArray *newS = [IOSCharArray newArrayWithLength:srcLn - 1];
        jint dstIdx = 0;
        for (jint srcIdx = 0; srcIdx < srcLn; srcIdx++) {
          jchar c = [s charAtWithInt:srcIdx];
          if (c != '\\') {
            *IOSCharArray_GetRef(newS, dstIdx++) = c;
          }
        }
        matchedToken->image_ = [NSString stringWithCharacters:newS offset:0 length:dstIdx];
      }
      break;
      case 134:
      (void) [((JavaLangStringBuilder *) nil_chk(image_)) appendWithCharArray:[((FreemarkerCoreSimpleCharStream *) nil_chk(input_stream_)) GetSuffixWithInt:jjimageLen_ + (lengthOfMatch_ = jjmatchedPos_ + 1)]];
      if (((jint) [@"" length]) == 0) {
        jchar c = [((NSString *) nil_chk(((FreemarkerCoreToken *) nil_chk(matchedToken))->image_)) charAtWithInt:0];
        @throw new_FreemarkerCoreTokenMgrError_initWithNSString_withInt_withInt_withInt_withInt_withInt_(JreStrcat("$C$C$C$", @"You can't use \"",
#line 7551
        c, @"{\" here as you are already in FreeMarker-expression-mode. Thus, instead of ",
#line 7552
        c, @"{myExpression}, just write myExpression. (",
#line 7553
        c, @"{...} is only needed where otherwise static text is expected, i.e, outside FreeMarker tags and ${...}-s.)"),
#line 7555
        FreemarkerCoreTokenMgrError_LEXICAL_ERROR,
#line 7556
        matchedToken->beginLine_, matchedToken->beginColumn_,
#line 7557
        matchedToken->endLine_, matchedToken->endColumn_);
      }
      break;
      case 139:
      (void) [((JavaLangStringBuilder *) nil_chk(image_)) appendWithNSString:IOSObjectArray_Get(nil_chk(FreemarkerCoreFMParserTokenManager_jjstrLiteralImages_), 139)];
      lengthOfMatch_ = ((jint) [((NSString *) nil_chk(IOSObjectArray_Get(FreemarkerCoreFMParserTokenManager_jjstrLiteralImages_, 139))) length]);
      if (inFTLHeader_) FreemarkerCoreFMParserTokenManager_eatNewline(self);
      inFTLHeader_ = NO;
      if (squBracTagSyntax_) {
        ((FreemarkerCoreToken *) nil_chk(matchedToken))->kind_ = FreemarkerCoreFMParserConstants_NATURAL_GT;
      }
      else {
        
#line 7568
        [self SwitchToWithInt:FreemarkerCoreFMParserConstants_DEFAULT];
      }
      break;
      case 140:
      (void) [((JavaLangStringBuilder *) nil_chk(image_)) appendWithCharArray:[((FreemarkerCoreSimpleCharStream *) nil_chk(input_stream_)) GetSuffixWithInt:jjimageLen_ + (lengthOfMatch_ = jjmatchedPos_ + 1)]];
      if (inFTLHeader_) FreemarkerCoreFMParserTokenManager_eatNewline(self);
      inFTLHeader_ = NO;
      [self SwitchToWithInt:FreemarkerCoreFMParserConstants_DEFAULT];
      break;
      case 145:
      (void) [((JavaLangStringBuilder *) nil_chk(image_)) appendWithCharArray:[((FreemarkerCoreSimpleCharStream *) nil_chk(input_stream_)) GetSuffixWithInt:jjimageLen_ + (lengthOfMatch_ = jjmatchedPos_ + 1)]];
      if ([((NSString *) nil_chk(noparseTag_)) isEqual:@"-->"]) {
        jboolean squareBracket = [((NSString *) nil_chk(((FreemarkerCoreToken *) nil_chk(matchedToken))->image_)) hasSuffix:@"]"];
        if ((squBracTagSyntax_ && squareBracket) || (!squBracTagSyntax_ && !squareBracket)) {
          matchedToken->image_ = JreStrcat("$C", matchedToken->image_, ';');
          [self SwitchToWithInt:FreemarkerCoreFMParserConstants_DEFAULT];
        }
      }
      break;
      case 146:
      (void) [((JavaLangStringBuilder *) nil_chk(image_)) appendWithCharArray:[((FreemarkerCoreSimpleCharStream *) nil_chk(input_stream_)) GetSuffixWithInt:jjimageLen_ + (lengthOfMatch_ = jjmatchedPos_ + 1)]];
      st = new_JavaUtilStringTokenizer_initWithNSString_withNSString_withBoolean_([image_ description], @" \t\n\x0d<>[]/#", NO);
      if ([((NSString *) nil_chk([st nextToken])) isEqual:noparseTag_]) {
        ((FreemarkerCoreToken *) nil_chk(matchedToken))->image_ = JreStrcat("$C", matchedToken->image_, ';');
        [self SwitchToWithInt:FreemarkerCoreFMParserConstants_DEFAULT];
      }
      break;
      default:
      break;
    }
  }
}


#line 7599
- (void)jjCheckNAddWithInt:(jint)state {
  FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, state);
}


#line 7607
- (void)jjAddStatesWithInt:(jint)start
                   withInt:(jint)end {
  FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, start, end);
}


#line 7613
- (void)jjCheckNAddTwoStatesWithInt:(jint)state1
                            withInt:(jint)state2 {
  FreemarkerCoreFMParserTokenManager_jjCheckNAddTwoStatesWithInt_withInt_(self, state1, state2);
}


#line 7619
- (void)jjCheckNAddStatesWithInt:(jint)start
                         withInt:(jint)end {
  FreemarkerCoreFMParserTokenManager_jjCheckNAddStatesWithInt_withInt_(self, start, end);
}


#line 7627
- (instancetype)initWithFreemarkerCoreSimpleCharStream:(FreemarkerCoreSimpleCharStream *)stream {
  FreemarkerCoreFMParserTokenManager_initWithFreemarkerCoreSimpleCharStream_(self, stream);
  return self;
}


#line 7636
- (instancetype)initWithFreemarkerCoreSimpleCharStream:(FreemarkerCoreSimpleCharStream *)stream
                                               withInt:(jint)lexState {
  FreemarkerCoreFMParserTokenManager_initWithFreemarkerCoreSimpleCharStream_withInt_(self, stream, lexState);
  return self;
}

- (void)ReInitWithFreemarkerCoreSimpleCharStream:(FreemarkerCoreSimpleCharStream *)stream {
  
#line 7644
  jjmatchedPos_ = jjnewStateCnt_ = 0;
  curLexState_ = defaultLexState_;
  input_stream_ = stream;
  FreemarkerCoreFMParserTokenManager_ReInitRounds(self);
}


#line 7650
- (void)ReInitRounds {
  FreemarkerCoreFMParserTokenManager_ReInitRounds(self);
}


#line 7659
- (void)ReInitWithFreemarkerCoreSimpleCharStream:(FreemarkerCoreSimpleCharStream *)stream
                                         withInt:(jint)lexState {
  
#line 7661
  [self ReInitWithFreemarkerCoreSimpleCharStream:stream];
  [self SwitchToWithInt:lexState];
}


#line 7666
- (void)SwitchToWithInt:(jint)lexState {
  
#line 7668
  if (lexState >= 8 || lexState < 0)
#line 7669
  @throw new_FreemarkerCoreTokenMgrError_initWithNSString_withInt_(JreStrcat("$I$", @"Error: Ignoring invalid lexical state : ", lexState, @". State unchanged."), FreemarkerCoreTokenMgrError_INVALID_LEXICAL_STATE);
  else
#line 7671
  curLexState_ = lexState;
}

+ (void)initialize {
  if (self == [FreemarkerCoreFMParserTokenManager class]) {
    FreemarkerCoreFMParserTokenManager_jjbitVec0_ = [IOSLongArray newArrayWithLongs:(jlong[]){
#line 283
      (jlong) 0xfffffffffffffffeLL, (jlong) 0xffffffffffffffffLL, (jlong) 0xffffffffffffffffLL, (jlong) 0xffffffffffffffffLL } count:4];
      FreemarkerCoreFMParserTokenManager_jjbitVec2_ = [IOSLongArray newArrayWithLongs:(jlong[]){
#line 286
        (jlong) 0x0LL, (jlong) 0x0LL, (jlong) 0xffffffffffffffffLL, (jlong) 0xffffffffffffffffLL } count:4];
        FreemarkerCoreFMParserTokenManager_jjbitVec3_ = [IOSLongArray newArrayWithLongs:(jlong[]){
#line 675
          (jlong) 0xfff00000fffffffeLL, (jlong) 0xffffffffffffdfffLL, (jlong) 0xfffff02fffffffffLL, (jlong) 0x16000000007fffffLL } count:4];
          FreemarkerCoreFMParserTokenManager_jjbitVec4_ = [IOSLongArray newArrayWithLongs:(jlong[]){
#line 678
            (jlong) 0x0LL, (jlong) 0x0LL, (jlong) 0x420040000000000LL, (jlong) 0xff7fffffff7fffffLL } count:4];
            FreemarkerCoreFMParserTokenManager_jjbitVec5_ = [IOSLongArray newArrayWithLongs:(jlong[]){
#line 681
              (jlong) 0x0LL, (jlong) 0x8002000000000000LL, (jlong) 0x1fff0000LL, (jlong) 0x0LL } count:4];
              FreemarkerCoreFMParserTokenManager_jjbitVec6_ = [IOSLongArray newArrayWithLongs:(jlong[]){
#line 684
                (jlong) 0xf3ffbd503e2ffc84LL, (jlong) 0x43e0LL, (jlong) 0x18LL, (jlong) 0x0LL } count:4];
                FreemarkerCoreFMParserTokenManager_jjbitVec7_ = [IOSLongArray newArrayWithLongs:(jlong[]){
#line 687
                  (jlong) 0xffff7fffffffffffLL, (jlong) 0xffffffff7fffffffLL, (jlong) 0xffffffffffffffffLL, (jlong) 0xc781fffffffffLL } count:4];
                  FreemarkerCoreFMParserTokenManager_jjbitVec8_ = [IOSLongArray newArrayWithLongs:(jlong[]){
#line 690
                    (jlong) 0xffff20bfffffffffLL, (jlong) 0x80ffffffffffLL, (jlong) 0x7f7f7f7f007fffffLL, (jlong) 0x7f7f7f7fLL } count:4];
                    FreemarkerCoreFMParserTokenManager_jjbitVec9_ = [IOSLongArray newArrayWithLongs:(jlong[]){
#line 693
                      (jlong) 0x800000000000LL, (jlong) 0x0LL, (jlong) 0x0LL, (jlong) 0x0LL } count:4];
                      FreemarkerCoreFMParserTokenManager_jjbitVec10_ = [IOSLongArray newArrayWithLongs:(jlong[]){
#line 696
                        (jlong) 0x183e000000000060LL, (jlong) 0xffffffffffffffffLL, (jlong) 0xffffffffffffffffLL, (jlong) 0xffffffffffffffffLL } count:4];
                        FreemarkerCoreFMParserTokenManager_jjbitVec11_ = [IOSLongArray newArrayWithLongs:(jlong[]){
#line 699
                          (jlong) 0xffffffffffffffffLL, (jlong) 0xffffffffffffffffLL, (jlong) 0x7ffffff0000ffffLL, (jlong) 0xffff000000000000LL } count:4];
                          FreemarkerCoreFMParserTokenManager_jjbitVec12_ = [IOSLongArray newArrayWithLongs:(jlong[]){
#line 702
                            (jlong) 0xffffffffffffffffLL, (jlong) 0xffffffffffffffffLL, (jlong) 0x0LL, (jlong) 0x0LL } count:4];
                            FreemarkerCoreFMParserTokenManager_jjbitVec13_ = [IOSLongArray newArrayWithLongs:(jlong[]){
#line 705
                              (jlong) 0xffffffffffffffffLL, (jlong) 0xffffffffffffffffLL, (jlong) 0x3fffffffffffffLL, (jlong) 0x0LL } count:4];
                              FreemarkerCoreFMParserTokenManager_jjbitVec14_ = [IOSLongArray newArrayWithLongs:(jlong[]){
#line 708
                                (jlong) 0xffffffffffffffffLL, (jlong) 0xffffffffffffffffLL, (jlong) 0x1fffLL, (jlong) 0x3fffffffffff0000LL } count:4];
                                FreemarkerCoreFMParserTokenManager_jjbitVec15_ = [IOSLongArray newArrayWithLongs:(jlong[]){
#line 711
                                  (jlong) 0xfffffff1fffLL, (jlong) 0x80007fffffffffffLL, (jlong) 0xffffffff00ffffffLL, (jlong) 0x3fffffffffLL } count:4];
                                  FreemarkerCoreFMParserTokenManager_jjbitVec16_ = [IOSLongArray newArrayWithLongs:(jlong[]){
#line 714
                                    (jlong) 0xfffffffcff800000LL, (jlong) 0xffffffffffffffffLL, (jlong) 0x7ff000f79ffLL, (jlong) 0xff00000000000000LL } count:4];
                                    FreemarkerCoreFMParserTokenManager_jjbitVec17_ = [IOSLongArray newArrayWithLongs:(jlong[]){
#line 717
                                      (jlong) 0x7fffff7bbLL, (jlong) 0xfffffffffffffLL, (jlong) 0xffffffffffffcLL, (jlong) 0x8fc000003ff0000LL } count:4];
                                      FreemarkerCoreFMParserTokenManager_jjbitVec18_ = [IOSLongArray newArrayWithLongs:(jlong[]){
#line 720
                                        (jlong) 0xffff003fffffffffLL, (jlong) 0x1fffffff0000007fLL, (jlong) 0x7fffffffffff0LL, (jlong) 0x3ff8000LL } count:4];
                                        FreemarkerCoreFMParserTokenManager_jjbitVec19_ = [IOSLongArray newArrayWithLongs:(jlong[]){
#line 723
                                          (jlong) 0x1ffffffffffLL, (jlong) 0x47fffff03ff0ff7LL, (jlong) 0x3e62ffffffffffffLL, (jlong) 0x1c07ff38000005LL } count:4];
                                          FreemarkerCoreFMParserTokenManager_jjbitVec20_ = [IOSLongArray newArrayWithLongs:(jlong[]){
#line 726
                                            (jlong) 0x7f7f007e7e7eLL, (jlong) 0x0LL, (jlong) 0x0LL, (jlong) 0x3ff0007ffffffffLL } count:4];
                                            FreemarkerCoreFMParserTokenManager_jjbitVec21_ = [IOSLongArray newArrayWithLongs:(jlong[]){
#line 729
                                              (jlong) 0xffffffffffffffffLL, (jlong) 0xffffffffffffffffLL, (jlong) 0xffff000fffffffffLL, (jlong) 0xffffffffffff87fLL } count:4];
                                              FreemarkerCoreFMParserTokenManager_jjbitVec22_ = [IOSLongArray newArrayWithLongs:(jlong[]){
#line 732
                                                (jlong) 0x5f7ffdffa0f8007fLL, (jlong) 0xffffffffffffffdbLL, (jlong) 0x3ffffffffffffLL, (jlong) 0xfffffffffff80000LL } count:4];
                                                FreemarkerCoreFMParserTokenManager_jjbitVec23_ = [IOSLongArray newArrayWithLongs:(jlong[]){
#line 735
                                                  (jlong) 0x3fffffffffffffffLL, (jlong) 0xffffffffffff0000LL, (jlong) 0xfffffffffffcffffLL, (jlong) 0xfff0000000000ffLL } count:4];
                                                  FreemarkerCoreFMParserTokenManager_jjbitVec24_ = [IOSLongArray newArrayWithLongs:(jlong[]){
#line 738
                                                    (jlong) 0x0LL, (jlong) 0xffdf000000000000LL, (jlong) 0xffffffffffffffffLL, (jlong) 0x1fffffffffffffffLL } count:4];
                                                    FreemarkerCoreFMParserTokenManager_jjbitVec25_ = [IOSLongArray newArrayWithLongs:(jlong[]){
#line 741
                                                      (jlong) 0x7fffffe03ff0000LL, (jlong) 0xffffffc007fffffeLL, (jlong) 0x7fffffffffffffffLL, (jlong) 0x1cfcfcfcLL } count:4];
                                                      FreemarkerCoreFMParserTokenManager_jjnextStates_ = [IOSIntArray newArrayWithInts:(jint[]){
#line 6894
                                                        10, 12, 4, 5, 3, 4, 5, 593, 608, 320, 321, 322, 323, 324, 325, 326,
#line 6895
                                                        327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342,
#line 6896
                                                        343, 344, 345, 346, 352, 353, 361, 362, 371, 372, 379, 380, 391, 392, 403, 404,
#line 6897
                                                        415, 416, 425, 426, 436, 437, 447, 448, 460, 461, 470, 471, 483, 484, 497, 498,
#line 6898
                                                        508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523,
#line 6899
                                                        524, 525, 535, 536, 537, 549, 550, 555, 561, 562, 564, 12, 21, 24, 31, 36,
#line 6900
                                                        45, 50, 58, 65, 70, 77, 84, 90, 98, 105, 114, 120, 130, 136, 141, 148,
#line 6901
                                                        153, 161, 171, 180, 189, 196, 204, 213, 220, 228, 229, 237, 242, 247, 256, 265,
#line 6902
                                                        272, 282, 290, 301, 308, 318, 5, 6, 14, 15, 38, 41, 47, 48, 163, 164,
#line 6903
                                                        173, 174, 184, 185, 191, 192, 193, 198, 199, 200, 206, 207, 208, 215, 216, 217,
#line 6904
                                                        222, 223, 224, 230, 231, 232, 234, 235, 236, 239, 240, 241, 244, 245, 246, 249,
#line 6905
                                                        250, 258, 259, 260, 274, 275, 276, 292, 293, 294, 312, 313, 348, 349, 355, 356,
#line 6906
                                                        364, 365, 374, 375, 382, 383, 394, 395, 408, 409, 418, 419, 428, 429, 439, 440,
#line 6907
                                                        450, 451, 463, 464, 473, 474, 486, 487, 500, 501, 527, 528, 541, 542, 596, 597,
#line 6908
                                                        599, 604, 605, 600, 606, 599, 601, 602, 604, 605, 320, 321, 322, 323, 324, 325,
#line 6909
                                                        326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341,
#line 6910
                                                        342, 343, 344, 345, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577,
#line 6911
                                                        578, 579, 580, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521,
#line 6912
                                                        522, 523, 524, 581, 536, 582, 550, 585, 588, 562, 589, 557, 558, 595, 607, 604,
#line 6913
                                                        605, 50, 51, 52, 70, 73, 76, 80, 81, 46, 48, 42, 43, 13, 14, 17,
#line 6914
                                                        6, 7, 10, 59, 61, 63, 66, 20, 23, 8, 11, 15, 18, 21, 22, 24,
#line 6915
                                                        25, 47, 48, 49, 67, 70, 73, 77, 78, 43, 45, 56, 58, 60, 63, 3,
#line 6916
                                                        5, 46, 47, 48, 66, 69, 72, 76, 77, 42, 44, 38, 39, 8, 9, 12,
#line 6917
                                                        1, 2, 5, 55, 57, 59, 62, 3, 6, 10, 13, 16, 17, 19, 20, 52,
#line 6918
                                                        53, 54, 72, 75, 78, 82, 83, 48, 50, 44, 45, 61, 63, 65, 68 } count:399];
                                                        FreemarkerCoreFMParserTokenManager_jjstrLiteralImages_ = [IOSObjectArray newArrayWithObjects:(id[]){
#line 6989
                                                          @"", nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil,
#line 6990
                                                          nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil,
#line 6991
                                                          nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil,
#line 6992
                                                          nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil,
#line 6993
                                                          nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil,
#line 6994
                                                          nil, nil, nil, nil, nil, nil, @"${", @"#{", nil, nil, nil, nil,
#line 6995
                                                          nil, nil, nil, nil, nil, nil, @"false", @"true", nil,
#line 6996
                                                          nil, @".", @"..", nil, @"..*", @"?", @"??", @"=", @"==",
#line 6997
                                                          @"!=", @"+=", @"-=", @"*=", @"/=", @"%=", @"++", @"--", nil,
#line 6998
                                                          nil, nil, nil, @"+", @"-", @"*", @"**", @"...", @"/", @"%", nil,
#line 6999
                                                          nil, @"!", @",", @";", @":", @"[", @"]", @"(", @")", @"{", @"}",
#line 7000
                                                          @"in", @"as", @"using", nil, nil, nil, nil, nil, nil, @">",
#line 7001
                                                          nil, @">", @">=", nil, nil, nil, nil, nil, nil } count:149 type:NSString_class_()];
                                                          FreemarkerCoreFMParserTokenManager_lexStateNames_ = [IOSObjectArray newArrayWithObjects:(id[]){ @"DEFAULT",
#line 7677
                                                          @"NODIRECTIVE",
#line 7678
                                                          @"FM_EXPRESSION",
#line 7679
                                                          @"IN_PAREN",
#line 7680
                                                          @"NAMED_PARAMETER_EXPRESSION",
#line 7681
                                                          @"EXPRESSION_COMMENT",
#line 7682
                                                          @"NO_SPACE_EXPRESSION",
#line 7683
                                                          @"NO_PARSE" } count:8 type:NSString_class_()];
                                                          FreemarkerCoreFMParserTokenManager_jjnewLexState_ = [IOSIntArray newArrayWithInts:(jint[]){
#line 7688
                                                            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
#line 7689
                                                            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
#line 7690
                                                            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
#line 7691
                                                            2, 2, -1, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
#line 7692
                                                            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
#line 7693
                                                            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, -1, -1, -1 } count:149];
                                                            FreemarkerCoreFMParserTokenManager_jjtoToken_ = [IOSLongArray newArrayWithLongs:(jlong[]){
#line 7696
                                                              (jlong) 0xffffffffffffffc1LL, (jlong) 0xffffffffffe01fffLL, (jlong) 0x1ff87fLL } count:3];
                                                              FreemarkerCoreFMParserTokenManager_jjtoSkip_ = [IOSLongArray newArrayWithLongs:(jlong[]){
#line 7699
                                                                (jlong) 0x0LL, (jlong) 0xfe000LL, (jlong) 0x0LL } count:3];
                                                                J2OBJC_SET_INITIALIZED(FreemarkerCoreFMParserTokenManager)
                                                              }
                                                            }

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "setParserWithFreemarkerCoreFMParser:", "setParser", "V", 0x0, NULL, NULL },
    { "getTemplate", NULL, "Lfreemarker.template.Template;", 0x0, NULL, NULL },
    { "strictSyntaxCheckWithFreemarkerCoreToken:withInt:withInt:", "strictSyntaxCheck", "V", 0x2, NULL, NULL },
    { "checkNamingConventionWithFreemarkerCoreToken:", "checkNamingConvention", "V", 0x0, NULL, NULL },
    { "checkNamingConventionWithFreemarkerCoreToken:withInt:", "checkNamingConvention", "V", 0x0, NULL, NULL },
    { "newNameConventionMismatchExceptionWithFreemarkerCoreToken:", "newNameConventionMismatchException", "Lfreemarker.core.TokenMgrError;", 0x2, NULL, NULL },
    { "strictSyntaxCheckWithFreemarkerCoreToken:withInt:", "strictSyntaxCheck", "V", 0x2, NULL, NULL },
    { "isStrictTagWithNSString:", "isStrictTag", "Z", 0x2, NULL, NULL },
    { "getTagNamingConventionWithFreemarkerCoreToken:withInt:", "getTagNamingConvention", "I", 0xa, NULL, NULL },
    { "getTagNameCharAtWithFreemarkerCoreToken:withInt:", "getTagNameCharAt", "C", 0x8, NULL, NULL },
    { "unifiedCallWithFreemarkerCoreToken:", "unifiedCall", "V", 0x2, NULL, NULL },
    { "unifiedCallEndWithFreemarkerCoreToken:", "unifiedCallEnd", "V", 0x2, NULL, NULL },
    { "closeBracketWithFreemarkerCoreToken:", "closeBracket", "V", 0x2, NULL, NULL },
    { "eatNewline", NULL, "V", 0x2, NULL, NULL },
    { "ftlHeaderWithFreemarkerCoreToken:", "ftlHeader", "V", 0x2, NULL, NULL },
    { "setDebugStreamWithJavaIoPrintStream:", "setDebugStream", "V", 0x1, NULL, NULL },
    { "jjMoveStringLiteralDfa0_7", NULL, "I", 0x2, NULL, NULL },
    { "jjMoveNfa_7WithInt:withInt:", "jjMoveNfa_7", "I", 0x2, NULL, NULL },
    { "jjStopStringLiteralDfa_1WithInt:withLong:withLong:", "jjStopStringLiteralDfa_1", "I", 0x12, NULL, NULL },
    { "jjStartNfa_1WithInt:withLong:withLong:", "jjStartNfa_1", "I", 0x12, NULL, NULL },
    { "jjStopAtPosWithInt:withInt:", "jjStopAtPos", "I", 0x2, NULL, NULL },
    { "jjMoveStringLiteralDfa0_1", NULL, "I", 0x2, NULL, NULL },
    { "jjMoveStringLiteralDfa1_1WithLong:", "jjMoveStringLiteralDfa1_1", "I", 0x2, NULL, NULL },
    { "jjMoveNfa_1WithInt:withInt:", "jjMoveNfa_1", "I", 0x2, NULL, NULL },
    { "jjStopStringLiteralDfa_0WithInt:withLong:withLong:", "jjStopStringLiteralDfa_0", "I", 0x12, NULL, NULL },
    { "jjStartNfa_0WithInt:withLong:withLong:", "jjStartNfa_0", "I", 0x12, NULL, NULL },
    { "jjMoveStringLiteralDfa0_0", NULL, "I", 0x2, NULL, NULL },
    { "jjMoveStringLiteralDfa1_0WithLong:", "jjMoveStringLiteralDfa1_0", "I", 0x2, NULL, NULL },
    { "jjMoveNfa_0WithInt:withInt:", "jjMoveNfa_0", "I", 0x2, NULL, NULL },
    { "jjStopStringLiteralDfa_2WithInt:withLong:withLong:withLong:", "jjStopStringLiteralDfa_2", "I", 0x12, NULL, NULL },
    { "jjStartNfa_2WithInt:withLong:withLong:withLong:", "jjStartNfa_2", "I", 0x12, NULL, NULL },
    { "jjMoveStringLiteralDfa0_2", NULL, "I", 0x2, NULL, NULL },
    { "jjMoveStringLiteralDfa1_2WithLong:withLong:", "jjMoveStringLiteralDfa1_2", "I", 0x2, NULL, NULL },
    { "jjMoveStringLiteralDfa2_2WithLong:withLong:withLong:withLong:", "jjMoveStringLiteralDfa2_2", "I", 0x2, NULL, NULL },
    { "jjMoveStringLiteralDfa3_2WithLong:withLong:withLong:withLong:", "jjMoveStringLiteralDfa3_2", "I", 0x2, NULL, NULL },
    { "jjMoveStringLiteralDfa4_2WithLong:withLong:withLong:withLong:", "jjMoveStringLiteralDfa4_2", "I", 0x2, NULL, NULL },
    { "jjStartNfaWithStates_2WithInt:withInt:withInt:", "jjStartNfaWithStates_2", "I", 0x2, NULL, NULL },
    { "jjMoveNfa_2WithInt:withInt:", "jjMoveNfa_2", "I", 0x2, NULL, NULL },
    { "jjStopStringLiteralDfa_3WithInt:withLong:withLong:withLong:", "jjStopStringLiteralDfa_3", "I", 0x12, NULL, NULL },
    { "jjStartNfa_3WithInt:withLong:withLong:withLong:", "jjStartNfa_3", "I", 0x12, NULL, NULL },
    { "jjMoveStringLiteralDfa0_3", NULL, "I", 0x2, NULL, NULL },
    { "jjMoveStringLiteralDfa1_3WithLong:withLong:", "jjMoveStringLiteralDfa1_3", "I", 0x2, NULL, NULL },
    { "jjMoveStringLiteralDfa2_3WithLong:withLong:withLong:withLong:", "jjMoveStringLiteralDfa2_3", "I", 0x2, NULL, NULL },
    { "jjMoveStringLiteralDfa3_3WithLong:withLong:withLong:withLong:", "jjMoveStringLiteralDfa3_3", "I", 0x2, NULL, NULL },
    { "jjMoveStringLiteralDfa4_3WithLong:withLong:withLong:withLong:", "jjMoveStringLiteralDfa4_3", "I", 0x2, NULL, NULL },
    { "jjStartNfaWithStates_3WithInt:withInt:withInt:", "jjStartNfaWithStates_3", "I", 0x2, NULL, NULL },
    { "jjMoveNfa_3WithInt:withInt:", "jjMoveNfa_3", "I", 0x2, NULL, NULL },
    { "jjStopStringLiteralDfa_5WithInt:withLong:withLong:", "jjStopStringLiteralDfa_5", "I", 0x12, NULL, NULL },
    { "jjStartNfa_5WithInt:withLong:withLong:", "jjStartNfa_5", "I", 0x12, NULL, NULL },
    { "jjMoveStringLiteralDfa0_5", NULL, "I", 0x2, NULL, NULL },
    { "jjStartNfaWithStates_5WithInt:withInt:withInt:", "jjStartNfaWithStates_5", "I", 0x2, NULL, NULL },
    { "jjMoveNfa_5WithInt:withInt:", "jjMoveNfa_5", "I", 0x2, NULL, NULL },
    { "jjStopStringLiteralDfa_6WithInt:withLong:withLong:withLong:", "jjStopStringLiteralDfa_6", "I", 0x12, NULL, NULL },
    { "jjStartNfa_6WithInt:withLong:withLong:withLong:", "jjStartNfa_6", "I", 0x12, NULL, NULL },
    { "jjMoveStringLiteralDfa0_6", NULL, "I", 0x2, NULL, NULL },
    { "jjMoveStringLiteralDfa1_6WithLong:withLong:", "jjMoveStringLiteralDfa1_6", "I", 0x2, NULL, NULL },
    { "jjMoveStringLiteralDfa2_6WithLong:withLong:withLong:withLong:", "jjMoveStringLiteralDfa2_6", "I", 0x2, NULL, NULL },
    { "jjMoveStringLiteralDfa3_6WithLong:withLong:withLong:withLong:", "jjMoveStringLiteralDfa3_6", "I", 0x2, NULL, NULL },
    { "jjMoveStringLiteralDfa4_6WithLong:withLong:withLong:withLong:", "jjMoveStringLiteralDfa4_6", "I", 0x2, NULL, NULL },
    { "jjStartNfaWithStates_6WithInt:withInt:withInt:", "jjStartNfaWithStates_6", "I", 0x2, NULL, NULL },
    { "jjMoveNfa_6WithInt:withInt:", "jjMoveNfa_6", "I", 0x2, NULL, NULL },
    { "jjStopStringLiteralDfa_4WithInt:withLong:withLong:withLong:", "jjStopStringLiteralDfa_4", "I", 0x12, NULL, NULL },
    { "jjStartNfa_4WithInt:withLong:withLong:withLong:", "jjStartNfa_4", "I", 0x12, NULL, NULL },
    { "jjMoveStringLiteralDfa0_4", NULL, "I", 0x2, NULL, NULL },
    { "jjMoveStringLiteralDfa1_4WithLong:withLong:", "jjMoveStringLiteralDfa1_4", "I", 0x2, NULL, NULL },
    { "jjMoveStringLiteralDfa2_4WithLong:withLong:withLong:withLong:", "jjMoveStringLiteralDfa2_4", "I", 0x2, NULL, NULL },
    { "jjMoveStringLiteralDfa3_4WithLong:withLong:withLong:withLong:", "jjMoveStringLiteralDfa3_4", "I", 0x2, NULL, NULL },
    { "jjMoveStringLiteralDfa4_4WithLong:withLong:withLong:withLong:", "jjMoveStringLiteralDfa4_4", "I", 0x2, NULL, NULL },
    { "jjStartNfaWithStates_4WithInt:withInt:withInt:", "jjStartNfaWithStates_4", "I", 0x2, NULL, NULL },
    { "jjMoveNfa_4WithInt:withInt:", "jjMoveNfa_4", "I", 0x2, NULL, NULL },
    { "jjCanMove_0WithInt:withInt:withInt:withLong:withLong:", "jjCanMove_0", "Z", 0x1a, NULL, NULL },
    { "jjCanMove_1WithInt:withInt:withInt:withLong:withLong:", "jjCanMove_1", "Z", 0x1a, NULL, NULL },
    { "jjFillToken", NULL, "Lfreemarker.core.Token;", 0x4, NULL, NULL },
    { "getNextToken", NULL, "Lfreemarker.core.Token;", 0x1, NULL, NULL },
    { "SkipLexicalActionsWithFreemarkerCoreToken:", "SkipLexicalActions", "V", 0x0, NULL, NULL },
    { "TokenLexicalActionsWithFreemarkerCoreToken:", "TokenLexicalActions", "V", 0x0, NULL, NULL },
    { "jjCheckNAddWithInt:", "jjCheckNAdd", "V", 0x2, NULL, NULL },
    { "jjAddStatesWithInt:withInt:", "jjAddStates", "V", 0x2, NULL, NULL },
    { "jjCheckNAddTwoStatesWithInt:withInt:", "jjCheckNAddTwoStates", "V", 0x2, NULL, NULL },
    { "jjCheckNAddStatesWithInt:withInt:", "jjCheckNAddStates", "V", 0x2, NULL, NULL },
    { "initWithFreemarkerCoreSimpleCharStream:", "FMParserTokenManager", NULL, 0x1, NULL, NULL },
    { "initWithFreemarkerCoreSimpleCharStream:withInt:", "FMParserTokenManager", NULL, 0x1, NULL, NULL },
    { "ReInitWithFreemarkerCoreSimpleCharStream:", "ReInit", "V", 0x1, NULL, NULL },
    { "ReInitRounds", NULL, "V", 0x2, NULL, NULL },
    { "ReInitWithFreemarkerCoreSimpleCharStream:withInt:", "ReInit", "V", 0x1, NULL, NULL },
    { "SwitchToWithInt:", "SwitchTo", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "PLANNED_DIRECTIVE_HINT_", NULL, 0x1a, "Ljava.lang.String;", &FreemarkerCoreFMParserTokenManager_PLANNED_DIRECTIVE_HINT_, NULL,  },
    { "noparseTag_", NULL, 0x0, "Ljava.lang.String;", NULL, NULL,  },
    { "parser_", NULL, 0x2, "Lfreemarker.core.FMParser;", NULL, NULL,  },
    { "hashLiteralNesting_", NULL, 0x2, "I", NULL, NULL,  },
    { "parenthesisNesting_", NULL, 0x2, "I", NULL, NULL,  },
    { "bracketNesting_", NULL, 0x2, "I", NULL, NULL,  },
    { "inFTLHeader_", NULL, 0x2, "Z", NULL, NULL,  },
    { "strictEscapeSyntax_", NULL, 0x0, "Z", NULL, NULL,  },
    { "onlyTextOutput_", NULL, 0x0, "Z", NULL, NULL,  },
    { "squBracTagSyntax_", NULL, 0x0, "Z", NULL, NULL,  },
    { "autodetectTagSyntax_", NULL, 0x0, "Z", NULL, NULL,  },
    { "directiveSyntaxEstablished_", NULL, 0x0, "Z", NULL, NULL,  },
    { "inInvocation_", NULL, 0x0, "Z", NULL, NULL,  },
    { "initialNamingConvention_", NULL, 0x0, "I", NULL, NULL,  },
    { "namingConvention_", NULL, 0x0, "I", NULL, NULL,  },
    { "namingConventionEstabilisher_", NULL, 0x0, "Lfreemarker.core.Token;", NULL, NULL,  },
    { "incompatibleImprovements_", NULL, 0x0, "I", NULL, NULL,  },
    { "debugStream_", NULL, 0x1, "Ljava.io.PrintStream;", NULL, NULL,  },
    { "jjbitVec0_", NULL, 0x18, "[J", &FreemarkerCoreFMParserTokenManager_jjbitVec0_, NULL,  },
    { "jjbitVec2_", NULL, 0x18, "[J", &FreemarkerCoreFMParserTokenManager_jjbitVec2_, NULL,  },
    { "jjbitVec3_", NULL, 0x18, "[J", &FreemarkerCoreFMParserTokenManager_jjbitVec3_, NULL,  },
    { "jjbitVec4_", NULL, 0x18, "[J", &FreemarkerCoreFMParserTokenManager_jjbitVec4_, NULL,  },
    { "jjbitVec5_", NULL, 0x18, "[J", &FreemarkerCoreFMParserTokenManager_jjbitVec5_, NULL,  },
    { "jjbitVec6_", NULL, 0x18, "[J", &FreemarkerCoreFMParserTokenManager_jjbitVec6_, NULL,  },
    { "jjbitVec7_", NULL, 0x18, "[J", &FreemarkerCoreFMParserTokenManager_jjbitVec7_, NULL,  },
    { "jjbitVec8_", NULL, 0x18, "[J", &FreemarkerCoreFMParserTokenManager_jjbitVec8_, NULL,  },
    { "jjbitVec9_", NULL, 0x18, "[J", &FreemarkerCoreFMParserTokenManager_jjbitVec9_, NULL,  },
    { "jjbitVec10_", NULL, 0x18, "[J", &FreemarkerCoreFMParserTokenManager_jjbitVec10_, NULL,  },
    { "jjbitVec11_", NULL, 0x18, "[J", &FreemarkerCoreFMParserTokenManager_jjbitVec11_, NULL,  },
    { "jjbitVec12_", NULL, 0x18, "[J", &FreemarkerCoreFMParserTokenManager_jjbitVec12_, NULL,  },
    { "jjbitVec13_", NULL, 0x18, "[J", &FreemarkerCoreFMParserTokenManager_jjbitVec13_, NULL,  },
    { "jjbitVec14_", NULL, 0x18, "[J", &FreemarkerCoreFMParserTokenManager_jjbitVec14_, NULL,  },
    { "jjbitVec15_", NULL, 0x18, "[J", &FreemarkerCoreFMParserTokenManager_jjbitVec15_, NULL,  },
    { "jjbitVec16_", NULL, 0x18, "[J", &FreemarkerCoreFMParserTokenManager_jjbitVec16_, NULL,  },
    { "jjbitVec17_", NULL, 0x18, "[J", &FreemarkerCoreFMParserTokenManager_jjbitVec17_, NULL,  },
    { "jjbitVec18_", NULL, 0x18, "[J", &FreemarkerCoreFMParserTokenManager_jjbitVec18_, NULL,  },
    { "jjbitVec19_", NULL, 0x18, "[J", &FreemarkerCoreFMParserTokenManager_jjbitVec19_, NULL,  },
    { "jjbitVec20_", NULL, 0x18, "[J", &FreemarkerCoreFMParserTokenManager_jjbitVec20_, NULL,  },
    { "jjbitVec21_", NULL, 0x18, "[J", &FreemarkerCoreFMParserTokenManager_jjbitVec21_, NULL,  },
    { "jjbitVec22_", NULL, 0x18, "[J", &FreemarkerCoreFMParserTokenManager_jjbitVec22_, NULL,  },
    { "jjbitVec23_", NULL, 0x18, "[J", &FreemarkerCoreFMParserTokenManager_jjbitVec23_, NULL,  },
    { "jjbitVec24_", NULL, 0x18, "[J", &FreemarkerCoreFMParserTokenManager_jjbitVec24_, NULL,  },
    { "jjbitVec25_", NULL, 0x18, "[J", &FreemarkerCoreFMParserTokenManager_jjbitVec25_, NULL,  },
    { "jjnextStates_", NULL, 0x18, "[I", &FreemarkerCoreFMParserTokenManager_jjnextStates_, NULL,  },
    { "jjstrLiteralImages_", NULL, 0x19, "[Ljava.lang.String;", &FreemarkerCoreFMParserTokenManager_jjstrLiteralImages_, NULL,  },
    { "curLexState_", NULL, 0x0, "I", NULL, NULL,  },
    { "defaultLexState_", NULL, 0x0, "I", NULL, NULL,  },
    { "jjnewStateCnt_", NULL, 0x0, "I", NULL, NULL,  },
    { "jjround_", NULL, 0x0, "I", NULL, NULL,  },
    { "jjmatchedPos_", NULL, 0x0, "I", NULL, NULL,  },
    { "jjmatchedKind_", NULL, 0x0, "I", NULL, NULL,  },
    { "lexStateNames_", NULL, 0x19, "[Ljava.lang.String;", &FreemarkerCoreFMParserTokenManager_lexStateNames_, NULL,  },
    { "jjnewLexState_", NULL, 0x19, "[I", &FreemarkerCoreFMParserTokenManager_jjnewLexState_, NULL,  },
    { "jjtoToken_", NULL, 0x18, "[J", &FreemarkerCoreFMParserTokenManager_jjtoToken_, NULL,  },
    { "jjtoSkip_", NULL, 0x18, "[J", &FreemarkerCoreFMParserTokenManager_jjtoSkip_, NULL,  },
    { "input_stream_", NULL, 0x4, "Lfreemarker.core.SimpleCharStream;", NULL, NULL,  },
    { "jjrounds_", NULL, 0x12, "[I", NULL, NULL,  },
    { "jjstateSet_", NULL, 0x12, "[I", NULL, NULL,  },
    { "jjimage_", NULL, 0x12, "Ljava.lang.StringBuilder;", NULL, NULL,  },
    { "image_", NULL, 0x2, "Ljava.lang.StringBuilder;", NULL, NULL,  },
    { "jjimageLen_", NULL, 0x2, "I", NULL, NULL,  },
    { "lengthOfMatch_", NULL, 0x2, "I", NULL, NULL,  },
    { "curChar_", NULL, 0x4, "C", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerCoreFMParserTokenManager = { 2, "FMParserTokenManager", "freemarker.core", NULL, 0x1, 86, methods, 63, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerCoreFMParserTokenManager;
}

@end


#line 56
void FreemarkerCoreFMParserTokenManager_strictSyntaxCheckWithFreemarkerCoreToken_withInt_withInt_(FreemarkerCoreFMParserTokenManager *self, FreemarkerCoreToken *tok, jint tokenNamingConvention, jint newLexState) {
  if (self->onlyTextOutput_) {
    ((FreemarkerCoreToken *) nil_chk(tok))->kind_ = FreemarkerCoreFMParserConstants_STATIC_TEXT_NON_WS;
    return;
  }
  
#line 62
  NSString *image = ((FreemarkerCoreToken *) nil_chk(tok))->image_;
  
#line 66
  if (!self->strictEscapeSyntax_ &&
#line 67
  (tokenNamingConvention == FreemarkerTemplateConfiguration_CAMEL_CASE_NAMING_CONVENTION) &&
#line 68
  !FreemarkerCoreFMParserTokenManager_isStrictTagWithNSString_(self, image)) {
    tok->kind_ = FreemarkerCoreFMParserConstants_STATIC_TEXT_NON_WS;
    return;
  }
  
#line 73
  jchar firstChar = [((NSString *) nil_chk(image)) charAtWithInt:0];
  if (self->autodetectTagSyntax_ && !self->directiveSyntaxEstablished_) {
    self->squBracTagSyntax_ = (firstChar == '[');
  }
  if ((firstChar == '[' && !self->squBracTagSyntax_) || (firstChar == '<' && self->squBracTagSyntax_)) {
    tok->kind_ = FreemarkerCoreFMParserConstants_STATIC_TEXT_NON_WS;
    return;
  }
  
#line 82
  if (!self->strictEscapeSyntax_) {
    
#line 85
    [self checkNamingConventionWithFreemarkerCoreToken:tok withInt:tokenNamingConvention];
    [self SwitchToWithInt:newLexState];
    return;
  }
  
#line 93
  if (!self->squBracTagSyntax_ && !FreemarkerCoreFMParserTokenManager_isStrictTagWithNSString_(self, image)) {
    tok->kind_ = FreemarkerCoreFMParserConstants_STATIC_TEXT_NON_WS;
    return;
  }
  
#line 99
  self->directiveSyntaxEstablished_ = YES;
  
#line 101
  [self checkNamingConventionWithFreemarkerCoreToken:tok withInt:tokenNamingConvention];
  
#line 103
  [self SwitchToWithInt:newLexState];
}


#line 121
FreemarkerCoreTokenMgrError *FreemarkerCoreFMParserTokenManager_newNameConventionMismatchExceptionWithFreemarkerCoreToken_(FreemarkerCoreFMParserTokenManager *self, FreemarkerCoreToken *tok) {
  return new_FreemarkerCoreTokenMgrError_initWithNSString_withInt_withInt_withInt_withInt_withInt_(JreStrcat("$$$$$$$", @"Naming convention mismatch. Identifiers that are part of the template language (not the user specified ones) ",
#line 125
  (self->initialNamingConvention_ == FreemarkerTemplateConfiguration_AUTO_DETECT_NAMING_CONVENTION ?
#line 126
  @"must consistently use the same naming convention within the same template. This template uses " :
#line 127
  @"must use the configured naming convention, which is the "),
#line 128
  (self->namingConvention_ == FreemarkerTemplateConfiguration_CAMEL_CASE_NAMING_CONVENTION ?
#line 129
  @"camel case naming convention (like: exampleName) " :
#line 130
  (self->namingConvention_ == FreemarkerTemplateConfiguration_LEGACY_NAMING_CONVENTION ? @"legacy naming convention (directive (tag) names are like examplename, everything else is like example_name) " :
#line 133
  @"??? (internal error)")),
#line 135
  (self->namingConventionEstabilisher_ != nil ? JreStrcat("$$$$", @"estabilished by auto-detection at ", FreemarkerCoreMessageUtil_formatPositionWithInt_withInt_(
#line 138
  self->namingConventionEstabilisher_->beginLine_, self->namingConventionEstabilisher_->beginColumn_), @" by token ", FreemarkerTemplateUtilityStringUtil_jQuoteWithNSString_(
#line 139
  [((NSString *) nil_chk(self->namingConventionEstabilisher_->image_)) trim])) :
#line 140
  @""), @", but the problematic token, ", FreemarkerTemplateUtilityStringUtil_jQuoteWithNSString_(
#line 141
  [((NSString *) nil_chk(((FreemarkerCoreToken *) nil_chk(tok))->image_)) trim]), @", uses a different convention."),
#line 143
  FreemarkerCoreTokenMgrError_LEXICAL_ERROR,
#line 144
  tok->beginLine_, tok->beginColumn_, tok->endLine_, tok->endColumn_);
}


#line 150
void FreemarkerCoreFMParserTokenManager_strictSyntaxCheckWithFreemarkerCoreToken_withInt_(FreemarkerCoreFMParserTokenManager *self, FreemarkerCoreToken *tok, jint newLexState) {
  FreemarkerCoreFMParserTokenManager_strictSyntaxCheckWithFreemarkerCoreToken_withInt_withInt_(self, tok, FreemarkerTemplateConfiguration_AUTO_DETECT_NAMING_CONVENTION, newLexState);
}

jboolean FreemarkerCoreFMParserTokenManager_isStrictTagWithNSString_(FreemarkerCoreFMParserTokenManager *self, NSString *image) {
  return ((jint) [((NSString *) nil_chk(image)) length]) > 2 && ([image charAtWithInt:1] == '#' || [image charAtWithInt:2] == '#');
}


#line 164
jint FreemarkerCoreFMParserTokenManager_getTagNamingConventionWithFreemarkerCoreToken_withInt_(FreemarkerCoreToken *tok, jint charIdxInName) {
  FreemarkerCoreFMParserTokenManager_initialize();
  
#line 165
  return FreemarkerCore_CoreStringUtils_isUpperUSASCIIWithChar_(FreemarkerCoreFMParserTokenManager_getTagNameCharAtWithFreemarkerCoreToken_withInt_(tok, charIdxInName)) ?
#line 166
  FreemarkerTemplateConfiguration_CAMEL_CASE_NAMING_CONVENTION : FreemarkerTemplateConfiguration_LEGACY_NAMING_CONVENTION;
}


#line 169
jchar FreemarkerCoreFMParserTokenManager_getTagNameCharAtWithFreemarkerCoreToken_withInt_(FreemarkerCoreToken *tok, jint charIdxInName) {
  FreemarkerCoreFMParserTokenManager_initialize();
  
#line 170
  NSString *image = ((FreemarkerCoreToken *) nil_chk(tok))->image_;
  
#line 173
  jint idx = 0;
  for (; ; ) {
    jchar c = [((NSString *) nil_chk(image)) charAtWithInt:idx];
    if (c != '<' && c != '[' && c != '/' && c != '#') {
      break;
    }
    idx++;
  }
  
#line 182
  return [((NSString *) nil_chk(image)) charAtWithInt:idx + charIdxInName];
}


#line 185
void FreemarkerCoreFMParserTokenManager_unifiedCallWithFreemarkerCoreToken_(FreemarkerCoreFMParserTokenManager *self, FreemarkerCoreToken *tok) {
  jchar firstChar = [((NSString *) nil_chk(((FreemarkerCoreToken *) nil_chk(tok))->image_)) charAtWithInt:0];
  if (self->autodetectTagSyntax_ && !self->directiveSyntaxEstablished_) {
    self->squBracTagSyntax_ = (firstChar == '[');
  }
  if (self->squBracTagSyntax_ && firstChar == '<') {
    tok->kind_ = FreemarkerCoreFMParserConstants_STATIC_TEXT_NON_WS;
    return;
  }
  if (!self->squBracTagSyntax_ && firstChar == '[') {
    tok->kind_ = FreemarkerCoreFMParserConstants_STATIC_TEXT_NON_WS;
    return;
  }
  self->directiveSyntaxEstablished_ = YES;
  [self SwitchToWithInt:FreemarkerCoreFMParserConstants_NO_SPACE_EXPRESSION];
}

void FreemarkerCoreFMParserTokenManager_unifiedCallEndWithFreemarkerCoreToken_(FreemarkerCoreFMParserTokenManager *self, FreemarkerCoreToken *tok) {
  jchar firstChar = [((NSString *) nil_chk(((FreemarkerCoreToken *) nil_chk(tok))->image_)) charAtWithInt:0];
  if (self->squBracTagSyntax_ && firstChar == '<') {
    tok->kind_ = FreemarkerCoreFMParserConstants_STATIC_TEXT_NON_WS;
    return;
  }
  if (!self->squBracTagSyntax_ && firstChar == '[') {
    tok->kind_ = FreemarkerCoreFMParserConstants_STATIC_TEXT_NON_WS;
    return;
  }
}

void FreemarkerCoreFMParserTokenManager_closeBracketWithFreemarkerCoreToken_(FreemarkerCoreFMParserTokenManager *self, FreemarkerCoreToken *tok) {
  if (self->bracketNesting_ > 0) {
    --self->bracketNesting_;
  }
  else {
    
#line 218
    ((FreemarkerCoreToken *) nil_chk(tok))->kind_ = FreemarkerCoreFMParserConstants_DIRECTIVE_END;
    if (self->inFTLHeader_) {
      FreemarkerCoreFMParserTokenManager_eatNewline(self);
      self->inFTLHeader_ = NO;
    }
    [self SwitchToWithInt:FreemarkerCoreFMParserConstants_DEFAULT];
  }
}


#line 227
void FreemarkerCoreFMParserTokenManager_eatNewline(FreemarkerCoreFMParserTokenManager *self) {
  jint charsRead = 0;
  @try {
    while (YES) {
      jchar c = [((FreemarkerCoreSimpleCharStream *) nil_chk(self->input_stream_)) readChar];
      ++charsRead;
      if (!JavaLangCharacter_isWhitespaceWithChar_(c)) {
        [self->input_stream_ backupWithInt:charsRead];
        return;
      }
      else
#line 236
      if (c == 0x000d) {
        jchar next = [self->input_stream_ readChar];
        ++charsRead;
        if (next != 0x000a) {
          [self->input_stream_ backupWithInt:1];
        }
        return;
      }
      else
#line 243
      if (c == 0x000a) {
        return;
      }
    }
  }
  @catch (
#line 247
  JavaIoIOException *ioe) {
    [((FreemarkerCoreSimpleCharStream *) nil_chk(self->input_stream_)) backupWithInt:charsRead];
  }
}


#line 252
void FreemarkerCoreFMParserTokenManager_ftlHeaderWithFreemarkerCoreToken_(FreemarkerCoreFMParserTokenManager *self, FreemarkerCoreToken *matchedToken) {
  if (!self->directiveSyntaxEstablished_) {
    self->squBracTagSyntax_ = ([((NSString *) nil_chk(((FreemarkerCoreToken *) nil_chk(matchedToken))->image_)) charAtWithInt:0] == '[');
    self->directiveSyntaxEstablished_ = YES;
    self->autodetectTagSyntax_ = NO;
  }
  NSString *img = ((FreemarkerCoreToken *) nil_chk(matchedToken))->image_;
  jchar firstChar = [((NSString *) nil_chk(img)) charAtWithInt:0];
  jchar lastChar = [img charAtWithInt:((jint) [img length]) - 1];
  if ((firstChar == '[' && !self->squBracTagSyntax_) || (firstChar == '<' && self->squBracTagSyntax_)) {
    matchedToken->kind_ = FreemarkerCoreFMParserConstants_STATIC_TEXT_NON_WS;
  }
  if (matchedToken->kind_ != FreemarkerCoreFMParserConstants_STATIC_TEXT_NON_WS) {
    if (lastChar != '>' && lastChar != ']') {
      [self SwitchToWithInt:FreemarkerCoreFMParserConstants_FM_EXPRESSION];
      self->inFTLHeader_ = YES;
    }
    else {
      
#line 269
      FreemarkerCoreFMParserTokenManager_eatNewline(self);
    }
  }
}


#line 278
jint FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa0_7(FreemarkerCoreFMParserTokenManager *self) {
  
#line 280
  return FreemarkerCoreFMParserTokenManager_jjMoveNfa_7WithInt_withInt_(self, 0, 0);
}


#line 288
jint FreemarkerCoreFMParserTokenManager_jjMoveNfa_7WithInt_withInt_(FreemarkerCoreFMParserTokenManager *self, jint startState, jint curPos) {
  
#line 290
  jint startsAt = 0;
  self->jjnewStateCnt_ = 13;
  jint i = 1;
  *IOSIntArray_GetRef(nil_chk(self->jjstateSet_), 0) = startState;
  jint kind = (jint) 0x7fffffff;
  for (; ; ) {
    
#line 297
    if (++self->jjround_ == (jint) 0x7fffffff)
#line 298
    FreemarkerCoreFMParserTokenManager_ReInitRounds(self);
    if (self->curChar_ < 64) {
      
#line 301
      jlong l = LShift64(1LL, self->curChar_);
      do {
        
#line 304
        switch (IOSIntArray_Get(self->jjstateSet_, --i)) {
          
#line 306
          case 0:
          if (((jlong) 0xefffdfffffffffffLL & l) != 0LL) {
            
#line 309
            if (kind > 147)
#line 310
            kind = 147;
            {
              
#line 311
              FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 6);
            }
          }
          else
#line 313
          if (((jlong) 0x1000200000000000LL & l) != 0LL) {
            
#line 315
            if (kind > 148)
#line 316
            kind = 148;
          }
          if (self->curChar_ == 45) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 0, 1);
          }
          else
#line 320
          if (self->curChar_ == 60)
#line 321
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 1;
          break;
          case 1:
          if (self->curChar_ == 47) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddTwoStatesWithInt_withInt_(self, 2, 3);
          }
          
#line 326
          break;
          case 2:
          if (self->curChar_ == 35) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 3);
          }
          
#line 330
          break;
          case 4:
          if (((jlong) 0x100002600LL & l) != 0LL) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 2, 3);
          }
          
#line 334
          break;
          case 5:
          if (self->curChar_ == 62 && kind > 146)
#line 337
          kind = 146;
          break;
          case 6:
          if (((jlong) 0xefffdfffffffffffLL & l) == 0LL)
#line 341
          break;
          if (kind > 147)
#line 343
          kind = 147;
          {
            
#line 344
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 6);
          }
          
#line 345
          break;
          case 7:
          if (((jlong) 0x1000200000000000LL & l) != 0LL && kind > 148)
#line 348
          kind = 148;
          break;
          case 8:
          if (self->curChar_ == 45) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 0, 1);
          }
          
#line 353
          break;
          case 9:
          if (self->curChar_ == 62 && kind > 145)
#line 356
          kind = 145;
          break;
          case 10:
          if (self->curChar_ == 45)
#line 360
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 9;
          break;
          case 12:
          if (self->curChar_ == 45)
#line 364
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 11;
          break;
          default:
          
#line 366
          break;
        }
      }
      while (
#line 368
      i != startsAt);
    }
    else if (self->curChar_ < 128) {
      
#line 372
      jlong l = LShift64(1LL, (self->curChar_ & 077));
      do {
        
#line 375
        switch (IOSIntArray_Get(self->jjstateSet_, --i)) {
          
#line 377
          case 0:
          if (((jlong) 0xfffffffff7ffffffLL & l) != 0LL) {
            
#line 380
            if (kind > 147)
#line 381
            kind = 147;
            {
              
#line 382
              FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 6);
            }
          }
          else
#line 384
          if (self->curChar_ == 91) {
            
#line 386
            if (kind > 148)
#line 387
            kind = 148;
          }
          if (self->curChar_ == 91)
#line 390
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 1;
          break;
          case 3:
          if (((jlong) 0x7fffffe07fffffeLL & l) != 0LL) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 4, 6);
          }
          
#line 395
          break;
          case 5:
          if (self->curChar_ == 93 && kind > 146)
#line 398
          kind = 146;
          break;
          case 6:
          if (((jlong) 0xfffffffff7ffffffLL & l) == 0LL)
#line 402
          break;
          if (kind > 147)
#line 404
          kind = 147;
          {
            
#line 405
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 6);
          }
          
#line 406
          break;
          case 7:
          if (self->curChar_ == 91 && kind > 148)
#line 409
          kind = 148;
          break;
          case 11:
          if (self->curChar_ == 93 && kind > 145)
#line 413
          kind = 145;
          break;
          default:
          
#line 415
          break;
        }
      }
      while (
#line 417
      i != startsAt);
    }
    else {
      
#line 421
      jint hiByte = (RShift32(self->curChar_, 8));
      jint i1 = RShift32(hiByte, 6);
      jlong l1 = LShift64(1LL, (hiByte & 077));
      jint i2 = RShift32((self->curChar_ & (jint) 0xff), 6);
      jlong l2 = LShift64(1LL, (self->curChar_ & 077));
      do {
        
#line 428
        switch (IOSIntArray_Get(self->jjstateSet_, --i)) {
          
#line 430
          case 0:
          case 6:
          if (!FreemarkerCoreFMParserTokenManager_jjCanMove_0WithInt_withInt_withInt_withLong_withLong_(hiByte, i1, i2, l1, l2))
#line 433
          break;
          if (kind > 147)
#line 435
          kind = 147;
          {
            
#line 436
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 6);
          }
          
#line 437
          break;
          default:
          
#line 438
          if (i1 == 0 || l1 == 0 || i2 == 0 || l2 == 0) break;
          else
#line 438
          break;
        }
      }
      while (
#line 440
      i != startsAt);
    }
    if (kind != (jint) 0x7fffffff) {
      
#line 444
      self->jjmatchedKind_ = kind;
      self->jjmatchedPos_ = curPos;
      kind = (jint) 0x7fffffff;
    }
    ++curPos;
    jint unseq$1 = self->jjnewStateCnt_;
    
#line 449
    if ((i = unseq$1) == (startsAt = 13 - (self->jjnewStateCnt_ = startsAt)))
#line 450
    return curPos;
    @try {
      
#line 451
      self->curChar_ = [((FreemarkerCoreSimpleCharStream *) nil_chk(self->input_stream_)) readChar];
    }
    @catch (
#line 452
    JavaIoIOException *e) {
      
#line 452
      return curPos;
    }
  }
}


#line 455
jint FreemarkerCoreFMParserTokenManager_jjStopStringLiteralDfa_1WithInt_withLong_withLong_(FreemarkerCoreFMParserTokenManager *self, jint pos, jlong active0, jlong active1) {
  switch (pos) {
    
#line 458
    case 0:
    if ((active1 & (jlong) 0x1800LL) != 0LL) {
      
#line 461
      self->jjmatchedKind_ = 74;
      return -1;
    }
    return -1;
    default:
    return -1;
  }
}


#line 469
jint FreemarkerCoreFMParserTokenManager_jjStartNfa_1WithInt_withLong_withLong_(FreemarkerCoreFMParserTokenManager *self, jint pos, jlong active0, jlong active1) {
  return FreemarkerCoreFMParserTokenManager_jjMoveNfa_1WithInt_withInt_(self, FreemarkerCoreFMParserTokenManager_jjStopStringLiteralDfa_1WithInt_withLong_withLong_(self, pos, active0, active1), pos + 1);
}


#line 472
jint FreemarkerCoreFMParserTokenManager_jjStopAtPosWithInt_withInt_(FreemarkerCoreFMParserTokenManager *self, jint pos, jint kind) {
  
#line 474
  self->jjmatchedKind_ = kind;
  self->jjmatchedPos_ = pos;
  return pos + 1;
}


#line 478
jint FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa0_1(FreemarkerCoreFMParserTokenManager *self) {
  switch (self->curChar_) {
    
#line 481
    case 35:
    return FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa1_1WithLong_(self, (jlong) 0x1000LL);
    case 36:
    return FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa1_1WithLong_(self, (jlong) 0x800LL);
    default:
    return FreemarkerCoreFMParserTokenManager_jjMoveNfa_1WithInt_withInt_(self, 2, 0);
  }
}


#line 489
jint FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa1_1WithLong_(FreemarkerCoreFMParserTokenManager *self, jlong active1) {
  @try {
    
#line 490
    self->curChar_ = [((FreemarkerCoreSimpleCharStream *) nil_chk(self->input_stream_)) readChar];
  }
  @catch (
#line 491
  JavaIoIOException *e) {
    FreemarkerCoreFMParserTokenManager_jjStopStringLiteralDfa_1WithInt_withLong_withLong_(self, 0, 0LL, active1);
    return 1;
  }
  switch (self->curChar_) {
    
#line 497
    case 123:
    if ((active1 & (jlong) 0x800LL) != 0LL)
#line 499
    return FreemarkerCoreFMParserTokenManager_jjStopAtPosWithInt_withInt_(self, 1, 75);
    else if ((active1 & (jlong) 0x1000LL) != 0LL)
#line 501
    return FreemarkerCoreFMParserTokenManager_jjStopAtPosWithInt_withInt_(self, 1, 76);
    break;
    default:
    break;
  }
  return FreemarkerCoreFMParserTokenManager_jjStartNfa_1WithInt_withLong_withLong_(self, 0, 0LL, active1);
}


#line 508
jint FreemarkerCoreFMParserTokenManager_jjMoveNfa_1WithInt_withInt_(FreemarkerCoreFMParserTokenManager *self, jint startState, jint curPos) {
  
#line 510
  jint startsAt = 0;
  self->jjnewStateCnt_ = 3;
  jint i = 1;
  *IOSIntArray_GetRef(nil_chk(self->jjstateSet_), 0) = startState;
  jint kind = (jint) 0x7fffffff;
  for (; ; ) {
    
#line 517
    if (++self->jjround_ == (jint) 0x7fffffff)
#line 518
    FreemarkerCoreFMParserTokenManager_ReInitRounds(self);
    if (self->curChar_ < 64) {
      
#line 521
      jlong l = LShift64(1LL, self->curChar_);
      do {
        
#line 524
        switch (IOSIntArray_Get(self->jjstateSet_, --i)) {
          
#line 526
          case 2:
          if (((jlong) 0xefffffe6ffffd9ffLL & l) != 0LL) {
            
#line 529
            if (kind > 73)
#line 530
            kind = 73;
            {
              
#line 531
              FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 1);
            }
          }
          else
#line 533
          if (((jlong) 0x100002600LL & l) != 0LL) {
            
#line 535
            if (kind > 72)
#line 536
            kind = 72;
            {
              
#line 537
              FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 0);
            }
          }
          else
#line 539
          if (((jlong) 0x1000001800000000LL & l) != 0LL) {
            
#line 541
            if (kind > 74)
#line 542
            kind = 74;
          }
          break;
          case 0:
          if (((jlong) 0x100002600LL & l) == 0LL)
#line 547
          break;
          kind = 72;
          {
            
#line 549
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 0);
          }
          
#line 550
          break;
          case 1:
          if (((jlong) 0xefffffe6ffffd9ffLL & l) == 0LL)
#line 553
          break;
          kind = 73;
          {
            
#line 555
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 1);
          }
          
#line 556
          break;
          default:
          
#line 557
          break;
        }
      }
      while (
#line 559
      i != startsAt);
    }
    else if (self->curChar_ < 128) {
      
#line 563
      jlong l = LShift64(1LL, (self->curChar_ & 077));
      do {
        
#line 566
        switch (IOSIntArray_Get(self->jjstateSet_, --i)) {
          
#line 568
          case 2:
          if (((jlong) 0xf7fffffff7ffffffLL & l) != 0LL) {
            
#line 571
            if (kind > 73)
#line 572
            kind = 73;
            {
              
#line 573
              FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 1);
            }
          }
          else
#line 575
          if (((jlong) 0x800000008000000LL & l) != 0LL) {
            
#line 577
            if (kind > 74)
#line 578
            kind = 74;
          }
          break;
          case 1:
          if (((jlong) 0xf7fffffff7ffffffLL & l) == 0LL)
#line 583
          break;
          kind = 73;
          {
            
#line 585
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 1);
          }
          
#line 586
          break;
          default:
          
#line 587
          break;
        }
      }
      while (
#line 589
      i != startsAt);
    }
    else {
      
#line 593
      jint hiByte = (RShift32(self->curChar_, 8));
      jint i1 = RShift32(hiByte, 6);
      jlong l1 = LShift64(1LL, (hiByte & 077));
      jint i2 = RShift32((self->curChar_ & (jint) 0xff), 6);
      jlong l2 = LShift64(1LL, (self->curChar_ & 077));
      do {
        
#line 600
        switch (IOSIntArray_Get(self->jjstateSet_, --i)) {
          
#line 602
          case 2:
          case 1:
          if (!FreemarkerCoreFMParserTokenManager_jjCanMove_0WithInt_withInt_withInt_withLong_withLong_(hiByte, i1, i2, l1, l2))
#line 605
          break;
          if (kind > 73)
#line 607
          kind = 73;
          {
            
#line 608
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 1);
          }
          
#line 609
          break;
          default:
          
#line 610
          if (i1 == 0 || l1 == 0 || i2 == 0 || l2 == 0) break;
          else
#line 610
          break;
        }
      }
      while (
#line 612
      i != startsAt);
    }
    if (kind != (jint) 0x7fffffff) {
      
#line 616
      self->jjmatchedKind_ = kind;
      self->jjmatchedPos_ = curPos;
      kind = (jint) 0x7fffffff;
    }
    ++curPos;
    jint unseq$1 = self->jjnewStateCnt_;
    
#line 621
    if ((i = unseq$1) == (startsAt = 3 - (self->jjnewStateCnt_ = startsAt)))
#line 622
    return curPos;
    @try {
      
#line 623
      self->curChar_ = [((FreemarkerCoreSimpleCharStream *) nil_chk(self->input_stream_)) readChar];
    }
    @catch (
#line 624
    JavaIoIOException *e) {
      
#line 624
      return curPos;
    }
  }
}


#line 627
jint FreemarkerCoreFMParserTokenManager_jjStopStringLiteralDfa_0WithInt_withLong_withLong_(FreemarkerCoreFMParserTokenManager *self, jint pos, jlong active0, jlong active1) {
  switch (pos) {
    
#line 630
    case 0:
    if ((active1 & (jlong) 0x1800LL) != 0LL) {
      
#line 633
      self->jjmatchedKind_ = 74;
      return -1;
    }
    return -1;
    default:
    return -1;
  }
}


#line 641
jint FreemarkerCoreFMParserTokenManager_jjStartNfa_0WithInt_withLong_withLong_(FreemarkerCoreFMParserTokenManager *self, jint pos, jlong active0, jlong active1) {
  return FreemarkerCoreFMParserTokenManager_jjMoveNfa_0WithInt_withInt_(self, FreemarkerCoreFMParserTokenManager_jjStopStringLiteralDfa_0WithInt_withLong_withLong_(self, pos, active0, active1), pos + 1);
}


#line 644
jint FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa0_0(FreemarkerCoreFMParserTokenManager *self) {
  switch (self->curChar_) {
    
#line 647
    case 35:
    return FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa1_0WithLong_(self, (jlong) 0x1000LL);
    case 36:
    return FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa1_0WithLong_(self, (jlong) 0x800LL);
    default:
    return FreemarkerCoreFMParserTokenManager_jjMoveNfa_0WithInt_withInt_(self, 2, 0);
  }
}


#line 655
jint FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa1_0WithLong_(FreemarkerCoreFMParserTokenManager *self, jlong active1) {
  @try {
    
#line 656
    self->curChar_ = [((FreemarkerCoreSimpleCharStream *) nil_chk(self->input_stream_)) readChar];
  }
  @catch (
#line 657
  JavaIoIOException *e) {
    FreemarkerCoreFMParserTokenManager_jjStopStringLiteralDfa_0WithInt_withLong_withLong_(self, 0, 0LL, active1);
    return 1;
  }
  switch (self->curChar_) {
    
#line 663
    case 123:
    if ((active1 & (jlong) 0x800LL) != 0LL)
#line 665
    return FreemarkerCoreFMParserTokenManager_jjStopAtPosWithInt_withInt_(self, 1, 75);
    else if ((active1 & (jlong) 0x1000LL) != 0LL)
#line 667
    return FreemarkerCoreFMParserTokenManager_jjStopAtPosWithInt_withInt_(self, 1, 76);
    break;
    default:
    break;
  }
  return FreemarkerCoreFMParserTokenManager_jjStartNfa_0WithInt_withLong_withLong_(self, 0, 0LL, active1);
}


#line 743
jint FreemarkerCoreFMParserTokenManager_jjMoveNfa_0WithInt_withInt_(FreemarkerCoreFMParserTokenManager *self, jint startState, jint curPos) {
  
#line 745
  jint startsAt = 0;
  self->jjnewStateCnt_ = 609;
  jint i = 1;
  *IOSIntArray_GetRef(nil_chk(self->jjstateSet_), 0) = startState;
  jint kind = (jint) 0x7fffffff;
  for (; ; ) {
    
#line 752
    if (++self->jjround_ == (jint) 0x7fffffff)
#line 753
    FreemarkerCoreFMParserTokenManager_ReInitRounds(self);
    if (self->curChar_ < 64) {
      
#line 756
      jlong l = LShift64(1LL, self->curChar_);
      do {
        
#line 759
        switch (IOSIntArray_Get(self->jjstateSet_, --i)) {
          
#line 761
          case 2:
          if (((jlong) 0xefffffe6ffffd9ffLL & l) != 0LL) {
            
#line 764
            if (kind > 73)
#line 765
            kind = 73;
            {
              
#line 766
              FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 1);
            }
          }
          else
#line 768
          if (((jlong) 0x100002600LL & l) != 0LL) {
            
#line 770
            if (kind > 72)
#line 771
            kind = 72;
            {
              
#line 772
              FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 0);
            }
          }
          else
#line 774
          if (((jlong) 0x1000001800000000LL & l) != 0LL) {
            
#line 776
            if (kind > 74)
#line 777
            kind = 74;
          }
          if (self->curChar_ == 60) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 7, 8);
          }
          
#line 781
          if (self->curChar_ == 60) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddStatesWithInt_withInt_(self, 9, 90);
          }
          
#line 783
          if (self->curChar_ == 60) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddStatesWithInt_withInt_(self, 91, 133);
          }
          
#line 785
          break;
          case 0:
          if (((jlong) 0x100002600LL & l) == 0LL)
#line 788
          break;
          if (kind > 72)
#line 790
          kind = 72;
          {
            
#line 791
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 0);
          }
          
#line 792
          break;
          case 1:
          if (((jlong) 0xefffffe6ffffd9ffLL & l) == 0LL)
#line 795
          break;
          if (kind > 73)
#line 797
          kind = 73;
          {
            
#line 798
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 1);
          }
          
#line 799
          break;
          case 3:
          if (self->curChar_ == 60) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddStatesWithInt_withInt_(self, 91, 133);
          }
          
#line 803
          break;
          case 5:
          if (((jlong) 0x100002600LL & l) != 0LL) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 134, 135);
          }
          
#line 807
          break;
          case 6:
          if (self->curChar_ == 62 && kind > 6)
#line 810
          kind = 6;
          break;
          case 14:
          if (((jlong) 0x100002600LL & l) != 0LL) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 136, 137);
          }
          
#line 815
          break;
          case 15:
          if (self->curChar_ == 62 && kind > 7)
#line 818
          kind = 7;
          break;
          case 23:
          if (((jlong) 0x100002600LL & l) != 0LL && kind > 8)
#line 822
          kind = 8;
          break;
          case 28:
          if (((jlong) 0x100002600LL & l) != 0LL && kind > 9)
#line 826
          kind = 9;
          break;
          case 33:
          if (((jlong) 0x100002600LL & l) != 0LL && kind > 10)
#line 830
          kind = 10;
          break;
          case 38:
          if (((jlong) 0x100002600LL & l) != 0LL) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 138, 139);
          }
          
#line 835
          break;
          case 40:
          if (((jlong) 0x100002600LL & l) != 0LL && kind > 11)
#line 838
          kind = 11;
          break;
          case 47:
          if (((jlong) 0x100002600LL & l) != 0LL) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 140, 141);
          }
          
#line 843
          break;
          case 48:
          if (self->curChar_ == 62 && kind > 12)
#line 846
          kind = 12;
          break;
          case 54:
          if (((jlong) 0x100002600LL & l) != 0LL && kind > 13)
#line 850
          kind = 13;
          break;
          case 60:
          if (((jlong) 0x100002600LL & l) != 0LL && kind > 14)
#line 854
          kind = 14;
          break;
          case 67:
          if (((jlong) 0x100002600LL & l) != 0LL && kind > 15)
#line 858
          kind = 15;
          break;
          case 72:
          if (((jlong) 0x100002600LL & l) != 0LL && kind > 16)
#line 862
          kind = 16;
          break;
          case 79:
          if (((jlong) 0x100002600LL & l) != 0LL && kind > 17)
#line 866
          kind = 17;
          break;
          case 86:
          if (((jlong) 0x100002600LL & l) != 0LL && kind > 18)
#line 870
          kind = 18;
          break;
          case 92:
          if (((jlong) 0x100002600LL & l) != 0LL && kind > 19)
#line 874
          kind = 19;
          break;
          case 100:
          if (((jlong) 0x100002600LL & l) != 0LL && kind > 20)
#line 878
          kind = 20;
          break;
          case 107:
          if (((jlong) 0x100002600LL & l) != 0LL && kind > 21)
#line 882
          kind = 21;
          break;
          case 116:
          if (((jlong) 0x100002600LL & l) != 0LL && kind > 22)
#line 886
          kind = 22;
          break;
          case 122:
          if (((jlong) 0x100002600LL & l) != 0LL && kind > 23)
#line 890
          kind = 23;
          break;
          case 132:
          if (((jlong) 0x100002600LL & l) != 0LL && kind > 24)
#line 894
          kind = 24;
          break;
          case 138:
          if (((jlong) 0x100002600LL & l) != 0LL && kind > 25)
#line 898
          kind = 25;
          break;
          case 143:
          if (((jlong) 0x100002600LL & l) != 0LL && kind > 26)
#line 902
          kind = 26;
          break;
          case 150:
          if (((jlong) 0x100002600LL & l) != 0LL && kind > 27)
#line 906
          kind = 27;
          break;
          case 155:
          if (((jlong) 0x100002600LL & l) != 0LL && kind > 28)
#line 910
          kind = 28;
          break;
          case 163:
          if (((jlong) 0x100002600LL & l) != 0LL) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 142, 143);
          }
          
#line 915
          break;
          case 164:
          if (self->curChar_ == 62 && kind > 29)
#line 918
          kind = 29;
          break;
          case 173:
          if (((jlong) 0x100002600LL & l) != 0LL) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 144, 145);
          }
          
#line 923
          break;
          case 174:
          if (self->curChar_ == 62 && kind > 30)
#line 926
          kind = 30;
          break;
          case 184:
          if (((jlong) 0x100002600LL & l) != 0LL) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 146, 147);
          }
          
#line 931
          break;
          case 185:
          if (self->curChar_ == 62 && kind > 32)
#line 934
          kind = 32;
          break;
          case 191:
          if (((jlong) 0x100002600LL & l) != 0LL) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddStatesWithInt_withInt_(self, 148, 150);
          }
          
#line 939
          break;
          case 192:
          if (self->curChar_ == 47) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 193);
          }
          
#line 943
          break;
          case 193:
          if (self->curChar_ == 62 && kind > 48)
#line 946
          kind = 48;
          break;
          case 198:
          if (((jlong) 0x100002600LL & l) != 0LL) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddStatesWithInt_withInt_(self, 151, 153);
          }
          
#line 951
          break;
          case 199:
          if (self->curChar_ == 47) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 200);
          }
          
#line 955
          break;
          case 200:
          if (self->curChar_ == 62 && kind > 49)
#line 958
          kind = 49;
          break;
          case 206:
          if (((jlong) 0x100002600LL & l) != 0LL) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddStatesWithInt_withInt_(self, 154, 156);
          }
          
#line 963
          break;
          case 207:
          if (self->curChar_ == 47) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 208);
          }
          
#line 967
          break;
          case 208:
          if (self->curChar_ == 62 && kind > 50)
#line 970
          kind = 50;
          break;
          case 215:
          if (((jlong) 0x100002600LL & l) != 0LL) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddStatesWithInt_withInt_(self, 157, 159);
          }
          
#line 975
          break;
          case 216:
          if (self->curChar_ == 47) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 217);
          }
          
#line 979
          break;
          case 217:
          if (self->curChar_ == 62 && kind > 51)
#line 982
          kind = 51;
          break;
          case 222:
          if (((jlong) 0x100002600LL & l) != 0LL) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddStatesWithInt_withInt_(self, 160, 162);
          }
          
#line 987
          break;
          case 223:
          if (self->curChar_ == 47) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 224);
          }
          
#line 991
          break;
          case 224:
          if (self->curChar_ == 62 && kind > 52)
#line 994
          kind = 52;
          break;
          case 230:
          if (((jlong) 0x100002600LL & l) != 0LL) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddStatesWithInt_withInt_(self, 163, 165);
          }
          
#line 999
          break;
          case 231:
          if (self->curChar_ == 47) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 232);
          }
          
#line 1003
          break;
          case 232:
          if (self->curChar_ == 62 && kind > 53)
#line 1006
          kind = 53;
          break;
          case 234:
          if (((jlong) 0x100002600LL & l) != 0LL) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddStatesWithInt_withInt_(self, 166, 168);
          }
          
#line 1011
          break;
          case 235:
          if (self->curChar_ == 47) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 236);
          }
          
#line 1015
          break;
          case 236:
          if (self->curChar_ == 62 && kind > 54)
#line 1018
          kind = 54;
          break;
          case 239:
          if (((jlong) 0x100002600LL & l) != 0LL) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddStatesWithInt_withInt_(self, 169, 171);
          }
          
#line 1023
          break;
          case 240:
          if (self->curChar_ == 47) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 241);
          }
          
#line 1027
          break;
          case 241:
          if (self->curChar_ == 62 && kind > 55)
#line 1030
          kind = 55;
          break;
          case 244:
          if (((jlong) 0x100002600LL & l) != 0LL) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddStatesWithInt_withInt_(self, 172, 174);
          }
          
#line 1035
          break;
          case 245:
          if (self->curChar_ == 47) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 246);
          }
          
#line 1039
          break;
          case 246:
          if (self->curChar_ == 62 && kind > 56)
#line 1042
          kind = 56;
          break;
          case 249:
          if (((jlong) 0x100002600LL & l) != 0LL) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 175, 176);
          }
          
#line 1047
          break;
          case 250:
          if (self->curChar_ == 62 && kind > 57)
#line 1050
          kind = 57;
          break;
          case 258:
          if (((jlong) 0x100002600LL & l) != 0LL) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddStatesWithInt_withInt_(self, 177, 179);
          }
          
#line 1055
          break;
          case 259:
          if (self->curChar_ == 47) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 260);
          }
          
#line 1059
          break;
          case 260:
          if (self->curChar_ == 62 && kind > 58)
#line 1062
          kind = 58;
          break;
          case 267:
          if (((jlong) 0x100002600LL & l) != 0LL && kind > 59)
#line 1066
          kind = 59;
          break;
          case 274:
          if (((jlong) 0x100002600LL & l) != 0LL) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddStatesWithInt_withInt_(self, 180, 182);
          }
          
#line 1071
          break;
          case 275:
          if (self->curChar_ == 47) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 276);
          }
          
#line 1075
          break;
          case 276:
          if (self->curChar_ == 62 && kind > 60)
#line 1078
          kind = 60;
          break;
          case 284:
          if (((jlong) 0x100002600LL & l) != 0LL && kind > 61)
#line 1082
          kind = 61;
          break;
          case 292:
          if (((jlong) 0x100002600LL & l) != 0LL) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddStatesWithInt_withInt_(self, 183, 185);
          }
          
#line 1087
          break;
          case 293:
          if (self->curChar_ == 47) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 294);
          }
          
#line 1091
          break;
          case 294:
          if (self->curChar_ == 62 && kind > 62)
#line 1094
          kind = 62;
          break;
          case 303:
          if (((jlong) 0x100002600LL & l) != 0LL && kind > 63)
#line 1098
          kind = 63;
          break;
          case 312:
          if (((jlong) 0x100002600LL & l) != 0LL) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 186, 187);
          }
          
#line 1103
          break;
          case 313:
          if (self->curChar_ == 62 && kind > 65)
#line 1106
          kind = 65;
          break;
          case 319:
          if (self->curChar_ == 60) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddStatesWithInt_withInt_(self, 9, 90);
          }
          
#line 1111
          break;
          case 320:
          if (self->curChar_ == 35) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 12);
          }
          
#line 1115
          break;
          case 321:
          if (self->curChar_ == 35) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 21);
          }
          
#line 1119
          break;
          case 322:
          if (self->curChar_ == 35) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 24);
          }
          
#line 1123
          break;
          case 323:
          if (self->curChar_ == 35) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 31);
          }
          
#line 1127
          break;
          case 324:
          if (self->curChar_ == 35) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 36);
          }
          
#line 1131
          break;
          case 325:
          if (self->curChar_ == 35) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 45);
          }
          
#line 1135
          break;
          case 326:
          if (self->curChar_ == 35) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 50);
          }
          
#line 1139
          break;
          case 327:
          if (self->curChar_ == 35) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 58);
          }
          
#line 1143
          break;
          case 328:
          if (self->curChar_ == 35) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 65);
          }
          
#line 1147
          break;
          case 329:
          if (self->curChar_ == 35) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 70);
          }
          
#line 1151
          break;
          case 330:
          if (self->curChar_ == 35) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 77);
          }
          
#line 1155
          break;
          case 331:
          if (self->curChar_ == 35) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 84);
          }
          
#line 1159
          break;
          case 332:
          if (self->curChar_ == 35) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 90);
          }
          
#line 1163
          break;
          case 333:
          if (self->curChar_ == 35) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 98);
          }
          
#line 1167
          break;
          case 334:
          if (self->curChar_ == 35) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 105);
          }
          
#line 1171
          break;
          case 335:
          if (self->curChar_ == 35) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 114);
          }
          
#line 1175
          break;
          case 336:
          if (self->curChar_ == 35) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 120);
          }
          
#line 1179
          break;
          case 337:
          if (self->curChar_ == 35) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 130);
          }
          
#line 1183
          break;
          case 338:
          if (self->curChar_ == 35) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 136);
          }
          
#line 1187
          break;
          case 339:
          if (self->curChar_ == 35) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 141);
          }
          
#line 1191
          break;
          case 340:
          if (self->curChar_ == 35) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 148);
          }
          
#line 1195
          break;
          case 341:
          if (self->curChar_ == 35) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 153);
          }
          
#line 1199
          break;
          case 342:
          if (self->curChar_ == 35) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 161);
          }
          
#line 1203
          break;
          case 343:
          if (self->curChar_ == 35) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 171);
          }
          
#line 1207
          break;
          case 344:
          if (self->curChar_ == 35) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 180);
          }
          
#line 1211
          break;
          case 345:
          if (self->curChar_ == 35) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 189);
          }
          
#line 1215
          break;
          case 346:
          if (self->curChar_ == 47) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 350);
          }
          
#line 1219
          break;
          case 348:
          if (((jlong) 0x100002600LL & l) != 0LL) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 188, 189);
          }
          
#line 1223
          break;
          case 349:
          if (self->curChar_ == 62 && kind > 33)
#line 1226
          kind = 33;
          break;
          case 351:
          if (self->curChar_ == 35) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 350);
          }
          
#line 1231
          break;
          case 352:
          case 566:
          if (self->curChar_ == 47) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 351);
          }
          
#line 1236
          break;
          case 353:
          if (self->curChar_ == 47) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 359);
          }
          
#line 1240
          break;
          case 355:
          if (((jlong) 0x100002600LL & l) != 0LL) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 190, 191);
          }
          
#line 1244
          break;
          case 356:
          if (self->curChar_ == 62 && kind > 34)
#line 1247
          kind = 34;
          break;
          case 360:
          if (self->curChar_ == 35) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 359);
          }
          
#line 1252
          break;
          case 361:
          case 567:
          if (self->curChar_ == 47) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 360);
          }
          
#line 1257
          break;
          case 362:
          if (self->curChar_ == 47) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 369);
          }
          
#line 1261
          break;
          case 364:
          if (((jlong) 0x100002600LL & l) != 0LL) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 192, 193);
          }
          
#line 1265
          break;
          case 365:
          if (self->curChar_ == 62 && kind > 35)
#line 1268
          kind = 35;
          break;
          case 370:
          if (self->curChar_ == 35) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 369);
          }
          
#line 1273
          break;
          case 371:
          case 568:
          if (self->curChar_ == 47) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 370);
          }
          
#line 1278
          break;
          case 372:
          if (self->curChar_ == 47) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 377);
          }
          
#line 1282
          break;
          case 374:
          if (((jlong) 0x100002600LL & l) != 0LL) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 194, 195);
          }
          
#line 1286
          break;
          case 375:
          if (self->curChar_ == 62 && kind > 36)
#line 1289
          kind = 36;
          break;
          case 378:
          if (self->curChar_ == 35) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 377);
          }
          
#line 1294
          break;
          case 379:
          case 569:
          if (self->curChar_ == 47) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 378);
          }
          
#line 1299
          break;
          case 380:
          if (self->curChar_ == 47) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 389);
          }
          
#line 1303
          break;
          case 382:
          if (((jlong) 0x100002600LL & l) != 0LL) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 196, 197);
          }
          
#line 1307
          break;
          case 383:
          if (self->curChar_ == 62 && kind > 37)
#line 1310
          kind = 37;
          break;
          case 390:
          if (self->curChar_ == 35) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 389);
          }
          
#line 1315
          break;
          case 391:
          case 570:
          if (self->curChar_ == 47) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 390);
          }
          
#line 1320
          break;
          case 392:
          if (self->curChar_ == 47) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 401);
          }
          
#line 1324
          break;
          case 394:
          if (((jlong) 0x100002600LL & l) != 0LL) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 198, 199);
          }
          
#line 1328
          break;
          case 395:
          if (self->curChar_ == 62 && kind > 38)
#line 1331
          kind = 38;
          break;
          case 402:
          if (self->curChar_ == 35) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 401);
          }
          
#line 1336
          break;
          case 403:
          case 571:
          if (self->curChar_ == 47) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 402);
          }
          
#line 1341
          break;
          case 404:
          if (self->curChar_ == 47) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 413);
          }
          
#line 1345
          break;
          case 408:
          if (((jlong) 0x100002600LL & l) != 0LL) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 200, 201);
          }
          
#line 1349
          break;
          case 409:
          if (self->curChar_ == 62 && kind > 39)
#line 1352
          kind = 39;
          break;
          case 414:
          if (self->curChar_ == 35) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 413);
          }
          
#line 1357
          break;
          case 415:
          case 572:
          if (self->curChar_ == 47) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 414);
          }
          
#line 1362
          break;
          case 416:
          if (self->curChar_ == 47) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 423);
          }
          
#line 1366
          break;
          case 418:
          if (((jlong) 0x100002600LL & l) != 0LL) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 202, 203);
          }
          
#line 1370
          break;
          case 419:
          if (self->curChar_ == 62 && kind > 40)
#line 1373
          kind = 40;
          break;
          case 424:
          if (self->curChar_ == 35) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 423);
          }
          
#line 1378
          break;
          case 425:
          case 573:
          if (self->curChar_ == 47) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 424);
          }
          
#line 1383
          break;
          case 426:
          if (self->curChar_ == 47) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 434);
          }
          
#line 1387
          break;
          case 428:
          if (((jlong) 0x100002600LL & l) != 0LL) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 204, 205);
          }
          
#line 1391
          break;
          case 429:
          if (self->curChar_ == 62 && kind > 41)
#line 1394
          kind = 41;
          break;
          case 435:
          if (self->curChar_ == 35) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 434);
          }
          
#line 1399
          break;
          case 436:
          case 574:
          if (self->curChar_ == 47) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 435);
          }
          
#line 1404
          break;
          case 437:
          if (self->curChar_ == 47) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 445);
          }
          
#line 1408
          break;
          case 439:
          if (((jlong) 0x100002600LL & l) != 0LL) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 206, 207);
          }
          
#line 1412
          break;
          case 440:
          if (self->curChar_ == 62 && kind > 42)
#line 1415
          kind = 42;
          break;
          case 446:
          if (self->curChar_ == 35) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 445);
          }
          
#line 1420
          break;
          case 447:
          case 575:
          if (self->curChar_ == 47) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 446);
          }
          
#line 1425
          break;
          case 448:
          if (self->curChar_ == 47) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 458);
          }
          
#line 1429
          break;
          case 450:
          if (((jlong) 0x100002600LL & l) != 0LL) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 208, 209);
          }
          
#line 1433
          break;
          case 451:
          if (self->curChar_ == 62 && kind > 43)
#line 1436
          kind = 43;
          break;
          case 459:
          if (self->curChar_ == 35) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 458);
          }
          
#line 1441
          break;
          case 460:
          case 576:
          if (self->curChar_ == 47) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 459);
          }
          
#line 1446
          break;
          case 461:
          if (self->curChar_ == 47) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 468);
          }
          
#line 1450
          break;
          case 463:
          if (((jlong) 0x100002600LL & l) != 0LL) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 210, 211);
          }
          
#line 1454
          break;
          case 464:
          if (self->curChar_ == 62 && kind > 44)
#line 1457
          kind = 44;
          break;
          case 469:
          if (self->curChar_ == 35) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 468);
          }
          
#line 1462
          break;
          case 470:
          case 577:
          if (self->curChar_ == 47) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 469);
          }
          
#line 1467
          break;
          case 471:
          if (self->curChar_ == 47) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 481);
          }
          
#line 1471
          break;
          case 473:
          if (((jlong) 0x100002600LL & l) != 0LL) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 212, 213);
          }
          
#line 1475
          break;
          case 474:
          if (self->curChar_ == 62 && kind > 45)
#line 1478
          kind = 45;
          break;
          case 482:
          if (self->curChar_ == 35) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 481);
          }
          
#line 1483
          break;
          case 483:
          case 578:
          if (self->curChar_ == 47) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 482);
          }
          
#line 1488
          break;
          case 484:
          if (self->curChar_ == 47) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 495);
          }
          
#line 1492
          break;
          case 486:
          if (((jlong) 0x100002600LL & l) != 0LL) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 214, 215);
          }
          
#line 1496
          break;
          case 487:
          if (self->curChar_ == 62 && kind > 46)
#line 1499
          kind = 46;
          break;
          case 496:
          if (self->curChar_ == 35) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 495);
          }
          
#line 1504
          break;
          case 497:
          case 579:
          if (self->curChar_ == 47) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 496);
          }
          
#line 1509
          break;
          case 498:
          if (self->curChar_ == 47) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 506);
          }
          
#line 1513
          break;
          case 500:
          if (((jlong) 0x100002600LL & l) != 0LL) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 216, 217);
          }
          
#line 1517
          break;
          case 501:
          if (self->curChar_ == 62 && kind > 47)
#line 1520
          kind = 47;
          break;
          case 507:
          if (self->curChar_ == 35) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 506);
          }
          
#line 1525
          break;
          case 508:
          case 580:
          if (self->curChar_ == 47) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 507);
          }
          
#line 1530
          break;
          case 509:
          if (self->curChar_ == 35) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 196);
          }
          
#line 1534
          break;
          case 510:
          if (self->curChar_ == 35) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 204);
          }
          
#line 1538
          break;
          case 511:
          if (self->curChar_ == 35) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 213);
          }
          
#line 1542
          break;
          case 512:
          if (self->curChar_ == 35) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 220);
          }
          
#line 1546
          break;
          case 513:
          if (self->curChar_ == 35) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 228);
          }
          
#line 1550
          break;
          case 514:
          if (self->curChar_ == 35) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 229);
          }
          
#line 1554
          break;
          case 515:
          if (self->curChar_ == 35) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 237);
          }
          
#line 1558
          break;
          case 516:
          if (self->curChar_ == 35) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 242);
          }
          
#line 1562
          break;
          case 517:
          if (self->curChar_ == 35) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 247);
          }
          
#line 1566
          break;
          case 518:
          if (self->curChar_ == 35) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 256);
          }
          
#line 1570
          break;
          case 519:
          if (self->curChar_ == 35) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 265);
          }
          
#line 1574
          break;
          case 520:
          if (self->curChar_ == 35) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 272);
          }
          
#line 1578
          break;
          case 521:
          if (self->curChar_ == 35) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 282);
          }
          
#line 1582
          break;
          case 522:
          if (self->curChar_ == 35) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 290);
          }
          
#line 1586
          break;
          case 523:
          if (self->curChar_ == 35) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 301);
          }
          
#line 1590
          break;
          case 524:
          if (self->curChar_ == 35) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 308);
          }
          
#line 1594
          break;
          case 525:
          if (self->curChar_ == 47) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 533);
          }
          
#line 1598
          break;
          case 527:
          if (((jlong) 0x100002600LL & l) != 0LL) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 218, 219);
          }
          
#line 1602
          break;
          case 528:
          if (self->curChar_ == 62 && kind > 64)
#line 1605
          kind = 64;
          break;
          case 534:
          if (self->curChar_ == 35) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 533);
          }
          
#line 1610
          break;
          case 535:
          case 581:
          if (self->curChar_ == 47) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 534);
          }
          
#line 1615
          break;
          case 536:
          if (self->curChar_ == 35) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 318);
          }
          
#line 1619
          break;
          case 537:
          if (self->curChar_ == 47) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 547);
          }
          
#line 1623
          break;
          case 541:
          if (((jlong) 0x100002600LL & l) != 0LL) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 220, 221);
          }
          
#line 1627
          break;
          case 542:
          if (self->curChar_ == 62 && kind > 66)
#line 1630
          kind = 66;
          break;
          case 548:
          if (self->curChar_ == 35) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 547);
          }
          
#line 1635
          break;
          case 549:
          case 582:
          if (self->curChar_ == 47) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 548);
          }
          
#line 1640
          break;
          case 552:
          if (((jlong) 0x100002600LL & l) != 0LL && kind > 69)
#line 1643
          kind = 69;
          break;
          case 555:
          if (self->curChar_ == 35)
#line 1647
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 554;
          break;
          case 557:
          if (self->curChar_ == 47)
#line 1651
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 558;
          break;
          case 558:
          if (self->curChar_ == 62 && kind > 70)
#line 1655
          kind = 70;
          break;
          case 561:
          if (self->curChar_ == 35)
#line 1659
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 560;
          break;
          case 562:
          if (self->curChar_ == 35)
#line 1663
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 563;
          break;
          case 564:
          case 589:
          if (self->curChar_ == 47) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 562);
          }
          
#line 1669
          break;
          case 585:
          if (self->curChar_ == 35)
#line 1672
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 584;
          break;
          case 588:
          if (self->curChar_ == 35)
#line 1676
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 587;
          break;
          case 590:
          if (self->curChar_ == 60) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 7, 8);
          }
          
#line 1681
          break;
          case 591:
          if (self->curChar_ == 45 && kind > 31)
#line 1684
          kind = 31;
          break;
          case 592:
          if (self->curChar_ == 45)
#line 1688
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 591;
          break;
          case 593:
          if (self->curChar_ == 35)
#line 1692
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 592;
          break;
          case 595:
          if (self->curChar_ == 36) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddStatesWithInt_withInt_(self, 222, 226);
          }
          
#line 1697
          break;
          case 596:
          if (((jlong) 0x3ff001000000000LL & l) != 0LL) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddStatesWithInt_withInt_(self, 222, 226);
          }
          
#line 1701
          break;
          case 598:
          if (((jlong) 0x400600000000000LL & l) != 0LL) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddStatesWithInt_withInt_(self, 222, 226);
          }
          
#line 1705
          break;
          case 599:
          if (self->curChar_ == 46) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 227, 228);
          }
          
#line 1709
          break;
          case 600:
          if (self->curChar_ == 36) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddStatesWithInt_withInt_(self, 229, 233);
          }
          
#line 1713
          break;
          case 601:
          if (((jlong) 0x3ff001000000000LL & l) != 0LL) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddStatesWithInt_withInt_(self, 229, 233);
          }
          
#line 1717
          break;
          case 603:
          if (((jlong) 0x400600000000000LL & l) != 0LL) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddStatesWithInt_withInt_(self, 229, 233);
          }
          
#line 1721
          break;
          case 604:
          if (((jlong) 0x100002600LL & l) != 0LL) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddTwoStatesWithInt_withInt_(self, 604, 605);
          }
          
#line 1725
          break;
          case 605:
          if (self->curChar_ == 62 && kind > 68)
#line 1728
          kind = 68;
          break;
          case 608:
          if (self->curChar_ == 47)
#line 1732
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 594;
          break;
          default:
          
#line 1734
          break;
        }
      }
      while (
#line 1736
      i != startsAt);
    }
    else if (self->curChar_ < 128) {
      
#line 1740
      jlong l = LShift64(1LL, (self->curChar_ & 077));
      do {
        
#line 1743
        switch (IOSIntArray_Get(self->jjstateSet_, --i)) {
          
#line 1745
          case 2:
          if (((jlong) 0xf7fffffff7ffffffLL & l) != 0LL) {
            
#line 1748
            if (kind > 73)
#line 1749
            kind = 73;
            {
              
#line 1750
              FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 1);
            }
          }
          else
#line 1752
          if (((jlong) 0x800000008000000LL & l) != 0LL) {
            
#line 1754
            if (kind > 74)
#line 1755
            kind = 74;
          }
          if (self->curChar_ == 91) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 7, 8);
          }
          
#line 1759
          if (self->curChar_ == 91) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 234, 298);
          }
          
#line 1761
          break;
          case 1:
          if (((jlong) 0xf7fffffff7ffffffLL & l) == 0LL)
#line 1764
          break;
          if (kind > 73)
#line 1766
          kind = 73;
          {
            
#line 1767
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 1);
          }
          
#line 1768
          break;
          case 4:
          if (self->curChar_ == 116) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 134, 135);
          }
          
#line 1772
          break;
          case 6:
          if (self->curChar_ == 93 && kind > 6)
#line 1775
          kind = 6;
          break;
          case 7:
          if (self->curChar_ == 112)
#line 1779
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 4;
          break;
          case 8:
          if (self->curChar_ == 109)
#line 1783
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 7;
          break;
          case 9:
          if (self->curChar_ == 101)
#line 1787
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 8;
          break;
          case 10:
          if (self->curChar_ == 116)
#line 1791
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 9;
          break;
          case 11:
          if (self->curChar_ == 116)
#line 1795
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 10;
          break;
          case 12:
          if (self->curChar_ == 97)
#line 1799
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 11;
          break;
          case 13:
          if (self->curChar_ == 114) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 136, 137);
          }
          
#line 1804
          break;
          case 15:
          if (self->curChar_ == 93 && kind > 7)
#line 1807
          kind = 7;
          break;
          case 16:
          if (self->curChar_ == 101)
#line 1811
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 13;
          break;
          case 17:
          if (self->curChar_ == 118)
#line 1815
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 16;
          break;
          case 18:
          if (self->curChar_ == 111)
#line 1819
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 17;
          break;
          case 19:
          if (self->curChar_ == 99)
#line 1823
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 18;
          break;
          case 20:
          if (self->curChar_ == 101)
#line 1827
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 19;
          break;
          case 21:
          if (self->curChar_ == 114)
#line 1831
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 20;
          break;
          case 22:
          if (self->curChar_ == 102)
#line 1835
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 23;
          break;
          case 24:
          if (self->curChar_ == 105)
#line 1839
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 22;
          break;
          case 25:
          if (self->curChar_ == 101)
#line 1843
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 26;
          break;
          case 26:
          if (((jlong) 0x20000000200LL & l) != 0LL)
#line 1847
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 27;
          break;
          case 27:
          if (self->curChar_ == 102)
#line 1851
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 28;
          break;
          case 29:
          if (self->curChar_ == 115)
#line 1855
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 25;
          break;
          case 30:
          if (self->curChar_ == 108)
#line 1859
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 29;
          break;
          case 31:
          if (self->curChar_ == 101)
#line 1863
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 30;
          break;
          case 32:
          if (self->curChar_ == 116)
#line 1867
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 33;
          break;
          case 34:
          if (self->curChar_ == 115)
#line 1871
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 32;
          break;
          case 35:
          if (self->curChar_ == 105)
#line 1875
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 34;
          break;
          case 36:
          if (self->curChar_ == 108)
#line 1879
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 35;
          break;
          case 37:
          if (self->curChar_ == 115)
#line 1883
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 38;
          break;
          case 39:
          if (self->curChar_ == 115)
#line 1887
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 40;
          break;
          case 41:
          if (self->curChar_ == 97)
#line 1891
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 39;
          break;
          case 42:
          if (self->curChar_ == 109)
#line 1895
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 37;
          break;
          case 43:
          if (self->curChar_ == 101)
#line 1899
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 42;
          break;
          case 44:
          if (self->curChar_ == 116)
#line 1903
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 43;
          break;
          case 45:
          if (self->curChar_ == 105)
#line 1907
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 44;
          break;
          case 46:
          if (self->curChar_ == 112) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 140, 141);
          }
          
#line 1912
          break;
          case 48:
          if (self->curChar_ == 93 && kind > 12)
#line 1915
          kind = 12;
          break;
          case 49:
          if (self->curChar_ == 101)
#line 1919
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 46;
          break;
          case 50:
          if (self->curChar_ == 115)
#line 1923
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 49;
          break;
          case 51:
          if (self->curChar_ == 114)
#line 1927
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 52;
          break;
          case 52:
          if (((jlong) 0x2000000020LL & l) != 0LL)
#line 1931
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 56;
          break;
          case 53:
          if (self->curChar_ == 104)
#line 1935
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 54;
          break;
          case 55:
          if (self->curChar_ == 99)
#line 1939
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 53;
          break;
          case 56:
          if (self->curChar_ == 97)
#line 1943
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 55;
          break;
          case 57:
          if (self->curChar_ == 111)
#line 1947
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 51;
          break;
          case 58:
          if (self->curChar_ == 102)
#line 1951
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 57;
          break;
          case 59:
          if (self->curChar_ == 104)
#line 1955
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 60;
          break;
          case 61:
          if (self->curChar_ == 99)
#line 1959
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 59;
          break;
          case 62:
          if (self->curChar_ == 116)
#line 1963
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 61;
          break;
          case 63:
          if (self->curChar_ == 105)
#line 1967
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 62;
          break;
          case 64:
          if (self->curChar_ == 119)
#line 1971
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 63;
          break;
          case 65:
          if (self->curChar_ == 115)
#line 1975
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 64;
          break;
          case 66:
          if (self->curChar_ == 101)
#line 1979
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 67;
          break;
          case 68:
          if (self->curChar_ == 115)
#line 1983
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 66;
          break;
          case 69:
          if (self->curChar_ == 97)
#line 1987
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 68;
          break;
          case 70:
          if (self->curChar_ == 99)
#line 1991
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 69;
          break;
          case 71:
          if (self->curChar_ == 110)
#line 1995
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 72;
          break;
          case 73:
          if (self->curChar_ == 103)
#line 1999
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 71;
          break;
          case 74:
          if (self->curChar_ == 105)
#line 2003
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 73;
          break;
          case 75:
          if (self->curChar_ == 115)
#line 2007
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 74;
          break;
          case 76:
          if (self->curChar_ == 115)
#line 2011
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 75;
          break;
          case 77:
          if (self->curChar_ == 97)
#line 2015
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 76;
          break;
          case 78:
          if (self->curChar_ == 108)
#line 2019
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 79;
          break;
          case 80:
          if (self->curChar_ == 97)
#line 2023
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 78;
          break;
          case 81:
          if (self->curChar_ == 98)
#line 2027
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 80;
          break;
          case 82:
          if (self->curChar_ == 111)
#line 2031
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 81;
          break;
          case 83:
          if (self->curChar_ == 108)
#line 2035
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 82;
          break;
          case 84:
          if (self->curChar_ == 103)
#line 2039
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 83;
          break;
          case 85:
          if (self->curChar_ == 108)
#line 2043
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 86;
          break;
          case 87:
          if (self->curChar_ == 97)
#line 2047
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 85;
          break;
          case 88:
          if (self->curChar_ == 99)
#line 2051
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 87;
          break;
          case 89:
          if (self->curChar_ == 111)
#line 2055
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 88;
          break;
          case 90:
          if (self->curChar_ == 108)
#line 2059
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 89;
          break;
          case 91:
          if (self->curChar_ == 101)
#line 2063
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 92;
          break;
          case 93:
          if (self->curChar_ == 100)
#line 2067
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 91;
          break;
          case 94:
          if (self->curChar_ == 117)
#line 2071
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 93;
          break;
          case 95:
          if (self->curChar_ == 108)
#line 2075
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 94;
          break;
          case 96:
          if (self->curChar_ == 99)
#line 2079
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 95;
          break;
          case 97:
          if (self->curChar_ == 110)
#line 2083
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 96;
          break;
          case 98:
          if (self->curChar_ == 105)
#line 2087
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 97;
          break;
          case 99:
          if (self->curChar_ == 116)
#line 2091
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 100;
          break;
          case 101:
          if (self->curChar_ == 114)
#line 2095
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 99;
          break;
          case 102:
          if (self->curChar_ == 111)
#line 2099
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 101;
          break;
          case 103:
          if (self->curChar_ == 112)
#line 2103
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 102;
          break;
          case 104:
          if (self->curChar_ == 109)
#line 2107
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 103;
          break;
          case 105:
          if (self->curChar_ == 105)
#line 2111
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 104;
          break;
          case 106:
          if (self->curChar_ == 110)
#line 2115
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 107;
          break;
          case 108:
          if (self->curChar_ == 111)
#line 2119
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 106;
          break;
          case 109:
          if (self->curChar_ == 105)
#line 2123
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 108;
          break;
          case 110:
          if (self->curChar_ == 116)
#line 2127
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 109;
          break;
          case 111:
          if (self->curChar_ == 99)
#line 2131
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 110;
          break;
          case 112:
          if (self->curChar_ == 110)
#line 2135
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 111;
          break;
          case 113:
          if (self->curChar_ == 117)
#line 2139
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 112;
          break;
          case 114:
          if (self->curChar_ == 102)
#line 2143
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 113;
          break;
          case 115:
          if (self->curChar_ == 111)
#line 2147
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 116;
          break;
          case 117:
          if (self->curChar_ == 114)
#line 2151
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 115;
          break;
          case 118:
          if (self->curChar_ == 99)
#line 2155
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 117;
          break;
          case 119:
          if (self->curChar_ == 97)
#line 2159
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 118;
          break;
          case 120:
          if (self->curChar_ == 109)
#line 2163
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 119;
          break;
          case 121:
          if (self->curChar_ == 109)
#line 2167
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 122;
          break;
          case 123:
          if (self->curChar_ == 114)
#line 2171
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 121;
          break;
          case 124:
          if (self->curChar_ == 111)
#line 2175
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 123;
          break;
          case 125:
          if (self->curChar_ == 102)
#line 2179
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 124;
          break;
          case 126:
          if (self->curChar_ == 115)
#line 2183
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 125;
          break;
          case 127:
          if (self->curChar_ == 110)
#line 2187
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 126;
          break;
          case 128:
          if (self->curChar_ == 97)
#line 2191
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 127;
          break;
          case 129:
          if (self->curChar_ == 114)
#line 2195
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 128;
          break;
          case 130:
          if (self->curChar_ == 116)
#line 2199
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 129;
          break;
          case 131:
          if (self->curChar_ == 116)
#line 2203
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 132;
          break;
          case 133:
          if (self->curChar_ == 105)
#line 2207
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 131;
          break;
          case 134:
          if (self->curChar_ == 115)
#line 2211
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 133;
          break;
          case 135:
          if (self->curChar_ == 105)
#line 2215
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 134;
          break;
          case 136:
          if (self->curChar_ == 118)
#line 2219
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 135;
          break;
          case 137:
          if (self->curChar_ == 112)
#line 2223
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 138;
          break;
          case 139:
          if (self->curChar_ == 111)
#line 2227
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 137;
          break;
          case 140:
          if (self->curChar_ == 116)
#line 2231
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 139;
          break;
          case 141:
          if (self->curChar_ == 115)
#line 2235
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 140;
          break;
          case 142:
          if (self->curChar_ == 110)
#line 2239
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 143;
          break;
          case 144:
          if (self->curChar_ == 114)
#line 2243
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 142;
          break;
          case 145:
          if (self->curChar_ == 117)
#line 2247
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 144;
          break;
          case 146:
          if (self->curChar_ == 116)
#line 2251
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 145;
          break;
          case 147:
          if (self->curChar_ == 101)
#line 2255
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 146;
          break;
          case 148:
          if (self->curChar_ == 114)
#line 2259
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 147;
          break;
          case 149:
          if (self->curChar_ == 108)
#line 2263
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 150;
          break;
          case 151:
          if (self->curChar_ == 108)
#line 2267
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 149;
          break;
          case 152:
          if (self->curChar_ == 97)
#line 2271
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 151;
          break;
          case 153:
          if (self->curChar_ == 99)
#line 2275
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 152;
          break;
          case 154:
          if (self->curChar_ == 103)
#line 2279
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 155;
          break;
          case 156:
          if (self->curChar_ == 110)
#line 2283
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 154;
          break;
          case 157:
          if (self->curChar_ == 105)
#line 2287
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 156;
          break;
          case 158:
          if (self->curChar_ == 116)
#line 2291
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 157;
          break;
          case 159:
          if (self->curChar_ == 116)
#line 2295
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 158;
          break;
          case 160:
          if (self->curChar_ == 101)
#line 2299
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 159;
          break;
          case 161:
          if (self->curChar_ == 115)
#line 2303
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 160;
          break;
          case 162:
          if (self->curChar_ == 115) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 142, 143);
          }
          
#line 2308
          break;
          case 164:
          if (self->curChar_ == 93 && kind > 29)
#line 2311
          kind = 29;
          break;
          case 165:
          if (self->curChar_ == 115)
#line 2315
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 162;
          break;
          case 166:
          if (self->curChar_ == 101)
#line 2319
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 165;
          break;
          case 167:
          if (self->curChar_ == 114)
#line 2323
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 166;
          break;
          case 168:
          if (self->curChar_ == 112)
#line 2327
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 167;
          break;
          case 169:
          if (self->curChar_ == 109)
#line 2331
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 168;
          break;
          case 170:
          if (self->curChar_ == 111)
#line 2335
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 169;
          break;
          case 171:
          if (self->curChar_ == 99)
#line 2339
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 170;
          break;
          case 172:
          if (self->curChar_ == 116) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 144, 145);
          }
          
#line 2344
          break;
          case 174:
          if (self->curChar_ == 93 && kind > 30)
#line 2347
          kind = 30;
          break;
          case 175:
          if (self->curChar_ == 110)
#line 2351
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 172;
          break;
          case 176:
          if (self->curChar_ == 101)
#line 2355
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 175;
          break;
          case 177:
          if (self->curChar_ == 109)
#line 2359
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 176;
          break;
          case 178:
          if (self->curChar_ == 109)
#line 2363
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 177;
          break;
          case 179:
          if (self->curChar_ == 111)
#line 2367
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 178;
          break;
          case 180:
          if (self->curChar_ == 99)
#line 2371
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 179;
          break;
          case 181:
          if (self->curChar_ == 111)
#line 2375
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 182;
          break;
          case 182:
          if (((jlong) 0x1000000010000LL & l) != 0LL)
#line 2379
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 188;
          break;
          case 183:
          if (self->curChar_ == 101) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 146, 147);
          }
          
#line 2384
          break;
          case 185:
          if (self->curChar_ == 93 && kind > 32)
#line 2387
          kind = 32;
          break;
          case 186:
          if (self->curChar_ == 115)
#line 2391
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 183;
          break;
          case 187:
          if (self->curChar_ == 114)
#line 2395
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 186;
          break;
          case 188:
          if (self->curChar_ == 97)
#line 2399
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 187;
          break;
          case 189:
          if (self->curChar_ == 110)
#line 2403
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 181;
          break;
          case 190:
          if (self->curChar_ == 101) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 148, 150);
          }
          
#line 2408
          break;
          case 193:
          if (self->curChar_ == 93 && kind > 48)
#line 2411
          kind = 48;
          break;
          case 194:
          if (self->curChar_ == 115)
#line 2415
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 190;
          break;
          case 195:
          if (self->curChar_ == 108)
#line 2419
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 194;
          break;
          case 196:
          if (self->curChar_ == 101)
#line 2423
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 195;
          break;
          case 197:
          if (self->curChar_ == 107) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 151, 153);
          }
          
#line 2428
          break;
          case 200:
          if (self->curChar_ == 93 && kind > 49)
#line 2431
          kind = 49;
          break;
          case 201:
          if (self->curChar_ == 97)
#line 2435
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 197;
          break;
          case 202:
          if (self->curChar_ == 101)
#line 2439
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 201;
          break;
          case 203:
          if (self->curChar_ == 114)
#line 2443
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 202;
          break;
          case 204:
          if (self->curChar_ == 98)
#line 2447
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 203;
          break;
          case 205:
          if (self->curChar_ == 110) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 154, 156);
          }
          
#line 2452
          break;
          case 208:
          if (self->curChar_ == 93 && kind > 50)
#line 2455
          kind = 50;
          break;
          case 209:
          if (self->curChar_ == 114)
#line 2459
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 205;
          break;
          case 210:
          if (self->curChar_ == 117)
#line 2463
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 209;
          break;
          case 211:
          if (self->curChar_ == 116)
#line 2467
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 210;
          break;
          case 212:
          if (self->curChar_ == 101)
#line 2471
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 211;
          break;
          case 213:
          if (self->curChar_ == 114)
#line 2475
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 212;
          break;
          case 214:
          if (self->curChar_ == 112) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 157, 159);
          }
          
#line 2480
          break;
          case 217:
          if (self->curChar_ == 93 && kind > 51)
#line 2483
          kind = 51;
          break;
          case 218:
          if (self->curChar_ == 111)
#line 2487
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 214;
          break;
          case 219:
          if (self->curChar_ == 116)
#line 2491
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 218;
          break;
          case 220:
          if (self->curChar_ == 115)
#line 2495
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 219;
          break;
          case 221:
          if (self->curChar_ == 104) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 160, 162);
          }
          
#line 2500
          break;
          case 224:
          if (self->curChar_ == 93 && kind > 52)
#line 2503
          kind = 52;
          break;
          case 225:
          if (self->curChar_ == 115)
#line 2507
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 221;
          break;
          case 226:
          if (self->curChar_ == 117)
#line 2511
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 225;
          break;
          case 227:
          if (self->curChar_ == 108)
#line 2515
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 226;
          break;
          case 228:
          if (self->curChar_ == 102)
#line 2519
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 227;
          break;
          case 229:
          if (self->curChar_ == 116) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 163, 165);
          }
          
#line 2524
          break;
          case 232:
          if (self->curChar_ == 93 && kind > 53)
#line 2527
          kind = 53;
          break;
          case 233:
          if (self->curChar_ == 116) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 166, 168);
          }
          
#line 2532
          break;
          case 236:
          if (self->curChar_ == 93 && kind > 54)
#line 2535
          kind = 54;
          break;
          case 237:
          if (self->curChar_ == 108)
#line 2539
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 233;
          break;
          case 238:
          if (self->curChar_ == 116) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 169, 171);
          }
          
#line 2544
          break;
          case 241:
          if (self->curChar_ == 93 && kind > 55)
#line 2547
          kind = 55;
          break;
          case 242:
          if (self->curChar_ == 114)
#line 2551
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 238;
          break;
          case 243:
          if (self->curChar_ == 116) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 172, 174);
          }
          
#line 2556
          break;
          case 246:
          if (self->curChar_ == 93 && kind > 56)
#line 2559
          kind = 56;
          break;
          case 247:
          if (self->curChar_ == 110)
#line 2563
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 243;
          break;
          case 248:
          if (self->curChar_ == 116) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 175, 176);
          }
          
#line 2568
          break;
          case 250:
          if (self->curChar_ == 93 && kind > 57)
#line 2571
          kind = 57;
          break;
          case 251:
          if (self->curChar_ == 108)
#line 2575
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 248;
          break;
          case 252:
          if (self->curChar_ == 117)
#line 2579
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 251;
          break;
          case 253:
          if (self->curChar_ == 97)
#line 2583
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 252;
          break;
          case 254:
          if (self->curChar_ == 102)
#line 2587
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 253;
          break;
          case 255:
          if (self->curChar_ == 101)
#line 2591
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 254;
          break;
          case 256:
          if (self->curChar_ == 100)
#line 2595
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 255;
          break;
          case 257:
          if (self->curChar_ == 100) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 177, 179);
          }
          
#line 2600
          break;
          case 260:
          if (self->curChar_ == 93 && kind > 58)
#line 2603
          kind = 58;
          break;
          case 261:
          if (self->curChar_ == 101)
#line 2607
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 257;
          break;
          case 262:
          if (self->curChar_ == 116)
#line 2611
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 261;
          break;
          case 263:
          if (self->curChar_ == 115)
#line 2615
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 262;
          break;
          case 264:
          if (self->curChar_ == 101)
#line 2619
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 263;
          break;
          case 265:
          if (self->curChar_ == 110)
#line 2623
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 264;
          break;
          case 266:
          if (self->curChar_ == 100)
#line 2627
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 267;
          break;
          case 268:
          if (self->curChar_ == 101)
#line 2631
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 266;
          break;
          case 269:
          if (self->curChar_ == 116)
#line 2635
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 268;
          break;
          case 270:
          if (self->curChar_ == 115)
#line 2639
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 269;
          break;
          case 271:
          if (self->curChar_ == 101)
#line 2643
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 270;
          break;
          case 272:
          if (self->curChar_ == 110)
#line 2647
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 271;
          break;
          case 273:
          if (self->curChar_ == 101) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 180, 182);
          }
          
#line 2652
          break;
          case 276:
          if (self->curChar_ == 93 && kind > 60)
#line 2655
          kind = 60;
          break;
          case 277:
          if (self->curChar_ == 115)
#line 2659
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 273;
          break;
          case 278:
          if (self->curChar_ == 114)
#line 2663
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 277;
          break;
          case 279:
          if (self->curChar_ == 117)
#line 2667
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 278;
          break;
          case 280:
          if (self->curChar_ == 99)
#line 2671
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 279;
          break;
          case 281:
          if (self->curChar_ == 101)
#line 2675
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 280;
          break;
          case 282:
          if (self->curChar_ == 114)
#line 2679
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 281;
          break;
          case 283:
          if (self->curChar_ == 101)
#line 2683
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 284;
          break;
          case 285:
          if (self->curChar_ == 115)
#line 2687
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 283;
          break;
          case 286:
          if (self->curChar_ == 114)
#line 2691
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 285;
          break;
          case 287:
          if (self->curChar_ == 117)
#line 2695
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 286;
          break;
          case 288:
          if (self->curChar_ == 99)
#line 2699
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 287;
          break;
          case 289:
          if (self->curChar_ == 101)
#line 2703
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 288;
          break;
          case 290:
          if (self->curChar_ == 114)
#line 2707
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 289;
          break;
          case 291:
          if (self->curChar_ == 107) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 183, 185);
          }
          
#line 2712
          break;
          case 294:
          if (self->curChar_ == 93 && kind > 62)
#line 2715
          kind = 62;
          break;
          case 295:
          if (self->curChar_ == 99)
#line 2719
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 291;
          break;
          case 296:
          if (self->curChar_ == 97)
#line 2723
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 295;
          break;
          case 297:
          if (self->curChar_ == 98)
#line 2727
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 296;
          break;
          case 298:
          if (self->curChar_ == 108)
#line 2731
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 297;
          break;
          case 299:
          if (self->curChar_ == 108)
#line 2735
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 298;
          break;
          case 300:
          if (self->curChar_ == 97)
#line 2739
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 299;
          break;
          case 301:
          if (self->curChar_ == 102)
#line 2743
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 300;
          break;
          case 302:
          if (self->curChar_ == 101)
#line 2747
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 303;
          break;
          case 304:
          if (self->curChar_ == 112)
#line 2751
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 302;
          break;
          case 305:
          if (self->curChar_ == 97)
#line 2755
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 304;
          break;
          case 306:
          if (self->curChar_ == 99)
#line 2759
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 305;
          break;
          case 307:
          if (self->curChar_ == 115)
#line 2763
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 306;
          break;
          case 308:
          if (self->curChar_ == 101)
#line 2767
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 307;
          break;
          case 309:
          if (self->curChar_ == 111)
#line 2771
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 310;
          break;
          case 310:
          if (((jlong) 0x2000000020LL & l) != 0LL)
#line 2775
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 317;
          break;
          case 311:
          if (self->curChar_ == 101) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 186, 187);
          }
          
#line 2780
          break;
          case 313:
          if (self->curChar_ == 93 && kind > 65)
#line 2783
          kind = 65;
          break;
          case 314:
          if (self->curChar_ == 112)
#line 2787
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 311;
          break;
          case 315:
          if (self->curChar_ == 97)
#line 2791
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 314;
          break;
          case 316:
          if (self->curChar_ == 99)
#line 2795
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 315;
          break;
          case 317:
          if (self->curChar_ == 115)
#line 2799
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 316;
          break;
          case 318:
          if (self->curChar_ == 110)
#line 2803
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 309;
          break;
          case 347:
          if (self->curChar_ == 102) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 188, 189);
          }
          
#line 2808
          break;
          case 349:
          if (self->curChar_ == 93 && kind > 33)
#line 2811
          kind = 33;
          break;
          case 350:
          if (self->curChar_ == 105)
#line 2815
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 347;
          break;
          case 354:
          if (self->curChar_ == 116) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 190, 191);
          }
          
#line 2820
          break;
          case 356:
          if (self->curChar_ == 93 && kind > 34)
#line 2823
          kind = 34;
          break;
          case 357:
          if (self->curChar_ == 115)
#line 2827
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 354;
          break;
          case 358:
          if (self->curChar_ == 105)
#line 2831
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 357;
          break;
          case 359:
          if (self->curChar_ == 108)
#line 2835
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 358;
          break;
          case 363:
          if (self->curChar_ == 115) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 192, 193);
          }
          
#line 2840
          break;
          case 365:
          if (self->curChar_ == 93 && kind > 35)
#line 2843
          kind = 35;
          break;
          case 366:
          if (self->curChar_ == 109)
#line 2847
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 363;
          break;
          case 367:
          if (self->curChar_ == 101)
#line 2851
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 366;
          break;
          case 368:
          if (self->curChar_ == 116)
#line 2855
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 367;
          break;
          case 369:
          if (self->curChar_ == 105)
#line 2859
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 368;
          break;
          case 373:
          if (self->curChar_ == 112) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 194, 195);
          }
          
#line 2864
          break;
          case 375:
          if (self->curChar_ == 93 && kind > 36)
#line 2867
          kind = 36;
          break;
          case 376:
          if (self->curChar_ == 101)
#line 2871
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 373;
          break;
          case 377:
          if (self->curChar_ == 115)
#line 2875
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 376;
          break;
          case 381:
          if (self->curChar_ == 114) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 196, 197);
          }
          
#line 2880
          break;
          case 383:
          if (self->curChar_ == 93 && kind > 37)
#line 2883
          kind = 37;
          break;
          case 384:
          if (self->curChar_ == 101)
#line 2887
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 381;
          break;
          case 385:
          if (self->curChar_ == 118)
#line 2891
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 384;
          break;
          case 386:
          if (self->curChar_ == 111)
#line 2895
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 385;
          break;
          case 387:
          if (self->curChar_ == 99)
#line 2899
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 386;
          break;
          case 388:
          if (self->curChar_ == 101)
#line 2903
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 387;
          break;
          case 389:
          if (self->curChar_ == 114)
#line 2907
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 388;
          break;
          case 393:
          if (self->curChar_ == 116) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 198, 199);
          }
          
#line 2912
          break;
          case 395:
          if (self->curChar_ == 93 && kind > 38)
#line 2915
          kind = 38;
          break;
          case 396:
          if (self->curChar_ == 112)
#line 2919
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 393;
          break;
          case 397:
          if (self->curChar_ == 109)
#line 2923
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 396;
          break;
          case 398:
          if (self->curChar_ == 101)
#line 2927
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 397;
          break;
          case 399:
          if (self->curChar_ == 116)
#line 2931
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 398;
          break;
          case 400:
          if (self->curChar_ == 116)
#line 2935
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 399;
          break;
          case 401:
          if (self->curChar_ == 97)
#line 2939
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 400;
          break;
          case 405:
          if (self->curChar_ == 114)
#line 2943
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 406;
          break;
          case 406:
          if (((jlong) 0x2000000020LL & l) != 0LL)
#line 2947
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 411;
          break;
          case 407:
          if (self->curChar_ == 104) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 200, 201);
          }
          
#line 2952
          break;
          case 409:
          if (self->curChar_ == 93 && kind > 39)
#line 2955
          kind = 39;
          break;
          case 410:
          if (self->curChar_ == 99)
#line 2959
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 407;
          break;
          case 411:
          if (self->curChar_ == 97)
#line 2963
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 410;
          break;
          case 412:
          if (self->curChar_ == 111)
#line 2967
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 405;
          break;
          case 413:
          if (self->curChar_ == 102)
#line 2971
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 412;
          break;
          case 417:
          if (self->curChar_ == 108) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 202, 203);
          }
          
#line 2976
          break;
          case 419:
          if (self->curChar_ == 93 && kind > 40)
#line 2979
          kind = 40;
          break;
          case 420:
          if (self->curChar_ == 97)
#line 2983
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 417;
          break;
          case 421:
          if (self->curChar_ == 99)
#line 2987
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 420;
          break;
          case 422:
          if (self->curChar_ == 111)
#line 2991
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 421;
          break;
          case 423:
          if (self->curChar_ == 108)
#line 2995
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 422;
          break;
          case 427:
          if (self->curChar_ == 108) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 204, 205);
          }
          
#line 3000
          break;
          case 429:
          if (self->curChar_ == 93 && kind > 41)
#line 3003
          kind = 41;
          break;
          case 430:
          if (self->curChar_ == 97)
#line 3007
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 427;
          break;
          case 431:
          if (self->curChar_ == 98)
#line 3011
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 430;
          break;
          case 432:
          if (self->curChar_ == 111)
#line 3015
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 431;
          break;
          case 433:
          if (self->curChar_ == 108)
#line 3019
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 432;
          break;
          case 434:
          if (self->curChar_ == 103)
#line 3023
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 433;
          break;
          case 438:
          if (self->curChar_ == 110) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 206, 207);
          }
          
#line 3028
          break;
          case 440:
          if (self->curChar_ == 93 && kind > 42)
#line 3031
          kind = 42;
          break;
          case 441:
          if (self->curChar_ == 103)
#line 3035
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 438;
          break;
          case 442:
          if (self->curChar_ == 105)
#line 3039
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 441;
          break;
          case 443:
          if (self->curChar_ == 115)
#line 3043
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 442;
          break;
          case 444:
          if (self->curChar_ == 115)
#line 3047
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 443;
          break;
          case 445:
          if (self->curChar_ == 97)
#line 3051
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 444;
          break;
          case 449:
          if (self->curChar_ == 110) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 208, 209);
          }
          
#line 3056
          break;
          case 451:
          if (self->curChar_ == 93 && kind > 43)
#line 3059
          kind = 43;
          break;
          case 452:
          if (self->curChar_ == 111)
#line 3063
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 449;
          break;
          case 453:
          if (self->curChar_ == 105)
#line 3067
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 452;
          break;
          case 454:
          if (self->curChar_ == 116)
#line 3071
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 453;
          break;
          case 455:
          if (self->curChar_ == 99)
#line 3075
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 454;
          break;
          case 456:
          if (self->curChar_ == 110)
#line 3079
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 455;
          break;
          case 457:
          if (self->curChar_ == 117)
#line 3083
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 456;
          break;
          case 458:
          if (self->curChar_ == 102)
#line 3087
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 457;
          break;
          case 462:
          if (self->curChar_ == 111) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 210, 211);
          }
          
#line 3092
          break;
          case 464:
          if (self->curChar_ == 93 && kind > 44)
#line 3095
          kind = 44;
          break;
          case 465:
          if (self->curChar_ == 114)
#line 3099
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 462;
          break;
          case 466:
          if (self->curChar_ == 99)
#line 3103
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 465;
          break;
          case 467:
          if (self->curChar_ == 97)
#line 3107
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 466;
          break;
          case 468:
          if (self->curChar_ == 109)
#line 3111
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 467;
          break;
          case 472:
          if (self->curChar_ == 115) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 212, 213);
          }
          
#line 3116
          break;
          case 474:
          if (self->curChar_ == 93 && kind > 45)
#line 3119
          kind = 45;
          break;
          case 475:
          if (self->curChar_ == 115)
#line 3123
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 472;
          break;
          case 476:
          if (self->curChar_ == 101)
#line 3127
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 475;
          break;
          case 477:
          if (self->curChar_ == 114)
#line 3131
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 476;
          break;
          case 478:
          if (self->curChar_ == 112)
#line 3135
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 477;
          break;
          case 479:
          if (self->curChar_ == 109)
#line 3139
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 478;
          break;
          case 480:
          if (self->curChar_ == 111)
#line 3143
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 479;
          break;
          case 481:
          if (self->curChar_ == 99)
#line 3147
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 480;
          break;
          case 485:
          if (self->curChar_ == 109) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 214, 215);
          }
          
#line 3152
          break;
          case 487:
          if (self->curChar_ == 93 && kind > 46)
#line 3155
          kind = 46;
          break;
          case 488:
          if (self->curChar_ == 114)
#line 3159
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 485;
          break;
          case 489:
          if (self->curChar_ == 111)
#line 3163
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 488;
          break;
          case 490:
          if (self->curChar_ == 102)
#line 3167
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 489;
          break;
          case 491:
          if (self->curChar_ == 115)
#line 3171
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 490;
          break;
          case 492:
          if (self->curChar_ == 110)
#line 3175
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 491;
          break;
          case 493:
          if (self->curChar_ == 97)
#line 3179
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 492;
          break;
          case 494:
          if (self->curChar_ == 114)
#line 3183
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 493;
          break;
          case 495:
          if (self->curChar_ == 116)
#line 3187
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 494;
          break;
          case 499:
          if (self->curChar_ == 104) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 216, 217);
          }
          
#line 3192
          break;
          case 501:
          if (self->curChar_ == 93 && kind > 47)
#line 3195
          kind = 47;
          break;
          case 502:
          if (self->curChar_ == 99)
#line 3199
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 499;
          break;
          case 503:
          if (self->curChar_ == 116)
#line 3203
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 502;
          break;
          case 504:
          if (self->curChar_ == 105)
#line 3207
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 503;
          break;
          case 505:
          if (self->curChar_ == 119)
#line 3211
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 504;
          break;
          case 506:
          if (self->curChar_ == 115)
#line 3215
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 505;
          break;
          case 526:
          if (self->curChar_ == 101) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 218, 219);
          }
          
#line 3220
          break;
          case 528:
          if (self->curChar_ == 93 && kind > 64)
#line 3223
          kind = 64;
          break;
          case 529:
          if (self->curChar_ == 112)
#line 3227
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 526;
          break;
          case 530:
          if (self->curChar_ == 97)
#line 3231
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 529;
          break;
          case 531:
          if (self->curChar_ == 99)
#line 3235
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 530;
          break;
          case 532:
          if (self->curChar_ == 115)
#line 3239
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 531;
          break;
          case 533:
          if (self->curChar_ == 101)
#line 3243
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 532;
          break;
          case 538:
          if (self->curChar_ == 111)
#line 3247
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 539;
          break;
          case 539:
          if (((jlong) 0x2000000020LL & l) != 0LL)
#line 3251
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 546;
          break;
          case 540:
          if (self->curChar_ == 101) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 220, 221);
          }
          
#line 3256
          break;
          case 542:
          if (self->curChar_ == 93 && kind > 66)
#line 3259
          kind = 66;
          break;
          case 543:
          if (self->curChar_ == 112)
#line 3263
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 540;
          break;
          case 544:
          if (self->curChar_ == 97)
#line 3267
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 543;
          break;
          case 545:
          if (self->curChar_ == 99)
#line 3271
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 544;
          break;
          case 546:
          if (self->curChar_ == 115)
#line 3275
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 545;
          break;
          case 547:
          if (self->curChar_ == 110)
#line 3279
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 538;
          break;
          case 550:
          if (self->curChar_ == 64 && kind > 67)
#line 3283
          kind = 67;
          break;
          case 551:
          if (self->curChar_ == 108)
#line 3287
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 552;
          break;
          case 553:
          case 583:
          if (self->curChar_ == 116) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 551);
          }
          
#line 3293
          break;
          case 554:
          if (self->curChar_ == 102)
#line 3296
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 553;
          break;
          case 556:
          if (self->curChar_ == 108) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 299, 300);
          }
          
#line 3301
          break;
          case 558:
          if (self->curChar_ == 93 && kind > 70)
#line 3304
          kind = 70;
          break;
          case 559:
          case 586:
          if (self->curChar_ == 116) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 556);
          }
          
#line 3310
          break;
          case 560:
          if (self->curChar_ == 102)
#line 3313
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 559;
          break;
          case 563:
          if (((jlong) 0x7fffffe87fffffeLL & l) == 0LL)
#line 3317
          break;
          if (kind > 71)
#line 3319
          kind = 71;
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 563;
          break;
          case 565:
          if (self->curChar_ == 91) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 234, 298);
          }
          
#line 3325
          break;
          case 584:
          if (self->curChar_ == 102)
#line 3328
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 583;
          break;
          case 587:
          if (self->curChar_ == 102)
#line 3332
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 586;
          break;
          case 590:
          if (self->curChar_ == 91) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 7, 8);
          }
          
#line 3337
          break;
          case 594:
          if (self->curChar_ == 64) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddStatesWithInt_withInt_(self, 301, 304);
          }
          
#line 3341
          break;
          case 595:
          case 596:
          if (((jlong) 0x7fffffe87ffffffLL & l) != 0LL) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddStatesWithInt_withInt_(self, 222, 226);
          }
          
#line 3346
          break;
          case 597:
          case 607:
          if (self->curChar_ == 92) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 598);
          }
          
#line 3351
          break;
          case 600:
          case 601:
          if (((jlong) 0x7fffffe87ffffffLL & l) != 0LL) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddStatesWithInt_withInt_(self, 229, 233);
          }
          
#line 3356
          break;
          case 602:
          case 606:
          if (self->curChar_ == 92) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 603);
          }
          
#line 3361
          break;
          case 605:
          if (self->curChar_ == 93 && kind > 68)
#line 3364
          kind = 68;
          break;
          default:
          
#line 3366
          break;
        }
      }
      while (
#line 3368
      i != startsAt);
    }
    else {
      
#line 3372
      jint hiByte = (RShift32(self->curChar_, 8));
      jint i1 = RShift32(hiByte, 6);
      jlong l1 = LShift64(1LL, (hiByte & 077));
      jint i2 = RShift32((self->curChar_ & (jint) 0xff), 6);
      jlong l2 = LShift64(1LL, (self->curChar_ & 077));
      do {
        
#line 3379
        switch (IOSIntArray_Get(self->jjstateSet_, --i)) {
          
#line 3381
          case 2:
          case 1:
          if (!FreemarkerCoreFMParserTokenManager_jjCanMove_0WithInt_withInt_withInt_withLong_withLong_(hiByte, i1, i2, l1, l2))
#line 3384
          break;
          if (kind > 73)
#line 3386
          kind = 73;
          {
            
#line 3387
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 1);
          }
          
#line 3388
          break;
          case 595:
          case 596:
          if (FreemarkerCoreFMParserTokenManager_jjCanMove_1WithInt_withInt_withInt_withLong_withLong_(hiByte, i1, i2, l1, l2)) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddStatesWithInt_withInt_(self, 222, 226);
          }
          
#line 3393
          break;
          case 600:
          case 601:
          if (FreemarkerCoreFMParserTokenManager_jjCanMove_1WithInt_withInt_withInt_withLong_withLong_(hiByte, i1, i2, l1, l2)) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddStatesWithInt_withInt_(self, 229, 233);
          }
          
#line 3398
          break;
          default:
          
#line 3399
          if (i1 == 0 || l1 == 0 || i2 == 0 || l2 == 0) break;
          else
#line 3399
          break;
        }
      }
      while (
#line 3401
      i != startsAt);
    }
    if (kind != (jint) 0x7fffffff) {
      
#line 3405
      self->jjmatchedKind_ = kind;
      self->jjmatchedPos_ = curPos;
      kind = (jint) 0x7fffffff;
    }
    ++curPos;
    jint unseq$1 = self->jjnewStateCnt_;
    
#line 3410
    if ((i = unseq$1) == (startsAt = 609 - (self->jjnewStateCnt_ = startsAt)))
#line 3411
    return curPos;
    @try {
      
#line 3412
      self->curChar_ = [((FreemarkerCoreSimpleCharStream *) nil_chk(self->input_stream_)) readChar];
    }
    @catch (
#line 3413
    JavaIoIOException *e) {
      
#line 3413
      return curPos;
    }
  }
}


#line 3416
jint FreemarkerCoreFMParserTokenManager_jjStopStringLiteralDfa_2WithInt_withLong_withLong_withLong_(FreemarkerCoreFMParserTokenManager *self, jint pos, jlong active0, jlong active1, jlong active2) {
  switch (pos) {
    
#line 3419
    case 0:
    if ((active1 & (jlong) 0x1000000000000000LL) != 0LL)
#line 3421
    return 2;
    if ((active1 & (jlong) 0x1800000LL) != 0LL || (active2 & (jlong) 0x1cLL) != 0LL) {
      
#line 3424
      self->jjmatchedKind_ = 133;
      return 84;
    }
    if ((active1 & (jlong) 0x10008000000000LL) != 0LL)
#line 3428
    return 42;
    if ((active1 & (jlong) 0x8000058000000LL) != 0LL)
#line 3430
    return 46;
    return -1;
    case 1:
    if ((active2 & (jlong) 0xcLL) != 0LL)
#line 3434
    return 84;
    if ((active1 & (jlong) 0x8000050000000LL) != 0LL)
#line 3436
    return 45;
    if ((active1 & (jlong) 0x1800000LL) != 0LL || (active2 & (jlong) 0x10LL) != 0LL) {
      
#line 3439
      if (self->jjmatchedPos_ != 1) {
        
#line 3441
        self->jjmatchedKind_ = 133;
        self->jjmatchedPos_ = 1;
      }
      return 84;
    }
    return -1;
    case 2:
    if ((active1 & (jlong) 0x1800000LL) != 0LL || (active2 & (jlong) 0x10LL) != 0LL) {
      
#line 3450
      self->jjmatchedKind_ = 133;
      self->jjmatchedPos_ = 2;
      return 84;
    }
    return -1;
    case 3:
    if ((active1 & (jlong) 0x800000LL) != 0LL || (active2 & (jlong) 0x10LL) != 0LL) {
      
#line 3458
      self->jjmatchedKind_ = 133;
      self->jjmatchedPos_ = 3;
      return 84;
    }
    if ((active1 & (jlong) 0x1000000LL) != 0LL)
#line 3463
    return 84;
    return -1;
    default:
    return -1;
  }
}


#line 3469
jint FreemarkerCoreFMParserTokenManager_jjStartNfa_2WithInt_withLong_withLong_withLong_(FreemarkerCoreFMParserTokenManager *self, jint pos, jlong active0, jlong active1, jlong active2) {
  return FreemarkerCoreFMParserTokenManager_jjMoveNfa_2WithInt_withInt_(self, FreemarkerCoreFMParserTokenManager_jjStopStringLiteralDfa_2WithInt_withLong_withLong_withLong_(self, pos, active0, active1, active2), pos + 1);
}


#line 3472
jint FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa0_2(FreemarkerCoreFMParserTokenManager *self) {
  switch (self->curChar_) {
    
#line 3475
    case 33:
    self->jjmatchedKind_ = 120;
    return FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa1_2WithLong_withLong_(self, (jlong) 0x800000000LL, (jlong) 0x0LL);
    case 37:
    self->jjmatchedKind_ = 117;
    return FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa1_2WithLong_withLong_(self, (jlong) 0x10000000000LL, (jlong) 0x0LL);
    case 40:
    return FreemarkerCoreFMParserTokenManager_jjStopAtPosWithInt_withInt_(self, 0, 126);
    case 41:
    return FreemarkerCoreFMParserTokenManager_jjStopAtPosWithInt_withInt_(self, 0, 127);
    case 42:
    self->jjmatchedKind_ = 113;
    return FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa1_2WithLong_withLong_(self, (jlong) 0x4004000000000LL, (jlong) 0x0LL);
    case 43:
    self->jjmatchedKind_ = 111;
    return FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa1_2WithLong_withLong_(self, (jlong) 0x21000000000LL, (jlong) 0x0LL);
    case 44:
    return FreemarkerCoreFMParserTokenManager_jjStopAtPosWithInt_withInt_(self, 0, 121);
    case 45:
    self->jjmatchedKind_ = 112;
    return FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa1_2WithLong_withLong_(self, (jlong) 0x42000000000LL, (jlong) 0x0LL);
    case 46:
    self->jjmatchedKind_ = 91;
    return FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa1_2WithLong_withLong_(self, (jlong) 0x8000050000000LL, (jlong) 0x0LL);
    case 47:
    self->jjmatchedKind_ = 116;
    return FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa1_2WithLong_withLong_(self, (jlong) 0x8000000000LL, (jlong) 0x0LL);
    case 58:
    return FreemarkerCoreFMParserTokenManager_jjStopAtPosWithInt_withInt_(self, 0, 123);
    case 59:
    return FreemarkerCoreFMParserTokenManager_jjStopAtPosWithInt_withInt_(self, 0, 122);
    case 61:
    self->jjmatchedKind_ = 97;
    return FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa1_2WithLong_withLong_(self, (jlong) 0x400000000LL, (jlong) 0x0LL);
    case 62:
    return FreemarkerCoreFMParserTokenManager_jjStopAtPosWithInt_withInt_(self, 0, 139);
    case 63:
    self->jjmatchedKind_ = 95;
    return FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa1_2WithLong_withLong_(self, (jlong) 0x100000000LL, (jlong) 0x0LL);
    case 91:
    return FreemarkerCoreFMParserTokenManager_jjStartNfaWithStates_2WithInt_withInt_withInt_(self, 0, 124, 2);
    case 93:
    return FreemarkerCoreFMParserTokenManager_jjStopAtPosWithInt_withInt_(self, 0, 125);
    case 97:
    return FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa1_2WithLong_withLong_(self, (jlong) 0x0LL, (jlong) 0x8LL);
    case 102:
    return FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa1_2WithLong_withLong_(self, (jlong) 0x800000LL, (jlong) 0x0LL);
    case 105:
    return FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa1_2WithLong_withLong_(self, (jlong) 0x0LL, (jlong) 0x4LL);
    case 116:
    return FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa1_2WithLong_withLong_(self, (jlong) 0x1000000LL, (jlong) 0x0LL);
    case 117:
    return FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa1_2WithLong_withLong_(self, (jlong) 0x0LL, (jlong) 0x10LL);
    case 123:
    return FreemarkerCoreFMParserTokenManager_jjStopAtPosWithInt_withInt_(self, 0, 128);
    case 125:
    return FreemarkerCoreFMParserTokenManager_jjStopAtPosWithInt_withInt_(self, 0, 129);
    default:
    return FreemarkerCoreFMParserTokenManager_jjMoveNfa_2WithInt_withInt_(self, 1, 0);
  }
}


#line 3536
jint FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa1_2WithLong_withLong_(FreemarkerCoreFMParserTokenManager *self, jlong active1, jlong active2) {
  @try {
    
#line 3537
    self->curChar_ = [((FreemarkerCoreSimpleCharStream *) nil_chk(self->input_stream_)) readChar];
  }
  @catch (
#line 3538
  JavaIoIOException *e) {
    FreemarkerCoreFMParserTokenManager_jjStopStringLiteralDfa_2WithInt_withLong_withLong_withLong_(self, 0, 0LL, active1, active2);
    return 1;
  }
  switch (self->curChar_) {
    
#line 3544
    case 42:
    if ((active1 & (jlong) 0x4000000000000LL) != 0LL)
#line 3546
    return FreemarkerCoreFMParserTokenManager_jjStopAtPosWithInt_withInt_(self, 1, 114);
    break;
    case 43:
    if ((active1 & (jlong) 0x20000000000LL) != 0LL)
#line 3550
    return FreemarkerCoreFMParserTokenManager_jjStopAtPosWithInt_withInt_(self, 1, 105);
    break;
    case 45:
    if ((active1 & (jlong) 0x40000000000LL) != 0LL)
#line 3554
    return FreemarkerCoreFMParserTokenManager_jjStopAtPosWithInt_withInt_(self, 1, 106);
    break;
    case 46:
    if ((active1 & (jlong) 0x10000000LL) != 0LL) {
      
#line 3559
      self->jjmatchedKind_ = 92;
      self->jjmatchedPos_ = 1;
    }
    return FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa2_2WithLong_withLong_withLong_withLong_(self, active1, (jlong) 0x8000040000000LL, active2, 0LL);
    case 61:
    if ((active1 & (jlong) 0x400000000LL) != 0LL)
#line 3565
    return FreemarkerCoreFMParserTokenManager_jjStopAtPosWithInt_withInt_(self, 1, 98);
    else if ((active1 & (jlong) 0x800000000LL) != 0LL)
#line 3567
    return FreemarkerCoreFMParserTokenManager_jjStopAtPosWithInt_withInt_(self, 1, 99);
    else if ((active1 & (jlong) 0x1000000000LL) != 0LL)
#line 3569
    return FreemarkerCoreFMParserTokenManager_jjStopAtPosWithInt_withInt_(self, 1, 100);
    else if ((active1 & (jlong) 0x2000000000LL) != 0LL)
#line 3571
    return FreemarkerCoreFMParserTokenManager_jjStopAtPosWithInt_withInt_(self, 1, 101);
    else if ((active1 & (jlong) 0x4000000000LL) != 0LL)
#line 3573
    return FreemarkerCoreFMParserTokenManager_jjStopAtPosWithInt_withInt_(self, 1, 102);
    else if ((active1 & (jlong) 0x8000000000LL) != 0LL)
#line 3575
    return FreemarkerCoreFMParserTokenManager_jjStopAtPosWithInt_withInt_(self, 1, 103);
    else if ((active1 & (jlong) 0x10000000000LL) != 0LL)
#line 3577
    return FreemarkerCoreFMParserTokenManager_jjStopAtPosWithInt_withInt_(self, 1, 104);
    break;
    case 63:
    if ((active1 & (jlong) 0x100000000LL) != 0LL)
#line 3581
    return FreemarkerCoreFMParserTokenManager_jjStopAtPosWithInt_withInt_(self, 1, 96);
    break;
    case 97:
    return FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa2_2WithLong_withLong_withLong_withLong_(self, active1, (jlong) 0x800000LL, active2, 0LL);
    case 110:
    if ((active2 & (jlong) 0x4LL) != 0LL)
#line 3587
    return FreemarkerCoreFMParserTokenManager_jjStartNfaWithStates_2WithInt_withInt_withInt_(self, 1, 130, 84);
    break;
    case 114:
    return FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa2_2WithLong_withLong_withLong_withLong_(self, active1, (jlong) 0x1000000LL, active2, 0LL);
    case 115:
    if ((active2 & (jlong) 0x8LL) != 0LL)
#line 3593
    return FreemarkerCoreFMParserTokenManager_jjStartNfaWithStates_2WithInt_withInt_withInt_(self, 1, 131, 84);
    return FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa2_2WithLong_withLong_withLong_withLong_(self, active1, 0LL, active2, (jlong) 0x10LL);
    default:
    break;
  }
  return FreemarkerCoreFMParserTokenManager_jjStartNfa_2WithInt_withLong_withLong_withLong_(self, 0, 0LL, active1, active2);
}


#line 3600
jint FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa2_2WithLong_withLong_withLong_withLong_(FreemarkerCoreFMParserTokenManager *self, jlong old1, jlong active1, jlong old2, jlong active2) {
  if (((active1 &= old1) | (active2 &= old2)) == 0LL)
#line 3602
  return FreemarkerCoreFMParserTokenManager_jjStartNfa_2WithInt_withLong_withLong_withLong_(self, 0, 0LL, old1, old2);
  @try {
    
#line 3603
    self->curChar_ = [((FreemarkerCoreSimpleCharStream *) nil_chk(self->input_stream_)) readChar];
  }
  @catch (
#line 3604
  JavaIoIOException *e) {
    FreemarkerCoreFMParserTokenManager_jjStopStringLiteralDfa_2WithInt_withLong_withLong_withLong_(self, 1, 0LL, active1, active2);
    return 2;
  }
  switch (self->curChar_) {
    
#line 3610
    case 42:
    if ((active1 & (jlong) 0x40000000LL) != 0LL)
#line 3612
    return FreemarkerCoreFMParserTokenManager_jjStopAtPosWithInt_withInt_(self, 2, 94);
    break;
    case 46:
    if ((active1 & (jlong) 0x8000000000000LL) != 0LL)
#line 3616
    return FreemarkerCoreFMParserTokenManager_jjStopAtPosWithInt_withInt_(self, 2, 115);
    break;
    case 105:
    return FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa3_2WithLong_withLong_withLong_withLong_(self, active1, 0LL, active2, (jlong) 0x10LL);
    case 108:
    return FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa3_2WithLong_withLong_withLong_withLong_(self, active1, (jlong) 0x800000LL, active2, 0LL);
    case 117:
    return FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa3_2WithLong_withLong_withLong_withLong_(self, active1, (jlong) 0x1000000LL, active2, 0LL);
    default:
    break;
  }
  return FreemarkerCoreFMParserTokenManager_jjStartNfa_2WithInt_withLong_withLong_withLong_(self, 1, 0LL, active1, active2);
}


#line 3629
jint FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa3_2WithLong_withLong_withLong_withLong_(FreemarkerCoreFMParserTokenManager *self, jlong old1, jlong active1, jlong old2, jlong active2) {
  if (((active1 &= old1) | (active2 &= old2)) == 0LL)
#line 3631
  return FreemarkerCoreFMParserTokenManager_jjStartNfa_2WithInt_withLong_withLong_withLong_(self, 1, 0LL, old1, old2);
  @try {
    
#line 3632
    self->curChar_ = [((FreemarkerCoreSimpleCharStream *) nil_chk(self->input_stream_)) readChar];
  }
  @catch (
#line 3633
  JavaIoIOException *e) {
    FreemarkerCoreFMParserTokenManager_jjStopStringLiteralDfa_2WithInt_withLong_withLong_withLong_(self, 2, 0LL, active1, active2);
    return 3;
  }
  switch (self->curChar_) {
    
#line 3639
    case 101:
    if ((active1 & (jlong) 0x1000000LL) != 0LL)
#line 3641
    return FreemarkerCoreFMParserTokenManager_jjStartNfaWithStates_2WithInt_withInt_withInt_(self, 3, 88, 84);
    break;
    case 110:
    return FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa4_2WithLong_withLong_withLong_withLong_(self, active1, 0LL, active2, (jlong) 0x10LL);
    case 115:
    return FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa4_2WithLong_withLong_withLong_withLong_(self, active1, (jlong) 0x800000LL, active2, 0LL);
    default:
    break;
  }
  return FreemarkerCoreFMParserTokenManager_jjStartNfa_2WithInt_withLong_withLong_withLong_(self, 2, 0LL, active1, active2);
}


#line 3652
jint FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa4_2WithLong_withLong_withLong_withLong_(FreemarkerCoreFMParserTokenManager *self, jlong old1, jlong active1, jlong old2, jlong active2) {
  if (((active1 &= old1) | (active2 &= old2)) == 0LL)
#line 3654
  return FreemarkerCoreFMParserTokenManager_jjStartNfa_2WithInt_withLong_withLong_withLong_(self, 2, 0LL, old1, old2);
  @try {
    
#line 3655
    self->curChar_ = [((FreemarkerCoreSimpleCharStream *) nil_chk(self->input_stream_)) readChar];
  }
  @catch (
#line 3656
  JavaIoIOException *e) {
    FreemarkerCoreFMParserTokenManager_jjStopStringLiteralDfa_2WithInt_withLong_withLong_withLong_(self, 3, 0LL, active1, active2);
    return 4;
  }
  switch (self->curChar_) {
    
#line 3662
    case 101:
    if ((active1 & (jlong) 0x800000LL) != 0LL)
#line 3664
    return FreemarkerCoreFMParserTokenManager_jjStartNfaWithStates_2WithInt_withInt_withInt_(self, 4, 87, 84);
    break;
    case 103:
    if ((active2 & (jlong) 0x10LL) != 0LL)
#line 3668
    return FreemarkerCoreFMParserTokenManager_jjStartNfaWithStates_2WithInt_withInt_withInt_(self, 4, 132, 84);
    break;
    default:
    break;
  }
  return FreemarkerCoreFMParserTokenManager_jjStartNfa_2WithInt_withLong_withLong_withLong_(self, 3, 0LL, active1, active2);
}


#line 3675
jint FreemarkerCoreFMParserTokenManager_jjStartNfaWithStates_2WithInt_withInt_withInt_(FreemarkerCoreFMParserTokenManager *self, jint pos, jint kind, jint state) {
  
#line 3677
  self->jjmatchedKind_ = kind;
  self->jjmatchedPos_ = pos;
  @try {
    
#line 3679
    self->curChar_ = [((FreemarkerCoreSimpleCharStream *) nil_chk(self->input_stream_)) readChar];
  }
  @catch (
#line 3680
  JavaIoIOException *e) {
    
#line 3680
    return pos + 1;
  }
  
#line 3681
  return FreemarkerCoreFMParserTokenManager_jjMoveNfa_2WithInt_withInt_(self, state, pos + 1);
}


#line 3683
jint FreemarkerCoreFMParserTokenManager_jjMoveNfa_2WithInt_withInt_(FreemarkerCoreFMParserTokenManager *self, jint startState, jint curPos) {
  
#line 3685
  jint startsAt = 0;
  self->jjnewStateCnt_ = 84;
  jint i = 1;
  *IOSIntArray_GetRef(nil_chk(self->jjstateSet_), 0) = startState;
  jint kind = (jint) 0x7fffffff;
  for (; ; ) {
    
#line 3692
    if (++self->jjround_ == (jint) 0x7fffffff)
#line 3693
    FreemarkerCoreFMParserTokenManager_ReInitRounds(self);
    if (self->curChar_ < 64) {
      
#line 3696
      jlong l = LShift64(1LL, self->curChar_);
      do {
        
#line 3699
        switch (IOSIntArray_Get(self->jjstateSet_, --i)) {
          
#line 3701
          case 42:
          if (self->curChar_ == 62 && kind > 140)
#line 3703
          kind = 140;
          break;
          case 1:
          if (((jlong) 0x3ff000000000000LL & l) != 0LL) {
            
#line 3708
            if (kind > 89)
#line 3709
            kind = 89;
            {
              
#line 3710
              FreemarkerCoreFMParserTokenManager_jjCheckNAddStatesWithInt_withInt_(self, 305, 307);
            }
          }
          else
#line 3712
          if (((jlong) 0x100002600LL & l) != 0LL) {
            
#line 3714
            if (kind > 77)
#line 3715
            kind = 77;
            {
              
#line 3716
              FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 0);
            }
          }
          else
#line 3718
          if (self->curChar_ == 38) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 308, 312);
          }
          else
#line 3720
          if (self->curChar_ == 46) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 313, 314);
          }
          else
#line 3722
          if (self->curChar_ == 47) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 315, 316);
          }
          else
#line 3724
          if (self->curChar_ == 35) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 38);
          }
          else
#line 3726
          if (self->curChar_ == 36) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 38);
          }
          else
#line 3728
          if (self->curChar_ == 60) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 27);
          }
          else
#line 3730
          if (self->curChar_ == 39) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddStatesWithInt_withInt_(self, 317, 319);
          }
          else
#line 3732
          if (self->curChar_ == 34) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddStatesWithInt_withInt_(self, 320, 322);
          }
          
#line 3734
          if (self->curChar_ == 36) {
            
#line 3736
            if (kind > 133)
#line 3737
            kind = 133;
            {
              
#line 3738
              FreemarkerCoreFMParserTokenManager_jjCheckNAddTwoStatesWithInt_withInt_(self, 34, 35);
            }
          }
          else
#line 3740
          if (self->curChar_ == 38) {
            
#line 3742
            if (kind > 118)
#line 3743
            kind = 118;
          }
          else if (self->curChar_ == 60) {
            
#line 3747
            if (kind > 107)
#line 3748
            kind = 107;
          }
          if (self->curChar_ == 60)
#line 3751
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 2;
          break;
          case 46:
          if (self->curChar_ == 46)
#line 3755
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 47;
          if (self->curChar_ == 46)
#line 3757
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 45;
          break;
          case 45:
          if (self->curChar_ == 33) {
            
#line 3762
            if (kind > 93)
#line 3763
            kind = 93;
          }
          else if (self->curChar_ == 60) {
            
#line 3767
            if (kind > 93)
#line 3768
            kind = 93;
          }
          break;
          case 84:
          case 34:
          if (((jlong) 0x3ff001000000000LL & l) == 0LL)
#line 3774
          break;
          if (kind > 133)
#line 3776
          kind = 133;
          {
            
#line 3777
            FreemarkerCoreFMParserTokenManager_jjCheckNAddTwoStatesWithInt_withInt_(self, 34, 35);
          }
          
#line 3778
          break;
          case 0:
          if (((jlong) 0x100002600LL & l) == 0LL)
#line 3781
          break;
          if (kind > 77)
#line 3783
          kind = 77;
          {
            
#line 3784
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 0);
          }
          
#line 3785
          break;
          case 2:
          if (((jlong) 0xa00000000LL & l) != 0LL)
#line 3788
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 4;
          break;
          case 3:
          if (self->curChar_ == 45 && kind > 78)
#line 3792
          kind = 78;
          break;
          case 4:
          if (self->curChar_ == 45)
#line 3796
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 3;
          break;
          case 5:
          if (self->curChar_ == 34) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddStatesWithInt_withInt_(self, 320, 322);
          }
          
#line 3801
          break;
          case 6:
          if (((jlong) 0xfffffffbffffffffLL & l) != 0LL) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddStatesWithInt_withInt_(self, 320, 322);
          }
          
#line 3805
          break;
          case 9:
          if (((jlong) 0x3ff000000000000LL & l) != 0LL) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddStatesWithInt_withInt_(self, 320, 322);
          }
          
#line 3809
          break;
          case 10:
          if (self->curChar_ == 34 && kind > 85)
#line 3812
          kind = 85;
          break;
          case 11:
          if (((jlong) 0x9400000000LL & l) != 0LL) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddStatesWithInt_withInt_(self, 320, 322);
          }
          
#line 3817
          break;
          case 12:
          if (self->curChar_ == 39) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddStatesWithInt_withInt_(self, 317, 319);
          }
          
#line 3821
          break;
          case 13:
          if (((jlong) 0xffffff7fffffffffLL & l) != 0LL) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddStatesWithInt_withInt_(self, 317, 319);
          }
          
#line 3825
          break;
          case 16:
          if (((jlong) 0x3ff000000000000LL & l) != 0LL) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddStatesWithInt_withInt_(self, 317, 319);
          }
          
#line 3829
          break;
          case 17:
          if (self->curChar_ == 39 && kind > 85)
#line 3832
          kind = 85;
          break;
          case 18:
          if (((jlong) 0x9400000000LL & l) != 0LL) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddStatesWithInt_withInt_(self, 317, 319);
          }
          
#line 3837
          break;
          case 20:
          if (self->curChar_ == 34) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddTwoStatesWithInt_withInt_(self, 21, 22);
          }
          
#line 3841
          break;
          case 21:
          if (((jlong) 0xfffffffbffffffffLL & l) != 0LL) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddTwoStatesWithInt_withInt_(self, 21, 22);
          }
          
#line 3845
          break;
          case 22:
          if (self->curChar_ == 34 && kind > 86)
#line 3848
          kind = 86;
          break;
          case 23:
          if (self->curChar_ == 39) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddTwoStatesWithInt_withInt_(self, 24, 25);
          }
          
#line 3853
          break;
          case 24:
          if (((jlong) 0xffffff7fffffffffLL & l) != 0LL) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddTwoStatesWithInt_withInt_(self, 24, 25);
          }
          
#line 3857
          break;
          case 25:
          if (self->curChar_ == 39 && kind > 86)
#line 3860
          kind = 86;
          break;
          case 26:
          if (self->curChar_ == 60 && kind > 107)
#line 3864
          kind = 107;
          break;
          case 27:
          if (self->curChar_ == 61 && kind > 108)
#line 3868
          kind = 108;
          break;
          case 28:
          if (self->curChar_ == 60) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 27);
          }
          
#line 3873
          break;
          case 29:
          case 81:
          if (self->curChar_ == 38 && kind > 118)
#line 3877
          kind = 118;
          break;
          case 33:
          if (self->curChar_ != 36)
#line 3881
          break;
          if (kind > 133)
#line 3883
          kind = 133;
          {
            
#line 3884
            FreemarkerCoreFMParserTokenManager_jjCheckNAddTwoStatesWithInt_withInt_(self, 34, 35);
          }
          
#line 3885
          break;
          case 36:
          if (((jlong) 0x400600000000000LL & l) == 0LL)
#line 3888
          break;
          if (kind > 133)
#line 3890
          kind = 133;
          {
            
#line 3891
            FreemarkerCoreFMParserTokenManager_jjCheckNAddTwoStatesWithInt_withInt_(self, 34, 35);
          }
          
#line 3892
          break;
          case 39:
          if (self->curChar_ == 36) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 38);
          }
          
#line 3896
          break;
          case 40:
          if (self->curChar_ == 35) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 38);
          }
          
#line 3900
          break;
          case 41:
          if (self->curChar_ == 47) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 315, 316);
          }
          
#line 3904
          break;
          case 44:
          if (self->curChar_ == 46) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 313, 314);
          }
          
#line 3908
          break;
          case 47:
          if (self->curChar_ == 33 && kind > 93)
#line 3911
          kind = 93;
          break;
          case 48:
          if (self->curChar_ == 46)
#line 3915
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 47;
          break;
          case 49:
          if (((jlong) 0x3ff000000000000LL & l) == 0LL)
#line 3919
          break;
          if (kind > 89)
#line 3921
          kind = 89;
          {
            
#line 3922
            FreemarkerCoreFMParserTokenManager_jjCheckNAddStatesWithInt_withInt_(self, 305, 307);
          }
          
#line 3923
          break;
          case 50:
          if (((jlong) 0x3ff000000000000LL & l) == 0LL)
#line 3926
          break;
          if (kind > 89)
#line 3928
          kind = 89;
          {
            
#line 3929
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 50);
          }
          
#line 3930
          break;
          case 51:
          if (((jlong) 0x3ff000000000000LL & l) != 0LL) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddTwoStatesWithInt_withInt_(self, 51, 52);
          }
          
#line 3934
          break;
          case 52:
          if (self->curChar_ == 46) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 53);
          }
          
#line 3938
          break;
          case 53:
          if (((jlong) 0x3ff000000000000LL & l) == 0LL)
#line 3941
          break;
          if (kind > 90)
#line 3943
          kind = 90;
          {
            
#line 3944
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 53);
          }
          
#line 3945
          break;
          case 67:
          if (self->curChar_ == 38) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 308, 312);
          }
          
#line 3949
          break;
          case 68:
          if (self->curChar_ == 59 && kind > 107)
#line 3952
          kind = 107;
          break;
          case 71:
          if (self->curChar_ == 59) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 27);
          }
          
#line 3957
          break;
          case 74:
          if (self->curChar_ == 59 && kind > 109)
#line 3960
          kind = 109;
          break;
          case 77:
          if (self->curChar_ == 61 && kind > 110)
#line 3964
          kind = 110;
          break;
          case 78:
          if (self->curChar_ == 59)
#line 3968
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 77;
          break;
          default:
          
#line 3970
          break;
        }
      }
      while (
#line 3972
      i != startsAt);
    }
    else if (self->curChar_ < 128) {
      
#line 3976
      jlong l = LShift64(1LL, (self->curChar_ & 077));
      do {
        
#line 3979
        switch (IOSIntArray_Get(self->jjstateSet_, --i)) {
          
#line 3981
          case 42:
          if (self->curChar_ == 93 && kind > 140)
#line 3983
          kind = 140;
          break;
          case 1:
          if (((jlong) 0x7fffffe87ffffffLL & l) != 0LL) {
            
#line 3988
            if (kind > 133)
#line 3989
            kind = 133;
            {
              
#line 3990
              FreemarkerCoreFMParserTokenManager_jjCheckNAddTwoStatesWithInt_withInt_(self, 34, 35);
            }
          }
          else
#line 3992
          if (self->curChar_ == 92) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 323, 326);
          }
          else
#line 3994
          if (self->curChar_ == 124)
#line 3995
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 31;
          else if (self->curChar_ == 91)
#line 3997
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 2;
          if (self->curChar_ == 103) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddTwoStatesWithInt_withInt_(self, 62, 83);
          }
          else
#line 4000
          if (self->curChar_ == 108) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddTwoStatesWithInt_withInt_(self, 55, 57);
          }
          else
#line 4002
          if (self->curChar_ == 92) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 36);
          }
          else
#line 4004
          if (self->curChar_ == 124) {
            
#line 4006
            if (kind > 119)
#line 4007
            kind = 119;
          }
          else if (self->curChar_ == 114) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 327, 328);
          }
          
#line 4011
          break;
          case 84:
          if (((jlong) 0x7fffffe87ffffffLL & l) != 0LL) {
            
#line 4015
            if (kind > 133)
#line 4016
            kind = 133;
            {
              
#line 4017
              FreemarkerCoreFMParserTokenManager_jjCheckNAddTwoStatesWithInt_withInt_(self, 34, 35);
            }
          }
          else
#line 4019
          if (self->curChar_ == 92) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 36);
          }
          
#line 4021
          break;
          case 6:
          if (((jlong) 0xffffffffefffffffLL & l) != 0LL) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddStatesWithInt_withInt_(self, 320, 322);
          }
          
#line 4025
          break;
          case 7:
          if (self->curChar_ == 92) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 329, 330);
          }
          
#line 4029
          break;
          case 8:
          if (self->curChar_ == 120)
#line 4032
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 9;
          break;
          case 9:
          if (((jlong) 0x7e0000007eLL & l) != 0LL) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddStatesWithInt_withInt_(self, 320, 322);
          }
          
#line 4037
          break;
          case 11:
          if (((jlong) 0x81450c610000000LL & l) != 0LL) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddStatesWithInt_withInt_(self, 320, 322);
          }
          
#line 4041
          break;
          case 13:
          if (((jlong) 0xffffffffefffffffLL & l) != 0LL) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddStatesWithInt_withInt_(self, 317, 319);
          }
          
#line 4045
          break;
          case 14:
          if (self->curChar_ == 92) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 331, 332);
          }
          
#line 4049
          break;
          case 15:
          if (self->curChar_ == 120)
#line 4052
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 16;
          break;
          case 16:
          if (((jlong) 0x7e0000007eLL & l) != 0LL) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddStatesWithInt_withInt_(self, 317, 319);
          }
          
#line 4057
          break;
          case 18:
          if (((jlong) 0x81450c610000000LL & l) != 0LL) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddStatesWithInt_withInt_(self, 317, 319);
          }
          
#line 4061
          break;
          case 19:
          if (self->curChar_ == 114) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 327, 328);
          }
          
#line 4065
          break;
          case 21:
          {
            
#line 4067
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 333, 334);
          }
          
#line 4068
          break;
          case 24:
          {
            
#line 4070
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 335, 336);
          }
          
#line 4071
          break;
          case 30:
          case 31:
          if (self->curChar_ == 124 && kind > 119)
#line 4075
          kind = 119;
          break;
          case 32:
          if (self->curChar_ == 124)
#line 4079
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 31;
          break;
          case 33:
          if (((jlong) 0x7fffffe87ffffffLL & l) == 0LL)
#line 4083
          break;
          if (kind > 133)
#line 4085
          kind = 133;
          {
            
#line 4086
            FreemarkerCoreFMParserTokenManager_jjCheckNAddTwoStatesWithInt_withInt_(self, 34, 35);
          }
          
#line 4087
          break;
          case 34:
          if (((jlong) 0x7fffffe87ffffffLL & l) == 0LL)
#line 4090
          break;
          if (kind > 133)
#line 4092
          kind = 133;
          {
            
#line 4093
            FreemarkerCoreFMParserTokenManager_jjCheckNAddTwoStatesWithInt_withInt_(self, 34, 35);
          }
          
#line 4094
          break;
          case 35:
          if (self->curChar_ == 92) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 36);
          }
          
#line 4098
          break;
          case 37:
          if (self->curChar_ == 92) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 36);
          }
          
#line 4102
          break;
          case 38:
          if (self->curChar_ == 123 && kind > 134)
#line 4105
          kind = 134;
          break;
          case 54:
          if (self->curChar_ == 108) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddTwoStatesWithInt_withInt_(self, 55, 57);
          }
          
#line 4110
          break;
          case 55:
          if (self->curChar_ == 116 && kind > 107)
#line 4113
          kind = 107;
          break;
          case 56:
          if (self->curChar_ == 101 && kind > 108)
#line 4117
          kind = 108;
          break;
          case 57:
          case 60:
          if (self->curChar_ == 116) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 56);
          }
          
#line 4123
          break;
          case 58:
          if (self->curChar_ == 92) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 323, 326);
          }
          
#line 4127
          break;
          case 59:
          if (self->curChar_ == 108) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 55);
          }
          
#line 4131
          break;
          case 61:
          if (self->curChar_ == 108)
#line 4134
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 60;
          break;
          case 62:
          if (self->curChar_ == 116 && kind > 109)
#line 4138
          kind = 109;
          break;
          case 63:
          if (self->curChar_ == 103) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 62);
          }
          
#line 4143
          break;
          case 64:
          if (self->curChar_ == 101 && kind > 110)
#line 4146
          kind = 110;
          break;
          case 65:
          case 83:
          if (self->curChar_ == 116) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 64);
          }
          
#line 4152
          break;
          case 66:
          if (self->curChar_ == 103)
#line 4155
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 65;
          break;
          case 69:
          if (self->curChar_ == 116)
#line 4159
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 68;
          break;
          case 70:
          if (self->curChar_ == 108)
#line 4163
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 69;
          break;
          case 72:
          if (self->curChar_ == 116)
#line 4167
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 71;
          break;
          case 73:
          if (self->curChar_ == 108)
#line 4171
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 72;
          break;
          case 75:
          if (self->curChar_ == 116)
#line 4175
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 74;
          break;
          case 76:
          if (self->curChar_ == 103)
#line 4179
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 75;
          break;
          case 79:
          if (self->curChar_ == 116)
#line 4183
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 78;
          break;
          case 80:
          if (self->curChar_ == 103)
#line 4187
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 79;
          break;
          case 82:
          if (self->curChar_ == 103) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddTwoStatesWithInt_withInt_(self, 62, 83);
          }
          
#line 4192
          break;
          default:
          
#line 4193
          break;
        }
      }
      while (
#line 4195
      i != startsAt);
    }
    else {
      
#line 4199
      jint hiByte = (RShift32(self->curChar_, 8));
      jint i1 = RShift32(hiByte, 6);
      jlong l1 = LShift64(1LL, (hiByte & 077));
      jint i2 = RShift32((self->curChar_ & (jint) 0xff), 6);
      jlong l2 = LShift64(1LL, (self->curChar_ & 077));
      do {
        
#line 4206
        switch (IOSIntArray_Get(self->jjstateSet_, --i)) {
          
#line 4208
          case 1:
          if (!FreemarkerCoreFMParserTokenManager_jjCanMove_1WithInt_withInt_withInt_withLong_withLong_(hiByte, i1, i2, l1, l2))
#line 4210
          break;
          if (kind > 133)
#line 4212
          kind = 133;
          {
            
#line 4213
            FreemarkerCoreFMParserTokenManager_jjCheckNAddTwoStatesWithInt_withInt_(self, 34, 35);
          }
          
#line 4214
          break;
          case 84:
          case 34:
          if (!FreemarkerCoreFMParserTokenManager_jjCanMove_1WithInt_withInt_withInt_withLong_withLong_(hiByte, i1, i2, l1, l2))
#line 4218
          break;
          if (kind > 133)
#line 4220
          kind = 133;
          {
            
#line 4221
            FreemarkerCoreFMParserTokenManager_jjCheckNAddTwoStatesWithInt_withInt_(self, 34, 35);
          }
          
#line 4222
          break;
          case 6:
          if (FreemarkerCoreFMParserTokenManager_jjCanMove_0WithInt_withInt_withInt_withLong_withLong_(hiByte, i1, i2, l1, l2)) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 320, 322);
          }
          
#line 4226
          break;
          case 13:
          if (FreemarkerCoreFMParserTokenManager_jjCanMove_0WithInt_withInt_withInt_withLong_withLong_(hiByte, i1, i2, l1, l2)) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 317, 319);
          }
          
#line 4230
          break;
          case 21:
          if (FreemarkerCoreFMParserTokenManager_jjCanMove_0WithInt_withInt_withInt_withLong_withLong_(hiByte, i1, i2, l1, l2)) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 333, 334);
          }
          
#line 4234
          break;
          case 24:
          if (FreemarkerCoreFMParserTokenManager_jjCanMove_0WithInt_withInt_withInt_withLong_withLong_(hiByte, i1, i2, l1, l2)) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 335, 336);
          }
          
#line 4238
          break;
          default:
          
#line 4239
          if (i1 == 0 || l1 == 0 || i2 == 0 || l2 == 0) break;
          else
#line 4239
          break;
        }
      }
      while (
#line 4241
      i != startsAt);
    }
    if (kind != (jint) 0x7fffffff) {
      
#line 4245
      self->jjmatchedKind_ = kind;
      self->jjmatchedPos_ = curPos;
      kind = (jint) 0x7fffffff;
    }
    ++curPos;
    jint unseq$1 = self->jjnewStateCnt_;
    
#line 4250
    if ((i = unseq$1) == (startsAt = 84 - (self->jjnewStateCnt_ = startsAt)))
#line 4251
    return curPos;
    @try {
      
#line 4252
      self->curChar_ = [((FreemarkerCoreSimpleCharStream *) nil_chk(self->input_stream_)) readChar];
    }
    @catch (
#line 4253
    JavaIoIOException *e) {
      
#line 4253
      return curPos;
    }
  }
}


#line 4256
jint FreemarkerCoreFMParserTokenManager_jjStopStringLiteralDfa_3WithInt_withLong_withLong_withLong_(FreemarkerCoreFMParserTokenManager *self, jint pos, jlong active0, jlong active1, jlong active2) {
  switch (pos) {
    
#line 4259
    case 0:
    if ((active1 & (jlong) 0x1000000000000000LL) != 0LL)
#line 4261
    return 2;
    if ((active1 & (jlong) 0x1800000LL) != 0LL || (active2 & (jlong) 0x1cLL) != 0LL) {
      
#line 4264
      self->jjmatchedKind_ = 133;
      return 81;
    }
    if ((active1 & (jlong) 0x8000058000000LL) != 0LL)
#line 4268
    return 43;
    return -1;
    case 1:
    if ((active2 & (jlong) 0xcLL) != 0LL)
#line 4272
    return 81;
    if ((active1 & (jlong) 0x8000050000000LL) != 0LL)
#line 4274
    return 42;
    if ((active1 & (jlong) 0x1800000LL) != 0LL || (active2 & (jlong) 0x10LL) != 0LL) {
      
#line 4277
      if (self->jjmatchedPos_ != 1) {
        
#line 4279
        self->jjmatchedKind_ = 133;
        self->jjmatchedPos_ = 1;
      }
      return 81;
    }
    return -1;
    case 2:
    if ((active1 & (jlong) 0x1800000LL) != 0LL || (active2 & (jlong) 0x10LL) != 0LL) {
      
#line 4288
      self->jjmatchedKind_ = 133;
      self->jjmatchedPos_ = 2;
      return 81;
    }
    return -1;
    case 3:
    if ((active1 & (jlong) 0x800000LL) != 0LL || (active2 & (jlong) 0x10LL) != 0LL) {
      
#line 4296
      self->jjmatchedKind_ = 133;
      self->jjmatchedPos_ = 3;
      return 81;
    }
    if ((active1 & (jlong) 0x1000000LL) != 0LL)
#line 4301
    return 81;
    return -1;
    default:
    return -1;
  }
}


#line 4307
jint FreemarkerCoreFMParserTokenManager_jjStartNfa_3WithInt_withLong_withLong_withLong_(FreemarkerCoreFMParserTokenManager *self, jint pos, jlong active0, jlong active1, jlong active2) {
  return FreemarkerCoreFMParserTokenManager_jjMoveNfa_3WithInt_withInt_(self, FreemarkerCoreFMParserTokenManager_jjStopStringLiteralDfa_3WithInt_withLong_withLong_withLong_(self, pos, active0, active1, active2), pos + 1);
}


#line 4310
jint FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa0_3(FreemarkerCoreFMParserTokenManager *self) {
  switch (self->curChar_) {
    
#line 4313
    case 33:
    self->jjmatchedKind_ = 120;
    return FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa1_3WithLong_withLong_(self, (jlong) 0x800000000LL, (jlong) 0x0LL);
    case 37:
    self->jjmatchedKind_ = 117;
    return FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa1_3WithLong_withLong_(self, (jlong) 0x10000000000LL, (jlong) 0x0LL);
    case 40:
    return FreemarkerCoreFMParserTokenManager_jjStopAtPosWithInt_withInt_(self, 0, 126);
    case 41:
    return FreemarkerCoreFMParserTokenManager_jjStopAtPosWithInt_withInt_(self, 0, 127);
    case 42:
    self->jjmatchedKind_ = 113;
    return FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa1_3WithLong_withLong_(self, (jlong) 0x4004000000000LL, (jlong) 0x0LL);
    case 43:
    self->jjmatchedKind_ = 111;
    return FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa1_3WithLong_withLong_(self, (jlong) 0x21000000000LL, (jlong) 0x0LL);
    case 44:
    return FreemarkerCoreFMParserTokenManager_jjStopAtPosWithInt_withInt_(self, 0, 121);
    case 45:
    self->jjmatchedKind_ = 112;
    return FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa1_3WithLong_withLong_(self, (jlong) 0x42000000000LL, (jlong) 0x0LL);
    case 46:
    self->jjmatchedKind_ = 91;
    return FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa1_3WithLong_withLong_(self, (jlong) 0x8000050000000LL, (jlong) 0x0LL);
    case 47:
    self->jjmatchedKind_ = 116;
    return FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa1_3WithLong_withLong_(self, (jlong) 0x8000000000LL, (jlong) 0x0LL);
    case 58:
    return FreemarkerCoreFMParserTokenManager_jjStopAtPosWithInt_withInt_(self, 0, 123);
    case 59:
    return FreemarkerCoreFMParserTokenManager_jjStopAtPosWithInt_withInt_(self, 0, 122);
    case 61:
    self->jjmatchedKind_ = 97;
    return FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa1_3WithLong_withLong_(self, (jlong) 0x400000000LL, (jlong) 0x0LL);
    case 62:
    self->jjmatchedKind_ = 141;
    return FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa1_3WithLong_withLong_(self, (jlong) 0x0LL, (jlong) 0x4000LL);
    case 63:
    self->jjmatchedKind_ = 95;
    return FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa1_3WithLong_withLong_(self, (jlong) 0x100000000LL, (jlong) 0x0LL);
    case 91:
    return FreemarkerCoreFMParserTokenManager_jjStartNfaWithStates_3WithInt_withInt_withInt_(self, 0, 124, 2);
    case 93:
    return FreemarkerCoreFMParserTokenManager_jjStopAtPosWithInt_withInt_(self, 0, 125);
    case 97:
    return FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa1_3WithLong_withLong_(self, (jlong) 0x0LL, (jlong) 0x8LL);
    case 102:
    return FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa1_3WithLong_withLong_(self, (jlong) 0x800000LL, (jlong) 0x0LL);
    case 105:
    return FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa1_3WithLong_withLong_(self, (jlong) 0x0LL, (jlong) 0x4LL);
    case 116:
    return FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa1_3WithLong_withLong_(self, (jlong) 0x1000000LL, (jlong) 0x0LL);
    case 117:
    return FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa1_3WithLong_withLong_(self, (jlong) 0x0LL, (jlong) 0x10LL);
    case 123:
    return FreemarkerCoreFMParserTokenManager_jjStopAtPosWithInt_withInt_(self, 0, 128);
    case 125:
    return FreemarkerCoreFMParserTokenManager_jjStopAtPosWithInt_withInt_(self, 0, 129);
    default:
    return FreemarkerCoreFMParserTokenManager_jjMoveNfa_3WithInt_withInt_(self, 1, 0);
  }
}


#line 4375
jint FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa1_3WithLong_withLong_(FreemarkerCoreFMParserTokenManager *self, jlong active1, jlong active2) {
  @try {
    
#line 4376
    self->curChar_ = [((FreemarkerCoreSimpleCharStream *) nil_chk(self->input_stream_)) readChar];
  }
  @catch (
#line 4377
  JavaIoIOException *e) {
    FreemarkerCoreFMParserTokenManager_jjStopStringLiteralDfa_3WithInt_withLong_withLong_withLong_(self, 0, 0LL, active1, active2);
    return 1;
  }
  switch (self->curChar_) {
    
#line 4383
    case 42:
    if ((active1 & (jlong) 0x4000000000000LL) != 0LL)
#line 4385
    return FreemarkerCoreFMParserTokenManager_jjStopAtPosWithInt_withInt_(self, 1, 114);
    break;
    case 43:
    if ((active1 & (jlong) 0x20000000000LL) != 0LL)
#line 4389
    return FreemarkerCoreFMParserTokenManager_jjStopAtPosWithInt_withInt_(self, 1, 105);
    break;
    case 45:
    if ((active1 & (jlong) 0x40000000000LL) != 0LL)
#line 4393
    return FreemarkerCoreFMParserTokenManager_jjStopAtPosWithInt_withInt_(self, 1, 106);
    break;
    case 46:
    if ((active1 & (jlong) 0x10000000LL) != 0LL) {
      
#line 4398
      self->jjmatchedKind_ = 92;
      self->jjmatchedPos_ = 1;
    }
    return FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa2_3WithLong_withLong_withLong_withLong_(self, active1, (jlong) 0x8000040000000LL, active2, 0LL);
    case 61:
    if ((active1 & (jlong) 0x400000000LL) != 0LL)
#line 4404
    return FreemarkerCoreFMParserTokenManager_jjStopAtPosWithInt_withInt_(self, 1, 98);
    else if ((active1 & (jlong) 0x800000000LL) != 0LL)
#line 4406
    return FreemarkerCoreFMParserTokenManager_jjStopAtPosWithInt_withInt_(self, 1, 99);
    else if ((active1 & (jlong) 0x1000000000LL) != 0LL)
#line 4408
    return FreemarkerCoreFMParserTokenManager_jjStopAtPosWithInt_withInt_(self, 1, 100);
    else if ((active1 & (jlong) 0x2000000000LL) != 0LL)
#line 4410
    return FreemarkerCoreFMParserTokenManager_jjStopAtPosWithInt_withInt_(self, 1, 101);
    else if ((active1 & (jlong) 0x4000000000LL) != 0LL)
#line 4412
    return FreemarkerCoreFMParserTokenManager_jjStopAtPosWithInt_withInt_(self, 1, 102);
    else if ((active1 & (jlong) 0x8000000000LL) != 0LL)
#line 4414
    return FreemarkerCoreFMParserTokenManager_jjStopAtPosWithInt_withInt_(self, 1, 103);
    else if ((active1 & (jlong) 0x10000000000LL) != 0LL)
#line 4416
    return FreemarkerCoreFMParserTokenManager_jjStopAtPosWithInt_withInt_(self, 1, 104);
    else if ((active2 & (jlong) 0x4000LL) != 0LL)
#line 4418
    return FreemarkerCoreFMParserTokenManager_jjStopAtPosWithInt_withInt_(self, 1, 142);
    break;
    case 63:
    if ((active1 & (jlong) 0x100000000LL) != 0LL)
#line 4422
    return FreemarkerCoreFMParserTokenManager_jjStopAtPosWithInt_withInt_(self, 1, 96);
    break;
    case 97:
    return FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa2_3WithLong_withLong_withLong_withLong_(self, active1, (jlong) 0x800000LL, active2, 0LL);
    case 110:
    if ((active2 & (jlong) 0x4LL) != 0LL)
#line 4428
    return FreemarkerCoreFMParserTokenManager_jjStartNfaWithStates_3WithInt_withInt_withInt_(self, 1, 130, 81);
    break;
    case 114:
    return FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa2_3WithLong_withLong_withLong_withLong_(self, active1, (jlong) 0x1000000LL, active2, 0LL);
    case 115:
    if ((active2 & (jlong) 0x8LL) != 0LL)
#line 4434
    return FreemarkerCoreFMParserTokenManager_jjStartNfaWithStates_3WithInt_withInt_withInt_(self, 1, 131, 81);
    return FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa2_3WithLong_withLong_withLong_withLong_(self, active1, 0LL, active2, (jlong) 0x10LL);
    default:
    break;
  }
  return FreemarkerCoreFMParserTokenManager_jjStartNfa_3WithInt_withLong_withLong_withLong_(self, 0, 0LL, active1, active2);
}


#line 4441
jint FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa2_3WithLong_withLong_withLong_withLong_(FreemarkerCoreFMParserTokenManager *self, jlong old1, jlong active1, jlong old2, jlong active2) {
  if (((active1 &= old1) | (active2 &= old2)) == 0LL)
#line 4443
  return FreemarkerCoreFMParserTokenManager_jjStartNfa_3WithInt_withLong_withLong_withLong_(self, 0, 0LL, old1, old2);
  @try {
    
#line 4444
    self->curChar_ = [((FreemarkerCoreSimpleCharStream *) nil_chk(self->input_stream_)) readChar];
  }
  @catch (
#line 4445
  JavaIoIOException *e) {
    FreemarkerCoreFMParserTokenManager_jjStopStringLiteralDfa_3WithInt_withLong_withLong_withLong_(self, 1, 0LL, active1, active2);
    return 2;
  }
  switch (self->curChar_) {
    
#line 4451
    case 42:
    if ((active1 & (jlong) 0x40000000LL) != 0LL)
#line 4453
    return FreemarkerCoreFMParserTokenManager_jjStopAtPosWithInt_withInt_(self, 2, 94);
    break;
    case 46:
    if ((active1 & (jlong) 0x8000000000000LL) != 0LL)
#line 4457
    return FreemarkerCoreFMParserTokenManager_jjStopAtPosWithInt_withInt_(self, 2, 115);
    break;
    case 105:
    return FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa3_3WithLong_withLong_withLong_withLong_(self, active1, 0LL, active2, (jlong) 0x10LL);
    case 108:
    return FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa3_3WithLong_withLong_withLong_withLong_(self, active1, (jlong) 0x800000LL, active2, 0LL);
    case 117:
    return FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa3_3WithLong_withLong_withLong_withLong_(self, active1, (jlong) 0x1000000LL, active2, 0LL);
    default:
    break;
  }
  return FreemarkerCoreFMParserTokenManager_jjStartNfa_3WithInt_withLong_withLong_withLong_(self, 1, 0LL, active1, active2);
}


#line 4470
jint FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa3_3WithLong_withLong_withLong_withLong_(FreemarkerCoreFMParserTokenManager *self, jlong old1, jlong active1, jlong old2, jlong active2) {
  if (((active1 &= old1) | (active2 &= old2)) == 0LL)
#line 4472
  return FreemarkerCoreFMParserTokenManager_jjStartNfa_3WithInt_withLong_withLong_withLong_(self, 1, 0LL, old1, old2);
  @try {
    
#line 4473
    self->curChar_ = [((FreemarkerCoreSimpleCharStream *) nil_chk(self->input_stream_)) readChar];
  }
  @catch (
#line 4474
  JavaIoIOException *e) {
    FreemarkerCoreFMParserTokenManager_jjStopStringLiteralDfa_3WithInt_withLong_withLong_withLong_(self, 2, 0LL, active1, active2);
    return 3;
  }
  switch (self->curChar_) {
    
#line 4480
    case 101:
    if ((active1 & (jlong) 0x1000000LL) != 0LL)
#line 4482
    return FreemarkerCoreFMParserTokenManager_jjStartNfaWithStates_3WithInt_withInt_withInt_(self, 3, 88, 81);
    break;
    case 110:
    return FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa4_3WithLong_withLong_withLong_withLong_(self, active1, 0LL, active2, (jlong) 0x10LL);
    case 115:
    return FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa4_3WithLong_withLong_withLong_withLong_(self, active1, (jlong) 0x800000LL, active2, 0LL);
    default:
    break;
  }
  return FreemarkerCoreFMParserTokenManager_jjStartNfa_3WithInt_withLong_withLong_withLong_(self, 2, 0LL, active1, active2);
}


#line 4493
jint FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa4_3WithLong_withLong_withLong_withLong_(FreemarkerCoreFMParserTokenManager *self, jlong old1, jlong active1, jlong old2, jlong active2) {
  if (((active1 &= old1) | (active2 &= old2)) == 0LL)
#line 4495
  return FreemarkerCoreFMParserTokenManager_jjStartNfa_3WithInt_withLong_withLong_withLong_(self, 2, 0LL, old1, old2);
  @try {
    
#line 4496
    self->curChar_ = [((FreemarkerCoreSimpleCharStream *) nil_chk(self->input_stream_)) readChar];
  }
  @catch (
#line 4497
  JavaIoIOException *e) {
    FreemarkerCoreFMParserTokenManager_jjStopStringLiteralDfa_3WithInt_withLong_withLong_withLong_(self, 3, 0LL, active1, active2);
    return 4;
  }
  switch (self->curChar_) {
    
#line 4503
    case 101:
    if ((active1 & (jlong) 0x800000LL) != 0LL)
#line 4505
    return FreemarkerCoreFMParserTokenManager_jjStartNfaWithStates_3WithInt_withInt_withInt_(self, 4, 87, 81);
    break;
    case 103:
    if ((active2 & (jlong) 0x10LL) != 0LL)
#line 4509
    return FreemarkerCoreFMParserTokenManager_jjStartNfaWithStates_3WithInt_withInt_withInt_(self, 4, 132, 81);
    break;
    default:
    break;
  }
  return FreemarkerCoreFMParserTokenManager_jjStartNfa_3WithInt_withLong_withLong_withLong_(self, 3, 0LL, active1, active2);
}


#line 4516
jint FreemarkerCoreFMParserTokenManager_jjStartNfaWithStates_3WithInt_withInt_withInt_(FreemarkerCoreFMParserTokenManager *self, jint pos, jint kind, jint state) {
  
#line 4518
  self->jjmatchedKind_ = kind;
  self->jjmatchedPos_ = pos;
  @try {
    
#line 4520
    self->curChar_ = [((FreemarkerCoreSimpleCharStream *) nil_chk(self->input_stream_)) readChar];
  }
  @catch (
#line 4521
  JavaIoIOException *e) {
    
#line 4521
    return pos + 1;
  }
  
#line 4522
  return FreemarkerCoreFMParserTokenManager_jjMoveNfa_3WithInt_withInt_(self, state, pos + 1);
}


#line 4524
jint FreemarkerCoreFMParserTokenManager_jjMoveNfa_3WithInt_withInt_(FreemarkerCoreFMParserTokenManager *self, jint startState, jint curPos) {
  
#line 4526
  jint startsAt = 0;
  self->jjnewStateCnt_ = 81;
  jint i = 1;
  *IOSIntArray_GetRef(nil_chk(self->jjstateSet_), 0) = startState;
  jint kind = (jint) 0x7fffffff;
  for (; ; ) {
    
#line 4533
    if (++self->jjround_ == (jint) 0x7fffffff)
#line 4534
    FreemarkerCoreFMParserTokenManager_ReInitRounds(self);
    if (self->curChar_ < 64) {
      
#line 4537
      jlong l = LShift64(1LL, self->curChar_);
      do {
        
#line 4540
        switch (IOSIntArray_Get(self->jjstateSet_, --i)) {
          
#line 4542
          case 43:
          if (self->curChar_ == 46)
#line 4544
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 44;
          if (self->curChar_ == 46)
#line 4546
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 42;
          break;
          case 42:
          if (self->curChar_ == 33) {
            
#line 4551
            if (kind > 93)
#line 4552
            kind = 93;
          }
          else if (self->curChar_ == 60) {
            
#line 4556
            if (kind > 93)
#line 4557
            kind = 93;
          }
          break;
          case 1:
          if (((jlong) 0x3ff000000000000LL & l) != 0LL) {
            
#line 4563
            if (kind > 89)
#line 4564
            kind = 89;
            {
              
#line 4565
              FreemarkerCoreFMParserTokenManager_jjCheckNAddStatesWithInt_withInt_(self, 337, 339);
            }
          }
          else
#line 4567
          if (((jlong) 0x100002600LL & l) != 0LL) {
            
#line 4569
            if (kind > 77)
#line 4570
            kind = 77;
            {
              
#line 4571
              FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 0);
            }
          }
          else
#line 4573
          if (self->curChar_ == 38) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 340, 344);
          }
          else
#line 4575
          if (self->curChar_ == 46) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 345, 346);
          }
          else
#line 4577
          if (self->curChar_ == 35) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 38);
          }
          else
#line 4579
          if (self->curChar_ == 36) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 38);
          }
          else
#line 4581
          if (self->curChar_ == 60) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 27);
          }
          else
#line 4583
          if (self->curChar_ == 39) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddStatesWithInt_withInt_(self, 317, 319);
          }
          else
#line 4585
          if (self->curChar_ == 34) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddStatesWithInt_withInt_(self, 320, 322);
          }
          
#line 4587
          if (self->curChar_ == 36) {
            
#line 4589
            if (kind > 133)
#line 4590
            kind = 133;
            {
              
#line 4591
              FreemarkerCoreFMParserTokenManager_jjCheckNAddTwoStatesWithInt_withInt_(self, 34, 35);
            }
          }
          else
#line 4593
          if (self->curChar_ == 38) {
            
#line 4595
            if (kind > 118)
#line 4596
            kind = 118;
          }
          else if (self->curChar_ == 60) {
            
#line 4600
            if (kind > 107)
#line 4601
            kind = 107;
          }
          if (self->curChar_ == 60)
#line 4604
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 2;
          break;
          case 81:
          case 34:
          if (((jlong) 0x3ff001000000000LL & l) == 0LL)
#line 4609
          break;
          if (kind > 133)
#line 4611
          kind = 133;
          {
            
#line 4612
            FreemarkerCoreFMParserTokenManager_jjCheckNAddTwoStatesWithInt_withInt_(self, 34, 35);
          }
          
#line 4613
          break;
          case 0:
          if (((jlong) 0x100002600LL & l) == 0LL)
#line 4616
          break;
          if (kind > 77)
#line 4618
          kind = 77;
          {
            
#line 4619
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 0);
          }
          
#line 4620
          break;
          case 2:
          if (((jlong) 0xa00000000LL & l) != 0LL)
#line 4623
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 4;
          break;
          case 3:
          if (self->curChar_ == 45 && kind > 78)
#line 4627
          kind = 78;
          break;
          case 4:
          if (self->curChar_ == 45)
#line 4631
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 3;
          break;
          case 5:
          if (self->curChar_ == 34) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddStatesWithInt_withInt_(self, 320, 322);
          }
          
#line 4636
          break;
          case 6:
          if (((jlong) 0xfffffffbffffffffLL & l) != 0LL) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddStatesWithInt_withInt_(self, 320, 322);
          }
          
#line 4640
          break;
          case 9:
          if (((jlong) 0x3ff000000000000LL & l) != 0LL) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddStatesWithInt_withInt_(self, 320, 322);
          }
          
#line 4644
          break;
          case 10:
          if (self->curChar_ == 34 && kind > 85)
#line 4647
          kind = 85;
          break;
          case 11:
          if (((jlong) 0x9400000000LL & l) != 0LL) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddStatesWithInt_withInt_(self, 320, 322);
          }
          
#line 4652
          break;
          case 12:
          if (self->curChar_ == 39) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddStatesWithInt_withInt_(self, 317, 319);
          }
          
#line 4656
          break;
          case 13:
          if (((jlong) 0xffffff7fffffffffLL & l) != 0LL) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddStatesWithInt_withInt_(self, 317, 319);
          }
          
#line 4660
          break;
          case 16:
          if (((jlong) 0x3ff000000000000LL & l) != 0LL) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddStatesWithInt_withInt_(self, 317, 319);
          }
          
#line 4664
          break;
          case 17:
          if (self->curChar_ == 39 && kind > 85)
#line 4667
          kind = 85;
          break;
          case 18:
          if (((jlong) 0x9400000000LL & l) != 0LL) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddStatesWithInt_withInt_(self, 317, 319);
          }
          
#line 4672
          break;
          case 20:
          if (self->curChar_ == 34) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddTwoStatesWithInt_withInt_(self, 21, 22);
          }
          
#line 4676
          break;
          case 21:
          if (((jlong) 0xfffffffbffffffffLL & l) != 0LL) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddTwoStatesWithInt_withInt_(self, 21, 22);
          }
          
#line 4680
          break;
          case 22:
          if (self->curChar_ == 34 && kind > 86)
#line 4683
          kind = 86;
          break;
          case 23:
          if (self->curChar_ == 39) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddTwoStatesWithInt_withInt_(self, 24, 25);
          }
          
#line 4688
          break;
          case 24:
          if (((jlong) 0xffffff7fffffffffLL & l) != 0LL) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddTwoStatesWithInt_withInt_(self, 24, 25);
          }
          
#line 4692
          break;
          case 25:
          if (self->curChar_ == 39 && kind > 86)
#line 4695
          kind = 86;
          break;
          case 26:
          if (self->curChar_ == 60 && kind > 107)
#line 4699
          kind = 107;
          break;
          case 27:
          if (self->curChar_ == 61 && kind > 108)
#line 4703
          kind = 108;
          break;
          case 28:
          if (self->curChar_ == 60) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 27);
          }
          
#line 4708
          break;
          case 29:
          case 78:
          if (self->curChar_ == 38 && kind > 118)
#line 4712
          kind = 118;
          break;
          case 33:
          if (self->curChar_ != 36)
#line 4716
          break;
          if (kind > 133)
#line 4718
          kind = 133;
          {
            
#line 4719
            FreemarkerCoreFMParserTokenManager_jjCheckNAddTwoStatesWithInt_withInt_(self, 34, 35);
          }
          
#line 4720
          break;
          case 36:
          if (((jlong) 0x400600000000000LL & l) == 0LL)
#line 4723
          break;
          if (kind > 133)
#line 4725
          kind = 133;
          {
            
#line 4726
            FreemarkerCoreFMParserTokenManager_jjCheckNAddTwoStatesWithInt_withInt_(self, 34, 35);
          }
          
#line 4727
          break;
          case 39:
          if (self->curChar_ == 36) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 38);
          }
          
#line 4731
          break;
          case 40:
          if (self->curChar_ == 35) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 38);
          }
          
#line 4735
          break;
          case 41:
          if (self->curChar_ == 46) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 345, 346);
          }
          
#line 4739
          break;
          case 44:
          if (self->curChar_ == 33 && kind > 93)
#line 4742
          kind = 93;
          break;
          case 45:
          if (self->curChar_ == 46)
#line 4746
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 44;
          break;
          case 46:
          if (((jlong) 0x3ff000000000000LL & l) == 0LL)
#line 4750
          break;
          if (kind > 89)
#line 4752
          kind = 89;
          {
            
#line 4753
            FreemarkerCoreFMParserTokenManager_jjCheckNAddStatesWithInt_withInt_(self, 337, 339);
          }
          
#line 4754
          break;
          case 47:
          if (((jlong) 0x3ff000000000000LL & l) == 0LL)
#line 4757
          break;
          if (kind > 89)
#line 4759
          kind = 89;
          {
            
#line 4760
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 47);
          }
          
#line 4761
          break;
          case 48:
          if (((jlong) 0x3ff000000000000LL & l) != 0LL) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddTwoStatesWithInt_withInt_(self, 48, 49);
          }
          
#line 4765
          break;
          case 49:
          if (self->curChar_ == 46) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 50);
          }
          
#line 4769
          break;
          case 50:
          if (((jlong) 0x3ff000000000000LL & l) == 0LL)
#line 4772
          break;
          if (kind > 90)
#line 4774
          kind = 90;
          {
            
#line 4775
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 50);
          }
          
#line 4776
          break;
          case 64:
          if (self->curChar_ == 38) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 340, 344);
          }
          
#line 4780
          break;
          case 65:
          if (self->curChar_ == 59 && kind > 107)
#line 4783
          kind = 107;
          break;
          case 68:
          if (self->curChar_ == 59) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 27);
          }
          
#line 4788
          break;
          case 71:
          if (self->curChar_ == 59 && kind > 109)
#line 4791
          kind = 109;
          break;
          case 74:
          if (self->curChar_ == 61 && kind > 110)
#line 4795
          kind = 110;
          break;
          case 75:
          if (self->curChar_ == 59)
#line 4799
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 74;
          break;
          default:
          
#line 4801
          break;
        }
      }
      while (
#line 4803
      i != startsAt);
    }
    else if (self->curChar_ < 128) {
      
#line 4807
      jlong l = LShift64(1LL, (self->curChar_ & 077));
      do {
        
#line 4810
        switch (IOSIntArray_Get(self->jjstateSet_, --i)) {
          
#line 4812
          case 1:
          if (((jlong) 0x7fffffe87ffffffLL & l) != 0LL) {
            
#line 4815
            if (kind > 133)
#line 4816
            kind = 133;
            {
              
#line 4817
              FreemarkerCoreFMParserTokenManager_jjCheckNAddTwoStatesWithInt_withInt_(self, 34, 35);
            }
          }
          else
#line 4819
          if (self->curChar_ == 92) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 347, 350);
          }
          else
#line 4821
          if (self->curChar_ == 124)
#line 4822
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 31;
          else if (self->curChar_ == 91)
#line 4824
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 2;
          if (self->curChar_ == 103) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddTwoStatesWithInt_withInt_(self, 59, 80);
          }
          else
#line 4827
          if (self->curChar_ == 108) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddTwoStatesWithInt_withInt_(self, 52, 54);
          }
          else
#line 4829
          if (self->curChar_ == 92) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 36);
          }
          else
#line 4831
          if (self->curChar_ == 124) {
            
#line 4833
            if (kind > 119)
#line 4834
            kind = 119;
          }
          else if (self->curChar_ == 114) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 327, 328);
          }
          
#line 4838
          break;
          case 81:
          if (((jlong) 0x7fffffe87ffffffLL & l) != 0LL) {
            
#line 4842
            if (kind > 133)
#line 4843
            kind = 133;
            {
              
#line 4844
              FreemarkerCoreFMParserTokenManager_jjCheckNAddTwoStatesWithInt_withInt_(self, 34, 35);
            }
          }
          else
#line 4846
          if (self->curChar_ == 92) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 36);
          }
          
#line 4848
          break;
          case 6:
          if (((jlong) 0xffffffffefffffffLL & l) != 0LL) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddStatesWithInt_withInt_(self, 320, 322);
          }
          
#line 4852
          break;
          case 7:
          if (self->curChar_ == 92) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 329, 330);
          }
          
#line 4856
          break;
          case 8:
          if (self->curChar_ == 120)
#line 4859
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 9;
          break;
          case 9:
          if (((jlong) 0x7e0000007eLL & l) != 0LL) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddStatesWithInt_withInt_(self, 320, 322);
          }
          
#line 4864
          break;
          case 11:
          if (((jlong) 0x81450c610000000LL & l) != 0LL) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddStatesWithInt_withInt_(self, 320, 322);
          }
          
#line 4868
          break;
          case 13:
          if (((jlong) 0xffffffffefffffffLL & l) != 0LL) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddStatesWithInt_withInt_(self, 317, 319);
          }
          
#line 4872
          break;
          case 14:
          if (self->curChar_ == 92) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 331, 332);
          }
          
#line 4876
          break;
          case 15:
          if (self->curChar_ == 120)
#line 4879
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 16;
          break;
          case 16:
          if (((jlong) 0x7e0000007eLL & l) != 0LL) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddStatesWithInt_withInt_(self, 317, 319);
          }
          
#line 4884
          break;
          case 18:
          if (((jlong) 0x81450c610000000LL & l) != 0LL) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddStatesWithInt_withInt_(self, 317, 319);
          }
          
#line 4888
          break;
          case 19:
          if (self->curChar_ == 114) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 327, 328);
          }
          
#line 4892
          break;
          case 21:
          {
            
#line 4894
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 333, 334);
          }
          
#line 4895
          break;
          case 24:
          {
            
#line 4897
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 335, 336);
          }
          
#line 4898
          break;
          case 30:
          case 31:
          if (self->curChar_ == 124 && kind > 119)
#line 4902
          kind = 119;
          break;
          case 32:
          if (self->curChar_ == 124)
#line 4906
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 31;
          break;
          case 33:
          if (((jlong) 0x7fffffe87ffffffLL & l) == 0LL)
#line 4910
          break;
          if (kind > 133)
#line 4912
          kind = 133;
          {
            
#line 4913
            FreemarkerCoreFMParserTokenManager_jjCheckNAddTwoStatesWithInt_withInt_(self, 34, 35);
          }
          
#line 4914
          break;
          case 34:
          if (((jlong) 0x7fffffe87ffffffLL & l) == 0LL)
#line 4917
          break;
          if (kind > 133)
#line 4919
          kind = 133;
          {
            
#line 4920
            FreemarkerCoreFMParserTokenManager_jjCheckNAddTwoStatesWithInt_withInt_(self, 34, 35);
          }
          
#line 4921
          break;
          case 35:
          if (self->curChar_ == 92) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 36);
          }
          
#line 4925
          break;
          case 37:
          if (self->curChar_ == 92) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 36);
          }
          
#line 4929
          break;
          case 38:
          if (self->curChar_ == 123 && kind > 134)
#line 4932
          kind = 134;
          break;
          case 51:
          if (self->curChar_ == 108) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddTwoStatesWithInt_withInt_(self, 52, 54);
          }
          
#line 4937
          break;
          case 52:
          if (self->curChar_ == 116 && kind > 107)
#line 4940
          kind = 107;
          break;
          case 53:
          if (self->curChar_ == 101 && kind > 108)
#line 4944
          kind = 108;
          break;
          case 54:
          case 57:
          if (self->curChar_ == 116) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 53);
          }
          
#line 4950
          break;
          case 55:
          if (self->curChar_ == 92) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 347, 350);
          }
          
#line 4954
          break;
          case 56:
          if (self->curChar_ == 108) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 52);
          }
          
#line 4958
          break;
          case 58:
          if (self->curChar_ == 108)
#line 4961
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 57;
          break;
          case 59:
          if (self->curChar_ == 116 && kind > 109)
#line 4965
          kind = 109;
          break;
          case 60:
          if (self->curChar_ == 103) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 59);
          }
          
#line 4970
          break;
          case 61:
          if (self->curChar_ == 101 && kind > 110)
#line 4973
          kind = 110;
          break;
          case 62:
          case 80:
          if (self->curChar_ == 116) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 61);
          }
          
#line 4979
          break;
          case 63:
          if (self->curChar_ == 103)
#line 4982
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 62;
          break;
          case 66:
          if (self->curChar_ == 116)
#line 4986
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 65;
          break;
          case 67:
          if (self->curChar_ == 108)
#line 4990
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 66;
          break;
          case 69:
          if (self->curChar_ == 116)
#line 4994
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 68;
          break;
          case 70:
          if (self->curChar_ == 108)
#line 4998
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 69;
          break;
          case 72:
          if (self->curChar_ == 116)
#line 5002
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 71;
          break;
          case 73:
          if (self->curChar_ == 103)
#line 5006
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 72;
          break;
          case 76:
          if (self->curChar_ == 116)
#line 5010
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 75;
          break;
          case 77:
          if (self->curChar_ == 103)
#line 5014
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 76;
          break;
          case 79:
          if (self->curChar_ == 103) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddTwoStatesWithInt_withInt_(self, 59, 80);
          }
          
#line 5019
          break;
          default:
          
#line 5020
          break;
        }
      }
      while (
#line 5022
      i != startsAt);
    }
    else {
      
#line 5026
      jint hiByte = (RShift32(self->curChar_, 8));
      jint i1 = RShift32(hiByte, 6);
      jlong l1 = LShift64(1LL, (hiByte & 077));
      jint i2 = RShift32((self->curChar_ & (jint) 0xff), 6);
      jlong l2 = LShift64(1LL, (self->curChar_ & 077));
      do {
        
#line 5033
        switch (IOSIntArray_Get(self->jjstateSet_, --i)) {
          
#line 5035
          case 1:
          if (!FreemarkerCoreFMParserTokenManager_jjCanMove_1WithInt_withInt_withInt_withLong_withLong_(hiByte, i1, i2, l1, l2))
#line 5037
          break;
          if (kind > 133)
#line 5039
          kind = 133;
          {
            
#line 5040
            FreemarkerCoreFMParserTokenManager_jjCheckNAddTwoStatesWithInt_withInt_(self, 34, 35);
          }
          
#line 5041
          break;
          case 81:
          case 34:
          if (!FreemarkerCoreFMParserTokenManager_jjCanMove_1WithInt_withInt_withInt_withLong_withLong_(hiByte, i1, i2, l1, l2))
#line 5045
          break;
          if (kind > 133)
#line 5047
          kind = 133;
          {
            
#line 5048
            FreemarkerCoreFMParserTokenManager_jjCheckNAddTwoStatesWithInt_withInt_(self, 34, 35);
          }
          
#line 5049
          break;
          case 6:
          if (FreemarkerCoreFMParserTokenManager_jjCanMove_0WithInt_withInt_withInt_withLong_withLong_(hiByte, i1, i2, l1, l2)) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 320, 322);
          }
          
#line 5053
          break;
          case 13:
          if (FreemarkerCoreFMParserTokenManager_jjCanMove_0WithInt_withInt_withInt_withLong_withLong_(hiByte, i1, i2, l1, l2)) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 317, 319);
          }
          
#line 5057
          break;
          case 21:
          if (FreemarkerCoreFMParserTokenManager_jjCanMove_0WithInt_withInt_withInt_withLong_withLong_(hiByte, i1, i2, l1, l2)) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 333, 334);
          }
          
#line 5061
          break;
          case 24:
          if (FreemarkerCoreFMParserTokenManager_jjCanMove_0WithInt_withInt_withInt_withLong_withLong_(hiByte, i1, i2, l1, l2)) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 335, 336);
          }
          
#line 5065
          break;
          default:
          
#line 5066
          if (i1 == 0 || l1 == 0 || i2 == 0 || l2 == 0) break;
          else
#line 5066
          break;
        }
      }
      while (
#line 5068
      i != startsAt);
    }
    if (kind != (jint) 0x7fffffff) {
      
#line 5072
      self->jjmatchedKind_ = kind;
      self->jjmatchedPos_ = curPos;
      kind = (jint) 0x7fffffff;
    }
    ++curPos;
    jint unseq$1 = self->jjnewStateCnt_;
    
#line 5077
    if ((i = unseq$1) == (startsAt = 81 - (self->jjnewStateCnt_ = startsAt)))
#line 5078
    return curPos;
    @try {
      
#line 5079
      self->curChar_ = [((FreemarkerCoreSimpleCharStream *) nil_chk(self->input_stream_)) readChar];
    }
    @catch (
#line 5080
    JavaIoIOException *e) {
      
#line 5080
      return curPos;
    }
  }
}


#line 5083
jint FreemarkerCoreFMParserTokenManager_jjStopStringLiteralDfa_5WithInt_withLong_withLong_(FreemarkerCoreFMParserTokenManager *self, jint pos, jlong active0, jlong active1) {
  switch (pos) {
    
#line 5086
    default:
    return -1;
  }
}


#line 5093
jint FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa0_5(FreemarkerCoreFMParserTokenManager *self) {
  switch (self->curChar_) {
    
#line 5096
    case 45:
    return FreemarkerCoreFMParserTokenManager_jjStartNfaWithStates_5WithInt_withInt_withInt_(self, 0, 82, 3);
    default:
    return FreemarkerCoreFMParserTokenManager_jjMoveNfa_5WithInt_withInt_(self, 1, 0);
  }
}


#line 5102
jint FreemarkerCoreFMParserTokenManager_jjStartNfaWithStates_5WithInt_withInt_withInt_(FreemarkerCoreFMParserTokenManager *self, jint pos, jint kind, jint state) {
  
#line 5104
  self->jjmatchedKind_ = kind;
  self->jjmatchedPos_ = pos;
  @try {
    
#line 5106
    self->curChar_ = [((FreemarkerCoreSimpleCharStream *) nil_chk(self->input_stream_)) readChar];
  }
  @catch (
#line 5107
  JavaIoIOException *e) {
    
#line 5107
    return pos + 1;
  }
  
#line 5108
  return FreemarkerCoreFMParserTokenManager_jjMoveNfa_5WithInt_withInt_(self, state, pos + 1);
}


#line 5110
jint FreemarkerCoreFMParserTokenManager_jjMoveNfa_5WithInt_withInt_(FreemarkerCoreFMParserTokenManager *self, jint startState, jint curPos) {
  
#line 5112
  jint startsAt = 0;
  self->jjnewStateCnt_ = 6;
  jint i = 1;
  *IOSIntArray_GetRef(nil_chk(self->jjstateSet_), 0) = startState;
  jint kind = (jint) 0x7fffffff;
  for (; ; ) {
    
#line 5119
    if (++self->jjround_ == (jint) 0x7fffffff)
#line 5120
    FreemarkerCoreFMParserTokenManager_ReInitRounds(self);
    if (self->curChar_ < 64) {
      
#line 5123
      jlong l = LShift64(1LL, self->curChar_);
      do {
        
#line 5126
        switch (IOSIntArray_Get(self->jjstateSet_, --i)) {
          
#line 5128
          case 3:
          if (self->curChar_ == 45)
#line 5130
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 4;
          if (self->curChar_ == 45)
#line 5132
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 2;
          break;
          case 1:
          if (((jlong) 0xbfffdfffffffffffLL & l) != 0LL) {
            
#line 5137
            if (kind > 79)
#line 5138
            kind = 79;
            {
              
#line 5139
              FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 0);
            }
          }
          else
#line 5141
          if (self->curChar_ == 45) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 351, 352);
          }
          
#line 5143
          break;
          case 0:
          if (((jlong) 0xbfffdfffffffffffLL & l) == 0LL)
#line 5146
          break;
          kind = 79;
          {
            
#line 5148
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 0);
          }
          
#line 5149
          break;
          case 2:
          if (self->curChar_ == 62)
#line 5152
          kind = 83;
          break;
          case 5:
          if (self->curChar_ == 45)
#line 5156
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 4;
          break;
          default:
          
#line 5158
          break;
        }
      }
      while (
#line 5160
      i != startsAt);
    }
    else if (self->curChar_ < 128) {
      
#line 5164
      jlong l = LShift64(1LL, (self->curChar_ & 077));
      do {
        
#line 5167
        switch (IOSIntArray_Get(self->jjstateSet_, --i)) {
          
#line 5169
          case 1:
          case 0:
          if (((jlong) 0xffffffffdfffffffLL & l) == 0LL)
#line 5172
          break;
          kind = 79;
          {
            
#line 5174
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 0);
          }
          
#line 5175
          break;
          case 4:
          if (self->curChar_ == 93)
#line 5178
          kind = 83;
          break;
          default:
          
#line 5180
          break;
        }
      }
      while (
#line 5182
      i != startsAt);
    }
    else {
      
#line 5186
      jint hiByte = (RShift32(self->curChar_, 8));
      jint i1 = RShift32(hiByte, 6);
      jlong l1 = LShift64(1LL, (hiByte & 077));
      jint i2 = RShift32((self->curChar_ & (jint) 0xff), 6);
      jlong l2 = LShift64(1LL, (self->curChar_ & 077));
      do {
        
#line 5193
        switch (IOSIntArray_Get(self->jjstateSet_, --i)) {
          
#line 5195
          case 1:
          case 0:
          if (!FreemarkerCoreFMParserTokenManager_jjCanMove_0WithInt_withInt_withInt_withLong_withLong_(hiByte, i1, i2, l1, l2))
#line 5198
          break;
          if (kind > 79)
#line 5200
          kind = 79;
          {
            
#line 5201
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 0);
          }
          
#line 5202
          break;
          default:
          
#line 5203
          if (i1 == 0 || l1 == 0 || i2 == 0 || l2 == 0) break;
          else
#line 5203
          break;
        }
      }
      while (
#line 5205
      i != startsAt);
    }
    if (kind != (jint) 0x7fffffff) {
      
#line 5209
      self->jjmatchedKind_ = kind;
      self->jjmatchedPos_ = curPos;
      kind = (jint) 0x7fffffff;
    }
    ++curPos;
    jint unseq$1 = self->jjnewStateCnt_;
    
#line 5214
    if ((i = unseq$1) == (startsAt = 6 - (self->jjnewStateCnt_ = startsAt)))
#line 5215
    return curPos;
    @try {
      
#line 5216
      self->curChar_ = [((FreemarkerCoreSimpleCharStream *) nil_chk(self->input_stream_)) readChar];
    }
    @catch (
#line 5217
    JavaIoIOException *e) {
      
#line 5217
      return curPos;
    }
  }
}


#line 5220
jint FreemarkerCoreFMParserTokenManager_jjStopStringLiteralDfa_6WithInt_withLong_withLong_withLong_(FreemarkerCoreFMParserTokenManager *self, jint pos, jlong active0, jlong active1, jlong active2) {
  switch (pos) {
    
#line 5223
    case 0:
    if ((active1 & (jlong) 0x1800000LL) != 0LL || (active2 & (jlong) 0x1cLL) != 0LL) {
      
#line 5226
      self->jjmatchedKind_ = 133;
      return 80;
    }
    if ((active1 & (jlong) 0x10008000000000LL) != 0LL)
#line 5230
    return 38;
    if ((active1 & (jlong) 0x8000058000000LL) != 0LL)
#line 5232
    return 42;
    return -1;
    case 1:
    if ((active2 & (jlong) 0xcLL) != 0LL)
#line 5236
    return 80;
    if ((active1 & (jlong) 0x8000050000000LL) != 0LL)
#line 5238
    return 41;
    if ((active1 & (jlong) 0x1800000LL) != 0LL || (active2 & (jlong) 0x10LL) != 0LL) {
      
#line 5241
      if (self->jjmatchedPos_ != 1) {
        
#line 5243
        self->jjmatchedKind_ = 133;
        self->jjmatchedPos_ = 1;
      }
      return 80;
    }
    return -1;
    case 2:
    if ((active1 & (jlong) 0x1800000LL) != 0LL || (active2 & (jlong) 0x10LL) != 0LL) {
      
#line 5252
      self->jjmatchedKind_ = 133;
      self->jjmatchedPos_ = 2;
      return 80;
    }
    return -1;
    case 3:
    if ((active1 & (jlong) 0x800000LL) != 0LL || (active2 & (jlong) 0x10LL) != 0LL) {
      
#line 5260
      self->jjmatchedKind_ = 133;
      self->jjmatchedPos_ = 3;
      return 80;
    }
    if ((active1 & (jlong) 0x1000000LL) != 0LL)
#line 5265
    return 80;
    return -1;
    default:
    return -1;
  }
}


#line 5271
jint FreemarkerCoreFMParserTokenManager_jjStartNfa_6WithInt_withLong_withLong_withLong_(FreemarkerCoreFMParserTokenManager *self, jint pos, jlong active0, jlong active1, jlong active2) {
  return FreemarkerCoreFMParserTokenManager_jjMoveNfa_6WithInt_withInt_(self, FreemarkerCoreFMParserTokenManager_jjStopStringLiteralDfa_6WithInt_withLong_withLong_withLong_(self, pos, active0, active1, active2), pos + 1);
}


#line 5274
jint FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa0_6(FreemarkerCoreFMParserTokenManager *self) {
  switch (self->curChar_) {
    
#line 5277
    case 33:
    self->jjmatchedKind_ = 120;
    return FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa1_6WithLong_withLong_(self, (jlong) 0x800000000LL, (jlong) 0x0LL);
    case 37:
    self->jjmatchedKind_ = 117;
    return FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa1_6WithLong_withLong_(self, (jlong) 0x10000000000LL, (jlong) 0x0LL);
    case 40:
    return FreemarkerCoreFMParserTokenManager_jjStopAtPosWithInt_withInt_(self, 0, 126);
    case 41:
    return FreemarkerCoreFMParserTokenManager_jjStopAtPosWithInt_withInt_(self, 0, 127);
    case 42:
    self->jjmatchedKind_ = 113;
    return FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa1_6WithLong_withLong_(self, (jlong) 0x4004000000000LL, (jlong) 0x0LL);
    case 43:
    self->jjmatchedKind_ = 111;
    return FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa1_6WithLong_withLong_(self, (jlong) 0x21000000000LL, (jlong) 0x0LL);
    case 44:
    return FreemarkerCoreFMParserTokenManager_jjStopAtPosWithInt_withInt_(self, 0, 121);
    case 45:
    self->jjmatchedKind_ = 112;
    return FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa1_6WithLong_withLong_(self, (jlong) 0x42000000000LL, (jlong) 0x0LL);
    case 46:
    self->jjmatchedKind_ = 91;
    return FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa1_6WithLong_withLong_(self, (jlong) 0x8000050000000LL, (jlong) 0x0LL);
    case 47:
    self->jjmatchedKind_ = 116;
    return FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa1_6WithLong_withLong_(self, (jlong) 0x8000000000LL, (jlong) 0x0LL);
    case 58:
    return FreemarkerCoreFMParserTokenManager_jjStopAtPosWithInt_withInt_(self, 0, 123);
    case 59:
    return FreemarkerCoreFMParserTokenManager_jjStopAtPosWithInt_withInt_(self, 0, 122);
    case 61:
    self->jjmatchedKind_ = 97;
    return FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa1_6WithLong_withLong_(self, (jlong) 0x400000000LL, (jlong) 0x0LL);
    case 62:
    return FreemarkerCoreFMParserTokenManager_jjStopAtPosWithInt_withInt_(self, 0, 139);
    case 63:
    self->jjmatchedKind_ = 95;
    return FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa1_6WithLong_withLong_(self, (jlong) 0x100000000LL, (jlong) 0x0LL);
    case 91:
    return FreemarkerCoreFMParserTokenManager_jjStopAtPosWithInt_withInt_(self, 0, 124);
    case 93:
    return FreemarkerCoreFMParserTokenManager_jjStopAtPosWithInt_withInt_(self, 0, 125);
    case 97:
    return FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa1_6WithLong_withLong_(self, (jlong) 0x0LL, (jlong) 0x8LL);
    case 102:
    return FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa1_6WithLong_withLong_(self, (jlong) 0x800000LL, (jlong) 0x0LL);
    case 105:
    return FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa1_6WithLong_withLong_(self, (jlong) 0x0LL, (jlong) 0x4LL);
    case 116:
    return FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa1_6WithLong_withLong_(self, (jlong) 0x1000000LL, (jlong) 0x0LL);
    case 117:
    return FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa1_6WithLong_withLong_(self, (jlong) 0x0LL, (jlong) 0x10LL);
    case 123:
    return FreemarkerCoreFMParserTokenManager_jjStopAtPosWithInt_withInt_(self, 0, 128);
    case 125:
    return FreemarkerCoreFMParserTokenManager_jjStopAtPosWithInt_withInt_(self, 0, 129);
    default:
    return FreemarkerCoreFMParserTokenManager_jjMoveNfa_6WithInt_withInt_(self, 0, 0);
  }
}


#line 5338
jint FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa1_6WithLong_withLong_(FreemarkerCoreFMParserTokenManager *self, jlong active1, jlong active2) {
  @try {
    
#line 5339
    self->curChar_ = [((FreemarkerCoreSimpleCharStream *) nil_chk(self->input_stream_)) readChar];
  }
  @catch (
#line 5340
  JavaIoIOException *e) {
    FreemarkerCoreFMParserTokenManager_jjStopStringLiteralDfa_6WithInt_withLong_withLong_withLong_(self, 0, 0LL, active1, active2);
    return 1;
  }
  switch (self->curChar_) {
    
#line 5346
    case 42:
    if ((active1 & (jlong) 0x4000000000000LL) != 0LL)
#line 5348
    return FreemarkerCoreFMParserTokenManager_jjStopAtPosWithInt_withInt_(self, 1, 114);
    break;
    case 43:
    if ((active1 & (jlong) 0x20000000000LL) != 0LL)
#line 5352
    return FreemarkerCoreFMParserTokenManager_jjStopAtPosWithInt_withInt_(self, 1, 105);
    break;
    case 45:
    if ((active1 & (jlong) 0x40000000000LL) != 0LL)
#line 5356
    return FreemarkerCoreFMParserTokenManager_jjStopAtPosWithInt_withInt_(self, 1, 106);
    break;
    case 46:
    if ((active1 & (jlong) 0x10000000LL) != 0LL) {
      
#line 5361
      self->jjmatchedKind_ = 92;
      self->jjmatchedPos_ = 1;
    }
    return FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa2_6WithLong_withLong_withLong_withLong_(self, active1, (jlong) 0x8000040000000LL, active2, 0LL);
    case 61:
    if ((active1 & (jlong) 0x400000000LL) != 0LL)
#line 5367
    return FreemarkerCoreFMParserTokenManager_jjStopAtPosWithInt_withInt_(self, 1, 98);
    else if ((active1 & (jlong) 0x800000000LL) != 0LL)
#line 5369
    return FreemarkerCoreFMParserTokenManager_jjStopAtPosWithInt_withInt_(self, 1, 99);
    else if ((active1 & (jlong) 0x1000000000LL) != 0LL)
#line 5371
    return FreemarkerCoreFMParserTokenManager_jjStopAtPosWithInt_withInt_(self, 1, 100);
    else if ((active1 & (jlong) 0x2000000000LL) != 0LL)
#line 5373
    return FreemarkerCoreFMParserTokenManager_jjStopAtPosWithInt_withInt_(self, 1, 101);
    else if ((active1 & (jlong) 0x4000000000LL) != 0LL)
#line 5375
    return FreemarkerCoreFMParserTokenManager_jjStopAtPosWithInt_withInt_(self, 1, 102);
    else if ((active1 & (jlong) 0x8000000000LL) != 0LL)
#line 5377
    return FreemarkerCoreFMParserTokenManager_jjStopAtPosWithInt_withInt_(self, 1, 103);
    else if ((active1 & (jlong) 0x10000000000LL) != 0LL)
#line 5379
    return FreemarkerCoreFMParserTokenManager_jjStopAtPosWithInt_withInt_(self, 1, 104);
    break;
    case 63:
    if ((active1 & (jlong) 0x100000000LL) != 0LL)
#line 5383
    return FreemarkerCoreFMParserTokenManager_jjStopAtPosWithInt_withInt_(self, 1, 96);
    break;
    case 97:
    return FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa2_6WithLong_withLong_withLong_withLong_(self, active1, (jlong) 0x800000LL, active2, 0LL);
    case 110:
    if ((active2 & (jlong) 0x4LL) != 0LL)
#line 5389
    return FreemarkerCoreFMParserTokenManager_jjStartNfaWithStates_6WithInt_withInt_withInt_(self, 1, 130, 80);
    break;
    case 114:
    return FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa2_6WithLong_withLong_withLong_withLong_(self, active1, (jlong) 0x1000000LL, active2, 0LL);
    case 115:
    if ((active2 & (jlong) 0x8LL) != 0LL)
#line 5395
    return FreemarkerCoreFMParserTokenManager_jjStartNfaWithStates_6WithInt_withInt_withInt_(self, 1, 131, 80);
    return FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa2_6WithLong_withLong_withLong_withLong_(self, active1, 0LL, active2, (jlong) 0x10LL);
    default:
    break;
  }
  return FreemarkerCoreFMParserTokenManager_jjStartNfa_6WithInt_withLong_withLong_withLong_(self, 0, 0LL, active1, active2);
}


#line 5402
jint FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa2_6WithLong_withLong_withLong_withLong_(FreemarkerCoreFMParserTokenManager *self, jlong old1, jlong active1, jlong old2, jlong active2) {
  if (((active1 &= old1) | (active2 &= old2)) == 0LL)
#line 5404
  return FreemarkerCoreFMParserTokenManager_jjStartNfa_6WithInt_withLong_withLong_withLong_(self, 0, 0LL, old1, old2);
  @try {
    
#line 5405
    self->curChar_ = [((FreemarkerCoreSimpleCharStream *) nil_chk(self->input_stream_)) readChar];
  }
  @catch (
#line 5406
  JavaIoIOException *e) {
    FreemarkerCoreFMParserTokenManager_jjStopStringLiteralDfa_6WithInt_withLong_withLong_withLong_(self, 1, 0LL, active1, active2);
    return 2;
  }
  switch (self->curChar_) {
    
#line 5412
    case 42:
    if ((active1 & (jlong) 0x40000000LL) != 0LL)
#line 5414
    return FreemarkerCoreFMParserTokenManager_jjStopAtPosWithInt_withInt_(self, 2, 94);
    break;
    case 46:
    if ((active1 & (jlong) 0x8000000000000LL) != 0LL)
#line 5418
    return FreemarkerCoreFMParserTokenManager_jjStopAtPosWithInt_withInt_(self, 2, 115);
    break;
    case 105:
    return FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa3_6WithLong_withLong_withLong_withLong_(self, active1, 0LL, active2, (jlong) 0x10LL);
    case 108:
    return FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa3_6WithLong_withLong_withLong_withLong_(self, active1, (jlong) 0x800000LL, active2, 0LL);
    case 117:
    return FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa3_6WithLong_withLong_withLong_withLong_(self, active1, (jlong) 0x1000000LL, active2, 0LL);
    default:
    break;
  }
  return FreemarkerCoreFMParserTokenManager_jjStartNfa_6WithInt_withLong_withLong_withLong_(self, 1, 0LL, active1, active2);
}


#line 5431
jint FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa3_6WithLong_withLong_withLong_withLong_(FreemarkerCoreFMParserTokenManager *self, jlong old1, jlong active1, jlong old2, jlong active2) {
  if (((active1 &= old1) | (active2 &= old2)) == 0LL)
#line 5433
  return FreemarkerCoreFMParserTokenManager_jjStartNfa_6WithInt_withLong_withLong_withLong_(self, 1, 0LL, old1, old2);
  @try {
    
#line 5434
    self->curChar_ = [((FreemarkerCoreSimpleCharStream *) nil_chk(self->input_stream_)) readChar];
  }
  @catch (
#line 5435
  JavaIoIOException *e) {
    FreemarkerCoreFMParserTokenManager_jjStopStringLiteralDfa_6WithInt_withLong_withLong_withLong_(self, 2, 0LL, active1, active2);
    return 3;
  }
  switch (self->curChar_) {
    
#line 5441
    case 101:
    if ((active1 & (jlong) 0x1000000LL) != 0LL)
#line 5443
    return FreemarkerCoreFMParserTokenManager_jjStartNfaWithStates_6WithInt_withInt_withInt_(self, 3, 88, 80);
    break;
    case 110:
    return FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa4_6WithLong_withLong_withLong_withLong_(self, active1, 0LL, active2, (jlong) 0x10LL);
    case 115:
    return FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa4_6WithLong_withLong_withLong_withLong_(self, active1, (jlong) 0x800000LL, active2, 0LL);
    default:
    break;
  }
  return FreemarkerCoreFMParserTokenManager_jjStartNfa_6WithInt_withLong_withLong_withLong_(self, 2, 0LL, active1, active2);
}


#line 5454
jint FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa4_6WithLong_withLong_withLong_withLong_(FreemarkerCoreFMParserTokenManager *self, jlong old1, jlong active1, jlong old2, jlong active2) {
  if (((active1 &= old1) | (active2 &= old2)) == 0LL)
#line 5456
  return FreemarkerCoreFMParserTokenManager_jjStartNfa_6WithInt_withLong_withLong_withLong_(self, 2, 0LL, old1, old2);
  @try {
    
#line 5457
    self->curChar_ = [((FreemarkerCoreSimpleCharStream *) nil_chk(self->input_stream_)) readChar];
  }
  @catch (
#line 5458
  JavaIoIOException *e) {
    FreemarkerCoreFMParserTokenManager_jjStopStringLiteralDfa_6WithInt_withLong_withLong_withLong_(self, 3, 0LL, active1, active2);
    return 4;
  }
  switch (self->curChar_) {
    
#line 5464
    case 101:
    if ((active1 & (jlong) 0x800000LL) != 0LL)
#line 5466
    return FreemarkerCoreFMParserTokenManager_jjStartNfaWithStates_6WithInt_withInt_withInt_(self, 4, 87, 80);
    break;
    case 103:
    if ((active2 & (jlong) 0x10LL) != 0LL)
#line 5470
    return FreemarkerCoreFMParserTokenManager_jjStartNfaWithStates_6WithInt_withInt_withInt_(self, 4, 132, 80);
    break;
    default:
    break;
  }
  return FreemarkerCoreFMParserTokenManager_jjStartNfa_6WithInt_withLong_withLong_withLong_(self, 3, 0LL, active1, active2);
}


#line 5477
jint FreemarkerCoreFMParserTokenManager_jjStartNfaWithStates_6WithInt_withInt_withInt_(FreemarkerCoreFMParserTokenManager *self, jint pos, jint kind, jint state) {
  
#line 5479
  self->jjmatchedKind_ = kind;
  self->jjmatchedPos_ = pos;
  @try {
    
#line 5481
    self->curChar_ = [((FreemarkerCoreSimpleCharStream *) nil_chk(self->input_stream_)) readChar];
  }
  @catch (
#line 5482
  JavaIoIOException *e) {
    
#line 5482
    return pos + 1;
  }
  
#line 5483
  return FreemarkerCoreFMParserTokenManager_jjMoveNfa_6WithInt_withInt_(self, state, pos + 1);
}


#line 5485
jint FreemarkerCoreFMParserTokenManager_jjMoveNfa_6WithInt_withInt_(FreemarkerCoreFMParserTokenManager *self, jint startState, jint curPos) {
  
#line 5487
  jint startsAt = 0;
  self->jjnewStateCnt_ = 80;
  jint i = 1;
  *IOSIntArray_GetRef(nil_chk(self->jjstateSet_), 0) = startState;
  jint kind = (jint) 0x7fffffff;
  for (; ; ) {
    
#line 5494
    if (++self->jjround_ == (jint) 0x7fffffff)
#line 5495
    FreemarkerCoreFMParserTokenManager_ReInitRounds(self);
    if (self->curChar_ < 64) {
      
#line 5498
      jlong l = LShift64(1LL, self->curChar_);
      do {
        
#line 5501
        switch (IOSIntArray_Get(self->jjstateSet_, --i)) {
          
#line 5503
          case 41:
          if (self->curChar_ == 33) {
            
#line 5506
            if (kind > 93)
#line 5507
            kind = 93;
          }
          else if (self->curChar_ == 60) {
            
#line 5511
            if (kind > 93)
#line 5512
            kind = 93;
          }
          break;
          case 0:
          if (((jlong) 0x3ff000000000000LL & l) != 0LL) {
            
#line 5518
            if (kind > 89)
#line 5519
            kind = 89;
            {
              
#line 5520
              FreemarkerCoreFMParserTokenManager_jjCheckNAddStatesWithInt_withInt_(self, 353, 355);
            }
          }
          else
#line 5522
          if (((jlong) 0x100002600LL & l) != 0LL) {
            
#line 5524
            if (kind > 143)
#line 5525
            kind = 143;
            {
              
#line 5526
              FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 36);
            }
          }
          else
#line 5528
          if (self->curChar_ == 38) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 356, 360);
          }
          else
#line 5530
          if (self->curChar_ == 46) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 361, 362);
          }
          else
#line 5532
          if (self->curChar_ == 47) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 363, 364);
          }
          else
#line 5534
          if (self->curChar_ == 35) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 33);
          }
          else
#line 5536
          if (self->curChar_ == 36) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 33);
          }
          else
#line 5538
          if (self->curChar_ == 60) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 22);
          }
          else
#line 5540
          if (self->curChar_ == 39) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddStatesWithInt_withInt_(self, 365, 367);
          }
          else
#line 5542
          if (self->curChar_ == 34) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddStatesWithInt_withInt_(self, 368, 370);
          }
          
#line 5544
          if (self->curChar_ == 36) {
            
#line 5546
            if (kind > 133)
#line 5547
            kind = 133;
            {
              
#line 5548
              FreemarkerCoreFMParserTokenManager_jjCheckNAddTwoStatesWithInt_withInt_(self, 29, 30);
            }
          }
          else
#line 5550
          if (self->curChar_ == 38) {
            
#line 5552
            if (kind > 118)
#line 5553
            kind = 118;
          }
          else if (self->curChar_ == 60) {
            
#line 5557
            if (kind > 107)
#line 5558
            kind = 107;
          }
          break;
          case 42:
          if (self->curChar_ == 46)
#line 5563
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 43;
          if (self->curChar_ == 46)
#line 5565
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 41;
          break;
          case 80:
          case 29:
          if (((jlong) 0x3ff001000000000LL & l) == 0LL)
#line 5570
          break;
          if (kind > 133)
#line 5572
          kind = 133;
          {
            
#line 5573
            FreemarkerCoreFMParserTokenManager_jjCheckNAddTwoStatesWithInt_withInt_(self, 29, 30);
          }
          
#line 5574
          break;
          case 38:
          if (self->curChar_ == 62 && kind > 140)
#line 5577
          kind = 140;
          break;
          case 1:
          if (((jlong) 0xfffffffbffffffffLL & l) != 0LL) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddStatesWithInt_withInt_(self, 368, 370);
          }
          
#line 5582
          break;
          case 4:
          if (((jlong) 0x3ff000000000000LL & l) != 0LL) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddStatesWithInt_withInt_(self, 368, 370);
          }
          
#line 5586
          break;
          case 5:
          if (self->curChar_ == 34 && kind > 85)
#line 5589
          kind = 85;
          break;
          case 6:
          if (((jlong) 0x9400000000LL & l) != 0LL) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddStatesWithInt_withInt_(self, 368, 370);
          }
          
#line 5594
          break;
          case 7:
          if (self->curChar_ == 39) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddStatesWithInt_withInt_(self, 365, 367);
          }
          
#line 5598
          break;
          case 8:
          if (((jlong) 0xffffff7fffffffffLL & l) != 0LL) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddStatesWithInt_withInt_(self, 365, 367);
          }
          
#line 5602
          break;
          case 11:
          if (((jlong) 0x3ff000000000000LL & l) != 0LL) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddStatesWithInt_withInt_(self, 365, 367);
          }
          
#line 5606
          break;
          case 12:
          if (self->curChar_ == 39 && kind > 85)
#line 5609
          kind = 85;
          break;
          case 13:
          if (((jlong) 0x9400000000LL & l) != 0LL) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddStatesWithInt_withInt_(self, 365, 367);
          }
          
#line 5614
          break;
          case 15:
          if (self->curChar_ == 34) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddTwoStatesWithInt_withInt_(self, 16, 17);
          }
          
#line 5618
          break;
          case 16:
          if (((jlong) 0xfffffffbffffffffLL & l) != 0LL) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddTwoStatesWithInt_withInt_(self, 16, 17);
          }
          
#line 5622
          break;
          case 17:
          if (self->curChar_ == 34 && kind > 86)
#line 5625
          kind = 86;
          break;
          case 18:
          if (self->curChar_ == 39) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddTwoStatesWithInt_withInt_(self, 19, 20);
          }
          
#line 5630
          break;
          case 19:
          if (((jlong) 0xffffff7fffffffffLL & l) != 0LL) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddTwoStatesWithInt_withInt_(self, 19, 20);
          }
          
#line 5634
          break;
          case 20:
          if (self->curChar_ == 39 && kind > 86)
#line 5637
          kind = 86;
          break;
          case 21:
          if (self->curChar_ == 60 && kind > 107)
#line 5641
          kind = 107;
          break;
          case 22:
          if (self->curChar_ == 61 && kind > 108)
#line 5645
          kind = 108;
          break;
          case 23:
          if (self->curChar_ == 60) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 22);
          }
          
#line 5650
          break;
          case 24:
          case 77:
          if (self->curChar_ == 38 && kind > 118)
#line 5654
          kind = 118;
          break;
          case 28:
          if (self->curChar_ != 36)
#line 5658
          break;
          if (kind > 133)
#line 5660
          kind = 133;
          {
            
#line 5661
            FreemarkerCoreFMParserTokenManager_jjCheckNAddTwoStatesWithInt_withInt_(self, 29, 30);
          }
          
#line 5662
          break;
          case 31:
          if (((jlong) 0x400600000000000LL & l) == 0LL)
#line 5665
          break;
          if (kind > 133)
#line 5667
          kind = 133;
          {
            
#line 5668
            FreemarkerCoreFMParserTokenManager_jjCheckNAddTwoStatesWithInt_withInt_(self, 29, 30);
          }
          
#line 5669
          break;
          case 34:
          if (self->curChar_ == 36) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 33);
          }
          
#line 5673
          break;
          case 35:
          if (self->curChar_ == 35) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 33);
          }
          
#line 5677
          break;
          case 36:
          if (((jlong) 0x100002600LL & l) == 0LL)
#line 5680
          break;
          if (kind > 143)
#line 5682
          kind = 143;
          {
            
#line 5683
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 36);
          }
          
#line 5684
          break;
          case 37:
          if (self->curChar_ == 47) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 363, 364);
          }
          
#line 5688
          break;
          case 40:
          if (self->curChar_ == 46) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 361, 362);
          }
          
#line 5692
          break;
          case 43:
          if (self->curChar_ == 33 && kind > 93)
#line 5695
          kind = 93;
          break;
          case 44:
          if (self->curChar_ == 46)
#line 5699
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 43;
          break;
          case 45:
          if (((jlong) 0x3ff000000000000LL & l) == 0LL)
#line 5703
          break;
          if (kind > 89)
#line 5705
          kind = 89;
          {
            
#line 5706
            FreemarkerCoreFMParserTokenManager_jjCheckNAddStatesWithInt_withInt_(self, 353, 355);
          }
          
#line 5707
          break;
          case 46:
          if (((jlong) 0x3ff000000000000LL & l) == 0LL)
#line 5710
          break;
          if (kind > 89)
#line 5712
          kind = 89;
          {
            
#line 5713
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 46);
          }
          
#line 5714
          break;
          case 47:
          if (((jlong) 0x3ff000000000000LL & l) != 0LL) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddTwoStatesWithInt_withInt_(self, 47, 48);
          }
          
#line 5718
          break;
          case 48:
          if (self->curChar_ == 46) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 49);
          }
          
#line 5722
          break;
          case 49:
          if (((jlong) 0x3ff000000000000LL & l) == 0LL)
#line 5725
          break;
          if (kind > 90)
#line 5727
          kind = 90;
          {
            
#line 5728
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 49);
          }
          
#line 5729
          break;
          case 63:
          if (self->curChar_ == 38) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 356, 360);
          }
          
#line 5733
          break;
          case 64:
          if (self->curChar_ == 59 && kind > 107)
#line 5736
          kind = 107;
          break;
          case 67:
          if (self->curChar_ == 59) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 22);
          }
          
#line 5741
          break;
          case 70:
          if (self->curChar_ == 59 && kind > 109)
#line 5744
          kind = 109;
          break;
          case 73:
          if (self->curChar_ == 61 && kind > 110)
#line 5748
          kind = 110;
          break;
          case 74:
          if (self->curChar_ == 59)
#line 5752
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 73;
          break;
          default:
          
#line 5754
          break;
        }
      }
      while (
#line 5756
      i != startsAt);
    }
    else if (self->curChar_ < 128) {
      
#line 5760
      jlong l = LShift64(1LL, (self->curChar_ & 077));
      do {
        
#line 5763
        switch (IOSIntArray_Get(self->jjstateSet_, --i)) {
          
#line 5765
          case 0:
          if (((jlong) 0x7fffffe87ffffffLL & l) != 0LL) {
            
#line 5768
            if (kind > 133)
#line 5769
            kind = 133;
            {
              
#line 5770
              FreemarkerCoreFMParserTokenManager_jjCheckNAddTwoStatesWithInt_withInt_(self, 29, 30);
            }
          }
          else
#line 5772
          if (self->curChar_ == 92) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 371, 374);
          }
          else
#line 5774
          if (self->curChar_ == 124)
#line 5775
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 26;
          if (self->curChar_ == 103) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddTwoStatesWithInt_withInt_(self, 58, 79);
          }
          else
#line 5778
          if (self->curChar_ == 108) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddTwoStatesWithInt_withInt_(self, 51, 53);
          }
          else
#line 5780
          if (self->curChar_ == 92) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 31);
          }
          else
#line 5782
          if (self->curChar_ == 124) {
            
#line 5784
            if (kind > 119)
#line 5785
            kind = 119;
          }
          else if (self->curChar_ == 114) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 331, 332);
          }
          
#line 5789
          break;
          case 80:
          if (((jlong) 0x7fffffe87ffffffLL & l) != 0LL) {
            
#line 5793
            if (kind > 133)
#line 5794
            kind = 133;
            {
              
#line 5795
              FreemarkerCoreFMParserTokenManager_jjCheckNAddTwoStatesWithInt_withInt_(self, 29, 30);
            }
          }
          else
#line 5797
          if (self->curChar_ == 92) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 31);
          }
          
#line 5799
          break;
          case 38:
          if (self->curChar_ == 93 && kind > 140)
#line 5802
          kind = 140;
          break;
          case 1:
          if (((jlong) 0xffffffffefffffffLL & l) != 0LL) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddStatesWithInt_withInt_(self, 368, 370);
          }
          
#line 5807
          break;
          case 2:
          if (self->curChar_ == 92) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 375, 376);
          }
          
#line 5811
          break;
          case 3:
          if (self->curChar_ == 120)
#line 5814
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 4;
          break;
          case 4:
          if (((jlong) 0x7e0000007eLL & l) != 0LL) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddStatesWithInt_withInt_(self, 368, 370);
          }
          
#line 5819
          break;
          case 6:
          if (((jlong) 0x81450c610000000LL & l) != 0LL) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddStatesWithInt_withInt_(self, 368, 370);
          }
          
#line 5823
          break;
          case 8:
          if (((jlong) 0xffffffffefffffffLL & l) != 0LL) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddStatesWithInt_withInt_(self, 365, 367);
          }
          
#line 5827
          break;
          case 9:
          if (self->curChar_ == 92) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 377, 378);
          }
          
#line 5831
          break;
          case 10:
          if (self->curChar_ == 120)
#line 5834
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 11;
          break;
          case 11:
          if (((jlong) 0x7e0000007eLL & l) != 0LL) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddStatesWithInt_withInt_(self, 365, 367);
          }
          
#line 5839
          break;
          case 13:
          if (((jlong) 0x81450c610000000LL & l) != 0LL) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddStatesWithInt_withInt_(self, 365, 367);
          }
          
#line 5843
          break;
          case 14:
          if (self->curChar_ == 114) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 331, 332);
          }
          
#line 5847
          break;
          case 16:
          {
            
#line 5849
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 379, 380);
          }
          
#line 5850
          break;
          case 19:
          {
            
#line 5852
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 381, 382);
          }
          
#line 5853
          break;
          case 25:
          case 26:
          if (self->curChar_ == 124 && kind > 119)
#line 5857
          kind = 119;
          break;
          case 27:
          if (self->curChar_ == 124)
#line 5861
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 26;
          break;
          case 28:
          if (((jlong) 0x7fffffe87ffffffLL & l) == 0LL)
#line 5865
          break;
          if (kind > 133)
#line 5867
          kind = 133;
          {
            
#line 5868
            FreemarkerCoreFMParserTokenManager_jjCheckNAddTwoStatesWithInt_withInt_(self, 29, 30);
          }
          
#line 5869
          break;
          case 29:
          if (((jlong) 0x7fffffe87ffffffLL & l) == 0LL)
#line 5872
          break;
          if (kind > 133)
#line 5874
          kind = 133;
          {
            
#line 5875
            FreemarkerCoreFMParserTokenManager_jjCheckNAddTwoStatesWithInt_withInt_(self, 29, 30);
          }
          
#line 5876
          break;
          case 30:
          if (self->curChar_ == 92) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 31);
          }
          
#line 5880
          break;
          case 32:
          if (self->curChar_ == 92) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 31);
          }
          
#line 5884
          break;
          case 33:
          if (self->curChar_ == 123 && kind > 134)
#line 5887
          kind = 134;
          break;
          case 50:
          if (self->curChar_ == 108) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddTwoStatesWithInt_withInt_(self, 51, 53);
          }
          
#line 5892
          break;
          case 51:
          if (self->curChar_ == 116 && kind > 107)
#line 5895
          kind = 107;
          break;
          case 52:
          if (self->curChar_ == 101 && kind > 108)
#line 5899
          kind = 108;
          break;
          case 53:
          case 56:
          if (self->curChar_ == 116) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 52);
          }
          
#line 5905
          break;
          case 54:
          if (self->curChar_ == 92) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 371, 374);
          }
          
#line 5909
          break;
          case 55:
          if (self->curChar_ == 108) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 51);
          }
          
#line 5913
          break;
          case 57:
          if (self->curChar_ == 108)
#line 5916
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 56;
          break;
          case 58:
          if (self->curChar_ == 116 && kind > 109)
#line 5920
          kind = 109;
          break;
          case 59:
          if (self->curChar_ == 103) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 58);
          }
          
#line 5925
          break;
          case 60:
          if (self->curChar_ == 101 && kind > 110)
#line 5928
          kind = 110;
          break;
          case 61:
          case 79:
          if (self->curChar_ == 116) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 60);
          }
          
#line 5934
          break;
          case 62:
          if (self->curChar_ == 103)
#line 5937
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 61;
          break;
          case 65:
          if (self->curChar_ == 116)
#line 5941
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 64;
          break;
          case 66:
          if (self->curChar_ == 108)
#line 5945
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 65;
          break;
          case 68:
          if (self->curChar_ == 116)
#line 5949
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 67;
          break;
          case 69:
          if (self->curChar_ == 108)
#line 5953
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 68;
          break;
          case 71:
          if (self->curChar_ == 116)
#line 5957
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 70;
          break;
          case 72:
          if (self->curChar_ == 103)
#line 5961
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 71;
          break;
          case 75:
          if (self->curChar_ == 116)
#line 5965
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 74;
          break;
          case 76:
          if (self->curChar_ == 103)
#line 5969
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 75;
          break;
          case 78:
          if (self->curChar_ == 103) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddTwoStatesWithInt_withInt_(self, 58, 79);
          }
          
#line 5974
          break;
          default:
          
#line 5975
          break;
        }
      }
      while (
#line 5977
      i != startsAt);
    }
    else {
      
#line 5981
      jint hiByte = (RShift32(self->curChar_, 8));
      jint i1 = RShift32(hiByte, 6);
      jlong l1 = LShift64(1LL, (hiByte & 077));
      jint i2 = RShift32((self->curChar_ & (jint) 0xff), 6);
      jlong l2 = LShift64(1LL, (self->curChar_ & 077));
      do {
        
#line 5988
        switch (IOSIntArray_Get(self->jjstateSet_, --i)) {
          
#line 5990
          case 0:
          if (!FreemarkerCoreFMParserTokenManager_jjCanMove_1WithInt_withInt_withInt_withLong_withLong_(hiByte, i1, i2, l1, l2))
#line 5992
          break;
          if (kind > 133)
#line 5994
          kind = 133;
          {
            
#line 5995
            FreemarkerCoreFMParserTokenManager_jjCheckNAddTwoStatesWithInt_withInt_(self, 29, 30);
          }
          
#line 5996
          break;
          case 80:
          case 29:
          if (!FreemarkerCoreFMParserTokenManager_jjCanMove_1WithInt_withInt_withInt_withLong_withLong_(hiByte, i1, i2, l1, l2))
#line 6000
          break;
          if (kind > 133)
#line 6002
          kind = 133;
          {
            
#line 6003
            FreemarkerCoreFMParserTokenManager_jjCheckNAddTwoStatesWithInt_withInt_(self, 29, 30);
          }
          
#line 6004
          break;
          case 1:
          if (FreemarkerCoreFMParserTokenManager_jjCanMove_0WithInt_withInt_withInt_withLong_withLong_(hiByte, i1, i2, l1, l2)) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 368, 370);
          }
          
#line 6008
          break;
          case 8:
          if (FreemarkerCoreFMParserTokenManager_jjCanMove_0WithInt_withInt_withInt_withLong_withLong_(hiByte, i1, i2, l1, l2)) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 365, 367);
          }
          
#line 6012
          break;
          case 16:
          if (FreemarkerCoreFMParserTokenManager_jjCanMove_0WithInt_withInt_withInt_withLong_withLong_(hiByte, i1, i2, l1, l2)) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 379, 380);
          }
          
#line 6016
          break;
          case 19:
          if (FreemarkerCoreFMParserTokenManager_jjCanMove_0WithInt_withInt_withInt_withLong_withLong_(hiByte, i1, i2, l1, l2)) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 381, 382);
          }
          
#line 6020
          break;
          default:
          
#line 6021
          if (i1 == 0 || l1 == 0 || i2 == 0 || l2 == 0) break;
          else
#line 6021
          break;
        }
      }
      while (
#line 6023
      i != startsAt);
    }
    if (kind != (jint) 0x7fffffff) {
      
#line 6027
      self->jjmatchedKind_ = kind;
      self->jjmatchedPos_ = curPos;
      kind = (jint) 0x7fffffff;
    }
    ++curPos;
    jint unseq$1 = self->jjnewStateCnt_;
    
#line 6032
    if ((i = unseq$1) == (startsAt = 80 - (self->jjnewStateCnt_ = startsAt)))
#line 6033
    return curPos;
    @try {
      
#line 6034
      self->curChar_ = [((FreemarkerCoreSimpleCharStream *) nil_chk(self->input_stream_)) readChar];
    }
    @catch (
#line 6035
    JavaIoIOException *e) {
      
#line 6035
      return curPos;
    }
  }
}


#line 6038
jint FreemarkerCoreFMParserTokenManager_jjStopStringLiteralDfa_4WithInt_withLong_withLong_withLong_(FreemarkerCoreFMParserTokenManager *self, jint pos, jlong active0, jlong active1, jlong active2) {
  switch (pos) {
    
#line 6041
    case 0:
    if ((active1 & (jlong) 0x1000000000000000LL) != 0LL)
#line 6043
    return 2;
    if ((active1 & (jlong) 0x1800000LL) != 0LL || (active2 & (jlong) 0x1cLL) != 0LL) {
      
#line 6046
      self->jjmatchedKind_ = 133;
      return 86;
    }
    if ((active1 & (jlong) 0x10008000000000LL) != 0LL)
#line 6050
    return 44;
    if ((active1 & (jlong) 0x8000058000000LL) != 0LL)
#line 6052
    return 48;
    if ((active1 & (jlong) 0x100000800000000LL) != 0LL)
#line 6054
    return 42;
    return -1;
    case 1:
    if ((active2 & (jlong) 0xcLL) != 0LL)
#line 6058
    return 86;
    if ((active1 & (jlong) 0x8000050000000LL) != 0LL)
#line 6060
    return 47;
    if ((active1 & (jlong) 0x1800000LL) != 0LL || (active2 & (jlong) 0x10LL) != 0LL) {
      
#line 6063
      if (self->jjmatchedPos_ != 1) {
        
#line 6065
        self->jjmatchedKind_ = 133;
        self->jjmatchedPos_ = 1;
      }
      return 86;
    }
    return -1;
    case 2:
    if ((active1 & (jlong) 0x1800000LL) != 0LL || (active2 & (jlong) 0x10LL) != 0LL) {
      
#line 6074
      self->jjmatchedKind_ = 133;
      self->jjmatchedPos_ = 2;
      return 86;
    }
    return -1;
    case 3:
    if ((active1 & (jlong) 0x800000LL) != 0LL || (active2 & (jlong) 0x10LL) != 0LL) {
      
#line 6082
      self->jjmatchedKind_ = 133;
      self->jjmatchedPos_ = 3;
      return 86;
    }
    if ((active1 & (jlong) 0x1000000LL) != 0LL)
#line 6087
    return 86;
    return -1;
    default:
    return -1;
  }
}


#line 6093
jint FreemarkerCoreFMParserTokenManager_jjStartNfa_4WithInt_withLong_withLong_withLong_(FreemarkerCoreFMParserTokenManager *self, jint pos, jlong active0, jlong active1, jlong active2) {
  return FreemarkerCoreFMParserTokenManager_jjMoveNfa_4WithInt_withInt_(self, FreemarkerCoreFMParserTokenManager_jjStopStringLiteralDfa_4WithInt_withLong_withLong_withLong_(self, pos, active0, active1, active2), pos + 1);
}


#line 6096
jint FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa0_4(FreemarkerCoreFMParserTokenManager *self) {
  switch (self->curChar_) {
    
#line 6099
    case 33:
    self->jjmatchedKind_ = 120;
    return FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa1_4WithLong_withLong_(self, (jlong) 0x800000000LL, (jlong) 0x0LL);
    case 37:
    self->jjmatchedKind_ = 117;
    return FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa1_4WithLong_withLong_(self, (jlong) 0x10000000000LL, (jlong) 0x0LL);
    case 40:
    return FreemarkerCoreFMParserTokenManager_jjStopAtPosWithInt_withInt_(self, 0, 126);
    case 41:
    return FreemarkerCoreFMParserTokenManager_jjStopAtPosWithInt_withInt_(self, 0, 127);
    case 42:
    self->jjmatchedKind_ = 113;
    return FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa1_4WithLong_withLong_(self, (jlong) 0x4004000000000LL, (jlong) 0x0LL);
    case 43:
    self->jjmatchedKind_ = 111;
    return FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa1_4WithLong_withLong_(self, (jlong) 0x21000000000LL, (jlong) 0x0LL);
    case 44:
    return FreemarkerCoreFMParserTokenManager_jjStopAtPosWithInt_withInt_(self, 0, 121);
    case 45:
    self->jjmatchedKind_ = 112;
    return FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa1_4WithLong_withLong_(self, (jlong) 0x42000000000LL, (jlong) 0x0LL);
    case 46:
    self->jjmatchedKind_ = 91;
    return FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa1_4WithLong_withLong_(self, (jlong) 0x8000050000000LL, (jlong) 0x0LL);
    case 47:
    self->jjmatchedKind_ = 116;
    return FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa1_4WithLong_withLong_(self, (jlong) 0x8000000000LL, (jlong) 0x0LL);
    case 58:
    return FreemarkerCoreFMParserTokenManager_jjStopAtPosWithInt_withInt_(self, 0, 123);
    case 59:
    return FreemarkerCoreFMParserTokenManager_jjStopAtPosWithInt_withInt_(self, 0, 122);
    case 61:
    self->jjmatchedKind_ = 97;
    return FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa1_4WithLong_withLong_(self, (jlong) 0x400000000LL, (jlong) 0x0LL);
    case 62:
    return FreemarkerCoreFMParserTokenManager_jjStopAtPosWithInt_withInt_(self, 0, 139);
    case 63:
    self->jjmatchedKind_ = 95;
    return FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa1_4WithLong_withLong_(self, (jlong) 0x100000000LL, (jlong) 0x0LL);
    case 91:
    return FreemarkerCoreFMParserTokenManager_jjStartNfaWithStates_4WithInt_withInt_withInt_(self, 0, 124, 2);
    case 93:
    return FreemarkerCoreFMParserTokenManager_jjStopAtPosWithInt_withInt_(self, 0, 125);
    case 97:
    return FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa1_4WithLong_withLong_(self, (jlong) 0x0LL, (jlong) 0x8LL);
    case 102:
    return FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa1_4WithLong_withLong_(self, (jlong) 0x800000LL, (jlong) 0x0LL);
    case 105:
    return FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa1_4WithLong_withLong_(self, (jlong) 0x0LL, (jlong) 0x4LL);
    case 116:
    return FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa1_4WithLong_withLong_(self, (jlong) 0x1000000LL, (jlong) 0x0LL);
    case 117:
    return FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa1_4WithLong_withLong_(self, (jlong) 0x0LL, (jlong) 0x10LL);
    case 123:
    return FreemarkerCoreFMParserTokenManager_jjStopAtPosWithInt_withInt_(self, 0, 128);
    case 125:
    return FreemarkerCoreFMParserTokenManager_jjStopAtPosWithInt_withInt_(self, 0, 129);
    default:
    return FreemarkerCoreFMParserTokenManager_jjMoveNfa_4WithInt_withInt_(self, 1, 0);
  }
}


#line 6160
jint FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa1_4WithLong_withLong_(FreemarkerCoreFMParserTokenManager *self, jlong active1, jlong active2) {
  @try {
    
#line 6161
    self->curChar_ = [((FreemarkerCoreSimpleCharStream *) nil_chk(self->input_stream_)) readChar];
  }
  @catch (
#line 6162
  JavaIoIOException *e) {
    FreemarkerCoreFMParserTokenManager_jjStopStringLiteralDfa_4WithInt_withLong_withLong_withLong_(self, 0, 0LL, active1, active2);
    return 1;
  }
  switch (self->curChar_) {
    
#line 6168
    case 42:
    if ((active1 & (jlong) 0x4000000000000LL) != 0LL)
#line 6170
    return FreemarkerCoreFMParserTokenManager_jjStopAtPosWithInt_withInt_(self, 1, 114);
    break;
    case 43:
    if ((active1 & (jlong) 0x20000000000LL) != 0LL)
#line 6174
    return FreemarkerCoreFMParserTokenManager_jjStopAtPosWithInt_withInt_(self, 1, 105);
    break;
    case 45:
    if ((active1 & (jlong) 0x40000000000LL) != 0LL)
#line 6178
    return FreemarkerCoreFMParserTokenManager_jjStopAtPosWithInt_withInt_(self, 1, 106);
    break;
    case 46:
    if ((active1 & (jlong) 0x10000000LL) != 0LL) {
      
#line 6183
      self->jjmatchedKind_ = 92;
      self->jjmatchedPos_ = 1;
    }
    return FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa2_4WithLong_withLong_withLong_withLong_(self, active1, (jlong) 0x8000040000000LL, active2, 0LL);
    case 61:
    if ((active1 & (jlong) 0x400000000LL) != 0LL)
#line 6189
    return FreemarkerCoreFMParserTokenManager_jjStopAtPosWithInt_withInt_(self, 1, 98);
    else if ((active1 & (jlong) 0x800000000LL) != 0LL)
#line 6191
    return FreemarkerCoreFMParserTokenManager_jjStopAtPosWithInt_withInt_(self, 1, 99);
    else if ((active1 & (jlong) 0x1000000000LL) != 0LL)
#line 6193
    return FreemarkerCoreFMParserTokenManager_jjStopAtPosWithInt_withInt_(self, 1, 100);
    else if ((active1 & (jlong) 0x2000000000LL) != 0LL)
#line 6195
    return FreemarkerCoreFMParserTokenManager_jjStopAtPosWithInt_withInt_(self, 1, 101);
    else if ((active1 & (jlong) 0x4000000000LL) != 0LL)
#line 6197
    return FreemarkerCoreFMParserTokenManager_jjStopAtPosWithInt_withInt_(self, 1, 102);
    else if ((active1 & (jlong) 0x8000000000LL) != 0LL)
#line 6199
    return FreemarkerCoreFMParserTokenManager_jjStopAtPosWithInt_withInt_(self, 1, 103);
    else if ((active1 & (jlong) 0x10000000000LL) != 0LL)
#line 6201
    return FreemarkerCoreFMParserTokenManager_jjStopAtPosWithInt_withInt_(self, 1, 104);
    break;
    case 63:
    if ((active1 & (jlong) 0x100000000LL) != 0LL)
#line 6205
    return FreemarkerCoreFMParserTokenManager_jjStopAtPosWithInt_withInt_(self, 1, 96);
    break;
    case 97:
    return FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa2_4WithLong_withLong_withLong_withLong_(self, active1, (jlong) 0x800000LL, active2, 0LL);
    case 110:
    if ((active2 & (jlong) 0x4LL) != 0LL)
#line 6211
    return FreemarkerCoreFMParserTokenManager_jjStartNfaWithStates_4WithInt_withInt_withInt_(self, 1, 130, 86);
    break;
    case 114:
    return FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa2_4WithLong_withLong_withLong_withLong_(self, active1, (jlong) 0x1000000LL, active2, 0LL);
    case 115:
    if ((active2 & (jlong) 0x8LL) != 0LL)
#line 6217
    return FreemarkerCoreFMParserTokenManager_jjStartNfaWithStates_4WithInt_withInt_withInt_(self, 1, 131, 86);
    return FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa2_4WithLong_withLong_withLong_withLong_(self, active1, 0LL, active2, (jlong) 0x10LL);
    default:
    break;
  }
  return FreemarkerCoreFMParserTokenManager_jjStartNfa_4WithInt_withLong_withLong_withLong_(self, 0, 0LL, active1, active2);
}


#line 6224
jint FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa2_4WithLong_withLong_withLong_withLong_(FreemarkerCoreFMParserTokenManager *self, jlong old1, jlong active1, jlong old2, jlong active2) {
  if (((active1 &= old1) | (active2 &= old2)) == 0LL)
#line 6226
  return FreemarkerCoreFMParserTokenManager_jjStartNfa_4WithInt_withLong_withLong_withLong_(self, 0, 0LL, old1, old2);
  @try {
    
#line 6227
    self->curChar_ = [((FreemarkerCoreSimpleCharStream *) nil_chk(self->input_stream_)) readChar];
  }
  @catch (
#line 6228
  JavaIoIOException *e) {
    FreemarkerCoreFMParserTokenManager_jjStopStringLiteralDfa_4WithInt_withLong_withLong_withLong_(self, 1, 0LL, active1, active2);
    return 2;
  }
  switch (self->curChar_) {
    
#line 6234
    case 42:
    if ((active1 & (jlong) 0x40000000LL) != 0LL)
#line 6236
    return FreemarkerCoreFMParserTokenManager_jjStopAtPosWithInt_withInt_(self, 2, 94);
    break;
    case 46:
    if ((active1 & (jlong) 0x8000000000000LL) != 0LL)
#line 6240
    return FreemarkerCoreFMParserTokenManager_jjStopAtPosWithInt_withInt_(self, 2, 115);
    break;
    case 105:
    return FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa3_4WithLong_withLong_withLong_withLong_(self, active1, 0LL, active2, (jlong) 0x10LL);
    case 108:
    return FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa3_4WithLong_withLong_withLong_withLong_(self, active1, (jlong) 0x800000LL, active2, 0LL);
    case 117:
    return FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa3_4WithLong_withLong_withLong_withLong_(self, active1, (jlong) 0x1000000LL, active2, 0LL);
    default:
    break;
  }
  return FreemarkerCoreFMParserTokenManager_jjStartNfa_4WithInt_withLong_withLong_withLong_(self, 1, 0LL, active1, active2);
}


#line 6253
jint FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa3_4WithLong_withLong_withLong_withLong_(FreemarkerCoreFMParserTokenManager *self, jlong old1, jlong active1, jlong old2, jlong active2) {
  if (((active1 &= old1) | (active2 &= old2)) == 0LL)
#line 6255
  return FreemarkerCoreFMParserTokenManager_jjStartNfa_4WithInt_withLong_withLong_withLong_(self, 1, 0LL, old1, old2);
  @try {
    
#line 6256
    self->curChar_ = [((FreemarkerCoreSimpleCharStream *) nil_chk(self->input_stream_)) readChar];
  }
  @catch (
#line 6257
  JavaIoIOException *e) {
    FreemarkerCoreFMParserTokenManager_jjStopStringLiteralDfa_4WithInt_withLong_withLong_withLong_(self, 2, 0LL, active1, active2);
    return 3;
  }
  switch (self->curChar_) {
    
#line 6263
    case 101:
    if ((active1 & (jlong) 0x1000000LL) != 0LL)
#line 6265
    return FreemarkerCoreFMParserTokenManager_jjStartNfaWithStates_4WithInt_withInt_withInt_(self, 3, 88, 86);
    break;
    case 110:
    return FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa4_4WithLong_withLong_withLong_withLong_(self, active1, 0LL, active2, (jlong) 0x10LL);
    case 115:
    return FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa4_4WithLong_withLong_withLong_withLong_(self, active1, (jlong) 0x800000LL, active2, 0LL);
    default:
    break;
  }
  return FreemarkerCoreFMParserTokenManager_jjStartNfa_4WithInt_withLong_withLong_withLong_(self, 2, 0LL, active1, active2);
}


#line 6276
jint FreemarkerCoreFMParserTokenManager_jjMoveStringLiteralDfa4_4WithLong_withLong_withLong_withLong_(FreemarkerCoreFMParserTokenManager *self, jlong old1, jlong active1, jlong old2, jlong active2) {
  if (((active1 &= old1) | (active2 &= old2)) == 0LL)
#line 6278
  return FreemarkerCoreFMParserTokenManager_jjStartNfa_4WithInt_withLong_withLong_withLong_(self, 2, 0LL, old1, old2);
  @try {
    
#line 6279
    self->curChar_ = [((FreemarkerCoreSimpleCharStream *) nil_chk(self->input_stream_)) readChar];
  }
  @catch (
#line 6280
  JavaIoIOException *e) {
    FreemarkerCoreFMParserTokenManager_jjStopStringLiteralDfa_4WithInt_withLong_withLong_withLong_(self, 3, 0LL, active1, active2);
    return 4;
  }
  switch (self->curChar_) {
    
#line 6286
    case 101:
    if ((active1 & (jlong) 0x800000LL) != 0LL)
#line 6288
    return FreemarkerCoreFMParserTokenManager_jjStartNfaWithStates_4WithInt_withInt_withInt_(self, 4, 87, 86);
    break;
    case 103:
    if ((active2 & (jlong) 0x10LL) != 0LL)
#line 6292
    return FreemarkerCoreFMParserTokenManager_jjStartNfaWithStates_4WithInt_withInt_withInt_(self, 4, 132, 86);
    break;
    default:
    break;
  }
  return FreemarkerCoreFMParserTokenManager_jjStartNfa_4WithInt_withLong_withLong_withLong_(self, 3, 0LL, active1, active2);
}


#line 6299
jint FreemarkerCoreFMParserTokenManager_jjStartNfaWithStates_4WithInt_withInt_withInt_(FreemarkerCoreFMParserTokenManager *self, jint pos, jint kind, jint state) {
  
#line 6301
  self->jjmatchedKind_ = kind;
  self->jjmatchedPos_ = pos;
  @try {
    
#line 6303
    self->curChar_ = [((FreemarkerCoreSimpleCharStream *) nil_chk(self->input_stream_)) readChar];
  }
  @catch (
#line 6304
  JavaIoIOException *e) {
    
#line 6304
    return pos + 1;
  }
  
#line 6305
  return FreemarkerCoreFMParserTokenManager_jjMoveNfa_4WithInt_withInt_(self, state, pos + 1);
}


#line 6307
jint FreemarkerCoreFMParserTokenManager_jjMoveNfa_4WithInt_withInt_(FreemarkerCoreFMParserTokenManager *self, jint startState, jint curPos) {
  
#line 6309
  jint startsAt = 0;
  self->jjnewStateCnt_ = 86;
  jint i = 1;
  *IOSIntArray_GetRef(nil_chk(self->jjstateSet_), 0) = startState;
  jint kind = (jint) 0x7fffffff;
  for (; ; ) {
    
#line 6316
    if (++self->jjround_ == (jint) 0x7fffffff)
#line 6317
    FreemarkerCoreFMParserTokenManager_ReInitRounds(self);
    if (self->curChar_ < 64) {
      
#line 6320
      jlong l = LShift64(1LL, self->curChar_);
      do {
        
#line 6323
        switch (IOSIntArray_Get(self->jjstateSet_, --i)) {
          
#line 6325
          case 47:
          if (self->curChar_ == 33) {
            
#line 6328
            if (kind > 93)
#line 6329
            kind = 93;
          }
          else if (self->curChar_ == 60) {
            
#line 6333
            if (kind > 93)
#line 6334
            kind = 93;
          }
          break;
          case 1:
          if (((jlong) 0x3ff000000000000LL & l) != 0LL) {
            
#line 6340
            if (kind > 89)
#line 6341
            kind = 89;
            {
              
#line 6342
              FreemarkerCoreFMParserTokenManager_jjCheckNAddStatesWithInt_withInt_(self, 383, 385);
            }
          }
          else
#line 6344
          if (((jlong) 0x100002600LL & l) != 0LL) {
            
#line 6346
            if (kind > 77)
#line 6347
            kind = 77;
            {
              
#line 6348
              FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 0);
            }
          }
          else
#line 6350
          if (self->curChar_ == 38) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 386, 390);
          }
          else
#line 6352
          if (self->curChar_ == 46) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 391, 392);
          }
          else
#line 6354
          if (self->curChar_ == 47) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 393, 394);
          }
          else
#line 6356
          if (self->curChar_ == 33) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 42);
          }
          else
#line 6358
          if (self->curChar_ == 35) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 38);
          }
          else
#line 6360
          if (self->curChar_ == 36) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 38);
          }
          else
#line 6362
          if (self->curChar_ == 60) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 27);
          }
          else
#line 6364
          if (self->curChar_ == 39) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddStatesWithInt_withInt_(self, 317, 319);
          }
          else
#line 6366
          if (self->curChar_ == 34) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddStatesWithInt_withInt_(self, 320, 322);
          }
          
#line 6368
          if (self->curChar_ == 36) {
            
#line 6370
            if (kind > 133)
#line 6371
            kind = 133;
            {
              
#line 6372
              FreemarkerCoreFMParserTokenManager_jjCheckNAddTwoStatesWithInt_withInt_(self, 34, 35);
            }
          }
          else
#line 6374
          if (self->curChar_ == 38) {
            
#line 6376
            if (kind > 118)
#line 6377
            kind = 118;
          }
          else if (self->curChar_ == 60) {
            
#line 6381
            if (kind > 107)
#line 6382
            kind = 107;
          }
          if (self->curChar_ == 60)
#line 6385
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 2;
          break;
          case 48:
          if (self->curChar_ == 46)
#line 6389
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 49;
          if (self->curChar_ == 46)
#line 6391
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 47;
          break;
          case 44:
          if (self->curChar_ == 62 && kind > 140)
#line 6395
          kind = 140;
          break;
          case 86:
          case 34:
          if (((jlong) 0x3ff001000000000LL & l) == 0LL)
#line 6400
          break;
          if (kind > 133)
#line 6402
          kind = 133;
          {
            
#line 6403
            FreemarkerCoreFMParserTokenManager_jjCheckNAddTwoStatesWithInt_withInt_(self, 34, 35);
          }
          
#line 6404
          break;
          case 0:
          if (((jlong) 0x100002600LL & l) == 0LL)
#line 6407
          break;
          if (kind > 77)
#line 6409
          kind = 77;
          {
            
#line 6410
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 0);
          }
          
#line 6411
          break;
          case 2:
          if (((jlong) 0xa00000000LL & l) != 0LL)
#line 6414
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 4;
          break;
          case 3:
          if (self->curChar_ == 45 && kind > 78)
#line 6418
          kind = 78;
          break;
          case 4:
          if (self->curChar_ == 45)
#line 6422
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 3;
          break;
          case 5:
          if (self->curChar_ == 34) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddStatesWithInt_withInt_(self, 320, 322);
          }
          
#line 6427
          break;
          case 6:
          if (((jlong) 0xfffffffbffffffffLL & l) != 0LL) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddStatesWithInt_withInt_(self, 320, 322);
          }
          
#line 6431
          break;
          case 9:
          if (((jlong) 0x3ff000000000000LL & l) != 0LL) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddStatesWithInt_withInt_(self, 320, 322);
          }
          
#line 6435
          break;
          case 10:
          if (self->curChar_ == 34 && kind > 85)
#line 6438
          kind = 85;
          break;
          case 11:
          if (((jlong) 0x9400000000LL & l) != 0LL) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddStatesWithInt_withInt_(self, 320, 322);
          }
          
#line 6443
          break;
          case 12:
          if (self->curChar_ == 39) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddStatesWithInt_withInt_(self, 317, 319);
          }
          
#line 6447
          break;
          case 13:
          if (((jlong) 0xffffff7fffffffffLL & l) != 0LL) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddStatesWithInt_withInt_(self, 317, 319);
          }
          
#line 6451
          break;
          case 16:
          if (((jlong) 0x3ff000000000000LL & l) != 0LL) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddStatesWithInt_withInt_(self, 317, 319);
          }
          
#line 6455
          break;
          case 17:
          if (self->curChar_ == 39 && kind > 85)
#line 6458
          kind = 85;
          break;
          case 18:
          if (((jlong) 0x9400000000LL & l) != 0LL) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddStatesWithInt_withInt_(self, 317, 319);
          }
          
#line 6463
          break;
          case 20:
          if (self->curChar_ == 34) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddTwoStatesWithInt_withInt_(self, 21, 22);
          }
          
#line 6467
          break;
          case 21:
          if (((jlong) 0xfffffffbffffffffLL & l) != 0LL) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddTwoStatesWithInt_withInt_(self, 21, 22);
          }
          
#line 6471
          break;
          case 22:
          if (self->curChar_ == 34 && kind > 86)
#line 6474
          kind = 86;
          break;
          case 23:
          if (self->curChar_ == 39) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddTwoStatesWithInt_withInt_(self, 24, 25);
          }
          
#line 6479
          break;
          case 24:
          if (((jlong) 0xffffff7fffffffffLL & l) != 0LL) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddTwoStatesWithInt_withInt_(self, 24, 25);
          }
          
#line 6483
          break;
          case 25:
          if (self->curChar_ == 39 && kind > 86)
#line 6486
          kind = 86;
          break;
          case 26:
          if (self->curChar_ == 60 && kind > 107)
#line 6490
          kind = 107;
          break;
          case 27:
          if (self->curChar_ == 61 && kind > 108)
#line 6494
          kind = 108;
          break;
          case 28:
          if (self->curChar_ == 60) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 27);
          }
          
#line 6499
          break;
          case 29:
          case 83:
          if (self->curChar_ == 38 && kind > 118)
#line 6503
          kind = 118;
          break;
          case 33:
          if (self->curChar_ != 36)
#line 6507
          break;
          if (kind > 133)
#line 6509
          kind = 133;
          {
            
#line 6510
            FreemarkerCoreFMParserTokenManager_jjCheckNAddTwoStatesWithInt_withInt_(self, 34, 35);
          }
          
#line 6511
          break;
          case 36:
          if (((jlong) 0x400600000000000LL & l) == 0LL)
#line 6514
          break;
          if (kind > 133)
#line 6516
          kind = 133;
          {
            
#line 6517
            FreemarkerCoreFMParserTokenManager_jjCheckNAddTwoStatesWithInt_withInt_(self, 34, 35);
          }
          
#line 6518
          break;
          case 39:
          if (self->curChar_ == 36) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 38);
          }
          
#line 6522
          break;
          case 40:
          if (self->curChar_ == 35) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 38);
          }
          
#line 6526
          break;
          case 41:
          if (self->curChar_ == 33) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 42);
          }
          
#line 6530
          break;
          case 42:
          if (((jlong) 0x100002600LL & l) == 0LL)
#line 6533
          break;
          if (kind > 144)
#line 6535
          kind = 144;
          {
            
#line 6536
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 42);
          }
          
#line 6537
          break;
          case 43:
          if (self->curChar_ == 47) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 393, 394);
          }
          
#line 6541
          break;
          case 46:
          if (self->curChar_ == 46) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 391, 392);
          }
          
#line 6545
          break;
          case 49:
          if (self->curChar_ == 33 && kind > 93)
#line 6548
          kind = 93;
          break;
          case 50:
          if (self->curChar_ == 46)
#line 6552
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 49;
          break;
          case 51:
          if (((jlong) 0x3ff000000000000LL & l) == 0LL)
#line 6556
          break;
          if (kind > 89)
#line 6558
          kind = 89;
          {
            
#line 6559
            FreemarkerCoreFMParserTokenManager_jjCheckNAddStatesWithInt_withInt_(self, 383, 385);
          }
          
#line 6560
          break;
          case 52:
          if (((jlong) 0x3ff000000000000LL & l) == 0LL)
#line 6563
          break;
          if (kind > 89)
#line 6565
          kind = 89;
          {
            
#line 6566
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 52);
          }
          
#line 6567
          break;
          case 53:
          if (((jlong) 0x3ff000000000000LL & l) != 0LL) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddTwoStatesWithInt_withInt_(self, 53, 54);
          }
          
#line 6571
          break;
          case 54:
          if (self->curChar_ == 46) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 55);
          }
          
#line 6575
          break;
          case 55:
          if (((jlong) 0x3ff000000000000LL & l) == 0LL)
#line 6578
          break;
          if (kind > 90)
#line 6580
          kind = 90;
          {
            
#line 6581
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 55);
          }
          
#line 6582
          break;
          case 69:
          if (self->curChar_ == 38) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 386, 390);
          }
          
#line 6586
          break;
          case 70:
          if (self->curChar_ == 59 && kind > 107)
#line 6589
          kind = 107;
          break;
          case 73:
          if (self->curChar_ == 59) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 27);
          }
          
#line 6594
          break;
          case 76:
          if (self->curChar_ == 59 && kind > 109)
#line 6597
          kind = 109;
          break;
          case 79:
          if (self->curChar_ == 61 && kind > 110)
#line 6601
          kind = 110;
          break;
          case 80:
          if (self->curChar_ == 59)
#line 6605
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 79;
          break;
          default:
          
#line 6607
          break;
        }
      }
      while (
#line 6609
      i != startsAt);
    }
    else if (self->curChar_ < 128) {
      
#line 6613
      jlong l = LShift64(1LL, (self->curChar_ & 077));
      do {
        
#line 6616
        switch (IOSIntArray_Get(self->jjstateSet_, --i)) {
          
#line 6618
          case 1:
          if (((jlong) 0x7fffffe87ffffffLL & l) != 0LL) {
            
#line 6621
            if (kind > 133)
#line 6622
            kind = 133;
            {
              
#line 6623
              FreemarkerCoreFMParserTokenManager_jjCheckNAddTwoStatesWithInt_withInt_(self, 34, 35);
            }
          }
          else
#line 6625
          if (self->curChar_ == 92) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 395, 398);
          }
          else
#line 6627
          if (self->curChar_ == 124)
#line 6628
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 31;
          else if (self->curChar_ == 91)
#line 6630
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 2;
          if (self->curChar_ == 103) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddTwoStatesWithInt_withInt_(self, 64, 85);
          }
          else
#line 6633
          if (self->curChar_ == 108) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddTwoStatesWithInt_withInt_(self, 57, 59);
          }
          else
#line 6635
          if (self->curChar_ == 92) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 36);
          }
          else
#line 6637
          if (self->curChar_ == 124) {
            
#line 6639
            if (kind > 119)
#line 6640
            kind = 119;
          }
          else if (self->curChar_ == 114) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 327, 328);
          }
          
#line 6644
          break;
          case 44:
          if (self->curChar_ == 93 && kind > 140)
#line 6647
          kind = 140;
          break;
          case 86:
          if (((jlong) 0x7fffffe87ffffffLL & l) != 0LL) {
            
#line 6652
            if (kind > 133)
#line 6653
            kind = 133;
            {
              
#line 6654
              FreemarkerCoreFMParserTokenManager_jjCheckNAddTwoStatesWithInt_withInt_(self, 34, 35);
            }
          }
          else
#line 6656
          if (self->curChar_ == 92) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 36);
          }
          
#line 6658
          break;
          case 6:
          if (((jlong) 0xffffffffefffffffLL & l) != 0LL) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddStatesWithInt_withInt_(self, 320, 322);
          }
          
#line 6662
          break;
          case 7:
          if (self->curChar_ == 92) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 329, 330);
          }
          
#line 6666
          break;
          case 8:
          if (self->curChar_ == 120)
#line 6669
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 9;
          break;
          case 9:
          if (((jlong) 0x7e0000007eLL & l) != 0LL) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddStatesWithInt_withInt_(self, 320, 322);
          }
          
#line 6674
          break;
          case 11:
          if (((jlong) 0x81450c610000000LL & l) != 0LL) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddStatesWithInt_withInt_(self, 320, 322);
          }
          
#line 6678
          break;
          case 13:
          if (((jlong) 0xffffffffefffffffLL & l) != 0LL) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddStatesWithInt_withInt_(self, 317, 319);
          }
          
#line 6682
          break;
          case 14:
          if (self->curChar_ == 92) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 331, 332);
          }
          
#line 6686
          break;
          case 15:
          if (self->curChar_ == 120)
#line 6689
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 16;
          break;
          case 16:
          if (((jlong) 0x7e0000007eLL & l) != 0LL) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddStatesWithInt_withInt_(self, 317, 319);
          }
          
#line 6694
          break;
          case 18:
          if (((jlong) 0x81450c610000000LL & l) != 0LL) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddStatesWithInt_withInt_(self, 317, 319);
          }
          
#line 6698
          break;
          case 19:
          if (self->curChar_ == 114) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 327, 328);
          }
          
#line 6702
          break;
          case 21:
          {
            
#line 6704
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 333, 334);
          }
          
#line 6705
          break;
          case 24:
          {
            
#line 6707
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 335, 336);
          }
          
#line 6708
          break;
          case 30:
          case 31:
          if (self->curChar_ == 124 && kind > 119)
#line 6712
          kind = 119;
          break;
          case 32:
          if (self->curChar_ == 124)
#line 6716
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 31;
          break;
          case 33:
          if (((jlong) 0x7fffffe87ffffffLL & l) == 0LL)
#line 6720
          break;
          if (kind > 133)
#line 6722
          kind = 133;
          {
            
#line 6723
            FreemarkerCoreFMParserTokenManager_jjCheckNAddTwoStatesWithInt_withInt_(self, 34, 35);
          }
          
#line 6724
          break;
          case 34:
          if (((jlong) 0x7fffffe87ffffffLL & l) == 0LL)
#line 6727
          break;
          if (kind > 133)
#line 6729
          kind = 133;
          {
            
#line 6730
            FreemarkerCoreFMParserTokenManager_jjCheckNAddTwoStatesWithInt_withInt_(self, 34, 35);
          }
          
#line 6731
          break;
          case 35:
          if (self->curChar_ == 92) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 36);
          }
          
#line 6735
          break;
          case 37:
          if (self->curChar_ == 92) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 36);
          }
          
#line 6739
          break;
          case 38:
          if (self->curChar_ == 123 && kind > 134)
#line 6742
          kind = 134;
          break;
          case 56:
          if (self->curChar_ == 108) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddTwoStatesWithInt_withInt_(self, 57, 59);
          }
          
#line 6747
          break;
          case 57:
          if (self->curChar_ == 116 && kind > 107)
#line 6750
          kind = 107;
          break;
          case 58:
          if (self->curChar_ == 101 && kind > 108)
#line 6754
          kind = 108;
          break;
          case 59:
          case 62:
          if (self->curChar_ == 116) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 58);
          }
          
#line 6760
          break;
          case 60:
          if (self->curChar_ == 92) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 395, 398);
          }
          
#line 6764
          break;
          case 61:
          if (self->curChar_ == 108) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 57);
          }
          
#line 6768
          break;
          case 63:
          if (self->curChar_ == 108)
#line 6771
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 62;
          break;
          case 64:
          if (self->curChar_ == 116 && kind > 109)
#line 6775
          kind = 109;
          break;
          case 65:
          if (self->curChar_ == 103) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 64);
          }
          
#line 6780
          break;
          case 66:
          if (self->curChar_ == 101 && kind > 110)
#line 6783
          kind = 110;
          break;
          case 67:
          case 85:
          if (self->curChar_ == 116) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, 66);
          }
          
#line 6789
          break;
          case 68:
          if (self->curChar_ == 103)
#line 6792
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 67;
          break;
          case 71:
          if (self->curChar_ == 116)
#line 6796
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 70;
          break;
          case 72:
          if (self->curChar_ == 108)
#line 6800
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 71;
          break;
          case 74:
          if (self->curChar_ == 116)
#line 6804
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 73;
          break;
          case 75:
          if (self->curChar_ == 108)
#line 6808
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 74;
          break;
          case 77:
          if (self->curChar_ == 116)
#line 6812
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 76;
          break;
          case 78:
          if (self->curChar_ == 103)
#line 6816
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 77;
          break;
          case 81:
          if (self->curChar_ == 116)
#line 6820
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 80;
          break;
          case 82:
          if (self->curChar_ == 103)
#line 6824
          *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 81;
          break;
          case 84:
          if (self->curChar_ == 103) {
            FreemarkerCoreFMParserTokenManager_jjCheckNAddTwoStatesWithInt_withInt_(self, 64, 85);
          }
          
#line 6829
          break;
          default:
          
#line 6830
          break;
        }
      }
      while (
#line 6832
      i != startsAt);
    }
    else {
      
#line 6836
      jint hiByte = (RShift32(self->curChar_, 8));
      jint i1 = RShift32(hiByte, 6);
      jlong l1 = LShift64(1LL, (hiByte & 077));
      jint i2 = RShift32((self->curChar_ & (jint) 0xff), 6);
      jlong l2 = LShift64(1LL, (self->curChar_ & 077));
      do {
        
#line 6843
        switch (IOSIntArray_Get(self->jjstateSet_, --i)) {
          
#line 6845
          case 1:
          if (!FreemarkerCoreFMParserTokenManager_jjCanMove_1WithInt_withInt_withInt_withLong_withLong_(hiByte, i1, i2, l1, l2))
#line 6847
          break;
          if (kind > 133)
#line 6849
          kind = 133;
          {
            
#line 6850
            FreemarkerCoreFMParserTokenManager_jjCheckNAddTwoStatesWithInt_withInt_(self, 34, 35);
          }
          
#line 6851
          break;
          case 86:
          case 34:
          if (!FreemarkerCoreFMParserTokenManager_jjCanMove_1WithInt_withInt_withInt_withLong_withLong_(hiByte, i1, i2, l1, l2))
#line 6855
          break;
          if (kind > 133)
#line 6857
          kind = 133;
          {
            
#line 6858
            FreemarkerCoreFMParserTokenManager_jjCheckNAddTwoStatesWithInt_withInt_(self, 34, 35);
          }
          
#line 6859
          break;
          case 6:
          if (FreemarkerCoreFMParserTokenManager_jjCanMove_0WithInt_withInt_withInt_withLong_withLong_(hiByte, i1, i2, l1, l2)) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 320, 322);
          }
          
#line 6863
          break;
          case 13:
          if (FreemarkerCoreFMParserTokenManager_jjCanMove_0WithInt_withInt_withInt_withLong_withLong_(hiByte, i1, i2, l1, l2)) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 317, 319);
          }
          
#line 6867
          break;
          case 21:
          if (FreemarkerCoreFMParserTokenManager_jjCanMove_0WithInt_withInt_withInt_withLong_withLong_(hiByte, i1, i2, l1, l2)) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 333, 334);
          }
          
#line 6871
          break;
          case 24:
          if (FreemarkerCoreFMParserTokenManager_jjCanMove_0WithInt_withInt_withInt_withLong_withLong_(hiByte, i1, i2, l1, l2)) {
            FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(self, 335, 336);
          }
          
#line 6875
          break;
          default:
          
#line 6876
          if (i1 == 0 || l1 == 0 || i2 == 0 || l2 == 0) break;
          else
#line 6876
          break;
        }
      }
      while (
#line 6878
      i != startsAt);
    }
    if (kind != (jint) 0x7fffffff) {
      
#line 6882
      self->jjmatchedKind_ = kind;
      self->jjmatchedPos_ = curPos;
      kind = (jint) 0x7fffffff;
    }
    ++curPos;
    jint unseq$1 = self->jjnewStateCnt_;
    
#line 6887
    if ((i = unseq$1) == (startsAt = 86 - (self->jjnewStateCnt_ = startsAt)))
#line 6888
    return curPos;
    @try {
      
#line 6889
      self->curChar_ = [((FreemarkerCoreSimpleCharStream *) nil_chk(self->input_stream_)) readChar];
    }
    @catch (
#line 6890
    JavaIoIOException *e) {
      
#line 6890
      return curPos;
    }
  }
}


#line 6920
jboolean FreemarkerCoreFMParserTokenManager_jjCanMove_0WithInt_withInt_withInt_withLong_withLong_(jint hiByte, jint i1, jint i2, jlong l1, jlong l2) {
  FreemarkerCoreFMParserTokenManager_initialize();
  switch (hiByte) {
    
#line 6924
    case 0:
    return ((IOSLongArray_Get(nil_chk(FreemarkerCoreFMParserTokenManager_jjbitVec2_), i2) & l2) != 0LL);
    default:
    if ((IOSLongArray_Get(nil_chk(FreemarkerCoreFMParserTokenManager_jjbitVec0_), i1) & l1) != 0LL)
#line 6928
    return YES;
    return NO;
  }
}


#line 6932
jboolean FreemarkerCoreFMParserTokenManager_jjCanMove_1WithInt_withInt_withInt_withLong_withLong_(jint hiByte, jint i1, jint i2, jlong l1, jlong l2) {
  FreemarkerCoreFMParserTokenManager_initialize();
  switch (hiByte) {
    
#line 6936
    case 0:
    return ((IOSLongArray_Get(nil_chk(FreemarkerCoreFMParserTokenManager_jjbitVec4_), i2) & l2) != 0LL);
    case 32:
    return ((IOSLongArray_Get(nil_chk(FreemarkerCoreFMParserTokenManager_jjbitVec5_), i2) & l2) != 0LL);
    case 33:
    return ((IOSLongArray_Get(nil_chk(FreemarkerCoreFMParserTokenManager_jjbitVec6_), i2) & l2) != 0LL);
    case 44:
    return ((IOSLongArray_Get(nil_chk(FreemarkerCoreFMParserTokenManager_jjbitVec7_), i2) & l2) != 0LL);
    case 45:
    return ((IOSLongArray_Get(nil_chk(FreemarkerCoreFMParserTokenManager_jjbitVec8_), i2) & l2) != 0LL);
    case 46:
    return ((IOSLongArray_Get(nil_chk(FreemarkerCoreFMParserTokenManager_jjbitVec9_), i2) & l2) != 0LL);
    case 48:
    return ((IOSLongArray_Get(nil_chk(FreemarkerCoreFMParserTokenManager_jjbitVec10_), i2) & l2) != 0LL);
    case 49:
    return ((IOSLongArray_Get(nil_chk(FreemarkerCoreFMParserTokenManager_jjbitVec11_), i2) & l2) != 0LL);
    case 51:
    return ((IOSLongArray_Get(nil_chk(FreemarkerCoreFMParserTokenManager_jjbitVec12_), i2) & l2) != 0LL);
    case 77:
    return ((IOSLongArray_Get(nil_chk(FreemarkerCoreFMParserTokenManager_jjbitVec13_), i2) & l2) != 0LL);
    case 164:
    return ((IOSLongArray_Get(nil_chk(FreemarkerCoreFMParserTokenManager_jjbitVec14_), i2) & l2) != 0LL);
    case 166:
    return ((IOSLongArray_Get(nil_chk(FreemarkerCoreFMParserTokenManager_jjbitVec15_), i2) & l2) != 0LL);
    case 167:
    return ((IOSLongArray_Get(nil_chk(FreemarkerCoreFMParserTokenManager_jjbitVec16_), i2) & l2) != 0LL);
    case 168:
    return ((IOSLongArray_Get(nil_chk(FreemarkerCoreFMParserTokenManager_jjbitVec17_), i2) & l2) != 0LL);
    case 169:
    return ((IOSLongArray_Get(nil_chk(FreemarkerCoreFMParserTokenManager_jjbitVec18_), i2) & l2) != 0LL);
    case 170:
    return ((IOSLongArray_Get(nil_chk(FreemarkerCoreFMParserTokenManager_jjbitVec19_), i2) & l2) != 0LL);
    case 171:
    return ((IOSLongArray_Get(nil_chk(FreemarkerCoreFMParserTokenManager_jjbitVec20_), i2) & l2) != 0LL);
    case 215:
    return ((IOSLongArray_Get(nil_chk(FreemarkerCoreFMParserTokenManager_jjbitVec21_), i2) & l2) != 0LL);
    case 251:
    return ((IOSLongArray_Get(nil_chk(FreemarkerCoreFMParserTokenManager_jjbitVec22_), i2) & l2) != 0LL);
    case 253:
    return ((IOSLongArray_Get(nil_chk(FreemarkerCoreFMParserTokenManager_jjbitVec23_), i2) & l2) != 0LL);
    case 254:
    return ((IOSLongArray_Get(nil_chk(FreemarkerCoreFMParserTokenManager_jjbitVec24_), i2) & l2) != 0LL);
    case 255:
    return ((IOSLongArray_Get(nil_chk(FreemarkerCoreFMParserTokenManager_jjbitVec25_), i2) & l2) != 0LL);
    default:
    if ((IOSLongArray_Get(nil_chk(FreemarkerCoreFMParserTokenManager_jjbitVec3_), i1) & l1) != 0LL)
#line 6982
    return YES;
    return NO;
  }
}


#line 7599
void FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(FreemarkerCoreFMParserTokenManager *self, jint state) {
  
#line 7601
  if (IOSIntArray_Get(nil_chk(self->jjrounds_), state) != self->jjround_) {
    
#line 7603
    *IOSIntArray_GetRef(nil_chk(self->jjstateSet_), self->jjnewStateCnt_++) = state;
    *IOSIntArray_GetRef(self->jjrounds_, state) = self->jjround_;
  }
}


#line 7607
void FreemarkerCoreFMParserTokenManager_jjAddStatesWithInt_withInt_(FreemarkerCoreFMParserTokenManager *self, jint start, jint end) {
  
#line 7609
  do {
    *IOSIntArray_GetRef(nil_chk(self->jjstateSet_), self->jjnewStateCnt_++) = IOSIntArray_Get(nil_chk(FreemarkerCoreFMParserTokenManager_jjnextStates_), start);
  }
  while (
#line 7611
  start++ != end);
}


#line 7613
void FreemarkerCoreFMParserTokenManager_jjCheckNAddTwoStatesWithInt_withInt_(FreemarkerCoreFMParserTokenManager *self, jint state1, jint state2) {
  
#line 7615
  FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, state1);
  FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, state2);
}


#line 7619
void FreemarkerCoreFMParserTokenManager_jjCheckNAddStatesWithInt_withInt_(FreemarkerCoreFMParserTokenManager *self, jint start, jint end) {
  
#line 7621
  do {
    FreemarkerCoreFMParserTokenManager_jjCheckNAddWithInt_(self, IOSIntArray_Get(nil_chk(FreemarkerCoreFMParserTokenManager_jjnextStates_), start));
  }
  while (
#line 7623
  start++ != end);
}


#line 7627
void FreemarkerCoreFMParserTokenManager_initWithFreemarkerCoreSimpleCharStream_(FreemarkerCoreFMParserTokenManager *self, FreemarkerCoreSimpleCharStream *stream) {
  (void) NSObject_init(self);
  self->debugStream_ = JavaLangSystem_get_out_();
  self->curLexState_ =
#line 7026
  0;
  self->defaultLexState_ = 0;
  self->jjrounds_ = [IOSIntArray newArrayWithLength:
#line 7703
  609];
  self->jjstateSet_ = [IOSIntArray newArrayWithLength:2 * 609];
  self->jjimage_ = new_JavaLangStringBuilder_init();
  self->image_ = self->jjimage_;
  
#line 7632
  self->input_stream_ = stream;
}


#line 7627
FreemarkerCoreFMParserTokenManager *new_FreemarkerCoreFMParserTokenManager_initWithFreemarkerCoreSimpleCharStream_(FreemarkerCoreSimpleCharStream *stream) {
  FreemarkerCoreFMParserTokenManager *self = [FreemarkerCoreFMParserTokenManager alloc];
  FreemarkerCoreFMParserTokenManager_initWithFreemarkerCoreSimpleCharStream_(self, stream);
  return self;
}


#line 7636
void FreemarkerCoreFMParserTokenManager_initWithFreemarkerCoreSimpleCharStream_withInt_(FreemarkerCoreFMParserTokenManager *self, FreemarkerCoreSimpleCharStream *stream, jint lexState) {
  (void) NSObject_init(self);
  self->debugStream_ = JavaLangSystem_get_out_();
  self->curLexState_ =
#line 7026
  0;
  self->defaultLexState_ = 0;
  self->jjrounds_ = [IOSIntArray newArrayWithLength:
#line 7703
  609];
  self->jjstateSet_ = [IOSIntArray newArrayWithLength:2 * 609];
  self->jjimage_ = new_JavaLangStringBuilder_init();
  self->image_ = self->jjimage_;
  
#line 7637
  [self ReInitWithFreemarkerCoreSimpleCharStream:stream];
  [self SwitchToWithInt:lexState];
}


#line 7636
FreemarkerCoreFMParserTokenManager *new_FreemarkerCoreFMParserTokenManager_initWithFreemarkerCoreSimpleCharStream_withInt_(FreemarkerCoreSimpleCharStream *stream, jint lexState) {
  FreemarkerCoreFMParserTokenManager *self = [FreemarkerCoreFMParserTokenManager alloc];
  FreemarkerCoreFMParserTokenManager_initWithFreemarkerCoreSimpleCharStream_withInt_(self, stream, lexState);
  return self;
}


#line 7650
void FreemarkerCoreFMParserTokenManager_ReInitRounds(FreemarkerCoreFMParserTokenManager *self) {
  
#line 7652
  jint i;
  self->jjround_ = (jint) 0x80000001;
  for (i = 609; i-- > 0; )
#line 7655
  *IOSIntArray_GetRef(nil_chk(self->jjrounds_), i) = -0x7fffffff - 1;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreFMParserTokenManager)
