//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/StopInstruction.java
//


#include "Environment.h"
#include "Expression.h"
#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "ParameterRole.h"
#include "StopException.h"
#include "StopInstruction.h"
#include "TemplateElement.h"
#include "TemplateException.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/StringBuffer.h"

#line 0 "/Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/StopInstruction.java"

@interface FreemarkerCoreStopInstruction () {
 @public
  FreemarkerCoreExpression *exp_;
}

@end

J2OBJC_FIELD_SETTER(FreemarkerCoreStopInstruction, exp_, FreemarkerCoreExpression *)


#line 24
@implementation FreemarkerCoreStopInstruction


#line 28
- (instancetype)initWithFreemarkerCoreExpression:(FreemarkerCoreExpression *)exp {
  FreemarkerCoreStopInstruction_initWithFreemarkerCoreExpression_(self, exp);
  return self;
}


#line 32
- (void)acceptWithFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env {
  if (exp_ == nil) {
    @throw new_FreemarkerCoreStopException_initWithFreemarkerCoreEnvironment_(env);
  }
  @throw new_FreemarkerCoreStopException_initWithFreemarkerCoreEnvironment_withNSString_(env, [((FreemarkerCoreExpression *) nil_chk(exp_)) evalAndCoerceToStringWithFreemarkerCoreEnvironment:env]);
}

- (NSString *)dumpWithBoolean:(jboolean)canonical {
  JavaLangStringBuffer *sb = new_JavaLangStringBuffer_init();
  if (canonical) (void) [sb appendWithChar:'<'];
  (void) [sb appendWithNSString:[self getNodeTypeSymbol]];
  if (exp_ != nil) {
    (void) [sb appendWithChar:' '];
    (void) [sb appendWithNSString:[exp_ getCanonicalForm]];
  }
  if (canonical) (void) [sb appendWithNSString:@"/>"];
  return [sb description];
}

- (NSString *)getNodeTypeSymbol {
  return @"#stop";
}

- (jint)getParameterCount {
  return 1;
}

- (id)getParameterValueWithInt:(jint)idx {
  if (idx != 0) @throw new_JavaLangIndexOutOfBoundsException_init();
  return exp_;
}

- (FreemarkerCoreParameterRole *)getParameterRoleWithInt:(jint)idx {
  if (idx != 0) @throw new_JavaLangIndexOutOfBoundsException_init();
  return FreemarkerCoreParameterRole_get_MESSAGE_();
}

- (jboolean)isNestedBlockRepeater {
  return NO;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithFreemarkerCoreExpression:", "StopInstruction", NULL, 0x0, NULL, NULL },
    { "acceptWithFreemarkerCoreEnvironment:", "accept", "V", 0x0, "Lfreemarker.template.TemplateException;", NULL },
    { "dumpWithBoolean:", "dump", "Ljava.lang.String;", 0x4, NULL, NULL },
    { "getNodeTypeSymbol", NULL, "Ljava.lang.String;", 0x0, NULL, NULL },
    { "getParameterCount", NULL, "I", 0x0, NULL, NULL },
    { "getParameterValueWithInt:", "getParameterValue", "Ljava.lang.Object;", 0x0, NULL, NULL },
    { "getParameterRoleWithInt:", "getParameterRole", "Lfreemarker.core.ParameterRole;", 0x0, NULL, NULL },
    { "isNestedBlockRepeater", NULL, "Z", 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "exp_", NULL, 0x2, "Lfreemarker.core.Expression;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerCoreStopInstruction = { 2, "StopInstruction", "freemarker.core", NULL, 0x10, 8, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerCoreStopInstruction;
}

@end


#line 28
void FreemarkerCoreStopInstruction_initWithFreemarkerCoreExpression_(FreemarkerCoreStopInstruction *self, FreemarkerCoreExpression *exp) {
  (void) FreemarkerCoreTemplateElement_init(self);
  
#line 29
  self->exp_ = exp;
}


#line 28
FreemarkerCoreStopInstruction *new_FreemarkerCoreStopInstruction_initWithFreemarkerCoreExpression_(FreemarkerCoreExpression *exp) {
  FreemarkerCoreStopInstruction *self = [FreemarkerCoreStopInstruction alloc];
  FreemarkerCoreStopInstruction_initWithFreemarkerCoreExpression_(self, exp);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreStopInstruction)
