//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/cache/MruCacheStorage.java
//


#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "MruCacheStorage.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/ref/Reference.h"
#include "java/lang/ref/ReferenceQueue.h"
#include "java/lang/ref/SoftReference.h"
#include "java/util/HashMap.h"
#include "java/util/Map.h"

@class FreemarkerCacheMruCacheStorage_MruEntry;

#line 0 "/Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/cache/MruCacheStorage.java"

@interface FreemarkerCacheMruCacheStorage () {
 @public
  FreemarkerCacheMruCacheStorage_MruEntry *strongHead_;
  FreemarkerCacheMruCacheStorage_MruEntry *softHead_;
  id<JavaUtilMap> map_;
  JavaLangRefReferenceQueue *refQueue_;
  jint strongSizeLimit_;
  jint softSizeLimit_;
  jint strongSize_;
  jint softSize_;
}

- (void)removeInternalWithId:(id)key;

- (void)relinkEntryAfterStrongHeadWithFreemarkerCacheMruCacheStorage_MruEntry:(FreemarkerCacheMruCacheStorage_MruEntry *)entry_
                                                                       withId:(id)newValue;

- (void)linkAfterStrongHeadWithFreemarkerCacheMruCacheStorage_MruEntry:(FreemarkerCacheMruCacheStorage_MruEntry *)entry_;

- (jboolean)unlinkEntryAndInspectIfSoftWithFreemarkerCacheMruCacheStorage_MruEntry:(FreemarkerCacheMruCacheStorage_MruEntry *)entry_;

- (void)removeClearedReferences;

@end

J2OBJC_FIELD_SETTER(FreemarkerCacheMruCacheStorage, strongHead_, FreemarkerCacheMruCacheStorage_MruEntry *)
J2OBJC_FIELD_SETTER(FreemarkerCacheMruCacheStorage, softHead_, FreemarkerCacheMruCacheStorage_MruEntry *)
J2OBJC_FIELD_SETTER(FreemarkerCacheMruCacheStorage, map_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(FreemarkerCacheMruCacheStorage, refQueue_, JavaLangRefReferenceQueue *)

__attribute__((unused)) static void FreemarkerCacheMruCacheStorage_removeInternalWithId_(FreemarkerCacheMruCacheStorage *self, id key);

__attribute__((unused)) static void FreemarkerCacheMruCacheStorage_relinkEntryAfterStrongHeadWithFreemarkerCacheMruCacheStorage_MruEntry_withId_(FreemarkerCacheMruCacheStorage *self, FreemarkerCacheMruCacheStorage_MruEntry *entry_, id newValue);

__attribute__((unused)) static void FreemarkerCacheMruCacheStorage_linkAfterStrongHeadWithFreemarkerCacheMruCacheStorage_MruEntry_(FreemarkerCacheMruCacheStorage *self, FreemarkerCacheMruCacheStorage_MruEntry *entry_);

__attribute__((unused)) static jboolean FreemarkerCacheMruCacheStorage_unlinkEntryAndInspectIfSoftWithFreemarkerCacheMruCacheStorage_MruEntry_(FreemarkerCacheMruCacheStorage *self, FreemarkerCacheMruCacheStorage_MruEntry *entry_);

__attribute__((unused)) static void FreemarkerCacheMruCacheStorage_removeClearedReferences(FreemarkerCacheMruCacheStorage *self);

@interface FreemarkerCacheMruCacheStorage_MruEntry : NSObject {
 @public
  FreemarkerCacheMruCacheStorage_MruEntry *prev_;
  FreemarkerCacheMruCacheStorage_MruEntry *next_;
  id key_;
  id value_;
}

/**
 @brief Used solely to construct the head element
 */
- (instancetype)init;

- (instancetype)initWithId:(id)key
                    withId:(id)value;

- (id)getKey;

- (id)getValue;

- (void)setValueWithId:(id)value;

- (FreemarkerCacheMruCacheStorage_MruEntry *)getPrevious;

- (void)linkAfterWithFreemarkerCacheMruCacheStorage_MruEntry:(FreemarkerCacheMruCacheStorage_MruEntry *)entry_;

- (void)unlink;

- (void)makeHead;

@end

J2OBJC_EMPTY_STATIC_INIT(FreemarkerCacheMruCacheStorage_MruEntry)

J2OBJC_FIELD_SETTER(FreemarkerCacheMruCacheStorage_MruEntry, prev_, FreemarkerCacheMruCacheStorage_MruEntry *)
J2OBJC_FIELD_SETTER(FreemarkerCacheMruCacheStorage_MruEntry, next_, FreemarkerCacheMruCacheStorage_MruEntry *)
J2OBJC_FIELD_SETTER(FreemarkerCacheMruCacheStorage_MruEntry, key_, id)
J2OBJC_FIELD_SETTER(FreemarkerCacheMruCacheStorage_MruEntry, value_, id)

__attribute__((unused)) static void FreemarkerCacheMruCacheStorage_MruEntry_init(FreemarkerCacheMruCacheStorage_MruEntry *self);

__attribute__((unused)) static FreemarkerCacheMruCacheStorage_MruEntry *new_FreemarkerCacheMruCacheStorage_MruEntry_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static void FreemarkerCacheMruCacheStorage_MruEntry_initWithId_withId_(FreemarkerCacheMruCacheStorage_MruEntry *self, id key, id value);

__attribute__((unused)) static FreemarkerCacheMruCacheStorage_MruEntry *new_FreemarkerCacheMruCacheStorage_MruEntry_initWithId_withId_(id key, id value) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerCacheMruCacheStorage_MruEntry)

@interface FreemarkerCacheMruCacheStorage_MruReference : JavaLangRefSoftReference {
 @public
  id key_;
}

- (instancetype)initWithFreemarkerCacheMruCacheStorage_MruEntry:(FreemarkerCacheMruCacheStorage_MruEntry *)entry_
                                  withJavaLangRefReferenceQueue:(JavaLangRefReferenceQueue *)queue;

- (id)getKey;

@end

J2OBJC_EMPTY_STATIC_INIT(FreemarkerCacheMruCacheStorage_MruReference)

J2OBJC_FIELD_SETTER(FreemarkerCacheMruCacheStorage_MruReference, key_, id)

__attribute__((unused)) static void FreemarkerCacheMruCacheStorage_MruReference_initWithFreemarkerCacheMruCacheStorage_MruEntry_withJavaLangRefReferenceQueue_(FreemarkerCacheMruCacheStorage_MruReference *self, FreemarkerCacheMruCacheStorage_MruEntry *entry_, JavaLangRefReferenceQueue *queue);

__attribute__((unused)) static FreemarkerCacheMruCacheStorage_MruReference *new_FreemarkerCacheMruCacheStorage_MruReference_initWithFreemarkerCacheMruCacheStorage_MruEntry_withJavaLangRefReferenceQueue_(FreemarkerCacheMruCacheStorage_MruEntry *entry_, JavaLangRefReferenceQueue *queue) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerCacheMruCacheStorage_MruReference)


#line 54
@implementation FreemarkerCacheMruCacheStorage


#line 76
- (instancetype)initWithInt:(jint)strongSizeLimit
                    withInt:(jint)softSizeLimit {
  FreemarkerCacheMruCacheStorage_initWithInt_withInt_(self, strongSizeLimit, softSizeLimit);
  return self;
}


#line 83
- (id)getWithId:(id)key {
  FreemarkerCacheMruCacheStorage_removeClearedReferences(self);
  FreemarkerCacheMruCacheStorage_MruEntry *entry_ = (FreemarkerCacheMruCacheStorage_MruEntry *) check_class_cast([((id<JavaUtilMap>) nil_chk(map_)) getWithId:key], [FreemarkerCacheMruCacheStorage_MruEntry class]);
  if (entry_ == nil) {
    return nil;
  }
  FreemarkerCacheMruCacheStorage_relinkEntryAfterStrongHeadWithFreemarkerCacheMruCacheStorage_MruEntry_withId_(self, entry_, nil);
  id value = [((FreemarkerCacheMruCacheStorage_MruEntry *) nil_chk(entry_)) getValue];
  if ([value isKindOfClass:[FreemarkerCacheMruCacheStorage_MruReference class]]) {
    
#line 93
    return [((FreemarkerCacheMruCacheStorage_MruReference *) nil_chk(((FreemarkerCacheMruCacheStorage_MruReference *) check_class_cast(value, [FreemarkerCacheMruCacheStorage_MruReference class])))) get];
  }
  return value;
}


#line 98
- (void)putWithId:(id)key
           withId:(id)value {
  FreemarkerCacheMruCacheStorage_removeClearedReferences(self);
  FreemarkerCacheMruCacheStorage_MruEntry *entry_ = (FreemarkerCacheMruCacheStorage_MruEntry *) check_class_cast([((id<JavaUtilMap>) nil_chk(map_)) getWithId:key], [FreemarkerCacheMruCacheStorage_MruEntry class]);
  if (entry_ == nil) {
    entry_ = new_FreemarkerCacheMruCacheStorage_MruEntry_initWithId_withId_(key, value);
    (void) [map_ putWithId:key withId:entry_];
    FreemarkerCacheMruCacheStorage_linkAfterStrongHeadWithFreemarkerCacheMruCacheStorage_MruEntry_(self, entry_);
  }
  else {
    FreemarkerCacheMruCacheStorage_relinkEntryAfterStrongHeadWithFreemarkerCacheMruCacheStorage_MruEntry_withId_(self, entry_, value);
  }
}

- (void)removeWithId:(id)key {
  FreemarkerCacheMruCacheStorage_removeClearedReferences(self);
  FreemarkerCacheMruCacheStorage_removeInternalWithId_(self, key);
}

- (void)removeInternalWithId:(id)key {
  FreemarkerCacheMruCacheStorage_removeInternalWithId_(self, key);
}


#line 124
- (void)clear {
  [((FreemarkerCacheMruCacheStorage_MruEntry *) nil_chk(strongHead_)) makeHead];
  [((FreemarkerCacheMruCacheStorage_MruEntry *) nil_chk(softHead_)) linkAfterWithFreemarkerCacheMruCacheStorage_MruEntry:strongHead_];
  [((id<JavaUtilMap>) nil_chk(map_)) clear];
  strongSize_ = softSize_ = 0;
  
#line 130
  while ([((JavaLangRefReferenceQueue *) nil_chk(refQueue_)) poll] != nil) ;
}


#line 133
- (void)relinkEntryAfterStrongHeadWithFreemarkerCacheMruCacheStorage_MruEntry:(FreemarkerCacheMruCacheStorage_MruEntry *)entry_
                                                                       withId:(id)newValue {
  FreemarkerCacheMruCacheStorage_relinkEntryAfterStrongHeadWithFreemarkerCacheMruCacheStorage_MruEntry_withId_(self, entry_, newValue);
}


#line 152
- (void)linkAfterStrongHeadWithFreemarkerCacheMruCacheStorage_MruEntry:(FreemarkerCacheMruCacheStorage_MruEntry *)entry_ {
  FreemarkerCacheMruCacheStorage_linkAfterStrongHeadWithFreemarkerCacheMruCacheStorage_MruEntry_(self, entry_);
}


#line 185
- (jboolean)unlinkEntryAndInspectIfSoftWithFreemarkerCacheMruCacheStorage_MruEntry:(FreemarkerCacheMruCacheStorage_MruEntry *)entry_ {
  return FreemarkerCacheMruCacheStorage_unlinkEntryAndInspectIfSoftWithFreemarkerCacheMruCacheStorage_MruEntry_(self, entry_);
}


#line 197
- (void)removeClearedReferences {
  FreemarkerCacheMruCacheStorage_removeClearedReferences(self);
}


#line 212
- (jint)getStrongSizeLimit {
  return strongSizeLimit_;
}


#line 221
- (jint)getSoftSizeLimit {
  return softSizeLimit_;
}


#line 231
- (jint)getStrongSize {
  return strongSize_;
}


#line 241
- (jint)getSoftSize {
  FreemarkerCacheMruCacheStorage_removeClearedReferences(self);
  return softSize_;
}


#line 253
- (jint)getSize {
  return [self getSoftSize] + [self getStrongSize];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithInt:withInt:", "MruCacheStorage", NULL, 0x1, NULL, NULL },
    { "getWithId:", "get", "Ljava.lang.Object;", 0x1, NULL, NULL },
    { "putWithId:withId:", "put", "V", 0x1, NULL, NULL },
    { "removeWithId:", "remove", "V", 0x1, NULL, NULL },
    { "removeInternalWithId:", "removeInternal", "V", 0x2, NULL, NULL },
    { "clear", NULL, "V", 0x1, NULL, NULL },
    { "relinkEntryAfterStrongHeadWithFreemarkerCacheMruCacheStorage_MruEntry:withId:", "relinkEntryAfterStrongHead", "V", 0x2, NULL, NULL },
    { "linkAfterStrongHeadWithFreemarkerCacheMruCacheStorage_MruEntry:", "linkAfterStrongHead", "V", 0x2, NULL, NULL },
    { "unlinkEntryAndInspectIfSoftWithFreemarkerCacheMruCacheStorage_MruEntry:", "unlinkEntryAndInspectIfSoft", "Z", 0x2, NULL, NULL },
    { "removeClearedReferences", NULL, "V", 0x2, NULL, NULL },
    { "getStrongSizeLimit", NULL, "I", 0x1, NULL, NULL },
    { "getSoftSizeLimit", NULL, "I", 0x1, NULL, NULL },
    { "getStrongSize", NULL, "I", 0x1, NULL, NULL },
    { "getSoftSize", NULL, "I", 0x1, NULL, NULL },
    { "getSize", NULL, "I", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "strongHead_", NULL, 0x12, "Lfreemarker.cache.MruCacheStorage$MruEntry;", NULL, NULL,  },
    { "softHead_", NULL, 0x12, "Lfreemarker.cache.MruCacheStorage$MruEntry;", NULL, NULL,  },
    { "map_", NULL, 0x12, "Ljava.util.Map;", NULL, NULL,  },
    { "refQueue_", NULL, 0x12, "Ljava.lang.ref.ReferenceQueue;", NULL, NULL,  },
    { "strongSizeLimit_", NULL, 0x12, "I", NULL, NULL,  },
    { "softSizeLimit_", NULL, 0x12, "I", NULL, NULL,  },
    { "strongSize_", NULL, 0x2, "I", NULL, NULL,  },
    { "softSize_", NULL, 0x2, "I", NULL, NULL,  },
  };
  static const char *inner_classes[] = {"Lfreemarker.cache.MruCacheStorage$MruEntry;", "Lfreemarker.cache.MruCacheStorage$MruReference;"};
  static const J2ObjcClassInfo _FreemarkerCacheMruCacheStorage = { 2, "MruCacheStorage", "freemarker.cache", NULL, 0x1, 15, methods, 8, fields, 0, NULL, 2, inner_classes, NULL, NULL };
  return &_FreemarkerCacheMruCacheStorage;
}

@end


#line 76
void FreemarkerCacheMruCacheStorage_initWithInt_withInt_(FreemarkerCacheMruCacheStorage *self, jint strongSizeLimit, jint softSizeLimit) {
  (void) NSObject_init(self);
  self->strongHead_ = new_FreemarkerCacheMruCacheStorage_MruEntry_init();
  self->softHead_ = new_FreemarkerCacheMruCacheStorage_MruEntry_init();
  {
    
#line 59
    [self->softHead_ linkAfterWithFreemarkerCacheMruCacheStorage_MruEntry:self->strongHead_];
  }
  self->map_ = new_JavaUtilHashMap_init();
  self->refQueue_ = new_JavaLangRefReferenceQueue_init();
  self->strongSize_ =
#line 65
  0;
  self->softSize_ = 0;
  
#line 77
  if (strongSizeLimit < 0) @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"strongSizeLimit < 0");
  if (softSizeLimit < 0) @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"softSizeLimit < 0");
  self->strongSizeLimit_ = strongSizeLimit;
  self->softSizeLimit_ = softSizeLimit;
}


#line 76
FreemarkerCacheMruCacheStorage *new_FreemarkerCacheMruCacheStorage_initWithInt_withInt_(jint strongSizeLimit, jint softSizeLimit) {
  FreemarkerCacheMruCacheStorage *self = [FreemarkerCacheMruCacheStorage alloc];
  FreemarkerCacheMruCacheStorage_initWithInt_withInt_(self, strongSizeLimit, softSizeLimit);
  return self;
}


#line 117
void FreemarkerCacheMruCacheStorage_removeInternalWithId_(FreemarkerCacheMruCacheStorage *self, id key) {
  FreemarkerCacheMruCacheStorage_MruEntry *entry_ = (FreemarkerCacheMruCacheStorage_MruEntry *) check_class_cast([((id<JavaUtilMap>) nil_chk(self->map_)) removeWithId:key], [FreemarkerCacheMruCacheStorage_MruEntry class]);
  if (entry_ != nil) {
    FreemarkerCacheMruCacheStorage_unlinkEntryAndInspectIfSoftWithFreemarkerCacheMruCacheStorage_MruEntry_(self, entry_);
  }
}


#line 133
void FreemarkerCacheMruCacheStorage_relinkEntryAfterStrongHeadWithFreemarkerCacheMruCacheStorage_MruEntry_withId_(FreemarkerCacheMruCacheStorage *self, FreemarkerCacheMruCacheStorage_MruEntry *entry_, id newValue) {
  if (FreemarkerCacheMruCacheStorage_unlinkEntryAndInspectIfSoftWithFreemarkerCacheMruCacheStorage_MruEntry_(self, entry_) && newValue == nil) {
    
#line 136
    FreemarkerCacheMruCacheStorage_MruReference *mref = (FreemarkerCacheMruCacheStorage_MruReference *) check_class_cast([((FreemarkerCacheMruCacheStorage_MruEntry *) nil_chk(entry_)) getValue], [FreemarkerCacheMruCacheStorage_MruReference class]);
    id strongValue = [((FreemarkerCacheMruCacheStorage_MruReference *) nil_chk(mref)) get];
    if (strongValue != nil) {
      [entry_ setValueWithId:strongValue];
      FreemarkerCacheMruCacheStorage_linkAfterStrongHeadWithFreemarkerCacheMruCacheStorage_MruEntry_(self, entry_);
    }
    else {
      
#line 142
      (void) [((id<JavaUtilMap>) nil_chk(self->map_)) removeWithId:[mref getKey]];
    }
  }
  else {
    
#line 145
    if (newValue != nil) {
      [((FreemarkerCacheMruCacheStorage_MruEntry *) nil_chk(entry_)) setValueWithId:newValue];
    }
    FreemarkerCacheMruCacheStorage_linkAfterStrongHeadWithFreemarkerCacheMruCacheStorage_MruEntry_(self, entry_);
  }
}


#line 152
void FreemarkerCacheMruCacheStorage_linkAfterStrongHeadWithFreemarkerCacheMruCacheStorage_MruEntry_(FreemarkerCacheMruCacheStorage *self, FreemarkerCacheMruCacheStorage_MruEntry *entry_) {
  [((FreemarkerCacheMruCacheStorage_MruEntry *) nil_chk(entry_)) linkAfterWithFreemarkerCacheMruCacheStorage_MruEntry:self->strongHead_];
  if (self->strongSize_ == self->strongSizeLimit_) {
    
#line 156
    FreemarkerCacheMruCacheStorage_MruEntry *lruStrong = [((FreemarkerCacheMruCacheStorage_MruEntry *) nil_chk(self->softHead_)) getPrevious];
    
#line 160
    if (lruStrong != self->strongHead_) {
      [((FreemarkerCacheMruCacheStorage_MruEntry *) nil_chk(lruStrong)) unlink];
      if (self->softSizeLimit_ > 0) {
        [lruStrong linkAfterWithFreemarkerCacheMruCacheStorage_MruEntry:self->softHead_];
        [lruStrong setValueWithId:new_FreemarkerCacheMruCacheStorage_MruReference_initWithFreemarkerCacheMruCacheStorage_MruEntry_withJavaLangRefReferenceQueue_(lruStrong, self->refQueue_)];
        if (self->softSize_ == self->softSizeLimit_) {
          
#line 167
          FreemarkerCacheMruCacheStorage_MruEntry *lruSoft = [((FreemarkerCacheMruCacheStorage_MruEntry *) nil_chk(self->strongHead_)) getPrevious];
          [((FreemarkerCacheMruCacheStorage_MruEntry *) nil_chk(lruSoft)) unlink];
          (void) [((id<JavaUtilMap>) nil_chk(self->map_)) removeWithId:[lruSoft getKey]];
        }
        else {
          ++self->softSize_;
        }
      }
      else {
        (void) [((id<JavaUtilMap>) nil_chk(self->map_)) removeWithId:[lruStrong getKey]];
      }
    }
  }
  else {
    ++self->strongSize_;
  }
}


#line 185
jboolean FreemarkerCacheMruCacheStorage_unlinkEntryAndInspectIfSoftWithFreemarkerCacheMruCacheStorage_MruEntry_(FreemarkerCacheMruCacheStorage *self, FreemarkerCacheMruCacheStorage_MruEntry *entry_) {
  [((FreemarkerCacheMruCacheStorage_MruEntry *) nil_chk(entry_)) unlink];
  if ([[entry_ getValue] isKindOfClass:[FreemarkerCacheMruCacheStorage_MruReference class]]) {
    --self->softSize_;
    return YES;
  }
  else {
    --self->strongSize_;
    return NO;
  }
}

void FreemarkerCacheMruCacheStorage_removeClearedReferences(FreemarkerCacheMruCacheStorage *self) {
  for (; ; ) {
    FreemarkerCacheMruCacheStorage_MruReference *ref = (FreemarkerCacheMruCacheStorage_MruReference *) check_class_cast([((JavaLangRefReferenceQueue *) nil_chk(self->refQueue_)) poll], [FreemarkerCacheMruCacheStorage_MruReference class]);
    if (ref == nil) {
      break;
    }
    FreemarkerCacheMruCacheStorage_removeInternalWithId_(self, [((FreemarkerCacheMruCacheStorage_MruReference *) nil_chk(ref)) getKey]);
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCacheMruCacheStorage)


#line 257
@implementation FreemarkerCacheMruCacheStorage_MruEntry


#line 267
- (instancetype)init {
  FreemarkerCacheMruCacheStorage_MruEntry_init(self);
  return self;
}


#line 273
- (instancetype)initWithId:(id)key
                    withId:(id)value {
  FreemarkerCacheMruCacheStorage_MruEntry_initWithId_withId_(self, key, value);
  return self;
}


#line 278
- (id)getKey {
  return key_;
}

- (id)getValue {
  return value_;
}

- (void)setValueWithId:(id)value {
  self->value_ = value;
}

- (FreemarkerCacheMruCacheStorage_MruEntry *)getPrevious {
  return prev_;
}

- (void)linkAfterWithFreemarkerCacheMruCacheStorage_MruEntry:(FreemarkerCacheMruCacheStorage_MruEntry *)entry_ {
  next_ = ((FreemarkerCacheMruCacheStorage_MruEntry *) nil_chk(entry_))->next_;
  entry_->next_ = self;
  prev_ = entry_;
  next_->prev_ = self;
}

- (void)unlink {
  ((FreemarkerCacheMruCacheStorage_MruEntry *) nil_chk(next_))->prev_ = prev_;
  ((FreemarkerCacheMruCacheStorage_MruEntry *) nil_chk(prev_))->next_ = next_;
  prev_ = nil;
  next_ = nil;
}

- (void)makeHead {
  prev_ = next_ = self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "MruEntry", NULL, 0x0, NULL, NULL },
    { "initWithId:withId:", "MruEntry", NULL, 0x0, NULL, NULL },
    { "getKey", NULL, "Ljava.lang.Object;", 0x0, NULL, NULL },
    { "getValue", NULL, "Ljava.lang.Object;", 0x0, NULL, NULL },
    { "setValueWithId:", "setValue", "V", 0x0, NULL, NULL },
    { "getPrevious", NULL, "Lfreemarker.cache.MruCacheStorage$MruEntry;", 0x0, NULL, NULL },
    { "linkAfterWithFreemarkerCacheMruCacheStorage_MruEntry:", "linkAfter", "V", 0x0, NULL, NULL },
    { "unlink", NULL, "V", 0x0, NULL, NULL },
    { "makeHead", NULL, "V", 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "prev_", NULL, 0x2, "Lfreemarker.cache.MruCacheStorage$MruEntry;", NULL, NULL,  },
    { "next_", NULL, 0x2, "Lfreemarker.cache.MruCacheStorage$MruEntry;", NULL, NULL,  },
    { "key_", NULL, 0x12, "Ljava.lang.Object;", NULL, NULL,  },
    { "value_", NULL, 0x2, "Ljava.lang.Object;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerCacheMruCacheStorage_MruEntry = { 2, "MruEntry", "freemarker.cache", "MruCacheStorage", 0x1a, 9, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerCacheMruCacheStorage_MruEntry;
}

@end


#line 267
void FreemarkerCacheMruCacheStorage_MruEntry_init(FreemarkerCacheMruCacheStorage_MruEntry *self) {
  (void) NSObject_init(self);
  [self makeHead];
  self->key_ = self->value_ = nil;
}


#line 267
FreemarkerCacheMruCacheStorage_MruEntry *new_FreemarkerCacheMruCacheStorage_MruEntry_init() {
  FreemarkerCacheMruCacheStorage_MruEntry *self = [FreemarkerCacheMruCacheStorage_MruEntry alloc];
  FreemarkerCacheMruCacheStorage_MruEntry_init(self);
  return self;
}

void FreemarkerCacheMruCacheStorage_MruEntry_initWithId_withId_(FreemarkerCacheMruCacheStorage_MruEntry *self, id key, id value) {
  (void) NSObject_init(self);
  
#line 274
  self->key_ = key;
  self->value_ = value;
}


#line 273
FreemarkerCacheMruCacheStorage_MruEntry *new_FreemarkerCacheMruCacheStorage_MruEntry_initWithId_withId_(id key, id value) {
  FreemarkerCacheMruCacheStorage_MruEntry *self = [FreemarkerCacheMruCacheStorage_MruEntry alloc];
  FreemarkerCacheMruCacheStorage_MruEntry_initWithId_withId_(self, key, value);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCacheMruCacheStorage_MruEntry)


#line 313
@implementation FreemarkerCacheMruCacheStorage_MruReference


#line 317
- (instancetype)initWithFreemarkerCacheMruCacheStorage_MruEntry:(FreemarkerCacheMruCacheStorage_MruEntry *)entry_
                                  withJavaLangRefReferenceQueue:(JavaLangRefReferenceQueue *)queue {
  FreemarkerCacheMruCacheStorage_MruReference_initWithFreemarkerCacheMruCacheStorage_MruEntry_withJavaLangRefReferenceQueue_(self, entry_, queue);
  return self;
}


#line 322
- (id)getKey {
  return key_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithFreemarkerCacheMruCacheStorage_MruEntry:withJavaLangRefReferenceQueue:", "MruReference", NULL, 0x0, NULL, NULL },
    { "getKey", NULL, "Ljava.lang.Object;", 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "key_", NULL, 0x12, "Ljava.lang.Object;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerCacheMruCacheStorage_MruReference = { 2, "MruReference", "freemarker.cache", "MruCacheStorage", 0xa, 2, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerCacheMruCacheStorage_MruReference;
}

@end


#line 317
void FreemarkerCacheMruCacheStorage_MruReference_initWithFreemarkerCacheMruCacheStorage_MruEntry_withJavaLangRefReferenceQueue_(FreemarkerCacheMruCacheStorage_MruReference *self, FreemarkerCacheMruCacheStorage_MruEntry *entry_, JavaLangRefReferenceQueue *queue) {
  (void) JavaLangRefSoftReference_initWithId_withJavaLangRefReferenceQueue_(self, [((FreemarkerCacheMruCacheStorage_MruEntry *) nil_chk(entry_)) getValue], queue);
  self->key_ = [entry_ getKey];
}


#line 317
FreemarkerCacheMruCacheStorage_MruReference *new_FreemarkerCacheMruCacheStorage_MruReference_initWithFreemarkerCacheMruCacheStorage_MruEntry_withJavaLangRefReferenceQueue_(FreemarkerCacheMruCacheStorage_MruEntry *entry_, JavaLangRefReferenceQueue *queue) {
  FreemarkerCacheMruCacheStorage_MruReference *self = [FreemarkerCacheMruCacheStorage_MruReference alloc];
  FreemarkerCacheMruCacheStorage_MruReference_initWithFreemarkerCacheMruCacheStorage_MruEntry_withJavaLangRefReferenceQueue_(self, entry_, queue);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCacheMruCacheStorage_MruReference)
