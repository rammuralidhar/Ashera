//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/LibraryLoad.java
//


#include "Environment.h"
#include "Expression.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "LibraryLoad.h"
#include "MalformedTemplateNameException.h"
#include "ParameterRole.h"
#include "Template.h"
#include "TemplateElement.h"
#include "TemplateException.h"
#include "TemplateObject.h"
#include "_CoreStringUtils.h"
#include "_DelayedGetMessage.h"
#include "_DelayedJQuote.h"
#include "_MiscTemplateException.h"
#include "java/io/IOException.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/StringBuffer.h"

#line 0 "/Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/LibraryLoad.java"

@interface FreemarkerCoreLibraryLoad () {
 @public
  FreemarkerCoreExpression *importedTemplateNameExp_;
  NSString *namespace__;
}

@end

J2OBJC_FIELD_SETTER(FreemarkerCoreLibraryLoad, importedTemplateNameExp_, FreemarkerCoreExpression *)
J2OBJC_FIELD_SETTER(FreemarkerCoreLibraryLoad, namespace__, NSString *)


#line 31
@implementation FreemarkerCoreLibraryLoad


#line 41
- (instancetype)initWithFreemarkerTemplateTemplate:(FreemarkerTemplateTemplate *)template_
                      withFreemarkerCoreExpression:(FreemarkerCoreExpression *)templateName
                                      withNSString:(NSString *)namespace_ {
  FreemarkerCoreLibraryLoad_initWithFreemarkerTemplateTemplate_withFreemarkerCoreExpression_withNSString_(self, template_, templateName, namespace_);
  return self;
}


#line 49
- (void)acceptWithFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env {
  NSString *importedTemplateName = [((FreemarkerCoreExpression *) nil_chk(importedTemplateNameExp_)) evalAndCoerceToStringWithFreemarkerCoreEnvironment:env];
  NSString *fullImportedTemplateName;
  @try {
    fullImportedTemplateName = [((FreemarkerCoreEnvironment *) nil_chk(env)) toFullTemplateNameWithNSString:[((FreemarkerTemplateTemplate *) nil_chk([self getTemplate])) getName] withNSString:importedTemplateName];
  }
  @catch (
#line 54
  FreemarkerTemplateMalformedTemplateNameException *e) {
    @throw new_FreemarkerCore_MiscTemplateException_initWithJavaLangThrowable_withFreemarkerCoreEnvironment_withNSObjectArray_(e, env, [IOSObjectArray newArrayWithObjects:(id[]){
#line 56
      @"Malformed template name ", new_FreemarkerCore_DelayedJQuote_initWithId_([((FreemarkerTemplateMalformedTemplateNameException *) nil_chk(e)) getTemplateName]), @":\n",
#line 57
      [e getMalformednessDescription] } count:4 type:NSObject_class_()]);
    }
    
#line 60
    FreemarkerTemplateTemplate *importedTemplate;
    @try {
      importedTemplate = [((FreemarkerCoreEnvironment *) nil_chk(env)) getTemplateForImportingWithNSString:fullImportedTemplateName];
    }
    @catch (
#line 63
    JavaIoIOException *e) {
      @throw new_FreemarkerCore_MiscTemplateException_initWithJavaLangThrowable_withFreemarkerCoreEnvironment_withNSObjectArray_(e, env, [IOSObjectArray newArrayWithObjects:(id[]){
#line 65
        @"Template importing failed (for parameter value ", new_FreemarkerCore_DelayedJQuote_initWithId_(
#line 66
        importedTemplateName),
#line 67
        @"):\n", new_FreemarkerCore_DelayedGetMessage_initWithJavaLangThrowable_(e) } count:4 type:NSObject_class_()]);
      }
      (void) [((FreemarkerCoreEnvironment *) nil_chk(env)) importLibWithFreemarkerTemplateTemplate:importedTemplate withNSString:namespace__];
    }


#line 72
- (NSString *)dumpWithBoolean:(jboolean)canonical {
  JavaLangStringBuffer *buf = new_JavaLangStringBuffer_init();
  if (canonical) (void) [buf appendWithChar:'<'];
  (void) [buf appendWithNSString:[self getNodeTypeSymbol]];
  (void) [buf appendWithChar:' '];
  (void) [buf appendWithNSString:[((FreemarkerCoreExpression *) nil_chk(importedTemplateNameExp_)) getCanonicalForm]];
  (void) [buf appendWithNSString:@" as "];
  (void) [buf appendWithNSString:FreemarkerCore_CoreStringUtils_toFTLTopLevelTragetIdentifierWithNSString_(namespace__)];
  if (canonical) (void) [buf appendWithNSString:@"/>"];
  return [buf description];
}

- (NSString *)getNodeTypeSymbol {
  return @"#import";
}

- (jint)getParameterCount {
  return 2;
}

- (id)getParameterValueWithInt:(jint)idx {
  switch (idx) {
    case 0:
    
#line 94
    return importedTemplateNameExp_;
    case 1:
    
#line 95
    return namespace__;
    default:
    
#line 96
    @throw new_JavaLangIndexOutOfBoundsException_init();
  }
}


#line 100
- (FreemarkerCoreParameterRole *)getParameterRoleWithInt:(jint)idx {
  switch (idx) {
    case 0:
    
#line 102
    return FreemarkerCoreParameterRole_get_TEMPLATE_NAME_();
    case 1:
    
#line 103
    return FreemarkerCoreParameterRole_get_NAMESPACE_();
    default:
    
#line 104
    @throw new_JavaLangIndexOutOfBoundsException_init();
  }
}


#line 108
- (NSString *)getTemplateName {
  return [((FreemarkerCoreExpression *) nil_chk(importedTemplateNameExp_)) description];
}

- (jboolean)isNestedBlockRepeater {
  return NO;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithFreemarkerTemplateTemplate:withFreemarkerCoreExpression:withNSString:", "LibraryLoad", NULL, 0x0, NULL, NULL },
    { "acceptWithFreemarkerCoreEnvironment:", "accept", "V", 0x0, "Lfreemarker.template.TemplateException;Ljava.io.IOException;", NULL },
    { "dumpWithBoolean:", "dump", "Ljava.lang.String;", 0x4, NULL, NULL },
    { "getNodeTypeSymbol", NULL, "Ljava.lang.String;", 0x0, NULL, NULL },
    { "getParameterCount", NULL, "I", 0x0, NULL, NULL },
    { "getParameterValueWithInt:", "getParameterValue", "Ljava.lang.Object;", 0x0, NULL, NULL },
    { "getParameterRoleWithInt:", "getParameterRole", "Lfreemarker.core.ParameterRole;", 0x0, NULL, NULL },
    { "getTemplateName", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "isNestedBlockRepeater", NULL, "Z", 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "importedTemplateNameExp_", NULL, 0x2, "Lfreemarker.core.Expression;", NULL, NULL,  },
    { "namespace__", "namespace", 0x2, "Ljava.lang.String;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerCoreLibraryLoad = { 2, "LibraryLoad", "freemarker.core", NULL, 0x11, 9, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerCoreLibraryLoad;
}

@end


#line 41
void FreemarkerCoreLibraryLoad_initWithFreemarkerTemplateTemplate_withFreemarkerCoreExpression_withNSString_(FreemarkerCoreLibraryLoad *self, FreemarkerTemplateTemplate *template_, FreemarkerCoreExpression *templateName, NSString *namespace_) {
  (void) FreemarkerCoreTemplateElement_init(self);
  
#line 45
  self->namespace__ = namespace_;
  self->importedTemplateNameExp_ = templateName;
}


#line 41
FreemarkerCoreLibraryLoad *new_FreemarkerCoreLibraryLoad_initWithFreemarkerTemplateTemplate_withFreemarkerCoreExpression_withNSString_(FreemarkerTemplateTemplate *template_, FreemarkerCoreExpression *templateName, NSString *namespace_) {
  FreemarkerCoreLibraryLoad *self = [FreemarkerCoreLibraryLoad alloc];
  FreemarkerCoreLibraryLoad_initWithFreemarkerTemplateTemplate_withFreemarkerCoreExpression_withNSString_(self, template_, templateName, namespace_);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreLibraryLoad)
