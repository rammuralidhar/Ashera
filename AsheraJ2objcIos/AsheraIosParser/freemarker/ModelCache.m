//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/ext/util/ModelCache.java
//


#include "IdentityHashMap.h"
#include "J2ObjC_source.h"
#include "ModelCache.h"
#include "TemplateModel.h"
#include "TemplateModelAdapter.h"
#include "java/lang/ref/Reference.h"
#include "java/lang/ref/ReferenceQueue.h"
#include "java/lang/ref/SoftReference.h"
#include "java/util/Map.h"

#line 0 "/Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/ext/util/ModelCache.java"

@interface FreemarkerExtUtilModelCache () {
 @public
  jboolean useCache_;
  id<JavaUtilMap> modelCache_;
  JavaLangRefReferenceQueue *refQueue_;
}

- (id<FreemarkerTemplateTemplateModel>)lookupWithId:(id)object;

- (void)register__WithFreemarkerTemplateTemplateModel:(id<FreemarkerTemplateTemplateModel>)model
                                               withId:(id)object;

@end

J2OBJC_FIELD_SETTER(FreemarkerExtUtilModelCache, modelCache_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(FreemarkerExtUtilModelCache, refQueue_, JavaLangRefReferenceQueue *)

__attribute__((unused)) static id<FreemarkerTemplateTemplateModel> FreemarkerExtUtilModelCache_lookupWithId_(FreemarkerExtUtilModelCache *self, id object);

__attribute__((unused)) static void FreemarkerExtUtilModelCache_register__WithFreemarkerTemplateTemplateModel_withId_(FreemarkerExtUtilModelCache *self, id<FreemarkerTemplateTemplateModel> model, id object);

/**
 @brief A special soft reference that is registered in the modelCache.
 When it gets cleared (that is, the model became unreachable) it will remove itself from the model cache.
 */
@interface FreemarkerExtUtilModelCache_ModelReference : JavaLangRefSoftReference {
 @public
  id object_;
}

- (instancetype)initWithFreemarkerTemplateTemplateModel:(id<FreemarkerTemplateTemplateModel>)ref
                                                 withId:(id)object
                          withJavaLangRefReferenceQueue:(JavaLangRefReferenceQueue *)refQueue;

- (id<FreemarkerTemplateTemplateModel>)getModel;

@end

J2OBJC_EMPTY_STATIC_INIT(FreemarkerExtUtilModelCache_ModelReference)

J2OBJC_FIELD_SETTER(FreemarkerExtUtilModelCache_ModelReference, object_, id)

__attribute__((unused)) static void FreemarkerExtUtilModelCache_ModelReference_initWithFreemarkerTemplateTemplateModel_withId_withJavaLangRefReferenceQueue_(FreemarkerExtUtilModelCache_ModelReference *self, id<FreemarkerTemplateTemplateModel> ref, id object, JavaLangRefReferenceQueue *refQueue);

__attribute__((unused)) static FreemarkerExtUtilModelCache_ModelReference *new_FreemarkerExtUtilModelCache_ModelReference_initWithFreemarkerTemplateTemplateModel_withId_withJavaLangRefReferenceQueue_(id<FreemarkerTemplateTemplateModel> ref, id object, JavaLangRefReferenceQueue *refQueue) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerExtUtilModelCache_ModelReference)


#line 30
@implementation FreemarkerExtUtilModelCache


#line 36
- (instancetype)init {
  FreemarkerExtUtilModelCache_init(self);
  return self;
}


#line 45
- (void)setUseCacheWithBoolean:(jboolean)useCache {
  @synchronized(self) {
    self->useCache_ = useCache;
    if (useCache) {
      
#line 50
      modelCache_ = new_FreemarkerExtUtilIdentityHashMap_init();
      refQueue_ = new_JavaLangRefReferenceQueue_init();
    }
    else {
      
#line 55
      modelCache_ = nil;
      refQueue_ = nil;
    }
  }
}

- (jboolean)getUseCache {
  @synchronized(self) {
    
#line 64
    return useCache_;
  }
}


#line 67
- (id<FreemarkerTemplateTemplateModel>)getInstanceWithId:(id)object {
  
#line 69
  if ([FreemarkerTemplateTemplateModel_class_() isInstance:object]) {
    return (id<FreemarkerTemplateTemplateModel>) check_protocol_cast(object, @protocol(FreemarkerTemplateTemplateModel));
  }
  if ([FreemarkerTemplateTemplateModelAdapter_class_() isInstance:object]) {
    return [((id<FreemarkerTemplateTemplateModelAdapter>) nil_chk(((id<FreemarkerTemplateTemplateModelAdapter>) check_protocol_cast(object, @protocol(FreemarkerTemplateTemplateModelAdapter))))) getTemplateModel];
  }
  if (useCache_ && [self isCacheableWithId:object]) {
    id<FreemarkerTemplateTemplateModel> model = FreemarkerExtUtilModelCache_lookupWithId_(self, object);
    if (model == nil) {
      model = [self createWithId:object];
      FreemarkerExtUtilModelCache_register__WithFreemarkerTemplateTemplateModel_withId_(self, model, object);
    }
    return model;
  }
  else {
    return [self createWithId:object];
  }
}


#line 88
- (id<FreemarkerTemplateTemplateModel>)createWithId:(id)object {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 89
- (jboolean)isCacheableWithId:(id)object {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 91
- (void)clearCache {
  
#line 93
  if (modelCache_ != nil) {
    
#line 95
    @synchronized(modelCache_) {
      
#line 97
      [modelCache_ clear];
    }
  }
}


#line 102
- (id<FreemarkerTemplateTemplateModel>)lookupWithId:(id)object {
  return FreemarkerExtUtilModelCache_lookupWithId_(self, object);
}


#line 119
- (void)register__WithFreemarkerTemplateTemplateModel:(id<FreemarkerTemplateTemplateModel>)model
                                               withId:(id)object {
  FreemarkerExtUtilModelCache_register__WithFreemarkerTemplateTemplateModel_withId_(self, model, object);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "ModelCache", NULL, 0x4, NULL, NULL },
    { "setUseCacheWithBoolean:", "setUseCache", "V", 0x21, NULL, NULL },
    { "getUseCache", NULL, "Z", 0x21, NULL, NULL },
    { "getInstanceWithId:", "getInstance", "Lfreemarker.template.TemplateModel;", 0x1, NULL, NULL },
    { "createWithId:", "create", "Lfreemarker.template.TemplateModel;", 0x404, NULL, NULL },
    { "isCacheableWithId:", "isCacheable", "Z", 0x404, NULL, NULL },
    { "clearCache", NULL, "V", 0x1, NULL, NULL },
    { "lookupWithId:", "lookup", "Lfreemarker.template.TemplateModel;", 0x12, NULL, NULL },
    { "register__WithFreemarkerTemplateTemplateModel:withId:", "register", "V", 0x12, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "useCache_", NULL, 0x2, "Z", NULL, NULL,  },
    { "modelCache_", NULL, 0x2, "Ljava.util.Map;", NULL, NULL,  },
    { "refQueue_", NULL, 0x2, "Ljava.lang.ref.ReferenceQueue;", NULL, NULL,  },
  };
  static const char *inner_classes[] = {"Lfreemarker.ext.util.ModelCache$ModelReference;"};
  static const J2ObjcClassInfo _FreemarkerExtUtilModelCache = { 2, "ModelCache", "freemarker.ext.util", NULL, 0x401, 9, methods, 3, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_FreemarkerExtUtilModelCache;
}

@end


#line 36
void FreemarkerExtUtilModelCache_init(FreemarkerExtUtilModelCache *self) {
  (void) NSObject_init(self);
  self->useCache_ =
#line 32
  NO;
  self->modelCache_ = nil;
  self->refQueue_ = nil;
}


#line 102
id<FreemarkerTemplateTemplateModel> FreemarkerExtUtilModelCache_lookupWithId_(FreemarkerExtUtilModelCache *self, id object) {
  
#line 104
  FreemarkerExtUtilModelCache_ModelReference *ref = nil;
  
#line 108
  @synchronized(self->modelCache_) {
    
#line 110
    ref = (FreemarkerExtUtilModelCache_ModelReference *) check_class_cast([((id<JavaUtilMap>) nil_chk(self->modelCache_)) getWithId:object], [FreemarkerExtUtilModelCache_ModelReference class]);
  }
  
#line 113
  if (ref != nil)
#line 114
  return [ref getModel];
  
#line 116
  return nil;
}


#line 119
void FreemarkerExtUtilModelCache_register__WithFreemarkerTemplateTemplateModel_withId_(FreemarkerExtUtilModelCache *self, id<FreemarkerTemplateTemplateModel> model, id object) {
  
#line 121
  @synchronized(self->modelCache_) {
    
#line 123
    for (; ; ) {
      FreemarkerExtUtilModelCache_ModelReference *queuedRef = (FreemarkerExtUtilModelCache_ModelReference *) check_class_cast([((JavaLangRefReferenceQueue *) nil_chk(self->refQueue_)) poll], [FreemarkerExtUtilModelCache_ModelReference class]);
      if (queuedRef == nil)
#line 126
      break;
      (void) [((id<JavaUtilMap>) nil_chk(self->modelCache_)) removeWithId:((FreemarkerExtUtilModelCache_ModelReference *) nil_chk(queuedRef))->object_];
    }
    
#line 130
    (void) [((id<JavaUtilMap>) nil_chk(self->modelCache_)) putWithId:object withId:new_FreemarkerExtUtilModelCache_ModelReference_initWithFreemarkerTemplateTemplateModel_withId_withJavaLangRefReferenceQueue_(model, object, self->refQueue_)];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerExtUtilModelCache)


#line 139
@implementation FreemarkerExtUtilModelCache_ModelReference


#line 143
- (instancetype)initWithFreemarkerTemplateTemplateModel:(id<FreemarkerTemplateTemplateModel>)ref
                                                 withId:(id)object
                          withJavaLangRefReferenceQueue:(JavaLangRefReferenceQueue *)refQueue {
  FreemarkerExtUtilModelCache_ModelReference_initWithFreemarkerTemplateTemplateModel_withId_withJavaLangRefReferenceQueue_(self, ref, object, refQueue);
  return self;
}


#line 149
- (id<FreemarkerTemplateTemplateModel>)getModel {
  
#line 151
  return (id<FreemarkerTemplateTemplateModel>) check_protocol_cast([self get], @protocol(FreemarkerTemplateTemplateModel));
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithFreemarkerTemplateTemplateModel:withId:withJavaLangRefReferenceQueue:", "ModelReference", NULL, 0x0, NULL, NULL },
    { "getModel", NULL, "Lfreemarker.template.TemplateModel;", 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "object_", NULL, 0x0, "Ljava.lang.Object;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerExtUtilModelCache_ModelReference = { 2, "ModelReference", "freemarker.ext.util", "ModelCache", 0x1a, 2, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerExtUtilModelCache_ModelReference;
}

@end


#line 143
void FreemarkerExtUtilModelCache_ModelReference_initWithFreemarkerTemplateTemplateModel_withId_withJavaLangRefReferenceQueue_(FreemarkerExtUtilModelCache_ModelReference *self, id<FreemarkerTemplateTemplateModel> ref, id object, JavaLangRefReferenceQueue *refQueue) {
  (void) JavaLangRefSoftReference_initWithId_withJavaLangRefReferenceQueue_(self,
#line 145
  ref, refQueue);
  self->object_ = object;
}


#line 143
FreemarkerExtUtilModelCache_ModelReference *new_FreemarkerExtUtilModelCache_ModelReference_initWithFreemarkerTemplateTemplateModel_withId_withJavaLangRefReferenceQueue_(id<FreemarkerTemplateTemplateModel> ref, id object, JavaLangRefReferenceQueue *refQueue) {
  FreemarkerExtUtilModelCache_ModelReference *self = [FreemarkerExtUtilModelCache_ModelReference alloc];
  FreemarkerExtUtilModelCache_ModelReference_initWithFreemarkerTemplateTemplateModel_withId_withJavaLangRefReferenceQueue_(self, ref, object, refQueue);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerExtUtilModelCache_ModelReference)
