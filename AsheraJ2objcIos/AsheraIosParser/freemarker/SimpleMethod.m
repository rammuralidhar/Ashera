//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/ext/beans/SimpleMethod.java
//


#include "BeansWrapper.h"
#include "ClassUtil.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "ObjectWrapperAndUnwrapper.h"
#include "SimpleMethod.h"
#include "TemplateModel.h"
#include "TemplateModelException.h"
#include "_DelayedFTLTypeDescription.h"
#include "_DelayedOrdinal.h"
#include "_MethodUtil.h"
#include "_TemplateModelException.h"
#include "java/lang/Integer.h"
#include "java/lang/reflect/Array.h"
#include "java/lang/reflect/Member.h"
#include "java/util/Collections.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"

#line 0 "/Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/ext/beans/SimpleMethod.java"

@interface FreemarkerExtBeansSimpleMethod () {
 @public
  id<JavaLangReflectMember> member_;
  IOSObjectArray *argTypes_;
}

- (IOSObjectArray *)unwrapArgumentsWithJavaUtilList:(id<JavaUtilList>)args
                                  withIOSClassArray:(IOSObjectArray *)argTypes
                                        withBoolean:(jboolean)isVarargs
                 withFreemarkerExtBeansBeansWrapper:(FreemarkerExtBeansBeansWrapper *)w;

- (FreemarkerTemplateTemplateModelException *)createArgumentTypeMismarchExceptionWithInt:(jint)argIdx
                                                     withFreemarkerTemplateTemplateModel:(id<FreemarkerTemplateTemplateModel>)argVal
                                                                            withIOSClass:(IOSClass *)targetType;

- (FreemarkerTemplateTemplateModelException *)createNullToPrimitiveArgumentExceptionWithInt:(jint)argIdx
                                                                               withIOSClass:(IOSClass *)targetType;

@end

J2OBJC_FIELD_SETTER(FreemarkerExtBeansSimpleMethod, member_, id<JavaLangReflectMember>)
J2OBJC_FIELD_SETTER(FreemarkerExtBeansSimpleMethod, argTypes_, IOSObjectArray *)

__attribute__((unused)) static IOSObjectArray *FreemarkerExtBeansSimpleMethod_unwrapArgumentsWithJavaUtilList_withIOSClassArray_withBoolean_withFreemarkerExtBeansBeansWrapper_(FreemarkerExtBeansSimpleMethod *self, id<JavaUtilList> args, IOSObjectArray *argTypes, jboolean isVarargs, FreemarkerExtBeansBeansWrapper *w);

__attribute__((unused)) static FreemarkerTemplateTemplateModelException *FreemarkerExtBeansSimpleMethod_createArgumentTypeMismarchExceptionWithInt_withFreemarkerTemplateTemplateModel_withIOSClass_(FreemarkerExtBeansSimpleMethod *self, jint argIdx, id<FreemarkerTemplateTemplateModel> argVal, IOSClass *targetType);

__attribute__((unused)) static FreemarkerTemplateTemplateModelException *FreemarkerExtBeansSimpleMethod_createNullToPrimitiveArgumentExceptionWithInt_withIOSClass_(FreemarkerExtBeansSimpleMethod *self, jint argIdx, IOSClass *targetType);


#line 36
@implementation FreemarkerExtBeansSimpleMethod


#line 41
- (instancetype)initWithJavaLangReflectMember:(id<JavaLangReflectMember>)member
                            withIOSClassArray:(IOSObjectArray *)argTypes {
  FreemarkerExtBeansSimpleMethod_initWithJavaLangReflectMember_withIOSClassArray_(self, member, argTypes);
  return self;
}

- (IOSObjectArray *)unwrapArgumentsWithJavaUtilList:(id<JavaUtilList>)arguments
                 withFreemarkerExtBeansBeansWrapper:(FreemarkerExtBeansBeansWrapper *)wrapper {
  
#line 49
  if (arguments == nil) {
    arguments = JavaUtilCollections_get_EMPTY_LIST_();
  }
  jboolean isVarArg = FreemarkerExtBeans_MethodUtil_isVarargsWithJavaLangReflectMember_(member_);
  jint typesLen = ((IOSObjectArray *) nil_chk(argTypes_))->size_;
  if (isVarArg) {
    if (typesLen - 1 > [((id<JavaUtilList>) nil_chk(arguments)) size]) {
      @throw new_FreemarkerCore_TemplateModelException_initWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ FreemarkerExtBeans_MethodUtil_invocationErrorMessageStartWithJavaLangReflectMember_(
#line 57
      member_),
#line 58
      @" takes at least ", new_JavaLangInteger_initWithInt_(typesLen - 1),
#line 59
      typesLen - 1 == 1 ? @" argument" : @" arguments", @", but ", new_JavaLangInteger_initWithInt_(
#line 60
      [arguments size]), @" was given." } count:7 type:NSObject_class_()]);
    }
  }
  else if (typesLen != [((id<JavaUtilList>) nil_chk(arguments)) size]) {
    @throw new_FreemarkerCore_TemplateModelException_initWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ FreemarkerExtBeans_MethodUtil_invocationErrorMessageStartWithJavaLangReflectMember_(
#line 65
    member_),
#line 66
    @" takes ", new_JavaLangInteger_initWithInt_(typesLen), typesLen == 1 ? @" argument" : @" arguments", @", but ", new_JavaLangInteger_initWithInt_(
#line 67
    [arguments size]), @" was given." } count:7 type:NSObject_class_()]);
  }
  
#line 70
  IOSObjectArray *args = FreemarkerExtBeansSimpleMethod_unwrapArgumentsWithJavaUtilList_withIOSClassArray_withBoolean_withFreemarkerExtBeansBeansWrapper_(self, arguments, argTypes_, isVarArg, wrapper);
  return args;
}


#line 74
- (IOSObjectArray *)unwrapArgumentsWithJavaUtilList:(id<JavaUtilList>)args
                                  withIOSClassArray:(IOSObjectArray *)argTypes
                                        withBoolean:(jboolean)isVarargs
                 withFreemarkerExtBeansBeansWrapper:(FreemarkerExtBeansBeansWrapper *)w {
  return FreemarkerExtBeansSimpleMethod_unwrapArgumentsWithJavaUtilList_withIOSClassArray_withBoolean_withFreemarkerExtBeansBeansWrapper_(self, args, argTypes, isVarargs, w);
}


#line 145
- (FreemarkerTemplateTemplateModelException *)createArgumentTypeMismarchExceptionWithInt:(jint)argIdx
                                                     withFreemarkerTemplateTemplateModel:(id<FreemarkerTemplateTemplateModel>)argVal
                                                                            withIOSClass:(IOSClass *)targetType {
  return FreemarkerExtBeansSimpleMethod_createArgumentTypeMismarchExceptionWithInt_withFreemarkerTemplateTemplateModel_withIOSClass_(self, argIdx, argVal, targetType);
}


#line 155
- (FreemarkerTemplateTemplateModelException *)createNullToPrimitiveArgumentExceptionWithInt:(jint)argIdx
                                                                               withIOSClass:(IOSClass *)targetType {
  return FreemarkerExtBeansSimpleMethod_createNullToPrimitiveArgumentExceptionWithInt_withIOSClass_(self, argIdx, targetType);
}


#line 163
- (id<JavaLangReflectMember>)getMember {
  return member_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaLangReflectMember:withIOSClassArray:", "SimpleMethod", NULL, 0x4, NULL, NULL },
    { "unwrapArgumentsWithJavaUtilList:withFreemarkerExtBeansBeansWrapper:", "unwrapArguments", "[Ljava.lang.Object;", 0x0, "Lfreemarker.template.TemplateModelException;", NULL },
    { "unwrapArgumentsWithJavaUtilList:withIOSClassArray:withBoolean:withFreemarkerExtBeansBeansWrapper:", "unwrapArguments", "[Ljava.lang.Object;", 0x2, "Lfreemarker.template.TemplateModelException;", NULL },
    { "createArgumentTypeMismarchExceptionWithInt:withFreemarkerTemplateTemplateModel:withIOSClass:", "createArgumentTypeMismarchException", "Lfreemarker.template.TemplateModelException;", 0x2, NULL, NULL },
    { "createNullToPrimitiveArgumentExceptionWithInt:withIOSClass:", "createNullToPrimitiveArgumentException", "Lfreemarker.template.TemplateModelException;", 0x2, NULL, NULL },
    { "getMember", NULL, "Ljava.lang.reflect.Member;", 0x4, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "member_", NULL, 0x12, "Ljava.lang.reflect.Member;", NULL, NULL,  },
    { "argTypes_", NULL, 0x12, "[Ljava.lang.Class;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerExtBeansSimpleMethod = { 2, "SimpleMethod", "freemarker.ext.beans", NULL, 0x0, 6, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerExtBeansSimpleMethod;
}

@end


#line 41
void FreemarkerExtBeansSimpleMethod_initWithJavaLangReflectMember_withIOSClassArray_(FreemarkerExtBeansSimpleMethod *self, id<JavaLangReflectMember> member, IOSObjectArray *argTypes) {
  (void) NSObject_init(self);
  self->member_ = member;
  self->argTypes_ = argTypes;
}


#line 41
FreemarkerExtBeansSimpleMethod *new_FreemarkerExtBeansSimpleMethod_initWithJavaLangReflectMember_withIOSClassArray_(id<JavaLangReflectMember> member, IOSObjectArray *argTypes) {
  FreemarkerExtBeansSimpleMethod *self = [FreemarkerExtBeansSimpleMethod alloc];
  FreemarkerExtBeansSimpleMethod_initWithJavaLangReflectMember_withIOSClassArray_(self, member, argTypes);
  return self;
}


#line 74
IOSObjectArray *FreemarkerExtBeansSimpleMethod_unwrapArgumentsWithJavaUtilList_withIOSClassArray_withBoolean_withFreemarkerExtBeansBeansWrapper_(FreemarkerExtBeansSimpleMethod *self, id<JavaUtilList> args, IOSObjectArray *argTypes, jboolean isVarargs, FreemarkerExtBeansBeansWrapper *w) {
  
#line 77
  if (args == nil) return nil;
  
#line 79
  jint typesLen = ((IOSObjectArray *) nil_chk(argTypes))->size_;
  jint argsLen = [((id<JavaUtilList>) nil_chk(args)) size];
  
#line 82
  IOSObjectArray *unwrappedArgs = [IOSObjectArray newArrayWithLength:typesLen type:NSObject_class_()];
  
#line 85
  id<JavaUtilIterator> it = [args iterator];
  jint normalArgCnt = isVarargs ? typesLen - 1 : typesLen;
  jint argIdx = 0;
  while (argIdx < normalArgCnt) {
    IOSClass *argType = IOSObjectArray_Get(argTypes, argIdx);
    id<FreemarkerTemplateTemplateModel> argVal = (id<FreemarkerTemplateTemplateModel>) check_protocol_cast([((id<JavaUtilIterator>) nil_chk(it)) next], @protocol(FreemarkerTemplateTemplateModel));
    id unwrappedArgVal = [((FreemarkerExtBeansBeansWrapper *) nil_chk(w)) tryUnwrapToWithFreemarkerTemplateTemplateModel:argVal withIOSClass:argType];
    if (unwrappedArgVal == FreemarkerTemplateObjectWrapperAndUnwrapper_get_CANT_UNWRAP_TO_TARGET_CLASS_()) {
      @throw FreemarkerExtBeansSimpleMethod_createArgumentTypeMismarchExceptionWithInt_withFreemarkerTemplateTemplateModel_withIOSClass_(self, argIdx, argVal, argType);
    }
    if (unwrappedArgVal == nil && [((IOSClass *) nil_chk(argType)) isPrimitive]) {
      @throw FreemarkerExtBeansSimpleMethod_createNullToPrimitiveArgumentExceptionWithInt_withIOSClass_(self, argIdx, argType);
    }
    
#line 99
    (void) IOSObjectArray_Set(unwrappedArgs, argIdx++, unwrappedArgVal);
  }
  if (isVarargs) {
    
#line 104
    IOSClass *varargType = IOSObjectArray_Get(argTypes, typesLen - 1);
    IOSClass *varargItemType = [((IOSClass *) nil_chk(varargType)) getComponentType];
    if (![((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
      (void) IOSObjectArray_Set(unwrappedArgs, argIdx++, JavaLangReflectArray_newInstanceWithIOSClass_withInt_(varargItemType, 0));
    }
    else {
      
#line 109
      id<FreemarkerTemplateTemplateModel> argVal = (id<FreemarkerTemplateTemplateModel>) check_protocol_cast([it next], @protocol(FreemarkerTemplateTemplateModel));
      
#line 111
      id unwrappedArgVal;
      
#line 114
      if (argsLen - argIdx == 1 &&
#line 115
      (unwrappedArgVal = [((FreemarkerExtBeansBeansWrapper *) nil_chk(w)) tryUnwrapToWithFreemarkerTemplateTemplateModel:argVal withIOSClass:varargType]) != FreemarkerTemplateObjectWrapperAndUnwrapper_get_CANT_UNWRAP_TO_TARGET_CLASS_()) {
        
#line 118
        (void) IOSObjectArray_Set(unwrappedArgs, argIdx++, unwrappedArgVal);
      }
      else {
        
#line 122
        jint varargArrayLen = argsLen - argIdx;
        id varargArray = JavaLangReflectArray_newInstanceWithIOSClass_withInt_(varargItemType, varargArrayLen);
        for (jint varargIdx = 0; varargIdx < varargArrayLen; varargIdx++) {
          id<FreemarkerTemplateTemplateModel> varargVal = (id<FreemarkerTemplateTemplateModel>) check_protocol_cast((varargIdx == 0 ? ((id) argVal) : [it next]), @protocol(FreemarkerTemplateTemplateModel));
          id unwrappedVarargVal = [((FreemarkerExtBeansBeansWrapper *) nil_chk(w)) tryUnwrapToWithFreemarkerTemplateTemplateModel:varargVal withIOSClass:varargItemType];
          if (unwrappedVarargVal == FreemarkerTemplateObjectWrapperAndUnwrapper_get_CANT_UNWRAP_TO_TARGET_CLASS_()) {
            @throw FreemarkerExtBeansSimpleMethod_createArgumentTypeMismarchExceptionWithInt_withFreemarkerTemplateTemplateModel_withIOSClass_(self,
#line 129
            argIdx + varargIdx, varargVal, varargItemType);
          }
          
#line 132
          if (unwrappedVarargVal == nil && [((IOSClass *) nil_chk(varargItemType)) isPrimitive]) {
            @throw FreemarkerExtBeansSimpleMethod_createNullToPrimitiveArgumentExceptionWithInt_withIOSClass_(self, argIdx + varargIdx, varargItemType);
          }
          JavaLangReflectArray_setWithId_withInt_withId_(varargArray, varargIdx, unwrappedVarargVal);
        }
        (void) IOSObjectArray_Set(unwrappedArgs, argIdx++, varargArray);
      }
    }
  }
  
#line 142
  return unwrappedArgs;
}


#line 145
FreemarkerTemplateTemplateModelException *FreemarkerExtBeansSimpleMethod_createArgumentTypeMismarchExceptionWithInt_withFreemarkerTemplateTemplateModel_withIOSClass_(FreemarkerExtBeansSimpleMethod *self, jint argIdx, id<FreemarkerTemplateTemplateModel> argVal, IOSClass *targetType) {
  
#line 147
  return new_FreemarkerCore_TemplateModelException_initWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ FreemarkerExtBeans_MethodUtil_invocationErrorMessageStartWithJavaLangReflectMember_(self->member_),
#line 148
  @" couldn't be called: Can't convert the ", new_FreemarkerCore_DelayedOrdinal_initWithId_(new_JavaLangInteger_initWithInt_(
#line 149
  argIdx + 1)),
#line 150
  @" argument's value to the target Java type, ", FreemarkerTemplateUtilityClassUtil_getShortClassNameWithIOSClass_(targetType),
#line 151
  @". The type of the actual value was: ", new_FreemarkerCore_DelayedFTLTypeDescription_initWithFreemarkerTemplateTemplateModel_(argVal) } count:7 type:NSObject_class_()]);
}


#line 155
FreemarkerTemplateTemplateModelException *FreemarkerExtBeansSimpleMethod_createNullToPrimitiveArgumentExceptionWithInt_withIOSClass_(FreemarkerExtBeansSimpleMethod *self, jint argIdx, IOSClass *targetType) {
  return new_FreemarkerCore_TemplateModelException_initWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ FreemarkerExtBeans_MethodUtil_invocationErrorMessageStartWithJavaLangReflectMember_(self->member_),
#line 157
  @" couldn't be called: The value of the ", new_FreemarkerCore_DelayedOrdinal_initWithId_(new_JavaLangInteger_initWithInt_(
#line 158
  argIdx + 1)),
#line 159
  @" argument was null, but the target Java parameter type (", FreemarkerTemplateUtilityClassUtil_getShortClassNameWithIOSClass_(targetType),
#line 160
  @") is primitive and so can't store null." } count:6 type:NSObject_class_()]);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerExtBeansSimpleMethod)
