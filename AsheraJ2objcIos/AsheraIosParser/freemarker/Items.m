//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/Items.java
//


#include "Environment.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "Items.h"
#include "IteratorBlock.h"
#include "J2ObjC_source.h"
#include "ParameterRole.h"
#include "TemplateElement.h"
#include "TemplateException.h"
#include "_MiscTemplateException.h"
#include "java/io/IOException.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/StringBuffer.h"

#line 0 "/Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/Items.java"

@interface FreemarkerCoreItems () {
 @public
  NSString *loopVarName_;
}

@end

J2OBJC_FIELD_SETTER(FreemarkerCoreItems, loopVarName_, NSString *)


#line 26
@implementation FreemarkerCoreItems


#line 30
- (instancetype)initWithNSString:(NSString *)loopVariableName
withFreemarkerCoreTemplateElement:(FreemarkerCoreTemplateElement *)nestedBlock {
  FreemarkerCoreItems_initWithNSString_withFreemarkerCoreTemplateElement_(self, loopVariableName, nestedBlock);
  return self;
}


#line 35
- (void)acceptWithFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env {
  FreemarkerCoreIteratorBlock_IterationContext *iterCtx = FreemarkerCoreIteratorBlock_findEnclosingIterationContextWithFreemarkerCoreEnvironment_withNSString_(env, nil);
  if (iterCtx == nil) {
    
#line 39
    @throw new_FreemarkerCore_MiscTemplateException_initWithFreemarkerCoreEnvironment_withNSObjectArray_(env, [IOSObjectArray newArrayWithObjects:(id[]){
#line 40
      [self getNodeTypeSymbol], @" without iteraton in context" } count:2 type:NSObject_class_()]);
    }
    
#line 43
    [((FreemarkerCoreIteratorBlock_IterationContext *) nil_chk(iterCtx)) loopForItemsElementWithFreemarkerCoreEnvironment:env withFreemarkerCoreTemplateElement:[self getNestedBlock] withNSString:loopVarName_];
  }


#line 46
- (jboolean)isNestedBlockRepeater {
  return YES;
}

- (NSString *)dumpWithBoolean:(jboolean)canonical {
  JavaLangStringBuffer *sb = new_JavaLangStringBuffer_init();
  if (canonical) (void) [sb appendWithChar:'<'];
  (void) [sb appendWithNSString:[self getNodeTypeSymbol]];
  (void) [sb appendWithNSString:@" as "];
  (void) [sb appendWithNSString:loopVarName_];
  if (canonical) {
    (void) [sb appendWithChar:'>'];
    if ([self getNestedBlock] != nil) (void) [sb appendWithNSString:[((FreemarkerCoreTemplateElement *) nil_chk([self getNestedBlock])) getCanonicalForm]];
    (void) [sb appendWithNSString:@"</"];
    (void) [sb appendWithNSString:[self getNodeTypeSymbol]];
    (void) [sb appendWithChar:'>'];
  }
  return [sb description];
}

- (NSString *)getNodeTypeSymbol {
  return @"#items";
}

- (jint)getParameterCount {
  return 1;
}

- (id)getParameterValueWithInt:(jint)idx {
  return loopVarName_;
}

- (FreemarkerCoreParameterRole *)getParameterRoleWithInt:(jint)idx {
  if (idx == 0) return FreemarkerCoreParameterRole_get_TARGET_LOOP_VARIABLE_();
  else
#line 81
  @throw new_JavaLangIndexOutOfBoundsException_init();
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithNSString:withFreemarkerCoreTemplateElement:", "Items", NULL, 0x1, NULL, NULL },
    { "acceptWithFreemarkerCoreEnvironment:", "accept", "V", 0x0, "Lfreemarker.template.TemplateException;Ljava.io.IOException;", NULL },
    { "isNestedBlockRepeater", NULL, "Z", 0x0, NULL, NULL },
    { "dumpWithBoolean:", "dump", "Ljava.lang.String;", 0x4, NULL, NULL },
    { "getNodeTypeSymbol", NULL, "Ljava.lang.String;", 0x0, NULL, NULL },
    { "getParameterCount", NULL, "I", 0x0, NULL, NULL },
    { "getParameterValueWithInt:", "getParameterValue", "Ljava.lang.Object;", 0x0, NULL, NULL },
    { "getParameterRoleWithInt:", "getParameterRole", "Lfreemarker.core.ParameterRole;", 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "loopVarName_", NULL, 0x12, "Ljava.lang.String;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerCoreItems = { 2, "Items", "freemarker.core", NULL, 0x0, 8, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerCoreItems;
}

@end


#line 30
void FreemarkerCoreItems_initWithNSString_withFreemarkerCoreTemplateElement_(FreemarkerCoreItems *self, NSString *loopVariableName, FreemarkerCoreTemplateElement *nestedBlock) {
  (void) FreemarkerCoreTemplateElement_init(self);
  
#line 31
  self->loopVarName_ = loopVariableName;
  [self setNestedBlockWithFreemarkerCoreTemplateElement:nestedBlock];
}


#line 30
FreemarkerCoreItems *new_FreemarkerCoreItems_initWithNSString_withFreemarkerCoreTemplateElement_(NSString *loopVariableName, FreemarkerCoreTemplateElement *nestedBlock) {
  FreemarkerCoreItems *self = [FreemarkerCoreItems alloc];
  FreemarkerCoreItems_initWithNSString_withFreemarkerCoreTemplateElement_(self, loopVariableName, nestedBlock);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreItems)
