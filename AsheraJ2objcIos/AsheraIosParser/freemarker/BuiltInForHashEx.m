//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/BuiltInForHashEx.java
//


#include "BuiltIn.h"
#include "BuiltInForHashEx.h"
#include "Environment.h"
#include "Expression.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "InvalidReferenceException.h"
#include "J2ObjC_source.h"
#include "NonExtendedHashException.h"
#include "TemplateException.h"
#include "TemplateHashModelEx.h"
#include "TemplateModel.h"
#include "TemplateModelException.h"
#include "_ErrorDescriptionBuilder.h"

#line 0 "/Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/BuiltInForHashEx.java"


#line 24
@implementation FreemarkerCoreBuiltInForHashEx

- (id<FreemarkerTemplateTemplateModel>)_evalWithFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env {
  id<FreemarkerTemplateTemplateModel> model = [((FreemarkerCoreExpression *) nil_chk(target_)) evalWithFreemarkerCoreEnvironment:env];
  if ([FreemarkerTemplateTemplateHashModelEx_class_() isInstance:model]) {
    return [self calculateResultWithFreemarkerTemplateTemplateHashModelEx:(id<FreemarkerTemplateTemplateHashModelEx>) check_protocol_cast(model, @protocol(FreemarkerTemplateTemplateHashModelEx)) withFreemarkerCoreEnvironment:env];
  }
  @throw new_FreemarkerCoreNonExtendedHashException_initWithFreemarkerCoreExpression_withFreemarkerTemplateTemplateModel_withFreemarkerCoreEnvironment_(target_, model, env);
}

- (id<FreemarkerTemplateTemplateModel>)calculateResultWithFreemarkerTemplateTemplateHashModelEx:(id<FreemarkerTemplateTemplateHashModelEx>)hashExModel
                                                                  withFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 37
- (FreemarkerCoreInvalidReferenceException *)newNullPropertyExceptionWithNSString:(NSString *)propertyName
                                              withFreemarkerTemplateTemplateModel:(id<FreemarkerTemplateTemplateModel>)tm
                                                    withFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env {
  
#line 39
  if ([((FreemarkerCoreEnvironment *) nil_chk(env)) getFastInvalidReferenceExceptions]) {
    return FreemarkerCoreInvalidReferenceException_get_FAST_INSTANCE_();
  }
  else {
    
#line 42
    return new_FreemarkerCoreInvalidReferenceException_initWithFreemarkerCore_ErrorDescriptionBuilder_withFreemarkerCoreEnvironment_withFreemarkerCoreExpression_(
#line 43
    [new_FreemarkerCore_ErrorDescriptionBuilder_initWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){
#line 44
      @"The exteneded hash (of class ", [[((id<FreemarkerTemplateTemplateModel>) nil_chk(tm)) getClass] getName], @") has returned null for its \"",
#line 45
      propertyName,
#line 46
      @"\" property. This is maybe a bug. The extended hash was returned by this expression:" } count:5 type:NSObject_class_()]) blameWithFreemarkerCoreExpression:
#line 47
      target_],
#line 48
      env, self);
    }
  }

- (instancetype)init {
  FreemarkerCoreBuiltInForHashEx_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "_evalWithFreemarkerCoreEnvironment:", "_eval", "Lfreemarker.template.TemplateModel;", 0x0, "Lfreemarker.template.TemplateException;", NULL },
    { "calculateResultWithFreemarkerTemplateTemplateHashModelEx:withFreemarkerCoreEnvironment:", "calculateResult", "Lfreemarker.template.TemplateModel;", 0x400, "Lfreemarker.template.TemplateModelException;Lfreemarker.core.InvalidReferenceException;", NULL },
    { "newNullPropertyExceptionWithNSString:withFreemarkerTemplateTemplateModel:withFreemarkerCoreEnvironment:", "newNullPropertyException", "Lfreemarker.core.InvalidReferenceException;", 0x4, NULL, NULL },
    { "init", NULL, NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcClassInfo _FreemarkerCoreBuiltInForHashEx = { 2, "BuiltInForHashEx", "freemarker.core", NULL, 0x400, 4, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerCoreBuiltInForHashEx;
}

@end

void FreemarkerCoreBuiltInForHashEx_init(FreemarkerCoreBuiltInForHashEx *self) {
  (void) FreemarkerCoreBuiltIn_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreBuiltInForHashEx)
