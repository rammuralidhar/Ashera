//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/_ErrorDescriptionBuilder.java
//


#include "ClassUtil.h"
#include "Configuration.h"
#include "Expression.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "Logger.h"
#include "ParameterRole.h"
#include "StringLiteral.h"
#include "StringUtil.h"
#include "Template.h"
#include "TemplateElement.h"
#include "TemplateObject.h"
#include "_CoreAPI.h"
#include "_ErrorDescriptionBuilder.h"
#include "_MethodUtil.h"
#include "java/lang/Character.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/Throwable.h"
#include "java/lang/reflect/Constructor.h"
#include "java/lang/reflect/Member.h"
#include "java/lang/reflect/Method.h"

@class FreemarkerCore_ErrorDescriptionBuilder_Blaming;

#line 0 "/Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/_ErrorDescriptionBuilder.java"

@interface FreemarkerCore_ErrorDescriptionBuilder () {
 @public
  NSString *description__;
  IOSObjectArray *descriptionParts_;
  FreemarkerCoreExpression *blamed_;
  jboolean showBlamer_;
  id tip_;
  IOSObjectArray *tips_;
  FreemarkerTemplateTemplate *template__;
}

- (jboolean)containsSingleInterpolatoinLiteralWithFreemarkerCoreExpression:(FreemarkerCoreExpression *)exp
                                                                   withInt:(jint)recursionDepth;

- (FreemarkerCore_ErrorDescriptionBuilder_Blaming *)findBlamingWithFreemarkerCoreTemplateObject:(FreemarkerCoreTemplateObject *)parent
                                                                   withFreemarkerCoreExpression:(FreemarkerCoreExpression *)blamed
                                                                                        withInt:(jint)recursionDepth;

- (void)appendPartsWithJavaLangStringBuffer:(JavaLangStringBuffer *)sb
                          withNSObjectArray:(IOSObjectArray *)parts;

+ (NSString *)toStringWithId:(id)partObj
                 withBoolean:(jboolean)suppressToStringException;

- (IOSObjectArray *)splitToLinesWithNSString:(NSString *)s;

- (FreemarkerCore_ErrorDescriptionBuilder *)tipWithId:(id)tip;

@end

J2OBJC_FIELD_SETTER(FreemarkerCore_ErrorDescriptionBuilder, description__, NSString *)
J2OBJC_FIELD_SETTER(FreemarkerCore_ErrorDescriptionBuilder, descriptionParts_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(FreemarkerCore_ErrorDescriptionBuilder, blamed_, FreemarkerCoreExpression *)
J2OBJC_FIELD_SETTER(FreemarkerCore_ErrorDescriptionBuilder, tip_, id)
J2OBJC_FIELD_SETTER(FreemarkerCore_ErrorDescriptionBuilder, tips_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(FreemarkerCore_ErrorDescriptionBuilder, template__, FreemarkerTemplateTemplate *)

static FreemarkerLogLogger *FreemarkerCore_ErrorDescriptionBuilder_LOG_;
J2OBJC_STATIC_FIELD_GETTER(FreemarkerCore_ErrorDescriptionBuilder, LOG_, FreemarkerLogLogger *)

__attribute__((unused)) static jboolean FreemarkerCore_ErrorDescriptionBuilder_containsSingleInterpolatoinLiteralWithFreemarkerCoreExpression_withInt_(FreemarkerCore_ErrorDescriptionBuilder *self, FreemarkerCoreExpression *exp, jint recursionDepth);

__attribute__((unused)) static FreemarkerCore_ErrorDescriptionBuilder_Blaming *FreemarkerCore_ErrorDescriptionBuilder_findBlamingWithFreemarkerCoreTemplateObject_withFreemarkerCoreExpression_withInt_(FreemarkerCore_ErrorDescriptionBuilder *self, FreemarkerCoreTemplateObject *parent, FreemarkerCoreExpression *blamed, jint recursionDepth);

__attribute__((unused)) static void FreemarkerCore_ErrorDescriptionBuilder_appendPartsWithJavaLangStringBuffer_withNSObjectArray_(FreemarkerCore_ErrorDescriptionBuilder *self, JavaLangStringBuffer *sb, IOSObjectArray *parts);

__attribute__((unused)) static NSString *FreemarkerCore_ErrorDescriptionBuilder_toStringWithId_withBoolean_(id partObj, jboolean suppressToStringException);

__attribute__((unused)) static IOSObjectArray *FreemarkerCore_ErrorDescriptionBuilder_splitToLinesWithNSString_(FreemarkerCore_ErrorDescriptionBuilder *self, NSString *s);

__attribute__((unused)) static FreemarkerCore_ErrorDescriptionBuilder *FreemarkerCore_ErrorDescriptionBuilder_tipWithId_(FreemarkerCore_ErrorDescriptionBuilder *self, id tip);

@interface FreemarkerCore_ErrorDescriptionBuilder_Blaming : NSObject {
 @public
  FreemarkerCoreTemplateObject *blamer_;
  FreemarkerCoreParameterRole *roleOfblamed_;
}

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(FreemarkerCore_ErrorDescriptionBuilder_Blaming)

J2OBJC_FIELD_SETTER(FreemarkerCore_ErrorDescriptionBuilder_Blaming, blamer_, FreemarkerCoreTemplateObject *)
J2OBJC_FIELD_SETTER(FreemarkerCore_ErrorDescriptionBuilder_Blaming, roleOfblamed_, FreemarkerCoreParameterRole *)

__attribute__((unused)) static void FreemarkerCore_ErrorDescriptionBuilder_Blaming_init(FreemarkerCore_ErrorDescriptionBuilder_Blaming *self);

__attribute__((unused)) static FreemarkerCore_ErrorDescriptionBuilder_Blaming *new_FreemarkerCore_ErrorDescriptionBuilder_Blaming_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerCore_ErrorDescriptionBuilder_Blaming)

J2OBJC_INITIALIZED_DEFN(FreemarkerCore_ErrorDescriptionBuilder)


#line 36
@implementation FreemarkerCore_ErrorDescriptionBuilder


#line 48
- (instancetype)initWithNSString:(NSString *)description_ {
  FreemarkerCore_ErrorDescriptionBuilder_initWithNSString_(self, description_);
  return self;
}


#line 58
- (instancetype)initWithNSObjectArray:(IOSObjectArray *)descriptionParts {
  FreemarkerCore_ErrorDescriptionBuilder_initWithNSObjectArray_(self, descriptionParts);
  return self;
}

- (NSString *)description {
  return [self toStringWithFreemarkerCoreTemplateElement:nil withBoolean:YES];
}

- (NSString *)toStringWithFreemarkerCoreTemplateElement:(FreemarkerCoreTemplateElement *)parentElement
                                            withBoolean:(jboolean)showTips {
  if (blamed_ == nil && tips_ == nil && tip_ == nil && descriptionParts_ == nil) return description__;
  
#line 70
  JavaLangStringBuffer *sb = new_JavaLangStringBuffer_initWithInt_(200);
  
#line 72
  if (parentElement != nil && blamed_ != nil && showBlamer_) {
    @try {
      FreemarkerCore_ErrorDescriptionBuilder_Blaming *blaming = FreemarkerCore_ErrorDescriptionBuilder_findBlamingWithFreemarkerCoreTemplateObject_withFreemarkerCoreExpression_withInt_(self, parentElement, blamed_, 0);
      if (blaming != nil) {
        (void) [sb appendWithNSString:@"For "];
        NSString *nss = [((FreemarkerCoreTemplateObject *) nil_chk(blaming->blamer_)) getNodeTypeSymbol];
        jchar q = [((NSString *) nil_chk(nss)) indexOf:'"'] == -1 ? '"' : '`';
        (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([sb appendWithChar:q])) appendWithNSString:nss])) appendWithChar:q];
        (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([sb appendWithNSString:@" "])) appendWithId:blaming->roleOfblamed_])) appendWithNSString:@": "];
      }
    }
    @catch (
#line 82
    JavaLangThrowable *e) {
      
#line 85
      [((FreemarkerLogLogger *) nil_chk(FreemarkerCore_ErrorDescriptionBuilder_LOG_)) errorWithNSString:@"Error when searching blamer for better error message." withJavaLangThrowable:e];
    }
  }
  
#line 89
  if (description__ != nil) {
    (void) [sb appendWithNSString:description__];
  }
  else {
    
#line 92
    FreemarkerCore_ErrorDescriptionBuilder_appendPartsWithJavaLangStringBuffer_withNSObjectArray_(self, sb, descriptionParts_);
  }
  
#line 95
  NSString *extraTip = nil;
  if (blamed_ != nil) {
    
#line 98
    for (jint idx = [sb length] - 1; idx >= 0 && JavaLangCharacter_isWhitespaceWithChar_([sb charAtWithInt:idx]); idx--) {
      (void) [sb deleteCharAtWithInt:idx];
    }
    
#line 102
    jchar lastChar = [sb length] > 0 ? ([sb charAtWithInt:[sb length] - 1]) : 0;
    if (lastChar != 0) {
      (void) [sb appendWithChar:0x000a];
    }
    if (lastChar != ':') {
      (void) [sb appendWithNSString:@"The blamed expression:\n"];
    }
    
#line 110
    IOSObjectArray *lines = FreemarkerCore_ErrorDescriptionBuilder_splitToLinesWithNSString_(self, [blamed_ description]);
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(lines))->size_; i++) {
      (void) [sb appendWithNSString:i == 0 ? @"==> " : @"\n    "];
      (void) [sb appendWithNSString:IOSObjectArray_Get(lines, i)];
    }
    
#line 116
    (void) [sb appendWithNSString:@"  ["];
    (void) [sb appendWithNSString:[blamed_ getStartLocation]];
    (void) [sb appendWithChar:']'];
    
#line 121
    if (FreemarkerCore_ErrorDescriptionBuilder_containsSingleInterpolatoinLiteralWithFreemarkerCoreExpression_withInt_(self, blamed_, 0)) {
      extraTip = @"It has been noticed that you are using ${...} as the sole content of a quoted string. That does nothing but forcably converts the value inside ${...} to string (as it inserts it into the enclosing string). If that's not what you meant, just remove the quotation marks, ${ and }; you don't need them. If you indeed wanted to convert to string, use myExpression?string instead.";
    }
  }
  
#line 130
  if (showTips) {
    jint allTipsLen = (tips_ != nil ? tips_->size_ : 0) + (tip_ != nil ? 1 : 0) + (extraTip != nil ? 1 : 0);
    IOSObjectArray *allTips;
    if (tips_ != nil && allTipsLen == tips_->size_) {
      allTips = tips_;
    }
    else {
      
#line 136
      allTips = [IOSObjectArray newArrayWithLength:allTipsLen type:NSObject_class_()];
      jint dst = 0;
      if (tip_ != nil) (void) IOSObjectArray_Set(allTips, dst++, tip_);
      if (tips_ != nil) {
        for (jint i = 0; i < tips_->size_; i++) {
          (void) IOSObjectArray_Set(allTips, dst++, IOSObjectArray_Get(tips_, i));
        }
      }
      if (extraTip != nil) (void) IOSObjectArray_Set(allTips, dst++, extraTip);
    }
    if (allTips != nil && allTips->size_ > 0) {
      (void) [sb appendWithNSString:@"\n\n"];
      for (jint i = 0; i < allTips->size_; i++) {
        if (i != 0) (void) [sb appendWithChar:0x000a];
        (void) [((JavaLangStringBuffer *) nil_chk([sb appendWithNSString:FreemarkerCore_CoreAPI_get_ERROR_MESSAGE_HR_()])) appendWithChar:0x000a];
        (void) [sb appendWithNSString:@"Tip: "];
        id tip = IOSObjectArray_Get(allTips, i);
        if (!([IOSClass_arrayType(NSObject_class_(), 1) isInstance:tip])) {
          (void) [sb appendWithId:IOSObjectArray_Get(allTips, i)];
        }
        else {
          
#line 156
          FreemarkerCore_ErrorDescriptionBuilder_appendPartsWithJavaLangStringBuffer_withNSObjectArray_(self, sb, (IOSObjectArray *) check_class_cast(tip, [IOSObjectArray class]));
        }
      }
      (void) [((JavaLangStringBuffer *) nil_chk([sb appendWithChar:0x000a])) appendWithNSString:FreemarkerCore_CoreAPI_get_ERROR_MESSAGE_HR_()];
    }
  }
  
#line 163
  return [sb description];
}


#line 166
- (jboolean)containsSingleInterpolatoinLiteralWithFreemarkerCoreExpression:(FreemarkerCoreExpression *)exp
                                                                   withInt:(jint)recursionDepth {
  return FreemarkerCore_ErrorDescriptionBuilder_containsSingleInterpolatoinLiteralWithFreemarkerCoreExpression_withInt_(self, exp, recursionDepth);
}


#line 186
- (FreemarkerCore_ErrorDescriptionBuilder_Blaming *)findBlamingWithFreemarkerCoreTemplateObject:(FreemarkerCoreTemplateObject *)parent
                                                                   withFreemarkerCoreExpression:(FreemarkerCoreExpression *)blamed
                                                                                        withInt:(jint)recursionDepth {
  return FreemarkerCore_ErrorDescriptionBuilder_findBlamingWithFreemarkerCoreTemplateObject_withFreemarkerCoreExpression_withInt_(self, parent, blamed, recursionDepth);
}


#line 206
- (void)appendPartsWithJavaLangStringBuffer:(JavaLangStringBuffer *)sb
                          withNSObjectArray:(IOSObjectArray *)parts {
  FreemarkerCore_ErrorDescriptionBuilder_appendPartsWithJavaLangStringBuffer_withNSObjectArray_(self, sb, parts);
}


#line 247
+ (NSString *)toStringWithId:(id)partObj {
  return FreemarkerCore_ErrorDescriptionBuilder_toStringWithId_(partObj);
}

+ (NSString *)tryToStringWithId:(id)partObj {
  return FreemarkerCore_ErrorDescriptionBuilder_tryToStringWithId_(partObj);
}

+ (NSString *)toStringWithId:(id)partObj
                 withBoolean:(jboolean)suppressToStringException {
  return FreemarkerCore_ErrorDescriptionBuilder_toStringWithId_withBoolean_(partObj, suppressToStringException);
}


#line 269
- (IOSObjectArray *)splitToLinesWithNSString:(NSString *)s {
  return FreemarkerCore_ErrorDescriptionBuilder_splitToLinesWithNSString_(self, s);
}


#line 279
- (FreemarkerCore_ErrorDescriptionBuilder *)template__WithFreemarkerTemplateTemplate:(FreemarkerTemplateTemplate *)template_ {
  self->template__ = template_;
  return self;
}

- (FreemarkerCore_ErrorDescriptionBuilder *)blameWithFreemarkerCoreExpression:(FreemarkerCoreExpression *)blamedExpr {
  self->blamed_ = blamedExpr;
  return self;
}

- (FreemarkerCore_ErrorDescriptionBuilder *)showBlamerWithBoolean:(jboolean)showBlamer {
  self->showBlamer_ = showBlamer;
  return self;
}

- (FreemarkerCore_ErrorDescriptionBuilder *)tipWithNSString:(NSString *)tip {
  (void) FreemarkerCore_ErrorDescriptionBuilder_tipWithId_(self, tip);
  return self;
}

- (FreemarkerCore_ErrorDescriptionBuilder *)tipWithNSObjectArray:(IOSObjectArray *)tip {
  (void) FreemarkerCore_ErrorDescriptionBuilder_tipWithId_(self, tip);
  return self;
}

- (FreemarkerCore_ErrorDescriptionBuilder *)tipWithId:(id)tip {
  return FreemarkerCore_ErrorDescriptionBuilder_tipWithId_(self, tip);
}


#line 324
- (FreemarkerCore_ErrorDescriptionBuilder *)tipsWithNSObjectArray:(IOSObjectArray *)tips {
  if (self->tips_ == nil) {
    self->tips_ = tips;
  }
  else {
    
#line 328
    jint origTipsLen = self->tips_->size_;
    jint additionalTipsLen = ((IOSObjectArray *) nil_chk(tips))->size_;
    
#line 331
    IOSObjectArray *newTips = [IOSObjectArray newArrayWithLength:origTipsLen + additionalTipsLen type:NSObject_class_()];
    for (jint i = 0; i < origTipsLen; i++) {
      (void) IOSObjectArray_Set(newTips, i, IOSObjectArray_Get(self->tips_, i));
    }
    for (jint i = 0; i < additionalTipsLen; i++) {
      (void) IOSObjectArray_Set(newTips, origTipsLen + i, IOSObjectArray_Get(tips, i));
    }
    self->tips_ = newTips;
  }
  return self;
}

+ (void)initialize {
  if (self == [FreemarkerCore_ErrorDescriptionBuilder class]) {
    FreemarkerCore_ErrorDescriptionBuilder_LOG_ = FreemarkerLogLogger_getLoggerWithNSString_(
#line 38
    @"freemarker.runtime");
    J2OBJC_SET_INITIALIZED(FreemarkerCore_ErrorDescriptionBuilder)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithNSString:", "_ErrorDescriptionBuilder", NULL, 0x1, NULL, NULL },
    { "initWithNSObjectArray:", "_ErrorDescriptionBuilder", NULL, 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "toStringWithFreemarkerCoreTemplateElement:withBoolean:", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "containsSingleInterpolatoinLiteralWithFreemarkerCoreExpression:withInt:", "containsSingleInterpolatoinLiteral", "Z", 0x2, NULL, NULL },
    { "findBlamingWithFreemarkerCoreTemplateObject:withFreemarkerCoreExpression:withInt:", "findBlaming", "Lfreemarker.core._ErrorDescriptionBuilder$Blaming;", 0x2, NULL, NULL },
    { "appendPartsWithJavaLangStringBuffer:withNSObjectArray:", "appendParts", "V", 0x2, NULL, NULL },
    { "toStringWithId:", "toString", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "tryToStringWithId:", "tryToString", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "toStringWithId:withBoolean:", "toString", "Ljava.lang.String;", 0xa, NULL, NULL },
    { "splitToLinesWithNSString:", "splitToLines", "[Ljava.lang.String;", 0x2, NULL, NULL },
    { "template__WithFreemarkerTemplateTemplate:", "template", "Lfreemarker.core._ErrorDescriptionBuilder;", 0x1, NULL, NULL },
    { "blameWithFreemarkerCoreExpression:", "blame", "Lfreemarker.core._ErrorDescriptionBuilder;", 0x1, NULL, NULL },
    { "showBlamerWithBoolean:", "showBlamer", "Lfreemarker.core._ErrorDescriptionBuilder;", 0x1, NULL, NULL },
    { "tipWithNSString:", "tip", "Lfreemarker.core._ErrorDescriptionBuilder;", 0x1, NULL, NULL },
    { "tipWithNSObjectArray:", "tip", "Lfreemarker.core._ErrorDescriptionBuilder;", 0x1, NULL, NULL },
    { "tipWithId:", "tip", "Lfreemarker.core._ErrorDescriptionBuilder;", 0x2, NULL, NULL },
    { "tipsWithNSObjectArray:", "tips", "Lfreemarker.core._ErrorDescriptionBuilder;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "LOG_", NULL, 0x1a, "Lfreemarker.log.Logger;", &FreemarkerCore_ErrorDescriptionBuilder_LOG_, NULL,  },
    { "description__", "description", 0x12, "Ljava.lang.String;", NULL, NULL,  },
    { "descriptionParts_", NULL, 0x12, "[Ljava.lang.Object;", NULL, NULL,  },
    { "blamed_", NULL, 0x2, "Lfreemarker.core.Expression;", NULL, NULL,  },
    { "showBlamer_", NULL, 0x2, "Z", NULL, NULL,  },
    { "tip_", NULL, 0x2, "Ljava.lang.Object;", NULL, NULL,  },
    { "tips_", NULL, 0x2, "[Ljava.lang.Object;", NULL, NULL,  },
    { "template__", "template", 0x2, "Lfreemarker.template.Template;", NULL, NULL,  },
  };
  static const char *inner_classes[] = {"Lfreemarker.core._ErrorDescriptionBuilder$Blaming;"};
  static const J2ObjcClassInfo _FreemarkerCore_ErrorDescriptionBuilder = { 2, "_ErrorDescriptionBuilder", "freemarker.core", NULL, 0x1, 18, methods, 8, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_FreemarkerCore_ErrorDescriptionBuilder;
}

@end


#line 48
void FreemarkerCore_ErrorDescriptionBuilder_initWithNSString_(FreemarkerCore_ErrorDescriptionBuilder *self, NSString *description_) {
  (void) NSObject_init(self);
  
#line 49
  self->description__ = description_;
  self->descriptionParts_ = nil;
}


#line 48
FreemarkerCore_ErrorDescriptionBuilder *new_FreemarkerCore_ErrorDescriptionBuilder_initWithNSString_(NSString *description_) {
  FreemarkerCore_ErrorDescriptionBuilder *self = [FreemarkerCore_ErrorDescriptionBuilder alloc];
  FreemarkerCore_ErrorDescriptionBuilder_initWithNSString_(self, description_);
  return self;
}


#line 58
void FreemarkerCore_ErrorDescriptionBuilder_initWithNSObjectArray_(FreemarkerCore_ErrorDescriptionBuilder *self, IOSObjectArray *descriptionParts) {
  (void) NSObject_init(self);
  
#line 59
  self->descriptionParts_ = descriptionParts;
  self->description__ = nil;
}


#line 58
FreemarkerCore_ErrorDescriptionBuilder *new_FreemarkerCore_ErrorDescriptionBuilder_initWithNSObjectArray_(IOSObjectArray *descriptionParts) {
  FreemarkerCore_ErrorDescriptionBuilder *self = [FreemarkerCore_ErrorDescriptionBuilder alloc];
  FreemarkerCore_ErrorDescriptionBuilder_initWithNSObjectArray_(self, descriptionParts);
  return self;
}


#line 166
jboolean FreemarkerCore_ErrorDescriptionBuilder_containsSingleInterpolatoinLiteralWithFreemarkerCoreExpression_withInt_(FreemarkerCore_ErrorDescriptionBuilder *self, FreemarkerCoreExpression *exp, jint recursionDepth) {
  if (exp == nil) return NO;
  
#line 170
  if (recursionDepth > 20) return NO;
  
#line 172
  if ([exp isKindOfClass:[FreemarkerCoreStringLiteral class]] && [((FreemarkerCoreStringLiteral *) nil_chk(((FreemarkerCoreStringLiteral *) check_class_cast(exp, [FreemarkerCoreStringLiteral class])))) isSingleInterpolationLiteral]) return YES;
  
#line 174
  jint paramCnt = [((FreemarkerCoreExpression *) nil_chk(exp)) getParameterCount];
  for (jint i = 0; i < paramCnt; i++) {
    id paramValue = [exp getParameterValueWithInt:i];
    if ([paramValue isKindOfClass:[FreemarkerCoreExpression class]]) {
      jboolean result = FreemarkerCore_ErrorDescriptionBuilder_containsSingleInterpolatoinLiteralWithFreemarkerCoreExpression_withInt_(self, (FreemarkerCoreExpression *) check_class_cast(paramValue, [FreemarkerCoreExpression class]), recursionDepth + 1);
      if (result) return YES;
    }
  }
  
#line 183
  return NO;
}


#line 186
FreemarkerCore_ErrorDescriptionBuilder_Blaming *FreemarkerCore_ErrorDescriptionBuilder_findBlamingWithFreemarkerCoreTemplateObject_withFreemarkerCoreExpression_withInt_(FreemarkerCore_ErrorDescriptionBuilder *self, FreemarkerCoreTemplateObject *parent, FreemarkerCoreExpression *blamed, jint recursionDepth) {
  
#line 188
  if (recursionDepth > 50) return nil;
  
#line 190
  jint paramCnt = [((FreemarkerCoreTemplateObject *) nil_chk(parent)) getParameterCount];
  for (jint i = 0; i < paramCnt; i++) {
    id paramValue = [parent getParameterValueWithInt:i];
    if (paramValue == blamed) {
      FreemarkerCore_ErrorDescriptionBuilder_Blaming *blaming = new_FreemarkerCore_ErrorDescriptionBuilder_Blaming_init();
      blaming->blamer_ = parent;
      blaming->roleOfblamed_ = [parent getParameterRoleWithInt:i];
      return blaming;
    }
    else
#line 198
    if ([paramValue isKindOfClass:[FreemarkerCoreTemplateObject class]]) {
      FreemarkerCore_ErrorDescriptionBuilder_Blaming *blaming = FreemarkerCore_ErrorDescriptionBuilder_findBlamingWithFreemarkerCoreTemplateObject_withFreemarkerCoreExpression_withInt_(self, (FreemarkerCoreTemplateObject *) check_class_cast(paramValue, [FreemarkerCoreTemplateObject class]), blamed, recursionDepth + 1);
      if (blaming != nil) return blaming;
    }
  }
  return nil;
}


#line 206
void FreemarkerCore_ErrorDescriptionBuilder_appendPartsWithJavaLangStringBuffer_withNSObjectArray_(FreemarkerCore_ErrorDescriptionBuilder *self, JavaLangStringBuffer *sb, IOSObjectArray *parts) {
  FreemarkerTemplateTemplate *template_ = self->template__ != nil ? self->template__ : (self->blamed_ != nil ? [self->blamed_ getTemplate] : nil);
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(parts))->size_; i++) {
    id partObj = IOSObjectArray_Get(parts, i);
    if ([IOSClass_arrayType(NSObject_class_(), 1) isInstance:partObj]) {
      FreemarkerCore_ErrorDescriptionBuilder_appendPartsWithJavaLangStringBuffer_withNSObjectArray_(self, sb, (IOSObjectArray *) check_class_cast(partObj, [IOSObjectArray class]));
    }
    else {
      
#line 213
      NSString *partStr;
      partStr = FreemarkerCore_ErrorDescriptionBuilder_tryToStringWithId_(partObj);
      if (partStr == nil) {
        partStr = @"null";
      }
      
#line 219
      if (template_ != nil) {
        if (((jint) [((NSString *) nil_chk(partStr)) length]) > 4 &&
#line 221
        [partStr charAtWithInt:0] == '<' &&
#line 222
        (
#line 223
        ([partStr charAtWithInt:1] == '#' || [partStr charAtWithInt:1] == '@') || (
#line 224
        ([partStr charAtWithInt:1] == '/') && ([partStr charAtWithInt:2] == '#' || [partStr charAtWithInt:2] == '@'))) &&
#line 226
        [partStr charAtWithInt:((jint) [partStr length]) - 1] == '>') {
          if ([template_ getActualTagSyntax] == FreemarkerTemplateConfiguration_SQUARE_BRACKET_TAG_SYNTAX) {
            (void) [((JavaLangStringBuffer *) nil_chk(sb)) appendWithChar:'['];
            (void) [sb appendWithNSString:[partStr substring:1 endIndex:((jint) [partStr length]) - 1]];
            (void) [sb appendWithChar:']'];
          }
          else {
            
#line 232
            (void) [((JavaLangStringBuffer *) nil_chk(sb)) appendWithNSString:partStr];
          }
        }
        else {
          
#line 235
          (void) [((JavaLangStringBuffer *) nil_chk(sb)) appendWithNSString:partStr];
        }
      }
      else {
        
#line 238
        (void) [((JavaLangStringBuffer *) nil_chk(sb)) appendWithNSString:partStr];
      }
    }
  }
}


#line 247
NSString *FreemarkerCore_ErrorDescriptionBuilder_toStringWithId_(id partObj) {
  FreemarkerCore_ErrorDescriptionBuilder_initialize();
  
#line 248
  return FreemarkerCore_ErrorDescriptionBuilder_toStringWithId_withBoolean_(partObj, NO);
}


#line 251
NSString *FreemarkerCore_ErrorDescriptionBuilder_tryToStringWithId_(id partObj) {
  FreemarkerCore_ErrorDescriptionBuilder_initialize();
  
#line 252
  return FreemarkerCore_ErrorDescriptionBuilder_toStringWithId_withBoolean_(partObj, YES);
}


#line 255
NSString *FreemarkerCore_ErrorDescriptionBuilder_toStringWithId_withBoolean_(id partObj, jboolean suppressToStringException) {
  FreemarkerCore_ErrorDescriptionBuilder_initialize();
  
#line 256
  NSString *partStr;
  if (partObj == nil) {
    return nil;
  }
  else
#line 259
  if ([partObj isKindOfClass:[IOSClass class]]) {
    partStr = FreemarkerTemplateUtilityClassUtil_getShortClassNameWithIOSClass_((IOSClass *) check_class_cast(partObj, [IOSClass class]));
  }
  else
#line 261
  if ([partObj isKindOfClass:[JavaLangReflectMethod class]] || [partObj isKindOfClass:[JavaLangReflectConstructor class]]) {
    partStr = FreemarkerExtBeans_MethodUtil_toStringWithJavaLangReflectMember_((id<JavaLangReflectMember>) check_protocol_cast(partObj, @protocol(JavaLangReflectMember)));
  }
  else {
    
#line 264
    partStr = suppressToStringException ? FreemarkerTemplateUtilityStringUtil_tryToStringWithId_(partObj) : [partObj description];
  }
  return partStr;
}


#line 269
IOSObjectArray *FreemarkerCore_ErrorDescriptionBuilder_splitToLinesWithNSString_(FreemarkerCore_ErrorDescriptionBuilder *self, NSString *s) {
  s = FreemarkerTemplateUtilityStringUtil_replaceWithNSString_withNSString_withNSString_(s, @"\x0d\n", @"\n");
  s = FreemarkerTemplateUtilityStringUtil_replaceWithNSString_withNSString_withNSString_(s, @"\x0d", @"\n");
  IOSObjectArray *lines = FreemarkerTemplateUtilityStringUtil_splitWithNSString_withChar_(s, 0x000a);
  return lines;
}


#line 304
FreemarkerCore_ErrorDescriptionBuilder *FreemarkerCore_ErrorDescriptionBuilder_tipWithId_(FreemarkerCore_ErrorDescriptionBuilder *self, id tip) {
  if (self->tip_ == nil) {
    self->tip_ = tip;
  }
  else {
    
#line 308
    if (self->tips_ == nil) {
      self->tips_ = [IOSObjectArray newArrayWithObjects:(id[]){ tip } count:1 type:NSObject_class_()];
    }
    else {
      
#line 311
      jint origTipsLen = self->tips_->size_;
      
#line 313
      IOSObjectArray *newTips = [IOSObjectArray newArrayWithLength:origTipsLen + 1 type:NSObject_class_()];
      for (jint i = 0; i < origTipsLen; i++) {
        (void) IOSObjectArray_Set(newTips, i, IOSObjectArray_Get(self->tips_, i));
      }
      (void) IOSObjectArray_Set(newTips, origTipsLen, tip);
      self->tips_ = newTips;
    }
  }
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCore_ErrorDescriptionBuilder)


#line 343
@implementation FreemarkerCore_ErrorDescriptionBuilder_Blaming

- (instancetype)init {
  FreemarkerCore_ErrorDescriptionBuilder_Blaming_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", NULL, NULL, 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "blamer_", NULL, 0x0, "Lfreemarker.core.TemplateObject;", NULL, NULL,  },
    { "roleOfblamed_", NULL, 0x0, "Lfreemarker.core.ParameterRole;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerCore_ErrorDescriptionBuilder_Blaming = { 2, "Blaming", "freemarker.core", "_ErrorDescriptionBuilder", 0xa, 1, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerCore_ErrorDescriptionBuilder_Blaming;
}

@end

void FreemarkerCore_ErrorDescriptionBuilder_Blaming_init(FreemarkerCore_ErrorDescriptionBuilder_Blaming *self) {
  (void) NSObject_init(self);
}

FreemarkerCore_ErrorDescriptionBuilder_Blaming *new_FreemarkerCore_ErrorDescriptionBuilder_Blaming_init() {
  FreemarkerCore_ErrorDescriptionBuilder_Blaming *self = [FreemarkerCore_ErrorDescriptionBuilder_Blaming alloc];
  FreemarkerCore_ErrorDescriptionBuilder_Blaming_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCore_ErrorDescriptionBuilder_Blaming)
