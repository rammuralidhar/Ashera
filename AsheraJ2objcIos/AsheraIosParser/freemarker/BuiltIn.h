//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/BuiltIn.java
//

#ifndef _FreemarkerCoreBuiltIn_H_
#define _FreemarkerCoreBuiltIn_H_

#include "Expression.h"
#include "J2ObjC_header.h"

@class FreemarkerCoreFMParserTokenManager;
@class FreemarkerCoreParameterRole;
@class FreemarkerCoreToken;
@class FreemarkerTemplateTemplateModelException;
@class IOSObjectArray;
@class JavaUtilHashMap;
@protocol JavaUtilList;

#define FreemarkerCoreBuiltIn_NUMBER_OF_BIS 252

/**
 @brief The <code>?
 </code> operator used for things like <code>foo?upper_case</code> .
 */
@interface FreemarkerCoreBuiltIn : FreemarkerCoreExpression < NSCopying > {
 @public
  FreemarkerCoreExpression *target_;
  NSString *key_;
}

#pragma mark Public

- (NSString *)getCanonicalForm;

#pragma mark Protected

- (void)checkMethodArgCountWithInt:(jint)argCnt
                           withInt:(jint)expectedCnt;

- (void)checkMethodArgCountWithInt:(jint)argCnt
                           withInt:(jint)minCnt
                           withInt:(jint)maxCnt;

- (void)checkMethodArgCountWithJavaUtilList:(id<JavaUtilList>)args
                                    withInt:(jint)expectedCnt;

- (void)checkMethodArgCountWithJavaUtilList:(id<JavaUtilList>)args
                                    withInt:(jint)minCnt
                                    withInt:(jint)maxCnt;

- (FreemarkerCoreExpression *)deepCloneWithIdentifierReplaced_innerWithNSString:(NSString *)replacedIdentifier
                                                   withFreemarkerCoreExpression:(FreemarkerCoreExpression *)replacement
                                 withFreemarkerCoreExpression_ReplacemenetState:(FreemarkerCoreExpression_ReplacemenetState *)replacementState;

/**
 @brief Gets a method argument and checks if it's a number; it does NOT check if <code>args</code> is big enough.
 */
- (NSNumber *)getNumberMethodArgWithJavaUtilList:(id<JavaUtilList>)args
                                         withInt:(jint)argIdx;

/**
 @brief Same as #getStringMethodArg , but checks if <code>args</code> is big enough, and returns <code>null</code> if it isn't.
 */
- (NSString *)getOptStringMethodArgWithJavaUtilList:(id<JavaUtilList>)args
                                            withInt:(jint)argIdx;

/**
 @brief Gets a method argument and checks if it's a string; it does NOT check if <code>args</code> is big enough.
 */
- (NSString *)getStringMethodArgWithJavaUtilList:(id<JavaUtilList>)args
                                         withInt:(jint)argIdx;

- (FreemarkerTemplateTemplateModelException *)newMethodArgInvalidValueExceptionWithInt:(jint)argIdx
                                                                     withNSObjectArray:(IOSObjectArray *)details OBJC_METHOD_FAMILY_NONE;

- (FreemarkerTemplateTemplateModelException *)newMethodArgsInvalidValueExceptionWithNSObjectArray:(IOSObjectArray *)details OBJC_METHOD_FAMILY_NONE;

#pragma mark Package-Private

- (instancetype)init;

- (NSString *)getNodeTypeSymbol;

- (jint)getParameterCount;

- (FreemarkerCoreParameterRole *)getParameterRoleWithInt:(jint)idx;

- (id)getParameterValueWithInt:(jint)idx;

- (jboolean)isLiteral;

/**
 @param target Left-hand-operand expression
 @param keyTk Built-in name token
 */
+ (FreemarkerCoreBuiltIn *)newBuiltInWithInt:(jint)incompatibleImprovements
                withFreemarkerCoreExpression:(FreemarkerCoreExpression *)target
                     withFreemarkerCoreToken:(FreemarkerCoreToken *)keyTk
      withFreemarkerCoreFMParserTokenManager:(FreemarkerCoreFMParserTokenManager *)tokenManager OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_STATIC_INIT(FreemarkerCoreBuiltIn)

J2OBJC_FIELD_SETTER(FreemarkerCoreBuiltIn, target_, FreemarkerCoreExpression *)
J2OBJC_FIELD_SETTER(FreemarkerCoreBuiltIn, key_, NSString *)

J2OBJC_STATIC_FIELD_GETTER(FreemarkerCoreBuiltIn, NUMBER_OF_BIS, jint)

FOUNDATION_EXPORT JavaUtilHashMap *FreemarkerCoreBuiltIn_builtins_;
J2OBJC_STATIC_FIELD_GETTER(FreemarkerCoreBuiltIn, builtins_, JavaUtilHashMap *)

FOUNDATION_EXPORT FreemarkerCoreBuiltIn *FreemarkerCoreBuiltIn_newBuiltInWithInt_withFreemarkerCoreExpression_withFreemarkerCoreToken_withFreemarkerCoreFMParserTokenManager_(jint incompatibleImprovements, FreemarkerCoreExpression *target, FreemarkerCoreToken *keyTk, FreemarkerCoreFMParserTokenManager *tokenManager);

FOUNDATION_EXPORT void FreemarkerCoreBuiltIn_init(FreemarkerCoreBuiltIn *self);

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerCoreBuiltIn)

#endif // _FreemarkerCoreBuiltIn_H_
