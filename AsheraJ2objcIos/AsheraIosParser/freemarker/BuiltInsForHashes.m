//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/BuiltInsForHashes.java
//


#include "BuiltInForHashEx.h"
#include "BuiltInsForHashes.h"
#include "CollectionAndSequence.h"
#include "Environment.h"
#include "IOSClass.h"
#include "InvalidReferenceException.h"
#include "J2ObjC_source.h"
#include "TemplateCollectionModel.h"
#include "TemplateHashModelEx.h"
#include "TemplateModel.h"
#include "TemplateModelException.h"
#include "TemplateSequenceModel.h"

#line 0 "/Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/BuiltInsForHashes.java"

@interface FreemarkerCoreBuiltInsForHashes ()

- (instancetype)init;

@end

__attribute__((unused)) static void FreemarkerCoreBuiltInsForHashes_init(FreemarkerCoreBuiltInsForHashes *self);

__attribute__((unused)) static FreemarkerCoreBuiltInsForHashes *new_FreemarkerCoreBuiltInsForHashes_init() NS_RETURNS_RETAINED;


#line 28
@implementation FreemarkerCoreBuiltInsForHashes


#line 51
- (instancetype)init {
  FreemarkerCoreBuiltInsForHashes_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "BuiltInsForHashes", NULL, 0x2, NULL, NULL },
  };
  static const char *inner_classes[] = {"Lfreemarker.core.BuiltInsForHashes$keysBI;", "Lfreemarker.core.BuiltInsForHashes$valuesBI;"};
  static const J2ObjcClassInfo _FreemarkerCoreBuiltInsForHashes = { 2, "BuiltInsForHashes", "freemarker.core", NULL, 0x0, 1, methods, 0, NULL, 0, NULL, 2, inner_classes, NULL, NULL };
  return &_FreemarkerCoreBuiltInsForHashes;
}

@end


#line 51
void FreemarkerCoreBuiltInsForHashes_init(FreemarkerCoreBuiltInsForHashes *self) {
  (void) NSObject_init(self);
}


#line 51
FreemarkerCoreBuiltInsForHashes *new_FreemarkerCoreBuiltInsForHashes_init() {
  FreemarkerCoreBuiltInsForHashes *self = [FreemarkerCoreBuiltInsForHashes alloc];
  FreemarkerCoreBuiltInsForHashes_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreBuiltInsForHashes)


#line 30
@implementation FreemarkerCoreBuiltInsForHashes_keysBI

- (id<FreemarkerTemplateTemplateModel>)calculateResultWithFreemarkerTemplateTemplateHashModelEx:(id<FreemarkerTemplateTemplateHashModelEx>)hashExModel
                                                                  withFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env {
  
#line 34
  id<FreemarkerTemplateTemplateCollectionModel> keys = [((id<FreemarkerTemplateTemplateHashModelEx>) nil_chk(hashExModel)) keys];
  if (keys == nil) @throw [self newNullPropertyExceptionWithNSString:@"keys" withFreemarkerTemplateTemplateModel:hashExModel withFreemarkerCoreEnvironment:env];
  return [FreemarkerTemplateTemplateSequenceModel_class_() isInstance:keys] ? ((id) keys) : new_FreemarkerCoreCollectionAndSequence_initWithFreemarkerTemplateTemplateCollectionModel_(keys);
}

- (instancetype)init {
  FreemarkerCoreBuiltInsForHashes_keysBI_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "calculateResultWithFreemarkerTemplateTemplateHashModelEx:withFreemarkerCoreEnvironment:", "calculateResult", "Lfreemarker.template.TemplateModel;", 0x0, "Lfreemarker.template.TemplateModelException;Lfreemarker.core.InvalidReferenceException;", NULL },
    { "init", NULL, NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcClassInfo _FreemarkerCoreBuiltInsForHashes_keysBI = { 2, "keysBI", "freemarker.core", "BuiltInsForHashes", 0x8, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerCoreBuiltInsForHashes_keysBI;
}

@end

void FreemarkerCoreBuiltInsForHashes_keysBI_init(FreemarkerCoreBuiltInsForHashes_keysBI *self) {
  (void) FreemarkerCoreBuiltInForHashEx_init(self);
}

FreemarkerCoreBuiltInsForHashes_keysBI *new_FreemarkerCoreBuiltInsForHashes_keysBI_init() {
  FreemarkerCoreBuiltInsForHashes_keysBI *self = [FreemarkerCoreBuiltInsForHashes_keysBI alloc];
  FreemarkerCoreBuiltInsForHashes_keysBI_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreBuiltInsForHashes_keysBI)


#line 41
@implementation FreemarkerCoreBuiltInsForHashes_valuesBI


#line 42
- (id<FreemarkerTemplateTemplateModel>)calculateResultWithFreemarkerTemplateTemplateHashModelEx:(id<FreemarkerTemplateTemplateHashModelEx>)hashExModel
                                                                  withFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env {
  
#line 44
  id<FreemarkerTemplateTemplateCollectionModel> values = [((id<FreemarkerTemplateTemplateHashModelEx>) nil_chk(hashExModel)) values];
  if (values == nil) @throw [self newNullPropertyExceptionWithNSString:@"values" withFreemarkerTemplateTemplateModel:hashExModel withFreemarkerCoreEnvironment:env];
  return [FreemarkerTemplateTemplateSequenceModel_class_() isInstance:values] ? ((id) values) : new_FreemarkerCoreCollectionAndSequence_initWithFreemarkerTemplateTemplateCollectionModel_(values);
}

- (instancetype)init {
  FreemarkerCoreBuiltInsForHashes_valuesBI_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "calculateResultWithFreemarkerTemplateTemplateHashModelEx:withFreemarkerCoreEnvironment:", "calculateResult", "Lfreemarker.template.TemplateModel;", 0x0, "Lfreemarker.template.TemplateModelException;Lfreemarker.core.InvalidReferenceException;", NULL },
    { "init", NULL, NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcClassInfo _FreemarkerCoreBuiltInsForHashes_valuesBI = { 2, "valuesBI", "freemarker.core", "BuiltInsForHashes", 0x8, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerCoreBuiltInsForHashes_valuesBI;
}

@end

void FreemarkerCoreBuiltInsForHashes_valuesBI_init(FreemarkerCoreBuiltInsForHashes_valuesBI *self) {
  (void) FreemarkerCoreBuiltInForHashEx_init(self);
}

FreemarkerCoreBuiltInsForHashes_valuesBI *new_FreemarkerCoreBuiltInsForHashes_valuesBI_init() {
  FreemarkerCoreBuiltInsForHashes_valuesBI *self = [FreemarkerCoreBuiltInsForHashes_valuesBI alloc];
  FreemarkerCoreBuiltInsForHashes_valuesBI_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreBuiltInsForHashes_valuesBI)
