//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/ext/beans/OverloadedNumberUtil.java
//

#ifndef _FreemarkerExtBeansOverloadedNumberUtil_H_
#define _FreemarkerExtBeansOverloadedNumberUtil_H_

#include "J2ObjC_header.h"
#include "java/lang/Comparable.h"

@class IOSClass;
@class JavaLangByte;
@class JavaLangDouble;
@class JavaLangFloat;
@class JavaLangInteger;
@class JavaLangLong;
@class JavaLangShort;
@class JavaMathBigDecimal;
@class JavaMathBigInteger;

#define FreemarkerExtBeansOverloadedNumberUtil_BIG_MANTISSA_LOSS_PRICE 40000

/**
 @brief Everything related to coercion to ambiguous numerical types.
 */
@interface FreemarkerExtBeansOverloadedNumberUtil : NSObject

#pragma mark Package-Private

/**
 @brief Attaches the lowest alternative number type to the parameter number via NumberWithFallbackType , if that's useful according the possible target number types.
 This transformation is applied on the method call argument list before overloaded method selection. <p>Note that as of this writing, this method is only used when BeansWrapper#getIncompatibleImprovements() >= 2.3.21. <p>Why's this needed, how it works: Overloaded method selection only selects methods where the <em>type</em> (not the value!) of the argument is "smaller" or the same as the parameter type. This is similar to how it's in the Java language. That it only decides based on the parameter type is important because this way OverloadedMethodsSubset can cache method lookup decisions using the types as the cache key. Problem is, since you don't declare the exact numerical types in FTL, and FTL has only a single generic numeric type anyway, what Java type a TemplateNumberModel uses internally is often seen as a technical detail of which the template author can't always keep track of. So we investigate the <em>value</em> of the number too, then coerce it down without overflow to a type that will match the most overloaded methods. (This is especially important as FTL often stores numbers in BigDecimal -s, which will hardly ever match any method parameters.) We could simply return that number, like <code>Byte(0)</code> for an <code>Integer(0)</code> , however, then we would lose the information about what the original type was. The original type is sometimes important, as in ambiguous situations the method where there's an exact type match should be selected (like, when someone wants to select an overload explicitly with <code>m(x?int)</code> ). Also, if an overload wins where the parameter type at the position of the number is <code>Number</code> or <code>Object</code> (or <code>Comparable</code> etc.), it's expected that we pass in the original value (an <code>Integer</code> in this example), especially if that value is the return value of another Java method. That's why we use NumberWithFallbackType numerical classes like IntegerOrByte , which represents both the original type and the coerced type, all encoded into the class of the value, which is used as the overloaded method lookup cache key. <p>See also: <tt>src\main\misc\overloadedNumberRules\prices.ods</tt>.
 @param num the number to coerce
 @param typeFlags the type flags of the target parameter position; see TypeFlags
 The original number or a NumberWithFallbackType , depending on the actual value and the types indicated in the <code>targetNumTypes</code> parameter.
 */
+ (NSNumber *)addFallbackTypeWithNSNumber:(NSNumber *)num
                                  withInt:(jint)typeFlags;

+ (jint)compareNumberTypeSpecificityWithIOSClass:(IOSClass *)c1
                                    withIOSClass:(IOSClass *)c2;

/**
 @brief Returns a non-negative number that indicates how much we want to avoid a given numerical type conversion.
 Since we only consider the types here, not the actual value, we always consider the worst case scenario. Like it will say that converting int to short is not allowed, although int 1 can be converted to byte without loss. To account for such situations, "Or"-ed types, like IntegerOrByte has to be used.
 @param fromC the non-primitive type of the argument (with other words, the actual type). Must be Number or its subclass. This is possibly an NumberWithFallbackType subclass.
 @param toC the <em>non-primitive</em> type of the target parameter (with other words, the format type). Must be a Number subclass, not Number itself. Must <em>not</em> be NumberWithFallbackType or its subclass.
 @return <p>The possible values are: <ul> <li>0: No conversion is needed <li>[0, 30000): Lossless conversion <li>[30000, 40000): Smaller precision loss in mantissa is possible. <li>[40000, 50000): Bigger precision loss in mantissa is possible. <li> Integer#MAX_VALUE : Conversion not allowed due to the possibility of magnitude loss or overflow</li> </ul> <p>At some places, we only care if the conversion is possible, i.e., whether the return value is Integer#MAX_VALUE or not. But when multiple overloaded methods have an argument type to which we could convert to, this number will influence which of those will be chosen.
 */
+ (jint)getArgumentConversionPriceWithIOSClass:(IOSClass *)fromC
                                  withIOSClass:(IOSClass *)toC;

@end

J2OBJC_EMPTY_STATIC_INIT(FreemarkerExtBeansOverloadedNumberUtil)

J2OBJC_STATIC_FIELD_GETTER(FreemarkerExtBeansOverloadedNumberUtil, BIG_MANTISSA_LOSS_PRICE, jint)

FOUNDATION_EXPORT NSNumber *FreemarkerExtBeansOverloadedNumberUtil_addFallbackTypeWithNSNumber_withInt_(NSNumber *num, jint typeFlags);

FOUNDATION_EXPORT jint FreemarkerExtBeansOverloadedNumberUtil_getArgumentConversionPriceWithIOSClass_withIOSClass_(IOSClass *fromC, IOSClass *toC);

FOUNDATION_EXPORT jint FreemarkerExtBeansOverloadedNumberUtil_compareNumberTypeSpecificityWithIOSClass_withIOSClass_(IOSClass *c1, IOSClass *c2);

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerExtBeansOverloadedNumberUtil)

@protocol FreemarkerExtBeansOverloadedNumberUtil_ByteSource < NSObject, JavaObject >

- (JavaLangByte *)byteValue;

@end

J2OBJC_EMPTY_STATIC_INIT(FreemarkerExtBeansOverloadedNumberUtil_ByteSource)

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerExtBeansOverloadedNumberUtil_ByteSource)

@protocol FreemarkerExtBeansOverloadedNumberUtil_ShortSource < NSObject, JavaObject >

- (JavaLangShort *)shortValue;

@end

J2OBJC_EMPTY_STATIC_INIT(FreemarkerExtBeansOverloadedNumberUtil_ShortSource)

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerExtBeansOverloadedNumberUtil_ShortSource)

@protocol FreemarkerExtBeansOverloadedNumberUtil_IntegerSource < NSObject, JavaObject >

- (JavaLangInteger *)integerValue;

@end

J2OBJC_EMPTY_STATIC_INIT(FreemarkerExtBeansOverloadedNumberUtil_IntegerSource)

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerExtBeansOverloadedNumberUtil_IntegerSource)

@protocol FreemarkerExtBeansOverloadedNumberUtil_LongSource < NSObject, JavaObject >

- (JavaLangLong *)longValue;

@end

J2OBJC_EMPTY_STATIC_INIT(FreemarkerExtBeansOverloadedNumberUtil_LongSource)

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerExtBeansOverloadedNumberUtil_LongSource)

@protocol FreemarkerExtBeansOverloadedNumberUtil_FloatSource < NSObject, JavaObject >

- (JavaLangFloat *)floatValue;

@end

J2OBJC_EMPTY_STATIC_INIT(FreemarkerExtBeansOverloadedNumberUtil_FloatSource)

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerExtBeansOverloadedNumberUtil_FloatSource)

@protocol FreemarkerExtBeansOverloadedNumberUtil_DoubleSource < NSObject, JavaObject >

- (JavaLangDouble *)doubleValue;

@end

J2OBJC_EMPTY_STATIC_INIT(FreemarkerExtBeansOverloadedNumberUtil_DoubleSource)

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerExtBeansOverloadedNumberUtil_DoubleSource)

@protocol FreemarkerExtBeansOverloadedNumberUtil_BigIntegerSource < NSObject, JavaObject >

- (JavaMathBigInteger *)bigIntegerValue;

@end

J2OBJC_EMPTY_STATIC_INIT(FreemarkerExtBeansOverloadedNumberUtil_BigIntegerSource)

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerExtBeansOverloadedNumberUtil_BigIntegerSource)

@protocol FreemarkerExtBeansOverloadedNumberUtil_BigDecimalSource < NSObject, JavaObject >

- (JavaMathBigDecimal *)bigDecimalValue;

@end

J2OBJC_EMPTY_STATIC_INIT(FreemarkerExtBeansOverloadedNumberUtil_BigDecimalSource)

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerExtBeansOverloadedNumberUtil_BigDecimalSource)

/**
 @brief Superclass of "Or"-ed numerical types.
 With an example, a <code>int</code> 1 has the fallback type <code>byte</code> , as that's the smallest type that can store the value, so it can be represented as an IntegerOrByte . This is useful as overloaded method selection only examines the type of the arguments, not the value of them, but with "Or"-ed types we can encode this value-related information into the argument type, hence influencing the method selection.
 */
@interface FreemarkerExtBeansOverloadedNumberUtil_NumberWithFallbackType : NSNumber < JavaLangComparable >

#pragma mark Public

- (jbyte)charValue;

- (jint)compareToWithId:(id)o;

- (jdouble)doubleValue;

- (jboolean)isEqual:(id)obj;

- (jfloat)floatValue;

- (NSUInteger)hash;

- (jint)intValue;

- (jlong)longLongValue;

- (jshort)shortValue;

- (NSString *)description;

#pragma mark Protected

- (NSNumber *)getSourceNumber;

#pragma mark Package-Private

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(FreemarkerExtBeansOverloadedNumberUtil_NumberWithFallbackType)

FOUNDATION_EXPORT void FreemarkerExtBeansOverloadedNumberUtil_NumberWithFallbackType_init(FreemarkerExtBeansOverloadedNumberUtil_NumberWithFallbackType *self);

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerExtBeansOverloadedNumberUtil_NumberWithFallbackType)

/**
 @brief Holds a BigDecimal that stores a whole number.
 When selecting a overloaded method, FreeMarker tries to associate BigDecimal values to parameters of types that can hold non-whole numbers, unless the BigDecimal is wrapped into this class, in which case it does the opposite. This mechanism is, however, too rough to prevent roll overs or magnitude losses. Those are not yet handled for backward compatibility (they were suppressed earlier too).
 */
@interface FreemarkerExtBeansOverloadedNumberUtil_IntegerBigDecimal : FreemarkerExtBeansOverloadedNumberUtil_NumberWithFallbackType

#pragma mark Public

- (JavaMathBigInteger *)bigIntegerValue;

#pragma mark Protected

- (NSNumber *)getSourceNumber;

#pragma mark Package-Private

- (instancetype)initWithJavaMathBigDecimal:(JavaMathBigDecimal *)n;

@end

J2OBJC_EMPTY_STATIC_INIT(FreemarkerExtBeansOverloadedNumberUtil_IntegerBigDecimal)

FOUNDATION_EXPORT void FreemarkerExtBeansOverloadedNumberUtil_IntegerBigDecimal_initWithJavaMathBigDecimal_(FreemarkerExtBeansOverloadedNumberUtil_IntegerBigDecimal *self, JavaMathBigDecimal *n);

FOUNDATION_EXPORT FreemarkerExtBeansOverloadedNumberUtil_IntegerBigDecimal *new_FreemarkerExtBeansOverloadedNumberUtil_IntegerBigDecimal_initWithJavaMathBigDecimal_(JavaMathBigDecimal *n) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerExtBeansOverloadedNumberUtil_IntegerBigDecimal)

@interface FreemarkerExtBeansOverloadedNumberUtil_LongOrSmallerInteger : FreemarkerExtBeansOverloadedNumberUtil_NumberWithFallbackType

#pragma mark Public

- (jlong)longLongValue;

#pragma mark Protected

- (instancetype)initWithJavaLangLong:(JavaLangLong *)n;

- (NSNumber *)getSourceNumber;

@end

J2OBJC_EMPTY_STATIC_INIT(FreemarkerExtBeansOverloadedNumberUtil_LongOrSmallerInteger)

FOUNDATION_EXPORT void FreemarkerExtBeansOverloadedNumberUtil_LongOrSmallerInteger_initWithJavaLangLong_(FreemarkerExtBeansOverloadedNumberUtil_LongOrSmallerInteger *self, JavaLangLong *n);

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerExtBeansOverloadedNumberUtil_LongOrSmallerInteger)

@interface FreemarkerExtBeansOverloadedNumberUtil_LongOrByte : FreemarkerExtBeansOverloadedNumberUtil_LongOrSmallerInteger

#pragma mark Public

- (jbyte)charValue;

#pragma mark Package-Private

- (instancetype)initWithJavaLangLong:(JavaLangLong *)n
                            withByte:(jbyte)w;

@end

J2OBJC_EMPTY_STATIC_INIT(FreemarkerExtBeansOverloadedNumberUtil_LongOrByte)

FOUNDATION_EXPORT void FreemarkerExtBeansOverloadedNumberUtil_LongOrByte_initWithJavaLangLong_withByte_(FreemarkerExtBeansOverloadedNumberUtil_LongOrByte *self, JavaLangLong *n, jbyte w);

FOUNDATION_EXPORT FreemarkerExtBeansOverloadedNumberUtil_LongOrByte *new_FreemarkerExtBeansOverloadedNumberUtil_LongOrByte_initWithJavaLangLong_withByte_(JavaLangLong *n, jbyte w) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerExtBeansOverloadedNumberUtil_LongOrByte)

@interface FreemarkerExtBeansOverloadedNumberUtil_LongOrShort : FreemarkerExtBeansOverloadedNumberUtil_LongOrSmallerInteger

#pragma mark Public

- (jshort)shortValue;

#pragma mark Package-Private

- (instancetype)initWithJavaLangLong:(JavaLangLong *)n
                           withShort:(jshort)w;

@end

J2OBJC_EMPTY_STATIC_INIT(FreemarkerExtBeansOverloadedNumberUtil_LongOrShort)

FOUNDATION_EXPORT void FreemarkerExtBeansOverloadedNumberUtil_LongOrShort_initWithJavaLangLong_withShort_(FreemarkerExtBeansOverloadedNumberUtil_LongOrShort *self, JavaLangLong *n, jshort w);

FOUNDATION_EXPORT FreemarkerExtBeansOverloadedNumberUtil_LongOrShort *new_FreemarkerExtBeansOverloadedNumberUtil_LongOrShort_initWithJavaLangLong_withShort_(JavaLangLong *n, jshort w) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerExtBeansOverloadedNumberUtil_LongOrShort)

@interface FreemarkerExtBeansOverloadedNumberUtil_LongOrInteger : FreemarkerExtBeansOverloadedNumberUtil_LongOrSmallerInteger

#pragma mark Public

- (jint)intValue;

#pragma mark Package-Private

- (instancetype)initWithJavaLangLong:(JavaLangLong *)n
                             withInt:(jint)w;

@end

J2OBJC_EMPTY_STATIC_INIT(FreemarkerExtBeansOverloadedNumberUtil_LongOrInteger)

FOUNDATION_EXPORT void FreemarkerExtBeansOverloadedNumberUtil_LongOrInteger_initWithJavaLangLong_withInt_(FreemarkerExtBeansOverloadedNumberUtil_LongOrInteger *self, JavaLangLong *n, jint w);

FOUNDATION_EXPORT FreemarkerExtBeansOverloadedNumberUtil_LongOrInteger *new_FreemarkerExtBeansOverloadedNumberUtil_LongOrInteger_initWithJavaLangLong_withInt_(JavaLangLong *n, jint w) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerExtBeansOverloadedNumberUtil_LongOrInteger)

@interface FreemarkerExtBeansOverloadedNumberUtil_IntegerOrSmallerInteger : FreemarkerExtBeansOverloadedNumberUtil_NumberWithFallbackType

#pragma mark Public

- (jint)intValue;

#pragma mark Protected

- (instancetype)initWithJavaLangInteger:(JavaLangInteger *)n;

- (NSNumber *)getSourceNumber;

@end

J2OBJC_EMPTY_STATIC_INIT(FreemarkerExtBeansOverloadedNumberUtil_IntegerOrSmallerInteger)

FOUNDATION_EXPORT void FreemarkerExtBeansOverloadedNumberUtil_IntegerOrSmallerInteger_initWithJavaLangInteger_(FreemarkerExtBeansOverloadedNumberUtil_IntegerOrSmallerInteger *self, JavaLangInteger *n);

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerExtBeansOverloadedNumberUtil_IntegerOrSmallerInteger)

@interface FreemarkerExtBeansOverloadedNumberUtil_IntegerOrByte : FreemarkerExtBeansOverloadedNumberUtil_IntegerOrSmallerInteger

#pragma mark Public

- (jbyte)charValue;

#pragma mark Package-Private

- (instancetype)initWithJavaLangInteger:(JavaLangInteger *)n
                               withByte:(jbyte)w;

@end

J2OBJC_EMPTY_STATIC_INIT(FreemarkerExtBeansOverloadedNumberUtil_IntegerOrByte)

FOUNDATION_EXPORT void FreemarkerExtBeansOverloadedNumberUtil_IntegerOrByte_initWithJavaLangInteger_withByte_(FreemarkerExtBeansOverloadedNumberUtil_IntegerOrByte *self, JavaLangInteger *n, jbyte w);

FOUNDATION_EXPORT FreemarkerExtBeansOverloadedNumberUtil_IntegerOrByte *new_FreemarkerExtBeansOverloadedNumberUtil_IntegerOrByte_initWithJavaLangInteger_withByte_(JavaLangInteger *n, jbyte w) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerExtBeansOverloadedNumberUtil_IntegerOrByte)

@interface FreemarkerExtBeansOverloadedNumberUtil_IntegerOrShort : FreemarkerExtBeansOverloadedNumberUtil_IntegerOrSmallerInteger

#pragma mark Public

- (jshort)shortValue;

#pragma mark Package-Private

- (instancetype)initWithJavaLangInteger:(JavaLangInteger *)n
                              withShort:(jshort)w;

@end

J2OBJC_EMPTY_STATIC_INIT(FreemarkerExtBeansOverloadedNumberUtil_IntegerOrShort)

FOUNDATION_EXPORT void FreemarkerExtBeansOverloadedNumberUtil_IntegerOrShort_initWithJavaLangInteger_withShort_(FreemarkerExtBeansOverloadedNumberUtil_IntegerOrShort *self, JavaLangInteger *n, jshort w);

FOUNDATION_EXPORT FreemarkerExtBeansOverloadedNumberUtil_IntegerOrShort *new_FreemarkerExtBeansOverloadedNumberUtil_IntegerOrShort_initWithJavaLangInteger_withShort_(JavaLangInteger *n, jshort w) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerExtBeansOverloadedNumberUtil_IntegerOrShort)

@interface FreemarkerExtBeansOverloadedNumberUtil_ShortOrByte : FreemarkerExtBeansOverloadedNumberUtil_NumberWithFallbackType

#pragma mark Public

- (jbyte)charValue;

- (jshort)shortValue;

#pragma mark Protected

- (instancetype)initWithJavaLangShort:(JavaLangShort *)n
                             withByte:(jbyte)w;

- (NSNumber *)getSourceNumber;

@end

J2OBJC_EMPTY_STATIC_INIT(FreemarkerExtBeansOverloadedNumberUtil_ShortOrByte)

FOUNDATION_EXPORT void FreemarkerExtBeansOverloadedNumberUtil_ShortOrByte_initWithJavaLangShort_withByte_(FreemarkerExtBeansOverloadedNumberUtil_ShortOrByte *self, JavaLangShort *n, jbyte w);

FOUNDATION_EXPORT FreemarkerExtBeansOverloadedNumberUtil_ShortOrByte *new_FreemarkerExtBeansOverloadedNumberUtil_ShortOrByte_initWithJavaLangShort_withByte_(JavaLangShort *n, jbyte w) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerExtBeansOverloadedNumberUtil_ShortOrByte)

@interface FreemarkerExtBeansOverloadedNumberUtil_DoubleOrWholeNumber : FreemarkerExtBeansOverloadedNumberUtil_NumberWithFallbackType

#pragma mark Public

- (jdouble)doubleValue;

#pragma mark Protected

- (instancetype)initWithJavaLangDouble:(JavaLangDouble *)n;

- (NSNumber *)getSourceNumber;

@end

J2OBJC_EMPTY_STATIC_INIT(FreemarkerExtBeansOverloadedNumberUtil_DoubleOrWholeNumber)

FOUNDATION_EXPORT void FreemarkerExtBeansOverloadedNumberUtil_DoubleOrWholeNumber_initWithJavaLangDouble_(FreemarkerExtBeansOverloadedNumberUtil_DoubleOrWholeNumber *self, JavaLangDouble *n);

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerExtBeansOverloadedNumberUtil_DoubleOrWholeNumber)

@interface FreemarkerExtBeansOverloadedNumberUtil_DoubleOrByte : FreemarkerExtBeansOverloadedNumberUtil_DoubleOrWholeNumber

#pragma mark Public

- (jbyte)charValue;

- (jint)intValue;

- (jlong)longLongValue;

- (jshort)shortValue;

#pragma mark Package-Private

- (instancetype)initWithJavaLangDouble:(JavaLangDouble *)n
                              withByte:(jbyte)w;

@end

J2OBJC_EMPTY_STATIC_INIT(FreemarkerExtBeansOverloadedNumberUtil_DoubleOrByte)

FOUNDATION_EXPORT void FreemarkerExtBeansOverloadedNumberUtil_DoubleOrByte_initWithJavaLangDouble_withByte_(FreemarkerExtBeansOverloadedNumberUtil_DoubleOrByte *self, JavaLangDouble *n, jbyte w);

FOUNDATION_EXPORT FreemarkerExtBeansOverloadedNumberUtil_DoubleOrByte *new_FreemarkerExtBeansOverloadedNumberUtil_DoubleOrByte_initWithJavaLangDouble_withByte_(JavaLangDouble *n, jbyte w) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerExtBeansOverloadedNumberUtil_DoubleOrByte)

@interface FreemarkerExtBeansOverloadedNumberUtil_DoubleOrShort : FreemarkerExtBeansOverloadedNumberUtil_DoubleOrWholeNumber

#pragma mark Public

- (jint)intValue;

- (jlong)longLongValue;

- (jshort)shortValue;

#pragma mark Package-Private

- (instancetype)initWithJavaLangDouble:(JavaLangDouble *)n
                             withShort:(jshort)w;

@end

J2OBJC_EMPTY_STATIC_INIT(FreemarkerExtBeansOverloadedNumberUtil_DoubleOrShort)

FOUNDATION_EXPORT void FreemarkerExtBeansOverloadedNumberUtil_DoubleOrShort_initWithJavaLangDouble_withShort_(FreemarkerExtBeansOverloadedNumberUtil_DoubleOrShort *self, JavaLangDouble *n, jshort w);

FOUNDATION_EXPORT FreemarkerExtBeansOverloadedNumberUtil_DoubleOrShort *new_FreemarkerExtBeansOverloadedNumberUtil_DoubleOrShort_initWithJavaLangDouble_withShort_(JavaLangDouble *n, jshort w) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerExtBeansOverloadedNumberUtil_DoubleOrShort)

@interface FreemarkerExtBeansOverloadedNumberUtil_DoubleOrIntegerOrFloat : FreemarkerExtBeansOverloadedNumberUtil_DoubleOrWholeNumber

#pragma mark Public

- (jint)intValue;

- (jlong)longLongValue;

#pragma mark Package-Private

- (instancetype)initWithJavaLangDouble:(JavaLangDouble *)n
                               withInt:(jint)w;

@end

J2OBJC_EMPTY_STATIC_INIT(FreemarkerExtBeansOverloadedNumberUtil_DoubleOrIntegerOrFloat)

FOUNDATION_EXPORT void FreemarkerExtBeansOverloadedNumberUtil_DoubleOrIntegerOrFloat_initWithJavaLangDouble_withInt_(FreemarkerExtBeansOverloadedNumberUtil_DoubleOrIntegerOrFloat *self, JavaLangDouble *n, jint w);

FOUNDATION_EXPORT FreemarkerExtBeansOverloadedNumberUtil_DoubleOrIntegerOrFloat *new_FreemarkerExtBeansOverloadedNumberUtil_DoubleOrIntegerOrFloat_initWithJavaLangDouble_withInt_(JavaLangDouble *n, jint w) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerExtBeansOverloadedNumberUtil_DoubleOrIntegerOrFloat)

@interface FreemarkerExtBeansOverloadedNumberUtil_DoubleOrInteger : FreemarkerExtBeansOverloadedNumberUtil_DoubleOrWholeNumber

#pragma mark Public

- (jint)intValue;

- (jlong)longLongValue;

#pragma mark Package-Private

- (instancetype)initWithJavaLangDouble:(JavaLangDouble *)n
                               withInt:(jint)w;

@end

J2OBJC_EMPTY_STATIC_INIT(FreemarkerExtBeansOverloadedNumberUtil_DoubleOrInteger)

FOUNDATION_EXPORT void FreemarkerExtBeansOverloadedNumberUtil_DoubleOrInteger_initWithJavaLangDouble_withInt_(FreemarkerExtBeansOverloadedNumberUtil_DoubleOrInteger *self, JavaLangDouble *n, jint w);

FOUNDATION_EXPORT FreemarkerExtBeansOverloadedNumberUtil_DoubleOrInteger *new_FreemarkerExtBeansOverloadedNumberUtil_DoubleOrInteger_initWithJavaLangDouble_withInt_(JavaLangDouble *n, jint w) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerExtBeansOverloadedNumberUtil_DoubleOrInteger)

@interface FreemarkerExtBeansOverloadedNumberUtil_DoubleOrLong : FreemarkerExtBeansOverloadedNumberUtil_DoubleOrWholeNumber

#pragma mark Public

- (jlong)longLongValue;

#pragma mark Package-Private

- (instancetype)initWithJavaLangDouble:(JavaLangDouble *)n
                              withLong:(jlong)w;

@end

J2OBJC_EMPTY_STATIC_INIT(FreemarkerExtBeansOverloadedNumberUtil_DoubleOrLong)

FOUNDATION_EXPORT void FreemarkerExtBeansOverloadedNumberUtil_DoubleOrLong_initWithJavaLangDouble_withLong_(FreemarkerExtBeansOverloadedNumberUtil_DoubleOrLong *self, JavaLangDouble *n, jlong w);

FOUNDATION_EXPORT FreemarkerExtBeansOverloadedNumberUtil_DoubleOrLong *new_FreemarkerExtBeansOverloadedNumberUtil_DoubleOrLong_initWithJavaLangDouble_withLong_(JavaLangDouble *n, jlong w) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerExtBeansOverloadedNumberUtil_DoubleOrLong)

@interface FreemarkerExtBeansOverloadedNumberUtil_DoubleOrFloat : FreemarkerExtBeansOverloadedNumberUtil_NumberWithFallbackType

#pragma mark Public

- (jdouble)doubleValue;

- (jfloat)floatValue;

#pragma mark Protected

- (NSNumber *)getSourceNumber;

#pragma mark Package-Private

- (instancetype)initWithJavaLangDouble:(JavaLangDouble *)n;

@end

J2OBJC_EMPTY_STATIC_INIT(FreemarkerExtBeansOverloadedNumberUtil_DoubleOrFloat)

FOUNDATION_EXPORT void FreemarkerExtBeansOverloadedNumberUtil_DoubleOrFloat_initWithJavaLangDouble_(FreemarkerExtBeansOverloadedNumberUtil_DoubleOrFloat *self, JavaLangDouble *n);

FOUNDATION_EXPORT FreemarkerExtBeansOverloadedNumberUtil_DoubleOrFloat *new_FreemarkerExtBeansOverloadedNumberUtil_DoubleOrFloat_initWithJavaLangDouble_(JavaLangDouble *n) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerExtBeansOverloadedNumberUtil_DoubleOrFloat)

@interface FreemarkerExtBeansOverloadedNumberUtil_FloatOrWholeNumber : FreemarkerExtBeansOverloadedNumberUtil_NumberWithFallbackType

#pragma mark Public

- (jfloat)floatValue;

#pragma mark Protected

- (NSNumber *)getSourceNumber;

#pragma mark Package-Private

- (instancetype)initWithJavaLangFloat:(JavaLangFloat *)n;

@end

J2OBJC_EMPTY_STATIC_INIT(FreemarkerExtBeansOverloadedNumberUtil_FloatOrWholeNumber)

FOUNDATION_EXPORT void FreemarkerExtBeansOverloadedNumberUtil_FloatOrWholeNumber_initWithJavaLangFloat_(FreemarkerExtBeansOverloadedNumberUtil_FloatOrWholeNumber *self, JavaLangFloat *n);

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerExtBeansOverloadedNumberUtil_FloatOrWholeNumber)

@interface FreemarkerExtBeansOverloadedNumberUtil_FloatOrByte : FreemarkerExtBeansOverloadedNumberUtil_FloatOrWholeNumber

#pragma mark Public

- (jbyte)charValue;

- (jint)intValue;

- (jlong)longLongValue;

- (jshort)shortValue;

#pragma mark Package-Private

- (instancetype)initWithJavaLangFloat:(JavaLangFloat *)n
                             withByte:(jbyte)w;

@end

J2OBJC_EMPTY_STATIC_INIT(FreemarkerExtBeansOverloadedNumberUtil_FloatOrByte)

FOUNDATION_EXPORT void FreemarkerExtBeansOverloadedNumberUtil_FloatOrByte_initWithJavaLangFloat_withByte_(FreemarkerExtBeansOverloadedNumberUtil_FloatOrByte *self, JavaLangFloat *n, jbyte w);

FOUNDATION_EXPORT FreemarkerExtBeansOverloadedNumberUtil_FloatOrByte *new_FreemarkerExtBeansOverloadedNumberUtil_FloatOrByte_initWithJavaLangFloat_withByte_(JavaLangFloat *n, jbyte w) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerExtBeansOverloadedNumberUtil_FloatOrByte)

@interface FreemarkerExtBeansOverloadedNumberUtil_FloatOrShort : FreemarkerExtBeansOverloadedNumberUtil_FloatOrWholeNumber

#pragma mark Public

- (jint)intValue;

- (jlong)longLongValue;

- (jshort)shortValue;

#pragma mark Package-Private

- (instancetype)initWithJavaLangFloat:(JavaLangFloat *)n
                            withShort:(jshort)w;

@end

J2OBJC_EMPTY_STATIC_INIT(FreemarkerExtBeansOverloadedNumberUtil_FloatOrShort)

FOUNDATION_EXPORT void FreemarkerExtBeansOverloadedNumberUtil_FloatOrShort_initWithJavaLangFloat_withShort_(FreemarkerExtBeansOverloadedNumberUtil_FloatOrShort *self, JavaLangFloat *n, jshort w);

FOUNDATION_EXPORT FreemarkerExtBeansOverloadedNumberUtil_FloatOrShort *new_FreemarkerExtBeansOverloadedNumberUtil_FloatOrShort_initWithJavaLangFloat_withShort_(JavaLangFloat *n, jshort w) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerExtBeansOverloadedNumberUtil_FloatOrShort)

@interface FreemarkerExtBeansOverloadedNumberUtil_FloatOrInteger : FreemarkerExtBeansOverloadedNumberUtil_FloatOrWholeNumber

#pragma mark Public

- (jint)intValue;

- (jlong)longLongValue;

#pragma mark Package-Private

- (instancetype)initWithJavaLangFloat:(JavaLangFloat *)n
                              withInt:(jint)w;

@end

J2OBJC_EMPTY_STATIC_INIT(FreemarkerExtBeansOverloadedNumberUtil_FloatOrInteger)

FOUNDATION_EXPORT void FreemarkerExtBeansOverloadedNumberUtil_FloatOrInteger_initWithJavaLangFloat_withInt_(FreemarkerExtBeansOverloadedNumberUtil_FloatOrInteger *self, JavaLangFloat *n, jint w);

FOUNDATION_EXPORT FreemarkerExtBeansOverloadedNumberUtil_FloatOrInteger *new_FreemarkerExtBeansOverloadedNumberUtil_FloatOrInteger_initWithJavaLangFloat_withInt_(JavaLangFloat *n, jint w) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerExtBeansOverloadedNumberUtil_FloatOrInteger)

@interface FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrPrimitive : FreemarkerExtBeansOverloadedNumberUtil_NumberWithFallbackType {
 @public
  JavaMathBigInteger *n_;
}

#pragma mark Protected

- (NSNumber *)getSourceNumber;

#pragma mark Package-Private

- (instancetype)initWithJavaMathBigInteger:(JavaMathBigInteger *)n;

@end

J2OBJC_EMPTY_STATIC_INIT(FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrPrimitive)

J2OBJC_FIELD_SETTER(FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrPrimitive, n_, JavaMathBigInteger *)

FOUNDATION_EXPORT void FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrPrimitive_initWithJavaMathBigInteger_(FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrPrimitive *self, JavaMathBigInteger *n);

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrPrimitive)

@interface FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrByte : FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrPrimitive

#pragma mark Package-Private

- (instancetype)initWithJavaMathBigInteger:(JavaMathBigInteger *)n;

@end

J2OBJC_EMPTY_STATIC_INIT(FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrByte)

FOUNDATION_EXPORT void FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrByte_initWithJavaMathBigInteger_(FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrByte *self, JavaMathBigInteger *n);

FOUNDATION_EXPORT FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrByte *new_FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrByte_initWithJavaMathBigInteger_(JavaMathBigInteger *n) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrByte)

@interface FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrShort : FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrPrimitive

#pragma mark Package-Private

- (instancetype)initWithJavaMathBigInteger:(JavaMathBigInteger *)n;

@end

J2OBJC_EMPTY_STATIC_INIT(FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrShort)

FOUNDATION_EXPORT void FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrShort_initWithJavaMathBigInteger_(FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrShort *self, JavaMathBigInteger *n);

FOUNDATION_EXPORT FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrShort *new_FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrShort_initWithJavaMathBigInteger_(JavaMathBigInteger *n) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrShort)

@interface FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrInteger : FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrPrimitive

#pragma mark Package-Private

- (instancetype)initWithJavaMathBigInteger:(JavaMathBigInteger *)n;

@end

J2OBJC_EMPTY_STATIC_INIT(FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrInteger)

FOUNDATION_EXPORT void FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrInteger_initWithJavaMathBigInteger_(FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrInteger *self, JavaMathBigInteger *n);

FOUNDATION_EXPORT FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrInteger *new_FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrInteger_initWithJavaMathBigInteger_(JavaMathBigInteger *n) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrInteger)

@interface FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrLong : FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrPrimitive

#pragma mark Package-Private

- (instancetype)initWithJavaMathBigInteger:(JavaMathBigInteger *)n;

@end

J2OBJC_EMPTY_STATIC_INIT(FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrLong)

FOUNDATION_EXPORT void FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrLong_initWithJavaMathBigInteger_(FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrLong *self, JavaMathBigInteger *n);

FOUNDATION_EXPORT FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrLong *new_FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrLong_initWithJavaMathBigInteger_(JavaMathBigInteger *n) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrLong)

@interface FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrFPPrimitive : FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrPrimitive

#pragma mark Public

/**
 @brief Faster version of BigDecimal#doubleValue() , utilizes that the number known to fit into a long.
 */
- (jdouble)doubleValue;

/**
 @brief Faster version of BigDecimal#floatValue() , utilizes that the number known to fit into a long.
 */
- (jfloat)floatValue;

#pragma mark Package-Private

- (instancetype)initWithJavaMathBigInteger:(JavaMathBigInteger *)n;

@end

J2OBJC_EMPTY_STATIC_INIT(FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrFPPrimitive)

FOUNDATION_EXPORT void FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrFPPrimitive_initWithJavaMathBigInteger_(FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrFPPrimitive *self, JavaMathBigInteger *n);

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrFPPrimitive)

@interface FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrFloat : FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrFPPrimitive

#pragma mark Package-Private

- (instancetype)initWithJavaMathBigInteger:(JavaMathBigInteger *)n;

@end

J2OBJC_EMPTY_STATIC_INIT(FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrFloat)

FOUNDATION_EXPORT void FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrFloat_initWithJavaMathBigInteger_(FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrFloat *self, JavaMathBigInteger *n);

FOUNDATION_EXPORT FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrFloat *new_FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrFloat_initWithJavaMathBigInteger_(JavaMathBigInteger *n) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrFloat)

@interface FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrDouble : FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrFPPrimitive

#pragma mark Package-Private

- (instancetype)initWithJavaMathBigInteger:(JavaMathBigInteger *)n;

@end

J2OBJC_EMPTY_STATIC_INIT(FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrDouble)

FOUNDATION_EXPORT void FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrDouble_initWithJavaMathBigInteger_(FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrDouble *self, JavaMathBigInteger *n);

FOUNDATION_EXPORT FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrDouble *new_FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrDouble_initWithJavaMathBigInteger_(JavaMathBigInteger *n) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerExtBeansOverloadedNumberUtil_BigIntegerOrDouble)

#endif // _FreemarkerExtBeansOverloadedNumberUtil_H_
