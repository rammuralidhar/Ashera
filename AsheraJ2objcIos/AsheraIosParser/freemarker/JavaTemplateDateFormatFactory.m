//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/JavaTemplateDateFormatFactory.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "JavaTemplateDateFormat.h"
#include "JavaTemplateDateFormatFactory.h"
#include "TemplateDateFormat.h"
#include "TemplateDateFormatFactory.h"
#include "TemplateDateModel.h"
#include "TemplateModelException.h"
#include "UnknownDateTypeFormattingUnsupportedException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/text/DateFormat.h"
#include "java/text/ParseException.h"
#include "java/text/SimpleDateFormat.h"
#include "java/util/HashMap.h"
#include "java/util/Locale.h"
#include "java/util/Map.h"
#include "java/util/StringTokenizer.h"
#include "java/util/TimeZone.h"

#line 0 "/Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/JavaTemplateDateFormatFactory.java"

@interface FreemarkerCoreJavaTemplateDateFormatFactory () {
 @public
  JavaUtilLocale *locale_;
  IOSObjectArray *formatCache_;
}

- (JavaTextDateFormat *)getJavaDateFormatWithInt:(jint)dateType
                                    withNSString:(NSString *)nameOrPattern;

- (jint)parseDateStyleTokenWithNSString:(NSString *)token;

@end

J2OBJC_FIELD_SETTER(FreemarkerCoreJavaTemplateDateFormatFactory, locale_, JavaUtilLocale *)
J2OBJC_FIELD_SETTER(FreemarkerCoreJavaTemplateDateFormatFactory, formatCache_, IOSObjectArray *)

static id<JavaUtilMap> FreemarkerCoreJavaTemplateDateFormatFactory_JAVA_DATE_FORMATS_;
J2OBJC_STATIC_FIELD_GETTER(FreemarkerCoreJavaTemplateDateFormatFactory, JAVA_DATE_FORMATS_, id<JavaUtilMap>)

__attribute__((unused)) static JavaTextDateFormat *FreemarkerCoreJavaTemplateDateFormatFactory_getJavaDateFormatWithInt_withNSString_(FreemarkerCoreJavaTemplateDateFormatFactory *self, jint dateType, NSString *nameOrPattern);

__attribute__((unused)) static jint FreemarkerCoreJavaTemplateDateFormatFactory_parseDateStyleTokenWithNSString_(FreemarkerCoreJavaTemplateDateFormatFactory *self, NSString *token);

@interface FreemarkerCoreJavaTemplateDateFormatFactory_DateFormatKey : NSObject {
 @public
  jint dateType_;
  NSString *pattern_;
  JavaUtilLocale *locale_;
  JavaUtilTimeZone *timeZone_;
}

- (instancetype)initWithInt:(jint)dateType
               withNSString:(NSString *)pattern
         withJavaUtilLocale:(JavaUtilLocale *)locale
       withJavaUtilTimeZone:(JavaUtilTimeZone *)timeZone;

- (jboolean)isEqual:(id)o;

- (NSUInteger)hash;

@end

J2OBJC_EMPTY_STATIC_INIT(FreemarkerCoreJavaTemplateDateFormatFactory_DateFormatKey)

J2OBJC_FIELD_SETTER(FreemarkerCoreJavaTemplateDateFormatFactory_DateFormatKey, pattern_, NSString *)
J2OBJC_FIELD_SETTER(FreemarkerCoreJavaTemplateDateFormatFactory_DateFormatKey, locale_, JavaUtilLocale *)
J2OBJC_FIELD_SETTER(FreemarkerCoreJavaTemplateDateFormatFactory_DateFormatKey, timeZone_, JavaUtilTimeZone *)

__attribute__((unused)) static void FreemarkerCoreJavaTemplateDateFormatFactory_DateFormatKey_initWithInt_withNSString_withJavaUtilLocale_withJavaUtilTimeZone_(FreemarkerCoreJavaTemplateDateFormatFactory_DateFormatKey *self, jint dateType, NSString *pattern, JavaUtilLocale *locale, JavaUtilTimeZone *timeZone);

__attribute__((unused)) static FreemarkerCoreJavaTemplateDateFormatFactory_DateFormatKey *new_FreemarkerCoreJavaTemplateDateFormatFactory_DateFormatKey_initWithInt_withNSString_withJavaUtilLocale_withJavaUtilTimeZone_(jint dateType, NSString *pattern, JavaUtilLocale *locale, JavaUtilTimeZone *timeZone) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerCoreJavaTemplateDateFormatFactory_DateFormatKey)

J2OBJC_INITIALIZED_DEFN(FreemarkerCoreJavaTemplateDateFormatFactory)


#line 31
@implementation FreemarkerCoreJavaTemplateDateFormatFactory


#line 39
- (instancetype)initWithJavaUtilTimeZone:(JavaUtilTimeZone *)timeZone
                      withJavaUtilLocale:(JavaUtilLocale *)locale {
  FreemarkerCoreJavaTemplateDateFormatFactory_initWithJavaUtilTimeZone_withJavaUtilLocale_(self, timeZone, locale);
  return self;
}


#line 44
- (jboolean)isLocaleBound {
  return YES;
}


#line 51
- (FreemarkerCoreTemplateDateFormat *)getWithInt:(jint)dateType
                                     withBoolean:(jboolean)zonelessInput
                                    withNSString:(NSString *)formatDescriptor {
  
#line 53
  IOSObjectArray *formatCache = self->formatCache_;
  if (formatCache == nil) {
    formatCache = [IOSObjectArray newArrayWithLength:4 type:JavaUtilMap_class_()];
    self->formatCache_ = formatCache;
  }
  
#line 59
  id<JavaUtilMap> formatsForDateType = IOSObjectArray_Get(nil_chk(formatCache), dateType);
  if (formatsForDateType == nil) {
    formatsForDateType = new_JavaUtilHashMap_init();
    (void) IOSObjectArray_Set(formatCache, dateType, formatsForDateType);
  }
  
#line 65
  FreemarkerCoreTemplateDateFormat *format = (FreemarkerCoreTemplateDateFormat *) check_class_cast([((id<JavaUtilMap>) nil_chk(formatsForDateType)) getWithId:formatDescriptor], [FreemarkerCoreTemplateDateFormat class]);
  if (format == nil) {
    format = new_FreemarkerCoreJavaTemplateDateFormat_initWithJavaTextDateFormat_(FreemarkerCoreJavaTemplateDateFormatFactory_getJavaDateFormatWithInt_withNSString_(self, dateType, formatDescriptor));
    (void) [formatsForDateType putWithId:formatDescriptor withId:format];
  }
  return format;
}


#line 73
- (JavaTextDateFormat *)getJavaDateFormatWithInt:(jint)dateType
                                    withNSString:(NSString *)nameOrPattern {
  return FreemarkerCoreJavaTemplateDateFormatFactory_getJavaDateFormatWithInt_withNSString_(self, dateType, nameOrPattern);
}


#line 153
- (jint)parseDateStyleTokenWithNSString:(NSString *)token {
  return FreemarkerCoreJavaTemplateDateFormatFactory_parseDateStyleTokenWithNSString_(self, token);
}

+ (void)initialize {
  if (self == [FreemarkerCoreJavaTemplateDateFormatFactory class]) {
    FreemarkerCoreJavaTemplateDateFormatFactory_JAVA_DATE_FORMATS_ = new_JavaUtilHashMap_init();
    J2OBJC_SET_INITIALIZED(FreemarkerCoreJavaTemplateDateFormatFactory)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaUtilTimeZone:withJavaUtilLocale:", "JavaTemplateDateFormatFactory", NULL, 0x1, NULL, NULL },
    { "isLocaleBound", NULL, "Z", 0x1, NULL, NULL },
    { "getWithInt:withBoolean:withNSString:", "get", "Lfreemarker.core.TemplateDateFormat;", 0x1, "Ljava.text.ParseException;Lfreemarker.template.TemplateModelException;Lfreemarker.core.UnknownDateTypeFormattingUnsupportedException;", NULL },
    { "getJavaDateFormatWithInt:withNSString:", "getJavaDateFormat", "Ljava.text.DateFormat;", 0x2, "Lfreemarker.core.UnknownDateTypeFormattingUnsupportedException;Ljava.text.ParseException;", NULL },
    { "parseDateStyleTokenWithNSString:", "parseDateStyleToken", "I", 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "JAVA_DATE_FORMATS_", NULL, 0x1a, "Ljava.util.Map;", &FreemarkerCoreJavaTemplateDateFormatFactory_JAVA_DATE_FORMATS_, NULL,  },
    { "locale_", NULL, 0x12, "Ljava.util.Locale;", NULL, NULL,  },
    { "formatCache_", NULL, 0x2, "[Ljava.util.Map;", NULL, NULL,  },
  };
  static const char *inner_classes[] = {"Lfreemarker.core.JavaTemplateDateFormatFactory$DateFormatKey;"};
  static const J2ObjcClassInfo _FreemarkerCoreJavaTemplateDateFormatFactory = { 2, "JavaTemplateDateFormatFactory", "freemarker.core", NULL, 0x0, 5, methods, 3, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_FreemarkerCoreJavaTemplateDateFormatFactory;
}

@end


#line 39
void FreemarkerCoreJavaTemplateDateFormatFactory_initWithJavaUtilTimeZone_withJavaUtilLocale_(FreemarkerCoreJavaTemplateDateFormatFactory *self, JavaUtilTimeZone *timeZone, JavaUtilLocale *locale) {
  (void) FreemarkerCoreTemplateDateFormatFactory_initWithJavaUtilTimeZone_(self, timeZone);
  self->locale_ = locale;
}


#line 39
FreemarkerCoreJavaTemplateDateFormatFactory *new_FreemarkerCoreJavaTemplateDateFormatFactory_initWithJavaUtilTimeZone_withJavaUtilLocale_(JavaUtilTimeZone *timeZone, JavaUtilLocale *locale) {
  FreemarkerCoreJavaTemplateDateFormatFactory *self = [FreemarkerCoreJavaTemplateDateFormatFactory alloc];
  FreemarkerCoreJavaTemplateDateFormatFactory_initWithJavaUtilTimeZone_withJavaUtilLocale_(self, timeZone, locale);
  return self;
}


#line 73
JavaTextDateFormat *FreemarkerCoreJavaTemplateDateFormatFactory_getJavaDateFormatWithInt_withNSString_(FreemarkerCoreJavaTemplateDateFormatFactory *self, jint dateType, NSString *nameOrPattern) {
  
#line 77
  FreemarkerCoreJavaTemplateDateFormatFactory_DateFormatKey *cacheKey = new_FreemarkerCoreJavaTemplateDateFormatFactory_DateFormatKey_initWithInt_withNSString_withJavaUtilLocale_withJavaUtilTimeZone_(
#line 78
  dateType, nameOrPattern, self->locale_, [self getTimeZone]);
  JavaTextDateFormat *jDateFormat;
  @synchronized(FreemarkerCoreJavaTemplateDateFormatFactory_JAVA_DATE_FORMATS_) {
    jDateFormat = (JavaTextDateFormat *) check_class_cast([((id<JavaUtilMap>) nil_chk(FreemarkerCoreJavaTemplateDateFormatFactory_JAVA_DATE_FORMATS_)) getWithId:cacheKey], [JavaTextDateFormat class]);
    if (jDateFormat == nil) {
      
#line 84
      JavaUtilStringTokenizer *tok = new_JavaUtilStringTokenizer_initWithNSString_withNSString_(nameOrPattern, @"_");
      jint tok1Style = [tok hasMoreTokens] ? FreemarkerCoreJavaTemplateDateFormatFactory_parseDateStyleTokenWithNSString_(self, [tok nextToken]) : JavaTextDateFormat_DEFAULT;
      if (tok1Style != -1) {
        switch (dateType) {
          case FreemarkerTemplateTemplateDateModel_UNKNOWN:
          {
            
#line 89
            @throw new_FreemarkerCoreUnknownDateTypeFormattingUnsupportedException_init();
          }
          case FreemarkerTemplateTemplateDateModel_TIME:
          {
            
#line 92
            jDateFormat = JavaTextDateFormat_getTimeInstanceWithInt_withJavaUtilLocale_(tok1Style, cacheKey->locale_);
            break;
          }
          case FreemarkerTemplateTemplateDateModel_DATE:
          {
            
#line 96
            jDateFormat = JavaTextDateFormat_getDateInstanceWithInt_withJavaUtilLocale_(tok1Style, cacheKey->locale_);
            break;
          }
          case FreemarkerTemplateTemplateDateModel_DATETIME:
          {
            
#line 100
            jint tok2Style = [tok hasMoreTokens] ? FreemarkerCoreJavaTemplateDateFormatFactory_parseDateStyleTokenWithNSString_(self, [tok nextToken]) : tok1Style;
            if (tok2Style != -1) {
              jDateFormat = JavaTextDateFormat_getDateTimeInstanceWithInt_withInt_withJavaUtilLocale_(tok1Style, tok2Style, cacheKey->locale_);
            }
            break;
          }
        }
      }
      if (jDateFormat == nil) {
        @try {
          jDateFormat = new_JavaTextSimpleDateFormat_initWithNSString_withJavaUtilLocale_(nameOrPattern, cacheKey->locale_);
        }
        @catch (
#line 111
        JavaLangIllegalArgumentException *e) {
          NSString *msg = [((JavaLangIllegalArgumentException *) nil_chk(e)) getMessage];
          @throw new_JavaTextParseException_initWithNSString_withInt_(msg != nil ? msg : @"Illegal SimpleDateFormat pattern", 0);
        }
      }
      [((JavaTextDateFormat *) nil_chk(jDateFormat)) setTimeZoneWithJavaUtilTimeZone:cacheKey->timeZone_];
      
#line 118
      (void) [FreemarkerCoreJavaTemplateDateFormatFactory_JAVA_DATE_FORMATS_ putWithId:cacheKey withId:jDateFormat];
    }
  }
  
#line 123
  return (JavaTextDateFormat *) check_class_cast([((JavaTextDateFormat *) nil_chk(jDateFormat)) clone], [JavaTextDateFormat class]);
}


#line 153
jint FreemarkerCoreJavaTemplateDateFormatFactory_parseDateStyleTokenWithNSString_(FreemarkerCoreJavaTemplateDateFormatFactory *self, NSString *token) {
  if ([@"short" isEqual:token]) {
    return JavaTextDateFormat_SHORT;
  }
  if ([@"medium" isEqual:token]) {
    return JavaTextDateFormat_MEDIUM;
  }
  if ([@"long" isEqual:token]) {
    return JavaTextDateFormat_LONG;
  }
  if ([@"full" isEqual:token]) {
    return JavaTextDateFormat_FULL;
  }
  return -1;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreJavaTemplateDateFormatFactory)


#line 126
@implementation FreemarkerCoreJavaTemplateDateFormatFactory_DateFormatKey


#line 132
- (instancetype)initWithInt:(jint)dateType
               withNSString:(NSString *)pattern
         withJavaUtilLocale:(JavaUtilLocale *)locale
       withJavaUtilTimeZone:(JavaUtilTimeZone *)timeZone {
  FreemarkerCoreJavaTemplateDateFormatFactory_DateFormatKey_initWithInt_withNSString_withJavaUtilLocale_withJavaUtilTimeZone_(self, dateType, pattern, locale, timeZone);
  return self;
}


#line 139
- (jboolean)isEqual:(id)o {
  if ([o isKindOfClass:[FreemarkerCoreJavaTemplateDateFormatFactory_DateFormatKey class]]) {
    FreemarkerCoreJavaTemplateDateFormatFactory_DateFormatKey *fk = (FreemarkerCoreJavaTemplateDateFormatFactory_DateFormatKey *) check_class_cast(o, [FreemarkerCoreJavaTemplateDateFormatFactory_DateFormatKey class]);
    return dateType_ == ((FreemarkerCoreJavaTemplateDateFormatFactory_DateFormatKey *) nil_chk(fk))->dateType_ && [((NSString *) nil_chk(fk->pattern_)) isEqual:pattern_] && [((JavaUtilLocale *) nil_chk(fk->locale_)) isEqual:locale_] &&
#line 143
    [((JavaUtilTimeZone *) nil_chk(fk->timeZone_)) isEqual:timeZone_];
  }
  return NO;
}


#line 148
- (NSUInteger)hash {
  return dateType_ ^ ((jint) [((NSString *) nil_chk(pattern_)) hash]) ^ ((jint) [((JavaUtilLocale *) nil_chk(locale_)) hash]) ^ ((jint) [((JavaUtilTimeZone *) nil_chk(timeZone_)) hash]);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithInt:withNSString:withJavaUtilLocale:withJavaUtilTimeZone:", "DateFormatKey", NULL, 0x0, NULL, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL, NULL },
    { "hash", "hashCode", "I", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "dateType_", NULL, 0x12, "I", NULL, NULL,  },
    { "pattern_", NULL, 0x12, "Ljava.lang.String;", NULL, NULL,  },
    { "locale_", NULL, 0x12, "Ljava.util.Locale;", NULL, NULL,  },
    { "timeZone_", NULL, 0x12, "Ljava.util.TimeZone;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerCoreJavaTemplateDateFormatFactory_DateFormatKey = { 2, "DateFormatKey", "freemarker.core", "JavaTemplateDateFormatFactory", 0x1a, 3, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerCoreJavaTemplateDateFormatFactory_DateFormatKey;
}

@end


#line 132
void FreemarkerCoreJavaTemplateDateFormatFactory_DateFormatKey_initWithInt_withNSString_withJavaUtilLocale_withJavaUtilTimeZone_(FreemarkerCoreJavaTemplateDateFormatFactory_DateFormatKey *self, jint dateType, NSString *pattern, JavaUtilLocale *locale, JavaUtilTimeZone *timeZone) {
  (void) NSObject_init(self);
  
#line 133
  self->dateType_ = dateType;
  self->pattern_ = pattern;
  self->locale_ = locale;
  self->timeZone_ = timeZone;
}


#line 132
FreemarkerCoreJavaTemplateDateFormatFactory_DateFormatKey *new_FreemarkerCoreJavaTemplateDateFormatFactory_DateFormatKey_initWithInt_withNSString_withJavaUtilLocale_withJavaUtilTimeZone_(jint dateType, NSString *pattern, JavaUtilLocale *locale, JavaUtilTimeZone *timeZone) {
  FreemarkerCoreJavaTemplateDateFormatFactory_DateFormatKey *self = [FreemarkerCoreJavaTemplateDateFormatFactory_DateFormatKey alloc];
  FreemarkerCoreJavaTemplateDateFormatFactory_DateFormatKey_initWithInt_withNSString_withJavaUtilLocale_withJavaUtilTimeZone_(self, dateType, pattern, locale, timeZone);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreJavaTemplateDateFormatFactory_DateFormatKey)
