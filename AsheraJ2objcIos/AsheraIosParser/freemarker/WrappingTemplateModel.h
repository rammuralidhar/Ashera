//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/template/WrappingTemplateModel.java
//

#ifndef _FreemarkerTemplateWrappingTemplateModel_H_
#define _FreemarkerTemplateWrappingTemplateModel_H_

#include "J2ObjC_header.h"

@protocol FreemarkerTemplateObjectWrapper;
@protocol FreemarkerTemplateTemplateModel;

/**
 @brief Convenience base-class for containers that wrap their contained arbitrary Java objects into TemplateModel instances.
 */
@interface FreemarkerTemplateWrappingTemplateModel : NSObject

#pragma mark Public

/**
 @brief Returns the default object wrapper that is used when a wrapping template model is constructed without being passed an explicit object wrapper.
 Note that Configuration#setSharedVariable(String,Object) and Template#process(Object,java.io.Writer) don't use this setting, they rather use whatever object wrapper their Configuration#getObjectWrapper() method returns.
 */
+ (id<FreemarkerTemplateObjectWrapper>)getDefaultObjectWrapper;

/**
 @brief Returns the object wrapper instance used by this wrapping template model.
 */
- (id<FreemarkerTemplateObjectWrapper>)getObjectWrapper;

/**
 @brief Sets the default object wrapper that is used when a wrapping template model is constructed without being passed an explicit object wrapper.
 The default value is ObjectWrapper#SIMPLE_WRAPPER . Note that Configuration#setSharedVariable(String,Object) and Template#process(Object,java.io.Writer) don't use this setting, they rather use whatever object wrapper their Configuration#getObjectWrapper() method returns.
 */
+ (void)setDefaultObjectWrapperWithFreemarkerTemplateObjectWrapper:(id<FreemarkerTemplateObjectWrapper>)objectWrapper;

- (void)setObjectWrapperWithFreemarkerTemplateObjectWrapper:(id<FreemarkerTemplateObjectWrapper>)objectWrapper;

#pragma mark Protected

/**
 @brief Protected constructor that creates a new wrapping template model using the default object wrapper.
 */
- (instancetype)init;

/**
 @brief Protected constructor that creates a new wrapping template model using the specified object wrapper.
 @param objectWrapper the wrapper to use. Passing <code>null</code> to it is allowed but deprecated. If <code>null</code> is passed, the deprecated default object wrapper is used.
 */
- (instancetype)initWithFreemarkerTemplateObjectWrapper:(id<FreemarkerTemplateObjectWrapper>)objectWrapper;

/**
 @brief Wraps the passed object into a template model using this object's object wrapper.
 @param obj the object to wrap
 @return the template model that wraps the object
 @throws TemplateModelException if the wrapper does not know how to wrap the passed object.
 */
- (id<FreemarkerTemplateTemplateModel>)wrapWithId:(id)obj;

@end

J2OBJC_STATIC_INIT(FreemarkerTemplateWrappingTemplateModel)

FOUNDATION_EXPORT void FreemarkerTemplateWrappingTemplateModel_setDefaultObjectWrapperWithFreemarkerTemplateObjectWrapper_(id<FreemarkerTemplateObjectWrapper> objectWrapper);

FOUNDATION_EXPORT id<FreemarkerTemplateObjectWrapper> FreemarkerTemplateWrappingTemplateModel_getDefaultObjectWrapper();

FOUNDATION_EXPORT void FreemarkerTemplateWrappingTemplateModel_init(FreemarkerTemplateWrappingTemplateModel *self);

FOUNDATION_EXPORT void FreemarkerTemplateWrappingTemplateModel_initWithFreemarkerTemplateObjectWrapper_(FreemarkerTemplateWrappingTemplateModel *self, id<FreemarkerTemplateObjectWrapper> objectWrapper);

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerTemplateWrappingTemplateModel)

#endif // _FreemarkerTemplateWrappingTemplateModel_H_
