//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/template/SimpleObjectWrapper.java
//


#include "DefaultObjectWrapper.h"
#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "SimpleObjectWrapper.h"
#include "TemplateHashModel.h"
#include "TemplateModel.h"
#include "TemplateModelException.h"
#include "Version.h"

#line 0 "/Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/template/SimpleObjectWrapper.java"

J2OBJC_INITIALIZED_DEFN(FreemarkerTemplateSimpleObjectWrapper)

FreemarkerTemplateSimpleObjectWrapper *FreemarkerTemplateSimpleObjectWrapper_instance_;


#line 26
@implementation FreemarkerTemplateSimpleObjectWrapper


#line 33
- (instancetype)init {
  FreemarkerTemplateSimpleObjectWrapper_init(self);
  return self;
}


#line 42
- (instancetype)initWithFreemarkerTemplateVersion:(FreemarkerTemplateVersion *)incompatibleImprovements {
  FreemarkerTemplateSimpleObjectWrapper_initWithFreemarkerTemplateVersion_(self, incompatibleImprovements);
  return self;
}


#line 50
- (id<FreemarkerTemplateTemplateModel>)handleUnknownTypeWithId:(id)obj {
  @throw new_FreemarkerTemplateTemplateModelException_initWithNSString_(JreStrcat("$$", @"SimpleObjectWrapper deliberately won't wrap this type: ",
#line 52
  [[nil_chk(obj) getClass] getName]));
}


#line 55
- (id<FreemarkerTemplateTemplateHashModel>)wrapAsAPIWithId:(id)obj {
  @throw new_FreemarkerTemplateTemplateModelException_initWithNSString_(@"SimpleObjectWrapper deliberately doesn't allow ?api.");
}

+ (void)initialize {
  if (self == [FreemarkerTemplateSimpleObjectWrapper class]) {
    FreemarkerTemplateSimpleObjectWrapper_instance_ = new_FreemarkerTemplateSimpleObjectWrapper_init();
    J2OBJC_SET_INITIALIZED(FreemarkerTemplateSimpleObjectWrapper)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "SimpleObjectWrapper", NULL, 0x1, NULL, NULL },
    { "initWithFreemarkerTemplateVersion:", "SimpleObjectWrapper", NULL, 0x1, NULL, NULL },
    { "handleUnknownTypeWithId:", "handleUnknownType", "Lfreemarker.template.TemplateModel;", 0x4, "Lfreemarker.template.TemplateModelException;", NULL },
    { "wrapAsAPIWithId:", "wrapAsAPI", "Lfreemarker.template.TemplateHashModel;", 0x1, "Lfreemarker.template.TemplateModelException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "instance_", NULL, 0x18, "Lfreemarker.template.SimpleObjectWrapper;", &FreemarkerTemplateSimpleObjectWrapper_instance_, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerTemplateSimpleObjectWrapper = { 2, "SimpleObjectWrapper", "freemarker.template", NULL, 0x1, 4, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerTemplateSimpleObjectWrapper;
}

@end


#line 33
void FreemarkerTemplateSimpleObjectWrapper_init(FreemarkerTemplateSimpleObjectWrapper *self) {
  (void) FreemarkerTemplateDefaultObjectWrapper_init(self);
}


#line 33
FreemarkerTemplateSimpleObjectWrapper *new_FreemarkerTemplateSimpleObjectWrapper_init() {
  FreemarkerTemplateSimpleObjectWrapper *self = [FreemarkerTemplateSimpleObjectWrapper alloc];
  FreemarkerTemplateSimpleObjectWrapper_init(self);
  return self;
}


#line 42
void FreemarkerTemplateSimpleObjectWrapper_initWithFreemarkerTemplateVersion_(FreemarkerTemplateSimpleObjectWrapper *self, FreemarkerTemplateVersion *incompatibleImprovements) {
  (void) FreemarkerTemplateDefaultObjectWrapper_initWithFreemarkerTemplateVersion_(self, incompatibleImprovements);
}


#line 42
FreemarkerTemplateSimpleObjectWrapper *new_FreemarkerTemplateSimpleObjectWrapper_initWithFreemarkerTemplateVersion_(FreemarkerTemplateVersion *incompatibleImprovements) {
  FreemarkerTemplateSimpleObjectWrapper *self = [FreemarkerTemplateSimpleObjectWrapper alloc];
  FreemarkerTemplateSimpleObjectWrapper_initWithFreemarkerTemplateVersion_(self, incompatibleImprovements);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerTemplateSimpleObjectWrapper)
