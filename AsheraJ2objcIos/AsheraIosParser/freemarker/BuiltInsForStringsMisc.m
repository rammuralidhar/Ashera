//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/BuiltInsForStringsMisc.java
//


#include "ArithmeticEngine.h"
#include "BuiltInForString.h"
#include "BuiltInsForStringsMisc.h"
#include "Configuration.h"
#include "Environment.h"
#include "Expression.h"
#include "FMParser.h"
#include "FMParserConstants.h"
#include "FMParserTokenManager.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "MessageUtil.h"
#include "NonNumericalException.h"
#include "ParseException.h"
#include "SimpleCharStream.h"
#include "SimpleNumber.h"
#include "Template.h"
#include "TemplateBooleanModel.h"
#include "TemplateException.h"
#include "TemplateModel.h"
#include "TemplateObject.h"
#include "TokenMgrError.h"
#include "Version.h"
#include "_DelayedGetMessage.h"
#include "_DelayedGetMessageWithoutStackTop.h"
#include "_DelayedJQuote.h"
#include "_MiscTemplateException.h"
#include "java/io/StringReader.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/RuntimeException.h"

#line 0 "/Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/BuiltInsForStringsMisc.java"

@interface FreemarkerCoreBuiltInsForStringsMisc ()

- (instancetype)init;

@end

__attribute__((unused)) static void FreemarkerCoreBuiltInsForStringsMisc_init(FreemarkerCoreBuiltInsForStringsMisc *self);

__attribute__((unused)) static FreemarkerCoreBuiltInsForStringsMisc *new_FreemarkerCoreBuiltInsForStringsMisc_init() NS_RETURNS_RETAINED;


#line 27
@implementation FreemarkerCoreBuiltInsForStringsMisc


#line 102
- (instancetype)init {
  FreemarkerCoreBuiltInsForStringsMisc_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "BuiltInsForStringsMisc", NULL, 0x2, NULL, NULL },
  };
  static const char *inner_classes[] = {"Lfreemarker.core.BuiltInsForStringsMisc$booleanBI;", "Lfreemarker.core.BuiltInsForStringsMisc$evalBI;", "Lfreemarker.core.BuiltInsForStringsMisc$numberBI;"};
  static const J2ObjcClassInfo _FreemarkerCoreBuiltInsForStringsMisc = { 2, "BuiltInsForStringsMisc", "freemarker.core", NULL, 0x0, 1, methods, 0, NULL, 0, NULL, 3, inner_classes, NULL, NULL };
  return &_FreemarkerCoreBuiltInsForStringsMisc;
}

@end


#line 102
void FreemarkerCoreBuiltInsForStringsMisc_init(FreemarkerCoreBuiltInsForStringsMisc *self) {
  (void) NSObject_init(self);
}


#line 102
FreemarkerCoreBuiltInsForStringsMisc *new_FreemarkerCoreBuiltInsForStringsMisc_init() {
  FreemarkerCoreBuiltInsForStringsMisc *self = [FreemarkerCoreBuiltInsForStringsMisc alloc];
  FreemarkerCoreBuiltInsForStringsMisc_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreBuiltInsForStringsMisc)


#line 29
@implementation FreemarkerCoreBuiltInsForStringsMisc_booleanBI


#line 30
- (id<FreemarkerTemplateTemplateModel>)calculateResultWithNSString:(NSString *)s
                                     withFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env {
  jboolean b;
  if ([((NSString *) nil_chk(s)) isEqual:@"true"]) {
    b = YES;
  }
  else
#line 34
  if ([s isEqual:@"false"]) {
    b = NO;
  }
  else
#line 36
  if ([s isEqual:[((FreemarkerCoreEnvironment *) nil_chk(env)) getTrueStringValue]]) {
    b = YES;
  }
  else
#line 38
  if ([s isEqual:[env getFalseStringValue]]) {
    b = NO;
  }
  else {
    
#line 41
    @throw new_FreemarkerCore_MiscTemplateException_initWithFreemarkerCoreExpression_withFreemarkerCoreEnvironment_withNSObjectArray_(self, env, [IOSObjectArray newArrayWithObjects:(id[]){
#line 42
      @"Can't convert this string to boolean: ", new_FreemarkerCore_DelayedJQuote_initWithId_(s) } count:2 type:NSObject_class_()]);
    }
    return b ? FreemarkerTemplateTemplateBooleanModel_get_TRUE__() : FreemarkerTemplateTemplateBooleanModel_get_FALSE__();
  }

- (instancetype)init {
  FreemarkerCoreBuiltInsForStringsMisc_booleanBI_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "calculateResultWithNSString:withFreemarkerCoreEnvironment:", "calculateResult", "Lfreemarker.template.TemplateModel;", 0x0, "Lfreemarker.template.TemplateException;", NULL },
    { "init", NULL, NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcClassInfo _FreemarkerCoreBuiltInsForStringsMisc_booleanBI = { 2, "booleanBI", "freemarker.core", "BuiltInsForStringsMisc", 0x8, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerCoreBuiltInsForStringsMisc_booleanBI;
}

@end

void FreemarkerCoreBuiltInsForStringsMisc_booleanBI_init(FreemarkerCoreBuiltInsForStringsMisc_booleanBI *self) {
  (void) FreemarkerCoreBuiltInForString_init(self);
}

FreemarkerCoreBuiltInsForStringsMisc_booleanBI *new_FreemarkerCoreBuiltInsForStringsMisc_booleanBI_init() {
  FreemarkerCoreBuiltInsForStringsMisc_booleanBI *self = [FreemarkerCoreBuiltInsForStringsMisc_booleanBI alloc];
  FreemarkerCoreBuiltInsForStringsMisc_booleanBI_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreBuiltInsForStringsMisc_booleanBI)


#line 48
@implementation FreemarkerCoreBuiltInsForStringsMisc_evalBI


#line 49
- (id<FreemarkerTemplateTemplateModel>)calculateResultWithNSString:(NSString *)s
                                     withFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env {
  
#line 51
  FreemarkerCoreSimpleCharStream *scs = new_FreemarkerCoreSimpleCharStream_initWithJavaIoReader_withInt_withInt_withInt_(new_JavaIoStringReader_initWithNSString_(JreStrcat("C$C", '(',
#line 52
  s, ')')), FreemarkerCoreTemplateObject_RUNTIME_EVAL_LINE_DISPLACEMENT, 1, ((jint) [((NSString *) nil_chk(s)) length]) + 2);
  FreemarkerCoreFMParserTokenManager *token_source = new_FreemarkerCoreFMParserTokenManager_initWithFreemarkerCoreSimpleCharStream_(scs);
  FreemarkerTemplateConfiguration *cfg = [((FreemarkerCoreEnvironment *) nil_chk(env)) getConfiguration];
  token_source->incompatibleImprovements_ = [((FreemarkerTemplateVersion *) nil_chk([((FreemarkerTemplateConfiguration *) nil_chk(cfg)) getIncompatibleImprovements])) intValue];
  [token_source SwitchToWithInt:FreemarkerCoreFMParserConstants_FM_EXPRESSION];
  jint namingConvention = [cfg getNamingConvention];
  token_source->initialNamingConvention_ = namingConvention;
  token_source->namingConvention_ = namingConvention;
  FreemarkerCoreFMParser *parser = new_FreemarkerCoreFMParser_initWithFreemarkerCoreFMParserTokenManager_(token_source);
  [parser setTemplateWithFreemarkerTemplateTemplate:[self getTemplate]];
  FreemarkerCoreExpression *exp = nil;
  @try {
    @try {
      exp = [parser Expression];
    }
    @catch (
#line 66
    FreemarkerCoreTokenMgrError *e) {
      @throw [((FreemarkerCoreTokenMgrError *) nil_chk(e)) toParseExceptionWithFreemarkerTemplateTemplate:[self getTemplate]];
    }
  }
  @catch (
#line 69
  FreemarkerCoreParseException *e) {
    @throw new_FreemarkerCore_MiscTemplateException_initWithFreemarkerCoreExpression_withFreemarkerCoreEnvironment_withNSObjectArray_(self, env, [IOSObjectArray newArrayWithObjects:(id[]){
#line 71
      @"Failed to \"?", key_, @"\" string with this error:\n\n", FreemarkerCoreMessageUtil_get_EMBEDDED_MESSAGE_BEGIN_(), new_FreemarkerCore_DelayedGetMessage_initWithJavaLangThrowable_(
#line 73
      e), FreemarkerCoreMessageUtil_get_EMBEDDED_MESSAGE_END_(),
#line 75
      @"\n\nThe failing expression:" } count:7 type:NSObject_class_()]);
    }
    @try {
      return [((FreemarkerCoreExpression *) nil_chk(exp)) evalWithFreemarkerCoreEnvironment:env];
    }
    @catch (
#line 79
    FreemarkerTemplateTemplateException *e) {
      @throw new_FreemarkerCore_MiscTemplateException_initWithFreemarkerCoreExpression_withFreemarkerCoreEnvironment_withNSObjectArray_(self, env, [IOSObjectArray newArrayWithObjects:(id[]){
#line 81
        @"Failed to \"?", key_, @"\" string with this error:\n\n", FreemarkerCoreMessageUtil_get_EMBEDDED_MESSAGE_BEGIN_(), new_FreemarkerCore_DelayedGetMessageWithoutStackTop_initWithFreemarkerTemplateTemplateException_(
#line 83
        e), FreemarkerCoreMessageUtil_get_EMBEDDED_MESSAGE_END_(),
#line 85
        @"\n\nThe failing expression:" } count:7 type:NSObject_class_()]);
      }
    }

- (instancetype)init {
  FreemarkerCoreBuiltInsForStringsMisc_evalBI_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "calculateResultWithNSString:withFreemarkerCoreEnvironment:", "calculateResult", "Lfreemarker.template.TemplateModel;", 0x0, "Lfreemarker.template.TemplateException;", NULL },
    { "init", NULL, NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcClassInfo _FreemarkerCoreBuiltInsForStringsMisc_evalBI = { 2, "evalBI", "freemarker.core", "BuiltInsForStringsMisc", 0x8, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerCoreBuiltInsForStringsMisc_evalBI;
}

@end

void FreemarkerCoreBuiltInsForStringsMisc_evalBI_init(FreemarkerCoreBuiltInsForStringsMisc_evalBI *self) {
  (void) FreemarkerCoreBuiltInForString_init(self);
}

FreemarkerCoreBuiltInsForStringsMisc_evalBI *new_FreemarkerCoreBuiltInsForStringsMisc_evalBI_init() {
  FreemarkerCoreBuiltInsForStringsMisc_evalBI *self = [FreemarkerCoreBuiltInsForStringsMisc_evalBI alloc];
  FreemarkerCoreBuiltInsForStringsMisc_evalBI_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreBuiltInsForStringsMisc_evalBI)


#line 90
@implementation FreemarkerCoreBuiltInsForStringsMisc_numberBI


#line 91
- (id<FreemarkerTemplateTemplateModel>)calculateResultWithNSString:(NSString *)s
                                     withFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env {
  
#line 93
  @try {
    return new_FreemarkerTemplateSimpleNumber_initWithNSNumber_([((FreemarkerCoreArithmeticEngine *) nil_chk([((FreemarkerCoreEnvironment *) nil_chk(env)) getArithmeticEngine])) toNumberWithNSString:s]);
  }
  @catch (
#line 95
  JavaLangNumberFormatException *nfe) {
    @throw FreemarkerCoreNonNumericalException_newMalformedNumberExceptionWithFreemarkerCoreExpression_withNSString_withFreemarkerCoreEnvironment_(self, s, env);
  }
}

- (instancetype)init {
  FreemarkerCoreBuiltInsForStringsMisc_numberBI_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "calculateResultWithNSString:withFreemarkerCoreEnvironment:", "calculateResult", "Lfreemarker.template.TemplateModel;", 0x0, "Lfreemarker.template.TemplateException;", NULL },
    { "init", NULL, NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcClassInfo _FreemarkerCoreBuiltInsForStringsMisc_numberBI = { 2, "numberBI", "freemarker.core", "BuiltInsForStringsMisc", 0x8, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerCoreBuiltInsForStringsMisc_numberBI;
}

@end

void FreemarkerCoreBuiltInsForStringsMisc_numberBI_init(FreemarkerCoreBuiltInsForStringsMisc_numberBI *self) {
  (void) FreemarkerCoreBuiltInForString_init(self);
}

FreemarkerCoreBuiltInsForStringsMisc_numberBI *new_FreemarkerCoreBuiltInsForStringsMisc_numberBI_init() {
  FreemarkerCoreBuiltInsForStringsMisc_numberBI *self = [FreemarkerCoreBuiltInsForStringsMisc_numberBI alloc];
  FreemarkerCoreBuiltInsForStringsMisc_numberBI_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreBuiltInsForStringsMisc_numberBI)
