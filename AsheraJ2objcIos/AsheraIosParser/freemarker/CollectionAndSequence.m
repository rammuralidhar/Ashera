//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/CollectionAndSequence.java
//


#include "CollectionAndSequence.h"
#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "TemplateCollectionModel.h"
#include "TemplateModel.h"
#include "TemplateModelException.h"
#include "TemplateModelIterator.h"
#include "TemplateSequenceModel.h"
#include "java/util/ArrayList.h"

#line 0 "/Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/CollectionAndSequence.java"

@interface FreemarkerCoreCollectionAndSequence () {
 @public
  id<FreemarkerTemplateTemplateCollectionModel> collection_;
  id<FreemarkerTemplateTemplateSequenceModel> sequence_;
  JavaUtilArrayList *data_;
}

- (void)initSequence OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_FIELD_SETTER(FreemarkerCoreCollectionAndSequence, collection_, id<FreemarkerTemplateTemplateCollectionModel>)
J2OBJC_FIELD_SETTER(FreemarkerCoreCollectionAndSequence, sequence_, id<FreemarkerTemplateTemplateSequenceModel>)
J2OBJC_FIELD_SETTER(FreemarkerCoreCollectionAndSequence, data_, JavaUtilArrayList *)

__attribute__((unused)) static void FreemarkerCoreCollectionAndSequence_initSequence(FreemarkerCoreCollectionAndSequence *self);

@interface FreemarkerCoreCollectionAndSequence_SequenceIterator : NSObject < FreemarkerTemplateTemplateModelIterator > {
 @public
  id<FreemarkerTemplateTemplateSequenceModel> sequence_;
  jint size_;
  jint index_;
}

- (instancetype)initWithFreemarkerTemplateTemplateSequenceModel:(id<FreemarkerTemplateTemplateSequenceModel>)sequence;

- (id<FreemarkerTemplateTemplateModel>)next;

- (jboolean)hasNext;

@end

J2OBJC_EMPTY_STATIC_INIT(FreemarkerCoreCollectionAndSequence_SequenceIterator)

J2OBJC_FIELD_SETTER(FreemarkerCoreCollectionAndSequence_SequenceIterator, sequence_, id<FreemarkerTemplateTemplateSequenceModel>)

__attribute__((unused)) static void FreemarkerCoreCollectionAndSequence_SequenceIterator_initWithFreemarkerTemplateTemplateSequenceModel_(FreemarkerCoreCollectionAndSequence_SequenceIterator *self, id<FreemarkerTemplateTemplateSequenceModel> sequence);

__attribute__((unused)) static FreemarkerCoreCollectionAndSequence_SequenceIterator *new_FreemarkerCoreCollectionAndSequence_SequenceIterator_initWithFreemarkerTemplateTemplateSequenceModel_(id<FreemarkerTemplateTemplateSequenceModel> sequence) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerCoreCollectionAndSequence_SequenceIterator)


#line 32
@implementation FreemarkerCoreCollectionAndSequence


#line 39
- (instancetype)initWithFreemarkerTemplateTemplateCollectionModel:(id<FreemarkerTemplateTemplateCollectionModel>)collection {
  FreemarkerCoreCollectionAndSequence_initWithFreemarkerTemplateTemplateCollectionModel_(self, collection);
  return self;
}


#line 43
- (instancetype)initWithFreemarkerTemplateTemplateSequenceModel:(id<FreemarkerTemplateTemplateSequenceModel>)sequence {
  FreemarkerCoreCollectionAndSequence_initWithFreemarkerTemplateTemplateSequenceModel_(self, sequence);
  return self;
}


#line 47
- (id<FreemarkerTemplateTemplateModelIterator>)iterator {
  if (collection_ != nil) {
    return [collection_ iterator];
  }
  else {
    
#line 51
    return new_FreemarkerCoreCollectionAndSequence_SequenceIterator_initWithFreemarkerTemplateTemplateSequenceModel_(sequence_);
  }
}


#line 55
- (id<FreemarkerTemplateTemplateModel>)getWithInt:(jint)i {
  if (sequence_ != nil) {
    return [sequence_ getWithInt:i];
  }
  else {
    
#line 59
    FreemarkerCoreCollectionAndSequence_initSequence(self);
    return (id<FreemarkerTemplateTemplateModel>) check_protocol_cast([((JavaUtilArrayList *) nil_chk(data_)) getWithInt:i], @protocol(FreemarkerTemplateTemplateModel));
  }
}


#line 64
- (jint)size {
  if (sequence_ != nil) {
    return [sequence_ size];
  }
  else {
    
#line 68
    FreemarkerCoreCollectionAndSequence_initSequence(self);
    return [((JavaUtilArrayList *) nil_chk(data_)) size];
  }
}


#line 73
- (void)initSequence {
  FreemarkerCoreCollectionAndSequence_initSequence(self);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithFreemarkerTemplateTemplateCollectionModel:", "CollectionAndSequence", NULL, 0x1, NULL, NULL },
    { "initWithFreemarkerTemplateTemplateSequenceModel:", "CollectionAndSequence", NULL, 0x1, NULL, NULL },
    { "iterator", NULL, "Lfreemarker.template.TemplateModelIterator;", 0x1, "Lfreemarker.template.TemplateModelException;", NULL },
    { "getWithInt:", "get", "Lfreemarker.template.TemplateModel;", 0x1, "Lfreemarker.template.TemplateModelException;", NULL },
    { "size", NULL, "I", 0x1, "Lfreemarker.template.TemplateModelException;", NULL },
    { "initSequence", NULL, "V", 0x2, "Lfreemarker.template.TemplateModelException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "collection_", NULL, 0x2, "Lfreemarker.template.TemplateCollectionModel;", NULL, NULL,  },
    { "sequence_", NULL, 0x2, "Lfreemarker.template.TemplateSequenceModel;", NULL, NULL,  },
    { "data_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, NULL,  },
  };
  static const char *inner_classes[] = {"Lfreemarker.core.CollectionAndSequence$SequenceIterator;"};
  static const J2ObjcClassInfo _FreemarkerCoreCollectionAndSequence = { 2, "CollectionAndSequence", "freemarker.core", NULL, 0x11, 6, methods, 3, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_FreemarkerCoreCollectionAndSequence;
}

@end


#line 39
void FreemarkerCoreCollectionAndSequence_initWithFreemarkerTemplateTemplateCollectionModel_(FreemarkerCoreCollectionAndSequence *self, id<FreemarkerTemplateTemplateCollectionModel> collection) {
  (void) NSObject_init(self);
  
#line 40
  self->collection_ = collection;
}


#line 39
FreemarkerCoreCollectionAndSequence *new_FreemarkerCoreCollectionAndSequence_initWithFreemarkerTemplateTemplateCollectionModel_(id<FreemarkerTemplateTemplateCollectionModel> collection) {
  FreemarkerCoreCollectionAndSequence *self = [FreemarkerCoreCollectionAndSequence alloc];
  FreemarkerCoreCollectionAndSequence_initWithFreemarkerTemplateTemplateCollectionModel_(self, collection);
  return self;
}


#line 43
void FreemarkerCoreCollectionAndSequence_initWithFreemarkerTemplateTemplateSequenceModel_(FreemarkerCoreCollectionAndSequence *self, id<FreemarkerTemplateTemplateSequenceModel> sequence) {
  (void) NSObject_init(self);
  
#line 44
  self->sequence_ = sequence;
}


#line 43
FreemarkerCoreCollectionAndSequence *new_FreemarkerCoreCollectionAndSequence_initWithFreemarkerTemplateTemplateSequenceModel_(id<FreemarkerTemplateTemplateSequenceModel> sequence) {
  FreemarkerCoreCollectionAndSequence *self = [FreemarkerCoreCollectionAndSequence alloc];
  FreemarkerCoreCollectionAndSequence_initWithFreemarkerTemplateTemplateSequenceModel_(self, sequence);
  return self;
}


#line 73
void FreemarkerCoreCollectionAndSequence_initSequence(FreemarkerCoreCollectionAndSequence *self) {
  if (self->data_ == nil) {
    self->data_ = new_JavaUtilArrayList_init();
    id<FreemarkerTemplateTemplateModelIterator> it = [((id<FreemarkerTemplateTemplateCollectionModel>) nil_chk(self->collection_)) iterator];
    while ([((id<FreemarkerTemplateTemplateModelIterator>) nil_chk(it)) hasNext]) {
      [self->data_ addWithId:[it next]];
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreCollectionAndSequence)


#line 83
@implementation FreemarkerCoreCollectionAndSequence_SequenceIterator


#line 90
- (instancetype)initWithFreemarkerTemplateTemplateSequenceModel:(id<FreemarkerTemplateTemplateSequenceModel>)sequence {
  FreemarkerCoreCollectionAndSequence_SequenceIterator_initWithFreemarkerTemplateTemplateSequenceModel_(self, sequence);
  return self;
}

- (id<FreemarkerTemplateTemplateModel>)next {
  return [((id<FreemarkerTemplateTemplateSequenceModel>) nil_chk(sequence_)) getWithInt:index_++];
}

- (jboolean)hasNext {
  return index_ < size_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithFreemarkerTemplateTemplateSequenceModel:", "SequenceIterator", NULL, 0x0, "Lfreemarker.template.TemplateModelException;", NULL },
    { "next", NULL, "Lfreemarker.template.TemplateModel;", 0x1, "Lfreemarker.template.TemplateModelException;", NULL },
    { "hasNext", NULL, "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "sequence_", NULL, 0x12, "Lfreemarker.template.TemplateSequenceModel;", NULL, NULL,  },
    { "size_", NULL, 0x12, "I", NULL, NULL,  },
    { "index_", NULL, 0x2, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerCoreCollectionAndSequence_SequenceIterator = { 2, "SequenceIterator", "freemarker.core", "CollectionAndSequence", 0xa, 3, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerCoreCollectionAndSequence_SequenceIterator;
}

@end


#line 90
void FreemarkerCoreCollectionAndSequence_SequenceIterator_initWithFreemarkerTemplateTemplateSequenceModel_(FreemarkerCoreCollectionAndSequence_SequenceIterator *self, id<FreemarkerTemplateTemplateSequenceModel> sequence) {
  (void) NSObject_init(self);
  self->index_ =
#line 88
  0;
  
#line 91
  self->sequence_ = sequence;
  self->size_ = [((id<FreemarkerTemplateTemplateSequenceModel>) nil_chk(sequence)) size];
}


#line 90
FreemarkerCoreCollectionAndSequence_SequenceIterator *new_FreemarkerCoreCollectionAndSequence_SequenceIterator_initWithFreemarkerTemplateTemplateSequenceModel_(id<FreemarkerTemplateTemplateSequenceModel> sequence) {
  FreemarkerCoreCollectionAndSequence_SequenceIterator *self = [FreemarkerCoreCollectionAndSequence_SequenceIterator alloc];
  FreemarkerCoreCollectionAndSequence_SequenceIterator_initWithFreemarkerTemplateTemplateSequenceModel_(self, sequence);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreCollectionAndSequence_SequenceIterator)
