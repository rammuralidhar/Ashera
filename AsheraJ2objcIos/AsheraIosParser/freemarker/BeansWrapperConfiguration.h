//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/ext/beans/BeansWrapperConfiguration.java
//

#ifndef _FreemarkerExtBeansBeansWrapperConfiguration_H_
#define _FreemarkerExtBeansBeansWrapperConfiguration_H_

#include "J2ObjC_header.h"

@class FreemarkerExtBeansClassIntrospectorBuilder;
@class FreemarkerTemplateVersion;
@protocol FreemarkerExtBeansMethodAppearanceFineTuner;
@protocol FreemarkerExtBeansMethodSorter;
@protocol FreemarkerTemplateObjectWrapper;

/**
 @brief Holds BeansWrapper configuration settings and defines their defaults.
 You will not use this abstract class directly, but concrete subclasses like BeansWrapperBuilder and DefaultObjectWrapperBuilder . Unless, you are developing a builder for a custom BeansWrapper subclass. <p>This class is designed so that its instances can be used as lookup keys in a singleton cache. This is also why this class defines the configuration setting defaults for BeansWrapper , instead of leaving that to BeansWrapper itself. (Because, the default values influence the lookup key, and the singleton needs to be looked up without creating a BeansWrapper instance.) However, because instances are mutable, you should deep-clone it with #clone(boolean) before using it as cache key.
 @since 2.3.21
 */
@interface FreemarkerExtBeansBeansWrapperConfiguration : NSObject < NSCopying > {
 @public
  FreemarkerExtBeansClassIntrospectorBuilder *classIntrospectorFactory_;
}

#pragma mark Public

/**
 @brief Two BeansWrapperConfiguration -s are equal exactly if their classes are identical ( <code>==</code> ), and their field values are equal.
 */
- (jboolean)isEqual:(id)obj;

- (jint)getDefaultDateType;

- (jboolean)getExposeFields;

- (jint)getExposureLevel;

- (FreemarkerTemplateVersion *)getIncompatibleImprovements;

- (id<FreemarkerExtBeansMethodAppearanceFineTuner>)getMethodAppearanceFineTuner;

- (id<FreemarkerTemplateObjectWrapper>)getOuterIdentity;

- (jboolean)getUseModelCache;

- (NSUInteger)hash;

- (jboolean)isSimpleMapWrapper;

- (jboolean)isStrict;

/**
 @brief See BeansWrapper#setDefaultDateType(int) .
 */
- (void)setDefaultDateTypeWithInt:(jint)defaultDateType;

/**
 @brief See BeansWrapper#setExposeFields(boolean) .
 */
- (void)setExposeFieldsWithBoolean:(jboolean)exposeFields;

/**
 @brief See BeansWrapper#setExposureLevel(int) .
 */
- (void)setExposureLevelWithInt:(jint)exposureLevel;

/**
 @brief See BeansWrapper#setMethodAppearanceFineTuner(MethodAppearanceFineTuner) ; additionally, note that currently setting this to non- <code>null</code> will disable class introspection cache sharing, unless the value implements SingletonCustomizer .
 */
- (void)setMethodAppearanceFineTunerWithFreemarkerExtBeansMethodAppearanceFineTuner:(id<FreemarkerExtBeansMethodAppearanceFineTuner>)methodAppearanceFineTuner;

/**
 @brief See BeansWrapper#setOuterIdentity(ObjectWrapper) , except here the default is <code>null</code> that means the ObjectWrapper that you will set up with this BeansWrapperBuilder object.
 */
- (void)setOuterIdentityWithFreemarkerTemplateObjectWrapper:(id<FreemarkerTemplateObjectWrapper>)outerIdentity;

/**
 @brief See BeansWrapper#setSimpleMapWrapper(boolean) .
 */
- (void)setSimpleMapWrapperWithBoolean:(jboolean)simpleMapWrapper;

/**
 @brief See BeansWrapper#setStrict(boolean) .
 */
- (void)setStrictWithBoolean:(jboolean)strict;

/**
 @brief See BeansWrapper#setUseCache(boolean) (it means the same).
 */
- (void)setUseModelCacheWithBoolean:(jboolean)useModelCache;

#pragma mark Protected

/**
 @brief Same as #BeansWrapperConfiguration(Version,boolean) BeansWrapperConfiguration(Version, false) .
 */
- (instancetype)initWithFreemarkerTemplateVersion:(FreemarkerTemplateVersion *)incompatibleImprovements;

/**
 @param incompatibleImprovements See the corresponding parameter of BeansWrapper#BeansWrapper(Version) . Not <code>null</code> . Note that the version will be normalized to the lowest version where the same incompatible BeansWrapper improvements were already present, so for the returned instance #getIncompatibleImprovements() might returns a lower version than what you have specified here.
 @param isIncompImprsAlreadyNormalized Tells if the <code>incompatibleImprovements</code> parameter contains an <em>already normalized</em> value. This parameter meant to be <code>true</code> when the class that extends BeansWrapper needs to add additional breaking versions over those of BeansWrapper . Thus, if this parameter is <code>true</code> , the versions where BeansWrapper had breaking changes must be already factored into the <code>incompatibleImprovements</code> parameter value, as no more normalization will happen. (You can use BeansWrapper#normalizeIncompatibleImprovementsVersion(Version) to discover those.)
 @since 2.3.22
 */
- (instancetype)initWithFreemarkerTemplateVersion:(FreemarkerTemplateVersion *)incompatibleImprovements
                                      withBoolean:(jboolean)isIncompImprsAlreadyNormalized;

- (id)cloneWithBoolean:(jboolean)deepCloneKey;

#pragma mark Package-Private

- (id<FreemarkerExtBeansMethodSorter>)getMethodSorter;

- (void)setMethodSorterWithFreemarkerExtBeansMethodSorter:(id<FreemarkerExtBeansMethodSorter>)methodSorter;

@end

J2OBJC_EMPTY_STATIC_INIT(FreemarkerExtBeansBeansWrapperConfiguration)

J2OBJC_FIELD_SETTER(FreemarkerExtBeansBeansWrapperConfiguration, classIntrospectorFactory_, FreemarkerExtBeansClassIntrospectorBuilder *)

FOUNDATION_EXPORT void FreemarkerExtBeansBeansWrapperConfiguration_initWithFreemarkerTemplateVersion_withBoolean_(FreemarkerExtBeansBeansWrapperConfiguration *self, FreemarkerTemplateVersion *incompatibleImprovements, jboolean isIncompImprsAlreadyNormalized);

FOUNDATION_EXPORT void FreemarkerExtBeansBeansWrapperConfiguration_initWithFreemarkerTemplateVersion_(FreemarkerExtBeansBeansWrapperConfiguration *self, FreemarkerTemplateVersion *incompatibleImprovements);

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerExtBeansBeansWrapperConfiguration)

#endif // _FreemarkerExtBeansBeansWrapperConfiguration_H_
