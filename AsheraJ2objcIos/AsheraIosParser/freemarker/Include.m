//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/Include.java
//


#include "BugException.h"
#include "Configuration.h"
#include "Environment.h"
#include "EvalUtil.h"
#include "Expression.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "Include.h"
#include "J2ObjC_source.h"
#include "MalformedTemplateNameException.h"
#include "NonBooleanException.h"
#include "ParameterRole.h"
#include "ParseException.h"
#include "StringLiteral.h"
#include "StringUtil.h"
#include "Template.h"
#include "TemplateElement.h"
#include "TemplateException.h"
#include "TemplateModel.h"
#include "TemplateObject.h"
#include "TemplateScalarModel.h"
#include "_DelayedGetMessage.h"
#include "_DelayedJQuote.h"
#include "_MiscTemplateException.h"
#include "java/io/IOException.h"
#include "java/lang/Boolean.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/StringBuffer.h"

#line 0 "/Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/Include.java"

@interface FreemarkerCoreInclude () {
 @public
  FreemarkerCoreExpression *includedTemplateNameExp_, *encodingExp_, *parseExp_, *ignoreMissingExp_;
  NSString *encoding_;
  JavaLangBoolean *parse_;
  JavaLangBoolean *ignoreMissingExpPrecalcedValue_;
}

- (jboolean)getYesNoWithFreemarkerCoreExpression:(FreemarkerCoreExpression *)exp
                                    withNSString:(NSString *)s;

@end

J2OBJC_FIELD_SETTER(FreemarkerCoreInclude, includedTemplateNameExp_, FreemarkerCoreExpression *)
J2OBJC_FIELD_SETTER(FreemarkerCoreInclude, encodingExp_, FreemarkerCoreExpression *)
J2OBJC_FIELD_SETTER(FreemarkerCoreInclude, parseExp_, FreemarkerCoreExpression *)
J2OBJC_FIELD_SETTER(FreemarkerCoreInclude, ignoreMissingExp_, FreemarkerCoreExpression *)
J2OBJC_FIELD_SETTER(FreemarkerCoreInclude, encoding_, NSString *)
J2OBJC_FIELD_SETTER(FreemarkerCoreInclude, parse_, JavaLangBoolean *)
J2OBJC_FIELD_SETTER(FreemarkerCoreInclude, ignoreMissingExpPrecalcedValue_, JavaLangBoolean *)

__attribute__((unused)) static jboolean FreemarkerCoreInclude_getYesNoWithFreemarkerCoreExpression_withNSString_(FreemarkerCoreInclude *self, FreemarkerCoreExpression *exp, NSString *s);


#line 33
@implementation FreemarkerCoreInclude


#line 46
- (instancetype)initWithFreemarkerTemplateTemplate:(FreemarkerTemplateTemplate *)template_
                      withFreemarkerCoreExpression:(FreemarkerCoreExpression *)includedTemplatePathExp
                      withFreemarkerCoreExpression:(FreemarkerCoreExpression *)encodingExp
                      withFreemarkerCoreExpression:(FreemarkerCoreExpression *)parseExp
                      withFreemarkerCoreExpression:(FreemarkerCoreExpression *)ignoreMissingExp {
  FreemarkerCoreInclude_initWithFreemarkerTemplateTemplate_withFreemarkerCoreExpression_withFreemarkerCoreExpression_withFreemarkerCoreExpression_withFreemarkerCoreExpression_(self, template_, includedTemplatePathExp, encodingExp, parseExp, ignoreMissingExp);
  return self;
}


#line 117
- (void)acceptWithFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env {
  NSString *includedTemplateName = [((FreemarkerCoreExpression *) nil_chk(includedTemplateNameExp_)) evalAndCoerceToStringWithFreemarkerCoreEnvironment:env];
  NSString *fullIncludedTemplateName;
  @try {
    fullIncludedTemplateName = [((FreemarkerCoreEnvironment *) nil_chk(env)) toFullTemplateNameWithNSString:[((FreemarkerTemplateTemplate *) nil_chk([self getTemplate])) getName] withNSString:includedTemplateName];
  }
  @catch (
#line 122
  FreemarkerTemplateMalformedTemplateNameException *e) {
    @throw new_FreemarkerCore_MiscTemplateException_initWithJavaLangThrowable_withFreemarkerCoreEnvironment_withNSObjectArray_(e, env, [IOSObjectArray newArrayWithObjects:(id[]){
#line 124
      @"Malformed template name ", new_FreemarkerCore_DelayedJQuote_initWithId_([((FreemarkerTemplateMalformedTemplateNameException *) nil_chk(e)) getTemplateName]), @":\n",
#line 125
      [e getMalformednessDescription] } count:4 type:NSObject_class_()]);
    }
    
#line 128
    NSString *encoding = self->encoding_ != nil ?
#line 129
    self->encoding_ :
#line 130
    (encodingExp_ != nil ?
#line 131
    [encodingExp_ evalAndCoerceToStringWithFreemarkerCoreEnvironment:env] :
#line 132
    nil);
    
#line 134
    jboolean parse;
    if (self->parse_ != nil) {
      parse = [self->parse_ booleanValue];
    }
    else {
      
#line 138
      id<FreemarkerTemplateTemplateModel> tm = [((FreemarkerCoreExpression *) nil_chk(parseExp_)) evalWithFreemarkerCoreEnvironment:env];
      if ([FreemarkerTemplateTemplateScalarModel_class_() isInstance:tm]) {
        
#line 141
        parse = FreemarkerCoreInclude_getYesNoWithFreemarkerCoreExpression_withNSString_(self, parseExp_, FreemarkerCoreEvalUtil_modelToStringWithFreemarkerTemplateTemplateScalarModel_withFreemarkerCoreExpression_withFreemarkerCoreEnvironment_((id<FreemarkerTemplateTemplateScalarModel>) check_protocol_cast(tm, @protocol(FreemarkerTemplateTemplateScalarModel)), parseExp_, env));
      }
      else {
        
#line 143
        parse = [parseExp_ modelToBooleanWithFreemarkerTemplateTemplateModel:tm withFreemarkerCoreEnvironment:env];
      }
    }
    
#line 147
    jboolean ignoreMissing;
    if (self->ignoreMissingExpPrecalcedValue_ != nil) {
      ignoreMissing = [self->ignoreMissingExpPrecalcedValue_ booleanValue];
    }
    else
#line 150
    if (ignoreMissingExp_ != nil) {
      ignoreMissing = [ignoreMissingExp_ evalToBooleanWithFreemarkerCoreEnvironment:env];
    }
    else {
      
#line 153
      ignoreMissing = NO;
    }
    
#line 156
    FreemarkerTemplateTemplate *includedTemplate;
    @try {
      includedTemplate = [((FreemarkerCoreEnvironment *) nil_chk(env)) getTemplateForInclusionWithNSString:fullIncludedTemplateName withNSString:encoding withBoolean:parse withBoolean:ignoreMissing];
    }
    @catch (
#line 159
    JavaIoIOException *e) {
      @throw new_FreemarkerCore_MiscTemplateException_initWithJavaLangThrowable_withFreemarkerCoreEnvironment_withNSObjectArray_(e, env, [IOSObjectArray newArrayWithObjects:(id[]){
#line 161
        @"Template inclusion failed (for parameter value ", new_FreemarkerCore_DelayedJQuote_initWithId_(
#line 162
        includedTemplateName),
#line 163
        @"):\n", new_FreemarkerCore_DelayedGetMessage_initWithJavaLangThrowable_(e) } count:4 type:NSObject_class_()]);
      }
      
#line 166
      if (includedTemplate != nil) {
        [((FreemarkerCoreEnvironment *) nil_chk(env)) includeWithFreemarkerTemplateTemplate:includedTemplate];
      }
    }


#line 171
- (NSString *)dumpWithBoolean:(jboolean)canonical {
  JavaLangStringBuffer *buf = new_JavaLangStringBuffer_init();
  if (canonical) (void) [buf appendWithChar:'<'];
  (void) [buf appendWithNSString:[self getNodeTypeSymbol]];
  (void) [buf appendWithChar:' '];
  (void) [buf appendWithNSString:[((FreemarkerCoreExpression *) nil_chk(includedTemplateNameExp_)) getCanonicalForm]];
  if (encodingExp_ != nil) {
    (void) [((JavaLangStringBuffer *) nil_chk([buf appendWithNSString:@" encoding="])) appendWithNSString:[encodingExp_ getCanonicalForm]];
  }
  if (parseExp_ != nil) {
    (void) [((JavaLangStringBuffer *) nil_chk([buf appendWithNSString:@" parse="])) appendWithNSString:[parseExp_ getCanonicalForm]];
  }
  if (ignoreMissingExp_ != nil) {
    (void) [((JavaLangStringBuffer *) nil_chk([buf appendWithNSString:@" ignore_missing="])) appendWithNSString:[ignoreMissingExp_ getCanonicalForm]];
  }
  if (canonical) (void) [buf appendWithNSString:@"/>"];
  return [buf description];
}

- (NSString *)getNodeTypeSymbol {
  return @"#include";
}

- (jint)getParameterCount {
  return 3;
}

- (id)getParameterValueWithInt:(jint)idx {
  switch (idx) {
    case 0:
    
#line 200
    return includedTemplateNameExp_;
    case 1:
    
#line 201
    return parseExp_;
    case 2:
    
#line 202
    return encodingExp_;
    case 3:
    
#line 203
    return ignoreMissingExp_;
    default:
    
#line 204
    @throw new_JavaLangIndexOutOfBoundsException_init();
  }
}


#line 208
- (FreemarkerCoreParameterRole *)getParameterRoleWithInt:(jint)idx {
  switch (idx) {
    case 0:
    
#line 210
    return FreemarkerCoreParameterRole_get_TEMPLATE_NAME_();
    case 1:
    
#line 211
    return FreemarkerCoreParameterRole_get_PARSE_PARAMETER_();
    case 2:
    
#line 212
    return FreemarkerCoreParameterRole_get_ENCODING_PARAMETER_();
    case 3:
    
#line 213
    return FreemarkerCoreParameterRole_get_IGNORE_MISSING_PARAMETER_();
    default:
    
#line 214
    @throw new_JavaLangIndexOutOfBoundsException_init();
  }
}


#line 218
- (jboolean)isNestedBlockRepeater {
  return NO;
}

- (jboolean)getYesNoWithFreemarkerCoreExpression:(FreemarkerCoreExpression *)exp
                                    withNSString:(NSString *)s {
  return FreemarkerCoreInclude_getYesNoWithFreemarkerCoreExpression_withNSString_(self, exp, s);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithFreemarkerTemplateTemplate:withFreemarkerCoreExpression:withFreemarkerCoreExpression:withFreemarkerCoreExpression:withFreemarkerCoreExpression:", "Include", NULL, 0x0, "Lfreemarker.core.ParseException;", NULL },
    { "acceptWithFreemarkerCoreEnvironment:", "accept", "V", 0x0, "Lfreemarker.template.TemplateException;Ljava.io.IOException;", NULL },
    { "dumpWithBoolean:", "dump", "Ljava.lang.String;", 0x4, NULL, NULL },
    { "getNodeTypeSymbol", NULL, "Ljava.lang.String;", 0x0, NULL, NULL },
    { "getParameterCount", NULL, "I", 0x0, NULL, NULL },
    { "getParameterValueWithInt:", "getParameterValue", "Ljava.lang.Object;", 0x0, NULL, NULL },
    { "getParameterRoleWithInt:", "getParameterRole", "Lfreemarker.core.ParameterRole;", 0x0, NULL, NULL },
    { "isNestedBlockRepeater", NULL, "Z", 0x0, NULL, NULL },
    { "getYesNoWithFreemarkerCoreExpression:withNSString:", "getYesNo", "Z", 0x2, "Lfreemarker.template.TemplateException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "includedTemplateNameExp_", NULL, 0x12, "Lfreemarker.core.Expression;", NULL, NULL,  },
    { "encodingExp_", NULL, 0x12, "Lfreemarker.core.Expression;", NULL, NULL,  },
    { "parseExp_", NULL, 0x12, "Lfreemarker.core.Expression;", NULL, NULL,  },
    { "ignoreMissingExp_", NULL, 0x12, "Lfreemarker.core.Expression;", NULL, NULL,  },
    { "encoding_", NULL, 0x12, "Ljava.lang.String;", NULL, NULL,  },
    { "parse_", NULL, 0x12, "Ljava.lang.Boolean;", NULL, NULL,  },
    { "ignoreMissingExpPrecalcedValue_", NULL, 0x12, "Ljava.lang.Boolean;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerCoreInclude = { 2, "Include", "freemarker.core", NULL, 0x10, 9, methods, 7, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerCoreInclude;
}

@end


#line 46
void FreemarkerCoreInclude_initWithFreemarkerTemplateTemplate_withFreemarkerCoreExpression_withFreemarkerCoreExpression_withFreemarkerCoreExpression_withFreemarkerCoreExpression_(FreemarkerCoreInclude *self, FreemarkerTemplateTemplate *template_, FreemarkerCoreExpression *includedTemplatePathExp, FreemarkerCoreExpression *encodingExp, FreemarkerCoreExpression *parseExp, FreemarkerCoreExpression *ignoreMissingExp) {
  (void) FreemarkerCoreTemplateElement_init(self);
  
#line 49
  self->includedTemplateNameExp_ = includedTemplatePathExp;
  
#line 51
  self->encodingExp_ = encodingExp;
  if (encodingExp == nil) {
    self->encoding_ = nil;
  }
  else {
    
#line 55
    if ([encodingExp isLiteral]) {
      @try {
        id<FreemarkerTemplateTemplateModel> tm = [encodingExp evalWithFreemarkerCoreEnvironment:nil];
        if (!([FreemarkerTemplateTemplateScalarModel_class_() isInstance:tm])) {
          @throw new_FreemarkerCoreParseException_initWithNSString_withId_(@"Expected a string as the value of the \"encoding\" argument",
#line 60
          encodingExp);
        }
        self->encoding_ = [((id<FreemarkerTemplateTemplateScalarModel>) nil_chk(((id<FreemarkerTemplateTemplateScalarModel>) check_protocol_cast(tm, @protocol(FreemarkerTemplateTemplateScalarModel))))) getAsString];
      }
      @catch (
#line 63
      FreemarkerTemplateTemplateException *e) {
        
#line 65
        @throw new_FreemarkerCoreBugException_initWithJavaLangThrowable_(e);
      }
    }
    else {
      
#line 68
      self->encoding_ = nil;
    }
  }
  
#line 72
  self->parseExp_ = parseExp;
  if (parseExp == nil) {
    self->parse_ = JavaLangBoolean_get_TRUE__();
  }
  else {
    
#line 76
    if ([parseExp isLiteral]) {
      @try {
        if ([parseExp isKindOfClass:[FreemarkerCoreStringLiteral class]]) {
          
#line 80
          self->parse_ = JavaLangBoolean_valueOfWithBoolean_(FreemarkerTemplateUtilityStringUtil_getYesNoWithNSString_([parseExp evalAndCoerceToStringWithFreemarkerCoreEnvironment:nil]));
        }
        else {
          
#line 82
          @try {
            self->parse_ = JavaLangBoolean_valueOfWithBoolean_([parseExp evalToBooleanWithFreemarkerTemplateConfiguration:[((FreemarkerTemplateTemplate *) nil_chk(template_)) getConfiguration]]);
          }
          @catch (
#line 84
          FreemarkerCoreNonBooleanException *e) {
            @throw new_FreemarkerCoreParseException_initWithNSString_withId_withId_(@"Expected a boolean or string as the value of the parse attribute",
#line 86
            parseExp, e);
          }
        }
      }
      @catch (
#line 89
      FreemarkerTemplateTemplateException *e) {
        
#line 91
        @throw new_FreemarkerCoreBugException_initWithJavaLangThrowable_(e);
      }
    }
    else {
      
#line 94
      self->parse_ = nil;
    }
  }
  
#line 98
  self->ignoreMissingExp_ = ignoreMissingExp;
  if (ignoreMissingExp != nil && [ignoreMissingExp isLiteral]) {
    @try {
      @try {
        self->ignoreMissingExpPrecalcedValue_ = JavaLangBoolean_valueOfWithBoolean_(
#line 103
        [ignoreMissingExp evalToBooleanWithFreemarkerTemplateConfiguration:[((FreemarkerTemplateTemplate *) nil_chk(template_)) getConfiguration]]);
      }
      @catch (
#line 104
      FreemarkerCoreNonBooleanException *e) {
        @throw new_FreemarkerCoreParseException_initWithNSString_withId_withId_(@"Expected a boolean as the value of the \"ignore_missing\" attribute",
#line 106
        ignoreMissingExp, e);
      }
    }
    @catch (
#line 108
    FreemarkerTemplateTemplateException *e) {
      
#line 110
      @throw new_FreemarkerCoreBugException_initWithJavaLangThrowable_(e);
    }
  }
  else {
    
#line 113
    self->ignoreMissingExpPrecalcedValue_ = nil;
  }
}


#line 46
FreemarkerCoreInclude *new_FreemarkerCoreInclude_initWithFreemarkerTemplateTemplate_withFreemarkerCoreExpression_withFreemarkerCoreExpression_withFreemarkerCoreExpression_withFreemarkerCoreExpression_(FreemarkerTemplateTemplate *template_, FreemarkerCoreExpression *includedTemplatePathExp, FreemarkerCoreExpression *encodingExp, FreemarkerCoreExpression *parseExp, FreemarkerCoreExpression *ignoreMissingExp) {
  FreemarkerCoreInclude *self = [FreemarkerCoreInclude alloc];
  FreemarkerCoreInclude_initWithFreemarkerTemplateTemplate_withFreemarkerCoreExpression_withFreemarkerCoreExpression_withFreemarkerCoreExpression_withFreemarkerCoreExpression_(self, template_, includedTemplatePathExp, encodingExp, parseExp, ignoreMissingExp);
  return self;
}


#line 222
jboolean FreemarkerCoreInclude_getYesNoWithFreemarkerCoreExpression_withNSString_(FreemarkerCoreInclude *self, FreemarkerCoreExpression *exp, NSString *s) {
  @try {
    return FreemarkerTemplateUtilityStringUtil_getYesNoWithNSString_(s);
  }
  @catch (JavaLangIllegalArgumentException *iae) {
    @throw new_FreemarkerCore_MiscTemplateException_initWithFreemarkerCoreExpression_withNSObjectArray_(exp, [IOSObjectArray newArrayWithObjects:(id[]){ @"Value must be boolean (or one of these strings: \"n\", \"no\", \"f\", \"false\", \"y\", \"yes\", \"t\", \"true\"), but it was ", new_FreemarkerCore_DelayedJQuote_initWithId_(
#line 230
    s), @"." } count:3 type:NSObject_class_()]);
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreInclude)
