//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/TransformBlock.java
//


#include "EmptyMap.h"
#include "Environment.h"
#include "Expression.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "MessageUtil.h"
#include "MiscUtil.h"
#include "ParameterRole.h"
#include "TemplateElement.h"
#include "TemplateException.h"
#include "TemplateModel.h"
#include "TemplateTransformModel.h"
#include "TransformBlock.h"
#include "UnexpectedTypeException.h"
#include "java/io/IOException.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/ref/Reference.h"
#include "java/lang/ref/SoftReference.h"
#include "java/util/HashMap.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"

#line 0 "/Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/TransformBlock.java"

@interface FreemarkerCoreTransformBlock () {
 @public
  FreemarkerCoreExpression *transformExpression_;
  JavaLangRefSoftReference *sortedNamedArgsCache_;
}

/**
 @brief Returns the named args by source-code order; it's not meant to be used during template execution, too slow for that!
 */
- (id<JavaUtilList>)getSortedNamedArgs;

@end

J2OBJC_FIELD_SETTER(FreemarkerCoreTransformBlock, transformExpression_, FreemarkerCoreExpression *)
J2OBJC_FIELD_SETTER(FreemarkerCoreTransformBlock, sortedNamedArgsCache_, JavaLangRefSoftReference *)

__attribute__((unused)) static id<JavaUtilList> FreemarkerCoreTransformBlock_getSortedNamedArgs(FreemarkerCoreTransformBlock *self);


#line 37
@implementation FreemarkerCoreTransformBlock


#line 46
- (instancetype)initWithFreemarkerCoreExpression:(FreemarkerCoreExpression *)transformExpression
                                 withJavaUtilMap:(id<JavaUtilMap>)namedArgs
               withFreemarkerCoreTemplateElement:(FreemarkerCoreTemplateElement *)nestedBlock {
  FreemarkerCoreTransformBlock_initWithFreemarkerCoreExpression_withJavaUtilMap_withFreemarkerCoreTemplateElement_(self, transformExpression, namedArgs, nestedBlock);
  return self;
}


#line 54
- (void)acceptWithFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env {
  
#line 57
  id<FreemarkerTemplateTemplateTransformModel> ttm = [((FreemarkerCoreEnvironment *) nil_chk(env)) getTransformWithFreemarkerCoreExpression:transformExpression_];
  if (ttm != nil) {
    id<JavaUtilMap> args;
    if (namedArgs_ != nil && ![namedArgs_ isEmpty]) {
      args = new_JavaUtilHashMap_init();
      for (id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk([namedArgs_ entrySet])) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
        id<JavaUtilMap_Entry> entry_ = (id<JavaUtilMap_Entry>) check_protocol_cast([it next], @protocol(JavaUtilMap_Entry));
        NSString *key = (NSString *) check_class_cast([((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey], [NSString class]);
        FreemarkerCoreExpression *valueExp = (FreemarkerCoreExpression *) check_class_cast([entry_ getValue], [FreemarkerCoreExpression class]);
        id<FreemarkerTemplateTemplateModel> value = [((FreemarkerCoreExpression *) nil_chk(valueExp)) evalWithFreemarkerCoreEnvironment:env];
        (void) [args putWithId:key withId:value];
      }
    }
    else {
      
#line 70
      args = FreemarkerTemplateEmptyMap_get_instance_();
    }
    [env visitAndTransformWithFreemarkerCoreTemplateElement:[self getNestedBlock] withFreemarkerTemplateTemplateTransformModel:ttm withJavaUtilMap:args];
  }
  else {
    id<FreemarkerTemplateTemplateModel> tm = [((FreemarkerCoreExpression *) nil_chk(transformExpression_)) evalWithFreemarkerCoreEnvironment:env];
    @throw new_FreemarkerCoreUnexpectedTypeException_initWithFreemarkerCoreExpression_withFreemarkerTemplateTemplateModel_withNSString_withIOSClassArray_withFreemarkerCoreEnvironment_(
#line 77
    transformExpression_, tm,
#line 78
    @"transform", [IOSObjectArray newArrayWithObjects:(id[]){ FreemarkerTemplateTemplateTransformModel_class_() } count:1 type:IOSClass_class_()], env);
  }
}


#line 82
- (NSString *)dumpWithBoolean:(jboolean)canonical {
  JavaLangStringBuffer *sb = new_JavaLangStringBuffer_init();
  if (canonical) (void) [sb appendWithChar:'<'];
  (void) [sb appendWithNSString:[self getNodeTypeSymbol]];
  (void) [sb appendWithChar:' '];
  (void) [sb appendWithId:transformExpression_];
  if (namedArgs_ != nil) {
    for (id<JavaUtilIterator> it = [((id<JavaUtilList>) nil_chk(FreemarkerCoreTransformBlock_getSortedNamedArgs(self))) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
      id<JavaUtilMap_Entry> entry_ = (id<JavaUtilMap_Entry>) check_protocol_cast([it next], @protocol(JavaUtilMap_Entry));
      (void) [sb appendWithChar:' '];
      (void) [sb appendWithId:[((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey]];
      (void) [sb appendWithChar:'='];
      (void) FreemarkerCoreMessageUtil_appendExpressionAsUntearableWithJavaLangStringBuffer_withFreemarkerCoreExpression_(sb, (FreemarkerCoreExpression *) check_class_cast([entry_ getValue], [FreemarkerCoreExpression class]));
    }
  }
  if (canonical) {
    (void) [sb appendWithNSString:@">"];
    if ([self getNestedBlock] != nil) {
      (void) [sb appendWithNSString:[((FreemarkerCoreTemplateElement *) nil_chk([self getNestedBlock])) getCanonicalForm]];
    }
    (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([sb appendWithNSString:@"</"])) appendWithNSString:[self getNodeTypeSymbol]])) appendWithChar:'>'];
  }
  return [sb description];
}

- (NSString *)getNodeTypeSymbol {
  return @"#transform";
}

- (jint)getParameterCount {
  return 1 + (namedArgs_ != nil ? [namedArgs_ size] * 2 : 0);
}

- (id)getParameterValueWithInt:(jint)idx {
  if (idx == 0) {
    return transformExpression_;
  }
  else
#line 118
  if (namedArgs_ != nil && idx - 1 < [namedArgs_ size] * 2) {
    id<JavaUtilMap_Entry> namedArg = (id<JavaUtilMap_Entry>) check_protocol_cast([((id<JavaUtilList>) nil_chk(FreemarkerCoreTransformBlock_getSortedNamedArgs(self))) getWithInt:(idx - 1) / 2], @protocol(JavaUtilMap_Entry));
    return (idx - 1) % 2 == 0 ? [((id<JavaUtilMap_Entry>) nil_chk(namedArg)) getKey] : [((id<JavaUtilMap_Entry>) nil_chk(namedArg)) getValue];
  }
  else {
    
#line 122
    @throw new_JavaLangIndexOutOfBoundsException_init();
  }
}


#line 126
- (FreemarkerCoreParameterRole *)getParameterRoleWithInt:(jint)idx {
  if (idx == 0) {
    return FreemarkerCoreParameterRole_get_CALLEE_();
  }
  else
#line 129
  if (idx - 1 < [((id<JavaUtilMap>) nil_chk(namedArgs_)) size] * 2) {
    return (idx - 1) % 2 == 0 ? FreemarkerCoreParameterRole_get_ARGUMENT_NAME_() : FreemarkerCoreParameterRole_get_ARGUMENT_VALUE_();
  }
  else {
    
#line 132
    @throw new_JavaLangIndexOutOfBoundsException_init();
  }
}


#line 140
- (id<JavaUtilList>)getSortedNamedArgs {
  return FreemarkerCoreTransformBlock_getSortedNamedArgs(self);
}


#line 152
- (jboolean)isNestedBlockRepeater {
  return NO;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithFreemarkerCoreExpression:withJavaUtilMap:withFreemarkerCoreTemplateElement:", "TransformBlock", NULL, 0x0, NULL, NULL },
    { "acceptWithFreemarkerCoreEnvironment:", "accept", "V", 0x0, "Lfreemarker.template.TemplateException;Ljava.io.IOException;", NULL },
    { "dumpWithBoolean:", "dump", "Ljava.lang.String;", 0x4, NULL, NULL },
    { "getNodeTypeSymbol", NULL, "Ljava.lang.String;", 0x0, NULL, NULL },
    { "getParameterCount", NULL, "I", 0x0, NULL, NULL },
    { "getParameterValueWithInt:", "getParameterValue", "Ljava.lang.Object;", 0x0, NULL, NULL },
    { "getParameterRoleWithInt:", "getParameterRole", "Lfreemarker.core.ParameterRole;", 0x0, NULL, NULL },
    { "getSortedNamedArgs", NULL, "Ljava.util.List;", 0x2, NULL, NULL },
    { "isNestedBlockRepeater", NULL, "Z", 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "transformExpression_", NULL, 0x2, "Lfreemarker.core.Expression;", NULL, NULL,  },
    { "namedArgs_", NULL, 0x0, "Ljava.util.Map;", NULL, NULL,  },
    { "sortedNamedArgsCache_", NULL, 0xc2, "Ljava.lang.ref.SoftReference;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerCoreTransformBlock = { 2, "TransformBlock", "freemarker.core", NULL, 0x10, 9, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerCoreTransformBlock;
}

@end


#line 46
void FreemarkerCoreTransformBlock_initWithFreemarkerCoreExpression_withJavaUtilMap_withFreemarkerCoreTemplateElement_(FreemarkerCoreTransformBlock *self, FreemarkerCoreExpression *transformExpression, id<JavaUtilMap> namedArgs, FreemarkerCoreTemplateElement *nestedBlock) {
  (void) FreemarkerCoreTemplateElement_init(self);
  
#line 49
  self->transformExpression_ = transformExpression;
  self->namedArgs_ = namedArgs;
  [self setNestedBlockWithFreemarkerCoreTemplateElement:nestedBlock];
}


#line 46
FreemarkerCoreTransformBlock *new_FreemarkerCoreTransformBlock_initWithFreemarkerCoreExpression_withJavaUtilMap_withFreemarkerCoreTemplateElement_(FreemarkerCoreExpression *transformExpression, id<JavaUtilMap> namedArgs, FreemarkerCoreTemplateElement *nestedBlock) {
  FreemarkerCoreTransformBlock *self = [FreemarkerCoreTransformBlock alloc];
  FreemarkerCoreTransformBlock_initWithFreemarkerCoreExpression_withJavaUtilMap_withFreemarkerCoreTemplateElement_(self, transformExpression, namedArgs, nestedBlock);
  return self;
}


#line 140
id<JavaUtilList> FreemarkerCoreTransformBlock_getSortedNamedArgs(FreemarkerCoreTransformBlock *self) {
  JavaLangRefReference *ref = self->sortedNamedArgsCache_;
  if (ref != nil) {
    id<JavaUtilList> res = (id<JavaUtilList>) check_protocol_cast([ref get], @protocol(JavaUtilList));
    if (res != nil) return res;
  }
  
#line 147
  id<JavaUtilList> res = FreemarkerCoreMiscUtil_sortMapOfExpressionsWithJavaUtilMap_(self->namedArgs_);
  self->sortedNamedArgsCache_ = new_JavaLangRefSoftReference_initWithId_(res);
  return res;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreTransformBlock)
