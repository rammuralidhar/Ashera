//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/template/SimpleCollection.java
//

#ifndef _FreemarkerTemplateSimpleCollection_H_
#define _FreemarkerTemplateSimpleCollection_H_

#include "J2ObjC_header.h"
#include "TemplateCollectionModel.h"
#include "WrappingTemplateModel.h"
#include "java/io/Serializable.h"

@protocol FreemarkerTemplateObjectWrapper;
@protocol FreemarkerTemplateTemplateModelIterator;
@protocol JavaUtilCollection;
@protocol JavaUtilIterator;

/**
 @brief A simple implementation of TemplateCollectionModel .
 It's able to wrap <tt>java.util.Iterator</tt>-s and <tt>java.util.Collection</tt>-s. If you wrap an <tt>Iterator</tt>, the variable can be &lt;#list&gt;-ed only once! <p>Consider using SimpleSequence instead of this class if you want to wrap <tt>Iterator</tt>s. <tt>SimpleSequence</tt> will read all elements of the <tt>Iterator</tt>, and store them in a <tt>List</tt> (this may cause too high resource consumption in some applications), so you can list the variable for unlimited times. Also, if you want to wrap <tt>Collection</tt>s, and then list the resulting variable for many times, <tt>SimpleSequence</tt> may gives better performance, as the wrapping of non-<tt>TemplateModel</tt> objects happens only once. <p>This class is thread-safe. The returned TemplateModelIterator -s are <em>not</em> thread-safe.
 */
@interface FreemarkerTemplateSimpleCollection : FreemarkerTemplateWrappingTemplateModel < FreemarkerTemplateTemplateCollectionModel, JavaIoSerializable >

#pragma mark Public

/**
 */
- (instancetype)initWithJavaUtilCollection:(id<JavaUtilCollection>)collection;

- (instancetype)initWithJavaUtilCollection:(id<JavaUtilCollection>)collection
       withFreemarkerTemplateObjectWrapper:(id<FreemarkerTemplateObjectWrapper>)wrapper;

/**
 */
- (instancetype)initWithJavaUtilIterator:(id<JavaUtilIterator>)iterator;

- (instancetype)initWithJavaUtilIterator:(id<JavaUtilIterator>)iterator
     withFreemarkerTemplateObjectWrapper:(id<FreemarkerTemplateObjectWrapper>)wrapper;

/**
 @brief Retrieves a template model iterator that is used to iterate over the elements in this collection.
 <p>When you wrap an <tt>Iterator</tt> and you get <tt>TemplateModelIterator</tt> for multiple times, only on of the returned <tt>TemplateModelIterator</tt> instances can be really used. When you have called a method of a <tt>TemplateModelIterator</tt> instance, all other instance will throw a <tt>TemplateModelException</tt> when you try to call their methods, since the wrapped <tt>Iterator</tt> can't return the first element anymore.
 */
- (id<FreemarkerTemplateTemplateModelIterator>)iterator;

@end

J2OBJC_EMPTY_STATIC_INIT(FreemarkerTemplateSimpleCollection)

FOUNDATION_EXPORT void FreemarkerTemplateSimpleCollection_initWithJavaUtilIterator_(FreemarkerTemplateSimpleCollection *self, id<JavaUtilIterator> iterator);

FOUNDATION_EXPORT FreemarkerTemplateSimpleCollection *new_FreemarkerTemplateSimpleCollection_initWithJavaUtilIterator_(id<JavaUtilIterator> iterator) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void FreemarkerTemplateSimpleCollection_initWithJavaUtilCollection_(FreemarkerTemplateSimpleCollection *self, id<JavaUtilCollection> collection);

FOUNDATION_EXPORT FreemarkerTemplateSimpleCollection *new_FreemarkerTemplateSimpleCollection_initWithJavaUtilCollection_(id<JavaUtilCollection> collection) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void FreemarkerTemplateSimpleCollection_initWithJavaUtilIterator_withFreemarkerTemplateObjectWrapper_(FreemarkerTemplateSimpleCollection *self, id<JavaUtilIterator> iterator, id<FreemarkerTemplateObjectWrapper> wrapper);

FOUNDATION_EXPORT FreemarkerTemplateSimpleCollection *new_FreemarkerTemplateSimpleCollection_initWithJavaUtilIterator_withFreemarkerTemplateObjectWrapper_(id<JavaUtilIterator> iterator, id<FreemarkerTemplateObjectWrapper> wrapper) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void FreemarkerTemplateSimpleCollection_initWithJavaUtilCollection_withFreemarkerTemplateObjectWrapper_(FreemarkerTemplateSimpleCollection *self, id<JavaUtilCollection> collection, id<FreemarkerTemplateObjectWrapper> wrapper);

FOUNDATION_EXPORT FreemarkerTemplateSimpleCollection *new_FreemarkerTemplateSimpleCollection_initWithJavaUtilCollection_withFreemarkerTemplateObjectWrapper_(id<JavaUtilCollection> collection, id<FreemarkerTemplateObjectWrapper> wrapper) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerTemplateSimpleCollection)

#endif // _FreemarkerTemplateSimpleCollection_H_
