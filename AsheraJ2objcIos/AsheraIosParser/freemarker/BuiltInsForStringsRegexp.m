//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/BuiltInsForStringsRegexp.java
//


#include "BuiltIn.h"
#include "BuiltInForString.h"
#include "BuiltInsForStringsRegexp.h"
#include "Environment.h"
#include "Expression.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RegexpHelper.h"
#include "SimpleScalar.h"
#include "SimpleSequence.h"
#include "StringUtil.h"
#include "TemplateException.h"
#include "TemplateModel.h"
#include "TemplateModelException.h"
#include "TemplateModelIterator.h"
#include "TemplateSequenceModel.h"
#include "UnexpectedTypeException.h"
#include "_TemplateModelException.h"
#include "java/lang/Boolean.h"
#include "java/lang/Exception.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "java/util/regex/Matcher.h"
#include "java/util/regex/Pattern.h"

#line 0 "/Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/BuiltInsForStringsRegexp.java"

@interface FreemarkerCoreBuiltInsForStringsRegexp ()

- (instancetype)init;

@end

__attribute__((unused)) static void FreemarkerCoreBuiltInsForStringsRegexp_init(FreemarkerCoreBuiltInsForStringsRegexp *self);

__attribute__((unused)) static FreemarkerCoreBuiltInsForStringsRegexp *new_FreemarkerCoreBuiltInsForStringsRegexp_init() NS_RETURNS_RETAINED;

@interface FreemarkerCoreBuiltInsForStringsRegexp_matchesBI_MatcherBuilder () {
 @public
  FreemarkerCoreBuiltInsForStringsRegexp_matchesBI *this$0_;
}

@end

J2OBJC_FIELD_SETTER(FreemarkerCoreBuiltInsForStringsRegexp_matchesBI_MatcherBuilder, this$0_, FreemarkerCoreBuiltInsForStringsRegexp_matchesBI *)

@interface FreemarkerCoreBuiltInsForStringsRegexp_replace_reBI_ReplaceMethod () {
 @public
  FreemarkerCoreBuiltInsForStringsRegexp_replace_reBI *this$0_;
  NSString *s_;
}

@end

J2OBJC_FIELD_SETTER(FreemarkerCoreBuiltInsForStringsRegexp_replace_reBI_ReplaceMethod, this$0_, FreemarkerCoreBuiltInsForStringsRegexp_replace_reBI *)
J2OBJC_FIELD_SETTER(FreemarkerCoreBuiltInsForStringsRegexp_replace_reBI_ReplaceMethod, s_, NSString *)

@interface FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel () {
 @public
  JavaUtilRegexMatcher *firedEntireInputMatcher_;
  JavaLangBoolean *entireInputMatched_;
  id<FreemarkerTemplateTemplateSequenceModel> entireInputMatchGroups_;
  JavaUtilArrayList *matchingInputParts_;
}

- (JavaUtilArrayList *)getMatchingInputPartsAndStoreResults;

- (jboolean)isEntrieInputMatchesAndStoreResults;

@end

J2OBJC_FIELD_SETTER(FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel, firedEntireInputMatcher_, JavaUtilRegexMatcher *)
J2OBJC_FIELD_SETTER(FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel, entireInputMatched_, JavaLangBoolean *)
J2OBJC_FIELD_SETTER(FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel, entireInputMatchGroups_, id<FreemarkerTemplateTemplateSequenceModel>)
J2OBJC_FIELD_SETTER(FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel, matchingInputParts_, JavaUtilArrayList *)

__attribute__((unused)) static JavaUtilArrayList *FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel_getMatchingInputPartsAndStoreResults(FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel *self);

__attribute__((unused)) static jboolean FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel_isEntrieInputMatchesAndStoreResults(FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel *self);

@interface FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel_$1 : NSObject < FreemarkerTemplateTemplateSequenceModel > {
 @public
  JavaUtilRegexMatcher *val$firedEntireInputMatcher_;
}

- (id<FreemarkerTemplateTemplateModel>)getWithInt:(jint)i;

- (jint)size;

- (instancetype)initWithJavaUtilRegexMatcher:(JavaUtilRegexMatcher *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel_$1)

J2OBJC_FIELD_SETTER(FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel_$1, val$firedEntireInputMatcher_, JavaUtilRegexMatcher *)

__attribute__((unused)) static void FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel_$1_initWithJavaUtilRegexMatcher_(FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel_$1 *self, JavaUtilRegexMatcher *capture$0);

__attribute__((unused)) static FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel_$1 *new_FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel_$1_initWithJavaUtilRegexMatcher_(JavaUtilRegexMatcher *capture$0) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel_$1)

@interface FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel_$2 : NSObject < FreemarkerTemplateTemplateModelIterator > {
 @public
  FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel *this$0_;
  jint nextIdx_;
  jboolean hasFindInfo_;
  JavaUtilRegexMatcher *val$matcher_;
}

- (jboolean)hasNext;

- (id<FreemarkerTemplateTemplateModel>)next;

- (instancetype)initWithFreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel:(FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel *)outer$
                                                      withJavaUtilRegexMatcher:(JavaUtilRegexMatcher *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel_$2)

J2OBJC_FIELD_SETTER(FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel_$2, this$0_, FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel *)
J2OBJC_FIELD_SETTER(FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel_$2, val$matcher_, JavaUtilRegexMatcher *)

__attribute__((unused)) static void FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel_$2_initWithFreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel_withJavaUtilRegexMatcher_(FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel_$2 *self, FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel *outer$, JavaUtilRegexMatcher *capture$0);

__attribute__((unused)) static FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel_$2 *new_FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel_$2_initWithFreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel_withJavaUtilRegexMatcher_(FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel *outer$, JavaUtilRegexMatcher *capture$0) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel_$2)

@interface FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel_$3 : NSObject < FreemarkerTemplateTemplateModelIterator > {
 @public
  jint nextIdx_;
  JavaUtilArrayList *val$matchingInputParts_;
}

- (jboolean)hasNext;

- (id<FreemarkerTemplateTemplateModel>)next;

- (instancetype)initWithJavaUtilArrayList:(JavaUtilArrayList *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel_$3)

J2OBJC_FIELD_SETTER(FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel_$3, val$matchingInputParts_, JavaUtilArrayList *)

__attribute__((unused)) static void FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel_$3_initWithJavaUtilArrayList_(FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel_$3 *self, JavaUtilArrayList *capture$0);

__attribute__((unused)) static FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel_$3 *new_FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel_$3_initWithJavaUtilArrayList_(JavaUtilArrayList *capture$0) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel_$3)


#line 41
@implementation FreemarkerCoreBuiltInsForStringsRegexp


#line 298
- (instancetype)init {
  FreemarkerCoreBuiltInsForStringsRegexp_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "BuiltInsForStringsRegexp", NULL, 0x2, NULL, NULL },
  };
  static const char *inner_classes[] = {"Lfreemarker.core.BuiltInsForStringsRegexp$groupsBI;", "Lfreemarker.core.BuiltInsForStringsRegexp$matchesBI;", "Lfreemarker.core.BuiltInsForStringsRegexp$replace_reBI;", "Lfreemarker.core.BuiltInsForStringsRegexp$RegexMatchModel;"};
  static const J2ObjcClassInfo _FreemarkerCoreBuiltInsForStringsRegexp = { 2, "BuiltInsForStringsRegexp", "freemarker.core", NULL, 0x0, 1, methods, 0, NULL, 0, NULL, 4, inner_classes, NULL, NULL };
  return &_FreemarkerCoreBuiltInsForStringsRegexp;
}

@end


#line 298
void FreemarkerCoreBuiltInsForStringsRegexp_init(FreemarkerCoreBuiltInsForStringsRegexp *self) {
  (void) NSObject_init(self);
}


#line 298
FreemarkerCoreBuiltInsForStringsRegexp *new_FreemarkerCoreBuiltInsForStringsRegexp_init() {
  FreemarkerCoreBuiltInsForStringsRegexp *self = [FreemarkerCoreBuiltInsForStringsRegexp alloc];
  FreemarkerCoreBuiltInsForStringsRegexp_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreBuiltInsForStringsRegexp)


#line 43
@implementation FreemarkerCoreBuiltInsForStringsRegexp_groupsBI


#line 44
- (id<FreemarkerTemplateTemplateModel>)_evalWithFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env {
  id<FreemarkerTemplateTemplateModel> targetModel = [((FreemarkerCoreExpression *) nil_chk(target_)) evalWithFreemarkerCoreEnvironment:env];
  [self assertNonNullWithFreemarkerTemplateTemplateModel:targetModel withFreemarkerCoreEnvironment:env];
  if ([targetModel isKindOfClass:[FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel class]]) {
    return [((FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel *) nil_chk(((FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel *) check_class_cast(targetModel, [FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel class])))) getGroups];
  }
  else
#line 49
  if ([targetModel isKindOfClass:[FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel_MatchWithGroups class]]) {
    return ((FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel_MatchWithGroups *) nil_chk(((FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel_MatchWithGroups *) check_class_cast(targetModel, [FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel_MatchWithGroups class]))))->groupsSeq_;
  }
  else {
    
#line 52
    @throw new_FreemarkerCoreUnexpectedTypeException_initWithFreemarkerCoreExpression_withFreemarkerTemplateTemplateModel_withNSString_withIOSClassArray_withFreemarkerCoreEnvironment_(target_, targetModel,
#line 53
    @"regular expression matcher", [IOSObjectArray newArrayWithObjects:(id[]){
#line 54
      FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel_class_(), FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel_MatchWithGroups_class_() } count:2 type:IOSClass_class_()],
#line 55
      env);
    }
  }

- (instancetype)init {
  FreemarkerCoreBuiltInsForStringsRegexp_groupsBI_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "_evalWithFreemarkerCoreEnvironment:", "_eval", "Lfreemarker.template.TemplateModel;", 0x0, "Lfreemarker.template.TemplateException;", NULL },
    { "init", NULL, NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcClassInfo _FreemarkerCoreBuiltInsForStringsRegexp_groupsBI = { 2, "groupsBI", "freemarker.core", "BuiltInsForStringsRegexp", 0x8, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerCoreBuiltInsForStringsRegexp_groupsBI;
}

@end

void FreemarkerCoreBuiltInsForStringsRegexp_groupsBI_init(FreemarkerCoreBuiltInsForStringsRegexp_groupsBI *self) {
  (void) FreemarkerCoreBuiltIn_init(self);
}

FreemarkerCoreBuiltInsForStringsRegexp_groupsBI *new_FreemarkerCoreBuiltInsForStringsRegexp_groupsBI_init() {
  FreemarkerCoreBuiltInsForStringsRegexp_groupsBI *self = [FreemarkerCoreBuiltInsForStringsRegexp_groupsBI alloc];
  FreemarkerCoreBuiltInsForStringsRegexp_groupsBI_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreBuiltInsForStringsRegexp_groupsBI)


#line 60
@implementation FreemarkerCoreBuiltInsForStringsRegexp_matchesBI


#line 83
- (id<FreemarkerTemplateTemplateModel>)calculateResultWithNSString:(NSString *)s
                                     withFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env {
  return new_FreemarkerCoreBuiltInsForStringsRegexp_matchesBI_MatcherBuilder_initWithFreemarkerCoreBuiltInsForStringsRegexp_matchesBI_withNSString_(self, s);
}

- (instancetype)init {
  FreemarkerCoreBuiltInsForStringsRegexp_matchesBI_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "calculateResultWithNSString:withFreemarkerCoreEnvironment:", "calculateResult", "Lfreemarker.template.TemplateModel;", 0x0, "Lfreemarker.template.TemplateModelException;", NULL },
    { "init", NULL, NULL, 0x0, NULL, NULL },
  };
  static const char *inner_classes[] = {"Lfreemarker.core.BuiltInsForStringsRegexp$matchesBI$MatcherBuilder;"};
  static const J2ObjcClassInfo _FreemarkerCoreBuiltInsForStringsRegexp_matchesBI = { 2, "matchesBI", "freemarker.core", "BuiltInsForStringsRegexp", 0x8, 2, methods, 0, NULL, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_FreemarkerCoreBuiltInsForStringsRegexp_matchesBI;
}

@end

void FreemarkerCoreBuiltInsForStringsRegexp_matchesBI_init(FreemarkerCoreBuiltInsForStringsRegexp_matchesBI *self) {
  (void) FreemarkerCoreBuiltInForString_init(self);
}

FreemarkerCoreBuiltInsForStringsRegexp_matchesBI *new_FreemarkerCoreBuiltInsForStringsRegexp_matchesBI_init() {
  FreemarkerCoreBuiltInsForStringsRegexp_matchesBI *self = [FreemarkerCoreBuiltInsForStringsRegexp_matchesBI alloc];
  FreemarkerCoreBuiltInsForStringsRegexp_matchesBI_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreBuiltInsForStringsRegexp_matchesBI)


#line 61
@implementation FreemarkerCoreBuiltInsForStringsRegexp_matchesBI_MatcherBuilder


#line 65
- (instancetype)initWithFreemarkerCoreBuiltInsForStringsRegexp_matchesBI:(FreemarkerCoreBuiltInsForStringsRegexp_matchesBI *)outer$
                                                            withNSString:(NSString *)matchString {
  FreemarkerCoreBuiltInsForStringsRegexp_matchesBI_MatcherBuilder_initWithFreemarkerCoreBuiltInsForStringsRegexp_matchesBI_withNSString_(self, outer$, matchString);
  return self;
}


#line 69
- (id)execWithJavaUtilList:(id<JavaUtilList>)args {
  jint argCnt = [((id<JavaUtilList>) nil_chk(args)) size];
  [this$0_ checkMethodArgCountWithInt:argCnt withInt:1 withInt:2];
  
#line 73
  NSString *patternString = (NSString *) check_class_cast([args getWithInt:0], [NSString class]);
  jlong flags = argCnt > 1 ? FreemarkerCoreRegexpHelper_parseFlagStringWithNSString_((NSString *) check_class_cast([args getWithInt:1], [NSString class])) : 0;
  if ((flags & FreemarkerCoreRegexpHelper_RE_FLAG_FIRST_ONLY) != 0) {
    FreemarkerCoreRegexpHelper_logFlagWarningWithNSString_(JreStrcat("C$$", '?', this$0_->key_, @" doesn't support the \"f\" flag."));
  }
  JavaUtilRegexPattern *pattern = FreemarkerCoreRegexpHelper_getPatternWithNSString_withInt_(patternString, (jint) flags);
  return new_FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel_initWithJavaUtilRegexPattern_withNSString_(pattern, matchString_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithFreemarkerCoreBuiltInsForStringsRegexp_matchesBI:withNSString:", "MatcherBuilder", NULL, 0x0, NULL, NULL },
    { "execWithJavaUtilList:", "exec", "Ljava.lang.Object;", 0x1, "Lfreemarker.template.TemplateModelException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lfreemarker.core.BuiltInsForStringsRegexp$matchesBI;", NULL, NULL,  },
    { "matchString_", NULL, 0x0, "Ljava.lang.String;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerCoreBuiltInsForStringsRegexp_matchesBI_MatcherBuilder = { 2, "MatcherBuilder", "freemarker.core", "BuiltInsForStringsRegexp$matchesBI", 0x0, 2, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerCoreBuiltInsForStringsRegexp_matchesBI_MatcherBuilder;
}

@end


#line 65
void FreemarkerCoreBuiltInsForStringsRegexp_matchesBI_MatcherBuilder_initWithFreemarkerCoreBuiltInsForStringsRegexp_matchesBI_withNSString_(FreemarkerCoreBuiltInsForStringsRegexp_matchesBI_MatcherBuilder *self, FreemarkerCoreBuiltInsForStringsRegexp_matchesBI *outer$, NSString *matchString) {
  self->this$0_ = outer$;
  (void) NSObject_init(self);
  
#line 66
  self->matchString_ = matchString;
}


#line 65
FreemarkerCoreBuiltInsForStringsRegexp_matchesBI_MatcherBuilder *new_FreemarkerCoreBuiltInsForStringsRegexp_matchesBI_MatcherBuilder_initWithFreemarkerCoreBuiltInsForStringsRegexp_matchesBI_withNSString_(FreemarkerCoreBuiltInsForStringsRegexp_matchesBI *outer$, NSString *matchString) {
  FreemarkerCoreBuiltInsForStringsRegexp_matchesBI_MatcherBuilder *self = [FreemarkerCoreBuiltInsForStringsRegexp_matchesBI_MatcherBuilder alloc];
  FreemarkerCoreBuiltInsForStringsRegexp_matchesBI_MatcherBuilder_initWithFreemarkerCoreBuiltInsForStringsRegexp_matchesBI_withNSString_(self, outer$, matchString);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreBuiltInsForStringsRegexp_matchesBI_MatcherBuilder)


#line 89
@implementation FreemarkerCoreBuiltInsForStringsRegexp_replace_reBI


#line 122
- (id<FreemarkerTemplateTemplateModel>)calculateResultWithNSString:(NSString *)s
                                     withFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env {
  return new_FreemarkerCoreBuiltInsForStringsRegexp_replace_reBI_ReplaceMethod_initWithFreemarkerCoreBuiltInsForStringsRegexp_replace_reBI_withNSString_(self, s);
}

- (instancetype)init {
  FreemarkerCoreBuiltInsForStringsRegexp_replace_reBI_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "calculateResultWithNSString:withFreemarkerCoreEnvironment:", "calculateResult", "Lfreemarker.template.TemplateModel;", 0x0, "Lfreemarker.template.TemplateModelException;", NULL },
    { "init", NULL, NULL, 0x0, NULL, NULL },
  };
  static const char *inner_classes[] = {"Lfreemarker.core.BuiltInsForStringsRegexp$replace_reBI$ReplaceMethod;"};
  static const J2ObjcClassInfo _FreemarkerCoreBuiltInsForStringsRegexp_replace_reBI = { 2, "replace_reBI", "freemarker.core", "BuiltInsForStringsRegexp", 0x8, 2, methods, 0, NULL, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_FreemarkerCoreBuiltInsForStringsRegexp_replace_reBI;
}

@end

void FreemarkerCoreBuiltInsForStringsRegexp_replace_reBI_init(FreemarkerCoreBuiltInsForStringsRegexp_replace_reBI *self) {
  (void) FreemarkerCoreBuiltInForString_init(self);
}

FreemarkerCoreBuiltInsForStringsRegexp_replace_reBI *new_FreemarkerCoreBuiltInsForStringsRegexp_replace_reBI_init() {
  FreemarkerCoreBuiltInsForStringsRegexp_replace_reBI *self = [FreemarkerCoreBuiltInsForStringsRegexp_replace_reBI alloc];
  FreemarkerCoreBuiltInsForStringsRegexp_replace_reBI_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreBuiltInsForStringsRegexp_replace_reBI)


#line 91
@implementation FreemarkerCoreBuiltInsForStringsRegexp_replace_reBI_ReplaceMethod


#line 94
- (instancetype)initWithFreemarkerCoreBuiltInsForStringsRegexp_replace_reBI:(FreemarkerCoreBuiltInsForStringsRegexp_replace_reBI *)outer$
                                                               withNSString:(NSString *)s {
  FreemarkerCoreBuiltInsForStringsRegexp_replace_reBI_ReplaceMethod_initWithFreemarkerCoreBuiltInsForStringsRegexp_replace_reBI_withNSString_(self, outer$, s);
  return self;
}


#line 98
- (id)execWithJavaUtilList:(id<JavaUtilList>)args {
  jint argCnt = [((id<JavaUtilList>) nil_chk(args)) size];
  [this$0_ checkMethodArgCountWithInt:argCnt withInt:2 withInt:3];
  NSString *arg1 = (NSString *) check_class_cast([args getWithInt:0], [NSString class]);
  NSString *arg2 = (NSString *) check_class_cast([args getWithInt:1], [NSString class]);
  jlong flags = argCnt > 2 ? FreemarkerCoreRegexpHelper_parseFlagStringWithNSString_((NSString *) check_class_cast([args getWithInt:2], [NSString class])) : 0;
  NSString *result;
  if ((flags & FreemarkerCoreRegexpHelper_RE_FLAG_REGEXP) == 0) {
    FreemarkerCoreRegexpHelper_checkNonRegexpFlagsWithNSString_withLong_(@"replace", flags);
    result = FreemarkerTemplateUtilityStringUtil_replaceWithNSString_withNSString_withNSString_withBoolean_withBoolean_(s_, arg1, arg2,
#line 108
    (flags & FreemarkerCoreRegexpHelper_get_RE_FLAG_CASE_INSENSITIVE_()) != 0,
#line 109
    (flags & FreemarkerCoreRegexpHelper_RE_FLAG_FIRST_ONLY) != 0);
  }
  else {
    
#line 111
    JavaUtilRegexPattern *pattern = FreemarkerCoreRegexpHelper_getPatternWithNSString_withInt_(arg1, (jint) flags);
    JavaUtilRegexMatcher *matcher = [((JavaUtilRegexPattern *) nil_chk(pattern)) matcherWithJavaLangCharSequence:s_];
    result = (flags & FreemarkerCoreRegexpHelper_RE_FLAG_FIRST_ONLY) != 0 ?
#line 114
    [((JavaUtilRegexMatcher *) nil_chk(matcher)) replaceFirstWithNSString:arg2] :
#line 115
    [((JavaUtilRegexMatcher *) nil_chk(matcher)) replaceAllWithNSString:arg2];
  }
  return new_FreemarkerTemplateSimpleScalar_initWithNSString_(result);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithFreemarkerCoreBuiltInsForStringsRegexp_replace_reBI:withNSString:", "ReplaceMethod", NULL, 0x0, NULL, NULL },
    { "execWithJavaUtilList:", "exec", "Ljava.lang.Object;", 0x1, "Lfreemarker.template.TemplateModelException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lfreemarker.core.BuiltInsForStringsRegexp$replace_reBI;", NULL, NULL,  },
    { "s_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerCoreBuiltInsForStringsRegexp_replace_reBI_ReplaceMethod = { 2, "ReplaceMethod", "freemarker.core", "BuiltInsForStringsRegexp$replace_reBI", 0x0, 2, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerCoreBuiltInsForStringsRegexp_replace_reBI_ReplaceMethod;
}

@end


#line 94
void FreemarkerCoreBuiltInsForStringsRegexp_replace_reBI_ReplaceMethod_initWithFreemarkerCoreBuiltInsForStringsRegexp_replace_reBI_withNSString_(FreemarkerCoreBuiltInsForStringsRegexp_replace_reBI_ReplaceMethod *self, FreemarkerCoreBuiltInsForStringsRegexp_replace_reBI *outer$, NSString *s) {
  self->this$0_ = outer$;
  (void) NSObject_init(self);
  
#line 95
  self->s_ = s;
}


#line 94
FreemarkerCoreBuiltInsForStringsRegexp_replace_reBI_ReplaceMethod *new_FreemarkerCoreBuiltInsForStringsRegexp_replace_reBI_ReplaceMethod_initWithFreemarkerCoreBuiltInsForStringsRegexp_replace_reBI_withNSString_(FreemarkerCoreBuiltInsForStringsRegexp_replace_reBI *outer$, NSString *s) {
  FreemarkerCoreBuiltInsForStringsRegexp_replace_reBI_ReplaceMethod *self = [FreemarkerCoreBuiltInsForStringsRegexp_replace_reBI_ReplaceMethod alloc];
  FreemarkerCoreBuiltInsForStringsRegexp_replace_reBI_ReplaceMethod_initWithFreemarkerCoreBuiltInsForStringsRegexp_replace_reBI_withNSString_(self, outer$, s);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreBuiltInsForStringsRegexp_replace_reBI_ReplaceMethod)


#line 130
@implementation FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel


#line 159
- (instancetype)initWithJavaUtilRegexPattern:(JavaUtilRegexPattern *)pattern
                                withNSString:(NSString *)input {
  FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel_initWithJavaUtilRegexPattern_withNSString_(self, pattern, input);
  return self;
}


#line 164
- (id<FreemarkerTemplateTemplateModel>)getWithInt:(jint)i {
  JavaUtilArrayList *matchingInputParts = self->matchingInputParts_;
  if (matchingInputParts == nil) {
    matchingInputParts = FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel_getMatchingInputPartsAndStoreResults(self);
  }
  return (id<FreemarkerTemplateTemplateModel>) check_protocol_cast([((JavaUtilArrayList *) nil_chk(matchingInputParts)) getWithInt:i], @protocol(FreemarkerTemplateTemplateModel));
}

- (jboolean)getAsBoolean {
  JavaLangBoolean *result = entireInputMatched_;
  return result != nil ? [result booleanValue] : FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel_isEntrieInputMatchesAndStoreResults(self);
}

- (id<FreemarkerTemplateTemplateModel>)getGroups {
  id<FreemarkerTemplateTemplateSequenceModel> entireInputMatchGroups = self->entireInputMatchGroups_;
  if (entireInputMatchGroups == nil) {
    JavaUtilRegexMatcher *t = self->firedEntireInputMatcher_;
    if (t == nil) {
      FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel_isEntrieInputMatchesAndStoreResults(self);
      t = self->firedEntireInputMatcher_;
    }
    JavaUtilRegexMatcher *firedEntireInputMatcher = t;
    
#line 187
    entireInputMatchGroups = new_FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel_$1_initWithJavaUtilRegexMatcher_(firedEntireInputMatcher);
    
#line 207
    self->entireInputMatchGroups_ = entireInputMatchGroups;
  }
  return entireInputMatchGroups;
}


#line 212
- (JavaUtilArrayList *)getMatchingInputPartsAndStoreResults {
  return FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel_getMatchingInputPartsAndStoreResults(self);
}


#line 224
- (jboolean)isEntrieInputMatchesAndStoreResults {
  return FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel_isEntrieInputMatchesAndStoreResults(self);
}


#line 232
- (id<FreemarkerTemplateTemplateModelIterator>)iterator {
  JavaUtilArrayList *matchingInputParts = self->matchingInputParts_;
  if (matchingInputParts == nil) {
    JavaUtilRegexMatcher *matcher = [((JavaUtilRegexPattern *) nil_chk(pattern_)) matcherWithJavaLangCharSequence:input_];
    return new_FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel_$2_initWithFreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel_withJavaUtilRegexMatcher_(self, matcher);
  }
  else {
    
#line 269
    return new_FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel_$3_initWithJavaUtilArrayList_(matchingInputParts);
  }
}


#line 288
- (jint)size {
  JavaUtilArrayList *matchingInputParts = self->matchingInputParts_;
  if (matchingInputParts == nil) {
    matchingInputParts = FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel_getMatchingInputPartsAndStoreResults(self);
  }
  return [((JavaUtilArrayList *) nil_chk(matchingInputParts)) size];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaUtilRegexPattern:withNSString:", "RegexMatchModel", NULL, 0x0, NULL, NULL },
    { "getWithInt:", "get", "Lfreemarker.template.TemplateModel;", 0x1, "Lfreemarker.template.TemplateModelException;", NULL },
    { "getAsBoolean", NULL, "Z", 0x1, NULL, NULL },
    { "getGroups", NULL, "Lfreemarker.template.TemplateModel;", 0x0, NULL, NULL },
    { "getMatchingInputPartsAndStoreResults", NULL, "Ljava.util.ArrayList;", 0x2, "Lfreemarker.template.TemplateModelException;", NULL },
    { "isEntrieInputMatchesAndStoreResults", NULL, "Z", 0x2, NULL, NULL },
    { "iterator", NULL, "Lfreemarker.template.TemplateModelIterator;", 0x1, NULL, NULL },
    { "size", NULL, "I", 0x1, "Lfreemarker.template.TemplateModelException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "pattern_", NULL, 0x10, "Ljava.util.regex.Pattern;", NULL, NULL,  },
    { "input_", NULL, 0x10, "Ljava.lang.String;", NULL, NULL,  },
    { "firedEntireInputMatcher_", NULL, 0x2, "Ljava.util.regex.Matcher;", NULL, NULL,  },
    { "entireInputMatched_", NULL, 0x2, "Ljava.lang.Boolean;", NULL, NULL,  },
    { "entireInputMatchGroups_", NULL, 0x2, "Lfreemarker.template.TemplateSequenceModel;", NULL, NULL,  },
    { "matchingInputParts_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, NULL,  },
  };
  static const char *inner_classes[] = {"Lfreemarker.core.BuiltInsForStringsRegexp$RegexMatchModel$MatchWithGroups;"};
  static const J2ObjcClassInfo _FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel = { 2, "RegexMatchModel", "freemarker.core", "BuiltInsForStringsRegexp", 0x8, 8, methods, 6, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel;
}

@end


#line 159
void FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel_initWithJavaUtilRegexPattern_withNSString_(FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel *self, JavaUtilRegexPattern *pattern, NSString *input) {
  (void) NSObject_init(self);
  
#line 160
  self->pattern_ = pattern;
  self->input_ = input;
}


#line 159
FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel *new_FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel_initWithJavaUtilRegexPattern_withNSString_(JavaUtilRegexPattern *pattern, NSString *input) {
  FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel *self = [FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel alloc];
  FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel_initWithJavaUtilRegexPattern_withNSString_(self, pattern, input);
  return self;
}


#line 212
JavaUtilArrayList *FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel_getMatchingInputPartsAndStoreResults(FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel *self) {
  JavaUtilArrayList *matchingInputParts = new_JavaUtilArrayList_init();
  
#line 215
  JavaUtilRegexMatcher *matcher = [((JavaUtilRegexPattern *) nil_chk(self->pattern_)) matcherWithJavaLangCharSequence:self->input_];
  while ([((JavaUtilRegexMatcher *) nil_chk(matcher)) find]) {
    [matchingInputParts addWithId:new_FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel_MatchWithGroups_initWithNSString_withJavaUtilRegexMatcher_(self->input_, matcher)];
  }
  
#line 220
  self->matchingInputParts_ = matchingInputParts;
  return matchingInputParts;
}


#line 224
jboolean FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel_isEntrieInputMatchesAndStoreResults(FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel *self) {
  JavaUtilRegexMatcher *matcher = [((JavaUtilRegexPattern *) nil_chk(self->pattern_)) matcherWithJavaLangCharSequence:self->input_];
  jboolean matches = [((JavaUtilRegexMatcher *) nil_chk(matcher)) matches];
  self->firedEntireInputMatcher_ = matcher;
  self->entireInputMatched_ = JavaLangBoolean_valueOfWithBoolean_(matches);
  return matches;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel)


#line 132
@implementation FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel_MatchWithGroups


#line 136
- (instancetype)initWithNSString:(NSString *)input
        withJavaUtilRegexMatcher:(JavaUtilRegexMatcher *)matcher {
  FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel_MatchWithGroups_initWithNSString_withJavaUtilRegexMatcher_(self, input, matcher);
  return self;
}


#line 145
- (NSString *)getAsString {
  return matchedInputPart_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithNSString:withJavaUtilRegexMatcher:", "MatchWithGroups", NULL, 0x0, NULL, NULL },
    { "getAsString", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "matchedInputPart_", NULL, 0x10, "Ljava.lang.String;", NULL, NULL,  },
    { "groupsSeq_", NULL, 0x10, "Lfreemarker.template.SimpleSequence;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel_MatchWithGroups = { 2, "MatchWithGroups", "freemarker.core", "BuiltInsForStringsRegexp$RegexMatchModel", 0x8, 2, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel_MatchWithGroups;
}

@end


#line 136
void FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel_MatchWithGroups_initWithNSString_withJavaUtilRegexMatcher_(FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel_MatchWithGroups *self, NSString *input, JavaUtilRegexMatcher *matcher) {
  (void) NSObject_init(self);
  
#line 137
  self->matchedInputPart_ = [((NSString *) nil_chk(input)) substring:[((JavaUtilRegexMatcher *) nil_chk(matcher)) start] endIndex:[matcher end]];
  jint grpCount = [matcher groupCount] + 1;
  self->groupsSeq_ = new_FreemarkerTemplateSimpleSequence_initWithInt_(grpCount);
  for (jint i = 0; i < grpCount; i++) {
    [self->groupsSeq_ addWithId:[matcher groupWithInt:i]];
  }
}


#line 136
FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel_MatchWithGroups *new_FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel_MatchWithGroups_initWithNSString_withJavaUtilRegexMatcher_(NSString *input, JavaUtilRegexMatcher *matcher) {
  FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel_MatchWithGroups *self = [FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel_MatchWithGroups alloc];
  FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel_MatchWithGroups_initWithNSString_withJavaUtilRegexMatcher_(self, input, matcher);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel_MatchWithGroups)

@implementation FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel_$1


#line 189
- (id<FreemarkerTemplateTemplateModel>)getWithInt:(jint)i {
  @try {
    return new_FreemarkerTemplateSimpleScalar_initWithNSString_([((JavaUtilRegexMatcher *) nil_chk(val$firedEntireInputMatcher_)) groupWithInt:i]);
  }
  @catch (
#line 192
  JavaLangException *e) {
    @throw new_FreemarkerCore_TemplateModelException_initWithJavaLangThrowable_withNSString_(e, @"Failed to read match group");
  }
}


#line 197
- (jint)size {
  @try {
    return [((JavaUtilRegexMatcher *) nil_chk(val$firedEntireInputMatcher_)) groupCount] + 1;
  }
  @catch (JavaLangException *e) {
    @throw new_FreemarkerCore_TemplateModelException_initWithJavaLangThrowable_withNSString_(e, @"Failed to get match group count");
  }
}

- (instancetype)initWithJavaUtilRegexMatcher:(JavaUtilRegexMatcher *)capture$0 {
  FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel_$1_initWithJavaUtilRegexMatcher_(self, capture$0);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getWithInt:", "get", "Lfreemarker.template.TemplateModel;", 0x1, "Lfreemarker.template.TemplateModelException;", NULL },
    { "size", NULL, "I", 0x1, "Lfreemarker.template.TemplateModelException;", NULL },
    { "initWithJavaUtilRegexMatcher:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "val$firedEntireInputMatcher_", NULL, 0x1012, "Ljava.util.regex.Matcher;", NULL, NULL,  },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel", "getGroups" };
  static const J2ObjcClassInfo _FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel_$1 = { 2, "", "freemarker.core", "BuiltInsForStringsRegexp$RegexMatchModel", 0x8008, 3, methods, 1, fields, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel_$1;
}

@end

void FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel_$1_initWithJavaUtilRegexMatcher_(FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel_$1 *self, JavaUtilRegexMatcher *capture$0) {
  self->val$firedEntireInputMatcher_ = capture$0;
  (void) NSObject_init(self);
}

FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel_$1 *new_FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel_$1_initWithJavaUtilRegexMatcher_(JavaUtilRegexMatcher *capture$0) {
  FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel_$1 *self = [FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel_$1 alloc];
  FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel_$1_initWithJavaUtilRegexMatcher_(self, capture$0);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel_$1)

@implementation FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel_$2


#line 241
- (jboolean)hasNext {
  JavaUtilArrayList *matchingInputParts = this$0_->matchingInputParts_;
  if (matchingInputParts == nil) {
    return hasFindInfo_;
  }
  else {
    
#line 246
    return nextIdx_ < [matchingInputParts size];
  }
}


#line 250
- (id<FreemarkerTemplateTemplateModel>)next {
  JavaUtilArrayList *matchingInputParts = this$0_->matchingInputParts_;
  if (matchingInputParts == nil) {
    if (!hasFindInfo_) @throw new_FreemarkerCore_TemplateModelException_initWithNSString_(@"There were no more matches");
    FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel_MatchWithGroups *result = new_FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel_MatchWithGroups_initWithNSString_withJavaUtilRegexMatcher_(this$0_->input_, val$matcher_);
    nextIdx_++;
    hasFindInfo_ = [((JavaUtilRegexMatcher *) nil_chk(val$matcher_)) find];
    return result;
  }
  else {
    
#line 259
    @try {
      return (id<FreemarkerTemplateTemplateModel>) check_protocol_cast([matchingInputParts getWithInt:nextIdx_++], @protocol(FreemarkerTemplateTemplateModel));
    }
    @catch (
#line 261
    JavaLangIndexOutOfBoundsException *e) {
      @throw new_FreemarkerCore_TemplateModelException_initWithJavaLangThrowable_withNSString_(e, @"There were no more matches");
    }
  }
}

- (instancetype)initWithFreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel:(FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel *)outer$
                                                      withJavaUtilRegexMatcher:(JavaUtilRegexMatcher *)capture$0 {
  FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel_$2_initWithFreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel_withJavaUtilRegexMatcher_(self, outer$, capture$0);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "hasNext", NULL, "Z", 0x1, NULL, NULL },
    { "next", NULL, "Lfreemarker.template.TemplateModel;", 0x1, "Lfreemarker.template.TemplateModelException;", NULL },
    { "initWithFreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel:withJavaUtilRegexMatcher:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lfreemarker.core.BuiltInsForStringsRegexp$RegexMatchModel;", NULL, NULL,  },
    { "nextIdx_", NULL, 0x2, "I", NULL, NULL,  },
    { "hasFindInfo_", NULL, 0x0, "Z", NULL, NULL,  },
    { "val$matcher_", NULL, 0x1012, "Ljava.util.regex.Matcher;", NULL, NULL,  },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel", "iterator" };
  static const J2ObjcClassInfo _FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel_$2 = { 2, "", "freemarker.core", "BuiltInsForStringsRegexp$RegexMatchModel", 0x8008, 3, methods, 4, fields, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel_$2;
}

@end

void FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel_$2_initWithFreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel_withJavaUtilRegexMatcher_(FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel_$2 *self, FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel *outer$, JavaUtilRegexMatcher *capture$0) {
  self->this$0_ = outer$;
  self->val$matcher_ = capture$0;
  (void) NSObject_init(self);
  self->nextIdx_ =
#line 238
  0;
  self->hasFindInfo_ = [((JavaUtilRegexMatcher *) nil_chk(self->val$matcher_)) find];
}

FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel_$2 *new_FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel_$2_initWithFreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel_withJavaUtilRegexMatcher_(FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel *outer$, JavaUtilRegexMatcher *capture$0) {
  FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel_$2 *self = [FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel_$2 alloc];
  FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel_$2_initWithFreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel_withJavaUtilRegexMatcher_(self, outer$, capture$0);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel_$2)

@implementation FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel_$3


#line 273
- (jboolean)hasNext {
  return nextIdx_ < [((JavaUtilArrayList *) nil_chk(val$matchingInputParts_)) size];
}

- (id<FreemarkerTemplateTemplateModel>)next {
  @try {
    return (id<FreemarkerTemplateTemplateModel>) check_protocol_cast([((JavaUtilArrayList *) nil_chk(val$matchingInputParts_)) getWithInt:nextIdx_++], @protocol(FreemarkerTemplateTemplateModel));
  }
  @catch (
#line 280
  JavaLangIndexOutOfBoundsException *e) {
    @throw new_FreemarkerCore_TemplateModelException_initWithJavaLangThrowable_withNSString_(e, @"There were no more matches");
  }
}

- (instancetype)initWithJavaUtilArrayList:(JavaUtilArrayList *)capture$0 {
  FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel_$3_initWithJavaUtilArrayList_(self, capture$0);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "hasNext", NULL, "Z", 0x1, NULL, NULL },
    { "next", NULL, "Lfreemarker.template.TemplateModel;", 0x1, "Lfreemarker.template.TemplateModelException;", NULL },
    { "initWithJavaUtilArrayList:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "nextIdx_", NULL, 0x2, "I", NULL, NULL,  },
    { "val$matchingInputParts_", NULL, 0x1012, "Ljava.util.ArrayList;", NULL, NULL,  },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel", "iterator" };
  static const J2ObjcClassInfo _FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel_$3 = { 2, "", "freemarker.core", "BuiltInsForStringsRegexp$RegexMatchModel", 0x8008, 3, methods, 2, fields, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel_$3;
}

@end

void FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel_$3_initWithJavaUtilArrayList_(FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel_$3 *self, JavaUtilArrayList *capture$0) {
  self->val$matchingInputParts_ = capture$0;
  (void) NSObject_init(self);
  self->nextIdx_ =
#line 271
  0;
}

FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel_$3 *new_FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel_$3_initWithJavaUtilArrayList_(JavaUtilArrayList *capture$0) {
  FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel_$3 *self = [FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel_$3 alloc];
  FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel_$3_initWithJavaUtilArrayList_(self, capture$0);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreBuiltInsForStringsRegexp_RegexMatchModel_$3)
