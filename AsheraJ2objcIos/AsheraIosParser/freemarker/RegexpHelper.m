//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/RegexpHelper.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "Logger.h"
#include "MruCacheStorage.h"
#include "RegexpHelper.h"
#include "StringUtil.h"
#include "TemplateModelException.h"
#include "_DelayedGetMessage.h"
#include "_ErrorDescriptionBuilder.h"
#include "_TemplateModelException.h"
#include "java/util/regex/Pattern.h"
#include "java/util/regex/PatternSyntaxException.h"

#line 0 "/Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/RegexpHelper.java"

#define FreemarkerCoreRegexpHelper_MAX_FLAG_WARNINGS_LOGGED 25

@interface FreemarkerCoreRegexpHelper ()

+ (jlong)intFlagToLongWithInt:(jint)flag;

- (instancetype)init;

@end

static FreemarkerLogLogger *FreemarkerCoreRegexpHelper_LOG_;
J2OBJC_STATIC_FIELD_GETTER(FreemarkerCoreRegexpHelper, LOG_, FreemarkerLogLogger *)

static jboolean FreemarkerCoreRegexpHelper_flagWarningsEnabled_;
J2OBJC_STATIC_FIELD_GETTER(FreemarkerCoreRegexpHelper, flagWarningsEnabled_, jboolean)
J2OBJC_STATIC_FIELD_REF_GETTER(FreemarkerCoreRegexpHelper, flagWarningsEnabled_, jboolean)

J2OBJC_STATIC_FIELD_GETTER(FreemarkerCoreRegexpHelper, MAX_FLAG_WARNINGS_LOGGED, jint)

static id FreemarkerCoreRegexpHelper_flagWarningsCntSync_;
J2OBJC_STATIC_FIELD_GETTER(FreemarkerCoreRegexpHelper, flagWarningsCntSync_, id)

static jint FreemarkerCoreRegexpHelper_flagWarningsCnt_;
J2OBJC_STATIC_FIELD_GETTER(FreemarkerCoreRegexpHelper, flagWarningsCnt_, jint)
J2OBJC_STATIC_FIELD_REF_GETTER(FreemarkerCoreRegexpHelper, flagWarningsCnt_, jint)

static FreemarkerCacheMruCacheStorage *FreemarkerCoreRegexpHelper_patternCache_;
J2OBJC_STATIC_FIELD_GETTER(FreemarkerCoreRegexpHelper, patternCache_, FreemarkerCacheMruCacheStorage *)

__attribute__((unused)) static jlong FreemarkerCoreRegexpHelper_intFlagToLongWithInt_(jint flag);

__attribute__((unused)) static void FreemarkerCoreRegexpHelper_init(FreemarkerCoreRegexpHelper *self);

__attribute__((unused)) static FreemarkerCoreRegexpHelper *new_FreemarkerCoreRegexpHelper_init() NS_RETURNS_RETAINED;

@interface FreemarkerCoreRegexpHelper_PatternCacheKey : NSObject {
 @public
  NSString *patternString_;
  jint flags_;
  jint hashCode_;
}

- (instancetype)initWithNSString:(NSString *)patternString
                         withInt:(jint)flags;

- (jboolean)isEqual:(id)that;

- (NSUInteger)hash;

@end

J2OBJC_EMPTY_STATIC_INIT(FreemarkerCoreRegexpHelper_PatternCacheKey)

J2OBJC_FIELD_SETTER(FreemarkerCoreRegexpHelper_PatternCacheKey, patternString_, NSString *)

__attribute__((unused)) static void FreemarkerCoreRegexpHelper_PatternCacheKey_initWithNSString_withInt_(FreemarkerCoreRegexpHelper_PatternCacheKey *self, NSString *patternString, jint flags);

__attribute__((unused)) static FreemarkerCoreRegexpHelper_PatternCacheKey *new_FreemarkerCoreRegexpHelper_PatternCacheKey_initWithNSString_withInt_(NSString *patternString, jint flags) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerCoreRegexpHelper_PatternCacheKey)

J2OBJC_INITIALIZED_DEFN(FreemarkerCoreRegexpHelper)

jlong FreemarkerCoreRegexpHelper_RE_FLAG_CASE_INSENSITIVE_;
jlong FreemarkerCoreRegexpHelper_RE_FLAG_MULTILINE_;
jlong FreemarkerCoreRegexpHelper_RE_FLAG_COMMENTS_;
jlong FreemarkerCoreRegexpHelper_RE_FLAG_DOTALL_;


#line 30
@implementation FreemarkerCoreRegexpHelper


#line 41
+ (jlong)intFlagToLongWithInt:(jint)flag {
  return FreemarkerCoreRegexpHelper_intFlagToLongWithInt_(flag);
}


#line 60
- (instancetype)init {
  FreemarkerCoreRegexpHelper_init(self);
  return self;
}


#line 62
+ (JavaUtilRegexPattern *)getPatternWithNSString:(NSString *)patternString
                                         withInt:(jint)flags {
  return FreemarkerCoreRegexpHelper_getPatternWithNSString_withInt_(patternString, flags);
}


#line 114
+ (jlong)parseFlagStringWithNSString:(NSString *)flagString {
  return FreemarkerCoreRegexpHelper_parseFlagStringWithNSString_(flagString);
}


#line 152
+ (void)logFlagWarningWithNSString:(NSString *)message {
  FreemarkerCoreRegexpHelper_logFlagWarningWithNSString_(message);
}


#line 172
+ (void)checkNonRegexpFlagsWithNSString:(NSString *)biName
                               withLong:(jlong)flags {
  FreemarkerCoreRegexpHelper_checkNonRegexpFlagsWithNSString_withLong_(biName, flags);
}


#line 176
+ (void)checkOnlyHasNonRegexpFlagsWithNSString:(NSString *)biName
                                      withLong:(jlong)flags
                                   withBoolean:(jboolean)strict {
  FreemarkerCoreRegexpHelper_checkOnlyHasNonRegexpFlagsWithNSString_withLong_withBoolean_(biName, flags, strict);
}

+ (void)initialize {
  if (self == [FreemarkerCoreRegexpHelper class]) {
    FreemarkerCoreRegexpHelper_LOG_ = FreemarkerLogLogger_getLoggerWithNSString_(
#line 32
    @"freemarker.runtime");
    FreemarkerCoreRegexpHelper_flagWarningsEnabled_ =
#line 34
    [((FreemarkerLogLogger *) nil_chk(FreemarkerCoreRegexpHelper_LOG_)) isWarnEnabled];
    FreemarkerCoreRegexpHelper_flagWarningsCntSync_ = new_NSObject_init();
    FreemarkerCoreRegexpHelper_patternCache_ = new_FreemarkerCacheMruCacheStorage_initWithInt_withInt_(
#line 39
    50, 150);
    FreemarkerCoreRegexpHelper_RE_FLAG_CASE_INSENSITIVE_ = FreemarkerCoreRegexpHelper_intFlagToLongWithInt_(
#line 46
    JavaUtilRegexPattern_CASE_INSENSITIVE);
    FreemarkerCoreRegexpHelper_RE_FLAG_MULTILINE_ = FreemarkerCoreRegexpHelper_intFlagToLongWithInt_(
#line 48
    JavaUtilRegexPattern_MULTILINE);
    FreemarkerCoreRegexpHelper_RE_FLAG_COMMENTS_ = FreemarkerCoreRegexpHelper_intFlagToLongWithInt_(
#line 50
    JavaUtilRegexPattern_COMMENTS);
    FreemarkerCoreRegexpHelper_RE_FLAG_DOTALL_ = FreemarkerCoreRegexpHelper_intFlagToLongWithInt_(
#line 52
    JavaUtilRegexPattern_DOTALL);
    J2OBJC_SET_INITIALIZED(FreemarkerCoreRegexpHelper)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "intFlagToLongWithInt:", "intFlagToLong", "J", 0xa, NULL, NULL },
    { "init", "RegexpHelper", NULL, 0x2, NULL, NULL },
    { "getPatternWithNSString:withInt:", "getPattern", "Ljava.util.regex.Pattern;", 0x8, "Lfreemarker.template.TemplateModelException;", NULL },
    { "parseFlagStringWithNSString:", "parseFlagString", "J", 0x8, NULL, NULL },
    { "logFlagWarningWithNSString:", "logFlagWarning", "V", 0x8, NULL, NULL },
    { "checkNonRegexpFlagsWithNSString:withLong:", "checkNonRegexpFlags", "V", 0x8, "Lfreemarker.core._TemplateModelException;", NULL },
    { "checkOnlyHasNonRegexpFlagsWithNSString:withLong:withBoolean:", "checkOnlyHasNonRegexpFlags", "V", 0x8, "Lfreemarker.core._TemplateModelException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "LOG_", NULL, 0x1a, "Lfreemarker.log.Logger;", &FreemarkerCoreRegexpHelper_LOG_, NULL,  },
    { "flagWarningsEnabled_", NULL, 0x4a, "Z", &FreemarkerCoreRegexpHelper_flagWarningsEnabled_, NULL,  },
    { "MAX_FLAG_WARNINGS_LOGGED_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = FreemarkerCoreRegexpHelper_MAX_FLAG_WARNINGS_LOGGED },
    { "flagWarningsCntSync_", NULL, 0x1a, "Ljava.lang.Object;", &FreemarkerCoreRegexpHelper_flagWarningsCntSync_, NULL,  },
    { "flagWarningsCnt_", NULL, 0xa, "I", &FreemarkerCoreRegexpHelper_flagWarningsCnt_, NULL,  },
    { "patternCache_", NULL, 0x1a, "Lfreemarker.cache.MruCacheStorage;", &FreemarkerCoreRegexpHelper_patternCache_, NULL,  },
    { "RE_FLAG_CASE_INSENSITIVE_", NULL, 0x18, "J", &FreemarkerCoreRegexpHelper_RE_FLAG_CASE_INSENSITIVE_, NULL,  },
    { "RE_FLAG_MULTILINE_", NULL, 0x18, "J", &FreemarkerCoreRegexpHelper_RE_FLAG_MULTILINE_, NULL,  },
    { "RE_FLAG_COMMENTS_", NULL, 0x18, "J", &FreemarkerCoreRegexpHelper_RE_FLAG_COMMENTS_, NULL,  },
    { "RE_FLAG_DOTALL_", NULL, 0x18, "J", &FreemarkerCoreRegexpHelper_RE_FLAG_DOTALL_, NULL,  },
    { "RE_FLAG_REGEXP_", NULL, 0x18, "J", NULL, NULL, .constantValue.asLong = FreemarkerCoreRegexpHelper_RE_FLAG_REGEXP },
    { "RE_FLAG_FIRST_ONLY_", NULL, 0x18, "J", NULL, NULL, .constantValue.asLong = FreemarkerCoreRegexpHelper_RE_FLAG_FIRST_ONLY },
  };
  static const char *inner_classes[] = {"Lfreemarker.core.RegexpHelper$PatternCacheKey;"};
  static const J2ObjcClassInfo _FreemarkerCoreRegexpHelper = { 2, "RegexpHelper", "freemarker.core", NULL, 0x10, 7, methods, 12, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_FreemarkerCoreRegexpHelper;
}

@end


#line 41
jlong FreemarkerCoreRegexpHelper_intFlagToLongWithInt_(jint flag) {
  FreemarkerCoreRegexpHelper_initialize();
  
#line 42
  return flag & (jlong) 0x0000FFFFLL;
}


#line 60
void FreemarkerCoreRegexpHelper_init(FreemarkerCoreRegexpHelper *self) {
  (void) NSObject_init(self);
}


#line 60
FreemarkerCoreRegexpHelper *new_FreemarkerCoreRegexpHelper_init() {
  FreemarkerCoreRegexpHelper *self = [FreemarkerCoreRegexpHelper alloc];
  FreemarkerCoreRegexpHelper_init(self);
  return self;
}


#line 62
JavaUtilRegexPattern *FreemarkerCoreRegexpHelper_getPatternWithNSString_withInt_(NSString *patternString, jint flags) {
  FreemarkerCoreRegexpHelper_initialize();
  FreemarkerCoreRegexpHelper_PatternCacheKey *patternKey = new_FreemarkerCoreRegexpHelper_PatternCacheKey_initWithNSString_withInt_(patternString, flags);
  
#line 66
  JavaUtilRegexPattern *result;
  
#line 68
  @synchronized(FreemarkerCoreRegexpHelper_patternCache_) {
    result = (JavaUtilRegexPattern *) check_class_cast([((FreemarkerCacheMruCacheStorage *) nil_chk(FreemarkerCoreRegexpHelper_patternCache_)) getWithId:patternKey], [JavaUtilRegexPattern class]);
  }
  if (result != nil) {
    return result;
  }
  
#line 75
  @try {
    result = JavaUtilRegexPattern_compileWithNSString_withInt_(patternString, flags);
  }
  @catch (
#line 77
  JavaUtilRegexPatternSyntaxException *e) {
    @throw new_FreemarkerCore_TemplateModelException_initWithJavaLangThrowable_withNSObjectArray_(e, [IOSObjectArray newArrayWithObjects:(id[]){
#line 79
      @"Malformed regular expression: ", new_FreemarkerCore_DelayedGetMessage_initWithJavaLangThrowable_(e) } count:2 type:NSObject_class_()]);
    }
    @synchronized(FreemarkerCoreRegexpHelper_patternCache_) {
      [FreemarkerCoreRegexpHelper_patternCache_ putWithId:patternKey withId:result];
    }
    return result;
  }


#line 114
jlong FreemarkerCoreRegexpHelper_parseFlagStringWithNSString_(NSString *flagString) {
  FreemarkerCoreRegexpHelper_initialize();
  
#line 115
  jlong flags = 0;
  for (jint i = 0; i < ((jint) [((NSString *) nil_chk(flagString)) length]); i++) {
    jchar c = [flagString charAtWithInt:i];
    switch (c) {
      case 'i':
      flags |= FreemarkerCoreRegexpHelper_RE_FLAG_CASE_INSENSITIVE_;
      break;
      case 'm':
      flags |= FreemarkerCoreRegexpHelper_RE_FLAG_MULTILINE_;
      break;
      case 'c':
      flags |= FreemarkerCoreRegexpHelper_RE_FLAG_COMMENTS_;
      break;
      case 's':
      flags |= FreemarkerCoreRegexpHelper_RE_FLAG_DOTALL_;
      break;
      case 'r':
      flags |= FreemarkerCoreRegexpHelper_RE_FLAG_REGEXP;
      break;
      case 'f':
      flags |= FreemarkerCoreRegexpHelper_RE_FLAG_FIRST_ONLY;
      break;
      default:
      if (FreemarkerCoreRegexpHelper_flagWarningsEnabled_) {
        FreemarkerCoreRegexpHelper_logFlagWarningWithNSString_(JreStrcat("$$C", @"Unrecognized regular expression flag: ", FreemarkerTemplateUtilityStringUtil_jQuoteWithNSString_(NSString_valueOfChar_(
#line 141
        c)), '.'));
      }
    }
  }
  return flags;
}


#line 152
void FreemarkerCoreRegexpHelper_logFlagWarningWithNSString_(NSString *message) {
  FreemarkerCoreRegexpHelper_initialize();
  
#line 153
  if (!FreemarkerCoreRegexpHelper_flagWarningsEnabled_) return;
  
#line 155
  jint cnt;
  @synchronized(FreemarkerCoreRegexpHelper_flagWarningsCntSync_) {
    cnt = FreemarkerCoreRegexpHelper_flagWarningsCnt_;
    if (cnt < FreemarkerCoreRegexpHelper_MAX_FLAG_WARNINGS_LOGGED) {
      FreemarkerCoreRegexpHelper_flagWarningsCnt_++;
    }
    else {
      
#line 161
      FreemarkerCoreRegexpHelper_flagWarningsEnabled_ = NO;
      return;
    }
  }
  message = JreStrcat("$$", message, @" This will be an error in some later FreeMarker version!");
  if (cnt + 1 == FreemarkerCoreRegexpHelper_MAX_FLAG_WARNINGS_LOGGED) {
    message = JreStrcat("$$", message, @" [Will not log more regular expression flag problems until restart!]");
  }
  [((FreemarkerLogLogger *) nil_chk(FreemarkerCoreRegexpHelper_LOG_)) warnWithNSString:message];
}


#line 172
void FreemarkerCoreRegexpHelper_checkNonRegexpFlagsWithNSString_withLong_(NSString *biName, jlong flags) {
  FreemarkerCoreRegexpHelper_initialize();
  
#line 173
  FreemarkerCoreRegexpHelper_checkOnlyHasNonRegexpFlagsWithNSString_withLong_withBoolean_(biName, flags, NO);
}


#line 176
void FreemarkerCoreRegexpHelper_checkOnlyHasNonRegexpFlagsWithNSString_withLong_withBoolean_(NSString *biName, jlong flags, jboolean strict) {
  FreemarkerCoreRegexpHelper_initialize();
  if (!strict && !FreemarkerCoreRegexpHelper_flagWarningsEnabled_) return;
  
#line 180
  NSString *flag;
  if ((flags & FreemarkerCoreRegexpHelper_RE_FLAG_MULTILINE_) != 0) {
    flag = @"m";
  }
  else
#line 183
  if ((flags & FreemarkerCoreRegexpHelper_RE_FLAG_DOTALL_) != 0) {
    flag = @"s";
  }
  else
#line 185
  if ((flags & FreemarkerCoreRegexpHelper_RE_FLAG_COMMENTS_) != 0) {
    flag = @"c";
  }
  else {
    
#line 188
    return;
  }
  
#line 191
  IOSObjectArray *msg = [IOSObjectArray newArrayWithObjects:(id[]){ @"?", biName, @" doesn't support the \"", flag, @"\" flag without the \"r\" flag." } count:5 type:NSObject_class_()];
  
#line 193
  if (strict) {
    @throw new_FreemarkerCore_TemplateModelException_initWithNSObjectArray_(msg);
  }
  else {
    FreemarkerCoreRegexpHelper_logFlagWarningWithNSString_([new_FreemarkerCore_ErrorDescriptionBuilder_initWithNSObjectArray_(msg) description]);
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreRegexpHelper)


#line 87
@implementation FreemarkerCoreRegexpHelper_PatternCacheKey


#line 92
- (instancetype)initWithNSString:(NSString *)patternString
                         withInt:(jint)flags {
  FreemarkerCoreRegexpHelper_PatternCacheKey_initWithNSString_withInt_(self, patternString, flags);
  return self;
}

- (jboolean)isEqual:(id)that {
  if ([that isKindOfClass:[FreemarkerCoreRegexpHelper_PatternCacheKey class]]) {
    FreemarkerCoreRegexpHelper_PatternCacheKey *thatPCK = (FreemarkerCoreRegexpHelper_PatternCacheKey *) check_class_cast(that, [FreemarkerCoreRegexpHelper_PatternCacheKey class]);
    return ((FreemarkerCoreRegexpHelper_PatternCacheKey *) nil_chk(thatPCK))->flags_ == flags_ &&
#line 102
    [((NSString *) nil_chk(thatPCK->patternString_)) isEqual:patternString_];
  }
  else {
    
#line 104
    return NO;
  }
}


#line 108
- (NSUInteger)hash {
  return hashCode_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithNSString:withInt:", "PatternCacheKey", NULL, 0x1, NULL, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL, NULL },
    { "hash", "hashCode", "I", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "patternString_", NULL, 0x12, "Ljava.lang.String;", NULL, NULL,  },
    { "flags_", NULL, 0x12, "I", NULL, NULL,  },
    { "hashCode_", NULL, 0x12, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerCoreRegexpHelper_PatternCacheKey = { 2, "PatternCacheKey", "freemarker.core", "RegexpHelper", 0xa, 3, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerCoreRegexpHelper_PatternCacheKey;
}

@end


#line 92
void FreemarkerCoreRegexpHelper_PatternCacheKey_initWithNSString_withInt_(FreemarkerCoreRegexpHelper_PatternCacheKey *self, NSString *patternString, jint flags) {
  (void) NSObject_init(self);
  
#line 93
  self->patternString_ = patternString;
  self->flags_ = flags;
  self->hashCode_ = ((jint) [((NSString *) nil_chk(patternString)) hash]) + 31 * flags;
}


#line 92
FreemarkerCoreRegexpHelper_PatternCacheKey *new_FreemarkerCoreRegexpHelper_PatternCacheKey_initWithNSString_withInt_(NSString *patternString, jint flags) {
  FreemarkerCoreRegexpHelper_PatternCacheKey *self = [FreemarkerCoreRegexpHelper_PatternCacheKey alloc];
  FreemarkerCoreRegexpHelper_PatternCacheKey_initWithNSString_withInt_(self, patternString, flags);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreRegexpHelper_PatternCacheKey)
