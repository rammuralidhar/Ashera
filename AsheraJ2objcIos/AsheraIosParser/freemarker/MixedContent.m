//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/MixedContent.java
//


#include "Environment.h"
#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "MixedContent.h"
#include "ParameterRole.h"
#include "ParseException.h"
#include "TemplateElement.h"
#include "TemplateException.h"
#include "java/io/IOException.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/StringBuffer.h"

#line 0 "/Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/MixedContent.java"


#line 26
@implementation FreemarkerCoreMixedContent

- (instancetype)init {
  FreemarkerCoreMixedContent_init(self);
  return self;
}


#line 30
- (void)addElementWithFreemarkerCoreTemplateElement:(FreemarkerCoreTemplateElement *)element {
  [self addRegulatedChildWithFreemarkerCoreTemplateElement:element];
}

- (void)addElementWithInt:(jint)index
withFreemarkerCoreTemplateElement:(FreemarkerCoreTemplateElement *)element {
  [self addRegulatedChildWithInt:index withFreemarkerCoreTemplateElement:element];
}


#line 38
- (FreemarkerCoreTemplateElement *)postParseCleanupWithBoolean:(jboolean)stripWhitespace {
  
#line 41
  (void) [super postParseCleanupWithBoolean:stripWhitespace];
  return [self getRegulatedChildCount] == 1 ? [self getRegulatedChildWithInt:0] : self;
}


#line 49
- (void)acceptWithFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env {
  
#line 52
  jint ln = [self getRegulatedChildCount];
  for (jint i = 0; i < ln; i++) {
    [((FreemarkerCoreEnvironment *) nil_chk(env)) visitWithFreemarkerCoreTemplateElement:[self getRegulatedChildWithInt:i]];
  }
}

- (NSString *)dumpWithBoolean:(jboolean)canonical {
  if (canonical) {
    JavaLangStringBuffer *buf = new_JavaLangStringBuffer_init();
    jint ln = [self getRegulatedChildCount];
    for (jint i = 0; i < ln; i++) {
      (void) [buf appendWithNSString:[((FreemarkerCoreTemplateElement *) nil_chk([self getRegulatedChildWithInt:i])) getCanonicalForm]];
    }
    return [buf description];
  }
  else {
    
#line 67
    if ([self getParentElement] == nil) {
      return @"root";
    }
    return [self getNodeTypeSymbol];
  }
}


#line 74
- (jboolean)isOutputCacheable {
  jint ln = [self getRegulatedChildCount];
  for (jint i = 0; i < ln; i++) {
    if (![((FreemarkerCoreTemplateElement *) nil_chk([self getRegulatedChildWithInt:i])) isOutputCacheable]) {
      return NO;
    }
  }
  return YES;
}

- (NSString *)getNodeTypeSymbol {
  return @"#mixed_content";
}

- (jint)getParameterCount {
  return 0;
}

- (id)getParameterValueWithInt:(jint)idx {
  @throw new_JavaLangIndexOutOfBoundsException_init();
}

- (FreemarkerCoreParameterRole *)getParameterRoleWithInt:(jint)idx {
  @throw new_JavaLangIndexOutOfBoundsException_init();
}

- (jboolean)isShownInStackTrace {
  return NO;
}

- (jboolean)isIgnorable {
  return [self getRegulatedChildCount] == 0;
}

- (jboolean)isNestedBlockRepeater {
  return NO;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "MixedContent", NULL, 0x0, NULL, NULL },
    { "addElementWithFreemarkerCoreTemplateElement:", "addElement", "V", 0x0, NULL, NULL },
    { "addElementWithInt:withFreemarkerCoreTemplateElement:", "addElement", "V", 0x0, NULL, NULL },
    { "postParseCleanupWithBoolean:", "postParseCleanup", "Lfreemarker.core.TemplateElement;", 0x0, "Lfreemarker.core.ParseException;", NULL },
    { "acceptWithFreemarkerCoreEnvironment:", "accept", "V", 0x0, "Lfreemarker.template.TemplateException;Ljava.io.IOException;", NULL },
    { "dumpWithBoolean:", "dump", "Ljava.lang.String;", 0x4, NULL, NULL },
    { "isOutputCacheable", NULL, "Z", 0x4, NULL, NULL },
    { "getNodeTypeSymbol", NULL, "Ljava.lang.String;", 0x0, NULL, NULL },
    { "getParameterCount", NULL, "I", 0x0, NULL, NULL },
    { "getParameterValueWithInt:", "getParameterValue", "Ljava.lang.Object;", 0x0, NULL, NULL },
    { "getParameterRoleWithInt:", "getParameterRole", "Lfreemarker.core.ParameterRole;", 0x0, NULL, NULL },
    { "isShownInStackTrace", NULL, "Z", 0x0, NULL, NULL },
    { "isIgnorable", NULL, "Z", 0x0, NULL, NULL },
    { "isNestedBlockRepeater", NULL, "Z", 0x0, NULL, NULL },
  };
  static const J2ObjcClassInfo _FreemarkerCoreMixedContent = { 2, "MixedContent", "freemarker.core", NULL, 0x10, 14, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerCoreMixedContent;
}

@end


#line 28
void FreemarkerCoreMixedContent_init(FreemarkerCoreMixedContent *self) {
  (void) FreemarkerCoreTemplateElement_init(self);
}


#line 28
FreemarkerCoreMixedContent *new_FreemarkerCoreMixedContent_init() {
  FreemarkerCoreMixedContent *self = [FreemarkerCoreMixedContent alloc];
  FreemarkerCoreMixedContent_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreMixedContent)
