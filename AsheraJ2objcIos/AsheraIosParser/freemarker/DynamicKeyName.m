//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/DynamicKeyName.java
//


#include "Constants.h"
#include "DynamicKeyName.h"
#include "Environment.h"
#include "EvalUtil.h"
#include "Expression.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "InvalidReferenceException.h"
#include "J2ObjC_source.h"
#include "NonHashException.h"
#include "NonStringException.h"
#include "ParameterRole.h"
#include "Range.h"
#include "RangeModel.h"
#include "SimpleScalar.h"
#include "SimpleSequence.h"
#include "TemplateException.h"
#include "TemplateHashModel.h"
#include "TemplateModel.h"
#include "TemplateNumberModel.h"
#include "TemplateScalarModel.h"
#include "TemplateSequenceModel.h"
#include "UnexpectedTypeException.h"
#include "_MiscTemplateException.h"
#include "_TemplateAPI.h"
#include "java/lang/Exception.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/RuntimeException.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/List.h"

#line 0 "/Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/DynamicKeyName.java"

@interface FreemarkerCoreDynamicKeyName () {
 @public
  FreemarkerCoreExpression *keyExpression_;
  FreemarkerCoreExpression *target_;
}

- (id<FreemarkerTemplateTemplateModel>)dealWithNumericalKeyWithFreemarkerTemplateTemplateModel:(id<FreemarkerTemplateTemplateModel>)targetModel
                                                                                       withInt:(jint)index
                                                                 withFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env;

- (id<FreemarkerTemplateTemplateModel>)dealWithStringKeyWithFreemarkerTemplateTemplateModel:(id<FreemarkerTemplateTemplateModel>)targetModel
                                                                               withNSString:(NSString *)key
                                                              withFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env;

- (id<FreemarkerTemplateTemplateModel>)dealWithRangeKeyWithFreemarkerTemplateTemplateModel:(id<FreemarkerTemplateTemplateModel>)targetModel
                                                              withFreemarkerCoreRangeModel:(FreemarkerCoreRangeModel *)range
                                                             withFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env;

- (id<FreemarkerTemplateTemplateModel>)emptyResultWithBoolean:(jboolean)seq;

@end

J2OBJC_FIELD_SETTER(FreemarkerCoreDynamicKeyName, keyExpression_, FreemarkerCoreExpression *)
J2OBJC_FIELD_SETTER(FreemarkerCoreDynamicKeyName, target_, FreemarkerCoreExpression *)

static IOSObjectArray *FreemarkerCoreDynamicKeyName_NUMERICAL_KEY_LHO_EXPECTED_TYPES_;
J2OBJC_STATIC_FIELD_GETTER(FreemarkerCoreDynamicKeyName, NUMERICAL_KEY_LHO_EXPECTED_TYPES_, IOSObjectArray *)
J2OBJC_STATIC_FIELD_SETTER(FreemarkerCoreDynamicKeyName, NUMERICAL_KEY_LHO_EXPECTED_TYPES_, IOSObjectArray *)

__attribute__((unused)) static id<FreemarkerTemplateTemplateModel> FreemarkerCoreDynamicKeyName_dealWithNumericalKeyWithFreemarkerTemplateTemplateModel_withInt_withFreemarkerCoreEnvironment_(FreemarkerCoreDynamicKeyName *self, id<FreemarkerTemplateTemplateModel> targetModel, jint index, FreemarkerCoreEnvironment *env);

__attribute__((unused)) static id<FreemarkerTemplateTemplateModel> FreemarkerCoreDynamicKeyName_dealWithStringKeyWithFreemarkerTemplateTemplateModel_withNSString_withFreemarkerCoreEnvironment_(FreemarkerCoreDynamicKeyName *self, id<FreemarkerTemplateTemplateModel> targetModel, NSString *key, FreemarkerCoreEnvironment *env);

__attribute__((unused)) static id<FreemarkerTemplateTemplateModel> FreemarkerCoreDynamicKeyName_dealWithRangeKeyWithFreemarkerTemplateTemplateModel_withFreemarkerCoreRangeModel_withFreemarkerCoreEnvironment_(FreemarkerCoreDynamicKeyName *self, id<FreemarkerTemplateTemplateModel> targetModel, FreemarkerCoreRangeModel *range, FreemarkerCoreEnvironment *env);

__attribute__((unused)) static id<FreemarkerTemplateTemplateModel> FreemarkerCoreDynamicKeyName_emptyResultWithBoolean_(FreemarkerCoreDynamicKeyName *self, jboolean seq);

J2OBJC_INITIALIZED_DEFN(FreemarkerCoreDynamicKeyName)


#line 37
@implementation FreemarkerCoreDynamicKeyName


#line 42
- (instancetype)initWithFreemarkerCoreExpression:(FreemarkerCoreExpression *)target
                    withFreemarkerCoreExpression:(FreemarkerCoreExpression *)keyExpression {
  FreemarkerCoreDynamicKeyName_initWithFreemarkerCoreExpression_withFreemarkerCoreExpression_(self, target, keyExpression);
  return self;
}


#line 47
- (id<FreemarkerTemplateTemplateModel>)_evalWithFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env {
  
#line 49
  id<FreemarkerTemplateTemplateModel> targetModel = [((FreemarkerCoreExpression *) nil_chk(target_)) evalWithFreemarkerCoreEnvironment:env];
  if (targetModel == nil) {
    if ([((FreemarkerCoreEnvironment *) nil_chk(env)) isClassicCompatible]) {
      return nil;
    }
    else {
      
#line 54
      @throw FreemarkerCoreInvalidReferenceException_getInstanceWithFreemarkerCoreExpression_withFreemarkerCoreEnvironment_(target_, env);
    }
  }
  
#line 58
  id<FreemarkerTemplateTemplateModel> keyModel = [((FreemarkerCoreExpression *) nil_chk(keyExpression_)) evalWithFreemarkerCoreEnvironment:env];
  if (keyModel == nil) {
    if ([((FreemarkerCoreEnvironment *) nil_chk(env)) isClassicCompatible]) {
      keyModel = FreemarkerTemplateTemplateScalarModel_get_EMPTY_STRING_();
    }
    else {
      [keyExpression_ assertNonNullWithFreemarkerTemplateTemplateModel:nil withFreemarkerCoreEnvironment:env];
    }
  }
  if ([FreemarkerTemplateTemplateNumberModel_class_() isInstance:keyModel]) {
    jint index = [((NSNumber *) nil_chk([keyExpression_ modelToNumberWithFreemarkerTemplateTemplateModel:keyModel withFreemarkerCoreEnvironment:env])) intValue];
    return FreemarkerCoreDynamicKeyName_dealWithNumericalKeyWithFreemarkerTemplateTemplateModel_withInt_withFreemarkerCoreEnvironment_(self, targetModel, index, env);
  }
  if ([FreemarkerTemplateTemplateScalarModel_class_() isInstance:keyModel]) {
    NSString *key = FreemarkerCoreEvalUtil_modelToStringWithFreemarkerTemplateTemplateScalarModel_withFreemarkerCoreExpression_withFreemarkerCoreEnvironment_((id<FreemarkerTemplateTemplateScalarModel>) check_protocol_cast(keyModel, @protocol(FreemarkerTemplateTemplateScalarModel)), keyExpression_, env);
    return FreemarkerCoreDynamicKeyName_dealWithStringKeyWithFreemarkerTemplateTemplateModel_withNSString_withFreemarkerCoreEnvironment_(self, targetModel, key, env);
  }
  if ([keyModel isKindOfClass:[FreemarkerCoreRangeModel class]]) {
    return FreemarkerCoreDynamicKeyName_dealWithRangeKeyWithFreemarkerTemplateTemplateModel_withFreemarkerCoreRangeModel_withFreemarkerCoreEnvironment_(self, targetModel, (FreemarkerCoreRangeModel *) check_class_cast(keyModel, [FreemarkerCoreRangeModel class]), env);
  }
  @throw new_FreemarkerCoreUnexpectedTypeException_initWithFreemarkerCoreExpression_withFreemarkerTemplateTemplateModel_withNSString_withIOSClassArray_withFreemarkerCoreEnvironment_(keyExpression_, keyModel, @"number, range, or string", [IOSObjectArray newArrayWithObjects:(id[]){
#line 79
    FreemarkerTemplateTemplateNumberModel_class_(), FreemarkerTemplateTemplateScalarModel_class_(), FreemarkerCoreRange_class_() } count:3 type:IOSClass_class_()], env);
  }


#line 91
- (id<FreemarkerTemplateTemplateModel>)dealWithNumericalKeyWithFreemarkerTemplateTemplateModel:(id<FreemarkerTemplateTemplateModel>)targetModel
                                                                                       withInt:(jint)index
                                                                 withFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env {
  return FreemarkerCoreDynamicKeyName_dealWithNumericalKeyWithFreemarkerTemplateTemplateModel_withInt_withFreemarkerCoreEnvironment_(self, targetModel, index, env);
}


#line 141
- (id<FreemarkerTemplateTemplateModel>)dealWithStringKeyWithFreemarkerTemplateTemplateModel:(id<FreemarkerTemplateTemplateModel>)targetModel
                                                                               withNSString:(NSString *)key
                                                              withFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env {
  return FreemarkerCoreDynamicKeyName_dealWithStringKeyWithFreemarkerTemplateTemplateModel_withNSString_withFreemarkerCoreEnvironment_(self, targetModel, key, env);
}


#line 150
- (id<FreemarkerTemplateTemplateModel>)dealWithRangeKeyWithFreemarkerTemplateTemplateModel:(id<FreemarkerTemplateTemplateModel>)targetModel
                                                              withFreemarkerCoreRangeModel:(FreemarkerCoreRangeModel *)range
                                                             withFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env {
  return FreemarkerCoreDynamicKeyName_dealWithRangeKeyWithFreemarkerTemplateTemplateModel_withFreemarkerCoreRangeModel_withFreemarkerCoreEnvironment_(self, targetModel, range, env);
}


#line 265
- (id<FreemarkerTemplateTemplateModel>)emptyResultWithBoolean:(jboolean)seq {
  return FreemarkerCoreDynamicKeyName_emptyResultWithBoolean_(self, seq);
}


#line 273
- (NSString *)getCanonicalForm {
  return JreStrcat("$C$C", [((FreemarkerCoreExpression *) nil_chk(target_)) getCanonicalForm], '[',
#line 276
  [((FreemarkerCoreExpression *) nil_chk(keyExpression_)) getCanonicalForm], ']');
}


#line 280
- (NSString *)getNodeTypeSymbol {
  return @"...[...]";
}

- (jboolean)isLiteral {
  return constantValue_ != nil || ([((FreemarkerCoreExpression *) nil_chk(target_)) isLiteral] && [((FreemarkerCoreExpression *) nil_chk(keyExpression_)) isLiteral]);
}

- (jint)getParameterCount {
  return 2;
}

- (id)getParameterValueWithInt:(jint)idx {
  return idx == 0 ? target_ : keyExpression_;
}

- (FreemarkerCoreParameterRole *)getParameterRoleWithInt:(jint)idx {
  return idx == 0 ? FreemarkerCoreParameterRole_get_LEFT_HAND_OPERAND_() : FreemarkerCoreParameterRole_get_ENCLOSED_OPERAND_();
}

- (FreemarkerCoreExpression *)deepCloneWithIdentifierReplaced_innerWithNSString:(NSString *)replacedIdentifier
                                                   withFreemarkerCoreExpression:(FreemarkerCoreExpression *)replacement
                                 withFreemarkerCoreExpression_ReplacemenetState:(FreemarkerCoreExpression_ReplacemenetState *)replacementState {
  
#line 302
  return new_FreemarkerCoreDynamicKeyName_initWithFreemarkerCoreExpression_withFreemarkerCoreExpression_(
#line 303
  [((FreemarkerCoreExpression *) nil_chk(target_)) deepCloneWithIdentifierReplacedWithNSString:replacedIdentifier withFreemarkerCoreExpression:replacement withFreemarkerCoreExpression_ReplacemenetState:replacementState],
#line 304
  [((FreemarkerCoreExpression *) nil_chk(keyExpression_)) deepCloneWithIdentifierReplacedWithNSString:replacedIdentifier withFreemarkerCoreExpression:replacement withFreemarkerCoreExpression_ReplacemenetState:replacementState]);
}

+ (void)initialize {
  if (self == [FreemarkerCoreDynamicKeyName class]) {
    {
      
#line 84
      FreemarkerCoreDynamicKeyName_NUMERICAL_KEY_LHO_EXPECTED_TYPES_ = [IOSObjectArray newArrayWithLength:1 + ((IOSObjectArray *) nil_chk(FreemarkerCoreNonStringException_get_STRING_COERCABLE_TYPES_()))->size_ type:IOSClass_class_()];
      (void) IOSObjectArray_Set(FreemarkerCoreDynamicKeyName_NUMERICAL_KEY_LHO_EXPECTED_TYPES_, 0, FreemarkerTemplateTemplateSequenceModel_class_());
      for (jint i = 0; i < FreemarkerCoreNonStringException_get_STRING_COERCABLE_TYPES_()->size_; i++) {
        (void) IOSObjectArray_Set(FreemarkerCoreDynamicKeyName_NUMERICAL_KEY_LHO_EXPECTED_TYPES_, i + 1, IOSObjectArray_Get(FreemarkerCoreNonStringException_get_STRING_COERCABLE_TYPES_(), i));
      }
    }
    J2OBJC_SET_INITIALIZED(FreemarkerCoreDynamicKeyName)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithFreemarkerCoreExpression:withFreemarkerCoreExpression:", "DynamicKeyName", NULL, 0x0, NULL, NULL },
    { "_evalWithFreemarkerCoreEnvironment:", "_eval", "Lfreemarker.template.TemplateModel;", 0x0, "Lfreemarker.template.TemplateException;", NULL },
    { "dealWithNumericalKeyWithFreemarkerTemplateTemplateModel:withInt:withFreemarkerCoreEnvironment:", "dealWithNumericalKey", "Lfreemarker.template.TemplateModel;", 0x2, "Lfreemarker.template.TemplateException;", NULL },
    { "dealWithStringKeyWithFreemarkerTemplateTemplateModel:withNSString:withFreemarkerCoreEnvironment:", "dealWithStringKey", "Lfreemarker.template.TemplateModel;", 0x2, "Lfreemarker.template.TemplateException;", NULL },
    { "dealWithRangeKeyWithFreemarkerTemplateTemplateModel:withFreemarkerCoreRangeModel:withFreemarkerCoreEnvironment:", "dealWithRangeKey", "Lfreemarker.template.TemplateModel;", 0x2, "Lfreemarker.core.UnexpectedTypeException;Lfreemarker.core.InvalidReferenceException;Lfreemarker.template.TemplateException;", NULL },
    { "emptyResultWithBoolean:", "emptyResult", "Lfreemarker.template.TemplateModel;", 0x2, NULL, NULL },
    { "getCanonicalForm", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getNodeTypeSymbol", NULL, "Ljava.lang.String;", 0x0, NULL, NULL },
    { "isLiteral", NULL, "Z", 0x0, NULL, NULL },
    { "getParameterCount", NULL, "I", 0x0, NULL, NULL },
    { "getParameterValueWithInt:", "getParameterValue", "Ljava.lang.Object;", 0x0, NULL, NULL },
    { "getParameterRoleWithInt:", "getParameterRole", "Lfreemarker.core.ParameterRole;", 0x0, NULL, NULL },
    { "deepCloneWithIdentifierReplaced_innerWithNSString:withFreemarkerCoreExpression:withFreemarkerCoreExpression_ReplacemenetState:", "deepCloneWithIdentifierReplaced_inner", "Lfreemarker.core.Expression;", 0x4, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "keyExpression_", NULL, 0x12, "Lfreemarker.core.Expression;", NULL, NULL,  },
    { "target_", NULL, 0x12, "Lfreemarker.core.Expression;", NULL, NULL,  },
    { "NUMERICAL_KEY_LHO_EXPECTED_TYPES_", NULL, 0xa, "[Ljava.lang.Class;", &FreemarkerCoreDynamicKeyName_NUMERICAL_KEY_LHO_EXPECTED_TYPES_, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerCoreDynamicKeyName = { 2, "DynamicKeyName", "freemarker.core", NULL, 0x10, 13, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerCoreDynamicKeyName;
}

@end


#line 42
void FreemarkerCoreDynamicKeyName_initWithFreemarkerCoreExpression_withFreemarkerCoreExpression_(FreemarkerCoreDynamicKeyName *self, FreemarkerCoreExpression *target, FreemarkerCoreExpression *keyExpression) {
  (void) FreemarkerCoreExpression_init(self);
  
#line 43
  self->target_ = target;
  self->keyExpression_ = keyExpression;
}


#line 42
FreemarkerCoreDynamicKeyName *new_FreemarkerCoreDynamicKeyName_initWithFreemarkerCoreExpression_withFreemarkerCoreExpression_(FreemarkerCoreExpression *target, FreemarkerCoreExpression *keyExpression) {
  FreemarkerCoreDynamicKeyName *self = [FreemarkerCoreDynamicKeyName alloc];
  FreemarkerCoreDynamicKeyName_initWithFreemarkerCoreExpression_withFreemarkerCoreExpression_(self, target, keyExpression);
  return self;
}


#line 91
id<FreemarkerTemplateTemplateModel> FreemarkerCoreDynamicKeyName_dealWithNumericalKeyWithFreemarkerTemplateTemplateModel_withInt_withFreemarkerCoreEnvironment_(FreemarkerCoreDynamicKeyName *self, id<FreemarkerTemplateTemplateModel> targetModel, jint index, FreemarkerCoreEnvironment *env) {
  
#line 96
  if ([FreemarkerTemplateTemplateSequenceModel_class_() isInstance:targetModel]) {
    id<FreemarkerTemplateTemplateSequenceModel> tsm = (id<FreemarkerTemplateTemplateSequenceModel>) check_protocol_cast(targetModel, @protocol(FreemarkerTemplateTemplateSequenceModel));
    jint size;
    @try {
      size = [((id<FreemarkerTemplateTemplateSequenceModel>) nil_chk(tsm)) size];
    }
    @catch (
#line 101
    JavaLangException *e) {
      size = JavaLangInteger_MAX_VALUE;
    }
    return index < size ? [((id<FreemarkerTemplateTemplateSequenceModel>) nil_chk(tsm)) getWithInt:index] : nil;
  }
  
#line 107
  @try {
    
#line 109
    NSString *s = [((FreemarkerCoreExpression *) nil_chk(self->target_)) evalAndCoerceToStringWithFreemarkerCoreEnvironment:env];
    @try {
      return new_FreemarkerTemplateSimpleScalar_initWithNSString_([((NSString *) nil_chk(s)) substring:index endIndex:index + 1]);
    }
    @catch (
#line 112
    JavaLangIndexOutOfBoundsException *e) {
      if (index < 0) {
        @throw new_FreemarkerCore_MiscTemplateException_initWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){
#line 115
          @"Negative index not allowed: ", new_JavaLangInteger_initWithInt_(
#line 116
          index) } count:2 type:NSObject_class_()]);
        }
        if (index >= ((jint) [((NSString *) nil_chk(s)) length])) {
          @throw new_FreemarkerCore_MiscTemplateException_initWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){
#line 120
            @"String index out of range: The index was ", new_JavaLangInteger_initWithInt_(index),
#line 121
            @" (0-based), but the length of the string is only ", new_JavaLangInteger_initWithInt_(((jint) [s length])), @"." } count:5 type:NSObject_class_()]);
          }
          @throw new_JavaLangRuntimeException_initWithNSString_withJavaLangThrowable_(@"Can't explain exception", e);
        }
      }
      @catch (FreemarkerCoreNonStringException *e) {
        
#line 128
        @throw new_FreemarkerCoreUnexpectedTypeException_initWithFreemarkerCoreExpression_withFreemarkerTemplateTemplateModel_withNSString_withIOSClassArray_withNSString_withFreemarkerCoreEnvironment_(self->target_,
#line 129
        targetModel, JreStrcat("$$", @"sequence or ", FreemarkerCoreNonStringException_get_STRING_COERCABLE_TYPES_DESC_()), FreemarkerCoreDynamicKeyName_NUMERICAL_KEY_LHO_EXPECTED_TYPES_,
#line 132
        ([FreemarkerTemplateTemplateHashModel_class_() isInstance:targetModel] ? @"You had a numberical value inside the []. Currently that's only supported for sequences (lists) and strings. To get a Map item with a non-string key, use myMap?api.get(myKey)." :
#line 136
        nil),
#line 137
        env);
      }
    }


#line 141
id<FreemarkerTemplateTemplateModel> FreemarkerCoreDynamicKeyName_dealWithStringKeyWithFreemarkerTemplateTemplateModel_withNSString_withFreemarkerCoreEnvironment_(FreemarkerCoreDynamicKeyName *self, id<FreemarkerTemplateTemplateModel> targetModel, NSString *key, FreemarkerCoreEnvironment *env) {
  
#line 144
  if ([FreemarkerTemplateTemplateHashModel_class_() isInstance:targetModel]) {
    return [((id<FreemarkerTemplateTemplateHashModel>) nil_chk(((id<FreemarkerTemplateTemplateHashModel>) check_protocol_cast(targetModel, @protocol(FreemarkerTemplateTemplateHashModel))))) getWithNSString:key];
  }
  @throw new_FreemarkerCoreNonHashException_initWithFreemarkerCoreExpression_withFreemarkerTemplateTemplateModel_withFreemarkerCoreEnvironment_(self->target_, targetModel, env);
}

id<FreemarkerTemplateTemplateModel> FreemarkerCoreDynamicKeyName_dealWithRangeKeyWithFreemarkerTemplateTemplateModel_withFreemarkerCoreRangeModel_withFreemarkerCoreEnvironment_(FreemarkerCoreDynamicKeyName *self, id<FreemarkerTemplateTemplateModel> targetModel, FreemarkerCoreRangeModel *range, FreemarkerCoreEnvironment *env) {
  
#line 152
  id<FreemarkerTemplateTemplateSequenceModel> targetSeq;
  NSString *targetStr;
  if ([FreemarkerTemplateTemplateSequenceModel_class_() isInstance:targetModel]) {
    targetSeq = (id<FreemarkerTemplateTemplateSequenceModel>) check_protocol_cast(targetModel, @protocol(FreemarkerTemplateTemplateSequenceModel));
    targetStr = nil;
  }
  else {
    
#line 158
    targetSeq = nil;
    @try {
      targetStr = [((FreemarkerCoreExpression *) nil_chk(self->target_)) evalAndCoerceToStringWithFreemarkerCoreEnvironment:env];
    }
    @catch (
#line 161
    FreemarkerCoreNonStringException *e) {
      @throw new_FreemarkerCoreUnexpectedTypeException_initWithFreemarkerCoreExpression_withFreemarkerTemplateTemplateModel_withNSString_withIOSClassArray_withFreemarkerCoreEnvironment_(self->target_,
#line 163
      [((FreemarkerCoreExpression *) nil_chk(self->target_)) evalWithFreemarkerCoreEnvironment:env], JreStrcat("$$", @"sequence or ", FreemarkerCoreNonStringException_get_STRING_COERCABLE_TYPES_DESC_()), FreemarkerCoreDynamicKeyName_NUMERICAL_KEY_LHO_EXPECTED_TYPES_,
#line 165
      env);
    }
  }
  
#line 169
  jint size = [((FreemarkerCoreRangeModel *) nil_chk(range)) size];
  jboolean rightUnbounded = [range isRightUnbounded];
  jboolean rightAdaptive = [range isRightAdaptive];
  
#line 175
  if (!rightUnbounded && size == 0) {
    return FreemarkerCoreDynamicKeyName_emptyResultWithBoolean_(self, targetSeq != nil);
  }
  
#line 179
  jint firstIdx = [range getBegining];
  if (firstIdx < 0) {
    @throw new_FreemarkerCore_MiscTemplateException_initWithFreemarkerCoreExpression_withNSObjectArray_(self->keyExpression_, [IOSObjectArray newArrayWithObjects:(id[]){
#line 182
      @"Negative range start index (", new_JavaLangInteger_initWithInt_(firstIdx),
#line 183
      @") isn't allowed for a range used for slicing." } count:3 type:NSObject_class_()]);
    }
    
#line 186
    jint targetSize = targetStr != nil ? ((jint) [targetStr length]) : [((id<FreemarkerTemplateTemplateSequenceModel>) nil_chk(targetSeq)) size];
    jint step = [range getStep];
    
#line 194
    if (rightAdaptive && step == 1 ? firstIdx > targetSize : firstIdx >= targetSize) {
      @throw new_FreemarkerCore_MiscTemplateException_initWithFreemarkerCoreExpression_withNSObjectArray_(self->keyExpression_, [IOSObjectArray newArrayWithObjects:(id[]){
#line 196
        @"Range start index ", new_JavaLangInteger_initWithInt_(firstIdx), @" is out of bounds, because the sliced ",
#line 197
        (targetStr != nil ? @"string" : @"sequence"),
#line 198
        @" has only ", new_JavaLangInteger_initWithInt_(targetSize), @" ", (targetStr != nil ? @"character(s)" : @"element(s)"),
#line 199
        @". ", @"(Note that indices are 0-based)." } count:10 type:NSObject_class_()]);
      }
      
#line 202
      jint resultSize;
      if (!rightUnbounded) {
        jint lastIdx = firstIdx + (size - 1) * step;
        if (lastIdx < 0) {
          if (!rightAdaptive) {
            @throw new_FreemarkerCore_MiscTemplateException_initWithFreemarkerCoreExpression_withNSObjectArray_(self->keyExpression_, [IOSObjectArray newArrayWithObjects:(id[]){
#line 208
              @"Negative range end index (", new_JavaLangInteger_initWithInt_(lastIdx),
#line 209
              @") isn't allowed for a range used for slicing." } count:3 type:NSObject_class_()]);
            }
            else {
              
#line 211
              resultSize = firstIdx + 1;
            }
          }
          else
#line 213
          if (lastIdx >= targetSize) {
            if (!rightAdaptive) {
              @throw new_FreemarkerCore_MiscTemplateException_initWithFreemarkerCoreExpression_withNSObjectArray_(self->keyExpression_, [IOSObjectArray newArrayWithObjects:(id[]){
#line 216
                @"Range end index ", new_JavaLangInteger_initWithInt_(lastIdx), @" is out of bounds, because the sliced ",
#line 217
                (targetStr != nil ? @"string" : @"sequence"),
#line 218
                @" has only ", new_JavaLangInteger_initWithInt_(targetSize), @" ", (targetStr != nil ? @"character(s)" : @"element(s)"),
#line 219
                @". (Note that indices are 0-based)." } count:9 type:NSObject_class_()]);
              }
              else {
                
#line 221
                resultSize = JavaLangMath_absWithInt_(targetSize - firstIdx);
              }
            }
            else {
              
#line 224
              resultSize = size;
            }
          }
          else {
            
#line 227
            resultSize = targetSize - firstIdx;
          }
          
#line 230
          if (resultSize == 0) {
            return FreemarkerCoreDynamicKeyName_emptyResultWithBoolean_(self, targetSeq != nil);
          }
          if (targetSeq != nil) {
            JavaUtilArrayList *list = new_JavaUtilArrayList_initWithInt_(resultSize);
            jint srcIdx = firstIdx;
            for (jint i = 0; i < resultSize; i++) {
              [list addWithId:[targetSeq getWithInt:srcIdx]];
              srcIdx += step;
            }
            
#line 241
            return new_FreemarkerTemplateSimpleSequence_initWithJavaUtilCollection_withFreemarkerTemplateObjectWrapper_(list, nil);
          }
          else {
            
#line 243
            jint exclEndIdx;
            if (step < 0 && resultSize > 1) {
              if (!([range isAffactedByStringSlicingBug] && resultSize == 2)) {
                @throw new_FreemarkerCore_MiscTemplateException_initWithFreemarkerCoreExpression_withNSObjectArray_(self->keyExpression_, [IOSObjectArray newArrayWithObjects:(id[]){ @"Decreasing ranges aren't allowed for slicing strings (as it would give reversed text). The index range was: first = ", new_JavaLangInteger_initWithInt_(
#line 250
                firstIdx), @", last = ", new_JavaLangInteger_initWithInt_(firstIdx + (resultSize - 1) * step) } count:4 type:NSObject_class_()]);
              }
              else {
                
#line 255
                exclEndIdx = firstIdx;
              }
            }
            else {
              
#line 258
              exclEndIdx = firstIdx + resultSize;
            }
            
#line 261
            return new_FreemarkerTemplateSimpleScalar_initWithNSString_([((NSString *) nil_chk(targetStr)) substring:firstIdx endIndex:exclEndIdx]);
          }
        }


#line 265
id<FreemarkerTemplateTemplateModel> FreemarkerCoreDynamicKeyName_emptyResultWithBoolean_(FreemarkerCoreDynamicKeyName *self, jboolean seq) {
  return seq ? ((id)
#line 267
  (FreemarkerTemplate_TemplateAPI_getTemplateLanguageVersionAsIntWithFreemarkerCoreTemplateObject_(self) < FreemarkerTemplate_TemplateAPI_get_VERSION_INT_2_3_21_() ? new_FreemarkerTemplateSimpleSequence_initWithJavaUtilCollection_withFreemarkerTemplateObjectWrapper_(JavaUtilCollections_get_EMPTY_LIST_(),
#line 268
  nil) : ((id) FreemarkerTemplateUtilityConstants_get_EMPTY_SEQUENCE_()))) : ((id) FreemarkerTemplateTemplateScalarModel_get_EMPTY_STRING_());
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreDynamicKeyName)
