//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/template/utility/ClassUtil.java
//

#ifndef _FreemarkerTemplateUtilityClassUtil_H_
#define _FreemarkerTemplateUtilityClassUtil_H_

#include "J2ObjC_header.h"

@class IOSClass;
@protocol FreemarkerTemplateTemplateModel;

/**
 */
@interface FreemarkerTemplateUtilityClassUtil : NSObject

#pragma mark Public

/**
 @brief The exact reverse of #primitiveClassToBoxingClass .
 @since 2.3.21
 */
+ (IOSClass *)boxingClassToPrimitiveClassWithIOSClass:(IOSClass *)boxingClass;

/**
 @brief Similar to Class#forName(java.lang.String) , but attempts to load through the thread context class loader.
 Only if thread context class loader is inaccessible, or it can't find the class will it attempt to fall back to the class loader that loads the FreeMarker classes.
 */
+ (IOSClass *)forNameWithNSString:(NSString *)className_;

/**
 @brief Returns the type description of a value with FTL terms (not plain class name), as it should be used in type-related error messages and for debugging purposes.
 The exact format is not specified and might change over time, but currently it's something like <code>"string (wrapper: f.t.SimpleScalar)"</code> or <code>"sequence+hash+string (ArrayList wrapped into f.e.b.CollectionModel)"</code> .
 @since 2.3.20
 */
+ (NSString *)getFTLTypeDescriptionWithFreemarkerTemplateTemplateModel:(id<FreemarkerTemplateTemplateModel>)tm;

/**
 @brief Same as #getShortClassName(Class,boolean) getShortClassName(pClass, false) .
 @since 2.3.20
 */
+ (NSString *)getShortClassNameWithIOSClass:(IOSClass *)pClass;

/**
 @brief Returns a class name without "java.lang." and "java.util." prefix, also shows array types in a format like <code>int[]</code> ; useful for printing class names in error messages.
 @param pClass can be <code>null</code> , in which case the method returns <code>null</code> .
 @param shortenFreeMarkerClasses if <code>true</code> , it will also shorten FreeMarker class names. The exact rules aren't specified and might change over time, but right now, <code>freemarker.ext.beans.NumberModel</code> for example becomes to <code>f.e.b.NumberModel</code> .
 @since 2.3.20
 */
+ (NSString *)getShortClassNameWithIOSClass:(IOSClass *)pClass
                                withBoolean:(jboolean)shortenFreeMarkerClasses;

/**
 @brief Same as #getShortClassNameOfObject(Object,boolean) getShortClassNameOfObject(pClass, false) .
 @since 2.3.20
 */
+ (NSString *)getShortClassNameOfObjectWithId:(id)obj;

/**
 @brief #getShortClassName(Class,boolean) called with <code>object.getClass()</code> , but returns the fictional class name <code>Null</code> for a <code>null</code> value.
 @since 2.3.20
 */
+ (NSString *)getShortClassNameOfObjectWithId:(id)obj
                                  withBoolean:(jboolean)shortenFreeMarkerClasses;

/**
 @brief Tells if a type is numerical; works both for primitive types and classes.
 @param type can't be <code>null</code>
 @since 2.3.21
 */
+ (jboolean)isNumericalWithIOSClass:(IOSClass *)type;

/**
 @brief Gets the wrapper class for a primitive class, like Integer for <code>int</code> , also returns Void for <code>void</code> .
 @param primitiveClass A Class like <code>int.type</code> , <code>boolean.type</code> , etc. If it's not a primitive class, or it's <code>null</code> , then the parameter value is returned as is. Note that performance-wise the method assumes that it's a primitive class.
 @since 2.3.21
 */
+ (IOSClass *)primitiveClassToBoxingClassWithIOSClass:(IOSClass *)primitiveClass;

@end

J2OBJC_EMPTY_STATIC_INIT(FreemarkerTemplateUtilityClassUtil)

FOUNDATION_EXPORT IOSClass *FreemarkerTemplateUtilityClassUtil_forNameWithNSString_(NSString *className_);

FOUNDATION_EXPORT NSString *FreemarkerTemplateUtilityClassUtil_getShortClassNameWithIOSClass_(IOSClass *pClass);

FOUNDATION_EXPORT NSString *FreemarkerTemplateUtilityClassUtil_getShortClassNameWithIOSClass_withBoolean_(IOSClass *pClass, jboolean shortenFreeMarkerClasses);

FOUNDATION_EXPORT NSString *FreemarkerTemplateUtilityClassUtil_getShortClassNameOfObjectWithId_(id obj);

FOUNDATION_EXPORT NSString *FreemarkerTemplateUtilityClassUtil_getShortClassNameOfObjectWithId_withBoolean_(id obj, jboolean shortenFreeMarkerClasses);

FOUNDATION_EXPORT NSString *FreemarkerTemplateUtilityClassUtil_getFTLTypeDescriptionWithFreemarkerTemplateTemplateModel_(id<FreemarkerTemplateTemplateModel> tm);

FOUNDATION_EXPORT IOSClass *FreemarkerTemplateUtilityClassUtil_primitiveClassToBoxingClassWithIOSClass_(IOSClass *primitiveClass);

FOUNDATION_EXPORT IOSClass *FreemarkerTemplateUtilityClassUtil_boxingClassToPrimitiveClassWithIOSClass_(IOSClass *boxingClass);

FOUNDATION_EXPORT jboolean FreemarkerTemplateUtilityClassUtil_isNumericalWithIOSClass_(IOSClass *type);

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerTemplateUtilityClassUtil)

#endif // _FreemarkerTemplateUtilityClassUtil_H_
