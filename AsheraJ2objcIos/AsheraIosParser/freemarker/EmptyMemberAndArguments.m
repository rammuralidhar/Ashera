//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/ext/beans/EmptyMemberAndArguments.java
//


#include "EmptyCallableMemberDescriptor.h"
#include "EmptyMemberAndArguments.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "MaybeEmptyMemberAndArguments.h"
#include "_DelayedOrdinal.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"

#line 0 "/Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/ext/beans/EmptyMemberAndArguments.java"

@interface FreemarkerExtBeansEmptyMemberAndArguments () {
 @public
  id errorDescription_;
  jboolean numberOfArgumentsWrong_;
  IOSObjectArray *unwrappedArguments_;
}

- (instancetype)initWithId:(id)errorDescription
               withBoolean:(jboolean)numberOfArgumentsWrong
         withNSObjectArray:(IOSObjectArray *)unwrappedArguments;

@end

J2OBJC_FIELD_SETTER(FreemarkerExtBeansEmptyMemberAndArguments, errorDescription_, id)
J2OBJC_FIELD_SETTER(FreemarkerExtBeansEmptyMemberAndArguments, unwrappedArguments_, IOSObjectArray *)

__attribute__((unused)) static void FreemarkerExtBeansEmptyMemberAndArguments_initWithId_withBoolean_withNSObjectArray_(FreemarkerExtBeansEmptyMemberAndArguments *self, id errorDescription, jboolean numberOfArgumentsWrong, IOSObjectArray *unwrappedArguments);

__attribute__((unused)) static FreemarkerExtBeansEmptyMemberAndArguments *new_FreemarkerExtBeansEmptyMemberAndArguments_initWithId_withBoolean_withNSObjectArray_(id errorDescription, jboolean numberOfArgumentsWrong, IOSObjectArray *unwrappedArguments) NS_RETURNS_RETAINED;

J2OBJC_INITIALIZED_DEFN(FreemarkerExtBeansEmptyMemberAndArguments)

FreemarkerExtBeansEmptyMemberAndArguments *FreemarkerExtBeansEmptyMemberAndArguments_WRONG_NUMBER_OF_ARGUMENTS_;

@implementation FreemarkerExtBeansEmptyMemberAndArguments


#line 35
- (instancetype)initWithId:(id)errorDescription
               withBoolean:(jboolean)numberOfArgumentsWrong
         withNSObjectArray:(IOSObjectArray *)unwrappedArguments {
  FreemarkerExtBeansEmptyMemberAndArguments_initWithId_withBoolean_withNSObjectArray_(self, errorDescription, numberOfArgumentsWrong, unwrappedArguments);
  return self;
}

+ (FreemarkerExtBeansEmptyMemberAndArguments *)noCompatibleOverloadWithInt:(jint)unwrappableIndex {
  return FreemarkerExtBeansEmptyMemberAndArguments_noCompatibleOverloadWithInt_(unwrappableIndex);
}


#line 50
+ (FreemarkerExtBeansEmptyMemberAndArguments *)noCompatibleOverloadWithNSObjectArray:(IOSObjectArray *)unwrappedArgs {
  return FreemarkerExtBeansEmptyMemberAndArguments_noCompatibleOverloadWithNSObjectArray_(unwrappedArgs);
}


#line 57
+ (FreemarkerExtBeansEmptyMemberAndArguments *)ambiguousWithNSObjectArray:(IOSObjectArray *)unwrappedArgs {
  return FreemarkerExtBeansEmptyMemberAndArguments_ambiguousWithNSObjectArray_(unwrappedArgs);
}


#line 64
+ (FreemarkerExtBeansMaybeEmptyMemberAndArguments *)fromWithFreemarkerExtBeansEmptyCallableMemberDescriptor:(FreemarkerExtBeansEmptyCallableMemberDescriptor *)emtpyMemberDesc
                                                                                          withNSObjectArray:(IOSObjectArray *)unwrappedArgs {
  return FreemarkerExtBeansEmptyMemberAndArguments_fromWithFreemarkerExtBeansEmptyCallableMemberDescriptor_withNSObjectArray_(emtpyMemberDesc, unwrappedArgs);
}


#line 75
- (id)getErrorDescription {
  return errorDescription_;
}


#line 82
- (IOSObjectArray *)getUnwrappedArguments {
  return unwrappedArguments_;
}

- (jboolean)isNumberOfArgumentsWrong {
  return numberOfArgumentsWrong_;
}

+ (void)initialize {
  if (self == [FreemarkerExtBeansEmptyMemberAndArguments class]) {
    FreemarkerExtBeansEmptyMemberAndArguments_WRONG_NUMBER_OF_ARGUMENTS_ = new_FreemarkerExtBeansEmptyMemberAndArguments_initWithId_withBoolean_withNSObjectArray_(
#line 29
    @"No compatible overloaded variation was found; wrong number of arguments.", YES, nil);
    J2OBJC_SET_INITIALIZED(FreemarkerExtBeansEmptyMemberAndArguments)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithId:withBoolean:withNSObjectArray:", "EmptyMemberAndArguments", NULL, 0x2, NULL, NULL },
    { "noCompatibleOverloadWithInt:", "noCompatibleOverload", "Lfreemarker.ext.beans.EmptyMemberAndArguments;", 0x8, NULL, NULL },
    { "noCompatibleOverloadWithNSObjectArray:", "noCompatibleOverload", "Lfreemarker.ext.beans.EmptyMemberAndArguments;", 0x8, NULL, NULL },
    { "ambiguousWithNSObjectArray:", "ambiguous", "Lfreemarker.ext.beans.EmptyMemberAndArguments;", 0x8, NULL, NULL },
    { "fromWithFreemarkerExtBeansEmptyCallableMemberDescriptor:withNSObjectArray:", "from", "Lfreemarker.ext.beans.MaybeEmptyMemberAndArguments;", 0x8, NULL, NULL },
    { "getErrorDescription", NULL, "Ljava.lang.Object;", 0x0, NULL, NULL },
    { "getUnwrappedArguments", NULL, "[Ljava.lang.Object;", 0x0, NULL, NULL },
    { "isNumberOfArgumentsWrong", NULL, "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "WRONG_NUMBER_OF_ARGUMENTS_", NULL, 0x18, "Lfreemarker.ext.beans.EmptyMemberAndArguments;", &FreemarkerExtBeansEmptyMemberAndArguments_WRONG_NUMBER_OF_ARGUMENTS_, NULL,  },
    { "errorDescription_", NULL, 0x12, "Ljava.lang.Object;", NULL, NULL,  },
    { "numberOfArgumentsWrong_", NULL, 0x12, "Z", NULL, NULL,  },
    { "unwrappedArguments_", NULL, 0x12, "[Ljava.lang.Object;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerExtBeansEmptyMemberAndArguments = { 2, "EmptyMemberAndArguments", "freemarker.ext.beans", NULL, 0x10, 8, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerExtBeansEmptyMemberAndArguments;
}

@end


#line 35
void FreemarkerExtBeansEmptyMemberAndArguments_initWithId_withBoolean_withNSObjectArray_(FreemarkerExtBeansEmptyMemberAndArguments *self, id errorDescription, jboolean numberOfArgumentsWrong, IOSObjectArray *unwrappedArguments) {
  (void) FreemarkerExtBeansMaybeEmptyMemberAndArguments_init(self);
  self->errorDescription_ = errorDescription;
  self->numberOfArgumentsWrong_ = numberOfArgumentsWrong;
  self->unwrappedArguments_ = unwrappedArguments;
}


#line 35
FreemarkerExtBeansEmptyMemberAndArguments *new_FreemarkerExtBeansEmptyMemberAndArguments_initWithId_withBoolean_withNSObjectArray_(id errorDescription, jboolean numberOfArgumentsWrong, IOSObjectArray *unwrappedArguments) {
  FreemarkerExtBeansEmptyMemberAndArguments *self = [FreemarkerExtBeansEmptyMemberAndArguments alloc];
  FreemarkerExtBeansEmptyMemberAndArguments_initWithId_withBoolean_withNSObjectArray_(self, errorDescription, numberOfArgumentsWrong, unwrappedArguments);
  return self;
}


#line 42
FreemarkerExtBeansEmptyMemberAndArguments *FreemarkerExtBeansEmptyMemberAndArguments_noCompatibleOverloadWithInt_(jint unwrappableIndex) {
  FreemarkerExtBeansEmptyMemberAndArguments_initialize();
  
#line 43
  return new_FreemarkerExtBeansEmptyMemberAndArguments_initWithId_withBoolean_withNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){
#line 44
    @"No compatible overloaded variation was found; can't convert (unwrap) the ", new_FreemarkerCore_DelayedOrdinal_initWithId_(new_JavaLangInteger_initWithInt_(
#line 45
    unwrappableIndex)), @" argument to the desired Java type." } count:3 type:NSObject_class_()],
#line 46
    NO,
#line 47
    nil);
  }


#line 50
FreemarkerExtBeansEmptyMemberAndArguments *FreemarkerExtBeansEmptyMemberAndArguments_noCompatibleOverloadWithNSObjectArray_(IOSObjectArray *unwrappedArgs) {
  FreemarkerExtBeansEmptyMemberAndArguments_initialize();
  
#line 51
  return new_FreemarkerExtBeansEmptyMemberAndArguments_initWithId_withBoolean_withNSObjectArray_(
#line 52
  @"No compatible overloaded variation was found; declared parameter types and argument value types mismatch.",
#line 53
  NO,
#line 54
  unwrappedArgs);
}


#line 57
FreemarkerExtBeansEmptyMemberAndArguments *FreemarkerExtBeansEmptyMemberAndArguments_ambiguousWithNSObjectArray_(IOSObjectArray *unwrappedArgs) {
  FreemarkerExtBeansEmptyMemberAndArguments_initialize();
  
#line 58
  return new_FreemarkerExtBeansEmptyMemberAndArguments_initWithId_withBoolean_withNSObjectArray_(
#line 59
  @"Multiple compatible overloaded variations were found with the same priority.",
#line 60
  NO,
#line 61
  unwrappedArgs);
}


#line 64
FreemarkerExtBeansMaybeEmptyMemberAndArguments *FreemarkerExtBeansEmptyMemberAndArguments_fromWithFreemarkerExtBeansEmptyCallableMemberDescriptor_withNSObjectArray_(FreemarkerExtBeansEmptyCallableMemberDescriptor *emtpyMemberDesc, IOSObjectArray *unwrappedArgs) {
  FreemarkerExtBeansEmptyMemberAndArguments_initialize();
  if (emtpyMemberDesc == FreemarkerExtBeansEmptyCallableMemberDescriptor_get_NO_SUCH_METHOD_()) {
    return FreemarkerExtBeansEmptyMemberAndArguments_noCompatibleOverloadWithNSObjectArray_(unwrappedArgs);
  }
  else
#line 68
  if (emtpyMemberDesc == FreemarkerExtBeansEmptyCallableMemberDescriptor_get_AMBIGUOUS_METHOD_()) {
    return FreemarkerExtBeansEmptyMemberAndArguments_ambiguousWithNSObjectArray_(unwrappedArgs);
  }
  else {
    
#line 71
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@", @"Unrecognized constant: ", emtpyMemberDesc));
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerExtBeansEmptyMemberAndArguments)
