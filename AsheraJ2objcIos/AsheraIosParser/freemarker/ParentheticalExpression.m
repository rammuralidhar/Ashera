//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/ParentheticalExpression.java
//


#include "Environment.h"
#include "Expression.h"
#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "ParameterRole.h"
#include "ParentheticalExpression.h"
#include "TemplateException.h"
#include "TemplateModel.h"
#include "java/lang/IndexOutOfBoundsException.h"

#line 0 "/Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/ParentheticalExpression.java"

@interface FreemarkerCoreParentheticalExpression () {
 @public
  FreemarkerCoreExpression *nested_;
}

@end

J2OBJC_FIELD_SETTER(FreemarkerCoreParentheticalExpression, nested_, FreemarkerCoreExpression *)


#line 22
@implementation FreemarkerCoreParentheticalExpression


#line 26
- (instancetype)initWithFreemarkerCoreExpression:(FreemarkerCoreExpression *)nested {
  FreemarkerCoreParentheticalExpression_initWithFreemarkerCoreExpression_(self, nested);
  return self;
}


#line 30
- (jboolean)evalToBooleanWithFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env {
  return [((FreemarkerCoreExpression *) nil_chk(nested_)) evalToBooleanWithFreemarkerCoreEnvironment:env];
}

- (NSString *)getCanonicalForm {
  return JreStrcat("C$C", '(', [((FreemarkerCoreExpression *) nil_chk(nested_)) getCanonicalForm], ')');
}

- (NSString *)getNodeTypeSymbol {
  return @"(...)";
}

- (id<FreemarkerTemplateTemplateModel>)_evalWithFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env {
  
#line 44
  return [((FreemarkerCoreExpression *) nil_chk(nested_)) evalWithFreemarkerCoreEnvironment:env];
}


#line 47
- (jboolean)isLiteral {
  return [((FreemarkerCoreExpression *) nil_chk(nested_)) isLiteral];
}

- (FreemarkerCoreExpression *)getNestedExpression {
  return nested_;
}

- (FreemarkerCoreExpression *)deepCloneWithIdentifierReplaced_innerWithNSString:(NSString *)replacedIdentifier
                                                   withFreemarkerCoreExpression:(FreemarkerCoreExpression *)replacement
                                 withFreemarkerCoreExpression_ReplacemenetState:(FreemarkerCoreExpression_ReplacemenetState *)replacementState {
  
#line 57
  return new_FreemarkerCoreParentheticalExpression_initWithFreemarkerCoreExpression_(
#line 58
  [((FreemarkerCoreExpression *) nil_chk(nested_)) deepCloneWithIdentifierReplacedWithNSString:replacedIdentifier withFreemarkerCoreExpression:replacement withFreemarkerCoreExpression_ReplacemenetState:replacementState]);
}


#line 61
- (jint)getParameterCount {
  return 1;
}

- (id)getParameterValueWithInt:(jint)idx {
  if (idx != 0) @throw new_JavaLangIndexOutOfBoundsException_init();
  return nested_;
}

- (FreemarkerCoreParameterRole *)getParameterRoleWithInt:(jint)idx {
  if (idx != 0) @throw new_JavaLangIndexOutOfBoundsException_init();
  return FreemarkerCoreParameterRole_get_ENCLOSED_OPERAND_();
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithFreemarkerCoreExpression:", "ParentheticalExpression", NULL, 0x0, NULL, NULL },
    { "evalToBooleanWithFreemarkerCoreEnvironment:", "evalToBoolean", "Z", 0x0, "Lfreemarker.template.TemplateException;", NULL },
    { "getCanonicalForm", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getNodeTypeSymbol", NULL, "Ljava.lang.String;", 0x0, NULL, NULL },
    { "_evalWithFreemarkerCoreEnvironment:", "_eval", "Lfreemarker.template.TemplateModel;", 0x0, "Lfreemarker.template.TemplateException;", NULL },
    { "isLiteral", NULL, "Z", 0x1, NULL, NULL },
    { "getNestedExpression", NULL, "Lfreemarker.core.Expression;", 0x0, NULL, NULL },
    { "deepCloneWithIdentifierReplaced_innerWithNSString:withFreemarkerCoreExpression:withFreemarkerCoreExpression_ReplacemenetState:", "deepCloneWithIdentifierReplaced_inner", "Lfreemarker.core.Expression;", 0x4, NULL, NULL },
    { "getParameterCount", NULL, "I", 0x0, NULL, NULL },
    { "getParameterValueWithInt:", "getParameterValue", "Ljava.lang.Object;", 0x0, NULL, NULL },
    { "getParameterRoleWithInt:", "getParameterRole", "Lfreemarker.core.ParameterRole;", 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "nested_", NULL, 0x12, "Lfreemarker.core.Expression;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerCoreParentheticalExpression = { 2, "ParentheticalExpression", "freemarker.core", NULL, 0x10, 11, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerCoreParentheticalExpression;
}

@end


#line 26
void FreemarkerCoreParentheticalExpression_initWithFreemarkerCoreExpression_(FreemarkerCoreParentheticalExpression *self, FreemarkerCoreExpression *nested) {
  (void) FreemarkerCoreExpression_init(self);
  
#line 27
  self->nested_ = nested;
}


#line 26
FreemarkerCoreParentheticalExpression *new_FreemarkerCoreParentheticalExpression_initWithFreemarkerCoreExpression_(FreemarkerCoreExpression *nested) {
  FreemarkerCoreParentheticalExpression *self = [FreemarkerCoreParentheticalExpression alloc];
  FreemarkerCoreParentheticalExpression_initWithFreemarkerCoreExpression_(self, nested);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreParentheticalExpression)
