//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/ext/beans/ArgumentTypes.java
//


#include "ArgumentTypes.h"
#include "BeansWrapper.h"
#include "BugException.h"
#include "CallableMemberDescriptor.h"
#include "CharacterOrString.h"
#include "ClassUtil.h"
#include "EmptyCallableMemberDescriptor.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "MaybeEmptyCallableMemberDescriptor.h"
#include "OverloadedNumberUtil.h"
#include "ReflectionCallableMemberDescriptor.h"
#include "TemplateModel.h"
#include "TemplateModelException.h"
#include "_MethodUtil.h"
#include "java/lang/Boolean.h"
#include "java/lang/Byte.h"
#include "java/lang/Character.h"
#include "java/lang/Double.h"
#include "java/lang/Float.h"
#include "java/lang/IllegalAccessException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/InstantiationException.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/Short.h"
#include "java/lang/reflect/InvocationTargetException.h"
#include "java/math/BigDecimal.h"
#include "java/util/Collection.h"
#include "java/util/Iterator.h"
#include "java/util/LinkedList.h"
#include "java/util/List.h"

#line 0 "/Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/ext/beans/ArgumentTypes.java"

#define FreemarkerExtBeansArgumentTypes_CONVERSION_DIFFICULTY_REFLECTION 0
#define FreemarkerExtBeansArgumentTypes_CONVERSION_DIFFICULTY_FREEMARKER 1
#define FreemarkerExtBeansArgumentTypes_CONVERSION_DIFFICULTY_IMPOSSIBLE 2

@interface FreemarkerExtBeansArgumentTypes () {
 @public
  /**
   @brief The types of the arguments; for varags this contains the exploded list (not the array).
   */
  IOSObjectArray *types_;
  jboolean bugfixed_;
}

/**
 @brief Trivial comparison of type specificities; unaware of numerical conversions.
 @return Less-than-0, 0, or more-than-0 depending on which side is more specific. The absolute value is 1 if the difference is only in primitive VS non-primitive, more otherwise.
 */
- (jint)compareParameterListPreferability_cmpTypeSpecifictyWithIOSClass:(IOSClass *)paramType1
                                                           withIOSClass:(IOSClass *)paramType2;

+ (IOSClass *)getParamTypeWithIOSClassArray:(IOSObjectArray *)paramTypes
                                    withInt:(jint)paramTypesLen
                                    withInt:(jint)i
                                withBoolean:(jboolean)varArg;

/**
 @brief Returns if the supplied method is applicable to actual parameter types represented by this ArgumentTypes object, also tells how difficult that conversion is.
 @return One of the <tt>CONVERSION_DIFFICULTY_...</tt> constants.
 */
- (jint)isApplicableWithFreemarkerExtBeansReflectionCallableMemberDescriptor:(FreemarkerExtBeansReflectionCallableMemberDescriptor *)memberDesc
                                                                 withBoolean:(jboolean)varArg;

/**
 @brief Determines whether a type is convertible to another type via method invocation conversion, and if so, what kind of conversion is needed.
 It treates the object type counterpart of primitive types as if they were the primitive types (that is, a Boolean actual parameter type matches boolean primitive formal type). This behavior is because this method is used to determine applicable methods for an actual parameter list, and primitive types are represented by their object duals in reflective method calls.
 @param formal the parameter type to which the actual parameter type should be convertible; possibly a primitive type
 @param actual the argument type; not a primitive type, maybe Null .
 @return One of the <tt>CONVERSION_DIFFICULTY_...</tt> constants.
 */
- (jint)isMethodInvocationConvertibleWithIOSClass:(IOSClass *)formal
                                     withIOSClass:(IOSClass *)actual;

@end

J2OBJC_FIELD_SETTER(FreemarkerExtBeansArgumentTypes, types_, IOSObjectArray *)

J2OBJC_STATIC_FIELD_GETTER(FreemarkerExtBeansArgumentTypes, CONVERSION_DIFFICULTY_REFLECTION, jint)

J2OBJC_STATIC_FIELD_GETTER(FreemarkerExtBeansArgumentTypes, CONVERSION_DIFFICULTY_FREEMARKER, jint)

J2OBJC_STATIC_FIELD_GETTER(FreemarkerExtBeansArgumentTypes, CONVERSION_DIFFICULTY_IMPOSSIBLE, jint)

__attribute__((unused)) static jint FreemarkerExtBeansArgumentTypes_compareParameterListPreferability_cmpTypeSpecifictyWithIOSClass_withIOSClass_(FreemarkerExtBeansArgumentTypes *self, IOSClass *paramType1, IOSClass *paramType2);

__attribute__((unused)) static IOSClass *FreemarkerExtBeansArgumentTypes_getParamTypeWithIOSClassArray_withInt_withInt_withBoolean_(IOSObjectArray *paramTypes, jint paramTypesLen, jint i, jboolean varArg);

__attribute__((unused)) static jint FreemarkerExtBeansArgumentTypes_isApplicableWithFreemarkerExtBeansReflectionCallableMemberDescriptor_withBoolean_(FreemarkerExtBeansArgumentTypes *self, FreemarkerExtBeansReflectionCallableMemberDescriptor *memberDesc, jboolean varArg);

__attribute__((unused)) static jint FreemarkerExtBeansArgumentTypes_isMethodInvocationConvertibleWithIOSClass_withIOSClass_(FreemarkerExtBeansArgumentTypes *self, IOSClass *formal, IOSClass *actual);

/**
 @brief Symbolizes the class of null (it's missing from Java).
 */
@interface FreemarkerExtBeansArgumentTypes_Null : NSObject

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(FreemarkerExtBeansArgumentTypes_Null)

__attribute__((unused)) static void FreemarkerExtBeansArgumentTypes_Null_init(FreemarkerExtBeansArgumentTypes_Null *self);

__attribute__((unused)) static FreemarkerExtBeansArgumentTypes_Null *new_FreemarkerExtBeansArgumentTypes_Null_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerExtBeansArgumentTypes_Null)

/**
 @brief Used instead of ReflectionCallableMemberDescriptor when the method is only applicable ( #isApplicable ) with conversion that Java reflection won't do.
 It delegates to a ReflectionCallableMemberDescriptor , but it adds the necessary conversions to the invocation methods.
 */
@interface FreemarkerExtBeansArgumentTypes_SpecialConversionCallableMemberDescriptor : FreemarkerExtBeansCallableMemberDescriptor {
 @public
  FreemarkerExtBeansReflectionCallableMemberDescriptor *callableMemberDesc_;
}

- (instancetype)initWithFreemarkerExtBeansReflectionCallableMemberDescriptor:(FreemarkerExtBeansReflectionCallableMemberDescriptor *)callableMemberDesc;

- (id<FreemarkerTemplateTemplateModel>)invokeMethodWithFreemarkerExtBeansBeansWrapper:(FreemarkerExtBeansBeansWrapper *)bw
                                                                               withId:(id)obj
                                                                    withNSObjectArray:(IOSObjectArray *)args;

- (id)invokeConstructorWithFreemarkerExtBeansBeansWrapper:(FreemarkerExtBeansBeansWrapper *)bw
                                        withNSObjectArray:(IOSObjectArray *)args;

- (NSString *)getDeclaration;

- (jboolean)isConstructor;

- (jboolean)isStatic;

- (jboolean)isVarargs;

- (IOSObjectArray *)getParamTypes;

- (NSString *)getName;

- (void)convertArgsToReflectionCompatibleWithFreemarkerExtBeansBeansWrapper:(FreemarkerExtBeansBeansWrapper *)bw
                                                          withNSObjectArray:(IOSObjectArray *)args;

@end

J2OBJC_EMPTY_STATIC_INIT(FreemarkerExtBeansArgumentTypes_SpecialConversionCallableMemberDescriptor)

J2OBJC_FIELD_SETTER(FreemarkerExtBeansArgumentTypes_SpecialConversionCallableMemberDescriptor, callableMemberDesc_, FreemarkerExtBeansReflectionCallableMemberDescriptor *)

__attribute__((unused)) static void FreemarkerExtBeansArgumentTypes_SpecialConversionCallableMemberDescriptor_initWithFreemarkerExtBeansReflectionCallableMemberDescriptor_(FreemarkerExtBeansArgumentTypes_SpecialConversionCallableMemberDescriptor *self, FreemarkerExtBeansReflectionCallableMemberDescriptor *callableMemberDesc);

__attribute__((unused)) static FreemarkerExtBeansArgumentTypes_SpecialConversionCallableMemberDescriptor *new_FreemarkerExtBeansArgumentTypes_SpecialConversionCallableMemberDescriptor_initWithFreemarkerExtBeansReflectionCallableMemberDescriptor_(FreemarkerExtBeansReflectionCallableMemberDescriptor *callableMemberDesc) NS_RETURNS_RETAINED;

__attribute__((unused)) static void FreemarkerExtBeansArgumentTypes_SpecialConversionCallableMemberDescriptor_convertArgsToReflectionCompatibleWithFreemarkerExtBeansBeansWrapper_withNSObjectArray_(FreemarkerExtBeansArgumentTypes_SpecialConversionCallableMemberDescriptor *self, FreemarkerExtBeansBeansWrapper *bw, IOSObjectArray *args);

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerExtBeansArgumentTypes_SpecialConversionCallableMemberDescriptor)


#line 34
@implementation FreemarkerExtBeansArgumentTypes


#line 63
- (instancetype)initWithNSObjectArray:(IOSObjectArray *)args
                          withBoolean:(jboolean)bugfixed {
  FreemarkerExtBeansArgumentTypes_initWithNSObjectArray_withBoolean_(self, args, bugfixed);
  return self;
}


#line 78
- (NSUInteger)hash {
  jint hash_ = 0;
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(types_))->size_; ++i) {
    hash_ ^= ((jint) [((IOSClass *) nil_chk(IOSObjectArray_Get(types_, i))) hash]);
  }
  return hash_;
}

- (jboolean)isEqual:(id)o {
  if ([o isKindOfClass:[FreemarkerExtBeansArgumentTypes class]]) {
    FreemarkerExtBeansArgumentTypes *cs = (FreemarkerExtBeansArgumentTypes *) check_class_cast(o, [FreemarkerExtBeansArgumentTypes class]);
    if (((IOSObjectArray *) nil_chk(((FreemarkerExtBeansArgumentTypes *) nil_chk(cs))->types_))->size_ != types_->size_) {
      return NO;
    }
    for (jint i = 0; i < types_->size_; ++i) {
      if (IOSObjectArray_Get(cs->types_, i) != IOSObjectArray_Get(types_, i)) {
        return NO;
      }
    }
    return YES;
  }
  return NO;
}


#line 106
- (FreemarkerExtBeansMaybeEmptyCallableMemberDescriptor *)getMostSpecificWithJavaUtilList:(id<JavaUtilList>)memberDescs
                                                                              withBoolean:(jboolean)varArg {
  
#line 109
  JavaUtilLinkedList *applicables = [self getApplicablesWithJavaUtilList:memberDescs withBoolean:varArg];
  if ([((JavaUtilLinkedList *) nil_chk(applicables)) isEmpty]) {
    return FreemarkerExtBeansEmptyCallableMemberDescriptor_get_NO_SUCH_METHOD_();
  }
  if ([applicables size] == 1) {
    return (FreemarkerExtBeansCallableMemberDescriptor *) check_class_cast([applicables getFirst], [FreemarkerExtBeansCallableMemberDescriptor class]);
  }
  
#line 117
  JavaUtilLinkedList *maximals = new_JavaUtilLinkedList_init();
  for (id<JavaUtilIterator> applicablesIter = [applicables iterator]; [((id<JavaUtilIterator>) nil_chk(applicablesIter)) hasNext]; ) {
    
#line 120
    FreemarkerExtBeansCallableMemberDescriptor *applicable = (FreemarkerExtBeansCallableMemberDescriptor *) check_class_cast([applicablesIter next], [FreemarkerExtBeansCallableMemberDescriptor class]);
    jboolean lessSpecific = NO;
    for (id<JavaUtilIterator> maximalsIter = [maximals iterator];
#line 123
    [((id<JavaUtilIterator>) nil_chk(maximalsIter)) hasNext]; ) {
      
#line 125
      FreemarkerExtBeansCallableMemberDescriptor *maximal = (FreemarkerExtBeansCallableMemberDescriptor *) check_class_cast([maximalsIter next], [FreemarkerExtBeansCallableMemberDescriptor class]);
      jint cmpRes = [self compareParameterListPreferabilityWithIOSClassArray:
#line 127
      [((FreemarkerExtBeansCallableMemberDescriptor *) nil_chk(applicable)) getParamTypes] withIOSClassArray:[((FreemarkerExtBeansCallableMemberDescriptor *) nil_chk(maximal)) getParamTypes] withBoolean:varArg];
      if (cmpRes > 0) {
        [maximalsIter remove];
      }
      else
#line 130
      if (cmpRes < 0) {
        lessSpecific = YES;
      }
    }
    if (!lessSpecific) {
      [maximals addLastWithId:applicable];
    }
  }
  if ([maximals size] > 1) {
    return FreemarkerExtBeansEmptyCallableMemberDescriptor_get_AMBIGUOUS_METHOD_();
  }
  return (FreemarkerExtBeansCallableMemberDescriptor *) check_class_cast([maximals getFirst], [FreemarkerExtBeansCallableMemberDescriptor class]);
}


#line 175
- (jint)compareParameterListPreferabilityWithIOSClassArray:(IOSObjectArray *)paramTypes1
                                         withIOSClassArray:(IOSObjectArray *)paramTypes2
                                               withBoolean:(jboolean)varArg {
  jint argTypesLen = ((IOSObjectArray *) nil_chk(types_))->size_;
  jint paramTypes1Len = ((IOSObjectArray *) nil_chk(paramTypes1))->size_;
  jint paramTypes2Len = ((IOSObjectArray *) nil_chk(paramTypes2))->size_;
  
#line 181
  if (bugfixed_) {
    jint paramList1WeakWinCnt = 0;
    jint paramList2WeakWinCnt = 0;
    jint paramList1WinCnt = 0;
    jint paramList2WinCnt = 0;
    jint paramList1StrongWinCnt = 0;
    jint paramList2StrongWinCnt = 0;
    jint paramList1VeryStrongWinCnt = 0;
    jint paramList2VeryStrongWinCnt = 0;
    jint firstWinerParamList = 0;
    for (jint i = 0; i < argTypesLen; i++) {
      IOSClass *paramType1 = FreemarkerExtBeansArgumentTypes_getParamTypeWithIOSClassArray_withInt_withInt_withBoolean_(paramTypes1, paramTypes1Len, i, varArg);
      IOSClass *paramType2 = FreemarkerExtBeansArgumentTypes_getParamTypeWithIOSClassArray_withInt_withInt_withBoolean_(paramTypes2, paramTypes2Len, i, varArg);
      
#line 195
      jint winerParam;
      if (paramType1 == paramType2) {
        winerParam = 0;
      }
      else {
        
#line 199
        IOSClass *argType = IOSObjectArray_Get(types_, i);
        jboolean argIsNum = [NSNumber_class_() isAssignableFrom:argType];
        
#line 202
        jint numConvPrice1;
        if (argIsNum && FreemarkerTemplateUtilityClassUtil_isNumericalWithIOSClass_(paramType1)) {
          IOSClass *nonPrimParamType1 = [((IOSClass *) nil_chk(paramType1)) isPrimitive] ? FreemarkerTemplateUtilityClassUtil_primitiveClassToBoxingClassWithIOSClass_(
#line 205
          paramType1) : paramType1;
          numConvPrice1 = FreemarkerExtBeansOverloadedNumberUtil_getArgumentConversionPriceWithIOSClass_withIOSClass_(argType, nonPrimParamType1);
        }
        else {
          
#line 208
          numConvPrice1 = JavaLangInteger_MAX_VALUE;
        }
        
#line 214
        jint numConvPrice2;
        if (argIsNum && FreemarkerTemplateUtilityClassUtil_isNumericalWithIOSClass_(paramType2)) {
          IOSClass *nonPrimParamType2 = [((IOSClass *) nil_chk(paramType2)) isPrimitive] ? FreemarkerTemplateUtilityClassUtil_primitiveClassToBoxingClassWithIOSClass_(
#line 217
          paramType2) : paramType2;
          numConvPrice2 = FreemarkerExtBeansOverloadedNumberUtil_getArgumentConversionPriceWithIOSClass_withIOSClass_(argType, nonPrimParamType2);
        }
        else {
          
#line 220
          numConvPrice2 = JavaLangInteger_MAX_VALUE;
        }
        
#line 223
        if (numConvPrice1 == JavaLangInteger_MAX_VALUE) {
          if (numConvPrice2 == JavaLangInteger_MAX_VALUE) {
            
#line 226
            if ([JavaUtilList_class_() isAssignableFrom:argType] &&
#line 227
            ([((IOSClass *) nil_chk(paramType1)) isArray] || [((IOSClass *) nil_chk(paramType2)) isArray])) {
              if ([((IOSClass *) nil_chk(paramType1)) isArray]) {
                if ([((IOSClass *) nil_chk(paramType2)) isArray]) {
                  jint r = FreemarkerExtBeansArgumentTypes_compareParameterListPreferability_cmpTypeSpecifictyWithIOSClass_withIOSClass_(self,
#line 231
                  [paramType1 getComponentType], [paramType2 getComponentType]);
                  
#line 234
                  if (r > 0) {
                    winerParam = 2;
                    paramList2StrongWinCnt++;
                  }
                  else
#line 237
                  if (r < 0) {
                    winerParam = 1;
                    paramList1StrongWinCnt++;
                  }
                  else {
                    
#line 241
                    winerParam = 0;
                  }
                }
                else {
                  if ([JavaUtilCollection_class_() isAssignableFrom:paramType2]) {
                    winerParam = 2;
                    paramList2StrongWinCnt++;
                  }
                  else {
                    
#line 249
                    winerParam = 1;
                    paramList1WeakWinCnt++;
                  }
                }
              }
              else {
                if ([JavaUtilCollection_class_() isAssignableFrom:paramType1]) {
                  winerParam = 1;
                  paramList1StrongWinCnt++;
                }
                else {
                  
#line 259
                  winerParam = 2;
                  paramList2WeakWinCnt++;
                }
              }
            }
            else
#line 263
            if ([((IOSClass *) nil_chk(argType)) isArray] &&
#line 264
            ([JavaUtilList_class_() isAssignableFrom:paramType1] ||
#line 265
            [JavaUtilList_class_() isAssignableFrom:paramType2])) {
              
#line 267
              if ([JavaUtilList_class_() isAssignableFrom:paramType1]) {
                if ([JavaUtilList_class_() isAssignableFrom:paramType2]) {
                  
#line 270
                  winerParam = 0;
                }
                else {
                  winerParam = 2;
                  paramList2VeryStrongWinCnt++;
                }
              }
              else {
                winerParam = 1;
                paramList1VeryStrongWinCnt++;
              }
            }
            else {
              
#line 282
              jint r = FreemarkerExtBeansArgumentTypes_compareParameterListPreferability_cmpTypeSpecifictyWithIOSClass_withIOSClass_(self,
#line 283
              paramType1, paramType2);
              if (r > 0) {
                winerParam = 1;
                if (r > 1) {
                  paramList1WinCnt++;
                }
                else {
                  
#line 289
                  paramList1WeakWinCnt++;
                }
              }
              else
#line 291
              if (r < 0) {
                winerParam = -1;
                if (r < -1) {
                  paramList2WinCnt++;
                }
                else {
                  
#line 296
                  paramList2WeakWinCnt++;
                }
              }
              else {
                
#line 299
                winerParam = 0;
              }
            }
          }
          else {
            
#line 303
            winerParam = -1;
            paramList2WinCnt++;
          }
        }
        else
#line 306
        if (numConvPrice2 == JavaLangInteger_MAX_VALUE) {
          winerParam = 1;
          paramList1WinCnt++;
        }
        else {
          
#line 310
          if (numConvPrice1 != numConvPrice2) {
            if (numConvPrice1 < numConvPrice2) {
              winerParam = 1;
              if (numConvPrice1 < FreemarkerExtBeansOverloadedNumberUtil_BIG_MANTISSA_LOSS_PRICE &&
#line 314
              numConvPrice2 > FreemarkerExtBeansOverloadedNumberUtil_BIG_MANTISSA_LOSS_PRICE) {
                paramList1StrongWinCnt++;
              }
              else {
                
#line 317
                paramList1WinCnt++;
              }
            }
            else {
              
#line 320
              winerParam = -1;
              if (numConvPrice2 < FreemarkerExtBeansOverloadedNumberUtil_BIG_MANTISSA_LOSS_PRICE &&
#line 322
              numConvPrice1 > FreemarkerExtBeansOverloadedNumberUtil_BIG_MANTISSA_LOSS_PRICE) {
                paramList2StrongWinCnt++;
              }
              else {
                
#line 325
                paramList2WinCnt++;
              }
            }
          }
          else {
            
#line 329
            winerParam = ([((IOSClass *) nil_chk(paramType1)) isPrimitive] ? 1 : 0) - ([((IOSClass *) nil_chk(paramType2)) isPrimitive] ? 1 : 0);
            if (winerParam == 1) paramList1WeakWinCnt++;
            else if (winerParam == -1) paramList2WeakWinCnt++;
          }
        }
      }
      
#line 336
      if (firstWinerParamList == 0 && winerParam != 0) {
        firstWinerParamList = winerParam;
      }
    }
    
#line 341
    if (paramList1VeryStrongWinCnt != paramList2VeryStrongWinCnt) {
      return paramList1VeryStrongWinCnt - paramList2VeryStrongWinCnt;
    }
    else
#line 343
    if (paramList1StrongWinCnt != paramList2StrongWinCnt) {
      return paramList1StrongWinCnt - paramList2StrongWinCnt;
    }
    else
#line 345
    if (paramList1WinCnt != paramList2WinCnt) {
      return paramList1WinCnt - paramList2WinCnt;
    }
    else
#line 347
    if (paramList1WeakWinCnt != paramList2WeakWinCnt) {
      return paramList1WeakWinCnt - paramList2WeakWinCnt;
    }
    else
#line 349
    if (firstWinerParamList != 0) {
      return firstWinerParamList;
    }
    else {
      
#line 352
      if (varArg) {
        if (paramTypes1Len == paramTypes2Len) {
          
#line 357
          if (argTypesLen == paramTypes1Len - 1) {
            IOSClass *paramType1 = FreemarkerExtBeansArgumentTypes_getParamTypeWithIOSClassArray_withInt_withInt_withBoolean_(paramTypes1, paramTypes1Len, argTypesLen, YES);
            IOSClass *paramType2 = FreemarkerExtBeansArgumentTypes_getParamTypeWithIOSClassArray_withInt_withInt_withBoolean_(paramTypes2, paramTypes2Len, argTypesLen, YES);
            if (FreemarkerTemplateUtilityClassUtil_isNumericalWithIOSClass_(paramType1) && FreemarkerTemplateUtilityClassUtil_isNumericalWithIOSClass_(paramType2)) {
              jint r = FreemarkerExtBeansOverloadedNumberUtil_compareNumberTypeSpecificityWithIOSClass_withIOSClass_(paramType1, paramType2);
              if (r != 0) return r;
            }
            
#line 365
            return FreemarkerExtBeansArgumentTypes_compareParameterListPreferability_cmpTypeSpecifictyWithIOSClass_withIOSClass_(self, paramType1, paramType2);
          }
          else {
            
#line 367
            return 0;
          }
        }
        else {
          return paramTypes1Len - paramTypes2Len;
        }
      }
      else {
        
#line 374
        return 0;
      }
    }
  }
  else {
    
#line 378
    jboolean paramTypes1HasAMoreSpecific = NO;
    jboolean paramTypes2HasAMoreSpecific = NO;
    for (jint i = 0; i < paramTypes1Len; ++i) {
      IOSClass *paramType1 = FreemarkerExtBeansArgumentTypes_getParamTypeWithIOSClassArray_withInt_withInt_withBoolean_(paramTypes1, paramTypes1Len, i, varArg);
      IOSClass *paramType2 = FreemarkerExtBeansArgumentTypes_getParamTypeWithIOSClassArray_withInt_withInt_withBoolean_(paramTypes2, paramTypes2Len, i, varArg);
      if (paramType1 != paramType2) {
        paramTypes1HasAMoreSpecific = (
#line 385
        paramTypes1HasAMoreSpecific ||
#line 386
        FreemarkerExtBeans_MethodUtil_isMoreOrSameSpecificParameterTypeWithIOSClass_withIOSClass_withBoolean_withInt_(paramType1, paramType2, NO, 0) != 0);
        paramTypes2HasAMoreSpecific = (
#line 388
        paramTypes2HasAMoreSpecific ||
#line 389
        FreemarkerExtBeans_MethodUtil_isMoreOrSameSpecificParameterTypeWithIOSClass_withIOSClass_withBoolean_withInt_(paramType2, paramType1, NO, 0) != 0);
      }
    }
    
#line 393
    if (paramTypes1HasAMoreSpecific) {
      return paramTypes2HasAMoreSpecific ? 0 : 1;
    }
    else
#line 395
    if (paramTypes2HasAMoreSpecific) {
      return -1;
    }
    else {
      
#line 398
      return 0;
    }
  }
}


#line 409
- (jint)compareParameterListPreferability_cmpTypeSpecifictyWithIOSClass:(IOSClass *)paramType1
                                                           withIOSClass:(IOSClass *)paramType2 {
  return FreemarkerExtBeansArgumentTypes_compareParameterListPreferability_cmpTypeSpecifictyWithIOSClass_withIOSClass_(self, paramType1, paramType2);
}


#line 442
+ (IOSClass *)getParamTypeWithIOSClassArray:(IOSObjectArray *)paramTypes
                                    withInt:(jint)paramTypesLen
                                    withInt:(jint)i
                                withBoolean:(jboolean)varArg {
  return FreemarkerExtBeansArgumentTypes_getParamTypeWithIOSClassArray_withInt_withInt_withBoolean_(paramTypes, paramTypesLen, i, varArg);
}


#line 452
- (JavaUtilLinkedList *)getApplicablesWithJavaUtilList:(id<JavaUtilList>)memberDescs
                                           withBoolean:(jboolean)varArg {
  
#line 454
  JavaUtilLinkedList *applicables = new_JavaUtilLinkedList_init();
  for (id<JavaUtilIterator> it = [((id<JavaUtilList>) nil_chk(memberDescs)) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    FreemarkerExtBeansReflectionCallableMemberDescriptor *memberDesc = (FreemarkerExtBeansReflectionCallableMemberDescriptor *) check_class_cast([it next], [FreemarkerExtBeansReflectionCallableMemberDescriptor class]);
    jint difficulty = FreemarkerExtBeansArgumentTypes_isApplicableWithFreemarkerExtBeansReflectionCallableMemberDescriptor_withBoolean_(self, memberDesc, varArg);
    if (difficulty != FreemarkerExtBeansArgumentTypes_CONVERSION_DIFFICULTY_IMPOSSIBLE) {
      if (difficulty == FreemarkerExtBeansArgumentTypes_CONVERSION_DIFFICULTY_REFLECTION) {
        [applicables addWithId:memberDesc];
      }
      else
#line 461
      if (difficulty == FreemarkerExtBeansArgumentTypes_CONVERSION_DIFFICULTY_FREEMARKER) {
        [applicables addWithId:new_FreemarkerExtBeansArgumentTypes_SpecialConversionCallableMemberDescriptor_initWithFreemarkerExtBeansReflectionCallableMemberDescriptor_(memberDesc)];
      }
      else {
        
#line 464
        @throw new_FreemarkerCoreBugException_init();
      }
    }
  }
  return applicables;
}


#line 478
- (jint)isApplicableWithFreemarkerExtBeansReflectionCallableMemberDescriptor:(FreemarkerExtBeansReflectionCallableMemberDescriptor *)memberDesc
                                                                 withBoolean:(jboolean)varArg {
  return FreemarkerExtBeansArgumentTypes_isApplicableWithFreemarkerExtBeansReflectionCallableMemberDescriptor_withBoolean_(self, memberDesc, varArg);
}


#line 531
- (jint)isMethodInvocationConvertibleWithIOSClass:(IOSClass *)formal
                                     withIOSClass:(IOSClass *)actual {
  return FreemarkerExtBeansArgumentTypes_isMethodInvocationConvertibleWithIOSClass_withIOSClass_(self, formal, actual);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithNSObjectArray:withBoolean:", "ArgumentTypes", NULL, 0x0, NULL, NULL },
    { "hash", "hashCode", "I", 0x1, NULL, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL, NULL },
    { "getMostSpecificWithJavaUtilList:withBoolean:", "getMostSpecific", "Lfreemarker.ext.beans.MaybeEmptyCallableMemberDescriptor;", 0x0, NULL, NULL },
    { "compareParameterListPreferabilityWithIOSClassArray:withIOSClassArray:withBoolean:", "compareParameterListPreferability", "I", 0x0, NULL, NULL },
    { "compareParameterListPreferability_cmpTypeSpecifictyWithIOSClass:withIOSClass:", "compareParameterListPreferability_cmpTypeSpecificty", "I", 0x2, NULL, NULL },
    { "getParamTypeWithIOSClassArray:withInt:withInt:withBoolean:", "getParamType", "Ljava.lang.Class;", 0xa, NULL, NULL },
    { "getApplicablesWithJavaUtilList:withBoolean:", "getApplicables", "Ljava.util.LinkedList;", 0x0, NULL, NULL },
    { "isApplicableWithFreemarkerExtBeansReflectionCallableMemberDescriptor:withBoolean:", "isApplicable", "I", 0x2, NULL, NULL },
    { "isMethodInvocationConvertibleWithIOSClass:withIOSClass:", "isMethodInvocationConvertible", "I", 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "CONVERSION_DIFFICULTY_REFLECTION_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = FreemarkerExtBeansArgumentTypes_CONVERSION_DIFFICULTY_REFLECTION },
    { "CONVERSION_DIFFICULTY_FREEMARKER_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = FreemarkerExtBeansArgumentTypes_CONVERSION_DIFFICULTY_FREEMARKER },
    { "CONVERSION_DIFFICULTY_IMPOSSIBLE_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = FreemarkerExtBeansArgumentTypes_CONVERSION_DIFFICULTY_IMPOSSIBLE },
    { "types_", NULL, 0x12, "[Ljava.lang.Class;", NULL, NULL,  },
    { "bugfixed_", NULL, 0x12, "Z", NULL, NULL,  },
  };
  static const char *inner_classes[] = {"Lfreemarker.ext.beans.ArgumentTypes$Null;", "Lfreemarker.ext.beans.ArgumentTypes$SpecialConversionCallableMemberDescriptor;"};
  static const J2ObjcClassInfo _FreemarkerExtBeansArgumentTypes = { 2, "ArgumentTypes", "freemarker.ext.beans", NULL, 0x10, 10, methods, 5, fields, 0, NULL, 2, inner_classes, NULL, NULL };
  return &_FreemarkerExtBeansArgumentTypes;
}

@end


#line 63
void FreemarkerExtBeansArgumentTypes_initWithNSObjectArray_withBoolean_(FreemarkerExtBeansArgumentTypes *self, IOSObjectArray *args, jboolean bugfixed) {
  (void) NSObject_init(self);
  
#line 64
  jint ln = ((IOSObjectArray *) nil_chk(args))->size_;
  IOSObjectArray *typesTmp = [IOSObjectArray newArrayWithLength:ln type:IOSClass_class_()];
  for (jint i = 0; i < ln; ++i) {
    id arg = IOSObjectArray_Get(args, i);
    (void) IOSObjectArray_Set(typesTmp, i, arg == nil ?
#line 69
    (bugfixed ? FreemarkerExtBeansArgumentTypes_Null_class_() : NSObject_class_()) :
#line 70
    [arg getClass]);
  }
  
#line 74
  self->types_ = typesTmp;
  self->bugfixed_ = bugfixed;
}


#line 63
FreemarkerExtBeansArgumentTypes *new_FreemarkerExtBeansArgumentTypes_initWithNSObjectArray_withBoolean_(IOSObjectArray *args, jboolean bugfixed) {
  FreemarkerExtBeansArgumentTypes *self = [FreemarkerExtBeansArgumentTypes alloc];
  FreemarkerExtBeansArgumentTypes_initWithNSObjectArray_withBoolean_(self, args, bugfixed);
  return self;
}


#line 409
jint FreemarkerExtBeansArgumentTypes_compareParameterListPreferability_cmpTypeSpecifictyWithIOSClass_withIOSClass_(FreemarkerExtBeansArgumentTypes *self, IOSClass *paramType1, IOSClass *paramType2) {
  
#line 412
  IOSClass *nonPrimParamType1 = [((IOSClass *) nil_chk(paramType1)) isPrimitive] ? FreemarkerTemplateUtilityClassUtil_primitiveClassToBoxingClassWithIOSClass_(
#line 413
  paramType1) : paramType1;
  IOSClass *nonPrimParamType2 = [((IOSClass *) nil_chk(paramType2)) isPrimitive] ? FreemarkerTemplateUtilityClassUtil_primitiveClassToBoxingClassWithIOSClass_(
#line 415
  paramType2) : paramType2;
  
#line 417
  if (nonPrimParamType1 == nonPrimParamType2) {
    if (nonPrimParamType1 != paramType1) {
      if (nonPrimParamType2 != paramType2) {
        return 0;
      }
      else {
        
#line 422
        return 1;
      }
    }
    else
#line 424
    if (nonPrimParamType2 != paramType2) {
      return -1;
    }
    else {
      
#line 427
      return 0;
    }
  }
  else
#line 429
  if ([nonPrimParamType2 isAssignableFrom:nonPrimParamType1]) {
    return 2;
  }
  else
#line 431
  if ([nonPrimParamType1 isAssignableFrom:nonPrimParamType2]) {
    return -2;
  }
  
#line 433
  if (nonPrimParamType1 == JavaLangCharacter_class_() && [nonPrimParamType2 isAssignableFrom:NSString_class_()]) {
    return 2;
  }
  
#line 435
  if (nonPrimParamType2 == JavaLangCharacter_class_() && [nonPrimParamType1 isAssignableFrom:NSString_class_()]) {
    return -2;
  }
  else {
    
#line 438
    return 0;
  }
}


#line 442
IOSClass *FreemarkerExtBeansArgumentTypes_getParamTypeWithIOSClassArray_withInt_withInt_withBoolean_(IOSObjectArray *paramTypes, jint paramTypesLen, jint i, jboolean varArg) {
  FreemarkerExtBeansArgumentTypes_initialize();
  
#line 443
  return varArg && i >= paramTypesLen - 1 ?
#line 444
  [((IOSClass *) nil_chk(IOSObjectArray_Get(nil_chk(paramTypes), paramTypesLen - 1))) getComponentType] : IOSObjectArray_Get(nil_chk(
#line 445
  paramTypes), i);
}


#line 478
jint FreemarkerExtBeansArgumentTypes_isApplicableWithFreemarkerExtBeansReflectionCallableMemberDescriptor_withBoolean_(FreemarkerExtBeansArgumentTypes *self, FreemarkerExtBeansReflectionCallableMemberDescriptor *memberDesc, jboolean varArg) {
  IOSObjectArray *paramTypes = [((FreemarkerExtBeansReflectionCallableMemberDescriptor *) nil_chk(memberDesc)) getParamTypes];
  jint cl = ((IOSObjectArray *) nil_chk(self->types_))->size_;
  jint fl = ((IOSObjectArray *) nil_chk(paramTypes))->size_ - (varArg ? 1 : 0);
  if (varArg) {
    if (cl < fl) {
      return FreemarkerExtBeansArgumentTypes_CONVERSION_DIFFICULTY_IMPOSSIBLE;
    }
  }
  else {
    
#line 487
    if (cl != fl) {
      return FreemarkerExtBeansArgumentTypes_CONVERSION_DIFFICULTY_IMPOSSIBLE;
    }
  }
  
#line 492
  jint maxDifficulty = 0;
  for (jint i = 0; i < fl; ++i) {
    jint difficulty = FreemarkerExtBeansArgumentTypes_isMethodInvocationConvertibleWithIOSClass_withIOSClass_(self, IOSObjectArray_Get(paramTypes, i), IOSObjectArray_Get(self->types_, i));
    if (difficulty == FreemarkerExtBeansArgumentTypes_CONVERSION_DIFFICULTY_IMPOSSIBLE) {
      return FreemarkerExtBeansArgumentTypes_CONVERSION_DIFFICULTY_IMPOSSIBLE;
    }
    if (maxDifficulty < difficulty) {
      maxDifficulty = difficulty;
    }
  }
  if (varArg) {
    IOSClass *varArgParamType = [((IOSClass *) nil_chk(IOSObjectArray_Get(paramTypes, fl))) getComponentType];
    for (jint i = fl; i < cl; ++i) {
      jint difficulty = FreemarkerExtBeansArgumentTypes_isMethodInvocationConvertibleWithIOSClass_withIOSClass_(self, varArgParamType, IOSObjectArray_Get(self->types_, i));
      if (difficulty == FreemarkerExtBeansArgumentTypes_CONVERSION_DIFFICULTY_IMPOSSIBLE) {
        return FreemarkerExtBeansArgumentTypes_CONVERSION_DIFFICULTY_IMPOSSIBLE;
      }
      if (maxDifficulty < difficulty) {
        maxDifficulty = difficulty;
      }
    }
  }
  return maxDifficulty;
}


#line 531
jint FreemarkerExtBeansArgumentTypes_isMethodInvocationConvertibleWithIOSClass_withIOSClass_(FreemarkerExtBeansArgumentTypes *self, IOSClass *formal, IOSClass *actual) {
  
#line 533
  if ([((IOSClass *) nil_chk(formal)) isAssignableFrom:actual] && actual != FreemarkerExtBeansCharacterOrString_class_()) {
    return FreemarkerExtBeansArgumentTypes_CONVERSION_DIFFICULTY_REFLECTION;
  }
  else
#line 535
  if (self->bugfixed_) {
    IOSClass *formalNP;
    if ([formal isPrimitive]) {
      if (actual == FreemarkerExtBeansArgumentTypes_Null_class_()) {
        return FreemarkerExtBeansArgumentTypes_CONVERSION_DIFFICULTY_IMPOSSIBLE;
      }
      
#line 542
      formalNP = FreemarkerTemplateUtilityClassUtil_primitiveClassToBoxingClassWithIOSClass_(formal);
      if (actual == formalNP) {
        
#line 545
        return FreemarkerExtBeansArgumentTypes_CONVERSION_DIFFICULTY_REFLECTION;
      }
    }
    else {
      
#line 548
      if (actual == FreemarkerExtBeansArgumentTypes_Null_class_()) {
        return FreemarkerExtBeansArgumentTypes_CONVERSION_DIFFICULTY_REFLECTION;
      }
      
#line 552
      formalNP = formal;
    }
    if ([NSNumber_class_() isAssignableFrom:actual] && [NSNumber_class_() isAssignableFrom:formalNP]) {
      return FreemarkerExtBeansOverloadedNumberUtil_getArgumentConversionPriceWithIOSClass_withIOSClass_(actual, formalNP) == JavaLangInteger_MAX_VALUE ? FreemarkerExtBeansArgumentTypes_CONVERSION_DIFFICULTY_IMPOSSIBLE : FreemarkerExtBeansArgumentTypes_CONVERSION_DIFFICULTY_REFLECTION;
    }
    else if ([formal isArray]) {
      
#line 559
      return [JavaUtilList_class_() isAssignableFrom:actual] ? FreemarkerExtBeansArgumentTypes_CONVERSION_DIFFICULTY_FREEMARKER : FreemarkerExtBeansArgumentTypes_CONVERSION_DIFFICULTY_IMPOSSIBLE;
    }
    else if ([((IOSClass *) nil_chk(actual)) isArray] && [formal isAssignableFrom:JavaUtilList_class_()]) {
      
#line 563
      return FreemarkerExtBeansArgumentTypes_CONVERSION_DIFFICULTY_FREEMARKER;
    }
    else
#line 564
    if (actual == FreemarkerExtBeansCharacterOrString_class_() &&
#line 565
    ([formal isAssignableFrom:NSString_class_()] ||
#line 566
    [formal isAssignableFrom:JavaLangCharacter_class_()] || formal == [IOSClass charClass])) {
      return FreemarkerExtBeansArgumentTypes_CONVERSION_DIFFICULTY_FREEMARKER;
    }
    else {
      
#line 569
      return FreemarkerExtBeansArgumentTypes_CONVERSION_DIFFICULTY_IMPOSSIBLE;
    }
  }
  else {
    
#line 579
    if ([formal isPrimitive]) {
      
#line 583
      if (formal == JavaLangBoolean_get_TYPE_()) {
        return actual == JavaLangBoolean_class_() ? FreemarkerExtBeansArgumentTypes_CONVERSION_DIFFICULTY_REFLECTION : FreemarkerExtBeansArgumentTypes_CONVERSION_DIFFICULTY_IMPOSSIBLE;
      }
      else if (formal == JavaLangDouble_get_TYPE_() &&
#line 587
      (actual == JavaLangDouble_class_() || actual == JavaLangFloat_class_() ||
#line 588
      actual == JavaLangLong_class_() || actual == JavaLangInteger_class_() ||
#line 589
      actual == JavaLangShort_class_() || actual == JavaLangByte_class_())) {
        return FreemarkerExtBeansArgumentTypes_CONVERSION_DIFFICULTY_REFLECTION;
      }
      else
#line 591
      if (formal == JavaLangInteger_get_TYPE_() &&
#line 592
      (actual == JavaLangInteger_class_() || actual == JavaLangShort_class_() ||
#line 593
      actual == JavaLangByte_class_())) {
        return FreemarkerExtBeansArgumentTypes_CONVERSION_DIFFICULTY_REFLECTION;
      }
      else
#line 595
      if (formal == JavaLangLong_get_TYPE_() &&
#line 596
      (actual == JavaLangLong_class_() || actual == JavaLangInteger_class_() ||
#line 597
      actual == JavaLangShort_class_() || actual == JavaLangByte_class_())) {
        return FreemarkerExtBeansArgumentTypes_CONVERSION_DIFFICULTY_REFLECTION;
      }
      else
#line 599
      if (formal == JavaLangFloat_get_TYPE_() &&
#line 600
      (actual == JavaLangFloat_class_() || actual == JavaLangLong_class_() ||
#line 601
      actual == JavaLangInteger_class_() || actual == JavaLangShort_class_() ||
#line 602
      actual == JavaLangByte_class_())) {
        return FreemarkerExtBeansArgumentTypes_CONVERSION_DIFFICULTY_REFLECTION;
      }
      else
#line 604
      if (formal == JavaLangCharacter_get_TYPE_()) {
        return actual == JavaLangCharacter_class_() ? FreemarkerExtBeansArgumentTypes_CONVERSION_DIFFICULTY_REFLECTION : FreemarkerExtBeansArgumentTypes_CONVERSION_DIFFICULTY_IMPOSSIBLE;
      }
      else if (formal == JavaLangByte_get_TYPE_() && actual == JavaLangByte_class_()) {
        return FreemarkerExtBeansArgumentTypes_CONVERSION_DIFFICULTY_REFLECTION;
      }
      else
#line 609
      if (formal == JavaLangShort_get_TYPE_() &&
#line 610
      (actual == JavaLangShort_class_() || actual == JavaLangByte_class_())) {
        return FreemarkerExtBeansArgumentTypes_CONVERSION_DIFFICULTY_REFLECTION;
      }
      else
#line 612
      if ([JavaMathBigDecimal_class_() isAssignableFrom:actual] && FreemarkerTemplateUtilityClassUtil_isNumericalWithIOSClass_(formal)) {
        
#line 617
        return FreemarkerExtBeansArgumentTypes_CONVERSION_DIFFICULTY_REFLECTION;
      }
      else {
        
#line 619
        return FreemarkerExtBeansArgumentTypes_CONVERSION_DIFFICULTY_IMPOSSIBLE;
      }
    }
    else {
      
#line 622
      return FreemarkerExtBeansArgumentTypes_CONVERSION_DIFFICULTY_IMPOSSIBLE;
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerExtBeansArgumentTypes)


#line 630
@implementation FreemarkerExtBeansArgumentTypes_Null


#line 633
- (instancetype)init {
  FreemarkerExtBeansArgumentTypes_Null_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "Null", NULL, 0x2, NULL, NULL },
  };
  static const J2ObjcClassInfo _FreemarkerExtBeansArgumentTypes_Null = { 2, "Null", "freemarker.ext.beans", "ArgumentTypes", 0xa, 1, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerExtBeansArgumentTypes_Null;
}

@end


#line 633
void FreemarkerExtBeansArgumentTypes_Null_init(FreemarkerExtBeansArgumentTypes_Null *self) {
  (void) NSObject_init(self);
}


#line 633
FreemarkerExtBeansArgumentTypes_Null *new_FreemarkerExtBeansArgumentTypes_Null_init() {
  FreemarkerExtBeansArgumentTypes_Null *self = [FreemarkerExtBeansArgumentTypes_Null alloc];
  FreemarkerExtBeansArgumentTypes_Null_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerExtBeansArgumentTypes_Null)


#line 642
@implementation FreemarkerExtBeansArgumentTypes_SpecialConversionCallableMemberDescriptor


#line 646
- (instancetype)initWithFreemarkerExtBeansReflectionCallableMemberDescriptor:(FreemarkerExtBeansReflectionCallableMemberDescriptor *)callableMemberDesc {
  FreemarkerExtBeansArgumentTypes_SpecialConversionCallableMemberDescriptor_initWithFreemarkerExtBeansReflectionCallableMemberDescriptor_(self, callableMemberDesc);
  return self;
}


#line 650
- (id<FreemarkerTemplateTemplateModel>)invokeMethodWithFreemarkerExtBeansBeansWrapper:(FreemarkerExtBeansBeansWrapper *)bw
                                                                               withId:(id)obj
                                                                    withNSObjectArray:(IOSObjectArray *)args {
  
#line 652
  FreemarkerExtBeansArgumentTypes_SpecialConversionCallableMemberDescriptor_convertArgsToReflectionCompatibleWithFreemarkerExtBeansBeansWrapper_withNSObjectArray_(self, bw, args);
  return [((FreemarkerExtBeansReflectionCallableMemberDescriptor *) nil_chk(callableMemberDesc_)) invokeMethodWithFreemarkerExtBeansBeansWrapper:bw withId:obj withNSObjectArray:args];
}


#line 656
- (id)invokeConstructorWithFreemarkerExtBeansBeansWrapper:(FreemarkerExtBeansBeansWrapper *)bw
                                        withNSObjectArray:(IOSObjectArray *)args {
  
#line 658
  FreemarkerExtBeansArgumentTypes_SpecialConversionCallableMemberDescriptor_convertArgsToReflectionCompatibleWithFreemarkerExtBeansBeansWrapper_withNSObjectArray_(self, bw, args);
  return [((FreemarkerExtBeansReflectionCallableMemberDescriptor *) nil_chk(callableMemberDesc_)) invokeConstructorWithFreemarkerExtBeansBeansWrapper:bw withNSObjectArray:args];
}


#line 662
- (NSString *)getDeclaration {
  return [((FreemarkerExtBeansReflectionCallableMemberDescriptor *) nil_chk(callableMemberDesc_)) getDeclaration];
}

- (jboolean)isConstructor {
  return [((FreemarkerExtBeansReflectionCallableMemberDescriptor *) nil_chk(callableMemberDesc_)) isConstructor];
}

- (jboolean)isStatic {
  return [((FreemarkerExtBeansReflectionCallableMemberDescriptor *) nil_chk(callableMemberDesc_)) isStatic];
}

- (jboolean)isVarargs {
  return [((FreemarkerExtBeansReflectionCallableMemberDescriptor *) nil_chk(callableMemberDesc_)) isVarargs];
}

- (IOSObjectArray *)getParamTypes {
  return [((FreemarkerExtBeansReflectionCallableMemberDescriptor *) nil_chk(callableMemberDesc_)) getParamTypes];
}

- (NSString *)getName {
  return [((FreemarkerExtBeansReflectionCallableMemberDescriptor *) nil_chk(callableMemberDesc_)) getName];
}

- (void)convertArgsToReflectionCompatibleWithFreemarkerExtBeansBeansWrapper:(FreemarkerExtBeansBeansWrapper *)bw
                                                          withNSObjectArray:(IOSObjectArray *)args {
  FreemarkerExtBeansArgumentTypes_SpecialConversionCallableMemberDescriptor_convertArgsToReflectionCompatibleWithFreemarkerExtBeansBeansWrapper_withNSObjectArray_(self, bw, args);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithFreemarkerExtBeansReflectionCallableMemberDescriptor:", "SpecialConversionCallableMemberDescriptor", NULL, 0x0, NULL, NULL },
    { "invokeMethodWithFreemarkerExtBeansBeansWrapper:withId:withNSObjectArray:", "invokeMethod", "Lfreemarker.template.TemplateModel;", 0x0, "Lfreemarker.template.TemplateModelException;Ljava.lang.reflect.InvocationTargetException;Ljava.lang.IllegalAccessException;", NULL },
    { "invokeConstructorWithFreemarkerExtBeansBeansWrapper:withNSObjectArray:", "invokeConstructor", "Ljava.lang.Object;", 0x0, "Ljava.lang.IllegalArgumentException;Ljava.lang.InstantiationException;Ljava.lang.IllegalAccessException;Ljava.lang.reflect.InvocationTargetException;Lfreemarker.template.TemplateModelException;", NULL },
    { "getDeclaration", NULL, "Ljava.lang.String;", 0x0, NULL, NULL },
    { "isConstructor", NULL, "Z", 0x0, NULL, NULL },
    { "isStatic", NULL, "Z", 0x0, NULL, NULL },
    { "isVarargs", NULL, "Z", 0x0, NULL, NULL },
    { "getParamTypes", NULL, "[Ljava.lang.Class;", 0x0, NULL, NULL },
    { "getName", NULL, "Ljava.lang.String;", 0x0, NULL, NULL },
    { "convertArgsToReflectionCompatibleWithFreemarkerExtBeansBeansWrapper:withNSObjectArray:", "convertArgsToReflectionCompatible", "V", 0x2, "Lfreemarker.template.TemplateModelException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "callableMemberDesc_", NULL, 0x12, "Lfreemarker.ext.beans.ReflectionCallableMemberDescriptor;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerExtBeansArgumentTypes_SpecialConversionCallableMemberDescriptor = { 2, "SpecialConversionCallableMemberDescriptor", "freemarker.ext.beans", "ArgumentTypes", 0x1a, 10, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerExtBeansArgumentTypes_SpecialConversionCallableMemberDescriptor;
}

@end


#line 646
void FreemarkerExtBeansArgumentTypes_SpecialConversionCallableMemberDescriptor_initWithFreemarkerExtBeansReflectionCallableMemberDescriptor_(FreemarkerExtBeansArgumentTypes_SpecialConversionCallableMemberDescriptor *self, FreemarkerExtBeansReflectionCallableMemberDescriptor *callableMemberDesc) {
  (void) FreemarkerExtBeansCallableMemberDescriptor_init(self);
  
#line 647
  self->callableMemberDesc_ = callableMemberDesc;
}


#line 646
FreemarkerExtBeansArgumentTypes_SpecialConversionCallableMemberDescriptor *new_FreemarkerExtBeansArgumentTypes_SpecialConversionCallableMemberDescriptor_initWithFreemarkerExtBeansReflectionCallableMemberDescriptor_(FreemarkerExtBeansReflectionCallableMemberDescriptor *callableMemberDesc) {
  FreemarkerExtBeansArgumentTypes_SpecialConversionCallableMemberDescriptor *self = [FreemarkerExtBeansArgumentTypes_SpecialConversionCallableMemberDescriptor alloc];
  FreemarkerExtBeansArgumentTypes_SpecialConversionCallableMemberDescriptor_initWithFreemarkerExtBeansReflectionCallableMemberDescriptor_(self, callableMemberDesc);
  return self;
}


#line 686
void FreemarkerExtBeansArgumentTypes_SpecialConversionCallableMemberDescriptor_convertArgsToReflectionCompatibleWithFreemarkerExtBeansBeansWrapper_withNSObjectArray_(FreemarkerExtBeansArgumentTypes_SpecialConversionCallableMemberDescriptor *self, FreemarkerExtBeansBeansWrapper *bw, IOSObjectArray *args) {
  IOSObjectArray *paramTypes = [((FreemarkerExtBeansReflectionCallableMemberDescriptor *) nil_chk(self->callableMemberDesc_)) getParamTypes];
  jint ln = ((IOSObjectArray *) nil_chk(paramTypes))->size_;
  for (jint i = 0; i < ln; i++) {
    IOSClass *paramType = IOSObjectArray_Get(paramTypes, i);
    id arg = IOSObjectArray_Get(nil_chk(args), i);
    if (arg == nil) continue;
    
#line 704
    if ([((IOSClass *) nil_chk(paramType)) isArray] && [JavaUtilList_class_() isInstance:arg]) {
      (void) IOSObjectArray_Set(args, i, [((FreemarkerExtBeansBeansWrapper *) nil_chk(bw)) listToArrayWithJavaUtilList:(id<JavaUtilList>) check_protocol_cast(arg, @protocol(JavaUtilList)) withIOSClass:paramType withJavaUtilMap:nil]);
    }
    if ([[nil_chk(arg) getClass] isArray] && [paramType isAssignableFrom:JavaUtilList_class_()]) {
      (void) IOSObjectArray_Set(args, i, [((FreemarkerExtBeansBeansWrapper *) nil_chk(bw)) arrayToListWithId:arg]);
    }
    
#line 712
    if ([arg isKindOfClass:[FreemarkerExtBeansCharacterOrString class]]) {
      if (paramType == JavaLangCharacter_class_() || paramType == [IOSClass charClass] ||
#line 714
      (![paramType isAssignableFrom:NSString_class_()] &&
#line 715
      [paramType isAssignableFrom:JavaLangCharacter_class_()])) {
        (void) IOSObjectArray_Set(args, i, new_JavaLangCharacter_initWithChar_([((FreemarkerExtBeansCharacterOrString *) check_class_cast(arg, [FreemarkerExtBeansCharacterOrString class])) getAsChar]));
      }
      else {
        
#line 718
        (void) IOSObjectArray_Set(args, i, [((FreemarkerExtBeansCharacterOrString *) check_class_cast(arg, [FreemarkerExtBeansCharacterOrString class])) getAsString]);
      }
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerExtBeansArgumentTypes_SpecialConversionCallableMemberDescriptor)
