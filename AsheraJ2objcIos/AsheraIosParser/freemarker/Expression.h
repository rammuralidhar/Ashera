//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/Expression.java
//

#ifndef _FreemarkerCoreExpression_H_
#define _FreemarkerCoreExpression_H_

#include "J2ObjC_header.h"
#include "TemplateObject.h"

@class FreemarkerCoreEnvironment;
@class FreemarkerCoreExpression_ReplacemenetState;
@class FreemarkerTemplateConfiguration;
@class FreemarkerTemplateTemplate;
@protocol FreemarkerTemplateTemplateModel;

/**
 @brief <b>Internal API - subject to change:</b> Represent expression nodes in the parsed template.
 */
@interface FreemarkerCoreExpression : FreemarkerCoreTemplateObject {
 @public
  id<FreemarkerTemplateTemplateModel> constantValue_;
}

#pragma mark Public

- (instancetype)init;

/**
 */
- (id<FreemarkerTemplateTemplateModel>)getAsTemplateModelWithFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env;

#pragma mark Protected

/**
 @brief This should return an equivalent new expression object (or an identifier replacement expression).
 The position need not be filled, unless it will be different from the position of what we were cloning.
 */
- (FreemarkerCoreExpression *)deepCloneWithIdentifierReplaced_innerWithNSString:(NSString *)replacedIdentifier
                                                   withFreemarkerCoreExpression:(FreemarkerCoreExpression *)replacement
                                 withFreemarkerCoreExpression_ReplacemenetState:(FreemarkerCoreExpression_ReplacemenetState *)replacementState;

#pragma mark Package-Private

/**
 @param env might be <code>null</code> , if this kind of expression can be evaluated during parsing (as opposed to during template execution).
 */
- (id<FreemarkerTemplateTemplateModel>)_evalWithFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env;

- (void)assertNonNullWithFreemarkerTemplateTemplateModel:(id<FreemarkerTemplateTemplateModel>)model
                           withFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env;

+ (NSString *)coerceModelToStringWithFreemarkerTemplateTemplateModel:(id<FreemarkerTemplateTemplateModel>)tm
                                        withFreemarkerCoreExpression:(FreemarkerCoreExpression *)exp
                                       withFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env;

- (FreemarkerCoreExpression *)deepCloneWithIdentifierReplacedWithNSString:(NSString *)replacedIdentifier
                                             withFreemarkerCoreExpression:(FreemarkerCoreExpression *)replacement
                           withFreemarkerCoreExpression_ReplacemenetState:(FreemarkerCoreExpression_ReplacemenetState *)replacementState;

- (id<FreemarkerTemplateTemplateModel>)evalWithFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env;

- (NSString *)evalAndCoerceToStringWithFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env;

/**
 @param seqTip Tip to display if the value type is not coercable, but it's sequence or collection.
 */
- (NSString *)evalAndCoerceToStringWithFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env
                                                    withNSString:(NSString *)seqTip;

- (jboolean)evalToBooleanWithFreemarkerTemplateConfiguration:(FreemarkerTemplateConfiguration *)cfg;

- (jboolean)evalToBooleanWithFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env;

- (id<FreemarkerTemplateTemplateModel>)evalToNonMissingWithFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env;

- (NSNumber *)evalToNumberWithFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env;

+ (jboolean)isEmptyWithFreemarkerTemplateTemplateModel:(id<FreemarkerTemplateTemplateModel>)model;

- (jboolean)isLiteral;

- (jboolean)modelToBooleanWithFreemarkerTemplateTemplateModel:(id<FreemarkerTemplateTemplateModel>)model
                          withFreemarkerTemplateConfiguration:(FreemarkerTemplateConfiguration *)cfg;

- (jboolean)modelToBooleanWithFreemarkerTemplateTemplateModel:(id<FreemarkerTemplateTemplateModel>)model
                                withFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env;

- (NSNumber *)modelToNumberWithFreemarkerTemplateTemplateModel:(id<FreemarkerTemplateTemplateModel>)model
                                 withFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env;

- (void)setLocationWithFreemarkerTemplateTemplate:(FreemarkerTemplateTemplate *)template_
                                          withInt:(jint)beginColumn
                                          withInt:(jint)beginLine
                                          withInt:(jint)endColumn
                                          withInt:(jint)endLine;

@end

J2OBJC_EMPTY_STATIC_INIT(FreemarkerCoreExpression)

J2OBJC_FIELD_SETTER(FreemarkerCoreExpression, constantValue_, id<FreemarkerTemplateTemplateModel>)

FOUNDATION_EXPORT NSString *FreemarkerCoreExpression_coerceModelToStringWithFreemarkerTemplateTemplateModel_withFreemarkerCoreExpression_withFreemarkerCoreEnvironment_(id<FreemarkerTemplateTemplateModel> tm, FreemarkerCoreExpression *exp, FreemarkerCoreEnvironment *env);

FOUNDATION_EXPORT jboolean FreemarkerCoreExpression_isEmptyWithFreemarkerTemplateTemplateModel_(id<FreemarkerTemplateTemplateModel> model);

FOUNDATION_EXPORT void FreemarkerCoreExpression_init(FreemarkerCoreExpression *self);

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerCoreExpression)

@interface FreemarkerCoreExpression_ReplacemenetState : NSObject {
 @public
  /**
   @brief If the replacement expression is not in use yet, we don't have to clone it.
   */
  jboolean replacementAlreadyInUse_;
}

#pragma mark Package-Private

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(FreemarkerCoreExpression_ReplacemenetState)

FOUNDATION_EXPORT void FreemarkerCoreExpression_ReplacemenetState_init(FreemarkerCoreExpression_ReplacemenetState *self);

FOUNDATION_EXPORT FreemarkerCoreExpression_ReplacemenetState *new_FreemarkerCoreExpression_ReplacemenetState_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerCoreExpression_ReplacemenetState)

#endif // _FreemarkerCoreExpression_H_
