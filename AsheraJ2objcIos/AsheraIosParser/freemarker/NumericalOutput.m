//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/NumericalOutput.java
//


#include "Environment.h"
#include "Expression.h"
#include "IOSClass.h"
#include "Interpolation.h"
#include "J2ObjC_source.h"
#include "NumericalOutput.h"
#include "ParameterRole.h"
#include "StringUtil.h"
#include "TemplateException.h"
#include "java/io/IOException.h"
#include "java/io/Writer.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuffer.h"
#include "java/text/NumberFormat.h"
#include "java/util/Locale.h"

@class FreemarkerCoreNumericalOutput_FormatHolder;

#line 0 "/Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/NumericalOutput.java"

@interface FreemarkerCoreNumericalOutput () {
 @public
  FreemarkerCoreExpression *expression_;
  jboolean hasFormat_;
  jint minFracDigits_;
  jint maxFracDigits_;
  FreemarkerCoreNumericalOutput_FormatHolder *formatCache_;
}

@end

J2OBJC_FIELD_SETTER(FreemarkerCoreNumericalOutput, expression_, FreemarkerCoreExpression *)
J2OBJC_FIELD_SETTER(FreemarkerCoreNumericalOutput, formatCache_, FreemarkerCoreNumericalOutput_FormatHolder *)

@interface FreemarkerCoreNumericalOutput_FormatHolder : NSObject {
 @public
  JavaTextNumberFormat *format_;
  JavaUtilLocale *locale_;
}

- (instancetype)initWithJavaTextNumberFormat:(JavaTextNumberFormat *)format
                          withJavaUtilLocale:(JavaUtilLocale *)locale;

@end

J2OBJC_EMPTY_STATIC_INIT(FreemarkerCoreNumericalOutput_FormatHolder)

J2OBJC_FIELD_SETTER(FreemarkerCoreNumericalOutput_FormatHolder, format_, JavaTextNumberFormat *)
J2OBJC_FIELD_SETTER(FreemarkerCoreNumericalOutput_FormatHolder, locale_, JavaUtilLocale *)

__attribute__((unused)) static void FreemarkerCoreNumericalOutput_FormatHolder_initWithJavaTextNumberFormat_withJavaUtilLocale_(FreemarkerCoreNumericalOutput_FormatHolder *self, JavaTextNumberFormat *format, JavaUtilLocale *locale);

__attribute__((unused)) static FreemarkerCoreNumericalOutput_FormatHolder *new_FreemarkerCoreNumericalOutput_FormatHolder_initWithJavaTextNumberFormat_withJavaUtilLocale_(JavaTextNumberFormat *format, JavaUtilLocale *locale) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerCoreNumericalOutput_FormatHolder)


#line 29
@implementation FreemarkerCoreNumericalOutput


#line 37
- (instancetype)initWithFreemarkerCoreExpression:(FreemarkerCoreExpression *)expression {
  FreemarkerCoreNumericalOutput_initWithFreemarkerCoreExpression_(self, expression);
  return self;
}


#line 44
- (instancetype)initWithFreemarkerCoreExpression:(FreemarkerCoreExpression *)expression
                                         withInt:(jint)minFracDigits
                                         withInt:(jint)maxFracDigits {
  FreemarkerCoreNumericalOutput_initWithFreemarkerCoreExpression_withInt_withInt_(self, expression, minFracDigits, maxFracDigits);
  return self;
}


#line 54
- (void)acceptWithFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env {
  
#line 56
  NSNumber *num = [((FreemarkerCoreExpression *) nil_chk(expression_)) evalToNumberWithFreemarkerCoreEnvironment:env];
  
#line 58
  FreemarkerCoreNumericalOutput_FormatHolder *fmth = formatCache_;
  if (fmth == nil || ![((JavaUtilLocale *) nil_chk(fmth->locale_)) isEqual:[((FreemarkerCoreEnvironment *) nil_chk(env)) getLocale]]) {
    @synchronized(self) {
      fmth = formatCache_;
      if (fmth == nil || ![((JavaUtilLocale *) nil_chk(fmth->locale_)) isEqual:[((FreemarkerCoreEnvironment *) nil_chk(env)) getLocale]]) {
        JavaTextNumberFormat *fmt = JavaTextNumberFormat_getNumberInstanceWithJavaUtilLocale_([((FreemarkerCoreEnvironment *) nil_chk(env)) getLocale]);
        if (hasFormat_) {
          [((JavaTextNumberFormat *) nil_chk(fmt)) setMinimumFractionDigitsWithInt:minFracDigits_];
          [fmt setMaximumFractionDigitsWithInt:maxFracDigits_];
        }
        else {
          
#line 68
          [((JavaTextNumberFormat *) nil_chk(fmt)) setMinimumFractionDigitsWithInt:0];
          [fmt setMaximumFractionDigitsWithInt:50];
        }
        [((JavaTextNumberFormat *) nil_chk(fmt)) setGroupingUsedWithBoolean:NO];
        formatCache_ = new_FreemarkerCoreNumericalOutput_FormatHolder_initWithJavaTextNumberFormat_withJavaUtilLocale_(fmt, [env getLocale]);
        fmth = formatCache_;
      }
    }
  }
  
#line 80
  [((JavaIoWriter *) nil_chk([((FreemarkerCoreEnvironment *) nil_chk(env)) getOut])) writeWithNSString:[((JavaTextNumberFormat *) nil_chk(((FreemarkerCoreNumericalOutput_FormatHolder *) nil_chk(fmth))->format_)) formatWithId:num]];
}


#line 83
- (NSString *)dumpWithBoolean:(jboolean)canonical
                  withBoolean:(jboolean)inStringLiteral {
  JavaLangStringBuffer *buf = new_JavaLangStringBuffer_initWithNSString_(@"#{");
  NSString *exprCF = [((FreemarkerCoreExpression *) nil_chk(expression_)) getCanonicalForm];
  (void) [buf appendWithNSString:inStringLiteral ? FreemarkerTemplateUtilityStringUtil_FTLStringLiteralEncWithNSString_withChar_(exprCF, '"') : exprCF];
  if (hasFormat_) {
    (void) [buf appendWithNSString:@" ; "];
    (void) [buf appendWithNSString:@"m"];
    (void) [buf appendWithInt:minFracDigits_];
    (void) [buf appendWithNSString:@"M"];
    (void) [buf appendWithInt:maxFracDigits_];
  }
  (void) [buf appendWithNSString:@"}"];
  return [buf description];
}


#line 98
- (NSString *)getNodeTypeSymbol {
  return @"#{...}";
}

- (jboolean)heedsOpeningWhitespace {
  return YES;
}

- (jboolean)heedsTrailingWhitespace {
  return YES;
}


#line 120
- (jint)getParameterCount {
  return 3;
}

- (id)getParameterValueWithInt:(jint)idx {
  switch (idx) {
    case 0:
    
#line 126
    return expression_;
    case 1:
    
#line 127
    return new_JavaLangInteger_initWithInt_(minFracDigits_);
    case 2:
    
#line 128
    return new_JavaLangInteger_initWithInt_(maxFracDigits_);
    default:
    
#line 129
    @throw new_JavaLangIndexOutOfBoundsException_init();
  }
}


#line 133
- (FreemarkerCoreParameterRole *)getParameterRoleWithInt:(jint)idx {
  switch (idx) {
    case 0:
    
#line 135
    return FreemarkerCoreParameterRole_get_CONTENT_();
    case 1:
    
#line 136
    return FreemarkerCoreParameterRole_get_MINIMUM_DECIMALS_();
    case 2:
    
#line 137
    return FreemarkerCoreParameterRole_get_MAXIMUM_DECIMALS_();
    default:
    
#line 138
    @throw new_JavaLangIndexOutOfBoundsException_init();
  }
}


#line 142
- (jboolean)isNestedBlockRepeater {
  return NO;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithFreemarkerCoreExpression:", "NumericalOutput", NULL, 0x0, NULL, NULL },
    { "initWithFreemarkerCoreExpression:withInt:withInt:", "NumericalOutput", NULL, 0x0, NULL, NULL },
    { "acceptWithFreemarkerCoreEnvironment:", "accept", "V", 0x0, "Lfreemarker.template.TemplateException;Ljava.io.IOException;", NULL },
    { "dumpWithBoolean:withBoolean:", "dump", "Ljava.lang.String;", 0x4, NULL, NULL },
    { "getNodeTypeSymbol", NULL, "Ljava.lang.String;", 0x0, NULL, NULL },
    { "heedsOpeningWhitespace", NULL, "Z", 0x0, NULL, NULL },
    { "heedsTrailingWhitespace", NULL, "Z", 0x0, NULL, NULL },
    { "getParameterCount", NULL, "I", 0x0, NULL, NULL },
    { "getParameterValueWithInt:", "getParameterValue", "Ljava.lang.Object;", 0x0, NULL, NULL },
    { "getParameterRoleWithInt:", "getParameterRole", "Lfreemarker.core.ParameterRole;", 0x0, NULL, NULL },
    { "isNestedBlockRepeater", NULL, "Z", 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "expression_", NULL, 0x12, "Lfreemarker.core.Expression;", NULL, NULL,  },
    { "hasFormat_", NULL, 0x12, "Z", NULL, NULL,  },
    { "minFracDigits_", NULL, 0x12, "I", NULL, NULL,  },
    { "maxFracDigits_", NULL, 0x12, "I", NULL, NULL,  },
    { "formatCache_", NULL, 0x42, "Lfreemarker.core.NumericalOutput$FormatHolder;", NULL, NULL,  },
  };
  static const char *inner_classes[] = {"Lfreemarker.core.NumericalOutput$FormatHolder;"};
  static const J2ObjcClassInfo _FreemarkerCoreNumericalOutput = { 2, "NumericalOutput", "freemarker.core", NULL, 0x10, 11, methods, 5, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_FreemarkerCoreNumericalOutput;
}

@end


#line 37
void FreemarkerCoreNumericalOutput_initWithFreemarkerCoreExpression_(FreemarkerCoreNumericalOutput *self, FreemarkerCoreExpression *expression) {
  (void) FreemarkerCoreInterpolation_init(self);
  
#line 38
  self->expression_ = expression;
  self->hasFormat_ = NO;
  self->minFracDigits_ = 0;
  self->maxFracDigits_ = 0;
}


#line 37
FreemarkerCoreNumericalOutput *new_FreemarkerCoreNumericalOutput_initWithFreemarkerCoreExpression_(FreemarkerCoreExpression *expression) {
  FreemarkerCoreNumericalOutput *self = [FreemarkerCoreNumericalOutput alloc];
  FreemarkerCoreNumericalOutput_initWithFreemarkerCoreExpression_(self, expression);
  return self;
}


#line 44
void FreemarkerCoreNumericalOutput_initWithFreemarkerCoreExpression_withInt_withInt_(FreemarkerCoreNumericalOutput *self, FreemarkerCoreExpression *expression, jint minFracDigits, jint maxFracDigits) {
  (void) FreemarkerCoreInterpolation_init(self);
  
#line 48
  self->expression_ = expression;
  self->hasFormat_ = YES;
  self->minFracDigits_ = minFracDigits;
  self->maxFracDigits_ = maxFracDigits;
}


#line 44
FreemarkerCoreNumericalOutput *new_FreemarkerCoreNumericalOutput_initWithFreemarkerCoreExpression_withInt_withInt_(FreemarkerCoreExpression *expression, jint minFracDigits, jint maxFracDigits) {
  FreemarkerCoreNumericalOutput *self = [FreemarkerCoreNumericalOutput alloc];
  FreemarkerCoreNumericalOutput_initWithFreemarkerCoreExpression_withInt_withInt_(self, expression, minFracDigits, maxFracDigits);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreNumericalOutput)


#line 110
@implementation FreemarkerCoreNumericalOutput_FormatHolder


#line 114
- (instancetype)initWithJavaTextNumberFormat:(JavaTextNumberFormat *)format
                          withJavaUtilLocale:(JavaUtilLocale *)locale {
  FreemarkerCoreNumericalOutput_FormatHolder_initWithJavaTextNumberFormat_withJavaUtilLocale_(self, format, locale);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaTextNumberFormat:withJavaUtilLocale:", "FormatHolder", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "format_", NULL, 0x10, "Ljava.text.NumberFormat;", NULL, NULL,  },
    { "locale_", NULL, 0x10, "Ljava.util.Locale;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerCoreNumericalOutput_FormatHolder = { 2, "FormatHolder", "freemarker.core", "NumericalOutput", 0xa, 1, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerCoreNumericalOutput_FormatHolder;
}

@end


#line 114
void FreemarkerCoreNumericalOutput_FormatHolder_initWithJavaTextNumberFormat_withJavaUtilLocale_(FreemarkerCoreNumericalOutput_FormatHolder *self, JavaTextNumberFormat *format, JavaUtilLocale *locale) {
  (void) NSObject_init(self);
  
#line 115
  self->format_ = format;
  self->locale_ = locale;
}


#line 114
FreemarkerCoreNumericalOutput_FormatHolder *new_FreemarkerCoreNumericalOutput_FormatHolder_initWithJavaTextNumberFormat_withJavaUtilLocale_(JavaTextNumberFormat *format, JavaUtilLocale *locale) {
  FreemarkerCoreNumericalOutput_FormatHolder *self = [FreemarkerCoreNumericalOutput_FormatHolder alloc];
  FreemarkerCoreNumericalOutput_FormatHolder_initWithJavaTextNumberFormat_withJavaUtilLocale_(self, format, locale);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreNumericalOutput_FormatHolder)
