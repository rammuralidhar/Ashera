//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/template/SimpleHash.java
//


#include "BeansWrapper.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "ObjectWrapper.h"
#include "SimpleCollection.h"
#include "SimpleHash.h"
#include "TemplateBooleanModel.h"
#include "TemplateCollectionModel.h"
#include "TemplateModel.h"
#include "TemplateModelException.h"
#include "WrappingTemplateModel.h"
#include "_DelayedJQuote.h"
#include "_TemplateModelException.h"
#include "java/lang/Character.h"
#include "java/lang/ClassCastException.h"
#include "java/lang/Exception.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/Thread.h"
#include "java/util/Collection.h"
#include "java/util/ConcurrentModificationException.h"
#include "java/util/HashMap.h"
#include "java/util/Iterator.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/SortedMap.h"
#include "java/util/TreeMap.h"

#line 0 "/Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/template/SimpleHash.java"

@interface FreemarkerTemplateSimpleHash () {
 @public
  id<JavaUtilMap> map_;
  jboolean putFailed_;
  id<JavaUtilMap> unwrappedMap_;
}

@end

J2OBJC_FIELD_SETTER(FreemarkerTemplateSimpleHash, map_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(FreemarkerTemplateSimpleHash, unwrappedMap_, id<JavaUtilMap>)

@interface FreemarkerTemplateSimpleHash_SynchronizedHash : FreemarkerTemplateSimpleHash {
 @public
  FreemarkerTemplateSimpleHash *this$0_;
}

- (jboolean)isEmpty;

- (void)putWithNSString:(NSString *)key
                 withId:(id)obj;

- (id<FreemarkerTemplateTemplateModel>)getWithNSString:(NSString *)key;

- (void)removeWithNSString:(NSString *)key;

- (jint)size;

- (id<FreemarkerTemplateTemplateCollectionModel>)keys;

- (id<FreemarkerTemplateTemplateCollectionModel>)values;

- (id<JavaUtilMap>)toMap;

- (instancetype)initWithFreemarkerTemplateSimpleHash:(FreemarkerTemplateSimpleHash *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(FreemarkerTemplateSimpleHash_SynchronizedHash)

J2OBJC_FIELD_SETTER(FreemarkerTemplateSimpleHash_SynchronizedHash, this$0_, FreemarkerTemplateSimpleHash *)

__attribute__((unused)) static void FreemarkerTemplateSimpleHash_SynchronizedHash_initWithFreemarkerTemplateSimpleHash_(FreemarkerTemplateSimpleHash_SynchronizedHash *self, FreemarkerTemplateSimpleHash *outer$);

__attribute__((unused)) static FreemarkerTemplateSimpleHash_SynchronizedHash *new_FreemarkerTemplateSimpleHash_SynchronizedHash_initWithFreemarkerTemplateSimpleHash_(FreemarkerTemplateSimpleHash *outer$) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerTemplateSimpleHash_SynchronizedHash)


#line 71
@implementation FreemarkerTemplateSimpleHash


#line 83
- (instancetype)init {
  FreemarkerTemplateSimpleHash_init(self);
  return self;
}


#line 98
- (instancetype)initWithJavaUtilMap:(id<JavaUtilMap>)map {
  FreemarkerTemplateSimpleHash_initWithJavaUtilMap_(self, map);
  return self;
}


#line 109
- (instancetype)initWithFreemarkerTemplateObjectWrapper:(id<FreemarkerTemplateObjectWrapper>)wrapper {
  FreemarkerTemplateSimpleHash_initWithFreemarkerTemplateObjectWrapper_(self, wrapper);
  return self;
}


#line 126
- (instancetype)initWithJavaUtilMap:(id<JavaUtilMap>)map
withFreemarkerTemplateObjectWrapper:(id<FreemarkerTemplateObjectWrapper>)wrapper {
  FreemarkerTemplateSimpleHash_initWithJavaUtilMap_withFreemarkerTemplateObjectWrapper_(self, map, wrapper);
  return self;
}


#line 148
- (id<JavaUtilMap>)copyMapWithJavaUtilMap:(id<JavaUtilMap>)map {
  if ([map isKindOfClass:[JavaUtilHashMap class]]) {
    return (id<JavaUtilMap>) check_protocol_cast([((JavaUtilHashMap *) nil_chk(((JavaUtilHashMap *) check_class_cast(map, [JavaUtilHashMap class])))) clone], @protocol(JavaUtilMap));
  }
  if ([JavaUtilSortedMap_class_() isInstance:map]) {
    if ([map isKindOfClass:[JavaUtilTreeMap class]]) {
      return (id<JavaUtilMap>) check_protocol_cast([((JavaUtilTreeMap *) nil_chk(((JavaUtilTreeMap *) check_class_cast(map, [JavaUtilTreeMap class])))) clone], @protocol(JavaUtilMap));
    }
    else {
      return new_JavaUtilTreeMap_initWithJavaUtilSortedMap_((id<JavaUtilSortedMap>) check_protocol_cast(map, @protocol(JavaUtilSortedMap)));
    }
  }
  return new_JavaUtilHashMap_initWithJavaUtilMap_(map);
}


#line 172
- (void)putWithNSString:(NSString *)key
                 withId:(id)value {
  (void) [((id<JavaUtilMap>) nil_chk(map_)) putWithId:key withId:value];
  unwrappedMap_ = nil;
}


#line 184
- (void)putWithNSString:(NSString *)key
            withBoolean:(jboolean)b {
  [self putWithNSString:key withId:b ? FreemarkerTemplateTemplateBooleanModel_get_TRUE__() : FreemarkerTemplateTemplateBooleanModel_get_FALSE__()];
}


#line 188
- (id<FreemarkerTemplateTemplateModel>)getWithNSString:(NSString *)key {
  id result;
  @try {
    result = [((id<JavaUtilMap>) nil_chk(map_)) getWithId:key];
  }
  @catch (
#line 192
  JavaLangClassCastException *e) {
    @throw new_FreemarkerCore_TemplateModelException_initWithJavaLangThrowable_withNSObjectArray_(
#line 194
    e, [IOSObjectArray newArrayWithObjects:(id[]){
#line 195
      @"ClassCastException while getting Map entry with String key ", new_FreemarkerCore_DelayedJQuote_initWithId_(
#line 196
      key) } count:2 type:NSObject_class_()]);
    }
    @catch (JavaLangNullPointerException *e) {
      @throw new_FreemarkerCore_TemplateModelException_initWithJavaLangThrowable_withNSObjectArray_(
#line 200
      e, [IOSObjectArray newArrayWithObjects:(id[]){
#line 201
        @"NullPointerException while getting Map entry with String key ", new_FreemarkerCore_DelayedJQuote_initWithId_(
#line 202
        key) } count:2 type:NSObject_class_()]);
      }
      
#line 210
      id putKey = nil;
      if (result == nil) {
        
#line 214
        if (((jint) [((NSString *) nil_chk(key)) length]) == 1 && !([JavaUtilSortedMap_class_() isInstance:map_])) {
          JavaLangCharacter *charKey = new_JavaLangCharacter_initWithChar_([key charAtWithInt:0]);
          @try {
            result = [((id<JavaUtilMap>) nil_chk(map_)) getWithId:charKey];
            if (result != nil || [map_ containsKeyWithId:charKey]) {
              putKey = charKey;
            }
          }
          @catch (
#line 221
          JavaLangClassCastException *e) {
            @throw new_FreemarkerCore_TemplateModelException_initWithJavaLangThrowable_withNSObjectArray_(
#line 223
            e, [IOSObjectArray newArrayWithObjects:(id[]){
#line 224
              @"ClassCastException while getting Map entry with Character key ", new_FreemarkerCore_DelayedJQuote_initWithId_(
#line 225
              key) } count:2 type:NSObject_class_()]);
            }
            @catch (JavaLangNullPointerException *e) {
              @throw new_FreemarkerCore_TemplateModelException_initWithJavaLangThrowable_withNSObjectArray_(
#line 229
              e, [IOSObjectArray newArrayWithObjects:(id[]){
#line 230
                @"NullPointerException while getting Map entry with Character key ", new_FreemarkerCore_DelayedJQuote_initWithId_(
#line 231
                key) } count:2 type:NSObject_class_()]);
              }
            }
            
#line 235
            if (putKey == nil) {
              if (![((id<JavaUtilMap>) nil_chk(map_)) containsKeyWithId:key]) {
                return nil;
              }
              else {
                
#line 239
                putKey = key;
              }
            }
          }
          else {
            
#line 243
            putKey = key;
          }
          
#line 246
          if ([FreemarkerTemplateTemplateModel_class_() isInstance:result]) {
            return (id<FreemarkerTemplateTemplateModel>) check_protocol_cast(result, @protocol(FreemarkerTemplateTemplateModel));
          }
          
#line 250
          id<FreemarkerTemplateTemplateModel> tm = [self wrapWithId:result];
          if (!putFailed_) {
            @try {
              (void) [((id<JavaUtilMap>) nil_chk(map_)) putWithId:putKey withId:tm];
            }
            @catch (
#line 254
            JavaLangException *e) {
              
#line 256
              putFailed_ = YES;
            }
          }
          return tm;
        }


#line 266
- (jboolean)containsKeyWithNSString:(NSString *)key {
  return [((id<JavaUtilMap>) nil_chk(map_)) containsKeyWithId:key];
}


#line 275
- (void)removeWithNSString:(NSString *)key {
  (void) [((id<JavaUtilMap>) nil_chk(map_)) removeWithId:key];
}


#line 284
- (void)putAllWithJavaUtilMap:(id<JavaUtilMap>)m {
  for (id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(m)) entrySet])) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    id<JavaUtilMap_Entry> entry_ = (id<JavaUtilMap_Entry>) check_protocol_cast([it next], @protocol(JavaUtilMap_Entry));
    [self putWithNSString:(NSString *) check_class_cast([((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey], [NSString class]) withId:[entry_ getValue]];
  }
}


#line 298
- (id<JavaUtilMap>)toMap {
  if (unwrappedMap_ == nil) {
    IOSClass *mapClass = [((id<JavaUtilMap>) nil_chk(self->map_)) getClass];
    id<JavaUtilMap> m = nil;
    @try {
      m = (id<JavaUtilMap>) check_protocol_cast([mapClass newInstance], @protocol(JavaUtilMap));
    }
    @catch (
#line 304
    JavaLangException *e) {
      @throw new_FreemarkerTemplateTemplateModelException_initWithNSString_(JreStrcat("$$C$", @"Error instantiating map of type ", [mapClass getName], 0x000a, [((JavaLangException *) nil_chk(e)) getMessage]));
    }
    
#line 309
    FreemarkerExtBeansBeansWrapper *bw = FreemarkerExtBeansBeansWrapper_getDefaultInstance();
    for (id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk([map_ entrySet])) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
      id<JavaUtilMap_Entry> entry_ = (id<JavaUtilMap_Entry>) check_protocol_cast([it next], @protocol(JavaUtilMap_Entry));
      id key = [((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey];
      id value = [entry_ getValue];
      if ([FreemarkerTemplateTemplateModel_class_() isInstance:value]) {
        value = [((FreemarkerExtBeansBeansWrapper *) nil_chk(bw)) unwrapWithFreemarkerTemplateTemplateModel:(id<FreemarkerTemplateTemplateModel>) check_protocol_cast(value, @protocol(FreemarkerTemplateTemplateModel))];
      }
      (void) [((id<JavaUtilMap>) nil_chk(m)) putWithId:key withId:value];
    }
    unwrappedMap_ = m;
  }
  return unwrappedMap_;
}

- (NSString *)description {
  return [((id<JavaUtilMap>) nil_chk(map_)) description];
}

- (jint)size {
  return [((id<JavaUtilMap>) nil_chk(map_)) size];
}

- (jboolean)isEmpty {
  return map_ == nil || [map_ isEmpty];
}

- (id<FreemarkerTemplateTemplateCollectionModel>)keys {
  return new_FreemarkerTemplateSimpleCollection_initWithJavaUtilCollection_withFreemarkerTemplateObjectWrapper_([((id<JavaUtilMap>) nil_chk(map_)) keySet], [self getObjectWrapper]);
}

- (id<FreemarkerTemplateTemplateCollectionModel>)values {
  return new_FreemarkerTemplateSimpleCollection_initWithJavaUtilCollection_withFreemarkerTemplateObjectWrapper_([((id<JavaUtilMap>) nil_chk(map_)) values], [self getObjectWrapper]);
}

- (FreemarkerTemplateSimpleHash *)synchronizedWrapper {
  return new_FreemarkerTemplateSimpleHash_SynchronizedHash_initWithFreemarkerTemplateSimpleHash_(self);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "SimpleHash", NULL, 0x1, NULL, NULL },
    { "initWithJavaUtilMap:", "SimpleHash", NULL, 0x1, NULL, NULL },
    { "initWithFreemarkerTemplateObjectWrapper:", "SimpleHash", NULL, 0x1, NULL, NULL },
    { "initWithJavaUtilMap:withFreemarkerTemplateObjectWrapper:", "SimpleHash", NULL, 0x1, NULL, NULL },
    { "copyMapWithJavaUtilMap:", "copyMap", "Ljava.util.Map;", 0x4, NULL, NULL },
    { "putWithNSString:withId:", "put", "V", 0x1, NULL, NULL },
    { "putWithNSString:withBoolean:", "put", "V", 0x1, NULL, NULL },
    { "getWithNSString:", "get", "Lfreemarker.template.TemplateModel;", 0x1, "Lfreemarker.template.TemplateModelException;", NULL },
    { "containsKeyWithNSString:", "containsKey", "Z", 0x1, NULL, NULL },
    { "removeWithNSString:", "remove", "V", 0x1, NULL, NULL },
    { "putAllWithJavaUtilMap:", "putAll", "V", 0x1, NULL, NULL },
    { "toMap", NULL, "Ljava.util.Map;", 0x1, "Lfreemarker.template.TemplateModelException;", NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "size", NULL, "I", 0x1, NULL, NULL },
    { "isEmpty", NULL, "Z", 0x1, NULL, NULL },
    { "keys", NULL, "Lfreemarker.template.TemplateCollectionModel;", 0x1, NULL, NULL },
    { "values", NULL, "Lfreemarker.template.TemplateCollectionModel;", 0x1, NULL, NULL },
    { "synchronizedWrapper", NULL, "Lfreemarker.template.SimpleHash;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "map_", NULL, 0x12, "Ljava.util.Map;", NULL, NULL,  },
    { "putFailed_", NULL, 0x2, "Z", NULL, NULL,  },
    { "unwrappedMap_", NULL, 0x2, "Ljava.util.Map;", NULL, NULL,  },
  };
  static const char *inner_classes[] = {"Lfreemarker.template.SimpleHash$SynchronizedHash;"};
  static const J2ObjcClassInfo _FreemarkerTemplateSimpleHash = { 2, "SimpleHash", "freemarker.template", NULL, 0x1, 18, methods, 3, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_FreemarkerTemplateSimpleHash;
}

@end


#line 83
void FreemarkerTemplateSimpleHash_init(FreemarkerTemplateSimpleHash *self) {
  (void) FreemarkerTemplateSimpleHash_initWithFreemarkerTemplateObjectWrapper_(self, nil);
}


#line 83
FreemarkerTemplateSimpleHash *new_FreemarkerTemplateSimpleHash_init() {
  FreemarkerTemplateSimpleHash *self = [FreemarkerTemplateSimpleHash alloc];
  FreemarkerTemplateSimpleHash_init(self);
  return self;
}


#line 98
void FreemarkerTemplateSimpleHash_initWithJavaUtilMap_(FreemarkerTemplateSimpleHash *self, id<JavaUtilMap> map) {
  (void) FreemarkerTemplateSimpleHash_initWithJavaUtilMap_withFreemarkerTemplateObjectWrapper_(self, map, nil);
}


#line 98
FreemarkerTemplateSimpleHash *new_FreemarkerTemplateSimpleHash_initWithJavaUtilMap_(id<JavaUtilMap> map) {
  FreemarkerTemplateSimpleHash *self = [FreemarkerTemplateSimpleHash alloc];
  FreemarkerTemplateSimpleHash_initWithJavaUtilMap_(self, map);
  return self;
}


#line 109
void FreemarkerTemplateSimpleHash_initWithFreemarkerTemplateObjectWrapper_(FreemarkerTemplateSimpleHash *self, id<FreemarkerTemplateObjectWrapper> wrapper) {
  (void) FreemarkerTemplateWrappingTemplateModel_initWithFreemarkerTemplateObjectWrapper_(self, wrapper);
  self->map_ = new_JavaUtilHashMap_init();
}


#line 109
FreemarkerTemplateSimpleHash *new_FreemarkerTemplateSimpleHash_initWithFreemarkerTemplateObjectWrapper_(id<FreemarkerTemplateObjectWrapper> wrapper) {
  FreemarkerTemplateSimpleHash *self = [FreemarkerTemplateSimpleHash alloc];
  FreemarkerTemplateSimpleHash_initWithFreemarkerTemplateObjectWrapper_(self, wrapper);
  return self;
}


#line 126
void FreemarkerTemplateSimpleHash_initWithJavaUtilMap_withFreemarkerTemplateObjectWrapper_(FreemarkerTemplateSimpleHash *self, id<JavaUtilMap> map, id<FreemarkerTemplateObjectWrapper> wrapper) {
  (void) FreemarkerTemplateWrappingTemplateModel_initWithFreemarkerTemplateObjectWrapper_(self, wrapper);
  id<JavaUtilMap> mapCopy;
  @try {
    mapCopy = [self copyMapWithJavaUtilMap:map];
  }
  @catch (
#line 131
  JavaUtilConcurrentModificationException *cme) {
    
#line 137
    @try {
      JavaLangThread_sleepWithLong_(5);
    }
    @catch (
#line 139
    JavaLangInterruptedException *ie) {
    }
    @synchronized(map) {
      mapCopy = [self copyMapWithJavaUtilMap:map];
    }
  }
  self->map_ = mapCopy;
}


#line 126
FreemarkerTemplateSimpleHash *new_FreemarkerTemplateSimpleHash_initWithJavaUtilMap_withFreemarkerTemplateObjectWrapper_(id<JavaUtilMap> map, id<FreemarkerTemplateObjectWrapper> wrapper) {
  FreemarkerTemplateSimpleHash *self = [FreemarkerTemplateSimpleHash alloc];
  FreemarkerTemplateSimpleHash_initWithJavaUtilMap_withFreemarkerTemplateObjectWrapper_(self, map, wrapper);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerTemplateSimpleHash)


#line 351
@implementation FreemarkerTemplateSimpleHash_SynchronizedHash

- (jboolean)isEmpty {
  @synchronized(this$0_) {
    return [this$0_ isEmpty];
  }
}

- (void)putWithNSString:(NSString *)key
                 withId:(id)obj {
  @synchronized(this$0_) {
    [this$0_ putWithNSString:key withId:obj];
  }
}


#line 365
- (id<FreemarkerTemplateTemplateModel>)getWithNSString:(NSString *)key {
  @synchronized(this$0_) {
    return [this$0_ getWithNSString:key];
  }
}

- (void)removeWithNSString:(NSString *)key {
  @synchronized(this$0_) {
    [this$0_ removeWithNSString:key];
  }
}

- (jint)size {
  @synchronized(this$0_) {
    return [this$0_ size];
  }
}

- (id<FreemarkerTemplateTemplateCollectionModel>)keys {
  @synchronized(this$0_) {
    return [this$0_ keys];
  }
}

- (id<FreemarkerTemplateTemplateCollectionModel>)values {
  @synchronized(this$0_) {
    return [this$0_ values];
  }
}

- (id<JavaUtilMap>)toMap {
  @synchronized(this$0_) {
    return [this$0_ toMap];
  }
}

- (instancetype)initWithFreemarkerTemplateSimpleHash:(FreemarkerTemplateSimpleHash *)outer$ {
  FreemarkerTemplateSimpleHash_SynchronizedHash_initWithFreemarkerTemplateSimpleHash_(self, outer$);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "isEmpty", NULL, "Z", 0x1, NULL, NULL },
    { "putWithNSString:withId:", "put", "V", 0x1, NULL, NULL },
    { "getWithNSString:", "get", "Lfreemarker.template.TemplateModel;", 0x1, "Lfreemarker.template.TemplateModelException;", NULL },
    { "removeWithNSString:", "remove", "V", 0x1, NULL, NULL },
    { "size", NULL, "I", 0x1, NULL, NULL },
    { "keys", NULL, "Lfreemarker.template.TemplateCollectionModel;", 0x1, NULL, NULL },
    { "values", NULL, "Lfreemarker.template.TemplateCollectionModel;", 0x1, NULL, NULL },
    { "toMap", NULL, "Ljava.util.Map;", 0x1, "Lfreemarker.template.TemplateModelException;", NULL },
    { "initWithFreemarkerTemplateSimpleHash:", "init", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lfreemarker.template.SimpleHash;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerTemplateSimpleHash_SynchronizedHash = { 2, "SynchronizedHash", "freemarker.template", "SimpleHash", 0x2, 9, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerTemplateSimpleHash_SynchronizedHash;
}

@end

void FreemarkerTemplateSimpleHash_SynchronizedHash_initWithFreemarkerTemplateSimpleHash_(FreemarkerTemplateSimpleHash_SynchronizedHash *self, FreemarkerTemplateSimpleHash *outer$) {
  self->this$0_ = outer$;
  (void) FreemarkerTemplateSimpleHash_init(self);
}

FreemarkerTemplateSimpleHash_SynchronizedHash *new_FreemarkerTemplateSimpleHash_SynchronizedHash_initWithFreemarkerTemplateSimpleHash_(FreemarkerTemplateSimpleHash *outer$) {
  FreemarkerTemplateSimpleHash_SynchronizedHash *self = [FreemarkerTemplateSimpleHash_SynchronizedHash alloc];
  FreemarkerTemplateSimpleHash_SynchronizedHash_initWithFreemarkerTemplateSimpleHash_(self, outer$);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerTemplateSimpleHash_SynchronizedHash)
