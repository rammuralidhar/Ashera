//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/Macro.java
//


#include "Environment.h"
#include "Expression.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "InvalidReferenceException.h"
#include "J2ObjC_source.h"
#include "Macro.h"
#include "MessageUtil.h"
#include "ParameterRole.h"
#include "TemplateCollectionModel.h"
#include "TemplateElement.h"
#include "TemplateException.h"
#include "TemplateModel.h"
#include "TemplateModelException.h"
#include "TemplateModelIterator.h"
#include "TextBlock.h"
#include "_CoreStringUtils.h"
#include "_DelayedJQuote.h"
#include "_ErrorDescriptionBuilder.h"
#include "_MiscTemplateException.h"
#include "java/io/IOException.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuffer.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/HashSet.h"
#include "java/util/List.h"
#include "java/util/Map.h"

#line 0 "/Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/Macro.java"

@interface FreemarkerCoreMacro () {
 @public
  NSString *name_;
  IOSObjectArray *paramNames_;
  id<JavaUtilMap> paramDefaults_;
  NSString *catchAllParamName_;
  jboolean function_;
}

@end

J2OBJC_FIELD_SETTER(FreemarkerCoreMacro, name_, NSString *)
J2OBJC_FIELD_SETTER(FreemarkerCoreMacro, paramNames_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(FreemarkerCoreMacro, paramDefaults_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(FreemarkerCoreMacro, catchAllParamName_, NSString *)

@interface FreemarkerCoreMacro_Context () {
 @public
  FreemarkerCoreMacro *this$0_;
}

@end

J2OBJC_FIELD_SETTER(FreemarkerCoreMacro_Context, this$0_, FreemarkerCoreMacro *)

J2OBJC_INITIALIZED_DEFN(FreemarkerCoreMacro)

FreemarkerCoreMacro *FreemarkerCoreMacro_DO_NOTHING_MACRO_;


#line 37
@implementation FreemarkerCoreMacro


#line 54
- (instancetype)initWithNSString:(NSString *)name
                withJavaUtilList:(id<JavaUtilList>)argumentNames
                 withJavaUtilMap:(id<JavaUtilMap>)args
                    withNSString:(NSString *)catchAllParamName
                     withBoolean:(jboolean)function
withFreemarkerCoreTemplateElement:(FreemarkerCoreTemplateElement *)nestedBlock {
  FreemarkerCoreMacro_initWithNSString_withJavaUtilList_withJavaUtilMap_withNSString_withBoolean_withFreemarkerCoreTemplateElement_(self, name, argumentNames, args, catchAllParamName, function, nestedBlock);
  return self;
}


#line 69
- (NSString *)getCatchAll {
  return catchAllParamName_;
}

- (IOSObjectArray *)getArgumentNames {
  return (IOSObjectArray *) check_class_cast([((IOSObjectArray *) nil_chk(paramNames_)) clone], [IOSObjectArray class]);
}

- (IOSObjectArray *)getArgumentNamesInternal {
  return paramNames_;
}

- (jboolean)hasArgNamedWithNSString:(NSString *)name {
  return [((id<JavaUtilMap>) nil_chk(paramDefaults_)) containsKeyWithId:name];
}

- (NSString *)getName {
  return name_;
}

- (void)acceptWithFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env {
  [((FreemarkerCoreEnvironment *) nil_chk(env)) visitMacroDefWithFreemarkerCoreMacro:self];
}

- (NSString *)dumpWithBoolean:(jboolean)canonical {
  JavaLangStringBuffer *sb = new_JavaLangStringBuffer_init();
  if (canonical) (void) [sb appendWithChar:'<'];
  (void) [sb appendWithNSString:[self getNodeTypeSymbol]];
  (void) [sb appendWithChar:' '];
  (void) [sb appendWithNSString:FreemarkerCore_CoreStringUtils_toFTLTopLevelTragetIdentifierWithNSString_(name_)];
  if (function_) (void) [sb appendWithChar:'('];
  jint argCnt = ((IOSObjectArray *) nil_chk(paramNames_))->size_;
  for (jint i = 0; i < argCnt; i++) {
    if (function_) {
      if (i != 0) {
        (void) [sb appendWithNSString:@", "];
      }
    }
    else {
      
#line 107
      (void) [sb appendWithChar:' '];
    }
    NSString *argName = IOSObjectArray_Get(paramNames_, i);
    (void) [sb appendWithNSString:FreemarkerCore_CoreStringUtils_toFTLTopLevelIdentifierReferenceWithNSString_(argName)];
    if (paramDefaults_ != nil && [paramDefaults_ getWithId:argName] != nil) {
      (void) [sb appendWithChar:'='];
      FreemarkerCoreExpression *defaultExpr = (FreemarkerCoreExpression *) check_class_cast([paramDefaults_ getWithId:argName], [FreemarkerCoreExpression class]);
      if (function_) {
        (void) [sb appendWithNSString:[((FreemarkerCoreExpression *) nil_chk(defaultExpr)) getCanonicalForm]];
      }
      else {
        
#line 117
        (void) FreemarkerCoreMessageUtil_appendExpressionAsUntearableWithJavaLangStringBuffer_withFreemarkerCoreExpression_(sb, defaultExpr);
      }
    }
  }
  if (catchAllParamName_ != nil) {
    if (function_) {
      if (argCnt != 0) {
        (void) [sb appendWithNSString:@", "];
      }
    }
    else {
      
#line 127
      (void) [sb appendWithChar:' '];
    }
    (void) [sb appendWithNSString:catchAllParamName_];
    (void) [sb appendWithNSString:@"..."];
  }
  if (function_) (void) [sb appendWithChar:')'];
  if (canonical) {
    (void) [sb appendWithChar:'>'];
    if ([self getNestedBlock] != nil) {
      (void) [sb appendWithNSString:[((FreemarkerCoreTemplateElement *) nil_chk([self getNestedBlock])) getCanonicalForm]];
    }
    (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([sb appendWithNSString:@"</"])) appendWithNSString:[self getNodeTypeSymbol]])) appendWithChar:'>'];
  }
  return [sb description];
}


#line 143
- (NSString *)getNodeTypeSymbol {
  return function_ ? @"#function" : @"#macro";
}

- (jboolean)isShownInStackTrace {
  return NO;
}

- (jboolean)isFunction {
  return function_;
}


#line 285
- (jint)getParameterCount {
  return 1 + ((IOSObjectArray *) nil_chk(paramNames_))->size_ * 2 + 1 + 1;
}

- (id)getParameterValueWithInt:(jint)idx {
  if (idx == 0) {
    return name_;
  }
  else {
    
#line 293
    jint argDescsEnd = ((IOSObjectArray *) nil_chk(paramNames_))->size_ * 2 + 1;
    if (idx < argDescsEnd) {
      NSString *paramName = IOSObjectArray_Get(paramNames_, (idx - 1) / 2);
      if (idx % 2 != 0) {
        return paramName;
      }
      else {
        
#line 299
        return [((id<JavaUtilMap>) nil_chk(paramDefaults_)) getWithId:paramName];
      }
    }
    else
#line 301
    if (idx == argDescsEnd) {
      return catchAllParamName_;
    }
    else
#line 303
    if (idx == argDescsEnd + 1) {
      return new_JavaLangInteger_initWithInt_(function_ ? FreemarkerCoreMacro_TYPE_FUNCTION : FreemarkerCoreMacro_TYPE_MACRO);
    }
    else {
      
#line 306
      @throw new_JavaLangIndexOutOfBoundsException_init();
    }
  }
}


#line 311
- (FreemarkerCoreParameterRole *)getParameterRoleWithInt:(jint)idx {
  if (idx == 0) {
    return FreemarkerCoreParameterRole_get_ASSIGNMENT_TARGET_();
  }
  else {
    
#line 315
    jint argDescsEnd = ((IOSObjectArray *) nil_chk(paramNames_))->size_ * 2 + 1;
    if (idx < argDescsEnd) {
      if (idx % 2 != 0) {
        return FreemarkerCoreParameterRole_get_PARAMETER_NAME_();
      }
      else {
        
#line 320
        return FreemarkerCoreParameterRole_get_PARAMETER_DEFAULT_();
      }
    }
    else
#line 322
    if (idx == argDescsEnd) {
      return FreemarkerCoreParameterRole_get_CATCH_ALL_PARAMETER_NAME_();
    }
    else
#line 324
    if (idx == argDescsEnd + 1) {
      return FreemarkerCoreParameterRole_get_AST_NODE_SUBTYPE_();
    }
    else {
      
#line 327
      @throw new_JavaLangIndexOutOfBoundsException_init();
    }
  }
}


#line 332
- (jboolean)isNestedBlockRepeater {
  
#line 334
  return YES;
}

+ (void)initialize {
  if (self == [FreemarkerCoreMacro class]) {
    FreemarkerCoreMacro_DO_NOTHING_MACRO_ = new_FreemarkerCoreMacro_initWithNSString_withJavaUtilList_withJavaUtilMap_withNSString_withBoolean_withFreemarkerCoreTemplateElement_(
#line 39
    @".pass", JavaUtilCollections_get_EMPTY_LIST_(), JavaUtilCollections_get_EMPTY_MAP_(),
#line 42
    nil, NO, FreemarkerCoreTextBlock_get_EMPTY_BLOCK_());
    J2OBJC_SET_INITIALIZED(FreemarkerCoreMacro)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithNSString:withJavaUtilList:withJavaUtilMap:withNSString:withBoolean:withFreemarkerCoreTemplateElement:", "Macro", NULL, 0x0, NULL, NULL },
    { "getCatchAll", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getArgumentNames", NULL, "[Ljava.lang.String;", 0x1, NULL, NULL },
    { "getArgumentNamesInternal", NULL, "[Ljava.lang.String;", 0x0, NULL, NULL },
    { "hasArgNamedWithNSString:", "hasArgNamed", "Z", 0x0, NULL, NULL },
    { "getName", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "acceptWithFreemarkerCoreEnvironment:", "accept", "V", 0x0, NULL, NULL },
    { "dumpWithBoolean:", "dump", "Ljava.lang.String;", 0x4, NULL, NULL },
    { "getNodeTypeSymbol", NULL, "Ljava.lang.String;", 0x0, NULL, NULL },
    { "isShownInStackTrace", NULL, "Z", 0x0, NULL, NULL },
    { "isFunction", NULL, "Z", 0x1, NULL, NULL },
    { "getParameterCount", NULL, "I", 0x0, NULL, NULL },
    { "getParameterValueWithInt:", "getParameterValue", "Ljava.lang.Object;", 0x0, NULL, NULL },
    { "getParameterRoleWithInt:", "getParameterRole", "Lfreemarker.core.ParameterRole;", 0x0, NULL, NULL },
    { "isNestedBlockRepeater", NULL, "Z", 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "DO_NOTHING_MACRO_", NULL, 0x18, "Lfreemarker.core.Macro;", &FreemarkerCoreMacro_DO_NOTHING_MACRO_, NULL,  },
    { "TYPE_MACRO_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = FreemarkerCoreMacro_TYPE_MACRO },
    { "TYPE_FUNCTION_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = FreemarkerCoreMacro_TYPE_FUNCTION },
    { "name_", NULL, 0x12, "Ljava.lang.String;", NULL, NULL,  },
    { "paramNames_", NULL, 0x12, "[Ljava.lang.String;", NULL, NULL,  },
    { "paramDefaults_", NULL, 0x12, "Ljava.util.Map;", NULL, NULL,  },
    { "catchAllParamName_", NULL, 0x12, "Ljava.lang.String;", NULL, NULL,  },
    { "function_", NULL, 0x12, "Z", NULL, NULL,  },
  };
  static const char *inner_classes[] = {"Lfreemarker.core.Macro$Context;"};
  static const J2ObjcClassInfo _FreemarkerCoreMacro = { 2, "Macro", "freemarker.core", NULL, 0x11, 15, methods, 8, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_FreemarkerCoreMacro;
}

@end


#line 54
void FreemarkerCoreMacro_initWithNSString_withJavaUtilList_withJavaUtilMap_withNSString_withBoolean_withFreemarkerCoreTemplateElement_(FreemarkerCoreMacro *self, NSString *name, id<JavaUtilList> argumentNames, id<JavaUtilMap> args, NSString *catchAllParamName, jboolean function, FreemarkerCoreTemplateElement *nestedBlock) {
  (void) FreemarkerCoreTemplateElement_init(self);
  
#line 58
  self->name_ = name;
  self->paramNames_ = (IOSObjectArray *) check_class_cast([argumentNames toArrayWithNSObjectArray:[IOSObjectArray newArrayWithLength:
#line 60
  [((id<JavaUtilList>) nil_chk(argumentNames)) size] type:NSString_class_()]], [IOSObjectArray class]);
  self->paramDefaults_ = args;
  
#line 63
  self->function_ = function;
  self->catchAllParamName_ = catchAllParamName;
  
#line 66
  [self setNestedBlockWithFreemarkerCoreTemplateElement:nestedBlock];
}


#line 54
FreemarkerCoreMacro *new_FreemarkerCoreMacro_initWithNSString_withJavaUtilList_withJavaUtilMap_withNSString_withBoolean_withFreemarkerCoreTemplateElement_(NSString *name, id<JavaUtilList> argumentNames, id<JavaUtilMap> args, NSString *catchAllParamName, jboolean function, FreemarkerCoreTemplateElement *nestedBlock) {
  FreemarkerCoreMacro *self = [FreemarkerCoreMacro alloc];
  FreemarkerCoreMacro_initWithNSString_withJavaUtilList_withJavaUtilMap_withNSString_withBoolean_withFreemarkerCoreTemplateElement_(self, name, argumentNames, args, catchAllParamName, function, nestedBlock);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreMacro)


#line 155
@implementation FreemarkerCoreMacro_Context


#line 163
- (instancetype)initWithFreemarkerCoreMacro:(FreemarkerCoreMacro *)outer$
              withFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env
          withFreemarkerCoreTemplateElement:(FreemarkerCoreTemplateElement *)nestedContent
                           withJavaUtilList:(id<JavaUtilList>)nestedContentParameterNames {
  FreemarkerCoreMacro_Context_initWithFreemarkerCoreMacro_withFreemarkerCoreEnvironment_withFreemarkerCoreTemplateElement_withJavaUtilList_(self, outer$, env, nestedContent, nestedContentParameterNames);
  return self;
}


#line 176
- (FreemarkerCoreMacro *)getMacro {
  return this$0_;
}

- (void)runMacroWithFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env {
  [self sanityCheckWithFreemarkerCoreEnvironment:env];
  
#line 183
  if ([this$0_ getNestedBlock] != nil) {
    [((FreemarkerCoreEnvironment *) nil_chk(env)) visitWithFreemarkerCoreTemplateElement:[this$0_ getNestedBlock]];
  }
}

- (void)sanityCheckWithFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env {
  jboolean resolvedAnArg, hasUnresolvedArg;
  FreemarkerCoreExpression *firstUnresolvedExpression;
  FreemarkerCoreInvalidReferenceException *firstReferenceException;
  do {
    firstUnresolvedExpression = nil;
    firstReferenceException = nil;
    resolvedAnArg = hasUnresolvedArg = NO;
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(this$0_->paramNames_))->size_; ++i) {
      NSString *argName = IOSObjectArray_Get(this$0_->paramNames_, i);
      if ([((FreemarkerCoreEnvironment_Namespace *) nil_chk(localVars_)) getWithNSString:argName] == nil) {
        FreemarkerCoreExpression *valueExp = (FreemarkerCoreExpression *) check_class_cast([((id<JavaUtilMap>) nil_chk(this$0_->paramDefaults_)) getWithId:argName], [FreemarkerCoreExpression class]);
        if (valueExp != nil) {
          @try {
            id<FreemarkerTemplateTemplateModel> tm = [valueExp evalWithFreemarkerCoreEnvironment:env];
            if (tm == nil) {
              if (!hasUnresolvedArg) {
                firstUnresolvedExpression = valueExp;
                hasUnresolvedArg = YES;
              }
            }
            else {
              [localVars_ putWithNSString:argName withId:tm];
              resolvedAnArg = YES;
            }
          }
          @catch (FreemarkerCoreInvalidReferenceException *e) {
            if (!hasUnresolvedArg) {
              hasUnresolvedArg = YES;
              firstReferenceException = e;
            }
          }
        }
        else if (![((FreemarkerCoreEnvironment *) nil_chk(env)) isClassicCompatible]) {
          jboolean argWasSpecified = [localVars_ containsKeyWithNSString:argName];
          @throw new_FreemarkerCore_MiscTemplateException_initWithFreemarkerCoreEnvironment_withFreemarkerCore_ErrorDescriptionBuilder_(env,
#line 225
          [new_FreemarkerCore_ErrorDescriptionBuilder_initWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){
#line 226
            @"When calling macro ", new_FreemarkerCore_DelayedJQuote_initWithId_(this$0_->name_),
#line 227
            @", required parameter ", new_FreemarkerCore_DelayedJQuote_initWithId_(argName),
#line 228
            @" (parameter #", new_JavaLangInteger_initWithInt_(i + 1), @") was ",
#line 229
            (argWasSpecified ?
#line 230
            @"specified, but had null/missing value." :
#line 231
            @"not specified.") } count:8 type:NSObject_class_()]) tipWithNSObjectArray:
#line 232
            argWasSpecified ? [IOSObjectArray newArrayWithObjects:(id[]){ @"If the parameter value expression on the caller side is known to be legally null/missing, you may want to specify a default value for it with the \"!\" operator, like paramValue!defaultValue." } count:1 type:NSObject_class_()] : [IOSObjectArray newArrayWithObjects:(id[]){ @"If the omission was deliberate, you may consider making the parameter optional in the macro by specifying a default value for it, like ",
#line 241
            @"<#macro macroName paramName=defaultExpr>", @")" } count:3 type:NSObject_class_()]]);
          }
        }
      }
    }
    while (
#line 247
    resolvedAnArg && hasUnresolvedArg);
    if (hasUnresolvedArg) {
      if (firstReferenceException != nil) {
        @throw firstReferenceException;
      }
      else
#line 251
      if (![((FreemarkerCoreEnvironment *) nil_chk(env)) isClassicCompatible]) {
        @throw FreemarkerCoreInvalidReferenceException_getInstanceWithFreemarkerCoreExpression_withFreemarkerCoreEnvironment_(firstUnresolvedExpression, env);
      }
    }
  }


#line 261
- (id<FreemarkerTemplateTemplateModel>)getLocalVariableWithNSString:(NSString *)name {
  return [((FreemarkerCoreEnvironment_Namespace *) nil_chk(localVars_)) getWithNSString:name];
}

- (FreemarkerCoreEnvironment_Namespace *)getLocals {
  return localVars_;
}


#line 272
- (void)setLocalVarWithNSString:(NSString *)name
withFreemarkerTemplateTemplateModel:(id<FreemarkerTemplateTemplateModel>)var {
  [((FreemarkerCoreEnvironment_Namespace *) nil_chk(localVars_)) putWithNSString:name withId:var];
}


#line 276
- (id<JavaUtilCollection>)getLocalVariableNames {
  JavaUtilHashSet *result = new_JavaUtilHashSet_init();
  for (id<FreemarkerTemplateTemplateModelIterator> it = [((id<FreemarkerTemplateTemplateCollectionModel>) nil_chk([((FreemarkerCoreEnvironment_Namespace *) nil_chk(localVars_)) keys])) iterator]; [((id<FreemarkerTemplateTemplateModelIterator>) nil_chk(it)) hasNext]; ) {
    [result addWithId:[((id<FreemarkerTemplateTemplateModel>) nil_chk([it next])) description]];
  }
  return result;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithFreemarkerCoreMacro:withFreemarkerCoreEnvironment:withFreemarkerCoreTemplateElement:withJavaUtilList:", "Context", NULL, 0x0, NULL, NULL },
    { "getMacro", NULL, "Lfreemarker.core.Macro;", 0x0, NULL, NULL },
    { "runMacroWithFreemarkerCoreEnvironment:", "runMacro", "V", 0x0, "Lfreemarker.template.TemplateException;Ljava.io.IOException;", NULL },
    { "sanityCheckWithFreemarkerCoreEnvironment:", "sanityCheck", "V", 0x0, "Lfreemarker.template.TemplateException;", NULL },
    { "getLocalVariableWithNSString:", "getLocalVariable", "Lfreemarker.template.TemplateModel;", 0x1, "Lfreemarker.template.TemplateModelException;", NULL },
    { "getLocals", NULL, "Lfreemarker.core.Environment$Namespace;", 0x0, NULL, NULL },
    { "setLocalVarWithNSString:withFreemarkerTemplateTemplateModel:", "setLocalVar", "V", 0x0, NULL, NULL },
    { "getLocalVariableNames", NULL, "Ljava.util.Collection;", 0x1, "Lfreemarker.template.TemplateModelException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lfreemarker.core.Macro;", NULL, NULL,  },
    { "localVars_", NULL, 0x10, "Lfreemarker.core.Environment$Namespace;", NULL, NULL,  },
    { "nestedContent_", NULL, 0x10, "Lfreemarker.core.TemplateElement;", NULL, NULL,  },
    { "nestedContentNamespace_", NULL, 0x10, "Lfreemarker.core.Environment$Namespace;", NULL, NULL,  },
    { "nestedContentParameterNames_", NULL, 0x10, "Ljava.util.List;", NULL, NULL,  },
    { "prevLocalContextStack_", NULL, 0x10, "Ljava.util.ArrayList;", NULL, NULL,  },
    { "prevMacroContext_", NULL, 0x10, "Lfreemarker.core.Macro$Context;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerCoreMacro_Context = { 2, "Context", "freemarker.core", "Macro", 0x0, 8, methods, 7, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerCoreMacro_Context;
}

@end


#line 163
void FreemarkerCoreMacro_Context_initWithFreemarkerCoreMacro_withFreemarkerCoreEnvironment_withFreemarkerCoreTemplateElement_withJavaUtilList_(FreemarkerCoreMacro_Context *self, FreemarkerCoreMacro *outer$, FreemarkerCoreEnvironment *env, FreemarkerCoreTemplateElement *nestedContent, id<JavaUtilList> nestedContentParameterNames) {
  self->this$0_ = outer$;
  (void) NSObject_init(self);
  
#line 167
  self->localVars_ = new_FreemarkerCoreEnvironment_Namespace_initWithFreemarkerCoreEnvironment_(env);
  self->nestedContent_ = nestedContent;
  self->nestedContentNamespace_ = [((FreemarkerCoreEnvironment *) nil_chk(env)) getCurrentNamespace];
  self->nestedContentParameterNames_ = nestedContentParameterNames;
  self->prevLocalContextStack_ = [env getLocalContextStack];
  self->prevMacroContext_ = [env getCurrentMacroContext];
}


#line 163
FreemarkerCoreMacro_Context *new_FreemarkerCoreMacro_Context_initWithFreemarkerCoreMacro_withFreemarkerCoreEnvironment_withFreemarkerCoreTemplateElement_withJavaUtilList_(FreemarkerCoreMacro *outer$, FreemarkerCoreEnvironment *env, FreemarkerCoreTemplateElement *nestedContent, id<JavaUtilList> nestedContentParameterNames) {
  FreemarkerCoreMacro_Context *self = [FreemarkerCoreMacro_Context alloc];
  FreemarkerCoreMacro_Context_initWithFreemarkerCoreMacro_withFreemarkerCoreEnvironment_withFreemarkerCoreTemplateElement_withJavaUtilList_(self, outer$, env, nestedContent, nestedContentParameterNames);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreMacro_Context)
