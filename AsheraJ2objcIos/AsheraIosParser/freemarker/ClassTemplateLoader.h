//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/cache/ClassTemplateLoader.java
//

#ifndef _FreemarkerCacheClassTemplateLoader_H_
#define _FreemarkerCacheClassTemplateLoader_H_

#include "J2ObjC_header.h"
#include "URLTemplateLoader.h"

@class IOSClass;
@class JavaLangClassLoader;
@class JavaNetURL;

/**
 @brief A TemplateLoader that can load templates from the "classpath".
 Naturally, it can load from jar files, or from anywhere where Java can load classes from. Internally, it uses Class#getResource(String) or ClassLoader#getResource(String) to load templates.
 */
@interface FreemarkerCacheClassTemplateLoader : FreemarkerCacheURLTemplateLoader

#pragma mark Public

/**
 @brief Creates a template loader that will use the Class#getResource(String) method of its own class to load the resources, and <code>"/"</code> as base package path.
 This means that that template paths will be resolved relatively the root package of the class hierarchy, so you hardly ever should use this constructor, rather do something like this:<br> #ClassTemplateLoader(Class,String) new ClassTemplateLoader(com.example.myapplication.SomeClass.class, "templates") <p> If you extend this class, then the extending class will be used to load the resources.
 */
- (instancetype)init;

/**
 @brief Creates a template loader that will use the Class#getResource(String) method of the specified class to load the resources, and <code>""</code> as base package path.
 This means that template paths will be resolved relatively to the class location, that is, relatively to the directory (package) of the class.
 @param resourceLoaderClass the class whose Class#getResource(String) will be used to load the templates.
 */
- (instancetype)initWithIOSClass:(IOSClass *)resourceLoaderClass;

/**
 @brief Creates a template loader that will use the Class#getResource(String) method of the specified class to load the resources, and the specified base package path (absolute or relative).
 <p> Examples: <ul> <li>Relative base path (will load from the <code>com.example.myapplication.templates</code> package):<br> <code>new ClassTemplateLoader(com.example.myapplication.SomeClass.class, "templates")</code> <li>Absolute base path:<br> <code>new ClassTemplateLoader(somepackage.SomeClass.class, "/com/example/myapplication/templates")</code> </ul>
 @param resourceLoaderClass The class whose Class#getResource(String) method will be used to load the templates. Be sure that you chose a class whose defining class-loader sees the templates. This parameter can't be <code>null</code> .
 @param basePackagePath The package that contains the templates, in path ( <code>/</code> -separated) format. If it doesn't start with a <code>/</code> then it's relative to the path (package) of the <code>resourceLoaderClass</code> class. If it starts with <code>/</code> then it's relative to the root of the package hierarchy. Note that path components should be separated by forward slashes independently of the separator character used by the underlying operating system. This parameter can't be <code>null</code> .
 */
- (instancetype)initWithIOSClass:(IOSClass *)resourceLoaderClass
                    withNSString:(NSString *)basePackagePath;

/**
 @brief Similar to #ClassTemplateLoader(Class,String) , but instead of Class#getResource(String) it uses ClassLoader#getResource(String) .
 Because a ClassLoader isn't bound to any Java package, it doesn't mater if the <code>basePackagePath</code> starts with <code>/</code> or not, it will be always relative to the root of the package hierarchy
 @since 2.3.22
 */
- (instancetype)initWithJavaLangClassLoader:(JavaLangClassLoader *)classLoader
                               withNSString:(NSString *)basePackagePath;

/**
 @brief See the similar parameter of #ClassTemplateLoader(ClassLoader,String) ; note that this is a normalized version of what was actually passed to the constructor.
 @since 2.3.22
 */
- (NSString *)getBasePackagePath;

/**
 @brief See the similar parameter of #ClassTemplateLoader(ClassLoader,String) ; <code>null</code> when other mechanism is used to load the resources.
 @since 2.3.22
 */
- (JavaLangClassLoader *)getClassLoader;

/**
 @brief See the similar parameter of #ClassTemplateLoader(Class,String) ; <code>null</code> when other mechanism is used to load the resources.
 @since 2.3.22
 */
- (IOSClass *)getResourceLoaderClass;

/**
 @brief Show class name and some details that are useful in template-not-found errors.
 @since 2.3.21
 */
- (NSString *)description;

#pragma mark Protected

- (JavaNetURL *)getURLWithNSString:(NSString *)name;

@end

J2OBJC_EMPTY_STATIC_INIT(FreemarkerCacheClassTemplateLoader)

FOUNDATION_EXPORT void FreemarkerCacheClassTemplateLoader_init(FreemarkerCacheClassTemplateLoader *self);

FOUNDATION_EXPORT FreemarkerCacheClassTemplateLoader *new_FreemarkerCacheClassTemplateLoader_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void FreemarkerCacheClassTemplateLoader_initWithIOSClass_(FreemarkerCacheClassTemplateLoader *self, IOSClass *resourceLoaderClass);

FOUNDATION_EXPORT FreemarkerCacheClassTemplateLoader *new_FreemarkerCacheClassTemplateLoader_initWithIOSClass_(IOSClass *resourceLoaderClass) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void FreemarkerCacheClassTemplateLoader_initWithIOSClass_withNSString_(FreemarkerCacheClassTemplateLoader *self, IOSClass *resourceLoaderClass, NSString *basePackagePath);

FOUNDATION_EXPORT FreemarkerCacheClassTemplateLoader *new_FreemarkerCacheClassTemplateLoader_initWithIOSClass_withNSString_(IOSClass *resourceLoaderClass, NSString *basePackagePath) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void FreemarkerCacheClassTemplateLoader_initWithJavaLangClassLoader_withNSString_(FreemarkerCacheClassTemplateLoader *self, JavaLangClassLoader *classLoader, NSString *basePackagePath);

FOUNDATION_EXPORT FreemarkerCacheClassTemplateLoader *new_FreemarkerCacheClassTemplateLoader_initWithJavaLangClassLoader_withNSString_(JavaLangClassLoader *classLoader, NSString *basePackagePath) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerCacheClassTemplateLoader)

#endif // _FreemarkerCacheClassTemplateLoader_H_
