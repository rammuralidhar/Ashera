//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/RecurseNode.java
//


#include "Environment.h"
#include "Expression.h"
#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "ListLiteral.h"
#include "NonNodeException.h"
#include "NonSequenceException.h"
#include "ParameterRole.h"
#include "RecurseNode.h"
#include "SimpleSequence.h"
#include "StringLiteral.h"
#include "TemplateElement.h"
#include "TemplateException.h"
#include "TemplateHashModel.h"
#include "TemplateModel.h"
#include "TemplateNodeModel.h"
#include "TemplateScalarModel.h"
#include "TemplateSequenceModel.h"
#include "_MiscTemplateException.h"
#include "java/io/IOException.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/StringBuffer.h"

#line 0 "/Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/RecurseNode.java"


#line 33
@implementation FreemarkerCoreRecurseNode


#line 37
- (instancetype)initWithFreemarkerCoreExpression:(FreemarkerCoreExpression *)targetNode
                    withFreemarkerCoreExpression:(FreemarkerCoreExpression *)namespaces {
  FreemarkerCoreRecurseNode_initWithFreemarkerCoreExpression_withFreemarkerCoreExpression_(self, targetNode, namespaces);
  return self;
}


#line 42
- (void)acceptWithFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env {
  id<FreemarkerTemplateTemplateModel> node = targetNode_ == nil ? nil : [targetNode_ evalWithFreemarkerCoreEnvironment:env];
  if (node != nil && !([FreemarkerTemplateTemplateNodeModel_class_() isInstance:node])) {
    @throw new_FreemarkerCoreNonNodeException_initWithFreemarkerCoreExpression_withFreemarkerTemplateTemplateModel_withNSString_withFreemarkerCoreEnvironment_(targetNode_, node, @"node", env);
  }
  
#line 48
  id<FreemarkerTemplateTemplateModel> nss = namespaces_ == nil ? nil : [namespaces_ evalWithFreemarkerCoreEnvironment:env];
  if ([namespaces_ isKindOfClass:[FreemarkerCoreStringLiteral class]]) {
    nss = [((FreemarkerCoreEnvironment *) nil_chk(env)) importLibWithNSString:[((id<FreemarkerTemplateTemplateScalarModel>) check_protocol_cast(nss, @protocol(FreemarkerTemplateTemplateScalarModel))) getAsString] withNSString:nil];
  }
  else if ([namespaces_ isKindOfClass:[FreemarkerCoreListLiteral class]]) {
    nss = [((FreemarkerCoreListLiteral *) nil_chk(((FreemarkerCoreListLiteral *) check_class_cast(namespaces_, [FreemarkerCoreListLiteral class])))) evaluateStringsToNamespacesWithFreemarkerCoreEnvironment:env];
  }
  if (nss != nil) {
    if ([FreemarkerTemplateTemplateHashModel_class_() isInstance:nss]) {
      FreemarkerTemplateSimpleSequence *ss = new_FreemarkerTemplateSimpleSequence_initWithInt_(1);
      [ss addWithId:nss];
      nss = ss;
    }
    else if (!([FreemarkerTemplateTemplateSequenceModel_class_() isInstance:nss])) {
      if (namespaces_ != nil) {
        @throw new_FreemarkerCoreNonSequenceException_initWithFreemarkerCoreExpression_withFreemarkerTemplateTemplateModel_withFreemarkerCoreEnvironment_(namespaces_, nss, env);
      }
      else {
        @throw new_FreemarkerCore_MiscTemplateException_initWithFreemarkerCoreEnvironment_withNSString_(env, @"Expecting a sequence of namespaces after \"using\"");
      }
    }
  }
  
#line 71
  [((FreemarkerCoreEnvironment *) nil_chk(env)) recurseWithFreemarkerTemplateTemplateNodeModel:(id<FreemarkerTemplateTemplateNodeModel>) check_protocol_cast(node, @protocol(FreemarkerTemplateTemplateNodeModel)) withFreemarkerTemplateTemplateSequenceModel:(id<FreemarkerTemplateTemplateSequenceModel>) check_protocol_cast(nss, @protocol(FreemarkerTemplateTemplateSequenceModel))];
}


#line 74
- (NSString *)dumpWithBoolean:(jboolean)canonical {
  JavaLangStringBuffer *sb = new_JavaLangStringBuffer_init();
  if (canonical) (void) [sb appendWithChar:'<'];
  (void) [sb appendWithNSString:[self getNodeTypeSymbol]];
  if (targetNode_ != nil) {
    (void) [sb appendWithChar:' '];
    (void) [sb appendWithNSString:[targetNode_ getCanonicalForm]];
  }
  if (namespaces_ != nil) {
    (void) [sb appendWithNSString:@" using "];
    (void) [sb appendWithNSString:[namespaces_ getCanonicalForm]];
  }
  if (canonical) (void) [sb appendWithNSString:@"/>"];
  return [sb description];
}

- (NSString *)getNodeTypeSymbol {
  return @"#recurse";
}

- (jint)getParameterCount {
  return 2;
}

- (id)getParameterValueWithInt:(jint)idx {
  switch (idx) {
    case 0:
    
#line 100
    return targetNode_;
    case 1:
    
#line 101
    return namespaces_;
    default:
    
#line 102
    @throw new_JavaLangIndexOutOfBoundsException_init();
  }
}


#line 106
- (FreemarkerCoreParameterRole *)getParameterRoleWithInt:(jint)idx {
  switch (idx) {
    case 0:
    
#line 108
    return FreemarkerCoreParameterRole_get_NODE_();
    case 1:
    
#line 109
    return FreemarkerCoreParameterRole_get_NAMESPACE_();
    default:
    
#line 110
    @throw new_JavaLangIndexOutOfBoundsException_init();
  }
}


#line 114
- (jboolean)isNestedBlockRepeater {
  return NO;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithFreemarkerCoreExpression:withFreemarkerCoreExpression:", "RecurseNode", NULL, 0x0, NULL, NULL },
    { "acceptWithFreemarkerCoreEnvironment:", "accept", "V", 0x0, "Ljava.io.IOException;Lfreemarker.template.TemplateException;", NULL },
    { "dumpWithBoolean:", "dump", "Ljava.lang.String;", 0x4, NULL, NULL },
    { "getNodeTypeSymbol", NULL, "Ljava.lang.String;", 0x0, NULL, NULL },
    { "getParameterCount", NULL, "I", 0x0, NULL, NULL },
    { "getParameterValueWithInt:", "getParameterValue", "Ljava.lang.Object;", 0x0, NULL, NULL },
    { "getParameterRoleWithInt:", "getParameterRole", "Lfreemarker.core.ParameterRole;", 0x0, NULL, NULL },
    { "isNestedBlockRepeater", NULL, "Z", 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "targetNode_", NULL, 0x0, "Lfreemarker.core.Expression;", NULL, NULL,  },
    { "namespaces_", NULL, 0x0, "Lfreemarker.core.Expression;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerCoreRecurseNode = { 2, "RecurseNode", "freemarker.core", NULL, 0x10, 8, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerCoreRecurseNode;
}

@end


#line 37
void FreemarkerCoreRecurseNode_initWithFreemarkerCoreExpression_withFreemarkerCoreExpression_(FreemarkerCoreRecurseNode *self, FreemarkerCoreExpression *targetNode, FreemarkerCoreExpression *namespaces) {
  (void) FreemarkerCoreTemplateElement_init(self);
  
#line 38
  self->targetNode_ = targetNode;
  self->namespaces_ = namespaces;
}


#line 37
FreemarkerCoreRecurseNode *new_FreemarkerCoreRecurseNode_initWithFreemarkerCoreExpression_withFreemarkerCoreExpression_(FreemarkerCoreExpression *targetNode, FreemarkerCoreExpression *namespaces) {
  FreemarkerCoreRecurseNode *self = [FreemarkerCoreRecurseNode alloc];
  FreemarkerCoreRecurseNode_initWithFreemarkerCoreExpression_withFreemarkerCoreExpression_(self, targetNode, namespaces);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreRecurseNode)
