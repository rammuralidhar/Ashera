//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/TokenMgrError.java
//

#ifndef _FreemarkerCoreTokenMgrError_H_
#define _FreemarkerCoreTokenMgrError_H_

#include "J2ObjC_header.h"
#include "java/lang/Error.h"

@class FreemarkerTemplateTemplate;
@class JavaLangRuntimeException;

#define FreemarkerCoreTokenMgrError_LEXICAL_ERROR 0
#define FreemarkerCoreTokenMgrError_STATIC_LEXER_ERROR 1
#define FreemarkerCoreTokenMgrError_INVALID_LEXICAL_STATE 2
#define FreemarkerCoreTokenMgrError_LOOP_DETECTED 3

/**
 @brief Token Manager Error.
 */
@interface FreemarkerCoreTokenMgrError : JavaLangError {
 @public
  /**
   @brief Indicates the reason why the exception is thrown.
   It will have one of the above 4 values.
   */
  jint errorCode_;
}

#pragma mark Public

/**
 @brief No arg constructor.
 */
- (instancetype)init;

/**
 @brief Full Constructor.
 */
- (instancetype)initWithBoolean:(jboolean)EOFSeen
                        withInt:(jint)lexState
                        withInt:(jint)errorLine
                        withInt:(jint)errorColumn
                   withNSString:(NSString *)errorAfter
                       withChar:(jchar)curChar
                        withInt:(jint)reason;

/**
 @brief Constructor with message and reason.
 */
- (instancetype)initWithNSString:(NSString *)message
                         withInt:(jint)reason;

- (instancetype)initWithNSString:(NSString *)string
                         withInt:(jint)lexicalError
                         withInt:(jint)beginLine
                         withInt:(jint)beginColumn
                         withInt:(jint)endLine
                         withInt:(jint)endColumn;

/**
 @brief You can also modify the body of this method to customize your error messages.
 For example, cases like LOOP_DETECTED and INVALID_LEXICAL_STATE are not of end-users concern, so you can return something like : "Internal Error : Please file a bug report .... " from this method for such cases in the release version of your parser.
 */
- (NSString *)getMessage;

- (JavaLangRuntimeException *)toParseExceptionWithFreemarkerTemplateTemplate:(FreemarkerTemplateTemplate *)template_;

#pragma mark Protected

/**
 @brief Replaces unprintable characters by their escaped (or unicode escaped) equivalents in the given string
 */
+ (NSString *)addEscapesWithNSString:(NSString *)str;

/**
 @brief Returns a detailed message for the Error when it is thrown by the token manager to indicate a lexical error.
 Parameters : EOFSeen     : indicates if EOF caused the lexical error curLexState : lexical state in which this error occurred errorLine   : line number when the error occurred errorColumn : column number when the error occurred errorAfter  : prefix that was seen before this error occurred curchar     : the offending character Note: You can customize the lexical error message by modifying this method.
 */
+ (NSString *)LexicalErrorWithBoolean:(jboolean)EOFSeen
                              withInt:(jint)lexState
                              withInt:(jint)errorLine
                              withInt:(jint)errorColumn
                         withNSString:(NSString *)errorAfter
                             withChar:(jchar)curChar;

@end

J2OBJC_EMPTY_STATIC_INIT(FreemarkerCoreTokenMgrError)

J2OBJC_STATIC_FIELD_GETTER(FreemarkerCoreTokenMgrError, LEXICAL_ERROR, jint)

J2OBJC_STATIC_FIELD_GETTER(FreemarkerCoreTokenMgrError, STATIC_LEXER_ERROR, jint)

J2OBJC_STATIC_FIELD_GETTER(FreemarkerCoreTokenMgrError, INVALID_LEXICAL_STATE, jint)

J2OBJC_STATIC_FIELD_GETTER(FreemarkerCoreTokenMgrError, LOOP_DETECTED, jint)

FOUNDATION_EXPORT NSString *FreemarkerCoreTokenMgrError_addEscapesWithNSString_(NSString *str);

FOUNDATION_EXPORT NSString *FreemarkerCoreTokenMgrError_LexicalErrorWithBoolean_withInt_withInt_withInt_withNSString_withChar_(jboolean EOFSeen, jint lexState, jint errorLine, jint errorColumn, NSString *errorAfter, jchar curChar);

FOUNDATION_EXPORT void FreemarkerCoreTokenMgrError_init(FreemarkerCoreTokenMgrError *self);

FOUNDATION_EXPORT FreemarkerCoreTokenMgrError *new_FreemarkerCoreTokenMgrError_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void FreemarkerCoreTokenMgrError_initWithNSString_withInt_(FreemarkerCoreTokenMgrError *self, NSString *message, jint reason);

FOUNDATION_EXPORT FreemarkerCoreTokenMgrError *new_FreemarkerCoreTokenMgrError_initWithNSString_withInt_(NSString *message, jint reason) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void FreemarkerCoreTokenMgrError_initWithBoolean_withInt_withInt_withInt_withNSString_withChar_withInt_(FreemarkerCoreTokenMgrError *self, jboolean EOFSeen, jint lexState, jint errorLine, jint errorColumn, NSString *errorAfter, jchar curChar, jint reason);

FOUNDATION_EXPORT FreemarkerCoreTokenMgrError *new_FreemarkerCoreTokenMgrError_initWithBoolean_withInt_withInt_withInt_withNSString_withChar_withInt_(jboolean EOFSeen, jint lexState, jint errorLine, jint errorColumn, NSString *errorAfter, jchar curChar, jint reason) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void FreemarkerCoreTokenMgrError_initWithNSString_withInt_withInt_withInt_withInt_withInt_(FreemarkerCoreTokenMgrError *self, NSString *string, jint lexicalError, jint beginLine, jint beginColumn, jint endLine, jint endColumn);

FOUNDATION_EXPORT FreemarkerCoreTokenMgrError *new_FreemarkerCoreTokenMgrError_initWithNSString_withInt_withInt_withInt_withInt_withInt_(NSString *string, jint lexicalError, jint beginLine, jint beginColumn, jint endLine, jint endColumn) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerCoreTokenMgrError)

#endif // _FreemarkerCoreTokenMgrError_H_
