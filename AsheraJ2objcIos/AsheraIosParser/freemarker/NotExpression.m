//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/NotExpression.java
//


#include "BooleanExpression.h"
#include "Environment.h"
#include "Expression.h"
#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "NotExpression.h"
#include "ParameterRole.h"
#include "TemplateException.h"
#include "java/lang/IndexOutOfBoundsException.h"

#line 0 "/Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/NotExpression.java"

@interface FreemarkerCoreNotExpression () {
 @public
  FreemarkerCoreExpression *target_;
}

@end

J2OBJC_FIELD_SETTER(FreemarkerCoreNotExpression, target_, FreemarkerCoreExpression *)


#line 21
@implementation FreemarkerCoreNotExpression


#line 25
- (instancetype)initWithFreemarkerCoreExpression:(FreemarkerCoreExpression *)target {
  FreemarkerCoreNotExpression_initWithFreemarkerCoreExpression_(self, target);
  return self;
}


#line 29
- (jboolean)evalToBooleanWithFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env {
  return (![((FreemarkerCoreExpression *) nil_chk(target_)) evalToBooleanWithFreemarkerCoreEnvironment:env]);
}

- (NSString *)getCanonicalForm {
  return JreStrcat("C$", '!', [((FreemarkerCoreExpression *) nil_chk(target_)) getCanonicalForm]);
}

- (NSString *)getNodeTypeSymbol {
  return @"!";
}

- (jboolean)isLiteral {
  return [((FreemarkerCoreExpression *) nil_chk(target_)) isLiteral];
}

- (FreemarkerCoreExpression *)deepCloneWithIdentifierReplaced_innerWithNSString:(NSString *)replacedIdentifier
                                                   withFreemarkerCoreExpression:(FreemarkerCoreExpression *)replacement
                                 withFreemarkerCoreExpression_ReplacemenetState:(FreemarkerCoreExpression_ReplacemenetState *)replacementState {
  
#line 47
  return new_FreemarkerCoreNotExpression_initWithFreemarkerCoreExpression_(
#line 48
  [((FreemarkerCoreExpression *) nil_chk(target_)) deepCloneWithIdentifierReplacedWithNSString:replacedIdentifier withFreemarkerCoreExpression:replacement withFreemarkerCoreExpression_ReplacemenetState:replacementState]);
}


#line 51
- (jint)getParameterCount {
  return 1;
}

- (id)getParameterValueWithInt:(jint)idx {
  if (idx != 0) @throw new_JavaLangIndexOutOfBoundsException_init();
  return target_;
}

- (FreemarkerCoreParameterRole *)getParameterRoleWithInt:(jint)idx {
  if (idx != 0) @throw new_JavaLangIndexOutOfBoundsException_init();
  return FreemarkerCoreParameterRole_get_RIGHT_HAND_OPERAND_();
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithFreemarkerCoreExpression:", "NotExpression", NULL, 0x0, NULL, NULL },
    { "evalToBooleanWithFreemarkerCoreEnvironment:", "evalToBoolean", "Z", 0x0, "Lfreemarker.template.TemplateException;", NULL },
    { "getCanonicalForm", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getNodeTypeSymbol", NULL, "Ljava.lang.String;", 0x0, NULL, NULL },
    { "isLiteral", NULL, "Z", 0x0, NULL, NULL },
    { "deepCloneWithIdentifierReplaced_innerWithNSString:withFreemarkerCoreExpression:withFreemarkerCoreExpression_ReplacemenetState:", "deepCloneWithIdentifierReplaced_inner", "Lfreemarker.core.Expression;", 0x4, NULL, NULL },
    { "getParameterCount", NULL, "I", 0x0, NULL, NULL },
    { "getParameterValueWithInt:", "getParameterValue", "Ljava.lang.Object;", 0x0, NULL, NULL },
    { "getParameterRoleWithInt:", "getParameterRole", "Lfreemarker.core.ParameterRole;", 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "target_", NULL, 0x12, "Lfreemarker.core.Expression;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerCoreNotExpression = { 2, "NotExpression", "freemarker.core", NULL, 0x10, 9, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerCoreNotExpression;
}

@end


#line 25
void FreemarkerCoreNotExpression_initWithFreemarkerCoreExpression_(FreemarkerCoreNotExpression *self, FreemarkerCoreExpression *target) {
  (void) FreemarkerCoreBooleanExpression_init(self);
  
#line 26
  self->target_ = target;
}


#line 25
FreemarkerCoreNotExpression *new_FreemarkerCoreNotExpression_initWithFreemarkerCoreExpression_(FreemarkerCoreExpression *target) {
  FreemarkerCoreNotExpression *self = [FreemarkerCoreNotExpression alloc];
  FreemarkerCoreNotExpression_initWithFreemarkerCoreExpression_(self, target);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreNotExpression)
