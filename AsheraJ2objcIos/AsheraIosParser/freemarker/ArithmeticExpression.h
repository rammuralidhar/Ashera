//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/ArithmeticExpression.java
//

#ifndef _FreemarkerCoreArithmeticExpression_H_
#define _FreemarkerCoreArithmeticExpression_H_

#include "Expression.h"
#include "J2ObjC_header.h"

@class FreemarkerCoreEnvironment;
@class FreemarkerCoreParameterRole;
@class FreemarkerCoreTemplateObject;
@protocol FreemarkerTemplateTemplateModel;

#define FreemarkerCoreArithmeticExpression_TYPE_SUBSTRACTION 0
#define FreemarkerCoreArithmeticExpression_TYPE_MULTIPLICATION 1
#define FreemarkerCoreArithmeticExpression_TYPE_DIVISION 2
#define FreemarkerCoreArithmeticExpression_TYPE_MODULO 3

/**
 @brief An operator for arithmetic operations.
 Note that the + operator is in AddConcatExpression , because its overloaded (does string concatenation and more).
 */
@interface FreemarkerCoreArithmeticExpression : FreemarkerCoreExpression

#pragma mark Public

- (NSString *)getCanonicalForm;

#pragma mark Protected

- (FreemarkerCoreExpression *)deepCloneWithIdentifierReplaced_innerWithNSString:(NSString *)replacedIdentifier
                                                   withFreemarkerCoreExpression:(FreemarkerCoreExpression *)replacement
                                 withFreemarkerCoreExpression_ReplacemenetState:(FreemarkerCoreExpression_ReplacemenetState *)replacementState;

#pragma mark Package-Private

- (instancetype)initWithFreemarkerCoreExpression:(FreemarkerCoreExpression *)lho
                    withFreemarkerCoreExpression:(FreemarkerCoreExpression *)rho
                                         withInt:(jint)operator_;

- (id<FreemarkerTemplateTemplateModel>)_evalWithFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env;

+ (id<FreemarkerTemplateTemplateModel>)_evalWithFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env
                                         withFreemarkerCoreTemplateObject:(FreemarkerCoreTemplateObject *)parent
                                                             withNSNumber:(NSNumber *)lhoNumber
                                                                  withInt:(jint)operator_
                                                             withNSNumber:(NSNumber *)rhoNumber;

- (NSString *)getNodeTypeSymbol;

+ (jchar)getOperatorSymbolWithInt:(jint)operator_;

- (jint)getParameterCount;

- (FreemarkerCoreParameterRole *)getParameterRoleWithInt:(jint)idx;

- (id)getParameterValueWithInt:(jint)idx;

- (jboolean)isLiteral;

@end

J2OBJC_STATIC_INIT(FreemarkerCoreArithmeticExpression)

J2OBJC_STATIC_FIELD_GETTER(FreemarkerCoreArithmeticExpression, TYPE_SUBSTRACTION, jint)

J2OBJC_STATIC_FIELD_GETTER(FreemarkerCoreArithmeticExpression, TYPE_MULTIPLICATION, jint)

J2OBJC_STATIC_FIELD_GETTER(FreemarkerCoreArithmeticExpression, TYPE_DIVISION, jint)

J2OBJC_STATIC_FIELD_GETTER(FreemarkerCoreArithmeticExpression, TYPE_MODULO, jint)

FOUNDATION_EXPORT void FreemarkerCoreArithmeticExpression_initWithFreemarkerCoreExpression_withFreemarkerCoreExpression_withInt_(FreemarkerCoreArithmeticExpression *self, FreemarkerCoreExpression *lho, FreemarkerCoreExpression *rho, jint operator_);

FOUNDATION_EXPORT FreemarkerCoreArithmeticExpression *new_FreemarkerCoreArithmeticExpression_initWithFreemarkerCoreExpression_withFreemarkerCoreExpression_withInt_(FreemarkerCoreExpression *lho, FreemarkerCoreExpression *rho, jint operator_) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT id<FreemarkerTemplateTemplateModel> FreemarkerCoreArithmeticExpression__evalWithFreemarkerCoreEnvironment_withFreemarkerCoreTemplateObject_withNSNumber_withInt_withNSNumber_(FreemarkerCoreEnvironment *env, FreemarkerCoreTemplateObject *parent, NSNumber *lhoNumber, jint operator_, NSNumber *rhoNumber);

FOUNDATION_EXPORT jchar FreemarkerCoreArithmeticExpression_getOperatorSymbolWithInt_(jint operator_);

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerCoreArithmeticExpression)

#endif // _FreemarkerCoreArithmeticExpression_H_
