//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/Macro.java
//

#ifndef _FreemarkerCoreMacro_H_
#define _FreemarkerCoreMacro_H_

#include "J2ObjC_header.h"
#include "LocalContext.h"
#include "TemplateElement.h"
#include "TemplateModel.h"

@class FreemarkerCoreEnvironment;
@class FreemarkerCoreEnvironment_Namespace;
@class FreemarkerCoreParameterRole;
@class IOSObjectArray;
@class JavaUtilArrayList;
@protocol JavaUtilCollection;
@protocol JavaUtilList;
@protocol JavaUtilMap;

#define FreemarkerCoreMacro_TYPE_MACRO 0
#define FreemarkerCoreMacro_TYPE_FUNCTION 1

/**
 @brief An element representing a macro declaration.
 */
@interface FreemarkerCoreMacro : FreemarkerCoreTemplateElement < FreemarkerTemplateTemplateModel >

#pragma mark Public

- (IOSObjectArray *)getArgumentNames;

- (NSString *)getCatchAll;

- (NSString *)getName;

- (jboolean)isFunction;

#pragma mark Protected

- (NSString *)dumpWithBoolean:(jboolean)canonical;

#pragma mark Package-Private

- (instancetype)initWithNSString:(NSString *)name
                withJavaUtilList:(id<JavaUtilList>)argumentNames
                 withJavaUtilMap:(id<JavaUtilMap>)args
                    withNSString:(NSString *)catchAllParamName
                     withBoolean:(jboolean)function
withFreemarkerCoreTemplateElement:(FreemarkerCoreTemplateElement *)nestedBlock;

- (void)acceptWithFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env;

- (IOSObjectArray *)getArgumentNamesInternal;

- (NSString *)getNodeTypeSymbol;

- (jint)getParameterCount;

- (FreemarkerCoreParameterRole *)getParameterRoleWithInt:(jint)idx;

- (id)getParameterValueWithInt:(jint)idx;

- (jboolean)hasArgNamedWithNSString:(NSString *)name;

- (jboolean)isNestedBlockRepeater;

- (jboolean)isShownInStackTrace;

@end

J2OBJC_STATIC_INIT(FreemarkerCoreMacro)

FOUNDATION_EXPORT FreemarkerCoreMacro *FreemarkerCoreMacro_DO_NOTHING_MACRO_;
J2OBJC_STATIC_FIELD_GETTER(FreemarkerCoreMacro, DO_NOTHING_MACRO_, FreemarkerCoreMacro *)

J2OBJC_STATIC_FIELD_GETTER(FreemarkerCoreMacro, TYPE_MACRO, jint)

J2OBJC_STATIC_FIELD_GETTER(FreemarkerCoreMacro, TYPE_FUNCTION, jint)

FOUNDATION_EXPORT void FreemarkerCoreMacro_initWithNSString_withJavaUtilList_withJavaUtilMap_withNSString_withBoolean_withFreemarkerCoreTemplateElement_(FreemarkerCoreMacro *self, NSString *name, id<JavaUtilList> argumentNames, id<JavaUtilMap> args, NSString *catchAllParamName, jboolean function, FreemarkerCoreTemplateElement *nestedBlock);

FOUNDATION_EXPORT FreemarkerCoreMacro *new_FreemarkerCoreMacro_initWithNSString_withJavaUtilList_withJavaUtilMap_withNSString_withBoolean_withFreemarkerCoreTemplateElement_(NSString *name, id<JavaUtilList> argumentNames, id<JavaUtilMap> args, NSString *catchAllParamName, jboolean function, FreemarkerCoreTemplateElement *nestedBlock) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerCoreMacro)

@interface FreemarkerCoreMacro_Context : NSObject < FreemarkerCoreLocalContext > {
 @public
  FreemarkerCoreEnvironment_Namespace *localVars_;
  FreemarkerCoreTemplateElement *nestedContent_;
  FreemarkerCoreEnvironment_Namespace *nestedContentNamespace_;
  id<JavaUtilList> nestedContentParameterNames_;
  JavaUtilArrayList *prevLocalContextStack_;
  FreemarkerCoreMacro_Context *prevMacroContext_;
}

#pragma mark Public

/**
 @return the local variable of the given name or null if it doesn't exist.
 */
- (id<FreemarkerTemplateTemplateModel>)getLocalVariableWithNSString:(NSString *)name;

- (id<JavaUtilCollection>)getLocalVariableNames;

#pragma mark Package-Private

- (instancetype)initWithFreemarkerCoreMacro:(FreemarkerCoreMacro *)outer$
              withFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env
          withFreemarkerCoreTemplateElement:(FreemarkerCoreTemplateElement *)nestedContent
                           withJavaUtilList:(id<JavaUtilList>)nestedContentParameterNames;

- (FreemarkerCoreEnvironment_Namespace *)getLocals;

- (FreemarkerCoreMacro *)getMacro;

- (void)runMacroWithFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env;

- (void)sanityCheckWithFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env;

/**
 @brief Set a local variable in this macro
 */
- (void)setLocalVarWithNSString:(NSString *)name
withFreemarkerTemplateTemplateModel:(id<FreemarkerTemplateTemplateModel>)var;

@end

J2OBJC_EMPTY_STATIC_INIT(FreemarkerCoreMacro_Context)

J2OBJC_FIELD_SETTER(FreemarkerCoreMacro_Context, localVars_, FreemarkerCoreEnvironment_Namespace *)
J2OBJC_FIELD_SETTER(FreemarkerCoreMacro_Context, nestedContent_, FreemarkerCoreTemplateElement *)
J2OBJC_FIELD_SETTER(FreemarkerCoreMacro_Context, nestedContentNamespace_, FreemarkerCoreEnvironment_Namespace *)
J2OBJC_FIELD_SETTER(FreemarkerCoreMacro_Context, nestedContentParameterNames_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(FreemarkerCoreMacro_Context, prevLocalContextStack_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(FreemarkerCoreMacro_Context, prevMacroContext_, FreemarkerCoreMacro_Context *)

FOUNDATION_EXPORT void FreemarkerCoreMacro_Context_initWithFreemarkerCoreMacro_withFreemarkerCoreEnvironment_withFreemarkerCoreTemplateElement_withJavaUtilList_(FreemarkerCoreMacro_Context *self, FreemarkerCoreMacro *outer$, FreemarkerCoreEnvironment *env, FreemarkerCoreTemplateElement *nestedContent, id<JavaUtilList> nestedContentParameterNames);

FOUNDATION_EXPORT FreemarkerCoreMacro_Context *new_FreemarkerCoreMacro_Context_initWithFreemarkerCoreMacro_withFreemarkerCoreEnvironment_withFreemarkerCoreTemplateElement_withJavaUtilList_(FreemarkerCoreMacro *outer$, FreemarkerCoreEnvironment *env, FreemarkerCoreTemplateElement *nestedContent, id<JavaUtilList> nestedContentParameterNames) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerCoreMacro_Context)

#endif // _FreemarkerCoreMacro_H_
