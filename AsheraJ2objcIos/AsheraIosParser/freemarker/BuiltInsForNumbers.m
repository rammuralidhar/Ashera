//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/BuiltInsForNumbers.java
//


#include "BuiltIn.h"
#include "BuiltInForNumber.h"
#include "BuiltInsForNumbers.h"
#include "Environment.h"
#include "EvalUtil.h"
#include "Expression.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "NumberUtil.h"
#include "SimpleDate.h"
#include "SimpleNumber.h"
#include "SimpleScalar.h"
#include "StringUtil.h"
#include "TemplateBooleanModel.h"
#include "TemplateDateModel.h"
#include "TemplateException.h"
#include "TemplateModel.h"
#include "TemplateModelException.h"
#include "TemplateNumberModel.h"
#include "_TemplateModelException.h"
#include "java/lang/ArithmeticException.h"
#include "java/lang/Byte.h"
#include "java/lang/Double.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/lang/Short.h"
#include "java/math/BigDecimal.h"
#include "java/math/BigInteger.h"
#include "java/util/Date.h"

#line 0 "/Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/BuiltInsForNumbers.java"

@interface FreemarkerCoreBuiltInsForNumbers ()

+ (jlong)safeToLongWithNSNumber:(NSNumber *)num;

- (instancetype)init;

@end

static JavaMathBigDecimal *FreemarkerCoreBuiltInsForNumbers_BIG_DECIMAL_ONE_;
J2OBJC_STATIC_FIELD_GETTER(FreemarkerCoreBuiltInsForNumbers, BIG_DECIMAL_ONE_, JavaMathBigDecimal *)

static JavaMathBigDecimal *FreemarkerCoreBuiltInsForNumbers_BIG_DECIMAL_LONG_MIN_;
J2OBJC_STATIC_FIELD_GETTER(FreemarkerCoreBuiltInsForNumbers, BIG_DECIMAL_LONG_MIN_, JavaMathBigDecimal *)

static JavaMathBigDecimal *FreemarkerCoreBuiltInsForNumbers_BIG_DECIMAL_LONG_MAX_;
J2OBJC_STATIC_FIELD_GETTER(FreemarkerCoreBuiltInsForNumbers, BIG_DECIMAL_LONG_MAX_, JavaMathBigDecimal *)

static JavaMathBigInteger *FreemarkerCoreBuiltInsForNumbers_BIG_INTEGER_LONG_MIN_;
J2OBJC_STATIC_FIELD_GETTER(FreemarkerCoreBuiltInsForNumbers, BIG_INTEGER_LONG_MIN_, JavaMathBigInteger *)

static JavaMathBigInteger *FreemarkerCoreBuiltInsForNumbers_BIG_INTEGER_LONG_MAX_;
J2OBJC_STATIC_FIELD_GETTER(FreemarkerCoreBuiltInsForNumbers, BIG_INTEGER_LONG_MAX_, JavaMathBigInteger *)

__attribute__((unused)) static jlong FreemarkerCoreBuiltInsForNumbers_safeToLongWithNSNumber_(NSNumber *num);

__attribute__((unused)) static void FreemarkerCoreBuiltInsForNumbers_init(FreemarkerCoreBuiltInsForNumbers *self);

__attribute__((unused)) static FreemarkerCoreBuiltInsForNumbers *new_FreemarkerCoreBuiltInsForNumbers_init() NS_RETURNS_RETAINED;

@interface FreemarkerCoreBuiltInsForNumbers_abcBI ()

- (instancetype)init;

@end

__attribute__((unused)) static void FreemarkerCoreBuiltInsForNumbers_abcBI_init(FreemarkerCoreBuiltInsForNumbers_abcBI *self);

@interface FreemarkerCoreBuiltInsForNumbers_number_to_dateBI () {
 @public
  jint dateType_;
}

@end

static JavaMathBigDecimal *FreemarkerCoreBuiltInsForNumbers_roundBI_half_;
J2OBJC_STATIC_FIELD_GETTER(FreemarkerCoreBuiltInsForNumbers_roundBI, half_, JavaMathBigDecimal *)

J2OBJC_INITIALIZED_DEFN(FreemarkerCoreBuiltInsForNumbers)


#line 38
@implementation FreemarkerCoreBuiltInsForNumbers


#line 256
+ (jlong)safeToLongWithNSNumber:(NSNumber *)num {
  return FreemarkerCoreBuiltInsForNumbers_safeToLongWithNSNumber_(num);
}


#line 305
- (instancetype)init {
  FreemarkerCoreBuiltInsForNumbers_init(self);
  return self;
}

+ (void)initialize {
  if (self == [FreemarkerCoreBuiltInsForNumbers class]) {
    FreemarkerCoreBuiltInsForNumbers_BIG_DECIMAL_ONE_ = new_JavaMathBigDecimal_initWithNSString_(
#line 297
    @"1");
    FreemarkerCoreBuiltInsForNumbers_BIG_DECIMAL_LONG_MIN_ = JavaMathBigDecimal_valueOfWithLong_(
#line 298
    JavaLangLong_MIN_VALUE);
    FreemarkerCoreBuiltInsForNumbers_BIG_DECIMAL_LONG_MAX_ = JavaMathBigDecimal_valueOfWithLong_(
#line 299
    JavaLangLong_MAX_VALUE);
    FreemarkerCoreBuiltInsForNumbers_BIG_INTEGER_LONG_MIN_ = JavaMathBigInteger_valueOfWithLong_(
#line 300
    JavaLangLong_MIN_VALUE);
    FreemarkerCoreBuiltInsForNumbers_BIG_INTEGER_LONG_MAX_ = JavaMathBigInteger_valueOfWithLong_(
#line 302
    JavaLangLong_MAX_VALUE);
    J2OBJC_SET_INITIALIZED(FreemarkerCoreBuiltInsForNumbers)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "safeToLongWithNSNumber:", "safeToLong", "J", 0x1a, "Lfreemarker.template.TemplateModelException;", NULL },
    { "init", "BuiltInsForNumbers", NULL, 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "BIG_DECIMAL_ONE_", NULL, 0x1a, "Ljava.math.BigDecimal;", &FreemarkerCoreBuiltInsForNumbers_BIG_DECIMAL_ONE_, NULL,  },
    { "BIG_DECIMAL_LONG_MIN_", NULL, 0x1a, "Ljava.math.BigDecimal;", &FreemarkerCoreBuiltInsForNumbers_BIG_DECIMAL_LONG_MIN_, NULL,  },
    { "BIG_DECIMAL_LONG_MAX_", NULL, 0x1a, "Ljava.math.BigDecimal;", &FreemarkerCoreBuiltInsForNumbers_BIG_DECIMAL_LONG_MAX_, NULL,  },
    { "BIG_INTEGER_LONG_MIN_", NULL, 0x1a, "Ljava.math.BigInteger;", &FreemarkerCoreBuiltInsForNumbers_BIG_INTEGER_LONG_MIN_, NULL,  },
    { "BIG_INTEGER_LONG_MAX_", NULL, 0x1a, "Ljava.math.BigInteger;", &FreemarkerCoreBuiltInsForNumbers_BIG_INTEGER_LONG_MAX_, NULL,  },
  };
  static const char *inner_classes[] = {"Lfreemarker.core.BuiltInsForNumbers$abcBI;", "Lfreemarker.core.BuiltInsForNumbers$lower_abcBI;", "Lfreemarker.core.BuiltInsForNumbers$upper_abcBI;", "Lfreemarker.core.BuiltInsForNumbers$absBI;", "Lfreemarker.core.BuiltInsForNumbers$byteBI;", "Lfreemarker.core.BuiltInsForNumbers$ceilingBI;", "Lfreemarker.core.BuiltInsForNumbers$doubleBI;", "Lfreemarker.core.BuiltInsForNumbers$floatBI;", "Lfreemarker.core.BuiltInsForNumbers$floorBI;", "Lfreemarker.core.BuiltInsForNumbers$intBI;", "Lfreemarker.core.BuiltInsForNumbers$is_infiniteBI;", "Lfreemarker.core.BuiltInsForNumbers$is_nanBI;", "Lfreemarker.core.BuiltInsForNumbers$longBI;", "Lfreemarker.core.BuiltInsForNumbers$number_to_dateBI;", "Lfreemarker.core.BuiltInsForNumbers$roundBI;", "Lfreemarker.core.BuiltInsForNumbers$shortBI;"};
  static const J2ObjcClassInfo _FreemarkerCoreBuiltInsForNumbers = { 2, "BuiltInsForNumbers", "freemarker.core", NULL, 0x0, 2, methods, 5, fields, 0, NULL, 16, inner_classes, NULL, NULL };
  return &_FreemarkerCoreBuiltInsForNumbers;
}

@end


#line 256
jlong FreemarkerCoreBuiltInsForNumbers_safeToLongWithNSNumber_(NSNumber *num) {
  FreemarkerCoreBuiltInsForNumbers_initialize();
  
#line 257
  if ([num isKindOfClass:[JavaLangDouble class]]) {
    jdouble d = JavaLangMath_roundWithDouble_([((JavaLangDouble *) nil_chk(((JavaLangDouble *) check_class_cast(num, [JavaLangDouble class])))) doubleValue]);
    if (d > JavaLangLong_MAX_VALUE || d < JavaLangLong_MIN_VALUE) {
      @throw new_FreemarkerCore_TemplateModelException_initWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){
#line 261
        @"Number doesn't fit into a 64 bit signed integer (long): ", new_JavaLangDouble_initWithDouble_(d) } count:2 type:NSObject_class_()]);
      }
      else {
        
#line 263
        return J2ObjCFpToLong(d);
      }
    }
    else
#line 265
    if ([num isKindOfClass:[JavaLangFloat class]]) {
      jfloat f = JavaLangMath_roundWithFloat_([((JavaLangFloat *) nil_chk(((JavaLangFloat *) check_class_cast(num, [JavaLangFloat class])))) floatValue]);
      if (f > JavaLangLong_MAX_VALUE || f < JavaLangLong_MIN_VALUE) {
        @throw new_FreemarkerCore_TemplateModelException_initWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){
#line 269
          @"Number doesn't fit into a 64 bit signed integer (long): ", new_JavaLangFloat_initWithFloat_(f) } count:2 type:NSObject_class_()]);
        }
        else {
          
#line 271
          return J2ObjCFpToLong(f);
        }
      }
      else
#line 273
      if ([num isKindOfClass:[JavaMathBigDecimal class]]) {
        JavaMathBigDecimal *bd = [((JavaMathBigDecimal *) nil_chk(((JavaMathBigDecimal *) check_class_cast(num, [JavaMathBigDecimal class])))) setScaleWithInt:0 withInt:JavaMathBigDecimal_ROUND_HALF_UP];
        if ([((JavaMathBigDecimal *) nil_chk(bd)) compareToWithId:FreemarkerCoreBuiltInsForNumbers_BIG_DECIMAL_LONG_MAX_] > 0 || [bd compareToWithId:FreemarkerCoreBuiltInsForNumbers_BIG_DECIMAL_LONG_MIN_] < 0) {
          @throw new_FreemarkerCore_TemplateModelException_initWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){
#line 277
            @"Number doesn't fit into a 64 bit signed integer (long): ", bd } count:2 type:NSObject_class_()]);
          }
          else {
            
#line 279
            return [bd longLongValue];
          }
        }
        else
#line 281
        if ([num isKindOfClass:[JavaMathBigInteger class]]) {
          JavaMathBigInteger *bi = (JavaMathBigInteger *) check_class_cast(num, [JavaMathBigInteger class]);
          if ([((JavaMathBigInteger *) nil_chk(bi)) compareToWithId:FreemarkerCoreBuiltInsForNumbers_BIG_INTEGER_LONG_MAX_] > 0 || [bi compareToWithId:FreemarkerCoreBuiltInsForNumbers_BIG_INTEGER_LONG_MIN_] < 0) {
            @throw new_FreemarkerCore_TemplateModelException_initWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){
#line 285
              @"Number doesn't fit into a 64 bit signed integer (long): ", bi } count:2 type:NSObject_class_()]);
            }
            else {
              
#line 287
              return [bi longLongValue];
            }
          }
          else
#line 289
          if ([num isKindOfClass:[JavaLangLong class]] || [num isKindOfClass:[JavaLangInteger class]] || [num isKindOfClass:[JavaLangByte class]] || [num isKindOfClass:[JavaLangShort class]]) {
            return [((NSNumber *) nil_chk(num)) longLongValue];
          }
          else {
            @throw new_FreemarkerCore_TemplateModelException_initWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ @"Unsupported number type: ", [((NSNumber *) nil_chk(num)) getClass] } count:2 type:NSObject_class_()]);
          }
        }


#line 305
void FreemarkerCoreBuiltInsForNumbers_init(FreemarkerCoreBuiltInsForNumbers *self) {
  (void) NSObject_init(self);
}


#line 305
FreemarkerCoreBuiltInsForNumbers *new_FreemarkerCoreBuiltInsForNumbers_init() {
  FreemarkerCoreBuiltInsForNumbers *self = [FreemarkerCoreBuiltInsForNumbers alloc];
  FreemarkerCoreBuiltInsForNumbers_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreBuiltInsForNumbers)


#line 40
@implementation FreemarkerCoreBuiltInsForNumbers_abcBI

- (id<FreemarkerTemplateTemplateModel>)calculateResultWithNSNumber:(NSNumber *)num
                               withFreemarkerTemplateTemplateModel:(id<FreemarkerTemplateTemplateModel>)model {
  jint n;
  @try {
    n = FreemarkerTemplateUtilityNumberUtil_toIntExactWithNSNumber_(num);
  }
  @catch (
#line 46
  JavaLangArithmeticException *e) {
    @throw new_FreemarkerCore_TemplateModelException_initWithFreemarkerCoreExpression_withNSObjectArray_(target_, [IOSObjectArray newArrayWithObjects:(id[]){
#line 48
      @"The left side operand value isn't compatible with ?", key_, @": ",
#line 49
      [((JavaLangArithmeticException *) nil_chk(e)) getMessage] } count:4 type:NSObject_class_()]);
    }
    
#line 52
    if (n <= 0) {
      @throw new_FreemarkerCore_TemplateModelException_initWithFreemarkerCoreExpression_withNSObjectArray_(target_, [IOSObjectArray newArrayWithObjects:(id[]){
#line 54
        @"The left side operand of to ?", key_, @" must be at least 1, but was ", new_JavaLangInteger_initWithInt_(
#line 55
        n), @"." } count:5 type:NSObject_class_()]);
      }
      return new_FreemarkerTemplateSimpleScalar_initWithNSString_([self toABCWithInt:n]);
    }


#line 60
- (NSString *)toABCWithInt:(jint)n {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (instancetype)init {
  FreemarkerCoreBuiltInsForNumbers_abcBI_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "calculateResultWithNSNumber:withFreemarkerTemplateTemplateModel:", "calculateResult", "Lfreemarker.template.TemplateModel;", 0x0, "Lfreemarker.template.TemplateModelException;", NULL },
    { "toABCWithInt:", "toABC", "Ljava.lang.String;", 0x404, NULL, NULL },
    { "init", NULL, NULL, 0x2, NULL, NULL },
  };
  static const J2ObjcClassInfo _FreemarkerCoreBuiltInsForNumbers_abcBI = { 2, "abcBI", "freemarker.core", "BuiltInsForNumbers", 0x40a, 3, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerCoreBuiltInsForNumbers_abcBI;
}

@end

void FreemarkerCoreBuiltInsForNumbers_abcBI_init(FreemarkerCoreBuiltInsForNumbers_abcBI *self) {
  (void) FreemarkerCoreBuiltInForNumber_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreBuiltInsForNumbers_abcBI)


#line 64
@implementation FreemarkerCoreBuiltInsForNumbers_lower_abcBI

- (NSString *)toABCWithInt:(jint)n {
  return FreemarkerTemplateUtilityStringUtil_toLowerABCWithInt_(n);
}

- (instancetype)init {
  FreemarkerCoreBuiltInsForNumbers_lower_abcBI_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "toABCWithInt:", "toABC", "Ljava.lang.String;", 0x4, NULL, NULL },
    { "init", NULL, NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcClassInfo _FreemarkerCoreBuiltInsForNumbers_lower_abcBI = { 2, "lower_abcBI", "freemarker.core", "BuiltInsForNumbers", 0x8, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerCoreBuiltInsForNumbers_lower_abcBI;
}

@end

void FreemarkerCoreBuiltInsForNumbers_lower_abcBI_init(FreemarkerCoreBuiltInsForNumbers_lower_abcBI *self) {
  (void) FreemarkerCoreBuiltInsForNumbers_abcBI_init(self);
}

FreemarkerCoreBuiltInsForNumbers_lower_abcBI *new_FreemarkerCoreBuiltInsForNumbers_lower_abcBI_init() {
  FreemarkerCoreBuiltInsForNumbers_lower_abcBI *self = [FreemarkerCoreBuiltInsForNumbers_lower_abcBI alloc];
  FreemarkerCoreBuiltInsForNumbers_lower_abcBI_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreBuiltInsForNumbers_lower_abcBI)


#line 72
@implementation FreemarkerCoreBuiltInsForNumbers_upper_abcBI

- (NSString *)toABCWithInt:(jint)n {
  return FreemarkerTemplateUtilityStringUtil_toUpperABCWithInt_(n);
}

- (instancetype)init {
  FreemarkerCoreBuiltInsForNumbers_upper_abcBI_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "toABCWithInt:", "toABC", "Ljava.lang.String;", 0x4, NULL, NULL },
    { "init", NULL, NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcClassInfo _FreemarkerCoreBuiltInsForNumbers_upper_abcBI = { 2, "upper_abcBI", "freemarker.core", "BuiltInsForNumbers", 0x8, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerCoreBuiltInsForNumbers_upper_abcBI;
}

@end

void FreemarkerCoreBuiltInsForNumbers_upper_abcBI_init(FreemarkerCoreBuiltInsForNumbers_upper_abcBI *self) {
  (void) FreemarkerCoreBuiltInsForNumbers_abcBI_init(self);
}

FreemarkerCoreBuiltInsForNumbers_upper_abcBI *new_FreemarkerCoreBuiltInsForNumbers_upper_abcBI_init() {
  FreemarkerCoreBuiltInsForNumbers_upper_abcBI *self = [FreemarkerCoreBuiltInsForNumbers_upper_abcBI alloc];
  FreemarkerCoreBuiltInsForNumbers_upper_abcBI_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreBuiltInsForNumbers_upper_abcBI)


#line 80
@implementation FreemarkerCoreBuiltInsForNumbers_absBI


#line 81
- (id<FreemarkerTemplateTemplateModel>)calculateResultWithNSNumber:(NSNumber *)num
                               withFreemarkerTemplateTemplateModel:(id<FreemarkerTemplateTemplateModel>)model {
  if ([num isKindOfClass:[JavaLangInteger class]]) {
    jint n = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) check_class_cast(num, [JavaLangInteger class])))) intValue];
    if (n < 0) {
      return new_FreemarkerTemplateSimpleNumber_initWithInt_(-n);
    }
    else {
      
#line 87
      return model;
    }
  }
  else
#line 89
  if ([num isKindOfClass:[JavaMathBigDecimal class]]) {
    JavaMathBigDecimal *n = (JavaMathBigDecimal *) check_class_cast(num, [JavaMathBigDecimal class]);
    if ([((JavaMathBigDecimal *) nil_chk(n)) signum] < 0) {
      return new_FreemarkerTemplateSimpleNumber_initWithNSNumber_([n negate]);
    }
    else {
      
#line 94
      return model;
    }
  }
  else
#line 96
  if ([num isKindOfClass:[JavaLangDouble class]]) {
    jdouble n = [((JavaLangDouble *) nil_chk(((JavaLangDouble *) check_class_cast(num, [JavaLangDouble class])))) doubleValue];
    if (n < 0) {
      return new_FreemarkerTemplateSimpleNumber_initWithDouble_(-n);
    }
    else {
      
#line 101
      return model;
    }
  }
  else
#line 103
  if ([num isKindOfClass:[JavaLangFloat class]]) {
    jfloat n = [((JavaLangFloat *) nil_chk(((JavaLangFloat *) check_class_cast(num, [JavaLangFloat class])))) floatValue];
    if (n < 0) {
      return new_FreemarkerTemplateSimpleNumber_initWithFloat_(-n);
    }
    else {
      
#line 108
      return model;
    }
  }
  else
#line 110
  if ([num isKindOfClass:[JavaLangLong class]]) {
    jlong n = [((JavaLangLong *) nil_chk(((JavaLangLong *) check_class_cast(num, [JavaLangLong class])))) longLongValue];
    if (n < 0) {
      return new_FreemarkerTemplateSimpleNumber_initWithLong_(-n);
    }
    else {
      
#line 115
      return model;
    }
  }
  else
#line 117
  if ([num isKindOfClass:[JavaLangShort class]]) {
    jshort n = [((JavaLangShort *) nil_chk(((JavaLangShort *) check_class_cast(num, [JavaLangShort class])))) shortValue];
    if (n < 0) {
      return new_FreemarkerTemplateSimpleNumber_initWithInt_(-n);
    }
    else {
      
#line 122
      return model;
    }
  }
  else
#line 124
  if ([num isKindOfClass:[JavaLangByte class]]) {
    jbyte n = [((JavaLangByte *) nil_chk(((JavaLangByte *) check_class_cast(num, [JavaLangByte class])))) charValue];
    if (n < 0) {
      return new_FreemarkerTemplateSimpleNumber_initWithInt_(-n);
    }
    else {
      
#line 129
      return model;
    }
  }
  else
#line 131
  if ([num isKindOfClass:[JavaMathBigInteger class]]) {
    JavaMathBigInteger *n = (JavaMathBigInteger *) check_class_cast(num, [JavaMathBigInteger class]);
    if ([((JavaMathBigInteger *) nil_chk(n)) signum] < 0) {
      return new_FreemarkerTemplateSimpleNumber_initWithNSNumber_([n negate]);
    }
    else {
      
#line 136
      return model;
    }
  }
  else {
    
#line 139
    @throw new_FreemarkerCore_TemplateModelException_initWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){
#line 140
      @"Unsupported number class: ", [((NSNumber *) nil_chk(num)) getClass] } count:2 type:NSObject_class_()]);
    }
  }

- (instancetype)init {
  FreemarkerCoreBuiltInsForNumbers_absBI_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "calculateResultWithNSNumber:withFreemarkerTemplateTemplateModel:", "calculateResult", "Lfreemarker.template.TemplateModel;", 0x0, "Lfreemarker.template.TemplateModelException;", NULL },
    { "init", NULL, NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcClassInfo _FreemarkerCoreBuiltInsForNumbers_absBI = { 2, "absBI", "freemarker.core", "BuiltInsForNumbers", 0x8, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerCoreBuiltInsForNumbers_absBI;
}

@end

void FreemarkerCoreBuiltInsForNumbers_absBI_init(FreemarkerCoreBuiltInsForNumbers_absBI *self) {
  (void) FreemarkerCoreBuiltInForNumber_init(self);
}

FreemarkerCoreBuiltInsForNumbers_absBI *new_FreemarkerCoreBuiltInsForNumbers_absBI_init() {
  FreemarkerCoreBuiltInsForNumbers_absBI *self = [FreemarkerCoreBuiltInsForNumbers_absBI alloc];
  FreemarkerCoreBuiltInsForNumbers_absBI_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreBuiltInsForNumbers_absBI)


#line 145
@implementation FreemarkerCoreBuiltInsForNumbers_byteBI


#line 146
- (id<FreemarkerTemplateTemplateModel>)calculateResultWithNSNumber:(NSNumber *)num
                               withFreemarkerTemplateTemplateModel:(id<FreemarkerTemplateTemplateModel>)model {
  if ([num isKindOfClass:[JavaLangByte class]]) {
    return model;
  }
  return new_FreemarkerTemplateSimpleNumber_initWithNSNumber_(new_JavaLangByte_initWithByte_([((NSNumber *) nil_chk(num)) charValue]));
}

- (instancetype)init {
  FreemarkerCoreBuiltInsForNumbers_byteBI_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "calculateResultWithNSNumber:withFreemarkerTemplateTemplateModel:", "calculateResult", "Lfreemarker.template.TemplateModel;", 0x0, NULL, NULL },
    { "init", NULL, NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcClassInfo _FreemarkerCoreBuiltInsForNumbers_byteBI = { 2, "byteBI", "freemarker.core", "BuiltInsForNumbers", 0x8, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerCoreBuiltInsForNumbers_byteBI;
}

@end

void FreemarkerCoreBuiltInsForNumbers_byteBI_init(FreemarkerCoreBuiltInsForNumbers_byteBI *self) {
  (void) FreemarkerCoreBuiltInForNumber_init(self);
}

FreemarkerCoreBuiltInsForNumbers_byteBI *new_FreemarkerCoreBuiltInsForNumbers_byteBI_init() {
  FreemarkerCoreBuiltInsForNumbers_byteBI *self = [FreemarkerCoreBuiltInsForNumbers_byteBI alloc];
  FreemarkerCoreBuiltInsForNumbers_byteBI_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreBuiltInsForNumbers_byteBI)


#line 154
@implementation FreemarkerCoreBuiltInsForNumbers_ceilingBI


#line 155
- (id<FreemarkerTemplateTemplateModel>)calculateResultWithNSNumber:(NSNumber *)num
                               withFreemarkerTemplateTemplateModel:(id<FreemarkerTemplateTemplateModel>)model {
  return new_FreemarkerTemplateSimpleNumber_initWithNSNumber_([new_JavaMathBigDecimal_initWithDouble_([((NSNumber *) nil_chk(num)) doubleValue]) divideWithJavaMathBigDecimal:FreemarkerCoreBuiltInsForNumbers_get_BIG_DECIMAL_ONE_() withInt:0 withInt:JavaMathBigDecimal_ROUND_CEILING]);
}

- (instancetype)init {
  FreemarkerCoreBuiltInsForNumbers_ceilingBI_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "calculateResultWithNSNumber:withFreemarkerTemplateTemplateModel:", "calculateResult", "Lfreemarker.template.TemplateModel;", 0x0, NULL, NULL },
    { "init", NULL, NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcClassInfo _FreemarkerCoreBuiltInsForNumbers_ceilingBI = { 2, "ceilingBI", "freemarker.core", "BuiltInsForNumbers", 0x8, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerCoreBuiltInsForNumbers_ceilingBI;
}

@end

void FreemarkerCoreBuiltInsForNumbers_ceilingBI_init(FreemarkerCoreBuiltInsForNumbers_ceilingBI *self) {
  (void) FreemarkerCoreBuiltInForNumber_init(self);
}

FreemarkerCoreBuiltInsForNumbers_ceilingBI *new_FreemarkerCoreBuiltInsForNumbers_ceilingBI_init() {
  FreemarkerCoreBuiltInsForNumbers_ceilingBI *self = [FreemarkerCoreBuiltInsForNumbers_ceilingBI alloc];
  FreemarkerCoreBuiltInsForNumbers_ceilingBI_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreBuiltInsForNumbers_ceilingBI)


#line 160
@implementation FreemarkerCoreBuiltInsForNumbers_doubleBI


#line 161
- (id<FreemarkerTemplateTemplateModel>)calculateResultWithNSNumber:(NSNumber *)num
                               withFreemarkerTemplateTemplateModel:(id<FreemarkerTemplateTemplateModel>)model {
  if ([num isKindOfClass:[JavaLangDouble class]]) {
    return model;
  }
  return new_FreemarkerTemplateSimpleNumber_initWithDouble_([((NSNumber *) nil_chk(num)) doubleValue]);
}

- (instancetype)init {
  FreemarkerCoreBuiltInsForNumbers_doubleBI_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "calculateResultWithNSNumber:withFreemarkerTemplateTemplateModel:", "calculateResult", "Lfreemarker.template.TemplateModel;", 0x0, NULL, NULL },
    { "init", NULL, NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcClassInfo _FreemarkerCoreBuiltInsForNumbers_doubleBI = { 2, "doubleBI", "freemarker.core", "BuiltInsForNumbers", 0x8, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerCoreBuiltInsForNumbers_doubleBI;
}

@end

void FreemarkerCoreBuiltInsForNumbers_doubleBI_init(FreemarkerCoreBuiltInsForNumbers_doubleBI *self) {
  (void) FreemarkerCoreBuiltInForNumber_init(self);
}

FreemarkerCoreBuiltInsForNumbers_doubleBI *new_FreemarkerCoreBuiltInsForNumbers_doubleBI_init() {
  FreemarkerCoreBuiltInsForNumbers_doubleBI *self = [FreemarkerCoreBuiltInsForNumbers_doubleBI alloc];
  FreemarkerCoreBuiltInsForNumbers_doubleBI_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreBuiltInsForNumbers_doubleBI)


#line 169
@implementation FreemarkerCoreBuiltInsForNumbers_floatBI


#line 170
- (id<FreemarkerTemplateTemplateModel>)calculateResultWithNSNumber:(NSNumber *)num
                               withFreemarkerTemplateTemplateModel:(id<FreemarkerTemplateTemplateModel>)model {
  if ([num isKindOfClass:[JavaLangFloat class]]) {
    return model;
  }
  return new_FreemarkerTemplateSimpleNumber_initWithFloat_([((NSNumber *) nil_chk(num)) floatValue]);
}

- (instancetype)init {
  FreemarkerCoreBuiltInsForNumbers_floatBI_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "calculateResultWithNSNumber:withFreemarkerTemplateTemplateModel:", "calculateResult", "Lfreemarker.template.TemplateModel;", 0x0, NULL, NULL },
    { "init", NULL, NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcClassInfo _FreemarkerCoreBuiltInsForNumbers_floatBI = { 2, "floatBI", "freemarker.core", "BuiltInsForNumbers", 0x8, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerCoreBuiltInsForNumbers_floatBI;
}

@end

void FreemarkerCoreBuiltInsForNumbers_floatBI_init(FreemarkerCoreBuiltInsForNumbers_floatBI *self) {
  (void) FreemarkerCoreBuiltInForNumber_init(self);
}

FreemarkerCoreBuiltInsForNumbers_floatBI *new_FreemarkerCoreBuiltInsForNumbers_floatBI_init() {
  FreemarkerCoreBuiltInsForNumbers_floatBI *self = [FreemarkerCoreBuiltInsForNumbers_floatBI alloc];
  FreemarkerCoreBuiltInsForNumbers_floatBI_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreBuiltInsForNumbers_floatBI)


#line 178
@implementation FreemarkerCoreBuiltInsForNumbers_floorBI


#line 179
- (id<FreemarkerTemplateTemplateModel>)calculateResultWithNSNumber:(NSNumber *)num
                               withFreemarkerTemplateTemplateModel:(id<FreemarkerTemplateTemplateModel>)model {
  return new_FreemarkerTemplateSimpleNumber_initWithNSNumber_([new_JavaMathBigDecimal_initWithDouble_([((NSNumber *) nil_chk(num)) doubleValue]) divideWithJavaMathBigDecimal:FreemarkerCoreBuiltInsForNumbers_get_BIG_DECIMAL_ONE_() withInt:0 withInt:JavaMathBigDecimal_ROUND_FLOOR]);
}

- (instancetype)init {
  FreemarkerCoreBuiltInsForNumbers_floorBI_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "calculateResultWithNSNumber:withFreemarkerTemplateTemplateModel:", "calculateResult", "Lfreemarker.template.TemplateModel;", 0x0, NULL, NULL },
    { "init", NULL, NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcClassInfo _FreemarkerCoreBuiltInsForNumbers_floorBI = { 2, "floorBI", "freemarker.core", "BuiltInsForNumbers", 0x8, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerCoreBuiltInsForNumbers_floorBI;
}

@end

void FreemarkerCoreBuiltInsForNumbers_floorBI_init(FreemarkerCoreBuiltInsForNumbers_floorBI *self) {
  (void) FreemarkerCoreBuiltInForNumber_init(self);
}

FreemarkerCoreBuiltInsForNumbers_floorBI *new_FreemarkerCoreBuiltInsForNumbers_floorBI_init() {
  FreemarkerCoreBuiltInsForNumbers_floorBI *self = [FreemarkerCoreBuiltInsForNumbers_floorBI alloc];
  FreemarkerCoreBuiltInsForNumbers_floorBI_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreBuiltInsForNumbers_floorBI)


#line 184
@implementation FreemarkerCoreBuiltInsForNumbers_intBI


#line 185
- (id<FreemarkerTemplateTemplateModel>)calculateResultWithNSNumber:(NSNumber *)num
                               withFreemarkerTemplateTemplateModel:(id<FreemarkerTemplateTemplateModel>)model {
  if ([num isKindOfClass:[JavaLangInteger class]]) {
    return model;
  }
  return new_FreemarkerTemplateSimpleNumber_initWithInt_([((NSNumber *) nil_chk(num)) intValue]);
}

- (instancetype)init {
  FreemarkerCoreBuiltInsForNumbers_intBI_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "calculateResultWithNSNumber:withFreemarkerTemplateTemplateModel:", "calculateResult", "Lfreemarker.template.TemplateModel;", 0x0, NULL, NULL },
    { "init", NULL, NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcClassInfo _FreemarkerCoreBuiltInsForNumbers_intBI = { 2, "intBI", "freemarker.core", "BuiltInsForNumbers", 0x8, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerCoreBuiltInsForNumbers_intBI;
}

@end

void FreemarkerCoreBuiltInsForNumbers_intBI_init(FreemarkerCoreBuiltInsForNumbers_intBI *self) {
  (void) FreemarkerCoreBuiltInForNumber_init(self);
}

FreemarkerCoreBuiltInsForNumbers_intBI *new_FreemarkerCoreBuiltInsForNumbers_intBI_init() {
  FreemarkerCoreBuiltInsForNumbers_intBI *self = [FreemarkerCoreBuiltInsForNumbers_intBI alloc];
  FreemarkerCoreBuiltInsForNumbers_intBI_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreBuiltInsForNumbers_intBI)


#line 193
@implementation FreemarkerCoreBuiltInsForNumbers_is_infiniteBI


#line 194
- (id<FreemarkerTemplateTemplateModel>)calculateResultWithNSNumber:(NSNumber *)num
                               withFreemarkerTemplateTemplateModel:(id<FreemarkerTemplateTemplateModel>)model {
  return FreemarkerTemplateUtilityNumberUtil_isInfiniteWithNSNumber_(num) ? FreemarkerTemplateTemplateBooleanModel_get_TRUE__() : FreemarkerTemplateTemplateBooleanModel_get_FALSE__();
}

- (instancetype)init {
  FreemarkerCoreBuiltInsForNumbers_is_infiniteBI_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "calculateResultWithNSNumber:withFreemarkerTemplateTemplateModel:", "calculateResult", "Lfreemarker.template.TemplateModel;", 0x0, "Lfreemarker.template.TemplateModelException;", NULL },
    { "init", NULL, NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcClassInfo _FreemarkerCoreBuiltInsForNumbers_is_infiniteBI = { 2, "is_infiniteBI", "freemarker.core", "BuiltInsForNumbers", 0x8, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerCoreBuiltInsForNumbers_is_infiniteBI;
}

@end

void FreemarkerCoreBuiltInsForNumbers_is_infiniteBI_init(FreemarkerCoreBuiltInsForNumbers_is_infiniteBI *self) {
  (void) FreemarkerCoreBuiltInForNumber_init(self);
}

FreemarkerCoreBuiltInsForNumbers_is_infiniteBI *new_FreemarkerCoreBuiltInsForNumbers_is_infiniteBI_init() {
  FreemarkerCoreBuiltInsForNumbers_is_infiniteBI *self = [FreemarkerCoreBuiltInsForNumbers_is_infiniteBI alloc];
  FreemarkerCoreBuiltInsForNumbers_is_infiniteBI_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreBuiltInsForNumbers_is_infiniteBI)


#line 200
@implementation FreemarkerCoreBuiltInsForNumbers_is_nanBI


#line 201
- (id<FreemarkerTemplateTemplateModel>)calculateResultWithNSNumber:(NSNumber *)num
                               withFreemarkerTemplateTemplateModel:(id<FreemarkerTemplateTemplateModel>)model {
  return FreemarkerTemplateUtilityNumberUtil_isNaNWithNSNumber_(num) ? FreemarkerTemplateTemplateBooleanModel_get_TRUE__() : FreemarkerTemplateTemplateBooleanModel_get_FALSE__();
}

- (instancetype)init {
  FreemarkerCoreBuiltInsForNumbers_is_nanBI_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "calculateResultWithNSNumber:withFreemarkerTemplateTemplateModel:", "calculateResult", "Lfreemarker.template.TemplateModel;", 0x0, "Lfreemarker.template.TemplateModelException;", NULL },
    { "init", NULL, NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcClassInfo _FreemarkerCoreBuiltInsForNumbers_is_nanBI = { 2, "is_nanBI", "freemarker.core", "BuiltInsForNumbers", 0x8, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerCoreBuiltInsForNumbers_is_nanBI;
}

@end

void FreemarkerCoreBuiltInsForNumbers_is_nanBI_init(FreemarkerCoreBuiltInsForNumbers_is_nanBI *self) {
  (void) FreemarkerCoreBuiltInForNumber_init(self);
}

FreemarkerCoreBuiltInsForNumbers_is_nanBI *new_FreemarkerCoreBuiltInsForNumbers_is_nanBI_init() {
  FreemarkerCoreBuiltInsForNumbers_is_nanBI *self = [FreemarkerCoreBuiltInsForNumbers_is_nanBI alloc];
  FreemarkerCoreBuiltInsForNumbers_is_nanBI_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreBuiltInsForNumbers_is_nanBI)


#line 207
@implementation FreemarkerCoreBuiltInsForNumbers_longBI


#line 208
- (id<FreemarkerTemplateTemplateModel>)_evalWithFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env {
  
#line 211
  id<FreemarkerTemplateTemplateModel> model = [((FreemarkerCoreExpression *) nil_chk(target_)) evalWithFreemarkerCoreEnvironment:env];
  if (!([FreemarkerTemplateTemplateNumberModel_class_() isInstance:model]) &&
#line 213
  [FreemarkerTemplateTemplateDateModel_class_() isInstance:model]) {
    JavaUtilDate *date = FreemarkerCoreEvalUtil_modelToDateWithFreemarkerTemplateTemplateDateModel_withFreemarkerCoreExpression_((id<FreemarkerTemplateTemplateDateModel>) check_protocol_cast(model, @protocol(FreemarkerTemplateTemplateDateModel)), target_);
    return new_FreemarkerTemplateSimpleNumber_initWithLong_([((JavaUtilDate *) nil_chk(date)) getTime]);
  }
  else {
    
#line 217
    NSNumber *num = [target_ modelToNumberWithFreemarkerTemplateTemplateModel:model withFreemarkerCoreEnvironment:env];
    if ([num isKindOfClass:[JavaLangLong class]]) {
      return model;
    }
    return new_FreemarkerTemplateSimpleNumber_initWithLong_([((NSNumber *) nil_chk(num)) longLongValue]);
  }
}

- (instancetype)init {
  FreemarkerCoreBuiltInsForNumbers_longBI_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "_evalWithFreemarkerCoreEnvironment:", "_eval", "Lfreemarker.template.TemplateModel;", 0x0, "Lfreemarker.template.TemplateException;", NULL },
    { "init", NULL, NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcClassInfo _FreemarkerCoreBuiltInsForNumbers_longBI = { 2, "longBI", "freemarker.core", "BuiltInsForNumbers", 0x8, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerCoreBuiltInsForNumbers_longBI;
}

@end

void FreemarkerCoreBuiltInsForNumbers_longBI_init(FreemarkerCoreBuiltInsForNumbers_longBI *self) {
  (void) FreemarkerCoreBuiltIn_init(self);
}

FreemarkerCoreBuiltInsForNumbers_longBI *new_FreemarkerCoreBuiltInsForNumbers_longBI_init() {
  FreemarkerCoreBuiltInsForNumbers_longBI *self = [FreemarkerCoreBuiltInsForNumbers_longBI alloc];
  FreemarkerCoreBuiltInsForNumbers_longBI_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreBuiltInsForNumbers_longBI)


#line 226
@implementation FreemarkerCoreBuiltInsForNumbers_number_to_dateBI


#line 230
- (instancetype)initWithInt:(jint)dateType {
  FreemarkerCoreBuiltInsForNumbers_number_to_dateBI_initWithInt_(self, dateType);
  return self;
}


#line 234
- (id<FreemarkerTemplateTemplateModel>)calculateResultWithNSNumber:(NSNumber *)num
                               withFreemarkerTemplateTemplateModel:(id<FreemarkerTemplateTemplateModel>)model {
  
#line 236
  return new_FreemarkerTemplateSimpleDate_initWithJavaUtilDate_withInt_(new_JavaUtilDate_initWithLong_(FreemarkerCoreBuiltInsForNumbers_safeToLongWithNSNumber_(num)), dateType_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithInt:", "number_to_dateBI", NULL, 0x0, NULL, NULL },
    { "calculateResultWithNSNumber:withFreemarkerTemplateTemplateModel:", "calculateResult", "Lfreemarker.template.TemplateModel;", 0x0, "Lfreemarker.template.TemplateModelException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "dateType_", NULL, 0x12, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerCoreBuiltInsForNumbers_number_to_dateBI = { 2, "number_to_dateBI", "freemarker.core", "BuiltInsForNumbers", 0x8, 2, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerCoreBuiltInsForNumbers_number_to_dateBI;
}

@end


#line 230
void FreemarkerCoreBuiltInsForNumbers_number_to_dateBI_initWithInt_(FreemarkerCoreBuiltInsForNumbers_number_to_dateBI *self, jint dateType) {
  (void) FreemarkerCoreBuiltInForNumber_init(self);
  
#line 231
  self->dateType_ = dateType;
}


#line 230
FreemarkerCoreBuiltInsForNumbers_number_to_dateBI *new_FreemarkerCoreBuiltInsForNumbers_number_to_dateBI_initWithInt_(jint dateType) {
  FreemarkerCoreBuiltInsForNumbers_number_to_dateBI *self = [FreemarkerCoreBuiltInsForNumbers_number_to_dateBI alloc];
  FreemarkerCoreBuiltInsForNumbers_number_to_dateBI_initWithInt_(self, dateType);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreBuiltInsForNumbers_number_to_dateBI)

J2OBJC_INITIALIZED_DEFN(FreemarkerCoreBuiltInsForNumbers_roundBI)

@implementation FreemarkerCoreBuiltInsForNumbers_roundBI

- (id<FreemarkerTemplateTemplateModel>)calculateResultWithNSNumber:(NSNumber *)num
                               withFreemarkerTemplateTemplateModel:(id<FreemarkerTemplateTemplateModel>)model {
  return new_FreemarkerTemplateSimpleNumber_initWithNSNumber_([((JavaMathBigDecimal *) nil_chk([new_JavaMathBigDecimal_initWithDouble_([((NSNumber *) nil_chk(num)) doubleValue]) addWithJavaMathBigDecimal:FreemarkerCoreBuiltInsForNumbers_roundBI_half_])) divideWithJavaMathBigDecimal:FreemarkerCoreBuiltInsForNumbers_get_BIG_DECIMAL_ONE_() withInt:0 withInt:JavaMathBigDecimal_ROUND_FLOOR]);
}

- (instancetype)init {
  FreemarkerCoreBuiltInsForNumbers_roundBI_init(self);
  return self;
}

+ (void)initialize {
  if (self == [FreemarkerCoreBuiltInsForNumbers_roundBI class]) {
    FreemarkerCoreBuiltInsForNumbers_roundBI_half_ = new_JavaMathBigDecimal_initWithNSString_(
#line 241
    @"0.5");
    J2OBJC_SET_INITIALIZED(FreemarkerCoreBuiltInsForNumbers_roundBI)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "calculateResultWithNSNumber:withFreemarkerTemplateTemplateModel:", "calculateResult", "Lfreemarker.template.TemplateModel;", 0x0, NULL, NULL },
    { "init", NULL, NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "half_", NULL, 0x1a, "Ljava.math.BigDecimal;", &FreemarkerCoreBuiltInsForNumbers_roundBI_half_, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerCoreBuiltInsForNumbers_roundBI = { 2, "roundBI", "freemarker.core", "BuiltInsForNumbers", 0x8, 2, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerCoreBuiltInsForNumbers_roundBI;
}

@end

void FreemarkerCoreBuiltInsForNumbers_roundBI_init(FreemarkerCoreBuiltInsForNumbers_roundBI *self) {
  (void) FreemarkerCoreBuiltInForNumber_init(self);
}

FreemarkerCoreBuiltInsForNumbers_roundBI *new_FreemarkerCoreBuiltInsForNumbers_roundBI_init() {
  FreemarkerCoreBuiltInsForNumbers_roundBI *self = [FreemarkerCoreBuiltInsForNumbers_roundBI alloc];
  FreemarkerCoreBuiltInsForNumbers_roundBI_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreBuiltInsForNumbers_roundBI)


#line 247
@implementation FreemarkerCoreBuiltInsForNumbers_shortBI


#line 248
- (id<FreemarkerTemplateTemplateModel>)calculateResultWithNSNumber:(NSNumber *)num
                               withFreemarkerTemplateTemplateModel:(id<FreemarkerTemplateTemplateModel>)model {
  if ([num isKindOfClass:[JavaLangShort class]]) {
    return model;
  }
  return new_FreemarkerTemplateSimpleNumber_initWithNSNumber_(new_JavaLangShort_initWithShort_([((NSNumber *) nil_chk(num)) shortValue]));
}

- (instancetype)init {
  FreemarkerCoreBuiltInsForNumbers_shortBI_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "calculateResultWithNSNumber:withFreemarkerTemplateTemplateModel:", "calculateResult", "Lfreemarker.template.TemplateModel;", 0x0, NULL, NULL },
    { "init", NULL, NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcClassInfo _FreemarkerCoreBuiltInsForNumbers_shortBI = { 2, "shortBI", "freemarker.core", "BuiltInsForNumbers", 0x8, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerCoreBuiltInsForNumbers_shortBI;
}

@end

void FreemarkerCoreBuiltInsForNumbers_shortBI_init(FreemarkerCoreBuiltInsForNumbers_shortBI *self) {
  (void) FreemarkerCoreBuiltInForNumber_init(self);
}

FreemarkerCoreBuiltInsForNumbers_shortBI *new_FreemarkerCoreBuiltInsForNumbers_shortBI_init() {
  FreemarkerCoreBuiltInsForNumbers_shortBI *self = [FreemarkerCoreBuiltInsForNumbers_shortBI alloc];
  FreemarkerCoreBuiltInsForNumbers_shortBI_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreBuiltInsForNumbers_shortBI)
