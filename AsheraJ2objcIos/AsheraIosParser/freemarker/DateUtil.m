//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/template/utility/DateUtil.java
//


#include "DateUtil.h"
#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "NullArgumentException.h"
#include "UnrecognizedTimeZoneException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuffer.h"
#include "java/text/ParseException.h"
#include "java/util/Calendar.h"
#include "java/util/Date.h"
#include "java/util/GregorianCalendar.h"
#include "java/util/Locale.h"
#include "java/util/TimeZone.h"
#include "java/util/regex/Matcher.h"
#include "java/util/regex/Pattern.h"

#line 0 "/Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/template/utility/DateUtil.java"

@interface FreemarkerTemplateUtilityDateUtil ()

- (instancetype)init;

/**
 @brief Tells if a offset or time zone is GMT.
 GMT is a fuzzy term, it used to referred both to UTC and UT1.
 */
+ (jboolean)isGMTishWithNSString:(NSString *)name;

+ (NSString *)dateToStringWithJavaUtilDate:(JavaUtilDate *)date
                               withBoolean:(jboolean)datePart
                               withBoolean:(jboolean)timePart
                               withBoolean:(jboolean)offsetPart
                                   withInt:(jint)accuracy
                      withJavaUtilTimeZone:(JavaUtilTimeZone *)timeZone
                               withBoolean:(jboolean)xsMode
withFreemarkerTemplateUtilityDateUtil_DateToISO8601CalendarFactory:(id<FreemarkerTemplateUtilityDateUtil_DateToISO8601CalendarFactory>)calendarFactory;

/**
 @brief Appends a number between 0 and 99 padded to 2 digits.
 */
+ (jint)append00WithCharArray:(IOSCharArray *)res
                      withInt:(jint)dstIdx
                      withInt:(jint)x;

+ (JavaUtilDate *)parseDate_parseMatcherWithJavaUtilRegexMatcher:(JavaUtilRegexMatcher *)m
                                            withJavaUtilTimeZone:(JavaUtilTimeZone *)defaultTZ
                                                     withBoolean:(jboolean)xsMode
withFreemarkerTemplateUtilityDateUtil_CalendarFieldsToDateConverter:(id<FreemarkerTemplateUtilityDateUtil_CalendarFieldsToDateConverter>)calToDateConverter;

+ (JavaUtilDate *)parseTime_parseMatcherWithJavaUtilRegexMatcher:(JavaUtilRegexMatcher *)m
                                            withJavaUtilTimeZone:(JavaUtilTimeZone *)defaultTZ
withFreemarkerTemplateUtilityDateUtil_CalendarFieldsToDateConverter:(id<FreemarkerTemplateUtilityDateUtil_CalendarFieldsToDateConverter>)calToDateConverter;

+ (JavaUtilDate *)parseDateTime_parseMatcherWithJavaUtilRegexMatcher:(JavaUtilRegexMatcher *)m
                                                withJavaUtilTimeZone:(JavaUtilTimeZone *)defaultTZ
                                                         withBoolean:(jboolean)xsMode
 withFreemarkerTemplateUtilityDateUtil_CalendarFieldsToDateConverter:(id<FreemarkerTemplateUtilityDateUtil_CalendarFieldsToDateConverter>)calToDateConverter;

+ (jint)groupToIntWithNSString:(NSString *)g
                  withNSString:(NSString *)gName
                       withInt:(jint)min
                       withInt:(jint)max;

+ (JavaUtilTimeZone *)parseMatchingTimeZoneWithNSString:(NSString *)s
                                   withJavaUtilTimeZone:(JavaUtilTimeZone *)defaultZone;

+ (jint)groupToMillisecondWithNSString:(NSString *)g;

@end

static NSString *FreemarkerTemplateUtilityDateUtil_REGEX_XS_TIME_ZONE_ = 
#line 61
@"Z|(?:[-+][0-9]{2}:[0-9]{2})";
J2OBJC_STATIC_FIELD_GETTER(FreemarkerTemplateUtilityDateUtil, REGEX_XS_TIME_ZONE_, NSString *)

static NSString *FreemarkerTemplateUtilityDateUtil_REGEX_ISO8601_BASIC_TIME_ZONE_ = 
#line 63
@"Z|(?:[-+][0-9]{2}(?:[0-9]{2})?)";
J2OBJC_STATIC_FIELD_GETTER(FreemarkerTemplateUtilityDateUtil, REGEX_ISO8601_BASIC_TIME_ZONE_, NSString *)

static NSString *FreemarkerTemplateUtilityDateUtil_REGEX_ISO8601_EXTENDED_TIME_ZONE_ = 
#line 65
@"Z|(?:[-+][0-9]{2}(?::[0-9]{2})?)";
J2OBJC_STATIC_FIELD_GETTER(FreemarkerTemplateUtilityDateUtil, REGEX_ISO8601_EXTENDED_TIME_ZONE_, NSString *)

static NSString *FreemarkerTemplateUtilityDateUtil_REGEX_XS_OPTIONAL_TIME_ZONE_ = @"(Z|(?:[-+][0-9]{2}:[0-9]{2}))?";
J2OBJC_STATIC_FIELD_GETTER(FreemarkerTemplateUtilityDateUtil, REGEX_XS_OPTIONAL_TIME_ZONE_, NSString *)

static NSString *FreemarkerTemplateUtilityDateUtil_REGEX_ISO8601_BASIC_OPTIONAL_TIME_ZONE_ = @"(Z|(?:[-+][0-9]{2}(?:[0-9]{2})?))?";
J2OBJC_STATIC_FIELD_GETTER(FreemarkerTemplateUtilityDateUtil, REGEX_ISO8601_BASIC_OPTIONAL_TIME_ZONE_, NSString *)

static NSString *FreemarkerTemplateUtilityDateUtil_REGEX_ISO8601_EXTENDED_OPTIONAL_TIME_ZONE_ = @"(Z|(?:[-+][0-9]{2}(?::[0-9]{2})?))?";
J2OBJC_STATIC_FIELD_GETTER(FreemarkerTemplateUtilityDateUtil, REGEX_ISO8601_EXTENDED_OPTIONAL_TIME_ZONE_, NSString *)

static NSString *FreemarkerTemplateUtilityDateUtil_REGEX_XS_DATE_BASE_ = 
#line 75
@"(-?[0-9]+)-([0-9]{2})-([0-9]{2})";
J2OBJC_STATIC_FIELD_GETTER(FreemarkerTemplateUtilityDateUtil, REGEX_XS_DATE_BASE_, NSString *)

static NSString *FreemarkerTemplateUtilityDateUtil_REGEX_ISO8601_BASIC_DATE_BASE_ = 
#line 77
@"(-?[0-9]{4,}?)([0-9]{2})([0-9]{2})";
J2OBJC_STATIC_FIELD_GETTER(FreemarkerTemplateUtilityDateUtil, REGEX_ISO8601_BASIC_DATE_BASE_, NSString *)

static NSString *FreemarkerTemplateUtilityDateUtil_REGEX_ISO8601_EXTENDED_DATE_BASE_ = 
#line 79
@"(-?[0-9]{4,})-([0-9]{2})-([0-9]{2})";
J2OBJC_STATIC_FIELD_GETTER(FreemarkerTemplateUtilityDateUtil, REGEX_ISO8601_EXTENDED_DATE_BASE_, NSString *)

static NSString *FreemarkerTemplateUtilityDateUtil_REGEX_XS_TIME_BASE_ = 
#line 82
@"([0-9]{2}):([0-9]{2}):([0-9]{2})(?:\\.([0-9]+))?";
J2OBJC_STATIC_FIELD_GETTER(FreemarkerTemplateUtilityDateUtil, REGEX_XS_TIME_BASE_, NSString *)

static NSString *FreemarkerTemplateUtilityDateUtil_REGEX_ISO8601_BASIC_TIME_BASE_ = 
#line 84
@"([0-9]{2})(?:([0-9]{2})(?:([0-9]{2})(?:[\\.,]([0-9]+))?)?)?";
J2OBJC_STATIC_FIELD_GETTER(FreemarkerTemplateUtilityDateUtil, REGEX_ISO8601_BASIC_TIME_BASE_, NSString *)

static NSString *FreemarkerTemplateUtilityDateUtil_REGEX_ISO8601_EXTENDED_TIME_BASE_ = 
#line 86
@"([0-9]{2})(?::([0-9]{2})(?::([0-9]{2})(?:[\\.,]([0-9]+))?)?)?";
J2OBJC_STATIC_FIELD_GETTER(FreemarkerTemplateUtilityDateUtil, REGEX_ISO8601_EXTENDED_TIME_BASE_, NSString *)

static JavaUtilRegexPattern *FreemarkerTemplateUtilityDateUtil_PATTERN_XS_DATE_;
J2OBJC_STATIC_FIELD_GETTER(FreemarkerTemplateUtilityDateUtil, PATTERN_XS_DATE_, JavaUtilRegexPattern *)

static JavaUtilRegexPattern *FreemarkerTemplateUtilityDateUtil_PATTERN_ISO8601_BASIC_DATE_;
J2OBJC_STATIC_FIELD_GETTER(FreemarkerTemplateUtilityDateUtil, PATTERN_ISO8601_BASIC_DATE_, JavaUtilRegexPattern *)

static JavaUtilRegexPattern *FreemarkerTemplateUtilityDateUtil_PATTERN_ISO8601_EXTENDED_DATE_;
J2OBJC_STATIC_FIELD_GETTER(FreemarkerTemplateUtilityDateUtil, PATTERN_ISO8601_EXTENDED_DATE_, JavaUtilRegexPattern *)

static JavaUtilRegexPattern *FreemarkerTemplateUtilityDateUtil_PATTERN_XS_TIME_;
J2OBJC_STATIC_FIELD_GETTER(FreemarkerTemplateUtilityDateUtil, PATTERN_XS_TIME_, JavaUtilRegexPattern *)

static JavaUtilRegexPattern *FreemarkerTemplateUtilityDateUtil_PATTERN_ISO8601_BASIC_TIME_;
J2OBJC_STATIC_FIELD_GETTER(FreemarkerTemplateUtilityDateUtil, PATTERN_ISO8601_BASIC_TIME_, JavaUtilRegexPattern *)

static JavaUtilRegexPattern *FreemarkerTemplateUtilityDateUtil_PATTERN_ISO8601_EXTENDED_TIME_;
J2OBJC_STATIC_FIELD_GETTER(FreemarkerTemplateUtilityDateUtil, PATTERN_ISO8601_EXTENDED_TIME_, JavaUtilRegexPattern *)

static JavaUtilRegexPattern *FreemarkerTemplateUtilityDateUtil_PATTERN_XS_DATE_TIME_;
J2OBJC_STATIC_FIELD_GETTER(FreemarkerTemplateUtilityDateUtil, PATTERN_XS_DATE_TIME_, JavaUtilRegexPattern *)

static JavaUtilRegexPattern *FreemarkerTemplateUtilityDateUtil_PATTERN_ISO8601_BASIC_DATE_TIME_;
J2OBJC_STATIC_FIELD_GETTER(FreemarkerTemplateUtilityDateUtil, PATTERN_ISO8601_BASIC_DATE_TIME_, JavaUtilRegexPattern *)

static JavaUtilRegexPattern *FreemarkerTemplateUtilityDateUtil_PATTERN_ISO8601_EXTENDED_DATE_TIME_;
J2OBJC_STATIC_FIELD_GETTER(FreemarkerTemplateUtilityDateUtil, PATTERN_ISO8601_EXTENDED_DATE_TIME_, JavaUtilRegexPattern *)

static JavaUtilRegexPattern *FreemarkerTemplateUtilityDateUtil_PATTERN_XS_TIME_ZONE_;
J2OBJC_STATIC_FIELD_GETTER(FreemarkerTemplateUtilityDateUtil, PATTERN_XS_TIME_ZONE_, JavaUtilRegexPattern *)

static NSString *FreemarkerTemplateUtilityDateUtil_MSG_YEAR_0_NOT_ALLOWED_ = 
#line 119
@"Year 0 is not allowed in XML schema dates. BC 1 is -1, AD 1 is 1.";
J2OBJC_STATIC_FIELD_GETTER(FreemarkerTemplateUtilityDateUtil, MSG_YEAR_0_NOT_ALLOWED_, NSString *)

__attribute__((unused)) static void FreemarkerTemplateUtilityDateUtil_init(FreemarkerTemplateUtilityDateUtil *self);

__attribute__((unused)) static FreemarkerTemplateUtilityDateUtil *new_FreemarkerTemplateUtilityDateUtil_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static jboolean FreemarkerTemplateUtilityDateUtil_isGMTishWithNSString_(NSString *name);

__attribute__((unused)) static NSString *FreemarkerTemplateUtilityDateUtil_dateToStringWithJavaUtilDate_withBoolean_withBoolean_withBoolean_withInt_withJavaUtilTimeZone_withBoolean_withFreemarkerTemplateUtilityDateUtil_DateToISO8601CalendarFactory_(JavaUtilDate *date, jboolean datePart, jboolean timePart, jboolean offsetPart, jint accuracy, JavaUtilTimeZone *timeZone, jboolean xsMode, id<FreemarkerTemplateUtilityDateUtil_DateToISO8601CalendarFactory> calendarFactory);

__attribute__((unused)) static jint FreemarkerTemplateUtilityDateUtil_append00WithCharArray_withInt_withInt_(IOSCharArray *res, jint dstIdx, jint x);

__attribute__((unused)) static JavaUtilDate *FreemarkerTemplateUtilityDateUtil_parseDate_parseMatcherWithJavaUtilRegexMatcher_withJavaUtilTimeZone_withBoolean_withFreemarkerTemplateUtilityDateUtil_CalendarFieldsToDateConverter_(JavaUtilRegexMatcher *m, JavaUtilTimeZone *defaultTZ, jboolean xsMode, id<FreemarkerTemplateUtilityDateUtil_CalendarFieldsToDateConverter> calToDateConverter);

__attribute__((unused)) static JavaUtilDate *FreemarkerTemplateUtilityDateUtil_parseTime_parseMatcherWithJavaUtilRegexMatcher_withJavaUtilTimeZone_withFreemarkerTemplateUtilityDateUtil_CalendarFieldsToDateConverter_(JavaUtilRegexMatcher *m, JavaUtilTimeZone *defaultTZ, id<FreemarkerTemplateUtilityDateUtil_CalendarFieldsToDateConverter> calToDateConverter);

__attribute__((unused)) static JavaUtilDate *FreemarkerTemplateUtilityDateUtil_parseDateTime_parseMatcherWithJavaUtilRegexMatcher_withJavaUtilTimeZone_withBoolean_withFreemarkerTemplateUtilityDateUtil_CalendarFieldsToDateConverter_(JavaUtilRegexMatcher *m, JavaUtilTimeZone *defaultTZ, jboolean xsMode, id<FreemarkerTemplateUtilityDateUtil_CalendarFieldsToDateConverter> calToDateConverter);

__attribute__((unused)) static jint FreemarkerTemplateUtilityDateUtil_groupToIntWithNSString_withNSString_withInt_withInt_(NSString *g, NSString *gName, jint min, jint max);

__attribute__((unused)) static JavaUtilTimeZone *FreemarkerTemplateUtilityDateUtil_parseMatchingTimeZoneWithNSString_withJavaUtilTimeZone_(NSString *s, JavaUtilTimeZone *defaultZone);

__attribute__((unused)) static jint FreemarkerTemplateUtilityDateUtil_groupToMillisecondWithNSString_(NSString *g);

@interface FreemarkerTemplateUtilityDateUtil_DateToISO8601CalendarFactory : NSObject
@end

@interface FreemarkerTemplateUtilityDateUtil_CalendarFieldsToDateConverter : NSObject
@end

@interface FreemarkerTemplateUtilityDateUtil_TrivialDateToISO8601CalendarFactory () {
 @public
  JavaUtilGregorianCalendar *calendar_;
  JavaUtilTimeZone *lastlySetTimeZone_;
}

@end

J2OBJC_FIELD_SETTER(FreemarkerTemplateUtilityDateUtil_TrivialDateToISO8601CalendarFactory, calendar_, JavaUtilGregorianCalendar *)
J2OBJC_FIELD_SETTER(FreemarkerTemplateUtilityDateUtil_TrivialDateToISO8601CalendarFactory, lastlySetTimeZone_, JavaUtilTimeZone *)

@interface FreemarkerTemplateUtilityDateUtil_TrivialCalendarFieldsToDateConverter () {
 @public
  JavaUtilGregorianCalendar *calendar_;
  JavaUtilTimeZone *lastlySetTimeZone_;
}

@end

J2OBJC_FIELD_SETTER(FreemarkerTemplateUtilityDateUtil_TrivialCalendarFieldsToDateConverter, calendar_, JavaUtilGregorianCalendar *)
J2OBJC_FIELD_SETTER(FreemarkerTemplateUtilityDateUtil_TrivialCalendarFieldsToDateConverter, lastlySetTimeZone_, JavaUtilTimeZone *)

J2OBJC_INITIALIZED_DEFN(FreemarkerTemplateUtilityDateUtil)

JavaUtilTimeZone *FreemarkerTemplateUtilityDateUtil_UTC_;


#line 31
@implementation FreemarkerTemplateUtilityDateUtil


#line 121
- (instancetype)init {
  FreemarkerTemplateUtilityDateUtil_init(self);
  return self;
}


#line 133
+ (JavaUtilTimeZone *)getTimeZoneWithNSString:(NSString *)name {
  return FreemarkerTemplateUtilityDateUtil_getTimeZoneWithNSString_(name);
}


#line 152
+ (jboolean)isGMTishWithNSString:(NSString *)name {
  return FreemarkerTemplateUtilityDateUtil_isGMTishWithNSString_(name);
}


#line 240
+ (NSString *)dateToISO8601StringWithJavaUtilDate:(JavaUtilDate *)date
                                      withBoolean:(jboolean)datePart
                                      withBoolean:(jboolean)timePart
                                      withBoolean:(jboolean)offsetPart
                                          withInt:(jint)accuracy
                             withJavaUtilTimeZone:(JavaUtilTimeZone *)timeZone
withFreemarkerTemplateUtilityDateUtil_DateToISO8601CalendarFactory:(id<FreemarkerTemplateUtilityDateUtil_DateToISO8601CalendarFactory>)calendarFactory {
  return FreemarkerTemplateUtilityDateUtil_dateToISO8601StringWithJavaUtilDate_withBoolean_withBoolean_withBoolean_withInt_withJavaUtilTimeZone_withFreemarkerTemplateUtilityDateUtil_DateToISO8601CalendarFactory_(date, datePart, timePart, offsetPart, accuracy, timeZone, calendarFactory);
}


#line 252
+ (NSString *)dateToXSStringWithJavaUtilDate:(JavaUtilDate *)date
                                 withBoolean:(jboolean)datePart
                                 withBoolean:(jboolean)timePart
                                 withBoolean:(jboolean)offsetPart
                                     withInt:(jint)accuracy
                        withJavaUtilTimeZone:(JavaUtilTimeZone *)timeZone
withFreemarkerTemplateUtilityDateUtil_DateToISO8601CalendarFactory:(id<FreemarkerTemplateUtilityDateUtil_DateToISO8601CalendarFactory>)calendarFactory {
  return FreemarkerTemplateUtilityDateUtil_dateToXSStringWithJavaUtilDate_withBoolean_withBoolean_withBoolean_withInt_withJavaUtilTimeZone_withFreemarkerTemplateUtilityDateUtil_DateToISO8601CalendarFactory_(date, datePart, timePart, offsetPart, accuracy, timeZone, calendarFactory);
}


#line 261
+ (NSString *)dateToStringWithJavaUtilDate:(JavaUtilDate *)date
                               withBoolean:(jboolean)datePart
                               withBoolean:(jboolean)timePart
                               withBoolean:(jboolean)offsetPart
                                   withInt:(jint)accuracy
                      withJavaUtilTimeZone:(JavaUtilTimeZone *)timeZone
                               withBoolean:(jboolean)xsMode
withFreemarkerTemplateUtilityDateUtil_DateToISO8601CalendarFactory:(id<FreemarkerTemplateUtilityDateUtil_DateToISO8601CalendarFactory>)calendarFactory {
  return FreemarkerTemplateUtilityDateUtil_dateToStringWithJavaUtilDate_withBoolean_withBoolean_withBoolean_withInt_withJavaUtilTimeZone_withBoolean_withFreemarkerTemplateUtilityDateUtil_DateToISO8601CalendarFactory_(date, datePart, timePart, offsetPart, accuracy, timeZone, xsMode, calendarFactory);
}


#line 407
+ (jint)append00WithCharArray:(IOSCharArray *)res
                      withInt:(jint)dstIdx
                      withInt:(jint)x {
  return FreemarkerTemplateUtilityDateUtil_append00WithCharArray_withInt_withInt_(res, dstIdx, x);
}


#line 428
+ (JavaUtilDate *)parseXSDateWithNSString:(NSString *)dateStr
                     withJavaUtilTimeZone:(JavaUtilTimeZone *)defaultTimeZone
withFreemarkerTemplateUtilityDateUtil_CalendarFieldsToDateConverter:(id<FreemarkerTemplateUtilityDateUtil_CalendarFieldsToDateConverter>)calToDateConverter {
  return FreemarkerTemplateUtilityDateUtil_parseXSDateWithNSString_withJavaUtilTimeZone_withFreemarkerTemplateUtilityDateUtil_CalendarFieldsToDateConverter_(dateStr, defaultTimeZone, calToDateConverter);
}


#line 443
+ (JavaUtilDate *)parseISO8601DateWithNSString:(NSString *)dateStr
                          withJavaUtilTimeZone:(JavaUtilTimeZone *)defaultTimeZone
withFreemarkerTemplateUtilityDateUtil_CalendarFieldsToDateConverter:(id<FreemarkerTemplateUtilityDateUtil_CalendarFieldsToDateConverter>)calToDateConverter {
  return FreemarkerTemplateUtilityDateUtil_parseISO8601DateWithNSString_withJavaUtilTimeZone_withFreemarkerTemplateUtilityDateUtil_CalendarFieldsToDateConverter_(dateStr, defaultTimeZone, calToDateConverter);
}


#line 460
+ (JavaUtilDate *)parseDate_parseMatcherWithJavaUtilRegexMatcher:(JavaUtilRegexMatcher *)m
                                            withJavaUtilTimeZone:(JavaUtilTimeZone *)defaultTZ
                                                     withBoolean:(jboolean)xsMode
withFreemarkerTemplateUtilityDateUtil_CalendarFieldsToDateConverter:(id<FreemarkerTemplateUtilityDateUtil_CalendarFieldsToDateConverter>)calToDateConverter {
  return FreemarkerTemplateUtilityDateUtil_parseDate_parseMatcherWithJavaUtilRegexMatcher_withJavaUtilTimeZone_withBoolean_withFreemarkerTemplateUtilityDateUtil_CalendarFieldsToDateConverter_(m, defaultTZ, xsMode, calToDateConverter);
}


#line 503
+ (JavaUtilDate *)parseXSTimeWithNSString:(NSString *)timeStr
                     withJavaUtilTimeZone:(JavaUtilTimeZone *)defaultTZ
withFreemarkerTemplateUtilityDateUtil_CalendarFieldsToDateConverter:(id<FreemarkerTemplateUtilityDateUtil_CalendarFieldsToDateConverter>)calToDateConverter {
  return FreemarkerTemplateUtilityDateUtil_parseXSTimeWithNSString_withJavaUtilTimeZone_withFreemarkerTemplateUtilityDateUtil_CalendarFieldsToDateConverter_(timeStr, defaultTZ, calToDateConverter);
}


#line 516
+ (JavaUtilDate *)parseISO8601TimeWithNSString:(NSString *)timeStr
                          withJavaUtilTimeZone:(JavaUtilTimeZone *)defaultTZ
withFreemarkerTemplateUtilityDateUtil_CalendarFieldsToDateConverter:(id<FreemarkerTemplateUtilityDateUtil_CalendarFieldsToDateConverter>)calToDateConverter {
  return FreemarkerTemplateUtilityDateUtil_parseISO8601TimeWithNSString_withJavaUtilTimeZone_withFreemarkerTemplateUtilityDateUtil_CalendarFieldsToDateConverter_(timeStr, defaultTZ, calToDateConverter);
}


#line 531
+ (JavaUtilDate *)parseTime_parseMatcherWithJavaUtilRegexMatcher:(JavaUtilRegexMatcher *)m
                                            withJavaUtilTimeZone:(JavaUtilTimeZone *)defaultTZ
withFreemarkerTemplateUtilityDateUtil_CalendarFieldsToDateConverter:(id<FreemarkerTemplateUtilityDateUtil_CalendarFieldsToDateConverter>)calToDateConverter {
  return FreemarkerTemplateUtilityDateUtil_parseTime_parseMatcherWithJavaUtilRegexMatcher_withJavaUtilTimeZone_withFreemarkerTemplateUtilityDateUtil_CalendarFieldsToDateConverter_(m, defaultTZ, calToDateConverter);
}


#line 595
+ (JavaUtilDate *)parseXSDateTimeWithNSString:(NSString *)dateTimeStr
                         withJavaUtilTimeZone:(JavaUtilTimeZone *)defaultTZ
withFreemarkerTemplateUtilityDateUtil_CalendarFieldsToDateConverter:(id<FreemarkerTemplateUtilityDateUtil_CalendarFieldsToDateConverter>)calToDateConverter {
  return FreemarkerTemplateUtilityDateUtil_parseXSDateTimeWithNSString_withJavaUtilTimeZone_withFreemarkerTemplateUtilityDateUtil_CalendarFieldsToDateConverter_(dateTimeStr, defaultTZ, calToDateConverter);
}


#line 610
+ (JavaUtilDate *)parseISO8601DateTimeWithNSString:(NSString *)dateTimeStr
                              withJavaUtilTimeZone:(JavaUtilTimeZone *)defaultTZ
withFreemarkerTemplateUtilityDateUtil_CalendarFieldsToDateConverter:(id<FreemarkerTemplateUtilityDateUtil_CalendarFieldsToDateConverter>)calToDateConverter {
  return FreemarkerTemplateUtilityDateUtil_parseISO8601DateTimeWithNSString_withJavaUtilTimeZone_withFreemarkerTemplateUtilityDateUtil_CalendarFieldsToDateConverter_(dateTimeStr, defaultTZ, calToDateConverter);
}


#line 626
+ (JavaUtilDate *)parseDateTime_parseMatcherWithJavaUtilRegexMatcher:(JavaUtilRegexMatcher *)m
                                                withJavaUtilTimeZone:(JavaUtilTimeZone *)defaultTZ
                                                         withBoolean:(jboolean)xsMode
 withFreemarkerTemplateUtilityDateUtil_CalendarFieldsToDateConverter:(id<FreemarkerTemplateUtilityDateUtil_CalendarFieldsToDateConverter>)calToDateConverter {
  return FreemarkerTemplateUtilityDateUtil_parseDateTime_parseMatcherWithJavaUtilRegexMatcher_withJavaUtilTimeZone_withBoolean_withFreemarkerTemplateUtilityDateUtil_CalendarFieldsToDateConverter_(m, defaultTZ, xsMode, calToDateConverter);
}


#line 702
+ (JavaUtilTimeZone *)parseXSTimeZoneWithNSString:(NSString *)timeZoneStr {
  return FreemarkerTemplateUtilityDateUtil_parseXSTimeZoneWithNSString_(timeZoneStr);
}


#line 712
+ (jint)groupToIntWithNSString:(NSString *)g
                  withNSString:(NSString *)gName
                       withInt:(jint)min
                       withInt:(jint)max {
  return FreemarkerTemplateUtilityDateUtil_groupToIntWithNSString_withNSString_withInt_withInt_(g, gName, min, max);
}


#line 760
+ (JavaUtilTimeZone *)parseMatchingTimeZoneWithNSString:(NSString *)s
                                   withJavaUtilTimeZone:(JavaUtilTimeZone *)defaultZone {
  return FreemarkerTemplateUtilityDateUtil_parseMatchingTimeZoneWithNSString_withJavaUtilTimeZone_(s, defaultZone);
}


#line 791
+ (jint)groupToMillisecondWithNSString:(NSString *)g {
  return FreemarkerTemplateUtilityDateUtil_groupToMillisecondWithNSString_(g);
}

+ (void)initialize {
  if (self == [FreemarkerTemplateUtilityDateUtil class]) {
    FreemarkerTemplateUtilityDateUtil_UTC_ = JavaUtilTimeZone_getTimeZoneWithNSString_(
#line 58
    @"UTC");
    FreemarkerTemplateUtilityDateUtil_PATTERN_XS_DATE_ = JavaUtilRegexPattern_compileWithNSString_(JreStrcat("$$",
#line 89
    FreemarkerTemplateUtilityDateUtil_REGEX_XS_DATE_BASE_, FreemarkerTemplateUtilityDateUtil_REGEX_XS_OPTIONAL_TIME_ZONE_));
    FreemarkerTemplateUtilityDateUtil_PATTERN_ISO8601_BASIC_DATE_ = JavaUtilRegexPattern_compileWithNSString_(
#line 91
    FreemarkerTemplateUtilityDateUtil_REGEX_ISO8601_BASIC_DATE_BASE_);
    FreemarkerTemplateUtilityDateUtil_PATTERN_ISO8601_EXTENDED_DATE_ = JavaUtilRegexPattern_compileWithNSString_(
#line 93
    FreemarkerTemplateUtilityDateUtil_REGEX_ISO8601_EXTENDED_DATE_BASE_);
    FreemarkerTemplateUtilityDateUtil_PATTERN_XS_TIME_ = JavaUtilRegexPattern_compileWithNSString_(JreStrcat("$$",
#line 96
    FreemarkerTemplateUtilityDateUtil_REGEX_XS_TIME_BASE_, FreemarkerTemplateUtilityDateUtil_REGEX_XS_OPTIONAL_TIME_ZONE_));
    FreemarkerTemplateUtilityDateUtil_PATTERN_ISO8601_BASIC_TIME_ = JavaUtilRegexPattern_compileWithNSString_(JreStrcat("$$",
#line 98
    FreemarkerTemplateUtilityDateUtil_REGEX_ISO8601_BASIC_TIME_BASE_, FreemarkerTemplateUtilityDateUtil_REGEX_ISO8601_BASIC_OPTIONAL_TIME_ZONE_));
    FreemarkerTemplateUtilityDateUtil_PATTERN_ISO8601_EXTENDED_TIME_ = JavaUtilRegexPattern_compileWithNSString_(JreStrcat("$$",
#line 100
    FreemarkerTemplateUtilityDateUtil_REGEX_ISO8601_EXTENDED_TIME_BASE_, FreemarkerTemplateUtilityDateUtil_REGEX_ISO8601_EXTENDED_OPTIONAL_TIME_ZONE_));
    FreemarkerTemplateUtilityDateUtil_PATTERN_XS_DATE_TIME_ = JavaUtilRegexPattern_compileWithNSString_(JreStrcat("$C$$",
#line 103
    FreemarkerTemplateUtilityDateUtil_REGEX_XS_DATE_BASE_, 'T',
#line 104
    FreemarkerTemplateUtilityDateUtil_REGEX_XS_TIME_BASE_,
#line 105
    FreemarkerTemplateUtilityDateUtil_REGEX_XS_OPTIONAL_TIME_ZONE_));
    FreemarkerTemplateUtilityDateUtil_PATTERN_ISO8601_BASIC_DATE_TIME_ = JavaUtilRegexPattern_compileWithNSString_(JreStrcat("$C$$",
#line 107
    FreemarkerTemplateUtilityDateUtil_REGEX_ISO8601_BASIC_DATE_BASE_, 'T',
#line 108
    FreemarkerTemplateUtilityDateUtil_REGEX_ISO8601_BASIC_TIME_BASE_,
#line 109
    FreemarkerTemplateUtilityDateUtil_REGEX_ISO8601_BASIC_OPTIONAL_TIME_ZONE_));
    FreemarkerTemplateUtilityDateUtil_PATTERN_ISO8601_EXTENDED_DATE_TIME_ = JavaUtilRegexPattern_compileWithNSString_(JreStrcat("$C$$",
#line 111
    FreemarkerTemplateUtilityDateUtil_REGEX_ISO8601_EXTENDED_DATE_BASE_, 'T',
#line 112
    FreemarkerTemplateUtilityDateUtil_REGEX_ISO8601_EXTENDED_TIME_BASE_,
#line 113
    FreemarkerTemplateUtilityDateUtil_REGEX_ISO8601_EXTENDED_OPTIONAL_TIME_ZONE_));
    FreemarkerTemplateUtilityDateUtil_PATTERN_XS_TIME_ZONE_ = JavaUtilRegexPattern_compileWithNSString_(
#line 116
    FreemarkerTemplateUtilityDateUtil_REGEX_XS_TIME_ZONE_);
    J2OBJC_SET_INITIALIZED(FreemarkerTemplateUtilityDateUtil)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "DateUtil", NULL, 0x2, NULL, NULL },
    { "getTimeZoneWithNSString:", "getTimeZone", "Ljava.util.TimeZone;", 0x9, "Lfreemarker.template.utility.UnrecognizedTimeZoneException;", NULL },
    { "isGMTishWithNSString:", "isGMTish", "Z", 0xa, NULL, NULL },
    { "dateToISO8601StringWithJavaUtilDate:withBoolean:withBoolean:withBoolean:withInt:withJavaUtilTimeZone:withFreemarkerTemplateUtilityDateUtil_DateToISO8601CalendarFactory:", "dateToISO8601String", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "dateToXSStringWithJavaUtilDate:withBoolean:withBoolean:withBoolean:withInt:withJavaUtilTimeZone:withFreemarkerTemplateUtilityDateUtil_DateToISO8601CalendarFactory:", "dateToXSString", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "dateToStringWithJavaUtilDate:withBoolean:withBoolean:withBoolean:withInt:withJavaUtilTimeZone:withBoolean:withFreemarkerTemplateUtilityDateUtil_DateToISO8601CalendarFactory:", "dateToString", "Ljava.lang.String;", 0xa, NULL, NULL },
    { "append00WithCharArray:withInt:withInt:", "append00", "I", 0xa, NULL, NULL },
    { "parseXSDateWithNSString:withJavaUtilTimeZone:withFreemarkerTemplateUtilityDateUtil_CalendarFieldsToDateConverter:", "parseXSDate", "Ljava.util.Date;", 0x9, "Lfreemarker.template.utility.DateUtil$DateParseException;", NULL },
    { "parseISO8601DateWithNSString:withJavaUtilTimeZone:withFreemarkerTemplateUtilityDateUtil_CalendarFieldsToDateConverter:", "parseISO8601Date", "Ljava.util.Date;", 0x9, "Lfreemarker.template.utility.DateUtil$DateParseException;", NULL },
    { "parseDate_parseMatcherWithJavaUtilRegexMatcher:withJavaUtilTimeZone:withBoolean:withFreemarkerTemplateUtilityDateUtil_CalendarFieldsToDateConverter:", "parseDate_parseMatcher", "Ljava.util.Date;", 0xa, "Lfreemarker.template.utility.DateUtil$DateParseException;", NULL },
    { "parseXSTimeWithNSString:withJavaUtilTimeZone:withFreemarkerTemplateUtilityDateUtil_CalendarFieldsToDateConverter:", "parseXSTime", "Ljava.util.Date;", 0x9, "Lfreemarker.template.utility.DateUtil$DateParseException;", NULL },
    { "parseISO8601TimeWithNSString:withJavaUtilTimeZone:withFreemarkerTemplateUtilityDateUtil_CalendarFieldsToDateConverter:", "parseISO8601Time", "Ljava.util.Date;", 0x9, "Lfreemarker.template.utility.DateUtil$DateParseException;", NULL },
    { "parseTime_parseMatcherWithJavaUtilRegexMatcher:withJavaUtilTimeZone:withFreemarkerTemplateUtilityDateUtil_CalendarFieldsToDateConverter:", "parseTime_parseMatcher", "Ljava.util.Date;", 0xa, "Lfreemarker.template.utility.DateUtil$DateParseException;", NULL },
    { "parseXSDateTimeWithNSString:withJavaUtilTimeZone:withFreemarkerTemplateUtilityDateUtil_CalendarFieldsToDateConverter:", "parseXSDateTime", "Ljava.util.Date;", 0x9, "Lfreemarker.template.utility.DateUtil$DateParseException;", NULL },
    { "parseISO8601DateTimeWithNSString:withJavaUtilTimeZone:withFreemarkerTemplateUtilityDateUtil_CalendarFieldsToDateConverter:", "parseISO8601DateTime", "Ljava.util.Date;", 0x9, "Lfreemarker.template.utility.DateUtil$DateParseException;", NULL },
    { "parseDateTime_parseMatcherWithJavaUtilRegexMatcher:withJavaUtilTimeZone:withBoolean:withFreemarkerTemplateUtilityDateUtil_CalendarFieldsToDateConverter:", "parseDateTime_parseMatcher", "Ljava.util.Date;", 0xa, "Lfreemarker.template.utility.DateUtil$DateParseException;", NULL },
    { "parseXSTimeZoneWithNSString:", "parseXSTimeZone", "Ljava.util.TimeZone;", 0x9, "Lfreemarker.template.utility.DateUtil$DateParseException;", NULL },
    { "groupToIntWithNSString:withNSString:withInt:withInt:", "groupToInt", "I", 0xa, "Lfreemarker.template.utility.DateUtil$DateParseException;", NULL },
    { "parseMatchingTimeZoneWithNSString:withJavaUtilTimeZone:", "parseMatchingTimeZone", "Ljava.util.TimeZone;", 0xa, "Lfreemarker.template.utility.DateUtil$DateParseException;", NULL },
    { "groupToMillisecondWithNSString:", "groupToMillisecond", "I", 0xa, "Lfreemarker.template.utility.DateUtil$DateParseException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "ACCURACY_HOURS_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = FreemarkerTemplateUtilityDateUtil_ACCURACY_HOURS },
    { "ACCURACY_MINUTES_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = FreemarkerTemplateUtilityDateUtil_ACCURACY_MINUTES },
    { "ACCURACY_SECONDS_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = FreemarkerTemplateUtilityDateUtil_ACCURACY_SECONDS },
    { "ACCURACY_MILLISECONDS_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = FreemarkerTemplateUtilityDateUtil_ACCURACY_MILLISECONDS },
    { "ACCURACY_MILLISECONDS_FORCED_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = FreemarkerTemplateUtilityDateUtil_ACCURACY_MILLISECONDS_FORCED },
    { "UTC_", NULL, 0x19, "Ljava.util.TimeZone;", &FreemarkerTemplateUtilityDateUtil_UTC_, NULL,  },
    { "REGEX_XS_TIME_ZONE_", NULL, 0x1a, "Ljava.lang.String;", &FreemarkerTemplateUtilityDateUtil_REGEX_XS_TIME_ZONE_, NULL,  },
    { "REGEX_ISO8601_BASIC_TIME_ZONE_", NULL, 0x1a, "Ljava.lang.String;", &FreemarkerTemplateUtilityDateUtil_REGEX_ISO8601_BASIC_TIME_ZONE_, NULL,  },
    { "REGEX_ISO8601_EXTENDED_TIME_ZONE_", NULL, 0x1a, "Ljava.lang.String;", &FreemarkerTemplateUtilityDateUtil_REGEX_ISO8601_EXTENDED_TIME_ZONE_, NULL,  },
    { "REGEX_XS_OPTIONAL_TIME_ZONE_", NULL, 0x1a, "Ljava.lang.String;", &FreemarkerTemplateUtilityDateUtil_REGEX_XS_OPTIONAL_TIME_ZONE_, NULL,  },
    { "REGEX_ISO8601_BASIC_OPTIONAL_TIME_ZONE_", NULL, 0x1a, "Ljava.lang.String;", &FreemarkerTemplateUtilityDateUtil_REGEX_ISO8601_BASIC_OPTIONAL_TIME_ZONE_, NULL,  },
    { "REGEX_ISO8601_EXTENDED_OPTIONAL_TIME_ZONE_", NULL, 0x1a, "Ljava.lang.String;", &FreemarkerTemplateUtilityDateUtil_REGEX_ISO8601_EXTENDED_OPTIONAL_TIME_ZONE_, NULL,  },
    { "REGEX_XS_DATE_BASE_", NULL, 0x1a, "Ljava.lang.String;", &FreemarkerTemplateUtilityDateUtil_REGEX_XS_DATE_BASE_, NULL,  },
    { "REGEX_ISO8601_BASIC_DATE_BASE_", NULL, 0x1a, "Ljava.lang.String;", &FreemarkerTemplateUtilityDateUtil_REGEX_ISO8601_BASIC_DATE_BASE_, NULL,  },
    { "REGEX_ISO8601_EXTENDED_DATE_BASE_", NULL, 0x1a, "Ljava.lang.String;", &FreemarkerTemplateUtilityDateUtil_REGEX_ISO8601_EXTENDED_DATE_BASE_, NULL,  },
    { "REGEX_XS_TIME_BASE_", NULL, 0x1a, "Ljava.lang.String;", &FreemarkerTemplateUtilityDateUtil_REGEX_XS_TIME_BASE_, NULL,  },
    { "REGEX_ISO8601_BASIC_TIME_BASE_", NULL, 0x1a, "Ljava.lang.String;", &FreemarkerTemplateUtilityDateUtil_REGEX_ISO8601_BASIC_TIME_BASE_, NULL,  },
    { "REGEX_ISO8601_EXTENDED_TIME_BASE_", NULL, 0x1a, "Ljava.lang.String;", &FreemarkerTemplateUtilityDateUtil_REGEX_ISO8601_EXTENDED_TIME_BASE_, NULL,  },
    { "PATTERN_XS_DATE_", NULL, 0x1a, "Ljava.util.regex.Pattern;", &FreemarkerTemplateUtilityDateUtil_PATTERN_XS_DATE_, NULL,  },
    { "PATTERN_ISO8601_BASIC_DATE_", NULL, 0x1a, "Ljava.util.regex.Pattern;", &FreemarkerTemplateUtilityDateUtil_PATTERN_ISO8601_BASIC_DATE_, NULL,  },
    { "PATTERN_ISO8601_EXTENDED_DATE_", NULL, 0x1a, "Ljava.util.regex.Pattern;", &FreemarkerTemplateUtilityDateUtil_PATTERN_ISO8601_EXTENDED_DATE_, NULL,  },
    { "PATTERN_XS_TIME_", NULL, 0x1a, "Ljava.util.regex.Pattern;", &FreemarkerTemplateUtilityDateUtil_PATTERN_XS_TIME_, NULL,  },
    { "PATTERN_ISO8601_BASIC_TIME_", NULL, 0x1a, "Ljava.util.regex.Pattern;", &FreemarkerTemplateUtilityDateUtil_PATTERN_ISO8601_BASIC_TIME_, NULL,  },
    { "PATTERN_ISO8601_EXTENDED_TIME_", NULL, 0x1a, "Ljava.util.regex.Pattern;", &FreemarkerTemplateUtilityDateUtil_PATTERN_ISO8601_EXTENDED_TIME_, NULL,  },
    { "PATTERN_XS_DATE_TIME_", NULL, 0x1a, "Ljava.util.regex.Pattern;", &FreemarkerTemplateUtilityDateUtil_PATTERN_XS_DATE_TIME_, NULL,  },
    { "PATTERN_ISO8601_BASIC_DATE_TIME_", NULL, 0x1a, "Ljava.util.regex.Pattern;", &FreemarkerTemplateUtilityDateUtil_PATTERN_ISO8601_BASIC_DATE_TIME_, NULL,  },
    { "PATTERN_ISO8601_EXTENDED_DATE_TIME_", NULL, 0x1a, "Ljava.util.regex.Pattern;", &FreemarkerTemplateUtilityDateUtil_PATTERN_ISO8601_EXTENDED_DATE_TIME_, NULL,  },
    { "PATTERN_XS_TIME_ZONE_", NULL, 0x1a, "Ljava.util.regex.Pattern;", &FreemarkerTemplateUtilityDateUtil_PATTERN_XS_TIME_ZONE_, NULL,  },
    { "MSG_YEAR_0_NOT_ALLOWED_", NULL, 0x1a, "Ljava.lang.String;", &FreemarkerTemplateUtilityDateUtil_MSG_YEAR_0_NOT_ALLOWED_, NULL,  },
  };
  static const char *inner_classes[] = {"Lfreemarker.template.utility.DateUtil$DateToISO8601CalendarFactory;", "Lfreemarker.template.utility.DateUtil$CalendarFieldsToDateConverter;", "Lfreemarker.template.utility.DateUtil$TrivialDateToISO8601CalendarFactory;", "Lfreemarker.template.utility.DateUtil$TrivialCalendarFieldsToDateConverter;", "Lfreemarker.template.utility.DateUtil$DateParseException;"};
  static const J2ObjcClassInfo _FreemarkerTemplateUtilityDateUtil = { 2, "DateUtil", "freemarker.template.utility", NULL, 0x1, 20, methods, 29, fields, 0, NULL, 5, inner_classes, NULL, NULL };
  return &_FreemarkerTemplateUtilityDateUtil;
}

@end


#line 121
void FreemarkerTemplateUtilityDateUtil_init(FreemarkerTemplateUtilityDateUtil *self) {
  (void) NSObject_init(self);
}


#line 121
FreemarkerTemplateUtilityDateUtil *new_FreemarkerTemplateUtilityDateUtil_init() {
  FreemarkerTemplateUtilityDateUtil *self = [FreemarkerTemplateUtilityDateUtil alloc];
  FreemarkerTemplateUtilityDateUtil_init(self);
  return self;
}


#line 133
JavaUtilTimeZone *FreemarkerTemplateUtilityDateUtil_getTimeZoneWithNSString_(NSString *name) {
  FreemarkerTemplateUtilityDateUtil_initialize();
  if (FreemarkerTemplateUtilityDateUtil_isGMTishWithNSString_(name)) {
    if ([((NSString *) nil_chk(name)) equalsIgnoreCase:@"UTC"]) {
      return FreemarkerTemplateUtilityDateUtil_UTC_;
    }
    return JavaUtilTimeZone_getTimeZoneWithNSString_(name);
  }
  JavaUtilTimeZone *tz = JavaUtilTimeZone_getTimeZoneWithNSString_(name);
  if (FreemarkerTemplateUtilityDateUtil_isGMTishWithNSString_([((JavaUtilTimeZone *) nil_chk(tz)) getID])) {
    @throw new_FreemarkerTemplateUtilityUnrecognizedTimeZoneException_initWithNSString_(name);
  }
  return tz;
}


#line 152
jboolean FreemarkerTemplateUtilityDateUtil_isGMTishWithNSString_(NSString *name) {
  FreemarkerTemplateUtilityDateUtil_initialize();
  
#line 153
  if (((jint) [((NSString *) nil_chk(name)) length]) < 3) {
    return NO;
  }
  jchar c1 = [name charAtWithInt:0];
  jchar c2 = [name charAtWithInt:1];
  jchar c3 = [name charAtWithInt:2];
  if (
#line 160
  !(
#line 161
  (c1 == 'G' || c1 == 'g') &&
#line 162
  (c2 == 'M' || c2 == 'm') &&
#line 163
  (c3 == 'T' || c3 == 't')) &&
#line 166
  !(
#line 167
  (c1 == 'U' || c1 == 'u') &&
#line 168
  (c2 == 'T' || c2 == 't') &&
#line 169
  (c3 == 'C' || c3 == 'c')) &&
#line 172
  !(
#line 173
  (c1 == 'U' || c1 == 'u') &&
#line 174
  (c2 == 'T' || c2 == 't') &&
#line 175
  (c3 == '1'))) {
    
#line 178
    return NO;
  }
  
#line 181
  if (((jint) [name length]) == 3) {
    return YES;
  }
  
#line 185
  NSString *offset = [name substring:3];
  if ([((NSString *) nil_chk(offset)) hasPrefix:@"+"]) {
    return [offset isEqual:@"+0"] || [offset isEqual:@"+00"] ||
#line 188
    [offset isEqual:@"+00:00"];
  }
  else {
    
#line 190
    return [offset isEqual:@"-0"] || [offset isEqual:@"-00"] ||
#line 191
    [offset isEqual:@"-00:00"];
  }
}


#line 240
NSString *FreemarkerTemplateUtilityDateUtil_dateToISO8601StringWithJavaUtilDate_withBoolean_withBoolean_withBoolean_withInt_withJavaUtilTimeZone_withFreemarkerTemplateUtilityDateUtil_DateToISO8601CalendarFactory_(JavaUtilDate *date, jboolean datePart, jboolean timePart, jboolean offsetPart, jint accuracy, JavaUtilTimeZone *timeZone, id<FreemarkerTemplateUtilityDateUtil_DateToISO8601CalendarFactory> calendarFactory) {
  FreemarkerTemplateUtilityDateUtil_initialize();
  
#line 246
  return FreemarkerTemplateUtilityDateUtil_dateToStringWithJavaUtilDate_withBoolean_withBoolean_withBoolean_withInt_withJavaUtilTimeZone_withBoolean_withFreemarkerTemplateUtilityDateUtil_DateToISO8601CalendarFactory_(date, datePart, timePart, offsetPart, accuracy, timeZone, NO, calendarFactory);
}


#line 252
NSString *FreemarkerTemplateUtilityDateUtil_dateToXSStringWithJavaUtilDate_withBoolean_withBoolean_withBoolean_withInt_withJavaUtilTimeZone_withFreemarkerTemplateUtilityDateUtil_DateToISO8601CalendarFactory_(JavaUtilDate *date, jboolean datePart, jboolean timePart, jboolean offsetPart, jint accuracy, JavaUtilTimeZone *timeZone, id<FreemarkerTemplateUtilityDateUtil_DateToISO8601CalendarFactory> calendarFactory) {
  FreemarkerTemplateUtilityDateUtil_initialize();
  
#line 258
  return FreemarkerTemplateUtilityDateUtil_dateToStringWithJavaUtilDate_withBoolean_withBoolean_withBoolean_withInt_withJavaUtilTimeZone_withBoolean_withFreemarkerTemplateUtilityDateUtil_DateToISO8601CalendarFactory_(date, datePart, timePart, offsetPart, accuracy, timeZone, YES, calendarFactory);
}


#line 261
NSString *FreemarkerTemplateUtilityDateUtil_dateToStringWithJavaUtilDate_withBoolean_withBoolean_withBoolean_withInt_withJavaUtilTimeZone_withBoolean_withFreemarkerTemplateUtilityDateUtil_DateToISO8601CalendarFactory_(JavaUtilDate *date, jboolean datePart, jboolean timePart, jboolean offsetPart, jint accuracy, JavaUtilTimeZone *timeZone, jboolean xsMode, id<FreemarkerTemplateUtilityDateUtil_DateToISO8601CalendarFactory> calendarFactory) {
  FreemarkerTemplateUtilityDateUtil_initialize();
  
#line 267
  if (!xsMode && !timePart && offsetPart) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"ISO 8601:2004 doesn't specify any formats where the offset is shown but the time isn't.");
  }
  
#line 273
  if (timeZone == nil) {
    timeZone = FreemarkerTemplateUtilityDateUtil_UTC_;
  }
  
#line 277
  JavaUtilGregorianCalendar *cal = [((id<FreemarkerTemplateUtilityDateUtil_DateToISO8601CalendarFactory>) nil_chk(calendarFactory)) getWithJavaUtilTimeZone:timeZone withJavaUtilDate:date];
  
#line 279
  jint maxLength;
  if (!timePart) {
    maxLength = 10 + (xsMode ? 6 : 0);
  }
  else {
    
#line 283
    if (!datePart) {
      maxLength = 12 + 6;
    }
    else {
      
#line 286
      maxLength = 10 + 1 + 12 + 6;
    }
  }
  IOSCharArray *res = [IOSCharArray newArrayWithLength:maxLength];
  jint dstIdx = 0;
  
#line 292
  if (datePart) {
    jint x = [((JavaUtilGregorianCalendar *) nil_chk(cal)) getWithInt:JavaUtilCalendar_YEAR];
    if (x > 0 && [cal getWithInt:JavaUtilCalendar_ERA] == JavaUtilGregorianCalendar_BC) {
      x = -x + (xsMode ? 0 : 1);
    }
    if (x >= 0 && x < 9999) {
      *IOSCharArray_GetRef(res, dstIdx++) = (jchar) ('0' + x / 1000);
      *IOSCharArray_GetRef(res, dstIdx++) = (jchar) ('0' + x % 1000 / 100);
      *IOSCharArray_GetRef(res, dstIdx++) = (jchar) ('0' + x % 100 / 10);
      *IOSCharArray_GetRef(res, dstIdx++) = (jchar) ('0' + x % 10);
    }
    else {
      
#line 303
      NSString *yearString = NSString_valueOfInt_(x);
      
#line 306
      maxLength = maxLength - 4 + ((jint) [((NSString *) nil_chk(yearString)) length]);
      res = [IOSCharArray newArrayWithLength:maxLength];
      
#line 309
      for (jint i = 0; i < ((jint) [yearString length]); i++) {
        *IOSCharArray_GetRef(res, dstIdx++) = [yearString charAtWithInt:i];
      }
    }
    
#line 314
    *IOSCharArray_GetRef(res, dstIdx++) = '-';
    
#line 316
    x = [cal getWithInt:JavaUtilCalendar_MONTH] + 1;
    dstIdx = FreemarkerTemplateUtilityDateUtil_append00WithCharArray_withInt_withInt_(res, dstIdx, x);
    
#line 319
    *IOSCharArray_GetRef(res, dstIdx++) = '-';
    
#line 321
    x = [cal getWithInt:JavaUtilCalendar_DAY_OF_MONTH];
    dstIdx = FreemarkerTemplateUtilityDateUtil_append00WithCharArray_withInt_withInt_(res, dstIdx, x);
    
#line 324
    if (timePart) {
      *IOSCharArray_GetRef(res, dstIdx++) = 'T';
    }
  }
  
#line 329
  if (timePart) {
    jint x = [((JavaUtilGregorianCalendar *) nil_chk(cal)) getWithInt:JavaUtilCalendar_HOUR_OF_DAY];
    dstIdx = FreemarkerTemplateUtilityDateUtil_append00WithCharArray_withInt_withInt_(res, dstIdx, x);
    
#line 333
    if (accuracy >= FreemarkerTemplateUtilityDateUtil_ACCURACY_MINUTES) {
      *IOSCharArray_GetRef(res, dstIdx++) = ':';
      
#line 336
      x = [cal getWithInt:JavaUtilCalendar_MINUTE];
      dstIdx = FreemarkerTemplateUtilityDateUtil_append00WithCharArray_withInt_withInt_(res, dstIdx, x);
      
#line 339
      if (accuracy >= FreemarkerTemplateUtilityDateUtil_ACCURACY_SECONDS) {
        *IOSCharArray_GetRef(res, dstIdx++) = ':';
        
#line 342
        x = [cal getWithInt:JavaUtilCalendar_SECOND];
        dstIdx = FreemarkerTemplateUtilityDateUtil_append00WithCharArray_withInt_withInt_(res, dstIdx, x);
        
#line 345
        if (accuracy >= FreemarkerTemplateUtilityDateUtil_ACCURACY_MILLISECONDS) {
          x = [cal getWithInt:JavaUtilCalendar_MILLISECOND];
          jint forcedDigits = accuracy == FreemarkerTemplateUtilityDateUtil_ACCURACY_MILLISECONDS_FORCED ? 3 : 0;
          if (x != 0 || forcedDigits != 0) {
            if (x > 999) {
              
#line 351
              @throw new_JavaLangRuntimeException_initWithNSString_(
#line 352
              @"Calendar.MILLISECOND > 999");
            }
            *IOSCharArray_GetRef(res, dstIdx++) = '.';
            do {
              *IOSCharArray_GetRef(res, dstIdx++) = (jchar) ('0' + (x / 100));
              forcedDigits--;
              x = x % 100 * 10;
            }
            while (
#line 359
            x != 0 || forcedDigits > 0);
          }
        }
      }
    }
  }
  
#line 366
  if (offsetPart) {
    if (timeZone == FreemarkerTemplateUtilityDateUtil_UTC_) {
      *IOSCharArray_GetRef(res, dstIdx++) = 'Z';
    }
    else {
      
#line 370
      jint dt = [((JavaUtilTimeZone *) nil_chk(timeZone)) getOffsetWithLong:[((JavaUtilDate *) nil_chk(date)) getTime]];
      jboolean positive;
      if (dt < 0) {
        positive = NO;
        dt = -dt;
      }
      else {
        
#line 376
        positive = YES;
      }
      
#line 379
      dt /= 1000;
      jint offS = dt % 60;
      dt /= 60;
      jint offM = dt % 60;
      dt /= 60;
      jint offH = dt;
      
#line 386
      if (offS == 0 && offM == 0 && offH == 0) {
        *IOSCharArray_GetRef(res, dstIdx++) = 'Z';
      }
      else {
        
#line 389
        *IOSCharArray_GetRef(res, dstIdx++) = positive ? '+' : '-';
        dstIdx = FreemarkerTemplateUtilityDateUtil_append00WithCharArray_withInt_withInt_(res, dstIdx, offH);
        *IOSCharArray_GetRef(res, dstIdx++) = ':';
        dstIdx = FreemarkerTemplateUtilityDateUtil_append00WithCharArray_withInt_withInt_(res, dstIdx, offM);
        if (offS != 0) {
          *IOSCharArray_GetRef(res, dstIdx++) = ':';
          dstIdx = FreemarkerTemplateUtilityDateUtil_append00WithCharArray_withInt_withInt_(res, dstIdx, offS);
        }
      }
    }
  }
  
#line 401
  return [NSString stringWithCharacters:res offset:0 length:dstIdx];
}


#line 407
jint FreemarkerTemplateUtilityDateUtil_append00WithCharArray_withInt_withInt_(IOSCharArray *res, jint dstIdx, jint x) {
  FreemarkerTemplateUtilityDateUtil_initialize();
  
#line 408
  *IOSCharArray_GetRef(nil_chk(res), dstIdx++) = (jchar) ('0' + x / 10);
  *IOSCharArray_GetRef(res, dstIdx++) = (jchar) ('0' + x % 10);
  return dstIdx;
}


#line 428
JavaUtilDate *FreemarkerTemplateUtilityDateUtil_parseXSDateWithNSString_withJavaUtilTimeZone_withFreemarkerTemplateUtilityDateUtil_CalendarFieldsToDateConverter_(NSString *dateStr, JavaUtilTimeZone *defaultTimeZone, id<FreemarkerTemplateUtilityDateUtil_CalendarFieldsToDateConverter> calToDateConverter) {
  FreemarkerTemplateUtilityDateUtil_initialize();
  
#line 432
  JavaUtilRegexMatcher *m = [((JavaUtilRegexPattern *) nil_chk(FreemarkerTemplateUtilityDateUtil_PATTERN_XS_DATE_)) matcherWithJavaLangCharSequence:dateStr];
  if (![((JavaUtilRegexMatcher *) nil_chk(m)) matches]) {
    @throw new_FreemarkerTemplateUtilityDateUtil_DateParseException_initWithNSString_(JreStrcat("$@", @"The value didn't match the expected pattern: ", FreemarkerTemplateUtilityDateUtil_PATTERN_XS_DATE_));
  }
  return FreemarkerTemplateUtilityDateUtil_parseDate_parseMatcherWithJavaUtilRegexMatcher_withJavaUtilTimeZone_withBoolean_withFreemarkerTemplateUtilityDateUtil_CalendarFieldsToDateConverter_(
#line 437
  m, defaultTimeZone, YES, calToDateConverter);
}


#line 443
JavaUtilDate *FreemarkerTemplateUtilityDateUtil_parseISO8601DateWithNSString_withJavaUtilTimeZone_withFreemarkerTemplateUtilityDateUtil_CalendarFieldsToDateConverter_(NSString *dateStr, JavaUtilTimeZone *defaultTimeZone, id<FreemarkerTemplateUtilityDateUtil_CalendarFieldsToDateConverter> calToDateConverter) {
  FreemarkerTemplateUtilityDateUtil_initialize();
  
#line 447
  JavaUtilRegexMatcher *m = [((JavaUtilRegexPattern *) nil_chk(FreemarkerTemplateUtilityDateUtil_PATTERN_ISO8601_EXTENDED_DATE_)) matcherWithJavaLangCharSequence:dateStr];
  if (![((JavaUtilRegexMatcher *) nil_chk(m)) matches]) {
    m = [((JavaUtilRegexPattern *) nil_chk(FreemarkerTemplateUtilityDateUtil_PATTERN_ISO8601_BASIC_DATE_)) matcherWithJavaLangCharSequence:dateStr];
    if (![((JavaUtilRegexMatcher *) nil_chk(m)) matches]) {
      @throw new_FreemarkerTemplateUtilityDateUtil_DateParseException_initWithNSString_(JreStrcat("$@$@", @"The value didn't match the expected pattern: ",
#line 452
      FreemarkerTemplateUtilityDateUtil_PATTERN_ISO8601_EXTENDED_DATE_, @" or ",
#line 453
      FreemarkerTemplateUtilityDateUtil_PATTERN_ISO8601_BASIC_DATE_));
    }
  }
  return FreemarkerTemplateUtilityDateUtil_parseDate_parseMatcherWithJavaUtilRegexMatcher_withJavaUtilTimeZone_withBoolean_withFreemarkerTemplateUtilityDateUtil_CalendarFieldsToDateConverter_(
#line 457
  m, defaultTimeZone, NO, calToDateConverter);
}


#line 460
JavaUtilDate *FreemarkerTemplateUtilityDateUtil_parseDate_parseMatcherWithJavaUtilRegexMatcher_withJavaUtilTimeZone_withBoolean_withFreemarkerTemplateUtilityDateUtil_CalendarFieldsToDateConverter_(JavaUtilRegexMatcher *m, JavaUtilTimeZone *defaultTZ, jboolean xsMode, id<FreemarkerTemplateUtilityDateUtil_CalendarFieldsToDateConverter> calToDateConverter) {
  FreemarkerTemplateUtilityDateUtil_initialize();
  
#line 465
  FreemarkerTemplateUtilityNullArgumentException_checkWithNSString_withId_(@"defaultTZ", defaultTZ);
  @try {
    jint year = FreemarkerTemplateUtilityDateUtil_groupToIntWithNSString_withNSString_withInt_withInt_([((JavaUtilRegexMatcher *) nil_chk(m)) groupWithInt:1], @"year", JavaLangInteger_MIN_VALUE, JavaLangInteger_MAX_VALUE);
    
#line 469
    jint era;
    
#line 473
    if (year <= 0) {
      era = JavaUtilGregorianCalendar_BC;
      year = -year + (xsMode ? 0 : 1);
      if (year == 0) {
        @throw new_FreemarkerTemplateUtilityDateUtil_DateParseException_initWithNSString_(FreemarkerTemplateUtilityDateUtil_MSG_YEAR_0_NOT_ALLOWED_);
      }
    }
    else {
      
#line 480
      era = JavaUtilGregorianCalendar_AD;
    }
    
#line 483
    jint month = FreemarkerTemplateUtilityDateUtil_groupToIntWithNSString_withNSString_withInt_withInt_([m groupWithInt:2], @"month", 1, 12) - 1;
    jint day = FreemarkerTemplateUtilityDateUtil_groupToIntWithNSString_withNSString_withInt_withInt_([m groupWithInt:3], @"day-of-month", 1, 31);
    
#line 486
    JavaUtilTimeZone *tz = xsMode ? FreemarkerTemplateUtilityDateUtil_parseMatchingTimeZoneWithNSString_withJavaUtilTimeZone_([m groupWithInt:4], defaultTZ) : defaultTZ;
    
#line 488
    return [((id<FreemarkerTemplateUtilityDateUtil_CalendarFieldsToDateConverter>) nil_chk(calToDateConverter)) calculateWithInt:era withInt:year withInt:month withInt:day withInt:0 withInt:0 withInt:0 withInt:0 withBoolean:NO withJavaUtilTimeZone:tz];
  }
  @catch (
#line 489
  JavaLangIllegalArgumentException *e) {
    
#line 491
    @throw new_FreemarkerTemplateUtilityDateUtil_DateParseException_initWithNSString_(@"Date calculation faliure. Probably the date is formally correct, but refers to an unexistent date (like February 30).");
  }
}


#line 503
JavaUtilDate *FreemarkerTemplateUtilityDateUtil_parseXSTimeWithNSString_withJavaUtilTimeZone_withFreemarkerTemplateUtilityDateUtil_CalendarFieldsToDateConverter_(NSString *timeStr, JavaUtilTimeZone *defaultTZ, id<FreemarkerTemplateUtilityDateUtil_CalendarFieldsToDateConverter> calToDateConverter) {
  FreemarkerTemplateUtilityDateUtil_initialize();
  
#line 506
  JavaUtilRegexMatcher *m = [((JavaUtilRegexPattern *) nil_chk(FreemarkerTemplateUtilityDateUtil_PATTERN_XS_TIME_)) matcherWithJavaLangCharSequence:timeStr];
  if (![((JavaUtilRegexMatcher *) nil_chk(m)) matches]) {
    @throw new_FreemarkerTemplateUtilityDateUtil_DateParseException_initWithNSString_(JreStrcat("$@", @"The value didn't match the expected pattern: ", FreemarkerTemplateUtilityDateUtil_PATTERN_XS_TIME_));
  }
  return FreemarkerTemplateUtilityDateUtil_parseTime_parseMatcherWithJavaUtilRegexMatcher_withJavaUtilTimeZone_withFreemarkerTemplateUtilityDateUtil_CalendarFieldsToDateConverter_(m, defaultTZ, calToDateConverter);
}


#line 516
JavaUtilDate *FreemarkerTemplateUtilityDateUtil_parseISO8601TimeWithNSString_withJavaUtilTimeZone_withFreemarkerTemplateUtilityDateUtil_CalendarFieldsToDateConverter_(NSString *timeStr, JavaUtilTimeZone *defaultTZ, id<FreemarkerTemplateUtilityDateUtil_CalendarFieldsToDateConverter> calToDateConverter) {
  FreemarkerTemplateUtilityDateUtil_initialize();
  
#line 519
  JavaUtilRegexMatcher *m = [((JavaUtilRegexPattern *) nil_chk(FreemarkerTemplateUtilityDateUtil_PATTERN_ISO8601_EXTENDED_TIME_)) matcherWithJavaLangCharSequence:timeStr];
  if (![((JavaUtilRegexMatcher *) nil_chk(m)) matches]) {
    m = [((JavaUtilRegexPattern *) nil_chk(FreemarkerTemplateUtilityDateUtil_PATTERN_ISO8601_BASIC_TIME_)) matcherWithJavaLangCharSequence:timeStr];
    if (![((JavaUtilRegexMatcher *) nil_chk(m)) matches]) {
      @throw new_FreemarkerTemplateUtilityDateUtil_DateParseException_initWithNSString_(JreStrcat("$@$@", @"The value didn't match the expected pattern: ",
#line 524
      FreemarkerTemplateUtilityDateUtil_PATTERN_ISO8601_EXTENDED_TIME_, @" or ",
#line 525
      FreemarkerTemplateUtilityDateUtil_PATTERN_ISO8601_BASIC_TIME_));
    }
  }
  return FreemarkerTemplateUtilityDateUtil_parseTime_parseMatcherWithJavaUtilRegexMatcher_withJavaUtilTimeZone_withFreemarkerTemplateUtilityDateUtil_CalendarFieldsToDateConverter_(m, defaultTZ, calToDateConverter);
}


#line 531
JavaUtilDate *FreemarkerTemplateUtilityDateUtil_parseTime_parseMatcherWithJavaUtilRegexMatcher_withJavaUtilTimeZone_withFreemarkerTemplateUtilityDateUtil_CalendarFieldsToDateConverter_(JavaUtilRegexMatcher *m, JavaUtilTimeZone *defaultTZ, id<FreemarkerTemplateUtilityDateUtil_CalendarFieldsToDateConverter> calToDateConverter) {
  FreemarkerTemplateUtilityDateUtil_initialize();
  
#line 535
  FreemarkerTemplateUtilityNullArgumentException_checkWithNSString_withId_(@"defaultTZ", defaultTZ);
  @try {
    
#line 539
    jint hours = FreemarkerTemplateUtilityDateUtil_groupToIntWithNSString_withNSString_withInt_withInt_([((JavaUtilRegexMatcher *) nil_chk(m)) groupWithInt:1], @"hour-of-day", 0, 24);
    jboolean hourWas24;
    if (hours == 24) {
      hours = 0;
      hourWas24 = YES;
    }
    else {
      hourWas24 = NO;
    }
    
#line 549
    NSString *minutesStr = [m groupWithInt:2];
    jint minutes = minutesStr != nil ? FreemarkerTemplateUtilityDateUtil_groupToIntWithNSString_withNSString_withInt_withInt_(minutesStr, @"minute", 0, 59) : 0;
    
#line 552
    NSString *secsStr = [m groupWithInt:3];
    
#line 554
    jint secs = secsStr != nil ? FreemarkerTemplateUtilityDateUtil_groupToIntWithNSString_withNSString_withInt_withInt_(secsStr, @"second", 0, 60) : 0;
    
#line 556
    jint millisecs = FreemarkerTemplateUtilityDateUtil_groupToMillisecondWithNSString_([m groupWithInt:4]);
    
#line 560
    JavaUtilTimeZone *tz = FreemarkerTemplateUtilityDateUtil_parseMatchingTimeZoneWithNSString_withJavaUtilTimeZone_([m groupWithInt:5], defaultTZ);
    
#line 563
    jint day;
    if (hourWas24) {
      if (minutes == 0 && secs == 0 && millisecs == 0) {
        day = 2;
      }
      else {
        
#line 568
        @throw new_FreemarkerTemplateUtilityDateUtil_DateParseException_initWithNSString_(@"Hour 24 is only allowed in the case of midnight.");
      }
    }
    else {
      
#line 573
      day = 1;
    }
    
#line 576
    return [((id<FreemarkerTemplateUtilityDateUtil_CalendarFieldsToDateConverter>) nil_chk(calToDateConverter)) calculateWithInt:
#line 577
    JavaUtilGregorianCalendar_AD withInt:1970 withInt:0 withInt:day withInt:hours withInt:minutes withInt:secs withInt:millisecs withBoolean:NO withJavaUtilTimeZone:tz];
  }
  @catch (
#line 578
  JavaLangIllegalArgumentException *e) {
    
#line 580
    @throw new_FreemarkerTemplateUtilityDateUtil_DateParseException_initWithNSString_(
#line 581
    @"Unexpected time calculation faliure.");
  }
}


#line 595
JavaUtilDate *FreemarkerTemplateUtilityDateUtil_parseXSDateTimeWithNSString_withJavaUtilTimeZone_withFreemarkerTemplateUtilityDateUtil_CalendarFieldsToDateConverter_(NSString *dateTimeStr, JavaUtilTimeZone *defaultTZ, id<FreemarkerTemplateUtilityDateUtil_CalendarFieldsToDateConverter> calToDateConverter) {
  FreemarkerTemplateUtilityDateUtil_initialize();
  
#line 598
  JavaUtilRegexMatcher *m = [((JavaUtilRegexPattern *) nil_chk(FreemarkerTemplateUtilityDateUtil_PATTERN_XS_DATE_TIME_)) matcherWithJavaLangCharSequence:dateTimeStr];
  if (![((JavaUtilRegexMatcher *) nil_chk(m)) matches]) {
    @throw new_FreemarkerTemplateUtilityDateUtil_DateParseException_initWithNSString_(JreStrcat("$@", @"The value didn't match the expected pattern: ",
#line 601
    FreemarkerTemplateUtilityDateUtil_PATTERN_XS_DATE_TIME_));
  }
  return FreemarkerTemplateUtilityDateUtil_parseDateTime_parseMatcherWithJavaUtilRegexMatcher_withJavaUtilTimeZone_withBoolean_withFreemarkerTemplateUtilityDateUtil_CalendarFieldsToDateConverter_(
#line 604
  m, defaultTZ, YES, calToDateConverter);
}

JavaUtilDate *FreemarkerTemplateUtilityDateUtil_parseISO8601DateTimeWithNSString_withJavaUtilTimeZone_withFreemarkerTemplateUtilityDateUtil_CalendarFieldsToDateConverter_(NSString *dateTimeStr, JavaUtilTimeZone *defaultTZ, id<FreemarkerTemplateUtilityDateUtil_CalendarFieldsToDateConverter> calToDateConverter) {
  FreemarkerTemplateUtilityDateUtil_initialize();
  
#line 613
  JavaUtilRegexMatcher *m = [((JavaUtilRegexPattern *) nil_chk(FreemarkerTemplateUtilityDateUtil_PATTERN_ISO8601_EXTENDED_DATE_TIME_)) matcherWithJavaLangCharSequence:dateTimeStr];
  if (![((JavaUtilRegexMatcher *) nil_chk(m)) matches]) {
    m = [((JavaUtilRegexPattern *) nil_chk(FreemarkerTemplateUtilityDateUtil_PATTERN_ISO8601_BASIC_DATE_TIME_)) matcherWithJavaLangCharSequence:dateTimeStr];
    if (![((JavaUtilRegexMatcher *) nil_chk(m)) matches]) {
      @throw new_FreemarkerTemplateUtilityDateUtil_DateParseException_initWithNSString_(JreStrcat("$$$@$@", @"The value (", dateTimeStr, @") didn't match the expected pattern: ",
#line 618
      FreemarkerTemplateUtilityDateUtil_PATTERN_ISO8601_EXTENDED_DATE_TIME_, @" or ",
#line 619
      FreemarkerTemplateUtilityDateUtil_PATTERN_ISO8601_BASIC_DATE_TIME_));
    }
  }
  return FreemarkerTemplateUtilityDateUtil_parseDateTime_parseMatcherWithJavaUtilRegexMatcher_withJavaUtilTimeZone_withBoolean_withFreemarkerTemplateUtilityDateUtil_CalendarFieldsToDateConverter_(
#line 623
  m, defaultTZ, NO, calToDateConverter);
}


#line 626
JavaUtilDate *FreemarkerTemplateUtilityDateUtil_parseDateTime_parseMatcherWithJavaUtilRegexMatcher_withJavaUtilTimeZone_withBoolean_withFreemarkerTemplateUtilityDateUtil_CalendarFieldsToDateConverter_(JavaUtilRegexMatcher *m, JavaUtilTimeZone *defaultTZ, jboolean xsMode, id<FreemarkerTemplateUtilityDateUtil_CalendarFieldsToDateConverter> calToDateConverter) {
  FreemarkerTemplateUtilityDateUtil_initialize();
  
#line 631
  FreemarkerTemplateUtilityNullArgumentException_checkWithNSString_withId_(@"defaultTZ", defaultTZ);
  @try {
    jint year = FreemarkerTemplateUtilityDateUtil_groupToIntWithNSString_withNSString_withInt_withInt_([((JavaUtilRegexMatcher *) nil_chk(m)) groupWithInt:1], @"year", JavaLangInteger_MIN_VALUE, JavaLangInteger_MAX_VALUE);
    
#line 635
    jint era;
    
#line 639
    if (year <= 0) {
      era = JavaUtilGregorianCalendar_BC;
      year = -year + (xsMode ? 0 : 1);
      if (year == 0) {
        @throw new_FreemarkerTemplateUtilityDateUtil_DateParseException_initWithNSString_(FreemarkerTemplateUtilityDateUtil_MSG_YEAR_0_NOT_ALLOWED_);
      }
    }
    else {
      
#line 646
      era = JavaUtilGregorianCalendar_AD;
    }
    
#line 649
    jint month = FreemarkerTemplateUtilityDateUtil_groupToIntWithNSString_withNSString_withInt_withInt_([m groupWithInt:2], @"month", 1, 12) - 1;
    jint day = FreemarkerTemplateUtilityDateUtil_groupToIntWithNSString_withNSString_withInt_withInt_([m groupWithInt:3], @"day-of-month", 1, 31);
    
#line 654
    jint hours = FreemarkerTemplateUtilityDateUtil_groupToIntWithNSString_withNSString_withInt_withInt_([m groupWithInt:4], @"hour-of-day", 0, 24);
    jboolean hourWas24;
    if (hours == 24) {
      hours = 0;
      hourWas24 = YES;
    }
    else {
      hourWas24 = NO;
    }
    
#line 664
    NSString *minutesStr = [m groupWithInt:5];
    jint minutes = minutesStr != nil ? FreemarkerTemplateUtilityDateUtil_groupToIntWithNSString_withNSString_withInt_withInt_(minutesStr, @"minute", 0, 59) : 0;
    
#line 667
    NSString *secsStr = [m groupWithInt:6];
    
#line 669
    jint secs = secsStr != nil ? FreemarkerTemplateUtilityDateUtil_groupToIntWithNSString_withNSString_withInt_withInt_(secsStr, @"second", 0, 60) : 0;
    
#line 671
    jint millisecs = FreemarkerTemplateUtilityDateUtil_groupToMillisecondWithNSString_([m groupWithInt:7]);
    
#line 675
    JavaUtilTimeZone *tz = FreemarkerTemplateUtilityDateUtil_parseMatchingTimeZoneWithNSString_withJavaUtilTimeZone_([m groupWithInt:8], defaultTZ);
    
#line 678
    if (hourWas24) {
      if (minutes != 0 || secs != 0 || millisecs != 0) {
        @throw new_FreemarkerTemplateUtilityDateUtil_DateParseException_initWithNSString_(@"Hour 24 is only allowed in the case of midnight.");
      }
    }
    
#line 686
    return [((id<FreemarkerTemplateUtilityDateUtil_CalendarFieldsToDateConverter>) nil_chk(calToDateConverter)) calculateWithInt:
#line 687
    era withInt:year withInt:month withInt:day withInt:hours withInt:minutes withInt:secs withInt:millisecs withBoolean:hourWas24 withJavaUtilTimeZone:tz];
  }
  @catch (
#line 688
  JavaLangIllegalArgumentException *e) {
    
#line 690
    @throw new_FreemarkerTemplateUtilityDateUtil_DateParseException_initWithNSString_(@"Date-time calculation faliure. Probably the date-time is formally correct, but refers to an unexistent date-time (like February 30).");
  }
}


#line 702
JavaUtilTimeZone *FreemarkerTemplateUtilityDateUtil_parseXSTimeZoneWithNSString_(NSString *timeZoneStr) {
  FreemarkerTemplateUtilityDateUtil_initialize();
  JavaUtilRegexMatcher *m = [((JavaUtilRegexPattern *) nil_chk(FreemarkerTemplateUtilityDateUtil_PATTERN_XS_TIME_ZONE_)) matcherWithJavaLangCharSequence:timeZoneStr];
  if (![((JavaUtilRegexMatcher *) nil_chk(m)) matches]) {
    @throw new_FreemarkerTemplateUtilityDateUtil_DateParseException_initWithNSString_(JreStrcat("$@", @"The time zone offset didn't match the expected pattern: ",
#line 707
    FreemarkerTemplateUtilityDateUtil_PATTERN_XS_TIME_ZONE_));
  }
  return FreemarkerTemplateUtilityDateUtil_parseMatchingTimeZoneWithNSString_withJavaUtilTimeZone_(timeZoneStr, nil);
}


#line 712
jint FreemarkerTemplateUtilityDateUtil_groupToIntWithNSString_withNSString_withInt_withInt_(NSString *g, NSString *gName, jint min, jint max) {
  FreemarkerTemplateUtilityDateUtil_initialize();
  
#line 715
  if (g == nil) {
    @throw new_FreemarkerTemplateUtilityDateUtil_DateParseException_initWithNSString_(JreStrcat("$$$", @"The ", gName, @" part is missing."));
  }
  
#line 720
  jint start;
  
#line 723
  jboolean negative;
  if ([((NSString *) nil_chk(g)) hasPrefix:@"-"]) {
    negative = YES;
    start = 1;
  }
  else {
    
#line 728
    negative = NO;
    start = 0;
  }
  
#line 733
  while (start < ((jint) [g length]) - 1 && [g charAtWithInt:start] == '0') {
    start++;
  }
  if (start != 0) {
    g = [g substring:start];
  }
  
#line 740
  @try {
    jint r = JavaLangInteger_parseIntWithNSString_(g);
    if (negative) {
      r = -r;
    }
    if (r < min) {
      @throw new_FreemarkerTemplateUtilityDateUtil_DateParseException_initWithNSString_(JreStrcat("$$$IC", @"The ", gName, @" part must be at least ",
#line 747
      min, '.'));
    }
    if (r > max) {
      @throw new_FreemarkerTemplateUtilityDateUtil_DateParseException_initWithNSString_(JreStrcat("$$$IC", @"The ", gName, @" part can't be more than ",
#line 751
      max, '.'));
    }
    return r;
  }
  @catch (
#line 754
  JavaLangNumberFormatException *e) {
    @throw new_FreemarkerTemplateUtilityDateUtil_DateParseException_initWithNSString_(JreStrcat("$$$", @"The ", gName, @" part is a malformed integer."));
  }
}


#line 760
JavaUtilTimeZone *FreemarkerTemplateUtilityDateUtil_parseMatchingTimeZoneWithNSString_withJavaUtilTimeZone_(NSString *s, JavaUtilTimeZone *defaultZone) {
  FreemarkerTemplateUtilityDateUtil_initialize();
  
#line 763
  if (s == nil) {
    return defaultZone;
  }
  if ([((NSString *) nil_chk(s)) isEqual:@"Z"]) {
    return FreemarkerTemplateUtilityDateUtil_UTC_;
  }
  
#line 770
  JavaLangStringBuffer *sb = new_JavaLangStringBuffer_initWithInt_(9);
  (void) [sb appendWithNSString:@"GMT"];
  (void) [sb appendWithChar:[s charAtWithInt:0]];
  
#line 774
  NSString *h = [s substring:1 endIndex:3];
  FreemarkerTemplateUtilityDateUtil_groupToIntWithNSString_withNSString_withInt_withInt_(h, @"offset-hours", 0, 23);
  (void) [sb appendWithNSString:h];
  
#line 778
  NSString *m;
  jint ln = ((jint) [s length]);
  if (ln > 3) {
    jint startIdx = [s charAtWithInt:3] == ':' ? 4 : 3;
    m = [s substring:startIdx endIndex:startIdx + 2];
    FreemarkerTemplateUtilityDateUtil_groupToIntWithNSString_withNSString_withInt_withInt_(m, @"offset-minutes", 0, 59);
    (void) [sb appendWithChar:':'];
    (void) [sb appendWithNSString:m];
  }
  
#line 788
  return JavaUtilTimeZone_getTimeZoneWithNSString_([sb description]);
}


#line 791
jint FreemarkerTemplateUtilityDateUtil_groupToMillisecondWithNSString_(NSString *g) {
  FreemarkerTemplateUtilityDateUtil_initialize();
  if (g == nil) {
    return 0;
  }
  
#line 797
  if (((jint) [((NSString *) nil_chk(g)) length]) > 3) {
    g = [g substring:0 endIndex:3];
  }
  jint i = FreemarkerTemplateUtilityDateUtil_groupToIntWithNSString_withNSString_withInt_withInt_(g, @"partial-seconds", 0, JavaLangInteger_MAX_VALUE);
  return ((jint) [((NSString *) nil_chk(g)) length]) == 1 ? i * 100 : (((jint) [g length]) == 2 ? i * 10 : i);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerTemplateUtilityDateUtil)


#line 808
@implementation FreemarkerTemplateUtilityDateUtil_DateToISO8601CalendarFactory

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getWithJavaUtilTimeZone:withJavaUtilDate:", "get", "Ljava.util.GregorianCalendar;", 0x401, NULL, NULL },
  };
  static const J2ObjcClassInfo _FreemarkerTemplateUtilityDateUtil_DateToISO8601CalendarFactory = { 2, "DateToISO8601CalendarFactory", "freemarker.template.utility", "DateUtil", 0x609, 1, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerTemplateUtilityDateUtil_DateToISO8601CalendarFactory;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(FreemarkerTemplateUtilityDateUtil_DateToISO8601CalendarFactory)


#line 823
@implementation FreemarkerTemplateUtilityDateUtil_CalendarFieldsToDateConverter

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "calculateWithInt:withInt:withInt:withInt:withInt:withInt:withInt:withInt:withBoolean:withJavaUtilTimeZone:", "calculate", "Ljava.util.Date;", 0x401, NULL, NULL },
  };
  static const J2ObjcClassInfo _FreemarkerTemplateUtilityDateUtil_CalendarFieldsToDateConverter = { 2, "CalendarFieldsToDateConverter", "freemarker.template.utility", "DateUtil", 0x609, 1, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerTemplateUtilityDateUtil_CalendarFieldsToDateConverter;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(FreemarkerTemplateUtilityDateUtil_CalendarFieldsToDateConverter)

@implementation FreemarkerTemplateUtilityDateUtil_TrivialDateToISO8601CalendarFactory


#line 843
- (JavaUtilGregorianCalendar *)getWithJavaUtilTimeZone:(JavaUtilTimeZone *)tz
                                      withJavaUtilDate:(JavaUtilDate *)date {
  if (calendar_ == nil) {
    calendar_ = new_JavaUtilGregorianCalendar_initWithJavaUtilTimeZone_withJavaUtilLocale_(tz, JavaUtilLocale_get_US_());
    [calendar_ setGregorianChangeWithJavaUtilDate:new_JavaUtilDate_initWithLong_(JavaLangLong_MIN_VALUE)];
  }
  else {
    if (lastlySetTimeZone_ != tz) {
      [calendar_ setTimeZoneWithJavaUtilTimeZone:tz];
      lastlySetTimeZone_ = tz;
    }
  }
  [((JavaUtilGregorianCalendar *) nil_chk(calendar_)) setTimeWithJavaUtilDate:date];
  return calendar_;
}

- (instancetype)init {
  FreemarkerTemplateUtilityDateUtil_TrivialDateToISO8601CalendarFactory_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getWithJavaUtilTimeZone:withJavaUtilDate:", "get", "Ljava.util.GregorianCalendar;", 0x1, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "calendar_", NULL, 0x2, "Ljava.util.GregorianCalendar;", NULL, NULL,  },
    { "lastlySetTimeZone_", NULL, 0x2, "Ljava.util.TimeZone;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerTemplateUtilityDateUtil_TrivialDateToISO8601CalendarFactory = { 2, "TrivialDateToISO8601CalendarFactory", "freemarker.template.utility", "DateUtil", 0x19, 2, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerTemplateUtilityDateUtil_TrivialDateToISO8601CalendarFactory;
}

@end

void FreemarkerTemplateUtilityDateUtil_TrivialDateToISO8601CalendarFactory_init(FreemarkerTemplateUtilityDateUtil_TrivialDateToISO8601CalendarFactory *self) {
  (void) NSObject_init(self);
}

FreemarkerTemplateUtilityDateUtil_TrivialDateToISO8601CalendarFactory *new_FreemarkerTemplateUtilityDateUtil_TrivialDateToISO8601CalendarFactory_init() {
  FreemarkerTemplateUtilityDateUtil_TrivialDateToISO8601CalendarFactory *self = [FreemarkerTemplateUtilityDateUtil_TrivialDateToISO8601CalendarFactory alloc];
  FreemarkerTemplateUtilityDateUtil_TrivialDateToISO8601CalendarFactory_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerTemplateUtilityDateUtil_TrivialDateToISO8601CalendarFactory)


#line 863
@implementation FreemarkerTemplateUtilityDateUtil_TrivialCalendarFieldsToDateConverter


#line 869
- (JavaUtilDate *)calculateWithInt:(jint)era
                           withInt:(jint)year
                           withInt:(jint)month
                           withInt:(jint)day
                           withInt:(jint)hours
                           withInt:(jint)minutes
                           withInt:(jint)secs
                           withInt:(jint)millisecs
                       withBoolean:(jboolean)addOneDay
              withJavaUtilTimeZone:(JavaUtilTimeZone *)tz {
  
#line 871
  if (calendar_ == nil) {
    calendar_ = new_JavaUtilGregorianCalendar_initWithJavaUtilTimeZone_withJavaUtilLocale_(tz, JavaUtilLocale_get_US_());
    [calendar_ setLenientWithBoolean:NO];
    [calendar_ setGregorianChangeWithJavaUtilDate:new_JavaUtilDate_initWithLong_(JavaLangLong_MIN_VALUE)];
  }
  else {
    if (lastlySetTimeZone_ != tz) {
      [calendar_ setTimeZoneWithJavaUtilTimeZone:tz];
      lastlySetTimeZone_ = tz;
    }
  }
  
#line 883
  [((JavaUtilGregorianCalendar *) nil_chk(calendar_)) setWithInt:JavaUtilCalendar_ERA withInt:era];
  [calendar_ setWithInt:JavaUtilCalendar_YEAR withInt:year];
  [calendar_ setWithInt:JavaUtilCalendar_MONTH withInt:month];
  [calendar_ setWithInt:JavaUtilCalendar_DAY_OF_MONTH withInt:day];
  [calendar_ setWithInt:JavaUtilCalendar_HOUR_OF_DAY withInt:hours];
  [calendar_ setWithInt:JavaUtilCalendar_MINUTE withInt:minutes];
  [calendar_ setWithInt:JavaUtilCalendar_SECOND withInt:secs];
  [calendar_ setWithInt:JavaUtilCalendar_MILLISECOND withInt:millisecs];
  if (addOneDay) {
    [calendar_ addWithInt:JavaUtilCalendar_DAY_OF_MONTH withInt:1];
  }
  
#line 895
  return [calendar_ getTime];
}

- (instancetype)init {
  FreemarkerTemplateUtilityDateUtil_TrivialCalendarFieldsToDateConverter_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "calculateWithInt:withInt:withInt:withInt:withInt:withInt:withInt:withInt:withBoolean:withJavaUtilTimeZone:", "calculate", "Ljava.util.Date;", 0x1, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "calendar_", NULL, 0x2, "Ljava.util.GregorianCalendar;", NULL, NULL,  },
    { "lastlySetTimeZone_", NULL, 0x2, "Ljava.util.TimeZone;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerTemplateUtilityDateUtil_TrivialCalendarFieldsToDateConverter = { 2, "TrivialCalendarFieldsToDateConverter", "freemarker.template.utility", "DateUtil", 0x19, 2, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerTemplateUtilityDateUtil_TrivialCalendarFieldsToDateConverter;
}

@end

void FreemarkerTemplateUtilityDateUtil_TrivialCalendarFieldsToDateConverter_init(FreemarkerTemplateUtilityDateUtil_TrivialCalendarFieldsToDateConverter *self) {
  (void) NSObject_init(self);
}

FreemarkerTemplateUtilityDateUtil_TrivialCalendarFieldsToDateConverter *new_FreemarkerTemplateUtilityDateUtil_TrivialCalendarFieldsToDateConverter_init() {
  FreemarkerTemplateUtilityDateUtil_TrivialCalendarFieldsToDateConverter *self = [FreemarkerTemplateUtilityDateUtil_TrivialCalendarFieldsToDateConverter alloc];
  FreemarkerTemplateUtilityDateUtil_TrivialCalendarFieldsToDateConverter_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerTemplateUtilityDateUtil_TrivialCalendarFieldsToDateConverter)


#line 900
@implementation FreemarkerTemplateUtilityDateUtil_DateParseException

- (instancetype)initWithNSString:(NSString *)message {
  FreemarkerTemplateUtilityDateUtil_DateParseException_initWithNSString_(self, message);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithNSString:", "DateParseException", NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcClassInfo _FreemarkerTemplateUtilityDateUtil_DateParseException = { 2, "DateParseException", "freemarker.template.utility", "DateUtil", 0x19, 1, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerTemplateUtilityDateUtil_DateParseException;
}

@end


#line 902
void FreemarkerTemplateUtilityDateUtil_DateParseException_initWithNSString_(FreemarkerTemplateUtilityDateUtil_DateParseException *self, NSString *message) {
  (void) JavaTextParseException_initWithNSString_withInt_(self, message, 0);
}


#line 902
FreemarkerTemplateUtilityDateUtil_DateParseException *new_FreemarkerTemplateUtilityDateUtil_DateParseException_initWithNSString_(NSString *message) {
  FreemarkerTemplateUtilityDateUtil_DateParseException *self = [FreemarkerTemplateUtilityDateUtil_DateParseException alloc];
  FreemarkerTemplateUtilityDateUtil_DateParseException_initWithNSString_(self, message);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerTemplateUtilityDateUtil_DateParseException)
