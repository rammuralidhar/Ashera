//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/_CoreAPI.java
//

#ifndef _FreemarkerCore_CoreAPI_H_
#define _FreemarkerCore_CoreAPI_H_

#include "J2ObjC_header.h"

@class FreemarkerCoreConfigurable;
@class FreemarkerCoreEnvironment;
@class FreemarkerCoreTemplateElement;
@class FreemarkerTemplateTemplate;
@class IOSObjectArray;
@class JavaIoWriter;
@class JavaLangStringBuffer;
@protocol FreemarkerTemplateTemplateDirectiveBody;
@protocol JavaUtilSet;

/**
 @brief For internal use only; don't depend on this, there's no backward compatibility guarantee at all!
 This class is to work around the lack of module system in Java, i.e., so that other FreeMarker packages can access things inside this package that users shouldn't.
 */
@interface FreemarkerCore_CoreAPI : NSObject

#pragma mark Public

/**
 @brief ATTENTION: This is used by https://github.com/kenshoo/freemarker-online.
 Don't break backward compatibility without updating that project too!
 */
+ (void)addThreadInterruptedChecksWithFreemarkerTemplateTemplate:(FreemarkerTemplateTemplate *)template_;

+ (void)appendInstructionStackItemWithFreemarkerCoreTemplateElement:(FreemarkerCoreTemplateElement *)stackEl
                                           withJavaLangStringBuffer:(JavaLangStringBuffer *)sb;

+ (void)checkHasNoNestedContentWithFreemarkerTemplateTemplateDirectiveBody:(id<FreemarkerTemplateTemplateDirectiveBody>)body;

/**
 @brief [FM 2.4] getSettingNames() becomes to public; remove this.
 */
+ (id<JavaUtilSet>)getConfigurableSettingNamesWithFreemarkerCoreConfigurable:(FreemarkerCoreConfigurable *)cfgable
                                                                 withBoolean:(jboolean)camelCase;

+ (IOSObjectArray *)getInstructionStackSnapshotWithFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env;

/**
 @brief Returns the names of the currently supported "built-ins" ( <code>expr?
 builtin_name</code> -like things).
 @return Set of String -s.
 */
+ (id<JavaUtilSet>)getSupportedBuiltInNames;

+ (void)outputInstructionStackWithFreemarkerCoreTemplateElementArray:(IOSObjectArray *)instructionStackSnapshot
                                                         withBoolean:(jboolean)terseMode
                                                    withJavaIoWriter:(JavaIoWriter *)pw;

@end

J2OBJC_STATIC_INIT(FreemarkerCore_CoreAPI)

FOUNDATION_EXPORT NSString *FreemarkerCore_CoreAPI_ERROR_MESSAGE_HR_;
J2OBJC_STATIC_FIELD_GETTER(FreemarkerCore_CoreAPI, ERROR_MESSAGE_HR_, NSString *)

FOUNDATION_EXPORT id<JavaUtilSet> FreemarkerCore_CoreAPI_BUILT_IN_DIRECTIVE_NAMES_;
J2OBJC_STATIC_FIELD_GETTER(FreemarkerCore_CoreAPI, BUILT_IN_DIRECTIVE_NAMES_, id<JavaUtilSet>)

FOUNDATION_EXPORT id<JavaUtilSet> FreemarkerCore_CoreAPI_getSupportedBuiltInNames();

FOUNDATION_EXPORT void FreemarkerCore_CoreAPI_appendInstructionStackItemWithFreemarkerCoreTemplateElement_withJavaLangStringBuffer_(FreemarkerCoreTemplateElement *stackEl, JavaLangStringBuffer *sb);

FOUNDATION_EXPORT IOSObjectArray *FreemarkerCore_CoreAPI_getInstructionStackSnapshotWithFreemarkerCoreEnvironment_(FreemarkerCoreEnvironment *env);

FOUNDATION_EXPORT void FreemarkerCore_CoreAPI_outputInstructionStackWithFreemarkerCoreTemplateElementArray_withBoolean_withJavaIoWriter_(IOSObjectArray *instructionStackSnapshot, jboolean terseMode, JavaIoWriter *pw);

FOUNDATION_EXPORT id<JavaUtilSet> FreemarkerCore_CoreAPI_getConfigurableSettingNamesWithFreemarkerCoreConfigurable_withBoolean_(FreemarkerCoreConfigurable *cfgable, jboolean camelCase);

FOUNDATION_EXPORT void FreemarkerCore_CoreAPI_addThreadInterruptedChecksWithFreemarkerTemplateTemplate_(FreemarkerTemplateTemplate *template_);

FOUNDATION_EXPORT void FreemarkerCore_CoreAPI_checkHasNoNestedContentWithFreemarkerTemplateTemplateDirectiveBody_(id<FreemarkerTemplateTemplateDirectiveBody> body);

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerCore_CoreAPI)

#endif // _FreemarkerCore_CoreAPI_H_
