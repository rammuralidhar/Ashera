//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/InvalidReferenceException.java
//


#include "Dot.h"
#include "DynamicKeyName.h"
#include "Environment.h"
#include "Expression.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "Identifier.h"
#include "InvalidReferenceException.h"
#include "J2ObjC_source.h"
#include "TemplateException.h"
#include "_DelayedJQuote.h"
#include "_ErrorDescriptionBuilder.h"

#line 0 "/Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/InvalidReferenceException.java"

@interface FreemarkerCoreInvalidReferenceException ()

+ (jboolean)endsWithDollarVariableWithFreemarkerCoreExpression:(FreemarkerCoreExpression *)blame;

@end

static IOSObjectArray *FreemarkerCoreInvalidReferenceException_TIP_;
J2OBJC_STATIC_FIELD_GETTER(FreemarkerCoreInvalidReferenceException, TIP_, IOSObjectArray *)

static IOSObjectArray *FreemarkerCoreInvalidReferenceException_TIP_MISSING_ASSIGNMENT_TARGET_;
J2OBJC_STATIC_FIELD_GETTER(FreemarkerCoreInvalidReferenceException, TIP_MISSING_ASSIGNMENT_TARGET_, IOSObjectArray *)

static NSString *FreemarkerCoreInvalidReferenceException_TIP_NO_DOLLAR_ = 
#line 56
@"Variable references must not start with \"$\", unless the \"$\" is really part of the variable name.";
J2OBJC_STATIC_FIELD_GETTER(FreemarkerCoreInvalidReferenceException, TIP_NO_DOLLAR_, NSString *)

static NSString *FreemarkerCoreInvalidReferenceException_TIP_LAST_STEP_DOT_ = 
#line 59
@"It's the step after the last dot that caused this error, not those before it.";
J2OBJC_STATIC_FIELD_GETTER(FreemarkerCoreInvalidReferenceException, TIP_LAST_STEP_DOT_, NSString *)

static NSString *FreemarkerCoreInvalidReferenceException_TIP_LAST_STEP_SQUARE_BRACKET_ = 
#line 62
@"It's the final [] step that caused this error, not those before it.";
J2OBJC_STATIC_FIELD_GETTER(FreemarkerCoreInvalidReferenceException, TIP_LAST_STEP_SQUARE_BRACKET_, NSString *)

static NSString *FreemarkerCoreInvalidReferenceException_TIP_JSP_TAGLIBS_ = @"The \"JspTaglibs\" variable isn't a core FreeMarker feature; it's only available when templates are invoked through freemarker.ext.servlet.FreemarkerServlet (or other custom FreeMarker-JSP integration solution).";
J2OBJC_STATIC_FIELD_GETTER(FreemarkerCoreInvalidReferenceException, TIP_JSP_TAGLIBS_, NSString *)

__attribute__((unused)) static jboolean FreemarkerCoreInvalidReferenceException_endsWithDollarVariableWithFreemarkerCoreExpression_(FreemarkerCoreExpression *blame);

J2OBJC_INITIALIZED_DEFN(FreemarkerCoreInvalidReferenceException)

FreemarkerCoreInvalidReferenceException *FreemarkerCoreInvalidReferenceException_FAST_INSTANCE_;


#line 25
@implementation FreemarkerCoreInvalidReferenceException


#line 73
- (instancetype)initWithFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env {
  FreemarkerCoreInvalidReferenceException_initWithFreemarkerCoreEnvironment_(self, env);
  return self;
}


#line 83
- (instancetype)initWithNSString:(NSString *)description_
   withFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env {
  FreemarkerCoreInvalidReferenceException_initWithNSString_withFreemarkerCoreEnvironment_(self, description_, env);
  return self;
}


#line 94
- (instancetype)initWithFreemarkerCore_ErrorDescriptionBuilder:(FreemarkerCore_ErrorDescriptionBuilder *)description_
                                 withFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env
                                  withFreemarkerCoreExpression:(FreemarkerCoreExpression *)expression {
  FreemarkerCoreInvalidReferenceException_initWithFreemarkerCore_ErrorDescriptionBuilder_withFreemarkerCoreEnvironment_withFreemarkerCoreExpression_(self, description_, env, expression);
  return self;
}


#line 102
+ (FreemarkerCoreInvalidReferenceException *)getInstanceWithFreemarkerCoreExpression:(FreemarkerCoreExpression *)blamed
                                                       withFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env {
  return FreemarkerCoreInvalidReferenceException_getInstanceWithFreemarkerCoreExpression_withFreemarkerCoreEnvironment_(blamed, env);
}


#line 141
+ (FreemarkerCoreInvalidReferenceException *)getInstanceWithNSString:(NSString *)missingAssignedVarName
                                                        withNSString:(NSString *)assignmentOperator
                                       withFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env {
  return FreemarkerCoreInvalidReferenceException_getInstanceWithNSString_withNSString_withFreemarkerCoreEnvironment_(missingAssignedVarName, assignmentOperator, env);
}


#line 161
+ (jboolean)endsWithDollarVariableWithFreemarkerCoreExpression:(FreemarkerCoreExpression *)blame {
  return FreemarkerCoreInvalidReferenceException_endsWithDollarVariableWithFreemarkerCoreExpression_(blame);
}

+ (void)initialize {
  if (self == [FreemarkerCoreInvalidReferenceException class]) {
    {
      
#line 29
      FreemarkerCoreEnvironment *prevEnv = FreemarkerCoreEnvironment_getCurrentEnvironment();
      @try {
        FreemarkerCoreEnvironment_setCurrentEnvironmentWithFreemarkerCoreEnvironment_(nil);
        FreemarkerCoreInvalidReferenceException_FAST_INSTANCE_ = new_FreemarkerCoreInvalidReferenceException_initWithNSString_withFreemarkerCoreEnvironment_(@"Invalid reference. Details are unavilable, as this should have been handled by an FTL construct. If it wasn't, that's problably a bug in FreeMarker.",
#line 35
        nil);
      }
      @finally {
        
#line 37
        FreemarkerCoreEnvironment_setCurrentEnvironmentWithFreemarkerCoreEnvironment_(prevEnv);
      }
    }
    FreemarkerCoreInvalidReferenceException_TIP_ = [IOSObjectArray newArrayWithObjects:(id[]){ @"If the failing expression is known to be legally refer to something that's sometimes null or missing, either specify a default value like myOptionalVar!myDefault, or use ",
#line 44
    @"<#if myOptionalVar?" "?>", @"when-present", @"<#else>", @"when-missing", @"</#if>", @". (These only cover the last step of the expression; to cover the whole expression, use parenthesis: (myOptionalVar.foo)!myDefault, (myOptionalVar.foo)??" } count:7 type:NSString_class_()];
    FreemarkerCoreInvalidReferenceException_TIP_MISSING_ASSIGNMENT_TARGET_ = [IOSObjectArray newArrayWithObjects:(id[]){
#line 50
      @"If the target variable is known to be legally null or missing sometimes, instead of something like ",
#line 51
      @"<#assign x += 1>", @", you could write ", @"<#if x?" "?>", @"<#assign x += 1>", @"</#if>",
#line 52
      @" or ", @"<#assign x = (x!0) + 1>" } count:8 type:NSString_class_()];
      J2OBJC_SET_INITIALIZED(FreemarkerCoreInvalidReferenceException)
    }
  }

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithFreemarkerCoreEnvironment:", "InvalidReferenceException", NULL, 0x1, NULL, NULL },
    { "initWithNSString:withFreemarkerCoreEnvironment:", "InvalidReferenceException", NULL, 0x1, NULL, NULL },
    { "initWithFreemarkerCore_ErrorDescriptionBuilder:withFreemarkerCoreEnvironment:withFreemarkerCoreExpression:", "InvalidReferenceException", NULL, 0x0, NULL, NULL },
    { "getInstanceWithFreemarkerCoreExpression:withFreemarkerCoreEnvironment:", "getInstance", "Lfreemarker.core.InvalidReferenceException;", 0x8, NULL, NULL },
    { "getInstanceWithNSString:withNSString:withFreemarkerCoreEnvironment:", "getInstance", "Lfreemarker.core.InvalidReferenceException;", 0x8, NULL, NULL },
    { "endsWithDollarVariableWithFreemarkerCoreExpression:", "endsWithDollarVariable", "Z", 0xa, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "FAST_INSTANCE_", NULL, 0x18, "Lfreemarker.core.InvalidReferenceException;", &FreemarkerCoreInvalidReferenceException_FAST_INSTANCE_, NULL,  },
    { "TIP_", NULL, 0x1a, "[Ljava.lang.String;", &FreemarkerCoreInvalidReferenceException_TIP_, NULL,  },
    { "TIP_MISSING_ASSIGNMENT_TARGET_", NULL, 0x1a, "[Ljava.lang.String;", &FreemarkerCoreInvalidReferenceException_TIP_MISSING_ASSIGNMENT_TARGET_, NULL,  },
    { "TIP_NO_DOLLAR_", NULL, 0x1a, "Ljava.lang.String;", &FreemarkerCoreInvalidReferenceException_TIP_NO_DOLLAR_, NULL,  },
    { "TIP_LAST_STEP_DOT_", NULL, 0x1a, "Ljava.lang.String;", &FreemarkerCoreInvalidReferenceException_TIP_LAST_STEP_DOT_, NULL,  },
    { "TIP_LAST_STEP_SQUARE_BRACKET_", NULL, 0x1a, "Ljava.lang.String;", &FreemarkerCoreInvalidReferenceException_TIP_LAST_STEP_SQUARE_BRACKET_, NULL,  },
    { "TIP_JSP_TAGLIBS_", NULL, 0x1a, "Ljava.lang.String;", &FreemarkerCoreInvalidReferenceException_TIP_JSP_TAGLIBS_, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerCoreInvalidReferenceException = { 2, "InvalidReferenceException", "freemarker.core", NULL, 0x1, 6, methods, 7, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerCoreInvalidReferenceException;
}

@end


#line 73
void FreemarkerCoreInvalidReferenceException_initWithFreemarkerCoreEnvironment_(FreemarkerCoreInvalidReferenceException *self, FreemarkerCoreEnvironment *env) {
  (void) FreemarkerTemplateTemplateException_initWithNSString_withFreemarkerCoreEnvironment_(self, @"Invalid reference: The expression has evaluated to null or refers to something that doesn't exist.",
#line 75
  env);
}


#line 73
FreemarkerCoreInvalidReferenceException *new_FreemarkerCoreInvalidReferenceException_initWithFreemarkerCoreEnvironment_(FreemarkerCoreEnvironment *env) {
  FreemarkerCoreInvalidReferenceException *self = [FreemarkerCoreInvalidReferenceException alloc];
  FreemarkerCoreInvalidReferenceException_initWithFreemarkerCoreEnvironment_(self, env);
  return self;
}


#line 83
void FreemarkerCoreInvalidReferenceException_initWithNSString_withFreemarkerCoreEnvironment_(FreemarkerCoreInvalidReferenceException *self, NSString *description_, FreemarkerCoreEnvironment *env) {
  (void) FreemarkerTemplateTemplateException_initWithNSString_withFreemarkerCoreEnvironment_(self, description_, env);
}


#line 83
FreemarkerCoreInvalidReferenceException *new_FreemarkerCoreInvalidReferenceException_initWithNSString_withFreemarkerCoreEnvironment_(NSString *description_, FreemarkerCoreEnvironment *env) {
  FreemarkerCoreInvalidReferenceException *self = [FreemarkerCoreInvalidReferenceException alloc];
  FreemarkerCoreInvalidReferenceException_initWithNSString_withFreemarkerCoreEnvironment_(self, description_, env);
  return self;
}


#line 94
void FreemarkerCoreInvalidReferenceException_initWithFreemarkerCore_ErrorDescriptionBuilder_withFreemarkerCoreEnvironment_withFreemarkerCoreExpression_(FreemarkerCoreInvalidReferenceException *self, FreemarkerCore_ErrorDescriptionBuilder *description_, FreemarkerCoreEnvironment *env, FreemarkerCoreExpression *expression) {
  (void) FreemarkerTemplateTemplateException_initWithJavaLangThrowable_withFreemarkerCoreEnvironment_withFreemarkerCoreExpression_withFreemarkerCore_ErrorDescriptionBuilder_(self, nil, env, expression, description_);
}


#line 94
FreemarkerCoreInvalidReferenceException *new_FreemarkerCoreInvalidReferenceException_initWithFreemarkerCore_ErrorDescriptionBuilder_withFreemarkerCoreEnvironment_withFreemarkerCoreExpression_(FreemarkerCore_ErrorDescriptionBuilder *description_, FreemarkerCoreEnvironment *env, FreemarkerCoreExpression *expression) {
  FreemarkerCoreInvalidReferenceException *self = [FreemarkerCoreInvalidReferenceException alloc];
  FreemarkerCoreInvalidReferenceException_initWithFreemarkerCore_ErrorDescriptionBuilder_withFreemarkerCoreEnvironment_withFreemarkerCoreExpression_(self, description_, env, expression);
  return self;
}


#line 102
FreemarkerCoreInvalidReferenceException *FreemarkerCoreInvalidReferenceException_getInstanceWithFreemarkerCoreExpression_withFreemarkerCoreEnvironment_(FreemarkerCoreExpression *blamed, FreemarkerCoreEnvironment *env) {
  FreemarkerCoreInvalidReferenceException_initialize();
  
#line 103
  if (env != nil && [env getFastInvalidReferenceExceptions]) {
    return FreemarkerCoreInvalidReferenceException_FAST_INSTANCE_;
  }
  else {
    
#line 106
    if (blamed != nil) {
      FreemarkerCore_ErrorDescriptionBuilder *errDescBuilder =
#line 108
      [new_FreemarkerCore_ErrorDescriptionBuilder_initWithNSString_(@"The following has evaluated to null or missing:") blameWithFreemarkerCoreExpression:blamed];
      if (FreemarkerCoreInvalidReferenceException_endsWithDollarVariableWithFreemarkerCoreExpression_(blamed)) {
        (void) [((FreemarkerCore_ErrorDescriptionBuilder *) nil_chk(errDescBuilder)) tipsWithNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ FreemarkerCoreInvalidReferenceException_TIP_NO_DOLLAR_, FreemarkerCoreInvalidReferenceException_TIP_ } count:2 type:NSObject_class_()]];
      }
      else
#line 111
      if ([blamed isKindOfClass:[FreemarkerCoreDot class]]) {
        NSString *rho = [((FreemarkerCoreDot *) check_class_cast(blamed, [FreemarkerCoreDot class])) getRHO];
        NSString *nameFixTip = nil;
        if ([@"size" isEqual:rho]) {
          nameFixTip = @"To query the size of a collection or map use ?size, like myList?size";
        }
        else
#line 116
        if ([@"length" isEqual:rho]) {
          nameFixTip = @"To query the length of a string use ?length, like myString?size";
        }
        (void) [((FreemarkerCore_ErrorDescriptionBuilder *) nil_chk(errDescBuilder)) tipsWithNSObjectArray:
#line 120
        nameFixTip == nil ? [IOSObjectArray newArrayWithObjects:(id[]){
#line 121
          FreemarkerCoreInvalidReferenceException_TIP_LAST_STEP_DOT_, FreemarkerCoreInvalidReferenceException_TIP_ } count:2 type:NSObject_class_()] : [IOSObjectArray newArrayWithObjects:(id[]){
#line 122
            FreemarkerCoreInvalidReferenceException_TIP_LAST_STEP_DOT_, nameFixTip, FreemarkerCoreInvalidReferenceException_TIP_ } count:3 type:NSObject_class_()]];
          }
          else
#line 123
          if ([blamed isKindOfClass:[FreemarkerCoreDynamicKeyName class]]) {
            (void) [((FreemarkerCore_ErrorDescriptionBuilder *) nil_chk(errDescBuilder)) tipsWithNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ FreemarkerCoreInvalidReferenceException_TIP_LAST_STEP_SQUARE_BRACKET_, FreemarkerCoreInvalidReferenceException_TIP_ } count:2 type:NSObject_class_()]];
          }
          else
#line 125
          if ([blamed isKindOfClass:[FreemarkerCoreIdentifier class]] &&
#line 126
          [((NSString *) nil_chk([((FreemarkerCoreIdentifier *) check_class_cast(blamed, [FreemarkerCoreIdentifier class])) getName])) isEqual:@"JspTaglibs"]) {
            (void) [((FreemarkerCore_ErrorDescriptionBuilder *) nil_chk(errDescBuilder)) tipsWithNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ FreemarkerCoreInvalidReferenceException_TIP_JSP_TAGLIBS_, FreemarkerCoreInvalidReferenceException_TIP_ } count:2 type:NSObject_class_()]];
          }
          else {
            
#line 129
            (void) [((FreemarkerCore_ErrorDescriptionBuilder *) nil_chk(errDescBuilder)) tipWithNSObjectArray:FreemarkerCoreInvalidReferenceException_TIP_];
          }
          return new_FreemarkerCoreInvalidReferenceException_initWithFreemarkerCore_ErrorDescriptionBuilder_withFreemarkerCoreEnvironment_withFreemarkerCoreExpression_(errDescBuilder, env, blamed);
        }
        else {
          
#line 133
          return new_FreemarkerCoreInvalidReferenceException_initWithFreemarkerCoreEnvironment_(env);
        }
      }
    }


#line 141
FreemarkerCoreInvalidReferenceException *FreemarkerCoreInvalidReferenceException_getInstanceWithNSString_withNSString_withFreemarkerCoreEnvironment_(NSString *missingAssignedVarName, NSString *assignmentOperator, FreemarkerCoreEnvironment *env) {
  FreemarkerCoreInvalidReferenceException_initialize();
  if (env != nil && [env getFastInvalidReferenceExceptions]) {
    return FreemarkerCoreInvalidReferenceException_FAST_INSTANCE_;
  }
  else {
    
#line 146
    FreemarkerCore_ErrorDescriptionBuilder *errDescBuilder = new_FreemarkerCore_ErrorDescriptionBuilder_initWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){
#line 147
      @"The target variable of the assignment, ", new_FreemarkerCore_DelayedJQuote_initWithId_(
#line 148
      missingAssignedVarName),
#line 149
      @", was null or missing, but the \"",
#line 150
      assignmentOperator, @"\" operator needs to get its value before assigning to it." } count:5 type:NSObject_class_()]);
      
#line 152
      if ([((NSString *) nil_chk(missingAssignedVarName)) hasPrefix:@"$"]) {
        (void) [errDescBuilder tipsWithNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ FreemarkerCoreInvalidReferenceException_TIP_NO_DOLLAR_, FreemarkerCoreInvalidReferenceException_TIP_MISSING_ASSIGNMENT_TARGET_ } count:2 type:NSObject_class_()]];
      }
      else {
        
#line 155
        (void) [errDescBuilder tipWithNSObjectArray:FreemarkerCoreInvalidReferenceException_TIP_MISSING_ASSIGNMENT_TARGET_];
      }
      return new_FreemarkerCoreInvalidReferenceException_initWithFreemarkerCore_ErrorDescriptionBuilder_withFreemarkerCoreEnvironment_withFreemarkerCoreExpression_(errDescBuilder, env, nil);
    }
  }


#line 161
jboolean FreemarkerCoreInvalidReferenceException_endsWithDollarVariableWithFreemarkerCoreExpression_(FreemarkerCoreExpression *blame) {
  FreemarkerCoreInvalidReferenceException_initialize();
  
#line 162
  return ([blame isKindOfClass:[FreemarkerCoreIdentifier class]] && [((NSString *) nil_chk([((FreemarkerCoreIdentifier *) nil_chk(((FreemarkerCoreIdentifier *) check_class_cast(blame, [FreemarkerCoreIdentifier class])))) getName])) hasPrefix:@"$"]) || (
#line 163
  [blame isKindOfClass:[FreemarkerCoreDot class]] && [((NSString *) nil_chk([((FreemarkerCoreDot *) nil_chk(((FreemarkerCoreDot *) check_class_cast(blame, [FreemarkerCoreDot class])))) getRHO])) hasPrefix:@"$"]);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreInvalidReferenceException)
