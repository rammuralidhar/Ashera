//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/TrimInstruction.java
//


#include "Environment.h"
#include "J2ObjC_source.h"
#include "ParameterRole.h"
#include "TemplateElement.h"
#include "TrimInstruction.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuffer.h"

#line 0 "/Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/TrimInstruction.java"

@interface FreemarkerCoreTrimInstruction () {
 @public
  jint TYPE_T_;
  jint TYPE_LT_;
  jint TYPE_RT_;
  jint TYPE_NT_;
}

@end


#line 23
@implementation FreemarkerCoreTrimInstruction


#line 32
- (instancetype)initWithBoolean:(jboolean)left
                    withBoolean:(jboolean)right {
  FreemarkerCoreTrimInstruction_initWithBoolean_withBoolean_(self, left, right);
  return self;
}


#line 37
- (void)acceptWithFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env {
}


#line 41
- (NSString *)dumpWithBoolean:(jboolean)canonical {
  JavaLangStringBuffer *sb = new_JavaLangStringBuffer_init();
  if (canonical) (void) [sb appendWithChar:'<'];
  (void) [sb appendWithNSString:[self getNodeTypeSymbol]];
  if (canonical) (void) [sb appendWithNSString:@"/>"];
  return [sb description];
}

- (NSString *)getNodeTypeSymbol {
  if (left_ && right_) {
    return @"#t";
  }
  else
#line 52
  if (left_) {
    return @"#lt";
  }
  else
#line 54
  if (right_) {
    return @"#rt";
  }
  else {
    
#line 57
    return @"#nt";
  }
}


#line 61
- (jboolean)isIgnorable {
  return YES;
}

- (jint)getParameterCount {
  return 1;
}

- (id)getParameterValueWithInt:(jint)idx {
  if (idx != 0) @throw new_JavaLangIndexOutOfBoundsException_init();
  jint type;
  if (left_ && right_) {
    type = TYPE_T_;
  }
  else
#line 74
  if (left_) {
    type = TYPE_LT_;
  }
  else
#line 76
  if (right_) {
    type = TYPE_RT_;
  }
  else {
    
#line 79
    type = TYPE_NT_;
  }
  return new_JavaLangInteger_initWithInt_(type);
}


#line 84
- (FreemarkerCoreParameterRole *)getParameterRoleWithInt:(jint)idx {
  if (idx != 0) @throw new_JavaLangIndexOutOfBoundsException_init();
  return FreemarkerCoreParameterRole_get_AST_NODE_SUBTYPE_();
}

- (jboolean)isOutputCacheable {
  return YES;
}

- (jboolean)isNestedBlockRepeater {
  return NO;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithBoolean:withBoolean:", "TrimInstruction", NULL, 0x0, NULL, NULL },
    { "acceptWithFreemarkerCoreEnvironment:", "accept", "V", 0x0, NULL, NULL },
    { "dumpWithBoolean:", "dump", "Ljava.lang.String;", 0x4, NULL, NULL },
    { "getNodeTypeSymbol", NULL, "Ljava.lang.String;", 0x0, NULL, NULL },
    { "isIgnorable", NULL, "Z", 0x0, NULL, NULL },
    { "getParameterCount", NULL, "I", 0x0, NULL, NULL },
    { "getParameterValueWithInt:", "getParameterValue", "Ljava.lang.Object;", 0x0, NULL, NULL },
    { "getParameterRoleWithInt:", "getParameterRole", "Lfreemarker.core.ParameterRole;", 0x0, NULL, NULL },
    { "isOutputCacheable", NULL, "Z", 0x0, NULL, NULL },
    { "isNestedBlockRepeater", NULL, "Z", 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "TYPE_T_", NULL, 0x12, "I", NULL, NULL,  },
    { "TYPE_LT_", NULL, 0x12, "I", NULL, NULL,  },
    { "TYPE_RT_", NULL, 0x12, "I", NULL, NULL,  },
    { "TYPE_NT_", NULL, 0x12, "I", NULL, NULL,  },
    { "left_", NULL, 0x10, "Z", NULL, NULL,  },
    { "right_", NULL, 0x10, "Z", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerCoreTrimInstruction = { 2, "TrimInstruction", "freemarker.core", NULL, 0x10, 10, methods, 6, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerCoreTrimInstruction;
}

@end


#line 32
void FreemarkerCoreTrimInstruction_initWithBoolean_withBoolean_(FreemarkerCoreTrimInstruction *self, jboolean left, jboolean right) {
  (void) FreemarkerCoreTemplateElement_init(self);
  self->TYPE_T_ =
#line 25
  0;
  self->TYPE_LT_ = 1;
  self->TYPE_RT_ = 2;
  self->TYPE_NT_ = 3;
  
#line 33
  self->left_ = left;
  self->right_ = right;
}


#line 32
FreemarkerCoreTrimInstruction *new_FreemarkerCoreTrimInstruction_initWithBoolean_withBoolean_(jboolean left, jboolean right) {
  FreemarkerCoreTrimInstruction *self = [FreemarkerCoreTrimInstruction alloc];
  FreemarkerCoreTrimInstruction_initWithBoolean_withBoolean_(self, left, right);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreTrimInstruction)
