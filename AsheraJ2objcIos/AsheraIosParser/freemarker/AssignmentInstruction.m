//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/AssignmentInstruction.java
//


#include "Assignment.h"
#include "AssignmentInstruction.h"
#include "Environment.h"
#include "Expression.h"
#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "ParameterRole.h"
#include "ParseException.h"
#include "TemplateElement.h"
#include "TemplateException.h"
#include "java/io/IOException.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuffer.h"

#line 0 "/Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/AssignmentInstruction.java"

@interface FreemarkerCoreAssignmentInstruction () {
 @public
  jint scope_;
  FreemarkerCoreExpression *namespaceExp_;
}

@end

J2OBJC_FIELD_SETTER(FreemarkerCoreAssignmentInstruction, namespaceExp_, FreemarkerCoreExpression *)


#line 28
@implementation FreemarkerCoreAssignmentInstruction


#line 33
- (instancetype)initWithInt:(jint)scope {
  FreemarkerCoreAssignmentInstruction_initWithInt_(self, scope);
  return self;
}

- (void)addAssignmentWithFreemarkerCoreAssignment:(FreemarkerCoreAssignment *)assignment {
  [self addRegulatedChildWithFreemarkerCoreTemplateElement:assignment];
}

- (void)setNamespaceExpWithFreemarkerCoreExpression:(FreemarkerCoreExpression *)namespaceExp {
  self->namespaceExp_ = namespaceExp;
  jint ln = [self getRegulatedChildCount];
  for (jint i = 0; i < ln; i++) {
    [((FreemarkerCoreAssignment *) nil_chk(((FreemarkerCoreAssignment *) check_class_cast([self getRegulatedChildWithInt:i], [FreemarkerCoreAssignment class])))) setNamespaceExpWithFreemarkerCoreExpression:namespaceExp];
  }
}

- (void)acceptWithFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env {
  jint ln = [self getRegulatedChildCount];
  for (jint i = 0; i < ln; i++) {
    FreemarkerCoreAssignment *assignment = (FreemarkerCoreAssignment *) check_class_cast([self getRegulatedChildWithInt:i], [FreemarkerCoreAssignment class]);
    [((FreemarkerCoreEnvironment *) nil_chk(env)) visitWithFreemarkerCoreTemplateElement:assignment];
  }
}

- (NSString *)dumpWithBoolean:(jboolean)canonical {
  JavaLangStringBuffer *buf = new_JavaLangStringBuffer_init();
  if (canonical) (void) [buf appendWithChar:'<'];
  (void) [buf appendWithNSString:FreemarkerCoreAssignment_getDirectiveNameWithInt_(scope_)];
  if (canonical) {
    (void) [buf appendWithChar:' '];
    jint ln = [self getRegulatedChildCount];
    for (jint i = 0; i < ln; i++) {
      if (i != 0) {
        (void) [buf appendWithNSString:@", "];
      }
      FreemarkerCoreAssignment *assignment = (FreemarkerCoreAssignment *) check_class_cast([self getRegulatedChildWithInt:i], [FreemarkerCoreAssignment class]);
      (void) [buf appendWithNSString:[((FreemarkerCoreAssignment *) nil_chk(assignment)) getCanonicalForm]];
    }
  }
  else {
    
#line 73
    (void) [buf appendWithNSString:@"-container"];
  }
  if (namespaceExp_ != nil) {
    (void) [buf appendWithNSString:@" in "];
    (void) [buf appendWithNSString:[namespaceExp_ getCanonicalForm]];
  }
  if (canonical) (void) [buf appendWithNSString:@">"];
  return [buf description];
}


#line 83
- (jint)getParameterCount {
  return 2;
}

- (id)getParameterValueWithInt:(jint)idx {
  switch (idx) {
    case 0:
    
#line 89
    return new_JavaLangInteger_initWithInt_(scope_);
    case 1:
    
#line 90
    return namespaceExp_;
    default:
    
#line 91
    return nil;
  }
}


#line 95
- (FreemarkerCoreParameterRole *)getParameterRoleWithInt:(jint)idx {
  switch (idx) {
    case 0:
    
#line 97
    return FreemarkerCoreParameterRole_get_VARIABLE_SCOPE_();
    case 1:
    
#line 98
    return FreemarkerCoreParameterRole_get_NAMESPACE_();
    default:
    
#line 99
    return nil;
  }
}


#line 103
- (NSString *)getNodeTypeSymbol {
  return FreemarkerCoreAssignment_getDirectiveNameWithInt_(scope_);
}

- (FreemarkerCoreTemplateElement *)postParseCleanupWithBoolean:(jboolean)stripWhitespace {
  (void) [super postParseCleanupWithBoolean:stripWhitespace];
  return self;
}

- (jboolean)isNestedBlockRepeater {
  return NO;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithInt:", "AssignmentInstruction", NULL, 0x0, NULL, NULL },
    { "addAssignmentWithFreemarkerCoreAssignment:", "addAssignment", "V", 0x0, NULL, NULL },
    { "setNamespaceExpWithFreemarkerCoreExpression:", "setNamespaceExp", "V", 0x0, NULL, NULL },
    { "acceptWithFreemarkerCoreEnvironment:", "accept", "V", 0x0, "Lfreemarker.template.TemplateException;Ljava.io.IOException;", NULL },
    { "dumpWithBoolean:", "dump", "Ljava.lang.String;", 0x4, NULL, NULL },
    { "getParameterCount", NULL, "I", 0x0, NULL, NULL },
    { "getParameterValueWithInt:", "getParameterValue", "Ljava.lang.Object;", 0x0, NULL, NULL },
    { "getParameterRoleWithInt:", "getParameterRole", "Lfreemarker.core.ParameterRole;", 0x0, NULL, NULL },
    { "getNodeTypeSymbol", NULL, "Ljava.lang.String;", 0x0, NULL, NULL },
    { "postParseCleanupWithBoolean:", "postParseCleanup", "Lfreemarker.core.TemplateElement;", 0x1, "Lfreemarker.core.ParseException;", NULL },
    { "isNestedBlockRepeater", NULL, "Z", 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "scope_", NULL, 0x2, "I", NULL, NULL,  },
    { "namespaceExp_", NULL, 0x2, "Lfreemarker.core.Expression;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerCoreAssignmentInstruction = { 2, "AssignmentInstruction", "freemarker.core", NULL, 0x10, 11, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerCoreAssignmentInstruction;
}

@end


#line 33
void FreemarkerCoreAssignmentInstruction_initWithInt_(FreemarkerCoreAssignmentInstruction *self, jint scope) {
  (void) FreemarkerCoreTemplateElement_init(self);
  
#line 34
  self->scope_ = scope;
  [self setRegulatedChildBufferCapacityWithInt:1];
}


#line 33
FreemarkerCoreAssignmentInstruction *new_FreemarkerCoreAssignmentInstruction_initWithInt_(jint scope) {
  FreemarkerCoreAssignmentInstruction *self = [FreemarkerCoreAssignmentInstruction alloc];
  FreemarkerCoreAssignmentInstruction_initWithInt_(self, scope);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreAssignmentInstruction)
