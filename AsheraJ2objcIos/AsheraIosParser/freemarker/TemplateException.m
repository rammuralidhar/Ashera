//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/template/TemplateException.java
//


#include "CollectionUtils.h"
#include "Environment.h"
#include "Expression.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "Template.h"
#include "TemplateElement.h"
#include "TemplateException.h"
#include "TemplateObject.h"
#include "_CoreAPI.h"
#include "_ErrorDescriptionBuilder.h"
#include "java/io/IOException.h"
#include "java/io/ObjectInputStream.h"
#include "java/io/ObjectOutputStream.h"
#include "java/io/PrintStream.h"
#include "java/io/PrintWriter.h"
#include "java/io/StringWriter.h"
#include "java/lang/Boolean.h"
#include "java/lang/ClassNotFoundException.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/ThreadLocal.h"
#include "java/lang/Throwable.h"
#include "java/lang/reflect/Method.h"

@protocol FreemarkerTemplateTemplateException_StackTraceWriter;

#line 0 "/Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/template/TemplateException.java"

#define FreemarkerTemplateTemplateException_FTL_STACK_TOP_FEW_MAX_LINES 6

@interface FreemarkerTemplateTemplateException () {
 @public
  FreemarkerCore_ErrorDescriptionBuilder *descriptionBuilder_;
  FreemarkerCoreEnvironment *env_;
  FreemarkerCoreExpression *blamedExpression_;
  IOSObjectArray *ftlInstructionStackSnapshot_;
  NSString *renderedFtlInstructionStackSnapshot_;
  NSString *renderedFtlInstructionStackSnapshotTop_;
  NSString *description__;
  NSString *messageWithoutStackTop_;
  NSString *message_;
  jboolean blamedExpressionStringCalculated_;
  NSString *blamedExpressionString_;
  jboolean positionsCalculated_;
  NSString *templateName_;
  NSString *templateSourceName_;
  JavaLangInteger *lineNumber_;
  JavaLangInteger *columnNumber_;
  JavaLangInteger *endLineNumber_;
  JavaLangInteger *endColumnNumber_;
  id lock_;
  JavaLangThreadLocal *messageWasAlreadyPrintedForThisTrace_;
}

- (instancetype)initWithNSString:(NSString *)renderedDescription
           withJavaLangThrowable:(JavaLangThrowable *)cause
   withFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env
    withFreemarkerCoreExpression:(FreemarkerCoreExpression *)blamedExpression
withFreemarkerCore_ErrorDescriptionBuilder:(FreemarkerCore_ErrorDescriptionBuilder *)descriptionBuilder;

- (void)renderMessages;

- (void)calculatePosition;

- (NSString *)getFTLInstructionStackTopFew;

- (void)deleteFTLInstructionStackSnapshotIfNotNeeded;

- (NSString *)getDescription;

- (FreemarkerCoreTemplateElement *)getFailingInstruction;

- (void)printStackTraceWithFreemarkerTemplateTemplateException_StackTraceWriter:(id<FreemarkerTemplateTemplateException_StackTraceWriter>)outArg
                                                                    withBoolean:(jboolean)heading
                                                                    withBoolean:(jboolean)ftlStackTrace
                                                                    withBoolean:(jboolean)javaStackTrace;

- (void)writeObjectWithJavaIoObjectOutputStream:(JavaIoObjectOutputStream *)outArg;

- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)inArg;

@end

J2OBJC_FIELD_SETTER(FreemarkerTemplateTemplateException, descriptionBuilder_, FreemarkerCore_ErrorDescriptionBuilder *)
J2OBJC_FIELD_SETTER(FreemarkerTemplateTemplateException, env_, FreemarkerCoreEnvironment *)
J2OBJC_FIELD_SETTER(FreemarkerTemplateTemplateException, blamedExpression_, FreemarkerCoreExpression *)
J2OBJC_FIELD_SETTER(FreemarkerTemplateTemplateException, ftlInstructionStackSnapshot_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(FreemarkerTemplateTemplateException, renderedFtlInstructionStackSnapshot_, NSString *)
J2OBJC_FIELD_SETTER(FreemarkerTemplateTemplateException, renderedFtlInstructionStackSnapshotTop_, NSString *)
J2OBJC_FIELD_SETTER(FreemarkerTemplateTemplateException, description__, NSString *)
J2OBJC_FIELD_SETTER(FreemarkerTemplateTemplateException, messageWithoutStackTop_, NSString *)
J2OBJC_FIELD_SETTER(FreemarkerTemplateTemplateException, message_, NSString *)
J2OBJC_FIELD_SETTER(FreemarkerTemplateTemplateException, blamedExpressionString_, NSString *)
J2OBJC_FIELD_SETTER(FreemarkerTemplateTemplateException, templateName_, NSString *)
J2OBJC_FIELD_SETTER(FreemarkerTemplateTemplateException, templateSourceName_, NSString *)
J2OBJC_FIELD_SETTER(FreemarkerTemplateTemplateException, lineNumber_, JavaLangInteger *)
J2OBJC_FIELD_SETTER(FreemarkerTemplateTemplateException, columnNumber_, JavaLangInteger *)
J2OBJC_FIELD_SETTER(FreemarkerTemplateTemplateException, endLineNumber_, JavaLangInteger *)
J2OBJC_FIELD_SETTER(FreemarkerTemplateTemplateException, endColumnNumber_, JavaLangInteger *)
J2OBJC_FIELD_SETTER(FreemarkerTemplateTemplateException, lock_, id)
J2OBJC_FIELD_SETTER(FreemarkerTemplateTemplateException, messageWasAlreadyPrintedForThisTrace_, JavaLangThreadLocal *)

J2OBJC_STATIC_FIELD_GETTER(FreemarkerTemplateTemplateException, FTL_STACK_TOP_FEW_MAX_LINES, jint)

static NSString *FreemarkerTemplateTemplateException_FTL_INSTRUCTION_STACK_TRACE_TITLE_ = 
#line 45
@"FTL stack trace (\"~\" means nesting-related):";
J2OBJC_STATIC_FIELD_GETTER(FreemarkerTemplateTemplateException, FTL_INSTRUCTION_STACK_TRACE_TITLE_, NSString *)

__attribute__((unused)) static void FreemarkerTemplateTemplateException_initWithNSString_withJavaLangThrowable_withFreemarkerCoreEnvironment_withFreemarkerCoreExpression_withFreemarkerCore_ErrorDescriptionBuilder_(FreemarkerTemplateTemplateException *self, NSString *renderedDescription, JavaLangThrowable *cause, FreemarkerCoreEnvironment *env, FreemarkerCoreExpression *blamedExpression, FreemarkerCore_ErrorDescriptionBuilder *descriptionBuilder);

__attribute__((unused)) static FreemarkerTemplateTemplateException *new_FreemarkerTemplateTemplateException_initWithNSString_withJavaLangThrowable_withFreemarkerCoreEnvironment_withFreemarkerCoreExpression_withFreemarkerCore_ErrorDescriptionBuilder_(NSString *renderedDescription, JavaLangThrowable *cause, FreemarkerCoreEnvironment *env, FreemarkerCoreExpression *blamedExpression, FreemarkerCore_ErrorDescriptionBuilder *descriptionBuilder) NS_RETURNS_RETAINED;

__attribute__((unused)) static void FreemarkerTemplateTemplateException_renderMessages(FreemarkerTemplateTemplateException *self);

__attribute__((unused)) static void FreemarkerTemplateTemplateException_calculatePosition(FreemarkerTemplateTemplateException *self);

__attribute__((unused)) static NSString *FreemarkerTemplateTemplateException_getFTLInstructionStackTopFew(FreemarkerTemplateTemplateException *self);

__attribute__((unused)) static void FreemarkerTemplateTemplateException_deleteFTLInstructionStackSnapshotIfNotNeeded(FreemarkerTemplateTemplateException *self);

__attribute__((unused)) static NSString *FreemarkerTemplateTemplateException_getDescription(FreemarkerTemplateTemplateException *self);

__attribute__((unused)) static FreemarkerCoreTemplateElement *FreemarkerTemplateTemplateException_getFailingInstruction(FreemarkerTemplateTemplateException *self);

__attribute__((unused)) static void FreemarkerTemplateTemplateException_printStackTraceWithFreemarkerTemplateTemplateException_StackTraceWriter_withBoolean_withBoolean_withBoolean_(FreemarkerTemplateTemplateException *self, id<FreemarkerTemplateTemplateException_StackTraceWriter> outArg, jboolean heading, jboolean ftlStackTrace, jboolean javaStackTrace);

/**
 @brief Delegate to a PrintWriter or to a PrintStream .
 */
@protocol FreemarkerTemplateTemplateException_StackTraceWriter < NSObject, JavaObject >

- (void)printWithId:(id)obj;

- (void)printlnWithId:(id)obj;

- (void)println;

- (void)printStandardStackTraceWithJavaLangThrowable:(JavaLangThrowable *)exception;

@end

@interface FreemarkerTemplateTemplateException_StackTraceWriter : NSObject
@end

J2OBJC_EMPTY_STATIC_INIT(FreemarkerTemplateTemplateException_StackTraceWriter)

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerTemplateTemplateException_StackTraceWriter)

@interface FreemarkerTemplateTemplateException_PrintStreamStackTraceWriter : NSObject < FreemarkerTemplateTemplateException_StackTraceWriter > {
 @public
  JavaIoPrintStream *out_;
}

- (instancetype)initWithJavaIoPrintStream:(JavaIoPrintStream *)outArg;

- (void)printWithId:(id)obj;

- (void)printlnWithId:(id)obj;

- (void)println;

- (void)printStandardStackTraceWithJavaLangThrowable:(JavaLangThrowable *)exception;

@end

J2OBJC_EMPTY_STATIC_INIT(FreemarkerTemplateTemplateException_PrintStreamStackTraceWriter)

J2OBJC_FIELD_SETTER(FreemarkerTemplateTemplateException_PrintStreamStackTraceWriter, out_, JavaIoPrintStream *)

__attribute__((unused)) static void FreemarkerTemplateTemplateException_PrintStreamStackTraceWriter_initWithJavaIoPrintStream_(FreemarkerTemplateTemplateException_PrintStreamStackTraceWriter *self, JavaIoPrintStream *outArg);

__attribute__((unused)) static FreemarkerTemplateTemplateException_PrintStreamStackTraceWriter *new_FreemarkerTemplateTemplateException_PrintStreamStackTraceWriter_initWithJavaIoPrintStream_(JavaIoPrintStream *outArg) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerTemplateTemplateException_PrintStreamStackTraceWriter)

@interface FreemarkerTemplateTemplateException_PrintWriterStackTraceWriter : NSObject < FreemarkerTemplateTemplateException_StackTraceWriter > {
 @public
  JavaIoPrintWriter *out_;
}

- (instancetype)initWithJavaIoPrintWriter:(JavaIoPrintWriter *)outArg;

- (void)printWithId:(id)obj;

- (void)printlnWithId:(id)obj;

- (void)println;

- (void)printStandardStackTraceWithJavaLangThrowable:(JavaLangThrowable *)exception;

@end

J2OBJC_EMPTY_STATIC_INIT(FreemarkerTemplateTemplateException_PrintWriterStackTraceWriter)

J2OBJC_FIELD_SETTER(FreemarkerTemplateTemplateException_PrintWriterStackTraceWriter, out_, JavaIoPrintWriter *)

__attribute__((unused)) static void FreemarkerTemplateTemplateException_PrintWriterStackTraceWriter_initWithJavaIoPrintWriter_(FreemarkerTemplateTemplateException_PrintWriterStackTraceWriter *self, JavaIoPrintWriter *outArg);

__attribute__((unused)) static FreemarkerTemplateTemplateException_PrintWriterStackTraceWriter *new_FreemarkerTemplateTemplateException_PrintWriterStackTraceWriter_initWithJavaIoPrintWriter_(JavaIoPrintWriter *outArg) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerTemplateTemplateException_PrintWriterStackTraceWriter)


#line 41
@implementation FreemarkerTemplateTemplateException


#line 77
- (instancetype)initWithFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env {
  FreemarkerTemplateTemplateException_initWithFreemarkerCoreEnvironment_(self, env);
  return self;
}


#line 87
- (instancetype)initWithNSString:(NSString *)description_
   withFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env {
  FreemarkerTemplateTemplateException_initWithNSString_withFreemarkerCoreEnvironment_(self, description_, env);
  return self;
}


#line 95
- (instancetype)initWithJavaLangException:(JavaLangException *)cause
            withFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env {
  FreemarkerTemplateTemplateException_initWithJavaLangException_withFreemarkerCoreEnvironment_(self, cause, env);
  return self;
}


#line 108
- (instancetype)initWithJavaLangThrowable:(JavaLangThrowable *)cause
            withFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env {
  FreemarkerTemplateTemplateException_initWithJavaLangThrowable_withFreemarkerCoreEnvironment_(self, cause, env);
  return self;
}


#line 116
- (instancetype)initWithNSString:(NSString *)description_
           withJavaLangException:(JavaLangException *)cause
   withFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env {
  FreemarkerTemplateTemplateException_initWithNSString_withJavaLangException_withFreemarkerCoreEnvironment_(self, description_, cause, env);
  return self;
}


#line 130
- (instancetype)initWithNSString:(NSString *)description_
           withJavaLangThrowable:(JavaLangThrowable *)cause
   withFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env {
  FreemarkerTemplateTemplateException_initWithNSString_withJavaLangThrowable_withFreemarkerCoreEnvironment_(self, description_, cause, env);
  return self;
}


#line 141
- (instancetype)initWithJavaLangThrowable:(JavaLangThrowable *)cause
            withFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env
             withFreemarkerCoreExpression:(FreemarkerCoreExpression *)blamedExpr
withFreemarkerCore_ErrorDescriptionBuilder:(FreemarkerCore_ErrorDescriptionBuilder *)descriptionBuilder {
  FreemarkerTemplateTemplateException_initWithJavaLangThrowable_withFreemarkerCoreEnvironment_withFreemarkerCoreExpression_withFreemarkerCore_ErrorDescriptionBuilder_(self, cause, env, blamedExpr, descriptionBuilder);
  return self;
}


#line 146
- (instancetype)initWithNSString:(NSString *)renderedDescription
           withJavaLangThrowable:(JavaLangThrowable *)cause
   withFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env
    withFreemarkerCoreExpression:(FreemarkerCoreExpression *)blamedExpression
withFreemarkerCore_ErrorDescriptionBuilder:(FreemarkerCore_ErrorDescriptionBuilder *)descriptionBuilder {
  FreemarkerTemplateTemplateException_initWithNSString_withJavaLangThrowable_withFreemarkerCoreEnvironment_withFreemarkerCoreExpression_withFreemarkerCore_ErrorDescriptionBuilder_(self, renderedDescription, cause, env, blamedExpression, descriptionBuilder);
  return self;
}


#line 166
- (void)renderMessages {
  FreemarkerTemplateTemplateException_renderMessages(self);
}


#line 191
- (void)calculatePosition {
  FreemarkerTemplateTemplateException_calculatePosition(self);
}


#line 220
- (JavaLangException *)getCauseException {
  return [[self getCause] isKindOfClass:[JavaLangException class]] ?
#line 222
  (JavaLangException *) check_class_cast([self getCause], [JavaLangException class]) : new_JavaLangException_initWithNSString_withJavaLangThrowable_(JreStrcat("$@", @"Wrapped to Exception: ",
#line 223
  [self getCause]), [self getCause]);
}


#line 229
- (NSString *)getFTLInstructionStack {
  @synchronized(lock_) {
    if (ftlInstructionStackSnapshot_ != nil || renderedFtlInstructionStackSnapshot_ != nil) {
      if (renderedFtlInstructionStackSnapshot_ == nil) {
        JavaIoStringWriter *sw = new_JavaIoStringWriter_init();
        JavaIoPrintWriter *pw = new_JavaIoPrintWriter_initWithJavaIoWriter_(sw);
        FreemarkerCore_CoreAPI_outputInstructionStackWithFreemarkerCoreTemplateElementArray_withBoolean_withJavaIoWriter_(ftlInstructionStackSnapshot_, NO, pw);
        [pw close];
        if (renderedFtlInstructionStackSnapshot_ == nil) {
          renderedFtlInstructionStackSnapshot_ = [sw description];
          FreemarkerTemplateTemplateException_deleteFTLInstructionStackSnapshotIfNotNeeded(self);
        }
      }
      return renderedFtlInstructionStackSnapshot_;
    }
    else {
      
#line 244
      return nil;
    }
  }
}


#line 249
- (NSString *)getFTLInstructionStackTopFew {
  return FreemarkerTemplateTemplateException_getFTLInstructionStackTopFew(self);
}


#line 275
- (void)deleteFTLInstructionStackSnapshotIfNotNeeded {
  FreemarkerTemplateTemplateException_deleteFTLInstructionStackSnapshotIfNotNeeded(self);
}


#line 283
- (NSString *)getDescription {
  return FreemarkerTemplateTemplateException_getDescription(self);
}


#line 295
- (FreemarkerCoreTemplateElement *)getFailingInstruction {
  return FreemarkerTemplateTemplateException_getFailingInstruction(self);
}


#line 307
- (FreemarkerCoreEnvironment *)getEnvironment {
  return env_;
}


#line 314
- (void)printStackTraceWithJavaIoPrintStream:(JavaIoPrintStream *)outArg {
  [self printStackTraceWithJavaIoPrintStream:outArg withBoolean:YES withBoolean:YES withBoolean:YES];
}


#line 321
- (void)printStackTraceWithJavaIoPrintWriter:(JavaIoPrintWriter *)outArg {
  [self printStackTraceWithJavaIoPrintWriter:outArg withBoolean:YES withBoolean:YES withBoolean:YES];
}


#line 332
- (void)printStackTraceWithJavaIoPrintWriter:(JavaIoPrintWriter *)outArg
                                 withBoolean:(jboolean)heading
                                 withBoolean:(jboolean)ftlStackTrace
                                 withBoolean:(jboolean)javaStackTrace {
  @synchronized(outArg) {
    FreemarkerTemplateTemplateException_printStackTraceWithFreemarkerTemplateTemplateException_StackTraceWriter_withBoolean_withBoolean_withBoolean_(self, new_FreemarkerTemplateTemplateException_PrintWriterStackTraceWriter_initWithJavaIoPrintWriter_(outArg), heading, ftlStackTrace, javaStackTrace);
  }
}


#line 345
- (void)printStackTraceWithJavaIoPrintStream:(JavaIoPrintStream *)outArg
                                 withBoolean:(jboolean)heading
                                 withBoolean:(jboolean)ftlStackTrace
                                 withBoolean:(jboolean)javaStackTrace {
  @synchronized(outArg) {
    FreemarkerTemplateTemplateException_printStackTraceWithFreemarkerTemplateTemplateException_StackTraceWriter_withBoolean_withBoolean_withBoolean_(self, new_FreemarkerTemplateTemplateException_PrintStreamStackTraceWriter_initWithJavaIoPrintStream_(outArg), heading, ftlStackTrace, javaStackTrace);
  }
}


#line 351
- (void)printStackTraceWithFreemarkerTemplateTemplateException_StackTraceWriter:(id<FreemarkerTemplateTemplateException_StackTraceWriter>)outArg
                                                                    withBoolean:(jboolean)heading
                                                                    withBoolean:(jboolean)ftlStackTrace
                                                                    withBoolean:(jboolean)javaStackTrace {
  FreemarkerTemplateTemplateException_printStackTraceWithFreemarkerTemplateTemplateException_StackTraceWriter_withBoolean_withBoolean_withBoolean_(self, outArg, heading, ftlStackTrace, javaStackTrace);
}


#line 418
- (void)printStandardStackTraceWithJavaIoPrintStream:(JavaIoPrintStream *)ps {
  [super printStackTraceWithJavaIoPrintStream:ps];
}


#line 426
- (void)printStandardStackTraceWithJavaIoPrintWriter:(JavaIoPrintWriter *)pw {
  [super printStackTraceWithJavaIoPrintWriter:pw];
}

- (NSString *)getMessage {
  if (messageWasAlreadyPrintedForThisTrace_ != nil &&
#line 432
  [messageWasAlreadyPrintedForThisTrace_ get] == JavaLangBoolean_get_TRUE__()) {
    return @"[... Exception message was already printed; see it above ...]";
  }
  else {
    
#line 435
    @synchronized(lock_) {
      if (message_ == nil) FreemarkerTemplateTemplateException_renderMessages(self);
      return message_;
    }
  }
}


#line 447
- (NSString *)getMessageWithoutStackTop {
  @synchronized(lock_) {
    if (messageWithoutStackTop_ == nil) FreemarkerTemplateTemplateException_renderMessages(self);
    return messageWithoutStackTop_;
  }
}


#line 459
- (JavaLangInteger *)getLineNumber {
  @synchronized(lock_) {
    if (!positionsCalculated_) {
      FreemarkerTemplateTemplateException_calculatePosition(self);
    }
    return lineNumber_;
  }
}


#line 478
- (NSString *)getTemplateName {
  @synchronized(lock_) {
    if (!positionsCalculated_) {
      FreemarkerTemplateTemplateException_calculatePosition(self);
    }
    return templateName_;
  }
}


#line 493
- (NSString *)getTemplateSourceName {
  @synchronized(lock_) {
    if (!positionsCalculated_) {
      FreemarkerTemplateTemplateException_calculatePosition(self);
    }
    return templateSourceName_;
  }
}


#line 507
- (JavaLangInteger *)getColumnNumber {
  @synchronized(lock_) {
    if (!positionsCalculated_) {
      FreemarkerTemplateTemplateException_calculatePosition(self);
    }
    return columnNumber_;
  }
}


#line 522
- (JavaLangInteger *)getEndLineNumber {
  @synchronized(lock_) {
    if (!positionsCalculated_) {
      FreemarkerTemplateTemplateException_calculatePosition(self);
    }
    return endLineNumber_;
  }
}


#line 537
- (JavaLangInteger *)getEndColumnNumber {
  @synchronized(lock_) {
    if (!positionsCalculated_) {
      FreemarkerTemplateTemplateException_calculatePosition(self);
    }
    return endColumnNumber_;
  }
}


#line 554
- (NSString *)getBlamedExpressionString {
  @synchronized(lock_) {
    if (!blamedExpressionStringCalculated_) {
      if (blamedExpression_ != nil) {
        blamedExpressionString_ = [blamedExpression_ getCanonicalForm];
      }
      blamedExpressionStringCalculated_ = YES;
    }
    return blamedExpressionString_;
  }
}

- (void)writeObjectWithJavaIoObjectOutputStream:(JavaIoObjectOutputStream *)outArg {
  
#line 568
  (void) [self getFTLInstructionStack];
  (void) FreemarkerTemplateTemplateException_getFTLInstructionStackTopFew(self);
  (void) FreemarkerTemplateTemplateException_getDescription(self);
  FreemarkerTemplateTemplateException_calculatePosition(self);
  (void) [self getBlamedExpressionString];
  
#line 574
  [((JavaIoObjectOutputStream *) nil_chk(outArg)) defaultWriteObject];
}


#line 577
- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)inArg {
  lock_ = new_NSObject_init();
  [((JavaIoObjectInputStream *) nil_chk(inArg)) defaultReadObject];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithFreemarkerCoreEnvironment:", "TemplateException", NULL, 0x1, NULL, NULL },
    { "initWithNSString:withFreemarkerCoreEnvironment:", "TemplateException", NULL, 0x1, NULL, NULL },
    { "initWithJavaLangException:withFreemarkerCoreEnvironment:", "TemplateException", NULL, 0x1, NULL, NULL },
    { "initWithJavaLangThrowable:withFreemarkerCoreEnvironment:", "TemplateException", NULL, 0x1, NULL, NULL },
    { "initWithNSString:withJavaLangException:withFreemarkerCoreEnvironment:", "TemplateException", NULL, 0x1, NULL, NULL },
    { "initWithNSString:withJavaLangThrowable:withFreemarkerCoreEnvironment:", "TemplateException", NULL, 0x1, NULL, NULL },
    { "initWithJavaLangThrowable:withFreemarkerCoreEnvironment:withFreemarkerCoreExpression:withFreemarkerCore_ErrorDescriptionBuilder:", "TemplateException", NULL, 0x4, NULL, NULL },
    { "initWithNSString:withJavaLangThrowable:withFreemarkerCoreEnvironment:withFreemarkerCoreExpression:withFreemarkerCore_ErrorDescriptionBuilder:", "TemplateException", NULL, 0x2, NULL, NULL },
    { "renderMessages", NULL, "V", 0x2, NULL, NULL },
    { "calculatePosition", NULL, "V", 0x2, NULL, NULL },
    { "getCauseException", NULL, "Ljava.lang.Exception;", 0x1, NULL, NULL },
    { "getFTLInstructionStack", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getFTLInstructionStackTopFew", NULL, "Ljava.lang.String;", 0x2, NULL, NULL },
    { "deleteFTLInstructionStackSnapshotIfNotNeeded", NULL, "V", 0x2, NULL, NULL },
    { "getDescription", NULL, "Ljava.lang.String;", 0x2, NULL, NULL },
    { "getFailingInstruction", NULL, "Lfreemarker.core.TemplateElement;", 0x2, NULL, NULL },
    { "getEnvironment", NULL, "Lfreemarker.core.Environment;", 0x1, NULL, NULL },
    { "printStackTraceWithJavaIoPrintStream:", "printStackTrace", "V", 0x1, NULL, NULL },
    { "printStackTraceWithJavaIoPrintWriter:", "printStackTrace", "V", 0x1, NULL, NULL },
    { "printStackTraceWithJavaIoPrintWriter:withBoolean:withBoolean:withBoolean:", "printStackTrace", "V", 0x1, NULL, NULL },
    { "printStackTraceWithJavaIoPrintStream:withBoolean:withBoolean:withBoolean:", "printStackTrace", "V", 0x1, NULL, NULL },
    { "printStackTraceWithFreemarkerTemplateTemplateException_StackTraceWriter:withBoolean:withBoolean:withBoolean:", "printStackTrace", "V", 0x2, NULL, NULL },
    { "printStandardStackTraceWithJavaIoPrintStream:", "printStandardStackTrace", "V", 0x1, NULL, NULL },
    { "printStandardStackTraceWithJavaIoPrintWriter:", "printStandardStackTrace", "V", 0x1, NULL, NULL },
    { "getMessage", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getMessageWithoutStackTop", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getLineNumber", NULL, "Ljava.lang.Integer;", 0x1, NULL, NULL },
    { "getTemplateName", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getTemplateSourceName", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getColumnNumber", NULL, "Ljava.lang.Integer;", 0x1, NULL, NULL },
    { "getEndLineNumber", NULL, "Ljava.lang.Integer;", 0x1, NULL, NULL },
    { "getEndColumnNumber", NULL, "Ljava.lang.Integer;", 0x1, NULL, NULL },
    { "getBlamedExpressionString", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "writeObjectWithJavaIoObjectOutputStream:", "writeObject", "V", 0x2, "Ljava.io.IOException;Ljava.lang.ClassNotFoundException;", NULL },
    { "readObjectWithJavaIoObjectInputStream:", "readObject", "V", 0x2, "Ljava.io.IOException;Ljava.lang.ClassNotFoundException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "FTL_STACK_TOP_FEW_MAX_LINES_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = FreemarkerTemplateTemplateException_FTL_STACK_TOP_FEW_MAX_LINES },
    { "FTL_INSTRUCTION_STACK_TRACE_TITLE_", NULL, 0x1a, "Ljava.lang.String;", &FreemarkerTemplateTemplateException_FTL_INSTRUCTION_STACK_TRACE_TITLE_, NULL,  },
    { "descriptionBuilder_", NULL, 0x82, "Lfreemarker.core._ErrorDescriptionBuilder;", NULL, NULL,  },
    { "env_", NULL, 0x92, "Lfreemarker.core.Environment;", NULL, NULL,  },
    { "blamedExpression_", NULL, 0x92, "Lfreemarker.core.Expression;", NULL, NULL,  },
    { "ftlInstructionStackSnapshot_", NULL, 0x82, "[Lfreemarker.core.TemplateElement;", NULL, NULL,  },
    { "renderedFtlInstructionStackSnapshot_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "renderedFtlInstructionStackSnapshotTop_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "description__", "description", 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "messageWithoutStackTop_", NULL, 0x82, "Ljava.lang.String;", NULL, NULL,  },
    { "message_", NULL, 0x82, "Ljava.lang.String;", NULL, NULL,  },
    { "blamedExpressionStringCalculated_", NULL, 0x2, "Z", NULL, NULL,  },
    { "blamedExpressionString_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "positionsCalculated_", NULL, 0x2, "Z", NULL, NULL,  },
    { "templateName_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "templateSourceName_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "lineNumber_", NULL, 0x2, "Ljava.lang.Integer;", NULL, NULL,  },
    { "columnNumber_", NULL, 0x2, "Ljava.lang.Integer;", NULL, NULL,  },
    { "endLineNumber_", NULL, 0x2, "Ljava.lang.Integer;", NULL, NULL,  },
    { "endColumnNumber_", NULL, 0x2, "Ljava.lang.Integer;", NULL, NULL,  },
    { "lock_", NULL, 0x82, "Ljava.lang.Object;", NULL, NULL,  },
    { "messageWasAlreadyPrintedForThisTrace_", NULL, 0x82, "Ljava.lang.ThreadLocal;", NULL, NULL,  },
  };
  static const char *inner_classes[] = {"Lfreemarker.template.TemplateException$StackTraceWriter;", "Lfreemarker.template.TemplateException$PrintStreamStackTraceWriter;", "Lfreemarker.template.TemplateException$PrintWriterStackTraceWriter;"};
  static const J2ObjcClassInfo _FreemarkerTemplateTemplateException = { 2, "TemplateException", "freemarker.template", NULL, 0x1, 35, methods, 22, fields, 0, NULL, 3, inner_classes, NULL, NULL };
  return &_FreemarkerTemplateTemplateException;
}

@end


#line 77
void FreemarkerTemplateTemplateException_initWithFreemarkerCoreEnvironment_(FreemarkerTemplateTemplateException *self, FreemarkerCoreEnvironment *env) {
  (void) FreemarkerTemplateTemplateException_initWithNSString_withJavaLangException_withFreemarkerCoreEnvironment_(self, nil, nil, env);
}


#line 77
FreemarkerTemplateTemplateException *new_FreemarkerTemplateTemplateException_initWithFreemarkerCoreEnvironment_(FreemarkerCoreEnvironment *env) {
  FreemarkerTemplateTemplateException *self = [FreemarkerTemplateTemplateException alloc];
  FreemarkerTemplateTemplateException_initWithFreemarkerCoreEnvironment_(self, env);
  return self;
}


#line 87
void FreemarkerTemplateTemplateException_initWithNSString_withFreemarkerCoreEnvironment_(FreemarkerTemplateTemplateException *self, NSString *description_, FreemarkerCoreEnvironment *env) {
  (void) FreemarkerTemplateTemplateException_initWithNSString_withJavaLangException_withFreemarkerCoreEnvironment_(self, description_, nil, env);
}


#line 87
FreemarkerTemplateTemplateException *new_FreemarkerTemplateTemplateException_initWithNSString_withFreemarkerCoreEnvironment_(NSString *description_, FreemarkerCoreEnvironment *env) {
  FreemarkerTemplateTemplateException *self = [FreemarkerTemplateTemplateException alloc];
  FreemarkerTemplateTemplateException_initWithNSString_withFreemarkerCoreEnvironment_(self, description_, env);
  return self;
}


#line 95
void FreemarkerTemplateTemplateException_initWithJavaLangException_withFreemarkerCoreEnvironment_(FreemarkerTemplateTemplateException *self, JavaLangException *cause, FreemarkerCoreEnvironment *env) {
  (void) FreemarkerTemplateTemplateException_initWithNSString_withJavaLangException_withFreemarkerCoreEnvironment_(self, nil, cause, env);
}


#line 95
FreemarkerTemplateTemplateException *new_FreemarkerTemplateTemplateException_initWithJavaLangException_withFreemarkerCoreEnvironment_(JavaLangException *cause, FreemarkerCoreEnvironment *env) {
  FreemarkerTemplateTemplateException *self = [FreemarkerTemplateTemplateException alloc];
  FreemarkerTemplateTemplateException_initWithJavaLangException_withFreemarkerCoreEnvironment_(self, cause, env);
  return self;
}


#line 108
void FreemarkerTemplateTemplateException_initWithJavaLangThrowable_withFreemarkerCoreEnvironment_(FreemarkerTemplateTemplateException *self, JavaLangThrowable *cause, FreemarkerCoreEnvironment *env) {
  (void) FreemarkerTemplateTemplateException_initWithNSString_withJavaLangThrowable_withFreemarkerCoreEnvironment_(self, nil, cause, env);
}


#line 108
FreemarkerTemplateTemplateException *new_FreemarkerTemplateTemplateException_initWithJavaLangThrowable_withFreemarkerCoreEnvironment_(JavaLangThrowable *cause, FreemarkerCoreEnvironment *env) {
  FreemarkerTemplateTemplateException *self = [FreemarkerTemplateTemplateException alloc];
  FreemarkerTemplateTemplateException_initWithJavaLangThrowable_withFreemarkerCoreEnvironment_(self, cause, env);
  return self;
}


#line 116
void FreemarkerTemplateTemplateException_initWithNSString_withJavaLangException_withFreemarkerCoreEnvironment_(FreemarkerTemplateTemplateException *self, NSString *description_, JavaLangException *cause, FreemarkerCoreEnvironment *env) {
  (void) FreemarkerTemplateTemplateException_initWithNSString_withJavaLangThrowable_withFreemarkerCoreEnvironment_withFreemarkerCoreExpression_withFreemarkerCore_ErrorDescriptionBuilder_(self, description_, cause, env, nil, nil);
}


#line 116
FreemarkerTemplateTemplateException *new_FreemarkerTemplateTemplateException_initWithNSString_withJavaLangException_withFreemarkerCoreEnvironment_(NSString *description_, JavaLangException *cause, FreemarkerCoreEnvironment *env) {
  FreemarkerTemplateTemplateException *self = [FreemarkerTemplateTemplateException alloc];
  FreemarkerTemplateTemplateException_initWithNSString_withJavaLangException_withFreemarkerCoreEnvironment_(self, description_, cause, env);
  return self;
}


#line 130
void FreemarkerTemplateTemplateException_initWithNSString_withJavaLangThrowable_withFreemarkerCoreEnvironment_(FreemarkerTemplateTemplateException *self, NSString *description_, JavaLangThrowable *cause, FreemarkerCoreEnvironment *env) {
  (void) FreemarkerTemplateTemplateException_initWithNSString_withJavaLangThrowable_withFreemarkerCoreEnvironment_withFreemarkerCoreExpression_withFreemarkerCore_ErrorDescriptionBuilder_(self, description_, cause, env, nil, nil);
}


#line 130
FreemarkerTemplateTemplateException *new_FreemarkerTemplateTemplateException_initWithNSString_withJavaLangThrowable_withFreemarkerCoreEnvironment_(NSString *description_, JavaLangThrowable *cause, FreemarkerCoreEnvironment *env) {
  FreemarkerTemplateTemplateException *self = [FreemarkerTemplateTemplateException alloc];
  FreemarkerTemplateTemplateException_initWithNSString_withJavaLangThrowable_withFreemarkerCoreEnvironment_(self, description_, cause, env);
  return self;
}


#line 141
void FreemarkerTemplateTemplateException_initWithJavaLangThrowable_withFreemarkerCoreEnvironment_withFreemarkerCoreExpression_withFreemarkerCore_ErrorDescriptionBuilder_(FreemarkerTemplateTemplateException *self, JavaLangThrowable *cause, FreemarkerCoreEnvironment *env, FreemarkerCoreExpression *blamedExpr, FreemarkerCore_ErrorDescriptionBuilder *descriptionBuilder) {
  (void) FreemarkerTemplateTemplateException_initWithNSString_withJavaLangThrowable_withFreemarkerCoreEnvironment_withFreemarkerCoreExpression_withFreemarkerCore_ErrorDescriptionBuilder_(self,
#line 143
  nil, cause, env, blamedExpr, descriptionBuilder);
}


#line 141
FreemarkerTemplateTemplateException *new_FreemarkerTemplateTemplateException_initWithJavaLangThrowable_withFreemarkerCoreEnvironment_withFreemarkerCoreExpression_withFreemarkerCore_ErrorDescriptionBuilder_(JavaLangThrowable *cause, FreemarkerCoreEnvironment *env, FreemarkerCoreExpression *blamedExpr, FreemarkerCore_ErrorDescriptionBuilder *descriptionBuilder) {
  FreemarkerTemplateTemplateException *self = [FreemarkerTemplateTemplateException alloc];
  FreemarkerTemplateTemplateException_initWithJavaLangThrowable_withFreemarkerCoreEnvironment_withFreemarkerCoreExpression_withFreemarkerCore_ErrorDescriptionBuilder_(self, cause, env, blamedExpr, descriptionBuilder);
  return self;
}


#line 146
void FreemarkerTemplateTemplateException_initWithNSString_withJavaLangThrowable_withFreemarkerCoreEnvironment_withFreemarkerCoreExpression_withFreemarkerCore_ErrorDescriptionBuilder_(FreemarkerTemplateTemplateException *self, NSString *renderedDescription, JavaLangThrowable *cause, FreemarkerCoreEnvironment *env, FreemarkerCoreExpression *blamedExpression, FreemarkerCore_ErrorDescriptionBuilder *descriptionBuilder) {
  (void) JavaLangException_initWithJavaLangThrowable_(self,
#line 153
  cause);
  self->lock_ = new_NSObject_init();
  if (env == nil) env = FreemarkerCoreEnvironment_getCurrentEnvironment();
  self->env_ = env;
  
#line 158
  self->blamedExpression_ = blamedExpression;
  
#line 160
  self->descriptionBuilder_ = descriptionBuilder;
  self->description__ = renderedDescription;
  
#line 163
  if (env != nil) self->ftlInstructionStackSnapshot_ = FreemarkerCore_CoreAPI_getInstructionStackSnapshotWithFreemarkerCoreEnvironment_(env);
}


#line 146
FreemarkerTemplateTemplateException *new_FreemarkerTemplateTemplateException_initWithNSString_withJavaLangThrowable_withFreemarkerCoreEnvironment_withFreemarkerCoreExpression_withFreemarkerCore_ErrorDescriptionBuilder_(NSString *renderedDescription, JavaLangThrowable *cause, FreemarkerCoreEnvironment *env, FreemarkerCoreExpression *blamedExpression, FreemarkerCore_ErrorDescriptionBuilder *descriptionBuilder) {
  FreemarkerTemplateTemplateException *self = [FreemarkerTemplateTemplateException alloc];
  FreemarkerTemplateTemplateException_initWithNSString_withJavaLangThrowable_withFreemarkerCoreEnvironment_withFreemarkerCoreExpression_withFreemarkerCore_ErrorDescriptionBuilder_(self, renderedDescription, cause, env, blamedExpression, descriptionBuilder);
  return self;
}


#line 166
void FreemarkerTemplateTemplateException_renderMessages(FreemarkerTemplateTemplateException *self) {
  NSString *description_ = FreemarkerTemplateTemplateException_getDescription(self);
  
#line 169
  if (description_ != nil && ((jint) [description_ length]) != 0) {
    self->messageWithoutStackTop_ = description_;
  }
  else
#line 171
  if ([self getCause] != nil) {
    self->messageWithoutStackTop_ = JreStrcat("$$$$", @"No error description was specified for this error; low-level message: ",
#line 173
    [[((JavaLangThrowable *) nil_chk([self getCause])) getClass] getName], @": ", [((JavaLangThrowable *) nil_chk([self getCause])) getMessage]);
  }
  else {
    
#line 175
    self->messageWithoutStackTop_ = @"[No error description was available.]";
  }
  
#line 178
  NSString *stackTopFew = FreemarkerTemplateTemplateException_getFTLInstructionStackTopFew(self);
  if (stackTopFew != nil) {
    self->message_ = JreStrcat("$$$C$C$$", self->messageWithoutStackTop_, @"\n\n", FreemarkerCore_CoreAPI_get_ERROR_MESSAGE_HR_(), 0x000a, FreemarkerTemplateTemplateException_FTL_INSTRUCTION_STACK_TRACE_TITLE_, 0x000a,
#line 183
    stackTopFew, FreemarkerCore_CoreAPI_get_ERROR_MESSAGE_HR_());
    
#line 185
    self->messageWithoutStackTop_ = [self->message_ substring:0 endIndex:((jint) [((NSString *) nil_chk(self->messageWithoutStackTop_)) length])];
  }
  else {
    
#line 187
    self->message_ = self->messageWithoutStackTop_;
  }
}


#line 191
void FreemarkerTemplateTemplateException_calculatePosition(FreemarkerTemplateTemplateException *self) {
  @synchronized(self->lock_) {
    if (!self->positionsCalculated_) {
      
#line 195
      FreemarkerCoreTemplateObject *templateObject = self->blamedExpression_ != nil ? self->blamedExpression_ :
#line 197
      (
#line 198
      self->ftlInstructionStackSnapshot_ != nil && self->ftlInstructionStackSnapshot_->size_ != 0 ? IOSObjectArray_Get(self->ftlInstructionStackSnapshot_,
#line 199
      0) : nil);
      
#line 201
      if (templateObject != nil && [templateObject getBeginLine] > 0) {
        FreemarkerTemplateTemplate *template_ = [templateObject getTemplate];
        self->templateName_ = template_ != nil ? [template_ getName] : nil;
        self->templateSourceName_ = template_ != nil ? [template_ getSourceName] : nil;
        self->lineNumber_ = new_JavaLangInteger_initWithInt_([templateObject getBeginLine]);
        self->columnNumber_ = new_JavaLangInteger_initWithInt_([templateObject getBeginColumn]);
        self->endLineNumber_ = new_JavaLangInteger_initWithInt_([templateObject getEndLine]);
        self->endColumnNumber_ = new_JavaLangInteger_initWithInt_([templateObject getEndColumn]);
      }
      self->positionsCalculated_ = YES;
      FreemarkerTemplateTemplateException_deleteFTLInstructionStackSnapshotIfNotNeeded(self);
    }
  }
}


#line 249
NSString *FreemarkerTemplateTemplateException_getFTLInstructionStackTopFew(FreemarkerTemplateTemplateException *self) {
  @synchronized(self->lock_) {
    if (self->ftlInstructionStackSnapshot_ != nil || self->renderedFtlInstructionStackSnapshotTop_ != nil) {
      if (self->renderedFtlInstructionStackSnapshotTop_ == nil) {
        jint stackSize = ((IOSObjectArray *) nil_chk(self->ftlInstructionStackSnapshot_))->size_;
        NSString *s;
        if (stackSize == 0) {
          s = @"";
        }
        else {
          
#line 258
          JavaIoStringWriter *sw = new_JavaIoStringWriter_init();
          FreemarkerCore_CoreAPI_outputInstructionStackWithFreemarkerCoreTemplateElementArray_withBoolean_withJavaIoWriter_(self->ftlInstructionStackSnapshot_, YES, sw);
          s = [sw description];
        }
        if (self->renderedFtlInstructionStackSnapshotTop_ == nil) {
          self->renderedFtlInstructionStackSnapshotTop_ = s;
          FreemarkerTemplateTemplateException_deleteFTLInstructionStackSnapshotIfNotNeeded(self);
        }
      }
      return ((jint) [((NSString *) nil_chk(self->renderedFtlInstructionStackSnapshotTop_)) length]) != 0 ? self->renderedFtlInstructionStackSnapshotTop_ :
#line 268
      nil;
    }
    else {
      
#line 270
      return nil;
    }
  }
}


#line 275
void FreemarkerTemplateTemplateException_deleteFTLInstructionStackSnapshotIfNotNeeded(FreemarkerTemplateTemplateException *self) {
  if (self->renderedFtlInstructionStackSnapshot_ != nil && self->renderedFtlInstructionStackSnapshotTop_ != nil &&
#line 277
  (self->positionsCalculated_ || self->blamedExpression_ != nil)) {
    self->ftlInstructionStackSnapshot_ = nil;
  }
}

NSString *FreemarkerTemplateTemplateException_getDescription(FreemarkerTemplateTemplateException *self) {
  @synchronized(self->lock_) {
    if (self->description__ == nil && self->descriptionBuilder_ != nil) {
      self->description__ = [self->descriptionBuilder_ toStringWithFreemarkerCoreTemplateElement:FreemarkerTemplateTemplateException_getFailingInstruction(self) withBoolean:
#line 288
      self->env_ != nil ? [self->env_ getShowErrorTips] : YES];
      self->descriptionBuilder_ = nil;
    }
    return self->description__;
  }
}

FreemarkerCoreTemplateElement *FreemarkerTemplateTemplateException_getFailingInstruction(FreemarkerTemplateTemplateException *self) {
  if (self->ftlInstructionStackSnapshot_ != nil && self->ftlInstructionStackSnapshot_->size_ > 0) {
    return IOSObjectArray_Get(self->ftlInstructionStackSnapshot_, 0);
  }
  else {
    
#line 299
    return nil;
  }
}


#line 351
void FreemarkerTemplateTemplateException_printStackTraceWithFreemarkerTemplateTemplateException_StackTraceWriter_withBoolean_withBoolean_withBoolean_(FreemarkerTemplateTemplateException *self, id<FreemarkerTemplateTemplateException_StackTraceWriter> outArg, jboolean heading, jboolean ftlStackTrace, jboolean javaStackTrace) {
  @synchronized(outArg) {
    if (heading) {
      [((id<FreemarkerTemplateTemplateException_StackTraceWriter>) nil_chk(outArg)) printlnWithId:@"FreeMarker template error:"];
    }
    
#line 357
    if (ftlStackTrace) {
      NSString *stackTrace = [self getFTLInstructionStack];
      if (stackTrace != nil) {
        [((id<FreemarkerTemplateTemplateException_StackTraceWriter>) nil_chk(outArg)) printlnWithId:[self getMessageWithoutStackTop]];
        [outArg println];
        [outArg printlnWithId:FreemarkerCore_CoreAPI_get_ERROR_MESSAGE_HR_()];
        [outArg printlnWithId:FreemarkerTemplateTemplateException_FTL_INSTRUCTION_STACK_TRACE_TITLE_];
        [outArg printWithId:stackTrace];
        [outArg printlnWithId:FreemarkerCore_CoreAPI_get_ERROR_MESSAGE_HR_()];
      }
      else {
        
#line 367
        ftlStackTrace = NO;
        javaStackTrace = YES;
      }
    }
    
#line 372
    if (javaStackTrace) {
      if (ftlStackTrace) {
        [((id<FreemarkerTemplateTemplateException_StackTraceWriter>) nil_chk(outArg)) println];
        [outArg printlnWithId:@"Java stack trace (for programmers):"];
        [outArg printlnWithId:FreemarkerCore_CoreAPI_get_ERROR_MESSAGE_HR_()];
        @synchronized(self->lock_) {
          if (self->messageWasAlreadyPrintedForThisTrace_ == nil) {
            self->messageWasAlreadyPrintedForThisTrace_ = new_JavaLangThreadLocal_init();
          }
          [((JavaLangThreadLocal *) nil_chk(self->messageWasAlreadyPrintedForThisTrace_)) setWithId:JavaLangBoolean_get_TRUE__()];
        }
        
#line 384
        @try {
          [outArg printStandardStackTraceWithJavaLangThrowable:self];
        }
        @finally {
          
#line 387
          [self->messageWasAlreadyPrintedForThisTrace_ setWithId:JavaLangBoolean_get_FALSE__()];
        }
      }
      else {
        
#line 390
        [((id<FreemarkerTemplateTemplateException_StackTraceWriter>) nil_chk(outArg)) printStandardStackTraceWithJavaLangThrowable:self];
      }
      
#line 393
      if ([self getCause] != nil) {
        
#line 395
        JavaLangThrowable *causeCause = [((JavaLangThrowable *) nil_chk([self getCause])) getCause];
        if (causeCause == nil) {
          @try {
            
#line 399
            JavaLangReflectMethod *m = [[((JavaLangThrowable *) nil_chk([self getCause])) getClass] getMethod:@"getRootCause" parameterTypes:FreemarkerTemplateUtilityCollectionUtils_get_EMPTY_CLASS_ARRAY_()];
            JavaLangThrowable *rootCause = (JavaLangThrowable *) check_class_cast([((JavaLangReflectMethod *) nil_chk(m)) invokeWithId:[self getCause] withNSObjectArray:FreemarkerTemplateUtilityCollectionUtils_get_EMPTY_OBJECT_ARRAY_()], [JavaLangThrowable class]);
            if (rootCause != nil) {
              [((id<FreemarkerTemplateTemplateException_StackTraceWriter>) nil_chk(outArg)) printlnWithId:@"ServletException root cause: "];
              [outArg printStandardStackTraceWithJavaLangThrowable:rootCause];
            }
          }
          @catch (
#line 405
          JavaLangThrowable *exc) {
            ;
          }
        }
      }
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerTemplateTemplateException)


#line 583
@implementation FreemarkerTemplateTemplateException_StackTraceWriter

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "printWithId:", "print", "V", 0x401, NULL, NULL },
    { "printlnWithId:", "println", "V", 0x401, NULL, NULL },
    { "println", NULL, "V", 0x401, NULL, NULL },
    { "printStandardStackTraceWithJavaLangThrowable:", "printStandardStackTrace", "V", 0x401, NULL, NULL },
  };
  static const J2ObjcClassInfo _FreemarkerTemplateTemplateException_StackTraceWriter = { 2, "StackTraceWriter", "freemarker.template", "TemplateException", 0x60a, 4, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerTemplateTemplateException_StackTraceWriter;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(FreemarkerTemplateTemplateException_StackTraceWriter)


#line 590
@implementation FreemarkerTemplateTemplateException_PrintStreamStackTraceWriter


#line 594
- (instancetype)initWithJavaIoPrintStream:(JavaIoPrintStream *)outArg {
  FreemarkerTemplateTemplateException_PrintStreamStackTraceWriter_initWithJavaIoPrintStream_(self, outArg);
  return self;
}


#line 598
- (void)printWithId:(id)obj {
  [((JavaIoPrintStream *) nil_chk(out_)) printWithId:obj];
}

- (void)printlnWithId:(id)obj {
  [((JavaIoPrintStream *) nil_chk(out_)) printlnWithId:obj];
}

- (void)println {
  [((JavaIoPrintStream *) nil_chk(out_)) println];
}

- (void)printStandardStackTraceWithJavaLangThrowable:(JavaLangThrowable *)exception {
  if ([exception isKindOfClass:[FreemarkerTemplateTemplateException class]]) {
    [((FreemarkerTemplateTemplateException *) nil_chk(((FreemarkerTemplateTemplateException *) check_class_cast(exception, [FreemarkerTemplateTemplateException class])))) printStandardStackTraceWithJavaIoPrintStream:out_];
  }
  else {
    
#line 614
    [((JavaLangThrowable *) nil_chk(exception)) printStackTraceWithJavaIoPrintStream:out_];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaIoPrintStream:", "PrintStreamStackTraceWriter", NULL, 0x0, NULL, NULL },
    { "printWithId:", "print", "V", 0x1, NULL, NULL },
    { "printlnWithId:", "println", "V", 0x1, NULL, NULL },
    { "println", NULL, "V", 0x1, NULL, NULL },
    { "printStandardStackTraceWithJavaLangThrowable:", "printStandardStackTrace", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "out_", NULL, 0x12, "Ljava.io.PrintStream;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerTemplateTemplateException_PrintStreamStackTraceWriter = { 2, "PrintStreamStackTraceWriter", "freemarker.template", "TemplateException", 0xa, 5, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerTemplateTemplateException_PrintStreamStackTraceWriter;
}

@end


#line 594
void FreemarkerTemplateTemplateException_PrintStreamStackTraceWriter_initWithJavaIoPrintStream_(FreemarkerTemplateTemplateException_PrintStreamStackTraceWriter *self, JavaIoPrintStream *outArg) {
  (void) NSObject_init(self);
  
#line 595
  self->out_ = outArg;
}


#line 594
FreemarkerTemplateTemplateException_PrintStreamStackTraceWriter *new_FreemarkerTemplateTemplateException_PrintStreamStackTraceWriter_initWithJavaIoPrintStream_(JavaIoPrintStream *outArg) {
  FreemarkerTemplateTemplateException_PrintStreamStackTraceWriter *self = [FreemarkerTemplateTemplateException_PrintStreamStackTraceWriter alloc];
  FreemarkerTemplateTemplateException_PrintStreamStackTraceWriter_initWithJavaIoPrintStream_(self, outArg);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerTemplateTemplateException_PrintStreamStackTraceWriter)


#line 620
@implementation FreemarkerTemplateTemplateException_PrintWriterStackTraceWriter


#line 624
- (instancetype)initWithJavaIoPrintWriter:(JavaIoPrintWriter *)outArg {
  FreemarkerTemplateTemplateException_PrintWriterStackTraceWriter_initWithJavaIoPrintWriter_(self, outArg);
  return self;
}


#line 628
- (void)printWithId:(id)obj {
  [((JavaIoPrintWriter *) nil_chk(out_)) printWithId:obj];
}

- (void)printlnWithId:(id)obj {
  [((JavaIoPrintWriter *) nil_chk(out_)) printlnWithId:obj];
}

- (void)println {
  [((JavaIoPrintWriter *) nil_chk(out_)) println];
}

- (void)printStandardStackTraceWithJavaLangThrowable:(JavaLangThrowable *)exception {
  if ([exception isKindOfClass:[FreemarkerTemplateTemplateException class]]) {
    [((FreemarkerTemplateTemplateException *) nil_chk(((FreemarkerTemplateTemplateException *) check_class_cast(exception, [FreemarkerTemplateTemplateException class])))) printStandardStackTraceWithJavaIoPrintWriter:out_];
  }
  else {
    
#line 644
    [((JavaLangThrowable *) nil_chk(exception)) printStackTraceWithJavaIoPrintWriter:out_];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaIoPrintWriter:", "PrintWriterStackTraceWriter", NULL, 0x0, NULL, NULL },
    { "printWithId:", "print", "V", 0x1, NULL, NULL },
    { "printlnWithId:", "println", "V", 0x1, NULL, NULL },
    { "println", NULL, "V", 0x1, NULL, NULL },
    { "printStandardStackTraceWithJavaLangThrowable:", "printStandardStackTrace", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "out_", NULL, 0x12, "Ljava.io.PrintWriter;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerTemplateTemplateException_PrintWriterStackTraceWriter = { 2, "PrintWriterStackTraceWriter", "freemarker.template", "TemplateException", 0xa, 5, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerTemplateTemplateException_PrintWriterStackTraceWriter;
}

@end


#line 624
void FreemarkerTemplateTemplateException_PrintWriterStackTraceWriter_initWithJavaIoPrintWriter_(FreemarkerTemplateTemplateException_PrintWriterStackTraceWriter *self, JavaIoPrintWriter *outArg) {
  (void) NSObject_init(self);
  
#line 625
  self->out_ = outArg;
}


#line 624
FreemarkerTemplateTemplateException_PrintWriterStackTraceWriter *new_FreemarkerTemplateTemplateException_PrintWriterStackTraceWriter_initWithJavaIoPrintWriter_(JavaIoPrintWriter *outArg) {
  FreemarkerTemplateTemplateException_PrintWriterStackTraceWriter *self = [FreemarkerTemplateTemplateException_PrintWriterStackTraceWriter alloc];
  FreemarkerTemplateTemplateException_PrintWriterStackTraceWriter_initWithJavaIoPrintWriter_(self, outArg);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerTemplateTemplateException_PrintWriterStackTraceWriter)
