//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/cache/MruCacheStorage.java
//

#ifndef _FreemarkerCacheMruCacheStorage_H_
#define _FreemarkerCacheMruCacheStorage_H_

#include "CacheStorageWithGetSize.h"
#include "J2ObjC_header.h"

/**
 @brief A cache storage that implements a two-level Most Recently Used cache.
 In the first level, items are strongly referenced up to the specified maximum. When the maximum is exceeded, the least recently used item is moved into the second level cache, where they are softly referenced, up to another specified maximum. When the second level maximum is also exceeded, the least recently used item is discarded altogether. This cache storage is a generalization of both StrongCacheStorage and SoftCacheStorage - the effect of both of them can be achieved by setting one maximum to zero and the other to the largest positive integer. On the other hand, if you wish to use this storage in a strong-only mode, or in a soft-only mode, you might consider using StrongCacheStorage or SoftCacheStorage instead, as they can be used by TemplateCache concurrently without any synchronization on a 5.0 or later JRE. <p>This class is <em>NOT</em> thread-safe. If it's accessed from multiple threads concurrently, proper synchronization must be provided by the callers. Note that TemplateCache , the natural user of this class provides the necessary synchronizations when it uses the class. Also you might consider whether you need this sort of a mixed storage at all in your solution, as in most cases SoftCacheStorage can also be sufficient. SoftCacheStorage will use Java soft references, and they already use access timestamps internally to bias the garbage collector against clearing recently used references, so you can get reasonably good (and memory-sensitive) most-recently-used caching through SoftCacheStorage as well.
 */
@interface FreemarkerCacheMruCacheStorage : NSObject < FreemarkerCacheCacheStorageWithGetSize >

#pragma mark Public

/**
 @brief Creates a new MRU cache storage with specified maximum cache sizes.
 Each cache size can vary between 0 and Integer#MAX_VALUE .
 @param strongSizeLimit the maximum number of strongly referenced templates; when exceeded, the entry used the least recently will be moved into the soft cache.
 @param softSizeLimit the maximum number of softly referenced templates; when exceeded, the entry used the least recently will be discarded.
 */
- (instancetype)initWithInt:(jint)strongSizeLimit
                    withInt:(jint)softSizeLimit;

- (void)clear;

- (id)getWithId:(id)key;

/**
 @brief Returns a close approximation of the current number of cache entries.
 @since 2.3.21
 */
- (jint)getSize;

/**
 @brief Returns a close approximation of the <em>current</em> number of soft cache entries.
 @since 2.3.21
 */
- (jint)getSoftSize;

/**
 @brief Returns the configured upper limit of the number of soft cache entries.
 @since 2.3.21
 */
- (jint)getSoftSizeLimit;

/**
 @brief Returns the <em>current</em> number of strong cache entries.
 @since 2.3.21
 */
- (jint)getStrongSize;

/**
 @brief Returns the configured upper limit of the number of strong cache entries.
 @since 2.3.21
 */
- (jint)getStrongSizeLimit;

- (void)putWithId:(id)key
           withId:(id)value;

- (void)removeWithId:(id)key;

@end

J2OBJC_EMPTY_STATIC_INIT(FreemarkerCacheMruCacheStorage)

FOUNDATION_EXPORT void FreemarkerCacheMruCacheStorage_initWithInt_withInt_(FreemarkerCacheMruCacheStorage *self, jint strongSizeLimit, jint softSizeLimit);

FOUNDATION_EXPORT FreemarkerCacheMruCacheStorage *new_FreemarkerCacheMruCacheStorage_initWithInt_withInt_(jint strongSizeLimit, jint softSizeLimit) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerCacheMruCacheStorage)

#endif // _FreemarkerCacheMruCacheStorage_H_
