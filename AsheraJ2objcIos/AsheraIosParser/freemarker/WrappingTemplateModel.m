//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/template/WrappingTemplateModel.java
//


#include "DefaultObjectWrapper.h"
#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "ObjectWrapper.h"
#include "TemplateModel.h"
#include "TemplateModelException.h"
#include "WrappingTemplateModel.h"

#line 0 "/Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/template/WrappingTemplateModel.java"

@interface FreemarkerTemplateWrappingTemplateModel () {
 @public
  id<FreemarkerTemplateObjectWrapper> objectWrapper_;
}

@end

J2OBJC_FIELD_SETTER(FreemarkerTemplateWrappingTemplateModel, objectWrapper_, id<FreemarkerTemplateObjectWrapper>)

static id<FreemarkerTemplateObjectWrapper> FreemarkerTemplateWrappingTemplateModel_defaultObjectWrapper_;
J2OBJC_STATIC_FIELD_GETTER(FreemarkerTemplateWrappingTemplateModel, defaultObjectWrapper_, id<FreemarkerTemplateObjectWrapper>)
J2OBJC_STATIC_FIELD_SETTER(FreemarkerTemplateWrappingTemplateModel, defaultObjectWrapper_, id<FreemarkerTemplateObjectWrapper>)

J2OBJC_INITIALIZED_DEFN(FreemarkerTemplateWrappingTemplateModel)


#line 23
@implementation FreemarkerTemplateWrappingTemplateModel


#line 42
+ (void)setDefaultObjectWrapperWithFreemarkerTemplateObjectWrapper:(id<FreemarkerTemplateObjectWrapper>)objectWrapper {
  FreemarkerTemplateWrappingTemplateModel_setDefaultObjectWrapperWithFreemarkerTemplateObjectWrapper_(objectWrapper);
}


#line 56
+ (id<FreemarkerTemplateObjectWrapper>)getDefaultObjectWrapper {
  return FreemarkerTemplateWrappingTemplateModel_getDefaultObjectWrapper();
}


#line 66
- (instancetype)init {
  FreemarkerTemplateWrappingTemplateModel_init(self);
  return self;
}


#line 77
- (instancetype)initWithFreemarkerTemplateObjectWrapper:(id<FreemarkerTemplateObjectWrapper>)objectWrapper {
  FreemarkerTemplateWrappingTemplateModel_initWithFreemarkerTemplateObjectWrapper_(self, objectWrapper);
  return self;
}


#line 88
- (id<FreemarkerTemplateObjectWrapper>)getObjectWrapper {
  return objectWrapper_;
}

- (void)setObjectWrapperWithFreemarkerTemplateObjectWrapper:(id<FreemarkerTemplateObjectWrapper>)objectWrapper {
  self->objectWrapper_ = objectWrapper;
}


#line 104
- (id<FreemarkerTemplateTemplateModel>)wrapWithId:(id)obj {
  return [((id<FreemarkerTemplateObjectWrapper>) nil_chk(objectWrapper_)) wrapWithId:obj];
}

+ (void)initialize {
  if (self == [FreemarkerTemplateWrappingTemplateModel class]) {
    FreemarkerTemplateWrappingTemplateModel_defaultObjectWrapper_ = FreemarkerTemplateDefaultObjectWrapper_get_instance_();
    J2OBJC_SET_INITIALIZED(FreemarkerTemplateWrappingTemplateModel)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "setDefaultObjectWrapperWithFreemarkerTemplateObjectWrapper:", "setDefaultObjectWrapper", "V", 0x9, NULL, NULL },
    { "getDefaultObjectWrapper", NULL, "Lfreemarker.template.ObjectWrapper;", 0x9, NULL, NULL },
    { "init", "WrappingTemplateModel", NULL, 0x4, NULL, NULL },
    { "initWithFreemarkerTemplateObjectWrapper:", "WrappingTemplateModel", NULL, 0x4, NULL, NULL },
    { "getObjectWrapper", NULL, "Lfreemarker.template.ObjectWrapper;", 0x1, NULL, NULL },
    { "setObjectWrapperWithFreemarkerTemplateObjectWrapper:", "setObjectWrapper", "V", 0x1, NULL, NULL },
    { "wrapWithId:", "wrap", "Lfreemarker.template.TemplateModel;", 0x14, "Lfreemarker.template.TemplateModelException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "defaultObjectWrapper_", NULL, 0xa, "Lfreemarker.template.ObjectWrapper;", &FreemarkerTemplateWrappingTemplateModel_defaultObjectWrapper_, NULL,  },
    { "objectWrapper_", NULL, 0x2, "Lfreemarker.template.ObjectWrapper;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerTemplateWrappingTemplateModel = { 2, "WrappingTemplateModel", "freemarker.template", NULL, 0x401, 7, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerTemplateWrappingTemplateModel;
}

@end


#line 42
void FreemarkerTemplateWrappingTemplateModel_setDefaultObjectWrapperWithFreemarkerTemplateObjectWrapper_(id<FreemarkerTemplateObjectWrapper> objectWrapper) {
  FreemarkerTemplateWrappingTemplateModel_initialize();
  
#line 43
  FreemarkerTemplateWrappingTemplateModel_defaultObjectWrapper_ = objectWrapper;
}


#line 56
id<FreemarkerTemplateObjectWrapper> FreemarkerTemplateWrappingTemplateModel_getDefaultObjectWrapper() {
  FreemarkerTemplateWrappingTemplateModel_initialize();
  
#line 57
  return FreemarkerTemplateWrappingTemplateModel_defaultObjectWrapper_;
}


#line 66
void FreemarkerTemplateWrappingTemplateModel_init(FreemarkerTemplateWrappingTemplateModel *self) {
  (void) FreemarkerTemplateWrappingTemplateModel_initWithFreemarkerTemplateObjectWrapper_(self, FreemarkerTemplateWrappingTemplateModel_defaultObjectWrapper_);
}


#line 77
void FreemarkerTemplateWrappingTemplateModel_initWithFreemarkerTemplateObjectWrapper_(FreemarkerTemplateWrappingTemplateModel *self, id<FreemarkerTemplateObjectWrapper> objectWrapper) {
  (void) NSObject_init(self);
  
#line 78
  self->objectWrapper_ =
#line 79
  objectWrapper != nil ? objectWrapper : FreemarkerTemplateWrappingTemplateModel_defaultObjectWrapper_;
  if (self->objectWrapper_ == nil) {
    self->objectWrapper_ = FreemarkerTemplateWrappingTemplateModel_defaultObjectWrapper_ = new_FreemarkerTemplateDefaultObjectWrapper_init();
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerTemplateWrappingTemplateModel)
