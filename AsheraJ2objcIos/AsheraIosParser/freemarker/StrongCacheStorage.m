//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/cache/StrongCacheStorage.java
//


#include "J2ObjC_source.h"
#include "StrongCacheStorage.h"
#include "_ConcurrentMapFactory.h"
#include "java/util/Map.h"

#line 0 "/Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/cache/StrongCacheStorage.java"

@interface FreemarkerCacheStrongCacheStorage () {
 @public
  id<JavaUtilMap> map_;
}

@end

J2OBJC_FIELD_SETTER(FreemarkerCacheStrongCacheStorage, map_, id<JavaUtilMap>)


#line 33
@implementation FreemarkerCacheStrongCacheStorage


#line 40
- (jboolean)isConcurrent {
  return FreemarkerCore_ConcurrentMapFactory_isConcurrentWithJavaUtilMap_(map_);
}

- (id)getWithId:(id)key {
  return [((id<JavaUtilMap>) nil_chk(map_)) getWithId:key];
}

- (void)putWithId:(id)key
           withId:(id)value {
  (void) [((id<JavaUtilMap>) nil_chk(map_)) putWithId:key withId:value];
}


#line 52
- (void)removeWithId:(id)key {
  (void) [((id<JavaUtilMap>) nil_chk(map_)) removeWithId:key];
}


#line 61
- (jint)getSize {
  return [((id<JavaUtilMap>) nil_chk(map_)) size];
}

- (void)clear {
  [((id<JavaUtilMap>) nil_chk(map_)) clear];
}

- (instancetype)init {
  FreemarkerCacheStrongCacheStorage_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "isConcurrent", NULL, "Z", 0x1, NULL, NULL },
    { "getWithId:", "get", "Ljava.lang.Object;", 0x1, NULL, NULL },
    { "putWithId:withId:", "put", "V", 0x1, NULL, NULL },
    { "removeWithId:", "remove", "V", 0x1, NULL, NULL },
    { "getSize", NULL, "I", 0x1, NULL, NULL },
    { "clear", NULL, "V", 0x1, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "map_", NULL, 0x12, "Ljava.util.Map;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerCacheStrongCacheStorage = { 2, "StrongCacheStorage", "freemarker.cache", NULL, 0x1, 7, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerCacheStrongCacheStorage;
}

@end

void FreemarkerCacheStrongCacheStorage_init(FreemarkerCacheStrongCacheStorage *self) {
  (void) NSObject_init(self);
  self->map_ = FreemarkerCore_ConcurrentMapFactory_newMaybeConcurrentHashMap();
}

FreemarkerCacheStrongCacheStorage *new_FreemarkerCacheStrongCacheStorage_init() {
  FreemarkerCacheStrongCacheStorage *self = [FreemarkerCacheStrongCacheStorage alloc];
  FreemarkerCacheStrongCacheStorage_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCacheStrongCacheStorage)
