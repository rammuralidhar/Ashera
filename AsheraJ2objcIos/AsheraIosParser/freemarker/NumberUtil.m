//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/template/utility/NumberUtil.java
//


#include "ClassUtil.h"
#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "NumberUtil.h"
#include "UnsupportedNumberClassException.h"
#include "java/lang/ArithmeticException.h"
#include "java/lang/Byte.h"
#include "java/lang/Double.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/Short.h"
#include "java/math/BigDecimal.h"
#include "java/math/BigInteger.h"

#line 0 "/Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/template/utility/NumberUtil.java"

@interface FreemarkerTemplateUtilityNumberUtil ()

- (instancetype)init;

+ (jboolean)isNonFPNumberOfSupportedClassWithNSNumber:(NSNumber *)num;

+ (JavaLangArithmeticException *)newLossyConverionExceptionWithNSNumber:(NSNumber *)fromValue
                                                           withIOSClass:(IOSClass *)toType OBJC_METHOD_FAMILY_NONE;

@end

static JavaMathBigDecimal *FreemarkerTemplateUtilityNumberUtil_BIG_DECIMAL_INT_MIN_;
J2OBJC_STATIC_FIELD_GETTER(FreemarkerTemplateUtilityNumberUtil, BIG_DECIMAL_INT_MIN_, JavaMathBigDecimal *)

static JavaMathBigDecimal *FreemarkerTemplateUtilityNumberUtil_BIG_DECIMAL_INT_MAX_;
J2OBJC_STATIC_FIELD_GETTER(FreemarkerTemplateUtilityNumberUtil, BIG_DECIMAL_INT_MAX_, JavaMathBigDecimal *)

static JavaMathBigInteger *FreemarkerTemplateUtilityNumberUtil_BIG_INTEGER_INT_MIN_;
J2OBJC_STATIC_FIELD_GETTER(FreemarkerTemplateUtilityNumberUtil, BIG_INTEGER_INT_MIN_, JavaMathBigInteger *)

static JavaMathBigInteger *FreemarkerTemplateUtilityNumberUtil_BIG_INTEGER_INT_MAX_;
J2OBJC_STATIC_FIELD_GETTER(FreemarkerTemplateUtilityNumberUtil, BIG_INTEGER_INT_MAX_, JavaMathBigInteger *)

__attribute__((unused)) static void FreemarkerTemplateUtilityNumberUtil_init(FreemarkerTemplateUtilityNumberUtil *self);

__attribute__((unused)) static FreemarkerTemplateUtilityNumberUtil *new_FreemarkerTemplateUtilityNumberUtil_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static jboolean FreemarkerTemplateUtilityNumberUtil_isNonFPNumberOfSupportedClassWithNSNumber_(NSNumber *num);

__attribute__((unused)) static JavaLangArithmeticException *FreemarkerTemplateUtilityNumberUtil_newLossyConverionExceptionWithNSNumber_withIOSClass_(NSNumber *fromValue, IOSClass *toType);

J2OBJC_INITIALIZED_DEFN(FreemarkerTemplateUtilityNumberUtil)


#line 27
@implementation FreemarkerTemplateUtilityNumberUtil


#line 34
- (instancetype)init {
  FreemarkerTemplateUtilityNumberUtil_init(self);
  return self;
}


#line 36
+ (jboolean)isInfiniteWithNSNumber:(NSNumber *)num {
  return FreemarkerTemplateUtilityNumberUtil_isInfiniteWithNSNumber_(num);
}


#line 48
+ (jboolean)isNaNWithNSNumber:(NSNumber *)num {
  return FreemarkerTemplateUtilityNumberUtil_isNaNWithNSNumber_(num);
}


#line 64
+ (jint)getSignumWithNSNumber:(NSNumber *)num {
  return FreemarkerTemplateUtilityNumberUtil_getSignumWithNSNumber_(num);
}


#line 106
+ (jboolean)isIntegerBigDecimalWithJavaMathBigDecimal:(JavaMathBigDecimal *)bd {
  return FreemarkerTemplateUtilityNumberUtil_isIntegerBigDecimalWithJavaMathBigDecimal_(bd);
}


#line 114
+ (jboolean)isNonFPNumberOfSupportedClassWithNSNumber:(NSNumber *)num {
  return FreemarkerTemplateUtilityNumberUtil_isNonFPNumberOfSupportedClassWithNSNumber_(num);
}


#line 127
+ (jint)toIntExactWithNSNumber:(NSNumber *)num {
  return FreemarkerTemplateUtilityNumberUtil_toIntExactWithNSNumber_(num);
}


#line 162
+ (JavaLangArithmeticException *)newLossyConverionExceptionWithNSNumber:(NSNumber *)fromValue
                                                           withIOSClass:(IOSClass *)toType {
  return FreemarkerTemplateUtilityNumberUtil_newLossyConverionExceptionWithNSNumber_withIOSClass_(fromValue, toType);
}

+ (void)initialize {
  if (self == [FreemarkerTemplateUtilityNumberUtil class]) {
    FreemarkerTemplateUtilityNumberUtil_BIG_DECIMAL_INT_MIN_ = JavaMathBigDecimal_valueOfWithLong_(
#line 29
    JavaLangInteger_MIN_VALUE);
    FreemarkerTemplateUtilityNumberUtil_BIG_DECIMAL_INT_MAX_ = JavaMathBigDecimal_valueOfWithLong_(
#line 30
    JavaLangInteger_MAX_VALUE);
    FreemarkerTemplateUtilityNumberUtil_BIG_INTEGER_INT_MIN_ =
#line 31
    [((JavaMathBigDecimal *) nil_chk(FreemarkerTemplateUtilityNumberUtil_BIG_DECIMAL_INT_MIN_)) toBigInteger];
    FreemarkerTemplateUtilityNumberUtil_BIG_INTEGER_INT_MAX_ =
#line 32
    [((JavaMathBigDecimal *) nil_chk(FreemarkerTemplateUtilityNumberUtil_BIG_DECIMAL_INT_MAX_)) toBigInteger];
    J2OBJC_SET_INITIALIZED(FreemarkerTemplateUtilityNumberUtil)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "NumberUtil", NULL, 0x2, NULL, NULL },
    { "isInfiniteWithNSNumber:", "isInfinite", "Z", 0x9, NULL, NULL },
    { "isNaNWithNSNumber:", "isNaN", "Z", 0x9, NULL, NULL },
    { "getSignumWithNSNumber:", "getSignum", "I", 0x9, "Ljava.lang.ArithmeticException;", NULL },
    { "isIntegerBigDecimalWithJavaMathBigDecimal:", "isIntegerBigDecimal", "Z", 0x9, NULL, NULL },
    { "isNonFPNumberOfSupportedClassWithNSNumber:", "isNonFPNumberOfSupportedClass", "Z", 0xa, NULL, NULL },
    { "toIntExactWithNSNumber:", "toIntExact", "I", 0x9, NULL, NULL },
    { "newLossyConverionExceptionWithNSNumber:withIOSClass:", "newLossyConverionException", "Ljava.lang.ArithmeticException;", 0xa, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "BIG_DECIMAL_INT_MIN_", NULL, 0x1a, "Ljava.math.BigDecimal;", &FreemarkerTemplateUtilityNumberUtil_BIG_DECIMAL_INT_MIN_, NULL,  },
    { "BIG_DECIMAL_INT_MAX_", NULL, 0x1a, "Ljava.math.BigDecimal;", &FreemarkerTemplateUtilityNumberUtil_BIG_DECIMAL_INT_MAX_, NULL,  },
    { "BIG_INTEGER_INT_MIN_", NULL, 0x1a, "Ljava.math.BigInteger;", &FreemarkerTemplateUtilityNumberUtil_BIG_INTEGER_INT_MIN_, NULL,  },
    { "BIG_INTEGER_INT_MAX_", NULL, 0x1a, "Ljava.math.BigInteger;", &FreemarkerTemplateUtilityNumberUtil_BIG_INTEGER_INT_MAX_, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerTemplateUtilityNumberUtil = { 2, "NumberUtil", "freemarker.template.utility", NULL, 0x1, 8, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerTemplateUtilityNumberUtil;
}

@end


#line 34
void FreemarkerTemplateUtilityNumberUtil_init(FreemarkerTemplateUtilityNumberUtil *self) {
  (void) NSObject_init(self);
}


#line 34
FreemarkerTemplateUtilityNumberUtil *new_FreemarkerTemplateUtilityNumberUtil_init() {
  FreemarkerTemplateUtilityNumberUtil *self = [FreemarkerTemplateUtilityNumberUtil alloc];
  FreemarkerTemplateUtilityNumberUtil_init(self);
  return self;
}


#line 36
jboolean FreemarkerTemplateUtilityNumberUtil_isInfiniteWithNSNumber_(NSNumber *num) {
  FreemarkerTemplateUtilityNumberUtil_initialize();
  
#line 37
  if ([num isKindOfClass:[JavaLangDouble class]]) {
    return [((JavaLangDouble *) nil_chk(((JavaLangDouble *) check_class_cast(num, [JavaLangDouble class])))) isInfinite];
  }
  else
#line 39
  if ([num isKindOfClass:[JavaLangFloat class]]) {
    return [((JavaLangFloat *) nil_chk(((JavaLangFloat *) check_class_cast(num, [JavaLangFloat class])))) isInfinite];
  }
  else
#line 41
  if (FreemarkerTemplateUtilityNumberUtil_isNonFPNumberOfSupportedClassWithNSNumber_(num)) {
    return NO;
  }
  else {
    
#line 44
    @throw new_FreemarkerTemplateUtilityUnsupportedNumberClassException_initWithIOSClass_([((NSNumber *) nil_chk(num)) getClass]);
  }
}


#line 48
jboolean FreemarkerTemplateUtilityNumberUtil_isNaNWithNSNumber_(NSNumber *num) {
  FreemarkerTemplateUtilityNumberUtil_initialize();
  
#line 49
  if ([num isKindOfClass:[JavaLangDouble class]]) {
    return [((JavaLangDouble *) nil_chk(((JavaLangDouble *) check_class_cast(num, [JavaLangDouble class])))) isNaN];
  }
  else
#line 51
  if ([num isKindOfClass:[JavaLangFloat class]]) {
    return [((JavaLangFloat *) nil_chk(((JavaLangFloat *) check_class_cast(num, [JavaLangFloat class])))) isNaN];
  }
  else
#line 53
  if (FreemarkerTemplateUtilityNumberUtil_isNonFPNumberOfSupportedClassWithNSNumber_(num)) {
    return NO;
  }
  else {
    
#line 56
    @throw new_FreemarkerTemplateUtilityUnsupportedNumberClassException_initWithIOSClass_([((NSNumber *) nil_chk(num)) getClass]);
  }
}


#line 64
jint FreemarkerTemplateUtilityNumberUtil_getSignumWithNSNumber_(NSNumber *num) {
  FreemarkerTemplateUtilityNumberUtil_initialize();
  
#line 65
  if ([num isKindOfClass:[JavaLangInteger class]]) {
    jint n = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) check_class_cast(num, [JavaLangInteger class])))) intValue];
    return n > 0 ? 1 : (n == 0 ? 0 : -1);
  }
  else
#line 68
  if ([num isKindOfClass:[JavaMathBigDecimal class]]) {
    JavaMathBigDecimal *n = (JavaMathBigDecimal *) check_class_cast(num, [JavaMathBigDecimal class]);
    return [((JavaMathBigDecimal *) nil_chk(n)) signum];
  }
  else
#line 71
  if ([num isKindOfClass:[JavaLangDouble class]]) {
    jdouble n = [((JavaLangDouble *) nil_chk(((JavaLangDouble *) check_class_cast(num, [JavaLangDouble class])))) doubleValue];
    if (n > 0) return 1;
    else if (n == 0) return 0;
    else if (n < 0) return -1;
    else @throw new_JavaLangArithmeticException_initWithNSString_(JreStrcat("$D$", @"The signum of ", n, @" is not defined."));
  }
  else
#line 77
  if ([num isKindOfClass:[JavaLangFloat class]]) {
    jfloat n = [((JavaLangFloat *) nil_chk(((JavaLangFloat *) check_class_cast(num, [JavaLangFloat class])))) floatValue];
    if (n > 0) return 1;
    else if (n == 0) return 0;
    else if (n < 0) return -1;
    else @throw new_JavaLangArithmeticException_initWithNSString_(JreStrcat("$F$", @"The signum of ", n, @" is not defined."));
  }
  else
#line 83
  if ([num isKindOfClass:[JavaLangLong class]]) {
    jlong n = [((JavaLangLong *) nil_chk(((JavaLangLong *) check_class_cast(num, [JavaLangLong class])))) longLongValue];
    return n > 0 ? 1 : (n == 0 ? 0 : -1);
  }
  else
#line 86
  if ([num isKindOfClass:[JavaLangShort class]]) {
    jshort n = [((JavaLangShort *) nil_chk(((JavaLangShort *) check_class_cast(num, [JavaLangShort class])))) shortValue];
    return n > 0 ? 1 : (n == 0 ? 0 : -1);
  }
  else
#line 89
  if ([num isKindOfClass:[JavaLangByte class]]) {
    jbyte n = [((JavaLangByte *) nil_chk(((JavaLangByte *) check_class_cast(num, [JavaLangByte class])))) charValue];
    return n > 0 ? 1 : (n == 0 ? 0 : -1);
  }
  else
#line 92
  if ([num isKindOfClass:[JavaMathBigInteger class]]) {
    JavaMathBigInteger *n = (JavaMathBigInteger *) check_class_cast(num, [JavaMathBigInteger class]);
    return [((JavaMathBigInteger *) nil_chk(n)) signum];
  }
  else {
    
#line 96
    @throw new_FreemarkerTemplateUtilityUnsupportedNumberClassException_initWithIOSClass_([((NSNumber *) nil_chk(num)) getClass]);
  }
}


#line 106
jboolean FreemarkerTemplateUtilityNumberUtil_isIntegerBigDecimalWithJavaMathBigDecimal_(JavaMathBigDecimal *bd) {
  FreemarkerTemplateUtilityNumberUtil_initialize();
  return [((JavaMathBigDecimal *) nil_chk(bd)) scale__] <= 0 ||
#line 109
  [((JavaMathBigDecimal *) nil_chk([bd setScaleWithInt:0 withInt:JavaMathBigDecimal_ROUND_DOWN])) compareToWithId:bd] == 0;
}


#line 114
jboolean FreemarkerTemplateUtilityNumberUtil_isNonFPNumberOfSupportedClassWithNSNumber_(NSNumber *num) {
  FreemarkerTemplateUtilityNumberUtil_initialize();
  
#line 115
  return [num isKindOfClass:[JavaLangInteger class]] || [num isKindOfClass:[JavaMathBigDecimal class]] || [num isKindOfClass:[JavaLangLong class]] ||
#line 116
  [num isKindOfClass:[JavaLangShort class]] || [num isKindOfClass:[JavaLangByte class]] || [num isKindOfClass:[JavaMathBigInteger class]];
}


#line 127
jint FreemarkerTemplateUtilityNumberUtil_toIntExactWithNSNumber_(NSNumber *num) {
  FreemarkerTemplateUtilityNumberUtil_initialize();
  
#line 128
  if ([num isKindOfClass:[JavaLangInteger class]] || [num isKindOfClass:[JavaLangShort class]] || [num isKindOfClass:[JavaLangByte class]]) {
    return [((NSNumber *) nil_chk(num)) intValue];
  }
  else
#line 130
  if ([num isKindOfClass:[JavaLangLong class]]) {
    jlong n = [((NSNumber *) nil_chk(num)) longLongValue];
    jint result = (jint) n;
    if (n != result) {
      @throw FreemarkerTemplateUtilityNumberUtil_newLossyConverionExceptionWithNSNumber_withIOSClass_(num, JavaLangInteger_class_());
    }
    return result;
  }
  else
#line 137
  if ([num isKindOfClass:[JavaLangDouble class]] || [num isKindOfClass:[JavaLangFloat class]]) {
    jdouble n = [((NSNumber *) nil_chk(num)) doubleValue];
    if (fmod(n, 1) != 0 || n < JavaLangInteger_MIN_VALUE || n > JavaLangInteger_MAX_VALUE) {
      @throw FreemarkerTemplateUtilityNumberUtil_newLossyConverionExceptionWithNSNumber_withIOSClass_(num, JavaLangInteger_class_());
    }
    return J2ObjCFpToInt(n);
  }
  else
#line 143
  if ([num isKindOfClass:[JavaMathBigDecimal class]]) {
    
#line 145
    JavaMathBigDecimal *n = (JavaMathBigDecimal *) check_class_cast(num, [JavaMathBigDecimal class]);
    if (!FreemarkerTemplateUtilityNumberUtil_isIntegerBigDecimalWithJavaMathBigDecimal_(n) ||
#line 147
    [((JavaMathBigDecimal *) nil_chk(n)) compareToWithId:FreemarkerTemplateUtilityNumberUtil_BIG_DECIMAL_INT_MAX_] > 0 || [n compareToWithId:FreemarkerTemplateUtilityNumberUtil_BIG_DECIMAL_INT_MIN_] < 0) {
      @throw FreemarkerTemplateUtilityNumberUtil_newLossyConverionExceptionWithNSNumber_withIOSClass_(num, JavaLangInteger_class_());
    }
    return [((JavaMathBigDecimal *) nil_chk(n)) intValue];
  }
  else
#line 151
  if ([num isKindOfClass:[JavaMathBigInteger class]]) {
    JavaMathBigInteger *n = (JavaMathBigInteger *) check_class_cast(num, [JavaMathBigInteger class]);
    if ([((JavaMathBigInteger *) nil_chk(n)) compareToWithId:FreemarkerTemplateUtilityNumberUtil_BIG_INTEGER_INT_MAX_] > 0 || [n compareToWithId:FreemarkerTemplateUtilityNumberUtil_BIG_INTEGER_INT_MIN_] < 0) {
      @throw FreemarkerTemplateUtilityNumberUtil_newLossyConverionExceptionWithNSNumber_withIOSClass_(num, JavaLangInteger_class_());
    }
    return [n intValue];
  }
  else {
    
#line 158
    @throw new_FreemarkerTemplateUtilityUnsupportedNumberClassException_initWithIOSClass_([((NSNumber *) nil_chk(num)) getClass]);
  }
}


#line 162
JavaLangArithmeticException *FreemarkerTemplateUtilityNumberUtil_newLossyConverionExceptionWithNSNumber_withIOSClass_(NSNumber *fromValue, IOSClass *toType) {
  FreemarkerTemplateUtilityNumberUtil_initialize();
  
#line 163
  return new_JavaLangArithmeticException_initWithNSString_(JreStrcat("$@$$$", @"Can't convert ",
#line 164
  fromValue, @" to type ", FreemarkerTemplateUtilityClassUtil_getShortClassNameWithIOSClass_(toType), @" without loss."));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerTemplateUtilityNumberUtil)
