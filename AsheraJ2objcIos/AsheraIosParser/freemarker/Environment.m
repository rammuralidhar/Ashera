//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/Environment.java
//


#include "BeansWrapper.h"
#include "BodyInstruction.h"
#include "Configurable.h"
#include "Configuration.h"
#include "DateUtil.h"
#include "DirectiveCallPlace.h"
#include "Environment.h"
#include "EvalUtil.h"
#include "Expression.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "ISOTemplateDateFormatFactory.h"
#include "Identifier.h"
#include "IteratorBlock.h"
#include "J2ObjC_source.h"
#include "JavaTemplateDateFormatFactory.h"
#include "LocalContext.h"
#include "Logger.h"
#include "Macro.h"
#include "MalformedTemplateNameException.h"
#include "MessageUtil.h"
#include "NullWriter.h"
#include "ObjectWrapper.h"
#include "RecoveryBlock.h"
#include "ReturnInstruction.h"
#include "SimpleHash.h"
#include "SimpleSequence.h"
#include "StopException.h"
#include "Template.h"
#include "TemplateCollectionModel.h"
#include "TemplateDateFormat.h"
#include "TemplateDateFormatFactory.h"
#include "TemplateDateModel.h"
#include "TemplateDirectiveBody.h"
#include "TemplateDirectiveModel.h"
#include "TemplateElement.h"
#include "TemplateException.h"
#include "TemplateExceptionHandler.h"
#include "TemplateHashModel.h"
#include "TemplateHashModelEx.h"
#include "TemplateModel.h"
#include "TemplateModelException.h"
#include "TemplateModelIterator.h"
#include "TemplateNameFormat.h"
#include "TemplateNodeModel.h"
#include "TemplateObject.h"
#include "TemplateScalarModel.h"
#include "TemplateSequenceModel.h"
#include "TemplateTransformModel.h"
#include "TransformControl.h"
#include "UndeclaredThrowableException.h"
#include "UnformattableDateException.h"
#include "UnifiedCall.h"
#include "UnknownDateTypeFormattingUnsupportedException.h"
#include "Version.h"
#include "XSTemplateDateFormatFactory.h"
#include "_CacheAPI.h"
#include "_DelayedJQuote.h"
#include "_DelayedToString.h"
#include "_MiscTemplateException.h"
#include "_TemplateAPI.h"
#include "_TemplateModelException.h"
#include "java/io/IOException.h"
#include "java/io/PrintWriter.h"
#include "java/io/StringWriter.h"
#include "java/io/Writer.h"
#include "java/lang/Boolean.h"
#include "java/lang/ClassCastException.h"
#include "java/lang/Error.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/ThreadLocal.h"
#include "java/lang/Throwable.h"
#include "java/sql/Date.h"
#include "java/sql/Time.h"
#include "java/sql/Timestamp.h"
#include "java/text/Collator.h"
#include "java/text/DecimalFormat.h"
#include "java/text/DecimalFormatSymbols.h"
#include "java/text/NumberFormat.h"
#include "java/text/ParseException.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Date.h"
#include "java/util/HashMap.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Locale.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/TimeZone.h"

#line 0 "/Users/ramm/git/Ashera/AsheraAndroidParser/freemarker/freemarker/core/Environment.java"

#define FreemarkerCoreEnvironment_CACHED_TDFS_ZONELESS_INPUT_OFFS 4
#define FreemarkerCoreEnvironment_CACHED_TDFS_DEF_SYS_TZ_OFFS 8
#define FreemarkerCoreEnvironment_CACHED_TDFS_LENGTH 16
#define FreemarkerCoreEnvironment_CACHED_TDFS_SQL_D_T_TZ_OFFS 8
#define FreemarkerCoreEnvironment_TERSE_MODE_INSTRUCTION_STACK_TRACE_LIMIT 10

@interface FreemarkerCoreEnvironment () {
 @public
  id<FreemarkerTemplateTemplateHashModel> rootDataModel_;
  JavaUtilArrayList *instructionStack_;
  JavaUtilArrayList *recoveredErrorStack_;
  JavaTextNumberFormat *cachedNumberFormat_;
  id<JavaUtilMap> cachedNumberFormats_;
  /**
   @brief Stores the date/time/date-time formatters that are used when no format is explicitly given at the place of formatting.
   That is, in situations like ${lastModified} or even ${lastModified?date}, but not in situations like ${lastModified?string.iso}. <p>The index of the array is calculated from what kind of formatter we want (see #getCachedTemplateDateFormatIndex(int,boolean,boolean) ):<br> Zoned input:                  0: U,  1: T,  2: D,  3: DT<br> Zoneless input:               4: U,  5: T,  6: D,  7: DT<br> Sys def TZ + Zoned input:     8: U,  9: T, 10: D, 11: DT<br> Sys def TZ + Zoneless input: 12: U, 13: T, 14: D, 15: DT <p>This is a lazily filled cache. It starts out as <code>null</code> , then when first needed the array will be created. The array elements also start out as <code>null</code> -s, and they are filled as the particular kind of formatter is first needed.
   */
  IOSObjectArray *cachedTemplateDateFormats_;
  FreemarkerCoreXSTemplateDateFormatFactory *cachedXSTemplateDateFormatFactory_;
  FreemarkerCoreXSTemplateDateFormatFactory *cachedSQLDTXSTemplateDateFormatFactory_;
  FreemarkerCoreISOTemplateDateFormatFactory *cachedISOTemplateDateFormatFactory_;
  FreemarkerCoreISOTemplateDateFormatFactory *cachedSQLDTISOTemplateDateFormatFactory_;
  FreemarkerCoreJavaTemplateDateFormatFactory *cachedJavaTemplateDateFormatFactory_;
  FreemarkerCoreJavaTemplateDateFormatFactory *cachedSQLDTJavaTemplateDateFormatFactory_;
  /**
   @brief Caches the result of #isSQLDateAndTimeTimeZoneSameAsNormal() .
   */
  JavaLangBoolean *cachedSQLDateAndTimeTimeZoneSameAsNormal_;
  JavaTextNumberFormat *cNumberFormat_;
  /**
   @brief Used by the "iso_" built-ins to accelerate formatting.
   */
  id<FreemarkerTemplateUtilityDateUtil_DateToISO8601CalendarFactory> isoBuiltInCalendarFactory_;
  JavaTextCollator *cachedCollator_;
  JavaIoWriter *out_;
  FreemarkerCoreMacro_Context *currentMacroContext_;
  JavaUtilArrayList *localContextStack_;
  FreemarkerCoreEnvironment_Namespace *mainNamespace_;
  FreemarkerCoreEnvironment_Namespace *currentNamespace_, *globalNamespace_;
  JavaUtilHashMap *loadedLibs_;
  FreemarkerCoreConfigurable *legacyParent_;
  jboolean inAttemptBlock_;
  JavaLangThrowable *lastThrowable_;
  id<FreemarkerTemplateTemplateModel> lastReturnValue_;
  JavaUtilHashMap *macroToNamespaceLookup_;
  id<FreemarkerTemplateTemplateNodeModel> currentVisitorNode_;
  id<FreemarkerTemplateTemplateSequenceModel> nodeNamespaces_;
  jint nodeNamespaceIndex_;
  NSString *currentNodeName_, *currentNodeNS_;
  NSString *cachedURLEscapingCharset_;
  jboolean cachedURLEscapingCharsetSet_;
  jboolean fastInvalidReferenceExceptions_;
}

/**
 @brief Deletes cached values that meant to be valid only during a single template execution.
 */
- (void)clearCachedValues;

- (FreemarkerCoreTemplateElement *)replaceTopElementWithFreemarkerCoreTemplateElement:(FreemarkerCoreTemplateElement *)element;

- (IOSObjectArray *)noNodeHandlerDefinedDescriptionWithFreemarkerTemplateTemplateNodeModel:(id<FreemarkerTemplateTemplateNodeModel>)node
                                                                              withNSString:(NSString *)ns
                                                                              withNSString:(NSString *)nodeType;

/**
 @brief Sets the local variables corresponding to the macro call arguments in the macro context.
 */
- (void)setMacroContextLocalsFromArgumentsWithFreemarkerCoreMacro_Context:(FreemarkerCoreMacro_Context *)macroCtx
                                                  withFreemarkerCoreMacro:(FreemarkerCoreMacro *)macro
                                                          withJavaUtilMap:(id<JavaUtilMap>)namedArgs
                                                         withJavaUtilList:(id<JavaUtilList>)positionalArgs;

- (void)handleTemplateExceptionWithFreemarkerTemplateTemplateException:(FreemarkerTemplateTemplateException *)templateException;

+ (jboolean)nullSafeEqualsWithId:(id)o1
                          withId:(id)o2;

- (FreemarkerCoreTemplateDateFormat *)getTemplateDateFormatWithInt:(jint)dateType
                                                       withBoolean:(jboolean)isSQLDateOrTime
                                                       withBoolean:(jboolean)useSQLDTTZ
                                      withFreemarkerCoreExpression:(FreemarkerCoreExpression *)dateSourceExpr;

- (FreemarkerCoreTemplateDateFormat *)getTemplateDateFormatWithInt:(jint)dateType
                                                       withBoolean:(jboolean)zonelessInput
                                                       withBoolean:(jboolean)useSQLDTTZ
                                                      withNSString:(NSString *)formatDescriptor
                                                      withNSString:(NSString *)sourceCfgSetting;

- (jboolean)shouldUseSQLDTTimeZoneWithBoolean:(jboolean)sqlDateOrTime;

/**
 @brief Tells if the given class is or is subclass of java.sql.Date or java.sql.Time .
 */
+ (jboolean)isSQLDateOrTimeClassWithIOSClass:(IOSClass *)dateClass;

- (jint)getCachedTemplateDateFormatIndexWithInt:(jint)dateType
                                    withBoolean:(jboolean)zonelessInput
                                    withBoolean:(jboolean)sqlDTTZ;

+ (FreemarkerCoreMacro *)getEnclosingMacroWithFreemarkerCoreTemplateElement:(FreemarkerCoreTemplateElement *)stackEl;

- (void)pushLocalContextWithFreemarkerCoreLocalContext:(id<FreemarkerCoreLocalContext>)localContext;

- (void)popLocalContext;

- (void)pushElementWithFreemarkerCoreTemplateElement:(FreemarkerCoreTemplateElement *)element;

- (void)popElement;

- (id<FreemarkerTemplateTemplateModel>)getNodeProcessorWithNSString:(NSString *)nodeName
                                                       withNSString:(NSString *)nsURI
                                                            withInt:(jint)startIndex;

- (id<FreemarkerTemplateTemplateModel>)getNodeProcessorWithFreemarkerCoreEnvironment_Namespace:(FreemarkerCoreEnvironment_Namespace *)ns
                                                                                  withNSString:(NSString *)localName
                                                                                  withNSString:(NSString *)nsURI;

- (jboolean)isIcI2322OrLater;

@end

J2OBJC_FIELD_SETTER(FreemarkerCoreEnvironment, rootDataModel_, id<FreemarkerTemplateTemplateHashModel>)
J2OBJC_FIELD_SETTER(FreemarkerCoreEnvironment, instructionStack_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(FreemarkerCoreEnvironment, recoveredErrorStack_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(FreemarkerCoreEnvironment, cachedNumberFormat_, JavaTextNumberFormat *)
J2OBJC_FIELD_SETTER(FreemarkerCoreEnvironment, cachedNumberFormats_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(FreemarkerCoreEnvironment, cachedTemplateDateFormats_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(FreemarkerCoreEnvironment, cachedXSTemplateDateFormatFactory_, FreemarkerCoreXSTemplateDateFormatFactory *)
J2OBJC_FIELD_SETTER(FreemarkerCoreEnvironment, cachedSQLDTXSTemplateDateFormatFactory_, FreemarkerCoreXSTemplateDateFormatFactory *)
J2OBJC_FIELD_SETTER(FreemarkerCoreEnvironment, cachedISOTemplateDateFormatFactory_, FreemarkerCoreISOTemplateDateFormatFactory *)
J2OBJC_FIELD_SETTER(FreemarkerCoreEnvironment, cachedSQLDTISOTemplateDateFormatFactory_, FreemarkerCoreISOTemplateDateFormatFactory *)
J2OBJC_FIELD_SETTER(FreemarkerCoreEnvironment, cachedJavaTemplateDateFormatFactory_, FreemarkerCoreJavaTemplateDateFormatFactory *)
J2OBJC_FIELD_SETTER(FreemarkerCoreEnvironment, cachedSQLDTJavaTemplateDateFormatFactory_, FreemarkerCoreJavaTemplateDateFormatFactory *)
J2OBJC_FIELD_SETTER(FreemarkerCoreEnvironment, cachedSQLDateAndTimeTimeZoneSameAsNormal_, JavaLangBoolean *)
J2OBJC_FIELD_SETTER(FreemarkerCoreEnvironment, cNumberFormat_, JavaTextNumberFormat *)
J2OBJC_FIELD_SETTER(FreemarkerCoreEnvironment, isoBuiltInCalendarFactory_, id<FreemarkerTemplateUtilityDateUtil_DateToISO8601CalendarFactory>)
J2OBJC_FIELD_SETTER(FreemarkerCoreEnvironment, cachedCollator_, JavaTextCollator *)
J2OBJC_FIELD_SETTER(FreemarkerCoreEnvironment, out_, JavaIoWriter *)
J2OBJC_FIELD_SETTER(FreemarkerCoreEnvironment, currentMacroContext_, FreemarkerCoreMacro_Context *)
J2OBJC_FIELD_SETTER(FreemarkerCoreEnvironment, localContextStack_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(FreemarkerCoreEnvironment, mainNamespace_, FreemarkerCoreEnvironment_Namespace *)
J2OBJC_FIELD_SETTER(FreemarkerCoreEnvironment, currentNamespace_, FreemarkerCoreEnvironment_Namespace *)
J2OBJC_FIELD_SETTER(FreemarkerCoreEnvironment, globalNamespace_, FreemarkerCoreEnvironment_Namespace *)
J2OBJC_FIELD_SETTER(FreemarkerCoreEnvironment, loadedLibs_, JavaUtilHashMap *)
J2OBJC_FIELD_SETTER(FreemarkerCoreEnvironment, legacyParent_, FreemarkerCoreConfigurable *)
J2OBJC_FIELD_SETTER(FreemarkerCoreEnvironment, lastThrowable_, JavaLangThrowable *)
J2OBJC_FIELD_SETTER(FreemarkerCoreEnvironment, lastReturnValue_, id<FreemarkerTemplateTemplateModel>)
J2OBJC_FIELD_SETTER(FreemarkerCoreEnvironment, macroToNamespaceLookup_, JavaUtilHashMap *)
J2OBJC_FIELD_SETTER(FreemarkerCoreEnvironment, currentVisitorNode_, id<FreemarkerTemplateTemplateNodeModel>)
J2OBJC_FIELD_SETTER(FreemarkerCoreEnvironment, nodeNamespaces_, id<FreemarkerTemplateTemplateSequenceModel>)
J2OBJC_FIELD_SETTER(FreemarkerCoreEnvironment, currentNodeName_, NSString *)
J2OBJC_FIELD_SETTER(FreemarkerCoreEnvironment, currentNodeNS_, NSString *)
J2OBJC_FIELD_SETTER(FreemarkerCoreEnvironment, cachedURLEscapingCharset_, NSString *)

static JavaLangThreadLocal *FreemarkerCoreEnvironment_threadEnv_;
J2OBJC_STATIC_FIELD_GETTER(FreemarkerCoreEnvironment, threadEnv_, JavaLangThreadLocal *)

static FreemarkerLogLogger *FreemarkerCoreEnvironment_LOG_;
J2OBJC_STATIC_FIELD_GETTER(FreemarkerCoreEnvironment, LOG_, FreemarkerLogLogger *)

static FreemarkerLogLogger *FreemarkerCoreEnvironment_ATTEMPT_LOGGER_;
J2OBJC_STATIC_FIELD_GETTER(FreemarkerCoreEnvironment, ATTEMPT_LOGGER_, FreemarkerLogLogger *)

static id<JavaUtilMap> FreemarkerCoreEnvironment_JAVA_NUMBER_FORMATS_;
J2OBJC_STATIC_FIELD_GETTER(FreemarkerCoreEnvironment, JAVA_NUMBER_FORMATS_, id<JavaUtilMap>)

static JavaTextDecimalFormat *FreemarkerCoreEnvironment_C_NUMBER_FORMAT_;
J2OBJC_STATIC_FIELD_GETTER(FreemarkerCoreEnvironment, C_NUMBER_FORMAT_, JavaTextDecimalFormat *)

J2OBJC_STATIC_FIELD_GETTER(FreemarkerCoreEnvironment, CACHED_TDFS_ZONELESS_INPUT_OFFS, jint)

J2OBJC_STATIC_FIELD_GETTER(FreemarkerCoreEnvironment, CACHED_TDFS_DEF_SYS_TZ_OFFS, jint)

J2OBJC_STATIC_FIELD_GETTER(FreemarkerCoreEnvironment, CACHED_TDFS_LENGTH, jint)

J2OBJC_STATIC_FIELD_GETTER(FreemarkerCoreEnvironment, CACHED_TDFS_SQL_D_T_TZ_OFFS, jint)

static IOSObjectArray *FreemarkerCoreEnvironment_NO_OUT_ARGS_;
J2OBJC_STATIC_FIELD_GETTER(FreemarkerCoreEnvironment, NO_OUT_ARGS_, IOSObjectArray *)

J2OBJC_STATIC_FIELD_GETTER(FreemarkerCoreEnvironment, TERSE_MODE_INSTRUCTION_STACK_TRACE_LIMIT, jint)

static JavaIoWriter *FreemarkerCoreEnvironment_EMPTY_BODY_WRITER_;
J2OBJC_STATIC_FIELD_GETTER(FreemarkerCoreEnvironment, EMPTY_BODY_WRITER_, JavaIoWriter *)

__attribute__((unused)) static void FreemarkerCoreEnvironment_clearCachedValues(FreemarkerCoreEnvironment *self);

__attribute__((unused)) static FreemarkerCoreTemplateElement *FreemarkerCoreEnvironment_replaceTopElementWithFreemarkerCoreTemplateElement_(FreemarkerCoreEnvironment *self, FreemarkerCoreTemplateElement *element);

__attribute__((unused)) static IOSObjectArray *FreemarkerCoreEnvironment_noNodeHandlerDefinedDescriptionWithFreemarkerTemplateTemplateNodeModel_withNSString_withNSString_(FreemarkerCoreEnvironment *self, id<FreemarkerTemplateTemplateNodeModel> node, NSString *ns, NSString *nodeType);

__attribute__((unused)) static void FreemarkerCoreEnvironment_setMacroContextLocalsFromArgumentsWithFreemarkerCoreMacro_Context_withFreemarkerCoreMacro_withJavaUtilMap_withJavaUtilList_(FreemarkerCoreEnvironment *self, FreemarkerCoreMacro_Context *macroCtx, FreemarkerCoreMacro *macro, id<JavaUtilMap> namedArgs, id<JavaUtilList> positionalArgs);

__attribute__((unused)) static void FreemarkerCoreEnvironment_handleTemplateExceptionWithFreemarkerTemplateTemplateException_(FreemarkerCoreEnvironment *self, FreemarkerTemplateTemplateException *templateException);

__attribute__((unused)) static jboolean FreemarkerCoreEnvironment_nullSafeEqualsWithId_withId_(id o1, id o2);

__attribute__((unused)) static FreemarkerCoreTemplateDateFormat *FreemarkerCoreEnvironment_getTemplateDateFormatWithInt_withBoolean_withBoolean_withFreemarkerCoreExpression_(FreemarkerCoreEnvironment *self, jint dateType, jboolean isSQLDateOrTime, jboolean useSQLDTTZ, FreemarkerCoreExpression *dateSourceExpr);

__attribute__((unused)) static FreemarkerCoreTemplateDateFormat *FreemarkerCoreEnvironment_getTemplateDateFormatWithInt_withBoolean_withBoolean_withNSString_withNSString_(FreemarkerCoreEnvironment *self, jint dateType, jboolean zonelessInput, jboolean useSQLDTTZ, NSString *formatDescriptor, NSString *sourceCfgSetting);

__attribute__((unused)) static jboolean FreemarkerCoreEnvironment_shouldUseSQLDTTimeZoneWithBoolean_(FreemarkerCoreEnvironment *self, jboolean sqlDateOrTime);

__attribute__((unused)) static jboolean FreemarkerCoreEnvironment_isSQLDateOrTimeClassWithIOSClass_(IOSClass *dateClass);

__attribute__((unused)) static jint FreemarkerCoreEnvironment_getCachedTemplateDateFormatIndexWithInt_withBoolean_withBoolean_(FreemarkerCoreEnvironment *self, jint dateType, jboolean zonelessInput, jboolean sqlDTTZ);

__attribute__((unused)) static FreemarkerCoreMacro *FreemarkerCoreEnvironment_getEnclosingMacroWithFreemarkerCoreTemplateElement_(FreemarkerCoreTemplateElement *stackEl);

__attribute__((unused)) static void FreemarkerCoreEnvironment_pushLocalContextWithFreemarkerCoreLocalContext_(FreemarkerCoreEnvironment *self, id<FreemarkerCoreLocalContext> localContext);

__attribute__((unused)) static void FreemarkerCoreEnvironment_popLocalContext(FreemarkerCoreEnvironment *self);

__attribute__((unused)) static void FreemarkerCoreEnvironment_pushElementWithFreemarkerCoreTemplateElement_(FreemarkerCoreEnvironment *self, FreemarkerCoreTemplateElement *element);

__attribute__((unused)) static void FreemarkerCoreEnvironment_popElement(FreemarkerCoreEnvironment *self);

__attribute__((unused)) static id<FreemarkerTemplateTemplateModel> FreemarkerCoreEnvironment_getNodeProcessorWithNSString_withNSString_withInt_(FreemarkerCoreEnvironment *self, NSString *nodeName, NSString *nsURI, jint startIndex);

__attribute__((unused)) static id<FreemarkerTemplateTemplateModel> FreemarkerCoreEnvironment_getNodeProcessorWithFreemarkerCoreEnvironment_Namespace_withNSString_withNSString_(FreemarkerCoreEnvironment *self, FreemarkerCoreEnvironment_Namespace *ns, NSString *localName, NSString *nsURI);

__attribute__((unused)) static jboolean FreemarkerCoreEnvironment_isIcI2322OrLater(FreemarkerCoreEnvironment *self);

@interface FreemarkerCoreEnvironment_NestedElementTemplateDirectiveBody () {
 @public
  FreemarkerCoreEnvironment *this$0_;
  FreemarkerCoreTemplateElement *element_;
}

- (instancetype)initWithFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)outer$
                withFreemarkerCoreTemplateElement:(FreemarkerCoreTemplateElement *)element;

@end

J2OBJC_FIELD_SETTER(FreemarkerCoreEnvironment_NestedElementTemplateDirectiveBody, this$0_, FreemarkerCoreEnvironment *)
J2OBJC_FIELD_SETTER(FreemarkerCoreEnvironment_NestedElementTemplateDirectiveBody, element_, FreemarkerCoreTemplateElement *)

__attribute__((unused)) static void FreemarkerCoreEnvironment_NestedElementTemplateDirectiveBody_initWithFreemarkerCoreEnvironment_withFreemarkerCoreTemplateElement_(FreemarkerCoreEnvironment_NestedElementTemplateDirectiveBody *self, FreemarkerCoreEnvironment *outer$, FreemarkerCoreTemplateElement *element);

__attribute__((unused)) static FreemarkerCoreEnvironment_NestedElementTemplateDirectiveBody *new_FreemarkerCoreEnvironment_NestedElementTemplateDirectiveBody_initWithFreemarkerCoreEnvironment_withFreemarkerCoreTemplateElement_(FreemarkerCoreEnvironment *outer$, FreemarkerCoreTemplateElement *element) NS_RETURNS_RETAINED;

@interface FreemarkerCoreEnvironment_NumberFormatKey : NSObject {
 @public
  NSString *pattern_;
  JavaUtilLocale *locale_;
}

- (instancetype)initWithNSString:(NSString *)pattern
              withJavaUtilLocale:(JavaUtilLocale *)locale;

- (jboolean)isEqual:(id)o;

- (NSUInteger)hash;

@end

J2OBJC_EMPTY_STATIC_INIT(FreemarkerCoreEnvironment_NumberFormatKey)

J2OBJC_FIELD_SETTER(FreemarkerCoreEnvironment_NumberFormatKey, pattern_, NSString *)
J2OBJC_FIELD_SETTER(FreemarkerCoreEnvironment_NumberFormatKey, locale_, JavaUtilLocale *)

__attribute__((unused)) static void FreemarkerCoreEnvironment_NumberFormatKey_initWithNSString_withJavaUtilLocale_(FreemarkerCoreEnvironment_NumberFormatKey *self, NSString *pattern, JavaUtilLocale *locale);

__attribute__((unused)) static FreemarkerCoreEnvironment_NumberFormatKey *new_FreemarkerCoreEnvironment_NumberFormatKey_initWithNSString_withJavaUtilLocale_(NSString *pattern, JavaUtilLocale *locale) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerCoreEnvironment_NumberFormatKey)

@interface FreemarkerCoreEnvironment_Namespace () {
 @public
  FreemarkerCoreEnvironment *this$0_;
  FreemarkerTemplateTemplate *template__;
}

@end

J2OBJC_FIELD_SETTER(FreemarkerCoreEnvironment_Namespace, this$0_, FreemarkerCoreEnvironment *)
J2OBJC_FIELD_SETTER(FreemarkerCoreEnvironment_Namespace, template__, FreemarkerTemplateTemplate *)

@interface FreemarkerCoreEnvironment_$2 : NSObject < FreemarkerCoreLocalContext > {
 @public
  id<JavaUtilList> val$bodyParameterNames_;
  IOSObjectArray *val$outArgs_;
}

- (id<FreemarkerTemplateTemplateModel>)getLocalVariableWithNSString:(NSString *)name;

- (id<JavaUtilCollection>)getLocalVariableNames;

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)capture$0
withFreemarkerTemplateTemplateModelArray:(IOSObjectArray *)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(FreemarkerCoreEnvironment_$2)

J2OBJC_FIELD_SETTER(FreemarkerCoreEnvironment_$2, val$bodyParameterNames_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(FreemarkerCoreEnvironment_$2, val$outArgs_, IOSObjectArray *)

__attribute__((unused)) static void FreemarkerCoreEnvironment_$2_initWithJavaUtilList_withFreemarkerTemplateTemplateModelArray_(FreemarkerCoreEnvironment_$2 *self, id<JavaUtilList> capture$0, IOSObjectArray *capture$1);

__attribute__((unused)) static FreemarkerCoreEnvironment_$2 *new_FreemarkerCoreEnvironment_$2_initWithJavaUtilList_withFreemarkerTemplateTemplateModelArray_(id<JavaUtilList> capture$0, IOSObjectArray *capture$1) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerCoreEnvironment_$2)

@interface FreemarkerCoreEnvironment_$3 : NSObject < FreemarkerTemplateTemplateHashModel > {
 @public
  FreemarkerCoreEnvironment *this$0_;
}

- (jboolean)isEmpty;

- (id<FreemarkerTemplateTemplateModel>)getWithNSString:(NSString *)key;

- (instancetype)initWithFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(FreemarkerCoreEnvironment_$3)

J2OBJC_FIELD_SETTER(FreemarkerCoreEnvironment_$3, this$0_, FreemarkerCoreEnvironment *)

__attribute__((unused)) static void FreemarkerCoreEnvironment_$3_initWithFreemarkerCoreEnvironment_(FreemarkerCoreEnvironment_$3 *self, FreemarkerCoreEnvironment *outer$);

__attribute__((unused)) static FreemarkerCoreEnvironment_$3 *new_FreemarkerCoreEnvironment_$3_initWithFreemarkerCoreEnvironment_(FreemarkerCoreEnvironment *outer$) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerCoreEnvironment_$3)

@interface FreemarkerCoreEnvironment_$4 : NSObject < FreemarkerTemplateTemplateHashModelEx > {
 @public
  FreemarkerCoreEnvironment *this$0_;
  id<FreemarkerTemplateTemplateHashModel> val$result_;
}

- (jboolean)isEmpty;

- (id<FreemarkerTemplateTemplateModel>)getWithNSString:(NSString *)key;

- (id<FreemarkerTemplateTemplateCollectionModel>)values;

- (id<FreemarkerTemplateTemplateCollectionModel>)keys;

- (jint)size;

- (instancetype)initWithFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)outer$
          withFreemarkerTemplateTemplateHashModel:(id<FreemarkerTemplateTemplateHashModel>)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(FreemarkerCoreEnvironment_$4)

J2OBJC_FIELD_SETTER(FreemarkerCoreEnvironment_$4, this$0_, FreemarkerCoreEnvironment *)
J2OBJC_FIELD_SETTER(FreemarkerCoreEnvironment_$4, val$result_, id<FreemarkerTemplateTemplateHashModel>)

__attribute__((unused)) static void FreemarkerCoreEnvironment_$4_initWithFreemarkerCoreEnvironment_withFreemarkerTemplateTemplateHashModel_(FreemarkerCoreEnvironment_$4 *self, FreemarkerCoreEnvironment *outer$, id<FreemarkerTemplateTemplateHashModel> capture$0);

__attribute__((unused)) static FreemarkerCoreEnvironment_$4 *new_FreemarkerCoreEnvironment_$4_initWithFreemarkerCoreEnvironment_withFreemarkerTemplateTemplateHashModel_(FreemarkerCoreEnvironment *outer$, id<FreemarkerTemplateTemplateHashModel> capture$0) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerCoreEnvironment_$4)

@interface FreemarkerCoreEnvironment_$5 : NSObject < FreemarkerTemplateTemplateHashModel > {
 @public
  FreemarkerCoreEnvironment *this$0_;
}

- (jboolean)isEmpty;

- (id<FreemarkerTemplateTemplateModel>)getWithNSString:(NSString *)key;

- (instancetype)initWithFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(FreemarkerCoreEnvironment_$5)

J2OBJC_FIELD_SETTER(FreemarkerCoreEnvironment_$5, this$0_, FreemarkerCoreEnvironment *)

__attribute__((unused)) static void FreemarkerCoreEnvironment_$5_initWithFreemarkerCoreEnvironment_(FreemarkerCoreEnvironment_$5 *self, FreemarkerCoreEnvironment *outer$);

__attribute__((unused)) static FreemarkerCoreEnvironment_$5 *new_FreemarkerCoreEnvironment_$5_initWithFreemarkerCoreEnvironment_(FreemarkerCoreEnvironment *outer$) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerCoreEnvironment_$5)

@interface FreemarkerCoreEnvironment_$1 : JavaIoWriter

- (void)writeWithCharArray:(IOSCharArray *)cbuf
                   withInt:(jint)off
                   withInt:(jint)len;

- (void)flush;

- (void)close;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(FreemarkerCoreEnvironment_$1)

__attribute__((unused)) static void FreemarkerCoreEnvironment_$1_init(FreemarkerCoreEnvironment_$1 *self);

__attribute__((unused)) static FreemarkerCoreEnvironment_$1 *new_FreemarkerCoreEnvironment_$1_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(FreemarkerCoreEnvironment_$1)

J2OBJC_INITIALIZED_DEFN(FreemarkerCoreEnvironment)


#line 87
@implementation FreemarkerCoreEnvironment


#line 187
+ (FreemarkerCoreEnvironment *)getCurrentEnvironment {
  return FreemarkerCoreEnvironment_getCurrentEnvironment();
}


#line 192
+ (void)setCurrentEnvironmentWithFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)env {
  FreemarkerCoreEnvironment_setCurrentEnvironmentWithFreemarkerCoreEnvironment_(env);
}

- (instancetype)initWithFreemarkerTemplateTemplate:(FreemarkerTemplateTemplate *)template_
           withFreemarkerTemplateTemplateHashModel:(id<FreemarkerTemplateTemplateHashModel>)rootDataModel
                                  withJavaIoWriter:(JavaIoWriter *)outArg {
  FreemarkerCoreEnvironment_initWithFreemarkerTemplateTemplate_withFreemarkerTemplateTemplateHashModel_withJavaIoWriter_(self, template_, rootDataModel, outArg);
  return self;
}


#line 216
- (FreemarkerTemplateTemplate *)getTemplate {
  return (FreemarkerTemplateTemplate *) check_class_cast([self getParent], [FreemarkerTemplateTemplate class]);
}


#line 221
- (FreemarkerTemplateTemplate *)getTemplate230 {
  FreemarkerTemplateTemplate *legacyParent = (FreemarkerTemplateTemplate *) check_class_cast(self->legacyParent_, [FreemarkerTemplateTemplate class]);
  return legacyParent != nil ? legacyParent : [self getTemplate];
}


#line 234
- (FreemarkerTemplateTemplate *)getMainTemplate {
  return [((FreemarkerCoreEnvironment_Namespace *) nil_chk(mainNamespace_)) getTemplate];
}


#line 249
- (FreemarkerTemplateTemplate *)getCurrentTemplate {
  jint ln = [((JavaUtilArrayList *) nil_chk(instructionStack_)) size];
  return ln == 0 ? [self getMainTemplate] : [((FreemarkerCoreTemplateObject *) nil_chk(((FreemarkerCoreTemplateObject *) check_class_cast([instructionStack_ getWithInt:ln - 1], [FreemarkerCoreTemplateObject class])))) getTemplate];
}


#line 262
- (id<FreemarkerCoreDirectiveCallPlace>)getCurrentDirectiveCallPlace {
  jint ln = [((JavaUtilArrayList *) nil_chk(instructionStack_)) size];
  if (ln == 0) return nil;
  FreemarkerCoreTemplateElement *te = (FreemarkerCoreTemplateElement *) check_class_cast([instructionStack_ getWithInt:ln - 1], [FreemarkerCoreTemplateElement class]);
  if ([te isKindOfClass:[FreemarkerCoreUnifiedCall class]]) return (FreemarkerCoreUnifiedCall *) check_class_cast(te, [FreemarkerCoreUnifiedCall class]);
  if ([te isKindOfClass:[FreemarkerCoreMacro class]] && ln > 1 && [[instructionStack_ getWithInt:ln - 2] isKindOfClass:[FreemarkerCoreUnifiedCall class]]) {
    return (FreemarkerCoreUnifiedCall *) check_class_cast([instructionStack_ getWithInt:ln - 2], [FreemarkerCoreUnifiedCall class]);
  }
  return nil;
}


#line 277
- (void)clearCachedValues {
  FreemarkerCoreEnvironment_clearCachedValues(self);
}


#line 294
- (void)process {
  id savedEnv = [((JavaLangThreadLocal *) nil_chk(FreemarkerCoreEnvironment_threadEnv_)) get];
  [FreemarkerCoreEnvironment_threadEnv_ setWithId:self];
  @try {
    
#line 299
    FreemarkerCoreEnvironment_clearCachedValues(self);
    @try {
      [self doAutoImportsAndIncludesWithFreemarkerCoreEnvironment:self];
      [self visitWithFreemarkerCoreTemplateElement:[((FreemarkerTemplateTemplate *) nil_chk([self getTemplate])) getRootTreeNode]];
      
#line 304
      if ([self getAutoFlush]) {
        [((JavaIoWriter *) nil_chk(out_)) flush];
      }
    }
    @finally {
      FreemarkerCoreEnvironment_clearCachedValues(self);
    }
  }
  @finally {
    
#line 312
    [FreemarkerCoreEnvironment_threadEnv_ setWithId:savedEnv];
  }
}


#line 319
- (void)visitWithFreemarkerCoreTemplateElement:(FreemarkerCoreTemplateElement *)element {
  
#line 322
  FreemarkerCoreEnvironment_pushElementWithFreemarkerCoreTemplateElement_(self, element);
  @try {
    [((FreemarkerCoreTemplateElement *) nil_chk(element)) acceptWithFreemarkerCoreEnvironment:self];
  }
  @catch (FreemarkerTemplateTemplateException *te) {
    FreemarkerCoreEnvironment_handleTemplateExceptionWithFreemarkerTemplateTemplateException_(self, te);
  }
  @finally {
    FreemarkerCoreEnvironment_popElement(self);
  }
}


#line 341
- (void)visitByHiddingParentWithFreemarkerCoreTemplateElement:(FreemarkerCoreTemplateElement *)element {
  
#line 343
  FreemarkerCoreTemplateElement *parent = FreemarkerCoreEnvironment_replaceTopElementWithFreemarkerCoreTemplateElement_(self, element);
  @try {
    [((FreemarkerCoreTemplateElement *) nil_chk(element)) acceptWithFreemarkerCoreEnvironment:self];
  }
  @catch (
#line 346
  FreemarkerTemplateTemplateException *te) {
    FreemarkerCoreEnvironment_handleTemplateExceptionWithFreemarkerTemplateTemplateException_(self, te);
  }
  @finally {
    
#line 349
    (void) FreemarkerCoreEnvironment_replaceTopElementWithFreemarkerCoreTemplateElement_(self, parent);
  }
}


#line 353
- (FreemarkerCoreTemplateElement *)replaceTopElementWithFreemarkerCoreTemplateElement:(FreemarkerCoreTemplateElement *)element {
  return FreemarkerCoreEnvironment_replaceTopElementWithFreemarkerCoreTemplateElement_(self, element);
}


#line 359
- (void)visitWithFreemarkerCoreTemplateElement:(FreemarkerCoreTemplateElement *)element
  withFreemarkerTemplateTemplateDirectiveModel:(id<FreemarkerTemplateTemplateDirectiveModel>)directiveModel
                               withJavaUtilMap:(id<JavaUtilMap>)args
                              withJavaUtilList:(id<JavaUtilList>)bodyParameterNames {
  
#line 362
  id<FreemarkerTemplateTemplateDirectiveBody> nested;
  if (element == nil) {
    nested = nil;
  }
  else {
    nested = new_FreemarkerCoreEnvironment_NestedElementTemplateDirectiveBody_initWithFreemarkerCoreEnvironment_withFreemarkerCoreTemplateElement_(self, element);
  }
  IOSObjectArray *outArgs;
  if (bodyParameterNames == nil || [bodyParameterNames isEmpty]) {
    outArgs = FreemarkerCoreEnvironment_NO_OUT_ARGS_;
  }
  else {
    outArgs = [IOSObjectArray newArrayWithLength:[bodyParameterNames size] type:FreemarkerTemplateTemplateModel_class_()];
  }
  if (((IOSObjectArray *) nil_chk(outArgs))->size_ > 0) {
    FreemarkerCoreEnvironment_pushLocalContextWithFreemarkerCoreLocalContext_(self, new_FreemarkerCoreEnvironment_$2_initWithJavaUtilList_withFreemarkerTemplateTemplateModelArray_(bodyParameterNames, outArgs));
  }
  
#line 388
  @try {
    [((id<FreemarkerTemplateTemplateDirectiveModel>) nil_chk(directiveModel)) executeWithFreemarkerCoreEnvironment:self withJavaUtilMap:args withFreemarkerTemplateTemplateModelArray:outArgs withFreemarkerTemplateTemplateDirectiveBody:nested];
  }
  @finally {
    if (outArgs->size_ > 0) {
      FreemarkerCoreEnvironment_popLocalContext(self);
    }
  }
}


#line 406
- (void)visitAndTransformWithFreemarkerCoreTemplateElement:(FreemarkerCoreTemplateElement *)element
              withFreemarkerTemplateTemplateTransformModel:(id<FreemarkerTemplateTemplateTransformModel>)transform
                                           withJavaUtilMap:(id<JavaUtilMap>)args {
  
#line 411
  @try {
    JavaIoWriter *tw = [((id<FreemarkerTemplateTemplateTransformModel>) nil_chk(transform)) getWriterWithJavaIoWriter:out_ withJavaUtilMap:args];
    if (tw == nil) tw = FreemarkerCoreEnvironment_EMPTY_BODY_WRITER_;
    id<FreemarkerTemplateTransformControl> tc =
#line 415
    [FreemarkerTemplateTransformControl_class_() isInstance:tw] ?
#line 416
    (id<FreemarkerTemplateTransformControl>) check_protocol_cast(tw, @protocol(FreemarkerTemplateTransformControl)) :
#line 417
    nil;
    
#line 419
    JavaIoWriter *prevOut = out_;
    out_ = tw;
    @try {
      if (tc == nil || [tc onStart] != FreemarkerTemplateTransformControl_SKIP_BODY) {
        do {
          if (element != nil) {
            [self visitByHiddingParentWithFreemarkerCoreTemplateElement:element];
          }
        }
        while (
#line 427
        tc != nil && [tc afterBody] == FreemarkerTemplateTransformControl_REPEAT_EVALUATION);
      }
    }
    @catch (JavaLangThrowable *t) {
      @try {
        if (tc != nil) {
          [tc onErrorWithJavaLangThrowable:t];
        }
        else {
          @throw t;
        }
      }
      @catch (FreemarkerTemplateTemplateException *e) {
        @throw e;
      }
      @catch (JavaIoIOException *e) {
        @throw e;
      }
      @catch (JavaLangRuntimeException *e) {
        @throw e;
      }
      @catch (JavaLangError *e) {
        @throw e;
      }
      @catch (JavaLangThrowable *e) {
        @throw new_FreemarkerTemplateUtilityUndeclaredThrowableException_initWithJavaLangThrowable_(e);
      }
    }
    @finally {
      out_ = prevOut;
      [((JavaIoWriter *) nil_chk(tw)) close];
    }
  }
  @catch (FreemarkerTemplateTemplateException *te) {
    FreemarkerCoreEnvironment_handleTemplateExceptionWithFreemarkerTemplateTemplateException_(self, te);
  }
}


#line 468
- (void)visitAttemptRecoverWithFreemarkerCoreTemplateElement:(FreemarkerCoreTemplateElement *)attemptBlock
                             withFreemarkerCoreRecoveryBlock:(FreemarkerCoreRecoveryBlock *)recoveryBlock {
  
#line 470
  JavaIoWriter *prevOut = self->out_;
  JavaIoStringWriter *sw = new_JavaIoStringWriter_init();
  self->out_ = sw;
  FreemarkerTemplateTemplateException *thrownException = nil;
  jboolean lastFIRE = [self setFastInvalidReferenceExceptionsWithBoolean:NO];
  jboolean lastInAttemptBlock = inAttemptBlock_;
  @try {
    inAttemptBlock_ = YES;
    [self visitByHiddingParentWithFreemarkerCoreTemplateElement:attemptBlock];
  }
  @catch (
#line 479
  FreemarkerTemplateTemplateException *te) {
    thrownException = te;
  }
  @finally {
    
#line 482
    inAttemptBlock_ = lastInAttemptBlock;
    [self setFastInvalidReferenceExceptionsWithBoolean:lastFIRE];
    self->out_ = prevOut;
  }
  if (thrownException != nil) {
    if ([((FreemarkerLogLogger *) nil_chk(FreemarkerCoreEnvironment_ATTEMPT_LOGGER_)) isDebugEnabled]) {
      [FreemarkerCoreEnvironment_ATTEMPT_LOGGER_ debugWithNSString:JreStrcat("$$", @"Error in attempt block ",
#line 489
      [((FreemarkerCoreTemplateElement *) nil_chk(attemptBlock)) getStartLocationQuoted]) withJavaLangThrowable:thrownException];
    }
    @try {
      [((JavaUtilArrayList *) nil_chk(recoveredErrorStack_)) addWithId:thrownException];
      [self visitWithFreemarkerCoreTemplateElement:recoveryBlock];
    }
    @finally {
      
#line 495
      (void) [recoveredErrorStack_ removeWithInt:[((JavaUtilArrayList *) nil_chk(recoveredErrorStack_)) size] - 1];
    }
  }
  else {
    
#line 498
    [((JavaIoWriter *) nil_chk(out_)) writeWithNSString:[sw description]];
  }
}


#line 502
- (NSString *)getCurrentRecoveredErrorMessage {
  if ([((JavaUtilArrayList *) nil_chk(recoveredErrorStack_)) isEmpty]) {
    @throw new_FreemarkerCore_MiscTemplateException_initWithFreemarkerCoreEnvironment_withNSString_(self, @".error is not available outside of a #recover block");
  }
  return [((JavaLangThrowable *) nil_chk(((JavaLangThrowable *) check_class_cast([recoveredErrorStack_ getWithInt:[recoveredErrorStack_ size] - 1], [JavaLangThrowable class])))) getMessage];
}


#line 516
- (jboolean)isInAttemptBlock {
  return inAttemptBlock_;
}


#line 524
- (void)invokeNestedContentWithFreemarkerCoreBodyInstruction_Context:(FreemarkerCoreBodyInstruction_Context *)bodyCtx {
  FreemarkerCoreMacro_Context *invokingMacroContext = [self getCurrentMacroContext];
  JavaUtilArrayList *prevLocalContextStack = localContextStack_;
  FreemarkerCoreTemplateElement *nestedContent = ((FreemarkerCoreMacro_Context *) nil_chk(invokingMacroContext))->nestedContent_;
  if (nestedContent != nil) {
    self->currentMacroContext_ = invokingMacroContext->prevMacroContext_;
    currentNamespace_ = invokingMacroContext->nestedContentNamespace_;
    
#line 532
    FreemarkerCoreConfigurable *prevParent;
    jboolean parentReplacementOn = FreemarkerCoreEnvironment_isIcI2322OrLater(self);
    prevParent = [self getParent];
    if (parentReplacementOn) {
      [self setParentWithFreemarkerCoreConfigurable:[((FreemarkerCoreEnvironment_Namespace *) nil_chk(currentNamespace_)) getTemplate]];
    }
    else {
      
#line 538
      legacyParent_ = [((FreemarkerCoreEnvironment_Namespace *) nil_chk(currentNamespace_)) getTemplate];
    }
    
#line 541
    self->localContextStack_ = invokingMacroContext->prevLocalContextStack_;
    if (invokingMacroContext->nestedContentParameterNames_ != nil) {
      FreemarkerCoreEnvironment_pushLocalContextWithFreemarkerCoreLocalContext_(self, bodyCtx);
    }
    @try {
      [self visitWithFreemarkerCoreTemplateElement:nestedContent];
    }
    @finally {
      if (invokingMacroContext->nestedContentParameterNames_ != nil) {
        FreemarkerCoreEnvironment_popLocalContext(self);
      }
      self->currentMacroContext_ = invokingMacroContext;
      currentNamespace_ = [self getMacroNamespaceWithFreemarkerCoreMacro:[invokingMacroContext getMacro]];
      if (parentReplacementOn) {
        [self setParentWithFreemarkerCoreConfigurable:prevParent];
      }
      else {
        
#line 557
        legacyParent_ = prevParent;
      }
      self->localContextStack_ = prevLocalContextStack;
    }
  }
}


#line 567
- (jboolean)visitIteratorBlockWithFreemarkerCoreIteratorBlock_IterationContext:(FreemarkerCoreIteratorBlock_IterationContext *)ictxt {
  
#line 570
  FreemarkerCoreEnvironment_pushLocalContextWithFreemarkerCoreLocalContext_(self, ictxt);
  @try {
    return [((FreemarkerCoreIteratorBlock_IterationContext *) nil_chk(ictxt)) acceptWithFreemarkerCoreEnvironment:self];
  }
  @catch (FreemarkerTemplateTemplateException *te) {
    FreemarkerCoreEnvironment_handleTemplateExceptionWithFreemarkerTemplateTemplateException_(self, te);
    return YES;
  }
  @finally {
    FreemarkerCoreEnvironment_popLocalContext(self);
  }
}


#line 586
- (void)invokeNodeHandlerForWithFreemarkerTemplateTemplateNodeModel:(id<FreemarkerTemplateTemplateNodeModel>)node
                        withFreemarkerTemplateTemplateSequenceModel:(id<FreemarkerTemplateTemplateSequenceModel>)namespaces {
  
#line 589
  if (nodeNamespaces_ == nil) {
    FreemarkerTemplateSimpleSequence *ss = new_FreemarkerTemplateSimpleSequence_initWithInt_(1);
    [ss addWithId:currentNamespace_];
    nodeNamespaces_ = ss;
  }
  jint prevNodeNamespaceIndex = self->nodeNamespaceIndex_;
  NSString *prevNodeName = self->currentNodeName_;
  NSString *prevNodeNS = self->currentNodeNS_;
  id<FreemarkerTemplateTemplateSequenceModel> prevNodeNamespaces = nodeNamespaces_;
  id<FreemarkerTemplateTemplateNodeModel> prevVisitorNode = currentVisitorNode_;
  currentVisitorNode_ = node;
  if (namespaces != nil) {
    self->nodeNamespaces_ = namespaces;
  }
  @try {
    id<FreemarkerTemplateTemplateModel> macroOrTransform = [self getNodeProcessorWithFreemarkerTemplateTemplateNodeModel:node];
    if ([macroOrTransform isKindOfClass:[FreemarkerCoreMacro class]]) {
      [self invokeWithFreemarkerCoreMacro:(FreemarkerCoreMacro *) check_class_cast(macroOrTransform, [FreemarkerCoreMacro class]) withJavaUtilMap:nil withJavaUtilList:nil withJavaUtilList:nil withFreemarkerCoreTemplateElement:nil];
    }
    else if ([FreemarkerTemplateTemplateTransformModel_class_() isInstance:macroOrTransform]) {
      [self visitAndTransformWithFreemarkerCoreTemplateElement:nil withFreemarkerTemplateTemplateTransformModel:(id<FreemarkerTemplateTemplateTransformModel>) check_protocol_cast(macroOrTransform, @protocol(FreemarkerTemplateTemplateTransformModel)) withJavaUtilMap:nil];
    }
    else {
      NSString *nodeType = [((id<FreemarkerTemplateTemplateNodeModel>) nil_chk(node)) getNodeType];
      if (nodeType != nil) {
        
#line 615
        if (([nodeType isEqual:@"text"] && [FreemarkerTemplateTemplateScalarModel_class_() isInstance:node])) {
          
#line 617
          [((JavaIoWriter *) nil_chk(out_)) writeWithNSString:[((id<FreemarkerTemplateTemplateScalarModel>) check_protocol_cast(node, @protocol(FreemarkerTemplateTemplateScalarModel))) getAsString]];
        }
        else if ([nodeType isEqual:@"document"]) {
          [self recurseWithFreemarkerTemplateTemplateNodeModel:node withFreemarkerTemplateTemplateSequenceModel:namespaces];
        }
        else
#line 624
        if (![nodeType isEqual:@"pi"] &&
#line 625
        ![nodeType isEqual:@"comment"] &&
#line 626
        ![nodeType isEqual:@"document_type"]) {
          
#line 628
          @throw new_FreemarkerCore_MiscTemplateException_initWithFreemarkerCoreEnvironment_withNSObjectArray_(
#line 629
          self, FreemarkerCoreEnvironment_noNodeHandlerDefinedDescriptionWithFreemarkerTemplateTemplateNodeModel_withNSString_withNSString_(self, node, [node getNodeNamespace], nodeType));
        }
      }
      else {
        @throw new_FreemarkerCore_MiscTemplateException_initWithFreemarkerCoreEnvironment_withNSObjectArray_(
#line 634
        self, FreemarkerCoreEnvironment_noNodeHandlerDefinedDescriptionWithFreemarkerTemplateTemplateNodeModel_withNSString_withNSString_(self, node, [node getNodeNamespace], @"default"));
      }
    }
  }
  @finally {
    self->currentVisitorNode_ = prevVisitorNode;
    self->nodeNamespaceIndex_ = prevNodeNamespaceIndex;
    self->currentNodeName_ = prevNodeName;
    self->currentNodeNS_ = prevNodeNS;
    self->nodeNamespaces_ = prevNodeNamespaces;
  }
}


#line 647
- (IOSObjectArray *)noNodeHandlerDefinedDescriptionWithFreemarkerTemplateTemplateNodeModel:(id<FreemarkerTemplateTemplateNodeModel>)node
                                                                              withNSString:(NSString *)ns
                                                                              withNSString:(NSString *)nodeType {
  return FreemarkerCoreEnvironment_noNodeHandlerDefinedDescriptionWithFreemarkerTemplateTemplateNodeModel_withNSString_withNSString_(self, node, ns, nodeType);
}


#line 666
- (void)fallback {
  id<FreemarkerTemplateTemplateModel> macroOrTransform = FreemarkerCoreEnvironment_getNodeProcessorWithNSString_withNSString_withInt_(self, currentNodeName_, currentNodeNS_, nodeNamespaceIndex_);
  if ([macroOrTransform isKindOfClass:[FreemarkerCoreMacro class]]) {
    [self invokeWithFreemarkerCoreMacro:(FreemarkerCoreMacro *) check_class_cast(macroOrTransform, [FreemarkerCoreMacro class]) withJavaUtilMap:nil withJavaUtilList:nil withJavaUtilList:nil withFreemarkerCoreTemplateElement:nil];
  }
  else if ([FreemarkerTemplateTemplateTransformModel_class_() isInstance:macroOrTransform]) {
    [self visitAndTransformWithFreemarkerCoreTemplateElement:nil withFreemarkerTemplateTemplateTransformModel:(id<FreemarkerTemplateTemplateTransformModel>) check_protocol_cast(macroOrTransform, @protocol(FreemarkerTemplateTemplateTransformModel)) withJavaUtilMap:nil];
  }
}


#line 679
- (void)invokeWithFreemarkerCoreMacro:(FreemarkerCoreMacro *)macro
                      withJavaUtilMap:(id<JavaUtilMap>)namedArgs
                     withJavaUtilList:(id<JavaUtilList>)positionalArgs
                     withJavaUtilList:(id<JavaUtilList>)bodyParameterNames
    withFreemarkerCoreTemplateElement:(FreemarkerCoreTemplateElement *)nestedBlock {
  
#line 682
  if (macro == FreemarkerCoreMacro_get_DO_NOTHING_MACRO_()) {
    return;
  }
  
#line 686
  FreemarkerCoreEnvironment_pushElementWithFreemarkerCoreTemplateElement_(self, macro);
  @try {
    FreemarkerCoreMacro_Context *macroCtx = new_FreemarkerCoreMacro_Context_initWithFreemarkerCoreMacro_withFreemarkerCoreEnvironment_withFreemarkerCoreTemplateElement_withJavaUtilList_(macro, self, nestedBlock, bodyParameterNames);
    FreemarkerCoreEnvironment_setMacroContextLocalsFromArgumentsWithFreemarkerCoreMacro_Context_withFreemarkerCoreMacro_withJavaUtilMap_withJavaUtilList_(self, macroCtx, macro, namedArgs, positionalArgs);
    
#line 691
    FreemarkerCoreMacro_Context *prevMacroCtx = currentMacroContext_;
    currentMacroContext_ = macroCtx;
    
#line 694
    JavaUtilArrayList *prevLocalContextStack = localContextStack_;
    localContextStack_ = nil;
    
#line 697
    FreemarkerCoreEnvironment_Namespace *prevNamespace = currentNamespace_;
    currentNamespace_ = (FreemarkerCoreEnvironment_Namespace *) check_class_cast([((JavaUtilHashMap *) nil_chk(macroToNamespaceLookup_)) getWithId:macro], [FreemarkerCoreEnvironment_Namespace class]);
    
#line 700
    @try {
      [macroCtx runMacroWithFreemarkerCoreEnvironment:self];
    }
    @catch (
#line 702
    FreemarkerCoreReturnInstruction_Return *re) {
    }
    @catch (FreemarkerTemplateTemplateException *te) {
      FreemarkerCoreEnvironment_handleTemplateExceptionWithFreemarkerTemplateTemplateException_(self, te);
    }
    @finally {
      
#line 707
      currentMacroContext_ = prevMacroCtx;
      localContextStack_ = prevLocalContextStack;
      currentNamespace_ = prevNamespace;
    }
  }
  @finally {
    
#line 712
    FreemarkerCoreEnvironment_popElement(self);
  }
}


#line 719
- (void)setMacroContextLocalsFromArgumentsWithFreemarkerCoreMacro_Context:(FreemarkerCoreMacro_Context *)macroCtx
                                                  withFreemarkerCoreMacro:(FreemarkerCoreMacro *)macro
                                                          withJavaUtilMap:(id<JavaUtilMap>)namedArgs
                                                         withJavaUtilList:(id<JavaUtilList>)positionalArgs {
  FreemarkerCoreEnvironment_setMacroContextLocalsFromArgumentsWithFreemarkerCoreMacro_Context_withFreemarkerCoreMacro_withJavaUtilMap_withJavaUtilList_(self, macroCtx, macro, namedArgs, positionalArgs);
}


#line 788
- (void)visitMacroDefWithFreemarkerCoreMacro:(FreemarkerCoreMacro *)macro {
  (void) [((JavaUtilHashMap *) nil_chk(macroToNamespaceLookup_)) putWithId:macro withId:currentNamespace_];
  [((FreemarkerCoreEnvironment_Namespace *) nil_chk(currentNamespace_)) putWithNSString:[((FreemarkerCoreMacro *) nil_chk(macro)) getName] withId:macro];
}

- (FreemarkerCoreEnvironment_Namespace *)getMacroNamespaceWithFreemarkerCoreMacro:(FreemarkerCoreMacro *)macro {
  return (FreemarkerCoreEnvironment_Namespace *) check_class_cast([((JavaUtilHashMap *) nil_chk(macroToNamespaceLookup_)) getWithId:macro], [FreemarkerCoreEnvironment_Namespace class]);
}

- (void)recurseWithFreemarkerTemplateTemplateNodeModel:(id<FreemarkerTemplateTemplateNodeModel>)node
           withFreemarkerTemplateTemplateSequenceModel:(id<FreemarkerTemplateTemplateSequenceModel>)namespaces {
  
#line 800
  if (node == nil) {
    node = [self getCurrentVisitorNode];
    if (node == nil) {
      @throw new_FreemarkerCore_TemplateModelException_initWithNSString_(
#line 804
      @"The target node of recursion is missing or null.");
    }
  }
  id<FreemarkerTemplateTemplateSequenceModel> children = [((id<FreemarkerTemplateTemplateNodeModel>) nil_chk(node)) getChildNodes];
  if (children == nil) return;
  for (jint i = 0; i < [((id<FreemarkerTemplateTemplateSequenceModel>) nil_chk(children)) size]; i++) {
    id<FreemarkerTemplateTemplateNodeModel> child = (id<FreemarkerTemplateTemplateNodeModel>) check_protocol_cast([children getWithInt:i], @protocol(FreemarkerTemplateTemplateNodeModel));
    if (child != nil) {
      [self invokeNodeHandlerForWithFreemarkerTemplateTemplateNodeModel:child withFreemarkerTemplateTemplateSequenceModel:namespaces];
    }
  }
}


#line 817
- (FreemarkerCoreMacro_Context *)getCurrentMacroContext {
  return currentMacroContext_;
}

- (void)handleTemplateExceptionWithFreemarkerTemplateTemplateException:(FreemarkerTemplateTemplateException *)templateException {
  FreemarkerCoreEnvironment_handleTemplateExceptionWithFreemarkerTemplateTemplateException_(self, templateException);
}


#line 847
- (void)setTemplateExceptionHandlerWithFreemarkerTemplateTemplateExceptionHandler:(id<FreemarkerTemplateTemplateExceptionHandler>)templateExceptionHandler {
  [super setTemplateExceptionHandlerWithFreemarkerTemplateTemplateExceptionHandler:templateExceptionHandler];
  lastThrowable_ = nil;
}

- (void)setLocaleWithJavaUtilLocale:(JavaUtilLocale *)locale {
  JavaUtilLocale *prevLocale = [self getLocale];
  [super setLocaleWithJavaUtilLocale:locale];
  if (![((JavaUtilLocale *) nil_chk(locale)) isEqual:prevLocale]) {
    cachedNumberFormats_ = nil;
    cachedNumberFormat_ = nil;
    
#line 859
    if (cachedTemplateDateFormats_ != nil) {
      for (jint i = 0; i < FreemarkerCoreEnvironment_CACHED_TDFS_LENGTH; i++) {
        FreemarkerCoreTemplateDateFormat *f = IOSObjectArray_Get(cachedTemplateDateFormats_, i);
        if (f != nil && [f isLocaleBound]) {
          (void) IOSObjectArray_Set(cachedTemplateDateFormats_, i, nil);
        }
      }
    }
    
#line 868
    if (cachedXSTemplateDateFormatFactory_ != nil && [cachedXSTemplateDateFormatFactory_ isLocaleBound]) {
      cachedXSTemplateDateFormatFactory_ = nil;
    }
    if (cachedSQLDTXSTemplateDateFormatFactory_ != nil && [cachedSQLDTXSTemplateDateFormatFactory_ isLocaleBound]) {
      cachedSQLDTXSTemplateDateFormatFactory_ = nil;
    }
    
#line 875
    if (cachedISOTemplateDateFormatFactory_ != nil && [cachedISOTemplateDateFormatFactory_ isLocaleBound]) {
      cachedISOTemplateDateFormatFactory_ = nil;
    }
    if (cachedSQLDTISOTemplateDateFormatFactory_ != nil && [cachedSQLDTISOTemplateDateFormatFactory_ isLocaleBound]) {
      cachedSQLDTISOTemplateDateFormatFactory_ = nil;
    }
    
#line 882
    if (cachedJavaTemplateDateFormatFactory_ != nil && [cachedJavaTemplateDateFormatFactory_ isLocaleBound]) {
      cachedJavaTemplateDateFormatFactory_ = nil;
    }
    if (cachedSQLDTJavaTemplateDateFormatFactory_ != nil && [cachedSQLDTJavaTemplateDateFormatFactory_ isLocaleBound]) {
      cachedSQLDTJavaTemplateDateFormatFactory_ = nil;
    }
    
#line 889
    cachedCollator_ = nil;
  }
}


#line 893
- (void)setTimeZoneWithJavaUtilTimeZone:(JavaUtilTimeZone *)timeZone {
  JavaUtilTimeZone *prevTimeZone = [self getTimeZone];
  [super setTimeZoneWithJavaUtilTimeZone:timeZone];
  
#line 897
  if (![((JavaUtilTimeZone *) nil_chk(timeZone)) isEqual:prevTimeZone]) {
    if (cachedTemplateDateFormats_ != nil) {
      for (jint i = 0; i < FreemarkerCoreEnvironment_CACHED_TDFS_SQL_D_T_TZ_OFFS; i++) {
        (void) IOSObjectArray_Set(cachedTemplateDateFormats_, i, nil);
      }
    }
    
#line 904
    cachedXSTemplateDateFormatFactory_ = nil;
    cachedISOTemplateDateFormatFactory_ = nil;
    cachedJavaTemplateDateFormatFactory_ = nil;
    
#line 908
    cachedSQLDateAndTimeTimeZoneSameAsNormal_ = nil;
  }
}


#line 912
- (void)setSQLDateAndTimeTimeZoneWithJavaUtilTimeZone:(JavaUtilTimeZone *)timeZone {
  JavaUtilTimeZone *prevTimeZone = [self getSQLDateAndTimeTimeZone];
  [super setSQLDateAndTimeTimeZoneWithJavaUtilTimeZone:timeZone];
  
#line 916
  if (!FreemarkerCoreEnvironment_nullSafeEqualsWithId_withId_(timeZone, prevTimeZone)) {
    if (cachedTemplateDateFormats_ != nil) {
      for (jint i = FreemarkerCoreEnvironment_CACHED_TDFS_SQL_D_T_TZ_OFFS; i < FreemarkerCoreEnvironment_CACHED_TDFS_LENGTH; i++) {
        (void) IOSObjectArray_Set(cachedTemplateDateFormats_, i, nil);
      }
    }
    
#line 923
    cachedSQLDTXSTemplateDateFormatFactory_ = nil;
    cachedSQLDTISOTemplateDateFormatFactory_ = nil;
    cachedSQLDTJavaTemplateDateFormatFactory_ = nil;
    
#line 927
    cachedSQLDateAndTimeTimeZoneSameAsNormal_ = nil;
  }
}


#line 932
+ (jboolean)nullSafeEqualsWithId:(id)o1
                          withId:(id)o2 {
  return FreemarkerCoreEnvironment_nullSafeEqualsWithId_withId_(o1, o2);
}


#line 942
- (jboolean)isSQLDateAndTimeTimeZoneSameAsNormal {
  if (cachedSQLDateAndTimeTimeZoneSameAsNormal_ == nil) {
    cachedSQLDateAndTimeTimeZoneSameAsNormal_ = JavaLangBoolean_valueOfWithBoolean_(
#line 945
    [self getSQLDateAndTimeTimeZone] == nil ||
#line 946
    [((JavaUtilTimeZone *) nil_chk([self getSQLDateAndTimeTimeZone])) isEqual:[self getTimeZone]]);
  }
  return [((JavaLangBoolean *) nil_chk(cachedSQLDateAndTimeTimeZoneSameAsNormal_)) booleanValue];
}


#line 951
- (void)setURLEscapingCharsetWithNSString:(NSString *)urlEscapingCharset {
  cachedURLEscapingCharsetSet_ = NO;
  [super setURLEscapingCharsetWithNSString:urlEscapingCharset];
}


#line 962
- (void)setOutputEncodingWithNSString:(NSString *)outputEncoding {
  cachedURLEscapingCharsetSet_ = NO;
  [super setOutputEncodingWithNSString:outputEncoding];
}


#line 973
- (NSString *)getEffectiveURLEscapingCharset {
  if (!cachedURLEscapingCharsetSet_) {
    cachedURLEscapingCharset_ = [self getURLEscapingCharset];
    if (cachedURLEscapingCharset_ == nil) {
      cachedURLEscapingCharset_ = [self getOutputEncoding];
    }
    cachedURLEscapingCharsetSet_ = YES;
  }
  return cachedURLEscapingCharset_;
}

- (JavaTextCollator *)getCollator {
  if (cachedCollator_ == nil) {
    cachedCollator_ = JavaTextCollator_getInstanceWithJavaUtilLocale_([self getLocale]);
  }
  return cachedCollator_;
}


#line 996
- (jboolean)applyEqualsOperatorWithFreemarkerTemplateTemplateModel:(id<FreemarkerTemplateTemplateModel>)leftValue
                               withFreemarkerTemplateTemplateModel:(id<FreemarkerTemplateTemplateModel>)rightValue {
  
#line 998
  return FreemarkerCoreEvalUtil_compareWithFreemarkerTemplateTemplateModel_withInt_withFreemarkerTemplateTemplateModel_withFreemarkerCoreEnvironment_(leftValue, FreemarkerCoreEvalUtil_CMP_OP_EQUALS, rightValue, self);
}


#line 1008
- (jboolean)applyEqualsOperatorLenientWithFreemarkerTemplateTemplateModel:(id<FreemarkerTemplateTemplateModel>)leftValue
                                      withFreemarkerTemplateTemplateModel:(id<FreemarkerTemplateTemplateModel>)rightValue {
  
#line 1010
  return FreemarkerCoreEvalUtil_compareLenientWithFreemarkerTemplateTemplateModel_withInt_withFreemarkerTemplateTemplateModel_withFreemarkerCoreEnvironment_(leftValue, FreemarkerCoreEvalUtil_CMP_OP_EQUALS, rightValue, self);
}


#line 1018
- (jboolean)applyLessThanOperatorWithFreemarkerTemplateTemplateModel:(id<FreemarkerTemplateTemplateModel>)leftValue
                                 withFreemarkerTemplateTemplateModel:(id<FreemarkerTemplateTemplateModel>)rightValue {
  
#line 1020
  return FreemarkerCoreEvalUtil_compareWithFreemarkerTemplateTemplateModel_withInt_withFreemarkerTemplateTemplateModel_withFreemarkerCoreEnvironment_(leftValue, FreemarkerCoreEvalUtil_CMP_OP_LESS_THAN, rightValue, self);
}


#line 1028
- (jboolean)applyLessThanOrEqualsOperatorWithFreemarkerTemplateTemplateModel:(id<FreemarkerTemplateTemplateModel>)leftValue
                                         withFreemarkerTemplateTemplateModel:(id<FreemarkerTemplateTemplateModel>)rightValue {
  
#line 1030
  return FreemarkerCoreEvalUtil_compareWithFreemarkerTemplateTemplateModel_withInt_withFreemarkerTemplateTemplateModel_withFreemarkerCoreEnvironment_(leftValue, FreemarkerCoreEvalUtil_CMP_OP_LESS_THAN_EQUALS, rightValue, self);
}


#line 1038
- (jboolean)applyGreaterThanOperatorWithFreemarkerTemplateTemplateModel:(id<FreemarkerTemplateTemplateModel>)leftValue
                                    withFreemarkerTemplateTemplateModel:(id<FreemarkerTemplateTemplateModel>)rightValue {
  
#line 1040
  return FreemarkerCoreEvalUtil_compareWithFreemarkerTemplateTemplateModel_withInt_withFreemarkerTemplateTemplateModel_withFreemarkerCoreEnvironment_(leftValue, FreemarkerCoreEvalUtil_CMP_OP_GREATER_THAN, rightValue, self);
}


#line 1048
- (jboolean)applyWithGreaterThanOrEqualsOperatorWithFreemarkerTemplateTemplateModel:(id<FreemarkerTemplateTemplateModel>)leftValue
                                                withFreemarkerTemplateTemplateModel:(id<FreemarkerTemplateTemplateModel>)rightValue {
  
#line 1050
  return FreemarkerCoreEvalUtil_compareWithFreemarkerTemplateTemplateModel_withInt_withFreemarkerTemplateTemplateModel_withFreemarkerCoreEnvironment_(leftValue, FreemarkerCoreEvalUtil_CMP_OP_GREATER_THAN_EQUALS, rightValue, self);
}


#line 1053
- (void)setOutWithJavaIoWriter:(JavaIoWriter *)outArg {
  self->out_ = outArg;
}

- (JavaIoWriter *)getOut {
  return out_;
}

- (NSString *)formatNumberWithNSNumber:(NSNumber *)number {
  if (cachedNumberFormat_ == nil) {
    cachedNumberFormat_ = [self getNumberFormatObjectWithNSString:[self getNumberFormat]];
  }
  return [((JavaTextNumberFormat *) nil_chk(cachedNumberFormat_)) formatWithId:number];
}

- (void)setNumberFormatWithNSString:(NSString *)formatName {
  [super setNumberFormatWithNSString:formatName];
  cachedNumberFormat_ = nil;
}

- (void)setTimeFormatWithNSString:(NSString *)timeFormat {
  NSString *prevTimeFormat = [self getTimeFormat];
  [super setTimeFormatWithNSString:timeFormat];
  if (![((NSString *) nil_chk(timeFormat)) isEqual:prevTimeFormat]) {
    if (cachedTemplateDateFormats_ != nil) {
      for (jint i = 0; i < FreemarkerCoreEnvironment_CACHED_TDFS_LENGTH; i += FreemarkerCoreEnvironment_CACHED_TDFS_ZONELESS_INPUT_OFFS) {
        (void) IOSObjectArray_Set(cachedTemplateDateFormats_, i + FreemarkerTemplateTemplateDateModel_TIME, nil);
      }
    }
  }
}

- (void)setDateFormatWithNSString:(NSString *)dateFormat {
  NSString *prevDateFormat = [self getDateFormat];
  [super setDateFormatWithNSString:dateFormat];
  if (![((NSString *) nil_chk(dateFormat)) isEqual:prevDateFormat]) {
    if (cachedTemplateDateFormats_ != nil) {
      for (jint i = 0; i < FreemarkerCoreEnvironment_CACHED_TDFS_LENGTH; i += FreemarkerCoreEnvironment_CACHED_TDFS_ZONELESS_INPUT_OFFS) {
        (void) IOSObjectArray_Set(cachedTemplateDateFormats_, i + FreemarkerTemplateTemplateDateModel_DATE, nil);
      }
    }
  }
}

- (void)setDateTimeFormatWithNSString:(NSString *)dateTimeFormat {
  NSString *prevDateTimeFormat = [self getDateTimeFormat];
  [super setDateTimeFormatWithNSString:dateTimeFormat];
  if (![((NSString *) nil_chk(dateTimeFormat)) isEqual:prevDateTimeFormat]) {
    if (cachedTemplateDateFormats_ != nil) {
      for (jint i = 0; i < FreemarkerCoreEnvironment_CACHED_TDFS_LENGTH; i += FreemarkerCoreEnvironment_CACHED_TDFS_ZONELESS_INPUT_OFFS) {
        (void) IOSObjectArray_Set(cachedTemplateDateFormats_, i + FreemarkerTemplateTemplateDateModel_DATETIME, nil);
      }
    }
  }
}

- (FreemarkerTemplateConfiguration *)getConfiguration {
  return [((FreemarkerTemplateTemplate *) nil_chk([self getTemplate])) getConfiguration];
}

- (id<FreemarkerTemplateTemplateModel>)getLastReturnValue {
  return lastReturnValue_;
}

- (void)setLastReturnValueWithFreemarkerTemplateTemplateModel:(id<FreemarkerTemplateTemplateModel>)lastReturnValue {
  self->lastReturnValue_ = lastReturnValue;
}

- (void)clearLastReturnValue {
  self->lastReturnValue_ = nil;
}

- (JavaTextNumberFormat *)getNumberFormatObjectWithNSString:(NSString *)pattern {
  
#line 1127
  if (cachedNumberFormats_ == nil) {
    cachedNumberFormats_ = new_JavaUtilHashMap_init();
  }
  
#line 1131
  JavaTextNumberFormat *format = (JavaTextNumberFormat *) check_class_cast([((id<JavaUtilMap>) nil_chk(cachedNumberFormats_)) getWithId:pattern], [JavaTextNumberFormat class]);
  if (format != nil) {
    
#line 1134
    return format;
  }
  
#line 1138
  @synchronized(FreemarkerCoreEnvironment_JAVA_NUMBER_FORMATS_) {
    
#line 1140
    JavaUtilLocale *locale = [self getLocale];
    FreemarkerCoreEnvironment_NumberFormatKey *fk = new_FreemarkerCoreEnvironment_NumberFormatKey_initWithNSString_withJavaUtilLocale_(pattern, locale);
    format = (JavaTextNumberFormat *) check_class_cast([((id<JavaUtilMap>) nil_chk(FreemarkerCoreEnvironment_JAVA_NUMBER_FORMATS_)) getWithId:fk], [JavaTextNumberFormat class]);
    if (format == nil) {
      
#line 1147
      if ([@"number" isEqual:pattern]) {
        
#line 1149
        format = JavaTextNumberFormat_getNumberInstanceWithJavaUtilLocale_(locale);
      }
      else if ([@"currency" isEqual:pattern]) {
        
#line 1153
        format = JavaTextNumberFormat_getCurrencyInstanceWithJavaUtilLocale_(locale);
      }
      else if ([@"percent" isEqual:pattern]) {
        
#line 1157
        format = JavaTextNumberFormat_getPercentInstanceWithJavaUtilLocale_(locale);
      }
      else if ([@"computer" isEqual:pattern]) {
        
#line 1161
        format = [self getCNumberFormat];
      }
      else {
        
#line 1165
        format = new_JavaTextDecimalFormat_initWithNSString_withJavaTextDecimalFormatSymbols_(pattern, new_JavaTextDecimalFormatSymbols_initWithJavaUtilLocale_([self getLocale]));
      }
      (void) [FreemarkerCoreEnvironment_JAVA_NUMBER_FORMATS_ putWithId:fk withId:format];
    }
  }
  
#line 1172
  format = (JavaTextNumberFormat *) check_class_cast([((JavaTextNumberFormat *) nil_chk(format)) clone], [JavaTextNumberFormat class]);
  (void) [cachedNumberFormats_ putWithId:pattern withId:format];
  return format;
}


#line 1177
- (NSString *)formatDateWithFreemarkerTemplateTemplateDateModel:(id<FreemarkerTemplateTemplateDateModel>)tdm
                                   withFreemarkerCoreExpression:(FreemarkerCoreExpression *)tdmSourceExpr {
  JavaUtilDate *date = FreemarkerCoreEvalUtil_modelToDateWithFreemarkerTemplateTemplateDateModel_withFreemarkerCoreExpression_(tdm, tdmSourceExpr);
  @try {
    jboolean isSQLDateOrTime = FreemarkerCoreEnvironment_isSQLDateOrTimeClassWithIOSClass_([((JavaUtilDate *) nil_chk(date)) getClass]);
    return [((FreemarkerCoreTemplateDateFormat *) nil_chk(FreemarkerCoreEnvironment_getTemplateDateFormatWithInt_withBoolean_withBoolean_withFreemarkerCoreExpression_(self,
#line 1182
    [((id<FreemarkerTemplateTemplateDateModel>) nil_chk(tdm)) getDateType], isSQLDateOrTime, FreemarkerCoreEnvironment_shouldUseSQLDTTimeZoneWithBoolean_(self, isSQLDateOrTime), tdmSourceExpr))) formatWithFreemarkerTemplateTemplateDateModel:
#line 1183
    tdm];
  }
  @catch (
#line 1184
  FreemarkerCoreUnknownDateTypeFormattingUnsupportedException *e) {
    @throw FreemarkerCoreMessageUtil_newCantFormatUnknownTypeDateExceptionWithFreemarkerCoreExpression_withFreemarkerCoreUnknownDateTypeFormattingUnsupportedException_(tdmSourceExpr, e);
  }
  @catch (
#line 1186
  FreemarkerCoreUnformattableDateException *e) {
    @throw FreemarkerCoreMessageUtil_newCantFormatDateExceptionWithFreemarkerCoreExpression_withFreemarkerCoreUnformattableDateException_(tdmSourceExpr, e);
  }
}


#line 1191
- (NSString *)formatDateWithFreemarkerTemplateTemplateDateModel:(id<FreemarkerTemplateTemplateDateModel>)tdm
                                                   withNSString:(NSString *)formatDescriptor
                                   withFreemarkerCoreExpression:(FreemarkerCoreExpression *)tdmSourceExpr {
  
#line 1193
  JavaUtilDate *date = FreemarkerCoreEvalUtil_modelToDateWithFreemarkerTemplateTemplateDateModel_withFreemarkerCoreExpression_(tdm, tdmSourceExpr);
  jboolean isSQLDateOrTime = FreemarkerCoreEnvironment_isSQLDateOrTimeClassWithIOSClass_([((JavaUtilDate *) nil_chk(date)) getClass]);
  @try {
    return [((FreemarkerCoreTemplateDateFormat *) nil_chk(FreemarkerCoreEnvironment_getTemplateDateFormatWithInt_withBoolean_withBoolean_withNSString_withNSString_(self,
#line 1197
    [((id<FreemarkerTemplateTemplateDateModel>) nil_chk(tdm)) getDateType], isSQLDateOrTime, FreemarkerCoreEnvironment_shouldUseSQLDTTimeZoneWithBoolean_(self, isSQLDateOrTime), formatDescriptor, nil))) formatWithFreemarkerTemplateTemplateDateModel:
#line 1198
    tdm];
  }
  @catch (
#line 1199
  FreemarkerCoreUnknownDateTypeFormattingUnsupportedException *e) {
    @throw FreemarkerCoreMessageUtil_newCantFormatUnknownTypeDateExceptionWithFreemarkerCoreExpression_withFreemarkerCoreUnknownDateTypeFormattingUnsupportedException_(tdmSourceExpr, e);
  }
  @catch (
#line 1201
  FreemarkerCoreUnformattableDateException *e) {
    @throw FreemarkerCoreMessageUtil_newCantFormatDateExceptionWithFreemarkerCoreExpression_withFreemarkerCoreUnformattableDateException_(tdmSourceExpr, e);
  }
}


#line 1215
- (FreemarkerCoreTemplateDateFormat *)getTemplateDateFormatWithInt:(jint)dateType
                                                      withIOSClass:(IOSClass *)dateClass
                                      withFreemarkerCoreExpression:(FreemarkerCoreExpression *)dateSourceExpr {
  
#line 1217
  @try {
    jboolean isSQLDateOrTime = FreemarkerCoreEnvironment_isSQLDateOrTimeClassWithIOSClass_(dateClass);
    return FreemarkerCoreEnvironment_getTemplateDateFormatWithInt_withBoolean_withBoolean_withFreemarkerCoreExpression_(self, dateType, isSQLDateOrTime, FreemarkerCoreEnvironment_shouldUseSQLDTTimeZoneWithBoolean_(self, isSQLDateOrTime), dateSourceExpr);
  }
  @catch (
#line 1220
  FreemarkerCoreUnknownDateTypeFormattingUnsupportedException *e) {
    @throw FreemarkerCoreMessageUtil_newCantFormatUnknownTypeDateExceptionWithFreemarkerCoreExpression_withFreemarkerCoreUnknownDateTypeFormattingUnsupportedException_(dateSourceExpr, e);
  }
}


#line 1225
- (FreemarkerCoreTemplateDateFormat *)getTemplateDateFormatWithInt:(jint)dateType
                                                       withBoolean:(jboolean)isSQLDateOrTime
                                                       withBoolean:(jboolean)useSQLDTTZ
                                      withFreemarkerCoreExpression:(FreemarkerCoreExpression *)dateSourceExpr {
  return FreemarkerCoreEnvironment_getTemplateDateFormatWithInt_withBoolean_withBoolean_withFreemarkerCoreExpression_(self, dateType, isSQLDateOrTime, useSQLDTTZ, dateSourceExpr);
}


#line 1276
- (FreemarkerCoreTemplateDateFormat *)getTemplateDateFormatWithInt:(jint)dateType
                                                      withIOSClass:(IOSClass *)dateClass
                                                      withNSString:(NSString *)formatDescriptor
                                      withFreemarkerCoreExpression:(FreemarkerCoreExpression *)dateSourceExpr {
  
#line 1279
  @try {
    jboolean isSQLDateOrTime = FreemarkerCoreEnvironment_isSQLDateOrTimeClassWithIOSClass_(dateClass);
    return FreemarkerCoreEnvironment_getTemplateDateFormatWithInt_withBoolean_withBoolean_withNSString_withNSString_(self,
#line 1282
    dateType, isSQLDateOrTime, FreemarkerCoreEnvironment_shouldUseSQLDTTimeZoneWithBoolean_(self,
#line 1283
    isSQLDateOrTime), formatDescriptor, nil);
  }
  @catch (
#line 1284
  FreemarkerCoreUnknownDateTypeFormattingUnsupportedException *e) {
    @throw FreemarkerCoreMessageUtil_newCantFormatUnknownTypeDateExceptionWithFreemarkerCoreExpression_withFreemarkerCoreUnknownDateTypeFormattingUnsupportedException_(dateSourceExpr, e);
  }
}


#line 1289
- (FreemarkerCoreTemplateDateFormat *)getTemplateDateFormatWithInt:(jint)dateType
                                                       withBoolean:(jboolean)zonelessInput
                                                       withBoolean:(jboolean)useSQLDTTZ
                                                      withNSString:(NSString *)formatDescriptor
                                                      withNSString:(NSString *)sourceCfgSetting {
  return FreemarkerCoreEnvironment_getTemplateDateFormatWithInt_withBoolean_withBoolean_withNSString_withNSString_(self, dateType, zonelessInput, useSQLDTTZ, formatDescriptor, sourceCfgSetting);
}


#line 1357
- (jboolean)shouldUseSQLDTTZWithIOSClass:(IOSClass *)dateClass {
  
#line 1359
  return dateClass != JavaUtilDate_class_() &&
#line 1360
  ![self isSQLDateAndTimeTimeZoneSameAsNormal] && FreemarkerCoreEnvironment_isSQLDateOrTimeClassWithIOSClass_(
#line 1361
  dateClass);
}


#line 1364
- (jboolean)shouldUseSQLDTTimeZoneWithBoolean:(jboolean)sqlDateOrTime {
  return FreemarkerCoreEnvironment_shouldUseSQLDTTimeZoneWithBoolean_(self, sqlDateOrTime);
}


#line 1373
+ (jboolean)isSQLDateOrTimeClassWithIOSClass:(IOSClass *)dateClass {
  return FreemarkerCoreEnvironment_isSQLDateOrTimeClassWithIOSClass_(dateClass);
}


#line 1383
- (jint)getCachedTemplateDateFormatIndexWithInt:(jint)dateType
                                    withBoolean:(jboolean)zonelessInput
                                    withBoolean:(jboolean)sqlDTTZ {
  return FreemarkerCoreEnvironment_getCachedTemplateDateFormatIndexWithInt_withBoolean_withBoolean_(self, dateType, zonelessInput, sqlDTTZ);
}


#line 1396
- (id<FreemarkerTemplateUtilityDateUtil_DateToISO8601CalendarFactory>)getISOBuiltInCalendarFactory {
  if (isoBuiltInCalendarFactory_ == nil) {
    isoBuiltInCalendarFactory_ = new_FreemarkerTemplateUtilityDateUtil_TrivialDateToISO8601CalendarFactory_init();
  }
  return isoBuiltInCalendarFactory_;
}


#line 1408
- (JavaTextNumberFormat *)getCNumberFormat {
  
#line 1411
  if (cNumberFormat_ == nil) {
    cNumberFormat_ = (JavaTextDecimalFormat *) check_class_cast([((JavaTextDecimalFormat *) nil_chk(FreemarkerCoreEnvironment_C_NUMBER_FORMAT_)) clone], [JavaTextDecimalFormat class]);
  }
  return cNumberFormat_;
}

- (id<FreemarkerTemplateTemplateTransformModel>)getTransformWithFreemarkerCoreExpression:(FreemarkerCoreExpression *)exp {
  id<FreemarkerTemplateTemplateTransformModel> ttm = nil;
  id<FreemarkerTemplateTemplateModel> tm = [((FreemarkerCoreExpression *) nil_chk(exp)) evalWithFreemarkerCoreEnvironment:self];
  if ([FreemarkerTemplateTemplateTransformModel_class_() isInstance:tm]) {
    ttm = (id<FreemarkerTemplateTemplateTransformModel>) check_protocol_cast(tm, @protocol(FreemarkerTemplateTemplateTransformModel));
  }
  else if ([exp isKindOfClass:[FreemarkerCoreIdentifier class]]) {
    tm = [((FreemarkerTemplateConfiguration *) nil_chk([self getConfiguration])) getSharedVariableWithNSString:[exp description]];
    if ([FreemarkerTemplateTemplateTransformModel_class_() isInstance:tm]) {
      ttm = (id<FreemarkerTemplateTemplateTransformModel>) check_protocol_cast(tm, @protocol(FreemarkerTemplateTemplateTransformModel));
    }
  }
  return ttm;
}


#line 1438
- (id<FreemarkerTemplateTemplateModel>)getLocalVariableWithNSString:(NSString *)name {
  if (localContextStack_ != nil) {
    for (jint i = [localContextStack_ size] - 1; i >= 0; i--) {
      id<FreemarkerCoreLocalContext> lc = (id<FreemarkerCoreLocalContext>) check_protocol_cast([localContextStack_ getWithInt:i], @protocol(FreemarkerCoreLocalContext));
      id<FreemarkerTemplateTemplateModel> tm = [((id<FreemarkerCoreLocalContext>) nil_chk(lc)) getLocalVariableWithNSString:name];
      if (tm != nil) {
        return tm;
      }
    }
  }
  return currentMacroContext_ == nil ? nil : [currentMacroContext_ getLocalVariableWithNSString:name];
}


#line 1469
- (id<FreemarkerTemplateTemplateModel>)getVariableWithNSString:(NSString *)name {
  id<FreemarkerTemplateTemplateModel> result = [self getLocalVariableWithNSString:name];
  if (result == nil) {
    result = [((FreemarkerCoreEnvironment_Namespace *) nil_chk(currentNamespace_)) getWithNSString:name];
  }
  if (result == nil) {
    result = [self getGlobalVariableWithNSString:name];
  }
  return result;
}


#line 1486
- (id<FreemarkerTemplateTemplateModel>)getGlobalVariableWithNSString:(NSString *)name {
  id<FreemarkerTemplateTemplateModel> result = [((FreemarkerCoreEnvironment_Namespace *) nil_chk(globalNamespace_)) getWithNSString:name];
  if (result == nil) {
    result = [((id<FreemarkerTemplateTemplateHashModel>) nil_chk(rootDataModel_)) getWithNSString:name];
  }
  if (result == nil) {
    result = [((FreemarkerTemplateConfiguration *) nil_chk([self getConfiguration])) getSharedVariableWithNSString:name];
  }
  return result;
}


#line 1503
- (void)setGlobalVariableWithNSString:(NSString *)name
  withFreemarkerTemplateTemplateModel:(id<FreemarkerTemplateTemplateModel>)model {
  [((FreemarkerCoreEnvironment_Namespace *) nil_chk(globalNamespace_)) putWithNSString:name withId:model];
}


#line 1513
- (void)setVariableWithNSString:(NSString *)name
withFreemarkerTemplateTemplateModel:(id<FreemarkerTemplateTemplateModel>)model {
  [((FreemarkerCoreEnvironment_Namespace *) nil_chk(currentNamespace_)) putWithNSString:name withId:model];
}


#line 1525
- (void)setLocalVariableWithNSString:(NSString *)name
 withFreemarkerTemplateTemplateModel:(id<FreemarkerTemplateTemplateModel>)model {
  if (currentMacroContext_ == nil) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"Not executing macro body");
  }
  [((FreemarkerCoreMacro_Context *) nil_chk(currentMacroContext_)) setLocalVarWithNSString:name withFreemarkerTemplateTemplateModel:model];
}


#line 1544
- (id<JavaUtilSet>)getKnownVariableNames {
  
#line 1546
  id<JavaUtilSet> set = [((FreemarkerTemplateConfiguration *) nil_chk([self getConfiguration])) getSharedVariableNames];
  
#line 1549
  if ([FreemarkerTemplateTemplateHashModelEx_class_() isInstance:rootDataModel_]) {
    id<FreemarkerTemplateTemplateModelIterator> rootNames =
#line 1551
    [((id<FreemarkerTemplateTemplateCollectionModel>) nil_chk([((id<FreemarkerTemplateTemplateHashModelEx>) nil_chk(((id<FreemarkerTemplateTemplateHashModelEx>) check_protocol_cast(rootDataModel_, @protocol(FreemarkerTemplateTemplateHashModelEx))))) keys])) iterator];
    while ([((id<FreemarkerTemplateTemplateModelIterator>) nil_chk(rootNames)) hasNext]) {
      [((id<JavaUtilSet>) nil_chk(set)) addWithId:[((id<FreemarkerTemplateTemplateScalarModel>) nil_chk(((id<FreemarkerTemplateTemplateScalarModel>) check_protocol_cast([rootNames next], @protocol(FreemarkerTemplateTemplateScalarModel))))) getAsString]];
    }
  }
  
#line 1558
  for (id<FreemarkerTemplateTemplateModelIterator> tmi = [((id<FreemarkerTemplateTemplateCollectionModel>) nil_chk([((FreemarkerCoreEnvironment_Namespace *) nil_chk(globalNamespace_)) keys])) iterator]; [((id<FreemarkerTemplateTemplateModelIterator>) nil_chk(tmi)) hasNext]; ) {
    [((id<JavaUtilSet>) nil_chk(set)) addWithId:[((id<FreemarkerTemplateTemplateScalarModel>) nil_chk(((id<FreemarkerTemplateTemplateScalarModel>) check_protocol_cast([tmi next], @protocol(FreemarkerTemplateTemplateScalarModel))))) getAsString]];
  }
  
#line 1563
  for (id<FreemarkerTemplateTemplateModelIterator> tmi = [((id<FreemarkerTemplateTemplateCollectionModel>) nil_chk([((FreemarkerCoreEnvironment_Namespace *) nil_chk(currentNamespace_)) keys])) iterator]; [((id<FreemarkerTemplateTemplateModelIterator>) nil_chk(tmi)) hasNext]; ) {
    [((id<JavaUtilSet>) nil_chk(set)) addWithId:[((id<FreemarkerTemplateTemplateScalarModel>) nil_chk(((id<FreemarkerTemplateTemplateScalarModel>) check_protocol_cast([tmi next], @protocol(FreemarkerTemplateTemplateScalarModel))))) getAsString]];
  }
  
#line 1568
  if (currentMacroContext_ != nil) {
    [((id<JavaUtilSet>) nil_chk(set)) addAllWithJavaUtilCollection:[currentMacroContext_ getLocalVariableNames]];
  }
  if (localContextStack_ != nil) {
    for (jint i = [localContextStack_ size] - 1; i >= 0; i--) {
      id<FreemarkerCoreLocalContext> lc = (id<FreemarkerCoreLocalContext>) check_protocol_cast([localContextStack_ getWithInt:i], @protocol(FreemarkerCoreLocalContext));
      [((id<JavaUtilSet>) nil_chk(set)) addAllWithJavaUtilCollection:[((id<FreemarkerCoreLocalContext>) nil_chk(lc)) getLocalVariableNames]];
    }
  }
  return set;
}


#line 1584
- (void)outputInstructionStackWithJavaIoPrintWriter:(JavaIoPrintWriter *)pw {
  FreemarkerCoreEnvironment_outputInstructionStackWithFreemarkerCoreTemplateElementArray_withBoolean_withJavaIoWriter_([self getInstructionStackSnapshot], NO, pw);
  [((JavaIoPrintWriter *) nil_chk(pw)) flush];
}


#line 1597
+ (void)outputInstructionStackWithFreemarkerCoreTemplateElementArray:(IOSObjectArray *)instructionStackSnapshot
                                                         withBoolean:(jboolean)terseMode
                                                    withJavaIoWriter:(JavaIoWriter *)w {
  FreemarkerCoreEnvironment_outputInstructionStackWithFreemarkerCoreTemplateElementArray_withBoolean_withJavaIoWriter_(instructionStackSnapshot, terseMode, w);
}


#line 1667
- (IOSObjectArray *)getInstructionStackSnapshot {
  jint requiredLength = 0;
  jint ln = [((JavaUtilArrayList *) nil_chk(instructionStack_)) size];
  
#line 1671
  for (jint i = 0; i < ln; i++) {
    FreemarkerCoreTemplateElement *stackEl = (FreemarkerCoreTemplateElement *) check_class_cast([instructionStack_ getWithInt:i], [FreemarkerCoreTemplateElement class]);
    if (i == ln || [((FreemarkerCoreTemplateElement *) nil_chk(stackEl)) isShownInStackTrace]) {
      requiredLength++;
    }
  }
  
#line 1678
  if (requiredLength == 0) return nil;
  
#line 1680
  IOSObjectArray *result = [IOSObjectArray newArrayWithLength:requiredLength type:FreemarkerCoreTemplateElement_class_()];
  jint dstIdx = requiredLength - 1;
  for (jint i = 0; i < ln; i++) {
    FreemarkerCoreTemplateElement *stackEl = (FreemarkerCoreTemplateElement *) check_class_cast([instructionStack_ getWithInt:i], [FreemarkerCoreTemplateElement class]);
    if (i == ln || [((FreemarkerCoreTemplateElement *) nil_chk(stackEl)) isShownInStackTrace]) {
      (void) IOSObjectArray_Set(result, dstIdx--, stackEl);
    }
  }
  
#line 1689
  return result;
}


#line 1692
+ (NSString *)instructionStackItemToStringWithFreemarkerCoreTemplateElement:(FreemarkerCoreTemplateElement *)stackEl {
  return FreemarkerCoreEnvironment_instructionStackItemToStringWithFreemarkerCoreTemplateElement_(stackEl);
}


#line 1698
+ (void)appendInstructionStackItemWithFreemarkerCoreTemplateElement:(FreemarkerCoreTemplateElement *)stackEl
                                           withJavaLangStringBuffer:(JavaLangStringBuffer *)sb {
  FreemarkerCoreEnvironment_appendInstructionStackItemWithFreemarkerCoreTemplateElement_withJavaLangStringBuffer_(stackEl, sb);
}


#line 1713
+ (FreemarkerCoreMacro *)getEnclosingMacroWithFreemarkerCoreTemplateElement:(FreemarkerCoreTemplateElement *)stackEl {
  return FreemarkerCoreEnvironment_getEnclosingMacroWithFreemarkerCoreTemplateElement_(stackEl);
}


#line 1721
- (void)pushLocalContextWithFreemarkerCoreLocalContext:(id<FreemarkerCoreLocalContext>)localContext {
  FreemarkerCoreEnvironment_pushLocalContextWithFreemarkerCoreLocalContext_(self, localContext);
}


#line 1728
- (void)popLocalContext {
  FreemarkerCoreEnvironment_popLocalContext(self);
}

- (JavaUtilArrayList *)getLocalContextStack {
  return localContextStack_;
}


#line 1742
- (FreemarkerCoreEnvironment_Namespace *)getNamespaceWithNSString:(NSString *)name {
  if ([((NSString *) nil_chk(name)) hasPrefix:@"/"]) name = [name substring:1];
  if (loadedLibs_ != nil) {
    return (FreemarkerCoreEnvironment_Namespace *) check_class_cast([loadedLibs_ getWithId:name], [FreemarkerCoreEnvironment_Namespace class]);
  }
  else {
    
#line 1747
    return nil;
  }
}


#line 1755
- (FreemarkerCoreEnvironment_Namespace *)getMainNamespace {
  return mainNamespace_;
}


#line 1767
- (FreemarkerCoreEnvironment_Namespace *)getCurrentNamespace {
  return currentNamespace_;
}


#line 1775
- (FreemarkerCoreEnvironment_Namespace *)getGlobalNamespace {
  return globalNamespace_;
}


#line 1782
- (id<FreemarkerTemplateTemplateHashModel>)getDataModel {
  id<FreemarkerTemplateTemplateHashModel> result = new_FreemarkerCoreEnvironment_$3_initWithFreemarkerCoreEnvironment_(self);
  
#line 1797
  if ([FreemarkerTemplateTemplateHashModelEx_class_() isInstance:rootDataModel_]) {
    return new_FreemarkerCoreEnvironment_$4_initWithFreemarkerCoreEnvironment_withFreemarkerTemplateTemplateHashModel_(self, result);
  }
  
#line 1820
  return result;
}


#line 1831
- (id<FreemarkerTemplateTemplateHashModel>)getGlobalVariables {
  return new_FreemarkerCoreEnvironment_$5_initWithFreemarkerCoreEnvironment_(self);
}


#line 1849
- (void)pushElementWithFreemarkerCoreTemplateElement:(FreemarkerCoreTemplateElement *)element {
  FreemarkerCoreEnvironment_pushElementWithFreemarkerCoreTemplateElement_(self, element);
}

- (void)popElement {
  FreemarkerCoreEnvironment_popElement(self);
}

- (void)replaceElementStackTopWithFreemarkerCoreTemplateElement:(FreemarkerCoreTemplateElement *)instr {
  (void) [instructionStack_ setWithInt:[((JavaUtilArrayList *) nil_chk(instructionStack_)) size] - 1 withId:instr];
}

- (id<FreemarkerTemplateTemplateNodeModel>)getCurrentVisitorNode {
  return currentVisitorNode_;
}


#line 1868
- (void)setCurrentVisitorNodeWithFreemarkerTemplateTemplateNodeModel:(id<FreemarkerTemplateTemplateNodeModel>)node {
  currentVisitorNode_ = node;
}

- (id<FreemarkerTemplateTemplateModel>)getNodeProcessorWithFreemarkerTemplateTemplateNodeModel:(id<FreemarkerTemplateTemplateNodeModel>)node {
  NSString *nodeName = [((id<FreemarkerTemplateTemplateNodeModel>) nil_chk(node)) getNodeName];
  if (nodeName == nil) {
    @throw new_FreemarkerCore_MiscTemplateException_initWithFreemarkerCoreEnvironment_withNSString_(self, @"Node name is null.");
  }
  id<FreemarkerTemplateTemplateModel> result = FreemarkerCoreEnvironment_getNodeProcessorWithNSString_withNSString_withInt_(self, nodeName, [node getNodeNamespace], 0);
  
#line 1879
  if (result == nil) {
    NSString *type = [node getNodeType];
    
#line 1883
    if (type == nil) {
      type = @"default";
    }
    result = FreemarkerCoreEnvironment_getNodeProcessorWithNSString_withNSString_withInt_(self, JreStrcat("C$", '@', type), nil, 0);
  }
  
#line 1897
  return result;
}


#line 1900
- (id<FreemarkerTemplateTemplateModel>)getNodeProcessorWithNSString:(NSString *)nodeName
                                                       withNSString:(NSString *)nsURI
                                                            withInt:(jint)startIndex {
  return FreemarkerCoreEnvironment_getNodeProcessorWithNSString_withNSString_withInt_(self, nodeName, nsURI, startIndex);
}


#line 1926
- (id<FreemarkerTemplateTemplateModel>)getNodeProcessorWithFreemarkerCoreEnvironment_Namespace:(FreemarkerCoreEnvironment_Namespace *)ns
                                                                                  withNSString:(NSString *)localName
                                                                                  withNSString:(NSString *)nsURI {
  return FreemarkerCoreEnvironment_getNodeProcessorWithFreemarkerCoreEnvironment_Namespace_withNSString_withNSString_(self, ns, localName, nsURI);
}


#line 1981
- (void)includeWithNSString:(NSString *)name
               withNSString:(NSString *)encoding
                withBoolean:(jboolean)parse {
  
#line 1984
  [self includeWithFreemarkerTemplateTemplate:[self getTemplateForInclusionWithNSString:name withNSString:encoding withBoolean:parse]];
}


#line 1991
- (FreemarkerTemplateTemplate *)getTemplateForInclusionWithNSString:(NSString *)name
                                                       withNSString:(NSString *)encoding
                                                        withBoolean:(jboolean)parse {
  
#line 1993
  return [self getTemplateForInclusionWithNSString:name withNSString:encoding withBoolean:parse withBoolean:NO];
}


#line 2029
- (FreemarkerTemplateTemplate *)getTemplateForInclusionWithNSString:(NSString *)name
                                                       withNSString:(NSString *)encoding
                                                        withBoolean:(jboolean)parseAsFTL
                                                        withBoolean:(jboolean)ignoreMissing {
  
#line 2032
  FreemarkerTemplateTemplate *inheritedTemplate = [self getTemplate];
  
#line 2034
  if (encoding == nil) {
    
#line 2036
    encoding = [((FreemarkerTemplateTemplate *) nil_chk(inheritedTemplate)) getEncoding];
    if (encoding == nil) {
      encoding = [((FreemarkerTemplateConfiguration *) nil_chk([self getConfiguration])) getEncodingWithJavaUtilLocale:[self getLocale]];
    }
  }
  
#line 2042
  id customLookupCondition = [((FreemarkerTemplateTemplate *) nil_chk(inheritedTemplate)) getCustomLookupCondition];
  
#line 2044
  return [((FreemarkerTemplateConfiguration *) nil_chk([self getConfiguration])) getTemplateWithNSString:
#line 2045
  name withJavaUtilLocale:[self getLocale] withId:customLookupCondition withNSString:
#line 2046
  encoding withBoolean:parseAsFTL withBoolean:
#line 2047
  ignoreMissing];
}


#line 2058
- (void)includeWithFreemarkerTemplateTemplate:(FreemarkerTemplateTemplate *)includedTemplate {
  
#line 2061
  FreemarkerTemplateTemplate *prevTemplate;
  jboolean parentReplacementOn = FreemarkerCoreEnvironment_isIcI2322OrLater(self);
  prevTemplate = [self getTemplate];
  if (parentReplacementOn) {
    [self setParentWithFreemarkerCoreConfigurable:includedTemplate];
  }
  else {
    
#line 2067
    legacyParent_ = includedTemplate;
  }
  
#line 2070
  [self importMacrosWithFreemarkerTemplateTemplate:includedTemplate];
  @try {
    [self visitWithFreemarkerCoreTemplateElement:[((FreemarkerTemplateTemplate *) nil_chk(includedTemplate)) getRootTreeNode]];
  }
  @finally {
    if (parentReplacementOn) {
      [self setParentWithFreemarkerCoreConfigurable:prevTemplate];
    }
    else {
      
#line 2078
      legacyParent_ = prevTemplate;
    }
  }
}


#line 2094
- (FreemarkerCoreEnvironment_Namespace *)importLibWithNSString:(NSString *)name
                                                  withNSString:(NSString *)namespace_ {
  
#line 2097
  return [self importLibWithFreemarkerTemplateTemplate:[self getTemplateForImportingWithNSString:name] withNSString:namespace_];
}


#line 2111
- (FreemarkerTemplateTemplate *)getTemplateForImportingWithNSString:(NSString *)name {
  return [self getTemplateForInclusionWithNSString:name withNSString:nil withBoolean:YES];
}


#line 2121
- (FreemarkerCoreEnvironment_Namespace *)importLibWithFreemarkerTemplateTemplate:(FreemarkerTemplateTemplate *)loadedTemplate
                                                                    withNSString:(NSString *)namespace_ {
  
#line 2124
  if (loadedLibs_ == nil) {
    loadedLibs_ = new_JavaUtilHashMap_init();
  }
  NSString *templateName = [((FreemarkerTemplateTemplate *) nil_chk(loadedTemplate)) getName];
  FreemarkerCoreEnvironment_Namespace *existingNamespace = (FreemarkerCoreEnvironment_Namespace *) check_class_cast([((JavaUtilHashMap *) nil_chk(loadedLibs_)) getWithId:templateName], [FreemarkerCoreEnvironment_Namespace class]);
  if (existingNamespace != nil) {
    if (namespace_ != nil) {
      [self setVariableWithNSString:namespace_ withFreemarkerTemplateTemplateModel:existingNamespace];
    }
  }
  else {
    FreemarkerCoreEnvironment_Namespace *newNamespace = new_FreemarkerCoreEnvironment_Namespace_initWithFreemarkerCoreEnvironment_withFreemarkerTemplateTemplate_(self, loadedTemplate);
    if (namespace_ != nil) {
      [((FreemarkerCoreEnvironment_Namespace *) nil_chk(currentNamespace_)) putWithNSString:namespace_ withId:newNamespace];
      if (currentNamespace_ == mainNamespace_) {
        [((FreemarkerCoreEnvironment_Namespace *) nil_chk(globalNamespace_)) putWithNSString:namespace_ withId:newNamespace];
      }
    }
    FreemarkerCoreEnvironment_Namespace *prevNamespace = self->currentNamespace_;
    self->currentNamespace_ = newNamespace;
    (void) [loadedLibs_ putWithId:templateName withId:currentNamespace_];
    JavaIoWriter *prevOut = out_;
    self->out_ = FreemarkerTemplateUtilityNullWriter_get_INSTANCE_();
    @try {
      [self includeWithFreemarkerTemplateTemplate:loadedTemplate];
    }
    @finally {
      
#line 2150
      self->out_ = prevOut;
      self->currentNamespace_ = prevNamespace;
    }
  }
  return (FreemarkerCoreEnvironment_Namespace *) check_class_cast([loadedLibs_ getWithId:templateName], [FreemarkerCoreEnvironment_Namespace class]);
}


#line 2181
- (NSString *)toFullTemplateNameWithNSString:(NSString *)baseName
                                withNSString:(NSString *)targetName {
  
#line 2183
  if ([self isClassicCompatible]) {
    
#line 2185
    return targetName;
  }
  
#line 2188
  return FreemarkerCache_CacheAPI_toAbsoluteNameWithFreemarkerCacheTemplateNameFormat_withNSString_withNSString_([((FreemarkerTemplateConfiguration *) nil_chk([self getConfiguration])) getTemplateNameFormat], baseName, targetName);
}


#line 2191
- (NSString *)renderElementToStringWithFreemarkerCoreTemplateElement:(FreemarkerCoreTemplateElement *)te {
  JavaIoWriter *prevOut = out_;
  @try {
    JavaIoStringWriter *sw = new_JavaIoStringWriter_init();
    self->out_ = sw;
    [self visitWithFreemarkerCoreTemplateElement:te];
    return [sw description];
  }
  @finally {
    self->out_ = prevOut;
  }
}

- (void)importMacrosWithFreemarkerTemplateTemplate:(FreemarkerTemplateTemplate *)template_ {
  for (id<JavaUtilIterator> it = [((id<JavaUtilCollection>) nil_chk([((id<JavaUtilMap>) nil_chk([((FreemarkerTemplateTemplate *) nil_chk(template_)) getMacros])) values])) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    [self visitMacroDefWithFreemarkerCoreMacro:(FreemarkerCoreMacro *) check_class_cast([it next], [FreemarkerCoreMacro class])];
  }
}


#line 2214
- (NSString *)getNamespaceForPrefixWithNSString:(NSString *)prefix {
  return [((FreemarkerTemplateTemplate *) nil_chk([((FreemarkerCoreEnvironment_Namespace *) nil_chk(currentNamespace_)) getTemplate])) getNamespaceForPrefixWithNSString:prefix];
}

- (NSString *)getPrefixForNamespaceWithNSString:(NSString *)nsURI {
  return [((FreemarkerTemplateTemplate *) nil_chk([((FreemarkerCoreEnvironment_Namespace *) nil_chk(currentNamespace_)) getTemplate])) getPrefixForNamespaceWithNSString:nsURI];
}


#line 2225
- (NSString *)getDefaultNS {
  return [((FreemarkerTemplateTemplate *) nil_chk([((FreemarkerCoreEnvironment_Namespace *) nil_chk(currentNamespace_)) getTemplate])) getDefaultNS];
}


#line 2232
- (id)__getitem__WithNSString:(NSString *)key {
  return [((FreemarkerExtBeansBeansWrapper *) nil_chk(FreemarkerExtBeansBeansWrapper_getDefaultInstance())) unwrapWithFreemarkerTemplateTemplateModel:[self getVariableWithNSString:key]];
}


#line 2239
- (void)__setitem__WithNSString:(NSString *)key
                         withId:(id)o {
  [self setGlobalVariableWithNSString:key withFreemarkerTemplateTemplateModel:[((id<FreemarkerTemplateObjectWrapper>) nil_chk([self getObjectWrapper])) wrapWithId:o]];
}


#line 2331
- (jboolean)isIcI2322OrLater {
  return FreemarkerCoreEnvironment_isIcI2322OrLater(self);
}


#line 2338
- (jboolean)getFastInvalidReferenceExceptions {
  return fastInvalidReferenceExceptions_;
}


#line 2347
- (jboolean)setFastInvalidReferenceExceptionsWithBoolean:(jboolean)b {
  jboolean res = fastInvalidReferenceExceptions_;
  fastInvalidReferenceExceptions_ = b;
  return res;
}

+ (void)initialize {
  if (self == [FreemarkerCoreEnvironment class]) {
    FreemarkerCoreEnvironment_threadEnv_ = new_JavaLangThreadLocal_init();
    FreemarkerCoreEnvironment_LOG_ = FreemarkerLogLogger_getLoggerWithNSString_(
#line 91
    @"freemarker.runtime");
    FreemarkerCoreEnvironment_ATTEMPT_LOGGER_ = FreemarkerLogLogger_getLoggerWithNSString_(
#line 92
    @"freemarker.runtime.attempt");
    FreemarkerCoreEnvironment_JAVA_NUMBER_FORMATS_ = new_JavaUtilHashMap_init();
    FreemarkerCoreEnvironment_C_NUMBER_FORMAT_ = new_JavaTextDecimalFormat_initWithNSString_withJavaTextDecimalFormatSymbols_(
#line 100
    @"0.################", new_JavaTextDecimalFormatSymbols_initWithJavaUtilLocale_(JavaUtilLocale_get_US_()));
    {
      
#line 103
      [FreemarkerCoreEnvironment_C_NUMBER_FORMAT_ setGroupingUsedWithBoolean:NO];
      [FreemarkerCoreEnvironment_C_NUMBER_FORMAT_ setDecimalSeparatorAlwaysShownWithBoolean:NO];
    }
    FreemarkerCoreEnvironment_NO_OUT_ARGS_ = [IOSObjectArray newArrayWithLength:
#line 357
    0 type:FreemarkerTemplateTemplateModel_class_()];
    FreemarkerCoreEnvironment_EMPTY_BODY_WRITER_ = new_FreemarkerCoreEnvironment_$1_init();
    J2OBJC_SET_INITIALIZED(FreemarkerCoreEnvironment)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getCurrentEnvironment", NULL, "Lfreemarker.core.Environment;", 0x9, NULL, NULL },
    { "setCurrentEnvironmentWithFreemarkerCoreEnvironment:", "setCurrentEnvironment", "V", 0x8, NULL, NULL },
    { "initWithFreemarkerTemplateTemplate:withFreemarkerTemplateTemplateHashModel:withJavaIoWriter:", "Environment", NULL, 0x1, NULL, NULL },
    { "getTemplate", NULL, "Lfreemarker.template.Template;", 0x1, NULL, NULL },
    { "getTemplate230", NULL, "Lfreemarker.template.Template;", 0x0, NULL, NULL },
    { "getMainTemplate", NULL, "Lfreemarker.template.Template;", 0x1, NULL, NULL },
    { "getCurrentTemplate", NULL, "Lfreemarker.template.Template;", 0x1, NULL, NULL },
    { "getCurrentDirectiveCallPlace", NULL, "Lfreemarker.core.DirectiveCallPlace;", 0x1, NULL, NULL },
    { "clearCachedValues", NULL, "V", 0x2, NULL, NULL },
    { "process", NULL, "V", 0x1, "Lfreemarker.template.TemplateException;Ljava.io.IOException;", NULL },
    { "visitWithFreemarkerCoreTemplateElement:", "visit", "V", 0x0, "Lfreemarker.template.TemplateException;Ljava.io.IOException;", NULL },
    { "visitByHiddingParentWithFreemarkerCoreTemplateElement:", "visitByHiddingParent", "V", 0x0, "Lfreemarker.template.TemplateException;Ljava.io.IOException;", NULL },
    { "replaceTopElementWithFreemarkerCoreTemplateElement:", "replaceTopElement", "Lfreemarker.core.TemplateElement;", 0x2, NULL, NULL },
    { "visitWithFreemarkerCoreTemplateElement:withFreemarkerTemplateTemplateDirectiveModel:withJavaUtilMap:withJavaUtilList:", "visit", "V", 0x1, "Lfreemarker.template.TemplateException;Ljava.io.IOException;", NULL },
    { "visitAndTransformWithFreemarkerCoreTemplateElement:withFreemarkerTemplateTemplateTransformModel:withJavaUtilMap:", "visitAndTransform", "V", 0x0, "Lfreemarker.template.TemplateException;Ljava.io.IOException;", NULL },
    { "visitAttemptRecoverWithFreemarkerCoreTemplateElement:withFreemarkerCoreRecoveryBlock:", "visitAttemptRecover", "V", 0x0, "Lfreemarker.template.TemplateException;Ljava.io.IOException;", NULL },
    { "getCurrentRecoveredErrorMessage", NULL, "Ljava.lang.String;", 0x0, "Lfreemarker.template.TemplateException;", NULL },
    { "isInAttemptBlock", NULL, "Z", 0x1, NULL, NULL },
    { "invokeNestedContentWithFreemarkerCoreBodyInstruction_Context:", "invokeNestedContent", "V", 0x0, "Lfreemarker.template.TemplateException;Ljava.io.IOException;", NULL },
    { "visitIteratorBlockWithFreemarkerCoreIteratorBlock_IterationContext:", "visitIteratorBlock", "Z", 0x0, "Lfreemarker.template.TemplateException;Ljava.io.IOException;", NULL },
    { "invokeNodeHandlerForWithFreemarkerTemplateTemplateNodeModel:withFreemarkerTemplateTemplateSequenceModel:", "invokeNodeHandlerFor", "V", 0x0, "Lfreemarker.template.TemplateException;Ljava.io.IOException;", NULL },
    { "noNodeHandlerDefinedDescriptionWithFreemarkerTemplateTemplateNodeModel:withNSString:withNSString:", "noNodeHandlerDefinedDescription", "[Ljava.lang.Object;", 0x2, "Lfreemarker.template.TemplateModelException;", NULL },
    { "fallback", NULL, "V", 0x0, "Lfreemarker.template.TemplateException;Ljava.io.IOException;", NULL },
    { "invokeWithFreemarkerCoreMacro:withJavaUtilMap:withJavaUtilList:withJavaUtilList:withFreemarkerCoreTemplateElement:", "invoke", "V", 0x0, "Lfreemarker.template.TemplateException;Ljava.io.IOException;", NULL },
    { "setMacroContextLocalsFromArgumentsWithFreemarkerCoreMacro_Context:withFreemarkerCoreMacro:withJavaUtilMap:withJavaUtilList:", "setMacroContextLocalsFromArguments", "V", 0x2, "Lfreemarker.template.TemplateException;Lfreemarker.core._MiscTemplateException;", NULL },
    { "visitMacroDefWithFreemarkerCoreMacro:", "visitMacroDef", "V", 0x0, NULL, NULL },
    { "getMacroNamespaceWithFreemarkerCoreMacro:", "getMacroNamespace", "Lfreemarker.core.Environment$Namespace;", 0x0, NULL, NULL },
    { "recurseWithFreemarkerTemplateTemplateNodeModel:withFreemarkerTemplateTemplateSequenceModel:", "recurse", "V", 0x0, "Lfreemarker.template.TemplateException;Ljava.io.IOException;", NULL },
    { "getCurrentMacroContext", NULL, "Lfreemarker.core.Macro$Context;", 0x0, NULL, NULL },
    { "handleTemplateExceptionWithFreemarkerTemplateTemplateException:", "handleTemplateException", "V", 0x2, "Lfreemarker.template.TemplateException;", NULL },
    { "setTemplateExceptionHandlerWithFreemarkerTemplateTemplateExceptionHandler:", "setTemplateExceptionHandler", "V", 0x1, NULL, NULL },
    { "setLocaleWithJavaUtilLocale:", "setLocale", "V", 0x1, NULL, NULL },
    { "setTimeZoneWithJavaUtilTimeZone:", "setTimeZone", "V", 0x1, NULL, NULL },
    { "setSQLDateAndTimeTimeZoneWithJavaUtilTimeZone:", "setSQLDateAndTimeTimeZone", "V", 0x1, NULL, NULL },
    { "nullSafeEqualsWithId:withId:", "nullSafeEquals", "Z", 0xa, NULL, NULL },
    { "isSQLDateAndTimeTimeZoneSameAsNormal", NULL, "Z", 0x0, NULL, NULL },
    { "setURLEscapingCharsetWithNSString:", "setURLEscapingCharset", "V", 0x1, NULL, NULL },
    { "setOutputEncodingWithNSString:", "setOutputEncoding", "V", 0x1, NULL, NULL },
    { "getEffectiveURLEscapingCharset", NULL, "Ljava.lang.String;", 0x0, NULL, NULL },
    { "getCollator", NULL, "Ljava.text.Collator;", 0x0, NULL, NULL },
    { "applyEqualsOperatorWithFreemarkerTemplateTemplateModel:withFreemarkerTemplateTemplateModel:", "applyEqualsOperator", "Z", 0x1, "Lfreemarker.template.TemplateException;", NULL },
    { "applyEqualsOperatorLenientWithFreemarkerTemplateTemplateModel:withFreemarkerTemplateTemplateModel:", "applyEqualsOperatorLenient", "Z", 0x1, "Lfreemarker.template.TemplateException;", NULL },
    { "applyLessThanOperatorWithFreemarkerTemplateTemplateModel:withFreemarkerTemplateTemplateModel:", "applyLessThanOperator", "Z", 0x1, "Lfreemarker.template.TemplateException;", NULL },
    { "applyLessThanOrEqualsOperatorWithFreemarkerTemplateTemplateModel:withFreemarkerTemplateTemplateModel:", "applyLessThanOrEqualsOperator", "Z", 0x1, "Lfreemarker.template.TemplateException;", NULL },
    { "applyGreaterThanOperatorWithFreemarkerTemplateTemplateModel:withFreemarkerTemplateTemplateModel:", "applyGreaterThanOperator", "Z", 0x1, "Lfreemarker.template.TemplateException;", NULL },
    { "applyWithGreaterThanOrEqualsOperatorWithFreemarkerTemplateTemplateModel:withFreemarkerTemplateTemplateModel:", "applyWithGreaterThanOrEqualsOperator", "Z", 0x1, "Lfreemarker.template.TemplateException;", NULL },
    { "setOutWithJavaIoWriter:", "setOut", "V", 0x1, NULL, NULL },
    { "getOut", NULL, "Ljava.io.Writer;", 0x1, NULL, NULL },
    { "formatNumberWithNSNumber:", "formatNumber", "Ljava.lang.String;", 0x0, NULL, NULL },
    { "setNumberFormatWithNSString:", "setNumberFormat", "V", 0x1, NULL, NULL },
    { "setTimeFormatWithNSString:", "setTimeFormat", "V", 0x1, NULL, NULL },
    { "setDateFormatWithNSString:", "setDateFormat", "V", 0x1, NULL, NULL },
    { "setDateTimeFormatWithNSString:", "setDateTimeFormat", "V", 0x1, NULL, NULL },
    { "getConfiguration", NULL, "Lfreemarker.template.Configuration;", 0x1, NULL, NULL },
    { "getLastReturnValue", NULL, "Lfreemarker.template.TemplateModel;", 0x0, NULL, NULL },
    { "setLastReturnValueWithFreemarkerTemplateTemplateModel:", "setLastReturnValue", "V", 0x0, NULL, NULL },
    { "clearLastReturnValue", NULL, "V", 0x0, NULL, NULL },
    { "getNumberFormatObjectWithNSString:", "getNumberFormatObject", "Ljava.text.NumberFormat;", 0x0, NULL, NULL },
    { "formatDateWithFreemarkerTemplateTemplateDateModel:withFreemarkerCoreExpression:", "formatDate", "Ljava.lang.String;", 0x0, "Lfreemarker.template.TemplateModelException;", NULL },
    { "formatDateWithFreemarkerTemplateTemplateDateModel:withNSString:withFreemarkerCoreExpression:", "formatDate", "Ljava.lang.String;", 0x0, "Lfreemarker.template.TemplateModelException;", NULL },
    { "getTemplateDateFormatWithInt:withIOSClass:withFreemarkerCoreExpression:", "getTemplateDateFormat", "Lfreemarker.core.TemplateDateFormat;", 0x0, "Lfreemarker.template.TemplateModelException;", NULL },
    { "getTemplateDateFormatWithInt:withBoolean:withBoolean:withFreemarkerCoreExpression:", "getTemplateDateFormat", "Lfreemarker.core.TemplateDateFormat;", 0x2, "Lfreemarker.template.TemplateModelException;Lfreemarker.core.UnknownDateTypeFormattingUnsupportedException;", NULL },
    { "getTemplateDateFormatWithInt:withIOSClass:withNSString:withFreemarkerCoreExpression:", "getTemplateDateFormat", "Lfreemarker.core.TemplateDateFormat;", 0x0, "Lfreemarker.template.TemplateModelException;", NULL },
    { "getTemplateDateFormatWithInt:withBoolean:withBoolean:withNSString:withNSString:", "getTemplateDateFormat", "Lfreemarker.core.TemplateDateFormat;", 0x2, "Lfreemarker.template.TemplateModelException;Lfreemarker.core.UnknownDateTypeFormattingUnsupportedException;", NULL },
    { "shouldUseSQLDTTZWithIOSClass:", "shouldUseSQLDTTZ", "Z", 0x0, NULL, NULL },
    { "shouldUseSQLDTTimeZoneWithBoolean:", "shouldUseSQLDTTimeZone", "Z", 0x2, NULL, NULL },
    { "isSQLDateOrTimeClassWithIOSClass:", "isSQLDateOrTimeClass", "Z", 0xa, NULL, NULL },
    { "getCachedTemplateDateFormatIndexWithInt:withBoolean:withBoolean:", "getCachedTemplateDateFormatIndex", "I", 0x2, NULL, NULL },
    { "getISOBuiltInCalendarFactory", NULL, "Lfreemarker.template.utility.DateUtil$DateToISO8601CalendarFactory;", 0x0, NULL, NULL },
    { "getCNumberFormat", NULL, "Ljava.text.NumberFormat;", 0x1, NULL, NULL },
    { "getTransformWithFreemarkerCoreExpression:", "getTransform", "Lfreemarker.template.TemplateTransformModel;", 0x0, "Lfreemarker.template.TemplateException;", NULL },
    { "getLocalVariableWithNSString:", "getLocalVariable", "Lfreemarker.template.TemplateModel;", 0x1, "Lfreemarker.template.TemplateModelException;", NULL },
    { "getVariableWithNSString:", "getVariable", "Lfreemarker.template.TemplateModel;", 0x1, "Lfreemarker.template.TemplateModelException;", NULL },
    { "getGlobalVariableWithNSString:", "getGlobalVariable", "Lfreemarker.template.TemplateModel;", 0x1, "Lfreemarker.template.TemplateModelException;", NULL },
    { "setGlobalVariableWithNSString:withFreemarkerTemplateTemplateModel:", "setGlobalVariable", "V", 0x1, NULL, NULL },
    { "setVariableWithNSString:withFreemarkerTemplateTemplateModel:", "setVariable", "V", 0x1, NULL, NULL },
    { "setLocalVariableWithNSString:withFreemarkerTemplateTemplateModel:", "setLocalVariable", "V", 0x1, NULL, NULL },
    { "getKnownVariableNames", NULL, "Ljava.util.Set;", 0x1, "Lfreemarker.template.TemplateModelException;", NULL },
    { "outputInstructionStackWithJavaIoPrintWriter:", "outputInstructionStack", "V", 0x1, NULL, NULL },
    { "outputInstructionStackWithFreemarkerCoreTemplateElementArray:withBoolean:withJavaIoWriter:", "outputInstructionStack", "V", 0x8, NULL, NULL },
    { "getInstructionStackSnapshot", NULL, "[Lfreemarker.core.TemplateElement;", 0x0, NULL, NULL },
    { "instructionStackItemToStringWithFreemarkerCoreTemplateElement:", "instructionStackItemToString", "Ljava.lang.String;", 0x8, NULL, NULL },
    { "appendInstructionStackItemWithFreemarkerCoreTemplateElement:withJavaLangStringBuffer:", "appendInstructionStackItem", "V", 0x8, NULL, NULL },
    { "getEnclosingMacroWithFreemarkerCoreTemplateElement:", "getEnclosingMacro", "Lfreemarker.core.Macro;", 0xa, NULL, NULL },
    { "pushLocalContextWithFreemarkerCoreLocalContext:", "pushLocalContext", "V", 0x2, NULL, NULL },
    { "popLocalContext", NULL, "V", 0x2, NULL, NULL },
    { "getLocalContextStack", NULL, "Ljava.util.ArrayList;", 0x0, NULL, NULL },
    { "getNamespaceWithNSString:", "getNamespace", "Lfreemarker.core.Environment$Namespace;", 0x1, NULL, NULL },
    { "getMainNamespace", NULL, "Lfreemarker.core.Environment$Namespace;", 0x1, NULL, NULL },
    { "getCurrentNamespace", NULL, "Lfreemarker.core.Environment$Namespace;", 0x1, NULL, NULL },
    { "getGlobalNamespace", NULL, "Lfreemarker.core.Environment$Namespace;", 0x1, NULL, NULL },
    { "getDataModel", NULL, "Lfreemarker.template.TemplateHashModel;", 0x1, NULL, NULL },
    { "getGlobalVariables", NULL, "Lfreemarker.template.TemplateHashModel;", 0x1, NULL, NULL },
    { "pushElementWithFreemarkerCoreTemplateElement:", "pushElement", "V", 0x2, NULL, NULL },
    { "popElement", NULL, "V", 0x2, NULL, NULL },
    { "replaceElementStackTopWithFreemarkerCoreTemplateElement:", "replaceElementStackTop", "V", 0x0, NULL, NULL },
    { "getCurrentVisitorNode", NULL, "Lfreemarker.template.TemplateNodeModel;", 0x1, NULL, NULL },
    { "setCurrentVisitorNodeWithFreemarkerTemplateTemplateNodeModel:", "setCurrentVisitorNode", "V", 0x1, NULL, NULL },
    { "getNodeProcessorWithFreemarkerTemplateTemplateNodeModel:", "getNodeProcessor", "Lfreemarker.template.TemplateModel;", 0x0, "Lfreemarker.template.TemplateException;", NULL },
    { "getNodeProcessorWithNSString:withNSString:withInt:", "getNodeProcessor", "Lfreemarker.template.TemplateModel;", 0x2, "Lfreemarker.template.TemplateException;", NULL },
    { "getNodeProcessorWithFreemarkerCoreEnvironment_Namespace:withNSString:withNSString:", "getNodeProcessor", "Lfreemarker.template.TemplateModel;", 0x2, "Lfreemarker.template.TemplateException;", NULL },
    { "includeWithNSString:withNSString:withBoolean:", "include", "V", 0x1, "Ljava.io.IOException;Lfreemarker.template.TemplateException;", NULL },
    { "getTemplateForInclusionWithNSString:withNSString:withBoolean:", "getTemplateForInclusion", "Lfreemarker.template.Template;", 0x1, "Ljava.io.IOException;", NULL },
    { "getTemplateForInclusionWithNSString:withNSString:withBoolean:withBoolean:", "getTemplateForInclusion", "Lfreemarker.template.Template;", 0x1, "Ljava.io.IOException;", NULL },
    { "includeWithFreemarkerTemplateTemplate:", "include", "V", 0x1, "Lfreemarker.template.TemplateException;Ljava.io.IOException;", NULL },
    { "importLibWithNSString:withNSString:", "importLib", "Lfreemarker.core.Environment$Namespace;", 0x1, "Ljava.io.IOException;Lfreemarker.template.TemplateException;", NULL },
    { "getTemplateForImportingWithNSString:", "getTemplateForImporting", "Lfreemarker.template.Template;", 0x1, "Ljava.io.IOException;", NULL },
    { "importLibWithFreemarkerTemplateTemplate:withNSString:", "importLib", "Lfreemarker.core.Environment$Namespace;", 0x1, "Ljava.io.IOException;Lfreemarker.template.TemplateException;", NULL },
    { "toFullTemplateNameWithNSString:withNSString:", "toFullTemplateName", "Ljava.lang.String;", 0x1, "Lfreemarker.template.MalformedTemplateNameException;", NULL },
    { "renderElementToStringWithFreemarkerCoreTemplateElement:", "renderElementToString", "Ljava.lang.String;", 0x0, "Ljava.io.IOException;Lfreemarker.template.TemplateException;", NULL },
    { "importMacrosWithFreemarkerTemplateTemplate:", "importMacros", "V", 0x0, NULL, NULL },
    { "getNamespaceForPrefixWithNSString:", "getNamespaceForPrefix", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getPrefixForNamespaceWithNSString:", "getPrefixForNamespace", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getDefaultNS", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "__getitem__WithNSString:", "__getitem__", "Ljava.lang.Object;", 0x1, "Lfreemarker.template.TemplateModelException;", NULL },
    { "__setitem__WithNSString:withId:", "__setitem__", "V", 0x1, "Lfreemarker.template.TemplateException;", NULL },
    { "isIcI2322OrLater", NULL, "Z", 0x2, NULL, NULL },
    { "getFastInvalidReferenceExceptions", NULL, "Z", 0x0, NULL, NULL },
    { "setFastInvalidReferenceExceptionsWithBoolean:", "setFastInvalidReferenceExceptions", "Z", 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "threadEnv_", NULL, 0x1a, "Ljava.lang.ThreadLocal;", &FreemarkerCoreEnvironment_threadEnv_, NULL,  },
    { "LOG_", NULL, 0x1a, "Lfreemarker.log.Logger;", &FreemarkerCoreEnvironment_LOG_, NULL,  },
    { "ATTEMPT_LOGGER_", NULL, 0x1a, "Lfreemarker.log.Logger;", &FreemarkerCoreEnvironment_ATTEMPT_LOGGER_, NULL,  },
    { "JAVA_NUMBER_FORMATS_", NULL, 0x1a, "Ljava.util.Map;", &FreemarkerCoreEnvironment_JAVA_NUMBER_FORMATS_, NULL,  },
    { "C_NUMBER_FORMAT_", NULL, 0x1a, "Ljava.text.DecimalFormat;", &FreemarkerCoreEnvironment_C_NUMBER_FORMAT_, NULL,  },
    { "rootDataModel_", NULL, 0x12, "Lfreemarker.template.TemplateHashModel;", NULL, NULL,  },
    { "instructionStack_", NULL, 0x12, "Ljava.util.ArrayList;", NULL, NULL,  },
    { "recoveredErrorStack_", NULL, 0x12, "Ljava.util.ArrayList;", NULL, NULL,  },
    { "cachedNumberFormat_", NULL, 0x2, "Ljava.text.NumberFormat;", NULL, NULL,  },
    { "cachedNumberFormats_", NULL, 0x2, "Ljava.util.Map;", NULL, NULL,  },
    { "cachedTemplateDateFormats_", NULL, 0x2, "[Lfreemarker.core.TemplateDateFormat;", NULL, NULL,  },
    { "CACHED_TDFS_ZONELESS_INPUT_OFFS_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = FreemarkerCoreEnvironment_CACHED_TDFS_ZONELESS_INPUT_OFFS },
    { "CACHED_TDFS_DEF_SYS_TZ_OFFS_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = FreemarkerCoreEnvironment_CACHED_TDFS_DEF_SYS_TZ_OFFS },
    { "CACHED_TDFS_LENGTH_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = FreemarkerCoreEnvironment_CACHED_TDFS_LENGTH },
    { "CACHED_TDFS_SQL_D_T_TZ_OFFS_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = FreemarkerCoreEnvironment_CACHED_TDFS_SQL_D_T_TZ_OFFS },
    { "cachedXSTemplateDateFormatFactory_", NULL, 0x2, "Lfreemarker.core.XSTemplateDateFormatFactory;", NULL, NULL,  },
    { "cachedSQLDTXSTemplateDateFormatFactory_", NULL, 0x2, "Lfreemarker.core.XSTemplateDateFormatFactory;", NULL, NULL,  },
    { "cachedISOTemplateDateFormatFactory_", NULL, 0x2, "Lfreemarker.core.ISOTemplateDateFormatFactory;", NULL, NULL,  },
    { "cachedSQLDTISOTemplateDateFormatFactory_", NULL, 0x2, "Lfreemarker.core.ISOTemplateDateFormatFactory;", NULL, NULL,  },
    { "cachedJavaTemplateDateFormatFactory_", NULL, 0x2, "Lfreemarker.core.JavaTemplateDateFormatFactory;", NULL, NULL,  },
    { "cachedSQLDTJavaTemplateDateFormatFactory_", NULL, 0x2, "Lfreemarker.core.JavaTemplateDateFormatFactory;", NULL, NULL,  },
    { "cachedSQLDateAndTimeTimeZoneSameAsNormal_", NULL, 0x2, "Ljava.lang.Boolean;", NULL, NULL,  },
    { "cNumberFormat_", NULL, 0x2, "Ljava.text.NumberFormat;", NULL, NULL,  },
    { "isoBuiltInCalendarFactory_", NULL, 0x2, "Lfreemarker.template.utility.DateUtil$DateToISO8601CalendarFactory;", NULL, NULL,  },
    { "cachedCollator_", NULL, 0x2, "Ljava.text.Collator;", NULL, NULL,  },
    { "out_", NULL, 0x2, "Ljava.io.Writer;", NULL, NULL,  },
    { "currentMacroContext_", NULL, 0x2, "Lfreemarker.core.Macro$Context;", NULL, NULL,  },
    { "localContextStack_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, NULL,  },
    { "mainNamespace_", NULL, 0x12, "Lfreemarker.core.Environment$Namespace;", NULL, NULL,  },
    { "currentNamespace_", NULL, 0x2, "Lfreemarker.core.Environment$Namespace;", NULL, NULL,  },
    { "globalNamespace_", NULL, 0x2, "Lfreemarker.core.Environment$Namespace;", NULL, NULL,  },
    { "loadedLibs_", NULL, 0x2, "Ljava.util.HashMap;", NULL, NULL,  },
    { "legacyParent_", NULL, 0x2, "Lfreemarker.core.Configurable;", NULL, NULL,  },
    { "inAttemptBlock_", NULL, 0x2, "Z", NULL, NULL,  },
    { "lastThrowable_", NULL, 0x2, "Ljava.lang.Throwable;", NULL, NULL,  },
    { "lastReturnValue_", NULL, 0x2, "Lfreemarker.template.TemplateModel;", NULL, NULL,  },
    { "macroToNamespaceLookup_", NULL, 0x2, "Ljava.util.HashMap;", NULL, NULL,  },
    { "currentVisitorNode_", NULL, 0x2, "Lfreemarker.template.TemplateNodeModel;", NULL, NULL,  },
    { "nodeNamespaces_", NULL, 0x2, "Lfreemarker.template.TemplateSequenceModel;", NULL, NULL,  },
    { "nodeNamespaceIndex_", NULL, 0x2, "I", NULL, NULL,  },
    { "currentNodeName_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "currentNodeNS_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "cachedURLEscapingCharset_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "cachedURLEscapingCharsetSet_", NULL, 0x2, "Z", NULL, NULL,  },
    { "fastInvalidReferenceExceptions_", NULL, 0x2, "Z", NULL, NULL,  },
    { "NO_OUT_ARGS_", NULL, 0x1a, "[Lfreemarker.template.TemplateModel;", &FreemarkerCoreEnvironment_NO_OUT_ARGS_, NULL,  },
    { "TERSE_MODE_INSTRUCTION_STACK_TRACE_LIMIT_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = FreemarkerCoreEnvironment_TERSE_MODE_INSTRUCTION_STACK_TRACE_LIMIT },
    { "EMPTY_BODY_WRITER_", NULL, 0x1a, "Ljava.io.Writer;", &FreemarkerCoreEnvironment_EMPTY_BODY_WRITER_, NULL,  },
  };
  static const char *inner_classes[] = {"Lfreemarker.core.Environment$NestedElementTemplateDirectiveBody;", "Lfreemarker.core.Environment$NumberFormatKey;", "Lfreemarker.core.Environment$Namespace;"};
  static const J2ObjcClassInfo _FreemarkerCoreEnvironment = { 2, "Environment", "freemarker.core", NULL, 0x11, 119, methods, 48, fields, 0, NULL, 3, inner_classes, NULL, NULL };
  return &_FreemarkerCoreEnvironment;
}

@end


#line 187
FreemarkerCoreEnvironment *FreemarkerCoreEnvironment_getCurrentEnvironment() {
  FreemarkerCoreEnvironment_initialize();
  return (FreemarkerCoreEnvironment *) check_class_cast([((JavaLangThreadLocal *) nil_chk(FreemarkerCoreEnvironment_threadEnv_)) get], [FreemarkerCoreEnvironment class]);
}

void FreemarkerCoreEnvironment_setCurrentEnvironmentWithFreemarkerCoreEnvironment_(FreemarkerCoreEnvironment *env) {
  FreemarkerCoreEnvironment_initialize();
  
#line 193
  [((JavaLangThreadLocal *) nil_chk(FreemarkerCoreEnvironment_threadEnv_)) setWithId:env];
}


#line 196
void FreemarkerCoreEnvironment_initWithFreemarkerTemplateTemplate_withFreemarkerTemplateTemplateHashModel_withJavaIoWriter_(FreemarkerCoreEnvironment *self, FreemarkerTemplateTemplate *template_, id<FreemarkerTemplateTemplateHashModel> rootDataModel, JavaIoWriter *outArg) {
  (void) FreemarkerCoreConfigurable_initWithFreemarkerCoreConfigurable_(self,
#line 198
  template_);
  self->instructionStack_ = new_JavaUtilArrayList_init();
  self->recoveredErrorStack_ = new_JavaUtilArrayList_init();
  self->macroToNamespaceLookup_ = new_JavaUtilHashMap_init();
  
#line 199
  self->globalNamespace_ = new_FreemarkerCoreEnvironment_Namespace_initWithFreemarkerCoreEnvironment_withFreemarkerTemplateTemplate_(self, nil);
  self->currentNamespace_ = self->mainNamespace_ = new_FreemarkerCoreEnvironment_Namespace_initWithFreemarkerCoreEnvironment_withFreemarkerTemplateTemplate_(self, template_);
  self->out_ = outArg;
  self->rootDataModel_ = rootDataModel;
  [self importMacrosWithFreemarkerTemplateTemplate:template_];
}


#line 196
FreemarkerCoreEnvironment *new_FreemarkerCoreEnvironment_initWithFreemarkerTemplateTemplate_withFreemarkerTemplateTemplateHashModel_withJavaIoWriter_(FreemarkerTemplateTemplate *template_, id<FreemarkerTemplateTemplateHashModel> rootDataModel, JavaIoWriter *outArg) {
  FreemarkerCoreEnvironment *self = [FreemarkerCoreEnvironment alloc];
  FreemarkerCoreEnvironment_initWithFreemarkerTemplateTemplate_withFreemarkerTemplateTemplateHashModel_withJavaIoWriter_(self, template_, rootDataModel, outArg);
  return self;
}


#line 277
void FreemarkerCoreEnvironment_clearCachedValues(FreemarkerCoreEnvironment *self) {
  self->cachedNumberFormats_ = nil;
  self->cachedNumberFormat_ = nil;
  
#line 281
  self->cachedTemplateDateFormats_ = nil;
  self->cachedXSTemplateDateFormatFactory_ = self->cachedSQLDTXSTemplateDateFormatFactory_ = nil;
  self->cachedISOTemplateDateFormatFactory_ = self->cachedSQLDTISOTemplateDateFormatFactory_ = nil;
  self->cachedJavaTemplateDateFormatFactory_ = self->cachedSQLDTJavaTemplateDateFormatFactory_ = nil;
  
#line 286
  self->cachedCollator_ = nil;
  self->cachedURLEscapingCharset_ = nil;
  self->cachedURLEscapingCharsetSet_ = NO;
}


#line 353
FreemarkerCoreTemplateElement *FreemarkerCoreEnvironment_replaceTopElementWithFreemarkerCoreTemplateElement_(FreemarkerCoreEnvironment *self, FreemarkerCoreTemplateElement *element) {
  return (FreemarkerCoreTemplateElement *) check_class_cast([self->instructionStack_ setWithInt:[((JavaUtilArrayList *) nil_chk(self->instructionStack_)) size] - 1 withId:element], [FreemarkerCoreTemplateElement class]);
}


#line 647
IOSObjectArray *FreemarkerCoreEnvironment_noNodeHandlerDefinedDescriptionWithFreemarkerTemplateTemplateNodeModel_withNSString_withNSString_(FreemarkerCoreEnvironment *self, id<FreemarkerTemplateTemplateNodeModel> node, NSString *ns, NSString *nodeType) {
  
#line 650
  NSString *nsPrefix;
  if (ns != nil) {
    if (((jint) [ns length]) > 0) {
      nsPrefix = @" and namespace ";
    }
    else {
      
#line 655
      nsPrefix = @" and no namespace";
    }
  }
  else {
    
#line 658
    nsPrefix = @"";
    ns = @"";
  }
  return [IOSObjectArray newArrayWithObjects:(id[]){ @"No macro or directive is defined for node named ", new_FreemarkerCore_DelayedJQuote_initWithId_(
#line 662
  [((id<FreemarkerTemplateTemplateNodeModel>) nil_chk(node)) getNodeName]), nsPrefix, ns,
#line 663
  @", and there is no fallback handler called @", nodeType, @" either." } count:7 type:NSObject_class_()];
}


#line 719
void FreemarkerCoreEnvironment_setMacroContextLocalsFromArgumentsWithFreemarkerCoreMacro_Context_withFreemarkerCoreMacro_withJavaUtilMap_withJavaUtilList_(FreemarkerCoreEnvironment *self, FreemarkerCoreMacro_Context *macroCtx, FreemarkerCoreMacro *macro, id<JavaUtilMap> namedArgs, id<JavaUtilList> positionalArgs) {
  
#line 723
  NSString *catchAllParamName = [((FreemarkerCoreMacro *) nil_chk(macro)) getCatchAll];
  if (namedArgs != nil) {
    FreemarkerTemplateSimpleHash *catchAllParamValue;
    if (catchAllParamName != nil) {
      catchAllParamValue = new_FreemarkerTemplateSimpleHash_initWithFreemarkerTemplateObjectWrapper_(nil);
      [((FreemarkerCoreMacro_Context *) nil_chk(macroCtx)) setLocalVarWithNSString:catchAllParamName withFreemarkerTemplateTemplateModel:catchAllParamValue];
    }
    else {
      
#line 730
      catchAllParamValue = nil;
    }
    
#line 733
    for (id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk([namedArgs entrySet])) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
      id<JavaUtilMap_Entry> argNameAndValExp = (id<JavaUtilMap_Entry>) check_protocol_cast([it next], @protocol(JavaUtilMap_Entry));
      NSString *argName = (NSString *) check_class_cast([((id<JavaUtilMap_Entry>) nil_chk(argNameAndValExp)) getKey], [NSString class]);
      jboolean isArgNameDeclared = [macro hasArgNamedWithNSString:argName];
      if (isArgNameDeclared || catchAllParamName != nil) {
        FreemarkerCoreExpression *argValueExp = (FreemarkerCoreExpression *) check_class_cast([argNameAndValExp getValue], [FreemarkerCoreExpression class]);
        id<FreemarkerTemplateTemplateModel> argValue = [((FreemarkerCoreExpression *) nil_chk(argValueExp)) evalWithFreemarkerCoreEnvironment:self];
        if (isArgNameDeclared) {
          [((FreemarkerCoreMacro_Context *) nil_chk(macroCtx)) setLocalVarWithNSString:argName withFreemarkerTemplateTemplateModel:argValue];
        }
        else {
          
#line 743
          [((FreemarkerTemplateSimpleHash *) nil_chk(catchAllParamValue)) putWithNSString:argName withId:argValue];
        }
      }
      else {
        
#line 746
        @throw new_FreemarkerCore_MiscTemplateException_initWithFreemarkerCoreEnvironment_withNSObjectArray_(self, [IOSObjectArray newArrayWithObjects:(id[]){
#line 747
          ([macro isFunction] ? @"Function " : @"Macro "), new_FreemarkerCore_DelayedJQuote_initWithId_([macro getName]),
#line 748
          @" has no parameter with name ", new_FreemarkerCore_DelayedJQuote_initWithId_(argName), @"." } count:5 type:NSObject_class_()]);
        }
      }
    }
    else
#line 751
    if (positionalArgs != nil) {
      FreemarkerTemplateSimpleSequence *catchAllParamValue;
      if (catchAllParamName != nil) {
        catchAllParamValue = new_FreemarkerTemplateSimpleSequence_initWithFreemarkerTemplateObjectWrapper_(nil);
        [((FreemarkerCoreMacro_Context *) nil_chk(macroCtx)) setLocalVarWithNSString:catchAllParamName withFreemarkerTemplateTemplateModel:catchAllParamValue];
      }
      else {
        
#line 757
        catchAllParamValue = nil;
      }
      
#line 760
      IOSObjectArray *argNames = [macro getArgumentNamesInternal];
      jint argsCnt = [positionalArgs size];
      if (((IOSObjectArray *) nil_chk(argNames))->size_ < argsCnt && catchAllParamName == nil) {
        @throw new_FreemarkerCore_MiscTemplateException_initWithFreemarkerCoreEnvironment_withNSObjectArray_(self, [IOSObjectArray newArrayWithObjects:(id[]){
#line 764
          ([macro isFunction] ? @"Function " : @"Macro "), new_FreemarkerCore_DelayedJQuote_initWithId_([macro getName]),
#line 765
          @" only accepts ", new_FreemarkerCore_DelayedToString_initWithInt_(argNames->size_), @" parameters, but got ", new_FreemarkerCore_DelayedToString_initWithInt_(
#line 766
          argsCnt), @"." } count:7 type:NSObject_class_()]);
        }
        for (jint i = 0; i < argsCnt; i++) {
          FreemarkerCoreExpression *argValueExp = (FreemarkerCoreExpression *) check_class_cast([positionalArgs getWithInt:i], [FreemarkerCoreExpression class]);
          id<FreemarkerTemplateTemplateModel> argValue = [((FreemarkerCoreExpression *) nil_chk(argValueExp)) evalWithFreemarkerCoreEnvironment:self];
          @try {
            if (i < argNames->size_) {
              NSString *argName = IOSObjectArray_Get(argNames, i);
              [((FreemarkerCoreMacro_Context *) nil_chk(macroCtx)) setLocalVarWithNSString:argName withFreemarkerTemplateTemplateModel:argValue];
            }
            else {
              
#line 776
              [((FreemarkerTemplateSimpleSequence *) nil_chk(catchAllParamValue)) addWithId:argValue];
            }
          }
          @catch (
#line 778
          JavaLangRuntimeException *re) {
            @throw new_FreemarkerCore_MiscTemplateException_initWithJavaLangThrowable_withFreemarkerCoreEnvironment_(re, self);
          }
        }
      }
    }


#line 821
void FreemarkerCoreEnvironment_handleTemplateExceptionWithFreemarkerTemplateTemplateException_(FreemarkerCoreEnvironment *self, FreemarkerTemplateTemplateException *templateException) {
  
#line 826
  if (self->lastThrowable_ == templateException) {
    @throw templateException;
  }
  self->lastThrowable_ = templateException;
  
#line 833
  if ([((FreemarkerLogLogger *) nil_chk(FreemarkerCoreEnvironment_LOG_)) isErrorEnabled] && ([self isInAttemptBlock] || [self getLogTemplateExceptions])) {
    [FreemarkerCoreEnvironment_LOG_ errorWithNSString:@"Error executing FreeMarker template" withJavaLangThrowable:templateException];
  }
  
#line 839
  if ([templateException isKindOfClass:[FreemarkerCoreStopException class]]) {
    @throw templateException;
  }
  
#line 844
  [((id<FreemarkerTemplateTemplateExceptionHandler>) nil_chk([self getTemplateExceptionHandler])) handleTemplateExceptionWithFreemarkerTemplateTemplateException:templateException withFreemarkerCoreEnvironment:self withJavaIoWriter:self->out_];
}


#line 932
jboolean FreemarkerCoreEnvironment_nullSafeEqualsWithId_withId_(id o1, id o2) {
  FreemarkerCoreEnvironment_initialize();
  
#line 933
  if (o1 == o2) return YES;
  if (o1 == nil || o2 == nil) return NO;
  return [nil_chk(o1) isEqual:o2];
}


#line 1225
FreemarkerCoreTemplateDateFormat *FreemarkerCoreEnvironment_getTemplateDateFormatWithInt_withBoolean_withBoolean_withFreemarkerCoreExpression_(FreemarkerCoreEnvironment *self, jint dateType, jboolean isSQLDateOrTime, jboolean useSQLDTTZ, FreemarkerCoreExpression *dateSourceExpr) {
  
#line 1229
  if (dateType == FreemarkerTemplateTemplateDateModel_UNKNOWN) {
    @throw FreemarkerCoreMessageUtil_newCantFormatUnknownTypeDateExceptionWithFreemarkerCoreExpression_withFreemarkerCoreUnknownDateTypeFormattingUnsupportedException_(dateSourceExpr, nil);
  }
  jint cacheIdx = FreemarkerCoreEnvironment_getCachedTemplateDateFormatIndexWithInt_withBoolean_withBoolean_(self, dateType, isSQLDateOrTime, useSQLDTTZ);
  IOSObjectArray *cachedTemplateDateFormats = self->cachedTemplateDateFormats_;
  if (cachedTemplateDateFormats == nil) {
    cachedTemplateDateFormats = [IOSObjectArray newArrayWithLength:FreemarkerCoreEnvironment_CACHED_TDFS_LENGTH type:FreemarkerCoreTemplateDateFormat_class_()];
    self->cachedTemplateDateFormats_ = cachedTemplateDateFormats;
  }
  FreemarkerCoreTemplateDateFormat *f = IOSObjectArray_Get(nil_chk(cachedTemplateDateFormats), cacheIdx);
  if (f == nil) {
    NSString *settingName;
    NSString *settingValue;
    switch (dateType) {
      case FreemarkerTemplateTemplateDateModel_TIME:
      settingName = FreemarkerCoreConfigurable_get_TIME_FORMAT_KEY_();
      settingValue = [self getTimeFormat];
      break;
      case FreemarkerTemplateTemplateDateModel_DATE:
      settingName = FreemarkerCoreConfigurable_get_DATE_FORMAT_KEY_();
      settingValue = [self getDateFormat];
      break;
      case FreemarkerTemplateTemplateDateModel_DATETIME:
      settingName = FreemarkerCoreConfigurable_get_DATETIME_FORMAT_KEY_();
      settingValue = [self getDateTimeFormat];
      break;
      default:
      @throw new_FreemarkerCore_TemplateModelException_initWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){
#line 1257
        @"Invalid date type enum: ", new_JavaLangInteger_initWithInt_(dateType) } count:2 type:NSObject_class_()]);
      }
      
#line 1260
      f = FreemarkerCoreEnvironment_getTemplateDateFormatWithInt_withBoolean_withBoolean_withNSString_withNSString_(self,
#line 1261
      dateType, isSQLDateOrTime,
#line 1262
      useSQLDTTZ, settingValue, settingName);
      
#line 1264
      (void) IOSObjectArray_Set(cachedTemplateDateFormats, cacheIdx, f);
    }
    return f;
  }


#line 1289
FreemarkerCoreTemplateDateFormat *FreemarkerCoreEnvironment_getTemplateDateFormatWithInt_withBoolean_withBoolean_withNSString_withNSString_(FreemarkerCoreEnvironment *self, jint dateType, jboolean zonelessInput, jboolean useSQLDTTZ, NSString *formatDescriptor, NSString *sourceCfgSetting) {
  
#line 1293
  jint formatDescriptionLen = ((jint) [((NSString *) nil_chk(formatDescriptor)) length]);
  
#line 1295
  JavaUtilTimeZone *timeZone = useSQLDTTZ ? [self getSQLDateAndTimeTimeZone] : [self getTimeZone];
  
#line 1298
  FreemarkerCoreTemplateDateFormatFactory *templateDateFormatFactory;
  if (formatDescriptionLen > 1 &&
#line 1300
  [formatDescriptor charAtWithInt:0] == 'x' &&
#line 1301
  [formatDescriptor charAtWithInt:1] == 's') {
    templateDateFormatFactory = useSQLDTTZ ? self->cachedSQLDTXSTemplateDateFormatFactory_ : self->cachedXSTemplateDateFormatFactory_;
    
#line 1304
    if (templateDateFormatFactory == nil) {
      templateDateFormatFactory = new_FreemarkerCoreXSTemplateDateFormatFactory_initWithJavaUtilTimeZone_(timeZone);
      if (useSQLDTTZ) {
        self->cachedSQLDTXSTemplateDateFormatFactory_ =
#line 1308
        (FreemarkerCoreXSTemplateDateFormatFactory *) check_class_cast(templateDateFormatFactory, [FreemarkerCoreXSTemplateDateFormatFactory class]);
      }
      else {
        
#line 1310
        self->cachedXSTemplateDateFormatFactory_ = (FreemarkerCoreXSTemplateDateFormatFactory *) check_class_cast(templateDateFormatFactory, [FreemarkerCoreXSTemplateDateFormatFactory class]);
      }
    }
  }
  else
#line 1313
  if (formatDescriptionLen > 2 &&
#line 1314
  [formatDescriptor charAtWithInt:0] == 'i' &&
#line 1315
  [formatDescriptor charAtWithInt:1] == 's' &&
#line 1316
  [formatDescriptor charAtWithInt:2] == 'o') {
    templateDateFormatFactory = useSQLDTTZ ? self->cachedSQLDTISOTemplateDateFormatFactory_ : self->cachedISOTemplateDateFormatFactory_;
    
#line 1319
    if (templateDateFormatFactory == nil) {
      templateDateFormatFactory = new_FreemarkerCoreISOTemplateDateFormatFactory_initWithJavaUtilTimeZone_(timeZone);
      if (useSQLDTTZ) {
        self->cachedSQLDTISOTemplateDateFormatFactory_ =
#line 1323
        (FreemarkerCoreISOTemplateDateFormatFactory *) check_class_cast(templateDateFormatFactory, [FreemarkerCoreISOTemplateDateFormatFactory class]);
      }
      else {
        
#line 1325
        self->cachedISOTemplateDateFormatFactory_ = (FreemarkerCoreISOTemplateDateFormatFactory *) check_class_cast(templateDateFormatFactory, [FreemarkerCoreISOTemplateDateFormatFactory class]);
      }
    }
  }
  else {
    
#line 1329
    templateDateFormatFactory = useSQLDTTZ ? self->cachedSQLDTJavaTemplateDateFormatFactory_ : self->cachedJavaTemplateDateFormatFactory_;
    
#line 1331
    if (templateDateFormatFactory == nil) {
      templateDateFormatFactory = new_FreemarkerCoreJavaTemplateDateFormatFactory_initWithJavaUtilTimeZone_withJavaUtilLocale_(timeZone, [self getLocale]);
      if (useSQLDTTZ) {
        self->cachedSQLDTJavaTemplateDateFormatFactory_ =
#line 1335
        (FreemarkerCoreJavaTemplateDateFormatFactory *) check_class_cast(templateDateFormatFactory, [FreemarkerCoreJavaTemplateDateFormatFactory class]);
      }
      else {
        
#line 1337
        self->cachedJavaTemplateDateFormatFactory_ = (FreemarkerCoreJavaTemplateDateFormatFactory *) check_class_cast(templateDateFormatFactory, [FreemarkerCoreJavaTemplateDateFormatFactory class]);
      }
    }
  }
  
#line 1342
  @try {
    return [((FreemarkerCoreTemplateDateFormatFactory *) nil_chk(templateDateFormatFactory)) getWithInt:dateType withBoolean:zonelessInput withNSString:formatDescriptor];
  }
  @catch (
#line 1344
  JavaTextParseException *e) {
    @throw new_FreemarkerCore_TemplateModelException_initWithJavaLangThrowable_withNSObjectArray_([((JavaTextParseException *) nil_chk(e)) getCause], [IOSObjectArray newArrayWithObjects:(id[]){
#line 1346
      (sourceCfgSetting == nil ?
#line 1347
      @"Malformed date/time format descriptor: " : [IOSObjectArray newArrayWithObjects:(id[]){
#line 1349
        @"The value of the \"", sourceCfgSetting,
#line 1350
        @"\" FreeMarker configuration setting is a malformed date/time format descriptor: " } count:3 type:NSObject_class_()]), new_FreemarkerCore_DelayedJQuote_initWithId_(
#line 1352
        formatDescriptor), @". Reason given: ",
#line 1353
        [e getMessage] } count:4 type:NSObject_class_()]);
      }
    }


#line 1364
jboolean FreemarkerCoreEnvironment_shouldUseSQLDTTimeZoneWithBoolean_(FreemarkerCoreEnvironment *self, jboolean sqlDateOrTime) {
  
#line 1366
  return sqlDateOrTime &&
#line 1367
  ![self isSQLDateAndTimeTimeZoneSameAsNormal];
}


#line 1373
jboolean FreemarkerCoreEnvironment_isSQLDateOrTimeClassWithIOSClass_(IOSClass *dateClass) {
  FreemarkerCoreEnvironment_initialize();
  return dateClass != JavaUtilDate_class_() &&
#line 1376
  (dateClass == JavaSqlDate_class_() || dateClass == JavaSqlTime_class_() ||
#line 1377
  (dateClass != JavaSqlTimestamp_class_() &&
#line 1378
  (
#line 1379
  [JavaSqlDate_class_() isAssignableFrom:dateClass] ||
#line 1380
  [JavaSqlTime_class_() isAssignableFrom:dateClass])));
}


#line 1383
jint FreemarkerCoreEnvironment_getCachedTemplateDateFormatIndexWithInt_withBoolean_withBoolean_(FreemarkerCoreEnvironment *self, jint dateType, jboolean zonelessInput, jboolean sqlDTTZ) {
  return dateType +
#line 1385
  (zonelessInput ? FreemarkerCoreEnvironment_CACHED_TDFS_ZONELESS_INPUT_OFFS : 0) +
#line 1386
  (sqlDTTZ ? FreemarkerCoreEnvironment_CACHED_TDFS_SQL_D_T_TZ_OFFS : 0);
}


#line 1597
void FreemarkerCoreEnvironment_outputInstructionStackWithFreemarkerCoreTemplateElementArray_withBoolean_withJavaIoWriter_(IOSObjectArray *instructionStackSnapshot, jboolean terseMode, JavaIoWriter *w) {
  FreemarkerCoreEnvironment_initialize();
  JavaIoPrintWriter *pw = (JavaIoPrintWriter *) check_class_cast(([w isKindOfClass:[JavaIoPrintWriter class]] ? w : nil), [JavaIoPrintWriter class]);
  @try {
    if (instructionStackSnapshot != nil) {
      jint totalFrames = instructionStackSnapshot->size_;
      jint framesToPrint = terseMode ?
#line 1604
      (totalFrames <= FreemarkerCoreEnvironment_TERSE_MODE_INSTRUCTION_STACK_TRACE_LIMIT ?
#line 1605
      totalFrames :
#line 1606
      FreemarkerCoreEnvironment_TERSE_MODE_INSTRUCTION_STACK_TRACE_LIMIT - 1) :
#line 1607
      totalFrames;
      jboolean hideNestringRelatedFrames = terseMode && framesToPrint < totalFrames;
      jint nestingRelatedFramesHidden = 0;
      jint trailingFramesHidden = 0;
      jint framesPrinted = 0;
      for (jint frameIdx = 0; frameIdx < totalFrames; frameIdx++) {
        FreemarkerCoreTemplateElement *stackEl = IOSObjectArray_Get(instructionStackSnapshot, frameIdx);
        jboolean nestingRelatedElement = (frameIdx > 0 && [stackEl isKindOfClass:[FreemarkerCoreBodyInstruction class]]) ||
#line 1615
        (frameIdx > 1 && [IOSObjectArray_Get(instructionStackSnapshot, frameIdx - 1) isKindOfClass:[FreemarkerCoreBodyInstruction class]]);
        if (framesPrinted < framesToPrint) {
          if (!nestingRelatedElement || !hideNestringRelatedFrames) {
            [((JavaIoWriter *) nil_chk(w)) writeWithNSString:frameIdx == 0 ?
#line 1619
            @"\t- Failed at: " :
#line 1620
            (nestingRelatedElement ?
#line 1621
            @"\t~ Reached through: " :
#line 1622
            @"\t- Reached through: ")];
            [w writeWithNSString:FreemarkerCoreEnvironment_instructionStackItemToStringWithFreemarkerCoreTemplateElement_(stackEl)];
            if (pw != nil) [pw println];
            else
#line 1624
            [w writeWithInt:0x000a];
            framesPrinted++;
          }
          else {
            
#line 1627
            nestingRelatedFramesHidden++;
          }
        }
        else {
          
#line 1630
          trailingFramesHidden++;
        }
      }
      
#line 1634
      jboolean hadClosingNotes = NO;
      if (trailingFramesHidden > 0) {
        [((JavaIoWriter *) nil_chk(w)) writeWithNSString:@"\t... (Had "];
        [w writeWithNSString:NSString_valueOfInt_(trailingFramesHidden + nestingRelatedFramesHidden)];
        [w writeWithNSString:@" more, hidden for tersenes)"];
        hadClosingNotes = YES;
      }
      if (nestingRelatedFramesHidden > 0) {
        if (hadClosingNotes) {
          [((JavaIoWriter *) nil_chk(w)) writeWithInt:' '];
        }
        else {
          
#line 1645
          [((JavaIoWriter *) nil_chk(w)) writeWithInt:0x0009];
        }
        [((JavaIoWriter *) nil_chk(w)) writeWithNSString:JreStrcat("$I$", @"(Hidden ", nestingRelatedFramesHidden, @" \"~\" lines for terseness)")];
        if (pw != nil) [pw println];
        else
#line 1648
        [w writeWithInt:0x000a];
        hadClosingNotes = YES;
      }
      if (hadClosingNotes) {
        if (pw != nil) [pw println];
        else
#line 1652
        [((JavaIoWriter *) nil_chk(w)) writeWithInt:0x000a];
      }
    }
    else {
      
#line 1655
      [((JavaIoWriter *) nil_chk(w)) writeWithNSString:@"(The stack was empty)"];
      if (pw != nil) [pw println];
      else
#line 1656
      [w writeWithInt:0x000a];
    }
  }
  @catch (
#line 1658
  JavaIoIOException *e) {
    [((FreemarkerLogLogger *) nil_chk(FreemarkerCoreEnvironment_LOG_)) errorWithNSString:@"Failed to print FTL stack trace" withJavaLangThrowable:e];
  }
}


#line 1692
NSString *FreemarkerCoreEnvironment_instructionStackItemToStringWithFreemarkerCoreTemplateElement_(FreemarkerCoreTemplateElement *stackEl) {
  FreemarkerCoreEnvironment_initialize();
  
#line 1693
  JavaLangStringBuffer *sb = new_JavaLangStringBuffer_init();
  FreemarkerCoreEnvironment_appendInstructionStackItemWithFreemarkerCoreTemplateElement_withJavaLangStringBuffer_(stackEl, sb);
  return [sb description];
}


#line 1698
void FreemarkerCoreEnvironment_appendInstructionStackItemWithFreemarkerCoreTemplateElement_withJavaLangStringBuffer_(FreemarkerCoreTemplateElement *stackEl, JavaLangStringBuffer *sb) {
  FreemarkerCoreEnvironment_initialize();
  
#line 1699
  (void) [((JavaLangStringBuffer *) nil_chk(sb)) appendWithNSString:FreemarkerCoreMessageUtil_shortenWithNSString_withInt_([((FreemarkerCoreTemplateElement *) nil_chk(stackEl)) getDescription], 40)];
  
#line 1701
  (void) [sb appendWithNSString:@"  ["];
  FreemarkerCoreMacro *enclosingMacro = FreemarkerCoreEnvironment_getEnclosingMacroWithFreemarkerCoreTemplateElement_(stackEl);
  if (enclosingMacro != nil) {
    (void) [sb appendWithNSString:FreemarkerCoreMessageUtil_formatLocationForEvaluationErrorWithFreemarkerCoreMacro_withInt_withInt_(
#line 1705
    enclosingMacro, stackEl->beginLine_, stackEl->beginColumn_)];
  }
  else {
    
#line 1707
    (void) [sb appendWithNSString:FreemarkerCoreMessageUtil_formatLocationForEvaluationErrorWithFreemarkerTemplateTemplate_withInt_withInt_(
#line 1708
    [stackEl getTemplate], stackEl->beginLine_, stackEl->beginColumn_)];
  }
  (void) [sb appendWithNSString:@"]"];
}


#line 1713
FreemarkerCoreMacro *FreemarkerCoreEnvironment_getEnclosingMacroWithFreemarkerCoreTemplateElement_(FreemarkerCoreTemplateElement *stackEl) {
  FreemarkerCoreEnvironment_initialize();
  
#line 1714
  while (stackEl != nil) {
    if ([stackEl isKindOfClass:[FreemarkerCoreMacro class]]) return (FreemarkerCoreMacro *) check_class_cast(stackEl, [FreemarkerCoreMacro class]);
    stackEl = [((FreemarkerCoreTemplateElement *) nil_chk(stackEl)) getParentElement];
  }
  return nil;
}


#line 1721
void FreemarkerCoreEnvironment_pushLocalContextWithFreemarkerCoreLocalContext_(FreemarkerCoreEnvironment *self, id<FreemarkerCoreLocalContext> localContext) {
  if (self->localContextStack_ == nil) {
    self->localContextStack_ = new_JavaUtilArrayList_init();
  }
  [((JavaUtilArrayList *) nil_chk(self->localContextStack_)) addWithId:localContext];
}

void FreemarkerCoreEnvironment_popLocalContext(FreemarkerCoreEnvironment *self) {
  (void) [self->localContextStack_ removeWithInt:[((JavaUtilArrayList *) nil_chk(self->localContextStack_)) size] - 1];
}


#line 1849
void FreemarkerCoreEnvironment_pushElementWithFreemarkerCoreTemplateElement_(FreemarkerCoreEnvironment *self, FreemarkerCoreTemplateElement *element) {
  [((JavaUtilArrayList *) nil_chk(self->instructionStack_)) addWithId:element];
}

void FreemarkerCoreEnvironment_popElement(FreemarkerCoreEnvironment *self) {
  (void) [self->instructionStack_ removeWithInt:[((JavaUtilArrayList *) nil_chk(self->instructionStack_)) size] - 1];
}


#line 1900
id<FreemarkerTemplateTemplateModel> FreemarkerCoreEnvironment_getNodeProcessorWithNSString_withNSString_withInt_(FreemarkerCoreEnvironment *self, NSString *nodeName, NSString *nsURI, jint startIndex) {
  
#line 1903
  id<FreemarkerTemplateTemplateModel> result = nil;
  jint i;
  for (i = startIndex; i < [((id<FreemarkerTemplateTemplateSequenceModel>) nil_chk(self->nodeNamespaces_)) size]; i++) {
    FreemarkerCoreEnvironment_Namespace *ns = nil;
    @try {
      ns = (FreemarkerCoreEnvironment_Namespace *) check_class_cast([self->nodeNamespaces_ getWithInt:i], [FreemarkerCoreEnvironment_Namespace class]);
    }
    @catch (
#line 1909
    JavaLangClassCastException *cce) {
      @throw new_FreemarkerCore_MiscTemplateException_initWithFreemarkerCoreEnvironment_withNSString_(self, @"A \"using\" clause should contain a sequence of namespaces or strings that indicate the location of importable macro libraries.");
    }
    
#line 1914
    result = FreemarkerCoreEnvironment_getNodeProcessorWithFreemarkerCoreEnvironment_Namespace_withNSString_withNSString_(self, ns, nodeName, nsURI);
    if (result != nil)
#line 1916
    break;
  }
  if (result != nil) {
    self->nodeNamespaceIndex_ = i + 1;
    self->currentNodeName_ = nodeName;
    self->currentNodeNS_ = nsURI;
  }
  return result;
}


#line 1926
id<FreemarkerTemplateTemplateModel> FreemarkerCoreEnvironment_getNodeProcessorWithFreemarkerCoreEnvironment_Namespace_withNSString_withNSString_(FreemarkerCoreEnvironment *self, FreemarkerCoreEnvironment_Namespace *ns, NSString *localName, NSString *nsURI) {
  id<FreemarkerTemplateTemplateModel> result = nil;
  if (nsURI == nil) {
    result = [((FreemarkerCoreEnvironment_Namespace *) nil_chk(ns)) getWithNSString:localName];
    if (!([result isKindOfClass:[FreemarkerCoreMacro class]]) && !([FreemarkerTemplateTemplateTransformModel_class_() isInstance:result])) {
      result = nil;
    }
  }
  else {
    
#line 1934
    FreemarkerTemplateTemplate *template_ = [((FreemarkerCoreEnvironment_Namespace *) nil_chk(ns)) getTemplate];
    NSString *prefix = [((FreemarkerTemplateTemplate *) nil_chk(template_)) getPrefixForNamespaceWithNSString:nsURI];
    if (prefix == nil) {
      
#line 1939
      return nil;
    }
    if (((jint) [((NSString *) nil_chk(prefix)) length]) > 0) {
      result = [ns getWithNSString:JreStrcat("$C$", prefix, ':', localName)];
      if (!([result isKindOfClass:[FreemarkerCoreMacro class]]) && !([FreemarkerTemplateTemplateTransformModel_class_() isInstance:result])) {
        result = nil;
      }
    }
    else {
      
#line 1947
      if (((jint) [nsURI length]) == 0) {
        result = [ns getWithNSString:JreStrcat("$C$", FreemarkerTemplateTemplate_get_NO_NS_PREFIX_(), ':', localName)];
        if (!([result isKindOfClass:[FreemarkerCoreMacro class]]) && !([FreemarkerTemplateTemplateTransformModel_class_() isInstance:result])) {
          result = nil;
        }
      }
      if ([nsURI isEqual:[template_ getDefaultNS]]) {
        result = [ns getWithNSString:JreStrcat("$C$", FreemarkerTemplateTemplate_get_DEFAULT_NAMESPACE_PREFIX_(), ':', localName)];
        if (!([result isKindOfClass:[FreemarkerCoreMacro class]]) && !([FreemarkerTemplateTemplateTransformModel_class_() isInstance:result])) {
          result = nil;
        }
      }
      if (result == nil) {
        result = [ns getWithNSString:localName];
        if (!([result isKindOfClass:[FreemarkerCoreMacro class]]) && !([FreemarkerTemplateTemplateTransformModel_class_() isInstance:result])) {
          result = nil;
        }
      }
    }
  }
  return result;
}


#line 2331
jboolean FreemarkerCoreEnvironment_isIcI2322OrLater(FreemarkerCoreEnvironment *self) {
  return [((FreemarkerTemplateVersion *) nil_chk([((FreemarkerTemplateConfiguration *) nil_chk([self getConfiguration])) getIncompatibleImprovements])) intValue] < FreemarkerTemplate_TemplateAPI_get_VERSION_INT_2_3_22_();
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreEnvironment)


#line 2243
@implementation FreemarkerCoreEnvironment_NestedElementTemplateDirectiveBody


#line 2247
- (instancetype)initWithFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)outer$
                withFreemarkerCoreTemplateElement:(FreemarkerCoreTemplateElement *)element {
  FreemarkerCoreEnvironment_NestedElementTemplateDirectiveBody_initWithFreemarkerCoreEnvironment_withFreemarkerCoreTemplateElement_(self, outer$, element);
  return self;
}


#line 2251
- (void)renderWithJavaIoWriter:(JavaIoWriter *)newOut {
  JavaIoWriter *prevOut = this$0_->out_;
  this$0_->out_ = newOut;
  @try {
    [this$0_ visitWithFreemarkerCoreTemplateElement:element_];
  }
  @finally {
    this$0_->out_ = prevOut;
  }
}

- (FreemarkerCoreTemplateElement *)getElement {
  return element_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithFreemarkerCoreEnvironment:withFreemarkerCoreTemplateElement:", "NestedElementTemplateDirectiveBody", NULL, 0x2, NULL, NULL },
    { "renderWithJavaIoWriter:", "render", "V", 0x1, "Lfreemarker.template.TemplateException;Ljava.io.IOException;", NULL },
    { "getElement", NULL, "Lfreemarker.core.TemplateElement;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lfreemarker.core.Environment;", NULL, NULL,  },
    { "element_", NULL, 0x12, "Lfreemarker.core.TemplateElement;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerCoreEnvironment_NestedElementTemplateDirectiveBody = { 2, "NestedElementTemplateDirectiveBody", "freemarker.core", "Environment", 0x10, 3, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerCoreEnvironment_NestedElementTemplateDirectiveBody;
}

@end


#line 2247
void FreemarkerCoreEnvironment_NestedElementTemplateDirectiveBody_initWithFreemarkerCoreEnvironment_withFreemarkerCoreTemplateElement_(FreemarkerCoreEnvironment_NestedElementTemplateDirectiveBody *self, FreemarkerCoreEnvironment *outer$, FreemarkerCoreTemplateElement *element) {
  self->this$0_ = outer$;
  (void) NSObject_init(self);
  
#line 2248
  self->element_ = element;
}


#line 2247
FreemarkerCoreEnvironment_NestedElementTemplateDirectiveBody *new_FreemarkerCoreEnvironment_NestedElementTemplateDirectiveBody_initWithFreemarkerCoreEnvironment_withFreemarkerCoreTemplateElement_(FreemarkerCoreEnvironment *outer$, FreemarkerCoreTemplateElement *element) {
  FreemarkerCoreEnvironment_NestedElementTemplateDirectiveBody *self = [FreemarkerCoreEnvironment_NestedElementTemplateDirectiveBody alloc];
  FreemarkerCoreEnvironment_NestedElementTemplateDirectiveBody_initWithFreemarkerCoreEnvironment_withFreemarkerCoreTemplateElement_(self, outer$, element);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreEnvironment_NestedElementTemplateDirectiveBody)


#line 2268
@implementation FreemarkerCoreEnvironment_NumberFormatKey


#line 2273
- (instancetype)initWithNSString:(NSString *)pattern
              withJavaUtilLocale:(JavaUtilLocale *)locale {
  FreemarkerCoreEnvironment_NumberFormatKey_initWithNSString_withJavaUtilLocale_(self, pattern, locale);
  return self;
}

- (jboolean)isEqual:(id)o {
  
#line 2281
  if ([o isKindOfClass:[FreemarkerCoreEnvironment_NumberFormatKey class]]) {
    
#line 2283
    FreemarkerCoreEnvironment_NumberFormatKey *fk = (FreemarkerCoreEnvironment_NumberFormatKey *) check_class_cast(o, [FreemarkerCoreEnvironment_NumberFormatKey class]);
    return [((NSString *) nil_chk(((FreemarkerCoreEnvironment_NumberFormatKey *) nil_chk(fk))->pattern_)) isEqual:pattern_] && [((JavaUtilLocale *) nil_chk(fk->locale_)) isEqual:locale_];
  }
  return NO;
}


#line 2289
- (NSUInteger)hash {
  
#line 2291
  return ((jint) [((NSString *) nil_chk(pattern_)) hash]) ^ ((jint) [((JavaUtilLocale *) nil_chk(locale_)) hash]);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithNSString:withJavaUtilLocale:", "NumberFormatKey", NULL, 0x0, NULL, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL, NULL },
    { "hash", "hashCode", "I", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "pattern_", NULL, 0x12, "Ljava.lang.String;", NULL, NULL,  },
    { "locale_", NULL, 0x12, "Ljava.util.Locale;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerCoreEnvironment_NumberFormatKey = { 2, "NumberFormatKey", "freemarker.core", "Environment", 0x1a, 3, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerCoreEnvironment_NumberFormatKey;
}

@end


#line 2273
void FreemarkerCoreEnvironment_NumberFormatKey_initWithNSString_withJavaUtilLocale_(FreemarkerCoreEnvironment_NumberFormatKey *self, NSString *pattern, JavaUtilLocale *locale) {
  (void) NSObject_init(self);
  self->pattern_ = pattern;
  self->locale_ = locale;
}


#line 2273
FreemarkerCoreEnvironment_NumberFormatKey *new_FreemarkerCoreEnvironment_NumberFormatKey_initWithNSString_withJavaUtilLocale_(NSString *pattern, JavaUtilLocale *locale) {
  FreemarkerCoreEnvironment_NumberFormatKey *self = [FreemarkerCoreEnvironment_NumberFormatKey alloc];
  FreemarkerCoreEnvironment_NumberFormatKey_initWithNSString_withJavaUtilLocale_(self, pattern, locale);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreEnvironment_NumberFormatKey)


#line 2295
@implementation FreemarkerCoreEnvironment_Namespace


#line 2299
- (instancetype)initWithFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)outer$ {
  FreemarkerCoreEnvironment_Namespace_initWithFreemarkerCoreEnvironment_(self, outer$);
  return self;
}


#line 2303
- (instancetype)initWithFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)outer$
                   withFreemarkerTemplateTemplate:(FreemarkerTemplateTemplate *)template_ {
  FreemarkerCoreEnvironment_Namespace_initWithFreemarkerCoreEnvironment_withFreemarkerTemplateTemplate_(self, outer$, template_);
  return self;
}


#line 2310
- (FreemarkerTemplateTemplate *)getTemplate {
  return template__ == nil ? [this$0_ getTemplate] : template__;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithFreemarkerCoreEnvironment:", "Namespace", NULL, 0x0, NULL, NULL },
    { "initWithFreemarkerCoreEnvironment:withFreemarkerTemplateTemplate:", "Namespace", NULL, 0x0, NULL, NULL },
    { "getTemplate", NULL, "Lfreemarker.template.Template;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lfreemarker.core.Environment;", NULL, NULL,  },
    { "template__", "template", 0x12, "Lfreemarker.template.Template;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _FreemarkerCoreEnvironment_Namespace = { 2, "Namespace", "freemarker.core", "Environment", 0x1, 3, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerCoreEnvironment_Namespace;
}

@end


#line 2299
void FreemarkerCoreEnvironment_Namespace_initWithFreemarkerCoreEnvironment_(FreemarkerCoreEnvironment_Namespace *self, FreemarkerCoreEnvironment *outer$) {
  self->this$0_ = outer$;
  (void) FreemarkerTemplateSimpleHash_init(self);
  
#line 2300
  self->template__ = [outer$ getTemplate];
}


#line 2299
FreemarkerCoreEnvironment_Namespace *new_FreemarkerCoreEnvironment_Namespace_initWithFreemarkerCoreEnvironment_(FreemarkerCoreEnvironment *outer$) {
  FreemarkerCoreEnvironment_Namespace *self = [FreemarkerCoreEnvironment_Namespace alloc];
  FreemarkerCoreEnvironment_Namespace_initWithFreemarkerCoreEnvironment_(self, outer$);
  return self;
}


#line 2303
void FreemarkerCoreEnvironment_Namespace_initWithFreemarkerCoreEnvironment_withFreemarkerTemplateTemplate_(FreemarkerCoreEnvironment_Namespace *self, FreemarkerCoreEnvironment *outer$, FreemarkerTemplateTemplate *template_) {
  self->this$0_ = outer$;
  (void) FreemarkerTemplateSimpleHash_init(self);
  
#line 2304
  self->template__ = template_;
}


#line 2303
FreemarkerCoreEnvironment_Namespace *new_FreemarkerCoreEnvironment_Namespace_initWithFreemarkerCoreEnvironment_withFreemarkerTemplateTemplate_(FreemarkerCoreEnvironment *outer$, FreemarkerTemplateTemplate *template_) {
  FreemarkerCoreEnvironment_Namespace *self = [FreemarkerCoreEnvironment_Namespace alloc];
  FreemarkerCoreEnvironment_Namespace_initWithFreemarkerCoreEnvironment_withFreemarkerTemplateTemplate_(self, outer$, template_);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreEnvironment_Namespace)

@implementation FreemarkerCoreEnvironment_$2


#line 378
- (id<FreemarkerTemplateTemplateModel>)getLocalVariableWithNSString:(NSString *)name {
  jint index = [((id<JavaUtilList>) nil_chk(val$bodyParameterNames_)) indexOfWithId:name];
  return index != -1 ? IOSObjectArray_Get(nil_chk(val$outArgs_), index) : nil;
}

- (id<JavaUtilCollection>)getLocalVariableNames {
  return val$bodyParameterNames_;
}

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)capture$0
withFreemarkerTemplateTemplateModelArray:(IOSObjectArray *)capture$1 {
  FreemarkerCoreEnvironment_$2_initWithJavaUtilList_withFreemarkerTemplateTemplateModelArray_(self, capture$0, capture$1);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getLocalVariableWithNSString:", "getLocalVariable", "Lfreemarker.template.TemplateModel;", 0x1, NULL, NULL },
    { "getLocalVariableNames", NULL, "Ljava.util.Collection;", 0x1, NULL, NULL },
    { "initWithJavaUtilList:withFreemarkerTemplateTemplateModelArray:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "val$bodyParameterNames_", NULL, 0x1012, "Ljava.util.List;", NULL, NULL,  },
    { "val$outArgs_", NULL, 0x1012, "[Lfreemarker.template.TemplateModel;", NULL, NULL,  },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "FreemarkerCoreEnvironment", "visitWithFreemarkerCoreTemplateElement:withFreemarkerTemplateTemplateDirectiveModel:withJavaUtilMap:withJavaUtilList:" };
  static const J2ObjcClassInfo _FreemarkerCoreEnvironment_$2 = { 2, "", "freemarker.core", "Environment", 0x8008, 3, methods, 2, fields, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_FreemarkerCoreEnvironment_$2;
}

@end

void FreemarkerCoreEnvironment_$2_initWithJavaUtilList_withFreemarkerTemplateTemplateModelArray_(FreemarkerCoreEnvironment_$2 *self, id<JavaUtilList> capture$0, IOSObjectArray *capture$1) {
  self->val$bodyParameterNames_ = capture$0;
  self->val$outArgs_ = capture$1;
  (void) NSObject_init(self);
}

FreemarkerCoreEnvironment_$2 *new_FreemarkerCoreEnvironment_$2_initWithJavaUtilList_withFreemarkerTemplateTemplateModelArray_(id<JavaUtilList> capture$0, IOSObjectArray *capture$1) {
  FreemarkerCoreEnvironment_$2 *self = [FreemarkerCoreEnvironment_$2 alloc];
  FreemarkerCoreEnvironment_$2_initWithJavaUtilList_withFreemarkerTemplateTemplateModelArray_(self, capture$0, capture$1);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreEnvironment_$2)

@implementation FreemarkerCoreEnvironment_$3


#line 1784
- (jboolean)isEmpty {
  return NO;
}

- (id<FreemarkerTemplateTemplateModel>)getWithNSString:(NSString *)key {
  id<FreemarkerTemplateTemplateModel> value = [((id<FreemarkerTemplateTemplateHashModel>) nil_chk(this$0_->rootDataModel_)) getWithNSString:key];
  if (value == nil) {
    value = [((FreemarkerTemplateConfiguration *) nil_chk([this$0_ getConfiguration])) getSharedVariableWithNSString:key];
  }
  return value;
}

- (instancetype)initWithFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)outer$ {
  FreemarkerCoreEnvironment_$3_initWithFreemarkerCoreEnvironment_(self, outer$);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "isEmpty", NULL, "Z", 0x1, NULL, NULL },
    { "getWithNSString:", "get", "Lfreemarker.template.TemplateModel;", 0x1, "Lfreemarker.template.TemplateModelException;", NULL },
    { "initWithFreemarkerCoreEnvironment:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lfreemarker.core.Environment;", NULL, NULL,  },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "FreemarkerCoreEnvironment", "getDataModel" };
  static const J2ObjcClassInfo _FreemarkerCoreEnvironment_$3 = { 2, "", "freemarker.core", "Environment", 0x8008, 3, methods, 1, fields, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_FreemarkerCoreEnvironment_$3;
}

@end

void FreemarkerCoreEnvironment_$3_initWithFreemarkerCoreEnvironment_(FreemarkerCoreEnvironment_$3 *self, FreemarkerCoreEnvironment *outer$) {
  self->this$0_ = outer$;
  (void) NSObject_init(self);
}

FreemarkerCoreEnvironment_$3 *new_FreemarkerCoreEnvironment_$3_initWithFreemarkerCoreEnvironment_(FreemarkerCoreEnvironment *outer$) {
  FreemarkerCoreEnvironment_$3 *self = [FreemarkerCoreEnvironment_$3 alloc];
  FreemarkerCoreEnvironment_$3_initWithFreemarkerCoreEnvironment_(self, outer$);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreEnvironment_$3)

@implementation FreemarkerCoreEnvironment_$4


#line 1799
- (jboolean)isEmpty {
  return [((id<FreemarkerTemplateTemplateHashModel>) nil_chk(val$result_)) isEmpty];
}


#line 1802
- (id<FreemarkerTemplateTemplateModel>)getWithNSString:(NSString *)key {
  return [((id<FreemarkerTemplateTemplateHashModel>) nil_chk(val$result_)) getWithNSString:key];
}


#line 1809
- (id<FreemarkerTemplateTemplateCollectionModel>)values {
  return [((id<FreemarkerTemplateTemplateHashModelEx>) nil_chk(((id<FreemarkerTemplateTemplateHashModelEx>) check_protocol_cast(this$0_->rootDataModel_, @protocol(FreemarkerTemplateTemplateHashModelEx))))) values];
}


#line 1812
- (id<FreemarkerTemplateTemplateCollectionModel>)keys {
  return [((id<FreemarkerTemplateTemplateHashModelEx>) nil_chk(((id<FreemarkerTemplateTemplateHashModelEx>) check_protocol_cast(this$0_->rootDataModel_, @protocol(FreemarkerTemplateTemplateHashModelEx))))) keys];
}


#line 1815
- (jint)size {
  return [((id<FreemarkerTemplateTemplateHashModelEx>) nil_chk(((id<FreemarkerTemplateTemplateHashModelEx>) check_protocol_cast(this$0_->rootDataModel_, @protocol(FreemarkerTemplateTemplateHashModelEx))))) size];
}

- (instancetype)initWithFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)outer$
          withFreemarkerTemplateTemplateHashModel:(id<FreemarkerTemplateTemplateHashModel>)capture$0 {
  FreemarkerCoreEnvironment_$4_initWithFreemarkerCoreEnvironment_withFreemarkerTemplateTemplateHashModel_(self, outer$, capture$0);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "isEmpty", NULL, "Z", 0x1, "Lfreemarker.template.TemplateModelException;", NULL },
    { "getWithNSString:", "get", "Lfreemarker.template.TemplateModel;", 0x1, "Lfreemarker.template.TemplateModelException;", NULL },
    { "values", NULL, "Lfreemarker.template.TemplateCollectionModel;", 0x1, "Lfreemarker.template.TemplateModelException;", NULL },
    { "keys", NULL, "Lfreemarker.template.TemplateCollectionModel;", 0x1, "Lfreemarker.template.TemplateModelException;", NULL },
    { "size", NULL, "I", 0x1, "Lfreemarker.template.TemplateModelException;", NULL },
    { "initWithFreemarkerCoreEnvironment:withFreemarkerTemplateTemplateHashModel:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lfreemarker.core.Environment;", NULL, NULL,  },
    { "val$result_", NULL, 0x1012, "Lfreemarker.template.TemplateHashModel;", NULL, NULL,  },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "FreemarkerCoreEnvironment", "getDataModel" };
  static const J2ObjcClassInfo _FreemarkerCoreEnvironment_$4 = { 2, "", "freemarker.core", "Environment", 0x8008, 6, methods, 2, fields, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_FreemarkerCoreEnvironment_$4;
}

@end

void FreemarkerCoreEnvironment_$4_initWithFreemarkerCoreEnvironment_withFreemarkerTemplateTemplateHashModel_(FreemarkerCoreEnvironment_$4 *self, FreemarkerCoreEnvironment *outer$, id<FreemarkerTemplateTemplateHashModel> capture$0) {
  self->this$0_ = outer$;
  self->val$result_ = capture$0;
  (void) NSObject_init(self);
}

FreemarkerCoreEnvironment_$4 *new_FreemarkerCoreEnvironment_$4_initWithFreemarkerCoreEnvironment_withFreemarkerTemplateTemplateHashModel_(FreemarkerCoreEnvironment *outer$, id<FreemarkerTemplateTemplateHashModel> capture$0) {
  FreemarkerCoreEnvironment_$4 *self = [FreemarkerCoreEnvironment_$4 alloc];
  FreemarkerCoreEnvironment_$4_initWithFreemarkerCoreEnvironment_withFreemarkerTemplateTemplateHashModel_(self, outer$, capture$0);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreEnvironment_$4)

@implementation FreemarkerCoreEnvironment_$5


#line 1833
- (jboolean)isEmpty {
  return NO;
}


#line 1836
- (id<FreemarkerTemplateTemplateModel>)getWithNSString:(NSString *)key {
  id<FreemarkerTemplateTemplateModel> result = [((FreemarkerCoreEnvironment_Namespace *) nil_chk(this$0_->globalNamespace_)) getWithNSString:key];
  if (result == nil) {
    result = [((id<FreemarkerTemplateTemplateHashModel>) nil_chk(this$0_->rootDataModel_)) getWithNSString:key];
  }
  if (result == nil) {
    result = [((FreemarkerTemplateConfiguration *) nil_chk([this$0_ getConfiguration])) getSharedVariableWithNSString:key];
  }
  return result;
}

- (instancetype)initWithFreemarkerCoreEnvironment:(FreemarkerCoreEnvironment *)outer$ {
  FreemarkerCoreEnvironment_$5_initWithFreemarkerCoreEnvironment_(self, outer$);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "isEmpty", NULL, "Z", 0x1, NULL, NULL },
    { "getWithNSString:", "get", "Lfreemarker.template.TemplateModel;", 0x1, "Lfreemarker.template.TemplateModelException;", NULL },
    { "initWithFreemarkerCoreEnvironment:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lfreemarker.core.Environment;", NULL, NULL,  },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "FreemarkerCoreEnvironment", "getGlobalVariables" };
  static const J2ObjcClassInfo _FreemarkerCoreEnvironment_$5 = { 2, "", "freemarker.core", "Environment", 0x8008, 3, methods, 1, fields, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_FreemarkerCoreEnvironment_$5;
}

@end

void FreemarkerCoreEnvironment_$5_initWithFreemarkerCoreEnvironment_(FreemarkerCoreEnvironment_$5 *self, FreemarkerCoreEnvironment *outer$) {
  self->this$0_ = outer$;
  (void) NSObject_init(self);
}

FreemarkerCoreEnvironment_$5 *new_FreemarkerCoreEnvironment_$5_initWithFreemarkerCoreEnvironment_(FreemarkerCoreEnvironment *outer$) {
  FreemarkerCoreEnvironment_$5 *self = [FreemarkerCoreEnvironment_$5 alloc];
  FreemarkerCoreEnvironment_$5_initWithFreemarkerCoreEnvironment_(self, outer$);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreEnvironment_$5)

@implementation FreemarkerCoreEnvironment_$1


#line 2317
- (void)writeWithCharArray:(IOSCharArray *)cbuf
                   withInt:(jint)off
                   withInt:(jint)len {
  if (len > 0) {
    @throw new_JavaIoIOException_initWithNSString_(
#line 2320
    @"This transform does not allow nested content.");
  }
}


#line 2324
- (void)flush {
}

- (void)close {
}

- (instancetype)init {
  FreemarkerCoreEnvironment_$1_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "writeWithCharArray:withInt:withInt:", "write", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "flush", NULL, "V", 0x1, NULL, NULL },
    { "close", NULL, "V", 0x1, NULL, NULL },
    { "init", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcClassInfo _FreemarkerCoreEnvironment_$1 = { 2, "", "freemarker.core", "Environment", 0x8008, 4, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_FreemarkerCoreEnvironment_$1;
}

@end

void FreemarkerCoreEnvironment_$1_init(FreemarkerCoreEnvironment_$1 *self) {
  (void) JavaIoWriter_init(self);
}

FreemarkerCoreEnvironment_$1 *new_FreemarkerCoreEnvironment_$1_init() {
  FreemarkerCoreEnvironment_$1 *self = [FreemarkerCoreEnvironment_$1 alloc];
  FreemarkerCoreEnvironment_$1_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(FreemarkerCoreEnvironment_$1)
