//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/androidlayouts/repackaged/android/util/Rational.java
//


#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "Preconditions.h"
#include "Rational.h"
#include "java/io/IOException.h"
#include "java/io/InvalidObjectException.h"
#include "java/io/ObjectInputStream.h"
#include "java/lang/ClassNotFoundException.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/lang/NumberFormatException.h"

#line 0 "/Users/ramm/git/Ashera/AsheraAndroidParser/androidlayouts/repackaged/android/util/Rational.java"

#define RepackagedAndroidUtilRational_serialVersionUID 1LL

@interface RepackagedAndroidUtilRational () {
 @public
  jint mNumerator_;
  jint mDenominator_;
}

- (jboolean)isPosInf;

- (jboolean)isNegInf;

- (jboolean)equalsWithRepackagedAndroidUtilRational:(RepackagedAndroidUtilRational *)other;

/**
 @brief writeObject with default serialized form - guards against deserializing non-reduced forms of the rational.
 @throws InvalidObjectException if the invariants were violated
 */
- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)inArg;

+ (JavaLangNumberFormatException *)invalidRationalWithNSString:(NSString *)s;

@end

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidUtilRational, serialVersionUID, jlong)

__attribute__((unused)) static jboolean RepackagedAndroidUtilRational_isPosInf(RepackagedAndroidUtilRational *self);

__attribute__((unused)) static jboolean RepackagedAndroidUtilRational_isNegInf(RepackagedAndroidUtilRational *self);

__attribute__((unused)) static JavaLangNumberFormatException *RepackagedAndroidUtilRational_invalidRationalWithNSString_(NSString *s);

J2OBJC_INITIALIZED_DEFN(RepackagedAndroidUtilRational)

RepackagedAndroidUtilRational *RepackagedAndroidUtilRational_NaN_;
RepackagedAndroidUtilRational *RepackagedAndroidUtilRational_POSITIVE_INFINITY_;
RepackagedAndroidUtilRational *RepackagedAndroidUtilRational_NEGATIVE_INFINITY_;
RepackagedAndroidUtilRational *RepackagedAndroidUtilRational_ZERO_;


#line 29
@implementation RepackagedAndroidUtilRational


#line 101
- (instancetype)initWithInt:(jint)numerator
                    withInt:(jint)denominator {
  RepackagedAndroidUtilRational_initWithInt_withInt_(self, numerator, denominator);
  return self;
}


#line 135
- (jint)getNumerator {
  return mNumerator_;
}


#line 148
- (jint)getDenominator {
  return mDenominator_;
}


#line 160
- (jboolean)isNaN {
  return mDenominator_ == 0 && mNumerator_ == 0;
}


#line 172
- (jboolean)isInfinite {
  return mNumerator_ != 0 && mDenominator_ == 0;
}


#line 185
- (jboolean)isFinite {
  return mDenominator_ != 0;
}


#line 197
- (jboolean)isZero {
  return [self isFinite] && mNumerator_ == 0;
}

- (jboolean)isPosInf {
  return RepackagedAndroidUtilRational_isPosInf(self);
}

- (jboolean)isNegInf {
  return RepackagedAndroidUtilRational_isNegInf(self);
}


#line 239
- (jboolean)isEqual:(id)obj {
  return [obj isKindOfClass:[RepackagedAndroidUtilRational class]] && [self equalsWithRepackagedAndroidUtilRational:(RepackagedAndroidUtilRational *) check_class_cast(obj, [RepackagedAndroidUtilRational class])];
}

- (jboolean)equalsWithRepackagedAndroidUtilRational:(RepackagedAndroidUtilRational *)other {
  return (mNumerator_ == ((RepackagedAndroidUtilRational *) nil_chk(other))->mNumerator_ && mDenominator_ == other->mDenominator_);
}


#line 261
- (NSString *)description {
  if ([self isNaN]) {
    return @"NaN";
  }
  else
#line 264
  if (RepackagedAndroidUtilRational_isPosInf(self)) {
    return @"Infinity";
  }
  else
#line 266
  if (RepackagedAndroidUtilRational_isNegInf(self)) {
    return @"-Infinity";
  }
  else {
    
#line 269
    return JreStrcat("ICI", mNumerator_, '/', mDenominator_);
  }
}


#line 279
- (jfloat)toFloat {
  
#line 281
  return [self floatValue];
}


#line 288
- (NSUInteger)hash {
  
#line 290
  jint numeratorFlipped = (LShift32(mNumerator_, 16)) | (URShift32(mNumerator_, 16));
  
#line 292
  return mDenominator_ ^ numeratorFlipped;
}


#line 306
+ (jint)gcdWithInt:(jint)numerator
           withInt:(jint)denominator {
  return RepackagedAndroidUtilRational_gcdWithInt_withInt_(numerator, denominator);
}


#line 337
- (jdouble)doubleValue {
  jdouble num = mNumerator_;
  jdouble den = mDenominator_;
  
#line 341
  return num / den;
}


#line 354
- (jfloat)floatValue {
  jfloat num = mNumerator_;
  jfloat den = mDenominator_;
  
#line 358
  return num / den;
}


#line 381
- (jint)intValue {
  
#line 384
  if (RepackagedAndroidUtilRational_isPosInf(self)) {
    return JavaLangInteger_MAX_VALUE;
  }
  else
#line 386
  if (RepackagedAndroidUtilRational_isNegInf(self)) {
    return JavaLangInteger_MIN_VALUE;
  }
  else
#line 388
  if ([self isNaN]) {
    return 0;
  }
  else {
    
#line 391
    return mNumerator_ / mDenominator_;
  }
}


#line 415
- (jlong)longLongValue {
  
#line 418
  if (RepackagedAndroidUtilRational_isPosInf(self)) {
    return JavaLangLong_MAX_VALUE;
  }
  else
#line 420
  if (RepackagedAndroidUtilRational_isNegInf(self)) {
    return JavaLangLong_MIN_VALUE;
  }
  else
#line 422
  if ([self isNaN]) {
    return 0;
  }
  else {
    
#line 425
    return mNumerator_ / mDenominator_;
  }
}


#line 439
- (jshort)shortValue {
  return (jshort) [self intValue];
}


#line 466
- (jint)compareToWithId:(RepackagedAndroidUtilRational *)another {
  (void) check_class_cast(another, [RepackagedAndroidUtilRational class]);
  
#line 467
  (void) RepackagedComAndroidInternalUtilPreconditions_checkNotNullWithId_withId_(another, @"another must not be null");
  
#line 469
  if ([self equalsWithRepackagedAndroidUtilRational:another]) {
    return 0;
  }
  else
#line 471
  if ([self isNaN]) {
    return 1;
  }
  else
#line 473
  if ([((RepackagedAndroidUtilRational *) nil_chk(another)) isNaN]) {
    return -1;
  }
  else
#line 475
  if (RepackagedAndroidUtilRational_isPosInf(self) || RepackagedAndroidUtilRational_isNegInf(another)) {
    return 1;
  }
  else
#line 477
  if (RepackagedAndroidUtilRational_isNegInf(self) || RepackagedAndroidUtilRational_isPosInf(another)) {
    return -1;
  }
  
#line 484
  jlong thisNumerator = ((jlong) mNumerator_) * ((RepackagedAndroidUtilRational *) nil_chk(another))->mDenominator_;
  jlong otherNumerator = ((jlong) another->mNumerator_) * mDenominator_;
  
#line 488
  if (thisNumerator < otherNumerator) {
    return -1;
  }
  else
#line 490
  if (thisNumerator > otherNumerator) {
    return 1;
  }
  else {
    return 0;
  }
}


#line 512
- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)inArg {
  
#line 514
  [((JavaIoObjectInputStream *) nil_chk(inArg)) defaultReadObject];
  
#line 524
  if (mNumerator_ == 0) {
    if (mDenominator_ == 1 || mDenominator_ == 0) {
      return;
    }
    @throw new_JavaIoInvalidObjectException_initWithNSString_(
#line 529
    @"Rational must be deserialized from a reduced form for zero values");
  }
  else
#line 530
  if (mDenominator_ == 0) {
    if (mNumerator_ == 1 || mNumerator_ == -1) {
      return;
    }
    @throw new_JavaIoInvalidObjectException_initWithNSString_(
#line 535
    @"Rational must be deserialized from a reduced form for infinity values");
  }
  else {
    
#line 537
    if (RepackagedAndroidUtilRational_gcdWithInt_withInt_(mNumerator_, mDenominator_) > 1) {
      @throw new_JavaIoInvalidObjectException_initWithNSString_(
#line 539
      @"Rational must be deserialized from a reduced form for finite values");
    }
  }
}


#line 544
+ (JavaLangNumberFormatException *)invalidRationalWithNSString:(NSString *)s {
  return RepackagedAndroidUtilRational_invalidRationalWithNSString_(s);
}


#line 576
+ (RepackagedAndroidUtilRational *)parseRationalWithNSString:(NSString *)string {
  return RepackagedAndroidUtilRational_parseRationalWithNSString_(string);
}

+ (void)initialize {
  if (self == [RepackagedAndroidUtilRational class]) {
    RepackagedAndroidUtilRational_NaN_ = new_RepackagedAndroidUtilRational_initWithInt_withInt_(
#line 40
    0, 0);
    RepackagedAndroidUtilRational_POSITIVE_INFINITY_ = new_RepackagedAndroidUtilRational_initWithInt_withInt_(
#line 48
    1, 0);
    RepackagedAndroidUtilRational_NEGATIVE_INFINITY_ = new_RepackagedAndroidUtilRational_initWithInt_withInt_(
#line 56
    -1, 0);
    RepackagedAndroidUtilRational_ZERO_ = new_RepackagedAndroidUtilRational_initWithInt_withInt_(
#line 64
    0, 1);
    J2OBJC_SET_INITIALIZED(RepackagedAndroidUtilRational)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithInt:withInt:", "Rational", NULL, 0x1, NULL, NULL },
    { "getNumerator", NULL, "I", 0x1, NULL, NULL },
    { "getDenominator", NULL, "I", 0x1, NULL, NULL },
    { "isNaN", NULL, "Z", 0x1, NULL, NULL },
    { "isInfinite", NULL, "Z", 0x1, NULL, NULL },
    { "isFinite", NULL, "Z", 0x1, NULL, NULL },
    { "isZero", NULL, "Z", 0x1, NULL, NULL },
    { "isPosInf", NULL, "Z", 0x2, NULL, NULL },
    { "isNegInf", NULL, "Z", 0x2, NULL, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL, NULL },
    { "equalsWithRepackagedAndroidUtilRational:", "equals", "Z", 0x2, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "toFloat", NULL, "F", 0x1, NULL, NULL },
    { "hash", "hashCode", "I", 0x1, NULL, NULL },
    { "gcdWithInt:withInt:", "gcd", "I", 0x9, NULL, NULL },
    { "doubleValue", NULL, "D", 0x1, NULL, NULL },
    { "floatValue", NULL, "F", 0x1, NULL, NULL },
    { "intValue", NULL, "I", 0x1, NULL, NULL },
    { "longLongValue", "longValue", "J", 0x1, NULL, NULL },
    { "shortValue", NULL, "S", 0x1, NULL, NULL },
    { "compareToWithId:", "compareTo", "I", 0x1, NULL, NULL },
    { "readObjectWithJavaIoObjectInputStream:", "readObject", "V", 0x2, "Ljava.io.IOException;Ljava.lang.ClassNotFoundException;", NULL },
    { "invalidRationalWithNSString:", "invalidRational", "Ljava.lang.NumberFormatException;", 0xa, NULL, NULL },
    { "parseRationalWithNSString:", "parseRational", "Lrepackaged.android.util.Rational;", 0x9, "Ljava.lang.NumberFormatException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "NaN_", NULL, 0x19, "Lrepackaged.android.util.Rational;", &RepackagedAndroidUtilRational_NaN_, NULL,  },
    { "POSITIVE_INFINITY_", NULL, 0x19, "Lrepackaged.android.util.Rational;", &RepackagedAndroidUtilRational_POSITIVE_INFINITY_, NULL,  },
    { "NEGATIVE_INFINITY_", NULL, 0x19, "Lrepackaged.android.util.Rational;", &RepackagedAndroidUtilRational_NEGATIVE_INFINITY_, NULL,  },
    { "ZERO_", NULL, 0x19, "Lrepackaged.android.util.Rational;", &RepackagedAndroidUtilRational_ZERO_, NULL,  },
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, NULL, .constantValue.asLong = RepackagedAndroidUtilRational_serialVersionUID },
    { "mNumerator_", NULL, 0x12, "I", NULL, NULL,  },
    { "mDenominator_", NULL, 0x12, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _RepackagedAndroidUtilRational = { 2, "Rational", "repackaged.android.util", NULL, 0x11, 24, methods, 7, fields, 0, NULL, 0, NULL, NULL, "Ljava/lang/Number;Ljava/lang/Comparable<Lrepackaged/android/util/Rational;>;" };
  return &_RepackagedAndroidUtilRational;
}

@end


#line 101
void RepackagedAndroidUtilRational_initWithInt_withInt_(RepackagedAndroidUtilRational *self, jint numerator, jint denominator) {
  (void) NSNumber_init(self);
  if (denominator < 0) {
    numerator = -numerator;
    denominator = -denominator;
  }
  
#line 109
  if (denominator == 0 && numerator > 0) {
    self->mNumerator_ = 1;
    self->mDenominator_ = 0;
  }
  else
#line 112
  if (denominator == 0 && numerator < 0) {
    self->mNumerator_ = -1;
    self->mDenominator_ = 0;
  }
  else
#line 115
  if (denominator == 0 && numerator == 0) {
    self->mNumerator_ = 0;
    self->mDenominator_ = 0;
  }
  else
#line 118
  if (numerator == 0) {
    self->mNumerator_ = 0;
    self->mDenominator_ = 1;
  }
  else {
    
#line 122
    jint gcd = RepackagedAndroidUtilRational_gcdWithInt_withInt_(numerator, denominator);
    
#line 124
    self->mNumerator_ = numerator / gcd;
    self->mDenominator_ = denominator / gcd;
  }
}


#line 101
RepackagedAndroidUtilRational *new_RepackagedAndroidUtilRational_initWithInt_withInt_(jint numerator, jint denominator) {
  RepackagedAndroidUtilRational *self = [RepackagedAndroidUtilRational alloc];
  RepackagedAndroidUtilRational_initWithInt_withInt_(self, numerator, denominator);
  return self;
}


#line 201
jboolean RepackagedAndroidUtilRational_isPosInf(RepackagedAndroidUtilRational *self) {
  return self->mDenominator_ == 0 && self->mNumerator_ > 0;
}

jboolean RepackagedAndroidUtilRational_isNegInf(RepackagedAndroidUtilRational *self) {
  return self->mDenominator_ == 0 && self->mNumerator_ < 0;
}


#line 306
jint RepackagedAndroidUtilRational_gcdWithInt_withInt_(jint numerator, jint denominator) {
  RepackagedAndroidUtilRational_initialize();
  
#line 314
  jint a = numerator;
  jint b = denominator;
  
#line 317
  while (b != 0) {
    jint oldB = b;
    
#line 320
    b = a % b;
    a = oldB;
  }
  
#line 324
  return JavaLangMath_absWithInt_(a);
}


#line 544
JavaLangNumberFormatException *RepackagedAndroidUtilRational_invalidRationalWithNSString_(NSString *s) {
  RepackagedAndroidUtilRational_initialize();
  
#line 545
  @throw new_JavaLangNumberFormatException_initWithNSString_(JreStrcat("$$C", @"Invalid Rational: \"", s, '"'));
}


#line 576
RepackagedAndroidUtilRational *RepackagedAndroidUtilRational_parseRationalWithNSString_(NSString *string) {
  RepackagedAndroidUtilRational_initialize();
  (void) RepackagedComAndroidInternalUtilPreconditions_checkNotNullWithId_withId_(string, @"string must not be null");
  
#line 580
  if ([((NSString *) nil_chk(string)) isEqual:@"NaN"]) {
    return RepackagedAndroidUtilRational_NaN_;
  }
  else
#line 582
  if ([string isEqual:@"Infinity"]) {
    return RepackagedAndroidUtilRational_POSITIVE_INFINITY_;
  }
  else
#line 584
  if ([string isEqual:@"-Infinity"]) {
    return RepackagedAndroidUtilRational_NEGATIVE_INFINITY_;
  }
  
#line 588
  jint sep_ix = [string indexOf:':'];
  if (sep_ix < 0) {
    sep_ix = [string indexOf:'/'];
  }
  if (sep_ix < 0) {
    @throw RepackagedAndroidUtilRational_invalidRationalWithNSString_(string);
  }
  @try {
    return new_RepackagedAndroidUtilRational_initWithInt_withInt_(JavaLangInteger_parseIntWithNSString_([string substring:0 endIndex:sep_ix]), JavaLangInteger_parseIntWithNSString_(
#line 597
    [string substring:sep_ix + 1]));
  }
  @catch (
#line 598
  JavaLangNumberFormatException *e) {
    @throw RepackagedAndroidUtilRational_invalidRationalWithNSString_(string);
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RepackagedAndroidUtilRational)
