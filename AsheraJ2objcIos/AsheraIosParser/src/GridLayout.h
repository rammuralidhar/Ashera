//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/androidlayouts/repackaged/android/widget/GridLayout.java
//

#ifndef _RepackagedAndroidWidgetGridLayout_H_
#define _RepackagedAndroidWidgetGridLayout_H_

#include "J2ObjC_header.h"
#include "ViewGroup.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/ArrayList.h"

@class IOSClass;
@class IOSIntArray;
@class IOSObjectArray;
@class RepackagedAndroidGraphicsCanvas;
@class RepackagedAndroidGraphicsPaint;
@class RepackagedAndroidViewView;
@class RepackagedAndroidWidgetGridLayout_Alignment;
@class RepackagedAndroidWidgetGridLayout_Axis;
@class RepackagedAndroidWidgetGridLayout_Interval;
@class RepackagedAndroidWidgetGridLayout_LayoutParams;
@class RepackagedAndroidWidgetGridLayout_MutableInt;
@class RepackagedAndroidWidgetGridLayout_PackedMap;
@class RepackagedAndroidWidgetGridLayout_Spec;
@protocol JavaLangCharSequence;
@protocol RepackagedAndroidContentContext;
@protocol RepackagedAndroidContentResTypedArray;
@protocol RepackagedAndroidUtilAttributeSet;
@protocol RepackagedAndroidUtilPrinter;

#define RepackagedAndroidWidgetGridLayout_HORIZONTAL 0
#define RepackagedAndroidWidgetGridLayout_VERTICAL 1
#define RepackagedAndroidWidgetGridLayout_UNDEFINED ((jint) 0x80000000)
#define RepackagedAndroidWidgetGridLayout_ALIGN_BOUNDS 0
#define RepackagedAndroidWidgetGridLayout_ALIGN_MARGINS 1
#define RepackagedAndroidWidgetGridLayout_MAX_SIZE 100000
#define RepackagedAndroidWidgetGridLayout_DEFAULT_CONTAINER_MARGIN 0
#define RepackagedAndroidWidgetGridLayout_UNINITIALIZED_HASH 0

/**
 @brief A layout that places its children in a rectangular <em>grid</em>.
 <p> The grid is composed of a set of infinitely thin lines that separate the viewing area into <em>cells</em>. Throughout the API, grid lines are referenced by grid <em>indices</em>. A grid with <code>N</code> columns has <code>N + 1</code> grid indices that run from <code>0</code> through <code>N</code> inclusive. Regardless of how GridLayout is configured, grid index <code>0</code> is fixed to the leading edge of the container and grid index <code>N</code> is fixed to its trailing edge (after padding is taken into account). <h4>Row and Column Specs</h4> Children occupy one or more contiguous cells, as defined by their GridLayout.LayoutParams#rowSpec rowSpec and GridLayout.LayoutParams#columnSpec columnSpec layout parameters. Each spec defines the set of rows or columns that are to be occupied; and how children should be aligned within the resulting group of cells. Although cells do not normally overlap in a GridLayout, GridLayout does not prevent children being defined to occupy the same cell or group of cells. In this case however, there is no guarantee that children will not themselves overlap after the layout operation completes. <h4>Default Cell Assignment</h4> If a child does not specify the row and column indices of the cell it wishes to occupy, GridLayout assigns cell locations automatically using its: GridLayout#setOrientation(int) orientation , GridLayout#setRowCount(int) rowCount and GridLayout#setColumnCount(int) columnCount properties. <h4>Space</h4> Space between children may be specified either by using instances of the dedicated Space view or by setting the ViewGroup.MarginLayoutParams#leftMargin leftMargin , ViewGroup.MarginLayoutParams#topMargin topMargin , ViewGroup.MarginLayoutParams#rightMargin rightMargin and ViewGroup.MarginLayoutParams#bottomMargin bottomMargin layout parameters. When the GridLayout#setUseDefaultMargins(boolean) useDefaultMargins property is set, default margins around children are automatically allocated based on the prevailing UI style guide for the platform. Each of the margins so defined may be independently overridden by an assignment to the appropriate layout parameter. Default values will generally produce a reasonable spacing between components but values may change between different releases of the platform. <h4>Excess Space Distribution</h4> As of API 21, GridLayout's distribution of excess space accomodates the principle of weight. In the event that no weights are specified, the previous conventions are respected and columns and rows are taken as flexible if their views specify some form of alignment within their groups. <p> The flexibility of a view is therefore influenced by its alignment which is, in turn, typically defined by setting the LayoutParams#setGravity(int) gravity property of the child's layout parameters. If either a weight or alignment were defined along a given axis then the component is taken as <em>flexible</em> in that direction. If no weight or alignment was set, the component is instead assumed to be <em>inflexible</em>. <p> Multiple components in the same row or column group are considered to act in <em>parallel</em>. Such a group is flexible only if <em>all</em> of the components within it are flexible. Row and column groups that sit either side of a common boundary are instead considered to act in <em>series</em>. The composite group made of these two elements is flexible if <em>one</em> of its elements is flexible. <p> To make a column stretch, make sure all of the components inside it define a weight or a gravity. To prevent a column from stretching, ensure that one of the components in the column does not define a weight or a gravity. <p> When the principle of flexibility does not provide complete disambiguation, GridLayout's algorithms favour rows and columns that are closer to its <em>right</em> and <em>bottom</em> edges. To be more precise, GridLayout treats each of its layout parameters as a constraint in the a set of variables that define the grid-lines along a given axis. During layout, GridLayout solves the constraints so as to return the unique solution to those constraints for which all variables are less-than-or-equal-to the corresponding value in any other valid solution. <h4>Interpretation of GONE</h4> For layout purposes, GridLayout treats views whose visibility status is View#GONE GONE , as having zero width and height. This is subtly different from the policy of ignoring views that are marked as GONE outright. If, for example, a gone-marked view was alone in a column, that column would itself collapse to zero width if and only if no gravity was defined on the view. If gravity was defined, then the gone-marked view has no effect on the layout and the container should be laid out as if the view had never been added to it. GONE views are taken to have zero weight during excess space distribution. <p> These statements apply equally to rows as well as columns, and to groups of rows or columns. <p> See GridLayout.LayoutParams for a full description of the layout parameters used by GridLayout.
 ref android.R.styleable#GridLayout_orientation
 ref android.R.styleable#GridLayout_rowCount
 ref android.R.styleable#GridLayout_columnCount
 ref android.R.styleable#GridLayout_useDefaultMargins
 ref android.R.styleable#GridLayout_rowOrderPreserved
 ref android.R.styleable#GridLayout_columnOrderPreserved
 */
@interface RepackagedAndroidWidgetGridLayout : RepackagedAndroidViewViewGroup {
 @public
  RepackagedAndroidWidgetGridLayout_Axis *mHorizontalAxis_;
  RepackagedAndroidWidgetGridLayout_Axis *mVerticalAxis_;
  jint mOrientation_;
  jboolean mUseDefaultMargins_;
  jint mAlignmentMode_;
  jint mDefaultGap_;
  jint mLastLayoutParamsHashCode_;
  id<RepackagedAndroidUtilPrinter> mPrinter_;
}

#pragma mark Public

- (instancetype)initWithRepackagedAndroidContentContext:(id<RepackagedAndroidContentContext>)context;

- (instancetype)initWithRepackagedAndroidContentContext:(id<RepackagedAndroidContentContext>)context
                  withRepackagedAndroidUtilAttributeSet:(id<RepackagedAndroidUtilAttributeSet>)attrs;

- (instancetype)initWithRepackagedAndroidContentContext:(id<RepackagedAndroidContentContext>)context
                  withRepackagedAndroidUtilAttributeSet:(id<RepackagedAndroidUtilAttributeSet>)attrs
                                                withInt:(jint)defStyleAttr;

- (instancetype)initWithRepackagedAndroidContentContext:(id<RepackagedAndroidContentContext>)context
                  withRepackagedAndroidUtilAttributeSet:(id<RepackagedAndroidUtilAttributeSet>)attrs
                                                withInt:(jint)defStyleAttr
                                                withInt:(jint)defStyleRes;

- (RepackagedAndroidWidgetGridLayout_LayoutParams *)generateLayoutParamsWithRepackagedAndroidUtilAttributeSet:(id<RepackagedAndroidUtilAttributeSet>)attrs;

- (id<JavaLangCharSequence>)getAccessibilityClassName;

/**
 @brief Returns the alignment mode.
 @return the alignment mode; either #ALIGN_BOUNDS or #ALIGN_MARGINS
 ref android.R.styleable#GridLayout_alignmentMode
 */
- (jint)getAlignmentMode;

/**
 @brief Returns the current number of columns.
 This is either the last value that was set with #setColumnCount(int) or, if no such value was set, the maximum value of each the upper bounds defined in LayoutParams#columnSpec .
 @return the current number of columns
 ref android.R.styleable#GridLayout_columnCount
 */
- (jint)getColumnCount;

/**
 @brief Returns the current orientation.
 @return either #HORIZONTAL or #VERTICAL
 ref android.R.styleable#GridLayout_orientation
 */
- (jint)getOrientation;

/**
 @brief Return the printer that will log diagnostics from this layout.
 @return the printer associated with this view
 */
- (id<RepackagedAndroidUtilPrinter>)getPrinter;

/**
 @brief Returns the current number of rows.
 This is either the last value that was set with #setRowCount(int) or, if no such value was set, the maximum value of each the upper bounds defined in LayoutParams#rowSpec .
 @return the current number of rows
 ref android.R.styleable#GridLayout_rowCount
 */
- (jint)getRowCount;

/**
 @brief Returns whether or not this GridLayout will allocate default margins when no corresponding layout parameters are defined.
 @return <code>true</code> if default margins should be allocated
 ref android.R.styleable#GridLayout_useDefaultMargins
 */
- (jboolean)getUseDefaultMargins;

/**
 @brief Returns whether or not column boundaries are ordered by their grid indices.
 @return <code>true</code> if column boundaries must appear in the order of their indices, <code>false</code> otherwise
 ref android.R.styleable#GridLayout_columnOrderPreserved
 */
- (jboolean)isColumnOrderPreserved;

/**
 @brief Returns whether or not row boundaries are ordered by their grid indices.
 @return <code>true</code> if row boundaries must appear in the order of their indices, <code>false</code> otherwise
 ref android.R.styleable#GridLayout_rowOrderPreserved
 */
- (jboolean)isRowOrderPreserved;

- (void)onViewAddedWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)child;

- (void)onViewRemovedWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)child;

- (void)requestLayout;

/**
 @brief Sets the alignment mode to be used for all of the alignments between the children of this container.
 <p> The default value of this property is #ALIGN_MARGINS .
 @param alignmentMode either #ALIGN_BOUNDS or #ALIGN_MARGINS
 ref android.R.styleable#GridLayout_alignmentMode
 */
- (void)setAlignmentModeWithInt:(jint)alignmentMode;

/**
 @brief ColumnCount is used only to generate default column/column indices when they are not specified by a component's layout parameters.
 @param columnCount the number of columns.
 ref android.R.styleable#GridLayout_columnCount
 */
- (void)setColumnCountWithInt:(jint)columnCount;

/**
 @brief When this property is <code>true</code> , GridLayout is forced to place the column boundaries so that their associated grid indices are in ascending order in the view.
 <p> When this property is <code>false</code> GridLayout is at liberty to place the horizontal column boundaries in whatever order best fits the given constraints. <p> The default value of this property is <code>true</code> .
 @param columnOrderPreserved use <code>true</code> to force GridLayout to respect the order of column boundaries.
 ref android.R.styleable#GridLayout_columnOrderPreserved
 */
- (void)setColumnOrderPreservedWithBoolean:(jboolean)columnOrderPreserved;

/**
 @brief GridLayout uses the orientation property for two purposes: <ul> <li> To control the 'direction' in which default row/column indices are generated when they are not specified in a component's layout parameters.
 </li> <li> To control which axis should be processed first during the layout operation: when orientation is #HORIZONTAL the horizontal axis is laid out first. </li> </ul> The order in which axes are laid out is important if, for example, the height of one of GridLayout's children is dependent on its width - and its width is, in turn, dependent on the widths of other components. <p> If your layout contains a TextView (or derivative: <code>Button</code> , <code>EditText</code> , <code>CheckBox</code> , etc.) which is in multi-line mode (the default) it is normally best to leave GridLayout's orientation as <code>HORIZONTAL</code> - because <code>TextView</code> is capable of deriving its height for a given width, but not the other way around. <p> Other than the effects above, orientation does not affect the actual layout operation of GridLayout, so it's fine to leave GridLayout in <code>HORIZONTAL</code> mode even if the height of the intended layout greatly exceeds its width. <p> The default value of this property is #HORIZONTAL .
 @param orientation either #HORIZONTAL or #VERTICAL
 ref android.R.styleable#GridLayout_orientation
 */
- (void)setOrientationWithInt:(jint)orientation;

/**
 @brief Set the printer that will log diagnostics from this layout.
 The default value is created by repackaged.android.util.LogPrinter .
 @param printer the printer associated with this layout
 */
- (void)setPrinterWithRepackagedAndroidUtilPrinter:(id<RepackagedAndroidUtilPrinter>)printer;

/**
 @brief RowCount is used only to generate default row/column indices when they are not specified by a component's layout parameters.
 @param rowCount the number of rows
 ref android.R.styleable#GridLayout_rowCount
 */
- (void)setRowCountWithInt:(jint)rowCount;

/**
 @brief When this property is <code>true</code> , GridLayout is forced to place the row boundaries so that their associated grid indices are in ascending order in the view.
 <p> When this property is <code>false</code> GridLayout is at liberty to place the vertical row boundaries in whatever order best fits the given constraints. <p> The default value of this property is <code>true</code> .
 @param rowOrderPreserved  <code>true</code> to force GridLayout to respect the order of row boundaries
 ref android.R.styleable#GridLayout_rowOrderPreserved
 */
- (void)setRowOrderPreservedWithBoolean:(jboolean)rowOrderPreserved;

/**
 @brief When <code>true</code> , GridLayout allocates default margins around children based on the child's visual characteristics.
 Each of the margins so defined may be independently overridden by an assignment to the appropriate layout parameter. <p> When <code>false</code> , the default value of all margins is zero. <p> When setting to <code>true</code> , consider setting the value of the #setAlignmentMode(int) alignmentMode property to #ALIGN_BOUNDS . <p> The default value of this property is <code>false</code> .
 @param useDefaultMargins use <code>true</code> to make GridLayout allocate default margins
 ref android.R.styleable#GridLayout_useDefaultMargins
 */
- (void)setUseDefaultMarginsWithBoolean:(jboolean)useDefaultMargins;

/**
 @brief Return a Spec, <code>spec</code> , where: <ul> <li> <code>spec.span = [start, start + 1]</code> </li> </ul> <p> To leave the start index undefined, use the value #UNDEFINED .
 @param start the start index
 */
+ (RepackagedAndroidWidgetGridLayout_Spec *)specWithInt:(jint)start;

/**
 @brief Return a Spec, <code>spec</code> , where: <ul> <li> <code>spec.span = [start, start + 1]</code> </li> <li> <code>spec.alignment = alignment</code> </li> </ul> <p> To leave the start index undefined, use the value #UNDEFINED .
 @param start the start index
 @param alignment the alignment
 */
+ (RepackagedAndroidWidgetGridLayout_Spec *)specWithInt:(jint)start
        withRepackagedAndroidWidgetGridLayout_Alignment:(RepackagedAndroidWidgetGridLayout_Alignment *)alignment;

/**
 @brief Equivalent to: <code>spec(start, 1, alignment, weight)</code> .
 @param start the start
 @param alignment the alignment
 @param weight the weight
 */
+ (RepackagedAndroidWidgetGridLayout_Spec *)specWithInt:(jint)start
        withRepackagedAndroidWidgetGridLayout_Alignment:(RepackagedAndroidWidgetGridLayout_Alignment *)alignment
                                              withFloat:(jfloat)weight;

/**
 @brief Equivalent to: <code>spec(start, 1, weight)</code> .
 @param start the start
 @param weight the weight
 */
+ (RepackagedAndroidWidgetGridLayout_Spec *)specWithInt:(jint)start
                                              withFloat:(jfloat)weight;

/**
 @brief Return a Spec, <code>spec</code> , where: <ul> <li> <code>spec.span = [start, start + size]</code> </li> </ul> <p> To leave the start index undefined, use the value #UNDEFINED .
 @param start the start
 @param size the size
 */
+ (RepackagedAndroidWidgetGridLayout_Spec *)specWithInt:(jint)start
                                                withInt:(jint)size;

/**
 @brief Equivalent to: <code>spec(start, size, alignment, 0f)</code> .
 @param start the start
 @param size the size
 @param alignment the alignment
 */
+ (RepackagedAndroidWidgetGridLayout_Spec *)specWithInt:(jint)start
                                                withInt:(jint)size
        withRepackagedAndroidWidgetGridLayout_Alignment:(RepackagedAndroidWidgetGridLayout_Alignment *)alignment;

/**
 @brief Return a Spec, <code>spec</code> , where: <ul> <li> <code>spec.span = [start, start + size]</code> </li> <li> <code>spec.alignment = alignment</code> </li> <li> <code>spec.weight = weight</code> </li> </ul> <p> To leave the start index undefined, use the value #UNDEFINED .
 @param start the start
 @param size the size
 @param alignment the alignment
 @param weight the weight
 */
+ (RepackagedAndroidWidgetGridLayout_Spec *)specWithInt:(jint)start
                                                withInt:(jint)size
        withRepackagedAndroidWidgetGridLayout_Alignment:(RepackagedAndroidWidgetGridLayout_Alignment *)alignment
                                              withFloat:(jfloat)weight;

/**
 @brief Equivalent to: <code>spec(start, 1, default_alignment, weight)</code> - where <code>default_alignment</code> is specified in repackaged.android.widget.GridLayout.LayoutParams .
 @param start the start
 @param size the size
 @param weight the weight
 */
+ (RepackagedAndroidWidgetGridLayout_Spec *)specWithInt:(jint)start
                                                withInt:(jint)size
                                              withFloat:(jfloat)weight;

#pragma mark Protected

- (jboolean)checkLayoutParamsWithRepackagedAndroidViewViewGroup_LayoutParams:(RepackagedAndroidViewViewGroup_LayoutParams *)p;

- (RepackagedAndroidWidgetGridLayout_LayoutParams *)generateDefaultLayoutParams;

- (RepackagedAndroidWidgetGridLayout_LayoutParams *)generateLayoutParamsWithRepackagedAndroidViewViewGroup_LayoutParams:(RepackagedAndroidViewViewGroup_LayoutParams *)p;

/**
 @brief We need to call invalidateStructure() when a child's GONE flag changes state.
 This implementation is a catch-all, invalidating on any change in the visibility flags.
 */
- (void)onChildVisibilityChangedWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)child
                                                      withInt:(jint)oldVisibility
                                                      withInt:(jint)newVisibility;

/**
 */
- (void)onDebugDrawWithRepackagedAndroidGraphicsCanvas:(RepackagedAndroidGraphicsCanvas *)canvas;

/**
 */
- (void)onDebugDrawMarginsWithRepackagedAndroidGraphicsCanvas:(RepackagedAndroidGraphicsCanvas *)canvas
                           withRepackagedAndroidGraphicsPaint:(RepackagedAndroidGraphicsPaint *)paint;

/**
 
 */
- (void)onLayoutWithBoolean:(jboolean)changed
                    withInt:(jint)left
                    withInt:(jint)top
                    withInt:(jint)right
                    withInt:(jint)bottom;

- (void)onMeasureWithInt:(jint)widthSpec
                 withInt:(jint)heightSpec;

/**
 */
- (void)onSetLayoutParamsWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)child
       withRepackagedAndroidViewViewGroup_LayoutParams:(RepackagedAndroidViewViewGroup_LayoutParams *)layoutParams;

#pragma mark Package-Private

+ (jint)adjustWithInt:(jint)measureSpec
              withInt:(jint)delta;

+ (IOSObjectArray *)appendWithNSObjectArray:(IOSObjectArray *)a
                          withNSObjectArray:(IOSObjectArray *)b;

+ (jboolean)canStretchWithInt:(jint)flexibility;

+ (RepackagedAndroidWidgetGridLayout_Alignment *)getAlignmentWithInt:(jint)gravity
                                                         withBoolean:(jboolean)horizontal;

- (RepackagedAndroidWidgetGridLayout_LayoutParams *)getLayoutParamsWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)c;

- (jint)getMargin1WithRepackagedAndroidViewView:(RepackagedAndroidViewView *)view
                                    withBoolean:(jboolean)horizontal
                                    withBoolean:(jboolean)leading;

- (jint)getMeasurementIncludingMarginWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)c
                                                       withBoolean:(jboolean)horizontal;

+ (jint)max2WithIntArray:(IOSIntArray *)a
                 withInt:(jint)valueIfEmpty;

@end

J2OBJC_STATIC_INIT(RepackagedAndroidWidgetGridLayout)

J2OBJC_FIELD_SETTER(RepackagedAndroidWidgetGridLayout, mHorizontalAxis_, RepackagedAndroidWidgetGridLayout_Axis *)
J2OBJC_FIELD_SETTER(RepackagedAndroidWidgetGridLayout, mVerticalAxis_, RepackagedAndroidWidgetGridLayout_Axis *)
J2OBJC_FIELD_SETTER(RepackagedAndroidWidgetGridLayout, mPrinter_, id<RepackagedAndroidUtilPrinter>)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidWidgetGridLayout, HORIZONTAL, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidWidgetGridLayout, VERTICAL, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidWidgetGridLayout, UNDEFINED, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidWidgetGridLayout, ALIGN_BOUNDS, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidWidgetGridLayout, ALIGN_MARGINS, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidWidgetGridLayout, MAX_SIZE, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidWidgetGridLayout, DEFAULT_CONTAINER_MARGIN, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidWidgetGridLayout, UNINITIALIZED_HASH, jint)

FOUNDATION_EXPORT id<RepackagedAndroidUtilPrinter> RepackagedAndroidWidgetGridLayout_LOG_PRINTER_;
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidWidgetGridLayout, LOG_PRINTER_, id<RepackagedAndroidUtilPrinter>)

FOUNDATION_EXPORT id<RepackagedAndroidUtilPrinter> RepackagedAndroidWidgetGridLayout_NO_PRINTER_;
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidWidgetGridLayout, NO_PRINTER_, id<RepackagedAndroidUtilPrinter>)

FOUNDATION_EXPORT RepackagedAndroidWidgetGridLayout_Alignment *RepackagedAndroidWidgetGridLayout_UNDEFINED_ALIGNMENT_;
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidWidgetGridLayout, UNDEFINED_ALIGNMENT_, RepackagedAndroidWidgetGridLayout_Alignment *)

FOUNDATION_EXPORT RepackagedAndroidWidgetGridLayout_Alignment *RepackagedAndroidWidgetGridLayout_TOP_;
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidWidgetGridLayout, TOP_, RepackagedAndroidWidgetGridLayout_Alignment *)

FOUNDATION_EXPORT RepackagedAndroidWidgetGridLayout_Alignment *RepackagedAndroidWidgetGridLayout_BOTTOM_;
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidWidgetGridLayout, BOTTOM_, RepackagedAndroidWidgetGridLayout_Alignment *)

FOUNDATION_EXPORT RepackagedAndroidWidgetGridLayout_Alignment *RepackagedAndroidWidgetGridLayout_START_;
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidWidgetGridLayout, START_, RepackagedAndroidWidgetGridLayout_Alignment *)

FOUNDATION_EXPORT RepackagedAndroidWidgetGridLayout_Alignment *RepackagedAndroidWidgetGridLayout_END_;
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidWidgetGridLayout, END_, RepackagedAndroidWidgetGridLayout_Alignment *)

FOUNDATION_EXPORT RepackagedAndroidWidgetGridLayout_Alignment *RepackagedAndroidWidgetGridLayout_LEFT_;
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidWidgetGridLayout, LEFT_, RepackagedAndroidWidgetGridLayout_Alignment *)

FOUNDATION_EXPORT RepackagedAndroidWidgetGridLayout_Alignment *RepackagedAndroidWidgetGridLayout_RIGHT_;
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidWidgetGridLayout, RIGHT_, RepackagedAndroidWidgetGridLayout_Alignment *)

FOUNDATION_EXPORT RepackagedAndroidWidgetGridLayout_Alignment *RepackagedAndroidWidgetGridLayout_CENTER_;
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidWidgetGridLayout, CENTER_, RepackagedAndroidWidgetGridLayout_Alignment *)

FOUNDATION_EXPORT RepackagedAndroidWidgetGridLayout_Alignment *RepackagedAndroidWidgetGridLayout_BASELINE_;
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidWidgetGridLayout, BASELINE_, RepackagedAndroidWidgetGridLayout_Alignment *)

FOUNDATION_EXPORT RepackagedAndroidWidgetGridLayout_Alignment *RepackagedAndroidWidgetGridLayout_FILL_;
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidWidgetGridLayout, FILL_, RepackagedAndroidWidgetGridLayout_Alignment *)

FOUNDATION_EXPORT void RepackagedAndroidWidgetGridLayout_initWithRepackagedAndroidContentContext_(RepackagedAndroidWidgetGridLayout *self, id<RepackagedAndroidContentContext> context);

FOUNDATION_EXPORT RepackagedAndroidWidgetGridLayout *new_RepackagedAndroidWidgetGridLayout_initWithRepackagedAndroidContentContext_(id<RepackagedAndroidContentContext> context) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void RepackagedAndroidWidgetGridLayout_initWithRepackagedAndroidContentContext_withRepackagedAndroidUtilAttributeSet_(RepackagedAndroidWidgetGridLayout *self, id<RepackagedAndroidContentContext> context, id<RepackagedAndroidUtilAttributeSet> attrs);

FOUNDATION_EXPORT RepackagedAndroidWidgetGridLayout *new_RepackagedAndroidWidgetGridLayout_initWithRepackagedAndroidContentContext_withRepackagedAndroidUtilAttributeSet_(id<RepackagedAndroidContentContext> context, id<RepackagedAndroidUtilAttributeSet> attrs) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void RepackagedAndroidWidgetGridLayout_initWithRepackagedAndroidContentContext_withRepackagedAndroidUtilAttributeSet_withInt_(RepackagedAndroidWidgetGridLayout *self, id<RepackagedAndroidContentContext> context, id<RepackagedAndroidUtilAttributeSet> attrs, jint defStyleAttr);

FOUNDATION_EXPORT RepackagedAndroidWidgetGridLayout *new_RepackagedAndroidWidgetGridLayout_initWithRepackagedAndroidContentContext_withRepackagedAndroidUtilAttributeSet_withInt_(id<RepackagedAndroidContentContext> context, id<RepackagedAndroidUtilAttributeSet> attrs, jint defStyleAttr) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void RepackagedAndroidWidgetGridLayout_initWithRepackagedAndroidContentContext_withRepackagedAndroidUtilAttributeSet_withInt_withInt_(RepackagedAndroidWidgetGridLayout *self, id<RepackagedAndroidContentContext> context, id<RepackagedAndroidUtilAttributeSet> attrs, jint defStyleAttr, jint defStyleRes);

FOUNDATION_EXPORT RepackagedAndroidWidgetGridLayout *new_RepackagedAndroidWidgetGridLayout_initWithRepackagedAndroidContentContext_withRepackagedAndroidUtilAttributeSet_withInt_withInt_(id<RepackagedAndroidContentContext> context, id<RepackagedAndroidUtilAttributeSet> attrs, jint defStyleAttr, jint defStyleRes) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT jint RepackagedAndroidWidgetGridLayout_max2WithIntArray_withInt_(IOSIntArray *a, jint valueIfEmpty);

FOUNDATION_EXPORT IOSObjectArray *RepackagedAndroidWidgetGridLayout_appendWithNSObjectArray_withNSObjectArray_(IOSObjectArray *a, IOSObjectArray *b);

FOUNDATION_EXPORT RepackagedAndroidWidgetGridLayout_Alignment *RepackagedAndroidWidgetGridLayout_getAlignmentWithInt_withBoolean_(jint gravity, jboolean horizontal);

FOUNDATION_EXPORT jint RepackagedAndroidWidgetGridLayout_adjustWithInt_withInt_(jint measureSpec, jint delta);

FOUNDATION_EXPORT RepackagedAndroidWidgetGridLayout_Spec *RepackagedAndroidWidgetGridLayout_specWithInt_withInt_withRepackagedAndroidWidgetGridLayout_Alignment_withFloat_(jint start, jint size, RepackagedAndroidWidgetGridLayout_Alignment *alignment, jfloat weight);

FOUNDATION_EXPORT RepackagedAndroidWidgetGridLayout_Spec *RepackagedAndroidWidgetGridLayout_specWithInt_withRepackagedAndroidWidgetGridLayout_Alignment_withFloat_(jint start, RepackagedAndroidWidgetGridLayout_Alignment *alignment, jfloat weight);

FOUNDATION_EXPORT RepackagedAndroidWidgetGridLayout_Spec *RepackagedAndroidWidgetGridLayout_specWithInt_withInt_withFloat_(jint start, jint size, jfloat weight);

FOUNDATION_EXPORT RepackagedAndroidWidgetGridLayout_Spec *RepackagedAndroidWidgetGridLayout_specWithInt_withFloat_(jint start, jfloat weight);

FOUNDATION_EXPORT RepackagedAndroidWidgetGridLayout_Spec *RepackagedAndroidWidgetGridLayout_specWithInt_withInt_withRepackagedAndroidWidgetGridLayout_Alignment_(jint start, jint size, RepackagedAndroidWidgetGridLayout_Alignment *alignment);

FOUNDATION_EXPORT RepackagedAndroidWidgetGridLayout_Spec *RepackagedAndroidWidgetGridLayout_specWithInt_withRepackagedAndroidWidgetGridLayout_Alignment_(jint start, RepackagedAndroidWidgetGridLayout_Alignment *alignment);

FOUNDATION_EXPORT RepackagedAndroidWidgetGridLayout_Spec *RepackagedAndroidWidgetGridLayout_specWithInt_withInt_(jint start, jint size);

FOUNDATION_EXPORT RepackagedAndroidWidgetGridLayout_Spec *RepackagedAndroidWidgetGridLayout_specWithInt_(jint start);

FOUNDATION_EXPORT jboolean RepackagedAndroidWidgetGridLayout_canStretchWithInt_(jint flexibility);

J2OBJC_TYPE_LITERAL_HEADER(RepackagedAndroidWidgetGridLayout)

/**
 */
@protocol RepackagedAndroidWidgetGridLayout_Orientation < JavaLangAnnotationAnnotation >

@end

J2OBJC_EMPTY_STATIC_INIT(RepackagedAndroidWidgetGridLayout_Orientation)

J2OBJC_TYPE_LITERAL_HEADER(RepackagedAndroidWidgetGridLayout_Orientation)

/**
 */
@protocol RepackagedAndroidWidgetGridLayout_AlignmentMode < JavaLangAnnotationAnnotation >

@end

J2OBJC_EMPTY_STATIC_INIT(RepackagedAndroidWidgetGridLayout_AlignmentMode)

J2OBJC_TYPE_LITERAL_HEADER(RepackagedAndroidWidgetGridLayout_AlignmentMode)

@interface RepackagedAndroidWidgetGridLayout_Axis : NSObject {
 @public
  jboolean horizontal_;
  jint definedCount_;
  RepackagedAndroidWidgetGridLayout_PackedMap *groupBounds_;
  jboolean groupBoundsValid_;
  RepackagedAndroidWidgetGridLayout_PackedMap *forwardLinks_;
  jboolean forwardLinksValid_;
  RepackagedAndroidWidgetGridLayout_PackedMap *backwardLinks_;
  jboolean backwardLinksValid_;
  IOSIntArray *leadingMargins_;
  jboolean leadingMarginsValid_;
  IOSIntArray *trailingMargins_;
  jboolean trailingMarginsValid_;
  IOSObjectArray *arcs_;
  jboolean arcsValid_;
  IOSIntArray *locations_;
  jboolean locationsValid_;
  jboolean hasWeights_;
  jboolean hasWeightsValid_;
  IOSIntArray *deltas_;
  jboolean orderPreserved_;
}

#pragma mark Public

- (IOSObjectArray *)getArcs;

- (jint)getCount;

- (IOSIntArray *)getDeltas;

- (RepackagedAndroidWidgetGridLayout_PackedMap *)getGroupBounds;

- (IOSIntArray *)getLeadingMargins;

- (IOSIntArray *)getLocations;

- (jint)getMeasureWithInt:(jint)measureSpec;

- (IOSIntArray *)getTrailingMargins;

- (void)invalidateStructure;

- (void)invalidateValues;

- (jboolean)isOrderPreserved;

- (void)layoutWithInt:(jint)size;

- (void)setCountWithInt:(jint)count;

- (void)setOrderPreservedWithBoolean:(jboolean)orderPreserved;

#pragma mark Package-Private

- (IOSObjectArray *)groupArcsByFirstVertexWithRepackagedAndroidWidgetGridLayout_ArcArray:(IOSObjectArray *)arcs;

@end

J2OBJC_EMPTY_STATIC_INIT(RepackagedAndroidWidgetGridLayout_Axis)

J2OBJC_FIELD_SETTER(RepackagedAndroidWidgetGridLayout_Axis, groupBounds_, RepackagedAndroidWidgetGridLayout_PackedMap *)
J2OBJC_FIELD_SETTER(RepackagedAndroidWidgetGridLayout_Axis, forwardLinks_, RepackagedAndroidWidgetGridLayout_PackedMap *)
J2OBJC_FIELD_SETTER(RepackagedAndroidWidgetGridLayout_Axis, backwardLinks_, RepackagedAndroidWidgetGridLayout_PackedMap *)
J2OBJC_FIELD_SETTER(RepackagedAndroidWidgetGridLayout_Axis, leadingMargins_, IOSIntArray *)
J2OBJC_FIELD_SETTER(RepackagedAndroidWidgetGridLayout_Axis, trailingMargins_, IOSIntArray *)
J2OBJC_FIELD_SETTER(RepackagedAndroidWidgetGridLayout_Axis, arcs_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(RepackagedAndroidWidgetGridLayout_Axis, locations_, IOSIntArray *)
J2OBJC_FIELD_SETTER(RepackagedAndroidWidgetGridLayout_Axis, deltas_, IOSIntArray *)

J2OBJC_TYPE_LITERAL_HEADER(RepackagedAndroidWidgetGridLayout_Axis)

/**
 @brief Layout information associated with each of the children of a GridLayout.
 <p> GridLayout supports both row and column spanning and arbitrary forms of alignment within each cell group. The fundamental parameters associated with each cell group are gathered into their vertical and horizontal components and stored in the #rowSpec and #columnSpec layout parameters. GridLayout.Spec Specs are immutable structures and may be shared between the layout parameters of different children. <p> The row and column specs contain the leading and trailing indices along each axis and together specify the four grid indices that delimit the cells of this cell group. <p> The  alignment properties of the row and column specs together specify both aspects of alignment within the cell group. It is also possible to specify a child's alignment within its cell group by using the GridLayout.LayoutParams#setGravity(int) method. <p> The weight property is also included in Spec and specifies the proportion of any excess space that is due to the associated view. <h4>WRAP_CONTENT and MATCH_PARENT</h4> Because the default values of the #width and #height properties are both #WRAP_CONTENT , this value never needs to be explicitly declared in the layout parameters of GridLayout's children. In addition, GridLayout does not distinguish the special size value #MATCH_PARENT from #WRAP_CONTENT . A component's ability to expand to the size of the parent is instead controlled by the principle of <em>flexibility</em>, as discussed in GridLayout . <h4>Summary</h4> You should not need to use either of the special size values: <code>WRAP_CONTENT</code> or <code>MATCH_PARENT</code> when configuring the children of a GridLayout. <h4>Default values</h4> <ul> <li> #width = #WRAP_CONTENT </li> <li> #height = #WRAP_CONTENT </li> <li> #topMargin = 0 when GridLayout#setUseDefaultMargins(boolean) useDefaultMargins is <code>false</code> ; otherwise #UNDEFINED , to indicate that a default value should be computed on demand. </li> <li> #leftMargin = 0 when GridLayout#setUseDefaultMargins(boolean) useDefaultMargins is <code>false</code> ; otherwise #UNDEFINED , to indicate that a default value should be computed on demand. </li> <li> #bottomMargin = 0 when GridLayout#setUseDefaultMargins(boolean) useDefaultMargins is <code>false</code> ; otherwise #UNDEFINED , to indicate that a default value should be computed on demand. </li> <li> #rightMargin = 0 when GridLayout#setUseDefaultMargins(boolean) useDefaultMargins is <code>false</code> ; otherwise #UNDEFINED , to indicate that a default value should be computed on demand. </li> <li> #rowSpec <code>.row</code> = #UNDEFINED </li> <li> #rowSpec <code>.rowSpan</code> = 1 </li> <li> #rowSpec <code>.alignment</code> = #BASELINE </li> <li> #rowSpec <code>.weight</code> = 0 </li> <li> #columnSpec <code>.column</code> = #UNDEFINED </li> <li> #columnSpec <code>.columnSpan</code> = 1 </li> <li> #columnSpec <code>.alignment</code> = #START </li> <li> #columnSpec <code>.weight</code> = 0 </li> </ul> See GridLayout for a more complete description of the conventions used by GridLayout in the interpretation of the properties of this class.
 ref android.R.styleable#GridLayout_Layout_layout_row
 ref android.R.styleable#GridLayout_Layout_layout_rowSpan
 ref android.R.styleable#GridLayout_Layout_layout_rowWeight
 ref android.R.styleable#GridLayout_Layout_layout_column
 ref android.R.styleable#GridLayout_Layout_layout_columnSpan
 ref android.R.styleable#GridLayout_Layout_layout_columnWeight
 ref android.R.styleable#GridLayout_Layout_layout_gravity
 */
@interface RepackagedAndroidWidgetGridLayout_LayoutParams : RepackagedAndroidViewViewGroup_MarginLayoutParams {
 @public
  /**
   @brief The spec that defines the vertical characteristics of the cell group described by these layout parameters.
   If an assignment is made to this field after a measurement or layout operation has already taken place, a call to ViewGroup#setLayoutParams(ViewGroup.LayoutParams) must be made to notify GridLayout of the change. GridLayout is normally able to detect when code fails to observe this rule, issue a warning and take steps to compensate for the omission. This facility is implemented on a best effort basis and should not be relied upon in production code - so it is best to include the above calls to remove the warnings as soon as it is practical.
   */
  RepackagedAndroidWidgetGridLayout_Spec *rowSpec_;
  /**
   @brief The spec that defines the horizontal characteristics of the cell group described by these layout parameters.
   If an assignment is made to this field after a measurement or layout operation has already taken place, a call to ViewGroup#setLayoutParams(ViewGroup.LayoutParams) must be made to notify GridLayout of the change. GridLayout is normally able to detect when code fails to observe this rule, issue a warning and take steps to compensate for the omission. This facility is implemented on a best effort basis and should not be relied upon in production code - so it is best to include the above calls to remove the warnings as soon as it is practical.
   */
  RepackagedAndroidWidgetGridLayout_Spec *columnSpec_;
}

#pragma mark Public

/**
 @brief Constructs a new LayoutParams with default values as defined in LayoutParams .
 */
- (instancetype)init;

/**
 @brief Values not defined in the attribute set take the default values defined in LayoutParams .
 */
- (instancetype)initWithRepackagedAndroidContentContext:(id<RepackagedAndroidContentContext>)context
                  withRepackagedAndroidUtilAttributeSet:(id<RepackagedAndroidUtilAttributeSet>)attrs;

/**
 
 */
- (instancetype)initWithRepackagedAndroidViewViewGroup_LayoutParams:(RepackagedAndroidViewViewGroup_LayoutParams *)params;

/**
 @brief Copy constructor.
 Clones the width, height, margin values, row spec, and column spec of the source.
 @param source The layout params to copy from.
 */
- (instancetype)initWithRepackagedAndroidWidgetGridLayout_LayoutParams:(RepackagedAndroidWidgetGridLayout_LayoutParams *)source;

/**
 
 */
- (instancetype)initWithRepackagedAndroidViewViewGroup_MarginLayoutParams:(RepackagedAndroidViewViewGroup_MarginLayoutParams *)params;

/**
 @brief Constructs a new LayoutParams instance for this <code>rowSpec</code> and <code>columnSpec</code>.
 All other fields are initialized with default values as defined in LayoutParams .
 @param rowSpec the rowSpec
 @param columnSpec the columnSpec
 */
- (instancetype)initWithRepackagedAndroidWidgetGridLayout_Spec:(RepackagedAndroidWidgetGridLayout_Spec *)rowSpec
                    withRepackagedAndroidWidgetGridLayout_Spec:(RepackagedAndroidWidgetGridLayout_Spec *)columnSpec;

- (jboolean)isEqual:(id)o;

- (NSUInteger)hash;

/**
 @brief Describes how the child views are positioned.
 Default is <code>LEFT | BASELINE</code> . See Gravity .
 @param gravity the new gravity value
 ref android.R.styleable#GridLayout_Layout_layout_gravity
 */
- (void)setGravityWithInt:(jint)gravity;

#pragma mark Protected

- (void)setBaseAttributesWithRepackagedAndroidContentResTypedArray:(id<RepackagedAndroidContentResTypedArray>)attributes
                                                           withInt:(jint)widthAttr
                                                           withInt:(jint)heightAttr;

#pragma mark Package-Private

- (void)setColumnSpecSpanWithRepackagedAndroidWidgetGridLayout_Interval:(RepackagedAndroidWidgetGridLayout_Interval *)span;

- (void)setRowSpecSpanWithRepackagedAndroidWidgetGridLayout_Interval:(RepackagedAndroidWidgetGridLayout_Interval *)span;

@end

J2OBJC_STATIC_INIT(RepackagedAndroidWidgetGridLayout_LayoutParams)

J2OBJC_FIELD_SETTER(RepackagedAndroidWidgetGridLayout_LayoutParams, rowSpec_, RepackagedAndroidWidgetGridLayout_Spec *)
J2OBJC_FIELD_SETTER(RepackagedAndroidWidgetGridLayout_LayoutParams, columnSpec_, RepackagedAndroidWidgetGridLayout_Spec *)

FOUNDATION_EXPORT void RepackagedAndroidWidgetGridLayout_LayoutParams_initWithRepackagedAndroidWidgetGridLayout_Spec_withRepackagedAndroidWidgetGridLayout_Spec_(RepackagedAndroidWidgetGridLayout_LayoutParams *self, RepackagedAndroidWidgetGridLayout_Spec *rowSpec, RepackagedAndroidWidgetGridLayout_Spec *columnSpec);

FOUNDATION_EXPORT RepackagedAndroidWidgetGridLayout_LayoutParams *new_RepackagedAndroidWidgetGridLayout_LayoutParams_initWithRepackagedAndroidWidgetGridLayout_Spec_withRepackagedAndroidWidgetGridLayout_Spec_(RepackagedAndroidWidgetGridLayout_Spec *rowSpec, RepackagedAndroidWidgetGridLayout_Spec *columnSpec) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void RepackagedAndroidWidgetGridLayout_LayoutParams_init(RepackagedAndroidWidgetGridLayout_LayoutParams *self);

FOUNDATION_EXPORT RepackagedAndroidWidgetGridLayout_LayoutParams *new_RepackagedAndroidWidgetGridLayout_LayoutParams_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void RepackagedAndroidWidgetGridLayout_LayoutParams_initWithRepackagedAndroidViewViewGroup_LayoutParams_(RepackagedAndroidWidgetGridLayout_LayoutParams *self, RepackagedAndroidViewViewGroup_LayoutParams *params);

FOUNDATION_EXPORT RepackagedAndroidWidgetGridLayout_LayoutParams *new_RepackagedAndroidWidgetGridLayout_LayoutParams_initWithRepackagedAndroidViewViewGroup_LayoutParams_(RepackagedAndroidViewViewGroup_LayoutParams *params) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void RepackagedAndroidWidgetGridLayout_LayoutParams_initWithRepackagedAndroidViewViewGroup_MarginLayoutParams_(RepackagedAndroidWidgetGridLayout_LayoutParams *self, RepackagedAndroidViewViewGroup_MarginLayoutParams *params);

FOUNDATION_EXPORT RepackagedAndroidWidgetGridLayout_LayoutParams *new_RepackagedAndroidWidgetGridLayout_LayoutParams_initWithRepackagedAndroidViewViewGroup_MarginLayoutParams_(RepackagedAndroidViewViewGroup_MarginLayoutParams *params) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void RepackagedAndroidWidgetGridLayout_LayoutParams_initWithRepackagedAndroidWidgetGridLayout_LayoutParams_(RepackagedAndroidWidgetGridLayout_LayoutParams *self, RepackagedAndroidWidgetGridLayout_LayoutParams *source);

FOUNDATION_EXPORT RepackagedAndroidWidgetGridLayout_LayoutParams *new_RepackagedAndroidWidgetGridLayout_LayoutParams_initWithRepackagedAndroidWidgetGridLayout_LayoutParams_(RepackagedAndroidWidgetGridLayout_LayoutParams *source) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void RepackagedAndroidWidgetGridLayout_LayoutParams_initWithRepackagedAndroidContentContext_withRepackagedAndroidUtilAttributeSet_(RepackagedAndroidWidgetGridLayout_LayoutParams *self, id<RepackagedAndroidContentContext> context, id<RepackagedAndroidUtilAttributeSet> attrs);

FOUNDATION_EXPORT RepackagedAndroidWidgetGridLayout_LayoutParams *new_RepackagedAndroidWidgetGridLayout_LayoutParams_initWithRepackagedAndroidContentContext_withRepackagedAndroidUtilAttributeSet_(id<RepackagedAndroidContentContext> context, id<RepackagedAndroidUtilAttributeSet> attrs) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(RepackagedAndroidWidgetGridLayout_LayoutParams)

@interface RepackagedAndroidWidgetGridLayout_Arc : NSObject {
 @public
  RepackagedAndroidWidgetGridLayout_Interval *span_;
  RepackagedAndroidWidgetGridLayout_MutableInt *value_;
  jboolean valid_;
}

#pragma mark Public

- (instancetype)initWithRepackagedAndroidWidgetGridLayout_Interval:(RepackagedAndroidWidgetGridLayout_Interval *)span
                  withRepackagedAndroidWidgetGridLayout_MutableInt:(RepackagedAndroidWidgetGridLayout_MutableInt *)value;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(RepackagedAndroidWidgetGridLayout_Arc)

J2OBJC_FIELD_SETTER(RepackagedAndroidWidgetGridLayout_Arc, span_, RepackagedAndroidWidgetGridLayout_Interval *)
J2OBJC_FIELD_SETTER(RepackagedAndroidWidgetGridLayout_Arc, value_, RepackagedAndroidWidgetGridLayout_MutableInt *)

FOUNDATION_EXPORT void RepackagedAndroidWidgetGridLayout_Arc_initWithRepackagedAndroidWidgetGridLayout_Interval_withRepackagedAndroidWidgetGridLayout_MutableInt_(RepackagedAndroidWidgetGridLayout_Arc *self, RepackagedAndroidWidgetGridLayout_Interval *span, RepackagedAndroidWidgetGridLayout_MutableInt *value);

FOUNDATION_EXPORT RepackagedAndroidWidgetGridLayout_Arc *new_RepackagedAndroidWidgetGridLayout_Arc_initWithRepackagedAndroidWidgetGridLayout_Interval_withRepackagedAndroidWidgetGridLayout_MutableInt_(RepackagedAndroidWidgetGridLayout_Interval *span, RepackagedAndroidWidgetGridLayout_MutableInt *value) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(RepackagedAndroidWidgetGridLayout_Arc)

@interface RepackagedAndroidWidgetGridLayout_MutableInt : NSObject {
 @public
  jint value_;
}

#pragma mark Public

- (instancetype)init;

- (instancetype)initWithInt:(jint)value;

- (void)reset;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(RepackagedAndroidWidgetGridLayout_MutableInt)

FOUNDATION_EXPORT void RepackagedAndroidWidgetGridLayout_MutableInt_init(RepackagedAndroidWidgetGridLayout_MutableInt *self);

FOUNDATION_EXPORT RepackagedAndroidWidgetGridLayout_MutableInt *new_RepackagedAndroidWidgetGridLayout_MutableInt_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void RepackagedAndroidWidgetGridLayout_MutableInt_initWithInt_(RepackagedAndroidWidgetGridLayout_MutableInt *self, jint value);

FOUNDATION_EXPORT RepackagedAndroidWidgetGridLayout_MutableInt *new_RepackagedAndroidWidgetGridLayout_MutableInt_initWithInt_(jint value) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(RepackagedAndroidWidgetGridLayout_MutableInt)

@interface RepackagedAndroidWidgetGridLayout_Assoc : JavaUtilArrayList

#pragma mark Public

+ (RepackagedAndroidWidgetGridLayout_Assoc *)ofWithIOSClass:(IOSClass *)keyType
                                               withIOSClass:(IOSClass *)valueType;

- (RepackagedAndroidWidgetGridLayout_PackedMap *)pack;

- (void)putWithId:(id)key
           withId:(id)value;

#pragma mark Package-Private


@end

J2OBJC_EMPTY_STATIC_INIT(RepackagedAndroidWidgetGridLayout_Assoc)

FOUNDATION_EXPORT RepackagedAndroidWidgetGridLayout_Assoc *RepackagedAndroidWidgetGridLayout_Assoc_ofWithIOSClass_withIOSClass_(IOSClass *keyType, IOSClass *valueType);

J2OBJC_TYPE_LITERAL_HEADER(RepackagedAndroidWidgetGridLayout_Assoc)

@interface RepackagedAndroidWidgetGridLayout_PackedMap : NSObject {
 @public
  IOSIntArray *index_;
  IOSObjectArray *keys_;
  IOSObjectArray *values_;
}

#pragma mark Public

- (id)getValueWithInt:(jint)i;

@end

J2OBJC_EMPTY_STATIC_INIT(RepackagedAndroidWidgetGridLayout_PackedMap)

J2OBJC_FIELD_SETTER(RepackagedAndroidWidgetGridLayout_PackedMap, index_, IOSIntArray *)
J2OBJC_FIELD_SETTER(RepackagedAndroidWidgetGridLayout_PackedMap, keys_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(RepackagedAndroidWidgetGridLayout_PackedMap, values_, IOSObjectArray *)

J2OBJC_TYPE_LITERAL_HEADER(RepackagedAndroidWidgetGridLayout_PackedMap)

@interface RepackagedAndroidWidgetGridLayout_Bounds : NSObject {
 @public
  jint before_;
  jint after_;
  jint flexibility_;
}

#pragma mark Public

- (NSString *)description;

#pragma mark Protected

- (jint)getOffsetWithRepackagedAndroidWidgetGridLayout:(RepackagedAndroidWidgetGridLayout *)gl
                         withRepackagedAndroidViewView:(RepackagedAndroidViewView *)c
       withRepackagedAndroidWidgetGridLayout_Alignment:(RepackagedAndroidWidgetGridLayout_Alignment *)a
                                               withInt:(jint)size
                                           withBoolean:(jboolean)horizontal;

- (void)includeWithRepackagedAndroidWidgetGridLayout:(RepackagedAndroidWidgetGridLayout *)gl
                       withRepackagedAndroidViewView:(RepackagedAndroidViewView *)c
          withRepackagedAndroidWidgetGridLayout_Spec:(RepackagedAndroidWidgetGridLayout_Spec *)spec
          withRepackagedAndroidWidgetGridLayout_Axis:(RepackagedAndroidWidgetGridLayout_Axis *)axis
                                             withInt:(jint)size;

- (void)includeWithInt:(jint)before
               withInt:(jint)after;

- (void)reset;

- (jint)sizeWithBoolean:(jboolean)min;

@end

J2OBJC_EMPTY_STATIC_INIT(RepackagedAndroidWidgetGridLayout_Bounds)

J2OBJC_TYPE_LITERAL_HEADER(RepackagedAndroidWidgetGridLayout_Bounds)

/**
 @brief An Interval represents a contiguous range of values that lie between the interval's #min and #max values.
 <p> Intervals are immutable so may be passed as values and used as keys in hash tables. It is not necessary to have multiple instances of Intervals which have the same #min and #max values. <p> Intervals are often written as <code>[min, max]</code> and represent the set of values <code>x</code> such that <code>min <= x < max</code> .
 */
@interface RepackagedAndroidWidgetGridLayout_Interval : NSObject {
 @public
  /**
   @brief The minimum value.
   */
  jint min_;
  /**
   @brief The maximum value.
   */
  jint max_;
}

#pragma mark Public

/**
 @brief Construct a new Interval, <code>interval</code> , where: <ul> <li> <code>interval.min = min</code> </li> <li> <code>interval.max = max</code> </li> </ul>
 @param min the minimum value.
 @param max the maximum value.
 */
- (instancetype)initWithInt:(jint)min
                    withInt:(jint)max;

/**
 @brief Returns <code>true</code> if the #getClass class , #min and #max properties of this Interval and the supplied parameter are pairwise equal; <code>false</code> otherwise.
 @param that the object to compare this interval with
 @return <code>true</code> if the specified object is equal to this <code>Interval</code> , <code>false</code> otherwise.
 */
- (jboolean)isEqual:(id)that;

- (NSUInteger)hash;

- (NSString *)description;

#pragma mark Package-Private

- (RepackagedAndroidWidgetGridLayout_Interval *)inverse;

- (jint)size;

@end

J2OBJC_EMPTY_STATIC_INIT(RepackagedAndroidWidgetGridLayout_Interval)

FOUNDATION_EXPORT void RepackagedAndroidWidgetGridLayout_Interval_initWithInt_withInt_(RepackagedAndroidWidgetGridLayout_Interval *self, jint min, jint max);

FOUNDATION_EXPORT RepackagedAndroidWidgetGridLayout_Interval *new_RepackagedAndroidWidgetGridLayout_Interval_initWithInt_withInt_(jint min, jint max) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(RepackagedAndroidWidgetGridLayout_Interval)

#define RepackagedAndroidWidgetGridLayout_Spec_DEFAULT_WEIGHT 0.0f

/**
 @brief A Spec defines the horizontal or vertical characteristics of a group of cells.
 Each spec. defines the <em>grid indices</em> and <em>alignment</em> along the appropriate axis. <p> The <em>grid indices</em> are the leading and trailing edges of this cell group. See GridLayout for a description of the conventions used by GridLayout for grid indices. <p> The <em>alignment</em> property specifies how cells should be aligned in this group. For row groups, this specifies the vertical alignment. For column groups, this specifies the horizontal alignment. <p> Use the following static methods to create specs: <ul> <li> #spec(int) </li> <li> #spec(int,int) </li> <li> #spec(int,Alignment) </li> <li> #spec(int,int,Alignment) </li> <li> #spec(int,float) </li> <li> #spec(int,int,float) </li> <li> #spec(int,Alignment,float) </li> <li> #spec(int,int,Alignment,float) </li> </ul>
 */
@interface RepackagedAndroidWidgetGridLayout_Spec : NSObject {
 @public
  jboolean startDefined_;
  RepackagedAndroidWidgetGridLayout_Interval *span_;
  RepackagedAndroidWidgetGridLayout_Alignment *alignment_;
  jfloat weight_;
}

#pragma mark Public

/**
 @brief Returns <code>true</code> if the <code>class</code> , <code>alignment</code> and <code>span</code> properties of this Spec and the supplied parameter are pairwise equal, <code>false</code> otherwise.
 @param that the object to compare this spec with
 @return <code>true</code> if the specified object is equal to this <code>Spec</code> ; <code>false</code> otherwise
 */
- (jboolean)isEqual:(id)that;

- (NSUInteger)hash;

#pragma mark Package-Private

- (RepackagedAndroidWidgetGridLayout_Spec *)copyWriteAlignmentWithRepackagedAndroidWidgetGridLayout_Alignment:(RepackagedAndroidWidgetGridLayout_Alignment *)alignment OBJC_METHOD_FAMILY_NONE;

- (RepackagedAndroidWidgetGridLayout_Spec *)copyWriteSpanWithRepackagedAndroidWidgetGridLayout_Interval:(RepackagedAndroidWidgetGridLayout_Interval *)span OBJC_METHOD_FAMILY_NONE;

- (jint)getFlexibility;

@end

J2OBJC_STATIC_INIT(RepackagedAndroidWidgetGridLayout_Spec)

J2OBJC_FIELD_SETTER(RepackagedAndroidWidgetGridLayout_Spec, span_, RepackagedAndroidWidgetGridLayout_Interval *)
J2OBJC_FIELD_SETTER(RepackagedAndroidWidgetGridLayout_Spec, alignment_, RepackagedAndroidWidgetGridLayout_Alignment *)

FOUNDATION_EXPORT RepackagedAndroidWidgetGridLayout_Spec *RepackagedAndroidWidgetGridLayout_Spec_UNDEFINED_;
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidWidgetGridLayout_Spec, UNDEFINED_, RepackagedAndroidWidgetGridLayout_Spec *)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidWidgetGridLayout_Spec, DEFAULT_WEIGHT, jfloat)

J2OBJC_TYPE_LITERAL_HEADER(RepackagedAndroidWidgetGridLayout_Spec)

/**
 @brief Alignments specify where a view should be placed within a cell group and what size it should be.
 <p> The LayoutParams class contains a LayoutParams#rowSpec rowSpec and a LayoutParams#columnSpec columnSpec each of which contains an <code>alignment</code> . Overall placement of the view in the cell group is specified by the two alignments which act along each axis independently. <p> The GridLayout class defines the most common alignments used in general layout: #TOP , #LEFT , #BOTTOM , #RIGHT , #START , #END , #CENTER , #BASELINE and #FILL .
 */
@interface RepackagedAndroidWidgetGridLayout_Alignment : NSObject

#pragma mark Package-Private

- (instancetype)init;

/**
 @brief Returns an alignment value.
 In the case of vertical alignments the value returned should indicate the distance from the top of the view to the alignment location. For horizontal alignments measurement is made from the left edge of the component.
 @param view the view to which this alignment should be applied
 @param viewSize the measured size of the view
 @param mode the basis of alignment: CLIP or OPTICAL
 @return the alignment value
 */
- (jint)getAlignmentValueWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)view
                                               withInt:(jint)viewSize
                                               withInt:(jint)mode;

- (RepackagedAndroidWidgetGridLayout_Bounds *)getBounds;

- (jint)getGravityOffsetWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)view
                                              withInt:(jint)cellDelta;

/**
 @brief Returns the size of the view specified by this alignment.
 In the case of vertical alignments this method should return a height; for horizontal alignments this method should return the width. <p> The default implementation returns <code>viewSize</code> .
 @param view the view to which this alignment should be applied
 @param viewSize the measured size of the view
 @param cellSize the size of the cell into which this view will be placed
 @return the aligned size
 */
- (jint)getSizeInCellWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)view
                                           withInt:(jint)viewSize
                                           withInt:(jint)cellSize;

@end

J2OBJC_EMPTY_STATIC_INIT(RepackagedAndroidWidgetGridLayout_Alignment)

FOUNDATION_EXPORT void RepackagedAndroidWidgetGridLayout_Alignment_init(RepackagedAndroidWidgetGridLayout_Alignment *self);

J2OBJC_TYPE_LITERAL_HEADER(RepackagedAndroidWidgetGridLayout_Alignment)

#endif // _RepackagedAndroidWidgetGridLayout_H_
