//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/androidlayouts/repackaged/android/util/SizeF.java
//

#ifndef _RepackagedAndroidUtilSizeF_H_
#define _RepackagedAndroidUtilSizeF_H_

#include "J2ObjC_header.h"

/**
 @brief Immutable class for describing width and height dimensions in some arbitrary unit.
 <p> Width and height are finite values stored as a floating point representation. </p>
 */
@interface RepackagedAndroidUtilSizeF : NSObject

#pragma mark Public

/**
 @brief Create a new immutable SizeF instance.
 <p>Both the <code>width</code> and the <code>height</code> must be a finite number. In particular, <code>NaN</code> and positive/negative infinity are illegal values.</p>
 @param width The width of the size
 @param height The height of the size
 @throws IllegalArgumentException if either <code>width</code> or <code>height</code> was not finite.
 */
- (instancetype)initWithFloat:(jfloat)width
                    withFloat:(jfloat)height;

/**
 @brief Check if this size is equal to another size.
 <p>Two sizes are equal if and only if both their widths and heights are the same.</p> <p>For this purpose, the width/height float values are considered to be the same if and only if the method Float#floatToIntBits(float) returns the identical <code>int</code> value when applied to each.</p>
 @return <code>true</code> if the objects were equal, <code>false</code> otherwise
 */
- (jboolean)isEqual:(id)obj;

/**
 @brief Get the height of the size (as an arbitrary unit).
 @return height
 */
- (jfloat)getHeight;

/**
 @brief Get the width of the size (as an arbitrary unit).
 @return width
 */
- (jfloat)getWidth;

/**
 
 */
- (NSUInteger)hash;

/**
 @brief Parses the specified string as a size value.
 <p> The ASCII characters <code>\</code> <code>u002a</code> ('*') and <code>\</code> <code>u0078</code> ('x') are recognized as separators between the width and height.</p> <p> For any <code>SizeF s</code> : <code>SizeF.parseSizeF(s.toString()).equals(s)</code> . However, the method also handles sizes expressed in the following forms:</p> <p> "<i>width</i> <code>x</code> <i>height</i>" or "<i>width</i> <code>*</code> <i>height</i>" <code>=> new SizeF(width, height)</code> , where <i>width</i> and <i>height</i> are string floats potentially containing a sign, such as "-10.3", "+7" or "5.2", but not containing an <code>'x'</code> (such as a float in hexadecimal string format).</p> <pre> <code>SizeF.parseSizeF("3.2*+6").equals(new SizeF(3.2f, 6.0f)) == true SizeF.parseSizeF("-3x-6").equals(new SizeF(-3.0f, -6.0f)) == true SizeF.parseSizeF("4 by 3") => throws NumberFormatException</code> </pre>
 @param string the string representation of a size value.
 @return the size value represented by <code>string</code> .
 @throws NumberFormatException if <code>string</code> cannot be parsed as a size value.
 @throws NullPointerException if <code>string</code> was <code>null</code>
 */
+ (RepackagedAndroidUtilSizeF *)parseSizeFWithNSString:(NSString *)string;

/**
 @brief Return the size represented as a string with the format <code>"WxH"</code>
 @return string representation of the size
 */
- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(RepackagedAndroidUtilSizeF)

FOUNDATION_EXPORT void RepackagedAndroidUtilSizeF_initWithFloat_withFloat_(RepackagedAndroidUtilSizeF *self, jfloat width, jfloat height);

FOUNDATION_EXPORT RepackagedAndroidUtilSizeF *new_RepackagedAndroidUtilSizeF_initWithFloat_withFloat_(jfloat width, jfloat height) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RepackagedAndroidUtilSizeF *RepackagedAndroidUtilSizeF_parseSizeFWithNSString_(NSString *string);

J2OBJC_TYPE_LITERAL_HEADER(RepackagedAndroidUtilSizeF)

#endif // _RepackagedAndroidUtilSizeF_H_
