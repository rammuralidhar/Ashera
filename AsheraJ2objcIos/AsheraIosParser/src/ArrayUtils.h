//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/androidlayouts/repackaged/com/android/internal/util/ArrayUtils.java
//

#ifndef _RepackagedComAndroidInternalUtilArrayUtils_H_
#define _RepackagedComAndroidInternalUtilArrayUtils_H_

#include "J2ObjC_header.h"

@class IOSBooleanArray;
@class IOSByteArray;
@class IOSCharArray;
@class IOSClass;
@class IOSFloatArray;
@class IOSIntArray;
@class IOSLongArray;
@class IOSObjectArray;
@class JavaUtilArrayList;
@class RepackagedAndroidUtilArraySet;

/**
 @brief ArrayUtils contains some methods that you can call to find out the most efficient increments by which to grow arrays.
 */
@interface RepackagedComAndroidInternalUtilArrayUtils : NSObject

#pragma mark Public

+ (JavaUtilArrayList *)addWithJavaUtilArrayList:(JavaUtilArrayList *)cur
                                         withId:(id)val;

+ (RepackagedAndroidUtilArraySet *)addWithRepackagedAndroidUtilArraySet:(RepackagedAndroidUtilArraySet *)cur
                                                                 withId:(id)val;

/**
 @brief Adds value to given array if not already present, providing set-like behavior.
 */
+ (IOSObjectArray *)appendElementWithIOSClass:(IOSClass *)kind
                            withNSObjectArray:(IOSObjectArray *)array
                                       withId:(id)element;

/**
 @brief Adds value to given array if not already present, providing set-like behavior.
 */
+ (IOSIntArray *)appendIntWithIntArray:(IOSIntArray *)cur
                               withInt:(jint)val;

/**
 @brief Adds value to given array if not already present, providing set-like behavior.
 */
+ (IOSLongArray *)appendLongWithLongArray:(IOSLongArray *)cur
                                 withLong:(jlong)val;

+ (IOSLongArray *)cloneOrNullWithLongArray:(IOSLongArray *)array;

+ (jboolean)containsWithJavaUtilArrayList:(JavaUtilArrayList *)cur
                                   withId:(id)val;

+ (jboolean)containsWithRepackagedAndroidUtilArraySet:(RepackagedAndroidUtilArraySet *)cur
                                               withId:(id)val;

+ (jboolean)containsWithIntArray:(IOSIntArray *)array
                         withInt:(jint)value;

+ (jboolean)containsWithLongArray:(IOSLongArray *)array
                         withLong:(jlong)value;

/**
 @brief Checks that value is present as at least one of the elements of the array.
 @param array the array to check in
 @param value the value to check for
 @return true if the value is present in the array
 */
+ (jboolean)containsWithNSObjectArray:(IOSObjectArray *)array
                               withId:(id)value;

/**
 @brief Test if all <code>check</code> items are contained in <code>array</code> .
 */
+ (jboolean)containsAllWithNSObjectArray:(IOSObjectArray *)array
                       withNSObjectArray:(IOSObjectArray *)check;

/**
 @brief Returns an empty array of the specified type.
 The intent is that it will return the same empty array every time to avoid reallocation, although this is not guaranteed.
 */
+ (IOSObjectArray *)emptyArrayWithIOSClass:(IOSClass *)kind;

/**
 @brief Checks if the beginnings of two byte arrays are equal.
 @param array1 the first byte array
 @param array2 the second byte array
 @param length the number of bytes to check
 @return true if they're equal, false otherwise
 */
+ (jboolean)equalsWithByteArray:(IOSByteArray *)array1
                  withByteArray:(IOSByteArray *)array2
                        withInt:(jint)length;

/**
 @brief Return first index of <code>value</code> in <code>array</code> , or <code>-1</code> if not found.
 */
+ (jint)indexOfWithNSObjectArray:(IOSObjectArray *)array
                          withId:(id)value;

/**
 @brief Checks if given array is null or has zero elements.
 */
+ (jboolean)isEmptyWithIntArray:(IOSIntArray *)array;

/**
 @brief Checks if given array is null or has zero elements.
 */
+ (jboolean)isEmptyWithLongArray:(IOSLongArray *)array;

/**
 @brief Checks if given array is null or has zero elements.
 */
+ (jboolean)isEmptyWithNSObjectArray:(IOSObjectArray *)array;

+ (IOSObjectArray *)newUnpaddedArrayWithIOSClass:(IOSClass *)clazz
                                         withInt:(jint)minLen OBJC_METHOD_FAMILY_NONE;

+ (IOSBooleanArray *)newUnpaddedBooleanArrayWithInt:(jint)minLen OBJC_METHOD_FAMILY_NONE;

+ (IOSByteArray *)newUnpaddedByteArrayWithInt:(jint)minLen OBJC_METHOD_FAMILY_NONE;

+ (IOSCharArray *)newUnpaddedCharArrayWithInt:(jint)minLen OBJC_METHOD_FAMILY_NONE;

+ (IOSFloatArray *)newUnpaddedFloatArrayWithInt:(jint)minLen OBJC_METHOD_FAMILY_NONE;

+ (IOSIntArray *)newUnpaddedIntArrayWithInt:(jint)minLen OBJC_METHOD_FAMILY_NONE;

+ (IOSLongArray *)newUnpaddedLongArrayWithInt:(jint)minLen OBJC_METHOD_FAMILY_NONE;

+ (IOSObjectArray *)newUnpaddedObjectArrayWithInt:(jint)minLen OBJC_METHOD_FAMILY_NONE;

/**
 @brief Returns true if the two ArrayLists are equal with respect to the objects they contain.
 The objects must be in the same order and be reference equal (== not .equals()).
 */
+ (jboolean)referenceEqualsWithJavaUtilArrayList:(JavaUtilArrayList *)a
                           withJavaUtilArrayList:(JavaUtilArrayList *)b;

+ (JavaUtilArrayList *)removeWithJavaUtilArrayList:(JavaUtilArrayList *)cur
                                            withId:(id)val;

+ (RepackagedAndroidUtilArraySet *)removeWithRepackagedAndroidUtilArraySet:(RepackagedAndroidUtilArraySet *)cur
                                                                    withId:(id)val;

/**
 @brief Removes value from given array if present, providing set-like behavior.
 */
+ (IOSObjectArray *)removeElementWithIOSClass:(IOSClass *)kind
                            withNSObjectArray:(IOSObjectArray *)array
                                       withId:(id)element;

/**
 @brief Removes value from given array if present, providing set-like behavior.
 */
+ (IOSIntArray *)removeIntWithIntArray:(IOSIntArray *)cur
                               withInt:(jint)val;

/**
 @brief Removes value from given array if present, providing set-like behavior.
 */
+ (IOSLongArray *)removeLongWithLongArray:(IOSLongArray *)cur
                                 withLong:(jlong)val;

/**
 @brief Removes value from given array if present, providing set-like behavior.
 */
+ (IOSObjectArray *)removeStringWithNSStringArray:(IOSObjectArray *)cur
                                     withNSString:(NSString *)val;

+ (jlong)totalWithLongArray:(IOSLongArray *)array;

@end

J2OBJC_STATIC_INIT(RepackagedComAndroidInternalUtilArrayUtils)

FOUNDATION_EXPORT IOSByteArray *RepackagedComAndroidInternalUtilArrayUtils_newUnpaddedByteArrayWithInt_(jint minLen);

FOUNDATION_EXPORT IOSCharArray *RepackagedComAndroidInternalUtilArrayUtils_newUnpaddedCharArrayWithInt_(jint minLen);

FOUNDATION_EXPORT IOSIntArray *RepackagedComAndroidInternalUtilArrayUtils_newUnpaddedIntArrayWithInt_(jint minLen);

FOUNDATION_EXPORT IOSBooleanArray *RepackagedComAndroidInternalUtilArrayUtils_newUnpaddedBooleanArrayWithInt_(jint minLen);

FOUNDATION_EXPORT IOSLongArray *RepackagedComAndroidInternalUtilArrayUtils_newUnpaddedLongArrayWithInt_(jint minLen);

FOUNDATION_EXPORT IOSFloatArray *RepackagedComAndroidInternalUtilArrayUtils_newUnpaddedFloatArrayWithInt_(jint minLen);

FOUNDATION_EXPORT IOSObjectArray *RepackagedComAndroidInternalUtilArrayUtils_newUnpaddedObjectArrayWithInt_(jint minLen);

FOUNDATION_EXPORT IOSObjectArray *RepackagedComAndroidInternalUtilArrayUtils_newUnpaddedArrayWithIOSClass_withInt_(IOSClass *clazz, jint minLen);

FOUNDATION_EXPORT jboolean RepackagedComAndroidInternalUtilArrayUtils_equalsWithByteArray_withByteArray_withInt_(IOSByteArray *array1, IOSByteArray *array2, jint length);

FOUNDATION_EXPORT IOSObjectArray *RepackagedComAndroidInternalUtilArrayUtils_emptyArrayWithIOSClass_(IOSClass *kind);

FOUNDATION_EXPORT jboolean RepackagedComAndroidInternalUtilArrayUtils_isEmptyWithNSObjectArray_(IOSObjectArray *array);

FOUNDATION_EXPORT jboolean RepackagedComAndroidInternalUtilArrayUtils_isEmptyWithIntArray_(IOSIntArray *array);

FOUNDATION_EXPORT jboolean RepackagedComAndroidInternalUtilArrayUtils_isEmptyWithLongArray_(IOSLongArray *array);

FOUNDATION_EXPORT jboolean RepackagedComAndroidInternalUtilArrayUtils_containsWithNSObjectArray_withId_(IOSObjectArray *array, id value);

FOUNDATION_EXPORT jint RepackagedComAndroidInternalUtilArrayUtils_indexOfWithNSObjectArray_withId_(IOSObjectArray *array, id value);

FOUNDATION_EXPORT jboolean RepackagedComAndroidInternalUtilArrayUtils_containsAllWithNSObjectArray_withNSObjectArray_(IOSObjectArray *array, IOSObjectArray *check);

FOUNDATION_EXPORT jboolean RepackagedComAndroidInternalUtilArrayUtils_containsWithIntArray_withInt_(IOSIntArray *array, jint value);

FOUNDATION_EXPORT jboolean RepackagedComAndroidInternalUtilArrayUtils_containsWithLongArray_withLong_(IOSLongArray *array, jlong value);

FOUNDATION_EXPORT jlong RepackagedComAndroidInternalUtilArrayUtils_totalWithLongArray_(IOSLongArray *array);

FOUNDATION_EXPORT IOSObjectArray *RepackagedComAndroidInternalUtilArrayUtils_appendElementWithIOSClass_withNSObjectArray_withId_(IOSClass *kind, IOSObjectArray *array, id element);

FOUNDATION_EXPORT IOSObjectArray *RepackagedComAndroidInternalUtilArrayUtils_removeElementWithIOSClass_withNSObjectArray_withId_(IOSClass *kind, IOSObjectArray *array, id element);

FOUNDATION_EXPORT IOSIntArray *RepackagedComAndroidInternalUtilArrayUtils_appendIntWithIntArray_withInt_(IOSIntArray *cur, jint val);

FOUNDATION_EXPORT IOSIntArray *RepackagedComAndroidInternalUtilArrayUtils_removeIntWithIntArray_withInt_(IOSIntArray *cur, jint val);

FOUNDATION_EXPORT IOSObjectArray *RepackagedComAndroidInternalUtilArrayUtils_removeStringWithNSStringArray_withNSString_(IOSObjectArray *cur, NSString *val);

FOUNDATION_EXPORT IOSLongArray *RepackagedComAndroidInternalUtilArrayUtils_appendLongWithLongArray_withLong_(IOSLongArray *cur, jlong val);

FOUNDATION_EXPORT IOSLongArray *RepackagedComAndroidInternalUtilArrayUtils_removeLongWithLongArray_withLong_(IOSLongArray *cur, jlong val);

FOUNDATION_EXPORT IOSLongArray *RepackagedComAndroidInternalUtilArrayUtils_cloneOrNullWithLongArray_(IOSLongArray *array);

FOUNDATION_EXPORT RepackagedAndroidUtilArraySet *RepackagedComAndroidInternalUtilArrayUtils_addWithRepackagedAndroidUtilArraySet_withId_(RepackagedAndroidUtilArraySet *cur, id val);

FOUNDATION_EXPORT RepackagedAndroidUtilArraySet *RepackagedComAndroidInternalUtilArrayUtils_removeWithRepackagedAndroidUtilArraySet_withId_(RepackagedAndroidUtilArraySet *cur, id val);

FOUNDATION_EXPORT jboolean RepackagedComAndroidInternalUtilArrayUtils_containsWithRepackagedAndroidUtilArraySet_withId_(RepackagedAndroidUtilArraySet *cur, id val);

FOUNDATION_EXPORT JavaUtilArrayList *RepackagedComAndroidInternalUtilArrayUtils_addWithJavaUtilArrayList_withId_(JavaUtilArrayList *cur, id val);

FOUNDATION_EXPORT JavaUtilArrayList *RepackagedComAndroidInternalUtilArrayUtils_removeWithJavaUtilArrayList_withId_(JavaUtilArrayList *cur, id val);

FOUNDATION_EXPORT jboolean RepackagedComAndroidInternalUtilArrayUtils_containsWithJavaUtilArrayList_withId_(JavaUtilArrayList *cur, id val);

FOUNDATION_EXPORT jboolean RepackagedComAndroidInternalUtilArrayUtils_referenceEqualsWithJavaUtilArrayList_withJavaUtilArrayList_(JavaUtilArrayList *a, JavaUtilArrayList *b);

J2OBJC_TYPE_LITERAL_HEADER(RepackagedComAndroidInternalUtilArrayUtils)

#endif // _RepackagedComAndroidInternalUtilArrayUtils_H_
