//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/androidlayouts/repackaged/android/graphics/Color.java
//

#ifndef _RepackagedAndroidGraphicsColor_H_
#define _RepackagedAndroidGraphicsColor_H_

#include "J2ObjC_header.h"

@class IOSFloatArray;

#define RepackagedAndroidGraphicsColor_BLACK -16777216
#define RepackagedAndroidGraphicsColor_DKGRAY -12303292
#define RepackagedAndroidGraphicsColor_GRAY -7829368
#define RepackagedAndroidGraphicsColor_LTGRAY -3355444
#define RepackagedAndroidGraphicsColor_WHITE -1
#define RepackagedAndroidGraphicsColor_RED -65536
#define RepackagedAndroidGraphicsColor_GREEN -16711936
#define RepackagedAndroidGraphicsColor_BLUE -16776961
#define RepackagedAndroidGraphicsColor_YELLOW -256
#define RepackagedAndroidGraphicsColor_CYAN -16711681
#define RepackagedAndroidGraphicsColor_MAGENTA -65281
#define RepackagedAndroidGraphicsColor_TRANSPARENT 0

/**
 @brief The Color class defines methods for creating and converting color ints.
 Colors are represented as packed ints, made up of 4 bytes: alpha, red, green, blue. The values are unpremultiplied, meaning any transparency is stored solely in the alpha component, and not in the color components. The components are stored as follows (alpha << 24) | (red << 16) | (green << 8) | blue. Each component ranges between 0..255 with 0 meaning no contribution for that component, and 255 meaning 100% contribution. Thus opaque-black would be 0xFF000000 (100% opaque but no contributions from red, green, or blue), and opaque-white would be 0xFFFFFFFF
 */
@interface RepackagedAndroidGraphicsColor : NSObject

#pragma mark Public

- (instancetype)init;

/**
 @brief Return the alpha component of a color int.
 This is the same as saying color >>> 24
 */
+ (jint)alphaWithInt:(jint)color;

/**
 @brief Return a color-int from alpha, red, green, blue components.
 These component values should be [0..255], but there is no range check performed, so if they are out of range, the returned color is undefined.
 @param alpha Alpha component [0..255] of the color
 @param red Red component [0..255] of the color
 @param green Green component [0..255] of the color
 @param blue Blue component [0..255] of the color
 */
+ (jint)argbWithInt:(jint)alpha
            withInt:(jint)red
            withInt:(jint)green
            withInt:(jint)blue;

/**
 @brief Return the blue component of a color int.
 This is the same as saying color & 0xFF
 */
+ (jint)blueWithInt:(jint)color;

/**
 @brief Returns the brightness component of a color int.
 @return A value between 0.0f and 1.0f
 Pending API council
 */
+ (jfloat)brightnessWithInt:(jint)color;

/**
 @brief Convert the argb color to its HSV components. hsv[0] is Hue [0 .. 360) hsv[1] is Saturation [0...1] hsv[2] is Value [0...1]
 @param color the argb color to convert. The alpha component is ignored.
 @param hsv 3 element array which holds the resulting HSV components.
 */
+ (void)colorToHSVWithInt:(jint)color
           withFloatArray:(IOSFloatArray *)hsv;

/**
 @brief Converts an HTML color (named or numeric) to an integer RGB value.
 @param color Non-null color string.
 @return A color value, or <code>-1</code> if the color string could not be interpreted.
 */
+ (jint)getHtmlColorWithNSString:(NSString *)color;

/**
 @brief Return the green component of a color int.
 This is the same as saying (color >> 8) & 0xFF
 */
+ (jint)greenWithInt:(jint)color;

/**
 @brief Convert HSB components to an ARGB color.
 Alpha set to 0xFF. hsv[0] is Hue [0 .. 1) hsv[1] is Saturation [0...1] hsv[2] is Value [0...1] If hsv values are out of range, they are pinned.
 @param h Hue component
 @param s Saturation component
 @param b Brightness component
 @return the resulting argb color
 Pending API council
 */
+ (jint)HSBtoColorWithFloat:(jfloat)h
                  withFloat:(jfloat)s
                  withFloat:(jfloat)b;

/**
 @brief Convert HSB components to an ARGB color.
 Alpha set to 0xFF. hsv[0] is Hue [0 .. 1) hsv[1] is Saturation [0...1] hsv[2] is Value [0...1] If hsv values are out of range, they are pinned.
 @param hsb 3 element array which holds the input HSB components.
 @return the resulting argb color
 Pending API council
 */
+ (jint)HSBtoColorWithFloatArray:(IOSFloatArray *)hsb;

/**
 @brief Convert HSV components to an ARGB color.
 Alpha set to 0xFF. hsv[0] is Hue [0 .. 360) hsv[1] is Saturation [0...1] hsv[2] is Value [0...1] If hsv values are out of range, they are pinned.
 @param hsv 3 element array which holds the input HSV components.
 @return the resulting argb color
 */
+ (jint)HSVToColorWithFloatArray:(IOSFloatArray *)hsv;

/**
 @brief Convert HSV components to an ARGB color.
 The alpha component is passed through unchanged. hsv[0] is Hue [0 .. 360) hsv[1] is Saturation [0...1] hsv[2] is Value [0...1] If hsv values are out of range, they are pinned.
 @param alpha the alpha component of the returned argb color.
 @param hsv 3 element array which holds the input HSV components.
 @return the resulting argb color
 */
+ (jint)HSVToColorWithInt:(jint)alpha
           withFloatArray:(IOSFloatArray *)hsv;

/**
 @brief Returns the hue component of a color int.
 @return A value between 0.0f and 1.0f
 Pending API council
 */
+ (jfloat)hueWithInt:(jint)color;

/**
 @brief Parse the color string, and return the corresponding color-int.
 If the string cannot be parsed, throws an IllegalArgumentException exception. Supported formats are: #RRGGBB #AARRGGBB or one of the following names: 'red', 'blue', 'green', 'black', 'white', 'gray', 'cyan', 'magenta', 'yellow', 'lightgray', 'darkgray', 'grey', 'lightgrey', 'darkgrey', 'aqua', 'fuchsia', 'lime', 'maroon', 'navy', 'olive', 'purple', 'silver', 'teal'.
 */
+ (jint)parseColorWithNSString:(NSString *)colorString;

/**
 @brief Return the red component of a color int.
 This is the same as saying (color >> 16) & 0xFF
 */
+ (jint)redWithInt:(jint)color;

/**
 @brief Return a color-int from red, green, blue components.
 The alpha component is implicity 255 (fully opaque). These component values should be [0..255], but there is no range check performed, so if they are out of range, the returned color is undefined.
 @param red Red component [0..255] of the color
 @param green Green component [0..255] of the color
 @param blue Blue component [0..255] of the color
 */
+ (jint)rgbWithInt:(jint)red
           withInt:(jint)green
           withInt:(jint)blue;

/**
 @brief Convert RGB components to HSV. hsv[0] is Hue [0 .. 360) hsv[1] is Saturation [0...1] hsv[2] is Value [0...1]
 @param red red component value [0..255]
 @param green green component value [0..255]
 @param blue blue component value [0..255]
 @param hsv 3 element array which holds the resulting HSV components.
 */
+ (void)RGBToHSVWithInt:(jint)red
                withInt:(jint)green
                withInt:(jint)blue
         withFloatArray:(IOSFloatArray *)hsv;

/**
 @brief Returns the saturation component of a color int.
 @return A value between 0.0f and 1.0f
 Pending API council
 */
+ (jfloat)saturationWithInt:(jint)color;

@end

J2OBJC_STATIC_INIT(RepackagedAndroidGraphicsColor)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidGraphicsColor, BLACK, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidGraphicsColor, DKGRAY, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidGraphicsColor, GRAY, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidGraphicsColor, LTGRAY, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidGraphicsColor, WHITE, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidGraphicsColor, RED, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidGraphicsColor, GREEN, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidGraphicsColor, BLUE, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidGraphicsColor, YELLOW, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidGraphicsColor, CYAN, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidGraphicsColor, MAGENTA, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidGraphicsColor, TRANSPARENT, jint)

FOUNDATION_EXPORT jint RepackagedAndroidGraphicsColor_alphaWithInt_(jint color);

FOUNDATION_EXPORT jint RepackagedAndroidGraphicsColor_redWithInt_(jint color);

FOUNDATION_EXPORT jint RepackagedAndroidGraphicsColor_greenWithInt_(jint color);

FOUNDATION_EXPORT jint RepackagedAndroidGraphicsColor_blueWithInt_(jint color);

FOUNDATION_EXPORT jint RepackagedAndroidGraphicsColor_rgbWithInt_withInt_withInt_(jint red, jint green, jint blue);

FOUNDATION_EXPORT jint RepackagedAndroidGraphicsColor_argbWithInt_withInt_withInt_withInt_(jint alpha, jint red, jint green, jint blue);

FOUNDATION_EXPORT jfloat RepackagedAndroidGraphicsColor_hueWithInt_(jint color);

FOUNDATION_EXPORT jfloat RepackagedAndroidGraphicsColor_saturationWithInt_(jint color);

FOUNDATION_EXPORT jfloat RepackagedAndroidGraphicsColor_brightnessWithInt_(jint color);

FOUNDATION_EXPORT jint RepackagedAndroidGraphicsColor_parseColorWithNSString_(NSString *colorString);

FOUNDATION_EXPORT jint RepackagedAndroidGraphicsColor_HSBtoColorWithFloatArray_(IOSFloatArray *hsb);

FOUNDATION_EXPORT jint RepackagedAndroidGraphicsColor_HSBtoColorWithFloat_withFloat_withFloat_(jfloat h, jfloat s, jfloat b);

FOUNDATION_EXPORT void RepackagedAndroidGraphicsColor_RGBToHSVWithInt_withInt_withInt_withFloatArray_(jint red, jint green, jint blue, IOSFloatArray *hsv);

FOUNDATION_EXPORT void RepackagedAndroidGraphicsColor_colorToHSVWithInt_withFloatArray_(jint color, IOSFloatArray *hsv);

FOUNDATION_EXPORT jint RepackagedAndroidGraphicsColor_HSVToColorWithFloatArray_(IOSFloatArray *hsv);

FOUNDATION_EXPORT jint RepackagedAndroidGraphicsColor_HSVToColorWithInt_withFloatArray_(jint alpha, IOSFloatArray *hsv);

FOUNDATION_EXPORT jint RepackagedAndroidGraphicsColor_getHtmlColorWithNSString_(NSString *color);

FOUNDATION_EXPORT void RepackagedAndroidGraphicsColor_init(RepackagedAndroidGraphicsColor *self);

FOUNDATION_EXPORT RepackagedAndroidGraphicsColor *new_RepackagedAndroidGraphicsColor_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(RepackagedAndroidGraphicsColor)

#endif // _RepackagedAndroidGraphicsColor_H_
