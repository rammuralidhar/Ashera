//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/androidlayouts/repackaged/android/util/MonthDisplayHelper.java
//


#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "MonthDisplayHelper.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/util/Calendar.h"

#line 0 "/Users/ramm/git/Ashera/AsheraAndroidParser/androidlayouts/repackaged/android/util/MonthDisplayHelper.java"

@interface RepackagedAndroidUtilMonthDisplayHelper () {
 @public
  jint mWeekStartDay_;
  JavaUtilCalendar *mCalendar_;
  jint mNumDaysInMonth_;
  jint mNumDaysInPrevMonth_;
  jint mOffset_;
}

- (void)recalculate;

@end

J2OBJC_FIELD_SETTER(RepackagedAndroidUtilMonthDisplayHelper, mCalendar_, JavaUtilCalendar *)

__attribute__((unused)) static void RepackagedAndroidUtilMonthDisplayHelper_recalculate(RepackagedAndroidUtilMonthDisplayHelper *self);


#line 27
@implementation RepackagedAndroidUtilMonthDisplayHelper


#line 46
- (instancetype)initWithInt:(jint)year
                    withInt:(jint)month
                    withInt:(jint)weekStartDay {
  RepackagedAndroidUtilMonthDisplayHelper_initWithInt_withInt_withInt_(self, year, month, weekStartDay);
  return self;
}


#line 66
- (instancetype)initWithInt:(jint)year
                    withInt:(jint)month {
  RepackagedAndroidUtilMonthDisplayHelper_initWithInt_withInt_(self, year, month);
  return self;
}


#line 71
- (jint)getYear {
  return [((JavaUtilCalendar *) nil_chk(mCalendar_)) getWithInt:JavaUtilCalendar_YEAR];
}

- (jint)getMonth {
  return [((JavaUtilCalendar *) nil_chk(mCalendar_)) getWithInt:JavaUtilCalendar_MONTH];
}


#line 80
- (jint)getWeekStartDay {
  return mWeekStartDay_;
}


#line 88
- (jint)getFirstDayOfMonth {
  return [((JavaUtilCalendar *) nil_chk(mCalendar_)) getWithInt:JavaUtilCalendar_DAY_OF_WEEK];
}


#line 95
- (jint)getNumberOfDaysInMonth {
  return mNumDaysInMonth_;
}


#line 105
- (jint)getOffset {
  return mOffset_;
}


#line 115
- (IOSIntArray *)getDigitsForRowWithInt:(jint)row {
  if (row < 0 || row > 5) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I$", @"row ", row, @" out of range (0-5)"));
  }
  
#line 121
  IOSIntArray *result = [IOSIntArray newArrayWithLength:7];
  for (jint column = 0; column < 7; column++) {
    *IOSIntArray_GetRef(result, column) = [self getDayAtWithInt:row withInt:column];
  }
  
#line 126
  return result;
}


#line 134
- (jint)getDayAtWithInt:(jint)row
                withInt:(jint)column {
  
#line 136
  if (row == 0 && column < mOffset_) {
    return mNumDaysInPrevMonth_ + column - mOffset_ + 1;
  }
  
#line 140
  jint day = 7 * row + column - mOffset_ + 1;
  
#line 142
  return (day > mNumDaysInMonth_) ?
#line 143
  day - mNumDaysInMonth_ : day;
}


#line 149
- (jint)getRowOfWithInt:(jint)day {
  return (day + mOffset_ - 1) / 7;
}


#line 156
- (jint)getColumnOfWithInt:(jint)day {
  return (day + mOffset_ - 1) % 7;
}


#line 163
- (void)previousMonth {
  [((JavaUtilCalendar *) nil_chk(mCalendar_)) addWithInt:JavaUtilCalendar_MONTH withInt:-1];
  RepackagedAndroidUtilMonthDisplayHelper_recalculate(self);
}


#line 171
- (void)nextMonth {
  [((JavaUtilCalendar *) nil_chk(mCalendar_)) addWithInt:JavaUtilCalendar_MONTH withInt:1];
  RepackagedAndroidUtilMonthDisplayHelper_recalculate(self);
}


#line 179
- (jboolean)isWithinCurrentMonthWithInt:(jint)row
                                withInt:(jint)column {
  
#line 181
  if (row < 0 || column < 0 || row > 5 || column > 6) {
    return NO;
  }
  
#line 185
  if (row == 0 && column < mOffset_) {
    return NO;
  }
  
#line 189
  jint day = 7 * row + column - mOffset_ + 1;
  if (day > mNumDaysInMonth_) {
    return NO;
  }
  return YES;
}


#line 198
- (void)recalculate {
  RepackagedAndroidUtilMonthDisplayHelper_recalculate(self);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithInt:withInt:withInt:", "MonthDisplayHelper", NULL, 0x1, NULL, NULL },
    { "initWithInt:withInt:", "MonthDisplayHelper", NULL, 0x1, NULL, NULL },
    { "getYear", NULL, "I", 0x1, NULL, NULL },
    { "getMonth", NULL, "I", 0x1, NULL, NULL },
    { "getWeekStartDay", NULL, "I", 0x1, NULL, NULL },
    { "getFirstDayOfMonth", NULL, "I", 0x1, NULL, NULL },
    { "getNumberOfDaysInMonth", NULL, "I", 0x1, NULL, NULL },
    { "getOffset", NULL, "I", 0x1, NULL, NULL },
    { "getDigitsForRowWithInt:", "getDigitsForRow", "[I", 0x1, NULL, NULL },
    { "getDayAtWithInt:withInt:", "getDayAt", "I", 0x1, NULL, NULL },
    { "getRowOfWithInt:", "getRowOf", "I", 0x1, NULL, NULL },
    { "getColumnOfWithInt:", "getColumnOf", "I", 0x1, NULL, NULL },
    { "previousMonth", NULL, "V", 0x1, NULL, NULL },
    { "nextMonth", NULL, "V", 0x1, NULL, NULL },
    { "isWithinCurrentMonthWithInt:withInt:", "isWithinCurrentMonth", "Z", 0x1, NULL, NULL },
    { "recalculate", NULL, "V", 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "mWeekStartDay_", NULL, 0x12, "I", NULL, NULL,  },
    { "mCalendar_", NULL, 0x2, "Ljava.util.Calendar;", NULL, NULL,  },
    { "mNumDaysInMonth_", NULL, 0x2, "I", NULL, NULL,  },
    { "mNumDaysInPrevMonth_", NULL, 0x2, "I", NULL, NULL,  },
    { "mOffset_", NULL, 0x2, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _RepackagedAndroidUtilMonthDisplayHelper = { 2, "MonthDisplayHelper", "repackaged.android.util", NULL, 0x1, 16, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_RepackagedAndroidUtilMonthDisplayHelper;
}

@end


#line 46
void RepackagedAndroidUtilMonthDisplayHelper_initWithInt_withInt_withInt_(RepackagedAndroidUtilMonthDisplayHelper *self, jint year, jint month, jint weekStartDay) {
  (void) NSObject_init(self);
  if (weekStartDay < JavaUtilCalendar_SUNDAY || weekStartDay > JavaUtilCalendar_SATURDAY) {
    @throw new_JavaLangIllegalArgumentException_init();
  }
  self->mWeekStartDay_ = weekStartDay;
  
#line 53
  self->mCalendar_ = JavaUtilCalendar_getInstance();
  [((JavaUtilCalendar *) nil_chk(self->mCalendar_)) setWithInt:JavaUtilCalendar_YEAR withInt:year];
  [self->mCalendar_ setWithInt:JavaUtilCalendar_MONTH withInt:month];
  [self->mCalendar_ setWithInt:JavaUtilCalendar_DAY_OF_MONTH withInt:1];
  [self->mCalendar_ setWithInt:JavaUtilCalendar_HOUR_OF_DAY withInt:0];
  [self->mCalendar_ setWithInt:JavaUtilCalendar_MINUTE withInt:0];
  [self->mCalendar_ setWithInt:JavaUtilCalendar_SECOND withInt:0];
  [self->mCalendar_ getTimeInMillis];
  
#line 62
  RepackagedAndroidUtilMonthDisplayHelper_recalculate(self);
}


#line 46
RepackagedAndroidUtilMonthDisplayHelper *new_RepackagedAndroidUtilMonthDisplayHelper_initWithInt_withInt_withInt_(jint year, jint month, jint weekStartDay) {
  RepackagedAndroidUtilMonthDisplayHelper *self = [RepackagedAndroidUtilMonthDisplayHelper alloc];
  RepackagedAndroidUtilMonthDisplayHelper_initWithInt_withInt_withInt_(self, year, month, weekStartDay);
  return self;
}


#line 66
void RepackagedAndroidUtilMonthDisplayHelper_initWithInt_withInt_(RepackagedAndroidUtilMonthDisplayHelper *self, jint year, jint month) {
  (void) RepackagedAndroidUtilMonthDisplayHelper_initWithInt_withInt_withInt_(self, year, month, JavaUtilCalendar_SUNDAY);
}


#line 66
RepackagedAndroidUtilMonthDisplayHelper *new_RepackagedAndroidUtilMonthDisplayHelper_initWithInt_withInt_(jint year, jint month) {
  RepackagedAndroidUtilMonthDisplayHelper *self = [RepackagedAndroidUtilMonthDisplayHelper alloc];
  RepackagedAndroidUtilMonthDisplayHelper_initWithInt_withInt_(self, year, month);
  return self;
}


#line 198
void RepackagedAndroidUtilMonthDisplayHelper_recalculate(RepackagedAndroidUtilMonthDisplayHelper *self) {
  
#line 200
  self->mNumDaysInMonth_ = [((JavaUtilCalendar *) nil_chk(self->mCalendar_)) getActualMaximumWithInt:JavaUtilCalendar_DAY_OF_MONTH];
  
#line 202
  [self->mCalendar_ addWithInt:JavaUtilCalendar_MONTH withInt:-1];
  self->mNumDaysInPrevMonth_ = [self->mCalendar_ getActualMaximumWithInt:JavaUtilCalendar_DAY_OF_MONTH];
  [self->mCalendar_ addWithInt:JavaUtilCalendar_MONTH withInt:1];
  
#line 206
  jint firstDayOfMonth = [self getFirstDayOfMonth];
  jint offset = firstDayOfMonth - self->mWeekStartDay_;
  if (offset < 0) {
    offset += 7;
  }
  self->mOffset_ = offset;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RepackagedAndroidUtilMonthDisplayHelper)
