//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/androidlayouts/repackaged/android/graphics/Matrix.java
//

#ifndef _RepackagedAndroidGraphicsMatrix_H_
#define _RepackagedAndroidGraphicsMatrix_H_

#include "J2ObjC_header.h"
#include "java/lang/Enum.h"

@class IOSFloatArray;
@class JavaIoPrintWriter;
@class JavaLangStringBuilder;
@class RepackagedAndroidGraphicsMatrix_ScaleToFitEnum;
@class RepackagedAndroidGraphicsRectF;

#define RepackagedAndroidGraphicsMatrix_MSCALE_X 0
#define RepackagedAndroidGraphicsMatrix_MSKEW_X 1
#define RepackagedAndroidGraphicsMatrix_MTRANS_X 2
#define RepackagedAndroidGraphicsMatrix_MSKEW_Y 3
#define RepackagedAndroidGraphicsMatrix_MSCALE_Y 4
#define RepackagedAndroidGraphicsMatrix_MTRANS_Y 5
#define RepackagedAndroidGraphicsMatrix_MPERSP_0 6
#define RepackagedAndroidGraphicsMatrix_MPERSP_1 7
#define RepackagedAndroidGraphicsMatrix_MPERSP_2 8

/**
 @brief The Matrix class holds a 3x3 matrix for transforming coordinates.
 */
@interface RepackagedAndroidGraphicsMatrix : NSObject {
 @public
  /**
   */
  jlong native_instance_;
}

#pragma mark Public

/**
 @brief Create an identity matrix
 */
- (instancetype)init;

/**
 @brief Create a matrix that is a (deep) copy of src
 @param src The matrix to copy into this matrix
 */
- (instancetype)initWithRepackagedAndroidGraphicsMatrix:(RepackagedAndroidGraphicsMatrix *)src;

/**
 @brief Returns true iff obj is a Matrix and its values equal our values.
 */
- (jboolean)isEqual:(id)obj;

/**
 @brief Copy 9 values from the matrix into the array.
 */
- (void)getValuesWithFloatArray:(IOSFloatArray *)values;

- (NSUInteger)hash;

/**
 @brief If this matrix can be inverted, return true and if inverse is not null, set inverse to be the inverse of this matrix.
 If this matrix cannot be inverted, ignore inverse and return false.
 */
- (jboolean)invertWithRepackagedAndroidGraphicsMatrix:(RepackagedAndroidGraphicsMatrix *)inverse;

/**
 @brief Gets whether this matrix is affine.
 An affine matrix preserves straight lines and has no perspective.
 @return Whether the matrix is affine.
 */
- (jboolean)isAffine;

/**
 @brief Returns true if the matrix is identity.
 This maybe faster than testing if (getType() == 0)
 */
- (jboolean)isIdentity;

/**
 @brief Apply this matrix to the array of 2D points, and write the transformed points back into the array
 @param pts The array [x0, y0, x1, y1, ...] of points to transform.
 */
- (void)mapPointsWithFloatArray:(IOSFloatArray *)pts;

/**
 @brief Apply this matrix to the array of 2D points specified by src, and write the transformed points into the array of points specified by dst.
 The two arrays represent their "points" as pairs of floats [x, y].
 @param dst The array of dst points (x,y pairs)
 @param src The array of src points (x,y pairs)
 */
- (void)mapPointsWithFloatArray:(IOSFloatArray *)dst
                 withFloatArray:(IOSFloatArray *)src;

/**
 @brief Apply this matrix to the array of 2D points specified by src, and write the transformed points into the array of points specified by dst.
 The two arrays represent their "points" as pairs of floats [x, y].
 @param dst The array of dst points (x,y pairs)
 @param dstIndex The index of the first [x,y] pair of dst floats
 @param src The array of src points (x,y pairs)
 @param srcIndex The index of the first [x,y] pair of src floats
 @param pointCount The number of points (x,y pairs) to transform
 */
- (void)mapPointsWithFloatArray:(IOSFloatArray *)dst
                        withInt:(jint)dstIndex
                 withFloatArray:(IOSFloatArray *)src
                        withInt:(jint)srcIndex
                        withInt:(jint)pointCount;

/**
 @brief Return the mean radius of a circle after it has been mapped by this matrix.
 NOTE: in perspective this value assumes the circle has its center at the origin.
 */
- (jfloat)mapRadiusWithFloat:(jfloat)radius;

/**
 @brief Apply this matrix to the rectangle, and write the transformed rectangle back into it.
 This is accomplished by transforming the 4 corners of rect, and then setting it to the bounds of those points
 @param rect The rectangle to transform.
 @return the result of calling rectStaysRect()
 */
- (jboolean)mapRectWithRepackagedAndroidGraphicsRectF:(RepackagedAndroidGraphicsRectF *)rect;

/**
 @brief Apply this matrix to the src rectangle, and write the transformed rectangle into dst.
 This is accomplished by transforming the 4 corners of src, and then setting dst to the bounds of those points.
 @param dst Where the transformed rectangle is written.
 @param src The original rectangle to be transformed.
 @return the result of calling rectStaysRect()
 */
- (jboolean)mapRectWithRepackagedAndroidGraphicsRectF:(RepackagedAndroidGraphicsRectF *)dst
                   withRepackagedAndroidGraphicsRectF:(RepackagedAndroidGraphicsRectF *)src;

/**
 @brief Apply this matrix to the array of 2D vectors, and write the transformed vectors back into the array.
 Note: this method does not apply the translation associated with the matrix. Use Matrix#mapPoints(float[]) if you want the translation to be applied.
 @param vecs The array [x0, y0, x1, y1, ...] of vectors to transform.
 */
- (void)mapVectorsWithFloatArray:(IOSFloatArray *)vecs;

/**
 @brief Apply this matrix to the array of 2D vectors specified by src, and write the transformed vectors into the array of vectors specified by dst.
 The two arrays represent their "vectors" as pairs of floats [x, y]. Note: this method does not apply the translation associated with the matrix. Use Matrix#mapPoints(float[],float[]) if you want the translation to be applied.
 @param dst The array of dst vectors (x,y pairs)
 @param src The array of src vectors (x,y pairs)
 */
- (void)mapVectorsWithFloatArray:(IOSFloatArray *)dst
                  withFloatArray:(IOSFloatArray *)src;

/**
 @brief Apply this matrix to the array of 2D vectors specified by src, and write the transformed vectors into the array of vectors specified by dst.
 The two arrays represent their "vectors" as pairs of floats [x, y]. Note: this method does not apply the translation associated with the matrix. Use Matrix#mapPoints(float[],int,float[],int,int) if you want the translation to be applied.
 @param dst The array of dst vectors (x,y pairs)
 @param dstIndex The index of the first [x,y] pair of dst floats
 @param src The array of src vectors (x,y pairs)
 @param srcIndex The index of the first [x,y] pair of src floats
 @param vectorCount The number of vectors (x,y pairs) to transform
 */
- (void)mapVectorsWithFloatArray:(IOSFloatArray *)dst
                         withInt:(jint)dstIndex
                  withFloatArray:(IOSFloatArray *)src
                         withInt:(jint)srcIndex
                         withInt:(jint)vectorCount;

/**
 @brief Postconcats the matrix with the specified matrix.
 M' = other * M
 */
- (jboolean)postConcatWithRepackagedAndroidGraphicsMatrix:(RepackagedAndroidGraphicsMatrix *)other;

/**
 @brief Postconcats the matrix with the specified rotation.
 M' = R(degrees) * M
 */
- (jboolean)postRotateWithFloat:(jfloat)degrees;

/**
 @brief Postconcats the matrix with the specified rotation.
 M' = R(degrees, px, py) * M
 */
- (jboolean)postRotateWithFloat:(jfloat)degrees
                      withFloat:(jfloat)px
                      withFloat:(jfloat)py;

/**
 @brief Postconcats the matrix with the specified scale.
 M' = S(sx, sy) * M
 */
- (jboolean)postScaleWithFloat:(jfloat)sx
                     withFloat:(jfloat)sy;

/**
 @brief Postconcats the matrix with the specified scale.
 M' = S(sx, sy, px, py) * M
 */
- (jboolean)postScaleWithFloat:(jfloat)sx
                     withFloat:(jfloat)sy
                     withFloat:(jfloat)px
                     withFloat:(jfloat)py;

/**
 @brief Postconcats the matrix with the specified skew.
 M' = K(kx, ky) * M
 */
- (jboolean)postSkewWithFloat:(jfloat)kx
                    withFloat:(jfloat)ky;

/**
 @brief Postconcats the matrix with the specified skew.
 M' = K(kx, ky, px, py) * M
 */
- (jboolean)postSkewWithFloat:(jfloat)kx
                    withFloat:(jfloat)ky
                    withFloat:(jfloat)px
                    withFloat:(jfloat)py;

/**
 @brief Postconcats the matrix with the specified translation.
 M' = T(dx, dy) * M
 */
- (jboolean)postTranslateWithFloat:(jfloat)dx
                         withFloat:(jfloat)dy;

/**
 @brief Preconcats the matrix with the specified matrix.
 M' = M * other
 */
- (jboolean)preConcatWithRepackagedAndroidGraphicsMatrix:(RepackagedAndroidGraphicsMatrix *)other;

/**
 @brief Preconcats the matrix with the specified rotation.
 M' = M * R(degrees)
 */
- (jboolean)preRotateWithFloat:(jfloat)degrees;

/**
 @brief Preconcats the matrix with the specified rotation.
 M' = M * R(degrees, px, py)
 */
- (jboolean)preRotateWithFloat:(jfloat)degrees
                     withFloat:(jfloat)px
                     withFloat:(jfloat)py;

/**
 @brief Preconcats the matrix with the specified scale.
 M' = M * S(sx, sy)
 */
- (jboolean)preScaleWithFloat:(jfloat)sx
                    withFloat:(jfloat)sy;

/**
 @brief Preconcats the matrix with the specified scale.
 M' = M * S(sx, sy, px, py)
 */
- (jboolean)preScaleWithFloat:(jfloat)sx
                    withFloat:(jfloat)sy
                    withFloat:(jfloat)px
                    withFloat:(jfloat)py;

/**
 @brief Preconcats the matrix with the specified skew.
 M' = M * K(kx, ky)
 */
- (jboolean)preSkewWithFloat:(jfloat)kx
                   withFloat:(jfloat)ky;

/**
 @brief Preconcats the matrix with the specified skew.
 M' = M * K(kx, ky, px, py)
 */
- (jboolean)preSkewWithFloat:(jfloat)kx
                   withFloat:(jfloat)ky
                   withFloat:(jfloat)px
                   withFloat:(jfloat)py;

/**
 @brief Preconcats the matrix with the specified translation.
 M' = M * T(dx, dy)
 */
- (jboolean)preTranslateWithFloat:(jfloat)dx
                        withFloat:(jfloat)dy;

/**
 @brief Print short string, to optimize dumping.
 */
- (void)printShortStringWithJavaIoPrintWriter:(JavaIoPrintWriter *)pw;

/**
 @brief Returns true if will map a rectangle to another rectangle.
 This can be true if the matrix is identity, scale-only, or rotates a multiple of 90 degrees.
 */
- (jboolean)rectStaysRect;

/**
 @brief Set the matrix to identity
 */
- (void)reset;

/**
 @brief (deep) copy the src matrix into this matrix.
 If src is null, reset this matrix to the identity matrix.
 */
- (void)setWithRepackagedAndroidGraphicsMatrix:(RepackagedAndroidGraphicsMatrix *)src;

/**
 @brief Set the matrix to the concatenation of the two specified matrices and return true.
 <p>Either of the two matrices may also be the target matrix, that is <code>matrixA.setConcat(matrixA, matrixB);</code> is valid.</p> <p class="note">In repackaged.android.os.Build.VERSION_CODES#GINGERBREAD_MR1 and below, this function returns true only if the result can be represented. In repackaged.android.os.Build.VERSION_CODES#HONEYCOMB and above, it always returns true.</p>
 */
- (jboolean)setConcatWithRepackagedAndroidGraphicsMatrix:(RepackagedAndroidGraphicsMatrix *)a
                     withRepackagedAndroidGraphicsMatrix:(RepackagedAndroidGraphicsMatrix *)b;

/**
 @brief Set the matrix such that the specified src points would map to the specified dst points.
 The "points" are represented as an array of floats, order [x0, y0, x1, y1, ...], where each "point" is 2 float values.
 @param src The array of src [x,y] pairs (points)
 @param srcIndex Index of the first pair of src values
 @param dst The array of dst [x,y] pairs (points)
 @param dstIndex Index of the first pair of dst values
 @param pointCount The number of pairs/points to be used. Must be [0..4]
 @return true if the matrix was set to the specified transformation
 */
- (jboolean)setPolyToPolyWithFloatArray:(IOSFloatArray *)src
                                withInt:(jint)srcIndex
                         withFloatArray:(IOSFloatArray *)dst
                                withInt:(jint)dstIndex
                                withInt:(jint)pointCount;

/**
 @brief Set the matrix to the scale and translate values that map the source rectangle to the destination rectangle, returning true if the the result can be represented.
 @param src the source rectangle to map from.
 @param dst the destination rectangle to map to.
 @param stf the ScaleToFit option
 @return true if the matrix can be represented by the rectangle mapping.
 */
- (jboolean)setRectToRectWithRepackagedAndroidGraphicsRectF:(RepackagedAndroidGraphicsRectF *)src
                         withRepackagedAndroidGraphicsRectF:(RepackagedAndroidGraphicsRectF *)dst
         withRepackagedAndroidGraphicsMatrix_ScaleToFitEnum:(RepackagedAndroidGraphicsMatrix_ScaleToFitEnum *)stf;

/**
 @brief Set the matrix to rotate about (0,0) by the specified number of degrees.
 */
- (void)setRotateWithFloat:(jfloat)degrees;

/**
 @brief Set the matrix to rotate by the specified number of degrees, with a pivot point at (px, py).
 The pivot point is the coordinate that should remain unchanged by the specified transformation.
 */
- (void)setRotateWithFloat:(jfloat)degrees
                 withFloat:(jfloat)px
                 withFloat:(jfloat)py;

/**
 @brief Set the matrix to scale by sx and sy.
 */
- (void)setScaleWithFloat:(jfloat)sx
                withFloat:(jfloat)sy;

/**
 @brief Set the matrix to scale by sx and sy, with a pivot point at (px, py).
 The pivot point is the coordinate that should remain unchanged by the specified transformation.
 */
- (void)setScaleWithFloat:(jfloat)sx
                withFloat:(jfloat)sy
                withFloat:(jfloat)px
                withFloat:(jfloat)py;

/**
 @brief Set the matrix to rotate by the specified sine and cosine values.
 */
- (void)setSinCosWithFloat:(jfloat)sinValue
                 withFloat:(jfloat)cosValue;

/**
 @brief Set the matrix to rotate by the specified sine and cosine values, with a pivot point at (px, py).
 The pivot point is the coordinate that should remain unchanged by the specified transformation.
 */
- (void)setSinCosWithFloat:(jfloat)sinValue
                 withFloat:(jfloat)cosValue
                 withFloat:(jfloat)px
                 withFloat:(jfloat)py;

/**
 @brief Set the matrix to skew by sx and sy.
 */
- (void)setSkewWithFloat:(jfloat)kx
               withFloat:(jfloat)ky;

/**
 @brief Set the matrix to skew by sx and sy, with a pivot point at (px, py).
 The pivot point is the coordinate that should remain unchanged by the specified transformation.
 */
- (void)setSkewWithFloat:(jfloat)kx
               withFloat:(jfloat)ky
               withFloat:(jfloat)px
               withFloat:(jfloat)py;

/**
 @brief Set the matrix to translate by (dx, dy).
 */
- (void)setTranslateWithFloat:(jfloat)dx
                    withFloat:(jfloat)dy;

/**
 @brief Copy 9 values from the array into the matrix.
 Depending on the implementation of Matrix, these may be transformed into 16.16 integers in the Matrix, such that a subsequent call to getValues() will not yield exactly the same values.
 */
- (void)setValuesWithFloatArray:(IOSFloatArray *)values;

- (NSString *)toShortString;

/**
 */
- (void)toShortStringWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb;

- (NSString *)description;

#pragma mark Protected

- (void)dealloc;

#pragma mark Package-Private

- (jlong)ni;

@end

J2OBJC_STATIC_INIT(RepackagedAndroidGraphicsMatrix)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidGraphicsMatrix, MSCALE_X, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidGraphicsMatrix, MSKEW_X, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidGraphicsMatrix, MTRANS_X, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidGraphicsMatrix, MSKEW_Y, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidGraphicsMatrix, MSCALE_Y, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidGraphicsMatrix, MTRANS_Y, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidGraphicsMatrix, MPERSP_0, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidGraphicsMatrix, MPERSP_1, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidGraphicsMatrix, MPERSP_2, jint)

FOUNDATION_EXPORT RepackagedAndroidGraphicsMatrix *RepackagedAndroidGraphicsMatrix_IDENTITY_MATRIX_;
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidGraphicsMatrix, IDENTITY_MATRIX_, RepackagedAndroidGraphicsMatrix *)

FOUNDATION_EXPORT void RepackagedAndroidGraphicsMatrix_init(RepackagedAndroidGraphicsMatrix *self);

FOUNDATION_EXPORT RepackagedAndroidGraphicsMatrix *new_RepackagedAndroidGraphicsMatrix_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void RepackagedAndroidGraphicsMatrix_initWithRepackagedAndroidGraphicsMatrix_(RepackagedAndroidGraphicsMatrix *self, RepackagedAndroidGraphicsMatrix *src);

FOUNDATION_EXPORT RepackagedAndroidGraphicsMatrix *new_RepackagedAndroidGraphicsMatrix_initWithRepackagedAndroidGraphicsMatrix_(RepackagedAndroidGraphicsMatrix *src) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(RepackagedAndroidGraphicsMatrix)

typedef NS_ENUM(NSUInteger, RepackagedAndroidGraphicsMatrix_ScaleToFit) {
  RepackagedAndroidGraphicsMatrix_ScaleToFit_FILL = 0,
  RepackagedAndroidGraphicsMatrix_ScaleToFit_START = 1,
  RepackagedAndroidGraphicsMatrix_ScaleToFit_CENTER = 2,
  RepackagedAndroidGraphicsMatrix_ScaleToFit_END = 3,
};

/**
 @brief Controlls how the src rect should align into the dst rect for setRectToRect().
 */
@interface RepackagedAndroidGraphicsMatrix_ScaleToFitEnum : JavaLangEnum < NSCopying > {
 @public
  jint nativeInt_;
}

#pragma mark Package-Private

+ (IOSObjectArray *)values;
FOUNDATION_EXPORT IOSObjectArray *RepackagedAndroidGraphicsMatrix_ScaleToFitEnum_values();

+ (RepackagedAndroidGraphicsMatrix_ScaleToFitEnum *)valueOfWithNSString:(NSString *)name;
FOUNDATION_EXPORT RepackagedAndroidGraphicsMatrix_ScaleToFitEnum *RepackagedAndroidGraphicsMatrix_ScaleToFitEnum_valueOfWithNSString_(NSString *name);

- (id)copyWithZone:(NSZone *)zone;

@end

J2OBJC_STATIC_INIT(RepackagedAndroidGraphicsMatrix_ScaleToFitEnum)

FOUNDATION_EXPORT RepackagedAndroidGraphicsMatrix_ScaleToFitEnum *RepackagedAndroidGraphicsMatrix_ScaleToFitEnum_values_[];

#define RepackagedAndroidGraphicsMatrix_ScaleToFitEnum_FILL RepackagedAndroidGraphicsMatrix_ScaleToFitEnum_values_[RepackagedAndroidGraphicsMatrix_ScaleToFit_FILL]
J2OBJC_ENUM_CONSTANT_GETTER(RepackagedAndroidGraphicsMatrix_ScaleToFitEnum, FILL)

#define RepackagedAndroidGraphicsMatrix_ScaleToFitEnum_START RepackagedAndroidGraphicsMatrix_ScaleToFitEnum_values_[RepackagedAndroidGraphicsMatrix_ScaleToFit_START]
J2OBJC_ENUM_CONSTANT_GETTER(RepackagedAndroidGraphicsMatrix_ScaleToFitEnum, START)

#define RepackagedAndroidGraphicsMatrix_ScaleToFitEnum_CENTER RepackagedAndroidGraphicsMatrix_ScaleToFitEnum_values_[RepackagedAndroidGraphicsMatrix_ScaleToFit_CENTER]
J2OBJC_ENUM_CONSTANT_GETTER(RepackagedAndroidGraphicsMatrix_ScaleToFitEnum, CENTER)

#define RepackagedAndroidGraphicsMatrix_ScaleToFitEnum_END RepackagedAndroidGraphicsMatrix_ScaleToFitEnum_values_[RepackagedAndroidGraphicsMatrix_ScaleToFit_END]
J2OBJC_ENUM_CONSTANT_GETTER(RepackagedAndroidGraphicsMatrix_ScaleToFitEnum, END)

J2OBJC_TYPE_LITERAL_HEADER(RepackagedAndroidGraphicsMatrix_ScaleToFitEnum)

#endif // _RepackagedAndroidGraphicsMatrix_H_
