//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/androidlayouts/repackaged/android/util/SizeF.java
//


#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "Preconditions.h"
#include "SizeF.h"
#include "java/lang/Float.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/NumberFormatException.h"

#line 0 "/Users/ramm/git/Ashera/AsheraAndroidParser/androidlayouts/repackaged/android/util/SizeF.java"

@interface RepackagedAndroidUtilSizeF () {
 @public
  jfloat mWidth_;
  jfloat mHeight_;
}

+ (JavaLangNumberFormatException *)invalidSizeFWithNSString:(NSString *)s;

@end

__attribute__((unused)) static JavaLangNumberFormatException *RepackagedAndroidUtilSizeF_invalidSizeFWithNSString_(NSString *s);


#line 29
@implementation RepackagedAndroidUtilSizeF


#line 42
- (instancetype)initWithFloat:(jfloat)width
                    withFloat:(jfloat)height {
  RepackagedAndroidUtilSizeF_initWithFloat_withFloat_(self, width, height);
  return self;
}


#line 51
- (jfloat)getWidth {
  return mWidth_;
}


#line 59
- (jfloat)getHeight {
  return mHeight_;
}


#line 75
- (jboolean)isEqual:(id)obj {
  if (obj == nil) {
    return NO;
  }
  if (self == obj) {
    return YES;
  }
  if ([obj isKindOfClass:[RepackagedAndroidUtilSizeF class]]) {
    RepackagedAndroidUtilSizeF *other = (RepackagedAndroidUtilSizeF *) check_class_cast(obj, [RepackagedAndroidUtilSizeF class]);
    return mWidth_ == ((RepackagedAndroidUtilSizeF *) nil_chk(other))->mWidth_ && mHeight_ == other->mHeight_;
  }
  return NO;
}


#line 95
- (NSString *)description {
  return JreStrcat("FCF", mWidth_, 'x', mHeight_);
}

+ (JavaLangNumberFormatException *)invalidSizeFWithNSString:(NSString *)s {
  return RepackagedAndroidUtilSizeF_invalidSizeFWithNSString_(s);
}


#line 133
+ (RepackagedAndroidUtilSizeF *)parseSizeFWithNSString:(NSString *)string {
  return RepackagedAndroidUtilSizeF_parseSizeFWithNSString_(string);
}


#line 158
- (NSUInteger)hash {
  return JavaLangFloat_floatToIntBitsWithFloat_(mWidth_) ^ JavaLangFloat_floatToIntBitsWithFloat_(mHeight_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithFloat:withFloat:", "SizeF", NULL, 0x1, NULL, NULL },
    { "getWidth", NULL, "F", 0x1, NULL, NULL },
    { "getHeight", NULL, "F", 0x1, NULL, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "invalidSizeFWithNSString:", "invalidSizeF", "Ljava.lang.NumberFormatException;", 0xa, NULL, NULL },
    { "parseSizeFWithNSString:", "parseSizeF", "Lrepackaged.android.util.SizeF;", 0x9, "Ljava.lang.NumberFormatException;", NULL },
    { "hash", "hashCode", "I", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "mWidth_", NULL, 0x12, "F", NULL, NULL,  },
    { "mHeight_", NULL, 0x12, "F", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _RepackagedAndroidUtilSizeF = { 2, "SizeF", "repackaged.android.util", NULL, 0x11, 8, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_RepackagedAndroidUtilSizeF;
}

@end


#line 42
void RepackagedAndroidUtilSizeF_initWithFloat_withFloat_(RepackagedAndroidUtilSizeF *self, jfloat width, jfloat height) {
  (void) NSObject_init(self);
  
#line 43
  self->mWidth_ = RepackagedComAndroidInternalUtilPreconditions_checkArgumentFiniteWithFloat_withNSString_(width, @"width");
  self->mHeight_ = RepackagedComAndroidInternalUtilPreconditions_checkArgumentFiniteWithFloat_withNSString_(height, @"height");
}


#line 42
RepackagedAndroidUtilSizeF *new_RepackagedAndroidUtilSizeF_initWithFloat_withFloat_(jfloat width, jfloat height) {
  RepackagedAndroidUtilSizeF *self = [RepackagedAndroidUtilSizeF alloc];
  RepackagedAndroidUtilSizeF_initWithFloat_withFloat_(self, width, height);
  return self;
}


#line 99
JavaLangNumberFormatException *RepackagedAndroidUtilSizeF_invalidSizeFWithNSString_(NSString *s) {
  RepackagedAndroidUtilSizeF_initialize();
  
#line 100
  @throw new_JavaLangNumberFormatException_initWithNSString_(JreStrcat("$$C", @"Invalid SizeF: \"", s, '"'));
}


#line 133
RepackagedAndroidUtilSizeF *RepackagedAndroidUtilSizeF_parseSizeFWithNSString_(NSString *string) {
  RepackagedAndroidUtilSizeF_initialize();
  (void) RepackagedComAndroidInternalUtilPreconditions_checkNotNullWithId_withId_(string, @"string must not be null");
  
#line 137
  jint sep_ix = [((NSString *) nil_chk(string)) indexOf:'*'];
  if (sep_ix < 0) {
    sep_ix = [string indexOf:'x'];
  }
  if (sep_ix < 0) {
    @throw RepackagedAndroidUtilSizeF_invalidSizeFWithNSString_(string);
  }
  @try {
    return new_RepackagedAndroidUtilSizeF_initWithFloat_withFloat_(JavaLangFloat_parseFloatWithNSString_([string substring:0 endIndex:sep_ix]), JavaLangFloat_parseFloatWithNSString_(
#line 146
    [string substring:sep_ix + 1]));
  }
  @catch (
#line 147
  JavaLangNumberFormatException *e) {
    @throw RepackagedAndroidUtilSizeF_invalidSizeFWithNSString_(string);
  }
  @catch (
#line 149
  JavaLangIllegalArgumentException *e) {
    @throw RepackagedAndroidUtilSizeF_invalidSizeFWithNSString_(string);
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RepackagedAndroidUtilSizeF)
