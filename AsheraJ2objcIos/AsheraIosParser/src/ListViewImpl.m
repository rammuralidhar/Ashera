//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/dummyimpl/ios/ListViewImpl.java
//


#include "BaseHasWidgets.h"
#include "Context.h"
#include "EventBus.h"
#include "HasWidgets.h"
#include "ILabel.h"
#include "ILinearLayout.h"
#include "IOSObjectArray.h"
#include "ITemplate.h"
#include "IWidget.h"
#include "J2ObjC_source.h"
#include "ListViewImpl.h"
#include "View.h"
#include "ViewGroup.h"
#include "java/util/Iterator.h"
#include "java/util/Map.h"
#include "java/util/Observable.h"
#include "Jockey.h"

#line 0 "/Users/ramm/git/Ashera/AsheraAndroidParser/dummyimpl/ios/ListViewImpl.java"

@interface IosListViewImpl () {
 @public
  id<RepackagedAndroidContentContext> context_;
  id webView_;
  RepackagedAndroidViewView *view_;
  NSString *templateId_;
  NSString *headerTemplateId_;
  NSString *footerTemplateId_;
  NSString *eventId_;
  id<ComAsheraWidgetFactoryITemplate> headerWidget_;
  id<ComAsheraWidgetFactoryITemplate> footerWidget_;
  id<ComAsheraWidgetFactoryITemplate> rootWidget_;
  id<ComAsheraWidgetFactoryHasWidgets> referenceWidget_;
}

- (void)nativeLoadDataWithNSString:(NSString *)eventId
                      withNSString:(NSString *)recieveEventId
                            withId:(id)webView;

- (jint)nativeMeasureWidth;

- (jint)nativeMeasureHeightWithInt:(jint)width;

- (jint)nativeGetWidth;

- (RepackagedAndroidViewViewGroup *)updateLayoutAndCalculateTextWithComAsheraWidgetFactoryHasWidgets:(id<ComAsheraWidgetFactoryHasWidgets>)hasWidgets
                                                                                             withInt:(jint)index;

- (NSString *)nativeGetValueWithInt:(jint)index
                       withNSString:(NSString *)key;

- (id)getCellWithInt:(jint)index;

- (id<ComAsheraWidgetFactoryHasWidgets>)objc_getAssociatedObjectWithId:(id)cell
                                                              withChar:(jchar)titleKey;

- (void)objc_setAssociatedObjectWithId:(id)cell
  withComAsheraWidgetFactoryHasWidgets:(id<ComAsheraWidgetFactoryHasWidgets>)layout
                              withChar:(jchar)titleKey;

- (id)getReusableCellWithNSString:(NSString *)simpleTableIdentifier;

- (id)newCellWithNSString:(NSString *)simpleTableIdentifier OBJC_METHOD_FAMILY_NONE;

- (void)addSubViewWithId:(id)cell
                  withId:(id)layout;

@end

J2OBJC_FIELD_SETTER(IosListViewImpl, context_, id<RepackagedAndroidContentContext>)
J2OBJC_FIELD_SETTER(IosListViewImpl, webView_, id)
J2OBJC_FIELD_SETTER(IosListViewImpl, view_, RepackagedAndroidViewView *)
J2OBJC_FIELD_SETTER(IosListViewImpl, templateId_, NSString *)
J2OBJC_FIELD_SETTER(IosListViewImpl, headerTemplateId_, NSString *)
J2OBJC_FIELD_SETTER(IosListViewImpl, footerTemplateId_, NSString *)
J2OBJC_FIELD_SETTER(IosListViewImpl, eventId_, NSString *)
J2OBJC_FIELD_SETTER(IosListViewImpl, headerWidget_, id<ComAsheraWidgetFactoryITemplate>)
J2OBJC_FIELD_SETTER(IosListViewImpl, footerWidget_, id<ComAsheraWidgetFactoryITemplate>)
J2OBJC_FIELD_SETTER(IosListViewImpl, rootWidget_, id<ComAsheraWidgetFactoryITemplate>)
J2OBJC_FIELD_SETTER(IosListViewImpl, referenceWidget_, id<ComAsheraWidgetFactoryHasWidgets>)

__attribute__((unused)) static void IosListViewImpl_nativeLoadDataWithNSString_withNSString_withId_(IosListViewImpl *self, NSString *eventId, NSString *recieveEventId, id webView);

__attribute__((unused)) static jint IosListViewImpl_nativeMeasureWidth(IosListViewImpl *self);

__attribute__((unused)) static jint IosListViewImpl_nativeMeasureHeightWithInt_(IosListViewImpl *self, jint width);

__attribute__((unused)) static jint IosListViewImpl_nativeGetWidth(IosListViewImpl *self);

__attribute__((unused)) static RepackagedAndroidViewViewGroup *IosListViewImpl_updateLayoutAndCalculateTextWithComAsheraWidgetFactoryHasWidgets_withInt_(IosListViewImpl *self, id<ComAsheraWidgetFactoryHasWidgets> hasWidgets, jint index);

__attribute__((unused)) static NSString *IosListViewImpl_nativeGetValueWithInt_withNSString_(IosListViewImpl *self, jint index, NSString *key);

__attribute__((unused)) static id<ComAsheraWidgetFactoryHasWidgets> IosListViewImpl_objc_getAssociatedObjectWithId_withChar_(IosListViewImpl *self, id cell, jchar titleKey);

__attribute__((unused)) static void IosListViewImpl_objc_setAssociatedObjectWithId_withComAsheraWidgetFactoryHasWidgets_withChar_(IosListViewImpl *self, id cell, id<ComAsheraWidgetFactoryHasWidgets> layout, jchar titleKey);

__attribute__((unused)) static id IosListViewImpl_getReusableCellWithNSString_(IosListViewImpl *self, NSString *simpleTableIdentifier);

__attribute__((unused)) static id IosListViewImpl_newCellWithNSString_(IosListViewImpl *self, NSString *simpleTableIdentifier);

__attribute__((unused)) static void IosListViewImpl_addSubViewWithId_withId_(IosListViewImpl *self, id cell, id layout);

@interface IosListViewImpl_$1 : RepackagedAndroidViewView {
 @public
  IosListViewImpl *this$0_;
}

- (void)onMeasureWithInt:(jint)widthMeasureSpec
                 withInt:(jint)heightMeasureSpec;

- (void)onLayoutWithBoolean:(jboolean)changed
                    withInt:(jint)left
                    withInt:(jint)top
                    withInt:(jint)right
                    withInt:(jint)bottom;

- (instancetype)initWithIosListViewImpl:(IosListViewImpl *)outer$
    withRepackagedAndroidContentContext:(id<RepackagedAndroidContentContext>)arg$0;

@end

J2OBJC_EMPTY_STATIC_INIT(IosListViewImpl_$1)

J2OBJC_FIELD_SETTER(IosListViewImpl_$1, this$0_, IosListViewImpl *)

__attribute__((unused)) static void IosListViewImpl_$1_initWithIosListViewImpl_withRepackagedAndroidContentContext_(IosListViewImpl_$1 *self, IosListViewImpl *outer$, id<RepackagedAndroidContentContext> arg$0);

__attribute__((unused)) static IosListViewImpl_$1 *new_IosListViewImpl_$1_initWithIosListViewImpl_withRepackagedAndroidContentContext_(IosListViewImpl *outer$, id<RepackagedAndroidContentContext> arg$0) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(IosListViewImpl_$1)

NSString *IosListViewImpl_simpleTableIdentifier_ = 
#line 225
@"SimpleTableItem";
jchar IosListViewImpl_titleKey_;


#line 22
@implementation IosListViewImpl

	- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView {
	    return 1;
	}

	- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section
	{
	    return [self.tableData count];
	}
	- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath
	{
	    return (UITableViewCell *)[self getCellWithInt:indexPath.row];
	}

	- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath
	{
	    return (CGFloat)[self calculateHeightOfRowWithInt:indexPath.row];
	}
#line 36
- (IOSObjectArray *)getLayoutAttributes {
  return nil;
}


#line 41
- (id<ComAsheraWidgetFactoryIWidget>)newInstance {
  return new_IosListViewImpl_init();
}


#line 46
- (IOSObjectArray *)getAttributes {
  return [IOSObjectArray newArrayWithObjects:(id[]){ @"width", @"height", @"templateid", @"headertemplateid", @"footertemplateid", @"load-data-event" } count:6 type:NSString_class_()];
}


#line 52
- (id)asWidget {
  return view_;
}


#line 57
- (id)asNativeWidget {
  return [self nativeAsWidget];
}


#line 62
- (void)createWithJavaUtilMap:(id<JavaUtilMap>)metadata {
  self->context_ = (id<RepackagedAndroidContentContext>) check_protocol_cast([((id<JavaUtilMap>) nil_chk(metadata)) getWithId:@"context"], @protocol(RepackagedAndroidContentContext));
  self->webView_ = [metadata getWithId:@"webView"];
  [((ComAsheraWidgetBusEventBus *) nil_chk(ComAsheraWidgetBusEventBus_getDefault())) addObserverWithJavaUtilObserver:self];
  view_ = new_IosListViewImpl_$1_initWithIosListViewImpl_withRepackagedAndroidContentContext_(self, context_);
  
#line 107
  [self nativeCreate];
}


#line 111
- (void)setUpAttributeWithJavaUtilMap:(id<JavaUtilMap>)attributes {
  [super setUpAttributeWithJavaUtilMap:attributes];
  self->templateId_ = [((id<JavaUtilMap>) nil_chk(attributes)) getWithId:@"templateid"];
  self->headerTemplateId_ = [attributes getWithId:@"headertemplateid"];
  self->footerTemplateId_ = [attributes getWithId:@"footertemplateid"];
  
#line 117
  if ([attributes containsKeyWithId:@"load-data-event"]) {
    self->eventId_ = [attributes getWithId:@"load-data-event"];
  }
}

- (void)nativeCreate {
  self.tableView = [UITableView new];
  self.tableView.dataSource = self;
  self.tableView.delegate = self;
  [self.tableView  setTableFooterView:[[UIView alloc] initWithFrame:CGRectMake(0,0,0,0)]];
}


#line 131
- (void)updateWithJavaUtilObservable:(JavaUtilObservable *)observable
                              withId:(id)data {
  if ([observable isKindOfClass:[ComAsheraWidgetBusEventBus class]]) {
    if (headerWidget_ != nil) {
      [self addHeaderWidgetWithId:[((id<ComAsheraWidgetFactoryIWidget>) nil_chk(((id<ComAsheraWidgetFactoryIWidget>) check_protocol_cast([headerWidget_ loadWidgets], @protocol(ComAsheraWidgetFactoryIWidget))))) asNativeWidget]];
    }
    
#line 137
    if (footerWidget_ != nil) {
      [self addFooterWidgetWithId:[((id<ComAsheraWidgetFactoryIWidget>) nil_chk(((id<ComAsheraWidgetFactoryIWidget>) check_protocol_cast([footerWidget_ loadWidgets], @protocol(ComAsheraWidgetFactoryIWidget))))) asNativeWidget]];
    }
    
#line 141
    if (eventId_ != nil) {
      IosListViewImpl_nativeLoadDataWithNSString_withNSString_withId_(self, eventId_, JreStrcat("$$", eventId_, @"-recieve"), webView_);
    }
  }
}


#line 147
- (void)nativeLoadDataWithNSString:(NSString *)eventId
                      withNSString:(NSString *)recieveEventId
                            withId:(id)webView {
  IosListViewImpl_nativeLoadDataWithNSString_withNSString_withId_(self, eventId, recieveEventId, webView);
}


#line 158
- (void)addHeaderWidgetWithId:(id)headerView {
  [self.tableView setTableHeaderView:headerView];
}

- (void)addFooterWidgetWithId:(id)view {
  [self.tableView setTableFooterView:view];
}


#line 167
- (id)nativeAsWidget {
  return self.tableView;
}

- (jint)nativeMeasureWidth {
  return IosListViewImpl_nativeMeasureWidth(self);
}


#line 177
- (jint)nativeMeasureHeightWithInt:(jint)width {
  return IosListViewImpl_nativeMeasureHeightWithInt_(self, width);
}


#line 183
- (void)nativeMakeFrameWithInt:(jint)l
                       withInt:(jint)t
                       withInt:(jint)r
                       withInt:(jint)b {
  [self.tableView setFrame:CGRectMake(l, t, r-l, b-t)];
}


#line 188
- (void)measureWithRepackagedAndroidViewViewGroup:(RepackagedAndroidViewViewGroup *)layout {
  jint w = IosListViewImpl_nativeGetWidth(self);
  jint h = -2;
  jint wmeasureSpec = RepackagedAndroidViewView_MeasureSpec_EXACTLY;
  jint hmeasureSpec = RepackagedAndroidViewView_MeasureSpec_UNSPECIFIED;
  [((RepackagedAndroidViewViewGroup *) nil_chk(layout)) measureWithInt:RepackagedAndroidViewView_MeasureSpec_makeMeasureSpecWithInt_withInt_(w, wmeasureSpec) withInt:RepackagedAndroidViewView_MeasureSpec_makeMeasureSpecWithInt_withInt_(
#line 194
  h, hmeasureSpec)];
  [layout layoutWithInt:0 withInt:0 withInt:w withInt:[layout getMeasuredHeight]];
}


#line 198
- (jint)nativeGetWidth {
  return IosListViewImpl_nativeGetWidth(self);
}

- (jint)calculateHeightOfRowWithInt:(jint)index {
  RepackagedAndroidViewViewGroup *group = IosListViewImpl_updateLayoutAndCalculateTextWithComAsheraWidgetFactoryHasWidgets_withInt_(self, [rootWidget_ loadWidgets], index);
  
#line 206
  jint height = [((RepackagedAndroidViewViewGroup *) nil_chk(group)) getMeasuredHeight] + 1;
  return height;
}

- (RepackagedAndroidViewViewGroup *)updateLayoutAndCalculateTextWithComAsheraWidgetFactoryHasWidgets:(id<ComAsheraWidgetFactoryHasWidgets>)hasWidgets
                                                                                             withInt:(jint)index {
  return IosListViewImpl_updateLayoutAndCalculateTextWithComAsheraWidgetFactoryHasWidgets_withInt_(self, hasWidgets, index);
}


#line 219
- (NSString *)nativeGetValueWithInt:(jint)index
                       withNSString:(NSString *)key {
  return IosListViewImpl_nativeGetValueWithInt_withNSString_(self, index, key);
}


#line 227
- (id)getCellWithInt:(jint)index {
  id cell = IosListViewImpl_getReusableCellWithNSString_(self, IosListViewImpl_simpleTableIdentifier_);
  
#line 230
  if (true) {
    cell = IosListViewImpl_newCellWithNSString_(self, IosListViewImpl_simpleTableIdentifier_);
    id<ComAsheraWidgetFactoryHasWidgets> hasWidgets = (id<ComAsheraWidgetFactoryHasWidgets>) check_protocol_cast([((id<ComAsheraWidgetFactoryITemplate>) nil_chk(rootWidget_)) loadWidgets], @protocol(ComAsheraWidgetFactoryHasWidgets));
    (void) IosListViewImpl_updateLayoutAndCalculateTextWithComAsheraWidgetFactoryHasWidgets_withInt_(self, hasWidgets, index);
    IosListViewImpl_objc_setAssociatedObjectWithId_withComAsheraWidgetFactoryHasWidgets_withChar_(self, cell, hasWidgets, IosListViewImpl_titleKey_);
    id asNativeWidget = [((id<ComAsheraWidgetFactoryIWidget>) nil_chk(((id<ComAsheraWidgetFactoryIWidget>) check_protocol_cast(hasWidgets, @protocol(ComAsheraWidgetFactoryIWidget))))) asNativeWidget];
    IosListViewImpl_addSubViewWithId_withId_(self, cell, asNativeWidget);
      ((UITableViewCell*) cell).frame = ((UIView *)asNativeWidget).frame;
  }
  else {
    
#line 238
    id<ComAsheraWidgetFactoryHasWidgets> hasWidgets = IosListViewImpl_objc_getAssociatedObjectWithId_withChar_(self, cell, IosListViewImpl_titleKey_);
    (void) IosListViewImpl_updateLayoutAndCalculateTextWithComAsheraWidgetFactoryHasWidgets_withInt_(self, hasWidgets, index);
  }
  
#line 242
  return cell;
}


#line 245
- (id<ComAsheraWidgetFactoryHasWidgets>)objc_getAssociatedObjectWithId:(id)cell
                                                              withChar:(jchar)titleKey {
  return IosListViewImpl_objc_getAssociatedObjectWithId_withChar_(self, cell, titleKey);
}


#line 249
- (void)objc_setAssociatedObjectWithId:(id)cell
  withComAsheraWidgetFactoryHasWidgets:(id<ComAsheraWidgetFactoryHasWidgets>)layout
                              withChar:(jchar)titleKey {
  IosListViewImpl_objc_setAssociatedObjectWithId_withComAsheraWidgetFactoryHasWidgets_withChar_(self, cell, layout, titleKey);
}


#line 256
- (id)getReusableCellWithNSString:(NSString *)simpleTableIdentifier {
  return IosListViewImpl_getReusableCellWithNSString_(self, simpleTableIdentifier);
}

- (id)newCellWithNSString:(NSString *)simpleTableIdentifier {
  return IosListViewImpl_newCellWithNSString_(self, simpleTableIdentifier);
}

- (void)addSubViewWithId:(id)cell
                  withId:(id)layout {
  IosListViewImpl_addSubViewWithId_withId_(self, cell, layout);
}


#line 286
- (void)initialized {
  [super initialized];
  
#line 289
  id<JavaUtilIterator> iterate = [self iterate];
  while ([((id<JavaUtilIterator>) nil_chk(iterate)) hasNext]) {
    id<ComAsheraWidgetFactoryITemplate> widget = (id<ComAsheraWidgetFactoryITemplate>) check_protocol_cast([iterate next], @protocol(ComAsheraWidgetFactoryITemplate));
    
#line 293
    if ([((NSString *) nil_chk([((id<ComAsheraWidgetFactoryITemplate>) nil_chk(widget)) getId])) isEqual:headerTemplateId_]) {
      self->headerWidget_ = widget;
    }
    if ([((NSString *) nil_chk([widget getId])) isEqual:footerTemplateId_]) {
      self->footerWidget_ = widget;
    }
    
#line 300
    if ([((NSString *) nil_chk([widget getId])) isEqual:templateId_]) {
      self->rootWidget_ = widget;
      self->referenceWidget_ = (id<ComAsheraWidgetFactoryHasWidgets>) check_protocol_cast([rootWidget_ loadWidgets], @protocol(ComAsheraWidgetFactoryHasWidgets));
    }
  }
}

- (instancetype)init {
  IosListViewImpl_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getLayoutAttributes", NULL, "[Ljava.lang.String;", 0x1, NULL, NULL },
    { "newInstance", NULL, "Lcom.ashera.widget.factory.IWidget;", 0x1, NULL, NULL },
    { "getAttributes", NULL, "[Ljava.lang.String;", 0x1, NULL, NULL },
    { "asWidget", NULL, "Ljava.lang.Object;", 0x1, NULL, NULL },
    { "asNativeWidget", NULL, "Ljava.lang.Object;", 0x1, NULL, NULL },
    { "createWithJavaUtilMap:", "create", "V", 0x1, NULL, NULL },
    { "setUpAttributeWithJavaUtilMap:", "setUpAttribute", "V", 0x1, NULL, NULL },
    { "nativeCreate", NULL, "V", 0x101, NULL, NULL },
    { "updateWithJavaUtilObservable:withId:", "update", "V", 0x1, NULL, NULL },
    { "nativeLoadDataWithNSString:withNSString:withId:", "nativeLoadData", "V", 0x102, NULL, NULL },
    { "addHeaderWidgetWithId:", "addHeaderWidget", "V", 0x101, NULL, NULL },
    { "addFooterWidgetWithId:", "addFooterWidget", "V", 0x101, NULL, NULL },
    { "nativeAsWidget", NULL, "Ljava.lang.Object;", 0x101, NULL, NULL },
    { "nativeMeasureWidth", NULL, "I", 0x102, NULL, NULL },
    { "nativeMeasureHeightWithInt:", "nativeMeasureHeight", "I", 0x102, NULL, NULL },
    { "nativeMakeFrameWithInt:withInt:withInt:withInt:", "nativeMakeFrame", "V", 0x101, NULL, NULL },
    { "measureWithRepackagedAndroidViewViewGroup:", "measure", "V", 0x1, NULL, NULL },
    { "nativeGetWidth", NULL, "I", 0x102, NULL, NULL },
    { "calculateHeightOfRowWithInt:", "calculateHeightOfRow", "I", 0x1, NULL, NULL },
    { "updateLayoutAndCalculateTextWithComAsheraWidgetFactoryHasWidgets:withInt:", "updateLayoutAndCalculateText", "Lrepackaged.android.view.ViewGroup;", 0x2, NULL, NULL },
    { "nativeGetValueWithInt:withNSString:", "nativeGetValue", "Ljava.lang.String;", 0x102, NULL, NULL },
    { "getCellWithInt:", "getCell", "Ljava.lang.Object;", 0x2, NULL, NULL },
    { "objc_getAssociatedObjectWithId:withChar:", "objc_getAssociatedObject", "Lcom.ashera.widget.factory.HasWidgets;", 0x102, NULL, NULL },
    { "objc_setAssociatedObjectWithId:withComAsheraWidgetFactoryHasWidgets:withChar:", "objc_setAssociatedObject", "V", 0x102, NULL, NULL },
    { "getReusableCellWithNSString:", "getReusableCell", "Ljava.lang.Object;", 0x102, NULL, NULL },
    { "newCellWithNSString:", "newCell", "Ljava.lang.Object;", 0x102, NULL, NULL },
    { "addSubViewWithId:withId:", "addSubView", "V", 0x102, NULL, NULL },
    { "initialized", NULL, "V", 0x1, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "context_", NULL, 0x2, "Lrepackaged.android.content.Context;", NULL, NULL,  },
    { "webView_", NULL, 0x2, "Ljava.lang.Object;", NULL, NULL,  },
    { "view_", NULL, 0x2, "Lrepackaged.android.view.View;", NULL, NULL,  },
    { "templateId_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "headerTemplateId_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "footerTemplateId_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "eventId_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "headerWidget_", NULL, 0x2, "Lcom.ashera.widget.factory.ITemplate;", NULL, NULL,  },
    { "footerWidget_", NULL, 0x2, "Lcom.ashera.widget.factory.ITemplate;", NULL, NULL,  },
    { "rootWidget_", NULL, 0x2, "Lcom.ashera.widget.factory.ITemplate;", NULL, NULL,  },
    { "referenceWidget_", NULL, 0x2, "Lcom.ashera.widget.factory.HasWidgets;", NULL, NULL,  },
    { "simpleTableIdentifier_", NULL, 0x18, "Ljava.lang.String;", &IosListViewImpl_simpleTableIdentifier_, NULL,  },
    { "titleKey_", NULL, 0x8, "C", &IosListViewImpl_titleKey_, NULL,  },
  };
  static const J2ObjcClassInfo _IosListViewImpl = { 2, "ListViewImpl", "ios", NULL, 0x1, 29, methods, 13, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_IosListViewImpl;
}

@end


#line 147
void IosListViewImpl_nativeLoadDataWithNSString_withNSString_withId_(IosListViewImpl *self, NSString *eventId, NSString *recieveEventId, id webView) {
  NSDictionary* d = [NSDictionary new];
  
  [Jockey on:recieveEventId perform:^(NSDictionary *payload) {
    self.tableData = payload[@"data"];
    [self.tableView reloadData];
  }];
  
  [Jockey send:eventId withPayload:d toWebView:webView];
}


#line 171
jint IosListViewImpl_nativeMeasureWidth(IosListViewImpl *self) {
  CGSize maximumLabelSize = CGSizeMake(CGFLOAT_MAX,CGFLOAT_MAX);
  CGSize requiredSize = [self.tableView sizeThatFits:maximumLabelSize];
  return ceil(requiredSize.width);
}

jint IosListViewImpl_nativeMeasureHeightWithInt_(IosListViewImpl *self, jint width) {
  CGSize maximumLabelSize = CGSizeMake(width,CGFLOAT_MAX);
  CGSize requiredSize = [self.tableView sizeThatFits:maximumLabelSize];
  return ceil(requiredSize.height);
}


#line 198
jint IosListViewImpl_nativeGetWidth(IosListViewImpl *self) {
  return self.tableView.frame.size.width;
}


#line 210
RepackagedAndroidViewViewGroup *IosListViewImpl_updateLayoutAndCalculateTextWithComAsheraWidgetFactoryHasWidgets_withInt_(IosListViewImpl *self, id<ComAsheraWidgetFactoryHasWidgets> hasWidgets, jint index) {
  id<ComAsheraWidgetFactoryILabel> label = (id<ComAsheraWidgetFactoryILabel>) check_protocol_cast([((id<JavaUtilIterator>) nil_chk([((id<ComAsheraWidgetFactoryHasWidgets>) nil_chk(hasWidgets)) iterate])) next], @protocol(ComAsheraWidgetFactoryILabel));
  [((id<ComAsheraWidgetFactoryILabel>) nil_chk(label)) setTextWithNSString:IosListViewImpl_nativeGetValueWithInt_withNSString_(self, index, @"value")];
  RepackagedAndroidViewViewGroup *layout = (RepackagedAndroidViewViewGroup *) check_class_cast([((id<ComAsheraWidgetFactoryILinearLayout>) check_protocol_cast(hasWidgets, @protocol(ComAsheraWidgetFactoryILinearLayout))) asWidget], [RepackagedAndroidViewViewGroup class]);
  [((RepackagedAndroidViewViewGroup *) nil_chk(layout)) forceLayout];
  [self measureWithRepackagedAndroidViewViewGroup:layout];
  return layout;
}

NSString *IosListViewImpl_nativeGetValueWithInt_withNSString_(IosListViewImpl *self, jint index, NSString *key) {
  NSDictionary* obj = [self.tableData objectAtIndex:index];
  return obj[key];
}


#line 245
id<ComAsheraWidgetFactoryHasWidgets> IosListViewImpl_objc_getAssociatedObjectWithId_withChar_(IosListViewImpl *self, id cell, jchar titleKey) {
  return objc_getAssociatedObject(cell, &titleKey);
}

void IosListViewImpl_objc_setAssociatedObjectWithId_withComAsheraWidgetFactoryHasWidgets_withChar_(IosListViewImpl *self, id cell, id<ComAsheraWidgetFactoryHasWidgets> layout, jchar titleKey) {
  objc_setAssociatedObject(cell,
  &titleKey,
  layout,
  OBJC_ASSOCIATION_RETAIN_NONATOMIC);
}

id IosListViewImpl_getReusableCellWithNSString_(IosListViewImpl *self, NSString *simpleTableIdentifier) {
  return [self.tableView dequeueReusableCellWithIdentifier:simpleTableIdentifier];
}

id IosListViewImpl_newCellWithNSString_(IosListViewImpl *self, NSString *simpleTableIdentifier) {
  return  [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:simpleTableIdentifier];
}

void IosListViewImpl_addSubViewWithId_withId_(IosListViewImpl *self, id cell, id layout) {
  [((UITableViewCell*)cell).contentView addSubview:layout];
}

void IosListViewImpl_init(IosListViewImpl *self) {
  (void) ComAsheraWidgetBaseHasWidgets_init(self);
}

IosListViewImpl *new_IosListViewImpl_init() {
  IosListViewImpl *self = [IosListViewImpl alloc];
  IosListViewImpl_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IosListViewImpl)

@implementation IosListViewImpl_$1


#line 68
- (void)onMeasureWithInt:(jint)widthMeasureSpec
                 withInt:(jint)heightMeasureSpec {
  [super onMeasureWithInt:widthMeasureSpec withInt:heightMeasureSpec];
  
#line 71
  jint widthMode = RepackagedAndroidViewView_MeasureSpec_getModeWithInt_(widthMeasureSpec);
  jint heightMode = RepackagedAndroidViewView_MeasureSpec_getModeWithInt_(heightMeasureSpec);
  jint widthSize = RepackagedAndroidViewView_MeasureSpec_getSizeWithInt_(widthMeasureSpec);
  jint heightSize = RepackagedAndroidViewView_MeasureSpec_getSizeWithInt_(heightMeasureSpec);
  
#line 76
  jint width;
  jint height;
  if (widthMode == RepackagedAndroidViewView_MeasureSpec_EXACTLY) {
    
#line 80
    width = widthSize;
  }
  else {
    
#line 82
    width = IosListViewImpl_nativeMeasureWidth(this$0_);
    
#line 84
    if (width > widthSize) {
      width = widthSize;
    }
  }
  
#line 89
  if (heightMode == RepackagedAndroidViewView_MeasureSpec_EXACTLY) {
    
#line 91
    height = heightSize;
  }
  else {
    
#line 93
    height = IosListViewImpl_nativeMeasureHeightWithInt_(this$0_, width);
  }
  
#line 96
  [self setMeasuredDimensionWithInt:width withInt:height];
}


#line 101
- (void)onLayoutWithBoolean:(jboolean)changed
                    withInt:(jint)left
                    withInt:(jint)top
                    withInt:(jint)right
                    withInt:(jint)bottom {
  
#line 103
  [super onLayoutWithBoolean:changed withInt:left withInt:top withInt:right withInt:bottom];
  [this$0_ nativeMakeFrameWithInt:left withInt:top withInt:right withInt:bottom];
}

- (instancetype)initWithIosListViewImpl:(IosListViewImpl *)outer$
    withRepackagedAndroidContentContext:(id<RepackagedAndroidContentContext>)arg$0 {
  IosListViewImpl_$1_initWithIosListViewImpl_withRepackagedAndroidContentContext_(self, outer$, arg$0);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "onMeasureWithInt:withInt:", "onMeasure", "V", 0x4, NULL, NULL },
    { "onLayoutWithBoolean:withInt:withInt:withInt:withInt:", "onLayout", "V", 0x4, NULL, NULL },
    { "initWithIosListViewImpl:withRepackagedAndroidContentContext:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lios.ListViewImpl;", NULL, NULL,  },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "IosListViewImpl", "createWithJavaUtilMap:" };
  static const J2ObjcClassInfo _IosListViewImpl_$1 = { 2, "", "ios", "ListViewImpl", 0x8008, 3, methods, 1, fields, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_IosListViewImpl_$1;
}

@end

void IosListViewImpl_$1_initWithIosListViewImpl_withRepackagedAndroidContentContext_(IosListViewImpl_$1 *self, IosListViewImpl *outer$, id<RepackagedAndroidContentContext> arg$0) {
  self->this$0_ = outer$;
  (void) RepackagedAndroidViewView_initWithRepackagedAndroidContentContext_(self, arg$0);
}

IosListViewImpl_$1 *new_IosListViewImpl_$1_initWithIosListViewImpl_withRepackagedAndroidContentContext_(IosListViewImpl *outer$, id<RepackagedAndroidContentContext> arg$0) {
  IosListViewImpl_$1 *self = [IosListViewImpl_$1 alloc];
  IosListViewImpl_$1_initWithIosListViewImpl_withRepackagedAndroidContentContext_(self, outer$, arg$0);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IosListViewImpl_$1)
