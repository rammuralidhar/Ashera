//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/androidlayouts/repackaged/android/widget/LinearLayout.java
//


#include "AttributeSet.h"
#include "Canvas.h"
#include "Context.h"
#include "Drawable.h"
#include "Gravity.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "LinearLayout.h"
#include "R.h"
#include "TypedArray.h"
#include "View.h"
#include "ViewDebug.h"
#include "ViewGroup.h"
#include "ViewHierarchyEncoder.h"
#include "java/io/PrintStream.h"
#include "java/lang/CharSequence.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/System.h"
#include "java/lang/annotation/Retention.h"
#include "java/lang/annotation/RetentionPolicy.h"

#line 0 "/Users/ramm/git/Ashera/AsheraAndroidParser/androidlayouts/repackaged/android/widget/LinearLayout.java"

#define RepackagedAndroidWidgetLinearLayout_VERTICAL_GRAVITY_COUNT 4
#define RepackagedAndroidWidgetLinearLayout_INDEX_CENTER_VERTICAL 0
#define RepackagedAndroidWidgetLinearLayout_INDEX_TOP 1
#define RepackagedAndroidWidgetLinearLayout_INDEX_BOTTOM 2
#define RepackagedAndroidWidgetLinearLayout_INDEX_FILL 3

@interface RepackagedAndroidWidgetLinearLayout () {
 @public
  /**
   @brief Whether the children of this layout are baseline aligned.
   Only applicable if #mOrientation is horizontal.
   */
  jboolean mBaselineAligned_;
  /**
   @brief If this layout is part of another layout that is baseline aligned, use the child at this index as the baseline.
   Note: this is orthogonal to #mBaselineAligned , which is concerned with whether the children of this layout are baseline aligned.
   */
  jint mBaselineAlignedChildIndex_;
  /**
   @brief The additional offset to the child's baseline.
   We'll calculate the baseline of this layout as we measure vertically; for horizontal linear layouts, the offset of 0 is appropriate.
   */
  jint mBaselineChildTop_;
  jint mOrientation_;
  jint mGravity_;
  jint mTotalLength_;
  jfloat mWeightSum_;
  jboolean mUseLargestChild_;
  IOSIntArray *mMaxAscent_;
  IOSIntArray *mMaxDescent_;
  RepackagedAndroidGraphicsDrawableDrawable *mDivider_;
  jint mDividerWidth_;
  jint mDividerHeight_;
  jint mShowDividers_;
  jint mDividerPadding_;
  jint mLayoutDirection_;
}

/**
 @brief Finds the last child that is not gone.
 The last child will be used as the reference for where the end divider should be drawn.
 */
- (RepackagedAndroidViewView *)getLastNonGoneChild;

/**
 @brief Checks whether all (virtual) child views before the given index are gone.
 */
- (jboolean)allViewsAreGoneBeforeWithInt:(jint)childIndex;

- (void)forceUniformWidthWithInt:(jint)count
                         withInt:(jint)heightMeasureSpec;

- (void)forceUniformHeightWithInt:(jint)count
                          withInt:(jint)widthMeasureSpec;

- (void)setChildFrameWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)child
                                           withInt:(jint)left
                                           withInt:(jint)top
                                           withInt:(jint)width
                                           withInt:(jint)height;

@end

J2OBJC_FIELD_SETTER(RepackagedAndroidWidgetLinearLayout, mMaxAscent_, IOSIntArray *)
J2OBJC_FIELD_SETTER(RepackagedAndroidWidgetLinearLayout, mMaxDescent_, IOSIntArray *)
J2OBJC_FIELD_SETTER(RepackagedAndroidWidgetLinearLayout, mDivider_, RepackagedAndroidGraphicsDrawableDrawable *)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidWidgetLinearLayout, VERTICAL_GRAVITY_COUNT, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidWidgetLinearLayout, INDEX_CENTER_VERTICAL, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidWidgetLinearLayout, INDEX_TOP, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidWidgetLinearLayout, INDEX_BOTTOM, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidWidgetLinearLayout, INDEX_FILL, jint)

__attribute__((unused)) static RepackagedAndroidViewView *RepackagedAndroidWidgetLinearLayout_getLastNonGoneChild(RepackagedAndroidWidgetLinearLayout *self);

__attribute__((unused)) static jboolean RepackagedAndroidWidgetLinearLayout_allViewsAreGoneBeforeWithInt_(RepackagedAndroidWidgetLinearLayout *self, jint childIndex);

__attribute__((unused)) static void RepackagedAndroidWidgetLinearLayout_forceUniformWidthWithInt_withInt_(RepackagedAndroidWidgetLinearLayout *self, jint count, jint heightMeasureSpec);

__attribute__((unused)) static void RepackagedAndroidWidgetLinearLayout_forceUniformHeightWithInt_withInt_(RepackagedAndroidWidgetLinearLayout *self, jint count, jint widthMeasureSpec);

__attribute__((unused)) static void RepackagedAndroidWidgetLinearLayout_setChildFrameWithRepackagedAndroidViewView_withInt_withInt_withInt_withInt_(RepackagedAndroidWidgetLinearLayout *self, RepackagedAndroidViewView *child, jint left, jint top, jint width, jint height);

@interface RepackagedAndroidWidgetLinearLayout_OrientationMode : NSObject
@end

@interface RepackagedAndroidWidgetLinearLayout_DividerMode : NSObject
@end


#line 63
@implementation RepackagedAndroidWidgetLinearLayout


#line 189
- (instancetype)initWithRepackagedAndroidContentContext:(id<RepackagedAndroidContentContext>)context {
  RepackagedAndroidWidgetLinearLayout_initWithRepackagedAndroidContentContext_(self, context);
  return self;
}


#line 193
- (instancetype)initWithRepackagedAndroidContentContext:(id<RepackagedAndroidContentContext>)context
                  withRepackagedAndroidUtilAttributeSet:(id<RepackagedAndroidUtilAttributeSet>)attrs {
  RepackagedAndroidWidgetLinearLayout_initWithRepackagedAndroidContentContext_withRepackagedAndroidUtilAttributeSet_(self, context, attrs);
  return self;
}


#line 197
- (instancetype)initWithRepackagedAndroidContentContext:(id<RepackagedAndroidContentContext>)context
                  withRepackagedAndroidUtilAttributeSet:(id<RepackagedAndroidUtilAttributeSet>)attrs
                                                withInt:(jint)defStyleAttr {
  RepackagedAndroidWidgetLinearLayout_initWithRepackagedAndroidContentContext_withRepackagedAndroidUtilAttributeSet_withInt_(self, context, attrs, defStyleAttr);
  return self;
}


#line 201
- (instancetype)initWithRepackagedAndroidContentContext:(id<RepackagedAndroidContentContext>)context
                  withRepackagedAndroidUtilAttributeSet:(id<RepackagedAndroidUtilAttributeSet>)attrs
                                                withInt:(jint)defStyleAttr
                                                withInt:(jint)defStyleRes {
  RepackagedAndroidWidgetLinearLayout_initWithRepackagedAndroidContentContext_withRepackagedAndroidUtilAttributeSet_withInt_withInt_(self, context, attrs, defStyleAttr, defStyleRes);
  return self;
}


#line 243
- (void)setShowDividersWithInt:(jint)showDividers {
  if (showDividers != mShowDividers_) {
    [self requestLayout];
  }
  mShowDividers_ = showDividers;
}


#line 251
- (jboolean)shouldDelayChildPressedState {
  return NO;
}


#line 260
- (jint)getShowDividers {
  return mShowDividers_;
}


#line 271
- (RepackagedAndroidGraphicsDrawableDrawable *)getDividerDrawable {
  return mDivider_;
}


#line 284
- (void)setDividerDrawableWithRepackagedAndroidGraphicsDrawableDrawable:(RepackagedAndroidGraphicsDrawableDrawable *)divider {
  if (divider == mDivider_) {
    return;
  }
  mDivider_ = divider;
  if (divider != nil) {
    mDividerWidth_ = [divider getIntrinsicWidth];
    mDividerHeight_ = [divider getIntrinsicHeight];
  }
  else {
    
#line 293
    mDividerWidth_ = 0;
    mDividerHeight_ = 0;
  }
  [self setWillNotDrawWithBoolean:divider == nil];
  [self requestLayout];
}


#line 309
- (void)setDividerPaddingWithInt:(jint)padding {
  mDividerPadding_ = padding;
}


#line 320
- (jint)getDividerPadding {
  return mDividerPadding_;
}


#line 329
- (jint)getDividerWidth {
  return mDividerWidth_;
}


#line 334
- (void)onDrawWithRepackagedAndroidGraphicsCanvas:(RepackagedAndroidGraphicsCanvas *)canvas {
  if (mDivider_ == nil) {
    return;
  }
  
#line 339
  if (mOrientation_ == RepackagedAndroidWidgetLinearLayout_VERTICAL) {
    [self drawDividersVerticalWithRepackagedAndroidGraphicsCanvas:canvas];
  }
  else {
    
#line 342
    [self drawDividersHorizontalWithRepackagedAndroidGraphicsCanvas:canvas];
  }
}


#line 346
- (void)drawDividersVerticalWithRepackagedAndroidGraphicsCanvas:(RepackagedAndroidGraphicsCanvas *)canvas {
  jint count = [self getVirtualChildCount];
  for (jint i = 0; i < count; i++) {
    RepackagedAndroidViewView *child = [self getVirtualChildAtWithInt:i];
    
#line 351
    if (child != nil && [child getVisibility] != RepackagedAndroidViewView_GONE) {
      if ([self hasDividerBeforeChildAtWithInt:i]) {
        RepackagedAndroidWidgetLinearLayout_LayoutParams *lp = (RepackagedAndroidWidgetLinearLayout_LayoutParams *) check_class_cast([child getLayoutParams], [RepackagedAndroidWidgetLinearLayout_LayoutParams class]);
        jint top = [child getTop] - ((RepackagedAndroidWidgetLinearLayout_LayoutParams *) nil_chk(lp))->topMargin_ - mDividerHeight_;
        [self drawHorizontalDividerWithRepackagedAndroidGraphicsCanvas:canvas withInt:top];
      }
    }
  }
  
#line 360
  if ([self hasDividerBeforeChildAtWithInt:count]) {
    RepackagedAndroidViewView *child = RepackagedAndroidWidgetLinearLayout_getLastNonGoneChild(self);
    jint bottom = 0;
    if (child == nil) {
      bottom = [self getHeight] - [self getPaddingBottom] - mDividerHeight_;
    }
    else {
      
#line 366
      RepackagedAndroidWidgetLinearLayout_LayoutParams *lp = (RepackagedAndroidWidgetLinearLayout_LayoutParams *) check_class_cast([child getLayoutParams], [RepackagedAndroidWidgetLinearLayout_LayoutParams class]);
      bottom = [child getBottom] + ((RepackagedAndroidWidgetLinearLayout_LayoutParams *) nil_chk(lp))->bottomMargin_;
    }
    [self drawHorizontalDividerWithRepackagedAndroidGraphicsCanvas:canvas withInt:bottom];
  }
}


#line 377
- (RepackagedAndroidViewView *)getLastNonGoneChild {
  return RepackagedAndroidWidgetLinearLayout_getLastNonGoneChild(self);
}


#line 387
- (void)drawDividersHorizontalWithRepackagedAndroidGraphicsCanvas:(RepackagedAndroidGraphicsCanvas *)canvas {
  jint count = [self getVirtualChildCount];
  jboolean isLayoutRtl = [self isLayoutRtl];
  for (jint i = 0; i < count; i++) {
    RepackagedAndroidViewView *child = [self getVirtualChildAtWithInt:i];
    
#line 393
    if (child != nil && [child getVisibility] != RepackagedAndroidViewView_GONE) {
      if ([self hasDividerBeforeChildAtWithInt:i]) {
        RepackagedAndroidWidgetLinearLayout_LayoutParams *lp = (RepackagedAndroidWidgetLinearLayout_LayoutParams *) check_class_cast([child getLayoutParams], [RepackagedAndroidWidgetLinearLayout_LayoutParams class]);
        jint position;
        if (isLayoutRtl) {
          position = [child getRight] + ((RepackagedAndroidWidgetLinearLayout_LayoutParams *) nil_chk(lp))->rightMargin_;
        }
        else {
          
#line 400
          position = [child getLeft] - ((RepackagedAndroidWidgetLinearLayout_LayoutParams *) nil_chk(lp))->leftMargin_ - mDividerWidth_;
        }
        [self drawVerticalDividerWithRepackagedAndroidGraphicsCanvas:canvas withInt:position];
      }
    }
  }
  
#line 407
  if ([self hasDividerBeforeChildAtWithInt:count]) {
    RepackagedAndroidViewView *child = RepackagedAndroidWidgetLinearLayout_getLastNonGoneChild(self);
    jint position;
    if (child == nil) {
      if (isLayoutRtl) {
        position = [self getPaddingLeft];
      }
      else {
        
#line 414
        position = [self getWidth] - [self getPaddingRight] - mDividerWidth_;
      }
    }
    else {
      
#line 417
      RepackagedAndroidWidgetLinearLayout_LayoutParams *lp = (RepackagedAndroidWidgetLinearLayout_LayoutParams *) check_class_cast([child getLayoutParams], [RepackagedAndroidWidgetLinearLayout_LayoutParams class]);
      if (isLayoutRtl) {
        position = [child getLeft] - ((RepackagedAndroidWidgetLinearLayout_LayoutParams *) nil_chk(lp))->leftMargin_ - mDividerWidth_;
      }
      else {
        
#line 421
        position = [child getRight] + ((RepackagedAndroidWidgetLinearLayout_LayoutParams *) nil_chk(lp))->rightMargin_;
      }
    }
    [self drawVerticalDividerWithRepackagedAndroidGraphicsCanvas:canvas withInt:position];
  }
}


#line 428
- (void)drawHorizontalDividerWithRepackagedAndroidGraphicsCanvas:(RepackagedAndroidGraphicsCanvas *)canvas
                                                         withInt:(jint)top {
  [((RepackagedAndroidGraphicsDrawableDrawable *) nil_chk(mDivider_)) setBoundsWithInt:[self getPaddingLeft] + mDividerPadding_ withInt:top withInt:
#line 430
  [self getWidth] - [self getPaddingRight] - mDividerPadding_ withInt:top + mDividerHeight_];
  [mDivider_ drawWithRepackagedAndroidGraphicsCanvas:canvas];
}


#line 434
- (void)drawVerticalDividerWithRepackagedAndroidGraphicsCanvas:(RepackagedAndroidGraphicsCanvas *)canvas
                                                       withInt:(jint)left {
  [((RepackagedAndroidGraphicsDrawableDrawable *) nil_chk(mDivider_)) setBoundsWithInt:left withInt:[self getPaddingTop] + mDividerPadding_ withInt:
#line 436
  left + mDividerWidth_ withInt:[self getHeight] - [self getPaddingBottom] - mDividerPadding_];
  [mDivider_ drawWithRepackagedAndroidGraphicsCanvas:canvas];
}


#line 446
- (jboolean)isBaselineAligned {
  return mBaselineAligned_;
}


#line 460
- (void)setBaselineAlignedWithBoolean:(jboolean)baselineAligned {
  mBaselineAligned_ = baselineAligned;
}


#line 474
- (jboolean)isMeasureWithLargestChildEnabled {
  return mUseLargestChild_;
}


#line 491
- (void)setMeasureWithLargestChildEnabledWithBoolean:(jboolean)enabled {
  mUseLargestChild_ = enabled;
}


#line 496
- (jint)getBaseline {
  if (mBaselineAlignedChildIndex_ < 0) {
    return [super getBaseline];
  }
  
#line 501
  if ([self getChildCount] <= mBaselineAlignedChildIndex_) {
    @throw new_JavaLangRuntimeException_initWithNSString_(@"mBaselineAlignedChildIndex of LinearLayout set to an index that is out of bounds.");
  }
  
#line 506
  RepackagedAndroidViewView *child = [self getChildAtWithInt:mBaselineAlignedChildIndex_];
  jint childBaseline = [((RepackagedAndroidViewView *) nil_chk(child)) getBaseline];
  
#line 509
  if (childBaseline == -1) {
    if (mBaselineAlignedChildIndex_ == 0) {
      
#line 512
      return -1;
    }
    
#line 516
    @throw new_JavaLangRuntimeException_initWithNSString_(@"mBaselineAlignedChildIndex of LinearLayout points to a View that doesn't know how to get its baseline.");
  }
  
#line 526
  jint childTop = mBaselineChildTop_;
  
#line 528
  if (mOrientation_ == RepackagedAndroidWidgetLinearLayout_VERTICAL) {
    jint majorGravity = mGravity_ & RepackagedAndroidViewGravity_VERTICAL_GRAVITY_MASK;
    if (majorGravity != RepackagedAndroidViewGravity_TOP) {
      switch (majorGravity) {
        case RepackagedAndroidViewGravity_BOTTOM:
        childTop = mBottom_ - mTop_ - mPaddingBottom_ - mTotalLength_;
        break;
        
#line 536
        case RepackagedAndroidViewGravity_CENTER_VERTICAL:
        childTop += ((mBottom_ - mTop_ - mPaddingTop_ - mPaddingBottom_) -
#line 538
        mTotalLength_) / 2;
        break;
      }
    }
  }
  
#line 544
  RepackagedAndroidWidgetLinearLayout_LayoutParams *lp = (RepackagedAndroidWidgetLinearLayout_LayoutParams *) check_class_cast([child getLayoutParams], [RepackagedAndroidWidgetLinearLayout_LayoutParams class]);
  return childTop + ((RepackagedAndroidWidgetLinearLayout_LayoutParams *) nil_chk(lp))->topMargin_ + childBaseline;
}


#line 553
- (jint)getBaselineAlignedChildIndex {
  return mBaselineAlignedChildIndex_;
}


#line 564
- (void)setBaselineAlignedChildIndexWithInt:(jint)i {
  if ((i < 0) || (i >= [self getChildCount])) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$IC", @"base aligned child index out of range (0, ",
#line 567
    [self getChildCount], ')'));
  }
  mBaselineAlignedChildIndex_ = i;
}


#line 581
- (RepackagedAndroidViewView *)getVirtualChildAtWithInt:(jint)index {
  return [self getChildAtWithInt:index];
}


#line 594
- (jint)getVirtualChildCount {
  return [self getChildCount];
}


#line 605
- (jfloat)getWeightSum {
  return mWeightSum_;
}


#line 622
- (void)setWeightSumWithFloat:(jfloat)weightSum {
  mWeightSum_ = JavaLangMath_maxWithFloat_withFloat_(0.0f, weightSum);
}


#line 627
- (void)onMeasureWithInt:(jint)widthMeasureSpec
                 withInt:(jint)heightMeasureSpec {
  if (mOrientation_ == RepackagedAndroidWidgetLinearLayout_VERTICAL) {
    [self measureVerticalWithInt:widthMeasureSpec withInt:heightMeasureSpec];
  }
  else {
    
#line 631
    [self measureHorizontalWithInt:widthMeasureSpec withInt:heightMeasureSpec];
  }
}


#line 642
- (jboolean)hasDividerBeforeChildAtWithInt:(jint)childIndex {
  if (childIndex == [self getVirtualChildCount]) {
    
#line 645
    return (mShowDividers_ & RepackagedAndroidWidgetLinearLayout_SHOW_DIVIDER_END) != 0;
  }
  jboolean allViewsAreGoneBefore = RepackagedAndroidWidgetLinearLayout_allViewsAreGoneBeforeWithInt_(self, childIndex);
  if (allViewsAreGoneBefore) {
    
#line 650
    return (mShowDividers_ & RepackagedAndroidWidgetLinearLayout_SHOW_DIVIDER_BEGINNING) != 0;
  }
  else {
    
#line 652
    return (mShowDividers_ & RepackagedAndroidWidgetLinearLayout_SHOW_DIVIDER_MIDDLE) != 0;
  }
}


#line 659
- (jboolean)allViewsAreGoneBeforeWithInt:(jint)childIndex {
  return RepackagedAndroidWidgetLinearLayout_allViewsAreGoneBeforeWithInt_(self, childIndex);
}


#line 680
- (void)measureVerticalWithInt:(jint)widthMeasureSpec
                       withInt:(jint)heightMeasureSpec {
  mTotalLength_ = 0;
  jint maxWidth = 0;
  jint childState = 0;
  jint alternativeMaxWidth = 0;
  jint weightedMaxWidth = 0;
  jboolean allFillParent = YES;
  jfloat totalWeight = 0;
  
#line 689
  jint count = [self getVirtualChildCount];
  
#line 691
  jint widthMode = RepackagedAndroidViewView_MeasureSpec_getModeWithInt_(widthMeasureSpec);
  jint heightMode = RepackagedAndroidViewView_MeasureSpec_getModeWithInt_(heightMeasureSpec);
  
#line 694
  jboolean matchWidth = NO;
  jboolean skippedMeasure = NO;
  
#line 697
  jint baselineChildIndex = mBaselineAlignedChildIndex_;
  jboolean useLargestChild = mUseLargestChild_;
  
#line 700
  jint largestChildHeight = JavaLangInteger_MIN_VALUE;
  
#line 703
  for (jint i = 0; i < count; ++i) {
    RepackagedAndroidViewView *child = [self getVirtualChildAtWithInt:i];
    
#line 706
    if (child == nil) {
      mTotalLength_ += [self measureNullChildWithInt:i];
      continue;
    }
    
#line 711
    if ([((RepackagedAndroidViewView *) nil_chk(child)) getVisibility] == RepackagedAndroidViewView_GONE) {
      i += [self getChildrenSkipCountWithRepackagedAndroidViewView:child withInt:i];
      continue;
    }
    
#line 716
    if ([self hasDividerBeforeChildAtWithInt:i]) {
      mTotalLength_ += mDividerHeight_;
    }
    
#line 720
    RepackagedAndroidWidgetLinearLayout_LayoutParams *lp = (RepackagedAndroidWidgetLinearLayout_LayoutParams *) check_class_cast([child getLayoutParams], [RepackagedAndroidWidgetLinearLayout_LayoutParams class]);
    
#line 722
    totalWeight += ((RepackagedAndroidWidgetLinearLayout_LayoutParams *) nil_chk(lp))->weight_;
    
#line 724
    if (heightMode == RepackagedAndroidViewView_MeasureSpec_EXACTLY && lp->height_ == 0 && lp->weight_ > 0) {
      
#line 728
      jint totalLength = mTotalLength_;
      mTotalLength_ = JavaLangMath_maxWithInt_withInt_(totalLength, totalLength + lp->topMargin_ + lp->bottomMargin_);
      skippedMeasure = YES;
    }
    else {
      
#line 732
      jint oldHeight = JavaLangInteger_MIN_VALUE;
      
#line 734
      if (lp->height_ == 0 && lp->weight_ > 0) {
        
#line 739
        oldHeight = 0;
        lp->height_ = RepackagedAndroidViewViewGroup_LayoutParams_WRAP_CONTENT;
      }
      
#line 747
      [self measureChildBeforeLayoutWithRepackagedAndroidViewView:
#line 748
      child withInt:i withInt:widthMeasureSpec withInt:0 withInt:heightMeasureSpec withInt:
#line 749
      totalWeight == 0 ? mTotalLength_ : 0];
      
#line 751
      if (oldHeight != JavaLangInteger_MIN_VALUE) {
        lp->height_ = oldHeight;
      }
      
#line 755
      jint childHeight = [child getMeasuredHeight];
      jint totalLength = mTotalLength_;
      mTotalLength_ = JavaLangMath_maxWithInt_withInt_(totalLength, totalLength + childHeight + lp->topMargin_ +
#line 758
      lp->bottomMargin_ + [self getNextLocationOffsetWithRepackagedAndroidViewView:child]);
      
#line 760
      if (useLargestChild) {
        largestChildHeight = JavaLangMath_maxWithInt_withInt_(childHeight, largestChildHeight);
      }
    }
    
#line 769
    if ((baselineChildIndex >= 0) && (baselineChildIndex == i + 1)) {
      mBaselineChildTop_ = mTotalLength_;
    }
    
#line 776
    if (i < baselineChildIndex && lp->weight_ > 0) {
      @throw new_JavaLangRuntimeException_initWithNSString_(@"A child of LinearLayout with index less than mBaselineAlignedChildIndex has weight > 0, which won't work.  Either remove the weight, or don't set mBaselineAlignedChildIndex.");
    }
    
#line 783
    jboolean matchWidthLocally = NO;
    if (widthMode != RepackagedAndroidViewView_MeasureSpec_EXACTLY && lp->width_ == RepackagedAndroidViewViewGroup_LayoutParams_MATCH_PARENT) {
      
#line 789
      matchWidth = YES;
      matchWidthLocally = YES;
    }
    
#line 793
    jint margin = lp->leftMargin_ + lp->rightMargin_;
    jint measuredWidth = [child getMeasuredWidth] + margin;
    maxWidth = JavaLangMath_maxWithInt_withInt_(maxWidth, measuredWidth);
    childState = RepackagedAndroidViewView_combineMeasuredStatesWithInt_withInt_(childState, [child getMeasuredState]);
    
#line 798
    allFillParent = (allFillParent && lp->width_ == RepackagedAndroidViewViewGroup_LayoutParams_MATCH_PARENT);
    if (lp->weight_ > 0) {
      
#line 804
      weightedMaxWidth = JavaLangMath_maxWithInt_withInt_(weightedMaxWidth,
#line 805
      matchWidthLocally ? margin : measuredWidth);
    }
    else {
      
#line 807
      alternativeMaxWidth = JavaLangMath_maxWithInt_withInt_(alternativeMaxWidth,
#line 808
      matchWidthLocally ? margin : measuredWidth);
    }
    
#line 811
    i += [self getChildrenSkipCountWithRepackagedAndroidViewView:child withInt:i];
  }
  
#line 814
  if (mTotalLength_ > 0 && [self hasDividerBeforeChildAtWithInt:count]) {
    mTotalLength_ += mDividerHeight_;
  }
  
#line 818
  if (useLargestChild &&
#line 819
  (heightMode == RepackagedAndroidViewView_MeasureSpec_AT_MOST || heightMode == RepackagedAndroidViewView_MeasureSpec_UNSPECIFIED)) {
    mTotalLength_ = 0;
    
#line 822
    for (jint i = 0; i < count; ++i) {
      RepackagedAndroidViewView *child = [self getVirtualChildAtWithInt:i];
      
#line 825
      if (child == nil) {
        mTotalLength_ += [self measureNullChildWithInt:i];
        continue;
      }
      
#line 830
      if ([((RepackagedAndroidViewView *) nil_chk(child)) getVisibility] == RepackagedAndroidViewView_GONE) {
        i += [self getChildrenSkipCountWithRepackagedAndroidViewView:child withInt:i];
        continue;
      }
      
#line 835
      RepackagedAndroidWidgetLinearLayout_LayoutParams *lp = (RepackagedAndroidWidgetLinearLayout_LayoutParams *) check_class_cast(
#line 836
      [child getLayoutParams], [RepackagedAndroidWidgetLinearLayout_LayoutParams class]);
      
#line 838
      jint totalLength = mTotalLength_;
      mTotalLength_ = JavaLangMath_maxWithInt_withInt_(totalLength, totalLength + largestChildHeight + ((RepackagedAndroidWidgetLinearLayout_LayoutParams *) nil_chk(
#line 840
      lp))->topMargin_ + lp->bottomMargin_ + [self getNextLocationOffsetWithRepackagedAndroidViewView:child]);
    }
  }
  
#line 845
  mTotalLength_ += mPaddingTop_ + mPaddingBottom_;
  
#line 847
  jint heightSize = mTotalLength_;
  
#line 850
  heightSize = JavaLangMath_maxWithInt_withInt_(heightSize, [self getSuggestedMinimumHeight]);
  
#line 853
  jint heightSizeAndState = RepackagedAndroidViewView_resolveSizeAndStateWithInt_withInt_withInt_(heightSize, heightMeasureSpec, 0);
  heightSize = heightSizeAndState & RepackagedAndroidViewView_MEASURED_SIZE_MASK;
  
#line 859
  jint delta = heightSize - mTotalLength_;
  if (skippedMeasure || (delta != 0 && totalWeight > 0.0f)) {
    jfloat weightSum = mWeightSum_ > 0.0f ? mWeightSum_ : totalWeight;
    
#line 863
    mTotalLength_ = 0;
    
#line 865
    for (jint i = 0; i < count; ++i) {
      RepackagedAndroidViewView *child = [self getVirtualChildAtWithInt:i];
      
#line 868
      if ([((RepackagedAndroidViewView *) nil_chk(child)) getVisibility] == RepackagedAndroidViewView_GONE) {
        continue;
      }
      
#line 872
      RepackagedAndroidWidgetLinearLayout_LayoutParams *lp = (RepackagedAndroidWidgetLinearLayout_LayoutParams *) check_class_cast([child getLayoutParams], [RepackagedAndroidWidgetLinearLayout_LayoutParams class]);
      
#line 874
      jfloat childExtra = ((RepackagedAndroidWidgetLinearLayout_LayoutParams *) nil_chk(lp))->weight_;
      if (childExtra > 0) {
        
#line 877
        jint share = J2ObjCFpToInt((childExtra * delta / weightSum));
        weightSum -= childExtra;
        delta -= share;
        
#line 881
        jint childWidthMeasureSpec = RepackagedAndroidViewViewGroup_getChildMeasureSpecWithInt_withInt_withInt_(widthMeasureSpec,
#line 882
        mPaddingLeft_ + mPaddingRight_ +
#line 883
        lp->leftMargin_ + lp->rightMargin_, lp->width_);
        
#line 887
        if ((lp->height_ != 0) || (heightMode != RepackagedAndroidViewView_MeasureSpec_EXACTLY)) {
          
#line 890
          jint childHeight = [child getMeasuredHeight] + share;
          if (childHeight < 0) {
            childHeight = 0;
          }
          
#line 895
          [child measureWithInt:childWidthMeasureSpec withInt:RepackagedAndroidViewView_MeasureSpec_makeMeasureSpecWithInt_withInt_(
#line 896
          childHeight, RepackagedAndroidViewView_MeasureSpec_EXACTLY)];
        }
        else {
          
#line 900
          [child measureWithInt:childWidthMeasureSpec withInt:RepackagedAndroidViewView_MeasureSpec_makeMeasureSpecWithInt_withInt_(
#line 901
          share > 0 ? share : 0,
#line 902
          RepackagedAndroidViewView_MeasureSpec_EXACTLY)];
        }
        
#line 906
        childState = RepackagedAndroidViewView_combineMeasuredStatesWithInt_withInt_(childState, [child getMeasuredState] &
#line 907
        (RShift32(RepackagedAndroidViewView_MEASURED_STATE_MASK, RepackagedAndroidViewView_MEASURED_HEIGHT_STATE_SHIFT)));
      }
      
#line 910
      jint margin = lp->leftMargin_ + lp->rightMargin_;
      jint measuredWidth = [child getMeasuredWidth] + margin;
      maxWidth = JavaLangMath_maxWithInt_withInt_(maxWidth, measuredWidth);
      
#line 914
      jboolean matchWidthLocally = widthMode != RepackagedAndroidViewView_MeasureSpec_EXACTLY &&
#line 915
      lp->width_ == RepackagedAndroidViewViewGroup_LayoutParams_MATCH_PARENT;
      
#line 917
      alternativeMaxWidth = JavaLangMath_maxWithInt_withInt_(alternativeMaxWidth,
#line 918
      matchWidthLocally ? margin : measuredWidth);
      
#line 920
      allFillParent = (allFillParent && lp->width_ == RepackagedAndroidViewViewGroup_LayoutParams_MATCH_PARENT);
      
#line 922
      jint totalLength = mTotalLength_;
      mTotalLength_ = JavaLangMath_maxWithInt_withInt_(totalLength, totalLength + [child getMeasuredHeight] +
#line 924
      lp->topMargin_ + lp->bottomMargin_ + [self getNextLocationOffsetWithRepackagedAndroidViewView:child]);
    }
    
#line 928
    mTotalLength_ += mPaddingTop_ + mPaddingBottom_;
  }
  else {
    alternativeMaxWidth = JavaLangMath_maxWithInt_withInt_(alternativeMaxWidth,
#line 932
    weightedMaxWidth);
    
#line 937
    if (useLargestChild && heightMode != RepackagedAndroidViewView_MeasureSpec_EXACTLY) {
      for (jint i = 0; i < count; i++) {
        RepackagedAndroidViewView *child = [self getVirtualChildAtWithInt:i];
        
#line 941
        if (child == nil || [child getVisibility] == RepackagedAndroidViewView_GONE) {
          continue;
        }
        
#line 945
        RepackagedAndroidWidgetLinearLayout_LayoutParams *lp =
#line 946
        (RepackagedAndroidWidgetLinearLayout_LayoutParams *) check_class_cast([((RepackagedAndroidViewView *) nil_chk(child)) getLayoutParams], [RepackagedAndroidWidgetLinearLayout_LayoutParams class]);
        
#line 948
        jfloat childExtra = ((RepackagedAndroidWidgetLinearLayout_LayoutParams *) nil_chk(lp))->weight_;
        if (childExtra > 0) {
          [child measureWithInt:RepackagedAndroidViewView_MeasureSpec_makeMeasureSpecWithInt_withInt_(
#line 951
          [child getMeasuredWidth],
#line 952
          RepackagedAndroidViewView_MeasureSpec_EXACTLY) withInt:RepackagedAndroidViewView_MeasureSpec_makeMeasureSpecWithInt_withInt_(
#line 953
          largestChildHeight,
#line 954
          RepackagedAndroidViewView_MeasureSpec_EXACTLY)];
        }
      }
    }
  }
  
#line 960
  if (!allFillParent && widthMode != RepackagedAndroidViewView_MeasureSpec_EXACTLY) {
    maxWidth = alternativeMaxWidth;
  }
  
#line 964
  maxWidth += mPaddingLeft_ + mPaddingRight_;
  
#line 967
  maxWidth = JavaLangMath_maxWithInt_withInt_(maxWidth, [self getSuggestedMinimumWidth]);
  
#line 969
  [self setMeasuredDimensionWithInt:RepackagedAndroidViewView_resolveSizeAndStateWithInt_withInt_withInt_(maxWidth, widthMeasureSpec, childState) withInt:
#line 970
  heightSizeAndState];
  
#line 972
  if (matchWidth) {
    RepackagedAndroidWidgetLinearLayout_forceUniformWidthWithInt_withInt_(self, count, heightMeasureSpec);
  }
}


#line 977
- (void)forceUniformWidthWithInt:(jint)count
                         withInt:(jint)heightMeasureSpec {
  RepackagedAndroidWidgetLinearLayout_forceUniformWidthWithInt_withInt_(self, count, heightMeasureSpec);
}


#line 1011
- (void)measureHorizontalWithInt:(jint)widthMeasureSpec
                         withInt:(jint)heightMeasureSpec {
  mTotalLength_ = 0;
  jint maxHeight = 0;
  jint childState = 0;
  jint alternativeMaxHeight = 0;
  jint weightedMaxHeight = 0;
  jboolean allFillParent = YES;
  jfloat totalWeight = 0;
  
#line 1020
  jint count = [self getVirtualChildCount];
  
#line 1022
  jint widthMode = RepackagedAndroidViewView_MeasureSpec_getModeWithInt_(widthMeasureSpec);
  jint heightMode = RepackagedAndroidViewView_MeasureSpec_getModeWithInt_(heightMeasureSpec);
  
#line 1025
  jboolean matchHeight = NO;
  jboolean skippedMeasure = NO;
  
#line 1028
  if (mMaxAscent_ == nil || mMaxDescent_ == nil) {
    mMaxAscent_ = [IOSIntArray newArrayWithLength:RepackagedAndroidWidgetLinearLayout_VERTICAL_GRAVITY_COUNT];
    mMaxDescent_ = [IOSIntArray newArrayWithLength:RepackagedAndroidWidgetLinearLayout_VERTICAL_GRAVITY_COUNT];
  }
  
#line 1033
  IOSIntArray *maxAscent = mMaxAscent_;
  IOSIntArray *maxDescent = mMaxDescent_;
  
#line 1036
  *IOSIntArray_GetRef(nil_chk(maxAscent), 0) = *IOSIntArray_GetRef(maxAscent, 1) = *IOSIntArray_GetRef(maxAscent, 2) = *IOSIntArray_GetRef(maxAscent, 3) = -1;
  *IOSIntArray_GetRef(nil_chk(maxDescent), 0) = *IOSIntArray_GetRef(maxDescent, 1) = *IOSIntArray_GetRef(maxDescent, 2) = *IOSIntArray_GetRef(maxDescent, 3) = -1;
  
#line 1039
  jboolean baselineAligned = mBaselineAligned_;
  jboolean useLargestChild = mUseLargestChild_;
  
#line 1042
  jboolean isExactly = widthMode == RepackagedAndroidViewView_MeasureSpec_EXACTLY;
  
#line 1044
  jint largestChildWidth = JavaLangInteger_MIN_VALUE;
  
#line 1047
  for (jint i = 0; i < count; ++i) {
    RepackagedAndroidViewView *child = [self getVirtualChildAtWithInt:i];
    
#line 1050
    if (child == nil) {
      mTotalLength_ += [self measureNullChildWithInt:i];
      continue;
    }
    
#line 1055
    if ([((RepackagedAndroidViewView *) nil_chk(child)) getVisibility] == RepackagedAndroidViewView_GONE) {
      i += [self getChildrenSkipCountWithRepackagedAndroidViewView:child withInt:i];
      continue;
    }
    
#line 1060
    if ([self hasDividerBeforeChildAtWithInt:i]) {
      mTotalLength_ += mDividerWidth_;
    }
    
#line 1064
    RepackagedAndroidWidgetLinearLayout_LayoutParams *lp = (RepackagedAndroidWidgetLinearLayout_LayoutParams *) check_class_cast(
#line 1065
    [child getLayoutParams], [RepackagedAndroidWidgetLinearLayout_LayoutParams class]);
    
#line 1067
    totalWeight += ((RepackagedAndroidWidgetLinearLayout_LayoutParams *) nil_chk(lp))->weight_;
    
#line 1069
    if (widthMode == RepackagedAndroidViewView_MeasureSpec_EXACTLY && lp->width_ == 0 && lp->weight_ > 0) {
      
#line 1073
      if (isExactly) {
        mTotalLength_ += lp->leftMargin_ + lp->rightMargin_;
      }
      else {
        
#line 1076
        jint totalLength = mTotalLength_;
        mTotalLength_ = JavaLangMath_maxWithInt_withInt_(totalLength, totalLength +
#line 1078
        lp->leftMargin_ + lp->rightMargin_);
      }
      
#line 1086
      if (baselineAligned) {
        jint freeWidthSpec = RepackagedAndroidViewView_MeasureSpec_makeSafeMeasureSpecWithInt_withInt_(RepackagedAndroidViewView_MeasureSpec_getSizeWithInt_(
#line 1088
        widthMeasureSpec), RepackagedAndroidViewView_MeasureSpec_UNSPECIFIED);
        jint freeHeightSpec = RepackagedAndroidViewView_MeasureSpec_makeSafeMeasureSpecWithInt_withInt_(RepackagedAndroidViewView_MeasureSpec_getSizeWithInt_(
#line 1090
        heightMeasureSpec), RepackagedAndroidViewView_MeasureSpec_UNSPECIFIED);
        [child measureWithInt:freeWidthSpec withInt:freeHeightSpec];
      }
      else {
        
#line 1093
        skippedMeasure = YES;
      }
    }
    else {
      
#line 1096
      jint oldWidth = JavaLangInteger_MIN_VALUE;
      
#line 1098
      if (lp->width_ == 0 && lp->weight_ > 0) {
        
#line 1103
        oldWidth = 0;
        lp->width_ = RepackagedAndroidViewViewGroup_LayoutParams_WRAP_CONTENT;
      }
      
#line 1111
      [self measureChildBeforeLayoutWithRepackagedAndroidViewView:child withInt:i withInt:widthMeasureSpec withInt:
#line 1112
      totalWeight == 0 ? mTotalLength_ : 0 withInt:
#line 1113
      heightMeasureSpec withInt:0];
      
#line 1115
      if (oldWidth != JavaLangInteger_MIN_VALUE) {
        lp->width_ = oldWidth;
      }
      
#line 1119
      jint childWidth = [child getMeasuredWidth];
      if (isExactly) {
        mTotalLength_ += childWidth + lp->leftMargin_ + lp->rightMargin_ +
#line 1122
        [self getNextLocationOffsetWithRepackagedAndroidViewView:child];
      }
      else {
        
#line 1124
        jint totalLength = mTotalLength_;
        mTotalLength_ = JavaLangMath_maxWithInt_withInt_(totalLength, totalLength + childWidth + lp->leftMargin_ +
#line 1126
        lp->rightMargin_ + [self getNextLocationOffsetWithRepackagedAndroidViewView:child]);
      }
      
#line 1129
      if (useLargestChild) {
        largestChildWidth = JavaLangMath_maxWithInt_withInt_(childWidth, largestChildWidth);
      }
    }
    
#line 1134
    jboolean matchHeightLocally = NO;
    if (heightMode != RepackagedAndroidViewView_MeasureSpec_EXACTLY && lp->height_ == RepackagedAndroidViewViewGroup_LayoutParams_MATCH_PARENT) {
      
#line 1139
      matchHeight = YES;
      matchHeightLocally = YES;
    }
    
#line 1143
    jint margin = lp->topMargin_ + lp->bottomMargin_;
    jint childHeight = [child getMeasuredHeight] + margin;
    childState = RepackagedAndroidViewView_combineMeasuredStatesWithInt_withInt_(childState, [child getMeasuredState]);
    
#line 1147
    if (baselineAligned) {
      jint childBaseline = [child getBaseline];
      if (childBaseline != -1) {
        
#line 1152
        jint gravity = (lp->gravity_ < 0 ? mGravity_ : lp->gravity_) &
#line 1153
        RepackagedAndroidViewGravity_VERTICAL_GRAVITY_MASK;
        jint index = RShift32(((RShift32(gravity, RepackagedAndroidViewGravity_AXIS_Y_SHIFT)) &
#line 1155
        ~RepackagedAndroidViewGravity_AXIS_SPECIFIED), 1);
        
#line 1157
        *IOSIntArray_GetRef(maxAscent, index) = JavaLangMath_maxWithInt_withInt_(IOSIntArray_Get(maxAscent, index), childBaseline);
        *IOSIntArray_GetRef(maxDescent, index) = JavaLangMath_maxWithInt_withInt_(IOSIntArray_Get(maxDescent, index), childHeight - childBaseline);
      }
    }
    
#line 1162
    maxHeight = JavaLangMath_maxWithInt_withInt_(maxHeight, childHeight);
    
#line 1164
    allFillParent = (allFillParent && lp->height_ == RepackagedAndroidViewViewGroup_LayoutParams_MATCH_PARENT);
    if (lp->weight_ > 0) {
      
#line 1170
      weightedMaxHeight = JavaLangMath_maxWithInt_withInt_(weightedMaxHeight,
#line 1171
      matchHeightLocally ? margin : childHeight);
    }
    else {
      
#line 1173
      alternativeMaxHeight = JavaLangMath_maxWithInt_withInt_(alternativeMaxHeight,
#line 1174
      matchHeightLocally ? margin : childHeight);
    }
    
#line 1177
    i += [self getChildrenSkipCountWithRepackagedAndroidViewView:child withInt:i];
  }
  
#line 1180
  if (mTotalLength_ > 0 && [self hasDividerBeforeChildAtWithInt:count]) {
    mTotalLength_ += mDividerWidth_;
  }
  
#line 1186
  if (IOSIntArray_Get(maxAscent, RepackagedAndroidWidgetLinearLayout_INDEX_TOP) != -1 ||
#line 1187
  IOSIntArray_Get(maxAscent, RepackagedAndroidWidgetLinearLayout_INDEX_CENTER_VERTICAL) != -1 ||
#line 1188
  IOSIntArray_Get(maxAscent, RepackagedAndroidWidgetLinearLayout_INDEX_BOTTOM) != -1 ||
#line 1189
  IOSIntArray_Get(maxAscent, RepackagedAndroidWidgetLinearLayout_INDEX_FILL) != -1) {
    jint ascent = JavaLangMath_maxWithInt_withInt_(IOSIntArray_Get(maxAscent, RepackagedAndroidWidgetLinearLayout_INDEX_FILL), JavaLangMath_maxWithInt_withInt_(IOSIntArray_Get(
#line 1191
    maxAscent, RepackagedAndroidWidgetLinearLayout_INDEX_CENTER_VERTICAL), JavaLangMath_maxWithInt_withInt_(IOSIntArray_Get(
#line 1192
    maxAscent, RepackagedAndroidWidgetLinearLayout_INDEX_TOP), IOSIntArray_Get(maxAscent, RepackagedAndroidWidgetLinearLayout_INDEX_BOTTOM))));
    jint descent = JavaLangMath_maxWithInt_withInt_(IOSIntArray_Get(maxDescent, RepackagedAndroidWidgetLinearLayout_INDEX_FILL), JavaLangMath_maxWithInt_withInt_(IOSIntArray_Get(
#line 1194
    maxDescent, RepackagedAndroidWidgetLinearLayout_INDEX_CENTER_VERTICAL), JavaLangMath_maxWithInt_withInt_(IOSIntArray_Get(
#line 1195
    maxDescent, RepackagedAndroidWidgetLinearLayout_INDEX_TOP), IOSIntArray_Get(maxDescent, RepackagedAndroidWidgetLinearLayout_INDEX_BOTTOM))));
    maxHeight = JavaLangMath_maxWithInt_withInt_(maxHeight, ascent + descent);
  }
  
#line 1199
  if (useLargestChild &&
#line 1200
  (widthMode == RepackagedAndroidViewView_MeasureSpec_AT_MOST || widthMode == RepackagedAndroidViewView_MeasureSpec_UNSPECIFIED)) {
    mTotalLength_ = 0;
    
#line 1203
    for (jint i = 0; i < count; ++i) {
      RepackagedAndroidViewView *child = [self getVirtualChildAtWithInt:i];
      
#line 1206
      if (child == nil) {
        mTotalLength_ += [self measureNullChildWithInt:i];
        continue;
      }
      
#line 1211
      if ([((RepackagedAndroidViewView *) nil_chk(child)) getVisibility] == RepackagedAndroidViewView_GONE) {
        i += [self getChildrenSkipCountWithRepackagedAndroidViewView:child withInt:i];
        continue;
      }
      
#line 1216
      RepackagedAndroidWidgetLinearLayout_LayoutParams *lp = (RepackagedAndroidWidgetLinearLayout_LayoutParams *) check_class_cast(
#line 1217
      [child getLayoutParams], [RepackagedAndroidWidgetLinearLayout_LayoutParams class]);
      if (isExactly) {
        mTotalLength_ += largestChildWidth + ((RepackagedAndroidWidgetLinearLayout_LayoutParams *) nil_chk(lp))->leftMargin_ + lp->rightMargin_ +
#line 1220
        [self getNextLocationOffsetWithRepackagedAndroidViewView:child];
      }
      else {
        
#line 1222
        jint totalLength = mTotalLength_;
        mTotalLength_ = JavaLangMath_maxWithInt_withInt_(totalLength, totalLength + largestChildWidth + ((RepackagedAndroidWidgetLinearLayout_LayoutParams *) nil_chk(
#line 1224
        lp))->leftMargin_ + lp->rightMargin_ + [self getNextLocationOffsetWithRepackagedAndroidViewView:child]);
      }
    }
  }
  
#line 1230
  mTotalLength_ += mPaddingLeft_ + mPaddingRight_;
  
#line 1232
  jint widthSize = mTotalLength_;
  
#line 1235
  widthSize = JavaLangMath_maxWithInt_withInt_(widthSize, [self getSuggestedMinimumWidth]);
  
#line 1238
  jint widthSizeAndState = RepackagedAndroidViewView_resolveSizeAndStateWithInt_withInt_withInt_(widthSize, widthMeasureSpec, 0);
  widthSize = widthSizeAndState & RepackagedAndroidViewView_MEASURED_SIZE_MASK;
  
#line 1244
  jint delta = widthSize - mTotalLength_;
  if (skippedMeasure || (delta != 0 && totalWeight > 0.0f)) {
    jfloat weightSum = mWeightSum_ > 0.0f ? mWeightSum_ : totalWeight;
    
#line 1248
    *IOSIntArray_GetRef(maxAscent, 0) = *IOSIntArray_GetRef(maxAscent, 1) = *IOSIntArray_GetRef(maxAscent, 2) = *IOSIntArray_GetRef(maxAscent, 3) = -1;
    *IOSIntArray_GetRef(maxDescent, 0) = *IOSIntArray_GetRef(maxDescent, 1) = *IOSIntArray_GetRef(maxDescent, 2) = *IOSIntArray_GetRef(maxDescent, 3) = -1;
    maxHeight = -1;
    
#line 1252
    mTotalLength_ = 0;
    
#line 1254
    for (jint i = 0; i < count; ++i) {
      RepackagedAndroidViewView *child = [self getVirtualChildAtWithInt:i];
      
#line 1257
      if (child == nil || [child getVisibility] == RepackagedAndroidViewView_GONE) {
        continue;
      }
      
#line 1261
      RepackagedAndroidWidgetLinearLayout_LayoutParams *lp =
#line 1262
      (RepackagedAndroidWidgetLinearLayout_LayoutParams *) check_class_cast([((RepackagedAndroidViewView *) nil_chk(child)) getLayoutParams], [RepackagedAndroidWidgetLinearLayout_LayoutParams class]);
      
#line 1264
      jfloat childExtra = ((RepackagedAndroidWidgetLinearLayout_LayoutParams *) nil_chk(lp))->weight_;
      if (childExtra > 0) {
        
#line 1267
        jint share = J2ObjCFpToInt((childExtra * delta / weightSum));
        weightSum -= childExtra;
        delta -= share;
        
#line 1271
        jint childHeightMeasureSpec = RepackagedAndroidViewViewGroup_getChildMeasureSpecWithInt_withInt_withInt_(
#line 1272
        heightMeasureSpec,
#line 1273
        mPaddingTop_ + mPaddingBottom_ + lp->topMargin_ + lp->bottomMargin_,
#line 1274
        lp->height_);
        
#line 1278
        if ((lp->width_ != 0) || (widthMode != RepackagedAndroidViewView_MeasureSpec_EXACTLY)) {
          
#line 1281
          jint childWidth = [child getMeasuredWidth] + share;
          if (childWidth < 0) {
            childWidth = 0;
          }
          
#line 1286
          [child measureWithInt:RepackagedAndroidViewView_MeasureSpec_makeMeasureSpecWithInt_withInt_(
#line 1287
          childWidth, RepackagedAndroidViewView_MeasureSpec_EXACTLY) withInt:
#line 1288
          childHeightMeasureSpec];
        }
        else {
          [child measureWithInt:RepackagedAndroidViewView_MeasureSpec_makeMeasureSpecWithInt_withInt_(
#line 1292
          share > 0 ? share : 0, RepackagedAndroidViewView_MeasureSpec_EXACTLY) withInt:
#line 1293
          childHeightMeasureSpec];
        }
        
#line 1297
        childState = RepackagedAndroidViewView_combineMeasuredStatesWithInt_withInt_(childState,
#line 1298
        [child getMeasuredState] & RepackagedAndroidViewView_MEASURED_STATE_MASK);
      }
      
#line 1301
      if (isExactly) {
        mTotalLength_ += [child getMeasuredWidth] + lp->leftMargin_ + lp->rightMargin_ +
#line 1303
        [self getNextLocationOffsetWithRepackagedAndroidViewView:child];
      }
      else {
        
#line 1305
        jint totalLength = mTotalLength_;
        mTotalLength_ = JavaLangMath_maxWithInt_withInt_(totalLength, totalLength + [child getMeasuredWidth] +
#line 1307
        lp->leftMargin_ + lp->rightMargin_ + [self getNextLocationOffsetWithRepackagedAndroidViewView:child]);
      }
      
#line 1310
      jboolean matchHeightLocally = heightMode != RepackagedAndroidViewView_MeasureSpec_EXACTLY &&
#line 1311
      lp->height_ == RepackagedAndroidViewViewGroup_LayoutParams_MATCH_PARENT;
      
#line 1313
      jint margin = lp->topMargin_ + lp->bottomMargin_;
      jint childHeight = [child getMeasuredHeight] + margin;
      maxHeight = JavaLangMath_maxWithInt_withInt_(maxHeight, childHeight);
      alternativeMaxHeight = JavaLangMath_maxWithInt_withInt_(alternativeMaxHeight,
#line 1317
      matchHeightLocally ? margin : childHeight);
      
#line 1319
      allFillParent = (allFillParent && lp->height_ == RepackagedAndroidViewViewGroup_LayoutParams_MATCH_PARENT);
      
#line 1321
      if (baselineAligned) {
        jint childBaseline = [child getBaseline];
        if (childBaseline != -1) {
          
#line 1325
          jint gravity = (lp->gravity_ < 0 ? mGravity_ : lp->gravity_) &
#line 1326
          RepackagedAndroidViewGravity_VERTICAL_GRAVITY_MASK;
          jint index = RShift32(((RShift32(gravity, RepackagedAndroidViewGravity_AXIS_Y_SHIFT)) &
#line 1328
          ~RepackagedAndroidViewGravity_AXIS_SPECIFIED), 1);
          
#line 1330
          *IOSIntArray_GetRef(maxAscent, index) = JavaLangMath_maxWithInt_withInt_(IOSIntArray_Get(maxAscent, index), childBaseline);
          *IOSIntArray_GetRef(maxDescent, index) = JavaLangMath_maxWithInt_withInt_(IOSIntArray_Get(maxDescent, index),
#line 1332
          childHeight - childBaseline);
        }
      }
    }
    
#line 1338
    mTotalLength_ += mPaddingLeft_ + mPaddingRight_;
    
#line 1343
    if (IOSIntArray_Get(maxAscent, RepackagedAndroidWidgetLinearLayout_INDEX_TOP) != -1 ||
#line 1344
    IOSIntArray_Get(maxAscent, RepackagedAndroidWidgetLinearLayout_INDEX_CENTER_VERTICAL) != -1 ||
#line 1345
    IOSIntArray_Get(maxAscent, RepackagedAndroidWidgetLinearLayout_INDEX_BOTTOM) != -1 ||
#line 1346
    IOSIntArray_Get(maxAscent, RepackagedAndroidWidgetLinearLayout_INDEX_FILL) != -1) {
      jint ascent = JavaLangMath_maxWithInt_withInt_(IOSIntArray_Get(maxAscent, RepackagedAndroidWidgetLinearLayout_INDEX_FILL), JavaLangMath_maxWithInt_withInt_(IOSIntArray_Get(
#line 1348
      maxAscent, RepackagedAndroidWidgetLinearLayout_INDEX_CENTER_VERTICAL), JavaLangMath_maxWithInt_withInt_(IOSIntArray_Get(
#line 1349
      maxAscent, RepackagedAndroidWidgetLinearLayout_INDEX_TOP), IOSIntArray_Get(maxAscent, RepackagedAndroidWidgetLinearLayout_INDEX_BOTTOM))));
      jint descent = JavaLangMath_maxWithInt_withInt_(IOSIntArray_Get(maxDescent, RepackagedAndroidWidgetLinearLayout_INDEX_FILL), JavaLangMath_maxWithInt_withInt_(IOSIntArray_Get(
#line 1351
      maxDescent, RepackagedAndroidWidgetLinearLayout_INDEX_CENTER_VERTICAL), JavaLangMath_maxWithInt_withInt_(IOSIntArray_Get(
#line 1352
      maxDescent, RepackagedAndroidWidgetLinearLayout_INDEX_TOP), IOSIntArray_Get(maxDescent, RepackagedAndroidWidgetLinearLayout_INDEX_BOTTOM))));
      maxHeight = JavaLangMath_maxWithInt_withInt_(maxHeight, ascent + descent);
    }
  }
  else {
    
#line 1356
    alternativeMaxHeight = JavaLangMath_maxWithInt_withInt_(alternativeMaxHeight, weightedMaxHeight);
    
#line 1360
    if (useLargestChild && widthMode != RepackagedAndroidViewView_MeasureSpec_EXACTLY) {
      for (jint i = 0; i < count; i++) {
        RepackagedAndroidViewView *child = [self getVirtualChildAtWithInt:i];
        
#line 1364
        if (child == nil || [child getVisibility] == RepackagedAndroidViewView_GONE) {
          continue;
        }
        
#line 1368
        RepackagedAndroidWidgetLinearLayout_LayoutParams *lp =
#line 1369
        (RepackagedAndroidWidgetLinearLayout_LayoutParams *) check_class_cast([((RepackagedAndroidViewView *) nil_chk(child)) getLayoutParams], [RepackagedAndroidWidgetLinearLayout_LayoutParams class]);
        
#line 1371
        jfloat childExtra = ((RepackagedAndroidWidgetLinearLayout_LayoutParams *) nil_chk(lp))->weight_;
        if (childExtra > 0) {
          [child measureWithInt:RepackagedAndroidViewView_MeasureSpec_makeMeasureSpecWithInt_withInt_(
#line 1374
          largestChildWidth, RepackagedAndroidViewView_MeasureSpec_EXACTLY) withInt:RepackagedAndroidViewView_MeasureSpec_makeMeasureSpecWithInt_withInt_(
#line 1375
          [child getMeasuredHeight],
#line 1376
          RepackagedAndroidViewView_MeasureSpec_EXACTLY)];
        }
      }
    }
  }
  
#line 1382
  if (!allFillParent && heightMode != RepackagedAndroidViewView_MeasureSpec_EXACTLY) {
    maxHeight = alternativeMaxHeight;
  }
  
#line 1386
  maxHeight += mPaddingTop_ + mPaddingBottom_;
  
#line 1389
  maxHeight = JavaLangMath_maxWithInt_withInt_(maxHeight, [self getSuggestedMinimumHeight]);
  
#line 1391
  [self setMeasuredDimensionWithInt:widthSizeAndState | (childState & RepackagedAndroidViewView_MEASURED_STATE_MASK) withInt:RepackagedAndroidViewView_resolveSizeAndStateWithInt_withInt_withInt_(
#line 1392
  maxHeight, heightMeasureSpec,
#line 1393
  (LShift32(childState, RepackagedAndroidViewView_MEASURED_HEIGHT_STATE_SHIFT)))];
  
#line 1395
  if (matchHeight) {
    RepackagedAndroidWidgetLinearLayout_forceUniformHeightWithInt_withInt_(self, count, widthMeasureSpec);
  }
}


#line 1400
- (void)forceUniformHeightWithInt:(jint)count
                          withInt:(jint)widthMeasureSpec {
  RepackagedAndroidWidgetLinearLayout_forceUniformHeightWithInt_withInt_(self, count, widthMeasureSpec);
}


#line 1433
- (jint)getChildrenSkipCountWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)child
                                                  withInt:(jint)index {
  return 0;
}


#line 1444
- (jint)measureNullChildWithInt:(jint)childIndex {
  return 0;
}


#line 1461
- (void)measureChildBeforeLayoutWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)child
                                                      withInt:(jint)childIndex
                                                      withInt:(jint)widthMeasureSpec
                                                      withInt:(jint)totalWidth
                                                      withInt:(jint)heightMeasureSpec
                                                      withInt:(jint)totalHeight {
  
#line 1464
  [self measureChildWithMarginsWithRepackagedAndroidViewView:child withInt:widthMeasureSpec withInt:totalWidth withInt:
#line 1465
  heightMeasureSpec withInt:totalHeight];
}


#line 1475
- (jint)getLocationOffsetWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)child {
  return 0;
}


#line 1487
- (jint)getNextLocationOffsetWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)child {
  return 0;
}


#line 1492
- (void)onLayoutWithBoolean:(jboolean)changed
                    withInt:(jint)l
                    withInt:(jint)t
                    withInt:(jint)r
                    withInt:(jint)b {
  if (mOrientation_ == RepackagedAndroidWidgetLinearLayout_VERTICAL) {
    [self layoutVerticalWithInt:l withInt:t withInt:r withInt:b];
  }
  else {
    
#line 1496
    [self layoutHorizontalWithInt:l withInt:t withInt:r withInt:b];
  }
}


#line 1512
- (void)layoutVerticalWithInt:(jint)left
                      withInt:(jint)top
                      withInt:(jint)right
                      withInt:(jint)bottom {
  jint paddingLeft = mPaddingLeft_;
  
#line 1515
  jint childTop;
  jint childLeft;
  
#line 1519
  jint width = right - left;
  jint childRight = width - mPaddingRight_;
  
#line 1523
  jint childSpace = width - paddingLeft - mPaddingRight_;
  
#line 1525
  jint count = [self getVirtualChildCount];
  
#line 1527
  jint majorGravity = mGravity_ & RepackagedAndroidViewGravity_VERTICAL_GRAVITY_MASK;
  jint minorGravity = mGravity_ & RepackagedAndroidViewGravity_RELATIVE_HORIZONTAL_GRAVITY_MASK;
  
#line 1530
  switch (majorGravity) {
    case RepackagedAndroidViewGravity_BOTTOM:
    
#line 1533
    childTop = mPaddingTop_ + bottom - top - mTotalLength_;
    break;
    
#line 1537
    case RepackagedAndroidViewGravity_CENTER_VERTICAL:
    childTop = mPaddingTop_ + (bottom - top - mTotalLength_) / 2;
    break;
    
#line 1541
    case RepackagedAndroidViewGravity_TOP:
    default:
    childTop = mPaddingTop_;
    break;
  }
  
#line 1547
  for (jint i = 0; i < count; i++) {
    RepackagedAndroidViewView *child = [self getVirtualChildAtWithInt:i];
    if (child == nil) {
      childTop += [self measureNullChildWithInt:i];
    }
    else
#line 1551
    if ([child getVisibility] != RepackagedAndroidViewView_GONE) {
      jint childWidth = [child getMeasuredWidth];
      jint childHeight = [child getMeasuredHeight];
      
#line 1555
      RepackagedAndroidWidgetLinearLayout_LayoutParams *lp =
#line 1556
      (RepackagedAndroidWidgetLinearLayout_LayoutParams *) check_class_cast([child getLayoutParams], [RepackagedAndroidWidgetLinearLayout_LayoutParams class]);
      
#line 1558
      jint gravity = ((RepackagedAndroidWidgetLinearLayout_LayoutParams *) nil_chk(lp))->gravity_;
      if (gravity < 0) {
        gravity = minorGravity;
      }
      jint layoutDirection = [self getLayoutDirection];
      jint absoluteGravity = RepackagedAndroidViewGravity_getAbsoluteGravityWithInt_withInt_(gravity, layoutDirection);
      switch (absoluteGravity & RepackagedAndroidViewGravity_HORIZONTAL_GRAVITY_MASK) {
        case RepackagedAndroidViewGravity_CENTER_HORIZONTAL:
        childLeft = paddingLeft + ((childSpace - childWidth) / 2) +
#line 1567
        lp->leftMargin_ - lp->rightMargin_;
        break;
        
#line 1570
        case RepackagedAndroidViewGravity_RIGHT:
        childLeft = childRight - childWidth - lp->rightMargin_;
        break;
        
#line 1574
        case RepackagedAndroidViewGravity_LEFT:
        default:
        childLeft = paddingLeft + lp->leftMargin_;
        break;
      }
      
#line 1580
      if ([self hasDividerBeforeChildAtWithInt:i]) {
        childTop += mDividerHeight_;
      }
      
#line 1584
      childTop += lp->topMargin_;
      RepackagedAndroidWidgetLinearLayout_setChildFrameWithRepackagedAndroidViewView_withInt_withInt_withInt_withInt_(self, child, childLeft, childTop + [self getLocationOffsetWithRepackagedAndroidViewView:child],
#line 1586
      childWidth, childHeight);
      childTop += childHeight + lp->bottomMargin_ + [self getNextLocationOffsetWithRepackagedAndroidViewView:child];
      
#line 1589
      i += [self getChildrenSkipCountWithRepackagedAndroidViewView:child withInt:i];
    }
  }
}


#line 1595
- (void)onRtlPropertiesChangedWithInt:(jint)layoutDirection {
  [super onRtlPropertiesChangedWithInt:layoutDirection];
  if (layoutDirection != mLayoutDirection_) {
    mLayoutDirection_ = layoutDirection;
    if (mOrientation_ == RepackagedAndroidWidgetLinearLayout_HORIZONTAL) {
      [self requestLayout];
    }
  }
}


#line 1617
- (void)layoutHorizontalWithInt:(jint)left
                        withInt:(jint)top
                        withInt:(jint)right
                        withInt:(jint)bottom {
  jboolean isLayoutRtl = [self isLayoutRtl];
  jint paddingTop = mPaddingTop_;
  
#line 1621
  jint childTop;
  jint childLeft;
  
#line 1625
  jint height = bottom - top;
  jint childBottom = height - mPaddingBottom_;
  
#line 1629
  jint childSpace = height - paddingTop - mPaddingBottom_;
  
#line 1631
  jint count = [self getVirtualChildCount];
  
#line 1633
  jint majorGravity = mGravity_ & RepackagedAndroidViewGravity_RELATIVE_HORIZONTAL_GRAVITY_MASK;
  jint minorGravity = mGravity_ & RepackagedAndroidViewGravity_VERTICAL_GRAVITY_MASK;
  
#line 1636
  jboolean baselineAligned = mBaselineAligned_;
  
#line 1638
  IOSIntArray *maxAscent = mMaxAscent_;
  IOSIntArray *maxDescent = mMaxDescent_;
  
#line 1641
  jint layoutDirection = [self getLayoutDirection];
  switch (RepackagedAndroidViewGravity_getAbsoluteGravityWithInt_withInt_(majorGravity, layoutDirection)) {
    case RepackagedAndroidViewGravity_RIGHT:
    
#line 1645
    childLeft = mPaddingLeft_ + right - left - mTotalLength_;
    break;
    
#line 1648
    case RepackagedAndroidViewGravity_CENTER_HORIZONTAL:
    
#line 1650
    childLeft = mPaddingLeft_ + (right - left - mTotalLength_) / 2;
    break;
    
#line 1653
    case RepackagedAndroidViewGravity_LEFT:
    default:
    childLeft = mPaddingLeft_;
    break;
  }
  
#line 1659
  jint start = 0;
  jint dir = 1;
  
#line 1662
  if (isLayoutRtl) {
    start = count - 1;
    dir = -1;
  }
  
#line 1667
  for (jint i = 0; i < count; i++) {
    jint childIndex = start + dir * i;
    RepackagedAndroidViewView *child = [self getVirtualChildAtWithInt:childIndex];
    
#line 1671
    if (child == nil) {
      childLeft += [self measureNullChildWithInt:childIndex];
    }
    else
#line 1673
    if ([child getVisibility] != RepackagedAndroidViewView_GONE) {
      jint childWidth = [child getMeasuredWidth];
      jint childHeight = [child getMeasuredHeight];
      jint childBaseline = -1;
      
#line 1678
      RepackagedAndroidWidgetLinearLayout_LayoutParams *lp =
#line 1679
      (RepackagedAndroidWidgetLinearLayout_LayoutParams *) check_class_cast([child getLayoutParams], [RepackagedAndroidWidgetLinearLayout_LayoutParams class]);
      
#line 1681
      if (baselineAligned && ((RepackagedAndroidWidgetLinearLayout_LayoutParams *) nil_chk(lp))->height_ != RepackagedAndroidViewViewGroup_LayoutParams_MATCH_PARENT) {
        childBaseline = [child getBaseline];
      }
      
#line 1685
      jint gravity = ((RepackagedAndroidWidgetLinearLayout_LayoutParams *) nil_chk(lp))->gravity_;
      if (gravity < 0) {
        gravity = minorGravity;
      }
      
#line 1690
      switch (gravity & RepackagedAndroidViewGravity_VERTICAL_GRAVITY_MASK) {
        case RepackagedAndroidViewGravity_TOP:
        childTop = paddingTop + lp->topMargin_;
        if (childBaseline != -1) {
          childTop += IOSIntArray_Get(nil_chk(maxAscent), RepackagedAndroidWidgetLinearLayout_INDEX_TOP) - childBaseline;
        }
        break;
        
#line 1698
        case RepackagedAndroidViewGravity_CENTER_VERTICAL:
        
#line 1710
        childTop = paddingTop + ((childSpace - childHeight) / 2) +
#line 1711
        lp->topMargin_ - lp->bottomMargin_;
        break;
        
#line 1714
        case RepackagedAndroidViewGravity_BOTTOM:
        childTop = childBottom - childHeight - lp->bottomMargin_;
        if (childBaseline != -1) {
          jint descent = [child getMeasuredHeight] - childBaseline;
          childTop -= (IOSIntArray_Get(nil_chk(maxDescent), RepackagedAndroidWidgetLinearLayout_INDEX_BOTTOM) - descent);
        }
        break;
        default:
        childTop = paddingTop;
        break;
      }
      
#line 1726
      if ([self hasDividerBeforeChildAtWithInt:childIndex]) {
        childLeft += mDividerWidth_;
      }
      
#line 1730
      childLeft += lp->leftMargin_;
      RepackagedAndroidWidgetLinearLayout_setChildFrameWithRepackagedAndroidViewView_withInt_withInt_withInt_withInt_(self, child, childLeft + [self getLocationOffsetWithRepackagedAndroidViewView:child], childTop,
#line 1732
      childWidth, childHeight);
      childLeft += childWidth + lp->rightMargin_ +
#line 1734
      [self getNextLocationOffsetWithRepackagedAndroidViewView:child];
      
#line 1736
      i += [self getChildrenSkipCountWithRepackagedAndroidViewView:child withInt:childIndex];
    }
  }
}


#line 1741
- (void)setChildFrameWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)child
                                           withInt:(jint)left
                                           withInt:(jint)top
                                           withInt:(jint)width
                                           withInt:(jint)height {
  RepackagedAndroidWidgetLinearLayout_setChildFrameWithRepackagedAndroidViewView_withInt_withInt_withInt_withInt_(self, child, left, top, width, height);
}


#line 1754
- (void)setOrientationWithInt:(jint)orientation {
  if (mOrientation_ != orientation) {
    mOrientation_ = orientation;
    [self requestLayout];
  }
}


#line 1767
- (jint)getOrientation {
  return mOrientation_;
}


#line 1782
- (void)setGravityWithInt:(jint)gravity {
  if (mGravity_ != gravity) {
    if ((gravity & RepackagedAndroidViewGravity_RELATIVE_HORIZONTAL_GRAVITY_MASK) == 0) {
      gravity |= RepackagedAndroidViewGravity_START;
    }
    
#line 1788
    if ((gravity & RepackagedAndroidViewGravity_VERTICAL_GRAVITY_MASK) == 0) {
      gravity |= RepackagedAndroidViewGravity_TOP;
    }
    
#line 1792
    mGravity_ = gravity;
    [self requestLayout];
  }
}


#line 1798
- (void)setHorizontalGravityWithInt:(jint)horizontalGravity {
  jint gravity = horizontalGravity & RepackagedAndroidViewGravity_RELATIVE_HORIZONTAL_GRAVITY_MASK;
  if ((mGravity_ & RepackagedAndroidViewGravity_RELATIVE_HORIZONTAL_GRAVITY_MASK) != gravity) {
    mGravity_ = (mGravity_ & ~RepackagedAndroidViewGravity_RELATIVE_HORIZONTAL_GRAVITY_MASK) | gravity;
    [self requestLayout];
  }
}


#line 1807
- (void)setVerticalGravityWithInt:(jint)verticalGravity {
  jint gravity = verticalGravity & RepackagedAndroidViewGravity_VERTICAL_GRAVITY_MASK;
  if ((mGravity_ & RepackagedAndroidViewGravity_VERTICAL_GRAVITY_MASK) != gravity) {
    mGravity_ = (mGravity_ & ~RepackagedAndroidViewGravity_VERTICAL_GRAVITY_MASK) | gravity;
    [self requestLayout];
  }
}


#line 1816
- (RepackagedAndroidWidgetLinearLayout_LayoutParams *)generateLayoutParamsWithRepackagedAndroidUtilAttributeSet:(id<RepackagedAndroidUtilAttributeSet>)attrs {
  return new_RepackagedAndroidWidgetLinearLayout_LayoutParams_initWithRepackagedAndroidContentContext_withRepackagedAndroidUtilAttributeSet_([self getContext], attrs);
}


#line 1829
- (RepackagedAndroidWidgetLinearLayout_LayoutParams *)generateDefaultLayoutParams {
  if (mOrientation_ == RepackagedAndroidWidgetLinearLayout_HORIZONTAL) {
    return new_RepackagedAndroidWidgetLinearLayout_LayoutParams_initWithInt_withInt_(RepackagedAndroidViewViewGroup_LayoutParams_WRAP_CONTENT, RepackagedAndroidViewViewGroup_LayoutParams_WRAP_CONTENT);
  }
  else
#line 1832
  if (mOrientation_ == RepackagedAndroidWidgetLinearLayout_VERTICAL) {
    return new_RepackagedAndroidWidgetLinearLayout_LayoutParams_initWithInt_withInt_(RepackagedAndroidViewViewGroup_LayoutParams_MATCH_PARENT, RepackagedAndroidViewViewGroup_LayoutParams_WRAP_CONTENT);
  }
  return nil;
}


#line 1839
- (RepackagedAndroidWidgetLinearLayout_LayoutParams *)generateLayoutParamsWithRepackagedAndroidViewViewGroup_LayoutParams:(RepackagedAndroidViewViewGroup_LayoutParams *)p {
  return new_RepackagedAndroidWidgetLinearLayout_LayoutParams_initWithRepackagedAndroidViewViewGroup_LayoutParams_(p);
}


#line 1846
- (jboolean)checkLayoutParamsWithRepackagedAndroidViewViewGroup_LayoutParams:(RepackagedAndroidViewViewGroup_LayoutParams *)p {
  return [p isKindOfClass:[RepackagedAndroidWidgetLinearLayout_LayoutParams class]];
}


#line 1851
- (id<JavaLangCharSequence>)getAccessibilityClassName {
  return [RepackagedAndroidWidgetLinearLayout_class_() getName];
}


#line 1857
- (void)encodePropertiesWithRepackagedAndroidViewViewHierarchyEncoder:(id<RepackagedAndroidViewViewHierarchyEncoder>)encoder {
  [super encodePropertiesWithRepackagedAndroidViewViewHierarchyEncoder:encoder];
  [((id<RepackagedAndroidViewViewHierarchyEncoder>) nil_chk(encoder)) addPropertyWithNSString:@"layout:baselineAligned" withBoolean:mBaselineAligned_];
  [encoder addPropertyWithNSString:@"layout:baselineAlignedChildIndex" withInt:mBaselineAlignedChildIndex_];
  [encoder addPropertyWithNSString:@"measurement:baselineChildTop" withInt:mBaselineChildTop_];
  [encoder addPropertyWithNSString:@"measurement:orientation" withInt:mOrientation_];
  [encoder addPropertyWithNSString:@"measurement:gravity" withInt:mGravity_];
  [encoder addPropertyWithNSString:@"measurement:totalLength" withInt:mTotalLength_];
  [encoder addPropertyWithNSString:@"layout:totalLength" withInt:mTotalLength_];
  [encoder addPropertyWithNSString:@"layout:useLargestChild" withBoolean:mUseLargestChild_];
}

+ (IOSObjectArray *)__annotations_mBaselineAligned_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[RepackagedAndroidViewViewDebug_ExportedProperty alloc] initWithCategory:@"layout" withDeepExport:false withFlagMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withFormatToHexString:false withHasAdjacentMapping:false withIndexMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withPrefix:@"" withResolveId:false] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_mBaselineAlignedChildIndex_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[RepackagedAndroidViewViewDebug_ExportedProperty alloc] initWithCategory:@"layout" withDeepExport:false withFlagMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withFormatToHexString:false withHasAdjacentMapping:false withIndexMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withPrefix:@"" withResolveId:false] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_mBaselineChildTop_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[RepackagedAndroidViewViewDebug_ExportedProperty alloc] initWithCategory:@"measurement" withDeepExport:false withFlagMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withFormatToHexString:false withHasAdjacentMapping:false withIndexMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withPrefix:@"" withResolveId:false] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_mOrientation_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[RepackagedAndroidViewViewDebug_ExportedProperty alloc] initWithCategory:@"measurement" withDeepExport:false withFlagMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withFormatToHexString:false withHasAdjacentMapping:false withIndexMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withPrefix:@"" withResolveId:false] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_mGravity_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[RepackagedAndroidViewViewDebug_ExportedProperty alloc] initWithCategory:@"measurement" withDeepExport:false withFlagMapping:[IOSObjectArray arrayWithObjects:(id[]) { [[RepackagedAndroidViewViewDebug_FlagToString alloc] initWithEquals:-1 withMask:-1 withName:@"NONE" withOutputIf:true], [[RepackagedAndroidViewViewDebug_FlagToString alloc] initWithEquals:0 withMask:0 withName:@"NONE" withOutputIf:true], [[RepackagedAndroidViewViewDebug_FlagToString alloc] initWithEquals:48 withMask:48 withName:@"TOP" withOutputIf:true], [[RepackagedAndroidViewViewDebug_FlagToString alloc] initWithEquals:80 withMask:80 withName:@"BOTTOM" withOutputIf:true], [[RepackagedAndroidViewViewDebug_FlagToString alloc] initWithEquals:3 withMask:3 withName:@"LEFT" withOutputIf:true], [[RepackagedAndroidViewViewDebug_FlagToString alloc] initWithEquals:5 withMask:5 withName:@"RIGHT" withOutputIf:true], [[RepackagedAndroidViewViewDebug_FlagToString alloc] initWithEquals:8388611 withMask:8388611 withName:@"START" withOutputIf:true], [[RepackagedAndroidViewViewDebug_FlagToString alloc] initWithEquals:8388613 withMask:8388613 withName:@"END" withOutputIf:true], [[RepackagedAndroidViewViewDebug_FlagToString alloc] initWithEquals:16 withMask:16 withName:@"CENTER_VERTICAL" withOutputIf:true], [[RepackagedAndroidViewViewDebug_FlagToString alloc] initWithEquals:112 withMask:112 withName:@"FILL_VERTICAL" withOutputIf:true], [[RepackagedAndroidViewViewDebug_FlagToString alloc] initWithEquals:1 withMask:1 withName:@"CENTER_HORIZONTAL" withOutputIf:true], [[RepackagedAndroidViewViewDebug_FlagToString alloc] initWithEquals:7 withMask:7 withName:@"FILL_HORIZONTAL" withOutputIf:true], [[RepackagedAndroidViewViewDebug_FlagToString alloc] initWithEquals:17 withMask:17 withName:@"CENTER" withOutputIf:true], [[RepackagedAndroidViewViewDebug_FlagToString alloc] initWithEquals:119 withMask:119 withName:@"FILL" withOutputIf:true], [[RepackagedAndroidViewViewDebug_FlagToString alloc] initWithEquals:8388608 withMask:8388608 withName:@"RELATIVE" withOutputIf:true] } count:15 type:NSObject_class_()] withFormatToHexString:true withHasAdjacentMapping:false withIndexMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withPrefix:@"" withResolveId:false] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_mTotalLength_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[RepackagedAndroidViewViewDebug_ExportedProperty alloc] initWithCategory:@"measurement" withDeepExport:false withFlagMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withFormatToHexString:false withHasAdjacentMapping:false withIndexMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withPrefix:@"" withResolveId:false] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_mWeightSum_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[RepackagedAndroidViewViewDebug_ExportedProperty alloc] initWithCategory:@"layout" withDeepExport:false withFlagMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withFormatToHexString:false withHasAdjacentMapping:false withIndexMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withPrefix:@"" withResolveId:false] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_mUseLargestChild_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[RepackagedAndroidViewViewDebug_ExportedProperty alloc] initWithCategory:@"layout" withDeepExport:false withFlagMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withFormatToHexString:false withHasAdjacentMapping:false withIndexMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withPrefix:@"" withResolveId:false] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithRepackagedAndroidContentContext:", "LinearLayout", NULL, 0x1, NULL, NULL },
    { "initWithRepackagedAndroidContentContext:withRepackagedAndroidUtilAttributeSet:", "LinearLayout", NULL, 0x1, NULL, NULL },
    { "initWithRepackagedAndroidContentContext:withRepackagedAndroidUtilAttributeSet:withInt:", "LinearLayout", NULL, 0x1, NULL, NULL },
    { "initWithRepackagedAndroidContentContext:withRepackagedAndroidUtilAttributeSet:withInt:withInt:", "LinearLayout", NULL, 0x1, NULL, NULL },
    { "setShowDividersWithInt:", "setShowDividers", "V", 0x1, NULL, NULL },
    { "shouldDelayChildPressedState", NULL, "Z", 0x1, NULL, NULL },
    { "getShowDividers", NULL, "I", 0x1, NULL, NULL },
    { "getDividerDrawable", NULL, "Lrepackaged.android.graphics.drawable.Drawable;", 0x1, NULL, NULL },
    { "setDividerDrawableWithRepackagedAndroidGraphicsDrawableDrawable:", "setDividerDrawable", "V", 0x1, NULL, NULL },
    { "setDividerPaddingWithInt:", "setDividerPadding", "V", 0x1, NULL, NULL },
    { "getDividerPadding", NULL, "I", 0x1, NULL, NULL },
    { "getDividerWidth", NULL, "I", 0x1, NULL, NULL },
    { "onDrawWithRepackagedAndroidGraphicsCanvas:", "onDraw", "V", 0x4, NULL, NULL },
    { "drawDividersVerticalWithRepackagedAndroidGraphicsCanvas:", "drawDividersVertical", "V", 0x0, NULL, NULL },
    { "getLastNonGoneChild", NULL, "Lrepackaged.android.view.View;", 0x2, NULL, NULL },
    { "drawDividersHorizontalWithRepackagedAndroidGraphicsCanvas:", "drawDividersHorizontal", "V", 0x0, NULL, NULL },
    { "drawHorizontalDividerWithRepackagedAndroidGraphicsCanvas:withInt:", "drawHorizontalDivider", "V", 0x0, NULL, NULL },
    { "drawVerticalDividerWithRepackagedAndroidGraphicsCanvas:withInt:", "drawVerticalDivider", "V", 0x0, NULL, NULL },
    { "isBaselineAligned", NULL, "Z", 0x1, NULL, NULL },
    { "setBaselineAlignedWithBoolean:", "setBaselineAligned", "V", 0x1, NULL, NULL },
    { "isMeasureWithLargestChildEnabled", NULL, "Z", 0x1, NULL, NULL },
    { "setMeasureWithLargestChildEnabledWithBoolean:", "setMeasureWithLargestChildEnabled", "V", 0x1, NULL, NULL },
    { "getBaseline", NULL, "I", 0x1, NULL, NULL },
    { "getBaselineAlignedChildIndex", NULL, "I", 0x1, NULL, NULL },
    { "setBaselineAlignedChildIndexWithInt:", "setBaselineAlignedChildIndex", "V", 0x1, NULL, NULL },
    { "getVirtualChildAtWithInt:", "getVirtualChildAt", "Lrepackaged.android.view.View;", 0x0, NULL, NULL },
    { "getVirtualChildCount", NULL, "I", 0x0, NULL, NULL },
    { "getWeightSum", NULL, "F", 0x1, NULL, NULL },
    { "setWeightSumWithFloat:", "setWeightSum", "V", 0x1, NULL, NULL },
    { "onMeasureWithInt:withInt:", "onMeasure", "V", 0x4, NULL, NULL },
    { "hasDividerBeforeChildAtWithInt:", "hasDividerBeforeChildAt", "Z", 0x4, NULL, NULL },
    { "allViewsAreGoneBeforeWithInt:", "allViewsAreGoneBefore", "Z", 0x2, NULL, NULL },
    { "measureVerticalWithInt:withInt:", "measureVertical", "V", 0x0, NULL, NULL },
    { "forceUniformWidthWithInt:withInt:", "forceUniformWidth", "V", 0x2, NULL, NULL },
    { "measureHorizontalWithInt:withInt:", "measureHorizontal", "V", 0x0, NULL, NULL },
    { "forceUniformHeightWithInt:withInt:", "forceUniformHeight", "V", 0x2, NULL, NULL },
    { "getChildrenSkipCountWithRepackagedAndroidViewView:withInt:", "getChildrenSkipCount", "I", 0x0, NULL, NULL },
    { "measureNullChildWithInt:", "measureNullChild", "I", 0x0, NULL, NULL },
    { "measureChildBeforeLayoutWithRepackagedAndroidViewView:withInt:withInt:withInt:withInt:withInt:", "measureChildBeforeLayout", "V", 0x0, NULL, NULL },
    { "getLocationOffsetWithRepackagedAndroidViewView:", "getLocationOffset", "I", 0x0, NULL, NULL },
    { "getNextLocationOffsetWithRepackagedAndroidViewView:", "getNextLocationOffset", "I", 0x0, NULL, NULL },
    { "onLayoutWithBoolean:withInt:withInt:withInt:withInt:", "onLayout", "V", 0x4, NULL, NULL },
    { "layoutVerticalWithInt:withInt:withInt:withInt:", "layoutVertical", "V", 0x0, NULL, NULL },
    { "onRtlPropertiesChangedWithInt:", "onRtlPropertiesChanged", "V", 0x1, NULL, NULL },
    { "layoutHorizontalWithInt:withInt:withInt:withInt:", "layoutHorizontal", "V", 0x0, NULL, NULL },
    { "setChildFrameWithRepackagedAndroidViewView:withInt:withInt:withInt:withInt:", "setChildFrame", "V", 0x2, NULL, NULL },
    { "setOrientationWithInt:", "setOrientation", "V", 0x1, NULL, NULL },
    { "getOrientation", NULL, "I", 0x1, NULL, NULL },
    { "setGravityWithInt:", "setGravity", "V", 0x1, NULL, NULL },
    { "setHorizontalGravityWithInt:", "setHorizontalGravity", "V", 0x1, NULL, NULL },
    { "setVerticalGravityWithInt:", "setVerticalGravity", "V", 0x1, NULL, NULL },
    { "generateLayoutParamsWithRepackagedAndroidUtilAttributeSet:", "generateLayoutParams", "Lrepackaged.android.widget.LinearLayout$LayoutParams;", 0x1, NULL, NULL },
    { "generateDefaultLayoutParams", NULL, "Lrepackaged.android.widget.LinearLayout$LayoutParams;", 0x4, NULL, NULL },
    { "generateLayoutParamsWithRepackagedAndroidViewViewGroup_LayoutParams:", "generateLayoutParams", "Lrepackaged.android.widget.LinearLayout$LayoutParams;", 0x4, NULL, NULL },
    { "checkLayoutParamsWithRepackagedAndroidViewViewGroup_LayoutParams:", "checkLayoutParams", "Z", 0x4, NULL, NULL },
    { "getAccessibilityClassName", NULL, "Ljava.lang.CharSequence;", 0x1, NULL, NULL },
    { "encodePropertiesWithRepackagedAndroidViewViewHierarchyEncoder:", "encodeProperties", "V", 0x4, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "HORIZONTAL_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidWidgetLinearLayout_HORIZONTAL },
    { "VERTICAL_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidWidgetLinearLayout_VERTICAL },
    { "SHOW_DIVIDER_NONE_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidWidgetLinearLayout_SHOW_DIVIDER_NONE },
    { "SHOW_DIVIDER_BEGINNING_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidWidgetLinearLayout_SHOW_DIVIDER_BEGINNING },
    { "SHOW_DIVIDER_MIDDLE_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidWidgetLinearLayout_SHOW_DIVIDER_MIDDLE },
    { "SHOW_DIVIDER_END_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidWidgetLinearLayout_SHOW_DIVIDER_END },
    { "mBaselineAligned_", NULL, 0x2, "Z", NULL, NULL,  },
    { "mBaselineAlignedChildIndex_", NULL, 0x2, "I", NULL, NULL,  },
    { "mBaselineChildTop_", NULL, 0x2, "I", NULL, NULL,  },
    { "mOrientation_", NULL, 0x2, "I", NULL, NULL,  },
    { "mGravity_", NULL, 0x2, "I", NULL, NULL,  },
    { "mTotalLength_", NULL, 0x2, "I", NULL, NULL,  },
    { "mWeightSum_", NULL, 0x2, "F", NULL, NULL,  },
    { "mUseLargestChild_", NULL, 0x2, "Z", NULL, NULL,  },
    { "mMaxAscent_", NULL, 0x2, "[I", NULL, NULL,  },
    { "mMaxDescent_", NULL, 0x2, "[I", NULL, NULL,  },
    { "VERTICAL_GRAVITY_COUNT_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidWidgetLinearLayout_VERTICAL_GRAVITY_COUNT },
    { "INDEX_CENTER_VERTICAL_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidWidgetLinearLayout_INDEX_CENTER_VERTICAL },
    { "INDEX_TOP_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidWidgetLinearLayout_INDEX_TOP },
    { "INDEX_BOTTOM_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidWidgetLinearLayout_INDEX_BOTTOM },
    { "INDEX_FILL_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidWidgetLinearLayout_INDEX_FILL },
    { "mDivider_", NULL, 0x2, "Lrepackaged.android.graphics.drawable.Drawable;", NULL, NULL,  },
    { "mDividerWidth_", NULL, 0x2, "I", NULL, NULL,  },
    { "mDividerHeight_", NULL, 0x2, "I", NULL, NULL,  },
    { "mShowDividers_", NULL, 0x2, "I", NULL, NULL,  },
    { "mDividerPadding_", NULL, 0x2, "I", NULL, NULL,  },
    { "mLayoutDirection_", NULL, 0x2, "I", NULL, NULL,  },
  };
  static const char *inner_classes[] = {"Lrepackaged.android.widget.LinearLayout$OrientationMode;", "Lrepackaged.android.widget.LinearLayout$DividerMode;", "Lrepackaged.android.widget.LinearLayout$LayoutParams;"};
  static const J2ObjcClassInfo _RepackagedAndroidWidgetLinearLayout = { 2, "LinearLayout", "repackaged.android.widget", NULL, 0x1, 57, methods, 27, fields, 0, NULL, 3, inner_classes, NULL, NULL };
  return &_RepackagedAndroidWidgetLinearLayout;
}

@end


#line 189
void RepackagedAndroidWidgetLinearLayout_initWithRepackagedAndroidContentContext_(RepackagedAndroidWidgetLinearLayout *self, id<RepackagedAndroidContentContext> context) {
  (void) RepackagedAndroidWidgetLinearLayout_initWithRepackagedAndroidContentContext_withRepackagedAndroidUtilAttributeSet_(self, context, nil);
}


#line 189
RepackagedAndroidWidgetLinearLayout *new_RepackagedAndroidWidgetLinearLayout_initWithRepackagedAndroidContentContext_(id<RepackagedAndroidContentContext> context) {
  RepackagedAndroidWidgetLinearLayout *self = [RepackagedAndroidWidgetLinearLayout alloc];
  RepackagedAndroidWidgetLinearLayout_initWithRepackagedAndroidContentContext_(self, context);
  return self;
}


#line 193
void RepackagedAndroidWidgetLinearLayout_initWithRepackagedAndroidContentContext_withRepackagedAndroidUtilAttributeSet_(RepackagedAndroidWidgetLinearLayout *self, id<RepackagedAndroidContentContext> context, id<RepackagedAndroidUtilAttributeSet> attrs) {
  (void) RepackagedAndroidWidgetLinearLayout_initWithRepackagedAndroidContentContext_withRepackagedAndroidUtilAttributeSet_withInt_(self, context, attrs, 0);
}


#line 193
RepackagedAndroidWidgetLinearLayout *new_RepackagedAndroidWidgetLinearLayout_initWithRepackagedAndroidContentContext_withRepackagedAndroidUtilAttributeSet_(id<RepackagedAndroidContentContext> context, id<RepackagedAndroidUtilAttributeSet> attrs) {
  RepackagedAndroidWidgetLinearLayout *self = [RepackagedAndroidWidgetLinearLayout alloc];
  RepackagedAndroidWidgetLinearLayout_initWithRepackagedAndroidContentContext_withRepackagedAndroidUtilAttributeSet_(self, context, attrs);
  return self;
}


#line 197
void RepackagedAndroidWidgetLinearLayout_initWithRepackagedAndroidContentContext_withRepackagedAndroidUtilAttributeSet_withInt_(RepackagedAndroidWidgetLinearLayout *self, id<RepackagedAndroidContentContext> context, id<RepackagedAndroidUtilAttributeSet> attrs, jint defStyleAttr) {
  (void) RepackagedAndroidWidgetLinearLayout_initWithRepackagedAndroidContentContext_withRepackagedAndroidUtilAttributeSet_withInt_withInt_(self, context, attrs, defStyleAttr, 0);
}


#line 197
RepackagedAndroidWidgetLinearLayout *new_RepackagedAndroidWidgetLinearLayout_initWithRepackagedAndroidContentContext_withRepackagedAndroidUtilAttributeSet_withInt_(id<RepackagedAndroidContentContext> context, id<RepackagedAndroidUtilAttributeSet> attrs, jint defStyleAttr) {
  RepackagedAndroidWidgetLinearLayout *self = [RepackagedAndroidWidgetLinearLayout alloc];
  RepackagedAndroidWidgetLinearLayout_initWithRepackagedAndroidContentContext_withRepackagedAndroidUtilAttributeSet_withInt_(self, context, attrs, defStyleAttr);
  return self;
}


#line 201
void RepackagedAndroidWidgetLinearLayout_initWithRepackagedAndroidContentContext_withRepackagedAndroidUtilAttributeSet_withInt_withInt_(RepackagedAndroidWidgetLinearLayout *self, id<RepackagedAndroidContentContext> context, id<RepackagedAndroidUtilAttributeSet> attrs, jint defStyleAttr, jint defStyleRes) {
  (void) RepackagedAndroidViewViewGroup_initWithRepackagedAndroidContentContext_withRepackagedAndroidUtilAttributeSet_withInt_withInt_(self, context, attrs, defStyleAttr, defStyleRes);
  self->mBaselineAligned_ =
#line 105
  YES;
  self->mBaselineAlignedChildIndex_ =
#line 115
  -1;
  self->mBaselineChildTop_ =
#line 123
  0;
  self->mGravity_ =
#line 160
  RepackagedAndroidViewGravity_START | RepackagedAndroidViewGravity_TOP;
  self->mLayoutDirection_ =
#line 187
  RepackagedAndroidViewView_LAYOUT_DIRECTION_UNDEFINED;
  
#line 204
  id<RepackagedAndroidContentResTypedArray> a = [((id<RepackagedAndroidContentContext>) nil_chk(context)) obtainStyledAttributesWithRepackagedAndroidUtilAttributeSet:
#line 205
  attrs withIntArray:RepackagedComAndroidInternalR_styleable_get_LinearLayout_() withInt:defStyleAttr withInt:defStyleRes];
  
#line 207
  jint index = [((id<RepackagedAndroidContentResTypedArray>) nil_chk(a)) getIntWithInt:RepackagedComAndroidInternalR_styleable_LinearLayout_orientation withInt:-1];
  if (index >= 0) {
    [self setOrientationWithInt:index];
  }
  
#line 212
  index = [a getIntWithInt:RepackagedComAndroidInternalR_styleable_LinearLayout_gravity withInt:-1];
  if (index >= 0) {
    [self setGravityWithInt:index];
  }
  
#line 217
  jboolean baselineAligned = [a getBooleanWithInt:RepackagedComAndroidInternalR_styleable_LinearLayout_baselineAligned withBoolean:YES];
  if (!baselineAligned) {
    [self setBaselineAlignedWithBoolean:baselineAligned];
  }
  
#line 222
  self->mWeightSum_ = [a getFloatWithInt:RepackagedComAndroidInternalR_styleable_LinearLayout_weightSum withFloat:-1.0f];
  
#line 224
  self->mBaselineAlignedChildIndex_ =
#line 225
  [a getIntWithInt:RepackagedComAndroidInternalR_styleable_LinearLayout_baselineAlignedChildIndex withInt:-1];
  
#line 227
  self->mUseLargestChild_ = [a getBooleanWithInt:RepackagedComAndroidInternalR_styleable_LinearLayout_measureWithLargestChild withBoolean:NO];
  
#line 229
  [self setDividerDrawableWithRepackagedAndroidGraphicsDrawableDrawable:[a getDrawableWithInt:RepackagedComAndroidInternalR_styleable_LinearLayout_divider]];
  self->mShowDividers_ = [a getIntWithInt:RepackagedComAndroidInternalR_styleable_LinearLayout_showDividers withInt:RepackagedAndroidWidgetLinearLayout_SHOW_DIVIDER_NONE];
  self->mDividerPadding_ = [a getDimensionPixelSizeWithInt:RepackagedComAndroidInternalR_styleable_LinearLayout_dividerPadding withInt:0];
  
#line 233
  [a recycle];
}


#line 201
RepackagedAndroidWidgetLinearLayout *new_RepackagedAndroidWidgetLinearLayout_initWithRepackagedAndroidContentContext_withRepackagedAndroidUtilAttributeSet_withInt_withInt_(id<RepackagedAndroidContentContext> context, id<RepackagedAndroidUtilAttributeSet> attrs, jint defStyleAttr, jint defStyleRes) {
  RepackagedAndroidWidgetLinearLayout *self = [RepackagedAndroidWidgetLinearLayout alloc];
  RepackagedAndroidWidgetLinearLayout_initWithRepackagedAndroidContentContext_withRepackagedAndroidUtilAttributeSet_withInt_withInt_(self, context, attrs, defStyleAttr, defStyleRes);
  return self;
}


#line 377
RepackagedAndroidViewView *RepackagedAndroidWidgetLinearLayout_getLastNonGoneChild(RepackagedAndroidWidgetLinearLayout *self) {
  for (jint i = [self getVirtualChildCount] - 1; i >= 0; i--) {
    RepackagedAndroidViewView *child = [self getVirtualChildAtWithInt:i];
    if (child != nil && [child getVisibility] != RepackagedAndroidViewView_GONE) {
      return child;
    }
  }
  return nil;
}


#line 659
jboolean RepackagedAndroidWidgetLinearLayout_allViewsAreGoneBeforeWithInt_(RepackagedAndroidWidgetLinearLayout *self, jint childIndex) {
  for (jint i = childIndex - 1; i >= 0; i--) {
    RepackagedAndroidViewView *child = [self getVirtualChildAtWithInt:i];
    if (child != nil && [child getVisibility] != RepackagedAndroidViewView_GONE) {
      return NO;
    }
  }
  return YES;
}


#line 977
void RepackagedAndroidWidgetLinearLayout_forceUniformWidthWithInt_withInt_(RepackagedAndroidWidgetLinearLayout *self, jint count, jint heightMeasureSpec) {
  
#line 979
  jint uniformMeasureSpec = RepackagedAndroidViewView_MeasureSpec_makeMeasureSpecWithInt_withInt_([self getMeasuredWidth],
#line 980
  RepackagedAndroidViewView_MeasureSpec_EXACTLY);
  for (jint i = 0; i < count; ++i) {
    RepackagedAndroidViewView *child = [self getVirtualChildAtWithInt:i];
    if ([((RepackagedAndroidViewView *) nil_chk(child)) getVisibility] != RepackagedAndroidViewView_GONE) {
      RepackagedAndroidWidgetLinearLayout_LayoutParams *lp = ((RepackagedAndroidWidgetLinearLayout_LayoutParams *) check_class_cast([child getLayoutParams], [RepackagedAndroidWidgetLinearLayout_LayoutParams class]));
      
#line 986
      if (((RepackagedAndroidWidgetLinearLayout_LayoutParams *) nil_chk(lp))->width_ == RepackagedAndroidViewViewGroup_LayoutParams_MATCH_PARENT) {
        
#line 989
        jint oldHeight = lp->height_;
        lp->height_ = [child getMeasuredHeight];
        
#line 993
        [self measureChildWithMarginsWithRepackagedAndroidViewView:child withInt:uniformMeasureSpec withInt:0 withInt:heightMeasureSpec withInt:0];
        lp->height_ = oldHeight;
      }
    }
  }
}


#line 1400
void RepackagedAndroidWidgetLinearLayout_forceUniformHeightWithInt_withInt_(RepackagedAndroidWidgetLinearLayout *self, jint count, jint widthMeasureSpec) {
  
#line 1404
  jint uniformMeasureSpec = RepackagedAndroidViewView_MeasureSpec_makeMeasureSpecWithInt_withInt_([self getMeasuredHeight],
#line 1405
  RepackagedAndroidViewView_MeasureSpec_EXACTLY);
  for (jint i = 0; i < count; ++i) {
    RepackagedAndroidViewView *child = [self getVirtualChildAtWithInt:i];
    if ([((RepackagedAndroidViewView *) nil_chk(child)) getVisibility] != RepackagedAndroidViewView_GONE) {
      RepackagedAndroidWidgetLinearLayout_LayoutParams *lp = (RepackagedAndroidWidgetLinearLayout_LayoutParams *) check_class_cast([child getLayoutParams], [RepackagedAndroidWidgetLinearLayout_LayoutParams class]);
      
#line 1411
      if (((RepackagedAndroidWidgetLinearLayout_LayoutParams *) nil_chk(lp))->height_ == RepackagedAndroidViewViewGroup_LayoutParams_MATCH_PARENT) {
        
#line 1414
        jint oldWidth = lp->width_;
        lp->width_ = [child getMeasuredWidth];
        
#line 1418
        [self measureChildWithMarginsWithRepackagedAndroidViewView:child withInt:widthMeasureSpec withInt:0 withInt:uniformMeasureSpec withInt:0];
        lp->width_ = oldWidth;
      }
    }
  }
}


#line 1741
void RepackagedAndroidWidgetLinearLayout_setChildFrameWithRepackagedAndroidViewView_withInt_withInt_withInt_withInt_(RepackagedAndroidWidgetLinearLayout *self, RepackagedAndroidViewView *child, jint left, jint top, jint width, jint height) {
  [((RepackagedAndroidViewView *) nil_chk(child)) layoutWithInt:left withInt:top withInt:left + width withInt:top + height];
  
#line 1744
  [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_out_())) printlnWithNSString:JreStrcat("ICICICICI", [child getId], ' ', left, ' ', top, ' ', width, ' ', height)];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RepackagedAndroidWidgetLinearLayout)


#line 67
@implementation RepackagedAndroidWidgetLinearLayout_OrientationMode

+ (IOSObjectArray *)__annotations {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[JavaLangAnnotationRetention alloc] initWithValue:JavaLangAnnotationRetentionPolicyEnum_get_SOURCE()] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcClassInfo _RepackagedAndroidWidgetLinearLayout_OrientationMode = { 2, "OrientationMode", "repackaged.android.widget", "LinearLayout", 0x2609, 0, NULL, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_RepackagedAndroidWidgetLinearLayout_OrientationMode;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(RepackagedAndroidWidgetLinearLayout_OrientationMode)


#line 81
@implementation RepackagedAndroidWidgetLinearLayout_DividerMode

+ (IOSObjectArray *)__annotations {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[JavaLangAnnotationRetention alloc] initWithValue:JavaLangAnnotationRetentionPolicyEnum_get_SOURCE()] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcClassInfo _RepackagedAndroidWidgetLinearLayout_DividerMode = { 2, "DividerMode", "repackaged.android.widget", "LinearLayout", 0x2609, 0, NULL, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_RepackagedAndroidWidgetLinearLayout_DividerMode;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(RepackagedAndroidWidgetLinearLayout_DividerMode)


#line 1875
@implementation RepackagedAndroidWidgetLinearLayout_LayoutParams


#line 1911
- (instancetype)initWithRepackagedAndroidContentContext:(id<RepackagedAndroidContentContext>)c
                  withRepackagedAndroidUtilAttributeSet:(id<RepackagedAndroidUtilAttributeSet>)attrs {
  RepackagedAndroidWidgetLinearLayout_LayoutParams_initWithRepackagedAndroidContentContext_withRepackagedAndroidUtilAttributeSet_(self, c, attrs);
  return self;
}


#line 1925
- (instancetype)initWithInt:(jint)width
                    withInt:(jint)height {
  RepackagedAndroidWidgetLinearLayout_LayoutParams_initWithInt_withInt_(self, width, height);
  return self;
}


#line 1940
- (instancetype)initWithInt:(jint)width
                    withInt:(jint)height
                  withFloat:(jfloat)weight {
  RepackagedAndroidWidgetLinearLayout_LayoutParams_initWithInt_withInt_withFloat_(self, width, height, weight);
  return self;
}


#line 1948
- (instancetype)initWithRepackagedAndroidViewViewGroup_LayoutParams:(RepackagedAndroidViewViewGroup_LayoutParams *)p {
  RepackagedAndroidWidgetLinearLayout_LayoutParams_initWithRepackagedAndroidViewViewGroup_LayoutParams_(self, p);
  return self;
}


#line 1955
- (instancetype)initWithRepackagedAndroidViewViewGroup_MarginLayoutParams:(RepackagedAndroidViewViewGroup_MarginLayoutParams *)source {
  RepackagedAndroidWidgetLinearLayout_LayoutParams_initWithRepackagedAndroidViewViewGroup_MarginLayoutParams_(self, source);
  return self;
}


#line 1965
- (instancetype)initWithRepackagedAndroidWidgetLinearLayout_LayoutParams:(RepackagedAndroidWidgetLinearLayout_LayoutParams *)source {
  RepackagedAndroidWidgetLinearLayout_LayoutParams_initWithRepackagedAndroidWidgetLinearLayout_LayoutParams_(self, source);
  return self;
}


#line 1973
- (NSString *)debugWithNSString:(NSString *)output {
  return JreStrcat("$$$$$$FC", output, @"LinearLayout.LayoutParams={width=", RepackagedAndroidViewViewGroup_LayoutParams_sizeToStringWithInt_(width_), @", height=", RepackagedAndroidViewViewGroup_LayoutParams_sizeToStringWithInt_(
#line 1975
  height_), @" weight=", weight_, '}');
}


#line 1980
- (void)encodePropertiesWithRepackagedAndroidViewViewHierarchyEncoder:(id<RepackagedAndroidViewViewHierarchyEncoder>)encoder {
  [super encodePropertiesWithRepackagedAndroidViewViewHierarchyEncoder:encoder];
  
#line 1983
  [((id<RepackagedAndroidViewViewHierarchyEncoder>) nil_chk(encoder)) addPropertyWithNSString:@"layout:weight" withFloat:weight_];
  [encoder addPropertyWithNSString:@"layout:gravity" withInt:gravity_];
}

+ (IOSObjectArray *)__annotations_weight_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[RepackagedAndroidViewViewDebug_ExportedProperty alloc] initWithCategory:@"layout" withDeepExport:false withFlagMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withFormatToHexString:false withHasAdjacentMapping:false withIndexMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withPrefix:@"" withResolveId:false] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_gravity_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[RepackagedAndroidViewViewDebug_ExportedProperty alloc] initWithCategory:@"layout" withDeepExport:false withFlagMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withFormatToHexString:false withHasAdjacentMapping:false withIndexMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withMapping:[IOSObjectArray arrayWithObjects:(id[]) { [[RepackagedAndroidViewViewDebug_IntToString alloc] initWithFrom:-1 withTo:@"NONE"], [[RepackagedAndroidViewViewDebug_IntToString alloc] initWithFrom:0 withTo:@"NONE"], [[RepackagedAndroidViewViewDebug_IntToString alloc] initWithFrom:48 withTo:@"TOP"], [[RepackagedAndroidViewViewDebug_IntToString alloc] initWithFrom:80 withTo:@"BOTTOM"], [[RepackagedAndroidViewViewDebug_IntToString alloc] initWithFrom:3 withTo:@"LEFT"], [[RepackagedAndroidViewViewDebug_IntToString alloc] initWithFrom:5 withTo:@"RIGHT"], [[RepackagedAndroidViewViewDebug_IntToString alloc] initWithFrom:8388611 withTo:@"START"], [[RepackagedAndroidViewViewDebug_IntToString alloc] initWithFrom:8388613 withTo:@"END"], [[RepackagedAndroidViewViewDebug_IntToString alloc] initWithFrom:16 withTo:@"CENTER_VERTICAL"], [[RepackagedAndroidViewViewDebug_IntToString alloc] initWithFrom:112 withTo:@"FILL_VERTICAL"], [[RepackagedAndroidViewViewDebug_IntToString alloc] initWithFrom:1 withTo:@"CENTER_HORIZONTAL"], [[RepackagedAndroidViewViewDebug_IntToString alloc] initWithFrom:7 withTo:@"FILL_HORIZONTAL"], [[RepackagedAndroidViewViewDebug_IntToString alloc] initWithFrom:17 withTo:@"CENTER"], [[RepackagedAndroidViewViewDebug_IntToString alloc] initWithFrom:119 withTo:@"FILL"] } count:14 type:NSObject_class_()] withPrefix:@"" withResolveId:false] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithRepackagedAndroidContentContext:withRepackagedAndroidUtilAttributeSet:", "LayoutParams", NULL, 0x1, NULL, NULL },
    { "initWithInt:withInt:", "LayoutParams", NULL, 0x1, NULL, NULL },
    { "initWithInt:withInt:withFloat:", "LayoutParams", NULL, 0x1, NULL, NULL },
    { "initWithRepackagedAndroidViewViewGroup_LayoutParams:", "LayoutParams", NULL, 0x1, NULL, NULL },
    { "initWithRepackagedAndroidViewViewGroup_MarginLayoutParams:", "LayoutParams", NULL, 0x1, NULL, NULL },
    { "initWithRepackagedAndroidWidgetLinearLayout_LayoutParams:", "LayoutParams", NULL, 0x1, NULL, NULL },
    { "debugWithNSString:", "debug", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "encodePropertiesWithRepackagedAndroidViewViewHierarchyEncoder:", "encodeProperties", "V", 0x4, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "weight_", NULL, 0x1, "F", NULL, NULL,  },
    { "gravity_", NULL, 0x1, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _RepackagedAndroidWidgetLinearLayout_LayoutParams = { 2, "LayoutParams", "repackaged.android.widget", "LinearLayout", 0x9, 8, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_RepackagedAndroidWidgetLinearLayout_LayoutParams;
}

@end


#line 1911
void RepackagedAndroidWidgetLinearLayout_LayoutParams_initWithRepackagedAndroidContentContext_withRepackagedAndroidUtilAttributeSet_(RepackagedAndroidWidgetLinearLayout_LayoutParams *self, id<RepackagedAndroidContentContext> c, id<RepackagedAndroidUtilAttributeSet> attrs) {
  (void) RepackagedAndroidViewViewGroup_MarginLayoutParams_initWithRepackagedAndroidContentContext_withRepackagedAndroidUtilAttributeSet_(self, c, attrs);
  self->gravity_ =
#line 1906
  -1;
  
#line 1913
  id<RepackagedAndroidContentResTypedArray> a =
#line 1914
  [((id<RepackagedAndroidContentContext>) nil_chk(c)) obtainStyledAttributesWithRepackagedAndroidUtilAttributeSet:attrs withIntArray:RepackagedComAndroidInternalR_styleable_get_LinearLayout_Layout_()];
  
#line 1916
  self->weight_ = [((id<RepackagedAndroidContentResTypedArray>) nil_chk(a)) getFloatWithInt:RepackagedComAndroidInternalR_styleable_LinearLayout_Layout_layout_weight withFloat:0];
  self->gravity_ = [a getIntWithInt:RepackagedComAndroidInternalR_styleable_LinearLayout_Layout_layout_gravity withInt:-1];
  
#line 1919
  [a recycle];
}


#line 1911
RepackagedAndroidWidgetLinearLayout_LayoutParams *new_RepackagedAndroidWidgetLinearLayout_LayoutParams_initWithRepackagedAndroidContentContext_withRepackagedAndroidUtilAttributeSet_(id<RepackagedAndroidContentContext> c, id<RepackagedAndroidUtilAttributeSet> attrs) {
  RepackagedAndroidWidgetLinearLayout_LayoutParams *self = [RepackagedAndroidWidgetLinearLayout_LayoutParams alloc];
  RepackagedAndroidWidgetLinearLayout_LayoutParams_initWithRepackagedAndroidContentContext_withRepackagedAndroidUtilAttributeSet_(self, c, attrs);
  return self;
}


#line 1925
void RepackagedAndroidWidgetLinearLayout_LayoutParams_initWithInt_withInt_(RepackagedAndroidWidgetLinearLayout_LayoutParams *self, jint width, jint height) {
  (void) RepackagedAndroidViewViewGroup_MarginLayoutParams_initWithInt_withInt_(self, width, height);
  self->gravity_ =
#line 1906
  -1;
  
#line 1927
  self->weight_ = 0;
}


#line 1925
RepackagedAndroidWidgetLinearLayout_LayoutParams *new_RepackagedAndroidWidgetLinearLayout_LayoutParams_initWithInt_withInt_(jint width, jint height) {
  RepackagedAndroidWidgetLinearLayout_LayoutParams *self = [RepackagedAndroidWidgetLinearLayout_LayoutParams alloc];
  RepackagedAndroidWidgetLinearLayout_LayoutParams_initWithInt_withInt_(self, width, height);
  return self;
}


#line 1940
void RepackagedAndroidWidgetLinearLayout_LayoutParams_initWithInt_withInt_withFloat_(RepackagedAndroidWidgetLinearLayout_LayoutParams *self, jint width, jint height, jfloat weight) {
  (void) RepackagedAndroidViewViewGroup_MarginLayoutParams_initWithInt_withInt_(self, width, height);
  self->gravity_ =
#line 1906
  -1;
  
#line 1942
  self->weight_ = weight;
}


#line 1940
RepackagedAndroidWidgetLinearLayout_LayoutParams *new_RepackagedAndroidWidgetLinearLayout_LayoutParams_initWithInt_withInt_withFloat_(jint width, jint height, jfloat weight) {
  RepackagedAndroidWidgetLinearLayout_LayoutParams *self = [RepackagedAndroidWidgetLinearLayout_LayoutParams alloc];
  RepackagedAndroidWidgetLinearLayout_LayoutParams_initWithInt_withInt_withFloat_(self, width, height, weight);
  return self;
}


#line 1948
void RepackagedAndroidWidgetLinearLayout_LayoutParams_initWithRepackagedAndroidViewViewGroup_LayoutParams_(RepackagedAndroidWidgetLinearLayout_LayoutParams *self, RepackagedAndroidViewViewGroup_LayoutParams *p) {
  (void) RepackagedAndroidViewViewGroup_MarginLayoutParams_initWithRepackagedAndroidViewViewGroup_LayoutParams_(self, p);
  self->gravity_ =
#line 1906
  -1;
}


#line 1948
RepackagedAndroidWidgetLinearLayout_LayoutParams *new_RepackagedAndroidWidgetLinearLayout_LayoutParams_initWithRepackagedAndroidViewViewGroup_LayoutParams_(RepackagedAndroidViewViewGroup_LayoutParams *p) {
  RepackagedAndroidWidgetLinearLayout_LayoutParams *self = [RepackagedAndroidWidgetLinearLayout_LayoutParams alloc];
  RepackagedAndroidWidgetLinearLayout_LayoutParams_initWithRepackagedAndroidViewViewGroup_LayoutParams_(self, p);
  return self;
}


#line 1955
void RepackagedAndroidWidgetLinearLayout_LayoutParams_initWithRepackagedAndroidViewViewGroup_MarginLayoutParams_(RepackagedAndroidWidgetLinearLayout_LayoutParams *self, RepackagedAndroidViewViewGroup_MarginLayoutParams *source) {
  (void) RepackagedAndroidViewViewGroup_MarginLayoutParams_initWithRepackagedAndroidViewViewGroup_MarginLayoutParams_(self, source);
  self->gravity_ =
#line 1906
  -1;
}


#line 1955
RepackagedAndroidWidgetLinearLayout_LayoutParams *new_RepackagedAndroidWidgetLinearLayout_LayoutParams_initWithRepackagedAndroidViewViewGroup_MarginLayoutParams_(RepackagedAndroidViewViewGroup_MarginLayoutParams *source) {
  RepackagedAndroidWidgetLinearLayout_LayoutParams *self = [RepackagedAndroidWidgetLinearLayout_LayoutParams alloc];
  RepackagedAndroidWidgetLinearLayout_LayoutParams_initWithRepackagedAndroidViewViewGroup_MarginLayoutParams_(self, source);
  return self;
}


#line 1965
void RepackagedAndroidWidgetLinearLayout_LayoutParams_initWithRepackagedAndroidWidgetLinearLayout_LayoutParams_(RepackagedAndroidWidgetLinearLayout_LayoutParams *self, RepackagedAndroidWidgetLinearLayout_LayoutParams *source) {
  (void) RepackagedAndroidViewViewGroup_MarginLayoutParams_initWithRepackagedAndroidViewViewGroup_MarginLayoutParams_(self, source);
  self->gravity_ =
#line 1906
  -1;
  
#line 1968
  self->weight_ = ((RepackagedAndroidWidgetLinearLayout_LayoutParams *) nil_chk(source))->weight_;
  self->gravity_ = source->gravity_;
}


#line 1965
RepackagedAndroidWidgetLinearLayout_LayoutParams *new_RepackagedAndroidWidgetLinearLayout_LayoutParams_initWithRepackagedAndroidWidgetLinearLayout_LayoutParams_(RepackagedAndroidWidgetLinearLayout_LayoutParams *source) {
  RepackagedAndroidWidgetLinearLayout_LayoutParams *self = [RepackagedAndroidWidgetLinearLayout_LayoutParams alloc];
  RepackagedAndroidWidgetLinearLayout_LayoutParams_initWithRepackagedAndroidWidgetLinearLayout_LayoutParams_(self, source);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RepackagedAndroidWidgetLinearLayout_LayoutParams)
