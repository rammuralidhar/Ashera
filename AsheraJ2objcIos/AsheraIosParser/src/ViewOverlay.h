//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/androidlayouts/repackaged/android/view/ViewOverlay.java
//

#ifndef _RepackagedAndroidViewViewOverlay_H_
#define _RepackagedAndroidViewViewOverlay_H_

#include "J2ObjC_header.h"
#include "ViewGroup.h"

@class IOSIntArray;
@class JavaUtilArrayList;
@class RepackagedAndroidGraphicsCanvas;
@class RepackagedAndroidGraphicsDrawableDrawable;
@class RepackagedAndroidGraphicsRect;
@class RepackagedAndroidViewView;
@class RepackagedAndroidViewViewOverlay_OverlayViewGroup;
@protocol RepackagedAndroidContentContext;
@protocol RepackagedAndroidViewViewParent;

/**
 @brief An overlay is an extra layer that sits on top of a View (the "host view") which is drawn after all other content in that view (including children, if the view is a ViewGroup).
 Interaction with the overlay layer is done by adding and removing drawables. <p>An overlay requested from a ViewGroup is of type ViewGroupOverlay , which also supports adding and removing views.</p>
 */
@interface RepackagedAndroidViewViewOverlay : NSObject {
 @public
  /**
   @brief The actual container for the drawables (and views, if it's a ViewGroupOverlay).
   All of the management and rendering details for the overlay are handled in OverlayViewGroup.
   */
  RepackagedAndroidViewViewOverlay_OverlayViewGroup *mOverlayViewGroup_;
}

#pragma mark Public

/**
 @brief Adds a Drawable to the overlay.
 The bounds of the drawable should be relative to the host view. Any drawable added to the overlay should be removed when it is no longer needed or no longer visible.
 @param drawable The Drawable to be added to the overlay. This drawable will be drawn when the view redraws its overlay.
 */
- (void)addWithRepackagedAndroidGraphicsDrawableDrawable:(RepackagedAndroidGraphicsDrawableDrawable *)drawable;

/**
 @brief Removes all content from the overlay.
 */
- (void)clear;

/**
 @brief Removes the specified Drawable from the overlay.
 @param drawable The Drawable to be removed from the overlay.
 */
- (void)removeWithRepackagedAndroidGraphicsDrawableDrawable:(RepackagedAndroidGraphicsDrawableDrawable *)drawable;

#pragma mark Package-Private

- (instancetype)initWithRepackagedAndroidContentContext:(id<RepackagedAndroidContentContext>)context
                          withRepackagedAndroidViewView:(RepackagedAndroidViewView *)hostView;

/**
 @brief Used internally by View and ViewGroup to handle drawing and invalidation of the overlay
 @return 
 */
- (RepackagedAndroidViewViewGroup *)getOverlayView;

- (jboolean)isEmpty;

@end

J2OBJC_EMPTY_STATIC_INIT(RepackagedAndroidViewViewOverlay)

J2OBJC_FIELD_SETTER(RepackagedAndroidViewViewOverlay, mOverlayViewGroup_, RepackagedAndroidViewViewOverlay_OverlayViewGroup *)

FOUNDATION_EXPORT void RepackagedAndroidViewViewOverlay_initWithRepackagedAndroidContentContext_withRepackagedAndroidViewView_(RepackagedAndroidViewViewOverlay *self, id<RepackagedAndroidContentContext> context, RepackagedAndroidViewView *hostView);

FOUNDATION_EXPORT RepackagedAndroidViewViewOverlay *new_RepackagedAndroidViewViewOverlay_initWithRepackagedAndroidContentContext_withRepackagedAndroidViewView_(id<RepackagedAndroidContentContext> context, RepackagedAndroidViewView *hostView) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(RepackagedAndroidViewViewOverlay)

/**
 @brief OverlayViewGroup is a container that View and ViewGroup use to host drawables and views added to their overlays  ( ViewOverlay and ViewGroupOverlay , respectively).
 Drawables are added to the overlay via the add/remove methods in ViewOverlay, Views are added/removed via ViewGroupOverlay. These drawable and view objects are drawn whenever the view itself is drawn; first the view draws its own content (and children, if it is a ViewGroup), then it draws its overlay (if it has one). <p>Besides managing and drawing the list of drawables, this class serves two purposes: (1) it noops layout calls because children are absolutely positioned and (2) it forwards all invalidation calls to its host view. The invalidation redirect is necessary because the overlay is not a child of the host view and invalidation cannot therefore follow the normal path up through the parent hierarchy.</p>
 */
@interface RepackagedAndroidViewViewOverlay_OverlayViewGroup : RepackagedAndroidViewViewGroup {
 @public
  /**
   @brief The View for which this is an overlay.
   Invalidations of the overlay are redirected to this host view.
   */
  RepackagedAndroidViewView *mHostView_;
  /**
   @brief The set of drawables to draw when the overlay is rendered.
   */
  JavaUtilArrayList *mDrawables_;
}

#pragma mark Public

- (void)addWithRepackagedAndroidGraphicsDrawableDrawable:(RepackagedAndroidGraphicsDrawableDrawable *)drawable;

- (void)addWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)child;

- (void)clear;

/**
 */
- (void)damageChildWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)child
               withRepackagedAndroidGraphicsRect:(RepackagedAndroidGraphicsRect *)dirty;

- (void)invalidate;

- (void)invalidateWithInt:(jint)l
                  withInt:(jint)t
                  withInt:(jint)r
                  withInt:(jint)b;

- (void)invalidateWithRepackagedAndroidGraphicsRect:(RepackagedAndroidGraphicsRect *)dirty;

- (id<RepackagedAndroidViewViewParent>)invalidateChildInParentWithIntArray:(IOSIntArray *)location
                                         withRepackagedAndroidGraphicsRect:(RepackagedAndroidGraphicsRect *)dirty;

- (void)invalidateDrawableWithRepackagedAndroidGraphicsDrawableDrawable:(RepackagedAndroidGraphicsDrawableDrawable *)drawable;

- (void)removeWithRepackagedAndroidGraphicsDrawableDrawable:(RepackagedAndroidGraphicsDrawableDrawable *)drawable;

- (void)removeWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)view;

#pragma mark Protected

/**
 */
- (id<RepackagedAndroidViewViewParent>)damageChildInParentWithInt:(jint)left
                                                          withInt:(jint)top
                                withRepackagedAndroidGraphicsRect:(RepackagedAndroidGraphicsRect *)dirty;

- (void)dispatchDrawWithRepackagedAndroidGraphicsCanvas:(RepackagedAndroidGraphicsCanvas *)canvas;

- (void)invalidateParentCaches;

- (void)invalidateParentIfNeeded;

- (void)onLayoutWithBoolean:(jboolean)changed
                    withInt:(jint)l
                    withInt:(jint)t
                    withInt:(jint)r
                    withInt:(jint)b;

- (jboolean)verifyDrawableWithRepackagedAndroidGraphicsDrawableDrawable:(RepackagedAndroidGraphicsDrawableDrawable *)who;

#pragma mark Package-Private

- (instancetype)initWithRepackagedAndroidContentContext:(id<RepackagedAndroidContentContext>)context
                          withRepackagedAndroidViewView:(RepackagedAndroidViewView *)hostView;

- (void)invalidateWithBoolean:(jboolean)invalidateCache;

- (void)invalidateViewPropertyWithBoolean:(jboolean)invalidateParent
                              withBoolean:(jboolean)forceRedraw;

- (jboolean)isEmpty;

@end

J2OBJC_EMPTY_STATIC_INIT(RepackagedAndroidViewViewOverlay_OverlayViewGroup)

J2OBJC_FIELD_SETTER(RepackagedAndroidViewViewOverlay_OverlayViewGroup, mHostView_, RepackagedAndroidViewView *)
J2OBJC_FIELD_SETTER(RepackagedAndroidViewViewOverlay_OverlayViewGroup, mDrawables_, JavaUtilArrayList *)

FOUNDATION_EXPORT void RepackagedAndroidViewViewOverlay_OverlayViewGroup_initWithRepackagedAndroidContentContext_withRepackagedAndroidViewView_(RepackagedAndroidViewViewOverlay_OverlayViewGroup *self, id<RepackagedAndroidContentContext> context, RepackagedAndroidViewView *hostView);

FOUNDATION_EXPORT RepackagedAndroidViewViewOverlay_OverlayViewGroup *new_RepackagedAndroidViewViewOverlay_OverlayViewGroup_initWithRepackagedAndroidContentContext_withRepackagedAndroidViewView_(id<RepackagedAndroidContentContext> context, RepackagedAndroidViewView *hostView) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(RepackagedAndroidViewViewOverlay_OverlayViewGroup)

#endif // _RepackagedAndroidViewViewOverlay_H_
