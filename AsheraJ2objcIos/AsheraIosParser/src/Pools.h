//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/androidlayouts/repackaged/android/util/Pools.java
//

#ifndef _RepackagedAndroidUtilPools_H_
#define _RepackagedAndroidUtilPools_H_

#include "J2ObjC_header.h"

/**
 @brief Helper class for crating pools of objects.
 An example use looks like this: <pre> public class MyPooledClass { private static final SynchronizedPool<MyPooledClass> sPool = new SynchronizedPool<MyPooledClass>(10); public static MyPooledClass obtain() { MyPooledClass instance = sPool.acquire(); return (instance != null) ? instance : new MyPooledClass(); } public void recycle() { // Clear state if needed. sPool.release(this); } . . . } </pre>
 */
@interface RepackagedAndroidUtilPools : NSObject

@end

J2OBJC_EMPTY_STATIC_INIT(RepackagedAndroidUtilPools)

J2OBJC_TYPE_LITERAL_HEADER(RepackagedAndroidUtilPools)

/**
 @brief Interface for managing a pool of objects.
 @param < T > The pooled type.
 */
@protocol RepackagedAndroidUtilPools_Pool < NSObject, JavaObject >

/**
 @return An instance from the pool if such, null otherwise.
 */
- (id)acquire;

/**
 @brief Release an instance to the pool.
 @param instance The instance to release.
 @return Whether the instance was put in the pool.
 @throws IllegalStateException If the instance is already in the pool.
 */
- (jboolean)release__WithId:(id)instance;

@end

J2OBJC_EMPTY_STATIC_INIT(RepackagedAndroidUtilPools_Pool)

J2OBJC_TYPE_LITERAL_HEADER(RepackagedAndroidUtilPools_Pool)

/**
 @brief Simple (non-synchronized) pool of objects.
 @param < T > The pooled type.
 */
@interface RepackagedAndroidUtilPools_SimplePool : NSObject < RepackagedAndroidUtilPools_Pool >

#pragma mark Public

/**
 @brief Creates a new instance.
 @param maxPoolSize The max pool size.
 @throws IllegalArgumentException If the max pool size is less than zero.
 */
- (instancetype)initWithInt:(jint)maxPoolSize;

- (id)acquire;

- (jboolean)release__WithId:(id)instance;

@end

J2OBJC_EMPTY_STATIC_INIT(RepackagedAndroidUtilPools_SimplePool)

FOUNDATION_EXPORT void RepackagedAndroidUtilPools_SimplePool_initWithInt_(RepackagedAndroidUtilPools_SimplePool *self, jint maxPoolSize);

FOUNDATION_EXPORT RepackagedAndroidUtilPools_SimplePool *new_RepackagedAndroidUtilPools_SimplePool_initWithInt_(jint maxPoolSize) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(RepackagedAndroidUtilPools_SimplePool)

/**
 @brief Synchronized) pool of objects.
 @param < T > The pooled type.
 */
@interface RepackagedAndroidUtilPools_SynchronizedPool : RepackagedAndroidUtilPools_SimplePool

#pragma mark Public

/**
 @brief Creates a new instance.
 @param maxPoolSize The max pool size.
 @throws IllegalArgumentException If the max pool size is less than zero.
 */
- (instancetype)initWithInt:(jint)maxPoolSize;

- (id)acquire;

- (jboolean)release__WithId:(id)element;

@end

J2OBJC_EMPTY_STATIC_INIT(RepackagedAndroidUtilPools_SynchronizedPool)

FOUNDATION_EXPORT void RepackagedAndroidUtilPools_SynchronizedPool_initWithInt_(RepackagedAndroidUtilPools_SynchronizedPool *self, jint maxPoolSize);

FOUNDATION_EXPORT RepackagedAndroidUtilPools_SynchronizedPool *new_RepackagedAndroidUtilPools_SynchronizedPool_initWithInt_(jint maxPoolSize) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(RepackagedAndroidUtilPools_SynchronizedPool)

#endif // _RepackagedAndroidUtilPools_H_
