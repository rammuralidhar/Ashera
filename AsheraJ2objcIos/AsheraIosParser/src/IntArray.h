//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/androidlayouts/repackaged/android/util/IntArray.java
//

#ifndef _RepackagedAndroidUtilIntArray_H_
#define _RepackagedAndroidUtilIntArray_H_

#include "J2ObjC_header.h"

@class IOSIntArray;

/**
 @brief Implements a growing array of int primitives.
 */
@interface RepackagedAndroidUtilIntArray : NSObject < NSCopying >

#pragma mark Public

/**
 @brief Creates an empty IntArray with the default initial capacity.
 */
- (instancetype)init;

/**
 @brief Creates an empty IntArray with the specified initial capacity.
 */
- (instancetype)initWithInt:(jint)initialCapacity;

/**
 @brief Appends the specified value to the end of this array.
 */
- (void)addWithInt:(jint)value;

/**
 @brief Inserts a value at the specified position in this array.
 @throws IndexOutOfBoundsException when index &lt; 0 || index &gt; size()
 */
- (void)addWithInt:(jint)index
           withInt:(jint)value;

/**
 @brief Adds the values in the specified array to this array.
 */
- (void)addAllWithRepackagedAndroidUtilIntArray:(RepackagedAndroidUtilIntArray *)values;

/**
 @brief Searches the array for the specified value using the binary search algorithm.
 The array must be sorted (as by the Arrays#sort(int[],int,int) method) prior to making this call. If it is not sorted, the results are undefined. If the range contains multiple elements with the specified value, there is no guarantee which one will be found.
 @param value The value to search for.
 @return index of the search key, if it is contained in the array; otherwise, <i>(-(insertion point) - 1)</i>. The insertion point is defined as the point at which the key would be inserted into the array: the index of the first element greater than the key, or #size() if all elements in the array are less than the specified key. Note that this guarantees that the return value will be >= 0 if and only if the key is found.
 */
- (jint)binarySearchWithInt:(jint)value;

/**
 @brief Removes all values from this array.
 */
- (void)clear;

- (RepackagedAndroidUtilIntArray *)clone;

/**
 @brief Returns the value at the specified position in this array.
 */
- (jint)getWithInt:(jint)index;

/**
 @brief Returns the index of the first occurrence of the specified value in this array, or -1 if this array does not contain the value.
 */
- (jint)indexOfWithInt:(jint)value;

/**
 @brief Removes the value at the specified index from this array.
 */
- (void)removeWithInt:(jint)index;

/**
 @brief Returns the number of values in this array.
 */
- (jint)size;

/**
 @brief Returns a new array with the contents of this IntArray.
 */
- (IOSIntArray *)toArray;

@end

J2OBJC_EMPTY_STATIC_INIT(RepackagedAndroidUtilIntArray)

FOUNDATION_EXPORT void RepackagedAndroidUtilIntArray_init(RepackagedAndroidUtilIntArray *self);

FOUNDATION_EXPORT RepackagedAndroidUtilIntArray *new_RepackagedAndroidUtilIntArray_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void RepackagedAndroidUtilIntArray_initWithInt_(RepackagedAndroidUtilIntArray *self, jint initialCapacity);

FOUNDATION_EXPORT RepackagedAndroidUtilIntArray *new_RepackagedAndroidUtilIntArray_initWithInt_(jint initialCapacity) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(RepackagedAndroidUtilIntArray)

#endif // _RepackagedAndroidUtilIntArray_H_
