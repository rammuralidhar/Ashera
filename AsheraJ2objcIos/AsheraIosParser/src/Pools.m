//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/androidlayouts/repackaged/android/util/Pools.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "Pools.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"

#line 0 "/Users/ramm/git/Ashera/AsheraAndroidParser/androidlayouts/repackaged/android/util/Pools.java"

@interface RepackagedAndroidUtilPools ()

- (instancetype)init;

@end

__attribute__((unused)) static void RepackagedAndroidUtilPools_init(RepackagedAndroidUtilPools *self);

__attribute__((unused)) static RepackagedAndroidUtilPools *new_RepackagedAndroidUtilPools_init() NS_RETURNS_RETAINED;

@interface RepackagedAndroidUtilPools_Pool : NSObject
@end

@interface RepackagedAndroidUtilPools_SimplePool () {
 @public
  IOSObjectArray *mPool_;
  jint mPoolSize_;
}

- (jboolean)isInPoolWithId:(id)instance;

@end

J2OBJC_FIELD_SETTER(RepackagedAndroidUtilPools_SimplePool, mPool_, IOSObjectArray *)

__attribute__((unused)) static jboolean RepackagedAndroidUtilPools_SimplePool_isInPoolWithId_(RepackagedAndroidUtilPools_SimplePool *self, id instance);

@interface RepackagedAndroidUtilPools_SynchronizedPool () {
 @public
  id mLock_;
}

@end

J2OBJC_FIELD_SETTER(RepackagedAndroidUtilPools_SynchronizedPool, mLock_, id)


#line 43
@implementation RepackagedAndroidUtilPools


#line 68
- (instancetype)init {
  RepackagedAndroidUtilPools_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "Pools", NULL, 0x2, NULL, NULL },
  };
  static const char *inner_classes[] = {"Lrepackaged.android.util.Pools$Pool;", "Lrepackaged.android.util.Pools$SimplePool;", "Lrepackaged.android.util.Pools$SynchronizedPool;"};
  static const J2ObjcClassInfo _RepackagedAndroidUtilPools = { 2, "Pools", "repackaged.android.util", NULL, 0x11, 1, methods, 0, NULL, 0, NULL, 3, inner_classes, NULL, NULL };
  return &_RepackagedAndroidUtilPools;
}

@end


#line 68
void RepackagedAndroidUtilPools_init(RepackagedAndroidUtilPools *self) {
  (void) NSObject_init(self);
}


#line 68
RepackagedAndroidUtilPools *new_RepackagedAndroidUtilPools_init() {
  RepackagedAndroidUtilPools *self = [RepackagedAndroidUtilPools alloc];
  RepackagedAndroidUtilPools_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RepackagedAndroidUtilPools)


#line 50
@implementation RepackagedAndroidUtilPools_Pool

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "acquire", NULL, "TT;", 0x401, NULL, "()TT;" },
    { "release__WithId:", "release", "Z", 0x401, NULL, "(TT;)Z" },
  };
  static const J2ObjcClassInfo _RepackagedAndroidUtilPools_Pool = { 2, "Pool", "repackaged.android.util", "Pools", 0x609, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, "<T:Ljava/lang/Object;>Ljava/lang/Object;" };
  return &_RepackagedAndroidUtilPools_Pool;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(RepackagedAndroidUtilPools_Pool)


#line 77
@implementation RepackagedAndroidUtilPools_SimplePool


#line 89
- (instancetype)initWithInt:(jint)maxPoolSize {
  RepackagedAndroidUtilPools_SimplePool_initWithInt_(self, maxPoolSize);
  return self;
}


#line 98
- (id)acquire {
  if (mPoolSize_ > 0) {
    jint lastPooledIndex = mPoolSize_ - 1;
    id instance = (id) IOSObjectArray_Get(nil_chk(mPool_), lastPooledIndex);
    (void) IOSObjectArray_Set(mPool_, lastPooledIndex, nil);
    mPoolSize_--;
    return instance;
  }
  return nil;
}


#line 110
- (jboolean)release__WithId:(id)instance {
  if (RepackagedAndroidUtilPools_SimplePool_isInPoolWithId_(self, instance)) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"Already in the pool!");
  }
  if (mPoolSize_ < ((IOSObjectArray *) nil_chk(mPool_))->size_) {
    (void) IOSObjectArray_Set(mPool_, mPoolSize_, instance);
    mPoolSize_++;
    return YES;
  }
  return NO;
}

- (jboolean)isInPoolWithId:(id)instance {
  return RepackagedAndroidUtilPools_SimplePool_isInPoolWithId_(self, instance);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithInt:", "SimplePool", NULL, 0x1, NULL, NULL },
    { "acquire", NULL, "TT;", 0x1, NULL, "()TT;" },
    { "release__WithId:", "release", "Z", 0x1, NULL, "(TT;)Z" },
    { "isInPoolWithId:", "isInPool", "Z", 0x2, NULL, "(TT;)Z" },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "mPool_", NULL, 0x12, "[Ljava.lang.Object;", NULL, NULL,  },
    { "mPoolSize_", NULL, 0x2, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _RepackagedAndroidUtilPools_SimplePool = { 2, "SimplePool", "repackaged.android.util", "Pools", 0x9, 4, methods, 2, fields, 0, NULL, 0, NULL, NULL, "<T:Ljava/lang/Object;>Ljava/lang/Object;Lrepackaged/android/util/Pools$Pool<TT;>;" };
  return &_RepackagedAndroidUtilPools_SimplePool;
}

@end


#line 89
void RepackagedAndroidUtilPools_SimplePool_initWithInt_(RepackagedAndroidUtilPools_SimplePool *self, jint maxPoolSize) {
  (void) NSObject_init(self);
  
#line 90
  if (maxPoolSize <= 0) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"The max pool size must be > 0");
  }
  self->mPool_ = [IOSObjectArray newArrayWithLength:maxPoolSize type:NSObject_class_()];
}


#line 89
RepackagedAndroidUtilPools_SimplePool *new_RepackagedAndroidUtilPools_SimplePool_initWithInt_(jint maxPoolSize) {
  RepackagedAndroidUtilPools_SimplePool *self = [RepackagedAndroidUtilPools_SimplePool alloc];
  RepackagedAndroidUtilPools_SimplePool_initWithInt_(self, maxPoolSize);
  return self;
}


#line 122
jboolean RepackagedAndroidUtilPools_SimplePool_isInPoolWithId_(RepackagedAndroidUtilPools_SimplePool *self, id instance) {
  for (jint i = 0; i < self->mPoolSize_; i++) {
    if (IOSObjectArray_Get(nil_chk(self->mPool_), i) == instance) {
      return YES;
    }
  }
  return NO;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RepackagedAndroidUtilPools_SimplePool)


#line 137
@implementation RepackagedAndroidUtilPools_SynchronizedPool


#line 147
- (instancetype)initWithInt:(jint)maxPoolSize {
  RepackagedAndroidUtilPools_SynchronizedPool_initWithInt_(self, maxPoolSize);
  return self;
}

- (id)acquire {
  @synchronized(mLock_) {
    return [super acquire];
  }
}


#line 159
- (jboolean)release__WithId:(id)element {
  @synchronized(mLock_) {
    return [super release__WithId:element];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithInt:", "SynchronizedPool", NULL, 0x1, NULL, NULL },
    { "acquire", NULL, "TT;", 0x1, NULL, "()TT;" },
    { "release__WithId:", "release", "Z", 0x1, NULL, "(TT;)Z" },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "mLock_", NULL, 0x12, "Ljava.lang.Object;", NULL, NULL,  },
  };
  static const char *superclass_type_args[] = {"TT;"};
  static const J2ObjcClassInfo _RepackagedAndroidUtilPools_SynchronizedPool = { 2, "SynchronizedPool", "repackaged.android.util", "Pools", 0x9, 3, methods, 1, fields, 1, superclass_type_args, 0, NULL, NULL, "<T:Ljava/lang/Object;>Lrepackaged/android/util/Pools$SimplePool<TT;>;" };
  return &_RepackagedAndroidUtilPools_SynchronizedPool;
}

@end


#line 147
void RepackagedAndroidUtilPools_SynchronizedPool_initWithInt_(RepackagedAndroidUtilPools_SynchronizedPool *self, jint maxPoolSize) {
  (void) RepackagedAndroidUtilPools_SimplePool_initWithInt_(self, maxPoolSize);
  self->mLock_ = new_NSObject_init();
}


#line 147
RepackagedAndroidUtilPools_SynchronizedPool *new_RepackagedAndroidUtilPools_SynchronizedPool_initWithInt_(jint maxPoolSize) {
  RepackagedAndroidUtilPools_SynchronizedPool *self = [RepackagedAndroidUtilPools_SynchronizedPool alloc];
  RepackagedAndroidUtilPools_SynchronizedPool_initWithInt_(self, maxPoolSize);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RepackagedAndroidUtilPools_SynchronizedPool)
