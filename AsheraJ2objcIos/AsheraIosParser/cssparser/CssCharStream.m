//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/cssparser/com/steadystate/css/parser/CssCharStream.java
//


#include "CssCharStream.h"
#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "java/lang/Deprecated.h"
#include "java/lang/Error.h"
#include "java/lang/System.h"
#include "java/lang/Throwable.h"

#line 0 "/Users/ramm/git/Ashera/AsheraAndroidParser/cssparser/com/steadystate/css/parser/CssCharStream.java"

#define ComSteadystateCssParserCssCharStream_BUFFER_SIZE 2048

@interface ComSteadystateCssParserCssCharStream () {
 @public
  IOSIntArray *bufline_;
  IOSIntArray *bufcolumn_;
  jint column_;
  jint line_;
  jboolean prevCharIsCR_;
  jboolean prevCharIsLF_;
  JavaIoReader *inputStream_;
  IOSCharArray *buffer_;
  jint maxNextCharInd_;
  jint inBuf_;
}

- (void)ExpandBuffWithBoolean:(jboolean)wrapAround;

- (void)FillBuff;

- (void)UpdateLineColumnWithChar:(jchar)c;

@end

J2OBJC_FIELD_SETTER(ComSteadystateCssParserCssCharStream, bufline_, IOSIntArray *)
J2OBJC_FIELD_SETTER(ComSteadystateCssParserCssCharStream, bufcolumn_, IOSIntArray *)
J2OBJC_FIELD_SETTER(ComSteadystateCssParserCssCharStream, inputStream_, JavaIoReader *)
J2OBJC_FIELD_SETTER(ComSteadystateCssParserCssCharStream, buffer_, IOSCharArray *)

J2OBJC_STATIC_FIELD_GETTER(ComSteadystateCssParserCssCharStream, BUFFER_SIZE, jint)

__attribute__((unused)) static void ComSteadystateCssParserCssCharStream_ExpandBuffWithBoolean_(ComSteadystateCssParserCssCharStream *self, jboolean wrapAround);

__attribute__((unused)) static void ComSteadystateCssParserCssCharStream_FillBuff(ComSteadystateCssParserCssCharStream *self);

__attribute__((unused)) static void ComSteadystateCssParserCssCharStream_UpdateLineColumnWithChar_(ComSteadystateCssParserCssCharStream *self, jchar c);

__attribute__((unused)) static jchar ComSteadystateCssParserCssCharStream_readChar(ComSteadystateCssParserCssCharStream *self);

__attribute__((unused)) static void ComSteadystateCssParserCssCharStream_backupWithInt_(ComSteadystateCssParserCssCharStream *self, jint amount);


#line 12
@implementation ComSteadystateCssParserCssCharStream


#line 39
- (void)ExpandBuffWithBoolean:(jboolean)wrapAround {
  ComSteadystateCssParserCssCharStream_ExpandBuffWithBoolean_(self, wrapAround);
}


#line 87
- (void)FillBuff {
  ComSteadystateCssParserCssCharStream_FillBuff(self);
}


#line 132
- (jchar)BeginToken {
  
#line 134
  tokenBegin_ = -1;
  jchar c = ComSteadystateCssParserCssCharStream_readChar(self);
  tokenBegin_ = bufpos_;
  
#line 138
  return c;
}


#line 141
- (void)UpdateLineColumnWithChar:(jchar)c {
  ComSteadystateCssParserCssCharStream_UpdateLineColumnWithChar_(self, c);
}


#line 182
- (jchar)readChar {
  return ComSteadystateCssParserCssCharStream_readChar(self);
}


#line 208
- (jint)getColumn {
  return IOSIntArray_Get(nil_chk(bufcolumn_), bufpos_);
}


#line 217
- (jint)getLine {
  return IOSIntArray_Get(nil_chk(bufline_), bufpos_);
}


#line 222
- (jint)getEndColumn {
  return IOSIntArray_Get(nil_chk(bufcolumn_), bufpos_);
}


#line 227
- (jint)getEndLine {
  return IOSIntArray_Get(nil_chk(bufline_), bufpos_);
}


#line 232
- (jint)getBeginColumn {
  return IOSIntArray_Get(nil_chk(bufcolumn_), tokenBegin_);
}


#line 237
- (jint)getBeginLine {
  return IOSIntArray_Get(nil_chk(bufline_), tokenBegin_);
}


#line 242
- (void)backupWithInt:(jint)amount {
  ComSteadystateCssParserCssCharStream_backupWithInt_(self, amount);
}


#line 249
- (instancetype)initWithJavaIoReader:(JavaIoReader *)dstream
                             withInt:(jint)startline
                             withInt:(jint)startcolumn
                             withInt:(jint)buffersize {
  ComSteadystateCssParserCssCharStream_initWithJavaIoReader_withInt_withInt_withInt_(self, dstream, startline, startcolumn, buffersize);
  return self;
}


#line 262
- (instancetype)initWithJavaIoReader:(JavaIoReader *)dstream
                             withInt:(jint)startline
                             withInt:(jint)startcolumn {
  ComSteadystateCssParserCssCharStream_initWithJavaIoReader_withInt_withInt_(self, dstream, startline, startcolumn);
  return self;
}

- (NSString *)GetImage {
  
#line 271
  if (bufpos_ >= tokenBegin_)
#line 272
  return [NSString stringWithCharacters:buffer_ offset:tokenBegin_ length:bufpos_ - tokenBegin_ + 1];
  return JreStrcat("$$", [NSString stringWithCharacters:buffer_ offset:tokenBegin_ length:bufsize_ - tokenBegin_], [NSString stringWithCharacters:buffer_ offset:0 length:bufpos_ + 1]);
}


#line 277
- (IOSCharArray *)GetSuffixWithInt:(jint)len {
  
#line 279
  IOSCharArray *ret = [IOSCharArray newArrayWithLength:len];
  
#line 281
  if ((bufpos_ + 1) >= len)
#line 282
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(buffer_, bufpos_ - len + 1, ret, 0, len);
  else {
    
#line 285
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(buffer_, bufsize_ - (len - bufpos_ - 1), ret, 0, len - bufpos_ - 1);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(buffer_, 0, ret, len - bufpos_ - 1, bufpos_ + 1);
  }
  
#line 289
  return ret;
}


#line 293
- (void)Done {
  
#line 295
  buffer_ = nil;
  bufline_ = nil;
  bufcolumn_ = nil;
}


#line 303
- (void)adjustBeginLineColumnWithInt:(jint)newLine
                             withInt:(jint)newCol {
  
#line 305
  jint start = tokenBegin_;
  jint len;
  
#line 308
  if (bufpos_ >= tokenBegin_) {
    
#line 310
    len = bufpos_ - tokenBegin_ + inBuf_ + 1;
  }
  else {
    
#line 314
    len = bufsize_ - tokenBegin_ + bufpos_ + 1 + inBuf_;
  }
  
#line 317
  jint i = 0, j = 0, k = 0;
  jint nextColDiff = 0, columnDiff = 0;
  
#line 320
  while (YES) {
    jint unseq$1 =
#line 320
    start;
    if (!(
#line 320
    i < len && IOSIntArray_Get(nil_chk(bufline_), j = unseq$1 % bufsize_) == IOSIntArray_Get(bufline_, k = ++start % bufsize_))) break;
    
#line 322
    *IOSIntArray_GetRef(nil_chk(bufline_), j) = newLine;
    nextColDiff = columnDiff + IOSIntArray_Get(nil_chk(bufcolumn_), k) - IOSIntArray_Get(bufcolumn_, j);
    *IOSIntArray_GetRef(bufcolumn_, j) = newCol + columnDiff;
    columnDiff = nextColDiff;
    i++;
  }
  
#line 329
  if (i < len) {
    
#line 331
    *IOSIntArray_GetRef(nil_chk(bufline_), j) = newLine++;
    *IOSIntArray_GetRef(nil_chk(bufcolumn_), j) = newCol + columnDiff;
    
#line 334
    while (i++ < len) {
      jint unseq$2 =
#line 336
      start;
      
#line 336
      if (IOSIntArray_Get(bufline_, j = unseq$2 % bufsize_) != IOSIntArray_Get(bufline_, ++start % bufsize_))
#line 337
      *IOSIntArray_GetRef(bufline_, j) = newLine++;
      else
#line 339
      *IOSIntArray_GetRef(bufline_, j) = newLine;
    }
  }
  
#line 343
  line_ = IOSIntArray_Get(nil_chk(bufline_), j);
  column_ = IOSIntArray_Get(nil_chk(bufcolumn_), j);
}

+ (IOSObjectArray *)__annotations_getColumn {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[JavaLangDeprecated alloc] init] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_getLine {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[JavaLangDeprecated alloc] init] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "ExpandBuffWithBoolean:", "ExpandBuff", "V", 0x2, NULL, NULL },
    { "FillBuff", NULL, "V", 0x12, "Ljava.io.IOException;", NULL },
    { "BeginToken", NULL, "C", 0x11, "Ljava.io.IOException;", NULL },
    { "UpdateLineColumnWithChar:", "UpdateLineColumn", "V", 0x12, NULL, NULL },
    { "readChar", NULL, "C", 0x11, "Ljava.io.IOException;", NULL },
    { "getColumn", NULL, "I", 0x11, NULL, NULL },
    { "getLine", NULL, "I", 0x11, NULL, NULL },
    { "getEndColumn", NULL, "I", 0x11, NULL, NULL },
    { "getEndLine", NULL, "I", 0x11, NULL, NULL },
    { "getBeginColumn", NULL, "I", 0x11, NULL, NULL },
    { "getBeginLine", NULL, "I", 0x11, NULL, NULL },
    { "backupWithInt:", "backup", "V", 0x11, NULL, NULL },
    { "initWithJavaIoReader:withInt:withInt:withInt:", "CssCharStream", NULL, 0x1, NULL, NULL },
    { "initWithJavaIoReader:withInt:withInt:", "CssCharStream", NULL, 0x1, NULL, NULL },
    { "GetImage", NULL, "Ljava.lang.String;", 0x11, NULL, NULL },
    { "GetSuffixWithInt:", "GetSuffix", "[C", 0x11, NULL, NULL },
    { "Done", NULL, "V", 0x1, NULL, NULL },
    { "adjustBeginLineColumnWithInt:withInt:", "adjustBeginLineColumn", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "staticFlag_", NULL, 0x19, "Z", NULL, NULL, .constantValue.asBOOL = ComSteadystateCssParserCssCharStream_staticFlag },
    { "BUFFER_SIZE_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = ComSteadystateCssParserCssCharStream_BUFFER_SIZE },
    { "bufsize_", NULL, 0x0, "I", NULL, NULL,  },
    { "available_", NULL, 0x0, "I", NULL, NULL,  },
    { "tokenBegin_", NULL, 0x0, "I", NULL, NULL,  },
    { "bufpos_", NULL, 0x1, "I", NULL, NULL,  },
    { "bufline_", NULL, 0x2, "[I", NULL, NULL,  },
    { "bufcolumn_", NULL, 0x2, "[I", NULL, NULL,  },
    { "column_", NULL, 0x2, "I", NULL, NULL,  },
    { "line_", NULL, 0x2, "I", NULL, NULL,  },
    { "prevCharIsCR_", NULL, 0x2, "Z", NULL, NULL,  },
    { "prevCharIsLF_", NULL, 0x2, "Z", NULL, NULL,  },
    { "inputStream_", NULL, 0x2, "Ljava.io.Reader;", NULL, NULL,  },
    { "buffer_", NULL, 0x2, "[C", NULL, NULL,  },
    { "maxNextCharInd_", NULL, 0x2, "I", NULL, NULL,  },
    { "inBuf_", NULL, 0x2, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _ComSteadystateCssParserCssCharStream = { 2, "CssCharStream", "com.steadystate.css.parser", NULL, 0x11, 18, methods, 16, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComSteadystateCssParserCssCharStream;
}

@end


#line 39
void ComSteadystateCssParserCssCharStream_ExpandBuffWithBoolean_(ComSteadystateCssParserCssCharStream *self, jboolean wrapAround) {
  
#line 41
  IOSCharArray *newbuffer = [IOSCharArray newArrayWithLength:self->bufsize_ + ComSteadystateCssParserCssCharStream_BUFFER_SIZE];
  IOSIntArray *newbufline = [IOSIntArray newArrayWithLength:self->bufsize_ + ComSteadystateCssParserCssCharStream_BUFFER_SIZE];
  IOSIntArray *newbufcolumn = [IOSIntArray newArrayWithLength:self->bufsize_ + ComSteadystateCssParserCssCharStream_BUFFER_SIZE];
  
#line 45
  @try {
    
#line 47
    if (wrapAround) {
      
#line 49
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->buffer_, self->tokenBegin_, newbuffer, 0, self->bufsize_ - self->tokenBegin_);
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->buffer_, 0, newbuffer, self->bufsize_ - self->tokenBegin_, self->bufpos_);
      self->buffer_ = newbuffer;
      
#line 53
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->bufline_, self->tokenBegin_, newbufline, 0, self->bufsize_ - self->tokenBegin_);
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->bufline_, 0, newbufline, self->bufsize_ - self->tokenBegin_, self->bufpos_);
      self->bufline_ = newbufline;
      
#line 57
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->bufcolumn_, self->tokenBegin_, newbufcolumn, 0, self->bufsize_ - self->tokenBegin_);
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->bufcolumn_, 0, newbufcolumn, self->bufsize_ - self->tokenBegin_, self->bufpos_);
      self->bufcolumn_ = newbufcolumn;
      
#line 61
      self->maxNextCharInd_ = (self->bufpos_ += (self->bufsize_ - self->tokenBegin_));
    }
    else {
      
#line 65
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->buffer_, self->tokenBegin_, newbuffer, 0, self->bufsize_ - self->tokenBegin_);
      self->buffer_ = newbuffer;
      
#line 68
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->bufline_, self->tokenBegin_, newbufline, 0, self->bufsize_ - self->tokenBegin_);
      self->bufline_ = newbufline;
      
#line 71
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->bufcolumn_, self->tokenBegin_, newbufcolumn, 0, self->bufsize_ - self->tokenBegin_);
      self->bufcolumn_ = newbufcolumn;
      
#line 74
      self->maxNextCharInd_ = (self->bufpos_ -= self->tokenBegin_);
    }
  }
  @catch (JavaLangThrowable *t) {
    
#line 79
    @throw new_JavaLangError_initWithNSString_([((JavaLangThrowable *) nil_chk(t)) getMessage]);
  }
  
#line 82
  self->bufsize_ += ComSteadystateCssParserCssCharStream_BUFFER_SIZE;
  self->available_ = self->bufsize_;
  self->tokenBegin_ = 0;
}


#line 87
void ComSteadystateCssParserCssCharStream_FillBuff(ComSteadystateCssParserCssCharStream *self) {
  
#line 89
  if (self->maxNextCharInd_ == self->available_) {
    
#line 91
    if (self->available_ == self->bufsize_) {
      
#line 93
      if (self->tokenBegin_ > ComSteadystateCssParserCssCharStream_BUFFER_SIZE) {
        
#line 95
        self->bufpos_ = self->maxNextCharInd_ = 0;
        self->available_ = self->tokenBegin_;
      }
      else if (self->tokenBegin_ < 0)
#line 99
      self->bufpos_ = self->maxNextCharInd_ = 0;
      else
#line 101
      ComSteadystateCssParserCssCharStream_ExpandBuffWithBoolean_(self, NO);
    }
    else if (self->available_ > self->tokenBegin_)
#line 104
    self->available_ = self->bufsize_;
    else if ((self->tokenBegin_ - self->available_) < ComSteadystateCssParserCssCharStream_BUFFER_SIZE)
#line 106
    ComSteadystateCssParserCssCharStream_ExpandBuffWithBoolean_(self, YES);
    else
#line 108
    self->available_ = self->tokenBegin_;
  }
  
#line 111
  jint i;
  @try {
    if ((i = [((JavaIoReader *) nil_chk(self->inputStream_)) readWithCharArray:self->buffer_ withInt:self->maxNextCharInd_ withInt:self->available_ - self->maxNextCharInd_]) == -1) {
      
#line 115
      [self->inputStream_ close];
      @throw new_JavaIoIOException_init();
    }
    
#line 119
    self->maxNextCharInd_ += i;
    return;
  }
  @catch (JavaIoIOException *e) {
    --self->bufpos_;
    ComSteadystateCssParserCssCharStream_backupWithInt_(self, 0);
    if (self->tokenBegin_ == -1)
#line 126
    self->tokenBegin_ = self->bufpos_;
    @throw e;
  }
}


#line 141
void ComSteadystateCssParserCssCharStream_UpdateLineColumnWithChar_(ComSteadystateCssParserCssCharStream *self, jchar c) {
  
#line 143
  self->column_++;
  
#line 145
  if (self->prevCharIsLF_) {
    
#line 147
    self->prevCharIsLF_ = NO;
    self->line_ += (self->column_ = 1);
  }
  else if (self->prevCharIsCR_) {
    
#line 152
    self->prevCharIsCR_ = NO;
    if (c == 0x000a) {
      
#line 155
      self->prevCharIsLF_ = YES;
    }
    else
#line 158
    self->line_ += (self->column_ = 1);
  }
  
#line 161
  switch (c) {
    
#line 163
    case 0x000d:
    self->prevCharIsCR_ = YES;
    break;
    case 0x000a:
    self->prevCharIsLF_ = YES;
    break;
    
#line 173
    default:
    break;
  }
  
#line 177
  *IOSIntArray_GetRef(nil_chk(self->bufline_), self->bufpos_) = self->line_;
  *IOSIntArray_GetRef(nil_chk(self->bufcolumn_), self->bufpos_) = self->column_;
}


#line 182
jchar ComSteadystateCssParserCssCharStream_readChar(ComSteadystateCssParserCssCharStream *self) {
  
#line 184
  if (self->inBuf_ > 0) {
    
#line 186
    --self->inBuf_;
    
#line 188
    if (++self->bufpos_ == self->bufsize_)
#line 189
    self->bufpos_ = 0;
    
#line 191
    return IOSCharArray_Get(nil_chk(self->buffer_), self->bufpos_);
  }
  
#line 194
  if (++self->bufpos_ >= self->maxNextCharInd_)
#line 195
  ComSteadystateCssParserCssCharStream_FillBuff(self);
  
#line 197
  jchar c = IOSCharArray_Get(nil_chk(self->buffer_), self->bufpos_);
  
#line 199
  ComSteadystateCssParserCssCharStream_UpdateLineColumnWithChar_(self, c);
  return c;
}


#line 242
void ComSteadystateCssParserCssCharStream_backupWithInt_(ComSteadystateCssParserCssCharStream *self, jint amount) {
  self->inBuf_ += amount;
  if ((self->bufpos_ -= amount) < 0)
#line 245
  self->bufpos_ += self->bufsize_;
}

void ComSteadystateCssParserCssCharStream_initWithJavaIoReader_withInt_withInt_withInt_(ComSteadystateCssParserCssCharStream *self, JavaIoReader *dstream, jint startline, jint startcolumn, jint buffersize) {
  (void) NSObject_init(self);
  self->bufpos_ =
#line 23
  -1;
  self->column_ =
#line 27
  0;
  self->line_ = 1;
  self->prevCharIsCR_ =
#line 30
  NO;
  self->prevCharIsLF_ = NO;
  self->maxNextCharInd_ =
#line 36
  0;
  self->inBuf_ = 0;
  
#line 251
  self->inputStream_ = dstream;
  self->line_ = startline;
  self->column_ = startcolumn - 1;
  
#line 255
  self->available_ = self->bufsize_ = buffersize;
  self->buffer_ = [IOSCharArray newArrayWithLength:buffersize];
  self->bufline_ = [IOSIntArray newArrayWithLength:buffersize];
  self->bufcolumn_ = [IOSIntArray newArrayWithLength:buffersize];
}


#line 249
ComSteadystateCssParserCssCharStream *new_ComSteadystateCssParserCssCharStream_initWithJavaIoReader_withInt_withInt_withInt_(JavaIoReader *dstream, jint startline, jint startcolumn, jint buffersize) {
  ComSteadystateCssParserCssCharStream *self = [ComSteadystateCssParserCssCharStream alloc];
  ComSteadystateCssParserCssCharStream_initWithJavaIoReader_withInt_withInt_withInt_(self, dstream, startline, startcolumn, buffersize);
  return self;
}


#line 262
void ComSteadystateCssParserCssCharStream_initWithJavaIoReader_withInt_withInt_(ComSteadystateCssParserCssCharStream *self, JavaIoReader *dstream, jint startline, jint startcolumn) {
  (void) ComSteadystateCssParserCssCharStream_initWithJavaIoReader_withInt_withInt_withInt_(self,
#line 265
  dstream, startline, startcolumn, 4096);
}


#line 262
ComSteadystateCssParserCssCharStream *new_ComSteadystateCssParserCssCharStream_initWithJavaIoReader_withInt_withInt_(JavaIoReader *dstream, jint startline, jint startcolumn) {
  ComSteadystateCssParserCssCharStream *self = [ComSteadystateCssParserCssCharStream alloc];
  ComSteadystateCssParserCssCharStream_initWithJavaIoReader_withInt_withInt_(self, dstream, startline, startcolumn);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComSteadystateCssParserCssCharStream)
