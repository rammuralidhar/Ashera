//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/cssparser/com/steadystate/css/util/MultiMap.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "MultiMap.h"
#include "java/lang/Integer.h"
#include "java/util/Collection.h"
#include "java/util/HashMap.h"
#include "java/util/LinkedList.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"

#line 0 "/Users/ramm/git/Ashera/AsheraAndroidParser/cssparser/com/steadystate/css/util/MultiMap.java"

@interface ComSteadystateCssUtilMultiMap () {
 @public
  id<JavaUtilMap> mInternalMap_;
}

/**
 @brief Recursive method that will append characters to proposedKey until its unique.
 Used in case there are collisions with generated key values.
 @param uniqueMap
 @param proposedKey
 @param value
 */
- (NSString *)addUniqueEntryWithJavaUtilMap:(id<JavaUtilMap>)uniqueMap
                               withNSString:(NSString *)proposedKey
                                     withId:(id)value;

@end

J2OBJC_FIELD_SETTER(ComSteadystateCssUtilMultiMap, mInternalMap_, id<JavaUtilMap>)

__attribute__((unused)) static NSString *ComSteadystateCssUtilMultiMap_addUniqueEntryWithJavaUtilMap_withNSString_withId_(ComSteadystateCssUtilMultiMap *self, id<JavaUtilMap> uniqueMap, NSString *proposedKey, id value);


#line 12
@implementation ComSteadystateCssUtilMultiMap

- (instancetype)init {
  ComSteadystateCssUtilMultiMap_init(self);
  return self;
}


#line 20
- (void)clear {
  [((id<JavaUtilMap>) nil_chk(mInternalMap_)) clear];
}


#line 28
- (jboolean)containsKeyWithId:(id)key {
  return [((id<JavaUtilMap>) nil_chk(mInternalMap_)) containsKeyWithId:key];
}


#line 36
- (jboolean)containsValueWithId:(id)value {
  for (id<JavaUtilList> __strong valueList in nil_chk([((id<JavaUtilMap>) nil_chk(mInternalMap_)) values])) {
    if ([((id<JavaUtilList>) nil_chk(valueList)) containsWithId:value]) {
      return YES;
    }
  }
  return NO;
}


#line 47
- (id<JavaUtilList>)getWithId:(id)key {
  return [((id<JavaUtilMap>) nil_chk(mInternalMap_)) getWithId:key];
}


#line 53
- (jboolean)isEmpty {
  return [((id<JavaUtilMap>) nil_chk(mInternalMap_)) isEmpty];
}


#line 59
- (id<JavaUtilSet>)keySet {
  return [((id<JavaUtilMap>) nil_chk(mInternalMap_)) keySet];
}


#line 67
- (id)putWithId:(id)key
         withId:(id)value {
  id<JavaUtilList> valueList = [((id<JavaUtilMap>) nil_chk(mInternalMap_)) getWithId:key];
  if (valueList == nil) {
    valueList = new_JavaUtilLinkedList_init();
    (void) [mInternalMap_ putWithId:key withId:valueList];
  }
  [((id<JavaUtilList>) nil_chk(valueList)) addWithId:value];
  return value;
}


#line 80
- (void)putAllWithJavaUtilMap:(id<JavaUtilMap>)m {
  for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([((id<JavaUtilMap>) nil_chk(m)) entrySet])) {
    (void) [self putWithId:[((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey] withId:[entry_ getValue]];
  }
}


#line 88
- (void)putAllWithComSteadystateCssUtilMultiMap:(ComSteadystateCssUtilMultiMap *)m {
  for (id __strong key in nil_chk([((ComSteadystateCssUtilMultiMap *) nil_chk(m)) keySet])) {
    for (id __strong value in nil_chk([m getWithId:key])) {
      (void) [self putWithId:key withId:value];
    }
  }
}


#line 98
- (id<JavaUtilList>)removeWithId:(id)key {
  return [((id<JavaUtilMap>) nil_chk(mInternalMap_)) removeWithId:key];
}


#line 104
- (jint)size {
  return [((id<JavaUtilMap>) nil_chk(mInternalMap_)) size];
}


#line 110
- (id<JavaUtilList>)values {
  id<JavaUtilList> allValues = new_JavaUtilLinkedList_init();
  for (id<JavaUtilList> __strong valueList in nil_chk([((id<JavaUtilMap>) nil_chk(mInternalMap_)) values])) {
    [allValues addAllWithJavaUtilCollection:valueList];
  }
  return allValues;
}


#line 125
- (id<JavaUtilMap>)getUniqueMap {
  id<JavaUtilMap> uniqueMap = new_JavaUtilHashMap_init();
  for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([((id<JavaUtilMap>) nil_chk(mInternalMap_)) entrySet])) {
    jint count = 1;
    for (id __strong value in nil_chk([((id<JavaUtilMap_Entry>) nil_chk(entry_)) getValue])) {
      if (count == 1) {
        (void) ComSteadystateCssUtilMultiMap_addUniqueEntryWithJavaUtilMap_withNSString_withId_(self, uniqueMap, [nil_chk([entry_ getKey]) description], value);
      }
      else {
        (void) ComSteadystateCssUtilMultiMap_addUniqueEntryWithJavaUtilMap_withNSString_withId_(self, uniqueMap, NSString_formatWithNSString_withNSObjectArray_(@"%s%d", [IOSObjectArray newArrayWithObjects:(id[]){ [entry_ getKey], JavaLangInteger_valueOfWithInt_(count) } count:2 type:NSObject_class_()]), value);
      }
      count++;
    }
  }
  return uniqueMap;
}


#line 149
- (NSString *)addUniqueEntryWithJavaUtilMap:(id<JavaUtilMap>)uniqueMap
                               withNSString:(NSString *)proposedKey
                                     withId:(id)value {
  return ComSteadystateCssUtilMultiMap_addUniqueEntryWithJavaUtilMap_withNSString_withId_(self, uniqueMap, proposedKey, value);
}


#line 162
- (NSUInteger)hash {
  return ((jint) [((id<JavaUtilMap>) nil_chk(mInternalMap_)) hash]);
}


#line 169
- (jboolean)isEqual:(id)obj {
  if (self == obj) {
    return YES;
  }
  if (obj == nil) {
    return NO;
  }
  if ([self getClass] != [nil_chk(obj) getClass]) {
    return NO;
  }
  ComSteadystateCssUtilMultiMap *other = (ComSteadystateCssUtilMultiMap *) check_class_cast(obj, [ComSteadystateCssUtilMultiMap class]);
  if (mInternalMap_ == nil || other->mInternalMap_ == nil) {
    return NO;
  }
  
#line 184
  return [((id<JavaUtilMap>) nil_chk(mInternalMap_)) isEqual:other->mInternalMap_];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "MultiMap", NULL, 0x1, NULL, NULL },
    { "clear", NULL, "V", 0x1, NULL, NULL },
    { "containsKeyWithId:", "containsKey", "Z", 0x1, NULL, "(TK;)Z" },
    { "containsValueWithId:", "containsValue", "Z", 0x1, NULL, "(TV;)Z" },
    { "getWithId:", "get", "Ljava.util.List;", 0x1, NULL, "(TK;)Ljava/util/List<TV;>;" },
    { "isEmpty", NULL, "Z", 0x1, NULL, NULL },
    { "keySet", NULL, "Ljava.util.Set;", 0x1, NULL, NULL },
    { "putWithId:withId:", "put", "TV;", 0x1, NULL, "(TK;TV;)TV;" },
    { "putAllWithJavaUtilMap:", "putAll", "V", 0x1, NULL, NULL },
    { "putAllWithComSteadystateCssUtilMultiMap:", "putAll", "V", 0x1, NULL, NULL },
    { "removeWithId:", "remove", "Ljava.util.List;", 0x1, NULL, "(TK;)Ljava/util/List<TV;>;" },
    { "size", NULL, "I", 0x1, NULL, NULL },
    { "values", NULL, "Ljava.util.List;", 0x1, NULL, NULL },
    { "getUniqueMap", NULL, "Ljava.util.Map;", 0x1, NULL, NULL },
    { "addUniqueEntryWithJavaUtilMap:withNSString:withId:", "addUniqueEntry", "Ljava.lang.String;", 0x2, NULL, "(Ljava/util/Map<Ljava/lang/String;TV;>;Ljava/lang/String;TV;)Ljava/lang/String;" },
    { "hash", "hashCode", "I", 0x1, NULL, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "mInternalMap_", NULL, 0x12, "Ljava.util.Map;", NULL, "Ljava/util/Map<TK;Ljava/util/List<TV;>;>;",  },
  };
  static const J2ObjcClassInfo _ComSteadystateCssUtilMultiMap = { 2, "MultiMap", "com.steadystate.css.util", NULL, 0x1, 17, methods, 1, fields, 0, NULL, 0, NULL, NULL, "<K:Ljava/lang/Object;V:Ljava/lang/Object;>Ljava/lang/Object;" };
  return &_ComSteadystateCssUtilMultiMap;
}

@end


#line 14
void ComSteadystateCssUtilMultiMap_init(ComSteadystateCssUtilMultiMap *self) {
  (void) NSObject_init(self);
  
#line 15
  self->mInternalMap_ = new_JavaUtilHashMap_init();
}


#line 14
ComSteadystateCssUtilMultiMap *new_ComSteadystateCssUtilMultiMap_init() {
  ComSteadystateCssUtilMultiMap *self = [ComSteadystateCssUtilMultiMap alloc];
  ComSteadystateCssUtilMultiMap_init(self);
  return self;
}


#line 149
NSString *ComSteadystateCssUtilMultiMap_addUniqueEntryWithJavaUtilMap_withNSString_withId_(ComSteadystateCssUtilMultiMap *self, id<JavaUtilMap> uniqueMap, NSString *proposedKey, id value) {
  
#line 151
  if ([((id<JavaUtilMap>) nil_chk(uniqueMap)) containsKeyWithId:proposedKey]) {
    return ComSteadystateCssUtilMultiMap_addUniqueEntryWithJavaUtilMap_withNSString_withId_(self, uniqueMap, NSString_formatWithNSString_withNSObjectArray_(@"%s%s", [IOSObjectArray newArrayWithObjects:(id[]){ proposedKey, @"X" } count:2 type:NSObject_class_()]), value);
  }
  else {
    
#line 154
    (void) [uniqueMap putWithId:proposedKey withId:value];
    return proposedKey;
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComSteadystateCssUtilMultiMap)
