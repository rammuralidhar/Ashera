//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/androidlayouts/repackaged/android/util/Rational.java
//

#ifndef _RepackagedAndroidUtilRational_H_
#define _RepackagedAndroidUtilRational_H_

#include "J2ObjC_header.h"
#include "java/lang/Comparable.h"

/**
 @brief <p>An immutable data type representation a rational number.
 </p> <p>Contains a pair of <code>int</code> s representing the numerator and denominator of a Rational number. </p>
 */
@interface RepackagedAndroidUtilRational : NSNumber < JavaLangComparable >

#pragma mark Public

/**
 @brief <p>Create a <code>Rational</code> with a given numerator and denominator.
 </p> <p>The signs of the numerator and the denominator may be flipped such that the denominator is always positive. Both the numerator and denominator will be converted to their reduced forms (see #equals for more details).</p> <p>For example, <ul> <li>a rational of <code>2/4</code> will be reduced to <code>1/2</code> . <li>a rational of <code>1/-1</code> will be flipped to <code>-1/1</code> <li>a rational of <code>5/0</code> will be reduced to <code>1/0</code> <li>a rational of <code>0/5</code> will be reduced to <code>0/1</code> </ul> </p>
 @param numerator the numerator of the rational
 @param denominator the denominator of the rational
 */
- (instancetype)initWithInt:(jint)numerator
                    withInt:(jint)denominator;

/**
 @brief Compare this rational to the specified rational to determine their natural order.
 <p> #NaN is considered to be equal to itself and greater than all other <code>Rational</code> values. Otherwise, if the objects are not #equals equal , then the following rules apply:</p> <ul> <li>Positive infinity is greater than any other finite number (or negative infinity) <li>Negative infinity is less than any other finite number (or positive infinity) <li>The finite number represented by this rational is checked numerically against the other finite number by converting both rationals to a common denominator multiple and comparing their numerators. </ul>
 @param another the rational to be compared
 @return a negative integer, zero, or a positive integer as this object is less than, equal to, or greater than the specified rational.
 @throws NullPointerException if <code>another</code> was <code>null</code>
 */
- (jint)compareToWithId:(RepackagedAndroidUtilRational *)another;

/**
 @brief Returns the value of the specified number as a <code>double</code> .
 <p>The <code>double</code> is calculated by converting both the numerator and denominator to a <code>double</code> ; then returning the result of dividing the numerator by the denominator.</p>
 @return the divided value of the numerator and denominator as a <code>double</code> .
 */
- (jdouble)doubleValue;

/**
 @brief <p>Compare this Rational to another object and see if they are equal.
 </p> <p>A Rational object can only be equal to another Rational object (comparing against any other type will return <code>false</code> ).</p> <p>A Rational object is considered equal to another Rational object if and only if one of the following holds:</p> <ul><li>Both are <code>NaN</code> </li> <li>Both are infinities of the same sign</li> <li>Both have the same numerator and denominator in their reduced form</li> </ul> <p>A reduced form of a Rational is calculated by dividing both the numerator and the denominator by their greatest common divisor.</p> <pre> <code>(new Rational(1, 2)).equals(new Rational(1, 2)) == true   // trivially true (new Rational(2, 3)).equals(new Rational(1, 2)) == false  // trivially false (new Rational(1, 2)).equals(new Rational(2, 4)) == true   // true after reduction (new Rational(0, 0)).equals(new Rational(0, 0)) == true   // NaN.equals(NaN) (new Rational(1, 0)).equals(new Rational(5, 0)) == true   // both are +infinity (new Rational(1, 0)).equals(new Rational(-1, 0)) == false // +infinity != -infinity</code> </pre>
 @param obj a reference to another object
 @return A boolean that determines whether or not the two Rational objects are equal.
 */
- (jboolean)isEqual:(id)obj;

/**
 @brief Returns the value of the specified number as a <code>float</code> .
 <p>The <code>float</code> is calculated by converting both the numerator and denominator to a <code>float</code> ; then returning the result of dividing the numerator by the denominator.</p>
 @return the divided value of the numerator and denominator as a <code>float</code> .
 */
- (jfloat)floatValue;

/**
 @brief Calculates the greatest common divisor using Euclid's algorithm.
 <p><em>Visible for testing only.</em></p>
 @param numerator the numerator in a fraction
 @param denominator the denominator in a fraction
 @return An int value representing the gcd. Always positive.
 */
+ (jint)gcdWithInt:(jint)numerator
           withInt:(jint)denominator;

/**
 @brief Gets the denominator of the rational <p>The denominator may return <code>0</code> , in which case the rational may represent positive infinity (if the numerator was positive), negative infinity (if the numerator was negative), or <code>NaN</code> (if the numerator was <code>0</code> ).
 </p> <p>The denominator will always return <code>1</code> if the numerator is <code>0</code> .
 */
- (jint)getDenominator;

/**
 @brief Gets the numerator of the rational.
 <p>The numerator will always return <code>1</code> if this rational represents infinity (that is, the denominator is <code>0</code> ).</p>
 */
- (jint)getNumerator;

/**
 
 */
- (NSUInteger)hash;

/**
 @brief Returns the value of the specified number as a <code>int</code> .
 <p> #isInfinite Finite rationals are converted to an <code>int</code> value by dividing the numerator by the denominator; conversion for non-finite values happens identically to casting a floating point value to an <code>int</code> , in particular: <p> <ul> <li>Positive infinity saturates to the largest maximum integer Integer#MAX_VALUE </li> <li>Negative infinity saturates to the smallest maximum integer Integer#MIN_VALUE </li> <li><em>Not-A-Number (NaN)</em> returns <code>0</code> .</li> </ul> </p>
 @return the divided value of the numerator and denominator as a <code>int</code> .
 */
- (jint)intValue;

/**
 @brief Indicates whether this rational represents a finite value.
 <p>A finite value occurs when the denominator is not <code>0</code> ; in other words the rational is neither infinity or <code>NaN</code> .</p>
 @return <code>true</code> if this rational is a (positive or negative) infinite value; <code>false</code> if this is a finite number value (or <code>NaN</code> )
 */
- (jboolean)isFinite;

/**
 @brief Indicates whether this rational represents an infinite value.
 <p>An infinite value occurs when the denominator is <code>0</code> (but the numerator is not).</p>
 @return <code>true</code> if this rational is a (positive or negative) infinite value; <code>false</code> if this is a finite number value (or <code>NaN</code> )
 */
- (jboolean)isInfinite;

/**
 @brief Indicates whether this rational is a <em>Not-a-Number (NaN)</em> value.
 <p>A <code>NaN</code> value occurs when both the numerator and the denominator are <code>0</code> .</p>
 @return <code>true</code> if this rational is a <em>Not-a-Number (NaN)</em> value; <code>false</code> if this is a (potentially infinite) number value
 */
- (jboolean)isNaN;

/**
 @brief Indicates whether this rational represents a zero value.
 <p>A zero value is a #isFinite finite rational with a numerator of <code>0</code> .</p>
 @return <code>true</code> if this rational is finite zero value; <code>false</code> otherwise
 */
- (jboolean)isZero;

/**
 @brief Returns the value of the specified number as a <code>long</code> .
 <p> #isInfinite Finite rationals are converted to an <code>long</code> value by dividing the numerator by the denominator; conversion for non-finite values happens identically to casting a floating point value to a <code>long</code> , in particular: <p> <ul> <li>Positive infinity saturates to the largest maximum long Long#MAX_VALUE </li> <li>Negative infinity saturates to the smallest maximum long Long#MIN_VALUE </li> <li><em>Not-A-Number (NaN)</em> returns <code>0</code> .</li> </ul> </p>
 @return the divided value of the numerator and denominator as a <code>long</code> .
 */
- (jlong)longLongValue;

/**
 @brief Parses the specified string as a rational value.
 <p>The ASCII characters <code>\</code> <code>u003a</code> (':') and <code>\</code> <code>u002f</code> ('/') are recognized as separators between the numerator and denumerator.</p> <p> For any <code>Rational r</code> : <code>Rational.parseRational(r.toString()).equals(r)</code> . However, the method also handles rational numbers expressed in the following forms:</p> <p> "<i>num</i> <code>/</code> <i>den</i>" or "<i>num</i> <code>:</code> <i>den</i>" <code>=> new Rational(num, den);</code> , where <i>num</i> and <i>den</i> are string integers potentially containing a sign, such as "-10", "+7" or "5".</p> <pre> <code>Rational.parseRational("3:+6").equals(new Rational(1, 2)) == true Rational.parseRational("-3/-6").equals(new Rational(1, 2)) == true Rational.parseRational("4.56") => throws NumberFormatException</code> </pre>
 @param string the string representation of a rational value.
 @return the rational value represented by <code>string</code> .
 @throws NumberFormatException if <code>string</code> cannot be parsed as a rational value.
 @throws NullPointerException if <code>string</code> was <code>null</code>
 */
+ (RepackagedAndroidUtilRational *)parseRationalWithNSString:(NSString *)string;

/**
 @brief Returns the value of the specified number as a <code>short</code> .
 <p> #isInfinite Finite rationals are converted to a <code>short</code> value identically to #intValue ; the <code>int</code> result is then truncated to a <code>short</code> before returning the value.</p>
 @return the divided value of the numerator and denominator as a <code>short</code> .
 */
- (jshort)shortValue;

/**
 @brief <p>Convert to a floating point representation.
 </p>
 @return The floating point representation of this rational number.
 */
- (jfloat)toFloat;

/**
 @brief Return a string representation of this rational, e.g.
 <code>"1/2"</code> . <p>The following rules of conversion apply: <ul> <li> <code>NaN</code> values will return <code>"NaN"</code> <li>Positive infinity values will return <code>"Infinity"</code> <li>Negative infinity values will return <code>"-Infinity"</code> <li>All other values will return <code>"numerator/denominator"</code> where <code>numerator</code> and <code>denominator</code> are substituted with the appropriate numerator and denominator values. </ul></p>
 */
- (NSString *)description;

@end

J2OBJC_STATIC_INIT(RepackagedAndroidUtilRational)

FOUNDATION_EXPORT RepackagedAndroidUtilRational *RepackagedAndroidUtilRational_NaN_;
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidUtilRational, NaN_, RepackagedAndroidUtilRational *)

FOUNDATION_EXPORT RepackagedAndroidUtilRational *RepackagedAndroidUtilRational_POSITIVE_INFINITY_;
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidUtilRational, POSITIVE_INFINITY_, RepackagedAndroidUtilRational *)

FOUNDATION_EXPORT RepackagedAndroidUtilRational *RepackagedAndroidUtilRational_NEGATIVE_INFINITY_;
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidUtilRational, NEGATIVE_INFINITY_, RepackagedAndroidUtilRational *)

FOUNDATION_EXPORT RepackagedAndroidUtilRational *RepackagedAndroidUtilRational_ZERO_;
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidUtilRational, ZERO_, RepackagedAndroidUtilRational *)

FOUNDATION_EXPORT void RepackagedAndroidUtilRational_initWithInt_withInt_(RepackagedAndroidUtilRational *self, jint numerator, jint denominator);

FOUNDATION_EXPORT RepackagedAndroidUtilRational *new_RepackagedAndroidUtilRational_initWithInt_withInt_(jint numerator, jint denominator) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT jint RepackagedAndroidUtilRational_gcdWithInt_withInt_(jint numerator, jint denominator);

FOUNDATION_EXPORT RepackagedAndroidUtilRational *RepackagedAndroidUtilRational_parseRationalWithNSString_(NSString *string);

J2OBJC_TYPE_LITERAL_HEADER(RepackagedAndroidUtilRational)

#endif // _RepackagedAndroidUtilRational_H_
