//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/androidlayouts/repackaged/com/android/internal/util/GrowingArrayUtils.java
//

#ifndef _RepackagedComAndroidInternalUtilGrowingArrayUtils_H_
#define _RepackagedComAndroidInternalUtilGrowingArrayUtils_H_

#include "J2ObjC_header.h"

@class IOSBooleanArray;
@class IOSIntArray;
@class IOSLongArray;
@class IOSObjectArray;

/**
 @brief A helper class that aims to provide comparable growth performance to ArrayList, but on primitive arrays.
 Common array operations are implemented for efficient use in dynamic containers. All methods in this class assume that the length of an array is equivalent to its capacity and NOT the number of elements in the array. The current size of the array is always passed in as a parameter.
 */
@interface RepackagedComAndroidInternalUtilGrowingArrayUtils : NSObject

#pragma mark Public

/**
 @brief Primitive boolean version of #append(Object[],int,Object) .
 */
+ (IOSBooleanArray *)appendWithBooleanArray:(IOSBooleanArray *)array
                                    withInt:(jint)currentSize
                                withBoolean:(jboolean)element;

/**
 @brief Primitive int version of #append(Object[],int,Object) .
 */
+ (IOSIntArray *)appendWithIntArray:(IOSIntArray *)array
                            withInt:(jint)currentSize
                            withInt:(jint)element;

/**
 @brief Primitive long version of #append(Object[],int,Object) .
 */
+ (IOSLongArray *)appendWithLongArray:(IOSLongArray *)array
                              withInt:(jint)currentSize
                             withLong:(jlong)element;

/**
 @brief Appends an element to the end of the array, growing the array if there is no more room.
 @param array The array to which to append the element. This must NOT be null.
 @param currentSize The number of elements in the array. Must be less than or equal to array.length.
 @param element The element to append.
 @return the array to which the element was appended. This may be different than the given array.
 */
+ (IOSObjectArray *)appendWithNSObjectArray:(IOSObjectArray *)array
                                    withInt:(jint)currentSize
                                     withId:(id)element;

/**
 @brief Given the current size of an array, returns an ideal size to which the array should grow.
 This is typically double the given size, but should not be relied upon to do so in the future.
 */
+ (jint)growSizeWithInt:(jint)currentSize;

/**
 @brief Primitive boolean version of #insert(Object[],int,int,Object) .
 */
+ (IOSBooleanArray *)insertWithBooleanArray:(IOSBooleanArray *)array
                                    withInt:(jint)currentSize
                                    withInt:(jint)index
                                withBoolean:(jboolean)element;

/**
 @brief Primitive int version of #insert(Object[],int,int,Object) .
 */
+ (IOSIntArray *)insertWithIntArray:(IOSIntArray *)array
                            withInt:(jint)currentSize
                            withInt:(jint)index
                            withInt:(jint)element;

/**
 @brief Primitive long version of #insert(Object[],int,int,Object) .
 */
+ (IOSLongArray *)insertWithLongArray:(IOSLongArray *)array
                              withInt:(jint)currentSize
                              withInt:(jint)index
                             withLong:(jlong)element;

/**
 @brief Inserts an element into the array at the specified index, growing the array if there is no more room.
 @param array The array to which to append the element. Must NOT be null.
 @param currentSize The number of elements in the array. Must be less than or equal to array.length.
 @param element The element to insert.
 @return the array to which the element was appended. This may be different than the given array.
 */
+ (IOSObjectArray *)insertWithNSObjectArray:(IOSObjectArray *)array
                                    withInt:(jint)currentSize
                                    withInt:(jint)index
                                     withId:(id)element;

@end

J2OBJC_EMPTY_STATIC_INIT(RepackagedComAndroidInternalUtilGrowingArrayUtils)

FOUNDATION_EXPORT IOSObjectArray *RepackagedComAndroidInternalUtilGrowingArrayUtils_appendWithNSObjectArray_withInt_withId_(IOSObjectArray *array, jint currentSize, id element);

FOUNDATION_EXPORT IOSIntArray *RepackagedComAndroidInternalUtilGrowingArrayUtils_appendWithIntArray_withInt_withInt_(IOSIntArray *array, jint currentSize, jint element);

FOUNDATION_EXPORT IOSLongArray *RepackagedComAndroidInternalUtilGrowingArrayUtils_appendWithLongArray_withInt_withLong_(IOSLongArray *array, jint currentSize, jlong element);

FOUNDATION_EXPORT IOSBooleanArray *RepackagedComAndroidInternalUtilGrowingArrayUtils_appendWithBooleanArray_withInt_withBoolean_(IOSBooleanArray *array, jint currentSize, jboolean element);

FOUNDATION_EXPORT IOSObjectArray *RepackagedComAndroidInternalUtilGrowingArrayUtils_insertWithNSObjectArray_withInt_withInt_withId_(IOSObjectArray *array, jint currentSize, jint index, id element);

FOUNDATION_EXPORT IOSIntArray *RepackagedComAndroidInternalUtilGrowingArrayUtils_insertWithIntArray_withInt_withInt_withInt_(IOSIntArray *array, jint currentSize, jint index, jint element);

FOUNDATION_EXPORT IOSLongArray *RepackagedComAndroidInternalUtilGrowingArrayUtils_insertWithLongArray_withInt_withInt_withLong_(IOSLongArray *array, jint currentSize, jint index, jlong element);

FOUNDATION_EXPORT IOSBooleanArray *RepackagedComAndroidInternalUtilGrowingArrayUtils_insertWithBooleanArray_withInt_withInt_withBoolean_(IOSBooleanArray *array, jint currentSize, jint index, jboolean element);

FOUNDATION_EXPORT jint RepackagedComAndroidInternalUtilGrowingArrayUtils_growSizeWithInt_(jint currentSize);

J2OBJC_TYPE_LITERAL_HEADER(RepackagedComAndroidInternalUtilGrowingArrayUtils)

#endif // _RepackagedComAndroidInternalUtilGrowingArrayUtils_H_
