//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/androidlayouts/repackaged/android/view/accessibility/AccessibilityRecord.java
//

#ifndef _RepackagedAndroidViewAccessibilityAccessibilityRecord_H_
#define _RepackagedAndroidViewAccessibilityAccessibilityRecord_H_

#include "J2ObjC_header.h"

@class RepackagedAndroidViewAccessibilityAccessibilityNodeInfo;
@class RepackagedAndroidViewView;
@protocol JavaLangCharSequence;
@protocol JavaUtilList;
@protocol RepackagedAndroidOsParcelable;

/**
 @brief Represents a record in an AccessibilityEvent and contains information about state change of its source repackaged.android.view.View .
 When a view fires an accessibility event it requests from its parent to dispatch the constructed event. The parent may optionally append a record for itself for providing more context to android.accessibilityservice.AccessibilityService s. Hence, accessibility services can facilitate additional accessibility records to enhance feedback. </p> <p> Once the accessibility event containing a record is dispatched the record is made immutable and calling a state mutation method generates an error. </p> <p> <strong>Note:</strong> Not all properties are applicable to all accessibility event types. For detailed information please refer to AccessibilityEvent . </p> <div class="special reference"> <h3>Developer Guides</h3> <p>For more information about creating and processing AccessibilityRecords, read the <a href="  guide/topics/ui/accessibility/index.html">Accessibility</a> developer guide.</p> </div>
 */
@interface RepackagedAndroidViewAccessibilityAccessibilityRecord : NSObject {
 @public
  jboolean mSealed_;
  jint mBooleanProperties_;
  jint mCurrentItemIndex_;
  jint mItemCount_;
  jint mFromIndex_;
  jint mToIndex_;
  jint mScrollX_;
  jint mScrollY_;
  jint mMaxScrollX_;
  jint mMaxScrollY_;
  jint mAddedCount_;
  jint mRemovedCount_;
  RepackagedAndroidViewAccessibilityAccessibilityNodeInfo *mSourceNode_;
  jint mSourceWindowId_;
  id<JavaLangCharSequence> mClassName_;
  id<JavaLangCharSequence> mContentDescription_;
  id<JavaLangCharSequence> mBeforeText_;
  id<RepackagedAndroidOsParcelable> mParcelableData_;
  id<JavaUtilList> mText_;
  jint mConnectionId_;
}

#pragma mark Public

/**
 @brief Gets the number of added characters.
 @return The number of added characters.
 */
- (jint)getAddedCount;

/**
 @brief Sets the text before a change.
 @return The text before the change.
 */
- (id<JavaLangCharSequence>)getBeforeText;

/**
 @brief Gets the class name of the source.
 @return The class name.
 */
- (id<JavaLangCharSequence>)getClassName;

/**
 @brief Gets the description of the source.
 @return The description.
 */
- (id<JavaLangCharSequence>)getContentDescription;

/**
 @brief Gets the index of the source in the list of items the can be visited.
 @return The current item index.
 */
- (jint)getCurrentItemIndex;

/**
 @brief Gets the index of the first character of the changed sequence, or the beginning of a text selection or the index of the first visible item when scrolling.
 @return The index of the first character or selection start or the first visible item.
 */
- (jint)getFromIndex;

/**
 @brief Gets the number of items that can be visited.
 @return The number of items.
 */
- (jint)getItemCount;

/**
 @brief Gets the max scroll offset of the source left edge in pixels.
 @return The max scroll.
 */
- (jint)getMaxScrollX;

/**
 @brief Gets the max scroll offset of the source top edge in pixels.
 @return The max scroll.
 */
- (jint)getMaxScrollY;

/**
 @brief Gets the Parcelable data.
 @return The parcelable data.
 */
- (id<RepackagedAndroidOsParcelable>)getParcelableData;

/**
 @brief Gets the number of removed characters.
 @return The number of removed characters.
 */
- (jint)getRemovedCount;

/**
 @brief Gets the scroll offset of the source left edge in pixels.
 @return The scroll.
 */
- (jint)getScrollX;

/**
 @brief Gets the scroll offset of the source top edge in pixels.
 @return The scroll.
 */
- (jint)getScrollY;

/**
 @brief Gets the AccessibilityNodeInfo of the event source.
 <p> <strong>Note:</strong> It is a client responsibility to recycle the received info by calling AccessibilityNodeInfo#recycle() AccessibilityNodeInfo#recycle() to avoid creating of multiple instances. </p>
 @return The info of the source.
 */
- (RepackagedAndroidViewAccessibilityAccessibilityNodeInfo *)getSource;

/**
 @brief Gets the id of the source node.
 @return The id.
 */
- (jlong)getSourceNodeId;

/**
 @brief Gets the text of the event.
 The index in the list represents the priority of the text. Specifically, the lower the index the higher the priority.
 @return The text.
 */
- (id<JavaUtilList>)getText;

/**
 @brief Gets the index of text selection end or the index of the last visible item when scrolling.
 @return The index of selection end or last item index.
 */
- (jint)getToIndex;

/**
 @brief Gets the id of the window from which the event comes from.
 @return The window id.
 */
- (jint)getWindowId;

/**
 @brief Gets if the source is checked.
 @return True if the view is checked, false otherwise.
 */
- (jboolean)isChecked;

/**
 @brief Gets if the source is enabled.
 @return True if the view is enabled, false otherwise.
 */
- (jboolean)isEnabled;

/**
 @brief Gets if the source is taking the entire screen.
 @return True if the source is full screen, false otherwise.
 */
- (jboolean)isFullScreen;

/**
 @brief Gets if the source is important for accessibility.
 <strong>Note:</strong> Used only internally to determine whether to deliver the event to a given accessibility service since some services may want to regard all views for accessibility while others may want to regard only the important views for accessibility.
 @return True if the source is important for accessibility, false otherwise.
 */
- (jboolean)isImportantForAccessibility;

/**
 @brief Gets if the source is a password field.
 @return True if the view is a password field, false otherwise.
 */
- (jboolean)isPassword;

/**
 @brief Gets if the source is scrollable.
 @return True if the source is scrollable, false otherwise.
 */
- (jboolean)isScrollable;

/**
 @brief Returns a cached instance if such is available or a new one is instantiated.
 @return An instance.
 */
+ (RepackagedAndroidViewAccessibilityAccessibilityRecord *)obtain;

/**
 @brief Returns a cached instance if such is available or a new one is instantiated.
 The instance is initialized with data from the given record.
 @return An instance.
 */
+ (RepackagedAndroidViewAccessibilityAccessibilityRecord *)obtainWithRepackagedAndroidViewAccessibilityAccessibilityRecord:(RepackagedAndroidViewAccessibilityAccessibilityRecord *)record;

/**
 @brief Return an instance back to be reused.
 <p> <strong>Note:</strong> You must not touch the object after calling this function.
 @throws IllegalStateException If the record is already recycled.
 */
- (void)recycle;

/**
 @brief Sets the number of added characters.
 @param addedCount The number of added characters.
 @throws IllegalStateException If called from an AccessibilityService.
 */
- (void)setAddedCountWithInt:(jint)addedCount;

/**
 @brief Sets the text before a change.
 @param beforeText The text before the change.
 @throws IllegalStateException If called from an AccessibilityService.
 */
- (void)setBeforeTextWithJavaLangCharSequence:(id<JavaLangCharSequence>)beforeText;

/**
 @brief Sets if the source is checked.
 @param isChecked True if the view is checked, false otherwise.
 @throws IllegalStateException If called from an AccessibilityService.
 */
- (void)setCheckedWithBoolean:(jboolean)isChecked;

/**
 @brief Sets the class name of the source.
 @param className The lass name.
 @throws IllegalStateException If called from an AccessibilityService.
 */
- (void)setClassNameWithJavaLangCharSequence:(id<JavaLangCharSequence>)className_;

/**
 @brief Sets the unique id of the IAccessibilityServiceConnection over which this instance can send requests to the system.
 @param connectionId The connection id.
 */
- (void)setConnectionIdWithInt:(jint)connectionId;

/**
 @brief Sets the description of the source.
 @param contentDescription The description.
 @throws IllegalStateException If called from an AccessibilityService.
 */
- (void)setContentDescriptionWithJavaLangCharSequence:(id<JavaLangCharSequence>)contentDescription;

/**
 @brief Sets the index of the source in the list of items that can be visited.
 @param currentItemIndex The current item index.
 @throws IllegalStateException If called from an AccessibilityService.
 */
- (void)setCurrentItemIndexWithInt:(jint)currentItemIndex;

/**
 @brief Sets if the source is enabled.
 @param isEnabled True if the view is enabled, false otherwise.
 @throws IllegalStateException If called from an AccessibilityService.
 */
- (void)setEnabledWithBoolean:(jboolean)isEnabled;

/**
 @brief Sets the index of the first character of the changed sequence or the beginning of a text selection or the index of the first visible item when scrolling.
 @param fromIndex The index of the first character or selection start or the first visible item.
 @throws IllegalStateException If called from an AccessibilityService.
 */
- (void)setFromIndexWithInt:(jint)fromIndex;

/**
 @brief Sets if the source is taking the entire screen.
 @param isFullScreen True if the source is full screen, false otherwise.
 @throws IllegalStateException If called from an AccessibilityService.
 */
- (void)setFullScreenWithBoolean:(jboolean)isFullScreen;

/**
 @brief Sets the number of items that can be visited.
 @param itemCount The number of items.
 @throws IllegalStateException If called from an AccessibilityService.
 */
- (void)setItemCountWithInt:(jint)itemCount;

/**
 @brief Sets the max scroll offset of the source left edge in pixels.
 @param maxScrollX The max scroll.
 */
- (void)setMaxScrollXWithInt:(jint)maxScrollX;

/**
 @brief Sets the max scroll offset of the source top edge in pixels.
 @param maxScrollY The max scroll.
 */
- (void)setMaxScrollYWithInt:(jint)maxScrollY;

/**
 @brief Sets the Parcelable data of the event.
 @param parcelableData The parcelable data.
 @throws IllegalStateException If called from an AccessibilityService.
 */
- (void)setParcelableDataWithRepackagedAndroidOsParcelable:(id<RepackagedAndroidOsParcelable>)parcelableData;

/**
 @brief Sets if the source is a password field.
 @param isPassword True if the view is a password field, false otherwise.
 @throws IllegalStateException If called from an AccessibilityService.
 */
- (void)setPasswordWithBoolean:(jboolean)isPassword;

/**
 @brief Sets the number of removed characters.
 @param removedCount The number of removed characters.
 @throws IllegalStateException If called from an AccessibilityService.
 */
- (void)setRemovedCountWithInt:(jint)removedCount;

/**
 @brief Sets if the source is scrollable.
 @param scrollable True if the source is scrollable, false otherwise.
 @throws IllegalStateException If called from an AccessibilityService.
 */
- (void)setScrollableWithBoolean:(jboolean)scrollable;

/**
 @brief Sets the scroll offset of the source left edge in pixels.
 @param scrollX The scroll.
 */
- (void)setScrollXWithInt:(jint)scrollX;

/**
 @brief Sets the scroll offset of the source top edge in pixels.
 @param scrollY The scroll.
 */
- (void)setScrollYWithInt:(jint)scrollY;

/**
 @brief Sets if this instance is sealed.
 @param sealed Whether is sealed.
 */
- (void)setSealedWithBoolean:(jboolean)sealed;

/**
 @brief Sets the event source.
 @param source The source.
 @throws IllegalStateException If called from an AccessibilityService.
 */
- (void)setSourceWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)source;

/**
 @brief Sets the source to be a virtual descendant of the given <code>root</code>.
 If <code>virtualDescendantId</code> equals to View#NO_ID the root is set as the source. <p> A virtual descendant is an imaginary View that is reported as a part of the view hierarchy for accessibility purposes. This enables custom views that draw complex content to report them selves as a tree of virtual views, thus conveying their logical structure. </p>
 @param root The root of the virtual subtree.
 @param virtualDescendantId The id of the virtual descendant.
 */
- (void)setSourceWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)root
                                       withInt:(jint)virtualDescendantId;

/**
 @brief Sets the index of text selection end or the index of the last visible item when scrolling.
 @param toIndex The index of selection end or last item index.
 */
- (void)setToIndexWithInt:(jint)toIndex;

/**
 @brief Sets the window id.
 @param windowId The window id.
 */
- (void)setWindowIdWithInt:(jint)windowId;

- (NSString *)description;

#pragma mark Package-Private

- (instancetype)init;

/**
 @brief Clears the state of this instance.
 */
- (void)clear;

/**
 @brief Enforces that this instance is not sealed.
 @throws IllegalStateException If this instance is sealed.
 */
- (void)enforceNotSealed;

/**
 @brief Enforces that this instance is sealed.
 @throws IllegalStateException If this instance is not sealed.
 */
- (void)enforceSealed;

/**
 @brief Initialize this record from another one.
 @param record The to initialize from.
 */
- (void)init__WithRepackagedAndroidViewAccessibilityAccessibilityRecord:(RepackagedAndroidViewAccessibilityAccessibilityRecord *)record OBJC_METHOD_FAMILY_NONE;

/**
 @brief Gets if this instance is sealed.
 @return Whether is sealed.
 */
- (jboolean)isSealed;

@end

J2OBJC_STATIC_INIT(RepackagedAndroidViewAccessibilityAccessibilityRecord)

J2OBJC_FIELD_SETTER(RepackagedAndroidViewAccessibilityAccessibilityRecord, mSourceNode_, RepackagedAndroidViewAccessibilityAccessibilityNodeInfo *)
J2OBJC_FIELD_SETTER(RepackagedAndroidViewAccessibilityAccessibilityRecord, mClassName_, id<JavaLangCharSequence>)
J2OBJC_FIELD_SETTER(RepackagedAndroidViewAccessibilityAccessibilityRecord, mContentDescription_, id<JavaLangCharSequence>)
J2OBJC_FIELD_SETTER(RepackagedAndroidViewAccessibilityAccessibilityRecord, mBeforeText_, id<JavaLangCharSequence>)
J2OBJC_FIELD_SETTER(RepackagedAndroidViewAccessibilityAccessibilityRecord, mParcelableData_, id<RepackagedAndroidOsParcelable>)
J2OBJC_FIELD_SETTER(RepackagedAndroidViewAccessibilityAccessibilityRecord, mText_, id<JavaUtilList>)

FOUNDATION_EXPORT void RepackagedAndroidViewAccessibilityAccessibilityRecord_init(RepackagedAndroidViewAccessibilityAccessibilityRecord *self);

FOUNDATION_EXPORT RepackagedAndroidViewAccessibilityAccessibilityRecord *new_RepackagedAndroidViewAccessibilityAccessibilityRecord_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RepackagedAndroidViewAccessibilityAccessibilityRecord *RepackagedAndroidViewAccessibilityAccessibilityRecord_obtainWithRepackagedAndroidViewAccessibilityAccessibilityRecord_(RepackagedAndroidViewAccessibilityAccessibilityRecord *record);

FOUNDATION_EXPORT RepackagedAndroidViewAccessibilityAccessibilityRecord *RepackagedAndroidViewAccessibilityAccessibilityRecord_obtain();

J2OBJC_TYPE_LITERAL_HEADER(RepackagedAndroidViewAccessibilityAccessibilityRecord)

#endif // _RepackagedAndroidViewAccessibilityAccessibilityRecord_H_
