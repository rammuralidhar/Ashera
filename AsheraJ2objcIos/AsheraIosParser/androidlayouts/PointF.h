//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/androidlayouts/repackaged/android/graphics/PointF.java
//

#ifndef _RepackagedAndroidGraphicsPointF_H_
#define _RepackagedAndroidGraphicsPointF_H_

#include "J2ObjC_header.h"
#include "Parcelable.h"

@class RepackagedAndroidGraphicsPoint;
@protocol RepackagedAndroidOsParcel;

/**
 @brief PointF holds two float coordinates
 */
@interface RepackagedAndroidGraphicsPointF : NSObject < RepackagedAndroidOsParcelable > {
 @public
  jfloat x_;
  jfloat y_;
}

#pragma mark Public

- (instancetype)init;

- (instancetype)initWithFloat:(jfloat)x
                    withFloat:(jfloat)y;

- (instancetype)initWithRepackagedAndroidGraphicsPoint:(RepackagedAndroidGraphicsPoint *)p;

/**
 @brief Parcelable interface methods
 */
- (jint)describeContents;

/**
 @brief Returns true if the point's coordinates equal (x,y)
 */
- (jboolean)equalsWithFloat:(jfloat)x
                  withFloat:(jfloat)y;

- (jboolean)isEqual:(id)o;

- (NSUInteger)hash;

/**
 @brief Return the euclidian distance from (0,0) to the point
 */
- (jfloat)length;

/**
 @brief Returns the euclidian distance from (0,0) to (x,y)
 */
+ (jfloat)lengthWithFloat:(jfloat)x
                withFloat:(jfloat)y;

- (void)negate;

- (void)offsetWithFloat:(jfloat)dx
              withFloat:(jfloat)dy;

/**
 @brief Set the point's coordinates from the data stored in the specified parcel.
 To write a point to a parcel, call writeToParcel().
 @param in The parcel to read the point's coordinates from
 */
- (void)readFromParcelWithRepackagedAndroidOsParcel:(id<RepackagedAndroidOsParcel>)inArg;

/**
 @brief Set the point's x and y coordinates
 */
- (void)setWithFloat:(jfloat)x
           withFloat:(jfloat)y;

/**
 @brief Set the point's x and y coordinates to the coordinates of p
 */
- (void)setWithRepackagedAndroidGraphicsPointF:(RepackagedAndroidGraphicsPointF *)p;

- (NSString *)description;

/**
 @brief Write this point to the specified parcel.
 To restore a point from a parcel, use readFromParcel()
 @param out The parcel to write the point's coordinates into
 */
- (void)writeToParcelWithRepackagedAndroidOsParcel:(id<RepackagedAndroidOsParcel>)outArg
                                           withInt:(jint)flags;

@end

J2OBJC_STATIC_INIT(RepackagedAndroidGraphicsPointF)

FOUNDATION_EXPORT id<RepackagedAndroidOsParcelable_Creator> RepackagedAndroidGraphicsPointF_CREATOR_;
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidGraphicsPointF, CREATOR_, id<RepackagedAndroidOsParcelable_Creator>)

FOUNDATION_EXPORT void RepackagedAndroidGraphicsPointF_init(RepackagedAndroidGraphicsPointF *self);

FOUNDATION_EXPORT RepackagedAndroidGraphicsPointF *new_RepackagedAndroidGraphicsPointF_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void RepackagedAndroidGraphicsPointF_initWithFloat_withFloat_(RepackagedAndroidGraphicsPointF *self, jfloat x, jfloat y);

FOUNDATION_EXPORT RepackagedAndroidGraphicsPointF *new_RepackagedAndroidGraphicsPointF_initWithFloat_withFloat_(jfloat x, jfloat y) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void RepackagedAndroidGraphicsPointF_initWithRepackagedAndroidGraphicsPoint_(RepackagedAndroidGraphicsPointF *self, RepackagedAndroidGraphicsPoint *p);

FOUNDATION_EXPORT RepackagedAndroidGraphicsPointF *new_RepackagedAndroidGraphicsPointF_initWithRepackagedAndroidGraphicsPoint_(RepackagedAndroidGraphicsPoint *p) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT jfloat RepackagedAndroidGraphicsPointF_lengthWithFloat_withFloat_(jfloat x, jfloat y);

J2OBJC_TYPE_LITERAL_HEADER(RepackagedAndroidGraphicsPointF)

#endif // _RepackagedAndroidGraphicsPointF_H_
