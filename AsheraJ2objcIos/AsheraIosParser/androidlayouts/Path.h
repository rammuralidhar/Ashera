//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/androidlayouts/repackaged/android/graphics/Path.java
//

#ifndef _RepackagedAndroidGraphicsPath_H_
#define _RepackagedAndroidGraphicsPath_H_

#include "J2ObjC_header.h"
#include "java/lang/Enum.h"

@class IOSFloatArray;
@class IOSObjectArray;
@class RepackagedAndroidGraphicsMatrix;
@class RepackagedAndroidGraphicsPath_DirectionEnum;
@class RepackagedAndroidGraphicsPath_FillTypeEnum;
@class RepackagedAndroidGraphicsPath_OpEnum;
@class RepackagedAndroidGraphicsRectF;
@class RepackagedAndroidGraphicsRegion;

/**
 @brief The Path class encapsulates compound (multiple contour) geometric paths consisting of straight line segments, quadratic curves, and cubic curves.
 It can be drawn with canvas.drawPath(path, paint), either filled or stroked (based on the paint's Style), or it can be used for clipping or to draw text on a path.
 */
@interface RepackagedAndroidGraphicsPath : NSObject {
 @public
  /**
   */
  jlong mNativePath_;
  /**
   */
  jboolean isSimplePath_;
  /**
   */
  RepackagedAndroidGraphicsRegion *rects_;
}

#pragma mark Public

/**
 @brief Create an empty path
 */
- (instancetype)init;

/**
 @brief Create a new path, copying the contents from the src path.
 @param src The path to copy from when initializing the new path
 */
- (instancetype)initWithRepackagedAndroidGraphicsPath:(RepackagedAndroidGraphicsPath *)src;

/**
 @brief Add the specified arc to the path as a new contour.
 @param startAngle Starting angle (in degrees) where the arc begins
 @param sweepAngle Sweep angle (in degrees) measured clockwise
 */
- (void)addArcWithFloat:(jfloat)left
              withFloat:(jfloat)top
              withFloat:(jfloat)right
              withFloat:(jfloat)bottom
              withFloat:(jfloat)startAngle
              withFloat:(jfloat)sweepAngle;

/**
 @brief Add the specified arc to the path as a new contour.
 @param oval The bounds of oval defining the shape and size of the arc
 @param startAngle Starting angle (in degrees) where the arc begins
 @param sweepAngle Sweep angle (in degrees) measured clockwise
 */
- (void)addArcWithRepackagedAndroidGraphicsRectF:(RepackagedAndroidGraphicsRectF *)oval
                                       withFloat:(jfloat)startAngle
                                       withFloat:(jfloat)sweepAngle;

/**
 @brief Add a closed circle contour to the path
 @param x The x-coordinate of the center of a circle to add to the path
 @param y The y-coordinate of the center of a circle to add to the path
 @param radius The radius of a circle to add to the path
 @param dir The direction to wind the circle's contour
 */
- (void)addCircleWithFloat:(jfloat)x
                 withFloat:(jfloat)y
                 withFloat:(jfloat)radius
withRepackagedAndroidGraphicsPath_DirectionEnum:(RepackagedAndroidGraphicsPath_DirectionEnum *)dir;

/**
 @brief Add a closed oval contour to the path
 @param dir The direction to wind the oval's contour
 */
- (void)addOvalWithFloat:(jfloat)left
               withFloat:(jfloat)top
               withFloat:(jfloat)right
               withFloat:(jfloat)bottom
withRepackagedAndroidGraphicsPath_DirectionEnum:(RepackagedAndroidGraphicsPath_DirectionEnum *)dir;

/**
 @brief Add a closed oval contour to the path
 @param oval The bounds of the oval to add as a closed contour to the path
 @param dir The direction to wind the oval's contour
 */
- (void)addOvalWithRepackagedAndroidGraphicsRectF:(RepackagedAndroidGraphicsRectF *)oval
  withRepackagedAndroidGraphicsPath_DirectionEnum:(RepackagedAndroidGraphicsPath_DirectionEnum *)dir;

/**
 @brief Add a copy of src to the path
 @param src The path that is appended to the current path
 */
- (void)addPathWithRepackagedAndroidGraphicsPath:(RepackagedAndroidGraphicsPath *)src;

/**
 @brief Add a copy of src to the path, offset by (dx,dy)
 @param src The path to add as a new contour
 @param dx The amount to translate the path in X as it is added
 */
- (void)addPathWithRepackagedAndroidGraphicsPath:(RepackagedAndroidGraphicsPath *)src
                                       withFloat:(jfloat)dx
                                       withFloat:(jfloat)dy;

/**
 @brief Add a copy of src to the path, transformed by matrix
 @param src The path to add as a new contour
 */
- (void)addPathWithRepackagedAndroidGraphicsPath:(RepackagedAndroidGraphicsPath *)src
             withRepackagedAndroidGraphicsMatrix:(RepackagedAndroidGraphicsMatrix *)matrix;

/**
 @brief Add a closed rectangle contour to the path
 @param left The left side of a rectangle to add to the path
 @param top The top of a rectangle to add to the path
 @param right The right side of a rectangle to add to the path
 @param bottom The bottom of a rectangle to add to the path
 @param dir The direction to wind the rectangle's contour
 */
- (void)addRectWithFloat:(jfloat)left
               withFloat:(jfloat)top
               withFloat:(jfloat)right
               withFloat:(jfloat)bottom
withRepackagedAndroidGraphicsPath_DirectionEnum:(RepackagedAndroidGraphicsPath_DirectionEnum *)dir;

/**
 @brief Add a closed rectangle contour to the path
 @param rect The rectangle to add as a closed contour to the path
 @param dir The direction to wind the rectangle's contour
 */
- (void)addRectWithRepackagedAndroidGraphicsRectF:(RepackagedAndroidGraphicsRectF *)rect
  withRepackagedAndroidGraphicsPath_DirectionEnum:(RepackagedAndroidGraphicsPath_DirectionEnum *)dir;

/**
 @brief Add a closed round-rectangle contour to the path
 @param rx The x-radius of the rounded corners on the round-rectangle
 @param ry The y-radius of the rounded corners on the round-rectangle
 @param dir The direction to wind the round-rectangle's contour
 */
- (void)addRoundRectWithFloat:(jfloat)left
                    withFloat:(jfloat)top
                    withFloat:(jfloat)right
                    withFloat:(jfloat)bottom
                    withFloat:(jfloat)rx
                    withFloat:(jfloat)ry
withRepackagedAndroidGraphicsPath_DirectionEnum:(RepackagedAndroidGraphicsPath_DirectionEnum *)dir;

/**
 @brief Add a closed round-rectangle contour to the path.
 Each corner receives two radius values [X, Y]. The corners are ordered top-left, top-right, bottom-right, bottom-left
 @param radii Array of 8 values, 4 pairs of [X,Y] radii
 @param dir The direction to wind the round-rectangle's contour
 */
- (void)addRoundRectWithFloat:(jfloat)left
                    withFloat:(jfloat)top
                    withFloat:(jfloat)right
                    withFloat:(jfloat)bottom
               withFloatArray:(IOSFloatArray *)radii
withRepackagedAndroidGraphicsPath_DirectionEnum:(RepackagedAndroidGraphicsPath_DirectionEnum *)dir;

/**
 @brief Add a closed round-rectangle contour to the path
 @param rect The bounds of a round-rectangle to add to the path
 @param rx The x-radius of the rounded corners on the round-rectangle
 @param ry The y-radius of the rounded corners on the round-rectangle
 @param dir The direction to wind the round-rectangle's contour
 */
- (void)addRoundRectWithRepackagedAndroidGraphicsRectF:(RepackagedAndroidGraphicsRectF *)rect
                                             withFloat:(jfloat)rx
                                             withFloat:(jfloat)ry
       withRepackagedAndroidGraphicsPath_DirectionEnum:(RepackagedAndroidGraphicsPath_DirectionEnum *)dir;

/**
 @brief Add a closed round-rectangle contour to the path.
 Each corner receives two radius values [X, Y]. The corners are ordered top-left, top-right, bottom-right, bottom-left
 @param rect The bounds of a round-rectangle to add to the path
 @param radii Array of 8 values, 4 pairs of [X,Y] radii
 @param dir The direction to wind the round-rectangle's contour
 */
- (void)addRoundRectWithRepackagedAndroidGraphicsRectF:(RepackagedAndroidGraphicsRectF *)rect
                                        withFloatArray:(IOSFloatArray *)radii
       withRepackagedAndroidGraphicsPath_DirectionEnum:(RepackagedAndroidGraphicsPath_DirectionEnum *)dir;

/**
 @brief Approximate the <code>Path</code> with a series of line segments.
 This returns float[] with the array containing point components. There are three components for each point, in order: <ul> <li>Fraction along the length of the path that the point resides</li> <li>The x coordinate of the point</li> <li>The y coordinate of the point</li> </ul> <p>Two points may share the same fraction along its length when there is a move action within the Path.</p>
 @param acceptableError The acceptable error for a line on the Path. Typically this would be 0.5 so that the error is less than half a pixel.
 @return An array of components for points approximating the Path.
 */
- (IOSFloatArray *)approximateWithFloat:(jfloat)acceptableError;

/**
 @brief Append the specified arc to the path as a new contour.
 If the start of the path is different from the path's current last point, then an automatic lineTo() is added to connect the current contour to the start of the arc. However, if the path is empty, then we call moveTo() with the first point of the arc.
 @param startAngle Starting angle (in degrees) where the arc begins
 @param sweepAngle Sweep angle (in degrees) measured clockwise, treated mod 360.
 @param forceMoveTo If true, always begin a new contour with the arc
 */
- (void)arcToWithFloat:(jfloat)left
             withFloat:(jfloat)top
             withFloat:(jfloat)right
             withFloat:(jfloat)bottom
             withFloat:(jfloat)startAngle
             withFloat:(jfloat)sweepAngle
           withBoolean:(jboolean)forceMoveTo;

/**
 @brief Append the specified arc to the path as a new contour.
 If the start of the path is different from the path's current last point, then an automatic lineTo() is added to connect the current contour to the start of the arc. However, if the path is empty, then we call moveTo() with the first point of the arc.
 @param oval The bounds of oval defining shape and size of the arc
 @param startAngle Starting angle (in degrees) where the arc begins
 @param sweepAngle Sweep angle (in degrees) measured clockwise
 */
- (void)arcToWithRepackagedAndroidGraphicsRectF:(RepackagedAndroidGraphicsRectF *)oval
                                      withFloat:(jfloat)startAngle
                                      withFloat:(jfloat)sweepAngle;

/**
 @brief Append the specified arc to the path as a new contour.
 If the start of the path is different from the path's current last point, then an automatic lineTo() is added to connect the current contour to the start of the arc. However, if the path is empty, then we call moveTo() with the first point of the arc.
 @param oval The bounds of oval defining shape and size of the arc
 @param startAngle Starting angle (in degrees) where the arc begins
 @param sweepAngle Sweep angle (in degrees) measured clockwise, treated mod 360.
 @param forceMoveTo If true, always begin a new contour with the arc
 */
- (void)arcToWithRepackagedAndroidGraphicsRectF:(RepackagedAndroidGraphicsRectF *)oval
                                      withFloat:(jfloat)startAngle
                                      withFloat:(jfloat)sweepAngle
                                    withBoolean:(jboolean)forceMoveTo;

/**
 @brief Close the current contour.
 If the current point is not equal to the first point of the contour, a line segment is automatically added.
 */
- (void)close;

/**
 @brief Compute the bounds of the control points of the path, and write the answer into bounds.
 If the path contains 0 or 1 points, the bounds is set to (0,0,0,0)
 @param bounds Returns the computed bounds of the path's control points.
 @param exact This parameter is no longer used.
 */
- (void)computeBoundsWithRepackagedAndroidGraphicsRectF:(RepackagedAndroidGraphicsRectF *)bounds
                                            withBoolean:(jboolean)exact;

/**
 @brief Add a cubic bezier from the last point, approaching control points (x1,y1) and (x2,y2), and ending at (x3,y3).
 If no moveTo() call has been made for this contour, the first point is automatically set to (0,0).
 @param x1 The x-coordinate of the 1st control point on a cubic curve
 @param y1 The y-coordinate of the 1st control point on a cubic curve
 @param x2 The x-coordinate of the 2nd control point on a cubic curve
 @param y2 The y-coordinate of the 2nd control point on a cubic curve
 @param x3 The x-coordinate of the end point on a cubic curve
 @param y3 The y-coordinate of the end point on a cubic curve
 */
- (void)cubicToWithFloat:(jfloat)x1
               withFloat:(jfloat)y1
               withFloat:(jfloat)x2
               withFloat:(jfloat)y2
               withFloat:(jfloat)x3
               withFloat:(jfloat)y3;

/**
 @brief Return the path's fill type.
 This defines how "inside" is computed. The default value is WINDING.
 @return the path's fill type
 */
- (RepackagedAndroidGraphicsPath_FillTypeEnum *)getFillType;

/**
 @brief Hint to the path to prepare for adding more points.
 This can allow the path to more efficiently allocate its storage.
 @param extraPtCount The number of extra points that may be added to this path
 */
- (void)incReserveWithInt:(jint)extraPtCount;

/**
 @brief Returns the path's convexity, as defined by the content of the path.
 <p> A path is convex if it has a single contour, and only ever curves in a single direction. <p> This function will calculate the convexity of the path from its control points, and cache the result.
 @return True if the path is convex.
 */
- (jboolean)isConvex;

/**
 @brief Returns true if the path is empty (contains no lines or curves)
 @return true if the path is empty (contains no lines or curves)
 */
- (jboolean)isEmpty;

/**
 @brief Returns true if the filltype is one of the INVERSE variants
 @return true if the filltype is one of the INVERSE variants
 */
- (jboolean)isInverseFillType;

/**
 @brief Returns true if the path specifies a rectangle.
 If so, and if rect is not null, set rect to the bounds of the path. If the path does not specify a rectangle, return false and ignore rect.
 @param rect If not null, returns the bounds of the path if it specifies a rectangle
 @return true if the path specifies a rectangle
 */
- (jboolean)isRectWithRepackagedAndroidGraphicsRectF:(RepackagedAndroidGraphicsRectF *)rect;

/**
 @brief Add a line from the last point to the specified point (x,y).
 If no moveTo() call has been made for this contour, the first point is automatically set to (0,0).
 @param x The x-coordinate of the end of a line
 @param y The y-coordinate of the end of a line
 */
- (void)lineToWithFloat:(jfloat)x
              withFloat:(jfloat)y;

/**
 @brief Set the beginning of the next contour to the point (x,y).
 @param x The x-coordinate of the start of a new contour
 @param y The y-coordinate of the start of a new contour
 */
- (void)moveToWithFloat:(jfloat)x
              withFloat:(jfloat)y;

/**
 @brief Offset the path by (dx,dy)
 @param dx The amount in the X direction to offset the entire path
 @param dy The amount in the Y direction to offset the entire path
 */
- (void)offsetWithFloat:(jfloat)dx
              withFloat:(jfloat)dy;

/**
 @brief Offset the path by (dx,dy)
 @param dx The amount in the X direction to offset the entire path
 @param dy The amount in the Y direction to offset the entire path
 @param dst The translated path is written here. If this is null, then the original path is modified.
 */
- (void)offsetWithFloat:(jfloat)dx
              withFloat:(jfloat)dy
withRepackagedAndroidGraphicsPath:(RepackagedAndroidGraphicsPath *)dst;

/**
 @brief Set this path to the result of applying the Op to this path and the specified path.
 The resulting path will be constructed from non-overlapping contours. The curve order is reduced where possible so that cubics may be turned into quadratics, and quadratics maybe turned into lines.
 @param path The second operand (for difference, the subtrahend)
 @return True if operation succeeded, false otherwise and this path remains unmodified.
 */
- (jboolean)opWithRepackagedAndroidGraphicsPath:(RepackagedAndroidGraphicsPath *)path
       withRepackagedAndroidGraphicsPath_OpEnum:(RepackagedAndroidGraphicsPath_OpEnum *)op;

/**
 @brief Set this path to the result of applying the Op to the two specified paths.
 The resulting path will be constructed from non-overlapping contours. The curve order is reduced where possible so that cubics may be turned into quadratics, and quadratics maybe turned into lines.
 @param path1 The first operand (for difference, the minuend)
 @param path2 The second operand (for difference, the subtrahend)
 @return True if operation succeeded, false otherwise and this path remains unmodified.
 */
- (jboolean)opWithRepackagedAndroidGraphicsPath:(RepackagedAndroidGraphicsPath *)path1
              withRepackagedAndroidGraphicsPath:(RepackagedAndroidGraphicsPath *)path2
       withRepackagedAndroidGraphicsPath_OpEnum:(RepackagedAndroidGraphicsPath_OpEnum *)op;

/**
 @brief Add a quadratic bezier from the last point, approaching control point (x1,y1), and ending at (x2,y2).
 If no moveTo() call has been made for this contour, the first point is automatically set to (0,0).
 @param x1 The x-coordinate of the control point on a quadratic curve
 @param y1 The y-coordinate of the control point on a quadratic curve
 @param x2 The x-coordinate of the end point on a quadratic curve
 @param y2 The y-coordinate of the end point on a quadratic curve
 */
- (void)quadToWithFloat:(jfloat)x1
              withFloat:(jfloat)y1
              withFloat:(jfloat)x2
              withFloat:(jfloat)y2;

/**
 @brief Same as cubicTo, but the coordinates are considered relative to the current point on this contour.
 If there is no previous point, then a moveTo(0,0) is inserted automatically.
 */
- (void)rCubicToWithFloat:(jfloat)x1
                withFloat:(jfloat)y1
                withFloat:(jfloat)x2
                withFloat:(jfloat)y2
                withFloat:(jfloat)x3
                withFloat:(jfloat)y3;

/**
 @brief Clear any lines and curves from the path, making it empty.
 This does NOT change the fill-type setting.
 */
- (void)reset;

/**
 @brief Rewinds the path: clears any lines and curves from the path but keeps the internal data structure for faster reuse.
 */
- (void)rewind;

/**
 @brief Same as lineTo, but the coordinates are considered relative to the last point on this contour.
 If there is no previous point, then a moveTo(0,0) is inserted automatically.
 @param dx The amount to add to the x-coordinate of the previous point on this contour, to specify a line
 @param dy The amount to add to the y-coordinate of the previous point on this contour, to specify a line
 */
- (void)rLineToWithFloat:(jfloat)dx
               withFloat:(jfloat)dy;

/**
 @brief Set the beginning of the next contour relative to the last point on the previous contour.
 If there is no previous contour, this is treated the same as moveTo().
 @param dx The amount to add to the x-coordinate of the end of the previous contour, to specify the start of a new contour
 @param dy The amount to add to the y-coordinate of the end of the previous contour, to specify the start of a new contour
 */
- (void)rMoveToWithFloat:(jfloat)dx
               withFloat:(jfloat)dy;

/**
 @brief Same as quadTo, but the coordinates are considered relative to the last point on this contour.
 If there is no previous point, then a moveTo(0,0) is inserted automatically.
 @param dx1 The amount to add to the x-coordinate of the last point on this contour, for the control point of a quadratic curve
 @param dy1 The amount to add to the y-coordinate of the last point on this contour, for the control point of a quadratic curve
 @param dx2 The amount to add to the x-coordinate of the last point on this contour, for the end point of a quadratic curve
 @param dy2 The amount to add to the y-coordinate of the last point on this contour, for the end point of a quadratic curve
 */
- (void)rQuadToWithFloat:(jfloat)dx1
               withFloat:(jfloat)dy1
               withFloat:(jfloat)dx2
               withFloat:(jfloat)dy2;

/**
 @brief Replace the contents of this with the contents of src.
 */
- (void)setWithRepackagedAndroidGraphicsPath:(RepackagedAndroidGraphicsPath *)src;

/**
 @brief Set the path's fill type.
 This defines how "inside" is computed.
 @param ft The new fill type for this path
 */
- (void)setFillTypeWithRepackagedAndroidGraphicsPath_FillTypeEnum:(RepackagedAndroidGraphicsPath_FillTypeEnum *)ft;

/**
 @brief Sets the last point of the path.
 @param dx The new X coordinate for the last point
 @param dy The new Y coordinate for the last point
 */
- (void)setLastPointWithFloat:(jfloat)dx
                    withFloat:(jfloat)dy;

/**
 @brief Toggles the INVERSE state of the filltype
 */
- (void)toggleInverseFillType;

/**
 @brief Transform the points in this path by matrix.
 @param matrix The matrix to apply to the path
 */
- (void)transformWithRepackagedAndroidGraphicsMatrix:(RepackagedAndroidGraphicsMatrix *)matrix;

/**
 @brief Transform the points in this path by matrix, and write the answer into dst.
 If dst is null, then the the original path is modified.
 @param matrix The matrix to apply to the path
 @param dst The transformed path is written here. If dst is null, then the the original path is modified
 */
- (void)transformWithRepackagedAndroidGraphicsMatrix:(RepackagedAndroidGraphicsMatrix *)matrix
                   withRepackagedAndroidGraphicsPath:(RepackagedAndroidGraphicsPath *)dst;

#pragma mark Protected

- (void)dealloc;

#pragma mark Package-Private

- (jlong)ni;

@end

J2OBJC_STATIC_INIT(RepackagedAndroidGraphicsPath)

J2OBJC_FIELD_SETTER(RepackagedAndroidGraphicsPath, rects_, RepackagedAndroidGraphicsRegion *)

FOUNDATION_EXPORT IOSObjectArray *RepackagedAndroidGraphicsPath_sFillTypeArray_;
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidGraphicsPath, sFillTypeArray_, IOSObjectArray *)

FOUNDATION_EXPORT void RepackagedAndroidGraphicsPath_init(RepackagedAndroidGraphicsPath *self);

FOUNDATION_EXPORT RepackagedAndroidGraphicsPath *new_RepackagedAndroidGraphicsPath_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void RepackagedAndroidGraphicsPath_initWithRepackagedAndroidGraphicsPath_(RepackagedAndroidGraphicsPath *self, RepackagedAndroidGraphicsPath *src);

FOUNDATION_EXPORT RepackagedAndroidGraphicsPath *new_RepackagedAndroidGraphicsPath_initWithRepackagedAndroidGraphicsPath_(RepackagedAndroidGraphicsPath *src) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(RepackagedAndroidGraphicsPath)

typedef NS_ENUM(NSUInteger, RepackagedAndroidGraphicsPath_Op) {
  RepackagedAndroidGraphicsPath_Op_DIFFERENCE = 0,
  RepackagedAndroidGraphicsPath_Op_INTERSECT = 1,
  RepackagedAndroidGraphicsPath_Op_UNION = 2,
  RepackagedAndroidGraphicsPath_Op_XOR = 3,
  RepackagedAndroidGraphicsPath_Op_REVERSE_DIFFERENCE = 4,
};

/**
 @brief The logical operations that can be performed when combining two paths.
 */
@interface RepackagedAndroidGraphicsPath_OpEnum : JavaLangEnum < NSCopying >

#pragma mark Package-Private

+ (IOSObjectArray *)values;
FOUNDATION_EXPORT IOSObjectArray *RepackagedAndroidGraphicsPath_OpEnum_values();

+ (RepackagedAndroidGraphicsPath_OpEnum *)valueOfWithNSString:(NSString *)name;
FOUNDATION_EXPORT RepackagedAndroidGraphicsPath_OpEnum *RepackagedAndroidGraphicsPath_OpEnum_valueOfWithNSString_(NSString *name);

- (id)copyWithZone:(NSZone *)zone;

@end

J2OBJC_STATIC_INIT(RepackagedAndroidGraphicsPath_OpEnum)

FOUNDATION_EXPORT RepackagedAndroidGraphicsPath_OpEnum *RepackagedAndroidGraphicsPath_OpEnum_values_[];

#define RepackagedAndroidGraphicsPath_OpEnum_DIFFERENCE RepackagedAndroidGraphicsPath_OpEnum_values_[RepackagedAndroidGraphicsPath_Op_DIFFERENCE]
J2OBJC_ENUM_CONSTANT_GETTER(RepackagedAndroidGraphicsPath_OpEnum, DIFFERENCE)

#define RepackagedAndroidGraphicsPath_OpEnum_INTERSECT RepackagedAndroidGraphicsPath_OpEnum_values_[RepackagedAndroidGraphicsPath_Op_INTERSECT]
J2OBJC_ENUM_CONSTANT_GETTER(RepackagedAndroidGraphicsPath_OpEnum, INTERSECT)

#define RepackagedAndroidGraphicsPath_OpEnum_UNION RepackagedAndroidGraphicsPath_OpEnum_values_[RepackagedAndroidGraphicsPath_Op_UNION]
J2OBJC_ENUM_CONSTANT_GETTER(RepackagedAndroidGraphicsPath_OpEnum, UNION)

#define RepackagedAndroidGraphicsPath_OpEnum_XOR RepackagedAndroidGraphicsPath_OpEnum_values_[RepackagedAndroidGraphicsPath_Op_XOR]
J2OBJC_ENUM_CONSTANT_GETTER(RepackagedAndroidGraphicsPath_OpEnum, XOR)

#define RepackagedAndroidGraphicsPath_OpEnum_REVERSE_DIFFERENCE RepackagedAndroidGraphicsPath_OpEnum_values_[RepackagedAndroidGraphicsPath_Op_REVERSE_DIFFERENCE]
J2OBJC_ENUM_CONSTANT_GETTER(RepackagedAndroidGraphicsPath_OpEnum, REVERSE_DIFFERENCE)

J2OBJC_TYPE_LITERAL_HEADER(RepackagedAndroidGraphicsPath_OpEnum)

typedef NS_ENUM(NSUInteger, RepackagedAndroidGraphicsPath_FillType) {
  RepackagedAndroidGraphicsPath_FillType_WINDING = 0,
  RepackagedAndroidGraphicsPath_FillType_EVEN_ODD = 1,
  RepackagedAndroidGraphicsPath_FillType_INVERSE_WINDING = 2,
  RepackagedAndroidGraphicsPath_FillType_INVERSE_EVEN_ODD = 3,
};

/**
 @brief Enum for the ways a path may be filled.
 */
@interface RepackagedAndroidGraphicsPath_FillTypeEnum : JavaLangEnum < NSCopying > {
 @public
  jint nativeInt_;
}

#pragma mark Package-Private

+ (IOSObjectArray *)values;
FOUNDATION_EXPORT IOSObjectArray *RepackagedAndroidGraphicsPath_FillTypeEnum_values();

+ (RepackagedAndroidGraphicsPath_FillTypeEnum *)valueOfWithNSString:(NSString *)name;
FOUNDATION_EXPORT RepackagedAndroidGraphicsPath_FillTypeEnum *RepackagedAndroidGraphicsPath_FillTypeEnum_valueOfWithNSString_(NSString *name);

- (id)copyWithZone:(NSZone *)zone;

@end

J2OBJC_STATIC_INIT(RepackagedAndroidGraphicsPath_FillTypeEnum)

FOUNDATION_EXPORT RepackagedAndroidGraphicsPath_FillTypeEnum *RepackagedAndroidGraphicsPath_FillTypeEnum_values_[];

#define RepackagedAndroidGraphicsPath_FillTypeEnum_WINDING RepackagedAndroidGraphicsPath_FillTypeEnum_values_[RepackagedAndroidGraphicsPath_FillType_WINDING]
J2OBJC_ENUM_CONSTANT_GETTER(RepackagedAndroidGraphicsPath_FillTypeEnum, WINDING)

#define RepackagedAndroidGraphicsPath_FillTypeEnum_EVEN_ODD RepackagedAndroidGraphicsPath_FillTypeEnum_values_[RepackagedAndroidGraphicsPath_FillType_EVEN_ODD]
J2OBJC_ENUM_CONSTANT_GETTER(RepackagedAndroidGraphicsPath_FillTypeEnum, EVEN_ODD)

#define RepackagedAndroidGraphicsPath_FillTypeEnum_INVERSE_WINDING RepackagedAndroidGraphicsPath_FillTypeEnum_values_[RepackagedAndroidGraphicsPath_FillType_INVERSE_WINDING]
J2OBJC_ENUM_CONSTANT_GETTER(RepackagedAndroidGraphicsPath_FillTypeEnum, INVERSE_WINDING)

#define RepackagedAndroidGraphicsPath_FillTypeEnum_INVERSE_EVEN_ODD RepackagedAndroidGraphicsPath_FillTypeEnum_values_[RepackagedAndroidGraphicsPath_FillType_INVERSE_EVEN_ODD]
J2OBJC_ENUM_CONSTANT_GETTER(RepackagedAndroidGraphicsPath_FillTypeEnum, INVERSE_EVEN_ODD)

J2OBJC_TYPE_LITERAL_HEADER(RepackagedAndroidGraphicsPath_FillTypeEnum)

typedef NS_ENUM(NSUInteger, RepackagedAndroidGraphicsPath_Direction) {
  RepackagedAndroidGraphicsPath_Direction_CW = 0,
  RepackagedAndroidGraphicsPath_Direction_CCW = 1,
};

/**
 @brief Specifies how closed shapes (e.g. rects, ovals) are oriented when they are added to a path.
 */
@interface RepackagedAndroidGraphicsPath_DirectionEnum : JavaLangEnum < NSCopying > {
 @public
  jint nativeInt_;
}

#pragma mark Package-Private

+ (IOSObjectArray *)values;
FOUNDATION_EXPORT IOSObjectArray *RepackagedAndroidGraphicsPath_DirectionEnum_values();

+ (RepackagedAndroidGraphicsPath_DirectionEnum *)valueOfWithNSString:(NSString *)name;
FOUNDATION_EXPORT RepackagedAndroidGraphicsPath_DirectionEnum *RepackagedAndroidGraphicsPath_DirectionEnum_valueOfWithNSString_(NSString *name);

- (id)copyWithZone:(NSZone *)zone;

@end

J2OBJC_STATIC_INIT(RepackagedAndroidGraphicsPath_DirectionEnum)

FOUNDATION_EXPORT RepackagedAndroidGraphicsPath_DirectionEnum *RepackagedAndroidGraphicsPath_DirectionEnum_values_[];

#define RepackagedAndroidGraphicsPath_DirectionEnum_CW RepackagedAndroidGraphicsPath_DirectionEnum_values_[RepackagedAndroidGraphicsPath_Direction_CW]
J2OBJC_ENUM_CONSTANT_GETTER(RepackagedAndroidGraphicsPath_DirectionEnum, CW)

#define RepackagedAndroidGraphicsPath_DirectionEnum_CCW RepackagedAndroidGraphicsPath_DirectionEnum_values_[RepackagedAndroidGraphicsPath_Direction_CCW]
J2OBJC_ENUM_CONSTANT_GETTER(RepackagedAndroidGraphicsPath_DirectionEnum, CCW)

J2OBJC_TYPE_LITERAL_HEADER(RepackagedAndroidGraphicsPath_DirectionEnum)

#endif // _RepackagedAndroidGraphicsPath_H_
