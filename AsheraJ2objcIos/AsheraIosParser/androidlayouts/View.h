//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/androidlayouts/repackaged/android/view/View.java
//

#ifndef _RepackagedAndroidViewView_H_
#define _RepackagedAndroidViewView_H_

#include "AbsSavedState.h"
#include "AccessibilityEventSource.h"
#include "Drawable.h"
#include "J2ObjC_header.h"
#include "KeyEvent.h"
#include "java/lang/Runnable.h"
#include "java/lang/annotation/Annotation.h"

@class IOSFloatArray;
@class IOSIntArray;
@class IOSObjectArray;
@class JavaLangThreadLocal;
@class JavaUtilArrayList;
@class RepackagedAndroidAnimationStateListAnimator;
@class RepackagedAndroidContentResResources;
@class RepackagedAndroidGraphicsBitmap;
@class RepackagedAndroidGraphicsBitmap_Config;
@class RepackagedAndroidGraphicsCanvas;
@class RepackagedAndroidGraphicsInsets;
@class RepackagedAndroidGraphicsMatrix;
@class RepackagedAndroidGraphicsOutline;
@class RepackagedAndroidGraphicsPaint;
@class RepackagedAndroidGraphicsPoint;
@class RepackagedAndroidGraphicsPorterDuff_ModeEnum;
@class RepackagedAndroidGraphicsRect;
@class RepackagedAndroidGraphicsRectF;
@class RepackagedAndroidGraphicsRegion;
@class RepackagedAndroidOsBundle;
@class RepackagedAndroidUtilProperty;
@class RepackagedAndroidUtilSparseArray;
@class RepackagedAndroidViewAccessibilityAccessibilityEvent;
@class RepackagedAndroidViewAccessibilityAccessibilityNodeInfo;
@class RepackagedAndroidViewAccessibilityAccessibilityNodeProvider;
@class RepackagedAndroidViewAccessibilityIterators_TextSegmentIterator;
@class RepackagedAndroidViewActionMode;
@class RepackagedAndroidViewAnimationTransformation;
@class RepackagedAndroidViewContextMenu;
@class RepackagedAndroidViewContextMenu_ContextMenuInfo;
@class RepackagedAndroidViewDisplay;
@class RepackagedAndroidViewDragEvent;
@class RepackagedAndroidViewGhostView;
@class RepackagedAndroidViewHardwareLayer;
@class RepackagedAndroidViewHardwareRenderer;
@class RepackagedAndroidViewInputEventConsistencyVerifier;
@class RepackagedAndroidViewInputmethodInputConnection;
@class RepackagedAndroidViewMotionEvent;
@class RepackagedAndroidViewRenderNode;
@class RepackagedAndroidViewTouchDelegate;
@class RepackagedAndroidViewViewGroup;
@class RepackagedAndroidViewViewGroup_LayoutParams;
@class RepackagedAndroidViewViewOutlineProvider;
@class RepackagedAndroidViewViewOverlay;
@class RepackagedAndroidViewViewPropertyAnimator;
@class RepackagedAndroidViewViewRootImpl;
@class RepackagedAndroidViewViewStructure;
@class RepackagedAndroidViewViewTreeObserver;
@class RepackagedAndroidViewViewTreeObserver_InternalInsetsInfo;
@class RepackagedAndroidViewView_AccessibilityDelegate;
@class RepackagedAndroidViewView_AttachInfo;
@class RepackagedAndroidViewView_DragShadowBuilder;
@class RepackagedAndroidViewView_ListenerInfo;
@class RepackagedAndroidViewView_SendViewStateChangedAccessibilityEvent;
@class RepackagedAndroidViewView_TransformationInfo;
@class RepackagedAndroidViewWindowId;
@class RepackagedAndroidViewWindowInsets;
@protocol JavaLangCharSequence;
@protocol JavaUtilList;
@protocol JavaUtilMap;
@protocol RepackagedAndroidContentClipData;
@protocol RepackagedAndroidContentContext;
@protocol RepackagedAndroidContentIntent;
@protocol RepackagedAndroidContentResColorStateList;
@protocol RepackagedAndroidContentResConfiguration;
@protocol RepackagedAndroidContentResTypedArray;
@protocol RepackagedAndroidOsHandler;
@protocol RepackagedAndroidOsIBinder;
@protocol RepackagedAndroidOsParcel;
@protocol RepackagedAndroidOsParcelable;
@protocol RepackagedAndroidOsParcelable_Creator;
@protocol RepackagedAndroidUtilAttributeSet;
@protocol RepackagedAndroidViewActionMode_Callback;
@protocol RepackagedAndroidViewAnimationAnimation;
@protocol RepackagedAndroidViewIWindow;
@protocol RepackagedAndroidViewIWindowId;
@protocol RepackagedAndroidViewIWindowSession;
@protocol RepackagedAndroidViewInputmethodEditorInfo;
@protocol RepackagedAndroidViewViewHierarchyEncoder;
@protocol RepackagedAndroidViewViewParent;
@protocol RepackagedAndroidViewView_AttachInfo_Callbacks;
@protocol RepackagedAndroidViewView_OnApplyWindowInsetsListener;
@protocol RepackagedAndroidViewView_OnAttachStateChangeListener;
@protocol RepackagedAndroidViewView_OnClickListener;
@protocol RepackagedAndroidViewView_OnContextClickListener;
@protocol RepackagedAndroidViewView_OnCreateContextMenuListener;
@protocol RepackagedAndroidViewView_OnDragListener;
@protocol RepackagedAndroidViewView_OnFocusChangeListener;
@protocol RepackagedAndroidViewView_OnGenericMotionListener;
@protocol RepackagedAndroidViewView_OnHoverListener;
@protocol RepackagedAndroidViewView_OnKeyListener;
@protocol RepackagedAndroidViewView_OnLayoutChangeListener;
@protocol RepackagedAndroidViewView_OnLongClickListener;
@protocol RepackagedAndroidViewView_OnScrollChangeListener;
@protocol RepackagedAndroidViewView_OnSystemUiVisibilityChangeListener;
@protocol RepackagedAndroidViewView_OnTouchListener;
@protocol RepackagedComAndroidInternalUtilPredicate;

#define RepackagedAndroidViewView_NO_ID -1
#define RepackagedAndroidViewView_VISIBLE 0
#define RepackagedAndroidViewView_INVISIBLE 4
#define RepackagedAndroidViewView_GONE 8
#define RepackagedAndroidViewView_VISIBILITY_MASK 12
#define RepackagedAndroidViewView_ENABLED 0
#define RepackagedAndroidViewView_DISABLED 32
#define RepackagedAndroidViewView_ENABLED_MASK 32
#define RepackagedAndroidViewView_WILL_NOT_DRAW 128
#define RepackagedAndroidViewView_DRAW_MASK 128
#define RepackagedAndroidViewView_SCROLLBARS_NONE 0
#define RepackagedAndroidViewView_SCROLLBARS_HORIZONTAL 256
#define RepackagedAndroidViewView_SCROLLBARS_VERTICAL 512
#define RepackagedAndroidViewView_SCROLLBARS_MASK 768
#define RepackagedAndroidViewView_FILTER_TOUCHES_WHEN_OBSCURED 1024
#define RepackagedAndroidViewView_OPTIONAL_FITS_SYSTEM_WINDOWS 2048
#define RepackagedAndroidViewView_FADING_EDGE_NONE 0
#define RepackagedAndroidViewView_FADING_EDGE_HORIZONTAL 4096
#define RepackagedAndroidViewView_FADING_EDGE_VERTICAL 8192
#define RepackagedAndroidViewView_FADING_EDGE_MASK 12288
#define RepackagedAndroidViewView_CLICKABLE 16384
#define RepackagedAndroidViewView_DRAWING_CACHE_ENABLED 32768
#define RepackagedAndroidViewView_SAVE_DISABLED 65536
#define RepackagedAndroidViewView_SAVE_DISABLED_MASK 65536
#define RepackagedAndroidViewView_WILL_NOT_CACHE_DRAWING 131072
#define RepackagedAndroidViewView_FOCUSABLE_IN_TOUCH_MODE 262144
#define RepackagedAndroidViewView_DRAWING_CACHE_QUALITY_LOW 524288
#define RepackagedAndroidViewView_DRAWING_CACHE_QUALITY_HIGH 1048576
#define RepackagedAndroidViewView_DRAWING_CACHE_QUALITY_AUTO 0
#define RepackagedAndroidViewView_DRAWING_CACHE_QUALITY_MASK 1572864
#define RepackagedAndroidViewView_LONG_CLICKABLE 2097152
#define RepackagedAndroidViewView_DUPLICATE_PARENT_STATE 4194304
#define RepackagedAndroidViewView_CONTEXT_CLICKABLE 8388608
#define RepackagedAndroidViewView_SCROLLBARS_INSIDE_OVERLAY 0
#define RepackagedAndroidViewView_SCROLLBARS_INSIDE_INSET 16777216
#define RepackagedAndroidViewView_SCROLLBARS_OUTSIDE_OVERLAY 33554432
#define RepackagedAndroidViewView_SCROLLBARS_OUTSIDE_INSET 50331648
#define RepackagedAndroidViewView_SCROLLBARS_INSET_MASK 16777216
#define RepackagedAndroidViewView_SCROLLBARS_OUTSIDE_MASK 33554432
#define RepackagedAndroidViewView_SCROLLBARS_STYLE_MASK 50331648
#define RepackagedAndroidViewView_KEEP_SCREEN_ON 67108864
#define RepackagedAndroidViewView_SOUND_EFFECTS_ENABLED 134217728
#define RepackagedAndroidViewView_HAPTIC_FEEDBACK_ENABLED 268435456
#define RepackagedAndroidViewView_PARENT_SAVE_DISABLED 536870912
#define RepackagedAndroidViewView_PARENT_SAVE_DISABLED_MASK 536870912
#define RepackagedAndroidViewView_FOCUSABLES_ALL 0
#define RepackagedAndroidViewView_FOCUSABLES_TOUCH_MODE 1
#define RepackagedAndroidViewView_FOCUS_BACKWARD 1
#define RepackagedAndroidViewView_FOCUS_FORWARD 2
#define RepackagedAndroidViewView_FOCUS_LEFT 17
#define RepackagedAndroidViewView_FOCUS_UP 33
#define RepackagedAndroidViewView_FOCUS_RIGHT 66
#define RepackagedAndroidViewView_FOCUS_DOWN 130
#define RepackagedAndroidViewView_MEASURED_SIZE_MASK 16777215
#define RepackagedAndroidViewView_MEASURED_STATE_MASK -16777216
#define RepackagedAndroidViewView_MEASURED_HEIGHT_STATE_SHIFT 16
#define RepackagedAndroidViewView_MEASURED_STATE_TOO_SMALL 16777216
#define RepackagedAndroidViewView_PFLAG_WANTS_FOCUS 1
#define RepackagedAndroidViewView_PFLAG_FOCUSED 2
#define RepackagedAndroidViewView_PFLAG_SELECTED 4
#define RepackagedAndroidViewView_PFLAG_IS_ROOT_NAMESPACE 8
#define RepackagedAndroidViewView_PFLAG_HAS_BOUNDS 16
#define RepackagedAndroidViewView_PFLAG_DRAWN 32
#define RepackagedAndroidViewView_PFLAG_DRAW_ANIMATION 64
#define RepackagedAndroidViewView_PFLAG_SKIP_DRAW 128
#define RepackagedAndroidViewView_PFLAG_REQUEST_TRANSPARENT_REGIONS 512
#define RepackagedAndroidViewView_PFLAG_DRAWABLE_STATE_DIRTY 1024
#define RepackagedAndroidViewView_PFLAG_MEASURED_DIMENSION_SET 2048
#define RepackagedAndroidViewView_PFLAG_FORCE_LAYOUT 4096
#define RepackagedAndroidViewView_PFLAG_LAYOUT_REQUIRED 8192
#define RepackagedAndroidViewView_PFLAG_DRAWING_CACHE_VALID 32768
#define RepackagedAndroidViewView_PFLAG_ANIMATION_STARTED 65536
#define RepackagedAndroidViewView_PFLAG_ALPHA_SET 262144
#define RepackagedAndroidViewView_PFLAG_SCROLL_CONTAINER 524288
#define RepackagedAndroidViewView_PFLAG_SCROLL_CONTAINER_ADDED 1048576
#define RepackagedAndroidViewView_PFLAG_DIRTY 2097152
#define RepackagedAndroidViewView_PFLAG_DIRTY_OPAQUE 4194304
#define RepackagedAndroidViewView_PFLAG_DIRTY_MASK 6291456
#define RepackagedAndroidViewView_PFLAG_OPAQUE_BACKGROUND 8388608
#define RepackagedAndroidViewView_PFLAG_OPAQUE_SCROLLBARS 16777216
#define RepackagedAndroidViewView_PFLAG_OPAQUE_MASK 25165824
#define RepackagedAndroidViewView_PFLAG_CANCEL_NEXT_UP_EVENT 67108864
#define RepackagedAndroidViewView_PFLAG_ACTIVATED 1073741824
#define RepackagedAndroidViewView_PFLAG_INVALIDATED ((jint) 0x80000000)
#define RepackagedAndroidViewView_PFLAG2_DRAG_CAN_ACCEPT 1
#define RepackagedAndroidViewView_PFLAG2_DRAG_HOVERED 2
#define RepackagedAndroidViewView_LAYOUT_DIRECTION_UNDEFINED -1
#define RepackagedAndroidViewView_LAYOUT_DIRECTION_LTR 0
#define RepackagedAndroidViewView_LAYOUT_DIRECTION_RTL 1
#define RepackagedAndroidViewView_LAYOUT_DIRECTION_INHERIT 2
#define RepackagedAndroidViewView_LAYOUT_DIRECTION_LOCALE 3
#define RepackagedAndroidViewView_PFLAG2_LAYOUT_DIRECTION_MASK_SHIFT 2
#define RepackagedAndroidViewView_PFLAG2_LAYOUT_DIRECTION_MASK 12
#define RepackagedAndroidViewView_PFLAG2_LAYOUT_DIRECTION_RESOLVED_RTL 16
#define RepackagedAndroidViewView_PFLAG2_LAYOUT_DIRECTION_RESOLVED 32
#define RepackagedAndroidViewView_PFLAG2_LAYOUT_DIRECTION_RESOLVED_MASK 48
#define RepackagedAndroidViewView_LAYOUT_DIRECTION_RESOLVED_DEFAULT 0
#define RepackagedAndroidViewView_TEXT_DIRECTION_INHERIT 0
#define RepackagedAndroidViewView_TEXT_DIRECTION_FIRST_STRONG 1
#define RepackagedAndroidViewView_TEXT_DIRECTION_ANY_RTL 2
#define RepackagedAndroidViewView_TEXT_DIRECTION_LTR 3
#define RepackagedAndroidViewView_TEXT_DIRECTION_RTL 4
#define RepackagedAndroidViewView_TEXT_DIRECTION_LOCALE 5
#define RepackagedAndroidViewView_TEXT_DIRECTION_FIRST_STRONG_LTR 6
#define RepackagedAndroidViewView_TEXT_DIRECTION_FIRST_STRONG_RTL 7
#define RepackagedAndroidViewView_TEXT_DIRECTION_RESOLVED_DEFAULT 1
#define RepackagedAndroidViewView_PFLAG2_TEXT_DIRECTION_MASK_SHIFT 6
#define RepackagedAndroidViewView_PFLAG2_TEXT_DIRECTION_MASK 448
#define RepackagedAndroidViewView_PFLAG2_TEXT_DIRECTION_RESOLVED 512
#define RepackagedAndroidViewView_PFLAG2_TEXT_DIRECTION_RESOLVED_MASK_SHIFT 10
#define RepackagedAndroidViewView_PFLAG2_TEXT_DIRECTION_RESOLVED_MASK 7168
#define RepackagedAndroidViewView_PFLAG2_TEXT_DIRECTION_RESOLVED_DEFAULT 1024
#define RepackagedAndroidViewView_TEXT_ALIGNMENT_INHERIT 0
#define RepackagedAndroidViewView_TEXT_ALIGNMENT_GRAVITY 1
#define RepackagedAndroidViewView_TEXT_ALIGNMENT_TEXT_START 2
#define RepackagedAndroidViewView_TEXT_ALIGNMENT_TEXT_END 3
#define RepackagedAndroidViewView_TEXT_ALIGNMENT_CENTER 4
#define RepackagedAndroidViewView_TEXT_ALIGNMENT_VIEW_START 5
#define RepackagedAndroidViewView_TEXT_ALIGNMENT_VIEW_END 6
#define RepackagedAndroidViewView_TEXT_ALIGNMENT_RESOLVED_DEFAULT 1
#define RepackagedAndroidViewView_PFLAG2_TEXT_ALIGNMENT_MASK_SHIFT 13
#define RepackagedAndroidViewView_PFLAG2_TEXT_ALIGNMENT_MASK 57344
#define RepackagedAndroidViewView_PFLAG2_TEXT_ALIGNMENT_RESOLVED 65536
#define RepackagedAndroidViewView_PFLAG2_TEXT_ALIGNMENT_RESOLVED_MASK_SHIFT 17
#define RepackagedAndroidViewView_PFLAG2_TEXT_ALIGNMENT_RESOLVED_MASK 917504
#define RepackagedAndroidViewView_PFLAG2_IMPORTANT_FOR_ACCESSIBILITY_SHIFT 20
#define RepackagedAndroidViewView_IMPORTANT_FOR_ACCESSIBILITY_AUTO 0
#define RepackagedAndroidViewView_IMPORTANT_FOR_ACCESSIBILITY_YES 1
#define RepackagedAndroidViewView_IMPORTANT_FOR_ACCESSIBILITY_NO 2
#define RepackagedAndroidViewView_IMPORTANT_FOR_ACCESSIBILITY_NO_HIDE_DESCENDANTS 4
#define RepackagedAndroidViewView_IMPORTANT_FOR_ACCESSIBILITY_DEFAULT 0
#define RepackagedAndroidViewView_PFLAG2_IMPORTANT_FOR_ACCESSIBILITY_MASK 7340032
#define RepackagedAndroidViewView_PFLAG2_ACCESSIBILITY_LIVE_REGION_SHIFT 23
#define RepackagedAndroidViewView_ACCESSIBILITY_LIVE_REGION_NONE 0
#define RepackagedAndroidViewView_ACCESSIBILITY_LIVE_REGION_POLITE 1
#define RepackagedAndroidViewView_ACCESSIBILITY_LIVE_REGION_ASSERTIVE 2
#define RepackagedAndroidViewView_ACCESSIBILITY_LIVE_REGION_DEFAULT 0
#define RepackagedAndroidViewView_PFLAG2_ACCESSIBILITY_LIVE_REGION_MASK 25165824
#define RepackagedAndroidViewView_PFLAG2_ACCESSIBILITY_FOCUSED 67108864
#define RepackagedAndroidViewView_PFLAG2_SUBTREE_ACCESSIBILITY_STATE_CHANGED 134217728
#define RepackagedAndroidViewView_PFLAG2_VIEW_QUICK_REJECTED 268435456
#define RepackagedAndroidViewView_PFLAG2_PADDING_RESOLVED 536870912
#define RepackagedAndroidViewView_PFLAG2_DRAWABLE_RESOLVED 1073741824
#define RepackagedAndroidViewView_PFLAG2_HAS_TRANSIENT_STATE ((jint) 0x80000000)
#define RepackagedAndroidViewView_ALL_RTL_PROPERTIES_RESOLVED 1610678816
#define RepackagedAndroidViewView_PFLAG3_VIEW_IS_ANIMATING_TRANSFORM 1
#define RepackagedAndroidViewView_PFLAG3_VIEW_IS_ANIMATING_ALPHA 2
#define RepackagedAndroidViewView_PFLAG3_IS_LAID_OUT 4
#define RepackagedAndroidViewView_PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT 8
#define RepackagedAndroidViewView_PFLAG3_CALLED_SUPER 16
#define RepackagedAndroidViewView_PFLAG3_APPLYING_INSETS 32
#define RepackagedAndroidViewView_PFLAG3_FITTING_SYSTEM_WINDOWS 64
#define RepackagedAndroidViewView_PFLAG3_NESTED_SCROLLING_ENABLED 128
#define RepackagedAndroidViewView_PFLAG3_SCROLL_INDICATOR_TOP 256
#define RepackagedAndroidViewView_PFLAG3_SCROLL_INDICATOR_BOTTOM 512
#define RepackagedAndroidViewView_PFLAG3_SCROLL_INDICATOR_LEFT 1024
#define RepackagedAndroidViewView_PFLAG3_SCROLL_INDICATOR_RIGHT 2048
#define RepackagedAndroidViewView_PFLAG3_SCROLL_INDICATOR_START 4096
#define RepackagedAndroidViewView_PFLAG3_SCROLL_INDICATOR_END 8192
#define RepackagedAndroidViewView_DRAG_MASK 3
#define RepackagedAndroidViewView_SCROLL_INDICATORS_NONE 0
#define RepackagedAndroidViewView_SCROLL_INDICATORS_PFLAG3_MASK 16128
#define RepackagedAndroidViewView_SCROLL_INDICATORS_TO_PFLAGS3_LSHIFT 8
#define RepackagedAndroidViewView_SCROLL_INDICATOR_TOP 1
#define RepackagedAndroidViewView_SCROLL_INDICATOR_BOTTOM 2
#define RepackagedAndroidViewView_SCROLL_INDICATOR_LEFT 4
#define RepackagedAndroidViewView_SCROLL_INDICATOR_RIGHT 8
#define RepackagedAndroidViewView_SCROLL_INDICATOR_START 16
#define RepackagedAndroidViewView_SCROLL_INDICATOR_END 32
#define RepackagedAndroidViewView_PFLAG3_ASSIST_BLOCKED 16384
#define RepackagedAndroidViewView_OVER_SCROLL_ALWAYS 0
#define RepackagedAndroidViewView_OVER_SCROLL_IF_CONTENT_SCROLLS 1
#define RepackagedAndroidViewView_OVER_SCROLL_NEVER 2
#define RepackagedAndroidViewView_SYSTEM_UI_FLAG_VISIBLE 0
#define RepackagedAndroidViewView_SYSTEM_UI_FLAG_LOW_PROFILE 1
#define RepackagedAndroidViewView_SYSTEM_UI_FLAG_HIDE_NAVIGATION 2
#define RepackagedAndroidViewView_SYSTEM_UI_FLAG_FULLSCREEN 4
#define RepackagedAndroidViewView_SYSTEM_UI_FLAG_LAYOUT_STABLE 256
#define RepackagedAndroidViewView_SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION 512
#define RepackagedAndroidViewView_SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN 1024
#define RepackagedAndroidViewView_SYSTEM_UI_FLAG_IMMERSIVE 2048
#define RepackagedAndroidViewView_SYSTEM_UI_FLAG_IMMERSIVE_STICKY 4096
#define RepackagedAndroidViewView_SYSTEM_UI_FLAG_LIGHT_STATUS_BAR 8192
#define RepackagedAndroidViewView_STATUS_BAR_HIDDEN 1
#define RepackagedAndroidViewView_STATUS_BAR_VISIBLE 0
#define RepackagedAndroidViewView_STATUS_BAR_DISABLE_EXPAND 65536
#define RepackagedAndroidViewView_STATUS_BAR_DISABLE_NOTIFICATION_ICONS 131072
#define RepackagedAndroidViewView_STATUS_BAR_DISABLE_NOTIFICATION_ALERTS 262144
#define RepackagedAndroidViewView_STATUS_BAR_DISABLE_NOTIFICATION_TICKER 524288
#define RepackagedAndroidViewView_STATUS_BAR_DISABLE_SYSTEM_INFO 1048576
#define RepackagedAndroidViewView_STATUS_BAR_DISABLE_HOME 2097152
#define RepackagedAndroidViewView_STATUS_BAR_DISABLE_BACK 4194304
#define RepackagedAndroidViewView_STATUS_BAR_DISABLE_CLOCK 8388608
#define RepackagedAndroidViewView_STATUS_BAR_DISABLE_RECENT 16777216
#define RepackagedAndroidViewView_STATUS_BAR_DISABLE_SEARCH 33554432
#define RepackagedAndroidViewView_STATUS_BAR_TRANSIENT 67108864
#define RepackagedAndroidViewView_NAVIGATION_BAR_TRANSIENT 134217728
#define RepackagedAndroidViewView_STATUS_BAR_UNHIDE 268435456
#define RepackagedAndroidViewView_NAVIGATION_BAR_UNHIDE 536870912
#define RepackagedAndroidViewView_STATUS_BAR_TRANSLUCENT 1073741824
#define RepackagedAndroidViewView_NAVIGATION_BAR_TRANSLUCENT ((jint) 0x80000000)
#define RepackagedAndroidViewView_RECENT_APPS_VISIBLE 16384
#define RepackagedAndroidViewView_SYSTEM_UI_TRANSPARENT 32768
#define RepackagedAndroidViewView_PUBLIC_STATUS_BAR_VISIBILITY_MASK 16383
#define RepackagedAndroidViewView_SYSTEM_UI_CLEARABLE_FLAGS 7
#define RepackagedAndroidViewView_SYSTEM_UI_LAYOUT_FLAGS 1536
#define RepackagedAndroidViewView_FIND_VIEWS_WITH_TEXT 1
#define RepackagedAndroidViewView_FIND_VIEWS_WITH_CONTENT_DESCRIPTION 2
#define RepackagedAndroidViewView_FIND_VIEWS_WITH_ACCESSIBILITY_NODE_PROVIDERS 4
#define RepackagedAndroidViewView_ACCESSIBILITY_CURSOR_POSITION_UNDEFINED -1
#define RepackagedAndroidViewView_SCREEN_STATE_OFF 0
#define RepackagedAndroidViewView_SCREEN_STATE_ON 1
#define RepackagedAndroidViewView_SCROLL_AXIS_NONE 0
#define RepackagedAndroidViewView_SCROLL_AXIS_HORIZONTAL 1
#define RepackagedAndroidViewView_SCROLL_AXIS_VERTICAL 2
#define RepackagedAndroidViewView_DRAG_FLAG_GLOBAL 1
#define RepackagedAndroidViewView_SCROLLBAR_POSITION_DEFAULT 0
#define RepackagedAndroidViewView_SCROLLBAR_POSITION_LEFT 1
#define RepackagedAndroidViewView_SCROLLBAR_POSITION_RIGHT 2
#define RepackagedAndroidViewView_LAYER_TYPE_NONE 0
#define RepackagedAndroidViewView_LAYER_TYPE_SOFTWARE 1
#define RepackagedAndroidViewView_LAYER_TYPE_HARDWARE 2

/**
 @brief <p> This class represents the basic building block for user interface components.
 A View occupies a rectangular area on the screen and is responsible for drawing and event handling. View is the base class for <em>widgets</em>, which are used to create interactive UI components (buttons, text fields, etc.). The repackaged.android.view.ViewGroup subclass is the base class for <em>layouts</em>, which are invisible containers that hold other Views (or other ViewGroups) and define their layout properties. </p> <div class="special reference"> <h3>Developer Guides</h3> <p>For information about using this class to develop your application's user interface, read the <a href="  guide/topics/ui/index.html">User Interface</a> developer guide. </div> <a name="Using"></a> <h3>Using Views</h3> <p> All of the views in a window are arranged in a single tree. You can add views either from code or by specifying a tree of views in one or more XML layout files. There are many specialized subclasses of views that act as controls or are capable of displaying text, images, or other content. </p> <p> Once you have created a tree of views, there are typically a few types of common operations you may wish to perform: <ul> <li><strong>Set properties:</strong> for example setting the text of a android.widget.TextView . The available properties and the methods that set them will vary among the different subclasses of views. Note that properties that are known at build time can be set in the XML layout files.</li> <li><strong>Set focus:</strong> The framework will handled moving focus in response to user input. To force focus to a specific view, call #requestFocus .</li> <li><strong>Set up listeners:</strong> Views allow clients to set listeners that will be notified when something interesting happens to the view. For example, all views will let you set a listener to be notified when the view gains or loses focus. You can register such a listener using #setOnFocusChangeListener(repackaged.android.view.View.OnFocusChangeListener) . Other view subclasses offer more specialized listeners. For example, a Button exposes a listener to notify clients when the button is clicked.</li> <li><strong>Set visibility:</strong> You can hide or show views using #setVisibility(int) .</li> </ul> </p> <p><em> Note: The Android framework is responsible for measuring, laying out and drawing views. You should not call methods that perform these actions on views yourself unless you are actually implementing a repackaged.android.view.ViewGroup . </em></p> <a name="Lifecycle"></a> <h3>Implementing a Custom View</h3> <p> To implement a custom view, you will usually begin by providing overrides for some of the standard methods that the framework calls on all views. You do not need to override all of these methods. In fact, you can start by just overriding #onDraw(repackaged.android.graphics.Canvas) . <table border="2" width="85%" align="center" cellpadding="5"> <thead> <tr><th>Category</th> <th>Methods</th> <th>Description</th></tr> </thead> <tbody> <tr> <td rowspan="2">Creation</td> <td>Constructors</td> <td>There is a form of the constructor that are called when the view is created from code and a form that is called when the view is inflated from a layout file. The second form should parse and apply any attributes defined in the layout file. </td> </tr> <tr> <td><code> #onFinishInflate() </code></td> <td>Called after a view and all of its children has been inflated from XML.</td> </tr> <tr> <td rowspan="3">Layout</td> <td><code> #onMeasure(int,int) </code></td> <td>Called to determine the size requirements for this view and all of its children. </td> </tr> <tr> <td><code> #onLayout(boolean,int,int,int,int) </code></td> <td>Called when this view should assign a size and position to all of its children. </td> </tr> <tr> <td><code> #onSizeChanged(int,int,int,int) </code></td> <td>Called when the size of this view has changed. </td> </tr> <tr> <td>Drawing</td> <td><code> #onDraw(repackaged.android.graphics.Canvas) </code></td> <td>Called when the view should render its content. </td> </tr> <tr> <td rowspan="4">Event processing</td> <td><code> #onKeyDown(int,KeyEvent) </code></td> <td>Called when a new hardware key event occurs. </td> </tr> <tr> <td><code> #onKeyUp(int,KeyEvent) </code></td> <td>Called when a hardware key up event occurs. </td> </tr> <tr> <td><code> #onTrackballEvent(MotionEvent) </code></td> <td>Called when a trackball motion event occurs. </td> </tr> <tr> <td><code> #onTouchEvent(MotionEvent) </code></td> <td>Called when a touch screen motion event occurs. </td> </tr> <tr> <td rowspan="2">Focus</td> <td><code> #onFocusChanged(boolean,int,repackaged.android.graphics.Rect) </code></td> <td>Called when the view gains or loses focus. </td> </tr> <tr> <td><code> #onWindowFocusChanged(boolean) </code></td> <td>Called when the window containing the view gains or loses focus. </td> </tr> <tr> <td rowspan="3">Attaching</td> <td><code> #onAttachedToWindow() </code></td> <td>Called when the view is attached to a window. </td> </tr> <tr> <td><code> #onDetachedFromWindow </code></td> <td>Called when the view is detached from its window. </td> </tr> <tr> <td><code> #onWindowVisibilityChanged(int) </code></td> <td>Called when the visibility of the window containing the view has changed. </td> </tr> </tbody> </table> </p> <a name="IDs"></a> <h3>IDs</h3> Views may have an integer id associated with them. These ids are typically assigned in the layout XML files, and are used to find specific views within the view tree. A common pattern is to: <ul> <li>Define a Button in the layout file and assign it a unique ID. <pre> &lt;Button android:id="@@+id/my_button" android:layout_width="wrap_content" android:layout_height="wrap_content" android:text="@@string/my_button_text"/&gt; </pre></li> <li>From the onCreate method of an Activity, find the Button <pre class="prettyprint"> Button myButton = (Button) findViewById(R.id.my_button); </pre></li> </ul> <p> View IDs need not be unique throughout the tree, but it is good practice to ensure that they are at least unique within the part of the tree you are searching. </p> <a name="Position"></a> <h3>Position</h3> <p> The geometry of a view is that of a rectangle. A view has a location, expressed as a pair of <em>left</em> and <em>top</em> coordinates, and two dimensions, expressed as a width and a height. The unit for location and dimensions is the pixel. </p> <p> It is possible to retrieve the location of a view by invoking the methods #getLeft() and #getTop() . The former returns the left, or X, coordinate of the rectangle representing the view. The latter returns the top, or Y, coordinate of the rectangle representing the view. These methods both return the location of the view relative to its parent. For instance, when getLeft() returns 20, that means the view is located 20 pixels to the right of the left edge of its direct parent. </p> <p> In addition, several convenience methods are offered to avoid unnecessary computations, namely #getRight() and #getBottom() . These methods return the coordinates of the right and bottom edges of the rectangle representing the view. For instance, calling #getRight() is similar to the following computation: <code>getLeft() + getWidth()</code> (see <a href="#SizePaddingMargins">Size</a> for more information about the width.) </p> <a name="SizePaddingMargins"></a> <h3>Size, padding and margins</h3> <p> The size of a view is expressed with a width and a height. A view actually possess two pairs of width and height values. </p> <p> The first pair is known as <em>measured width</em> and <em>measured height</em>. These dimensions define how big a view wants to be within its parent (see <a href="#Layout">Layout</a> for more details.) The measured dimensions can be obtained by calling #getMeasuredWidth() and #getMeasuredHeight() . </p> <p> The second pair is simply known as <em>width</em> and <em>height</em>, or sometimes <em>drawing width</em> and <em>drawing height</em>. These dimensions define the actual size of the view on screen, at drawing time and after layout. These values may, but do not have to, be different from the measured width and height. The width and height can be obtained by calling #getWidth() and #getHeight() . </p> <p> To measure its dimensions, a view takes into account its padding. The padding is expressed in pixels for the left, top, right and bottom parts of the view. Padding can be used to offset the content of the view by a specific amount of pixels. For instance, a left padding of 2 will push the view's content by 2 pixels to the right of the left edge. Padding can be set using the #setPadding(int,int,int,int) or #setPaddingRelative(int,int,int,int) method and queried by calling #getPaddingLeft() , #getPaddingTop() , #getPaddingRight() , #getPaddingBottom() , #getPaddingStart() , #getPaddingEnd() . </p> <p> Even though a view can define a padding, it does not provide any support for margins. However, view groups provide such a support. Refer to repackaged.android.view.ViewGroup and repackaged.android.view.ViewGroup.MarginLayoutParams for further information. </p> <a name="Layout"></a> <h3>Layout</h3> <p> Layout is a two pass process: a measure pass and a layout pass. The measuring pass is implemented in #measure(int,int) and is a top-down traversal of the view tree. Each view pushes dimension specifications down the tree during the recursion. At the end of the measure pass, every view has stored its measurements. The second pass happens in #layout(int,int,int,int) and is also top-down. During this pass each parent is responsible for positioning all of its children using the sizes computed in the measure pass. </p> <p> When a view's measure() method returns, its #getMeasuredWidth() and #getMeasuredHeight() values must be set, along with those for all of that view's descendants. A view's measured width and measured height values must respect the constraints imposed by the view's parents. This guarantees that at the end of the measure pass, all parents accept all of their children's measurements. A parent view may call measure() more than once on its children. For example, the parent may measure each child once with unspecified dimensions to find out how big they want to be, then call measure() on them again with actual numbers if the sum of all the children's unconstrained sizes is too big or too small. </p> <p> The measure pass uses two classes to communicate dimensions. The MeasureSpec class is used by views to tell their parents how they want to be measured and positioned. The base LayoutParams class just describes how big the view wants to be for both width and height. For each dimension, it can specify one of: <ul> <li> an exact number <li>MATCH_PARENT, which means the view wants to be as big as its parent (minus padding) <li> WRAP_CONTENT, which means that the view wants to be just big enough to enclose its content (plus padding). </ul> There are subclasses of LayoutParams for different subclasses of ViewGroup. For example, AbsoluteLayout has its own subclass of LayoutParams which adds an X and Y value. </p> <p> MeasureSpecs are used to push requirements down the tree from parent to child. A MeasureSpec can be in one of three modes: <ul> <li>UNSPECIFIED: This is used by a parent to determine the desired dimension of a child view. For example, a LinearLayout may call measure() on its child with the height set to UNSPECIFIED and a width of EXACTLY 240 to find out how tall the child view wants to be given a width of 240 pixels. <li>EXACTLY: This is used by the parent to impose an exact size on the child. The child must use this size, and guarantee that all of its descendants will fit within this size. <li>AT_MOST: This is used by the parent to impose a maximum size on the child. The child must guarantee that it and all of its descendants will fit within this size. </ul> </p> <p> To initiate a layout, call #requestLayout . This method is typically called by a view on itself when it believes that is can no longer fit within its current bounds. </p> <a name="Drawing"></a> <h3>Drawing</h3> <p> Drawing is handled by walking the tree and recording the drawing commands of any View that needs to update. After this, the drawing commands of the entire tree are issued to screen, clipped to the newly damaged area. </p> <p> The tree is largely recorded and drawn in order, with parents drawn before (i.e., behind) their children, with siblings drawn in the order they appear in the tree. If you set a background drawable for a View, then the View will draw it before calling back to its <code>onDraw()</code> method. The child drawing order can be overridden with ViewGroup#setChildrenDrawingOrderEnabled(boolean) custom child drawing order in a ViewGroup, and with #setZ(float) custom Z values} set on Views. </p> <p> To force a view to draw, call #invalidate() . </p> <a name="EventHandlingThreading"></a> <h3>Event Handling and Threading</h3> <p> The basic cycle of a view is as follows: <ol> <li>An event comes in and is dispatched to the appropriate view. The view handles the event and notifies any listeners.</li> <li>If in the course of processing the event, the view's bounds may need to be changed, the view will call #requestLayout() .</li> <li>Similarly, if in the course of processing the event the view's appearance may need to be changed, the view will call #invalidate() .</li> <li>If either #requestLayout() or #invalidate() were called, the framework will take care of measuring, laying out, and drawing the tree as appropriate.</li> </ol> </p> <p><em>Note: The entire view tree is single threaded. You must always be on the UI thread when calling any method on any view.</em> If you are doing work on other threads and want to update the state of a view from that thread, you should use a Handler . </p> <a name="FocusHandling"></a> <h3>Focus Handling</h3> <p> The framework will handle routine focus movement in response to user input. This includes changing the focus as views are removed or hidden, or as new views become available. Views indicate their willingness to take focus through the #isFocusable method. To change whether a view can take focus, call #setFocusable(boolean) .  When in touch mode (see notes below) views indicate whether they still would like focus via #isFocusableInTouchMode and can change this via #setFocusableInTouchMode(boolean) . </p> <p> Focus movement is based on an algorithm which finds the nearest neighbor in a given direction. In rare cases, the default algorithm may not match the intended behavior of the developer. In these situations, you can provide explicit overrides by using these XML attributes in the layout file: <pre> nextFocusDown nextFocusLeft nextFocusRight nextFocusUp </pre> </p> <p> To get a particular view to take focus, call #requestFocus() . </p> <a name="TouchMode"></a> <h3>Touch Mode</h3> <p> When a user is navigating a user interface via directional keys such as a D-pad, it is necessary to give focus to actionable items such as buttons so the user can see what will take input.  If the device has touch capabilities, however, and the user begins interacting with the interface by touching it, it is no longer necessary to always highlight, or give focus to, a particular view.  This motivates a mode for interaction named 'touch mode'. </p> <p> For a touch capable device, once the user touches the screen, the device will enter touch mode.  From this point onward, only views for which #isFocusableInTouchMode is true will be focusable, such as text editing widgets. Other views that are touchable, like buttons, will not take focus when touched; they will only fire the on click listeners. </p> <p> Any time a user hits a directional key, such as a D-pad direction, the view device will exit touch mode, and find a view to take focus, so that the user may resume interacting with the user interface without touching the screen again. </p> <p> The touch mode state is maintained across android.app.Activity s.  Call #isInTouchMode to see whether the device is currently in touch mode. </p> <a name="Scrolling"></a> <h3>Scrolling</h3> <p> The framework provides basic support for views that wish to internally scroll their content. This includes keeping track of the X and Y scroll offset as well as mechanisms for drawing scrollbars. See #scrollBy(int,int) , #scrollTo(int,int) , and #awakenScrollBars() for more details. </p> <a name="Tags"></a> <h3>Tags</h3> <p> Unlike IDs, tags are not used to identify views. Tags are essentially an extra piece of information that can be associated with a view. They are most often used as a convenience to store data related to views in the views themselves rather than by putting them in a separate structure. </p> <a name="Properties"></a> <h3>Properties</h3> <p> The View class exposes an #ALPHA property, as well as several transform-related properties, such as #TRANSLATION_X and #TRANSLATION_Y . These properties are available both in the Property form as well as in similarly-named setter/getter methods (such as #setAlpha(float) for #ALPHA ). These properties can be used to set persistent state associated with these rendering-related properties on the view. The properties and methods can also be used in conjunction with android.animation.Animator Animator -based animations, described more in the <a href="#Animation">Animation</a> section. </p> <a name="Animation"></a> <h3>Animation</h3> <p> Starting with Android 3.0, the preferred way of animating views is to use the repackaged.android.animation package APIs. These android.animation.Animator Animator -based classes change actual properties of the View object, such as #setAlpha(float) alpha and #setTranslationX(float) translationX . This behavior is contrasted to that of the pre-3.0 repackaged.android.view.animation.Animation Animation -based classes, which instead animate only how the view is drawn on the display. In particular, the ViewPropertyAnimator class makes animating these View properties particularly easy and efficient. </p> <p> Alternatively, you can use the pre-3.0 animation classes to animate how Views are rendered. You can attach an Animation object to a view using #setAnimation(Animation) or #startAnimation(Animation) . The animation can alter the scale, rotation, translation and alpha of a view over time. If the animation is attached to a view that has children, the animation will affect the entire subtree rooted by that node. When an animation is started, the framework will take care of redrawing the appropriate views until the animation completes. </p> <a name="Security"></a> <h3>Security</h3> <p> Sometimes it is essential that an application be able to verify that an action is being performed with the full knowledge and consent of the user, such as granting a permission request, making a purchase or clicking on an advertisement. Unfortunately, a malicious application could try to spoof the user into performing these actions, unaware, by concealing the intended purpose of the view. As a remedy, the framework offers a touch filtering mechanism that can be used to improve the security of views that provide access to sensitive functionality. </p><p> To enable touch filtering, call #setFilterTouchesWhenObscured(boolean) or set the android:filterTouchesWhenObscured layout attribute to true.  When enabled, the framework will discard touches that are received whenever the view's window is obscured by another visible window.  As a result, the view will not receive touches whenever a toast, dialog or other window appears above the view's window. </p><p> For more fine-grained control over security, consider overriding the #onFilterTouchEventForSecurity(MotionEvent) method to implement your own security policy. See also MotionEvent#FLAG_WINDOW_IS_OBSCURED . </p>
 ref android.R.styleable#View_alpha
 ref android.R.styleable#View_background
 ref android.R.styleable#View_clickable
 ref android.R.styleable#View_contentDescription
 ref android.R.styleable#View_drawingCacheQuality
 ref android.R.styleable#View_duplicateParentState
 ref android.R.styleable#View_id
 ref android.R.styleable#View_requiresFadingEdge
 ref android.R.styleable#View_fadeScrollbars
 ref android.R.styleable#View_fadingEdgeLength
 ref android.R.styleable#View_filterTouchesWhenObscured
 ref android.R.styleable#View_fitsSystemWindows
 ref android.R.styleable#View_isScrollContainer
 ref android.R.styleable#View_focusable
 ref android.R.styleable#View_focusableInTouchMode
 ref android.R.styleable#View_hapticFeedbackEnabled
 ref android.R.styleable#View_keepScreenOn
 ref android.R.styleable#View_layerType
 ref android.R.styleable#View_layoutDirection
 ref android.R.styleable#View_longClickable
 ref android.R.styleable#View_minHeight
 ref android.R.styleable#View_minWidth
 ref android.R.styleable#View_nextFocusDown
 ref android.R.styleable#View_nextFocusLeft
 ref android.R.styleable#View_nextFocusRight
 ref android.R.styleable#View_nextFocusUp
 ref android.R.styleable#View_onClick
 ref android.R.styleable#View_padding
 ref android.R.styleable#View_paddingBottom
 ref android.R.styleable#View_paddingLeft
 ref android.R.styleable#View_paddingRight
 ref android.R.styleable#View_paddingTop
 ref android.R.styleable#View_paddingStart
 ref android.R.styleable#View_paddingEnd
 ref android.R.styleable#View_saveEnabled
 ref android.R.styleable#View_rotation
 ref android.R.styleable#View_rotationX
 ref android.R.styleable#View_rotationY
 ref android.R.styleable#View_scaleX
 ref android.R.styleable#View_scaleY
 ref android.R.styleable#View_scrollX
 ref android.R.styleable#View_scrollY
 ref android.R.styleable#View_scrollbarSize
 ref android.R.styleable#View_scrollbarStyle
 ref android.R.styleable#View_scrollbars
 ref android.R.styleable#View_scrollbarDefaultDelayBeforeFade
 ref android.R.styleable#View_scrollbarFadeDuration
 ref android.R.styleable#View_scrollbarTrackHorizontal
 ref android.R.styleable#View_scrollbarThumbHorizontal
 ref android.R.styleable#View_scrollbarThumbVertical
 ref android.R.styleable#View_scrollbarTrackVertical
 ref android.R.styleable#View_scrollbarAlwaysDrawHorizontalTrack
 ref android.R.styleable#View_scrollbarAlwaysDrawVerticalTrack
 ref android.R.styleable#View_stateListAnimator
 ref android.R.styleable#View_transitionName
 ref android.R.styleable#View_soundEffectsEnabled
 ref android.R.styleable#View_tag
 ref android.R.styleable#View_textAlignment
 ref android.R.styleable#View_textDirection
 ref android.R.styleable#View_transformPivotX
 ref android.R.styleable#View_transformPivotY
 ref android.R.styleable#View_translationX
 ref android.R.styleable#View_translationY
 ref android.R.styleable#View_translationZ
 ref android.R.styleable#View_visibility
 */
@interface RepackagedAndroidViewView : NSObject < RepackagedAndroidGraphicsDrawableDrawable_Callback, RepackagedAndroidViewKeyEvent_Callback, RepackagedAndroidViewAccessibilityAccessibilityEventSource > {
 @public
  /**
   @brief The animation currently associated with this view.
   */
  id<RepackagedAndroidViewAnimationAnimation> mCurrentAnimation_;
  /**
   @brief Width as measured during measure pass.
   */
  jint mMeasuredWidth_;
  /**
   @brief Height as measured during measure pass.
   */
  jint mMeasuredHeight_;
  /**
   @brief Flag to indicate that this view was marked INVALIDATED, or had its display list invalidated, prior to the current drawing iteration.
   If true, the view must re-draw its display list. This flag, used only when hw accelerated, allows us to clear the flag while retaining this information until it's needed (at getDisplayList() time and in drawChild(), when we decide to draw a view's children's display lists into our own).
   */
  jboolean mRecreateDisplayList_;
  /**
   @brief The view's identifier.
   */
  jint mID_;
  /**
   @brief The stable ID of this view for accessibility purposes.
   */
  jint mAccessibilityViewId_;
  RepackagedAndroidViewView_SendViewStateChangedAccessibilityEvent *mSendViewStateChangedAccessibilityEvent_;
  /**
   @brief The view's tag.
   */
  id mTag_;
  /**
   @brief The parent this view is attached to.
   */
  id<RepackagedAndroidViewViewParent> mParent_;
  /**
   
   */
  RepackagedAndroidViewView_AttachInfo *mAttachInfo_;
  /**
   
   */
  jint mPrivateFlags_;
  jint mPrivateFlags2_;
  jint mPrivateFlags3_;
  /**
   @brief This view's request for the visibility of the status bar.
   */
  jint mSystemUiVisibility_;
  /**
   @brief Reference count for transient state.
   */
  jint mTransientStateCount_;
  /**
   @brief Count of how many windows this view has been attached to.
   */
  jint mWindowAttachCount_;
  /**
   @brief The layout parameters associated with this view and used by the parent repackaged.android.view.ViewGroup to determine how this view should be laid out.
   */
  RepackagedAndroidViewViewGroup_LayoutParams *mLayoutParams_;
  /**
   @brief The view flags hold various views states.
   */
  jint mViewFlags_;
  RepackagedAndroidViewView_TransformationInfo *mTransformationInfo_;
  /**
   @brief Current clip bounds. to which all drawing of this view are constrained.
   */
  RepackagedAndroidGraphicsRect *mClipBounds_;
  /**
   @brief The distance in pixels from the left edge of this view's parent to the left edge of this view.
   */
  jint mLeft_;
  /**
   @brief The distance in pixels from the left edge of this view's parent to the right edge of this view.
   */
  jint mRight_;
  /**
   @brief The distance in pixels from the top edge of this view's parent to the top edge of this view.
   */
  jint mTop_;
  /**
   @brief The distance in pixels from the top edge of this view's parent to the bottom edge of this view.
   */
  jint mBottom_;
  /**
   @brief The offset, in pixels, by which the content of this view is scrolled horizontally.
   */
  jint mScrollX_;
  /**
   @brief The offset, in pixels, by which the content of this view is scrolled vertically.
   */
  jint mScrollY_;
  /**
   @brief The left padding in pixels, that is the distance in pixels between the left edge of this view and the left edge of its content.
   */
  jint mPaddingLeft_;
  /**
   @brief The right padding in pixels, that is the distance in pixels between the right edge of this view and the right edge of its content.
   */
  jint mPaddingRight_;
  /**
   @brief The top padding in pixels, that is the distance in pixels between the top edge of this view and the top edge of its content.
   */
  jint mPaddingTop_;
  /**
   @brief The bottom padding in pixels, that is the distance in pixels between the bottom edge of this view and the bottom edge of its content.
   */
  jint mPaddingBottom_;
  /**
   @brief Cache the paddingRight set by the user to append to the scrollbar's size.
   */
  jint mUserPaddingRight_;
  /**
   @brief Cache the paddingBottom set by the user to append to the scrollbar's size.
   */
  jint mUserPaddingBottom_;
  /**
   @brief Cache the paddingLeft set by the user to append to the scrollbar's size.
   */
  jint mUserPaddingLeft_;
  /**
   @brief Cache the paddingStart set by the user to append to the scrollbar's size.
   */
  jint mUserPaddingStart_;
  /**
   @brief Cache the paddingEnd set by the user to append to the scrollbar's size.
   */
  jint mUserPaddingEnd_;
  /**
   @brief Cache initial left padding.
   */
  jint mUserPaddingLeftInitial_;
  /**
   @brief Cache initial right padding.
   */
  jint mUserPaddingRightInitial_;
  /**
   */
  jint mOldWidthMeasureSpec_;
  /**
   */
  jint mOldHeightMeasureSpec_;
  RepackagedAndroidViewView_ListenerInfo *mListenerInfo_;
  /**
   @brief The application environment this view lives in.
   This field should be made private, so it is hidden from the SDK.
   */
  id<RepackagedAndroidContentContext> mContext_;
  RepackagedAndroidViewViewOutlineProvider *mOutlineProvider_;
  /**
   @brief When this view has focus and the next focus is #FOCUS_FORWARD , the user may specify which view to go to next.
   */
  jint mNextFocusForwardId_;
  jint mLayerType_;
  RepackagedAndroidGraphicsPaint *mLayerPaint_;
  /**
   @brief Set to true when drawing cache is enabled and cannot be created.
   */
  jboolean mCachingFailed_;
  /**
   @brief RenderNode holding View properties, potentially holding a DisplayList of View content.
   <p> When non-null and valid, this is expected to contain an up-to-date copy of the View content. Its DisplayList content is cleared on temporary detach and reset on cleanup.
   */
  RepackagedAndroidViewRenderNode *mRenderNode_;
  /**
   @brief Delegate for injecting accessibility functionality.
   */
  RepackagedAndroidViewView_AccessibilityDelegate *mAccessibilityDelegate_;
  /**
   @brief The view's overlay layer.
   Developers get a reference to the overlay via getOverlay() and add/remove objects to/from the overlay directly through the Overlay methods.
   */
  RepackagedAndroidViewViewOverlay *mOverlay_;
  /**
   @brief Consistency verifier for debugging purposes.
   */
  RepackagedAndroidViewInputEventConsistencyVerifier *mInputEventConsistencyVerifier_;
  /**
   @brief An overlay is going to draw this View instead of being drawn as part of this View's parent. mGhostView is the View in the Overlay that must be invalidated when this view is invalidated.
   */
  RepackagedAndroidViewGhostView *mGhostView_;
  /**
   @brief Holds pairs of adjacent attribute data: attribute name followed by its value.
   */
  IOSObjectArray *mAttributes_;
  /**
   */
  NSString *mStartActivityRequestWho_;
}

#pragma mark Public

/**
 @brief Simple constructor to use when creating a view from code.
 @param context The Context the view is running in, through which it can access the current theme, resources, etc.
 */
- (instancetype)initWithRepackagedAndroidContentContext:(id<RepackagedAndroidContentContext>)context;

/**
 @brief Constructor that is called when inflating a view from XML.
 This is called when a view is being constructed from an XML file, supplying attributes that were specified in the XML file. This version uses a default style of 0, so the only attribute values applied are those in the Context's Theme and the given AttributeSet. <p> The method onFinishInflate() will be called after all children have been added.
 @param context The Context the view is running in, through which it can access the current theme, resources, etc.
 @param attrs The attributes of the XML tag that is inflating the view.
 */
- (instancetype)initWithRepackagedAndroidContentContext:(id<RepackagedAndroidContentContext>)context
                  withRepackagedAndroidUtilAttributeSet:(id<RepackagedAndroidUtilAttributeSet>)attrs;

/**
 @brief Perform inflation from XML and apply a class-specific base style from a theme attribute.
 This constructor of View allows subclasses to use their own base style when they are inflating. For example, a Button class's constructor would call this version of the super class constructor and supply <code>R.attr.buttonStyle</code> for <var>defStyleAttr</var>; this allows the theme's button style to modify all of the base view attributes (in particular its background) as well as the Button class's attributes.
 @param context The Context the view is running in, through which it can access the current theme, resources, etc.
 @param attrs The attributes of the XML tag that is inflating the view.
 @param defStyleAttr An attribute in the current theme that contains a reference to a style resource that supplies default values for the view. Can be 0 to not look for defaults.
 */
- (instancetype)initWithRepackagedAndroidContentContext:(id<RepackagedAndroidContentContext>)context
                  withRepackagedAndroidUtilAttributeSet:(id<RepackagedAndroidUtilAttributeSet>)attrs
                                                withInt:(jint)defStyleAttr;

/**
 @brief Perform inflation from XML and apply a class-specific base style from a theme attribute or style resource.
 This constructor of View allows subclasses to use their own base style when they are inflating. <p> When determining the final value of a particular attribute, there are four inputs that come into play: <ol> <li>Any attribute values in the given AttributeSet. <li>The style resource specified in the AttributeSet (named "style"). <li>The default style specified by <var>defStyleAttr</var>. <li>The default style specified by <var>defStyleRes</var>. <li>The base values in this theme. </ol> <p> Each of these inputs is considered in-order, with the first listed taking precedence over the following ones. In other words, if in the AttributeSet you have supplied <code>&lt;Button * textColor="#ff000000"&gt;</code> , then the button's text will <em>always</em> be black, regardless of what is specified in any of the styles.
 @param context The Context the view is running in, through which it can access the current theme, resources, etc.
 @param attrs The attributes of the XML tag that is inflating the view.
 @param defStyleAttr An attribute in the current theme that contains a reference to a style resource that supplies default values for the view. Can be 0 to not look for defaults.
 @param defStyleRes A resource identifier of a style resource that supplies default values for the view, used only if defStyleAttr is 0 or can not be found in the theme. Can be 0 to not look for defaults.
 */
- (instancetype)initWithRepackagedAndroidContentContext:(id<RepackagedAndroidContentContext>)context
                  withRepackagedAndroidUtilAttributeSet:(id<RepackagedAndroidUtilAttributeSet>)attrs
                                                withInt:(jint)defStyleAttr
                                                withInt:(jint)defStyleRes;

/**
 @brief Adds the children of this View relevant for accessibility to the given list as output.
 Since some Views are not important for accessibility the added child views are not necessarily direct children of this view, rather they are the first level of descendants important for accessibility.
 @param outChildren The output list that will receive children for accessibility.
 */
- (void)addChildrenForAccessibilityWithJavaUtilArrayList:(JavaUtilArrayList *)outChildren;

/**
 @brief Add any focusable views that are descendants of this view (possibly including this view if it is focusable itself) to views.
 If we are in touch mode, only add views that are also focusable in touch mode.
 @param views Focusable views found so far
 @param direction The direction of the focus
 */
- (void)addFocusablesWithJavaUtilArrayList:(JavaUtilArrayList *)views
                                   withInt:(jint)direction;

/**
 @brief Adds any focusable views that are descendants of this view (possibly including this view if it is focusable itself) to views.
 This method adds all focusable views regardless if we are in touch mode or only views focusable in touch mode if we are in touch mode or only views that can take accessibility focus if accessibility is enabled depending on the focusable mode parameter.
 @param views Focusable views found so far or null if all we are interested is the number of focusables.
 @param direction The direction of the focus.
 @param focusableMode The type of focusables to be added.
 */
- (void)addFocusablesWithJavaUtilArrayList:(JavaUtilArrayList *)views
                                   withInt:(jint)direction
                                   withInt:(jint)focusableMode;

/**
 @brief Add a listener for attach state changes.
 This listener will be called whenever this view is attached or detached from a window. Remove the listener using #removeOnAttachStateChangeListener(OnAttachStateChangeListener) .
 @param listener Listener to attach
 */
- (void)addOnAttachStateChangeListenerWithRepackagedAndroidViewView_OnAttachStateChangeListener:(id<RepackagedAndroidViewView_OnAttachStateChangeListener>)listener;

/**
 @brief Add a listener that will be called when the bounds of the view change due to layout processing.
 @param listener The listener that will be called when layout bounds change.
 */
- (void)addOnLayoutChangeListenerWithRepackagedAndroidViewView_OnLayoutChangeListener:(id<RepackagedAndroidViewView_OnLayoutChangeListener>)listener;

/**
 @brief Add any touchable views that are descendants of this view (possibly including this view if it is touchable itself) to views.
 @param views Touchable views found so far
 */
- (void)addTouchablesWithJavaUtilArrayList:(JavaUtilArrayList *)views;

/**
 @brief This method returns a ViewPropertyAnimator object, which can be used to animate specific properties on this View.
 @return ViewPropertyAnimator The ViewPropertyAnimator associated with this View.
 */
- (RepackagedAndroidViewViewPropertyAnimator *)animate;

/**
 @brief Convenience method for sending a AccessibilityEvent#TYPE_ANNOUNCEMENT AccessibilityEvent to make an announcement which is related to some sort of a context change for which none of the events representing UI transitions is a good fit.
 For example, announcing a new page in a book. If accessibility is not enabled this method does nothing.
 @param text The announcement text.
 */
- (void)announceForAccessibilityWithJavaLangCharSequence:(id<JavaLangCharSequence>)text;

/**
 @brief Given a Drawable whose bounds have been set to draw into this view, update a Region being computed for #gatherTransparentRegion(repackaged.android.graphics.Region) so that any non-transparent parts of the Drawable are removed from the given transparent region.
 @param dr The Drawable whose transparency is to be applied to the region.
 @param region A Region holding the current transparency information, where any parts of the region that are set are considered to be transparent.  On return, this region will be modified to have the transparency information reduced by the corresponding parts of the Drawable that are not transparent.
 */
- (void)applyDrawableToTransparentRegionWithRepackagedAndroidGraphicsDrawableDrawable:(RepackagedAndroidGraphicsDrawableDrawable *)dr
                                                  withRepackagedAndroidGraphicsRegion:(RepackagedAndroidGraphicsRegion *)region;

/**
 @brief Change the view's z order in the tree, so it's on top of other sibling views.
 This ordering change may affect layout, if the parent container uses an order-dependent layout scheme (e.g., LinearLayout). Prior to repackaged.android.os.Build.VERSION_CODES#KITKAT this method should be followed by calls to #requestLayout() and View#invalidate() on the view's parent to force the parent to redraw with the new child ordering.
 */
- (void)bringToFront;

/**
 @brief <p>Calling this method is equivalent to calling <code>buildDrawingCache(false)</code>.
 </p>
 */
- (void)buildDrawingCache;

/**
 @brief <p>Forces the drawing cache to be built if the drawing cache is invalid.
 </p> <p>If you call #buildDrawingCache() manually without calling #setDrawingCacheEnabled(boolean) setDrawingCacheEnabled(true) , you should cleanup the cache by calling #destroyDrawingCache() afterwards.</p> <p>Note about auto scaling in compatibility mode: When auto scaling is not enabled, this method will create a bitmap of the same size as this view. Because this bitmap will be drawn scaled by the parent ViewGroup, the result on screen might show scaling artifacts. To avoid such artifacts, you should call this method by setting the auto scaling to true. Doing so, however, will generate a bitmap of a different size than the view. This implies that your application must be able to handle this size.</p> <p>You should avoid calling this method when hardware acceleration is enabled. If you do not need the drawing cache bitmap, calling this method will increase memory usage and cause the view to be rendered in software once, thus negatively impacting performance.</p>
 */
- (void)buildDrawingCacheWithBoolean:(jboolean)autoScale;

/**
 @brief Forces this view's layer to be created and this view to be rendered into its layer.
 If this view's layer type is set to #LAYER_TYPE_NONE , invoking this method will have no effect. This method can for instance be used to render a view into its layer before starting an animation. If this view is complex, rendering into the layer before starting the animation will avoid skipping frames.
 @throws IllegalStateException If this view is not attached to a window
 */
- (void)buildLayer;

/**
 @brief Directly call any attached OnClickListener.
 Unlike #performClick() , this only calls the listener, and does not do any associated clicking actions like reporting an accessibility event.
 @return True there was an assigned OnClickListener that was called, false otherwise is returned.
 */
- (jboolean)callOnClick;

/**
 @brief Cancels a pending long press.
 Your subclass can use this if you want the context menu to come up if the user presses and holds at the same place, but you don't want it to come up if they press and then move around enough to cause scrolling.
 */
- (void)cancelLongPress;

/**
 @brief Cancel any deferred high-level input events that were previously posted to the event queue.
 <p>Many views post high-level events such as click handlers to the event queue to run deferred in order to preserve a desired user experience - clearing visible pressed states before executing, etc. This method will abort any events of this nature that are currently in flight.</p> <p>Custom views that generate their own high-level deferred input events should override #onCancelPendingInputEvents() and remove those pending events from the queue.</p> <p>This will also cancel pending input events for any child views.</p> <p>Note that this may not be sufficient as a debouncing strategy for clicks in all cases. This will not impact newer events posted after this call that may occur as a result of lower-level input events still waiting in the queue. If you are trying to prevent double-submitted  events for the duration of some sort of asynchronous transaction you should also take other steps to protect against unexpected double inputs e.g. calling #setEnabled(boolean) setEnabled(false) and re-enabling the view when the transaction completes, tracking already submitted transaction IDs, etc.</p>
 */
- (void)cancelPendingInputEvents;

/**
 @brief A view that is not attached or hardware accelerated cannot create a display list.
 This method checks these conditions and returns the appropriate result.
 @return true if view has the ability to create a display list, false otherwise.
 */
- (jboolean)canHaveDisplayList;

/**
 @brief Check if layout direction resolution can be done.
 @return true if layout direction resolution can be done otherwise return false.
 */
- (jboolean)canResolveLayoutDirection;

/**
 @brief Check if text alignment resolution can be done.
 @return true if text alignment resolution can be done otherwise return false.
 */
- (jboolean)canResolveTextAlignment;

/**
 @brief Check if text direction resolution can be done.
 @return true if text direction resolution can be done otherwise return false.
 */
- (jboolean)canResolveTextDirection;

/**
 @brief Check if this view can be scrolled horizontally in a certain direction.
 @param direction Negative to check scrolling left, positive to check scrolling right.
 @return true if this view can be scrolled in the specified direction, false otherwise.
 */
- (jboolean)canScrollHorizontallyWithInt:(jint)direction;

/**
 @brief Check if this view can be scrolled vertically in a certain direction.
 @param direction Negative to check scrolling up, positive to check scrolling down.
 @return true if this view can be scrolled in the specified direction, false otherwise.
 */
- (jboolean)canScrollVerticallyWithInt:(jint)direction;

/**
 @brief Gets the Views in the hierarchy affected by entering and exiting Activity Scene transitions.
 @param transitioningViews This View will be added to transitioningViews if it is VISIBLE and a normal View or a ViewGroup with repackaged.android.view.ViewGroup#isTransitionGroup() true.
 */
- (void)captureTransitioningViewsWithJavaUtilList:(id<JavaUtilList>)transitioningViews;

/**
 @brief Called by the repackaged.android.view.inputmethod.InputMethodManager when a view who is not the current input connection target is trying to make a call on the manager.
 The default implementation returns false; you can override this to return true for certain views if you are performing InputConnection proxying to them.
 @param view The View that is making the InputMethodManager call.
 @return Return true to allow the call, false to reject.
 */
- (jboolean)checkInputConnectionProxyWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)view;

/**
 @brief Call this to try to clear accessibility focus of this view.
 See also #focusSearch(int) , which is what you call to say that you have focus, and you want your parent to look for the next one.
 */
- (void)clearAccessibilityFocus;

/**
 @brief Cancels any animations for this view.
 */
- (void)clearAnimation;

/**
 @brief Called when this view wants to give up focus.
 If focus is cleared #onFocusChanged(boolean,int,repackaged.android.graphics.Rect) is called. <p> <strong>Note:</strong> When a View clears focus the framework is trying to give focus to the first focusable View from the top. Hence, if this View is the first from the top that can take focus, then all callbacks related to clearing focus will be invoked after which the framework will give focus to this view. </p>
 */
- (void)clearFocus;

/**
 @brief Merge two states as returned by #getMeasuredState() .
 @param curState The current state as returned from a view or the result of combining multiple views.
 @param newState The new view state to combine.
 @return Returns a new integer reflecting the combination of the two states.
 */
+ (jint)combineMeasuredStatesWithInt:(jint)curState
                             withInt:(jint)newState;

/**
 @brief Called by a parent to request that a child update its values for mScrollX and mScrollY if necessary.
 This will typically be done if the child is animating a scroll using a android.widget.Scroller Scroller object.
 */
- (void)computeScroll;

/**
 @brief Compute insets that should be consumed by this view and the ones that should propagate to those under it.
 @param in Insets currently being processed by this View, likely received as a parameter to #onApplyWindowInsets(WindowInsets) .
 @param outLocalInsets A Rect that will receive the insets that should be consumed by this view
 @return Insets that should be passed along to views under this one
 */
- (RepackagedAndroidViewWindowInsets *)computeSystemWindowInsetsWithRepackagedAndroidViewWindowInsets:(RepackagedAndroidViewWindowInsets *)inArg
                                                                    withRepackagedAndroidGraphicsRect:(RepackagedAndroidGraphicsRect *)outLocalInsets;

/**
 @brief Returns an AccessibilityNodeInfo representing this view from the point of view of an android.accessibilityservice.AccessibilityService .
 This method is responsible for obtaining an accessibility node info from a pool of reusable instances and calling #onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo) on this view to initialize the former. <p> Note: The client is responsible for recycling the obtained instance by calling AccessibilityNodeInfo#recycle() to minimize object creation. </p>
 @return A populated AccessibilityNodeInfo .
 */
- (RepackagedAndroidViewAccessibilityAccessibilityNodeInfo *)createAccessibilityNodeInfo;

/**
 */
- (RepackagedAndroidViewAccessibilityAccessibilityNodeInfo *)createAccessibilityNodeInfoInternal;

/**
 @brief Show the context menu for this view.
 It is not safe to hold on to the menu after returning from this method. You should normally not overload this method. Overload #onCreateContextMenu(ContextMenu) or define an OnCreateContextMenuListener to add items to the context menu.
 @param menu The context menu to populate
 */
- (void)createContextMenuWithRepackagedAndroidViewContextMenu:(RepackagedAndroidViewContextMenu *)menu;

/**
 @brief Prints information about this view in the log output, with the tag #VIEW_LOG_TAG .
 */
- (void)debug;

/**
 @brief <p>Frees the resources used by the drawing cache.
 If you call #buildDrawingCache() manually without calling #setDrawingCacheEnabled(boolean) setDrawingCacheEnabled(true) , you should cleanup the cache with this method afterwards.</p>
 */
- (void)destroyDrawingCache;

/**
 @brief If this View corresponds to the calling who, dispatches the activity result.
 @param who The identifier for the targeted View to receive the result.
 @param requestCode The integer request code originally supplied to startActivityForResult(), allowing you to identify who this result came from.
 @param resultCode The integer result code returned by the child activity through its setResult().
 @param data An Intent, which can return result data to the caller (various data can be attached to Intent "extras").
 @return <code>true</code> if the activity result was dispatched.
 */
- (jboolean)dispatchActivityResultWithNSString:(NSString *)who
                                       withInt:(jint)requestCode
                                       withInt:(jint)resultCode
            withRepackagedAndroidContentIntent:(id<RepackagedAndroidContentIntent>)data;

/**
 @brief Request to apply the given window insets to this view or another view in its subtree.
 <p>This method should be called by clients wishing to apply insets corresponding to areas obscured by window decorations or overlays. This can include the status and navigation bars, action bars, input methods and more. New inset categories may be added in the future. The method returns the insets provided minus any that were applied by this view or its children.</p> <p>Clients wishing to provide custom behavior should override the #onApplyWindowInsets(WindowInsets) method or alternatively provide a OnApplyWindowInsetsListener via the #setOnApplyWindowInsetsListener(View.OnApplyWindowInsetsListener) setOnApplyWindowInsetsListener method.</p> <p>This method replaces the older #fitSystemWindows(Rect) fitSystemWindows method. </p>
 @param insets Insets to apply
 @return The provided insets minus the insets that were consumed
 */
- (RepackagedAndroidViewWindowInsets *)dispatchApplyWindowInsetsWithRepackagedAndroidViewWindowInsets:(RepackagedAndroidViewWindowInsets *)insets;

/**
 @brief Dispatch a notification about a resource configuration change down the view hierarchy.
 ViewGroups should override to route to their children.
 @param newConfig The new resource configuration.
 */
- (void)dispatchConfigurationChangedWithRepackagedAndroidContentResConfiguration:(id<RepackagedAndroidContentResConfiguration>)newConfig;

/**
 @brief Dispatch a hint about whether this view is displayed.
 For instance, when a View moves out of the screen, it might receives a display hint indicating the view is not displayed. Applications should not <em>rely</em> on this hint as there is no guarantee that they will receive one.
 @param hint A hint about whether or not this view is displayed: #VISIBLE or #INVISIBLE .
 */
- (void)dispatchDisplayHintWithInt:(jint)hint;

/**
 @brief Detects if this View is enabled and has a drag event listener.
 If both are true, then it calls the drag event listener with the repackaged.android.view.DragEvent it received. If the drag event listener returns <code>true</code> , then dispatchDragEvent() returns <code>true</code> . <p> For all other cases, the method calls the repackaged.android.view.View#onDragEvent(DragEvent) onDragEvent() drag event handler method and returns its result. </p> <p> This ensures that a drag event is always consumed, even if the View does not have a drag event listener. However, if the View has a listener and the listener returns true, then onDragEvent() is not called. </p>
 */
- (jboolean)dispatchDragEventWithRepackagedAndroidViewDragEvent:(RepackagedAndroidViewDragEvent *)event;

/**
 @brief Dispatches drawableHotspotChanged to all of this View's children.
 @param x hotspot x coordinate
 @param y hotspot y coordinate
 */
- (void)dispatchDrawableHotspotChangedWithFloat:(jfloat)x
                                      withFloat:(jfloat)y;

/**
 */
- (void)dispatchFinishTemporaryDetach;

/**
 @brief Dispatch a generic motion event.
 <p> Generic motion events with source class InputDevice#SOURCE_CLASS_POINTER are delivered to the view under the pointer.  All other generic motion events are delivered to the focused view.  Hover events are handled specially and are delivered to #onHoverEvent(MotionEvent) . </p>
 @param event The motion event to be dispatched.
 @return True if the event was handled by the view, false otherwise.
 */
- (jboolean)dispatchGenericMotionEventWithRepackagedAndroidViewMotionEvent:(RepackagedAndroidViewMotionEvent *)event;

/**
 @brief Dispatch a key event to the next view on the focus path.
 This path runs from the top of the view tree down to the currently focused view. If this view has focus, it will dispatch to itself. Otherwise it will dispatch the next node down the focus path. This method also fires any key listeners.
 @param event The key event to be dispatched.
 @return True if the event was handled, false otherwise.
 */
- (jboolean)dispatchKeyEventWithRepackagedAndroidViewKeyEvent:(RepackagedAndroidViewKeyEvent *)event;

/**
 @brief Dispatch a key event before it is processed by any input method associated with the view hierarchy.
 This can be used to intercept key events in special situations before the IME consumes them; a typical example would be handling the BACK key to update the application's UI instead of allowing the IME to see it and close itself.
 @param event The key event to be dispatched.
 @return True if the event was handled, false otherwise.
 */
- (jboolean)dispatchKeyEventPreImeWithRepackagedAndroidViewKeyEvent:(RepackagedAndroidViewKeyEvent *)event;

/**
 @brief Dispatches a key shortcut event.
 @param event The key event to be dispatched.
 @return True if the event was handled by the view, false otherwise.
 */
- (jboolean)dispatchKeyShortcutEventWithRepackagedAndroidViewKeyEvent:(RepackagedAndroidViewKeyEvent *)event;

/**
 @brief Dispatch a fling to a nested scrolling parent.
 <p>This method should be used to indicate that a nested scrolling child has detected suitable conditions for a fling. Generally this means that a touch scroll has ended with a VelocityTracker velocity in the direction of scrolling that meets or exceeds the ViewConfiguration#getScaledMinimumFlingVelocity() minimum fling velocity along a scrollable axis.</p> <p>If a nested scrolling child view would normally fling but it is at the edge of its own content, it can use this method to delegate the fling to its nested scrolling parent instead. The parent may optionally consume the fling or observe a child fling.</p>
 @param velocityX Horizontal fling velocity in pixels per second
 @param velocityY Vertical fling velocity in pixels per second
 @param consumed true if the child consumed the fling, false otherwise
 @return true if the nested scrolling parent consumed or otherwise reacted to the fling
 */
- (jboolean)dispatchNestedFlingWithFloat:(jfloat)velocityX
                               withFloat:(jfloat)velocityY
                             withBoolean:(jboolean)consumed;

/**
 @brief Dispatch a fling to a nested scrolling parent before it is processed by this view.
 <p>Nested pre-fling events are to nested fling events what touch intercept is to touch and what nested pre-scroll is to nested scroll. <code>dispatchNestedPreFling</code> offsets an opportunity for the parent view in a nested fling to fully consume the fling before the child view consumes it. If this method returns <code>true</code>, a nested parent view consumed the fling and this view should not scroll as a result.</p> <p>For a better user experience, only one view in a nested scrolling chain should consume the fling at a time. If a parent view consumed the fling this method will return false. Custom view implementations should account for this in two ways:</p> <ul> <li>If a custom view is paged and needs to settle to a fixed page-point, do not call <code>dispatchNestedPreFling</code>; consume the fling and settle to a valid position regardless.</li> <li>If a nested parent does consume the fling, this view should not scroll at all, even to settle back to a valid idle position.</li> </ul> <p>Views should also not offer fling velocities to nested parent views along an axis where scrolling is not currently supported; a android.widget.ScrollView ScrollView should not offer a horizontal fling velocity to its parents since scrolling along that axis is not permitted and carrying velocity along that motion does not make sense.</p>
 @param velocityX Horizontal fling velocity in pixels per second
 @param velocityY Vertical fling velocity in pixels per second
 @return true if a nested scrolling parent consumed the fling
 */
- (jboolean)dispatchNestedPreFlingWithFloat:(jfloat)velocityX
                                  withFloat:(jfloat)velocityY;

/**
 @brief Report an accessibility action to this view's parents for delegated processing.
 <p>Implementations of #performAccessibilityAction(int,Bundle) may internally call this method to delegate an accessibility action to a supporting parent. If the parent returns true from its ViewParent#onNestedPrePerformAccessibilityAction(View,int,repackaged.android.os.Bundle) method this method will return true to signify that the action was consumed.</p> <p>This method is useful for implementing nested scrolling child views. If #isNestedScrollingEnabled() returns true and the action is a scrolling action a custom view implementation may invoke this method to allow a parent to consume the scroll first. If this method returns true the custom view should skip its own scrolling behavior.</p>
 @param action Accessibility action to delegate
 @param arguments Optional action arguments
 @return true if the action was consumed by a parent
 */
- (jboolean)dispatchNestedPrePerformAccessibilityActionWithInt:(jint)action
                                 withRepackagedAndroidOsBundle:(RepackagedAndroidOsBundle *)arguments;

/**
 @brief Dispatch one step of a nested scroll in progress before this view consumes any portion of it.
 <p>Nested pre-scroll events are to nested scroll events what touch intercept is to touch. <code>dispatchNestedPreScroll</code> offers an opportunity for the parent view in a nested scrolling operation to consume some or all of the scroll operation before the child view consumes it.</p>
 @param dx Horizontal scroll distance in pixels
 @param dy Vertical scroll distance in pixels
 @param consumed Output. If not null, consumed[0] will contain the consumed component of dx and consumed[1] the consumed dy.
 @param offsetInWindow Optional. If not null, on return this will contain the offset in local view coordinates of this view from before this operation to after it completes. View implementations may use this to adjust expected input coordinate tracking.
 @return true if the parent consumed some or all of the scroll delta
 */
- (jboolean)dispatchNestedPreScrollWithInt:(jint)dx
                                   withInt:(jint)dy
                              withIntArray:(IOSIntArray *)consumed
                              withIntArray:(IOSIntArray *)offsetInWindow;

/**
 @brief Dispatch one step of a nested scroll in progress.
 <p>Implementations of views that support nested scrolling should call this to report info about a scroll in progress to the current nested scrolling parent. If a nested scroll is not currently in progress or nested scrolling is not #isNestedScrollingEnabled() enabled for this view this method does nothing.</p> <p>Compatible View implementations should also call #dispatchNestedPreScroll(int,int,int[],int[]) dispatchNestedPreScroll before consuming a component of the scroll event themselves.</p>
 @param dxConsumed Horizontal distance in pixels consumed by this view during this scroll step
 @param dyConsumed Vertical distance in pixels consumed by this view during this scroll step
 @param dxUnconsumed Horizontal scroll distance in pixels not consumed by this view
 @param dyUnconsumed Horizontal scroll distance in pixels not consumed by this view
 @param offsetInWindow Optional. If not null, on return this will contain the offset in local view coordinates of this view from before this operation to after it completes. View implementations may use this to adjust expected input coordinate tracking.
 @return true if the event was dispatched, false if it could not be dispatched.
 */
- (jboolean)dispatchNestedScrollWithInt:(jint)dxConsumed
                                withInt:(jint)dyConsumed
                                withInt:(jint)dxUnconsumed
                                withInt:(jint)dyUnconsumed
                           withIntArray:(IOSIntArray *)offsetInWindow;

/**
 @brief Dispatch a pointer event.
 <p> Dispatches touch related pointer events to #onTouchEvent(MotionEvent) and all other events to #onGenericMotionEvent(MotionEvent) .  This separation of concerns reinforces the invariant that #onTouchEvent(MotionEvent) is really about touches and should not be expected to handle other pointing device features. </p>
 @param event The motion event to be dispatched.
 @return True if the event was handled by the view, false otherwise.
 */
- (jboolean)dispatchPointerEventWithRepackagedAndroidViewMotionEvent:(RepackagedAndroidViewMotionEvent *)event;

/**
 @brief Dispatches an AccessibilityEvent to the View first and then to its children for adding their text content to the event.
 Note that the event text is populated in a separate dispatch path since we add to the event not only the text of the source but also the text of all its descendants. A typical implementation will call #onPopulateAccessibilityEvent(AccessibilityEvent) on the this view and then call the #dispatchPopulateAccessibilityEvent(AccessibilityEvent) on each child. Override this method if custom population of the event text content is required. <p> If an AccessibilityDelegate has been specified via calling #setAccessibilityDelegate(AccessibilityDelegate) its AccessibilityDelegate#dispatchPopulateAccessibilityEvent(View,AccessibilityEvent) is responsible for handling this call. </p> <p> <em>Note:</em> Accessibility events of certain types are not dispatched for populating the event text via this method. For details refer to AccessibilityEvent . </p>
 @param event The event.
 @return True if the event population was completed.
 */
- (jboolean)dispatchPopulateAccessibilityEventWithRepackagedAndroidViewAccessibilityAccessibilityEvent:(RepackagedAndroidViewAccessibilityAccessibilityEvent *)event;

/**
 */
- (jboolean)dispatchPopulateAccessibilityEventInternalWithRepackagedAndroidViewAccessibilityAccessibilityEvent:(RepackagedAndroidViewAccessibilityAccessibilityEvent *)event;

/**
 @brief Dispatch creation of ViewStructure down the hierarchy.
 The default implementation calls #onProvideStructure and #onProvideVirtualStructure .
 */
- (void)dispatchProvideStructureWithRepackagedAndroidViewViewStructure:(RepackagedAndroidViewViewStructure *)structure;

/**
 */
- (void)dispatchStartTemporaryDetach;

/**
 @brief Dispatch callbacks to #setOnSystemUiVisibilityChangeListener down the view hierarchy.
 */
- (void)dispatchSystemUiVisibilityChangedWithInt:(jint)visibility;

/**
 @brief Pass the touch screen motion event down to the target view, or this view if it is the target.
 @param event The motion event to be dispatched.
 @return True if the event was handled by the view, false otherwise.
 */
- (jboolean)dispatchTouchEventWithRepackagedAndroidViewMotionEvent:(RepackagedAndroidViewMotionEvent *)event;

/**
 @brief Pass a trackball motion event down to the focused view.
 @param event The motion event to be dispatched.
 @return True if the event was handled by the view, false otherwise.
 */
- (jboolean)dispatchTrackballEventWithRepackagedAndroidViewMotionEvent:(RepackagedAndroidViewMotionEvent *)event;

/**
 @brief This method is the last chance for the focused view and its ancestors to respond to an arrow key.
 This is called when the focused view did not consume the key internally, nor could the view system find a new view in the requested direction to give focus to.
 @param focused The currently focused view.
 @param direction The direction focus wants to move. One of FOCUS_UP, FOCUS_DOWN, FOCUS_LEFT, and FOCUS_RIGHT.
 @return True if the this view consumed this unhandled move.
 */
- (jboolean)dispatchUnhandledMoveWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)focused
                                                       withInt:(jint)direction;

/**
 @brief Called when the window containing this view gains or loses window focus.
 ViewGroups should override to route to their children.
 @param hasFocus True if the window containing this view now has focus, false otherwise.
 */
- (void)dispatchWindowFocusChangedWithBoolean:(jboolean)hasFocus;

/**
 @brief Dispatch callbacks to #onWindowSystemUiVisibilityChanged(int) down the view hierarchy.
 */
- (void)dispatchWindowSystemUiVisiblityChangedWithInt:(jint)visible;

/**
 @brief Dispatch a window visibility change down the view hierarchy.
 ViewGroups should override to route to their children.
 @param visibility The new visibility of the window.
 */
- (void)dispatchWindowVisibilityChangedWithInt:(jint)visibility;

/**
 @brief Manually render this view (and all of its children) to the given Canvas.
 The view must have already done a full layout before this function is called.  When implementing a view, implement #onDraw(repackaged.android.graphics.Canvas) instead of overriding this method. If you do need to override this method, call the superclass version.
 @param canvas The Canvas to which the View is rendered.
 */
- (void)drawWithRepackagedAndroidGraphicsCanvas:(RepackagedAndroidGraphicsCanvas *)canvas;

/**
 @brief This function is called whenever the view hotspot changes and needs to be propagated to drawables or child views managed by the view.
 <p> Dispatching to child views is handled by #dispatchDrawableHotspotChanged(float,float) . <p> Be sure to call through to the superclass when overriding this function.
 @param x hotspot x coordinate
 @param y hotspot y coordinate
 */
- (void)drawableHotspotChangedWithFloat:(jfloat)x
                              withFloat:(jfloat)y;

/**
 
 */
- (void)encodeWithRepackagedAndroidViewViewHierarchyEncoder:(id<RepackagedAndroidViewViewHierarchyEncoder>)stream;

/**
 @brief Find the view in the hierarchy rooted at this view that currently has focus.
 @return The view that currently has focus, or null if no focused view can be found.
 */
- (RepackagedAndroidViewView *)findFocus;

/**
 @brief Adds all Views that have #getTransitionName() non-null to namedElements.
 @param namedElements Will contain all Views in the hierarchy having a transitionName.
 */
- (void)findNamedViewsWithJavaUtilMap:(id<JavaUtilMap>)namedElements;

/**
 @brief Performs the traversal to find a view by its unuque and stable accessibility id.
 <strong>Note:</strong>This method does not stop at the root namespace boundary since the user can touch the screen at an arbitrary location potentially crossing the root namespace bounday which will send an accessibility event to accessibility services and they should be able to obtain the event source. Also accessibility ids are guaranteed to be unique in the window.
 @param accessibilityId The accessibility id.
 @return The found view.
 */
- (RepackagedAndroidViewView *)findViewByAccessibilityIdTraversalWithInt:(jint)accessibilityId;

/**
 @brief Look for a child view with the given id.
 If this view has the given id, return this view.
 @param id The id to search for.
 @return The view that has the given id in the hierarchy or null
 */
- (RepackagedAndroidViewView *)findViewByIdWithInt:(jint)id_;

/**
 @brief Look for a child view that matches the specified predicate.
 If this view matches the predicate, return this view.
 @param predicate The predicate to evaluate.
 @return The first view that matches the predicate or null.
 */
- (RepackagedAndroidViewView *)findViewByPredicateWithRepackagedComAndroidInternalUtilPredicate:(id<RepackagedComAndroidInternalUtilPredicate>)predicate;

/**
 @brief Look for a child view that matches the specified predicate, starting with the specified view and its descendents and then recusively searching the ancestors and siblings of that view until this view is reached.
 This method is useful in cases where the predicate does not match a single unique view (perhaps multiple views use the same id) and we are trying to find the view that is "closest" in scope to the starting view.
 @param start The view to start from.
 @param predicate The predicate to evaluate.
 @return The first view that matches the predicate or null.
 */
- (RepackagedAndroidViewView *)findViewByPredicateInsideOutWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)start
                                           withRepackagedComAndroidInternalUtilPredicate:(id<RepackagedComAndroidInternalUtilPredicate>)predicate;

/**
 @brief Finds the Views that contain given text.
 The containment is case insensitive. The search is performed by either the text that the View renders or the content description that describes the view for accessibility purposes and the view does not render or both. Clients can specify how the search is to be performed via passing the #FIND_VIEWS_WITH_TEXT and #FIND_VIEWS_WITH_CONTENT_DESCRIPTION flags.
 @param outViews The output list of matching Views.
 @param searched The text to match against.
 */
- (void)findViewsWithTextWithJavaUtilArrayList:(JavaUtilArrayList *)outViews
                      withJavaLangCharSequence:(id<JavaLangCharSequence>)searched
                                       withInt:(jint)flags;

/**
 @brief Look for a child view with the given tag.
 If this view has the given tag, return this view.
 @param tag The tag to search for, using "tag.equals(getTag())".
 @return The View that has the given tag in the hierarchy or null
 */
- (RepackagedAndroidViewView *)findViewWithTagWithId:(id)tag;

/**
 */
- (jboolean)fitsSystemWindows;

/**
 @brief Find the nearest view in the specified direction that can take focus.
 This does not actually give focus to that view.
 @param direction One of FOCUS_UP, FOCUS_DOWN, FOCUS_LEFT, and FOCUS_RIGHT
 @return The nearest focusable in the specified direction, or null if none can be found.
 */
- (RepackagedAndroidViewView *)focusSearchWithInt:(jint)direction;

/**
 @brief Forces this view to be laid out during the next layout pass.
 This method does not call requestLayout() or forceLayout() on the parent.
 */
- (void)forceLayout;

/**
 @brief This is used by the RootView to perform an optimization when the view hierarchy contains one or several SurfaceView.
 SurfaceView is always considered transparent, but its children are not, therefore all View objects remove themselves from the global transparent region (passed as a parameter to this function).
 @param region The transparent region for this ViewAncestor (window).
 @return Returns true if the effective visibility of the view at this point is opaque, regardless of the transparent region; returns false if it is possible for underlying windows to be seen behind the view.
 */
- (jboolean)gatherTransparentRegionWithRepackagedAndroidGraphicsRegion:(RepackagedAndroidGraphicsRegion *)region;

/**
 @brief Generate a value suitable for use in #setId(int) .
 This value will not collide with ID values generated at build time by aapt for R.id.
 @return a generated ID value
 */
+ (jint)generateViewId;

/**
 @brief Return the class name of this object to be used for accessibility purposes.
 Subclasses should only override this if they are implementing something that should be seen as a completely new class of view when used by accessibility, unrelated to the class it is deriving from.  This is used to fill in AccessibilityNodeInfo#setClassName AccessibilityNodeInfo.setClassName .
 */
- (id<JavaLangCharSequence>)getAccessibilityClassName;

/**
 @brief Returns the delegate for implementing accessibility support via composition.
 For more details see AccessibilityDelegate .
 @return The delegate, or null if none set.
 */
- (RepackagedAndroidViewView_AccessibilityDelegate *)getAccessibilityDelegate;

/**
 @brief Gets the live region mode for this View.
 @return The live region mode for the view.
 ref android.R.styleable#View_accessibilityLiveRegion
 */
- (jint)getAccessibilityLiveRegion;

/**
 @brief Gets the provider for managing a virtual view hierarchy rooted at this View and reported to android.accessibilityservice.AccessibilityService s that explore the window content.
 <p> If this method returns an instance, this instance is responsible for managing AccessibilityNodeInfo s describing the virtual sub-tree rooted at this View including the one representing the View itself. Similarly the returned instance is responsible for performing accessibility actions on any virtual view or the root view itself. </p> <p> If an AccessibilityDelegate has been specified via calling #setAccessibilityDelegate(AccessibilityDelegate) its AccessibilityDelegate#getAccessibilityNodeProvider(View) is responsible for handling this call. </p>
 @return The provider.
 */
- (RepackagedAndroidViewAccessibilityAccessibilityNodeProvider *)getAccessibilityNodeProvider;

/**
 */
- (jint)getAccessibilitySelectionEnd;

/**
 */
- (jint)getAccessibilitySelectionStart;

/**
 @brief Gets the id of a view after which this one is visited in accessibility traversal.
 @return The id of a view this one succeedes in accessibility traversal if specified, otherwise #NO_ID .
 */
- (jint)getAccessibilityTraversalAfter;

/**
 @brief Gets the id of a view before which this one is visited in accessibility traversal.
 @return The id of a view this one precedes in accessibility traversal if specified, otherwise #NO_ID .
 */
- (jint)getAccessibilityTraversalBefore;

/**
 @brief Gets the unique identifier of this view on the screen for accessibility purposes.
 If this View is not attached to any window, #NO_ID is returned.
 @return The view accessibility id.
 */
- (jint)getAccessibilityViewId;

/**
 @brief Gets the unique identifier of the window in which this View reseides.
 @return The window accessibility id.
 */
- (jint)getAccessibilityWindowId;

/**
 @brief The opacity of the view.
 This is a value from 0 to 1, where 0 means the view is completely transparent and 1 means the view is completely opaque. <p>By default this is 1.0f.
 @return The opacity of the view.
 */
- (jfloat)getAlpha;

/**
 @brief Get the animation currently associated with this view.
 @return The animation that is currently playing or scheduled to play for this view.
 */
- (id<RepackagedAndroidViewAnimationAnimation>)getAnimation;

/**
 @brief Retrieve a unique token identifying the top-level "real" window of the window that this view is attached to.
 That is, this is like #getWindowToken , except if the window this view in is a panel window (attached to another containing window), then the token of the containing window is returned instead.
 @return Returns the associated window token, either #getWindowToken() or the containing window's token.
 */
- (id<RepackagedAndroidOsIBinder>)getApplicationWindowToken;

/**
 @brief Gets the background drawable
 @return The drawable used as the background for this view, if any.
 ref android.R.styleable#View_background
 */
- (RepackagedAndroidGraphicsDrawableDrawable *)getBackground;

/**
 @brief Return the tint applied to the background drawable, if specified.
 @return the tint applied to the background drawable
 ref android.R.styleable#View_backgroundTint
 */
- (id<RepackagedAndroidContentResColorStateList>)getBackgroundTintList;

/**
 @brief Return the blending mode used to apply the tint to the background drawable, if specified.
 @return the blending mode used to apply the tint to the background drawable
 ref android.R.styleable#View_backgroundTintMode
 */
- (RepackagedAndroidGraphicsPorterDuff_ModeEnum *)getBackgroundTintMode;

/**
 @brief <p>Return the offset of the widget's text baseline from the widget's top boundary.
 If this widget does not support baseline alignment, this method returns -1. </p>
 @return the offset of the baseline within the widget's bounds or -1 if baseline alignment is not supported
 */
- (jint)getBaseline;

/**
 @brief Bottom position of this view relative to its parent.
 @return The bottom of this view, in pixels.
 */
- (jint)getBottom;

/**
 @brief Gets the location of this view in screen coordinates.
 @param outRect The output location
 */
- (void)getBoundsOnScreenWithRepackagedAndroidGraphicsRect:(RepackagedAndroidGraphicsRect *)outRect;

/**
 @brief Gets the location of this view in screen coordinates.
 @param outRect The output location
 @param clipToParent Whether to clip child bounds to the parent ones.
 */
- (void)getBoundsOnScreenWithRepackagedAndroidGraphicsRect:(RepackagedAndroidGraphicsRect *)outRect
                                               withBoolean:(jboolean)clipToParent;

/**
 @brief Gets the distance along the Z axis from the camera to this view.
 @return The distance along the Z axis.
 */
- (jfloat)getCameraDistance;

/**
 @brief Returns a copy of the current #setClipBounds(Rect) clipBounds .
 @return A copy of the current clip bounds if clip bounds are set, otherwise null.
 */
- (RepackagedAndroidGraphicsRect *)getClipBounds;

/**
 @brief Populates an output rectangle with the clip bounds of the view, returning <code>true</code> if successful or <code>false</code> if the view's clip bounds are <code>null</code> .
 @param outRect rectangle in which to place the clip bounds of the view
 @return <code>true</code> if successful or <code>false</code> if the view's clip bounds are <code>null</code>
 */
- (jboolean)getClipBoundsWithRepackagedAndroidGraphicsRect:(RepackagedAndroidGraphicsRect *)outRect;

/**
 @brief Returns whether the Outline should be used to clip the contents of the View.
 <p> Note that this flag will only be respected if the View's Outline returns true from Outline#canClip() .
 */
- (jboolean)getClipToOutline;

/**
 @brief Gets the View description.
 It briefly describes the view and is primarily used for accessibility support. Set this property to enable better accessibility support for your application. This is especially true for views that do not have textual representation (For example, ImageButton).
 @return The content description.
 ref android.R.styleable#View_contentDescription
 */
- (id<JavaLangCharSequence>)getContentDescription;

/**
 @brief Returns the context the view is running in, through which it can access the current theme, resources, etc.
 @return The view's Context.
 */
- (id<RepackagedAndroidContentContext>)getContext;

/**
 @brief Utility to return a default size.
 Uses the supplied size if the MeasureSpec imposed no constraints. Will get larger if allowed by the MeasureSpec.
 @param size Default size for this view
 @param measureSpec Constraints imposed by the parent
 @return The size this view should be.
 */
+ (jint)getDefaultSizeWithInt:(jint)size
                      withInt:(jint)measureSpec;

/**
 @brief Gets the logical display to which the view's window has been attached.
 @return The logical display, or null if the view is not currently attached to a window.
 */
- (RepackagedAndroidViewDisplay *)getDisplay;

/**
 @brief Return an array of resource IDs of the drawable states representing the current state of the view.
 @return The current drawable state
 */
- (IOSIntArray *)getDrawableState;

/**
 @brief <p>Calling this method is equivalent to calling <code>getDrawingCache(false)</code>.
 </p>
 @return A non-scaled bitmap representing this view or null if cache is disabled.
 */
- (RepackagedAndroidGraphicsBitmap *)getDrawingCache;

/**
 @brief <p>Returns the bitmap in which this view drawing is cached.
 The returned bitmap is null when caching is disabled. If caching is enabled and the cache is not ready, this method will create it. Calling #draw(repackaged.android.graphics.Canvas) will not draw from the cache when the cache is enabled. To benefit from the cache, you must request the drawing cache by calling this method and draw it on screen if the returned bitmap is not null.</p> <p>Note about auto scaling in compatibility mode: When auto scaling is not enabled, this method will create a bitmap of the same size as this view. Because this bitmap will be drawn scaled by the parent ViewGroup, the result on screen might show scaling artifacts. To avoid such artifacts, you should call this method by setting the auto scaling to true. Doing so, however, will generate a bitmap of a different size than the view. This implies that your application must be able to handle this size.</p>
 @param autoScale Indicates whether the generated bitmap should be scaled based on the current density of the screen when the application is in compatibility mode.
 @return A bitmap representing this view or null if cache is disabled.
 */
- (RepackagedAndroidGraphicsBitmap *)getDrawingCacheWithBoolean:(jboolean)autoScale;

/**
 @return The background color to used for the drawing cache's bitmap
 */
- (jint)getDrawingCacheBackgroundColor;

/**
 @brief Returns the quality of the drawing cache.
 @return One of #DRAWING_CACHE_QUALITY_AUTO , #DRAWING_CACHE_QUALITY_LOW , or #DRAWING_CACHE_QUALITY_HIGH
 ref android.R.styleable#View_drawingCacheQuality
 */
- (jint)getDrawingCacheQuality;

/**
 @brief Return the visible drawing bounds of your view.
 Fills in the output rectangle with the values from getScrollX(), getScrollY(), getWidth(), and getHeight(). These bounds do not account for any transformation properties currently set on the view, such as #setScaleX(float) or #setRotation(float) .
 @param outRect The (scrolled) drawing bounds of the view.
 */
- (void)getDrawingRectWithRepackagedAndroidGraphicsRect:(RepackagedAndroidGraphicsRect *)outRect;

/**
 @brief <p>Return the time at which the drawing of the view hierarchy started.
 </p>
 @return the drawing start time in milliseconds
 */
- (jlong)getDrawingTime;

/**
 @brief The base elevation of this view relative to its parent, in pixels.
 @return The base depth position of the view, in pixels.
 */
- (jfloat)getElevation;

/**
 @brief Gets whether the framework should discard touches when the view's window is obscured by another visible window.
 Refer to the View security documentation for more details.
 @return True if touch filtering is enabled.
 ref android.R.styleable#View_filterTouchesWhenObscured
 */
- (jboolean)getFilterTouchesWhenObscured;

/**
 @brief Check for state of #setFitsSystemWindows(boolean) .
 If this method returns <code>true</code> , the default implementation of #fitSystemWindows(Rect) will be executed.
 @return <code>true</code> if the default implementation of #fitSystemWindows(Rect) will be executed.
 ref android.R.styleable#View_fitsSystemWindows
 */
- (jboolean)getFitsSystemWindows;

/**
 @brief Find and return all focusable views that are descendants of this view, possibly including this view if it is focusable itself.
 @param direction The direction of the focus
 @return A list of focusable views
 */
- (JavaUtilArrayList *)getFocusablesWithInt:(jint)direction;

/**
 @brief When a view has focus and the user navigates away from it, the next view is searched for starting from the rectangle filled in by this method.
 By default, the rectangle is the #getDrawingRect(repackaged.android.graphics.Rect) ) of the view.  However, if your view maintains some idea of internal selection, such as a cursor, or a selected row or column, you should override this method and fill in a more specific rectangle.
 @param r The rectangle to fill in, in this view's coordinates.
 */
- (void)getFocusedRectWithRepackagedAndroidGraphicsRect:(RepackagedAndroidGraphicsRect *)r;

/**
 @brief Returns the drawable used as the foreground of this View.
 The foreground drawable, if non-null, is always drawn on top of the view's content.
 @return a Drawable or null if no foreground was set
 */
- (RepackagedAndroidGraphicsDrawableDrawable *)getForeground;

/**
 @brief Describes how the foreground is positioned.
 @return foreground gravity.
 ref android.R.styleable#View_foregroundGravity
 */
- (jint)getForegroundGravity;

/**
 @brief Return the tint applied to the foreground drawable, if specified.
 @return the tint applied to the foreground drawable
 ref android.R.styleable#View_foregroundTint
 */
- (id<RepackagedAndroidContentResColorStateList>)getForegroundTintList;

/**
 @brief Return the blending mode used to apply the tint to the foreground drawable, if specified.
 @return the blending mode used to apply the tint to the foreground drawable
 ref android.R.styleable#View_foregroundTintMode
 */
- (RepackagedAndroidGraphicsPorterDuff_ModeEnum *)getForegroundTintMode;

- (jboolean)getGlobalVisibleRectWithRepackagedAndroidGraphicsRect:(RepackagedAndroidGraphicsRect *)r;

/**
 @brief If some part of this view is not clipped by any of its parents, then return that area in r in global (root) coordinates.
 To convert r to local coordinates (without taking possible View rotations into account), offset it by -globalOffset (e.g. r.offset(-globalOffset.x, -globalOffset.y)). If the view is completely clipped or translated out, return false.
 @param r If true is returned, r holds the global coordinates of the visible portion of this view.
 @param globalOffset If true is returned, globalOffset holds the dx,dy between this view and its root. globalOffet may be null.
 @return true if r is non-empty (i.e. part of the view is visible at the root level.
 */
- (jboolean)getGlobalVisibleRectWithRepackagedAndroidGraphicsRect:(RepackagedAndroidGraphicsRect *)r
                               withRepackagedAndroidGraphicsPoint:(RepackagedAndroidGraphicsPoint *)globalOffset;

/**
 @return A handler associated with the thread running the View. This handler can be used to pump events in the UI events queue.
 */
- (id<RepackagedAndroidOsHandler>)getHandler;

/**
 */
- (RepackagedAndroidViewHardwareRenderer *)getHardwareRenderer;

/**
 @brief Return the height of your view.
 @return The height of your view, in pixels.
 */
- (jint)getHeight;

/**
 @brief Hit rectangle in parent's coordinates
 @param outRect The hit rectangle of the view.
 */
- (void)getHitRectWithRepackagedAndroidGraphicsRect:(RepackagedAndroidGraphicsRect *)outRect;

/**
 @brief Returns the size of the horizontal faded edges used to indicate that more content in this view is visible.
 @return The size in pixels of the horizontal faded edge or 0 if horizontal faded edges are not enabled for this view.
 ref android.R.styleable#View_fadingEdgeLength
 */
- (jint)getHorizontalFadingEdgeLength;

/**
 @brief Populates <code>outRect</code> with the hotspot bounds.
 By default, the hotspot bounds are identical to the screen bounds.
 @param outRect rect to populate with hotspot bounds
 Only for internal use by views and widgets.
 */
- (void)getHotspotBoundsWithRepackagedAndroidGraphicsRect:(RepackagedAndroidGraphicsRect *)outRect;

/**
 @brief Returns this view's identifier.
 @return a positive integer used to identify the view or #NO_ID if the view has no ID
 ref android.R.styleable#View_id
 */
- (jint)getId;

/**
 @brief Gets the mode for determining whether this View is important for accessibility which is if it fires accessibility events and if it is reported to accessibility services that query the screen.
 @return The mode for determining whether a View is important for accessibility.
 ref android.R.styleable#View_importantForAccessibility
 */
- (jint)getImportantForAccessibility;

/**
 @brief Utility method to retrieve the inverse of the current mMatrix property.
 We cache the matrix to avoid recalculating it when transform properties have not changed.
 @return The inverse of the current matrix of this view.
 */
- (RepackagedAndroidGraphicsMatrix *)getInverseMatrix;

/**
 @brief Gets the text reported for accessibility purposes.
 @return The accessibility text.
 */
- (id<JavaLangCharSequence>)getIterableTextForAccessibility;

/**
 */
- (RepackagedAndroidViewAccessibilityIterators_TextSegmentIterator *)getIteratorForGranularityWithInt:(jint)granularity;

/**
 @brief Returns whether the screen should remain on, corresponding to the current value of #KEEP_SCREEN_ON .
 @return Returns true if #KEEP_SCREEN_ON is set.
 ref android.R.styleable#View_keepScreenOn
 */
- (jboolean)getKeepScreenOn;

/**
 @brief Return the global KeyEvent.DispatcherState KeyEvent.DispatcherState for this view's window.
 Returns null if the view is not currently attached to the window.  Normally you will not need to use this directly, but just use the standard high-level event callbacks like #onKeyDown(int,KeyEvent) .
 */
- (RepackagedAndroidViewKeyEvent_DispatcherState *)getKeyDispatcherState;

/**
 @brief Gets the id of a view for which this view serves as a label for accessibility purposes.
 @return The labeled view id.
 */
- (jint)getLabelFor;

/**
 @brief Indicates what type of layer is currently associated with this view.
 By default a view does not have a layer, and the layer type is #LAYER_TYPE_NONE . Refer to the documentation of #setLayerType(int,repackaged.android.graphics.Paint) for more information on the different types of layers.
 @return #LAYER_TYPE_NONE , #LAYER_TYPE_SOFTWARE or #LAYER_TYPE_HARDWARE
 */
- (jint)getLayerType;

/**
 @brief Returns the resolved layout direction for this view.
 @return #LAYOUT_DIRECTION_RTL if the layout direction is RTL or returns #LAYOUT_DIRECTION_LTR if the layout direction is not RTL. For compatibility, this will return #LAYOUT_DIRECTION_LTR if API version is lower than repackaged.android.os.Build.VERSION_CODES#JELLY_BEAN_MR1 .
 ref android.R.styleable#View_layoutDirection
 */
- (jint)getLayoutDirection;

/**
 @brief Get the LayoutParams associated with this view.
 All views should have layout parameters. These supply parameters to the <i>parent</i> of this view specifying how it should be arranged. There are many subclasses of ViewGroup.LayoutParams, and these correspond to the different subclasses of ViewGroup that are responsible for arranging their children. This method may return null if this View is not attached to a parent ViewGroup or #setLayoutParams(repackaged.android.view.ViewGroup.LayoutParams) was not invoked successfully. When a View is attached to a parent ViewGroup, this method must not return null.
 @return The LayoutParams associated with this view, or null if no parameters have been set yet
 */
- (RepackagedAndroidViewViewGroup_LayoutParams *)getLayoutParams;

/**
 @brief Left position of this view relative to its parent.
 @return The left edge of this view, in pixels.
 */
- (jint)getLeft;

- (jboolean)getLocalVisibleRectWithRepackagedAndroidGraphicsRect:(RepackagedAndroidGraphicsRect *)r;

/**
 @brief <p>Computes the coordinates of this view in its window.
 The argument must be an array of two integers. After the method returns, the array contains the x and y location in that order.</p>
 @param location an array of two integers in which to hold the coordinates
 */
- (void)getLocationInWindowWithIntArray:(IOSIntArray *)location;

/**
 */
- (IOSIntArray *)getLocationOnScreen;

/**
 @brief <p>Computes the coordinates of this view on the screen.
 The argument must be an array of two integers. After the method returns, the array contains the x and y location in that order.</p>
 @param location an array of two integers in which to hold the coordinates
 */
- (void)getLocationOnScreenWithIntArray:(IOSIntArray *)location;

/**
 @brief The transform matrix of this view, which is calculated based on the current rotation, scale, and pivot properties.
 @return The current transform matrix for the view
 */
- (RepackagedAndroidGraphicsMatrix *)getMatrix;

/**
 @brief Like #getMeasuredHeightAndState() , but only returns the raw width component (that is the result is masked by #MEASURED_SIZE_MASK ).
 @return The raw measured height of this view.
 */
- (jint)getMeasuredHeight;

/**
 @brief Return the full height measurement information for this view as computed by the most recent call to #measure(int,int) .
 This result is a bit mask as defined by #MEASURED_SIZE_MASK and #MEASURED_STATE_TOO_SMALL . This should be used during measurement and layout calculations only. Use #getHeight() to see how wide a view is after layout.
 @return The measured width of this view as a bit mask.
 */
- (jint)getMeasuredHeightAndState;

/**
 @brief Return only the state bits of #getMeasuredWidthAndState() and #getMeasuredHeightAndState() , combined into one integer.
 The width component is in the regular bits #MEASURED_STATE_MASK and the height component is at the shifted bits #MEASURED_HEIGHT_STATE_SHIFT >> #MEASURED_STATE_MASK .
 */
- (jint)getMeasuredState;

/**
 @brief Like #getMeasuredWidthAndState() , but only returns the raw width component (that is the result is masked by #MEASURED_SIZE_MASK ).
 @return The raw measured width of this view.
 */
- (jint)getMeasuredWidth;

/**
 @brief Return the full width measurement information for this view as computed by the most recent call to #measure(int,int) .
 This result is a bit mask as defined by #MEASURED_SIZE_MASK and #MEASURED_STATE_TOO_SMALL . This should be used during measurement and layout calculations only. Use #getWidth() to see how wide a view is after layout.
 @return The measured width of this view as a bit mask.
 */
- (jint)getMeasuredWidthAndState;

/**
 @brief Returns the minimum height of the view.
 @return the minimum height the view will try to be.
 ref android.R.styleable#View_minHeight
 */
- (jint)getMinimumHeight;

/**
 @brief Returns the minimum width of the view.
 @return the minimum width the view will try to be.
 ref android.R.styleable#View_minWidth
 */
- (jint)getMinimumWidth;

/**
 @brief Gets the id of the view to use when the next focus is #FOCUS_DOWN .
 @return The next focus ID, or #NO_ID if the framework should decide automatically.
 ref android.R.styleable#View_nextFocusDown
 */
- (jint)getNextFocusDownId;

/**
 @brief Gets the id of the view to use when the next focus is #FOCUS_FORWARD .
 @return The next focus ID, or #NO_ID if the framework should decide automatically.
 ref android.R.styleable#View_nextFocusForward
 */
- (jint)getNextFocusForwardId;

/**
 @brief Gets the id of the view to use when the next focus is #FOCUS_LEFT .
 @return The next focus ID, or #NO_ID if the framework should decide automatically.
 ref android.R.styleable#View_nextFocusLeft
 */
- (jint)getNextFocusLeftId;

/**
 @brief Gets the id of the view to use when the next focus is #FOCUS_RIGHT .
 @return The next focus ID, or #NO_ID if the framework should decide automatically.
 ref android.R.styleable#View_nextFocusRight
 */
- (jint)getNextFocusRightId;

/**
 @brief Gets the id of the view to use when the next focus is #FOCUS_UP .
 @return The next focus ID, or #NO_ID if the framework should decide automatically.
 ref android.R.styleable#View_nextFocusUp
 */
- (jint)getNextFocusUpId;

/**
 @brief Returns the focus-change callback registered for this view.
 @return The callback, or null if one is not registered.
 */
- (id<RepackagedAndroidViewView_OnFocusChangeListener>)getOnFocusChangeListener;

/**
 */
- (RepackagedAndroidGraphicsInsets *)getOpticalInsets;

/**
 @brief Returns the current ViewOutlineProvider of the view, which generates the Outline that defines the shape of the shadow it casts, and enables outline clipping.
 */
- (RepackagedAndroidViewViewOutlineProvider *)getOutlineProvider;

/**
 @brief Returns the outsets, which areas of the device that aren't a surface, but we would like to treat them as such.
 */
- (void)getOutsetsWithRepackagedAndroidGraphicsRect:(RepackagedAndroidGraphicsRect *)outOutsetRect;

/**
 @brief Returns the overlay for this view, creating it if it does not yet exist.
 Adding drawables to the overlay will cause them to be displayed whenever the view itself is redrawn. Objects in the overlay should be actively managed: remove them when they should not be displayed anymore. The overlay will always have the same size as its host view. <p>Note: Overlays do not currently work correctly with SurfaceView or TextureView ; contents in overlays for these types of views may not display correctly.</p>
 @return The ViewOverlay object for this view.
 */
- (RepackagedAndroidViewViewOverlay *)getOverlay;

/**
 @brief Returns the over-scroll mode for this view.
 The result will be one of #OVER_SCROLL_ALWAYS (default), #OVER_SCROLL_IF_CONTENT_SCROLLS (allow over-scrolling only if the view content is larger than the container), or #OVER_SCROLL_NEVER .
 @return This view's over-scroll mode.
 */
- (jint)getOverScrollMode;

/**
 @brief Returns the bottom padding of this view.
 If there are inset and enabled scrollbars, this value may include the space required to display the scrollbars as well.
 @return the bottom padding in pixels
 */
- (jint)getPaddingBottom;

/**
 @brief Returns the end padding of this view depending on its resolved layout direction.
 If there are inset and enabled scrollbars, this value may include the space required to display the scrollbars as well.
 @return the end padding in pixels
 */
- (jint)getPaddingEnd;

/**
 @brief Returns the left padding of this view.
 If there are inset and enabled scrollbars, this value may include the space required to display the scrollbars as well.
 @return the left padding in pixels
 */
- (jint)getPaddingLeft;

/**
 @brief Returns the right padding of this view.
 If there are inset and enabled scrollbars, this value may include the space required to display the scrollbars as well.
 @return the right padding in pixels
 */
- (jint)getPaddingRight;

/**
 @brief Returns the start padding of this view depending on its resolved layout direction.
 If there are inset and enabled scrollbars, this value may include the space required to display the scrollbars as well.
 @return the start padding in pixels
 */
- (jint)getPaddingStart;

/**
 @brief Returns the top padding of this view.
 @return the top padding in pixels
 */
- (jint)getPaddingTop;

/**
 @brief Gets the parent of this view.
 Note that the parent is a ViewParent and not necessarily a View.
 @return Parent of this view.
 */
- (id<RepackagedAndroidViewViewParent>)getParent;

/**
 @brief Gets the parent for accessibility purposes.
 Note that the parent for accessibility is not necessary the immediate parent. It is the first predecessor that is important for accessibility.
 @return The parent for accessibility purposes.
 */
- (id<RepackagedAndroidViewViewParent>)getParentForAccessibility;

/**
 @brief The x location of the point around which the view is #setRotation(float) rotated and #setScaleX(float) scaled .
 @return The x location of the pivot point.
 ref android.R.styleable#View_transformPivotX
 */
- (jfloat)getPivotX;

/**
 @brief The y location of the point around which the view is #setRotation(float) rotated and #setScaleY(float) scaled .
 @return The y location of the pivot point.
 ref android.R.styleable#View_transformPivotY
 */
- (jfloat)getPivotY;

/**
 @brief Returns the layout direction for this view.
 @return One of #LAYOUT_DIRECTION_LTR , #LAYOUT_DIRECTION_RTL , #LAYOUT_DIRECTION_INHERIT or #LAYOUT_DIRECTION_LOCALE .
 ref android.R.styleable#View_layoutDirection
 */
- (jint)getRawLayoutDirection;

/**
 @brief Return the value specifying the text alignment or policy that was set with #setTextAlignment(int) .
 @return the defined text alignment. It can be one of: #TEXT_ALIGNMENT_INHERIT , #TEXT_ALIGNMENT_GRAVITY , #TEXT_ALIGNMENT_CENTER , #TEXT_ALIGNMENT_TEXT_START , #TEXT_ALIGNMENT_TEXT_END , #TEXT_ALIGNMENT_VIEW_START , #TEXT_ALIGNMENT_VIEW_END
 ref android.R.styleable#View_textAlignment
 */
- (jint)getRawTextAlignment;

/**
 @brief Return the value specifying the text direction or policy that was set with #setTextDirection(int) .
 @return the defined text direction. It can be one of: #TEXT_DIRECTION_INHERIT , #TEXT_DIRECTION_FIRST_STRONG , #TEXT_DIRECTION_ANY_RTL , #TEXT_DIRECTION_LTR , #TEXT_DIRECTION_RTL , #TEXT_DIRECTION_LOCALE , #TEXT_DIRECTION_FIRST_STRONG_LTR , #TEXT_DIRECTION_FIRST_STRONG_RTL
 ref android.R.styleable#View_textDirection
 */
- (jint)getRawTextDirection;

/**
 @brief Returns the resources associated with this view.
 @return Resources object.
 */
- (RepackagedAndroidContentResResources *)getResources;

/**
 @brief Right position of this view relative to its parent.
 @return The right edge of this view, in pixels.
 */
- (jint)getRight;

/**
 @brief <p>Finds the topmost view in the current view hierarchy.
 </p>
 @return the topmost view containing this view
 */
- (RepackagedAndroidViewView *)getRootView;

/**
 @brief Provide original WindowInsets that are dispatched to the view hierarchy.
 The insets are only available if the view is attached.
 @return WindowInsets from the top of the view hierarchy or null if View is detached
 */
- (RepackagedAndroidViewWindowInsets *)getRootWindowInsets;

/**
 @brief The degrees that the view is rotated around the pivot point.
 @return The degrees of rotation.
 */
- (jfloat)getRotation;

/**
 @brief The degrees that the view is rotated around the horizontal axis through the pivot point.
 @return The degrees of X rotation.
 */
- (jfloat)getRotationX;

/**
 @brief The degrees that the view is rotated around the vertical axis through the pivot point.
 @return The degrees of Y rotation.
 */
- (jfloat)getRotationY;

/**
 @brief The amount that the view is scaled in x around the pivot point, as a proportion of the view's unscaled width.
 A value of 1, the default, means that no scaling is applied. <p>By default, this is 1.0f.
 @return The scaling factor.
 */
- (jfloat)getScaleX;

/**
 @brief The amount that the view is scaled in y around the pivot point, as a proportion of the view's unscaled height.
 A value of 1, the default, means that no scaling is applied. <p>By default, this is 1.0f.
 @return The scaling factor.
 */
- (jfloat)getScaleY;

/**
 @brief Returns the delay before scrollbars fade.
 @return the delay before scrollbars fade
 ref android.R.styleable#View_scrollbarDefaultDelayBeforeFade
 */
- (jint)getScrollBarDefaultDelayBeforeFade;

/**
 @brief Returns the scrollbar fade duration.
 @return the scrollbar fade duration
 ref android.R.styleable#View_scrollbarFadeDuration
 */
- (jint)getScrollBarFadeDuration;

/**
 @brief Returns the scrollbar size.
 @return the scrollbar size
 ref android.R.styleable#View_scrollbarSize
 */
- (jint)getScrollBarSize;

/**
 @brief <p>Returns the current scrollbar style.
 </p>
 @return the current scrollbar style
 ref android.R.styleable#View_scrollbarStyle
 */
- (jint)getScrollBarStyle;

/**
 @brief Returns a bitmask representing the enabled scroll indicators.
 <p> For example, if the top and left scroll indicators are enabled and all other indicators are disabled, the return value will be <code>View.SCROLL_INDICATOR_TOP | View.SCROLL_INDICATOR_LEFT</code> . <p> To check whether the bottom scroll indicator is enabled, use the value of <code>(getScrollIndicators() & View.SCROLL_INDICATOR_BOTTOM) != 0</code> .
 @return a bitmask representing the enabled scroll indicators
 */
- (jint)getScrollIndicators;

/**
 @brief Return the scrolled left position of this view.
 This is the left edge of the displayed part of your view. You do not need to draw any pixels farther left, since those are outside of the frame of your view on screen.
 @return The left edge of the displayed part of your view, in pixels.
 */
- (jint)getScrollX;

/**
 @brief Return the scrolled top position of this view.
 This is the top edge of the displayed part of your view. You do not need to draw any pixels above it, since those are outside of the frame of your view on screen.
 @return The top edge of the displayed part of your view, in pixels.
 */
- (jint)getScrollY;

/**
 @brief Override this if your view is known to always be drawn on top of a solid color background, and needs to draw fading edges.
 Returning a non-zero color enables the view system to optimize the drawing of the fading edges. If you do return a non-zero color, the alpha should be set to 0xFF.
 @return The known solid color background for this view, or 0 if the color may vary
 */
- (jint)getSolidColor;

/**
 @brief Returns the current StateListAnimator if exists.
 @return StateListAnimator or null if it does not exists
 */
- (RepackagedAndroidAnimationStateListAnimator *)getStateListAnimator;

/**
 @brief Returns the last #setSystemUiVisibility(int) that this view has requested.
 @return Bitwise-or of flags #SYSTEM_UI_FLAG_LOW_PROFILE , #SYSTEM_UI_FLAG_HIDE_NAVIGATION , #SYSTEM_UI_FLAG_FULLSCREEN , #SYSTEM_UI_FLAG_LAYOUT_STABLE , #SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION , #SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN , #SYSTEM_UI_FLAG_IMMERSIVE , and #SYSTEM_UI_FLAG_IMMERSIVE_STICKY .
 */
- (jint)getSystemUiVisibility;

/**
 @brief Returns this view's tag.
 @return the Object stored in this view as a tag, or <code>null</code> if not set
 */
- (id)getTag;

/**
 @brief Returns the tag associated with this view and the specified key.
 @param key The key identifying the tag
 @return the Object stored in this view as a tag, or <code>null</code> if not set
 */
- (id)getTagWithInt:(jint)key;

/**
 @brief Return the resolved text alignment.
 @return the resolved text alignment. Returns one of: #TEXT_ALIGNMENT_GRAVITY , #TEXT_ALIGNMENT_CENTER , #TEXT_ALIGNMENT_TEXT_START , #TEXT_ALIGNMENT_TEXT_END , #TEXT_ALIGNMENT_VIEW_START , #TEXT_ALIGNMENT_VIEW_END
 ref android.R.styleable#View_textAlignment
 */
- (jint)getTextAlignment;

/**
 @brief Return the resolved text direction.
 @return the resolved text direction. Returns one of: #TEXT_DIRECTION_FIRST_STRONG , #TEXT_DIRECTION_ANY_RTL , #TEXT_DIRECTION_LTR , #TEXT_DIRECTION_RTL , #TEXT_DIRECTION_LOCALE , #TEXT_DIRECTION_FIRST_STRONG_LTR , #TEXT_DIRECTION_FIRST_STRONG_RTL
 ref android.R.styleable#View_textDirection
 */
- (jint)getTextDirection;

/**
 @brief Top position of this view relative to its parent.
 @return The top of this view, in pixels.
 */
- (jint)getTop;

/**
 @brief Find and return all touchable views that are descendants of this view, possibly including this view if it is touchable itself.
 @return A list of touchable views
 */
- (JavaUtilArrayList *)getTouchables;

/**
 @brief Gets the TouchDelegate for this View.
 */
- (RepackagedAndroidViewTouchDelegate *)getTouchDelegate;

/**
 @brief This property is hidden and intended only for use by the Fade transition, which animates it to produce a visual translucency that does not side-effect (or get affected by) the real alpha property.
 This value is composited with the other alpha value (and the AlphaAnimation value, when that is present) to produce a final visual translucency result, which is what is passed into the DisplayList.
 */
- (jfloat)getTransitionAlpha;

/**
 @brief Returns the name of the View to be used to identify Views in Transitions.
 Names should be unique in the View hierarchy. <p>This returns null if the View has not been given a name.</p>
 @return The name used of the View to be used to identify Views in Transitions or null if no name has been given.
 */
- (NSString *)getTransitionName;

/**
 @brief The horizontal location of this view relative to its #getLeft() left position.
 This position is post-layout, in addition to wherever the object's layout placed it.
 @return The horizontal position of this view relative to its left position, in pixels.
 */
- (jfloat)getTranslationX;

/**
 @brief The vertical location of this view relative to its #getTop() top position.
 This position is post-layout, in addition to wherever the object's layout placed it.
 @return The vertical position of this view relative to its top position, in pixels.
 */
- (jfloat)getTranslationY;

/**
 @brief The depth location of this view relative to its #getElevation() elevation .
 @return The depth of this view relative to its elevation.
 */
- (jfloat)getTranslationZ;

/**
 @brief Returns the size of the vertical faded edges used to indicate that more content in this view is visible.
 @return The size in pixels of the vertical faded edge or 0 if vertical faded edges are not enabled for this view.
 ref android.R.styleable#View_fadingEdgeLength
 */
- (jint)getVerticalFadingEdgeLength;

/**
 @return The position where the vertical scroll bar will show, if applicable.
 */
- (jint)getVerticalScrollbarPosition;

/**
 @brief Returns the width of the vertical scrollbar.
 @return The width in pixels of the vertical scrollbar or 0 if there is no vertical scrollbar.
 */
- (jint)getVerticalScrollbarWidth;

/**
 @brief Gets the view root associated with the View.
 @return The view root, or null if none.
 */
- (RepackagedAndroidViewViewRootImpl *)getViewRootImpl;

/**
 @brief Returns the ViewTreeObserver for this view's hierarchy.
 The view tree observer can be used to get notifications when global events, like layout, happen. The returned ViewTreeObserver observer is not guaranteed to remain valid for the lifetime of this View. If the caller of this method keeps a long-lived reference to ViewTreeObserver, it should always check for the return value of ViewTreeObserver#isAlive() .
 @return The ViewTreeObserver for this view's hierarchy.
 */
- (RepackagedAndroidViewViewTreeObserver *)getViewTreeObserver;

/**
 @brief Returns the visibility status for this view.
 @return One of #VISIBLE , #INVISIBLE , or #GONE .
 ref android.R.styleable#View_visibility
 */
- (jint)getVisibility;

/**
 @brief Return the width of the your view.
 @return The width of your view, in pixels.
 */
- (jint)getWidth;

/**
 @brief Retrieve the WindowId for the window this view is currently attached to.
 */
- (RepackagedAndroidViewWindowId *)getWindowId;

/**
 @brief Returns the current system UI visibility that is currently set for the entire window.
 This is the combination of the #setSystemUiVisibility(int) values supplied by all of the views in the window.
 */
- (jint)getWindowSystemUiVisibility;

/**
 @brief Retrieve a unique token identifying the window this view is attached to.
 @return Return the window's token for use in WindowManager.LayoutParams#token WindowManager.LayoutParams.token .
 */
- (id<RepackagedAndroidOsIBinder>)getWindowToken;

/**
 @brief Returns the current visibility of the window this view is attached to (either #GONE , #INVISIBLE , or #VISIBLE ).
 @return Returns the current visibility of the view's window.
 */
- (jint)getWindowVisibility;

/**
 @brief Retrieve the overall visible display size in which the window this view is attached to has been positioned in.
 This takes into account screen decorations above the window, for both cases where the window itself is being position inside of them or the window is being placed under then and covered insets are used for the window to position its content inside.  In effect, this tells you the available area where content can be placed and remain visible to users. <p>This function requires an IPC back to the window manager to retrieve the requested information, so should not be used in performance critical code like drawing.
 @param outRect Filled in with the visible display frame.  If the view is not attached to a window, this is simply the raw display size.
 */
- (void)getWindowVisibleDisplayFrameWithRepackagedAndroidGraphicsRect:(RepackagedAndroidGraphicsRect *)outRect;

/**
 @brief The visual x position of this view, in pixels.
 This is equivalent to the #setTranslationX(float) translationX property plus the current #getLeft() left property.
 @return The visual x position of this view, in pixels.
 */
- (jfloat)getX;

/**
 @brief The visual y position of this view, in pixels.
 This is equivalent to the #setTranslationY(float) translationY property plus the current #getTop() top property.
 @return The visual y position of this view, in pixels.
 */
- (jfloat)getY;

/**
 @brief The visual z position of this view, in pixels.
 This is equivalent to the #setTranslationZ(float) translationZ property plus the current #getElevation() elevation property.
 @return The visual z position of this view, in pixels.
 */
- (jfloat)getZ;

/**
 */
- (void)hackTurnOffWindowResizeAnimWithBoolean:(jboolean)off;

/**
 @brief Returns true if this view has focus itself, or is the ancestor of the view that has focus.
 @return True if this view has or contains focus, false otherwise.
 */
- (jboolean)hasFocus;

/**
 @brief Returns true if this view is focusable or if it contains a reachable View for which #hasFocusable() returns true.
 A "reachable hasFocusable()" is a View whose parents do not block descendants focus. Only #VISIBLE views are considered focusable.
 @return True if the view is focusable or if the view contains a focusable View, false otherwise.
 */
- (jboolean)hasFocusable;

/**
 @brief Returns true if this view has a nested scrolling parent.
 <p>The presence of a nested scrolling parent indicates that this view has initiated a nested scroll and it was accepted by an ancestor view further up the view hierarchy.</p>
 @return whether this view has a nested scrolling parent
 */
- (jboolean)hasNestedScrollingParent;

/**
 @brief Return whether this view has an attached OnClickListener.
 Returns true if there is a listener, false if there is none.
 */
- (jboolean)hasOnClickListeners;

/**
 @brief Returns whether this View has content which overlaps.
 <p>This function, intended to be overridden by specific View types, is an optimization when alpha is set on a view. If rendering overlaps in a view with alpha < 1, that view is drawn to an offscreen buffer and then composited into place, which can be expensive. If the view has no overlapping rendering, the view can draw each primitive with the appropriate alpha value directly. An example of overlapping rendering is a TextView with a background image, such as a Button. An example of non-overlapping rendering is a TextView with no background, or an ImageView with only the foreground image. The default implementation returns true; subclasses should override if they have cases which can be optimized.</p> <p>The current implementation of the saveLayer and saveLayerAlpha methods in Canvas necessitates that a View return true if it uses the methods internally without passing the Canvas#CLIP_TO_LAYER_SAVE_FLAG .</p>
 @return true if the content in this view might overlap, false otherwise.
 */
- (jboolean)hasOverlappingRendering;

/**
 @brief HierarchyViewer only
 */
- (jboolean)hasShadow;

/**
 @brief Indicates whether the view is currently tracking transient state that the app should not need to concern itself with saving and restoring, but that the framework should take special note to preserve when possible.
 <p>A view with transient state cannot be trivially rebound from an external data source, such as an adapter binding item views in a list. This may be because the view is performing an animation, tracking user selection of content, or similar.</p>
 @return true if the view has transient state
 */
- (jboolean)hasTransientState;

/**
 @brief Returns true if this view is in a window that currently has window focus.
 Note that this is not the same as the view itself having focus.
 @return True if this view is in a window that currently has window focus.
 */
- (jboolean)hasWindowFocus;

/**
 @brief Whether to regard this view for accessibility.
 A view is regarded for accessibility if it is important for accessibility or the querying accessibility service has explicitly requested that view not important for accessibility are regarded.
 @return Whether to regard the view for accessibility.
 */
- (jboolean)includeForAccessibility;

/**
 @brief Inflate a view from an XML resource.
 This convenience method wraps the LayoutInflater class, which provides a full range of options for view inflation.
 @param context The Context object for your activity or application.
 @param resource The resource ID to inflate
 @param root A view group that will be the parent.  Used to properly inflate the layout_* parameters.
 */
+ (RepackagedAndroidViewView *)inflateWithRepackagedAndroidContentContext:(id<RepackagedAndroidContentContext>)context
                                                                  withInt:(jint)resource
                                       withRepackagedAndroidViewViewGroup:(RepackagedAndroidViewViewGroup *)root;

/**
 @brief Invalidate the whole view.
 If the view is visible, #onDraw(repackaged.android.graphics.Canvas) will be called at some point in the future. <p> This must be called from a UI thread. To call from a non-UI thread, call #postInvalidate() .
 */
- (void)invalidate;

/**
 @brief Mark the area defined by the rect (l,t,r,b) as needing to be drawn.
 The coordinates of the dirty rect are relative to the view. If the view is visible, #onDraw(repackaged.android.graphics.Canvas) will be called at some point in the future. <p> This must be called from a UI thread. To call from a non-UI thread, call #postInvalidate() .
 @param l the left position of the dirty region
 @param t the top position of the dirty region
 @param r the right position of the dirty region
 @param b the bottom position of the dirty region
 */
- (void)invalidateWithInt:(jint)l
                  withInt:(jint)t
                  withInt:(jint)r
                  withInt:(jint)b;

/**
 @brief Mark the area defined by dirty as needing to be drawn.
 If the view is visible, #onDraw(repackaged.android.graphics.Canvas) will be called at some point in the future. <p> This must be called from a UI thread. To call from a non-UI thread, call #postInvalidate() . <p> <b>WARNING:</b> In API 19 and below, this method may be destructive to <code>dirty</code> .
 @param dirty the rectangle representing the bounds of the dirty region
 */
- (void)invalidateWithRepackagedAndroidGraphicsRect:(RepackagedAndroidGraphicsRect *)dirty;

/**
 @brief Invalidates the specified Drawable.
 @param drawable the drawable to invalidate
 */
- (void)invalidateDrawableWithRepackagedAndroidGraphicsDrawableDrawable:(RepackagedAndroidGraphicsDrawableDrawable *)drawable;

/**
 @brief Called to rebuild this View's Outline from its ViewOutlineProvider outline provider
 */
- (void)invalidateOutline;

/**
 @brief Returns whether this View is accessibility focused.
 @return True if this View is accessibility focused.
 */
- (jboolean)isAccessibilityFocused;

/**
 @brief Gets whether accessibility selection can be extended.
 @return If selection is extensible.
 */
- (jboolean)isAccessibilitySelectionExtendable;

/**
 @brief Returns whether the View is considered actionable from accessibility perspective.
 Such view are important for accessibility.
 @return True if the view is actionable for accessibility.
 */
- (jboolean)isActionableForAccessibility;

/**
 @brief Indicates the activation state of this view.
 @return true if the view is activated, false otherwise
 */
- (jboolean)isActivated;

/**
 Indicates whether this view will participate in data collection through ViewStructure .  If true, it will not provide any data for itself or its children.  If false, the normal data collection will be allowed.
 @return Returns false if assist data collection is not blocked, else true.
 ref android.R.styleable#View_assistBlocked
 */
- (jboolean)isAssistBlocked;

/**
 @brief Returns true if this view is currently attached to a window.
 */
- (jboolean)isAttachedToWindow;

/**
 @brief Indicates whether this view reacts to click events or not.
 @return true if the view is clickable, false otherwise
 ref android.R.styleable#View_clickable
 */
- (jboolean)isClickable;

/**
 @brief Indicates whether this view reacts to context clicks or not.
 @return true if the view is context clickable, false otherwise
 ref android.R.styleable#View_contextClickable
 */
- (jboolean)isContextClickable;

/**
 @brief True if this view has changed since the last time being drawn.
 @return The dirty state of this view.
 */
- (jboolean)isDirty;

/**
 @brief <p>Indicates whether the drawing cache is enabled for this view.
 </p>
 @return true if the drawing cache is enabled
 */
- (jboolean)isDrawingCacheEnabled;

/**
 @brief <p>Indicates whether this duplicates its drawable state from its parent.
 </p>
 @return True if this view's drawable state is duplicated from the parent, false otherwise
 */
- (jboolean)isDuplicateParentStateEnabled;

/**
 @brief Returns the enabled status for this view.
 The interpretation of the enabled state varies by subclass.
 @return True if this view is enabled, false otherwise.
 */
- (jboolean)isEnabled;

/**
 @brief Returns whether this View is able to take focus.
 @return True if this view can take focus, or false otherwise.
 ref android.R.styleable#View_focusable
 */
- (jboolean)isFocusable;

/**
 @brief When a view is focusable, it may not want to take focus when in touch mode.
 For example, a button would like focus when the user is navigating via a D-pad so that the user can click on it, but once the user starts touching the screen, the button shouldn't take focus
 @return Whether the view is focusable in touch mode.
 ref android.R.styleable#View_focusableInTouchMode
 */
- (jboolean)isFocusableInTouchMode;

/**
 @brief Returns true if this view has focus
 @return True if this view has focus, false otherwise.
 */
- (jboolean)isFocused;

/**
 @brief Magic bit used to support features of framework-internal window decor implementation details.
 This used to live exclusively in FrameLayout.
 @return true if the foreground should draw inside the padding region or false if it should draw inset by the view's padding
 internal use only; only used by FrameLayout and internal screen layouts.
 */
- (jboolean)isForegroundInsidePadding;

/**
 @return whether this view should have haptic feedback enabled for events long presses.
 ref android.R.styleable#View_hapticFeedbackEnabled
 */
- (jboolean)isHapticFeedbackEnabled;

/**
 @brief <p>Indicates whether this view is attached to a hardware accelerated window or not.
 </p> <p>Even if this method returns true, it does not mean that every call to #draw(repackaged.android.graphics.Canvas) will be made with an hardware accelerated repackaged.android.graphics.Canvas . For instance, if this view is drawn onto an offscreen repackaged.android.graphics.Bitmap and its window is hardware accelerated, repackaged.android.graphics.Canvas#isHardwareAccelerated() will likely return false, and this method will return true.</p>
 @return True if the view is attached to a window and the window is hardware accelerated; false in any other case.
 */
- (jboolean)isHardwareAccelerated;

/**
 @brief <p>Indicate whether the horizontal edges are faded when the view is scrolled horizontally.
 </p>
 @return true if the horizontal edges should are faded on scroll, false otherwise
 ref android.R.styleable#View_requiresFadingEdge
 */
- (jboolean)isHorizontalFadingEdgeEnabled;

/**
 @brief <p>Indicate whether the horizontal scrollbar should be drawn or not.
 The scrollbar is not drawn by default.</p>
 @return true if the horizontal scrollbar should be painted, false otherwise
 */
- (jboolean)isHorizontalScrollBarEnabled;

/**
 @brief Returns true if the view is currently hovered.
 @return True if the view is currently hovered.
 */
- (jboolean)isHovered;

/**
 @brief Computes whether this view should be exposed for accessibility.
 In general, views that are interactive or provide information are exposed while views that serve only as containers are hidden. <p> If an ancestor of this view has importance #IMPORTANT_FOR_ACCESSIBILITY_NO_HIDE_DESCENDANTS , this method returns <code>false</code>. <p> Otherwise, the value is computed according to the view's #getImportantForAccessibility() value: <ol> <li> #IMPORTANT_FOR_ACCESSIBILITY_NO or #IMPORTANT_FOR_ACCESSIBILITY_NO_HIDE_DESCENDANTS , return <code>false </code> <li> #IMPORTANT_FOR_ACCESSIBILITY_YES , return <code>true</code> <li> #IMPORTANT_FOR_ACCESSIBILITY_AUTO , return <code>true</code> if view satisfies any of the following: <ul> <li>Is actionable, e.g. #isClickable() , #isLongClickable() , or #isFocusable() <li>Has an AccessibilityDelegate <li>Has an interaction listener, e.g. OnTouchListener , OnKeyListener , etc. <li>Is an accessibility live region, e.g. #getAccessibilityLiveRegion() is not #ACCESSIBILITY_LIVE_REGION_NONE . </ul> </ol>
 @return Whether the view is exposed for accessibility.
 */
- (jboolean)isImportantForAccessibility;

/**
 @brief Indicates whether this View is currently in edit mode.
 A View is usually in edit mode when displayed within a developer tool. For instance, if this View is being drawn by a visual user interface builder, this method should return true. Subclasses should check the return value of this method to provide different behaviors if their normal behavior might interfere with the host environment. For instance: the class spawns a thread in its constructor, the drawing code relies on device-specific features, etc. This method is usually checked in the drawing code of custom widgets.
 @return True if this View is in edit mode, false otherwise.
 */
- (jboolean)isInEditMode;

/**
 @brief Returns whether the view hierarchy is currently undergoing a layout pass.
 This information is useful to avoid situations such as calling #requestLayout() during a layout pass.
 @return whether the view hierarchy is currently undergoing a layout pass
 */
- (jboolean)isInLayout;

/**
 */
- (jboolean)isInScrollingContainer;

/**
 @brief Returns whether the device is currently in touch mode.
 Touch mode is entered once the user begins interacting with the device by touch, and affects various things like whether focus is always visible to the user.
 @return Whether the device is in touch mode.
 */
- (jboolean)isInTouchMode;

/**
 @brief Returns true if this view has been through at least one layout since it was last attached to or detached from a window.
 */
- (jboolean)isLaidOut;

/**
 @return true if the layout direction is inherited.
 */
- (jboolean)isLayoutDirectionInherited;

/**
 @return true if layout direction has been resolved.
 */
- (jboolean)isLayoutDirectionResolved;

/**
 @brief Return true if o is a ViewGroup that is laying out using optical bounds.
 */
+ (jboolean)isLayoutModeOpticalWithId:(id)o;

/**
 @brief <p>Indicates whether or not this view's layout will be requested during the next hierarchy layout pass.
 </p>
 @return true if the layout will be forced during next layout pass
 */
- (jboolean)isLayoutRequested;

/**
 @brief Indicates whether or not this view's layout is right-to-left.
 This is resolved from layout attribute and/or the inherited value from the parent
 @return true if the layout is right-to-left.
 */
- (jboolean)isLayoutRtl;

/**
 @brief Indicates whether this view reacts to long click events or not.
 @return true if the view is long clickable, false otherwise
 ref android.R.styleable#View_longClickable
 */
- (jboolean)isLongClickable;

/**
 @brief Returns true if nested scrolling is enabled for this view.
 <p>If nested scrolling is enabled and this View class implementation supports it, this view will act as a nested scrolling child view when applicable, forwarding data about the scroll operation in progress to a compatible and cooperating nested scrolling parent.</p>
 @return true if nested scrolling is enabled
 */
- (jboolean)isNestedScrollingEnabled;

/**
 @brief Indicates whether this View is opaque.
 An opaque View guarantees that it will draw all the pixels overlapping its bounds using a fully opaque color. Subclasses of View should override this method whenever possible to indicate whether an instance is opaque. Opaque Views are treated in a special way by the View hierarchy, possibly allowing it to perform optimizations during invalidate/draw passes.
 @return True if this View is guaranteed to be fully opaque, false otherwise.
 */
- (jboolean)isOpaque;

/**
 @brief Return if the padding has been set through relative values #setPaddingRelative(int,int,int,int) or through
 ref android.R.styleable#View_paddingStart or
 ref android.R.styleable#View_paddingEnd
 @return true if the padding is relative or false if it is not.
 */
- (jboolean)isPaddingRelative;

/**
 @brief Indicates whether the view is currently in pressed state.
 Unless #setPressed(boolean) is explicitly called, only clickable views can enter the pressed state.
 @return true if the view is currently pressed, false otherwise
 */
- (jboolean)isPressed;

/**
 
 @return true if the view belongs to the root namespace, false otherwise
 */
- (jboolean)isRootNamespace;

/**
 @brief Indicates whether this view will save its state (that is, whether its #onSaveInstanceState method will be called).
 @return Returns true if the view state saving is enabled, else false.
 ref android.R.styleable#View_saveEnabled
 */
- (jboolean)isSaveEnabled;

/**
 @brief Indicates whether the entire hierarchy under this view will save its state when a state saving traversal occurs from its parent.
 The default is true; if false, these views will not be saved unless #saveHierarchyState(SparseArray) is called directly on this view.
 @return Returns true if the view state saving from parent is enabled, else false.
 */
- (jboolean)isSaveFromParentEnabled;

/**
 @brief Returns true if scrollbars will fade when this view is not scrolling
 @return true if scrollbar fading is enabled
 ref android.R.styleable#View_fadeScrollbars
 */
- (jboolean)isScrollbarFadingEnabled;

/**
 @brief Indicates whether this view is one of the set of scrollable containers in its window.
 @return whether this view is one of the set of scrollable containers in its window
 ref android.R.styleable#View_isScrollContainer
 */
- (jboolean)isScrollContainer;

/**
 @brief Indicates the selection state of this view.
 @return true if the view is selected, false otherwise
 */
- (jboolean)isSelected;

/**
 @brief Returns the visibility of this view and all of its ancestors
 @return True if this view and all of its ancestors are #VISIBLE
 */
- (jboolean)isShown;

/**
 @return whether this view should have sound effects enabled for events such as clicking and touching.
 ref android.R.styleable#View_soundEffectsEnabled
 */
- (jboolean)isSoundEffectsEnabled;

/**
 @return true if text alignment is inherited.
 */
- (jboolean)isTextAlignmentInherited;

/**
 @return true if text alignment is resolved.
 */
- (jboolean)isTextAlignmentResolved;

/**
 @return true if text direction is inherited.
 */
- (jboolean)isTextDirectionInherited;

/**
 @return true if text direction is resolved.
 */
- (jboolean)isTextDirectionResolved;

/**
 @brief <p>Indicate whether the vertical edges are faded when the view is scrolled horizontally.
 </p>
 @return true if the vertical edges should are faded on scroll, false otherwise
 ref android.R.styleable#View_requiresFadingEdge
 */
- (jboolean)isVerticalFadingEdgeEnabled;

/**
 @brief <p>Indicate whether the vertical scrollbar should be drawn or not.
 The scrollbar is not drawn by default.</p>
 @return true if the vertical scrollbar should be painted, false otherwise
 */
- (jboolean)isVerticalScrollBarEnabled;

/**
 @brief Call Drawable#jumpToCurrentState() Drawable.jumpToCurrentState() on all Drawable objects associated with this view.
 <p> Also calls StateListAnimator#jumpToCurrentState() if there is a StateListAnimator attached to this view.
 */
- (void)jumpDrawablesToCurrentState;

/**
 @brief Assign a size and position to a view and all of its descendants <p>This is the second phase of the layout mechanism.
 (The first is measuring). In this phase, each parent calls layout on all of its children to position them. This is typically done using the child measurements that were stored in the measure pass().</p> <p>Derived classes should not override this method. Derived classes with children should override onLayout. In that method, they should call layout on each of their children.</p>
 @param l Left position, relative to parent
 @param t Top position, relative to parent
 @param r Right position, relative to parent
 @param b Bottom position, relative to parent
 */
- (void)layoutWithInt:(jint)l
              withInt:(jint)t
              withInt:(jint)r
              withInt:(jint)b;

/**
 @brief For use by PhoneWindow to make its own system window fitting optional.
 */
- (void)makeOptionalFitsSystemWindows;

/**
 @brief <p> This is called to find out how big a view should be.
 The parent supplies constraint information in the width and height parameters. </p> <p> The actual measurement work of a view is performed in #onMeasure(int,int) , called by this method. Therefore, only #onMeasure(int,int) can and must be overridden by subclasses. </p>
 @param widthMeasureSpec Horizontal space requirements as imposed by the parent
 @param heightMeasureSpec Vertical space requirements as imposed by the parent
 */
- (void)measureWithInt:(jint)widthMeasureSpec
               withInt:(jint)heightMeasureSpec;

/**
 @brief Notifies that the accessibility state of this view changed.
 The change is *not* local to this view and does represent structural changes such as children and parent. For example, the view size changed. The notification is at at most once every ViewConfiguration#getSendRecurringAccessibilityEventsInterval() to avoid unnecessary load to the system. Also once a view has a pending notification this method is a NOP until the notification has been sent.
 */
- (void)notifySubtreeAccessibilityStateChangedIfNeeded;

/**
 @brief Notifies that the accessibility state of this view changed.
 The change is local to this view and does not represent structural changes such as children and parent. For example, the view became focusable. The notification is at at most once every ViewConfiguration#getSendRecurringAccessibilityEventsInterval() to avoid unnecessary load to the system. Also once a view has a pending notification this method is a NOP until the notification has been sent.
 */
- (void)notifyViewAccessibilityStateChangedIfNeededWithInt:(jint)changeType;

/**
 @brief Offset this view's horizontal location by the specified amount of pixels.
 @param offset the number of pixels to offset the view by
 */
- (void)offsetLeftAndRightWithInt:(jint)offset;

/**
 @brief Offset this view's vertical location by the specified number of pixels.
 @param offset the number of pixels to offset the view by
 */
- (void)offsetTopAndBottomWithInt:(jint)offset;

/**
 @brief Receive the result from a previous call to #startActivityForResult(Intent,int) .
 @param requestCode The integer request code originally supplied to startActivityForResult(), allowing you to identify who this result came from.
 @param resultCode The integer result code returned by the child activity through its setResult().
 @param data An Intent, which can return result data to the caller (various data can be attached to Intent "extras").
 */
- (void)onActivityResultWithInt:(jint)requestCode
                        withInt:(jint)resultCode
withRepackagedAndroidContentIntent:(id<RepackagedAndroidContentIntent>)data;

/**
 @brief Called when the view should apply WindowInsets according to its internal policy.
 <p>This method should be overridden by views that wish to apply a policy different from or in addition to the default behavior. Clients that wish to force a view subtree to apply insets should call #dispatchApplyWindowInsets(WindowInsets) .</p> <p>Clients may supply an OnApplyWindowInsetsListener to a view. If one is set it will be called during dispatch instead of this method. The listener may optionally call this method from its own implementation if it wishes to apply the view's default insets policy in addition to its own.</p> <p>Implementations of this method should either return the insets parameter unchanged or a new WindowInsets cloned from the supplied insets with any insets consumed that this view applied itself. This allows new inset types added in future platform versions to pass through existing implementations unchanged without being erroneously consumed.</p> <p>By default if a view's #setFitsSystemWindows(boolean) fitsSystemWindows property is set then the view will consume the system window insets and apply them as padding for the view.</p>
 @param insets Insets to apply
 @return The supplied insets with any applied insets consumed
 */
- (RepackagedAndroidViewWindowInsets *)onApplyWindowInsetsWithRepackagedAndroidViewWindowInsets:(RepackagedAndroidViewWindowInsets *)insets;

/**
 @brief Called as the result of a call to #cancelPendingInputEvents() on this view or a parent view.
 <p>This method is responsible for removing any pending high-level input events that were posted to the event queue to run later. Custom view classes that post their own deferred high-level events via #post(Runnable) , #postDelayed(Runnable,long) or repackaged.android.os.Handler should override this method, call <code>super.onCancelPendingInputEvents()</code> and remove those callbacks as appropriate. </p>
 */
- (void)onCancelPendingInputEvents;

/**
 @brief Check whether the called view is a text editor, in which case it would make sense to automatically display a soft input window for it.
 Subclasses should override this if they implement #onCreateInputConnection(EditorInfo) to return true if a call on that method would return a non-null InputConnection, and they are really a first-class editor that the user would normally start typing on when the go into a window containing your view. <p>The default implementation always returns false.  This does <em>not</em> mean that its #onCreateInputConnection(EditorInfo) will not be called or the user can not otherwise perform edits on your view; it is just a hint to the system that this is not the primary purpose of this view.
 @return Returns true if this view is a text editor, else false.
 */
- (jboolean)onCheckIsTextEditor;

/**
 @brief This needs to be a better API (NOT ON VIEW) before it is exposed.
 If it is ever exposed at all.
 */
- (void)onCloseSystemDialogsWithNSString:(NSString *)reason;

/**
 @brief Create a new InputConnection for an InputMethod to interact with the view.
 The default implementation returns null, since it doesn't support input methods.  You can override this to implement such support. This is only needed for views that take focus and text input. <p>When implementing this, you probably also want to implement #onCheckIsTextEditor() to indicate you will return a non-null InputConnection.</p> <p>Also, take good care to fill in the repackaged.android.view.inputmethod.EditorInfo object correctly and in its entirety, so that the connected IME can rely on its values. For example, repackaged.android.view.inputmethod.EditorInfo#initialSelStart and repackaged.android.view.inputmethod.EditorInfo#initialSelEnd members must be filled in with the correct cursor position for IMEs to work correctly with your application.</p>
 @param outAttrs Fill in with attribute information about the connection.
 */
- (RepackagedAndroidViewInputmethodInputConnection *)onCreateInputConnectionWithRepackagedAndroidViewInputmethodEditorInfo:(id<RepackagedAndroidViewInputmethodEditorInfo>)outAttrs;

/**
 @brief Handles drag events sent by the system following a call to repackaged.android.view.View#startDrag(ClipData,DragShadowBuilder,Object,int) startDrag() .
 <p> When the system calls this method, it passes a repackaged.android.view.DragEvent object. A call to repackaged.android.view.DragEvent#getAction() returns one of the action type constants defined in DragEvent. The method uses these to determine what is happening in the drag and drop operation.
 @param event The repackaged.android.view.DragEvent sent by the system. The repackaged.android.view.DragEvent#getAction() method returns an action type constant defined in DragEvent, indicating the type of drag event represented by this object.
 @return <code>true</code> if the method was successful, otherwise <code>false</code> . <p> The method should return <code>true</code> in response to an action type of repackaged.android.view.DragEvent#ACTION_DRAG_STARTED to receive drag events for the current operation. </p> <p> The method should also return <code>true</code> in response to an action type of repackaged.android.view.DragEvent#ACTION_DROP if it consumed the drop, or <code>false</code> if it didn't. </p>
 */
- (jboolean)onDragEventWithRepackagedAndroidViewDragEvent:(RepackagedAndroidViewDragEvent *)event;

/**
 @brief Draw any foreground content for this view.
 <p>Foreground content may consist of scroll bars, a #setForeground foreground drawable or other view-specific decorations. The foreground is drawn on top of the primary view content.</p>
 @param canvas canvas to draw into
 */
- (void)onDrawForegroundWithRepackagedAndroidGraphicsCanvas:(RepackagedAndroidGraphicsCanvas *)canvas;

/**
 @brief Filter the touch event to apply security policies.
 @param event The motion event to be filtered.
 @return True if the event should be dispatched, false if the event should be dropped.
 */
- (jboolean)onFilterTouchEventForSecurityWithRepackagedAndroidViewMotionEvent:(RepackagedAndroidViewMotionEvent *)event;

/**
 @brief Called after #onStartTemporaryDetach when the container is done changing the view.
 */
- (void)onFinishTemporaryDetach;

/**
 @brief Implement this method to handle generic motion events.
 <p> Generic motion events describe joystick movements, mouse hovers, track pad touches, scroll wheel movements and other input events.  The MotionEvent#getSource() source of the motion event specifies the class of input that was received.  Implementations of this method must examine the bits in the source before processing the event. The following code example shows how this is done. </p><p> Generic motion events with source class InputDevice#SOURCE_CLASS_POINTER are delivered to the view under the pointer.  All other generic motion events are delivered to the focused view. </p> <pre> public boolean onGenericMotionEvent(MotionEvent event) { if (event.isFromSource(InputDevice.SOURCE_CLASS_JOYSTICK)) { if (event.getAction() == MotionEvent.ACTION_MOVE) { // process the joystick movement... return true; } } if (event.isFromSource(InputDevice.SOURCE_CLASS_POINTER)) { switch (event.getAction()) { case MotionEvent.ACTION_HOVER_MOVE: // process the mouse hover movement... return true; case MotionEvent.ACTION_SCROLL: // process the scroll wheel movement... return true; } } return super.onGenericMotionEvent(event); }</pre>
 @param event The generic motion event being processed.
 @return True if the event was handled, false otherwise.
 */
- (jboolean)onGenericMotionEventWithRepackagedAndroidViewMotionEvent:(RepackagedAndroidViewMotionEvent *)event;

/**
 @brief Implement this method to handle hover state changes.
 <p> This method is called whenever the hover state changes as a result of a call to #setHovered . </p>
 @param hovered The current hover state, as returned by #isHovered .
 */
- (void)onHoverChangedWithBoolean:(jboolean)hovered;

/**
 @brief Implement this method to handle hover events.
 <p> This method is called whenever a pointer is hovering into, over, or out of the bounds of a view and the view is not currently being touched. Hover events are represented as pointer events with action MotionEvent#ACTION_HOVER_ENTER , MotionEvent#ACTION_HOVER_MOVE , or MotionEvent#ACTION_HOVER_EXIT . </p> <ul> <li>The view receives a hover event with action MotionEvent#ACTION_HOVER_ENTER when the pointer enters the bounds of the view.</li> <li>The view receives a hover event with action MotionEvent#ACTION_HOVER_MOVE when the pointer has already entered the bounds of the view and has moved.</li> <li>The view receives a hover event with action MotionEvent#ACTION_HOVER_EXIT when the pointer has exited the bounds of the view or when the pointer is about to go down due to a button click, tap, or similar user action that causes the view to be touched.</li> </ul> <p> The view should implement this method to return true to indicate that it is handling the hover event, such as by changing its drawable state. </p><p> The default implementation calls #setHovered to update the hovered state of the view when a hover enter or hover exit event is received, if the view is enabled and is clickable.  The default implementation also sends hover accessibility events. </p>
 @param event The motion event that describes the hover.
 @return True if the view handled the hover event.
 */
- (jboolean)onHoverEventWithRepackagedAndroidViewMotionEvent:(RepackagedAndroidViewMotionEvent *)event;

/**
 @brief Initializes an AccessibilityEvent with information about this View which is the event source.
 In other words, the source of an accessibility event is the view whose state change triggered firing the event. <p> Example: Setting the password property of an event in addition to properties set by the super implementation: <pre> public void onInitializeAccessibilityEvent(AccessibilityEvent event) { super.onInitializeAccessibilityEvent(event); event.setPassword(true); }</pre> <p> If an AccessibilityDelegate has been specified via calling #setAccessibilityDelegate(AccessibilityDelegate) its AccessibilityDelegate#onInitializeAccessibilityEvent(View,AccessibilityEvent) is responsible for handling this call. </p> <p class="note"><strong>Note:</strong> Always call the super implementation before adding information to the event, in case the default implementation has basic information to add. </p>
 @param event The event to initialize.
 */
- (void)onInitializeAccessibilityEventWithRepackagedAndroidViewAccessibilityAccessibilityEvent:(RepackagedAndroidViewAccessibilityAccessibilityEvent *)event;

/**
 */
- (void)onInitializeAccessibilityEventInternalWithRepackagedAndroidViewAccessibilityAccessibilityEvent:(RepackagedAndroidViewAccessibilityAccessibilityEvent *)event;

/**
 @brief Initializes an AccessibilityNodeInfo with information about this view.
 The base implementation sets: <ul> <li> AccessibilityNodeInfo#setParent(View) ,</li> <li> AccessibilityNodeInfo#setBoundsInParent(Rect) ,</li> <li> AccessibilityNodeInfo#setBoundsInScreen(Rect) ,</li> <li> AccessibilityNodeInfo#setPackageName(CharSequence) ,</li> <li> AccessibilityNodeInfo#setClassName(CharSequence) ,</li> <li> AccessibilityNodeInfo#setContentDescription(CharSequence) ,</li> <li> AccessibilityNodeInfo#setEnabled(boolean) ,</li> <li> AccessibilityNodeInfo#setClickable(boolean) ,</li> <li> AccessibilityNodeInfo#setFocusable(boolean) ,</li> <li> AccessibilityNodeInfo#setFocused(boolean) ,</li> <li> AccessibilityNodeInfo#setLongClickable(boolean) ,</li> <li> AccessibilityNodeInfo#setSelected(boolean) ,</li> <li> AccessibilityNodeInfo#setContextClickable(boolean) </li> </ul> <p> Subclasses should override this method, call the super implementation, and set additional attributes. </p> <p> If an AccessibilityDelegate has been specified via calling #setAccessibilityDelegate(AccessibilityDelegate) its AccessibilityDelegate#onInitializeAccessibilityNodeInfo(View,AccessibilityNodeInfo) is responsible for handling this call. </p>
 @param info The instance to initialize.
 */
- (void)onInitializeAccessibilityNodeInfoWithRepackagedAndroidViewAccessibilityAccessibilityNodeInfo:(RepackagedAndroidViewAccessibilityAccessibilityNodeInfo *)info;

/**
 */
- (void)onInitializeAccessibilityNodeInfoInternalWithRepackagedAndroidViewAccessibilityAccessibilityNodeInfo:(RepackagedAndroidViewAccessibilityAccessibilityNodeInfo *)info;

/**
 @brief Default implementation of KeyEvent.Callback#onKeyDown(int,KeyEvent) KeyEvent.Callback.onKeyDown() : perform press of the view when KeyEvent#KEYCODE_DPAD_CENTER or KeyEvent#KEYCODE_ENTER is released, if the view is enabled and clickable.
 <p>Key presses in software keyboards will generally NOT trigger this listener, although some may elect to do so in some situations. Do not rely on this to catch software key presses.
 @param keyCode A key code that represents the button pressed, from repackaged.android.view.KeyEvent .
 @param event The KeyEvent object that defines the button action.
 */
- (jboolean)onKeyDownWithInt:(jint)keyCode
withRepackagedAndroidViewKeyEvent:(RepackagedAndroidViewKeyEvent *)event;

/**
 @brief Default implementation of KeyEvent.Callback#onKeyLongPress(int,KeyEvent) KeyEvent.Callback.onKeyLongPress() : always returns false (doesn't handle the event).
 <p>Key presses in software keyboards will generally NOT trigger this listener, although some may elect to do so in some situations. Do not rely on this to catch software key presses.
 */
- (jboolean)onKeyLongPressWithInt:(jint)keyCode
withRepackagedAndroidViewKeyEvent:(RepackagedAndroidViewKeyEvent *)event;

/**
 @brief Default implementation of KeyEvent.Callback#onKeyMultiple(int,int,KeyEvent) KeyEvent.Callback.onKeyMultiple() : always returns false (doesn't handle the event).
 <p>Key presses in software keyboards will generally NOT trigger this listener, although some may elect to do so in some situations. Do not rely on this to catch software key presses.
 @param keyCode A key code that represents the button pressed, from repackaged.android.view.KeyEvent .
 @param repeatCount The number of times the action was made.
 @param event The KeyEvent object that defines the button action.
 */
- (jboolean)onKeyMultipleWithInt:(jint)keyCode
                         withInt:(jint)repeatCount
withRepackagedAndroidViewKeyEvent:(RepackagedAndroidViewKeyEvent *)event;

/**
 @brief Handle a key event before it is processed by any input method associated with the view hierarchy.
 This can be used to intercept key events in special situations before the IME consumes them; a typical example would be handling the BACK key to update the application's UI instead of allowing the IME to see it and close itself.
 @param keyCode The value in event.getKeyCode().
 @param event Description of the key event.
 @return If you handled the event, return true. If you want to allow the event to be handled by the next receiver, return false.
 */
- (jboolean)onKeyPreImeWithInt:(jint)keyCode
withRepackagedAndroidViewKeyEvent:(RepackagedAndroidViewKeyEvent *)event;

/**
 @brief Called on the focused view when a key shortcut event is not handled.
 Override this method to implement local key shortcuts for the View. Key shortcuts can also be implemented by setting the MenuItem#setShortcut(char,char) shortcut property of menu items.
 @param keyCode The value in event.getKeyCode().
 @param event Description of the key event.
 @return If you handled the event, return true. If you want to allow the event to be handled by the next receiver, return false.
 */
- (jboolean)onKeyShortcutWithInt:(jint)keyCode
withRepackagedAndroidViewKeyEvent:(RepackagedAndroidViewKeyEvent *)event;

/**
 @brief Default implementation of KeyEvent.Callback#onKeyUp(int,KeyEvent) KeyEvent.Callback.onKeyUp() : perform clicking of the view when KeyEvent#KEYCODE_DPAD_CENTER or KeyEvent#KEYCODE_ENTER is released.
 <p>Key presses in software keyboards will generally NOT trigger this listener, although some may elect to do so in some situations. Do not rely on this to catch software key presses.
 @param keyCode A key code that represents the button pressed, from repackaged.android.view.KeyEvent .
 @param event The KeyEvent object that defines the button action.
 */
- (jboolean)onKeyUpWithInt:(jint)keyCode
withRepackagedAndroidViewKeyEvent:(RepackagedAndroidViewKeyEvent *)event;

/**
 @brief Called from #dispatchPopulateAccessibilityEvent(AccessibilityEvent) giving a chance to this View to populate the accessibility event with its text content.
 While this method is free to modify event attributes other than text content, doing so should normally be performed in #onInitializeAccessibilityEvent(AccessibilityEvent) . <p> Example: Adding formatted date string to an accessibility event in addition to the text added by the super implementation: <pre> public void onPopulateAccessibilityEvent(AccessibilityEvent event) { super.onPopulateAccessibilityEvent(event); final int flags = DateUtils.FORMAT_SHOW_DATE | DateUtils.FORMAT_SHOW_WEEKDAY; String selectedDateUtterance = DateUtils.formatDateTime(mContext, mCurrentDate.getTimeInMillis(), flags); event.getText().add(selectedDateUtterance); }</pre> <p> If an AccessibilityDelegate has been specified via calling #setAccessibilityDelegate(AccessibilityDelegate) its AccessibilityDelegate#onPopulateAccessibilityEvent(View,AccessibilityEvent) is responsible for handling this call. </p> <p class="note"><strong>Note:</strong> Always call the super implementation before adding information to the event, in case the default implementation has basic information to add. </p>
 @param event The accessibility event which to populate.
 */
- (void)onPopulateAccessibilityEventWithRepackagedAndroidViewAccessibilityAccessibilityEvent:(RepackagedAndroidViewAccessibilityAccessibilityEvent *)event;

/**
 */
- (void)onPopulateAccessibilityEventInternalWithRepackagedAndroidViewAccessibilityAccessibilityEvent:(RepackagedAndroidViewAccessibilityAccessibilityEvent *)event;

/**
 @brief Called when assist structure is being retrieved from a view as part of android.app.Activity#onProvideAssistData Activity.onProvideAssistData .
 @param structure Fill in with structured view data.  The default implementation fills in all data that can be inferred from the view itself.
 */
- (void)onProvideStructureWithRepackagedAndroidViewViewStructure:(RepackagedAndroidViewViewStructure *)structure;

/**
 @brief Called when assist structure is being retrieved from a view as part of android.app.Activity#onProvideAssistData Activity.onProvideAssistData to generate additional virtual structure under this view.
 The defaullt implementation uses #getAccessibilityNodeProvider() to try to generate this from the view's virtual accessibility nodes, if any.  You can override this for a more optimal implementation providing this data.
 */
- (void)onProvideVirtualStructureWithRepackagedAndroidViewViewStructure:(RepackagedAndroidViewViewStructure *)structure;

/**
 @brief Called when layout direction has been resolved.
 The default implementation does nothing.
 @param layoutDirection The resolved layout direction.
 */
- (void)onResolveDrawablesWithInt:(jint)layoutDirection;

/**
 @brief Called when any RTL property (layout direction or text direction or text alignment) has been changed.
 Subclasses need to override this method to take care of cached information that depends on the resolved layout direction, or to inform child views that inherit their layout direction. The default implementation does nothing.
 @param layoutDirection the direction of the layout
 */
- (void)onRtlPropertiesChangedWithInt:(jint)layoutDirection;

/**
 @brief This method is called whenever the state of the screen this view is attached to changes.
 A state change will usually occurs when the screen turns on or off (whether it happens automatically or the user does it manually.)
 @param screenState The new state of the screen. Can be either #SCREEN_STATE_ON or #SCREEN_STATE_OFF
 */
- (void)onScreenStateChangedWithInt:(jint)screenState;

/**
 @brief This is called when a container is going to temporarily detach a child, with ViewGroup#detachViewFromParent(View) ViewGroup.detachViewFromParent .
 It will either be followed by #onFinishTemporaryDetach() or #onDetachedFromWindow() when the container is done.
 */
- (void)onStartTemporaryDetach;

/**
 @brief Implement this method to handle touch screen motion events.
 <p> If this method is used to detect click actions, it is recommended that the actions be performed by implementing and calling #performClick() . This will ensure consistent system behavior, including: <ul> <li>obeying click sound preferences <li>dispatching OnClickListener calls <li>handling AccessibilityNodeInfo#ACTION_CLICK ACTION_CLICK when accessibility features are enabled </ul>
 @param event The motion event.
 @return True if the event was handled, false otherwise.
 */
- (jboolean)onTouchEventWithRepackagedAndroidViewMotionEvent:(RepackagedAndroidViewMotionEvent *)event;

/**
 @brief Implement this method to handle trackball motion events.
 The <em>relative</em> movement of the trackball since the last event can be retrieve with MotionEvent#getX MotionEvent.getX() and MotionEvent#getY MotionEvent.getY() .  These are normalized so that a movement of 1 corresponds to the user pressing one DPAD key (so they will often be fractional values, representing the more fine-grained movement information available from a trackball).
 @param event The motion event.
 @return True if the event was handled, false otherwise.
 */
- (jboolean)onTrackballEventWithRepackagedAndroidViewMotionEvent:(RepackagedAndroidViewMotionEvent *)event;

/**
 @brief Called when the window containing this view gains or loses focus.
 Note that this is separate from view focus: to receive key events, both your view and its window must have focus.  If a window is displayed on top of yours that takes input focus, then your own window will lose focus but the view focus will remain unchanged.
 @param hasWindowFocus True if the window containing this view now has focus, false otherwise.
 */
- (void)onWindowFocusChangedWithBoolean:(jboolean)hasWindowFocus;

/**
 @brief Override to find out when the window's requested system UI visibility has changed, that is the value returned by #getWindowSystemUiVisibility() .
 This is different from the callbacks received through #setOnSystemUiVisibilityChangeListener(OnSystemUiVisibilityChangeListener) in that this is only telling you about the local request of the window, not the actual values applied by the system.
 */
- (void)onWindowSystemUiVisibilityChangedWithInt:(jint)visible;

/**
 @brief Debugging utility which recursively outputs the dirty state of a view and its descendants.
 */
- (void)outputDirtyFlagsWithNSString:(NSString *)indent
                         withBoolean:(jboolean)clear
                             withInt:(jint)clearMask;

/**
 @brief Performs the specified accessibility action on the view.
 For possible accessibility actions look at AccessibilityNodeInfo . <p> If an AccessibilityDelegate has been specified via calling #setAccessibilityDelegate(AccessibilityDelegate) its AccessibilityDelegate#performAccessibilityAction(View,int,Bundle) is responsible for handling this call. </p> <p>The default implementation will delegate AccessibilityNodeInfo#ACTION_SCROLL_BACKWARD and AccessibilityNodeInfo#ACTION_SCROLL_FORWARD to nested scrolling parents if #isNestedScrollingEnabled() nested scrolling is enabled on this view.</p>
 @param action The action to perform.
 @param arguments Optional action arguments.
 @return Whether the action was performed.
 */
- (jboolean)performAccessibilityActionWithInt:(jint)action
                withRepackagedAndroidOsBundle:(RepackagedAndroidOsBundle *)arguments;

/**
 */
- (jboolean)performAccessibilityActionInternalWithInt:(jint)action
                        withRepackagedAndroidOsBundle:(RepackagedAndroidOsBundle *)arguments;

/**
 @brief Call this view's OnClickListener, if it is defined.
 Performs all normal actions associated with clicking: reporting accessibility event, playing a sound, etc.
 @return True there was an assigned OnClickListener that was called, false otherwise is returned.
 */
- (jboolean)performClick;

/**
 @brief Call this view's OnContextClickListener, if it is defined.
 @return True if there was an assigned OnContextClickListener that consumed the event, false otherwise.
 */
- (jboolean)performContextClick;

/**
 @brief BZZZTT!!
 1! <p>Provide haptic feedback to the user for this view. <p>The framework will provide haptic feedback for some built in actions, such as long presses, but you may wish to provide feedback for your own widget. <p>The feedback will only be performed if #isHapticFeedbackEnabled() is true.
 @param feedbackConstant One of the constants defined in HapticFeedbackConstants
 */
- (jboolean)performHapticFeedbackWithInt:(jint)feedbackConstant;

/**
 @brief BZZZTT!!
 1! <p>Like #performHapticFeedback(int) , with additional options.
 @param feedbackConstant One of the constants defined in HapticFeedbackConstants
 @param flags Additional flags as per HapticFeedbackConstants .
 */
- (jboolean)performHapticFeedbackWithInt:(jint)feedbackConstant
                                 withInt:(jint)flags;

/**
 @brief Call this view's OnLongClickListener, if it is defined.
 Invokes the context menu if the OnLongClickListener did not consume the event.
 @return True if one of the above receivers consumed the event, false otherwise.
 */
- (jboolean)performLongClick;

/**
 @brief Play a sound effect for this view.
 <p>The framework will play sound effects for some built in actions, such as clicking, but you may wish to play these effects in your widget, for instance, for internal navigation. <p>The sound effect will only be played if sound effects are enabled by the user, and #isSoundEffectsEnabled() is true.
 @param soundConstant One of the constants defined in SoundEffectConstants
 */
- (void)playSoundEffectWithInt:(jint)soundConstant;

/**
 @brief Utility method to determine whether the given point, in local coordinates, is inside the view, where the area of the view is expanded by the slop factor.
 This method is called while processing touch-move events to determine if the event is still within the view.
 */
- (jboolean)pointInViewWithFloat:(jfloat)localX
                       withFloat:(jfloat)localY
                       withFloat:(jfloat)slop;

/**
 @brief <p>Causes the Runnable to be added to the message queue.
 The runnable will be run on the user interface thread.</p>
 @param action The Runnable that will be executed.
 @return Returns true if the Runnable was successfully placed in to the message queue.  Returns false on failure, usually because the looper processing the message queue is exiting.
 */
- (jboolean)postWithJavaLangRunnable:(id<JavaLangRunnable>)action;

/**
 @brief <p>Causes the Runnable to be added to the message queue, to be run after the specified amount of time elapses.
 The runnable will be run on the user interface thread.</p>
 @param action The Runnable that will be executed.
 @param delayMillis The delay (in milliseconds) until the Runnable will be executed.
 @return true if the Runnable was successfully placed in to the message queue.  Returns false on failure, usually because the looper processing the message queue is exiting.  Note that a result of true does not mean the Runnable will be processed -- if the looper is quit before the delivery time of the message occurs then the message will be dropped.
 */
- (jboolean)postDelayedWithJavaLangRunnable:(id<JavaLangRunnable>)action
                                   withLong:(jlong)delayMillis;

/**
 @brief <p>Cause an invalidate to happen on a subsequent cycle through the event loop.
 Use this to invalidate the View from a non-UI thread.</p> <p>This method can be invoked from outside of the UI thread only when this View is attached to a window.</p>
 */
- (void)postInvalidate;

/**
 @brief <p>Cause an invalidate of the specified area to happen on a subsequent cycle through the event loop.
 Use this to invalidate the View from a non-UI thread.</p> <p>This method can be invoked from outside of the UI thread only when this View is attached to a window.</p>
 @param left The left coordinate of the rectangle to invalidate.
 @param top The top coordinate of the rectangle to invalidate.
 @param right The right coordinate of the rectangle to invalidate.
 @param bottom The bottom coordinate of the rectangle to invalidate.
 */
- (void)postInvalidateWithInt:(jint)left
                      withInt:(jint)top
                      withInt:(jint)right
                      withInt:(jint)bottom;

/**
 @brief <p>Cause an invalidate to happen on a subsequent cycle through the event loop.
 Waits for the specified amount of time.</p> <p>This method can be invoked from outside of the UI thread only when this View is attached to a window.</p>
 @param delayMilliseconds the duration in milliseconds to delay the invalidation by
 */
- (void)postInvalidateDelayedWithLong:(jlong)delayMilliseconds;

/**
 @brief <p>Cause an invalidate of the specified area to happen on a subsequent cycle through the event loop.
 Waits for the specified amount of time.</p> <p>This method can be invoked from outside of the UI thread only when this View is attached to a window.</p>
 @param delayMilliseconds the duration in milliseconds to delay the invalidation by
 @param left The left coordinate of the rectangle to invalidate.
 @param top The top coordinate of the rectangle to invalidate.
 @param right The right coordinate of the rectangle to invalidate.
 @param bottom The bottom coordinate of the rectangle to invalidate.
 */
- (void)postInvalidateDelayedWithLong:(jlong)delayMilliseconds
                              withInt:(jint)left
                              withInt:(jint)top
                              withInt:(jint)right
                              withInt:(jint)bottom;

/**
 @brief <p>Cause an invalidate to happen on the next animation time step, typically the next display frame.
 </p> <p>This method can be invoked from outside of the UI thread only when this View is attached to a window.</p>
 */
- (void)postInvalidateOnAnimation;

/**
 @brief <p>Cause an invalidate of the specified area to happen on the next animation time step, typically the next display frame.
 </p> <p>This method can be invoked from outside of the UI thread only when this View is attached to a window.</p>
 @param left The left coordinate of the rectangle to invalidate.
 @param top The top coordinate of the rectangle to invalidate.
 @param right The right coordinate of the rectangle to invalidate.
 @param bottom The bottom coordinate of the rectangle to invalidate.
 */
- (void)postInvalidateOnAnimationWithInt:(jint)left
                                 withInt:(jint)top
                                 withInt:(jint)right
                                 withInt:(jint)bottom;

/**
 @brief <p>Causes the Runnable to execute on the next animation time step.
 The runnable will be run on the user interface thread.</p>
 @param action The Runnable that will be executed.
 */
- (void)postOnAnimationWithJavaLangRunnable:(id<JavaLangRunnable>)action;

/**
 @brief <p>Causes the Runnable to execute on the next animation time step, after the specified amount of time elapses.
 The runnable will be run on the user interface thread.</p>
 @param action The Runnable that will be executed.
 @param delayMillis The delay (in milliseconds) until the Runnable will be executed.
 */
- (void)postOnAnimationDelayedWithJavaLangRunnable:(id<JavaLangRunnable>)action
                                          withLong:(jlong)delayMillis;

/**
 @brief Call this to force a view to update its drawable state.
 This will cause drawableStateChanged to be called on this view. Views that are interested in the new state should call getDrawableState.
 */
- (void)refreshDrawableState;

/**
 @brief <p>Removes the specified Runnable from the message queue.
 </p>
 @param action The Runnable to remove from the message handling queue
 @return true if this view could ask the Handler to remove the Runnable, false otherwise. When the returned value is true, the Runnable may or may not have been actually removed from the message queue (for instance, if the Runnable was not in the queue already.)
 */
- (jboolean)removeCallbacksWithJavaLangRunnable:(id<JavaLangRunnable>)action;

/**
 @brief Remove a listener for attach state changes.
 The listener will receive no further notification of window attach/detach events.
 @param listener Listener to remove
 */
- (void)removeOnAttachStateChangeListenerWithRepackagedAndroidViewView_OnAttachStateChangeListener:(id<RepackagedAndroidViewView_OnAttachStateChangeListener>)listener;

/**
 @brief Remove a listener for layout changes.
 @param listener The listener for layout bounds change.
 */
- (void)removeOnLayoutChangeListenerWithRepackagedAndroidViewView_OnLayoutChangeListener:(id<RepackagedAndroidViewView_OnLayoutChangeListener>)listener;

/**
 @brief Call this to try to give accessibility focus to this view.
 A view will not actually take focus if AccessibilityManager#isEnabled() returns false or the view is no visible or the view already has accessibility focus. See also #focusSearch(int) , which is what you call to say that you have focus, and you want your parent to look for the next one.
 @return Whether this view actually took accessibility focus.
 */
- (jboolean)requestAccessibilityFocus;

/**
 @brief Ask that a new dispatch of #onApplyWindowInsets(WindowInsets) be performed.
 */
- (void)requestApplyInsets;

/**
 @brief Ask that a new dispatch of #fitSystemWindows(Rect) be performed.
 */
- (void)requestFitSystemWindows;

/**
 @brief Call this to try to give focus to a specific view or to one of its descendants.
 A view will not actually take focus if it is not focusable ( #isFocusable returns false), or if it is focusable and it is not focusable in touch mode ( #isFocusableInTouchMode ) while the device is in touch mode. See also #focusSearch(int) , which is what you call to say that you have focus, and you want your parent to look for the next one. This is equivalent to calling #requestFocus(int,Rect) with arguments #FOCUS_DOWN and <code>null</code>.
 @return Whether this view or one of its descendants actually took focus.
 */
- (jboolean)requestFocus;

/**
 @brief Call this to try to give focus to a specific view or to one of its descendants and give it a hint about what direction focus is heading.
 A view will not actually take focus if it is not focusable ( #isFocusable returns false), or if it is focusable and it is not focusable in touch mode ( #isFocusableInTouchMode ) while the device is in touch mode. See also #focusSearch(int) , which is what you call to say that you have focus, and you want your parent to look for the next one. This is equivalent to calling #requestFocus(int,Rect) with <code>null</code> set for the previously focused rectangle.
 @param direction One of FOCUS_UP, FOCUS_DOWN, FOCUS_LEFT, and FOCUS_RIGHT
 @return Whether this view or one of its descendants actually took focus.
 */
- (jboolean)requestFocusWithInt:(jint)direction;

/**
 @brief Call this to try to give focus to a specific view or to one of its descendants and give it hints about the direction and a specific rectangle that the focus is coming from.
 The rectangle can help give larger views a finer grained hint about where focus is coming from, and therefore, where to show selection, or forward focus change internally. A view will not actually take focus if it is not focusable ( #isFocusable returns false), or if it is focusable and it is not focusable in touch mode ( #isFocusableInTouchMode ) while the device is in touch mode. A View will not take focus if it is not visible. A View will not take focus if one of its parents has repackaged.android.view.ViewGroup#getDescendantFocusability() equal to ViewGroup#FOCUS_BLOCK_DESCENDANTS . See also #focusSearch(int) , which is what you call to say that you have focus, and you want your parent to look for the next one. You may wish to override this method if your custom View has an internal View that it wishes to forward the request to.
 @param direction One of FOCUS_UP, FOCUS_DOWN, FOCUS_LEFT, and FOCUS_RIGHT
 @param previouslyFocusedRect The rectangle (in this View's coordinate system) to give a finer grained hint about where focus is coming from.  May be null if there is no hint.
 @return Whether this view or one of its descendants actually took focus.
 */
- (jboolean)requestFocusWithInt:(jint)direction
withRepackagedAndroidGraphicsRect:(RepackagedAndroidGraphicsRect *)previouslyFocusedRect;

/**
 @brief Call this to try to give focus to a specific view or to one of its descendants.
 This is a special variant of #requestFocus() that will allow views that are not focusable in touch mode to request focus when they are touched.
 @return Whether this view or one of its descendants actually took focus.
 */
- (jboolean)requestFocusFromTouch;

/**
 @brief Call this when something has changed which has invalidated the layout of this view.
 This will schedule a layout pass of the view tree. This should not be called while the view hierarchy is currently in a layout pass ( #isInLayout() . If layout is happening, the request may be honored at the end of the current layout pass (and then layout will run again) or after the current frame is drawn and the next layout occurs. <p>Subclasses which override this method should call the superclass method to handle possible request-during-layout errors correctly.</p>
 */
- (void)requestLayout;

/**
 @brief Request that a rectangle of this view be visible on the screen, scrolling if necessary just enough.
 <p>A View should call this if it maintains some notion of which part of its content is interesting.  For example, a text editing view should call this when its cursor moves.
 @param rectangle The rectangle.
 @return Whether any parent scrolled.
 */
- (jboolean)requestRectangleOnScreenWithRepackagedAndroidGraphicsRect:(RepackagedAndroidGraphicsRect *)rectangle;

/**
 @brief Request that a rectangle of this view be visible on the screen, scrolling if necessary just enough.
 <p>A View should call this if it maintains some notion of which part of its content is interesting.  For example, a text editing view should call this when its cursor moves. <p>When <code>immediate</code> is set to true, scrolling will not be animated.
 @param rectangle The rectangle.
 @param immediate True to forbid animated scrolling, false otherwise
 @return Whether any parent scrolled.
 */
- (jboolean)requestRectangleOnScreenWithRepackagedAndroidGraphicsRect:(RepackagedAndroidGraphicsRect *)rectangle
                                                          withBoolean:(jboolean)immediate;

/**
 @brief Request unbuffered dispatch of the given stream of MotionEvents to this View.
 Until this View receives a corresponding MotionEvent#ACTION_UP , ask that the input system not batch MotionEvent s but instead deliver them as soon as they're available. This method should only be called for touch events. <p class="note">This api is not intended for most applications. Buffered dispatch provides many of benefits, and just requesting unbuffered dispatch on most MotionEvent streams will not improve your input latency. Side effects include: increased latency, jittery scrolls and inability to take advantage of system resampling. Talk to your input professional to see if #requestUnbufferedDispatch(MotionEvent) is right for you.</p>
 */
- (void)requestUnbufferedDispatchWithRepackagedAndroidViewMotionEvent:(RepackagedAndroidViewMotionEvent *)event;

/**
 */
- (void)resetPaddingToInitialValues;

/**
 @brief Reset the resolved layout direction.
 Layout direction will be resolved during a call to #onMeasure(int,int) .
 */
- (void)resetResolvedLayoutDirection;

/**
 @brief Reset the resolved layout direction.
 */
- (void)resetResolvedPadding;

/**
 @brief Reset resolved text alignment.
 Text alignment will be resolved during a call to #onMeasure(int,int) .
 */
- (void)resetResolvedTextAlignment;

/**
 @brief Reset resolved text direction.
 Text direction will be resolved during a call to #onMeasure(int,int) .
 */
- (void)resetResolvedTextDirection;

/**
 @brief Reset resolution of all RTL related properties.
 */
- (void)resetRtlProperties;

/**
 @brief Resolve and cache the layout direction.
 LTR is set initially. This is implicitly supposing that the parent directionality can and will be resolved before its children.
 @return true if resolution has been done, false otherwise.
 */
- (jboolean)resolveLayoutDirection;

/**
 @brief Resolve the layout parameters depending on the resolved layout direction
 */
- (void)resolveLayoutParams;

/**
 @brief Resolves padding depending on layout direction, if applicable, and recomputes internal padding values to adjust for scroll bars.
 */
- (void)resolvePadding;

/**
 @brief Resolve all RTL related properties.
 @return true if resolution of RTL properties has been done
 */
- (jboolean)resolveRtlPropertiesIfNeeded;

/**
 @brief Version of #resolveSizeAndState(int,int,int) returning only the #MEASURED_SIZE_MASK bits of the result.
 */
+ (jint)resolveSizeWithInt:(jint)size
                   withInt:(jint)measureSpec;

/**
 @brief Utility to reconcile a desired size and state, with constraints imposed by a MeasureSpec.
 Will take the desired size, unless a different size is imposed by the constraints. The returned value is a compound integer, with the resolved size in the #MEASURED_SIZE_MASK bits and optionally the bit #MEASURED_STATE_TOO_SMALL set if the resulting size is smaller than the size the view wants to be.
 @param size How big the view wants to be.
 @param measureSpec Constraints imposed by the parent.
 @param childMeasuredState Size information bit mask for the view's children.
 @return Size information bit mask as defined by #MEASURED_SIZE_MASK and #MEASURED_STATE_TOO_SMALL .
 */
+ (jint)resolveSizeAndStateWithInt:(jint)size
                           withInt:(jint)measureSpec
                           withInt:(jint)childMeasuredState;

/**
 @brief Resolve the text alignment.
 @return true if resolution has been done, false otherwise.
 */
- (jboolean)resolveTextAlignment;

/**
 @brief Resolve the text direction.
 @return true if resolution has been done, false otherwise.
 */
- (jboolean)resolveTextDirection;

/**
 @brief Restore this view hierarchy's frozen state from the given container.
 @param container The SparseArray which holds previously frozen states.
 */
- (void)restoreHierarchyStateWithRepackagedAndroidUtilSparseArray:(RepackagedAndroidUtilSparseArray *)container;

/**
 @brief Store this view hierarchy's frozen state into the given container.
 @param container The SparseArray in which to save the view's state.
 */
- (void)saveHierarchyStateWithRepackagedAndroidUtilSparseArray:(RepackagedAndroidUtilSparseArray *)container;

/**
 @brief Schedules an action on a drawable to occur at a specified time.
 @param who the recipient of the action
 @param what the action to run on the drawable
 @param when the time at which the action must occur. Uses the SystemClock#uptimeMillis timebase.
 */
- (void)scheduleDrawableWithRepackagedAndroidGraphicsDrawableDrawable:(RepackagedAndroidGraphicsDrawableDrawable *)who
                                                 withJavaLangRunnable:(id<JavaLangRunnable>)what
                                                             withLong:(jlong)when;

/**
 @brief Move the scrolled position of your view.
 This will cause a call to #onScrollChanged(int,int,int,int) and the view will be invalidated.
 @param x the amount of pixels to scroll by horizontally
 @param y the amount of pixels to scroll by vertically
 */
- (void)scrollByWithInt:(jint)x
                withInt:(jint)y;

/**
 @brief Set the scrolled position of your view.
 This will cause a call to #onScrollChanged(int,int,int,int) and the view will be invalidated.
 @param x the x position to scroll to
 @param y the y position to scroll to
 */
- (void)scrollToWithInt:(jint)x
                withInt:(jint)y;

/**
 @brief Sends an accessibility event of the given type.
 If accessibility is not enabled this method has no effect. The default implementation calls #onInitializeAccessibilityEvent(AccessibilityEvent) first to populate information about the event source (this View), then calls #dispatchPopulateAccessibilityEvent(AccessibilityEvent) to populate the text content of the event source including its descendants, and last calls ViewParent#requestSendAccessibilityEvent(View,AccessibilityEvent) on its parent to request sending of the event to interested parties. <p> If an AccessibilityDelegate has been specified via calling #setAccessibilityDelegate(AccessibilityDelegate) its AccessibilityDelegate#sendAccessibilityEvent(View,int) is responsible for handling this call. </p>
 @param eventType The type of the event to send, as defined by several types from repackaged.android.view.accessibility.AccessibilityEvent , such as repackaged.android.view.accessibility.AccessibilityEvent#TYPE_VIEW_CLICKED or repackaged.android.view.accessibility.AccessibilityEvent#TYPE_VIEW_HOVER_ENTER .
 */
- (void)sendAccessibilityEventWithInt:(jint)eventType;

/**
 */
- (void)sendAccessibilityEventInternalWithInt:(jint)eventType;

/**
 @brief This method behaves exactly as #sendAccessibilityEvent(int) but takes as an argument an empty AccessibilityEvent and does not perform a check whether accessibility is enabled.
 <p> If an AccessibilityDelegate has been specified via calling #setAccessibilityDelegate(AccessibilityDelegate) its AccessibilityDelegate#sendAccessibilityEventUnchecked(View,AccessibilityEvent) is responsible for handling this call. </p>
 @param event The event to send.
 */
- (void)sendAccessibilityEventUncheckedWithRepackagedAndroidViewAccessibilityAccessibilityEvent:(RepackagedAndroidViewAccessibilityAccessibilityEvent *)event;

/**
 */
- (void)sendAccessibilityEventUncheckedInternalWithRepackagedAndroidViewAccessibilityAccessibilityEvent:(RepackagedAndroidViewAccessibilityAccessibilityEvent *)event;

/**
 @brief Sets a delegate for implementing accessibility support via composition as opposed to inheritance.
 The delegate's primary use is for implementing backwards compatible widgets. For more details see AccessibilityDelegate .
 @param delegate The delegate instance.
 */
- (void)setAccessibilityDelegateWithRepackagedAndroidViewView_AccessibilityDelegate:(RepackagedAndroidViewView_AccessibilityDelegate *)delegate;

/**
 @brief Sets the live region mode for this view.
 This indicates to accessibility services whether they should automatically notify the user about changes to the view's content description or text, or to the content descriptions or text of the view's children (where applicable). <p> For example, in a login screen with a TextView that displays an "incorrect password" notification, that view should be marked as a live region with mode #ACCESSIBILITY_LIVE_REGION_POLITE . <p> To disable change notifications for this view, use #ACCESSIBILITY_LIVE_REGION_NONE . This is the default live region mode for most views. <p> To indicate that the user should be notified of changes, use #ACCESSIBILITY_LIVE_REGION_POLITE . <p> If the view's changes should interrupt ongoing speech and notify the user immediately, use #ACCESSIBILITY_LIVE_REGION_ASSERTIVE .
 @param mode The live region mode for this view, one of: <ul> <li> #ACCESSIBILITY_LIVE_REGION_NONE <li> #ACCESSIBILITY_LIVE_REGION_POLITE <li> #ACCESSIBILITY_LIVE_REGION_ASSERTIVE </ul>
 ref android.R.styleable#View_accessibilityLiveRegion
 */
- (void)setAccessibilityLiveRegionWithInt:(jint)mode;

/**
 */
- (void)setAccessibilitySelectionWithInt:(jint)start
                                 withInt:(jint)end;

/**
 @brief Sets the id of a view after which this one is visited in accessibility traversal.
 A screen-reader must visit the content of the other view before the content of this one. For example, if view B is set to be after view A, then a screen-reader will traverse the entire content of A before traversing the entire content of B, regardles of what traversal strategy it is using. <p> Views that do not have specified before/after relationships are traversed in order determined by the screen-reader. </p> <p> Setting that this view is after a view that is not important for accessibility or if this view is not important for accessibility will have no effect as the screen-reader is not aware of unimportant views. </p>
 @param afterId The id of a view this one succedees in accessibility traversal.
 ref android.R.styleable#View_accessibilityTraversalAfter
 */
- (void)setAccessibilityTraversalAfterWithInt:(jint)afterId;

/**
 @brief Sets the id of a view before which this one is visited in accessibility traversal.
 A screen-reader must visit the content of this view before the content of the one it precedes. For example, if view B is set to be before view A, then a screen-reader will traverse the entire content of B before traversing the entire content of A, regardles of what traversal strategy it is using. <p> Views that do not have specified before/after relationships are traversed in order determined by the screen-reader. </p> <p> Setting that this view is before a view that is not important for accessibility or if this view is not important for accessibility will have no effect as the screen-reader is not aware of unimportant views. </p>
 @param beforeId The id of a view this one precedes in accessibility traversal.
 ref android.R.styleable#View_accessibilityTraversalBefore
 */
- (void)setAccessibilityTraversalBeforeWithInt:(jint)beforeId;

/**
 @brief Changes the activated state of this view.
 A view can be activated or not. Note that activation is not the same as selection.  Selection is a transient property, representing the view (hierarchy) the user is currently interacting with.  Activation is a longer-term state that the user can move views in and out of.  For example, in a list view with single or multiple selection enabled, the views in the current selection set are activated.  (Um, yeah, we are deeply sorry about the terminology here.)  The activated state is propagated down to children of the view it is set on.
 @param activated true if the view must be activated, false otherwise
 */
- (void)setActivatedWithBoolean:(jboolean)activated;

/**
 @brief Sets the opacity of the view to a value from 0 to 1, where 0 means the view is completely transparent and 1 means the view is completely opaque.
 <p class="note"><strong>Note:</strong> setting alpha to a translucent value (0 < alpha < 1) can have significant performance implications, especially for large views. It is best to use the alpha property sparingly and transiently, as in the case of fading animations.</p> <p>For a view with a frequently changing alpha, such as during a fading animation, it is strongly recommended for performance reasons to either override #hasOverlappingRendering() to return <code>false</code> if appropriate, or setting a #setLayerType(int,repackaged.android.graphics.Paint) layer type on the view for the duration of the animation. On versions repackaged.android.os.Build.VERSION_CODES#M and below, the default path for rendering an unlayered View with alpha could add multiple milliseconds of rendering cost, even for simple or small views. Starting with repackaged.android.os.Build.VERSION_CODES#M , #LAYER_TYPE_HARDWARE is automatically applied to the view at the rendering level.</p> <p>If this view overrides #onSetAlpha(int) to return true, then this view is responsible for applying the opacity itself.</p> <p>On versions repackaged.android.os.Build.VERSION_CODES#LOLLIPOP_MR1 and below, note that if the view is backed by a #setLayerType(int,repackaged.android.graphics.Paint) layer and is associated with a #setLayerPaint(repackaged.android.graphics.Paint) layer paint , setting an alpha value less than 1.0 will supersede the alpha of the layer paint.</p> <p>Starting with repackaged.android.os.Build.VERSION_CODES#M , setting a translucent alpha value will clip a View to its bounds, unless the View returns <code>false</code> from #hasOverlappingRendering .</p>
 @param alpha The opacity of the view.
 ref android.R.styleable#View_alpha
 */
- (void)setAlphaWithFloat:(jfloat)alpha;

/**
 @brief Sets the next animation to play for this view.
 If you want the animation to play immediately, use #startAnimation(repackaged.android.view.animation.Animation) instead. This method provides allows fine-grained control over the start time and invalidation, but you must make sure that 1) the animation has a start time set, and 2) the view's parent (which controls animations on its children) will be invalidated when the animation is supposed to start.
 @param animation The next animation, or null.
 */
- (void)setAnimationWithRepackagedAndroidViewAnimationAnimation:(id<RepackagedAndroidViewAnimationAnimation>)animation;

/**
 */
- (void)setAnimationMatrixWithRepackagedAndroidGraphicsMatrix:(RepackagedAndroidGraphicsMatrix *)matrix;

/**
 Controls whether assist data collection from this view and its children is enabled (that is, whether #onProvideStructure and #onProvideVirtualStructure will be called).  The default value is false, allowing normal assist collection.  Setting this to false will disable assist collection.
 @param enabled Set to true to <em>disable</em> assist data collection, or false (the default) to allow it.
 ref android.R.styleable#View_assistBlocked
 */
- (void)setAssistBlockedWithBoolean:(jboolean)enabled;

/**
 @brief Set the background to a given Drawable, or remove the background.
 If the background has padding, this View's padding is set to the background's padding. However, when a background is removed, this View's padding isn't touched. If setting the padding is desired, please use #setPadding(int,int,int,int) .
 @param background The Drawable to use as the background, or null to remove the background
 */
- (void)setBackgroundWithRepackagedAndroidGraphicsDrawableDrawable:(RepackagedAndroidGraphicsDrawableDrawable *)background;

/**
 @brief Sets the background color for this view.
 @param color the color of the background
 */
- (void)setBackgroundColorWithInt:(jint)color;

/**
 */
- (void)setBackgroundDrawableWithRepackagedAndroidGraphicsDrawableDrawable:(RepackagedAndroidGraphicsDrawableDrawable *)background;

/**
 @brief Set the background to a given resource.
 The resource should refer to a Drawable object or 0 to remove the background.
 @param resid The identifier of the resource.
 ref android.R.styleable#View_background
 */
- (void)setBackgroundResourceWithInt:(jint)resid;

/**
 @brief Applies a tint to the background drawable.
 Does not modify the current tint mode, which is PorterDuff.Mode#SRC_IN by default. <p> Subsequent calls to #setBackground(Drawable) will automatically mutate the drawable and apply the specified tint and tint mode using Drawable#setTintList(ColorStateList) .
 @param tint the tint to apply, may be <code>null</code> to clear tint
 ref android.R.styleable#View_backgroundTint
 */
- (void)setBackgroundTintListWithRepackagedAndroidContentResColorStateList:(id<RepackagedAndroidContentResColorStateList>)tint;

/**
 @brief Specifies the blending mode used to apply the tint specified by #setBackgroundTintList(ColorStateList) } to the background drawable.
 The default mode is PorterDuff.Mode#SRC_IN .
 @param tintMode the blending mode used to apply the tint, may be <code>null</code> to clear tint
 ref android.R.styleable#View_backgroundTintMode
 */
- (void)setBackgroundTintModeWithRepackagedAndroidGraphicsPorterDuff_ModeEnum:(RepackagedAndroidGraphicsPorterDuff_ModeEnum *)tintMode;

/**
 @brief Sets the bottom position of this view relative to its parent.
 This method is meant to be called by the layout system and should not generally be called otherwise, because the property may be changed at any time by the layout.
 @param bottom The bottom of this view, in pixels.
 */
- (void)setBottomWithInt:(jint)bottom;

/**
 @brief <p>Sets the distance along the Z axis (orthogonal to the X/Y plane on which views are drawn) from the camera to this view.
 The camera's distance affects 3D transformations, for instance rotations around the X and Y axis. If the rotationX or rotationY properties are changed and this view is large (more than half the size of the screen), it is recommended to always use a camera distance that's greater than the height (X axis rotation) or the width (Y axis rotation) of this view.</p> <p>The distance of the camera from the view plane can have an affect on the perspective distortion of the view when it is rotated around the x or y axis. For example, a large distance will result in a large viewing angle, and there will not be much perspective distortion of the view as it rotates. A short distance may cause much more perspective distortion upon rotation, and can also result in some drawing artifacts if the rotated view ends up partially behind the camera (which is why the recommendation is to use a distance at least as far as the size of the view, if the view is to be rotated.)</p> <p>The distance is expressed in "depth pixels." The default distance depends on the screen density. For instance, on a medium density display, the default distance is 1280. On a high density display, the default distance is 1920.</p> <p>If you want to specify a distance that leads to visually consistent results across various densities, use the following formula:</p> <pre> float scale = context.getResources().getDisplayMetrics().density; view.setCameraDistance(distance * scale); </pre> <p>The density scale factor of a high density display is 1.5, and 1920 = 1280 * 1.5.</p>
 @param distance The distance in "depth pixels", if negative the opposite value is used
 */
- (void)setCameraDistanceWithFloat:(jfloat)distance;

/**
 @brief Enables or disables click events for this view.
 When a view is clickable it will change its state to "pressed" on every click. Subclasses should set the view clickable to visually react to user's clicks.
 @param clickable true to make the view clickable, false otherwise
 ref android.R.styleable#View_clickable
 */
- (void)setClickableWithBoolean:(jboolean)clickable;

/**
 @brief Sets a rectangular area on this view to which the view will be clipped when it is drawn.
 Setting the value to null will remove the clip bounds and the view will draw normally, using its full bounds.
 @param clipBounds The rectangular area, in the local coordinates of this view, to which future drawing operations will be clipped.
 */
- (void)setClipBoundsWithRepackagedAndroidGraphicsRect:(RepackagedAndroidGraphicsRect *)clipBounds;

/**
 @brief Sets whether the View's Outline should be used to clip the contents of the View.
 <p> Only a single non-rectangular clip can be applied on a View at any time. Circular clips from a ViewAnimationUtils#createCircularReveal(View,int,int,float,float) circular reveal animation take priority over Outline clipping, and child Outline clipping takes priority over Outline clipping done by a parent. <p> Note that this flag will only be respected if the View's Outline returns true from Outline#canClip() .
 */
- (void)setClipToOutlineWithBoolean:(jboolean)clipToOutline;

/**
 @brief Sets the View description.
 It briefly describes the view and is primarily used for accessibility support. Set this property to enable better accessibility support for your application. This is especially true for views that do not have textual representation (For example, ImageButton).
 @param contentDescription The content description.
 ref android.R.styleable#View_contentDescription
 */
- (void)setContentDescriptionWithJavaLangCharSequence:(id<JavaLangCharSequence>)contentDescription;

/**
 @brief Enables or disables context clicking for this view.
 This event can launch the listener.
 @param contextClickable true to make the view react to a context click, false otherwise
 ref android.R.styleable#View_contextClickable
 */
- (void)setContextClickableWithBoolean:(jboolean)contextClickable;

/**
 */
- (void)setDisabledSystemUiVisibilityWithInt:(jint)flags;

/**
 @brief Setting a solid background color for the drawing cache's bitmaps will improve performance and memory usage.
 Note, though that this should only be used if this view will always be drawn on top of a solid color.
 @param color The background color to use for the drawing cache's bitmap
 */
- (void)setDrawingCacheBackgroundColorWithInt:(jint)color;

/**
 @brief <p>Enables or disables the drawing cache.
 When the drawing cache is enabled, the next call to #getDrawingCache() or #buildDrawingCache() will draw the view in a bitmap. Calling #draw(repackaged.android.graphics.Canvas) will not draw from the cache when the cache is enabled. To benefit from the cache, you must request the drawing cache by calling #getDrawingCache() and draw it on screen if the returned bitmap is not null.</p> <p>Enabling the drawing cache is similar to #setLayerType(int,repackaged.android.graphics.Paint) setting a layer when hardware acceleration is turned off. When hardware acceleration is turned on, enabling the drawing cache has no effect on rendering because the system uses a different mechanism for acceleration which ignores the flag. If you want to use a Bitmap for the view, even when hardware acceleration is enabled, see #setLayerType(int,repackaged.android.graphics.Paint) for information on how to enable software and hardware layers.</p> <p>This API can be used to manually generate a bitmap copy of this view, by setting the flag to <code>true</code> and calling #getDrawingCache() .</p>
 @param enabled true to enable the drawing cache, false otherwise
 */
- (void)setDrawingCacheEnabledWithBoolean:(jboolean)enabled;

/**
 @brief Set the drawing cache quality of this view.
 This value is used only when the drawing cache is enabled
 @param quality One of #DRAWING_CACHE_QUALITY_AUTO , #DRAWING_CACHE_QUALITY_LOW , or #DRAWING_CACHE_QUALITY_HIGH
 ref android.R.styleable#View_drawingCacheQuality
 */
- (void)setDrawingCacheQualityWithInt:(jint)quality;

/**
 @brief <p>Enables or disables the duplication of the parent's state into this view.
 When duplication is enabled, this view gets its drawable state from its parent rather than from its own internal properties.</p> <p>Note: in the current implementation, setting this property to true after the view was added to a ViewGroup might have no effect at all. This property should always be used from XML or set to true before adding this view to a ViewGroup.</p> <p>Note: if this view's parent addStateFromChildren property is enabled and this property is enabled, an exception will be thrown.</p> <p>Note: if the child view uses and updates additional states which are unknown to the parent, these states should not be affected by this method.</p>
 @param enabled True to enable duplication of the parent's drawable state, false to disable it.
 */
- (void)setDuplicateParentStateEnabledWithBoolean:(jboolean)enabled;

/**
 @brief Sets the base elevation of this view, in pixels.
 ref android.R.styleable#View_elevation
 */
- (void)setElevationWithFloat:(jfloat)elevation;

/**
 @brief Set the enabled state of this view.
 The interpretation of the enabled state varies by subclass.
 @param enabled True if this view is enabled, false otherwise.
 */
- (void)setEnabledWithBoolean:(jboolean)enabled;

/**
 @brief Set the size of the faded edge used to indicate that more content in this view is available.
 Will not change whether the fading edge is enabled; use #setVerticalFadingEdgeEnabled(boolean) or #setHorizontalFadingEdgeEnabled(boolean) to enable the fading edge for the vertical or horizontal fading edges.
 @param length The size in pixels of the faded edge used to indicate that more content in this view is visible.
 */
- (void)setFadingEdgeLengthWithInt:(jint)length;

/**
 @brief Sets whether the framework should discard touches when the view's window is obscured by another visible window.
 Refer to the View security documentation for more details.
 @param enabled True if touch filtering should be enabled.
 ref android.R.styleable#View_filterTouchesWhenObscured
 */
- (void)setFilterTouchesWhenObscuredWithBoolean:(jboolean)enabled;

/**
 @brief Sets whether or not this view should account for system screen decorations such as the status bar and inset its content; that is, controlling whether the default implementation of #fitSystemWindows(Rect) will be executed.
 See that method for more details. <p>Note that if you are providing your own implementation of #fitSystemWindows(Rect) , then there is no need to set this flag to true -- your implementation will be overriding the default implementation that checks this flag.
 @param fitSystemWindows If true, then the default implementation of #fitSystemWindows(Rect) will be executed.
 ref android.R.styleable#View_fitsSystemWindows
 */
- (void)setFitsSystemWindowsWithBoolean:(jboolean)fitSystemWindows;

/**
 @brief Set whether this view can receive the focus.
 Setting this to false will also ensure that this view is not focusable in touch mode.
 @param focusable If true, this view can receive the focus.
 ref android.R.styleable#View_focusable
 */
- (void)setFocusableWithBoolean:(jboolean)focusable;

/**
 @brief Set whether this view can receive focus while in touch mode.
 Setting this to true will also ensure that this view is focusable.
 @param focusableInTouchMode If true, this view can receive the focus while in touch mode.
 ref android.R.styleable#View_focusableInTouchMode
 */
- (void)setFocusableInTouchModeWithBoolean:(jboolean)focusableInTouchMode;

/**
 @brief Supply a Drawable that is to be rendered on top of all of the content in the view.
 @param foreground the Drawable to be drawn on top of the children
 ref android.R.styleable#View_foreground
 */
- (void)setForegroundWithRepackagedAndroidGraphicsDrawableDrawable:(RepackagedAndroidGraphicsDrawableDrawable *)foreground;

/**
 @brief Describes how the foreground is positioned.
 Defaults to START and TOP.
 @param gravity see repackaged.android.view.Gravity
 ref android.R.styleable#View_foregroundGravity
 */
- (void)setForegroundGravityWithInt:(jint)gravity;

/**
 @brief Applies a tint to the foreground drawable.
 Does not modify the current tint mode, which is PorterDuff.Mode#SRC_IN by default. <p> Subsequent calls to #setForeground(Drawable) will automatically mutate the drawable and apply the specified tint and tint mode using Drawable#setTintList(ColorStateList) .
 @param tint the tint to apply, may be <code>null</code> to clear tint
 ref android.R.styleable#View_foregroundTint
 */
- (void)setForegroundTintListWithRepackagedAndroidContentResColorStateList:(id<RepackagedAndroidContentResColorStateList>)tint;

/**
 @brief Specifies the blending mode used to apply the tint specified by #setForegroundTintList(ColorStateList) } to the background drawable.
 The default mode is PorterDuff.Mode#SRC_IN .
 @param tintMode the blending mode used to apply the tint, may be <code>null</code> to clear tint
 ref android.R.styleable#View_foregroundTintMode
 */
- (void)setForegroundTintModeWithRepackagedAndroidGraphicsPorterDuff_ModeEnum:(RepackagedAndroidGraphicsPorterDuff_ModeEnum *)tintMode;

/**
 @brief Set whether this view should have haptic feedback for events such as long presses.
 <p>You may wish to disable haptic feedback if your view already controls its own haptic feedback.
 @param hapticFeedbackEnabled whether haptic feedback enabled for this view.
 ref android.R.styleable#View_hapticFeedbackEnabled
 */
- (void)setHapticFeedbackEnabledWithBoolean:(jboolean)hapticFeedbackEnabled;

/**
 @brief Set whether this view is currently tracking transient state that the framework should attempt to preserve when possible.
 This flag is reference counted, so every call to setHasTransientState(true) should be paired with a later call to setHasTransientState(false). <p>A view with transient state cannot be trivially rebound from an external data source, such as an adapter binding item views in a list. This may be because the view is performing an animation, tracking user selection of content, or similar.</p>
 @param hasTransientState true if this view has transient state
 */
- (void)setHasTransientStateWithBoolean:(jboolean)hasTransientState;

/**
 @brief <p>Define whether the horizontal edges should be faded when this view is scrolled horizontally.
 </p>
 @param horizontalFadingEdgeEnabled true if the horizontal edges should be faded when the view is scrolled horizontally
 ref android.R.styleable#View_requiresFadingEdge
 */
- (void)setHorizontalFadingEdgeEnabledWithBoolean:(jboolean)horizontalFadingEdgeEnabled;

/**
 @brief <p>Define whether the horizontal scrollbar should be drawn or not.
 The scrollbar is not drawn by default.</p>
 @param horizontalScrollBarEnabled true if the horizontal scrollbar should be painted
 */
- (void)setHorizontalScrollBarEnabledWithBoolean:(jboolean)horizontalScrollBarEnabled;

/**
 @brief Sets whether the view is currently hovered.
 <p> Calling this method also changes the drawable state of the view.  This enables the view to react to hover by using different drawable resources to change its appearance. </p><p> The #onHoverChanged method is called when the hovered state changes. </p>
 @param hovered True if the view is hovered.
 */
- (void)setHoveredWithBoolean:(jboolean)hovered;

/**
 @brief Sets the identifier for this view.
 The identifier does not have to be unique in this view's hierarchy. The identifier should be a positive number.
 @param id a number used to identify the view
 ref android.R.styleable#View_id
 */
- (void)setIdWithInt:(jint)id_;

/**
 @brief Sets how to determine whether this view is important for accessibility which is if it fires accessibility events and if it is reported to accessibility services that query the screen.
 @param mode How to determine whether this view is important for accessibility.
 ref android.R.styleable#View_importantForAccessibility
 */
- (void)setImportantForAccessibilityWithInt:(jint)mode;

/**
 
 @param isRoot true if the view belongs to the root namespace, false otherwise
 */
- (void)setIsRootNamespaceWithBoolean:(jboolean)isRoot;

/**
 @brief Controls whether the screen should remain on, modifying the value of #KEEP_SCREEN_ON .
 @param keepScreenOn Supply true to set #KEEP_SCREEN_ON .
 ref android.R.styleable#View_keepScreenOn
 */
- (void)setKeepScreenOnWithBoolean:(jboolean)keepScreenOn;

/**
 @brief Sets the id of a view for which this view serves as a label for accessibility purposes.
 @param id The labeled view id.
 */
- (void)setLabelForWithInt:(jint)id_;

/**
 @brief Updates the Paint object used with the current layer (used only if the current layer type is not set to #LAYER_TYPE_NONE ).
 Changed properties of the Paint provided to #setLayerType(int,repackaged.android.graphics.Paint) will be used the next time the View is redrawn, but #setLayerPaint(repackaged.android.graphics.Paint) must be called to ensure that the view gets redrawn immediately. <p>A layer is associated with an optional repackaged.android.graphics.Paint instance that controls how the layer is composed on screen. The following properties of the paint are taken into account when composing the layer:</p> <ul> <li> repackaged.android.graphics.Paint#getAlpha() Translucency (alpha) </li> <li> repackaged.android.graphics.Paint#getXfermode() Blending mode </li> <li> repackaged.android.graphics.Paint#getColorFilter() Color filter </li> </ul> <p>If this view has an alpha value set to < 1.0 by calling #setAlpha(float) , the alpha value of the layer's paint is superseded by this view's alpha value.</p>
 @param paint The paint used to compose the layer. This argument is optional and can be null. It is ignored when the layer type is #LAYER_TYPE_NONE
 */
- (void)setLayerPaintWithRepackagedAndroidGraphicsPaint:(RepackagedAndroidGraphicsPaint *)paint;

/**
 @brief <p>Specifies the type of layer backing this view.
 The layer can be #LAYER_TYPE_NONE , #LAYER_TYPE_SOFTWARE or #LAYER_TYPE_HARDWARE .</p> <p>A layer is associated with an optional repackaged.android.graphics.Paint instance that controls how the layer is composed on screen. The following properties of the paint are taken into account when composing the layer:</p> <ul> <li> repackaged.android.graphics.Paint#getAlpha() Translucency (alpha) </li> <li> repackaged.android.graphics.Paint#getXfermode() Blending mode </li> <li> repackaged.android.graphics.Paint#getColorFilter() Color filter </li> </ul> <p>If this view has an alpha value set to < 1.0 by calling #setAlpha(float) , the alpha value of the layer's paint is superseded by this view's alpha value.</p> <p>Refer to the documentation of #LAYER_TYPE_NONE , #LAYER_TYPE_SOFTWARE and #LAYER_TYPE_HARDWARE for more information on when and how to use layers.</p>
 @param layerType The type of layer to use with this view, must be one of #LAYER_TYPE_NONE , #LAYER_TYPE_SOFTWARE or #LAYER_TYPE_HARDWARE
 @param paint The paint used to compose the layer. This argument is optional and can be null. It is ignored when the layer type is #LAYER_TYPE_NONE
 ref android.R.styleable#View_layerType
 */
- (void)setLayerTypeWithInt:(jint)layerType
withRepackagedAndroidGraphicsPaint:(RepackagedAndroidGraphicsPaint *)paint;

/**
 @brief Set the layout direction for this view.
 This will propagate a reset of layout direction resolution to the view's children and resolve layout direction for this view.
 @param layoutDirection the layout direction to set. Should be one of: #LAYOUT_DIRECTION_LTR , #LAYOUT_DIRECTION_RTL , #LAYOUT_DIRECTION_INHERIT , #LAYOUT_DIRECTION_LOCALE . Resolution will be done if the value is set to LAYOUT_DIRECTION_INHERIT. The resolution proceeds up the parent chain of the view to get the value. If there is no parent, then it will return the default #LAYOUT_DIRECTION_LTR .
 ref android.R.styleable#View_layoutDirection
 */
- (void)setLayoutDirectionWithInt:(jint)layoutDirection;

/**
 @brief Set the layout parameters associated with this view.
 These supply parameters to the <i>parent</i> of this view specifying how it should be arranged. There are many subclasses of ViewGroup.LayoutParams, and these correspond to the different subclasses of ViewGroup that are responsible for arranging their children.
 @param params The layout parameters for this view, cannot be null
 */
- (void)setLayoutParamsWithRepackagedAndroidViewViewGroup_LayoutParams:(RepackagedAndroidViewViewGroup_LayoutParams *)params;

/**
 @brief Sets the left position of this view relative to its parent.
 This method is meant to be called by the layout system and should not generally be called otherwise, because the property may be changed at any time by the layout.
 @param left The left of this view, in pixels.
 */
- (void)setLeftWithInt:(jint)left;

/**
 @brief Same as setFrame, but public and hidden.
 For use in android.transition.ChangeBounds .
 */
- (void)setLeftTopRightBottomWithInt:(jint)left
                             withInt:(jint)top
                             withInt:(jint)right
                             withInt:(jint)bottom;

/**
 @brief Enables or disables long click events for this view.
 When a view is long clickable it reacts to the user holding down the button for a longer duration than a tap. This event can either launch the listener or a context menu.
 @param longClickable true to make the view long clickable, false otherwise
 ref android.R.styleable#View_longClickable
 */
- (void)setLongClickableWithBoolean:(jboolean)longClickable;

/**
 @brief Sets the minimum height of the view.
 It is not guaranteed the view will be able to achieve this minimum height (for example, if its parent layout constrains it with less available height).
 @param minHeight The minimum height the view will try to be.
 ref android.R.styleable#View_minHeight
 */
- (void)setMinimumHeightWithInt:(jint)minHeight;

/**
 @brief Sets the minimum width of the view.
 It is not guaranteed the view will be able to achieve this minimum width (for example, if its parent layout constrains it with less available width).
 @param minWidth The minimum width the view will try to be.
 ref android.R.styleable#View_minWidth
 */
- (void)setMinimumWidthWithInt:(jint)minWidth;

/**
 @brief Enable or disable nested scrolling for this view.
 <p>If this property is set to true the view will be permitted to initiate nested scrolling operations with a compatible parent view in the current hierarchy. If this view does not implement nested scrolling this will have no effect. Disabling nested scrolling while a nested scroll is in progress has the effect of #stopNestedScroll() stopping the nested scroll.</p>
 @param enabled true to enable nested scrolling, false to disable
 */
- (void)setNestedScrollingEnabledWithBoolean:(jboolean)enabled;

/**
 @brief Sets the id of the view to use when the next focus is #FOCUS_DOWN .
 @param nextFocusDownId The next focus ID, or #NO_ID if the framework should decide automatically.
 ref android.R.styleable#View_nextFocusDown
 */
- (void)setNextFocusDownIdWithInt:(jint)nextFocusDownId;

/**
 @brief Sets the id of the view to use when the next focus is #FOCUS_FORWARD .
 @param nextFocusForwardId The next focus ID, or #NO_ID if the framework should decide automatically.
 ref android.R.styleable#View_nextFocusForward
 */
- (void)setNextFocusForwardIdWithInt:(jint)nextFocusForwardId;

/**
 @brief Sets the id of the view to use when the next focus is #FOCUS_LEFT .
 @param nextFocusLeftId The next focus ID, or #NO_ID if the framework should decide automatically.
 ref android.R.styleable#View_nextFocusLeft
 */
- (void)setNextFocusLeftIdWithInt:(jint)nextFocusLeftId;

/**
 @brief Sets the id of the view to use when the next focus is #FOCUS_RIGHT .
 @param nextFocusRightId The next focus ID, or #NO_ID if the framework should decide automatically.
 ref android.R.styleable#View_nextFocusRight
 */
- (void)setNextFocusRightIdWithInt:(jint)nextFocusRightId;

/**
 @brief Sets the id of the view to use when the next focus is #FOCUS_UP .
 @param nextFocusUpId The next focus ID, or #NO_ID if the framework should decide automatically.
 ref android.R.styleable#View_nextFocusUp
 */
- (void)setNextFocusUpIdWithInt:(jint)nextFocusUpId;

/**
 @brief Set an OnApplyWindowInsetsListener to take over the policy for applying window insets to this view.
 The listener's OnApplyWindowInsetsListener#onApplyWindowInsets(View,WindowInsets) onApplyWindowInsets method will be called instead of the view's #onApplyWindowInsets(WindowInsets) onApplyWindowInsets method.
 @param listener Listener to set
 */
- (void)setOnApplyWindowInsetsListenerWithRepackagedAndroidViewView_OnApplyWindowInsetsListener:(id<RepackagedAndroidViewView_OnApplyWindowInsetsListener>)listener;

/**
 @brief Register a callback to be invoked when this view is clicked.
 If this view is not clickable, it becomes clickable.
 @param l The callback that will run
 */
- (void)setOnClickListenerWithRepackagedAndroidViewView_OnClickListener:(id<RepackagedAndroidViewView_OnClickListener>)l;

/**
 @brief Register a callback to be invoked when this view is context clicked.
 If the view is not context clickable, it becomes context clickable.
 @param l The callback that will run
 */
- (void)setOnContextClickListenerWithRepackagedAndroidViewView_OnContextClickListener:(id<RepackagedAndroidViewView_OnContextClickListener>)l;

/**
 @brief Register a callback to be invoked when the context menu for this view is being built.
 If this view is not long clickable, it becomes long clickable.
 @param l The callback that will run
 */
- (void)setOnCreateContextMenuListenerWithRepackagedAndroidViewView_OnCreateContextMenuListener:(id<RepackagedAndroidViewView_OnCreateContextMenuListener>)l;

/**
 @brief Register a drag event listener callback object for this View.
 The parameter is an implementation of repackaged.android.view.View.OnDragListener . To send a drag event to a View, the system calls the repackaged.android.view.View.OnDragListener#onDrag(View,DragEvent) method.
 @param l An implementation of repackaged.android.view.View.OnDragListener .
 */
- (void)setOnDragListenerWithRepackagedAndroidViewView_OnDragListener:(id<RepackagedAndroidViewView_OnDragListener>)l;

/**
 @brief Register a callback to be invoked when focus of this view changed.
 @param l The callback that will run.
 */
- (void)setOnFocusChangeListenerWithRepackagedAndroidViewView_OnFocusChangeListener:(id<RepackagedAndroidViewView_OnFocusChangeListener>)l;

/**
 @brief Register a callback to be invoked when a generic motion event is sent to this view.
 @param l the generic motion listener to attach to this view
 */
- (void)setOnGenericMotionListenerWithRepackagedAndroidViewView_OnGenericMotionListener:(id<RepackagedAndroidViewView_OnGenericMotionListener>)l;

/**
 @brief Register a callback to be invoked when a hover event is sent to this view.
 @param l the hover listener to attach to this view
 */
- (void)setOnHoverListenerWithRepackagedAndroidViewView_OnHoverListener:(id<RepackagedAndroidViewView_OnHoverListener>)l;

/**
 @brief Register a callback to be invoked when a hardware key is pressed in this view.
 Key presses in software input methods will generally not trigger the methods of this listener.
 @param l the key listener to attach to this view
 */
- (void)setOnKeyListenerWithRepackagedAndroidViewView_OnKeyListener:(id<RepackagedAndroidViewView_OnKeyListener>)l;

/**
 @brief Register a callback to be invoked when this view is clicked and held.
 If this view is not long clickable, it becomes long clickable.
 @param l The callback that will run
 */
- (void)setOnLongClickListenerWithRepackagedAndroidViewView_OnLongClickListener:(id<RepackagedAndroidViewView_OnLongClickListener>)l;

/**
 @brief Register a callback to be invoked when the scroll X or Y positions of this view change.
 <p> <b>Note:</b> Some views handle scrolling independently from View and may have their own separate listeners for scroll-type events. For example, android.widget.ListView ListView allows clients to register an android.widget.ListView#setOnScrollListener(android.widget.AbsListView.OnScrollListener) AbsListView.OnScrollListener to listen for changes in list scroll position.
 @param l The listener to notify when the scroll X or Y position changes.
 */
- (void)setOnScrollChangeListenerWithRepackagedAndroidViewView_OnScrollChangeListener:(id<RepackagedAndroidViewView_OnScrollChangeListener>)l;

/**
 @brief Set a listener to receive callbacks when the visibility of the system bar changes.
 @param l The OnSystemUiVisibilityChangeListener to receive callbacks.
 */
- (void)setOnSystemUiVisibilityChangeListenerWithRepackagedAndroidViewView_OnSystemUiVisibilityChangeListener:(id<RepackagedAndroidViewView_OnSystemUiVisibilityChangeListener>)l;

/**
 @brief Register a callback to be invoked when a touch event is sent to this view.
 @param l the touch listener to attach to this view
 */
- (void)setOnTouchListenerWithRepackagedAndroidViewView_OnTouchListener:(id<RepackagedAndroidViewView_OnTouchListener>)l;

/**
 @brief Set this view's optical insets.
 <p>This method should be treated similarly to setMeasuredDimension and not as a general property. Views that compute their own optical insets should call it as part of measurement. This method does not request layout. If you are setting optical insets outside of measure/layout itself you will want to call requestLayout() yourself. </p>
 */
- (void)setOpticalInsetsWithRepackagedAndroidGraphicsInsets:(RepackagedAndroidGraphicsInsets *)insets;

/**
 @brief Sets the ViewOutlineProvider of the view, which generates the Outline that defines the shape of the shadow it casts, and enables outline clipping.
 <p> The default ViewOutlineProvider, ViewOutlineProvider#BACKGROUND , queries the Outline from the View's background drawable, via Drawable#getOutline(Outline) . Changing the outline provider with this method allows this behavior to be overridden. <p> If the ViewOutlineProvider is null, if querying it for an outline returns false, or if the produced Outline is Outline#isEmpty() , shadows will not be cast. <p> Only outlines that return true from Outline#canClip() may be used for clipping.
 */
- (void)setOutlineProviderWithRepackagedAndroidViewViewOutlineProvider:(RepackagedAndroidViewViewOutlineProvider *)provider;

/**
 @brief Set the over-scroll mode for this view.
 Valid over-scroll modes are #OVER_SCROLL_ALWAYS (default), #OVER_SCROLL_IF_CONTENT_SCROLLS (allow over-scrolling only if the view content is larger than the container), or #OVER_SCROLL_NEVER . Setting the over-scroll mode of a view will have an effect only if the view is capable of scrolling.
 @param overScrollMode The new over-scroll mode for this view.
 */
- (void)setOverScrollModeWithInt:(jint)overScrollMode;

/**
 @brief Sets the padding.
 The view may add on the space required to display the scrollbars, depending on the style and visibility of the scrollbars. So the values returned from #getPaddingLeft , #getPaddingTop , #getPaddingRight and #getPaddingBottom may be different from the values set in this call.
 ref android.R.styleable#View_padding
 ref android.R.styleable#View_paddingBottom
 ref android.R.styleable#View_paddingLeft
 ref android.R.styleable#View_paddingRight
 ref android.R.styleable#View_paddingTop
 @param left the left padding in pixels
 @param top the top padding in pixels
 @param right the right padding in pixels
 @param bottom the bottom padding in pixels
 */
- (void)setPaddingWithInt:(jint)left
                  withInt:(jint)top
                  withInt:(jint)right
                  withInt:(jint)bottom;

/**
 @brief Sets the relative padding.
 The view may add on the space required to display the scrollbars, depending on the style and visibility of the scrollbars. So the values returned from #getPaddingStart , #getPaddingTop , #getPaddingEnd and #getPaddingBottom may be different from the values set in this call.
 ref android.R.styleable#View_padding
 ref android.R.styleable#View_paddingBottom
 ref android.R.styleable#View_paddingStart
 ref android.R.styleable#View_paddingEnd
 ref android.R.styleable#View_paddingTop
 @param start the start padding in pixels
 @param top the top padding in pixels
 @param end the end padding in pixels
 @param bottom the bottom padding in pixels
 */
- (void)setPaddingRelativeWithInt:(jint)start
                          withInt:(jint)top
                          withInt:(jint)end
                          withInt:(jint)bottom;

/**
 @brief Sets the x location of the point around which the view is #setRotation(float) rotated and #setScaleX(float) scaled .
 By default, the pivot point is centered on the object. Setting this property disables this behavior and causes the view to use only the explicitly set pivotX and pivotY values.
 @param pivotX The x location of the pivot point.
 ref android.R.styleable#View_transformPivotX
 */
- (void)setPivotXWithFloat:(jfloat)pivotX;

/**
 @brief Sets the y location of the point around which the view is #setRotation(float) rotated and #setScaleY(float) scaled .
 By default, the pivot point is centered on the object. Setting this property disables this behavior and causes the view to use only the explicitly set pivotX and pivotY values.
 @param pivotY The y location of the pivot point.
 ref android.R.styleable#View_transformPivotY
 */
- (void)setPivotYWithFloat:(jfloat)pivotY;

/**
 @brief Sets the pressed state for this view.
 @param pressed Pass true to set the View's internal state to "pressed", or false to reverts the View's internal state from a previously set "pressed" state.
 */
- (void)setPressedWithBoolean:(jboolean)pressed;

/**
 */
- (void)setRevealClipWithBoolean:(jboolean)shouldClip
                       withFloat:(jfloat)x
                       withFloat:(jfloat)y
                       withFloat:(jfloat)radius;

/**
 @brief Sets the right position of this view relative to its parent.
 This method is meant to be called by the layout system and should not generally be called otherwise, because the property may be changed at any time by the layout.
 @param right The right of this view, in pixels.
 */
- (void)setRightWithInt:(jint)right;

/**
 @brief Sets the degrees that the view is rotated around the pivot point.
 Increasing values result in clockwise rotation.
 @param rotation The degrees of rotation.
 ref android.R.styleable#View_rotation
 */
- (void)setRotationWithFloat:(jfloat)rotation;

/**
 @brief Sets the degrees that the view is rotated around the horizontal axis through the pivot point.
 Increasing values result in clockwise rotation from the viewpoint of looking down the x axis. When rotating large views, it is recommended to adjust the camera distance accordingly. Refer to #setCameraDistance(float) for more information.
 @param rotationX The degrees of X rotation.
 ref android.R.styleable#View_rotationX
 */
- (void)setRotationXWithFloat:(jfloat)rotationX;

/**
 @brief Sets the degrees that the view is rotated around the vertical axis through the pivot point.
 Increasing values result in counter-clockwise rotation from the viewpoint of looking down the y axis. When rotating large views, it is recommended to adjust the camera distance accordingly. Refer to #setCameraDistance(float) for more information.
 @param rotationY The degrees of Y rotation.
 ref android.R.styleable#View_rotationY
 */
- (void)setRotationYWithFloat:(jfloat)rotationY;

/**
 @brief Controls whether the saving of this view's state is enabled (that is, whether its #onSaveInstanceState method will be called).
 Note that even if freezing is enabled, the view still must have an id assigned to it (via #setId(int) ) for its state to be saved.  This flag can only disable the saving of this view; any child views may still have their state saved.
 @param enabled Set to false to <em>disable</em> state saving, or true (the default) to allow it.
 ref android.R.styleable#View_saveEnabled
 */
- (void)setSaveEnabledWithBoolean:(jboolean)enabled;

/**
 @brief Controls whether the entire hierarchy under this view will save its state when a state saving traversal occurs from its parent.
 The default is true; if false, these views will not be saved unless #saveHierarchyState(SparseArray) is called directly on this view.
 @param enabled Set to false to <em>disable</em> state saving, or true (the default) to allow it.
 */
- (void)setSaveFromParentEnabledWithBoolean:(jboolean)enabled;

/**
 @brief Sets the amount that the view is scaled in x around the pivot point, as a proportion of the view's unscaled width.
 A value of 1 means that no scaling is applied.
 @param scaleX The scaling factor.
 ref android.R.styleable#View_scaleX
 */
- (void)setScaleXWithFloat:(jfloat)scaleX;

/**
 @brief Sets the amount that the view is scaled in Y around the pivot point, as a proportion of the view's unscaled width.
 A value of 1 means that no scaling is applied.
 @param scaleY The scaling factor.
 ref android.R.styleable#View_scaleY
 */
- (void)setScaleYWithFloat:(jfloat)scaleY;

/**
 @brief Define the delay before scrollbars fade.
 @param scrollBarDefaultDelayBeforeFade - the delay before scrollbars fade
 ref android.R.styleable#View_scrollbarDefaultDelayBeforeFade
 */
- (void)setScrollBarDefaultDelayBeforeFadeWithInt:(jint)scrollBarDefaultDelayBeforeFade;

/**
 @brief Define the scrollbar fade duration.
 @param scrollBarFadeDuration - the scrollbar fade duration
 ref android.R.styleable#View_scrollbarFadeDuration
 */
- (void)setScrollBarFadeDurationWithInt:(jint)scrollBarFadeDuration;

/**
 @brief Define whether scrollbars will fade when the view is not scrolling.
 @param fadeScrollbars whether to enable fading
 ref android.R.styleable#View_fadeScrollbars
 */
- (void)setScrollbarFadingEnabledWithBoolean:(jboolean)fadeScrollbars;

/**
 @brief Define the scrollbar size.
 @param scrollBarSize - the scrollbar size
 ref android.R.styleable#View_scrollbarSize
 */
- (void)setScrollBarSizeWithInt:(jint)scrollBarSize;

/**
 @brief <p>Specify the style of the scrollbars.
 The scrollbars can be overlaid or inset. When inset, they add to the padding of the view. And the scrollbars can be drawn inside the padding area or on the edge of the view. For example, if a view has a background drawable and you want to draw the scrollbars inside the padding specified by the drawable, you can use SCROLLBARS_INSIDE_OVERLAY or SCROLLBARS_INSIDE_INSET. If you want them to appear at the edge of the view, ignoring the padding, then you can use SCROLLBARS_OUTSIDE_OVERLAY or SCROLLBARS_OUTSIDE_INSET.</p>
 @param style the style of the scrollbars. Should be one of SCROLLBARS_INSIDE_OVERLAY, SCROLLBARS_INSIDE_INSET, SCROLLBARS_OUTSIDE_OVERLAY or SCROLLBARS_OUTSIDE_INSET.
 ref android.R.styleable#View_scrollbarStyle
 */
- (void)setScrollBarStyleWithInt:(jint)style;

/**
 @brief Change whether this view is one of the set of scrollable containers in its window.
 This will be used to determine whether the window can resize or must pan when a soft input area is open -- scrollable containers allow the window to use resize mode since the container will appropriately shrink.
 ref android.R.styleable#View_isScrollContainer
 */
- (void)setScrollContainerWithBoolean:(jboolean)isScrollContainer;

/**
 @brief Sets the state of all scroll indicators.
 <p> See #setScrollIndicators(int,int) for usage information.
 @param indicators a bitmask of indicators that should be enabled, or <code>0</code> to disable all indicators
 ref android.R.styleable#View_scrollIndicators
 */
- (void)setScrollIndicatorsWithInt:(jint)indicators;

/**
 @brief Sets the state of the scroll indicators specified by the mask.
 To change all scroll indicators at once, see #setScrollIndicators(int) . <p> When a scroll indicator is enabled, it will be displayed if the view can scroll in the direction of the indicator. <p> Multiple indicator types may be enabled or disabled by passing the logical OR of the desired types. If multiple types are specified, they will all be set to the same enabled state. <p> For example, to enable the top scroll indicatorExample: <code>setScrollIndicators</code>
 @param indicators the indicator direction, or the logical OR of multiple indicator directions. One or more of: <ul> <li> #SCROLL_INDICATOR_TOP </li> <li> #SCROLL_INDICATOR_BOTTOM </li> <li> #SCROLL_INDICATOR_LEFT </li> <li> #SCROLL_INDICATOR_RIGHT </li> <li> #SCROLL_INDICATOR_START </li> <li> #SCROLL_INDICATOR_END </li> </ul>
 ref android.R.styleable#View_scrollIndicators
 */
- (void)setScrollIndicatorsWithInt:(jint)indicators
                           withInt:(jint)mask;

/**
 @brief Set the horizontal scrolled position of your view.
 This will cause a call to #onScrollChanged(int,int,int,int) and the view will be invalidated.
 @param value the x position to scroll to
 */
- (void)setScrollXWithInt:(jint)value;

/**
 @brief Set the vertical scrolled position of your view.
 This will cause a call to #onScrollChanged(int,int,int,int) and the view will be invalidated.
 @param value the y position to scroll to
 */
- (void)setScrollYWithInt:(jint)value;

/**
 @brief Changes the selection state of this view.
 A view can be selected or not. Note that selection is not the same as focus. Views are typically selected in the context of an AdapterView like ListView or GridView; the selected view is the view that is highlighted.
 @param selected true if the view must be selected, false otherwise
 */
- (void)setSelectedWithBoolean:(jboolean)selected;

/**
 @brief Set whether this view should have sound effects enabled for events such as clicking and touching.
 <p>You may wish to disable sound effects for a view if you already play sounds, for instance, a dial key that plays dtmf tones.
 @param soundEffectsEnabled whether sound effects are enabled for this view.
 ref android.R.styleable#View_soundEffectsEnabled
 */
- (void)setSoundEffectsEnabledWithBoolean:(jboolean)soundEffectsEnabled;

/**
 @brief Attaches the provided StateListAnimator to this View.
 <p> Any previously attached StateListAnimator will be detached.
 @param stateListAnimator The StateListAnimator to update the view
 */
- (void)setStateListAnimatorWithRepackagedAndroidAnimationStateListAnimator:(RepackagedAndroidAnimationStateListAnimator *)stateListAnimator;

/**
 @brief Request that the visibility of the status bar or other screen/window decorations be changed.
 <p>This method is used to put the over device UI into temporary modes where the user's attention is focused more on the application content, by dimming or hiding surrounding system affordances.  This is typically used in conjunction with Window#FEATURE_ACTION_BAR_OVERLAY Window.FEATURE_ACTION_BAR_OVERLAY , allowing the applications content to be placed behind the action bar (and with these flags other system affordances) so that smooth transitions between hiding and showing them can be done. <p>Two representative examples of the use of system UI visibility is implementing a content browsing application (like a magazine reader) and a video playing application. <p>The first code shows a typical implementation of a View in a content browsing application.  In this implementation, the application goes into a content-oriented mode by hiding the status bar and action bar, and putting the navigation elements into lights out mode.  The user can then interact with content while in this mode.  Such an application should provide an easy way for the user to toggle out of the mode (such as to check information in the status bar or access notifications).  In the implementation here, this is done simply by tapping on the content. development/samples/ApiDemos/src/com/example/android/apis/view/ContentBrowserActivity.java content <p>This second code sample shows a typical implementation of a View in a video playing application.  In this situation, while the video is playing the application would like to go into a complete full-screen mode, to use as much of the display as possible for the video.  When in this state the user can not interact with the application; the system intercepts touching on the screen to pop the UI out of full screen mode.  See #fitSystemWindows(Rect) for a sample layout that goes with this code. development/samples/ApiDemos/src/com/example/android/apis/view/VideoPlayerActivity.java content
 @param visibility Bitwise-or of flags #SYSTEM_UI_FLAG_LOW_PROFILE , #SYSTEM_UI_FLAG_HIDE_NAVIGATION , #SYSTEM_UI_FLAG_FULLSCREEN , #SYSTEM_UI_FLAG_LAYOUT_STABLE , #SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION , #SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN , #SYSTEM_UI_FLAG_IMMERSIVE , and #SYSTEM_UI_FLAG_IMMERSIVE_STICKY .
 */
- (void)setSystemUiVisibilityWithInt:(jint)visibility;

/**
 @brief Sets a tag associated with this view and a key.
 A tag can be used to mark a view in its hierarchy and does not have to be unique within the hierarchy. Tags can also be used to store data within a view without resorting to another data structure. The specified key should be an id declared in the resources of the application to ensure it is unique (see the <a href="  guide/topics/resources/more-resources.html#Id">ID resource type</a>). Keys identified as belonging to the Android framework or not associated with any package will cause an IllegalArgumentException to be thrown.
 @param key The key identifying the tag
 @param tag An Object to tag the view with
 @throws IllegalArgumentException If they specified key is not valid
 */
- (void)setTagWithInt:(jint)key
               withId:(id)tag;

/**
 @brief Sets the tag associated with this view.
 A tag can be used to mark a view in its hierarchy and does not have to be unique within the hierarchy. Tags can also be used to store data within a view without resorting to another data structure.
 @param tag an Object to tag the view with
 */
- (void)setTagWithId:(id)tag;

/**
 @brief Variation of #setTag(int,Object) that enforces the key to be a framework id.
 */
- (void)setTagInternalWithInt:(jint)key
                       withId:(id)tag;

/**
 @brief Set the text alignment.
 @param textAlignment The text alignment to set. Should be one of #TEXT_ALIGNMENT_INHERIT , #TEXT_ALIGNMENT_GRAVITY , #TEXT_ALIGNMENT_CENTER , #TEXT_ALIGNMENT_TEXT_START , #TEXT_ALIGNMENT_TEXT_END , #TEXT_ALIGNMENT_VIEW_START , #TEXT_ALIGNMENT_VIEW_END Resolution will be done if the value is set to TEXT_ALIGNMENT_INHERIT. The resolution proceeds up the parent chain of the view to get the value. If there is no parent, then it will return the default #TEXT_ALIGNMENT_GRAVITY .
 ref android.R.styleable#View_textAlignment
 */
- (void)setTextAlignmentWithInt:(jint)textAlignment;

/**
 @brief Set the text direction.
 @param textDirection the direction to set. Should be one of: #TEXT_DIRECTION_INHERIT , #TEXT_DIRECTION_FIRST_STRONG , #TEXT_DIRECTION_ANY_RTL , #TEXT_DIRECTION_LTR , #TEXT_DIRECTION_RTL , #TEXT_DIRECTION_LOCALE #TEXT_DIRECTION_FIRST_STRONG_LTR , #TEXT_DIRECTION_FIRST_STRONG_RTL , Resolution will be done if the value is set to TEXT_DIRECTION_INHERIT. The resolution proceeds up the parent chain of the view to get the value. If there is no parent, then it will return the default #TEXT_DIRECTION_FIRST_STRONG .
 ref android.R.styleable#View_textDirection
 */
- (void)setTextDirectionWithInt:(jint)textDirection;

/**
 @brief Sets the top position of this view relative to its parent.
 This method is meant to be called by the layout system and should not generally be called otherwise, because the property may be changed at any time by the layout.
 @param top The top of this view, in pixels.
 */
- (void)setTopWithInt:(jint)top;

/**
 @brief Sets the TouchDelegate for this View.
 */
- (void)setTouchDelegateWithRepackagedAndroidViewTouchDelegate:(RepackagedAndroidViewTouchDelegate *)delegate;

/**
 @brief This property is hidden and intended only for use by the Fade transition, which animates it to produce a visual translucency that does not side-effect (or get affected by) the real alpha property.
 This value is composited with the other alpha value (and the AlphaAnimation value, when that is present) to produce a final visual translucency result, which is what is passed into the DisplayList.
 */
- (void)setTransitionAlphaWithFloat:(jfloat)alpha;

/**
 @brief Sets the name of the View to be used to identify Views in Transitions.
 Names should be unique in the View hierarchy.
 @param transitionName The name of the View to uniquely identify it for Transitions.
 */
- (void)setTransitionNameWithNSString:(NSString *)transitionName;

/**
 @brief Change the visibility of the View without triggering any other changes.
 This is important for transitions, where visibility changes should not adjust focus or trigger a new layout. This is only used when the visibility has already been changed and we need a transient value during an animation. When the animation completes, the original visibility value is always restored.
 @param visibility One of #VISIBLE , #INVISIBLE , or #GONE .
 */
- (void)setTransitionVisibilityWithInt:(jint)visibility;

/**
 @brief Sets the horizontal location of this view relative to its #getLeft() left position.
 This effectively positions the object post-layout, in addition to wherever the object's layout placed it.
 @param translationX The horizontal position of this view relative to its left position, in pixels.
 ref android.R.styleable#View_translationX
 */
- (void)setTranslationXWithFloat:(jfloat)translationX;

/**
 @brief Sets the vertical location of this view relative to its #getTop() top position.
 This effectively positions the object post-layout, in addition to wherever the object's layout placed it.
 @param translationY The vertical position of this view relative to its top position, in pixels.
 ref android.R.styleable#View_translationY
 */
- (void)setTranslationYWithFloat:(jfloat)translationY;

/**
 @brief Sets the depth location of this view relative to its #getElevation() elevation .
 ref android.R.styleable#View_translationZ
 */
- (void)setTranslationZWithFloat:(jfloat)translationZ;

/**
 @brief <p>Define whether the vertical edges should be faded when this view is scrolled vertically.
 </p>
 @param verticalFadingEdgeEnabled true if the vertical edges should be faded when the view is scrolled vertically
 ref android.R.styleable#View_requiresFadingEdge
 */
- (void)setVerticalFadingEdgeEnabledWithBoolean:(jboolean)verticalFadingEdgeEnabled;

/**
 @brief <p>Define whether the vertical scrollbar should be drawn or not.
 The scrollbar is not drawn by default.</p>
 @param verticalScrollBarEnabled true if the vertical scrollbar should be painted
 */
- (void)setVerticalScrollBarEnabledWithBoolean:(jboolean)verticalScrollBarEnabled;

/**
 @brief Set the position of the vertical scroll bar.
 Should be one of #SCROLLBAR_POSITION_DEFAULT , #SCROLLBAR_POSITION_LEFT or #SCROLLBAR_POSITION_RIGHT .
 @param position Where the vertical scroll bar should be positioned.
 */
- (void)setVerticalScrollbarPositionWithInt:(jint)position;

/**
 @brief Set the enabled state of this view.
 @param visibility One of #VISIBLE , #INVISIBLE , or #GONE .
 ref android.R.styleable#View_visibility
 */
- (void)setVisibilityWithInt:(jint)visibility;

/**
 @brief When a View's drawing cache is enabled, drawing is redirected to an offscreen bitmap.
 Some views, like an ImageView, must be able to bypass this mechanism if they already draw a single bitmap, to avoid unnecessary usage of the memory.
 @param willNotCacheDrawing true if this view does not cache its drawing, false otherwise
 */
- (void)setWillNotCacheDrawingWithBoolean:(jboolean)willNotCacheDrawing;

/**
 @brief If this view doesn't do any drawing on its own, set this flag to allow further optimizations.
 By default, this flag is not set on View, but could be set on some View subclasses such as ViewGroup. Typically, if you override #onDraw(repackaged.android.graphics.Canvas) you should clear this flag.
 @param willNotDraw whether or not this View draw on its own
 */
- (void)setWillNotDrawWithBoolean:(jboolean)willNotDraw;

/**
 @brief Sets the visual x position of this view, in pixels.
 This is equivalent to setting the #setTranslationX(float) translationX property to be the difference between the x value passed in and the current #getLeft() left property.
 @param x The visual x position of this view, in pixels.
 */
- (void)setXWithFloat:(jfloat)x;

/**
 @brief Sets the visual y position of this view, in pixels.
 This is equivalent to setting the #setTranslationY(float) translationY property to be the difference between the y value passed in and the current #getTop() top property.
 @param y The visual y position of this view, in pixels.
 */
- (void)setYWithFloat:(jfloat)y;

/**
 @brief Sets the visual z position of this view, in pixels.
 This is equivalent to setting the #setTranslationZ(float) translationZ property to be the difference between the x value passed in and the current #getElevation() elevation property.
 @param z The visual z position of this view, in pixels.
 */
- (void)setZWithFloat:(jfloat)z;

/**
 @brief Bring up the context menu for this view.
 @return Whether a context menu was displayed.
 */
- (jboolean)showContextMenu;

/**
 @brief Bring up the context menu for this view, referring to the item under the specified point.
 @param x The referenced x coordinate.
 @param y The referenced y coordinate.
 @param metaState The keyboard modifiers that were pressed.
 @return Whether a context menu was displayed.
 */
- (jboolean)showContextMenuWithFloat:(jfloat)x
                           withFloat:(jfloat)y
                             withInt:(jint)metaState;

/**
 @brief Start an action mode with the default type ActionMode#TYPE_PRIMARY .
 @param callback Callback that will control the lifecycle of the action mode
 @return The new action mode if it is started, null otherwise
 */
- (RepackagedAndroidViewActionMode *)startActionModeWithRepackagedAndroidViewActionMode_Callback:(id<RepackagedAndroidViewActionMode_Callback>)callback;

/**
 @brief Start an action mode with the given type.
 @param callback Callback that will control the lifecycle of the action mode
 @param type One of ActionMode#TYPE_PRIMARY or ActionMode#TYPE_FLOATING .
 @return The new action mode if it is started, null otherwise
 */
- (RepackagedAndroidViewActionMode *)startActionModeWithRepackagedAndroidViewActionMode_Callback:(id<RepackagedAndroidViewActionMode_Callback>)callback
                                                                                         withInt:(jint)type;

/**
 @brief Call Context#startActivityForResult(String,Intent,int,Bundle) for the View's Context, creating a unique View identifier to retrieve the result.
 @param intent The Intent to be started.
 @param requestCode The request code to use.
 */
- (void)startActivityForResultWithRepackagedAndroidContentIntent:(id<RepackagedAndroidContentIntent>)intent
                                                         withInt:(jint)requestCode;

/**
 @brief Start the specified animation now.
 @param animation the animation to start now
 */
- (void)startAnimationWithRepackagedAndroidViewAnimationAnimation:(id<RepackagedAndroidViewAnimationAnimation>)animation;

/**
 @brief Starts a drag and drop operation.
 When your application calls this method, it passes a repackaged.android.view.View.DragShadowBuilder object to the system. The system calls this object's DragShadowBuilder#onProvideShadowMetrics(Point,Point) to get metrics for the drag shadow, and then calls the object's DragShadowBuilder#onDrawShadow(Canvas) to draw the drag shadow itself. <p> Once the system has the drag shadow, it begins the drag and drop operation by sending drag events to all the View objects in your application that are currently visible. It does this either by calling the View object's drag listener (an implementation of repackaged.android.view.View.OnDragListener#onDrag(View,DragEvent) onDrag() or by calling the View object's repackaged.android.view.View#onDragEvent(DragEvent) onDragEvent() method. Both are passed a repackaged.android.view.DragEvent object that has a repackaged.android.view.DragEvent#getAction() value of repackaged.android.view.DragEvent#ACTION_DRAG_STARTED . </p> <p> Your application can invoke startDrag() on any attached View object. The View object does not need to be the one used in repackaged.android.view.View.DragShadowBuilder , nor does it need to be related to the View the user selected for dragging. </p>
 @param data A repackaged.android.content.ClipData object pointing to the data to be transferred by the drag and drop operation.
 @param shadowBuilder A repackaged.android.view.View.DragShadowBuilder object for building the drag shadow.
 @param myLocalState An java.lang.Object containing local data about the drag and drop operation. This Object is put into every DragEvent object sent by the system during the current drag. <p> myLocalState is a lightweight mechanism for the sending information from the dragged View to the target Views. For example, it can contain flags that differentiate between a a copy operation and a move operation. </p>
 @param flags Flags that control the drag and drop operation. No flags are currently defined, so the parameter should be set to 0.
 @return <code>true</code> if the method completes successfully, or <code>false</code> if it fails anywhere. Returning <code>false</code> means the system was unable to do a drag, and so no drag operation is in progress.
 */
- (jboolean)startDragWithRepackagedAndroidContentClipData:(id<RepackagedAndroidContentClipData>)data
          withRepackagedAndroidViewView_DragShadowBuilder:(RepackagedAndroidViewView_DragShadowBuilder *)shadowBuilder
                                                   withId:(id)myLocalState
                                                  withInt:(jint)flags;

/**
 @brief Begin a nestable scroll operation along the given axes.
 <p>A view starting a nested scroll promises to abide by the following contract:</p> <p>The view will call startNestedScroll upon initiating a scroll operation. In the case of a touch scroll this corresponds to the initial MotionEvent#ACTION_DOWN . In the case of touch scrolling the nested scroll will be terminated automatically in the same manner as ViewParent#requestDisallowInterceptTouchEvent(boolean) . In the event of programmatic scrolling the caller must explicitly call #stopNestedScroll() to indicate the end of the nested scroll.</p> <p>If <code>startNestedScroll</code> returns true, a cooperative parent was found. If it returns false the caller may ignore the rest of this contract until the next scroll. Calling startNestedScroll while a nested scroll is already in progress will return true.</p> <p>At each incremental step of the scroll the caller should invoke #dispatchNestedPreScroll(int,int,int[],int[]) dispatchNestedPreScroll once it has calculated the requested scrolling delta. If it returns true the nested scrolling parent at least partially consumed the scroll and the caller should adjust the amount it scrolls by.</p> <p>After applying the remainder of the scroll delta the caller should invoke #dispatchNestedScroll(int,int,int,int,int[]) dispatchNestedScroll , passing both the delta consumed and the delta unconsumed. A nested scrolling parent may treat these values differently. See ViewParent#onNestedScroll(View,int,int,int,int) . </p>
 @param axes Flags consisting of a combination of #SCROLL_AXIS_HORIZONTAL and/or #SCROLL_AXIS_VERTICAL .
 @return true if a cooperative parent was found and nested scrolling has been enabled for the current gesture.
 */
- (jboolean)startNestedScrollWithInt:(jint)axes;

/**
 @brief Stop a nested scroll in progress.
 <p>Calling this method when a nested scroll is not currently in progress is harmless.</p>
 */
- (void)stopNestedScroll;

/**
 @brief Transforms a motion event from view-local coordinates to on-screen coordinates.
 @param ev the view-local motion event
 @return false if the transformation could not be applied
 */
- (jboolean)toGlobalMotionEventWithRepackagedAndroidViewMotionEvent:(RepackagedAndroidViewMotionEvent *)ev;

/**
 @brief Transforms a motion event from on-screen coordinates to view-local coordinates.
 @param ev the on-screen motion event
 @return false if the transformation could not be applied
 */
- (jboolean)toLocalMotionEventWithRepackagedAndroidViewMotionEvent:(RepackagedAndroidViewMotionEvent *)ev;

- (NSString *)description;

/**
 @brief Modifies the input matrix such that it maps view-local coordinates to on-screen coordinates.
 @param m input matrix to modify
 */
- (void)transformMatrixToGlobalWithRepackagedAndroidGraphicsMatrix:(RepackagedAndroidGraphicsMatrix *)m;

/**
 @brief Modifies the input matrix such that it maps on-screen coordinates to view-local coordinates.
 @param m input matrix to modify
 */
- (void)transformMatrixToLocalWithRepackagedAndroidGraphicsMatrix:(RepackagedAndroidGraphicsMatrix *)m;

/**
 @brief Unschedule any events associated with the given Drawable.
 This can be used when selecting a new Drawable into a view, so that the previous one is completely unscheduled.
 @param who The Drawable to unschedule.
 */
- (void)unscheduleDrawableWithRepackagedAndroidGraphicsDrawableDrawable:(RepackagedAndroidGraphicsDrawableDrawable *)who;

/**
 @brief Cancels a scheduled action on a drawable.
 @param who the recipient of the action
 @param what the action to cancel
 */
- (void)unscheduleDrawableWithRepackagedAndroidGraphicsDrawableDrawable:(RepackagedAndroidGraphicsDrawableDrawable *)who
                                                   withJavaLangRunnable:(id<JavaLangRunnable>)what;

/**
 @brief Gets the RenderNode for the view, and updates its DisplayList (if needed and supported)
 */
- (RepackagedAndroidViewRenderNode *)updateDisplayListIfDirty;

/**
 @brief Returns whether or not this View can cache its drawing or not.
 @return true if this view does not cache its drawing, false otherwise
 */
- (jboolean)willNotCacheDrawing;

/**
 @brief Returns whether or not this View draws on its own.
 @return true if this view has nothing to draw, false otherwise
 */
- (jboolean)willNotDraw;

#pragma mark Protected

/**
 @brief <p>Trigger the scrollbars to draw.
 When invoked this method starts an animation to fade the scrollbars out after a default delay. If a subclass provides animated scrolling, the start delay should equal the duration of the scrolling animation.</p> <p>The animation starts only if at least one of the scrollbars is enabled, as specified by #isHorizontalScrollBarEnabled() and #isVerticalScrollBarEnabled() . When the animation is started, this method returns true, and false otherwise. If the animation is started, this method calls #invalidate() ; in that case the caller should not call #invalidate() .</p> <p>This method should be invoked every time a subclass directly updates the scroll parameters.</p> <p>This method is automatically invoked by #scrollBy(int,int) and #scrollTo(int,int) .</p>
 @return true if the animation is played, false otherwise
 */
- (jboolean)awakenScrollBars;

/**
 @brief <p> Trigger the scrollbars to draw.
 When invoked this method starts an animation to fade the scrollbars out after a fixed delay. If a subclass provides animated scrolling, the start delay should equal the duration of the scrolling animation. </p> <p> The animation starts only if at least one of the scrollbars is enabled, as specified by #isHorizontalScrollBarEnabled() and #isVerticalScrollBarEnabled() . When the animation is started, this method returns true, and false otherwise. If the animation is started, this method calls #invalidate() ; in that case the caller should not call #invalidate() . </p> <p> This method should be invoked every time a subclass directly updates the scroll parameters. </p>
 @param startDelay the delay, in milliseconds, after which the animation should start; when the delay is 0, the animation starts immediately
 @return true if the animation is played, false otherwise
 */
- (jboolean)awakenScrollBarsWithInt:(jint)startDelay;

/**
 @brief <p> Trigger the scrollbars to draw.
 When invoked this method starts an animation to fade the scrollbars out after a fixed delay. If a subclass provides animated scrolling, the start delay should equal the duration of the scrolling animation. </p> <p> The animation starts only if at least one of the scrollbars is enabled, as specified by #isHorizontalScrollBarEnabled() and #isVerticalScrollBarEnabled() . When the animation is started, this method returns true, and false otherwise. If the animation is started, this method calls #invalidate() if the invalidate parameter is set to true; in that case the caller should not call #invalidate() . </p> <p> This method should be invoked every time a subclass directly updates the scroll parameters. </p>
 @param startDelay the delay, in milliseconds, after which the animation should start; when the delay is 0, the animation starts immediately
 @param invalidate Whether this method should call invalidate
 @return true if the animation is played, false otherwise
 */
- (jboolean)awakenScrollBarsWithInt:(jint)startDelay
                        withBoolean:(jboolean)invalidate;

/**
 Compute the insets that should be consumed by this view and the ones that should propagate to those under it.
 */
- (jboolean)computeFitSystemWindowsWithRepackagedAndroidGraphicsRect:(RepackagedAndroidGraphicsRect *)inoutInsets
                                   withRepackagedAndroidGraphicsRect:(RepackagedAndroidGraphicsRect *)outLocalInsets;

/**
 @brief <p>Compute the horizontal extent of the horizontal scrollbar's thumb within the horizontal range.
 This value is used to compute the length of the thumb within the scrollbar's track.</p> <p>The range is expressed in arbitrary units that must be the same as the units used by #computeHorizontalScrollRange() and #computeHorizontalScrollOffset() .</p> <p>The default extent is the drawing width of this view.</p>
 @return the horizontal extent of the scrollbar's thumb
 */
- (jint)computeHorizontalScrollExtent;

/**
 @brief <p>Compute the horizontal offset of the horizontal scrollbar's thumb within the horizontal range.
 This value is used to compute the position of the thumb within the scrollbar's track.</p> <p>The range is expressed in arbitrary units that must be the same as the units used by #computeHorizontalScrollRange() and #computeHorizontalScrollExtent() .</p> <p>The default offset is the scroll offset of this view.</p>
 @return the horizontal offset of the scrollbar's thumb
 */
- (jint)computeHorizontalScrollOffset;

/**
 @brief <p>Compute the horizontal range that the horizontal scrollbar represents.
 </p> <p>The range is expressed in arbitrary units that must be the same as the units used by #computeHorizontalScrollExtent() and #computeHorizontalScrollOffset() .</p> <p>The default range is the drawing width of this view.</p>
 @return the total horizontal range represented by the horizontal scrollbar
 */
- (jint)computeHorizontalScrollRange;

/**
 */
- (void)computeOpaqueFlags;

/**
 @brief <p>Compute the vertical extent of the vertical scrollbar's thumb within the vertical range.
 This value is used to compute the length of the thumb within the scrollbar's track.</p> <p>The range is expressed in arbitrary units that must be the same as the units used by #computeVerticalScrollRange() and #computeVerticalScrollOffset() .</p> <p>The default extent is the drawing height of this view.</p>
 @return the vertical extent of the scrollbar's thumb
 */
- (jint)computeVerticalScrollExtent;

/**
 @brief <p>Compute the vertical offset of the vertical scrollbar's thumb within the horizontal range.
 This value is used to compute the position of the thumb within the scrollbar's track.</p> <p>The range is expressed in arbitrary units that must be the same as the units used by #computeVerticalScrollRange() and #computeVerticalScrollExtent() .</p> <p>The default offset is the scroll offset of this view.</p>
 @return the vertical offset of the scrollbar's thumb
 */
- (jint)computeVerticalScrollOffset;

/**
 @brief <p>Compute the vertical range that the vertical scrollbar represents.
 </p> <p>The range is expressed in arbitrary units that must be the same as the units used by #computeVerticalScrollExtent() and #computeVerticalScrollOffset() .</p>
 @return the total vertical range represented by the vertical scrollbar <p>The default range is the drawing height of this view.</p>
 */
- (jint)computeVerticalScrollRange;

/**
 @brief Tells the parent view to damage this view's bounds.
 */
- (void)damageInParent;

/**
 @brief Prints information about this view in the log output, with the tag #VIEW_LOG_TAG .
 Each line in the output is preceded with an indentation defined by the <code>depth</code>.
 @param depth the indentation level
 */
- (void)debugWithInt:(jint)depth;

/**
 @brief Creates a string of whitespaces used for indentation.
 @param depth the indentation level
 @return a String containing (depth * 2 + 3) * 2 white spaces
 */
+ (NSString *)debugIndentWithInt:(jint)depth;

/**
 @brief Destroys all hardware rendering resources.
 This method is invoked when the system needs to reclaim resources. Upon execution of this method, you should free any OpenGL resources created by the view. Note: you <strong>must</strong> call <code>super.destroyHardwareResources()</code> when overriding this method.
 */
- (void)destroyHardwareResources;

/**
 @brief Called by draw to draw the child views.
 This may be overridden by derived classes to gain control just before its children are drawn (but after its own view has been drawn).
 @param canvas the canvas on which to draw the view
 */
- (void)dispatchDrawWithRepackagedAndroidGraphicsCanvas:(RepackagedAndroidGraphicsCanvas *)canvas;

/**
 @brief Dispatch a generic motion event to the currently focused view.
 <p> Do not call this method directly. Call #dispatchGenericMotionEvent(MotionEvent) instead. </p>
 @param event The motion event to be dispatched.
 @return True if the event was handled by the view, false otherwise.
 */
- (jboolean)dispatchGenericFocusedEventWithRepackagedAndroidViewMotionEvent:(RepackagedAndroidViewMotionEvent *)event;

/**
 @brief Dispatch a generic motion event to the view under the first pointer.
 <p> Do not call this method directly. Call #dispatchGenericMotionEvent(MotionEvent) instead. </p>
 @param event The motion event to be dispatched.
 @return True if the event was handled by the view, false otherwise.
 */
- (jboolean)dispatchGenericPointerEventWithRepackagedAndroidViewMotionEvent:(RepackagedAndroidViewMotionEvent *)event;

/**
 @brief This method is used by ViewGroup to cause its children to restore or recreate their display lists.
 It is called by getDisplayList() when the parent ViewGroup does not need to recreate its own display list, which would happen if it went through the normal draw/dispatchDraw mechanisms.
 */
- (void)dispatchGetDisplayList;

/**
 @brief Dispatch a hover event.
 <p> Do not call this method directly. Call #dispatchGenericMotionEvent(MotionEvent) instead. </p>
 @param event The motion event to be dispatched.
 @return True if the event was handled by the view, false otherwise.
 */
- (jboolean)dispatchHoverEventWithRepackagedAndroidViewMotionEvent:(RepackagedAndroidViewMotionEvent *)event;

/**
 @brief Called by #restoreHierarchyState(repackaged.android.util.SparseArray) to retrieve the state for this view and its children.
 May be overridden to modify how restoring happens to a view's children; for example, some views may want to not store state for their children.
 @param container The SparseArray which holds previously saved state.
 */
- (void)dispatchRestoreInstanceStateWithRepackagedAndroidUtilSparseArray:(RepackagedAndroidUtilSparseArray *)container;

/**
 @brief Called by #saveHierarchyState(repackaged.android.util.SparseArray) to store the state for this view and its children.
 May be overridden to modify how freezing happens to a view's children; for example, some views may want to not store state for their children.
 @param container The SparseArray in which to save the view's state.
 */
- (void)dispatchSaveInstanceStateWithRepackagedAndroidUtilSparseArray:(RepackagedAndroidUtilSparseArray *)container;

/**
 @brief Dispatch setActivated to all of this View's children.
 @param activated The new activated state
 */
- (void)dispatchSetActivatedWithBoolean:(jboolean)activated;

/**
 @brief Dispatch setPressed to all of this View's children.
 @param pressed The new pressed state
 */
- (void)dispatchSetPressedWithBoolean:(jboolean)pressed;

/**
 @brief Dispatch setSelected to all of this View's children.
 @param selected The new selected state
 */
- (void)dispatchSetSelectedWithBoolean:(jboolean)selected;

/**
 @brief Dispatch a view visibility change down the view hierarchy.
 ViewGroups should override to route to their children.
 @param changedView The view whose visibility changed. Could be 'this' or an ancestor view.
 @param visibility The new visibility of changedView: #VISIBLE , #INVISIBLE or #GONE .
 */
- (void)dispatchVisibilityChangedWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)changedView
                                                       withInt:(jint)visibility;

/**
 @brief This function is called whenever the state of the view changes in such a way that it impacts the state of drawables being shown.
 <p> If the View has a StateListAnimator, it will also be called to run necessary state change animations. <p> Be sure to call through to the superclass when overriding this function.
 */
- (void)drawableStateChanged;

/**
 
 */
- (void)encodePropertiesWithRepackagedAndroidViewViewHierarchyEncoder:(id<RepackagedAndroidViewViewHierarchyEncoder>)stream;

/**
 
 @param predicate The predicate to evaluate.
 @param childToSkip If not null, ignores this child during the recursive traversal.
 @return The first view that matches the predicate or null.
 */
- (RepackagedAndroidViewView *)findViewByPredicateTraversalWithRepackagedComAndroidInternalUtilPredicate:(id<RepackagedComAndroidInternalUtilPredicate>)predicate
                                                                           withRepackagedAndroidViewView:(RepackagedAndroidViewView *)childToSkip;

/**
 
 @param id the id of the view to be found
 @return the view of the specified id, null if cannot be found
 */
- (RepackagedAndroidViewView *)findViewTraversalWithInt:(jint)id_;

/**
 
 @param tag the tag of the view to be found
 @return the view of specified tag, null if cannot be found
 */
- (RepackagedAndroidViewView *)findViewWithTagTraversalWithId:(id)tag;

/**
 @brief Called by the view hierarchy when the content insets for a window have changed, to allow it to adjust its content to fit within those windows.
 The content insets tell you the space that the status bar, input method, and other system windows infringe on the application's window. <p>You do not normally need to deal with this function, since the default window decoration given to applications takes care of applying it to the content of the window.  If you use #SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN or #SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION this will not be the case, and your content can be placed under those system elements.  You can then use this method within your view hierarchy if you have parts of your UI which you would like to ensure are not being covered. <p>The default implementation of this method simply applies the content insets to the view's padding, consuming that content (modifying the insets to be 0), and returning true.  This behavior is off by default, but can be enabled through #setFitsSystemWindows(boolean) . <p>This function's traversal down the hierarchy is depth-first.  The same content insets object is propagated down the hierarchy, so any changes made to it will be seen by all following views (including potentially ones above in the hierarchy since this is a depth-first traversal).  The first view that returns true will abort the entire traversal. <p>The default implementation works well for a situation where it is used with a container that covers the entire window, allowing it to apply the appropriate insets to its content on all edges.  If you need a more complicated layout (such as two different views fitting system windows, one on the top of the window, and one on the bottom), you can override the method and handle the insets however you would like. Note that the insets provided by the framework are always relative to the far edges of the window, not accounting for the location of the called view within that window.  (In fact when this method is called you do not yet know where the layout will place the view, as it is done before layout happens.) <p>Note: unlike many View methods, there is no dispatch phase to this call.  If you are overriding it in a ViewGroup and want to allow the call to continue to your children, you must be sure to call the super implementation. <p>Here is a sample layout that makes use of fitting system windows to have controls for a video view placed inside of the window decorations that it hides and shows.  This can be used with code like the second sample (video player) shown in #setSystemUiVisibility(int) . development/samples/ApiDemos/res/layout/video_player.xml complete
 @param insets Current content insets of the window.  Prior to repackaged.android.os.Build.VERSION_CODES#JELLY_BEAN you must not modify the insets or else you and Android will be unhappy.
 @return <code>true</code> if this view applied the insets and it should not continue propagating further down the hierarchy, <code>false</code> otherwise.
 */
- (jboolean)fitSystemWindowsWithRepackagedAndroidGraphicsRect:(RepackagedAndroidGraphicsRect *)insets;

/**
 @brief Returns the strength, or intensity, of the bottom faded edge.
 The strength is a value between 0.0 (no fade) and 1.0 (full fade). The default implementation returns 0.0 or 1.0 but no value in between. Subclasses should override this method to provide a smoother fade transition when scrolling occurs.
 @return the intensity of the bottom fade as a float between 0.0f and 1.0f
 */
- (jfloat)getBottomFadingEdgeStrength;

/**
 @brief Amount by which to extend the bottom fading region.
 Called only when #isPaddingOffsetRequired() returns true.
 @return The bottom padding offset in pixels.
 @since CURRENT
 */
- (jint)getBottomPaddingOffset;

/**
 @brief Views should implement this if they have extra information to associate with the context menu.
 The return result is supplied as a parameter to the OnCreateContextMenuListener#onCreateContextMenu(ContextMenu,View,ContextMenuInfo) callback.
 @return Extra information about the item for which the context menu should be shown. This information will vary across different subclasses of View.
 */
- (RepackagedAndroidViewContextMenu_ContextMenuInfo *)getContextMenuInfo;

/**
 @param offsetRequired
 */
- (jint)getFadeHeightWithBoolean:(jboolean)offsetRequired;

/**
 @param offsetRequired
 */
- (jint)getFadeTopWithBoolean:(jboolean)offsetRequired;

/**
 @brief Returns the height of the horizontal scrollbar.
 @return The height in pixels of the horizontal scrollbar or 0 if there is no horizontal scrollbar.
 */
- (jint)getHorizontalScrollbarHeight;

/**
 @brief Gets a scale factor that determines the distance the view should scroll horizontally in response to MotionEvent#ACTION_SCROLL .
 @return The horizontal scroll scale factor.
 */
- (jfloat)getHorizontalScrollFactor;

/**
 @brief Returns the strength, or intensity, of the left faded edge.
 The strength is a value between 0.0 (no fade) and 1.0 (full fade). The default implementation returns 0.0 or 1.0 but no value in between. Subclasses should override this method to provide a smoother fade transition when scrolling occurs.
 @return the intensity of the left fade as a float between 0.0f and 1.0f
 */
- (jfloat)getLeftFadingEdgeStrength;

/**
 @brief Amount by which to extend the left fading region.
 Called only when #isPaddingOffsetRequired() returns true.
 @return The left padding offset in pixels.
 @since CURRENT
 */
- (jint)getLeftPaddingOffset;

/**
 @brief Returns the strength, or intensity, of the right faded edge.
 The strength is a value between 0.0 (no fade) and 1.0 (full fade). The default implementation returns 0.0 or 1.0 but no value in between. Subclasses should override this method to provide a smoother fade transition when scrolling occurs.
 @return the intensity of the right fade as a float between 0.0f and 1.0f
 */
- (jfloat)getRightFadingEdgeStrength;

/**
 @brief Amount by which to extend the right fading region.
 Called only when #isPaddingOffsetRequired() returns true.
 @return The right padding offset in pixels.
 @since CURRENT
 */
- (jint)getRightPaddingOffset;

/**
 @brief Returns the suggested minimum height that the view should use.
 This returns the maximum of the view's minimum height and the background's minimum height ( repackaged.android.graphics.drawable.Drawable#getMinimumHeight() ). <p> When being used in #onMeasure(int,int) , the caller should still ensure the returned height is within the requirements of the parent.
 @return The suggested minimum height of the view.
 */
- (jint)getSuggestedMinimumHeight;

/**
 @brief Returns the suggested minimum width that the view should use.
 This returns the maximum of the view's minimum width and the background's minimum width ( repackaged.android.graphics.drawable.Drawable#getMinimumWidth() ). <p> When being used in #onMeasure(int,int) , the caller should still ensure the returned width is within the requirements of the parent.
 @return The suggested minimum width of the view.
 */
- (jint)getSuggestedMinimumWidth;

/**
 @brief Returns the strength, or intensity, of the top faded edge.
 The strength is a value between 0.0 (no fade) and 1.0 (full fade). The default implementation returns 0.0 or 1.0 but no value in between. Subclasses should override this method to provide a smoother fade transition when scrolling occurs.
 @return the intensity of the top fade as a float between 0.0f and 1.0f
 */
- (jfloat)getTopFadingEdgeStrength;

/**
 @brief Amount by which to extend the top fading region.
 Called only when #isPaddingOffsetRequired() returns true.
 @return The top padding offset in pixels.
 @since CURRENT
 */
- (jint)getTopPaddingOffset;

/**
 @brief Gets a scale factor that determines the distance the view should scroll vertically in response to MotionEvent#ACTION_SCROLL .
 @return The vertical scroll scale factor.
 */
- (jfloat)getVerticalScrollFactor;

/**
 @return The number of times this view has been attached to a window
 */
- (jint)getWindowAttachCount;

/**
 @brief Returns true if the view has a child to which it has recently sent MotionEvent#ACTION_HOVER_ENTER .
 If this view is hovered and it does not have a hovered child, then it must be the innermost hovered view.
 */
- (jboolean)hasHoveredChild;

/**
 */
- (jboolean)hasOpaqueScrollbars;

/**
 @brief <p> Initializes the fading edges from a given set of styled attributes.
 This method should be called by subclasses that need fading edges and when an instance of these subclasses is created programmatically rather than being inflated from XML. This method is automatically called when the XML is inflated. </p>
 @param a the styled attributes set to initialize the fading edges from
 */
- (void)initializeFadingEdgeWithRepackagedAndroidContentResTypedArray:(id<RepackagedAndroidContentResTypedArray>)a OBJC_METHOD_FAMILY_NONE;

/**
 @brief <p> Initializes the fading edges from a given set of styled attributes.
 This method should be called by subclasses that need fading edges and when an instance of these subclasses is created programmatically rather than being inflated from XML. This method is automatically called when the XML is inflated. </p>
 @param a the styled attributes set to initialize the fading edges from
 This is the real method; the public one is shimmed to be safe to call from apps.
 */
- (void)initializeFadingEdgeInternalWithRepackagedAndroidContentResTypedArray:(id<RepackagedAndroidContentResTypedArray>)a OBJC_METHOD_FAMILY_NONE;

/**
 @brief <p> Initializes the scrollbars from a given set of styled attributes.
 This method should be called by subclasses that need scrollbars and when an instance of these subclasses is created programmatically rather than being inflated from XML. This method is automatically called when the XML is inflated. </p>
 @param a the styled attributes set to initialize the scrollbars from
 */
- (void)initializeScrollbarsWithRepackagedAndroidContentResTypedArray:(id<RepackagedAndroidContentResTypedArray>)a OBJC_METHOD_FAMILY_NONE;

/**
 @brief <p> Initializes the scrollbars from a given set of styled attributes.
 This method should be called by subclasses that need scrollbars and when an instance of these subclasses is created programmatically rather than being inflated from XML. This method is automatically called when the XML is inflated. </p>
 @param a the styled attributes set to initialize the scrollbars from
 */
- (void)initializeScrollbarsInternalWithRepackagedAndroidContentResTypedArray:(id<RepackagedAndroidContentResTypedArray>)a OBJC_METHOD_FAMILY_NONE;

/**
 */
- (void)internalSetPaddingWithInt:(jint)left
                          withInt:(jint)top
                          withInt:(jint)right
                          withInt:(jint)bottom;

/**
 @brief Used to indicate that the parent of this view should clear its caches.
 This functionality is used to force the parent to rebuild its display list (when hardware-accelerated), which is necessary when various parent-managed properties of the view change, such as alpha, translationX/Y, scrollX/Y, scaleX/Y, and rotation/X/Y. This method only clears the parent caches and does not causes an invalidate event.
 */
- (void)invalidateParentCaches;

/**
 @brief Used to indicate that the parent of this view should be invalidated.
 This functionality is used to force the parent to rebuild its display list (when hardware-accelerated), which is necessary when various parent-managed properties of the view change, such as alpha, translationX/Y, scrollX/Y, scaleX/Y, and rotation/X/Y. This method will propagate an invalidation event to the parent.
 */
- (void)invalidateParentIfNeeded;

/**
 */
- (void)invalidateParentIfNeededAndWasQuickRejected;

/**
 @brief If the View draws content inside its padding and enables fading edges, it needs to support padding offsets.
 Padding offsets are added to the fading edges to extend the length of the fade so that it covers pixels drawn inside the padding. Subclasses of this class should override this method if they need to draw content inside the padding.
 @return True if padding offset must be applied, false otherwise.
 @since CURRENT
 */
- (jboolean)isPaddingOffsetRequired;

/**
 @brief Override this if the vertical scrollbar needs to be hidden in a subclass, like when FastScroller is visible.
 @return whether to temporarily hide the vertical scrollbar
 */
- (jboolean)isVerticalScrollBarHidden;

/**
 @brief Computes whether this view is visible to the user.
 Such a view is attached, visible, all its predecessors are visible, it is not clipped entirely by its predecessors, and has an alpha greater than zero.
 @return Whether the view is visible on the screen.
 */
- (jboolean)isVisibleToUser;

/**
 @brief Computes whether the given portion of this view is visible to the user.
 Such a view is attached, visible, all its predecessors are visible, has an alpha greater than zero, and the specified portion is not clipped entirely by its predecessors.
 @param boundInView the portion of the view to test; coordinates should be relative; may be <code>null</code>, and the entire view will be tested in this case. When <code>true</code> is returned by the function, the actual visible region will be stored in this parameter; that is, if boundInView is fully contained within the view, no modification will be made, otherwise regions outside of the visible area of the view will be clipped.
 @return Whether the specified portion of the view is visible on the screen.
 */
- (jboolean)isVisibleToUserWithRepackagedAndroidGraphicsRect:(RepackagedAndroidGraphicsRect *)boundInView;

/**
 @brief Merge your own state values in <var>additionalState</var> into the base state values <var>baseState</var> that were returned by #onCreateDrawableState(int) .
 @param baseState The base state values returned by #onCreateDrawableState(int) , which will be modified to also hold your own additional state values.
 @param additionalState The additional state values you would like added to <var>baseState</var>; this array is not modified.
 @return As a convenience, the <var>baseState</var> array you originally passed into the function is returned.
 */
+ (IOSIntArray *)mergeDrawableStatesWithIntArray:(IOSIntArray *)baseState
                                    withIntArray:(IOSIntArray *)additionalState;

/**
 @brief Invoked by a parent ViewGroup to notify the end of the animation currently associated with this view.
 If you override this method, always call super.onAnimationEnd();
 */
- (void)onAnimationEnd;

/**
 @brief Invoked by a parent ViewGroup to notify the start of the animation currently associated with this view.
 If you override this method, always call super.onAnimationStart();
 */
- (void)onAnimationStart;

/**
 @brief This is called when the view is attached to a window.
 At this point it has a Surface and will start drawing.  Note that this function is guaranteed to be called before #onDraw(repackaged.android.graphics.Canvas) , however it may be called any time before the first onDraw -- including before or after #onMeasure(int,int) .
 */
- (void)onAttachedToWindow;

/**
 @brief Called when the current configuration of the resources being used by the application have changed.
 You can use this to decide when to reload resources that can changed based on orientation and other configuration characteristics.  You only need to use this if you are not relying on the normal android.app.Activity mechanism of recreating the activity instance upon a configuration change.
 @param newConfig The new resource configuration.
 */
- (void)onConfigurationChangedWithRepackagedAndroidContentResConfiguration:(id<RepackagedAndroidContentResConfiguration>)newConfig;

/**
 @brief Views should implement this if the view itself is going to add items to the context menu.
 @param menu the context menu to populate
 */
- (void)onCreateContextMenuWithRepackagedAndroidViewContextMenu:(RepackagedAndroidViewContextMenu *)menu;

/**
 @brief Generate the new repackaged.android.graphics.drawable.Drawable state for this view.
 This is called by the view system when the cached Drawable state is determined to be invalid.  To retrieve the current state, you should use #getDrawableState .
 @param extraSpace if non-zero, this is the number of extra entries you would like in the returned array in which you can place your own states.
 @return Returns an array holding the current Drawable state of the view.
 */
- (IOSIntArray *)onCreateDrawableStateWithInt:(jint)extraSpace;

/**
 @brief This is called when the view is detached from a window.
 At this point it no longer has a surface for drawing.
 */
- (void)onDetachedFromWindow;

/**
 @brief This is a framework-internal mirror of onDetachedFromWindow() that's called after onDetachedFromWindow().
 If you override this you *MUST* call super.onDetachedFromWindowInternal()! The super method should be called at the end of the overridden method to ensure subclasses are destroyed first
 */
- (void)onDetachedFromWindowInternal;

/**
 @brief Gives this view a hint about whether is displayed or not.
 For instance, when a View moves out of the screen, it might receives a display hint indicating the view is not displayed. Applications should not <em>rely</em> on this hint as there is no guarantee that they will receive one.
 @param hint A hint about whether or not this view is displayed: #VISIBLE or #INVISIBLE .
 */
- (void)onDisplayHintWithInt:(jint)hint;

/**
 @brief Implement this to do your drawing.
 @param canvas the canvas on which the background will be drawn
 */
- (void)onDrawWithRepackagedAndroidGraphicsCanvas:(RepackagedAndroidGraphicsCanvas *)canvas;

/**
 @brief <p>Draw the horizontal scrollbar if #isHorizontalScrollBarEnabled() returns true.
 </p>
 @param canvas the canvas on which to draw the scrollbar
 @param scrollBar the scrollbar's drawable
 */
- (void)onDrawHorizontalScrollBarWithRepackagedAndroidGraphicsCanvas:(RepackagedAndroidGraphicsCanvas *)canvas
                       withRepackagedAndroidGraphicsDrawableDrawable:(RepackagedAndroidGraphicsDrawableDrawable *)scrollBar
                                                             withInt:(jint)l
                                                             withInt:(jint)t
                                                             withInt:(jint)r
                                                             withInt:(jint)b;

/**
 @brief <p>Request the drawing of the horizontal and the vertical scrollbar.
 The scrollbars are painted only if they have been awakened first.</p>
 @param canvas the canvas on which to draw the scrollbars
 */
- (void)onDrawScrollBarsWithRepackagedAndroidGraphicsCanvas:(RepackagedAndroidGraphicsCanvas *)canvas;

/**
 @brief <p>Draw the vertical scrollbar if #isVerticalScrollBarEnabled() returns true.
 </p>
 @param canvas the canvas on which to draw the scrollbar
 @param scrollBar the scrollbar's drawable
 */
- (void)onDrawVerticalScrollBarWithRepackagedAndroidGraphicsCanvas:(RepackagedAndroidGraphicsCanvas *)canvas
                     withRepackagedAndroidGraphicsDrawableDrawable:(RepackagedAndroidGraphicsDrawableDrawable *)scrollBar
                                                           withInt:(jint)l
                                                           withInt:(jint)t
                                                           withInt:(jint)r
                                                           withInt:(jint)b;

/**
 @brief Finalize inflating a view from XML.
 This is called as the last phase of inflation, after all child views have been added. <p>Even if the subclass overrides onFinishInflate, they should always be sure to call the super method, so that we get called.
 */
- (void)onFinishInflate;

/**
 @brief Called by the view system when the focus state of this view changes.
 When the focus change event is caused by directional navigation, direction and previouslyFocusedRect provide insight into where the focus is coming from. When overriding, be sure to call up through to the super class so that the standard focus handling will occur.
 @param gainFocus True if the View has focus; false otherwise.
 @param direction The direction focus has moved when requestFocus() is called to give this view focus. Values are #FOCUS_UP , #FOCUS_DOWN , #FOCUS_LEFT , #FOCUS_RIGHT , #FOCUS_FORWARD , or #FOCUS_BACKWARD . It may not always apply, in which case use the default.
 @param previouslyFocusedRect The rectangle, in this view's coordinate system, of the previously focused view.  If applicable, this will be passed in as finer grained information about where the focus is coming from (in addition to direction).  Will be <code>null</code> otherwise.
 */
- (void)onFocusChangedWithBoolean:(jboolean)gainFocus
                          withInt:(jint)direction
withRepackagedAndroidGraphicsRect:(RepackagedAndroidGraphicsRect *)previouslyFocusedRect;

/**
 @brief Invoked whenever this view loses focus, either by losing window focus or by losing focus within its window.
 This method can be used to clear any state tied to the focus. For instance, if a button is held pressed with the trackball and the window loses focus, this method can be used to cancel the press. Subclasses of View overriding this method should always call super.onFocusLost().
 pending API council approval
 */
- (void)onFocusLost;

/**
 @brief Called from layout when this view should assign a size and position to each of its children.
 Derived classes with children should override this method and call layout on each of their children.
 @param changed This is a new size or position for this view
 @param left Left position, relative to parent
 @param top Top position, relative to parent
 @param right Right position, relative to parent
 @param bottom Bottom position, relative to parent
 */
- (void)onLayoutWithBoolean:(jboolean)changed
                    withInt:(jint)left
                    withInt:(jint)top
                    withInt:(jint)right
                    withInt:(jint)bottom;

/**
 @brief <p> Measure the view and its content to determine the measured width and the measured height.
 This method is invoked by #measure(int,int) and should be overridden by subclasses to provide accurate and efficient measurement of their contents. </p> <p> <strong>CONTRACT:</strong> When overriding this method, you <em>must</em> call #setMeasuredDimension(int,int) to store the measured width and height of this view. Failure to do so will trigger an <code>IllegalStateException</code>, thrown by #measure(int,int) . Calling the superclass' #onMeasure(int,int) is a valid use. </p> <p> The base class implementation of measure defaults to the background size, unless a larger size is allowed by the MeasureSpec. Subclasses should override #onMeasure(int,int) to provide better measurements of their content. </p> <p> If this method is overridden, it is the subclass's responsibility to make sure the measured height and width are at least the view's minimum height and width ( #getSuggestedMinimumHeight() and #getSuggestedMinimumWidth() ). </p>
 @param widthMeasureSpec horizontal space requirements as imposed by the parent. The requirements are encoded with repackaged.android.view.View.MeasureSpec .
 @param heightMeasureSpec vertical space requirements as imposed by the parent. The requirements are encoded with repackaged.android.view.View.MeasureSpec .
 */
- (void)onMeasureWithInt:(jint)widthMeasureSpec
                 withInt:(jint)heightMeasureSpec;

/**
 @brief Called by #overScrollBy(int,int,int,int,int,int,int,int,boolean) to respond to the results of an over-scroll operation.
 @param scrollX New X scroll value in pixels
 @param scrollY New Y scroll value in pixels
 @param clampedX True if scrollX was clamped to an over-scroll boundary
 @param clampedY True if scrollY was clamped to an over-scroll boundary
 */
- (void)onOverScrolledWithInt:(jint)scrollX
                      withInt:(jint)scrollY
                  withBoolean:(jboolean)clampedX
                  withBoolean:(jboolean)clampedY;

/**
 @brief Hook allowing a view to re-apply a representation of its internal state that had previously been generated by #onSaveInstanceState .
 This function will never be called with a null state.
 @param state The frozen state that had previously been returned by #onSaveInstanceState .
 */
- (void)onRestoreInstanceStateWithRepackagedAndroidOsParcelable:(id<RepackagedAndroidOsParcelable>)state;

/**
 @brief Hook allowing a view to generate a representation of its internal state that can later be used to create a new instance with that same state.
 This state should only contain information that is not persistent or can not be reconstructed later. For example, you will never store your current position on screen because that will be computed again when a new instance of the view is placed in its view hierarchy. <p> Some examples of things you may store here: the current cursor position in a text view (but usually not the text itself since that is stored in a content provider or other persistent storage), the currently selected item in a list view.
 @return Returns a Parcelable object containing the view's current dynamic state, or null if there is nothing interesting to save. The default implementation returns null.
 */
- (id<RepackagedAndroidOsParcelable>)onSaveInstanceState;

/**
 @brief This is called in response to an internal scroll in this view (i.e., the view scrolled its own contents).
 This is typically as a result of #scrollBy(int,int) or #scrollTo(int,int) having been called.
 @param l Current horizontal scroll origin.
 @param t Current vertical scroll origin.
 @param oldl Previous horizontal scroll origin.
 @param oldt Previous vertical scroll origin.
 */
- (void)onScrollChangedWithInt:(jint)l
                       withInt:(jint)t
                       withInt:(jint)oldl
                       withInt:(jint)oldt;

/**
 @brief Invoked if there is a Transform that involves alpha.
 Subclass that can draw themselves with the specified alpha should return true, and then respect that alpha when their onDraw() is called. If this returns false then the view may be redirected to draw into an offscreen buffer to fulfill the request, which will look fine, but may be slower than if the subclass handles it internally. The default implementation returns false.
 @param alpha The alpha (0..255) to apply to the view's drawing
 @return true if the view can draw with the specified alpha.
 */
- (jboolean)onSetAlphaWithInt:(jint)alpha;

/**
 @brief This is called during layout when the size of this view has changed.
 If you were just added to the view hierarchy, you're called with the old values of 0.
 @param w Current width of this view.
 @param h Current height of this view.
 @param oldw Old width of this view.
 @param oldh Old height of this view.
 */
- (void)onSizeChangedWithInt:(jint)w
                     withInt:(jint)h
                     withInt:(jint)oldw
                     withInt:(jint)oldh;

/**
 @brief Called when the visibility of the view or an ancestor of the view has changed.
 @param changedView The view whose visibility changed. May be <code>this</code> or an ancestor view.
 @param visibility The new visibility, one of #VISIBLE , #INVISIBLE or #GONE .
 */
- (void)onVisibilityChangedWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)changedView
                                                 withInt:(jint)visibility;

/**
 @brief Called when the window containing has change its visibility (between #GONE , #INVISIBLE , and #VISIBLE ).
 Note that this tells you whether or not your window is being made visible to the window manager; this does <em>not</em> tell you whether or not your window is obscured by other windows on the screen, even if it is itself visible.
 @param visibility The new visibility of the window.
 */
- (void)onWindowVisibilityChangedWithInt:(jint)visibility;

/**
 @brief Scroll the view with standard behavior for scrolling beyond the normal content boundaries.
 Views that call this method should override #onOverScrolled(int,int,boolean,boolean) to respond to the results of an over-scroll operation. Views can use this method to handle any touch or fling-based scrolling.
 @param deltaX Change in X in pixels
 @param deltaY Change in Y in pixels
 @param scrollX Current X scroll value in pixels before applying deltaX
 @param scrollY Current Y scroll value in pixels before applying deltaY
 @param scrollRangeX Maximum content scroll range along the X axis
 @param scrollRangeY Maximum content scroll range along the Y axis
 @param maxOverScrollX Number of pixels to overscroll by in either direction along the X axis.
 @param maxOverScrollY Number of pixels to overscroll by in either direction along the Y axis.
 @param isTouchEvent true if this scroll operation is the result of a touch event.
 @return true if scrolling was clamped to an over-scroll boundary along either axis, false otherwise.
 */
- (jboolean)overScrollByWithInt:(jint)deltaX
                        withInt:(jint)deltaY
                        withInt:(jint)scrollX
                        withInt:(jint)scrollY
                        withInt:(jint)scrollRangeX
                        withInt:(jint)scrollRangeY
                        withInt:(jint)maxOverScrollX
                        withInt:(jint)maxOverScrollY
                    withBoolean:(jboolean)isTouchEvent;

/**
 @brief Performs button-related actions during a touch down event.
 @param event The event.
 @return True if the down was consumed.
 */
- (jboolean)performButtonActionOnTouchDownWithRepackagedAndroidViewMotionEvent:(RepackagedAndroidViewMotionEvent *)event;

/**
 */
- (void)recomputePadding;

/**
 */
- (void)resetResolvedDrawables;

/**
 @brief Resolve the Drawables depending on the layout direction.
 This is implicitly supposing that the View directionality can and will be resolved before its Drawables. Will call View#onResolveDrawables when resolution is done.
 */
- (void)resolveDrawables;

/**
 @brief Assign a size and position to this view.
 This is called from layout.
 @param left Left position, relative to parent
 @param top Top position, relative to parent
 @param right Right position, relative to parent
 @param bottom Bottom position, relative to parent
 @return true if the new size and position are different than the previous ones
 */
- (jboolean)setFrameWithInt:(jint)left
                    withInt:(jint)top
                    withInt:(jint)right
                    withInt:(jint)bottom;

/**
 @brief <p>This method must be called by #onMeasure(int,int) to store the measured width and measured height.
 Failing to do so will trigger an exception at measurement time.</p>
 @param measuredWidth The measured width of this view.  May be a complex bit mask as defined by #MEASURED_SIZE_MASK and #MEASURED_STATE_TOO_SMALL .
 @param measuredHeight The measured height of this view.  May be a complex bit mask as defined by #MEASURED_SIZE_MASK and #MEASURED_STATE_TOO_SMALL .
 */
- (void)setMeasuredDimensionWithInt:(jint)measuredWidth
                            withInt:(jint)measuredHeight;

/**
 @brief If your view subclass is displaying its own Drawable objects, it should override this function and return true for any Drawable it is displaying.
 This allows animations for those drawables to be scheduled. <p>Be sure to call through to the super class when overriding this function.
 @param who The Drawable to verify.  Return true if it is one you are displaying, else return the result of calling through to the super class.
 @return boolean If true than the Drawable is being displayed in the view; else false and it is not allowed to animate.
 */
- (jboolean)verifyDrawableWithRepackagedAndroidGraphicsDrawableDrawable:(RepackagedAndroidGraphicsDrawableDrawable *)who;

#pragma mark Package-Private

/**
 @brief Non-public constructor for use in testing
 */
- (instancetype)init;

- (jboolean)areDrawablesResolved;

- (void)assignParentWithRepackagedAndroidViewViewParent:(id<RepackagedAndroidViewViewParent>)parent;

- (jboolean)canAcceptDrag;

/**
 @brief Clears accessibility focus without calling any callback methods normally invoked in #clearAccessibilityFocus() .
 This method is used for clearing accessibility focus when giving this focus to another view.
 */
- (void)clearAccessibilityFocusNoCallbacks;

/**
 @brief Clears focus from the view, optionally propagating the change up through the parent hierarchy and requesting that the root view place new focus.
 @param propagate whether to propagate the change up through the parent hierarchy
 @param refocus when propagate is true, specifies whether to request the root view place new focus
 */
- (void)clearFocusInternalWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)focused
                                            withBoolean:(jboolean)propagate
                                            withBoolean:(jboolean)refocus;

/**
 @brief Return the visibility value of the least visible component passed.
 */
- (jint)combineVisibilityWithInt:(jint)vis1
                         withInt:(jint)vis2;

- (RepackagedAndroidGraphicsInsets *)computeOpticalInsets;

/**
 @brief Create a snapshot of the view into a bitmap.
 We should probably make some form of this public, but should think about the API.
 */
- (RepackagedAndroidGraphicsBitmap *)createSnapshotWithRepackagedAndroidGraphicsBitmap_Config:(RepackagedAndroidGraphicsBitmap_Config *)quality
                                                                                      withInt:(jint)backgroundColor
                                                                                  withBoolean:(jboolean)skipChildren;

/**
 @param info the repackaged.android.view.View.AttachInfo to associated with this view
 */
- (void)dispatchAttachedToWindowWithRepackagedAndroidViewView_AttachInfo:(RepackagedAndroidViewView_AttachInfo *)info
                                                                 withInt:(jint)visibility;

/**
 @brief Called by #cancelPendingInputEvents() to cancel input events in flight.
 Overridden by ViewGroup to dispatch. Package scoped to prevent app-side meddling.
 */
- (void)dispatchCancelPendingInputEvents;

/**
 @brief Private function to aggregate all per-view attributes in to the view root.
 */
- (void)dispatchCollectViewAttributesWithRepackagedAndroidViewView_AttachInfo:(RepackagedAndroidViewView_AttachInfo *)attachInfo
                                                                      withInt:(jint)visibility;

- (void)dispatchDetachedFromWindow;

/**
 */
- (void)dispatchScreenStateChangedWithInt:(jint)screenState;

/**
 @brief This method is called by ViewGroup.drawChild() to have each child view draw itself.
 This is where the View specializes rendering behavior based on layer type, and hardware acceleration.
 */
- (jboolean)drawWithRepackagedAndroidGraphicsCanvas:(RepackagedAndroidGraphicsCanvas *)canvas
                 withRepackagedAndroidViewViewGroup:(RepackagedAndroidViewViewGroup *)parent
                                           withLong:(jlong)drawingTime;

- (void)ensureTransformationInfo;

/**
 @brief If a user manually specified the next view id for a particular direction, use the root to look up the view.
 @param root The root view of the hierarchy containing this view.
 @param direction One of FOCUS_UP, FOCUS_DOWN, FOCUS_LEFT, FOCUS_RIGHT, FOCUS_FORWARD, or FOCUS_BACKWARD.
 @return The user specified next view, or null if there is none.
 */
- (RepackagedAndroidViewView *)findUserSetNextFocusWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)root
                                                                         withInt:(jint)direction;

/**
 @brief Finds a view by its unuque and stable accessibility id.
 @param accessibilityId The searched accessibility id.
 @return The found view.
 */
- (RepackagedAndroidViewView *)findViewByAccessibilityIdWithInt:(jint)accessibilityId;

/**
 @brief If this View draws with a HardwareLayer, returns it.
 Otherwise returns null TODO: Only TextureView uses this, can we eliminate it?
 */
- (RepackagedAndroidViewHardwareLayer *)getHardwareLayer;

- (RepackagedAndroidViewView_ListenerInfo *)getListenerInfo;

- (void)getScrollIndicatorBoundsWithRepackagedAndroidGraphicsRect:(RepackagedAndroidGraphicsRect *)outArg;

/**
 @brief Retrieve private session object this view hierarchy is using to communicate with the window manager.
 @return the session object to communicate with the window manager
 */
- (id<RepackagedAndroidViewIWindowSession>)getWindowSession;

/**
 @brief Give this view focus.
 This will cause #onFocusChanged(boolean,int,repackaged.android.graphics.Rect) to be called. Note: this does not check whether this View should get focus, it just gives it focus no matter what.  It should only be called internally by framework code that knows what it is doing, namely #requestFocus(int,Rect) .
 @param direction values are View#FOCUS_UP , View#FOCUS_DOWN , View#FOCUS_LEFT or View#FOCUS_RIGHT . This is the direction which focus moved when requestFocus() is called. It may not always apply, in which case use the default View.FOCUS_DOWN.
 @param previouslyFocusedRect The rectangle of the view that had focus prior in this View's coordinate system.
 */
- (void)handleFocusGainInternalWithInt:(jint)direction
     withRepackagedAndroidGraphicsRect:(RepackagedAndroidGraphicsRect *)previouslyFocusedRect;

/**
 @brief Returns true if the transform matrix is the identity matrix.
 Recomputes the matrix if necessary.
 @return True if the transform matrix is the identity matrix, false otherwise.
 */
- (jboolean)hasIdentityMatrix;

/**
 @brief This is where the invalidate() work actually happens.
 A full invalidate() causes the drawing cache to be invalidated, but this function can be called with invalidateCache set to false to skip that invalidation step for cases that do not need it (for example, a component that remains at the same dimensions with the same content).
 @param invalidateCache Whether the drawing cache for this view should be invalidated as well. This is usually true for a full invalidate, but may be set to false if the View's contents or dimensions have not changed.
 */
- (void)invalidateWithBoolean:(jboolean)invalidateCache;

- (void)invalidateInheritedLayoutModeWithInt:(jint)layoutModeOfRoot;

- (void)invalidateInternalWithInt:(jint)l
                          withInt:(jint)t
                          withInt:(jint)r
                          withInt:(jint)b
                      withBoolean:(jboolean)invalidateCache
                      withBoolean:(jboolean)fullInvalidate;

/**
 @brief Quick invalidation for View property changes (alpha, translationXY, etc.).
 We don't want to set any flags or handle all of the cases handled by the default invalidation methods. Instead, we just want to schedule a traversal in ViewRootImpl with the appropriate dirty rect. This method calls into fast invalidation methods in ViewGroup that walk up the hierarchy, transforming the dirty rect as necessary. The method also handles normal invalidation logic if display list properties are not being used in this view. The invalidateParent and forceRedraw flags are used by that backup approach, to handle these cases used in the various property-setting methods.
 @param invalidateParent Force a call to invalidateParentCaches() if display list properties are not being used in this view
 @param forceRedraw Mark the view as DRAWN to force the invalidation to propagate, if display list properties are not being used in this view
 */
- (void)invalidateViewPropertyWithBoolean:(jboolean)invalidateParent
                              withBoolean:(jboolean)forceRedraw;

- (jboolean)isAccessibilityFocusedViewOrHost;

/**
 @brief Return if padding has been resolved
 */
- (jboolean)isPaddingResolved;

- (void)needGlobalAttributesUpdateWithBoolean:(jboolean)force;

- (void)notifyGlobalFocusClearedWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)oldFocus;

- (void)performCollectViewAttributesWithRepackagedAndroidViewView_AttachInfo:(RepackagedAndroidViewView_AttachInfo *)attachInfo
                                                                     withInt:(jint)visibility;

/**
 @brief Determines whether the given point, in local coordinates is inside the view.
 */
- (jboolean)pointInViewWithFloat:(jfloat)localX
                       withFloat:(jfloat)localY;

- (void)resetResolvedDrawablesInternal;

/**
 @brief Used when we only want to reset *this* view's padding and not trigger overrides in ViewGroup that reset children too.
 */
- (void)resetResolvedPaddingInternal;

/**
 @brief Reset the flag indicating the accessibility state of the subtree rooted at this view changed.
 */
- (void)resetSubtreeAccessibilityStateChanged;

- (jboolean)rootViewRequestFocus;

/**
 @brief Faster version of setAlpha() which performs the same steps except there are no calls to invalidate().
 The caller of this function should perform proper invalidation on the parent and this object. The return value indicates whether the subclass handles alpha (the return value for onSetAlpha()).
 @param alpha The new value for the alpha property
 @return true if the View subclass handles alpha (the return value for onSetAlpha()) and the new value for the alpha property is different from the old value
 */
- (jboolean)setAlphaNoInvalidationWithFloat:(jfloat)alpha;

/**
 @brief Sets the correct background bounds and rebuilds the outline, if needed.
 <p/> This is called by LayoutLib.
 */
- (void)setBackgroundBounds;

/**
 @brief This method is called by getDisplayList() when a display list is recorded for a View.
 It pushes any properties to the RenderNode that aren't managed by the RenderNode.
 */
- (void)setDisplayListPropertiesWithRepackagedAndroidViewRenderNode:(RepackagedAndroidViewRenderNode *)renderNode;

/**
 @brief Set flags controlling behavior of this view.
 @param flags Constant indicating the value which should be set
 @param mask Constant indicating the bit range that should be changed
 */
- (void)setFlagsWithInt:(jint)flags
                withInt:(jint)mask;

/**
 @brief Utility method to transform a given Rect by the current matrix of this view.
 */
- (void)transformRectWithRepackagedAndroidGraphicsRect:(RepackagedAndroidGraphicsRect *)rect;

/**
 @brief Called internally by the view system when a new view is getting focus.
 This is what clears the old focus. <p> <b>NOTE:</b> The parent view's focused child must be updated manually after calling this method. Otherwise, the view hierarchy may be left in an inconstent state.
 */
- (void)unFocusWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)focused;

- (jboolean)updateLocalSystemUiVisibilityWithInt:(jint)localValue
                                         withInt:(jint)localChanges;

@end

J2OBJC_STATIC_INIT(RepackagedAndroidViewView)

J2OBJC_FIELD_SETTER(RepackagedAndroidViewView, mCurrentAnimation_, id<RepackagedAndroidViewAnimationAnimation>)
J2OBJC_FIELD_SETTER(RepackagedAndroidViewView, mSendViewStateChangedAccessibilityEvent_, RepackagedAndroidViewView_SendViewStateChangedAccessibilityEvent *)
J2OBJC_FIELD_SETTER(RepackagedAndroidViewView, mTag_, id)
J2OBJC_FIELD_SETTER(RepackagedAndroidViewView, mParent_, id<RepackagedAndroidViewViewParent>)
J2OBJC_FIELD_SETTER(RepackagedAndroidViewView, mAttachInfo_, RepackagedAndroidViewView_AttachInfo *)
J2OBJC_FIELD_SETTER(RepackagedAndroidViewView, mLayoutParams_, RepackagedAndroidViewViewGroup_LayoutParams *)
J2OBJC_FIELD_SETTER(RepackagedAndroidViewView, mTransformationInfo_, RepackagedAndroidViewView_TransformationInfo *)
J2OBJC_FIELD_SETTER(RepackagedAndroidViewView, mClipBounds_, RepackagedAndroidGraphicsRect *)
J2OBJC_FIELD_SETTER(RepackagedAndroidViewView, mListenerInfo_, RepackagedAndroidViewView_ListenerInfo *)
J2OBJC_FIELD_SETTER(RepackagedAndroidViewView, mContext_, id<RepackagedAndroidContentContext>)
J2OBJC_FIELD_SETTER(RepackagedAndroidViewView, mOutlineProvider_, RepackagedAndroidViewViewOutlineProvider *)
J2OBJC_FIELD_SETTER(RepackagedAndroidViewView, mLayerPaint_, RepackagedAndroidGraphicsPaint *)
J2OBJC_FIELD_SETTER(RepackagedAndroidViewView, mRenderNode_, RepackagedAndroidViewRenderNode *)
J2OBJC_FIELD_SETTER(RepackagedAndroidViewView, mAccessibilityDelegate_, RepackagedAndroidViewView_AccessibilityDelegate *)
J2OBJC_FIELD_SETTER(RepackagedAndroidViewView, mOverlay_, RepackagedAndroidViewViewOverlay *)
J2OBJC_FIELD_SETTER(RepackagedAndroidViewView, mInputEventConsistencyVerifier_, RepackagedAndroidViewInputEventConsistencyVerifier *)
J2OBJC_FIELD_SETTER(RepackagedAndroidViewView, mGhostView_, RepackagedAndroidViewGhostView *)
J2OBJC_FIELD_SETTER(RepackagedAndroidViewView, mAttributes_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(RepackagedAndroidViewView, mStartActivityRequestWho_, NSString *)

FOUNDATION_EXPORT NSString *RepackagedAndroidViewView_VIEW_LOG_TAG_;
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, VIEW_LOG_TAG_, NSString *)

FOUNDATION_EXPORT NSString *RepackagedAndroidViewView_DEBUG_LAYOUT_PROPERTY_;
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, DEBUG_LAYOUT_PROPERTY_, NSString *)

FOUNDATION_EXPORT jboolean RepackagedAndroidViewView_mDebugViewAttributes_;
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, mDebugViewAttributes_, jboolean)
J2OBJC_STATIC_FIELD_REF_GETTER(RepackagedAndroidViewView, mDebugViewAttributes_, jboolean)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, NO_ID, jint)

FOUNDATION_EXPORT jboolean RepackagedAndroidViewView_sUseZeroUnspecifiedMeasureSpec_;
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, sUseZeroUnspecifiedMeasureSpec_, jboolean)
J2OBJC_STATIC_FIELD_REF_GETTER(RepackagedAndroidViewView, sUseZeroUnspecifiedMeasureSpec_, jboolean)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, VISIBLE, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, INVISIBLE, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, GONE, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, VISIBILITY_MASK, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, ENABLED, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, DISABLED, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, ENABLED_MASK, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, WILL_NOT_DRAW, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, DRAW_MASK, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, SCROLLBARS_NONE, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, SCROLLBARS_HORIZONTAL, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, SCROLLBARS_VERTICAL, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, SCROLLBARS_MASK, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, FILTER_TOUCHES_WHEN_OBSCURED, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, OPTIONAL_FITS_SYSTEM_WINDOWS, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, FADING_EDGE_NONE, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, FADING_EDGE_HORIZONTAL, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, FADING_EDGE_VERTICAL, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, FADING_EDGE_MASK, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, CLICKABLE, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, DRAWING_CACHE_ENABLED, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, SAVE_DISABLED, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, SAVE_DISABLED_MASK, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, WILL_NOT_CACHE_DRAWING, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, FOCUSABLE_IN_TOUCH_MODE, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, DRAWING_CACHE_QUALITY_LOW, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, DRAWING_CACHE_QUALITY_HIGH, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, DRAWING_CACHE_QUALITY_AUTO, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, DRAWING_CACHE_QUALITY_MASK, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, LONG_CLICKABLE, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, DUPLICATE_PARENT_STATE, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, CONTEXT_CLICKABLE, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, SCROLLBARS_INSIDE_OVERLAY, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, SCROLLBARS_INSIDE_INSET, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, SCROLLBARS_OUTSIDE_OVERLAY, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, SCROLLBARS_OUTSIDE_INSET, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, SCROLLBARS_INSET_MASK, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, SCROLLBARS_OUTSIDE_MASK, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, SCROLLBARS_STYLE_MASK, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, KEEP_SCREEN_ON, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, SOUND_EFFECTS_ENABLED, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, HAPTIC_FEEDBACK_ENABLED, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, PARENT_SAVE_DISABLED, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, PARENT_SAVE_DISABLED_MASK, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, FOCUSABLES_ALL, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, FOCUSABLES_TOUCH_MODE, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, FOCUS_BACKWARD, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, FOCUS_FORWARD, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, FOCUS_LEFT, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, FOCUS_UP, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, FOCUS_RIGHT, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, FOCUS_DOWN, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, MEASURED_SIZE_MASK, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, MEASURED_STATE_MASK, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, MEASURED_HEIGHT_STATE_SHIFT, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, MEASURED_STATE_TOO_SMALL, jint)

FOUNDATION_EXPORT IOSIntArray *RepackagedAndroidViewView_EMPTY_STATE_SET_;
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, EMPTY_STATE_SET_, IOSIntArray *)

FOUNDATION_EXPORT IOSIntArray *RepackagedAndroidViewView_ENABLED_STATE_SET_;
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, ENABLED_STATE_SET_, IOSIntArray *)

FOUNDATION_EXPORT IOSIntArray *RepackagedAndroidViewView_FOCUSED_STATE_SET_;
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, FOCUSED_STATE_SET_, IOSIntArray *)

FOUNDATION_EXPORT IOSIntArray *RepackagedAndroidViewView_SELECTED_STATE_SET_;
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, SELECTED_STATE_SET_, IOSIntArray *)

FOUNDATION_EXPORT IOSIntArray *RepackagedAndroidViewView_PRESSED_STATE_SET_;
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, PRESSED_STATE_SET_, IOSIntArray *)

FOUNDATION_EXPORT IOSIntArray *RepackagedAndroidViewView_WINDOW_FOCUSED_STATE_SET_;
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, WINDOW_FOCUSED_STATE_SET_, IOSIntArray *)

FOUNDATION_EXPORT IOSIntArray *RepackagedAndroidViewView_ENABLED_FOCUSED_STATE_SET_;
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, ENABLED_FOCUSED_STATE_SET_, IOSIntArray *)

FOUNDATION_EXPORT IOSIntArray *RepackagedAndroidViewView_ENABLED_SELECTED_STATE_SET_;
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, ENABLED_SELECTED_STATE_SET_, IOSIntArray *)

FOUNDATION_EXPORT IOSIntArray *RepackagedAndroidViewView_ENABLED_WINDOW_FOCUSED_STATE_SET_;
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, ENABLED_WINDOW_FOCUSED_STATE_SET_, IOSIntArray *)

FOUNDATION_EXPORT IOSIntArray *RepackagedAndroidViewView_FOCUSED_SELECTED_STATE_SET_;
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, FOCUSED_SELECTED_STATE_SET_, IOSIntArray *)

FOUNDATION_EXPORT IOSIntArray *RepackagedAndroidViewView_FOCUSED_WINDOW_FOCUSED_STATE_SET_;
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, FOCUSED_WINDOW_FOCUSED_STATE_SET_, IOSIntArray *)

FOUNDATION_EXPORT IOSIntArray *RepackagedAndroidViewView_SELECTED_WINDOW_FOCUSED_STATE_SET_;
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, SELECTED_WINDOW_FOCUSED_STATE_SET_, IOSIntArray *)

FOUNDATION_EXPORT IOSIntArray *RepackagedAndroidViewView_ENABLED_FOCUSED_SELECTED_STATE_SET_;
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, ENABLED_FOCUSED_SELECTED_STATE_SET_, IOSIntArray *)

FOUNDATION_EXPORT IOSIntArray *RepackagedAndroidViewView_ENABLED_FOCUSED_WINDOW_FOCUSED_STATE_SET_;
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, ENABLED_FOCUSED_WINDOW_FOCUSED_STATE_SET_, IOSIntArray *)

FOUNDATION_EXPORT IOSIntArray *RepackagedAndroidViewView_ENABLED_SELECTED_WINDOW_FOCUSED_STATE_SET_;
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, ENABLED_SELECTED_WINDOW_FOCUSED_STATE_SET_, IOSIntArray *)

FOUNDATION_EXPORT IOSIntArray *RepackagedAndroidViewView_FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET_;
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET_, IOSIntArray *)

FOUNDATION_EXPORT IOSIntArray *RepackagedAndroidViewView_ENABLED_FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET_;
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, ENABLED_FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET_, IOSIntArray *)

FOUNDATION_EXPORT IOSIntArray *RepackagedAndroidViewView_PRESSED_WINDOW_FOCUSED_STATE_SET_;
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, PRESSED_WINDOW_FOCUSED_STATE_SET_, IOSIntArray *)

FOUNDATION_EXPORT IOSIntArray *RepackagedAndroidViewView_PRESSED_SELECTED_STATE_SET_;
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, PRESSED_SELECTED_STATE_SET_, IOSIntArray *)

FOUNDATION_EXPORT IOSIntArray *RepackagedAndroidViewView_PRESSED_SELECTED_WINDOW_FOCUSED_STATE_SET_;
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, PRESSED_SELECTED_WINDOW_FOCUSED_STATE_SET_, IOSIntArray *)

FOUNDATION_EXPORT IOSIntArray *RepackagedAndroidViewView_PRESSED_FOCUSED_STATE_SET_;
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, PRESSED_FOCUSED_STATE_SET_, IOSIntArray *)

FOUNDATION_EXPORT IOSIntArray *RepackagedAndroidViewView_PRESSED_FOCUSED_WINDOW_FOCUSED_STATE_SET_;
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, PRESSED_FOCUSED_WINDOW_FOCUSED_STATE_SET_, IOSIntArray *)

FOUNDATION_EXPORT IOSIntArray *RepackagedAndroidViewView_PRESSED_FOCUSED_SELECTED_STATE_SET_;
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, PRESSED_FOCUSED_SELECTED_STATE_SET_, IOSIntArray *)

FOUNDATION_EXPORT IOSIntArray *RepackagedAndroidViewView_PRESSED_FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET_;
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, PRESSED_FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET_, IOSIntArray *)

FOUNDATION_EXPORT IOSIntArray *RepackagedAndroidViewView_PRESSED_ENABLED_STATE_SET_;
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, PRESSED_ENABLED_STATE_SET_, IOSIntArray *)

FOUNDATION_EXPORT IOSIntArray *RepackagedAndroidViewView_PRESSED_ENABLED_WINDOW_FOCUSED_STATE_SET_;
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, PRESSED_ENABLED_WINDOW_FOCUSED_STATE_SET_, IOSIntArray *)

FOUNDATION_EXPORT IOSIntArray *RepackagedAndroidViewView_PRESSED_ENABLED_SELECTED_STATE_SET_;
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, PRESSED_ENABLED_SELECTED_STATE_SET_, IOSIntArray *)

FOUNDATION_EXPORT IOSIntArray *RepackagedAndroidViewView_PRESSED_ENABLED_SELECTED_WINDOW_FOCUSED_STATE_SET_;
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, PRESSED_ENABLED_SELECTED_WINDOW_FOCUSED_STATE_SET_, IOSIntArray *)

FOUNDATION_EXPORT IOSIntArray *RepackagedAndroidViewView_PRESSED_ENABLED_FOCUSED_STATE_SET_;
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, PRESSED_ENABLED_FOCUSED_STATE_SET_, IOSIntArray *)

FOUNDATION_EXPORT IOSIntArray *RepackagedAndroidViewView_PRESSED_ENABLED_FOCUSED_WINDOW_FOCUSED_STATE_SET_;
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, PRESSED_ENABLED_FOCUSED_WINDOW_FOCUSED_STATE_SET_, IOSIntArray *)

FOUNDATION_EXPORT IOSIntArray *RepackagedAndroidViewView_PRESSED_ENABLED_FOCUSED_SELECTED_STATE_SET_;
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, PRESSED_ENABLED_FOCUSED_SELECTED_STATE_SET_, IOSIntArray *)

FOUNDATION_EXPORT IOSIntArray *RepackagedAndroidViewView_PRESSED_ENABLED_FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET_;
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, PRESSED_ENABLED_FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET_, IOSIntArray *)

FOUNDATION_EXPORT JavaLangThreadLocal *RepackagedAndroidViewView_sThreadLocal_;
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, sThreadLocal_, JavaLangThreadLocal *)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, PFLAG_WANTS_FOCUS, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, PFLAG_FOCUSED, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, PFLAG_SELECTED, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, PFLAG_IS_ROOT_NAMESPACE, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, PFLAG_HAS_BOUNDS, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, PFLAG_DRAWN, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, PFLAG_DRAW_ANIMATION, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, PFLAG_SKIP_DRAW, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, PFLAG_REQUEST_TRANSPARENT_REGIONS, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, PFLAG_DRAWABLE_STATE_DIRTY, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, PFLAG_MEASURED_DIMENSION_SET, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, PFLAG_FORCE_LAYOUT, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, PFLAG_LAYOUT_REQUIRED, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, PFLAG_DRAWING_CACHE_VALID, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, PFLAG_ANIMATION_STARTED, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, PFLAG_ALPHA_SET, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, PFLAG_SCROLL_CONTAINER, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, PFLAG_SCROLL_CONTAINER_ADDED, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, PFLAG_DIRTY, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, PFLAG_DIRTY_OPAQUE, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, PFLAG_DIRTY_MASK, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, PFLAG_OPAQUE_BACKGROUND, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, PFLAG_OPAQUE_SCROLLBARS, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, PFLAG_OPAQUE_MASK, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, PFLAG_CANCEL_NEXT_UP_EVENT, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, PFLAG_ACTIVATED, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, PFLAG_INVALIDATED, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, PFLAG2_DRAG_CAN_ACCEPT, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, PFLAG2_DRAG_HOVERED, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, LAYOUT_DIRECTION_UNDEFINED, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, LAYOUT_DIRECTION_LTR, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, LAYOUT_DIRECTION_RTL, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, LAYOUT_DIRECTION_INHERIT, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, LAYOUT_DIRECTION_LOCALE, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, PFLAG2_LAYOUT_DIRECTION_MASK_SHIFT, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, PFLAG2_LAYOUT_DIRECTION_MASK, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, PFLAG2_LAYOUT_DIRECTION_RESOLVED_RTL, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, PFLAG2_LAYOUT_DIRECTION_RESOLVED, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, PFLAG2_LAYOUT_DIRECTION_RESOLVED_MASK, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, LAYOUT_DIRECTION_RESOLVED_DEFAULT, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, TEXT_DIRECTION_INHERIT, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, TEXT_DIRECTION_FIRST_STRONG, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, TEXT_DIRECTION_ANY_RTL, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, TEXT_DIRECTION_LTR, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, TEXT_DIRECTION_RTL, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, TEXT_DIRECTION_LOCALE, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, TEXT_DIRECTION_FIRST_STRONG_LTR, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, TEXT_DIRECTION_FIRST_STRONG_RTL, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, TEXT_DIRECTION_RESOLVED_DEFAULT, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, PFLAG2_TEXT_DIRECTION_MASK_SHIFT, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, PFLAG2_TEXT_DIRECTION_MASK, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, PFLAG2_TEXT_DIRECTION_RESOLVED, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, PFLAG2_TEXT_DIRECTION_RESOLVED_MASK_SHIFT, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, PFLAG2_TEXT_DIRECTION_RESOLVED_MASK, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, PFLAG2_TEXT_DIRECTION_RESOLVED_DEFAULT, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, TEXT_ALIGNMENT_INHERIT, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, TEXT_ALIGNMENT_GRAVITY, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, TEXT_ALIGNMENT_TEXT_START, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, TEXT_ALIGNMENT_TEXT_END, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, TEXT_ALIGNMENT_CENTER, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, TEXT_ALIGNMENT_VIEW_START, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, TEXT_ALIGNMENT_VIEW_END, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, TEXT_ALIGNMENT_RESOLVED_DEFAULT, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, PFLAG2_TEXT_ALIGNMENT_MASK_SHIFT, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, PFLAG2_TEXT_ALIGNMENT_MASK, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, PFLAG2_TEXT_ALIGNMENT_RESOLVED, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, PFLAG2_TEXT_ALIGNMENT_RESOLVED_MASK_SHIFT, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, PFLAG2_TEXT_ALIGNMENT_RESOLVED_MASK, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, PFLAG2_IMPORTANT_FOR_ACCESSIBILITY_SHIFT, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, IMPORTANT_FOR_ACCESSIBILITY_AUTO, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, IMPORTANT_FOR_ACCESSIBILITY_YES, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, IMPORTANT_FOR_ACCESSIBILITY_NO, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, IMPORTANT_FOR_ACCESSIBILITY_NO_HIDE_DESCENDANTS, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, IMPORTANT_FOR_ACCESSIBILITY_DEFAULT, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, PFLAG2_IMPORTANT_FOR_ACCESSIBILITY_MASK, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, PFLAG2_ACCESSIBILITY_LIVE_REGION_SHIFT, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, ACCESSIBILITY_LIVE_REGION_NONE, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, ACCESSIBILITY_LIVE_REGION_POLITE, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, ACCESSIBILITY_LIVE_REGION_ASSERTIVE, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, ACCESSIBILITY_LIVE_REGION_DEFAULT, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, PFLAG2_ACCESSIBILITY_LIVE_REGION_MASK, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, PFLAG2_ACCESSIBILITY_FOCUSED, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, PFLAG2_SUBTREE_ACCESSIBILITY_STATE_CHANGED, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, PFLAG2_VIEW_QUICK_REJECTED, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, PFLAG2_PADDING_RESOLVED, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, PFLAG2_DRAWABLE_RESOLVED, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, PFLAG2_HAS_TRANSIENT_STATE, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, ALL_RTL_PROPERTIES_RESOLVED, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, PFLAG3_VIEW_IS_ANIMATING_TRANSFORM, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, PFLAG3_VIEW_IS_ANIMATING_ALPHA, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, PFLAG3_IS_LAID_OUT, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, PFLAG3_CALLED_SUPER, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, PFLAG3_APPLYING_INSETS, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, PFLAG3_FITTING_SYSTEM_WINDOWS, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, PFLAG3_NESTED_SCROLLING_ENABLED, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, PFLAG3_SCROLL_INDICATOR_TOP, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, PFLAG3_SCROLL_INDICATOR_BOTTOM, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, PFLAG3_SCROLL_INDICATOR_LEFT, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, PFLAG3_SCROLL_INDICATOR_RIGHT, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, PFLAG3_SCROLL_INDICATOR_START, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, PFLAG3_SCROLL_INDICATOR_END, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, DRAG_MASK, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, SCROLL_INDICATORS_NONE, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, SCROLL_INDICATORS_PFLAG3_MASK, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, SCROLL_INDICATORS_TO_PFLAGS3_LSHIFT, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, SCROLL_INDICATOR_TOP, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, SCROLL_INDICATOR_BOTTOM, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, SCROLL_INDICATOR_LEFT, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, SCROLL_INDICATOR_RIGHT, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, SCROLL_INDICATOR_START, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, SCROLL_INDICATOR_END, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, PFLAG3_ASSIST_BLOCKED, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, OVER_SCROLL_ALWAYS, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, OVER_SCROLL_IF_CONTENT_SCROLLS, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, OVER_SCROLL_NEVER, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, SYSTEM_UI_FLAG_VISIBLE, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, SYSTEM_UI_FLAG_LOW_PROFILE, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, SYSTEM_UI_FLAG_HIDE_NAVIGATION, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, SYSTEM_UI_FLAG_FULLSCREEN, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, SYSTEM_UI_FLAG_LAYOUT_STABLE, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, SYSTEM_UI_FLAG_IMMERSIVE, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, SYSTEM_UI_FLAG_IMMERSIVE_STICKY, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, SYSTEM_UI_FLAG_LIGHT_STATUS_BAR, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, STATUS_BAR_HIDDEN, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, STATUS_BAR_VISIBLE, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, STATUS_BAR_DISABLE_EXPAND, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, STATUS_BAR_DISABLE_NOTIFICATION_ICONS, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, STATUS_BAR_DISABLE_NOTIFICATION_ALERTS, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, STATUS_BAR_DISABLE_NOTIFICATION_TICKER, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, STATUS_BAR_DISABLE_SYSTEM_INFO, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, STATUS_BAR_DISABLE_HOME, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, STATUS_BAR_DISABLE_BACK, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, STATUS_BAR_DISABLE_CLOCK, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, STATUS_BAR_DISABLE_RECENT, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, STATUS_BAR_DISABLE_SEARCH, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, STATUS_BAR_TRANSIENT, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, NAVIGATION_BAR_TRANSIENT, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, STATUS_BAR_UNHIDE, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, NAVIGATION_BAR_UNHIDE, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, STATUS_BAR_TRANSLUCENT, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, NAVIGATION_BAR_TRANSLUCENT, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, RECENT_APPS_VISIBLE, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, SYSTEM_UI_TRANSPARENT, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, PUBLIC_STATUS_BAR_VISIBILITY_MASK, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, SYSTEM_UI_CLEARABLE_FLAGS, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, SYSTEM_UI_LAYOUT_FLAGS, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, FIND_VIEWS_WITH_TEXT, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, FIND_VIEWS_WITH_CONTENT_DESCRIPTION, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, FIND_VIEWS_WITH_ACCESSIBILITY_NODE_PROVIDERS, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, ACCESSIBILITY_CURSOR_POSITION_UNDEFINED, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, SCREEN_STATE_OFF, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, SCREEN_STATE_ON, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, SCROLL_AXIS_NONE, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, SCROLL_AXIS_HORIZONTAL, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, SCROLL_AXIS_VERTICAL, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, DRAG_FLAG_GLOBAL, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, SCROLLBAR_POSITION_DEFAULT, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, SCROLLBAR_POSITION_LEFT, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, SCROLLBAR_POSITION_RIGHT, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, LAYER_TYPE_NONE, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, LAYER_TYPE_SOFTWARE, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, LAYER_TYPE_HARDWARE, jint)

FOUNDATION_EXPORT RepackagedAndroidUtilProperty *RepackagedAndroidViewView_ALPHA_;
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, ALPHA_, RepackagedAndroidUtilProperty *)

FOUNDATION_EXPORT RepackagedAndroidUtilProperty *RepackagedAndroidViewView_TRANSLATION_X_;
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, TRANSLATION_X_, RepackagedAndroidUtilProperty *)

FOUNDATION_EXPORT RepackagedAndroidUtilProperty *RepackagedAndroidViewView_TRANSLATION_Y_;
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, TRANSLATION_Y_, RepackagedAndroidUtilProperty *)

FOUNDATION_EXPORT RepackagedAndroidUtilProperty *RepackagedAndroidViewView_TRANSLATION_Z_;
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, TRANSLATION_Z_, RepackagedAndroidUtilProperty *)

FOUNDATION_EXPORT RepackagedAndroidUtilProperty *RepackagedAndroidViewView_X_;
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, X_, RepackagedAndroidUtilProperty *)

FOUNDATION_EXPORT RepackagedAndroidUtilProperty *RepackagedAndroidViewView_Y_;
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, Y_, RepackagedAndroidUtilProperty *)

FOUNDATION_EXPORT RepackagedAndroidUtilProperty *RepackagedAndroidViewView_Z_;
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, Z_, RepackagedAndroidUtilProperty *)

FOUNDATION_EXPORT RepackagedAndroidUtilProperty *RepackagedAndroidViewView_ROTATION_;
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, ROTATION_, RepackagedAndroidUtilProperty *)

FOUNDATION_EXPORT RepackagedAndroidUtilProperty *RepackagedAndroidViewView_ROTATION_X_;
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, ROTATION_X_, RepackagedAndroidUtilProperty *)

FOUNDATION_EXPORT RepackagedAndroidUtilProperty *RepackagedAndroidViewView_ROTATION_Y_;
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, ROTATION_Y_, RepackagedAndroidUtilProperty *)

FOUNDATION_EXPORT RepackagedAndroidUtilProperty *RepackagedAndroidViewView_SCALE_X_;
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, SCALE_X_, RepackagedAndroidUtilProperty *)

FOUNDATION_EXPORT RepackagedAndroidUtilProperty *RepackagedAndroidViewView_SCALE_Y_;
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView, SCALE_Y_, RepackagedAndroidUtilProperty *)

FOUNDATION_EXPORT void RepackagedAndroidViewView_initWithRepackagedAndroidContentContext_(RepackagedAndroidViewView *self, id<RepackagedAndroidContentContext> context);

FOUNDATION_EXPORT RepackagedAndroidViewView *new_RepackagedAndroidViewView_initWithRepackagedAndroidContentContext_(id<RepackagedAndroidContentContext> context) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void RepackagedAndroidViewView_initWithRepackagedAndroidContentContext_withRepackagedAndroidUtilAttributeSet_(RepackagedAndroidViewView *self, id<RepackagedAndroidContentContext> context, id<RepackagedAndroidUtilAttributeSet> attrs);

FOUNDATION_EXPORT RepackagedAndroidViewView *new_RepackagedAndroidViewView_initWithRepackagedAndroidContentContext_withRepackagedAndroidUtilAttributeSet_(id<RepackagedAndroidContentContext> context, id<RepackagedAndroidUtilAttributeSet> attrs) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void RepackagedAndroidViewView_initWithRepackagedAndroidContentContext_withRepackagedAndroidUtilAttributeSet_withInt_(RepackagedAndroidViewView *self, id<RepackagedAndroidContentContext> context, id<RepackagedAndroidUtilAttributeSet> attrs, jint defStyleAttr);

FOUNDATION_EXPORT RepackagedAndroidViewView *new_RepackagedAndroidViewView_initWithRepackagedAndroidContentContext_withRepackagedAndroidUtilAttributeSet_withInt_(id<RepackagedAndroidContentContext> context, id<RepackagedAndroidUtilAttributeSet> attrs, jint defStyleAttr) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void RepackagedAndroidViewView_initWithRepackagedAndroidContentContext_withRepackagedAndroidUtilAttributeSet_withInt_withInt_(RepackagedAndroidViewView *self, id<RepackagedAndroidContentContext> context, id<RepackagedAndroidUtilAttributeSet> attrs, jint defStyleAttr, jint defStyleRes);

FOUNDATION_EXPORT RepackagedAndroidViewView *new_RepackagedAndroidViewView_initWithRepackagedAndroidContentContext_withRepackagedAndroidUtilAttributeSet_withInt_withInt_(id<RepackagedAndroidContentContext> context, id<RepackagedAndroidUtilAttributeSet> attrs, jint defStyleAttr, jint defStyleRes) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void RepackagedAndroidViewView_init(RepackagedAndroidViewView *self);

FOUNDATION_EXPORT RepackagedAndroidViewView *new_RepackagedAndroidViewView_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT jboolean RepackagedAndroidViewView_isLayoutModeOpticalWithId_(id o);

FOUNDATION_EXPORT IOSIntArray *RepackagedAndroidViewView_mergeDrawableStatesWithIntArray_withIntArray_(IOSIntArray *baseState, IOSIntArray *additionalState);

FOUNDATION_EXPORT NSString *RepackagedAndroidViewView_debugIndentWithInt_(jint depth);

FOUNDATION_EXPORT jint RepackagedAndroidViewView_combineMeasuredStatesWithInt_withInt_(jint curState, jint newState);

FOUNDATION_EXPORT jint RepackagedAndroidViewView_resolveSizeWithInt_withInt_(jint size, jint measureSpec);

FOUNDATION_EXPORT jint RepackagedAndroidViewView_resolveSizeAndStateWithInt_withInt_withInt_(jint size, jint measureSpec, jint childMeasuredState);

FOUNDATION_EXPORT jint RepackagedAndroidViewView_getDefaultSizeWithInt_withInt_(jint size, jint measureSpec);

FOUNDATION_EXPORT RepackagedAndroidViewView *RepackagedAndroidViewView_inflateWithRepackagedAndroidContentContext_withInt_withRepackagedAndroidViewViewGroup_(id<RepackagedAndroidContentContext> context, jint resource, RepackagedAndroidViewViewGroup *root);

FOUNDATION_EXPORT jint RepackagedAndroidViewView_generateViewId();

J2OBJC_TYPE_LITERAL_HEADER(RepackagedAndroidViewView)

/**
 */
@protocol RepackagedAndroidViewView_Visibility < JavaLangAnnotationAnnotation >

@end

J2OBJC_EMPTY_STATIC_INIT(RepackagedAndroidViewView_Visibility)

J2OBJC_TYPE_LITERAL_HEADER(RepackagedAndroidViewView_Visibility)

/**
 */
@protocol RepackagedAndroidViewView_DrawingCacheQuality < JavaLangAnnotationAnnotation >

@end

J2OBJC_EMPTY_STATIC_INIT(RepackagedAndroidViewView_DrawingCacheQuality)

J2OBJC_TYPE_LITERAL_HEADER(RepackagedAndroidViewView_DrawingCacheQuality)

/**
 */
@protocol RepackagedAndroidViewView_ScrollBarStyle < JavaLangAnnotationAnnotation >

@end

J2OBJC_EMPTY_STATIC_INIT(RepackagedAndroidViewView_ScrollBarStyle)

J2OBJC_TYPE_LITERAL_HEADER(RepackagedAndroidViewView_ScrollBarStyle)

/**
 */
@protocol RepackagedAndroidViewView_FocusableMode < JavaLangAnnotationAnnotation >

@end

J2OBJC_EMPTY_STATIC_INIT(RepackagedAndroidViewView_FocusableMode)

J2OBJC_TYPE_LITERAL_HEADER(RepackagedAndroidViewView_FocusableMode)

/**
 */
@protocol RepackagedAndroidViewView_FocusDirection < JavaLangAnnotationAnnotation >

@end

J2OBJC_EMPTY_STATIC_INIT(RepackagedAndroidViewView_FocusDirection)

J2OBJC_TYPE_LITERAL_HEADER(RepackagedAndroidViewView_FocusDirection)

/**
 */
@protocol RepackagedAndroidViewView_FocusRealDirection < JavaLangAnnotationAnnotation >

@end

J2OBJC_EMPTY_STATIC_INIT(RepackagedAndroidViewView_FocusRealDirection)

J2OBJC_TYPE_LITERAL_HEADER(RepackagedAndroidViewView_FocusRealDirection)

/**
 */
@protocol RepackagedAndroidViewView_LayoutDir < JavaLangAnnotationAnnotation >

@end

J2OBJC_EMPTY_STATIC_INIT(RepackagedAndroidViewView_LayoutDir)

J2OBJC_TYPE_LITERAL_HEADER(RepackagedAndroidViewView_LayoutDir)

/**
 */
@protocol RepackagedAndroidViewView_ResolvedLayoutDir < JavaLangAnnotationAnnotation >

@end

J2OBJC_EMPTY_STATIC_INIT(RepackagedAndroidViewView_ResolvedLayoutDir)

J2OBJC_TYPE_LITERAL_HEADER(RepackagedAndroidViewView_ResolvedLayoutDir)

/**
 */
@protocol RepackagedAndroidViewView_TextAlignment < JavaLangAnnotationAnnotation >

@end

J2OBJC_EMPTY_STATIC_INIT(RepackagedAndroidViewView_TextAlignment)

J2OBJC_TYPE_LITERAL_HEADER(RepackagedAndroidViewView_TextAlignment)

/**
 */
@protocol RepackagedAndroidViewView_ScrollIndicators < JavaLangAnnotationAnnotation >

@end

J2OBJC_EMPTY_STATIC_INIT(RepackagedAndroidViewView_ScrollIndicators)

J2OBJC_TYPE_LITERAL_HEADER(RepackagedAndroidViewView_ScrollIndicators)

/**
 */
@protocol RepackagedAndroidViewView_FindViewFlags < JavaLangAnnotationAnnotation >

@end

J2OBJC_EMPTY_STATIC_INIT(RepackagedAndroidViewView_FindViewFlags)

J2OBJC_TYPE_LITERAL_HEADER(RepackagedAndroidViewView_FindViewFlags)

@interface RepackagedAndroidViewView_TransformationInfo : NSObject {
 @public
  /**
   @brief The opacity of the View.
   This is a value from 0 to 1, where 0 means completely transparent and 1 means completely opaque.
   */
  jfloat mAlpha_;
  /**
   @brief The opacity of the view as manipulated by the Fade transition.
   This is a hidden property only used by transitions, which is composited with the other alpha values to calculate the final visual alpha value.
   */
  jfloat mTransitionAlpha_;
}

#pragma mark Package-Private

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RepackagedAndroidViewView_TransformationInfo)

FOUNDATION_EXPORT void RepackagedAndroidViewView_TransformationInfo_init(RepackagedAndroidViewView_TransformationInfo *self);

FOUNDATION_EXPORT RepackagedAndroidViewView_TransformationInfo *new_RepackagedAndroidViewView_TransformationInfo_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(RepackagedAndroidViewView_TransformationInfo)

@interface RepackagedAndroidViewView_TintInfo : NSObject {
 @public
  id<RepackagedAndroidContentResColorStateList> mTintList_;
  RepackagedAndroidGraphicsPorterDuff_ModeEnum *mTintMode_;
  jboolean mHasTintMode_;
  jboolean mHasTintList_;
}

#pragma mark Package-Private

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RepackagedAndroidViewView_TintInfo)

J2OBJC_FIELD_SETTER(RepackagedAndroidViewView_TintInfo, mTintList_, id<RepackagedAndroidContentResColorStateList>)
J2OBJC_FIELD_SETTER(RepackagedAndroidViewView_TintInfo, mTintMode_, RepackagedAndroidGraphicsPorterDuff_ModeEnum *)

FOUNDATION_EXPORT void RepackagedAndroidViewView_TintInfo_init(RepackagedAndroidViewView_TintInfo *self);

FOUNDATION_EXPORT RepackagedAndroidViewView_TintInfo *new_RepackagedAndroidViewView_TintInfo_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(RepackagedAndroidViewView_TintInfo)

@interface RepackagedAndroidViewView_ListenerInfo : NSObject {
 @public
  /**
   @brief Listener used to dispatch focus change events.
   This field should be made private, so it is hidden from the SDK.
   */
  id<RepackagedAndroidViewView_OnFocusChangeListener> mOnFocusChangeListener_;
  id<RepackagedAndroidViewView_OnScrollChangeListener> mOnScrollChangeListener_;
  /**
   @brief Listener used to dispatch click events.
   This field should be made private, so it is hidden from the SDK.
   */
  id<RepackagedAndroidViewView_OnClickListener> mOnClickListener_;
  /**
   @brief Listener used to dispatch long click events.
   This field should be made private, so it is hidden from the SDK.
   */
  id<RepackagedAndroidViewView_OnLongClickListener> mOnLongClickListener_;
  /**
   @brief Listener used to dispatch context click events.
   This field should be made private, so it is hidden from the SDK.
   */
  id<RepackagedAndroidViewView_OnContextClickListener> mOnContextClickListener_;
  /**
   @brief Listener used to build the context menu.
   This field should be made private, so it is hidden from the SDK.
   */
  id<RepackagedAndroidViewView_OnCreateContextMenuListener> mOnCreateContextMenuListener_;
  id<RepackagedAndroidViewView_OnApplyWindowInsetsListener> mOnApplyWindowInsetsListener_;
}

#pragma mark Package-Private

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RepackagedAndroidViewView_ListenerInfo)

J2OBJC_FIELD_SETTER(RepackagedAndroidViewView_ListenerInfo, mOnFocusChangeListener_, id<RepackagedAndroidViewView_OnFocusChangeListener>)
J2OBJC_FIELD_SETTER(RepackagedAndroidViewView_ListenerInfo, mOnScrollChangeListener_, id<RepackagedAndroidViewView_OnScrollChangeListener>)
J2OBJC_FIELD_SETTER(RepackagedAndroidViewView_ListenerInfo, mOnClickListener_, id<RepackagedAndroidViewView_OnClickListener>)
J2OBJC_FIELD_SETTER(RepackagedAndroidViewView_ListenerInfo, mOnLongClickListener_, id<RepackagedAndroidViewView_OnLongClickListener>)
J2OBJC_FIELD_SETTER(RepackagedAndroidViewView_ListenerInfo, mOnContextClickListener_, id<RepackagedAndroidViewView_OnContextClickListener>)
J2OBJC_FIELD_SETTER(RepackagedAndroidViewView_ListenerInfo, mOnCreateContextMenuListener_, id<RepackagedAndroidViewView_OnCreateContextMenuListener>)
J2OBJC_FIELD_SETTER(RepackagedAndroidViewView_ListenerInfo, mOnApplyWindowInsetsListener_, id<RepackagedAndroidViewView_OnApplyWindowInsetsListener>)

FOUNDATION_EXPORT void RepackagedAndroidViewView_ListenerInfo_init(RepackagedAndroidViewView_ListenerInfo *self);

FOUNDATION_EXPORT RepackagedAndroidViewView_ListenerInfo *new_RepackagedAndroidViewView_ListenerInfo_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(RepackagedAndroidViewView_ListenerInfo)

/**
 @brief Interface definition for a callback to be invoked when a view is clicked.
 */
@protocol RepackagedAndroidViewView_OnClickListener < NSObject, JavaObject >

/**
 @brief Called when a view has been clicked.
 @param v The view that was clicked.
 */
- (void)onClickWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)v;

@end

J2OBJC_EMPTY_STATIC_INIT(RepackagedAndroidViewView_OnClickListener)

J2OBJC_TYPE_LITERAL_HEADER(RepackagedAndroidViewView_OnClickListener)

/**
 @brief Interface definition for a callback to be invoked when the scroll X or Y positions of a view change.
 <p> <b>Note:</b> Some views handle scrolling independently from View and may have their own separate listeners for scroll-type events. For example, android.widget.ListView ListView allows clients to register an android.widget.ListView#setOnScrollListener(android.widget.AbsListView.OnScrollListener) AbsListView.OnScrollListener to listen for changes in list scroll position.
 */
@protocol RepackagedAndroidViewView_OnScrollChangeListener < NSObject, JavaObject >

/**
 @brief Called when the scroll position of a view changes.
 @param v The view whose scroll position has changed.
 @param scrollX Current horizontal scroll origin.
 @param scrollY Current vertical scroll origin.
 @param oldScrollX Previous horizontal scroll origin.
 @param oldScrollY Previous vertical scroll origin.
 */
- (void)onScrollChangeWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)v
                                            withInt:(jint)scrollX
                                            withInt:(jint)scrollY
                                            withInt:(jint)oldScrollX
                                            withInt:(jint)oldScrollY;

@end

J2OBJC_EMPTY_STATIC_INIT(RepackagedAndroidViewView_OnScrollChangeListener)

J2OBJC_TYPE_LITERAL_HEADER(RepackagedAndroidViewView_OnScrollChangeListener)

/**
 @brief Interface definition for a callback to be invoked when the layout bounds of a view changes due to layout processing.
 */
@protocol RepackagedAndroidViewView_OnLayoutChangeListener < NSObject, JavaObject >

/**
 @brief Called when the layout bounds of a view changes due to layout processing.
 @param v The view whose bounds have changed.
 @param left The new value of the view's left property.
 @param top The new value of the view's top property.
 @param right The new value of the view's right property.
 @param bottom The new value of the view's bottom property.
 @param oldLeft The previous value of the view's left property.
 @param oldTop The previous value of the view's top property.
 @param oldRight The previous value of the view's right property.
 @param oldBottom The previous value of the view's bottom property.
 */
- (void)onLayoutChangeWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)v
                                            withInt:(jint)left
                                            withInt:(jint)top
                                            withInt:(jint)right
                                            withInt:(jint)bottom
                                            withInt:(jint)oldLeft
                                            withInt:(jint)oldTop
                                            withInt:(jint)oldRight
                                            withInt:(jint)oldBottom;

@end

J2OBJC_EMPTY_STATIC_INIT(RepackagedAndroidViewView_OnLayoutChangeListener)

J2OBJC_TYPE_LITERAL_HEADER(RepackagedAndroidViewView_OnLayoutChangeListener)

/**
 @brief Creates an image that the system displays during the drag and drop operation.
 This is called a &quot;drag shadow&quot;. The default implementation for a DragShadowBuilder based on a View returns an image that has exactly the same appearance as the given View. The default also positions the center of the drag shadow directly under the touch point. If no View is provided (the constructor with no parameters is used), and #onProvideShadowMetrics(Point,Point) onProvideShadowMetrics() and #onDrawShadow(Canvas) onDrawShadow() are not overridden, then the default is an invisible drag shadow. <p> You are not required to use the View you provide to the constructor as the basis of the drag shadow. The #onDrawShadow(Canvas) onDrawShadow() method allows you to draw anything you want as the drag shadow. </p> <p> You pass a DragShadowBuilder object to the system when you start the drag. The system calls #onProvideShadowMetrics(Point,Point) onProvideShadowMetrics() to get the size and position of the drag shadow. It uses this data to construct a repackaged.android.graphics.Canvas object, then it calls #onDrawShadow(Canvas) onDrawShadow() so that your application can draw the shadow image in the Canvas. </p> <div class="special reference"> <h3>Developer Guides</h3> <p>For a guide to implementing drag and drop features, read the <a href="  guide/topics/ui/drag-drop.html">Drag and Drop</a> developer guide.</p> </div>
 */
@interface RepackagedAndroidViewView_DragShadowBuilder : NSObject

#pragma mark Public

/**
 @brief Construct a shadow builder object with no associated View.
 This constructor variant is only useful when the #onProvideShadowMetrics(Point,Point) and #onDrawShadow(Canvas) methods are also overridden in order to supply the drag shadow's dimensions and appearance without reference to any View object. If they are not overridden, then the result is an invisible drag shadow.
 */
- (instancetype)init;

/**
 @brief Constructs a shadow image builder based on a View.
 By default, the resulting drag shadow will have the same appearance and dimensions as the View, with the touch point over the center of the View.
 @param view A View. Any View in scope can be used.
 */
- (instancetype)initWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)view;

/**
 @brief Returns the View object that had been passed to the #DragShadowBuilder(View) constructor.
 If that View parameter was <code>null</code> or if the #DragShadowBuilder() constructor was used to instantiate the builder object, this method will return null.
 @return The View object associate with this builder object.
 */
- (RepackagedAndroidViewView *)getView;

/**
 @brief Draws the shadow image.
 The system creates the repackaged.android.graphics.Canvas object based on the dimensions it received from the #onProvideShadowMetrics(Point,Point) callback.
 @param canvas A repackaged.android.graphics.Canvas object in which to draw the shadow image.
 */
- (void)onDrawShadowWithRepackagedAndroidGraphicsCanvas:(RepackagedAndroidGraphicsCanvas *)canvas;

/**
 @brief Provides the metrics for the shadow image.
 These include the dimensions of the shadow image, and the point within that shadow that should be centered under the touch location while dragging. <p> The default implementation sets the dimensions of the shadow to be the same as the dimensions of the View itself and centers the shadow under the touch point. </p>
 @param shadowSize A repackaged.android.graphics.Point containing the width and height of the shadow image. Your application must set repackaged.android.graphics.Point#x to the desired width and must set repackaged.android.graphics.Point#y to the desired height of the image.
 @param shadowTouchPoint A repackaged.android.graphics.Point for the position within the shadow image that should be underneath the touch point during the drag and drop operation. Your application must set repackaged.android.graphics.Point#x to the X coordinate and repackaged.android.graphics.Point#y to the Y coordinate of this position.
 */
- (void)onProvideShadowMetricsWithRepackagedAndroidGraphicsPoint:(RepackagedAndroidGraphicsPoint *)shadowSize
                              withRepackagedAndroidGraphicsPoint:(RepackagedAndroidGraphicsPoint *)shadowTouchPoint;

@end

J2OBJC_EMPTY_STATIC_INIT(RepackagedAndroidViewView_DragShadowBuilder)

FOUNDATION_EXPORT void RepackagedAndroidViewView_DragShadowBuilder_initWithRepackagedAndroidViewView_(RepackagedAndroidViewView_DragShadowBuilder *self, RepackagedAndroidViewView *view);

FOUNDATION_EXPORT RepackagedAndroidViewView_DragShadowBuilder *new_RepackagedAndroidViewView_DragShadowBuilder_initWithRepackagedAndroidViewView_(RepackagedAndroidViewView *view) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void RepackagedAndroidViewView_DragShadowBuilder_init(RepackagedAndroidViewView_DragShadowBuilder *self);

FOUNDATION_EXPORT RepackagedAndroidViewView_DragShadowBuilder *new_RepackagedAndroidViewView_DragShadowBuilder_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(RepackagedAndroidViewView_DragShadowBuilder)

#define RepackagedAndroidViewView_MeasureSpec_UNSPECIFIED 0
#define RepackagedAndroidViewView_MeasureSpec_EXACTLY 1073741824
#define RepackagedAndroidViewView_MeasureSpec_AT_MOST ((jint) 0x80000000)

/**
 @brief A MeasureSpec encapsulates the layout requirements passed from parent to child.
 Each MeasureSpec represents a requirement for either the width or the height. A MeasureSpec is comprised of a size and a mode. There are three possible modes: <dl> <dt>UNSPECIFIED</dt> <dd> The parent has not imposed any constraint on the child. It can be whatever size it wants. </dd> <dt>EXACTLY</dt> <dd> The parent has determined an exact size for the child. The child is going to be given those bounds regardless of how big it wants to be. </dd> <dt>AT_MOST</dt> <dd> The child can be as large as it wants up to the specified size. </dd> </dl> MeasureSpecs are implemented as ints to reduce object allocation. This class is provided to pack and unpack the &lt;size, mode&gt; tuple into the int.
 */
@interface RepackagedAndroidViewView_MeasureSpec : NSObject

#pragma mark Public

- (instancetype)init;

/**
 @brief Extracts the mode from the supplied measure specification.
 @param measureSpec the measure specification to extract the mode from
 @return repackaged.android.view.View.MeasureSpec#UNSPECIFIED , repackaged.android.view.View.MeasureSpec#AT_MOST or repackaged.android.view.View.MeasureSpec#EXACTLY
 */
+ (jint)getModeWithInt:(jint)measureSpec;

/**
 @brief Extracts the size from the supplied measure specification.
 @param measureSpec the measure specification to extract the size from
 @return the size in pixels defined in the supplied measure specification
 */
+ (jint)getSizeWithInt:(jint)measureSpec;

/**
 @brief Creates a measure specification based on the supplied size and mode.
 The mode must always be one of the following: <ul> <li> repackaged.android.view.View.MeasureSpec#UNSPECIFIED </li> <li> repackaged.android.view.View.MeasureSpec#EXACTLY </li> <li> repackaged.android.view.View.MeasureSpec#AT_MOST </li> </ul> <p><strong>Note:</strong> On API level 17 and lower, makeMeasureSpec's implementation was such that the order of arguments did not matter and overflow in either value could impact the resulting MeasureSpec. repackaged.android.widget.RelativeLayout was affected by this bug. Apps targeting API levels greater than 17 will get the fixed, more strict behavior.</p>
 @param size the size of the measure specification
 @param mode the mode of the measure specification
 @return the measure specification based on size and mode
 */
+ (jint)makeMeasureSpecWithInt:(jint)size
                       withInt:(jint)mode;

/**
 @brief Like #makeMeasureSpec(int,int) , but any spec with a mode of UNSPECIFIED will automatically get a size of 0.
 Older apps expect this.
 internal use only for compatibility with system widgets and older apps
 */
+ (jint)makeSafeMeasureSpecWithInt:(jint)size
                           withInt:(jint)mode;

/**
 @brief Returns a String representation of the specified measure specification.
 @param measureSpec the measure specification to convert to a String
 @return a String with the following format: "MeasureSpec: MODE SIZE"
 */
+ (NSString *)toStringWithInt:(jint)measureSpec;

#pragma mark Package-Private

+ (jint)adjustWithInt:(jint)measureSpec
              withInt:(jint)delta;

@end

J2OBJC_EMPTY_STATIC_INIT(RepackagedAndroidViewView_MeasureSpec)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView_MeasureSpec, UNSPECIFIED, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView_MeasureSpec, EXACTLY, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView_MeasureSpec, AT_MOST, jint)

FOUNDATION_EXPORT jint RepackagedAndroidViewView_MeasureSpec_makeMeasureSpecWithInt_withInt_(jint size, jint mode);

FOUNDATION_EXPORT jint RepackagedAndroidViewView_MeasureSpec_makeSafeMeasureSpecWithInt_withInt_(jint size, jint mode);

FOUNDATION_EXPORT jint RepackagedAndroidViewView_MeasureSpec_getModeWithInt_(jint measureSpec);

FOUNDATION_EXPORT jint RepackagedAndroidViewView_MeasureSpec_getSizeWithInt_(jint measureSpec);

FOUNDATION_EXPORT jint RepackagedAndroidViewView_MeasureSpec_adjustWithInt_withInt_(jint measureSpec, jint delta);

FOUNDATION_EXPORT NSString *RepackagedAndroidViewView_MeasureSpec_toStringWithInt_(jint measureSpec);

FOUNDATION_EXPORT void RepackagedAndroidViewView_MeasureSpec_init(RepackagedAndroidViewView_MeasureSpec *self);

FOUNDATION_EXPORT RepackagedAndroidViewView_MeasureSpec *new_RepackagedAndroidViewView_MeasureSpec_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(RepackagedAndroidViewView_MeasureSpec)

/**
 @brief Interface definition for a callback to be invoked when a hardware key event is dispatched to this view.
 The callback will be invoked before the key event is given to the view. This is only useful for hardware keyboards; a software input method has no obligation to trigger this listener.
 */
@protocol RepackagedAndroidViewView_OnKeyListener < NSObject, JavaObject >

/**
 @brief Called when a hardware key is dispatched to a view.
 This allows listeners to get a chance to respond before the target view. <p>Key presses in software keyboards will generally NOT trigger this method, although some may elect to do so in some situations. Do not assume a software input method has to be key-based; even if it is, it may use key presses in a different way than you expect, so there is no way to reliably catch soft input key presses.
 @param v The view the key has been dispatched to.
 @param keyCode The code for the physical key that was pressed
 @param event The KeyEvent object containing full information about the event.
 @return True if the listener has consumed the event, false otherwise.
 */
- (jboolean)onKeyWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)v
                                       withInt:(jint)keyCode
             withRepackagedAndroidViewKeyEvent:(RepackagedAndroidViewKeyEvent *)event;

@end

J2OBJC_EMPTY_STATIC_INIT(RepackagedAndroidViewView_OnKeyListener)

J2OBJC_TYPE_LITERAL_HEADER(RepackagedAndroidViewView_OnKeyListener)

/**
 @brief Interface definition for a callback to be invoked when a touch event is dispatched to this view.
 The callback will be invoked before the touch event is given to the view.
 */
@protocol RepackagedAndroidViewView_OnTouchListener < NSObject, JavaObject >

/**
 @brief Called when a touch event is dispatched to a view.
 This allows listeners to get a chance to respond before the target view.
 @param v The view the touch event has been dispatched to.
 @param event The MotionEvent object containing full information about the event.
 @return True if the listener has consumed the event, false otherwise.
 */
- (jboolean)onTouchWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)v
            withRepackagedAndroidViewMotionEvent:(RepackagedAndroidViewMotionEvent *)event;

@end

J2OBJC_EMPTY_STATIC_INIT(RepackagedAndroidViewView_OnTouchListener)

J2OBJC_TYPE_LITERAL_HEADER(RepackagedAndroidViewView_OnTouchListener)

/**
 @brief Interface definition for a callback to be invoked when a hover event is dispatched to this view.
 The callback will be invoked before the hover event is given to the view.
 */
@protocol RepackagedAndroidViewView_OnHoverListener < NSObject, JavaObject >

/**
 @brief Called when a hover event is dispatched to a view.
 This allows listeners to get a chance to respond before the target view.
 @param v The view the hover event has been dispatched to.
 @param event The MotionEvent object containing full information about the event.
 @return True if the listener has consumed the event, false otherwise.
 */
- (jboolean)onHoverWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)v
            withRepackagedAndroidViewMotionEvent:(RepackagedAndroidViewMotionEvent *)event;

@end

J2OBJC_EMPTY_STATIC_INIT(RepackagedAndroidViewView_OnHoverListener)

J2OBJC_TYPE_LITERAL_HEADER(RepackagedAndroidViewView_OnHoverListener)

/**
 @brief Interface definition for a callback to be invoked when a generic motion event is dispatched to this view.
 The callback will be invoked before the generic motion event is given to the view.
 */
@protocol RepackagedAndroidViewView_OnGenericMotionListener < NSObject, JavaObject >

/**
 @brief Called when a generic motion event is dispatched to a view.
 This allows listeners to get a chance to respond before the target view.
 @param v The view the generic motion event has been dispatched to.
 @param event The MotionEvent object containing full information about the event.
 @return True if the listener has consumed the event, false otherwise.
 */
- (jboolean)onGenericMotionWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)v
                    withRepackagedAndroidViewMotionEvent:(RepackagedAndroidViewMotionEvent *)event;

@end

J2OBJC_EMPTY_STATIC_INIT(RepackagedAndroidViewView_OnGenericMotionListener)

J2OBJC_TYPE_LITERAL_HEADER(RepackagedAndroidViewView_OnGenericMotionListener)

/**
 @brief Interface definition for a callback to be invoked when a view has been clicked and held.
 */
@protocol RepackagedAndroidViewView_OnLongClickListener < NSObject, JavaObject >

/**
 @brief Called when a view has been clicked and held.
 @param v The view that was clicked and held.
 @return true if the callback consumed the long click, false otherwise.
 */
- (jboolean)onLongClickWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)v;

@end

J2OBJC_EMPTY_STATIC_INIT(RepackagedAndroidViewView_OnLongClickListener)

J2OBJC_TYPE_LITERAL_HEADER(RepackagedAndroidViewView_OnLongClickListener)

/**
 @brief Interface definition for a callback to be invoked when a drag is being dispatched to this view.
 The callback will be invoked before the hosting view's own onDrag(event) method.  If the listener wants to fall back to the hosting view's onDrag(event) behavior, it should return 'false' from this callback. <div class="special reference"> <h3>Developer Guides</h3> <p>For a guide to implementing drag and drop features, read the <a href="  guide/topics/ui/drag-drop.html">Drag and Drop</a> developer guide.</p> </div>
 */
@protocol RepackagedAndroidViewView_OnDragListener < NSObject, JavaObject >

/**
 @brief Called when a drag event is dispatched to a view.
 This allows listeners to get a chance to override base View behavior.
 @param v The View that received the drag event.
 @param event The repackaged.android.view.DragEvent object for the drag event.
 @return <code>true</code> if the drag event was handled successfully, or <code>false</code> if the drag event was not handled. Note that <code>false</code> will trigger the View to call its #onDragEvent(DragEvent) onDragEvent() handler.
 */
- (jboolean)onDragWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)v
             withRepackagedAndroidViewDragEvent:(RepackagedAndroidViewDragEvent *)event;

@end

J2OBJC_EMPTY_STATIC_INIT(RepackagedAndroidViewView_OnDragListener)

J2OBJC_TYPE_LITERAL_HEADER(RepackagedAndroidViewView_OnDragListener)

/**
 @brief Interface definition for a callback to be invoked when the focus state of a view changed.
 */
@protocol RepackagedAndroidViewView_OnFocusChangeListener < NSObject, JavaObject >

/**
 @brief Called when the focus state of a view has changed.
 @param v The view whose state has changed.
 @param hasFocus The new focus state of v.
 */
- (void)onFocusChangeWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)v
                                       withBoolean:(jboolean)hasFocus;

@end

J2OBJC_EMPTY_STATIC_INIT(RepackagedAndroidViewView_OnFocusChangeListener)

J2OBJC_TYPE_LITERAL_HEADER(RepackagedAndroidViewView_OnFocusChangeListener)

/**
 @brief Interface definition for a callback to be invoked when a view is context clicked.
 */
@protocol RepackagedAndroidViewView_OnContextClickListener < NSObject, JavaObject >

/**
 @brief Called when a view is context clicked.
 @param v The view that has been context clicked.
 @return true if the callback consumed the context click, false otherwise.
 */
- (jboolean)onContextClickWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)v;

@end

J2OBJC_EMPTY_STATIC_INIT(RepackagedAndroidViewView_OnContextClickListener)

J2OBJC_TYPE_LITERAL_HEADER(RepackagedAndroidViewView_OnContextClickListener)

/**
 @brief Interface definition for a callback to be invoked when the context menu for this view is being built.
 */
@protocol RepackagedAndroidViewView_OnCreateContextMenuListener < NSObject, JavaObject >

/**
 @brief Called when the context menu for this view is being built.
 It is not safe to hold onto the menu after this method returns.
 @param menu The context menu that is being built
 @param v The view for which the context menu is being built
 @param menuInfo Extra information about the item for which the context menu should be shown. This information will vary depending on the class of v.
 */
- (void)onCreateContextMenuWithRepackagedAndroidViewContextMenu:(RepackagedAndroidViewContextMenu *)menu
                                  withRepackagedAndroidViewView:(RepackagedAndroidViewView *)v
           withRepackagedAndroidViewContextMenu_ContextMenuInfo:(RepackagedAndroidViewContextMenu_ContextMenuInfo *)menuInfo;

@end

J2OBJC_EMPTY_STATIC_INIT(RepackagedAndroidViewView_OnCreateContextMenuListener)

J2OBJC_TYPE_LITERAL_HEADER(RepackagedAndroidViewView_OnCreateContextMenuListener)

/**
 @brief Interface definition for a callback to be invoked when the status bar changes visibility.
 This reports <strong>global</strong> changes to the system UI state, not what the application is requesting.
 */
@protocol RepackagedAndroidViewView_OnSystemUiVisibilityChangeListener < NSObject, JavaObject >

/**
 @brief Called when the status bar changes visibility because of a call to View#setSystemUiVisibility(int) .
 @param visibility Bitwise-or of flags #SYSTEM_UI_FLAG_LOW_PROFILE , #SYSTEM_UI_FLAG_HIDE_NAVIGATION , and #SYSTEM_UI_FLAG_FULLSCREEN . This tells you the <strong>global</strong> state of these UI visibility flags, not what your app is currently applying.
 */
- (void)onSystemUiVisibilityChangeWithInt:(jint)visibility;

@end

J2OBJC_EMPTY_STATIC_INIT(RepackagedAndroidViewView_OnSystemUiVisibilityChangeListener)

J2OBJC_TYPE_LITERAL_HEADER(RepackagedAndroidViewView_OnSystemUiVisibilityChangeListener)

/**
 @brief Interface definition for a callback to be invoked when this view is attached or detached from its window.
 */
@protocol RepackagedAndroidViewView_OnAttachStateChangeListener < NSObject, JavaObject >

/**
 @brief Called when the view is attached to a window.
 @param v The view that was attached
 */
- (void)onViewAttachedToWindowWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)v;

/**
 @brief Called when the view is detached from a window.
 @param v The view that was detached
 */
- (void)onViewDetachedFromWindowWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)v;

@end

J2OBJC_EMPTY_STATIC_INIT(RepackagedAndroidViewView_OnAttachStateChangeListener)

J2OBJC_TYPE_LITERAL_HEADER(RepackagedAndroidViewView_OnAttachStateChangeListener)

/**
 @brief Listener for applying window insets on a view in a custom way.
 <p>Apps may choose to implement this interface if they want to apply custom policy to the way that window insets are treated for a view. If an OnApplyWindowInsetsListener is set, its OnApplyWindowInsetsListener#onApplyWindowInsets(View,WindowInsets) onApplyWindowInsets method will be called instead of the View's own #onApplyWindowInsets(WindowInsets) onApplyWindowInsets method. The listener may optionally call the parameter View's <code>onApplyWindowInsets</code> method to apply the View's normal behavior as part of its own.</p>
 */
@protocol RepackagedAndroidViewView_OnApplyWindowInsetsListener < NSObject, JavaObject >

/**
 @brief When View#setOnApplyWindowInsetsListener(View.OnApplyWindowInsetsListener) set on a View, this listener method will be called instead of the view's own View#onApplyWindowInsets(WindowInsets) onApplyWindowInsets method.
 @param v The view applying window insets
 @param insets The insets to apply
 @return The insets supplied, minus any insets that were consumed
 */
- (RepackagedAndroidViewWindowInsets *)onApplyWindowInsetsWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)v
                                                  withRepackagedAndroidViewWindowInsets:(RepackagedAndroidViewWindowInsets *)insets;

@end

J2OBJC_EMPTY_STATIC_INIT(RepackagedAndroidViewView_OnApplyWindowInsetsListener)

J2OBJC_TYPE_LITERAL_HEADER(RepackagedAndroidViewView_OnApplyWindowInsetsListener)

/**
 @brief Base class for derived classes that want to save and restore their own state in repackaged.android.view.View#onSaveInstanceState() .
 */
@interface RepackagedAndroidViewView_BaseSavedState : RepackagedAndroidViewAbsSavedState {
 @public
  NSString *mStartActivityRequestWhoSaved_;
}

#pragma mark Public

/**
 @brief Constructor used when reading from a parcel.
 Reads the state of the superclass.
 @param source
 */
- (instancetype)initWithRepackagedAndroidOsParcel:(id<RepackagedAndroidOsParcel>)source;

/**
 @brief Constructor called by derived classes when creating their SavedState objects
 @param superState The state of the superclass of this view
 */
- (instancetype)initWithRepackagedAndroidOsParcelable:(id<RepackagedAndroidOsParcelable>)superState;

- (void)writeToParcelWithRepackagedAndroidOsParcel:(id<RepackagedAndroidOsParcel>)outArg
                                           withInt:(jint)flags;

@end

J2OBJC_STATIC_INIT(RepackagedAndroidViewView_BaseSavedState)

J2OBJC_FIELD_SETTER(RepackagedAndroidViewView_BaseSavedState, mStartActivityRequestWhoSaved_, NSString *)

FOUNDATION_EXPORT id<RepackagedAndroidOsParcelable_Creator> RepackagedAndroidViewView_BaseSavedState_CREATOR_;
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewView_BaseSavedState, CREATOR_, id<RepackagedAndroidOsParcelable_Creator>)

FOUNDATION_EXPORT void RepackagedAndroidViewView_BaseSavedState_initWithRepackagedAndroidOsParcel_(RepackagedAndroidViewView_BaseSavedState *self, id<RepackagedAndroidOsParcel> source);

FOUNDATION_EXPORT RepackagedAndroidViewView_BaseSavedState *new_RepackagedAndroidViewView_BaseSavedState_initWithRepackagedAndroidOsParcel_(id<RepackagedAndroidOsParcel> source) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void RepackagedAndroidViewView_BaseSavedState_initWithRepackagedAndroidOsParcelable_(RepackagedAndroidViewView_BaseSavedState *self, id<RepackagedAndroidOsParcelable> superState);

FOUNDATION_EXPORT RepackagedAndroidViewView_BaseSavedState *new_RepackagedAndroidViewView_BaseSavedState_initWithRepackagedAndroidOsParcelable_(id<RepackagedAndroidOsParcelable> superState) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(RepackagedAndroidViewView_BaseSavedState)

/**
 @brief A set of information given to a view when it is attached to its parent window.
 */
@interface RepackagedAndroidViewView_AttachInfo : NSObject {
 @public
  id<RepackagedAndroidViewIWindowSession> mSession_;
  id<RepackagedAndroidViewIWindow> mWindow_;
  id<RepackagedAndroidOsIBinder> mWindowToken_;
  RepackagedAndroidViewDisplay *mDisplay_;
  id<RepackagedAndroidViewView_AttachInfo_Callbacks> mRootCallbacks_;
  id<RepackagedAndroidViewIWindowId> mIWindowId_;
  RepackagedAndroidViewWindowId *mWindowId_;
  /**
   @brief The top view of the hierarchy.
   */
  RepackagedAndroidViewView *mRootView_;
  id<RepackagedAndroidOsIBinder> mPanelParentWindowToken_;
  jboolean mHardwareAccelerated_;
  jboolean mHardwareAccelerationRequested_;
  RepackagedAndroidViewHardwareRenderer *mHardwareRenderer_;
  id<JavaUtilList> mPendingAnimatingRenderNodes_;
  /**
   @brief The state of the display to which the window is attached, as reported by Display#getState() .
   Note that the display state constants declared by Display do not exactly line up with the screen state constants declared by View (there are more display states than screen states).
   */
  jint mDisplayState_;
  /**
   @brief Scale factor used by the compatibility mode
   */
  jfloat mApplicationScale_;
  /**
   @brief Indicates whether the application is in compatibility mode
   */
  jboolean mScalingRequired_;
  /**
   @brief If set, ViewRootImpl doesn't use its lame animation for when the window resizes.
   */
  jboolean mTurnOffWindowResizeAnim_;
  /**
   @brief Left position of this view's window
   */
  jint mWindowLeft_;
  /**
   @brief Top position of this view's window
   */
  jint mWindowTop_;
  /**
   @brief Indicates whether views need to use 32-bit drawing caches
   */
  jboolean mUse32BitDrawingCache_;
  /**
   @brief For windows that are full-screen but using insets to layout inside of the screen areas, these are the current insets to appear inside the overscan area of the display.
   */
  RepackagedAndroidGraphicsRect *mOverscanInsets_;
  /**
   @brief For windows that are full-screen but using insets to layout inside of the screen decorations, these are the current insets for the content of the window.
   */
  RepackagedAndroidGraphicsRect *mContentInsets_;
  /**
   @brief For windows that are full-screen but using insets to layout inside of the screen decorations, these are the current insets for the actual visible parts of the window.
   */
  RepackagedAndroidGraphicsRect *mVisibleInsets_;
  /**
   @brief For windows that are full-screen but using insets to layout inside of the screen decorations, these are the current insets for the stable system windows.
   */
  RepackagedAndroidGraphicsRect *mStableInsets_;
  /**
   @brief For windows that include areas that are not covered by real surface these are the outsets for real surface.
   */
  RepackagedAndroidGraphicsRect *mOutsets_;
  /**
   @brief The internal insets given by this window.
   This value is supplied by the client (through ViewTreeObserver.OnComputeInternalInsetsListener ) and will be given to the window manager when changed to be used in laying out windows behind it.
   */
  RepackagedAndroidViewViewTreeObserver_InternalInsetsInfo *mGivenInternalInsets_;
  /**
   @brief Set to true when mGivenInternalInsets is non-empty.
   */
  jboolean mHasNonEmptyGivenInternalInsets_;
  /**
   @brief All views in the window's hierarchy that serve as scroll containers, used to determine if the window can be resized or must be panned to adjust for a soft input area.
   */
  JavaUtilArrayList *mScrollContainers_;
  RepackagedAndroidViewKeyEvent_DispatcherState *mKeyDispatchState_;
  /**
   @brief Indicates whether the view's window currently has the focus.
   */
  jboolean mHasWindowFocus_;
  /**
   @brief The current visibility of the window.
   */
  jint mWindowVisibility_;
  /**
   @brief Indicates the time at which drawing started to occur.
   */
  jlong mDrawingTime_;
  /**
   @brief Indicates whether or not ignoring the DIRTY_MASK flags.
   */
  jboolean mIgnoreDirtyState_;
  /**
   @brief This flag tracks when the mIgnoreDirtyState flag is set during draw(), to avoid clearing that flag prematurely.
   */
  jboolean mSetIgnoreDirtyState_;
  /**
   @brief Indicates whether the view's window is currently in touch mode.
   */
  jboolean mInTouchMode_;
  /**
   @brief Indicates whether the view has requested unbuffered input dispatching for the current event stream.
   */
  jboolean mUnbufferedDispatchRequested_;
  /**
   @brief Indicates that ViewAncestor should trigger a global layout change the next time it performs a traversal
   */
  jboolean mRecomputeGlobalAttributes_;
  /**
   @brief Always report new attributes at next traversal.
   */
  jboolean mForceReportNewAttributes_;
  /**
   @brief Set during a traveral if any views want to keep the screen on.
   */
  jboolean mKeepScreenOn_;
  /**
   @brief Bitwise-or of all of the values that views have passed to setSystemUiVisibility().
   */
  jint mSystemUiVisibility_;
  /**
   @brief Hack to force certain system UI visibility flags to be cleared.
   */
  jint mDisabledSystemUiVisibility_;
  /**
   @brief Last global system UI visibility reported by the window manager.
   */
  jint mGlobalSystemUiVisibility_;
  /**
   @brief True if a view in this hierarchy has an OnSystemUiVisibilityChangeListener attached.
   */
  jboolean mHasSystemUiListeners_;
  /**
   @brief Set if the window has requested to extend into the overscan region via WindowManager.LayoutParams.FLAG_LAYOUT_IN_OVERSCAN.
   */
  jboolean mOverscanRequested_;
  /**
   @brief Set if the visibility of any views has changed.
   */
  jboolean mViewVisibilityChanged_;
  /**
   @brief Set to true if a view has been scrolled.
   */
  jboolean mViewScrollChanged_;
  /**
   @brief Set to true if high contrast mode enabled
   */
  jboolean mHighContrastText_;
  /**
   @brief Global to the view hierarchy used as a temporary for dealing with x/y points in the transparent region computations.
   */
  IOSIntArray *mTransparentLocation_;
  /**
   @brief Global to the view hierarchy used as a temporary for dealing with x/y points in the ViewGroup.invalidateChild implementation.
   */
  IOSIntArray *mInvalidateChildLocation_;
  /**
   @brief Global to the view hierarchy used as a temporary for dealng with computing absolute on-screen location.
   */
  IOSIntArray *mTmpLocation_;
  /**
   @brief Global to the view hierarchy used as a temporary for dealing with x/y location when view is transformed.
   */
  IOSFloatArray *mTmpTransformLocation_;
  /**
   @brief The view tree observer used to dispatch global events like layout, pre-draw, touch mode change, etc.
   */
  RepackagedAndroidViewViewTreeObserver *mTreeObserver_;
  /**
   @brief A Canvas used by the view hierarchy to perform bitmap caching.
   */
  RepackagedAndroidGraphicsCanvas *mCanvas_;
  /**
   @brief The view root impl.
   */
  RepackagedAndroidViewViewRootImpl *mViewRootImpl_;
  /**
   @brief A Handler supplied by a view's repackaged.android.view.ViewRootImpl .
   This handler can be used to pump events in the UI events queue.
   */
  id<RepackagedAndroidOsHandler> mHandler_;
  /**
   @brief Temporary for use in computing invalidate rectangles while calling up the hierarchy.
   */
  RepackagedAndroidGraphicsRect *mTmpInvalRect_;
  /**
   @brief Temporary for use in computing hit areas with transformed views
   */
  RepackagedAndroidGraphicsRectF *mTmpTransformRect_;
  /**
   @brief Temporary for use in computing hit areas with transformed views
   */
  RepackagedAndroidGraphicsRectF *mTmpTransformRect1_;
  /**
   @brief Temporary list of rectanges.
   */
  id<JavaUtilList> mTmpRectList_;
  /**
   @brief Temporary for use in transforming invalidation rect
   */
  RepackagedAndroidGraphicsMatrix *mTmpMatrix_;
  /**
   @brief Temporary for use in transforming invalidation rect
   */
  RepackagedAndroidViewAnimationTransformation *mTmpTransformation_;
  /**
   @brief Temporary for use in querying outlines from OutlineProviders
   */
  RepackagedAndroidGraphicsOutline *mTmpOutline_;
  /**
   @brief Temporary list for use in collecting focusable descendents of a view.
   */
  JavaUtilArrayList *mTempArrayList_;
  /**
   @brief The id of the window for accessibility purposes.
   */
  jint mAccessibilityWindowId_;
  /**
   @brief Flags related to accessibility processing.
   */
  jint mAccessibilityFetchFlags_;
  /**
   @brief The drawable for highlighting accessibility focus.
   */
  RepackagedAndroidGraphicsDrawableDrawable *mAccessibilityFocusDrawable_;
  /**
   @brief Show where the margins, bounds and layout bounds are for each view.
   */
  jboolean mDebugLayout_;
  /**
   @brief Point used to compute visible regions.
   */
  RepackagedAndroidGraphicsPoint *mPoint_;
  /**
   @brief Used to track which View originated a requestLayout() call, used when requestLayout() is called during layout.
   */
  RepackagedAndroidViewView *mViewRequestingLayout_;
}

#pragma mark Package-Private

/**
 @brief Creates a new set of attachment information with the specified events handler and thread.
 @param handler the events handler the view must use
 */
- (instancetype)initWithRepackagedAndroidViewIWindowSession:(id<RepackagedAndroidViewIWindowSession>)session
                           withRepackagedAndroidViewIWindow:(id<RepackagedAndroidViewIWindow>)window
                           withRepackagedAndroidViewDisplay:(RepackagedAndroidViewDisplay *)display
                      withRepackagedAndroidViewViewRootImpl:(RepackagedAndroidViewViewRootImpl *)viewRootImpl
                             withRepackagedAndroidOsHandler:(id<RepackagedAndroidOsHandler>)handler
         withRepackagedAndroidViewView_AttachInfo_Callbacks:(id<RepackagedAndroidViewView_AttachInfo_Callbacks>)effectPlayer;

@end

J2OBJC_EMPTY_STATIC_INIT(RepackagedAndroidViewView_AttachInfo)

J2OBJC_FIELD_SETTER(RepackagedAndroidViewView_AttachInfo, mSession_, id<RepackagedAndroidViewIWindowSession>)
J2OBJC_FIELD_SETTER(RepackagedAndroidViewView_AttachInfo, mWindow_, id<RepackagedAndroidViewIWindow>)
J2OBJC_FIELD_SETTER(RepackagedAndroidViewView_AttachInfo, mWindowToken_, id<RepackagedAndroidOsIBinder>)
J2OBJC_FIELD_SETTER(RepackagedAndroidViewView_AttachInfo, mDisplay_, RepackagedAndroidViewDisplay *)
J2OBJC_FIELD_SETTER(RepackagedAndroidViewView_AttachInfo, mRootCallbacks_, id<RepackagedAndroidViewView_AttachInfo_Callbacks>)
J2OBJC_FIELD_SETTER(RepackagedAndroidViewView_AttachInfo, mIWindowId_, id<RepackagedAndroidViewIWindowId>)
J2OBJC_FIELD_SETTER(RepackagedAndroidViewView_AttachInfo, mWindowId_, RepackagedAndroidViewWindowId *)
J2OBJC_FIELD_SETTER(RepackagedAndroidViewView_AttachInfo, mRootView_, RepackagedAndroidViewView *)
J2OBJC_FIELD_SETTER(RepackagedAndroidViewView_AttachInfo, mPanelParentWindowToken_, id<RepackagedAndroidOsIBinder>)
J2OBJC_FIELD_SETTER(RepackagedAndroidViewView_AttachInfo, mHardwareRenderer_, RepackagedAndroidViewHardwareRenderer *)
J2OBJC_FIELD_SETTER(RepackagedAndroidViewView_AttachInfo, mPendingAnimatingRenderNodes_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(RepackagedAndroidViewView_AttachInfo, mOverscanInsets_, RepackagedAndroidGraphicsRect *)
J2OBJC_FIELD_SETTER(RepackagedAndroidViewView_AttachInfo, mContentInsets_, RepackagedAndroidGraphicsRect *)
J2OBJC_FIELD_SETTER(RepackagedAndroidViewView_AttachInfo, mVisibleInsets_, RepackagedAndroidGraphicsRect *)
J2OBJC_FIELD_SETTER(RepackagedAndroidViewView_AttachInfo, mStableInsets_, RepackagedAndroidGraphicsRect *)
J2OBJC_FIELD_SETTER(RepackagedAndroidViewView_AttachInfo, mOutsets_, RepackagedAndroidGraphicsRect *)
J2OBJC_FIELD_SETTER(RepackagedAndroidViewView_AttachInfo, mGivenInternalInsets_, RepackagedAndroidViewViewTreeObserver_InternalInsetsInfo *)
J2OBJC_FIELD_SETTER(RepackagedAndroidViewView_AttachInfo, mScrollContainers_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(RepackagedAndroidViewView_AttachInfo, mKeyDispatchState_, RepackagedAndroidViewKeyEvent_DispatcherState *)
J2OBJC_FIELD_SETTER(RepackagedAndroidViewView_AttachInfo, mTransparentLocation_, IOSIntArray *)
J2OBJC_FIELD_SETTER(RepackagedAndroidViewView_AttachInfo, mInvalidateChildLocation_, IOSIntArray *)
J2OBJC_FIELD_SETTER(RepackagedAndroidViewView_AttachInfo, mTmpLocation_, IOSIntArray *)
J2OBJC_FIELD_SETTER(RepackagedAndroidViewView_AttachInfo, mTmpTransformLocation_, IOSFloatArray *)
J2OBJC_FIELD_SETTER(RepackagedAndroidViewView_AttachInfo, mTreeObserver_, RepackagedAndroidViewViewTreeObserver *)
J2OBJC_FIELD_SETTER(RepackagedAndroidViewView_AttachInfo, mCanvas_, RepackagedAndroidGraphicsCanvas *)
J2OBJC_FIELD_SETTER(RepackagedAndroidViewView_AttachInfo, mViewRootImpl_, RepackagedAndroidViewViewRootImpl *)
J2OBJC_FIELD_SETTER(RepackagedAndroidViewView_AttachInfo, mHandler_, id<RepackagedAndroidOsHandler>)
J2OBJC_FIELD_SETTER(RepackagedAndroidViewView_AttachInfo, mTmpInvalRect_, RepackagedAndroidGraphicsRect *)
J2OBJC_FIELD_SETTER(RepackagedAndroidViewView_AttachInfo, mTmpTransformRect_, RepackagedAndroidGraphicsRectF *)
J2OBJC_FIELD_SETTER(RepackagedAndroidViewView_AttachInfo, mTmpTransformRect1_, RepackagedAndroidGraphicsRectF *)
J2OBJC_FIELD_SETTER(RepackagedAndroidViewView_AttachInfo, mTmpRectList_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(RepackagedAndroidViewView_AttachInfo, mTmpMatrix_, RepackagedAndroidGraphicsMatrix *)
J2OBJC_FIELD_SETTER(RepackagedAndroidViewView_AttachInfo, mTmpTransformation_, RepackagedAndroidViewAnimationTransformation *)
J2OBJC_FIELD_SETTER(RepackagedAndroidViewView_AttachInfo, mTmpOutline_, RepackagedAndroidGraphicsOutline *)
J2OBJC_FIELD_SETTER(RepackagedAndroidViewView_AttachInfo, mTempArrayList_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(RepackagedAndroidViewView_AttachInfo, mAccessibilityFocusDrawable_, RepackagedAndroidGraphicsDrawableDrawable *)
J2OBJC_FIELD_SETTER(RepackagedAndroidViewView_AttachInfo, mPoint_, RepackagedAndroidGraphicsPoint *)
J2OBJC_FIELD_SETTER(RepackagedAndroidViewView_AttachInfo, mViewRequestingLayout_, RepackagedAndroidViewView *)

FOUNDATION_EXPORT void RepackagedAndroidViewView_AttachInfo_initWithRepackagedAndroidViewIWindowSession_withRepackagedAndroidViewIWindow_withRepackagedAndroidViewDisplay_withRepackagedAndroidViewViewRootImpl_withRepackagedAndroidOsHandler_withRepackagedAndroidViewView_AttachInfo_Callbacks_(RepackagedAndroidViewView_AttachInfo *self, id<RepackagedAndroidViewIWindowSession> session, id<RepackagedAndroidViewIWindow> window, RepackagedAndroidViewDisplay *display, RepackagedAndroidViewViewRootImpl *viewRootImpl, id<RepackagedAndroidOsHandler> handler, id<RepackagedAndroidViewView_AttachInfo_Callbacks> effectPlayer);

FOUNDATION_EXPORT RepackagedAndroidViewView_AttachInfo *new_RepackagedAndroidViewView_AttachInfo_initWithRepackagedAndroidViewIWindowSession_withRepackagedAndroidViewIWindow_withRepackagedAndroidViewDisplay_withRepackagedAndroidViewViewRootImpl_withRepackagedAndroidOsHandler_withRepackagedAndroidViewView_AttachInfo_Callbacks_(id<RepackagedAndroidViewIWindowSession> session, id<RepackagedAndroidViewIWindow> window, RepackagedAndroidViewDisplay *display, RepackagedAndroidViewViewRootImpl *viewRootImpl, id<RepackagedAndroidOsHandler> handler, id<RepackagedAndroidViewView_AttachInfo_Callbacks> effectPlayer) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(RepackagedAndroidViewView_AttachInfo)

@protocol RepackagedAndroidViewView_AttachInfo_Callbacks < NSObject, JavaObject >

- (void)playSoundEffectWithInt:(jint)effectId;

- (jboolean)performHapticFeedbackWithInt:(jint)effectId
                             withBoolean:(jboolean)always;

@end

J2OBJC_EMPTY_STATIC_INIT(RepackagedAndroidViewView_AttachInfo_Callbacks)

J2OBJC_TYPE_LITERAL_HEADER(RepackagedAndroidViewView_AttachInfo_Callbacks)

/**
 @brief InvalidateInfo is used to post invalidate(int, int, int, int) messages to a Handler.
 This class contains the target (View) to invalidate and the coordinates of the dirty rectangle. For performance purposes, this class also implements a pool of up to POOL_LIMIT objects that get reused. This reduces memory allocations whenever possible.
 */
@interface RepackagedAndroidViewView_AttachInfo_InvalidateInfo : NSObject {
 @public
  RepackagedAndroidViewView *target_;
  jint left_;
  jint top_;
  jint right_;
  jint bottom_;
}

#pragma mark Public

+ (RepackagedAndroidViewView_AttachInfo_InvalidateInfo *)obtain;

- (void)recycle;

#pragma mark Package-Private

- (instancetype)init;

@end

J2OBJC_STATIC_INIT(RepackagedAndroidViewView_AttachInfo_InvalidateInfo)

J2OBJC_FIELD_SETTER(RepackagedAndroidViewView_AttachInfo_InvalidateInfo, target_, RepackagedAndroidViewView *)

FOUNDATION_EXPORT RepackagedAndroidViewView_AttachInfo_InvalidateInfo *RepackagedAndroidViewView_AttachInfo_InvalidateInfo_obtain();

FOUNDATION_EXPORT void RepackagedAndroidViewView_AttachInfo_InvalidateInfo_init(RepackagedAndroidViewView_AttachInfo_InvalidateInfo *self);

FOUNDATION_EXPORT RepackagedAndroidViewView_AttachInfo_InvalidateInfo *new_RepackagedAndroidViewView_AttachInfo_InvalidateInfo_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(RepackagedAndroidViewView_AttachInfo_InvalidateInfo)

/**
 @brief <p> This class represents a delegate that can be registered in a View to enhance accessibility support via composition rather via inheritance.
 It is specifically targeted to widget developers that extend basic View classes i.e. classes in package android.view, that would like their applications to be backwards compatible. </p> <div class="special reference"> <h3>Developer Guides</h3> <p>For more information about making applications accessible, read the <a href="  guide/topics/ui/accessibility/index.html">Accessibility</a> developer guide.</p> </div> <p> A scenario in which a developer would like to use an accessibility delegate is overriding a method introduced in a later API version then the minimal API version supported by the application. For example, the method View#onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo) is not available in API version 4 when the accessibility APIs were first introduced. If a developer would like his application to run on API version 4 devices (assuming all other APIs used by the application are version 4 or lower) and take advantage of this method, instead of overriding the method which would break the application's backwards compatibility, he can override the corresponding method in this delegate and register the delegate in the target View if the API version of the system is high enough i.e. the API version is same or higher to the API version that introduced View#onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo) . </p> <p> Here is an example implementation: </p> <code><pre><p> if (Build.VERSION.SDK_INT >= 14) { // If the API version is equal of higher than the version in // which onInitializeAccessibilityNodeInfo was introduced we // register a delegate with a customized implementation. View view = findViewById(R.id.view_id); view.setAccessibilityDelegate(new AccessibilityDelegate() { public void onInitializeAccessibilityNodeInfo(View host, AccessibilityNodeInfo info) { // Let the default implementation populate the info. super.onInitializeAccessibilityNodeInfo(host, info); // Set some other information. info.setEnabled(host.isEnabled()); } }); } </code></pre></p> <p> This delegate contains methods that correspond to the accessibility methods in View. If a delegate has been specified the implementation in View hands off handling to the corresponding method in this delegate. The default implementation the delegate methods behaves exactly as the corresponding method in View for the case of no accessibility delegate been set. Hence, to customize the behavior of a View method, clients can override only the corresponding delegate method without altering the behavior of the rest accessibility related methods of the host view. </p>
 */
@interface RepackagedAndroidViewView_AccessibilityDelegate : NSObject

#pragma mark Public

- (instancetype)init;

/**
 @brief Returns an AccessibilityNodeInfo representing the host view from the point of view of an android.accessibilityservice.AccessibilityService .
 This method is responsible for obtaining an accessibility node info from a pool of reusable instances and calling #onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo) on the host view to initialize the former. <p> <strong>Note:</strong> The client is responsible for recycling the obtained instance by calling AccessibilityNodeInfo#recycle() to minimize object creation. </p> <p> The default implementation behaves as View#createAccessibilityNodeInfo() View#createAccessibilityNodeInfo() for the case of no accessibility delegate been set. </p>
 @return A populated AccessibilityNodeInfo .
 */
- (RepackagedAndroidViewAccessibilityAccessibilityNodeInfo *)createAccessibilityNodeInfoWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)host;

/**
 @brief Dispatches an AccessibilityEvent to the host View first and then to its children for adding their text content to the event.
 <p> The default implementation behaves as View#dispatchPopulateAccessibilityEvent(AccessibilityEvent) View#dispatchPopulateAccessibilityEvent(AccessibilityEvent) for the case of no accessibility delegate been set. </p>
 @param host The View hosting the delegate.
 @param event The event.
 @return True if the event population was completed.
 */
- (jboolean)dispatchPopulateAccessibilityEventWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)host
                   withRepackagedAndroidViewAccessibilityAccessibilityEvent:(RepackagedAndroidViewAccessibilityAccessibilityEvent *)event;

/**
 @brief Gets the provider for managing a virtual view hierarchy rooted at this View and reported to android.accessibilityservice.AccessibilityService s that explore the window content.
 <p> The default implementation behaves as View#getAccessibilityNodeProvider() View#getAccessibilityNodeProvider() for the case of no accessibility delegate been set. </p>
 @return The provider.
 */
- (RepackagedAndroidViewAccessibilityAccessibilityNodeProvider *)getAccessibilityNodeProviderWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)host;

/**
 @brief Initializes an AccessibilityEvent with information about the the host View which is the event source.
 <p> The default implementation behaves as View#onInitializeAccessibilityEvent(AccessibilityEvent) View#onInitializeAccessibilityEvent(AccessibilityEvent) for the case of no accessibility delegate been set. </p>
 @param host The View hosting the delegate.
 @param event The event to initialize.
 */
- (void)onInitializeAccessibilityEventWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)host
           withRepackagedAndroidViewAccessibilityAccessibilityEvent:(RepackagedAndroidViewAccessibilityAccessibilityEvent *)event;

/**
 @brief Initializes an AccessibilityNodeInfo with information about the host view.
 <p> The default implementation behaves as View#onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo) View#onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo) for the case of no accessibility delegate been set. </p>
 @param host The View hosting the delegate.
 @param info The instance to initialize.
 */
- (void)onInitializeAccessibilityNodeInfoWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)host
           withRepackagedAndroidViewAccessibilityAccessibilityNodeInfo:(RepackagedAndroidViewAccessibilityAccessibilityNodeInfo *)info;

/**
 @brief Gives a chance to the host View to populate the accessibility event with its text content.
 <p> The default implementation behaves as View#onPopulateAccessibilityEvent(AccessibilityEvent) View#onPopulateAccessibilityEvent(AccessibilityEvent) for the case of no accessibility delegate been set. </p>
 @param host The View hosting the delegate.
 @param event The accessibility event which to populate.
 */
- (void)onPopulateAccessibilityEventWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)host
         withRepackagedAndroidViewAccessibilityAccessibilityEvent:(RepackagedAndroidViewAccessibilityAccessibilityEvent *)event;

/**
 @brief Called when a child of the host View has requested sending an AccessibilityEvent and gives an opportunity to the parent (the host) to augment the event.
 <p> The default implementation behaves as ViewGroup#onRequestSendAccessibilityEvent(View,AccessibilityEvent) ViewGroup#onRequestSendAccessibilityEvent(View, AccessibilityEvent) for the case of no accessibility delegate been set. </p>
 @param host The View hosting the delegate.
 @param child The child which requests sending the event.
 @param event The event to be sent.
 @return True if the event should be sent
 */
- (jboolean)onRequestSendAccessibilityEventWithRepackagedAndroidViewViewGroup:(RepackagedAndroidViewViewGroup *)host
                                                withRepackagedAndroidViewView:(RepackagedAndroidViewView *)child
                     withRepackagedAndroidViewAccessibilityAccessibilityEvent:(RepackagedAndroidViewAccessibilityAccessibilityEvent *)event;

/**
 @brief Performs the specified accessibility action on the view.
 For possible accessibility actions look at AccessibilityNodeInfo . <p> The default implementation behaves as View#performAccessibilityAction(int,Bundle) View#performAccessibilityAction(int, Bundle) for the case of no accessibility delegate been set. </p>
 @param action The action to perform.
 @return Whether the action was performed.
 */
- (jboolean)performAccessibilityActionWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)host
                                                            withInt:(jint)action
                                      withRepackagedAndroidOsBundle:(RepackagedAndroidOsBundle *)args;

/**
 @brief Sends an accessibility event of the given type.
 If accessibility is not enabled this method has no effect. <p> The default implementation behaves as View#sendAccessibilityEvent(int) View#sendAccessibilityEvent(int) for the case of no accessibility delegate been set. </p>
 @param host The View hosting the delegate.
 @param eventType The type of the event to send.
 */
- (void)sendAccessibilityEventWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)host
                                                    withInt:(jint)eventType;

/**
 @brief Sends an accessibility event.
 This method behaves exactly as #sendAccessibilityEvent(View,int) but takes as an argument an empty AccessibilityEvent and does not perform a check whether accessibility is enabled. <p> The default implementation behaves as View#sendAccessibilityEventUnchecked(AccessibilityEvent) View#sendAccessibilityEventUnchecked(AccessibilityEvent) for the case of no accessibility delegate been set. </p>
 @param host The View hosting the delegate.
 @param event The event to send.
 */
- (void)sendAccessibilityEventUncheckedWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)host
            withRepackagedAndroidViewAccessibilityAccessibilityEvent:(RepackagedAndroidViewAccessibilityAccessibilityEvent *)event;

@end

J2OBJC_EMPTY_STATIC_INIT(RepackagedAndroidViewView_AccessibilityDelegate)

FOUNDATION_EXPORT void RepackagedAndroidViewView_AccessibilityDelegate_init(RepackagedAndroidViewView_AccessibilityDelegate *self);

FOUNDATION_EXPORT RepackagedAndroidViewView_AccessibilityDelegate *new_RepackagedAndroidViewView_AccessibilityDelegate_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(RepackagedAndroidViewView_AccessibilityDelegate)

@interface RepackagedAndroidViewView_SendViewStateChangedAccessibilityEvent : NSObject < JavaLangRunnable >

#pragma mark Public

- (void)run;

- (void)runOrPostWithInt:(jint)changeType;

#pragma mark Package-Private

- (instancetype)initWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(RepackagedAndroidViewView_SendViewStateChangedAccessibilityEvent)

FOUNDATION_EXPORT void RepackagedAndroidViewView_SendViewStateChangedAccessibilityEvent_initWithRepackagedAndroidViewView_(RepackagedAndroidViewView_SendViewStateChangedAccessibilityEvent *self, RepackagedAndroidViewView *outer$);

FOUNDATION_EXPORT RepackagedAndroidViewView_SendViewStateChangedAccessibilityEvent *new_RepackagedAndroidViewView_SendViewStateChangedAccessibilityEvent_initWithRepackagedAndroidViewView_(RepackagedAndroidViewView *outer$) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(RepackagedAndroidViewView_SendViewStateChangedAccessibilityEvent)

#endif // _RepackagedAndroidViewView_H_
