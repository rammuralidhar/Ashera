//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/androidlayouts/repackaged/com/android/internal/util/Preconditions.java
//

#ifndef _RepackagedComAndroidInternalUtilPreconditions_H_
#define _RepackagedComAndroidInternalUtilPreconditions_H_

#include "J2ObjC_header.h"

@class IOSFloatArray;
@class IOSObjectArray;
@protocol JavaUtilCollection;

/**
 @brief Simple static methods to be called at the start of your own methods to verify correct arguments and state.
 */
@interface RepackagedComAndroidInternalUtilPreconditions : NSObject

#pragma mark Public

- (instancetype)init;

+ (void)checkArgumentWithBoolean:(jboolean)expression;

/**
 @brief Ensures that the argument floating point value is a finite number.
 <p>A finite number is defined to be both representable (that is, not NaN) and not infinite (that is neither positive or negative infinity).</p>
 @param value a floating point value
 @param valueName the name of the argument to use if the check fails
 @return the validated floating point value
 @throws IllegalArgumentException if <code>value</code> was not finite
 */
+ (jfloat)checkArgumentFiniteWithFloat:(jfloat)value
                          withNSString:(NSString *)valueName;

/**
 @brief Ensures that the argument floating point value is within the inclusive range.
 <p>While this can be used to range check against +/- infinity, note that all NaN numbers will always be out of range.</p>
 @param value a floating point value
 @param lower the lower endpoint of the inclusive range
 @param upper the upper endpoint of the inclusive range
 @param valueName the name of the argument to use if the check fails
 @return the validated floating point value
 @throws IllegalArgumentException if <code>value</code> was not within the range
 */
+ (jfloat)checkArgumentInRangeWithFloat:(jfloat)value
                              withFloat:(jfloat)lower
                              withFloat:(jfloat)upper
                           withNSString:(NSString *)valueName;

/**
 @brief Ensures that the argument int value is within the inclusive range.
 @param value a int value
 @param lower the lower endpoint of the inclusive range
 @param upper the upper endpoint of the inclusive range
 @param valueName the name of the argument to use if the check fails
 @return the validated int value
 @throws IllegalArgumentException if <code>value</code> was not within the range
 */
+ (jint)checkArgumentInRangeWithInt:(jint)value
                            withInt:(jint)lower
                            withInt:(jint)upper
                       withNSString:(NSString *)valueName;

/**
 @brief Ensures that that the argument numeric value is non-negative.
 @param value a numeric int value
 @param errorMessage the exception message to use if the check fails
 @return the validated numeric value
 @throws IllegalArgumentException if <code>value</code> was negative
 */
+ (jint)checkArgumentNonnegativeWithInt:(jint)value
                           withNSString:(NSString *)errorMessage;

/**
 @brief Ensures that that the argument numeric value is non-negative.
 @param value a numeric long value
 @param errorMessage the exception message to use if the check fails
 @return the validated numeric value
 @throws IllegalArgumentException if <code>value</code> was negative
 */
+ (jlong)checkArgumentNonnegativeWithLong:(jlong)value
                             withNSString:(NSString *)errorMessage;

/**
 @brief Ensures that that the argument numeric value is positive.
 @param value a numeric int value
 @param errorMessage the exception message to use if the check fails
 @return the validated numeric value
 @throws IllegalArgumentException if <code>value</code> was not positive
 */
+ (jint)checkArgumentPositiveWithInt:(jint)value
                        withNSString:(NSString *)errorMessage;

/**
 @brief Ensures that all elements in the argument floating point array are within the inclusive range <p>While this can be used to range check against +/- infinity, note that all NaN numbers will always be out of range.
 </p>
 @param value a floating point array of values
 @param lower the lower endpoint of the inclusive range
 @param upper the upper endpoint of the inclusive range
 @param valueName the name of the argument to use if the check fails
 @return the validated floating point value
 @throws IllegalArgumentException if any of the elements in <code>value</code> were out of range
 @throws NullPointerException if the <code>value</code> was <code>null</code>
 */
+ (IOSFloatArray *)checkArrayElementsInRangeWithFloatArray:(IOSFloatArray *)value
                                                 withFloat:(jfloat)lower
                                                 withFloat:(jfloat)upper
                                              withNSString:(NSString *)valueName;

/**
 @brief Ensures that the array is not <code>null</code> , and none of its elements are <code>null</code> .
 @param value an array of boxed objects
 @param valueName the name of the argument to use if the check fails
 @return the validated array
 @throws NullPointerException if the <code>value</code> or any of its elements were <code>null</code>
 */
+ (IOSObjectArray *)checkArrayElementsNotNullWithNSObjectArray:(IOSObjectArray *)value
                                                  withNSString:(NSString *)valueName;

/**
 @brief Ensures that the Collection is not <code>null</code> , and none of its elements are <code>null</code> .
 @param value a Collection of boxed objects
 @param valueName the name of the argument to use if the check fails
 @return the validated Collection
 @throws NullPointerException if the <code>value</code> or any of its elements were <code>null</code>
 */
+ (id<JavaUtilCollection>)checkCollectionElementsNotNullWithJavaUtilCollection:(id<JavaUtilCollection>)value
                                                                  withNSString:(NSString *)valueName;

/**
 @brief Ensures that the Collection is not <code>null</code> , and contains at least one element.
 @param value a Collection of boxed elements.
 @param valueName the name of the argument to use if the check fails.
 @return the validated Collection
 @throws NullPointerException if the <code>value</code> was <code>null</code>
 @throws IllegalArgumentException if the <code>value</code> was empty
 */
+ (id<JavaUtilCollection>)checkCollectionNotEmptyWithJavaUtilCollection:(id<JavaUtilCollection>)value
                                                           withNSString:(NSString *)valueName;

/**
 @brief Check the requested flags, throwing if any requested flags are outside the allowed set.
 */
+ (void)checkFlagsArgumentWithInt:(jint)requestedFlags
                          withInt:(jint)allowedFlags;

/**
 @brief Ensures that an object reference passed as a parameter to the calling method is not null.
 @param reference an object reference
 @return the non-null reference that was validated
 @throws NullPointerException if <code>reference</code> is null
 */
+ (id)checkNotNullWithId:(id)reference;

/**
 @brief Ensures that an object reference passed as a parameter to the calling method is not null.
 @param reference an object reference
 @param errorMessage the exception message to use if the check fails; will be converted to a string using String#valueOf(Object)
 @return the non-null reference that was validated
 @throws NullPointerException if <code>reference</code> is null
 */
+ (id)checkNotNullWithId:(id)reference
                  withId:(id)errorMessage;

/**
 @brief Ensures the truth of an expression involving the state of the calling instance, but not involving any parameters to the calling method.
 @param expression a boolean expression
 @throws IllegalStateException if <code>expression</code> is false
 */
+ (void)checkStateWithBoolean:(jboolean)expression;

@end

J2OBJC_EMPTY_STATIC_INIT(RepackagedComAndroidInternalUtilPreconditions)

FOUNDATION_EXPORT void RepackagedComAndroidInternalUtilPreconditions_checkArgumentWithBoolean_(jboolean expression);

FOUNDATION_EXPORT id RepackagedComAndroidInternalUtilPreconditions_checkNotNullWithId_(id reference);

FOUNDATION_EXPORT id RepackagedComAndroidInternalUtilPreconditions_checkNotNullWithId_withId_(id reference, id errorMessage);

FOUNDATION_EXPORT void RepackagedComAndroidInternalUtilPreconditions_checkStateWithBoolean_(jboolean expression);

FOUNDATION_EXPORT void RepackagedComAndroidInternalUtilPreconditions_checkFlagsArgumentWithInt_withInt_(jint requestedFlags, jint allowedFlags);

FOUNDATION_EXPORT jint RepackagedComAndroidInternalUtilPreconditions_checkArgumentNonnegativeWithInt_withNSString_(jint value, NSString *errorMessage);

FOUNDATION_EXPORT jlong RepackagedComAndroidInternalUtilPreconditions_checkArgumentNonnegativeWithLong_withNSString_(jlong value, NSString *errorMessage);

FOUNDATION_EXPORT jint RepackagedComAndroidInternalUtilPreconditions_checkArgumentPositiveWithInt_withNSString_(jint value, NSString *errorMessage);

FOUNDATION_EXPORT jfloat RepackagedComAndroidInternalUtilPreconditions_checkArgumentFiniteWithFloat_withNSString_(jfloat value, NSString *valueName);

FOUNDATION_EXPORT jfloat RepackagedComAndroidInternalUtilPreconditions_checkArgumentInRangeWithFloat_withFloat_withFloat_withNSString_(jfloat value, jfloat lower, jfloat upper, NSString *valueName);

FOUNDATION_EXPORT jint RepackagedComAndroidInternalUtilPreconditions_checkArgumentInRangeWithInt_withInt_withInt_withNSString_(jint value, jint lower, jint upper, NSString *valueName);

FOUNDATION_EXPORT IOSObjectArray *RepackagedComAndroidInternalUtilPreconditions_checkArrayElementsNotNullWithNSObjectArray_withNSString_(IOSObjectArray *value, NSString *valueName);

FOUNDATION_EXPORT id<JavaUtilCollection> RepackagedComAndroidInternalUtilPreconditions_checkCollectionElementsNotNullWithJavaUtilCollection_withNSString_(id<JavaUtilCollection> value, NSString *valueName);

FOUNDATION_EXPORT id<JavaUtilCollection> RepackagedComAndroidInternalUtilPreconditions_checkCollectionNotEmptyWithJavaUtilCollection_withNSString_(id<JavaUtilCollection> value, NSString *valueName);

FOUNDATION_EXPORT IOSFloatArray *RepackagedComAndroidInternalUtilPreconditions_checkArrayElementsInRangeWithFloatArray_withFloat_withFloat_withNSString_(IOSFloatArray *value, jfloat lower, jfloat upper, NSString *valueName);

FOUNDATION_EXPORT void RepackagedComAndroidInternalUtilPreconditions_init(RepackagedComAndroidInternalUtilPreconditions *self);

FOUNDATION_EXPORT RepackagedComAndroidInternalUtilPreconditions *new_RepackagedComAndroidInternalUtilPreconditions_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(RepackagedComAndroidInternalUtilPreconditions)

#endif // _RepackagedComAndroidInternalUtilPreconditions_H_
