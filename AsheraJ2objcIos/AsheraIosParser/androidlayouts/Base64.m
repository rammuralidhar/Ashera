//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/androidlayouts/repackaged/android/util/Base64.java
//


#include "Base64.h"
#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/UnsupportedEncodingException.h"
#include "java/lang/AssertionError.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/System.h"

#line 0 "/Users/ramm/git/Ashera/AsheraAndroidParser/androidlayouts/repackaged/android/util/Base64.java"

@interface RepackagedAndroidUtilBase64 ()

- (instancetype)init;

@end

__attribute__((unused)) static void RepackagedAndroidUtilBase64_init(RepackagedAndroidUtilBase64 *self);

__attribute__((unused)) static RepackagedAndroidUtilBase64 *new_RepackagedAndroidUtilBase64_init() NS_RETURNS_RETAINED;

#define RepackagedAndroidUtilBase64_Decoder_SKIP -1
#define RepackagedAndroidUtilBase64_Decoder_EQUALS -2

@interface RepackagedAndroidUtilBase64_Decoder () {
 @public
  /**
   @brief States 0-3 are reading through the next input tuple.
   State 4 is having read one '=' and expecting exactly one more. State 5 is expecting no more data or padding characters in the input. State 6 is the error state; an error has been detected in the input and no future input can "fix" it.
   */
  jint state_;
  jint value_;
  IOSIntArray *alphabet_;
}

@end

J2OBJC_FIELD_SETTER(RepackagedAndroidUtilBase64_Decoder, alphabet_, IOSIntArray *)

static IOSIntArray *RepackagedAndroidUtilBase64_Decoder_DECODE_;
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidUtilBase64_Decoder, DECODE_, IOSIntArray *)

static IOSIntArray *RepackagedAndroidUtilBase64_Decoder_DECODE_WEBSAFE_;
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidUtilBase64_Decoder, DECODE_WEBSAFE_, IOSIntArray *)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidUtilBase64_Decoder, SKIP, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidUtilBase64_Decoder, EQUALS, jint)

@interface RepackagedAndroidUtilBase64_Encoder () {
 @public
  IOSByteArray *tail_;
  jint count_;
  IOSByteArray *alphabet_;
}

@end

J2OBJC_FIELD_SETTER(RepackagedAndroidUtilBase64_Encoder, tail_, IOSByteArray *)
J2OBJC_FIELD_SETTER(RepackagedAndroidUtilBase64_Encoder, alphabet_, IOSByteArray *)

static IOSByteArray *RepackagedAndroidUtilBase64_Encoder_ENCODE_;
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidUtilBase64_Encoder, ENCODE_, IOSByteArray *)

static IOSByteArray *RepackagedAndroidUtilBase64_Encoder_ENCODE_WEBSAFE_;
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidUtilBase64_Encoder, ENCODE_WEBSAFE_, IOSByteArray *)


#line 27
@implementation RepackagedAndroidUtilBase64


#line 117
+ (IOSByteArray *)decodeWithNSString:(NSString *)str
                             withInt:(jint)flags {
  return RepackagedAndroidUtilBase64_decodeWithNSString_withInt_(str, flags);
}


#line 135
+ (IOSByteArray *)decodeWithByteArray:(IOSByteArray *)input
                              withInt:(jint)flags {
  return RepackagedAndroidUtilBase64_decodeWithByteArray_withInt_(input, flags);
}


#line 155
+ (IOSByteArray *)decodeWithByteArray:(IOSByteArray *)input
                              withInt:(jint)offset
                              withInt:(jint)len
                              withInt:(jint)flags {
  return RepackagedAndroidUtilBase64_decodeWithByteArray_withInt_withInt_withInt_(input, offset, len, flags);
}


#line 454
+ (NSString *)encodeToStringWithByteArray:(IOSByteArray *)input
                                  withInt:(jint)flags {
  return RepackagedAndroidUtilBase64_encodeToStringWithByteArray_withInt_(input, flags);
}


#line 475
+ (NSString *)encodeToStringWithByteArray:(IOSByteArray *)input
                                  withInt:(jint)offset
                                  withInt:(jint)len
                                  withInt:(jint)flags {
  return RepackagedAndroidUtilBase64_encodeToStringWithByteArray_withInt_withInt_withInt_(input, offset, len, flags);
}


#line 493
+ (IOSByteArray *)encodeWithByteArray:(IOSByteArray *)input
                              withInt:(jint)flags {
  return RepackagedAndroidUtilBase64_encodeWithByteArray_withInt_(input, flags);
}


#line 509
+ (IOSByteArray *)encodeWithByteArray:(IOSByteArray *)input
                              withInt:(jint)offset
                              withInt:(jint)len
                              withInt:(jint)flags {
  return RepackagedAndroidUtilBase64_encodeWithByteArray_withInt_withInt_withInt_(input, offset, len, flags);
}


#line 740
- (instancetype)init {
  RepackagedAndroidUtilBase64_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "decodeWithNSString:withInt:", "decode", "[B", 0x9, NULL, NULL },
    { "decodeWithByteArray:withInt:", "decode", "[B", 0x9, NULL, NULL },
    { "decodeWithByteArray:withInt:withInt:withInt:", "decode", "[B", 0x9, NULL, NULL },
    { "encodeToStringWithByteArray:withInt:", "encodeToString", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "encodeToStringWithByteArray:withInt:withInt:withInt:", "encodeToString", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "encodeWithByteArray:withInt:", "encode", "[B", 0x9, NULL, NULL },
    { "encodeWithByteArray:withInt:withInt:withInt:", "encode", "[B", 0x9, NULL, NULL },
    { "init", "Base64", NULL, 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "DEFAULT_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidUtilBase64_DEFAULT },
    { "NO_PADDING_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidUtilBase64_NO_PADDING },
    { "NO_WRAP_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidUtilBase64_NO_WRAP },
    { "CRLF_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidUtilBase64_CRLF },
    { "URL_SAFE_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidUtilBase64_URL_SAFE },
    { "NO_CLOSE_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidUtilBase64_NO_CLOSE },
  };
  static const char *inner_classes[] = {"Lrepackaged.android.util.Base64$Coder;", "Lrepackaged.android.util.Base64$Decoder;", "Lrepackaged.android.util.Base64$Encoder;"};
  static const J2ObjcClassInfo _RepackagedAndroidUtilBase64 = { 2, "Base64", "repackaged.android.util", NULL, 0x1, 8, methods, 6, fields, 0, NULL, 3, inner_classes, NULL, NULL };
  return &_RepackagedAndroidUtilBase64;
}

@end


#line 117
IOSByteArray *RepackagedAndroidUtilBase64_decodeWithNSString_withInt_(NSString *str, jint flags) {
  RepackagedAndroidUtilBase64_initialize();
  
#line 118
  return RepackagedAndroidUtilBase64_decodeWithByteArray_withInt_([((NSString *) nil_chk(str)) getBytes], flags);
}


#line 135
IOSByteArray *RepackagedAndroidUtilBase64_decodeWithByteArray_withInt_(IOSByteArray *input, jint flags) {
  RepackagedAndroidUtilBase64_initialize();
  
#line 136
  return RepackagedAndroidUtilBase64_decodeWithByteArray_withInt_withInt_withInt_(input, 0, ((IOSByteArray *) nil_chk(input))->size_, flags);
}


#line 155
IOSByteArray *RepackagedAndroidUtilBase64_decodeWithByteArray_withInt_withInt_withInt_(IOSByteArray *input, jint offset, jint len, jint flags) {
  RepackagedAndroidUtilBase64_initialize();
  
#line 158
  RepackagedAndroidUtilBase64_Decoder *decoder = new_RepackagedAndroidUtilBase64_Decoder_initWithInt_withByteArray_(flags, [IOSByteArray newArrayWithLength:len * 3 / 4]);
  
#line 160
  if (![decoder processWithByteArray:input withInt:offset withInt:len withBoolean:YES]) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"bad base-64");
  }
  
#line 165
  if (decoder->op_ == ((IOSByteArray *) nil_chk(decoder->output_))->size_) {
    return decoder->output_;
  }
  
#line 171
  IOSByteArray *temp = [IOSByteArray newArrayWithLength:decoder->op_];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(decoder->output_, 0, temp, 0, decoder->op_);
  return temp;
}


#line 454
NSString *RepackagedAndroidUtilBase64_encodeToStringWithByteArray_withInt_(IOSByteArray *input, jint flags) {
  RepackagedAndroidUtilBase64_initialize();
  
#line 455
  @try {
    return [NSString stringWithBytes:RepackagedAndroidUtilBase64_encodeWithByteArray_withInt_(input, flags) charsetName:@"US-ASCII"];
  }
  @catch (
#line 457
  JavaIoUnsupportedEncodingException *e) {
    
#line 459
    @throw new_JavaLangAssertionError_initWithId_(e);
  }
}


#line 475
NSString *RepackagedAndroidUtilBase64_encodeToStringWithByteArray_withInt_withInt_withInt_(IOSByteArray *input, jint offset, jint len, jint flags) {
  RepackagedAndroidUtilBase64_initialize();
  
#line 476
  @try {
    return [NSString stringWithBytes:RepackagedAndroidUtilBase64_encodeWithByteArray_withInt_withInt_withInt_(input, offset, len, flags) charsetName:@"US-ASCII"];
  }
  @catch (
#line 478
  JavaIoUnsupportedEncodingException *e) {
    
#line 480
    @throw new_JavaLangAssertionError_initWithId_(e);
  }
}


#line 493
IOSByteArray *RepackagedAndroidUtilBase64_encodeWithByteArray_withInt_(IOSByteArray *input, jint flags) {
  RepackagedAndroidUtilBase64_initialize();
  
#line 494
  return RepackagedAndroidUtilBase64_encodeWithByteArray_withInt_withInt_withInt_(input, 0, ((IOSByteArray *) nil_chk(input))->size_, flags);
}


#line 509
IOSByteArray *RepackagedAndroidUtilBase64_encodeWithByteArray_withInt_withInt_withInt_(IOSByteArray *input, jint offset, jint len, jint flags) {
  RepackagedAndroidUtilBase64_initialize();
  
#line 510
  RepackagedAndroidUtilBase64_Encoder *encoder = new_RepackagedAndroidUtilBase64_Encoder_initWithInt_withByteArray_(flags, nil);
  
#line 513
  jint output_len = len / 3 * 4;
  
#line 516
  if (encoder->do_padding_) {
    if (len % 3 > 0) {
      output_len += 4;
    }
  }
  else {
    
#line 521
    switch (len % 3) {
      case 0:
      
#line 522
      break;
      case 1:
      
#line 523
      output_len += 2;
      
#line 523
      break;
      case 2:
      
#line 524
      output_len += 3;
      
#line 524
      break;
    }
  }
  
#line 529
  if (encoder->do_newline_ && len > 0) {
    output_len += (((len - 1) / (3 * RepackagedAndroidUtilBase64_Encoder_LINE_GROUPS)) + 1) *
#line 531
    (encoder->do_cr_ ? 2 : 1);
  }
  
#line 534
  encoder->output_ = [IOSByteArray newArrayWithLength:output_len];
  [encoder processWithByteArray:input withInt:offset withInt:len withBoolean:YES];
  
#line 537
  NSCAssert(encoder->op_ == output_len, @"repackaged/android/util/Base64.java:537 condition failed: assert encoder.op == output_len;");
  
#line 539
  return encoder->output_;
}


#line 740
void RepackagedAndroidUtilBase64_init(RepackagedAndroidUtilBase64 *self) {
  (void) NSObject_init(self);
}


#line 740
RepackagedAndroidUtilBase64 *new_RepackagedAndroidUtilBase64_init() {
  RepackagedAndroidUtilBase64 *self = [RepackagedAndroidUtilBase64 alloc];
  RepackagedAndroidUtilBase64_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RepackagedAndroidUtilBase64)


#line 71
@implementation RepackagedAndroidUtilBase64_Coder


#line 88
- (jboolean)processWithByteArray:(IOSByteArray *)input
                         withInt:(jint)offset
                         withInt:(jint)len
                     withBoolean:(jboolean)finish {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 95
- (jint)maxOutputSizeWithInt:(jint)len {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (instancetype)init {
  RepackagedAndroidUtilBase64_Coder_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "processWithByteArray:withInt:withInt:withBoolean:", "process", "Z", 0x401, NULL, NULL },
    { "maxOutputSizeWithInt:", "maxOutputSize", "I", 0x401, NULL, NULL },
    { "init", NULL, NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "output_", NULL, 0x1, "[B", NULL, NULL,  },
    { "op_", NULL, 0x1, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _RepackagedAndroidUtilBase64_Coder = { 2, "Coder", "repackaged.android.util", "Base64", 0x408, 3, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_RepackagedAndroidUtilBase64_Coder;
}

@end

void RepackagedAndroidUtilBase64_Coder_init(RepackagedAndroidUtilBase64_Coder *self) {
  (void) NSObject_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RepackagedAndroidUtilBase64_Coder)

J2OBJC_INITIALIZED_DEFN(RepackagedAndroidUtilBase64_Decoder)


#line 176
@implementation RepackagedAndroidUtilBase64_Decoder


#line 241
- (instancetype)initWithInt:(jint)flags
              withByteArray:(IOSByteArray *)output {
  RepackagedAndroidUtilBase64_Decoder_initWithInt_withByteArray_(self, flags, output);
  return self;
}


#line 253
- (jint)maxOutputSizeWithInt:(jint)len {
  return len * 3 / 4 + 10;
}


#line 263
- (jboolean)processWithByteArray:(IOSByteArray *)input
                         withInt:(jint)offset
                         withInt:(jint)len
                     withBoolean:(jboolean)finish {
  if (self->state_ == 6) return NO;
  
#line 266
  jint p = offset;
  len += offset;
  
#line 274
  jint state = self->state_;
  jint value = self->value_;
  jint op = 0;
  IOSByteArray *output = self->output_;
  IOSIntArray *alphabet = self->alphabet_;
  
#line 280
  while (p < len) {
    
#line 295
    if (state == 0) {
      while (p + 4 <= len &&
#line 297
      (value = ((LShift32(IOSIntArray_Get(nil_chk(alphabet), IOSByteArray_Get(nil_chk(input), p) & (jint) 0xff), 18)) |
#line 298
      (LShift32(IOSIntArray_Get(alphabet, IOSByteArray_Get(input, p + 1) & (jint) 0xff), 12)) |
#line 299
      (LShift32(IOSIntArray_Get(alphabet, IOSByteArray_Get(input, p + 2) & (jint) 0xff), 6)) |
#line 300
      (IOSIntArray_Get(alphabet, IOSByteArray_Get(input, p + 3) & (jint) 0xff)))) >= 0) {
        *IOSByteArray_GetRef(nil_chk(output), op + 2) = (jbyte) value;
        *IOSByteArray_GetRef(output, op + 1) = (jbyte) (RShift32(value, 8));
        *IOSByteArray_GetRef(output, op) = (jbyte) (RShift32(value, 16));
        op += 3;
        p += 4;
      }
      if (p >= len) break;
    }
    
#line 315
    jint d = IOSIntArray_Get(nil_chk(alphabet), IOSByteArray_Get(nil_chk(input), p++) & (jint) 0xff);
    
#line 317
    switch (state) {
      case 0:
      if (d >= 0) {
        value = d;
        ++state;
      }
      else
#line 322
      if (d != RepackagedAndroidUtilBase64_Decoder_SKIP) {
        self->state_ = 6;
        return NO;
      }
      break;
      
#line 328
      case 1:
      if (d >= 0) {
        value = (LShift32(value, 6)) | d;
        ++state;
      }
      else
#line 332
      if (d != RepackagedAndroidUtilBase64_Decoder_SKIP) {
        self->state_ = 6;
        return NO;
      }
      break;
      
#line 338
      case 2:
      if (d >= 0) {
        value = (LShift32(value, 6)) | d;
        ++state;
      }
      else
#line 342
      if (d == RepackagedAndroidUtilBase64_Decoder_EQUALS) {
        
#line 345
        *IOSByteArray_GetRef(nil_chk(output), op++) = (jbyte) (RShift32(value, 4));
        state = 4;
      }
      else
#line 347
      if (d != RepackagedAndroidUtilBase64_Decoder_SKIP) {
        self->state_ = 6;
        return NO;
      }
      break;
      
#line 353
      case 3:
      if (d >= 0) {
        
#line 356
        value = (LShift32(value, 6)) | d;
        *IOSByteArray_GetRef(nil_chk(output), op + 2) = (jbyte) value;
        *IOSByteArray_GetRef(output, op + 1) = (jbyte) (RShift32(value, 8));
        *IOSByteArray_GetRef(output, op) = (jbyte) (RShift32(value, 16));
        op += 3;
        state = 0;
      }
      else
#line 362
      if (d == RepackagedAndroidUtilBase64_Decoder_EQUALS) {
        
#line 365
        *IOSByteArray_GetRef(nil_chk(output), op + 1) = (jbyte) (RShift32(value, 2));
        *IOSByteArray_GetRef(output, op) = (jbyte) (RShift32(value, 10));
        op += 2;
        state = 5;
      }
      else
#line 369
      if (d != RepackagedAndroidUtilBase64_Decoder_SKIP) {
        self->state_ = 6;
        return NO;
      }
      break;
      
#line 375
      case 4:
      if (d == RepackagedAndroidUtilBase64_Decoder_EQUALS) {
        ++state;
      }
      else
#line 378
      if (d != RepackagedAndroidUtilBase64_Decoder_SKIP) {
        self->state_ = 6;
        return NO;
      }
      break;
      
#line 384
      case 5:
      if (d != RepackagedAndroidUtilBase64_Decoder_SKIP) {
        self->state_ = 6;
        return NO;
      }
      break;
    }
  }
  
#line 393
  if (!finish) {
    
#line 396
    self->state_ = state;
    self->value_ = value;
    self->op_ = op;
    return YES;
  }
  
#line 405
  switch (state) {
    case 0:
    
#line 408
    break;
    case 1:
    
#line 412
    self->state_ = 6;
    return NO;
    case 2:
    
#line 417
    *IOSByteArray_GetRef(nil_chk(output), op++) = (jbyte) (RShift32(value, 4));
    break;
    case 3:
    
#line 422
    *IOSByteArray_GetRef(nil_chk(output), op++) = (jbyte) (RShift32(value, 10));
    *IOSByteArray_GetRef(output, op++) = (jbyte) (RShift32(value, 2));
    break;
    case 4:
    
#line 427
    self->state_ = 6;
    return NO;
    case 5:
    
#line 432
    break;
  }
  
#line 435
  self->state_ = state;
  self->op_ = op;
  return YES;
}

+ (void)initialize {
  if (self == [RepackagedAndroidUtilBase64_Decoder class]) {
    RepackagedAndroidUtilBase64_Decoder_DECODE_ = [IOSIntArray newArrayWithInts:(jint[]){
#line 182
      -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
#line 183
      -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
#line 184
      -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, -1, -1, 63,
#line 185
      52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -1, -1, -1, -2, -1, -1,
#line 186
      -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,
#line 187
      15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1, -1, -1, -1, -1,
#line 188
      -1, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,
#line 189
      41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, -1, -1, -1, -1, -1,
#line 190
      -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
#line 191
      -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
#line 192
      -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
#line 193
      -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
#line 194
      -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
#line 195
      -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
#line 196
      -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
#line 197
      -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 } count:256];
      RepackagedAndroidUtilBase64_Decoder_DECODE_WEBSAFE_ = [IOSIntArray newArrayWithInts:(jint[]){
#line 205
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
#line 206
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
#line 207
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, -1,
#line 208
        52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -1, -1, -1, -2, -1, -1,
#line 209
        -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,
#line 210
        15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1, -1, -1, -1, 63,
#line 211
        -1, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,
#line 212
        41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, -1, -1, -1, -1, -1,
#line 213
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
#line 214
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
#line 215
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
#line 216
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
#line 217
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
#line 218
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
#line 219
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
#line 220
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 } count:256];
        J2OBJC_SET_INITIALIZED(RepackagedAndroidUtilBase64_Decoder)
      }
    }

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithInt:withByteArray:", "Decoder", NULL, 0x1, NULL, NULL },
    { "maxOutputSizeWithInt:", "maxOutputSize", "I", 0x1, NULL, NULL },
    { "processWithByteArray:withInt:withInt:withBoolean:", "process", "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "DECODE_", NULL, 0x1a, "[I", &RepackagedAndroidUtilBase64_Decoder_DECODE_, NULL,  },
    { "DECODE_WEBSAFE_", NULL, 0x1a, "[I", &RepackagedAndroidUtilBase64_Decoder_DECODE_WEBSAFE_, NULL,  },
    { "SKIP_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidUtilBase64_Decoder_SKIP },
    { "EQUALS_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidUtilBase64_Decoder_EQUALS },
    { "state_", NULL, 0x2, "I", NULL, NULL,  },
    { "value_", NULL, 0x2, "I", NULL, NULL,  },
    { "alphabet_", NULL, 0x12, "[I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _RepackagedAndroidUtilBase64_Decoder = { 2, "Decoder", "repackaged.android.util", "Base64", 0x8, 3, methods, 7, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_RepackagedAndroidUtilBase64_Decoder;
}

@end


#line 241
void RepackagedAndroidUtilBase64_Decoder_initWithInt_withByteArray_(RepackagedAndroidUtilBase64_Decoder *self, jint flags, IOSByteArray *output) {
  (void) RepackagedAndroidUtilBase64_Coder_init(self);
  
#line 242
  self->output_ = output;
  
#line 244
  self->alphabet_ = ((flags & RepackagedAndroidUtilBase64_URL_SAFE) == 0) ? RepackagedAndroidUtilBase64_Decoder_DECODE_ : RepackagedAndroidUtilBase64_Decoder_DECODE_WEBSAFE_;
  self->state_ = 0;
  self->value_ = 0;
}


#line 241
RepackagedAndroidUtilBase64_Decoder *new_RepackagedAndroidUtilBase64_Decoder_initWithInt_withByteArray_(jint flags, IOSByteArray *output) {
  RepackagedAndroidUtilBase64_Decoder *self = [RepackagedAndroidUtilBase64_Decoder alloc];
  RepackagedAndroidUtilBase64_Decoder_initWithInt_withByteArray_(self, flags, output);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RepackagedAndroidUtilBase64_Decoder)

J2OBJC_INITIALIZED_DEFN(RepackagedAndroidUtilBase64_Encoder)


#line 542
@implementation RepackagedAndroidUtilBase64_Encoder


#line 581
- (instancetype)initWithInt:(jint)flags
              withByteArray:(IOSByteArray *)output {
  RepackagedAndroidUtilBase64_Encoder_initWithInt_withByteArray_(self, flags, output);
  return self;
}


#line 599
- (jint)maxOutputSizeWithInt:(jint)len {
  return len * 8 / 5 + 10;
}

- (jboolean)processWithByteArray:(IOSByteArray *)input
                         withInt:(jint)offset
                         withInt:(jint)len
                     withBoolean:(jboolean)finish {
  
#line 605
  IOSByteArray *alphabet = self->alphabet_;
  IOSByteArray *output = self->output_;
  jint op = 0;
  jint count = self->count_;
  
#line 610
  jint p = offset;
  len += offset;
  jint v = -1;
  
#line 618
  switch (tailLen_) {
    case 0:
    
#line 621
    break;
    
#line 623
    case 1:
    if (p + 2 <= len) {
      jint unseq$1 =
#line 628
      p++;
      
#line 627
      v = (LShift32((IOSByteArray_Get(nil_chk(tail_), 0) & (jint) 0xff), 16)) |
#line 628
      (LShift32((IOSByteArray_Get(nil_chk(input), unseq$1) & (jint) 0xff), 8)) |
#line 629
      (IOSByteArray_Get(input, p++) & (jint) 0xff);
      tailLen_ = 0;
    }
    
#line 631
    ;
    break;
    
#line 634
    case 2:
    if (p + 1 <= len) {
      
#line 637
      v = (LShift32((IOSByteArray_Get(nil_chk(tail_), 0) & (jint) 0xff), 16)) |
#line 638
      (LShift32((IOSByteArray_Get(tail_, 1) & (jint) 0xff), 8)) |
#line 639
      (IOSByteArray_Get(nil_chk(input), p++) & (jint) 0xff);
      tailLen_ = 0;
    }
    break;
  }
  
#line 645
  if (v != -1) {
    *IOSByteArray_GetRef(nil_chk(output), op++) = IOSByteArray_Get(nil_chk(alphabet), (RShift32(v, 18)) & (jint) 0x3f);
    *IOSByteArray_GetRef(output, op++) = IOSByteArray_Get(alphabet, (RShift32(v, 12)) & (jint) 0x3f);
    *IOSByteArray_GetRef(output, op++) = IOSByteArray_Get(alphabet, (RShift32(v, 6)) & (jint) 0x3f);
    *IOSByteArray_GetRef(output, op++) = IOSByteArray_Get(alphabet, v & (jint) 0x3f);
    if (--count == 0) {
      if (do_cr_) *IOSByteArray_GetRef(output, op++) = 0x000d;
      *IOSByteArray_GetRef(output, op++) = 0x000a;
      count = RepackagedAndroidUtilBase64_Encoder_LINE_GROUPS;
    }
  }
  
#line 662
  while (p + 3 <= len) {
    v = (LShift32((IOSByteArray_Get(nil_chk(input), p) & (jint) 0xff), 16)) |
#line 664
    (LShift32((IOSByteArray_Get(input, p + 1) & (jint) 0xff), 8)) |
#line 665
    (IOSByteArray_Get(input, p + 2) & (jint) 0xff);
    *IOSByteArray_GetRef(nil_chk(output), op) = IOSByteArray_Get(nil_chk(alphabet), (RShift32(v, 18)) & (jint) 0x3f);
    *IOSByteArray_GetRef(output, op + 1) = IOSByteArray_Get(alphabet, (RShift32(v, 12)) & (jint) 0x3f);
    *IOSByteArray_GetRef(output, op + 2) = IOSByteArray_Get(alphabet, (RShift32(v, 6)) & (jint) 0x3f);
    *IOSByteArray_GetRef(output, op + 3) = IOSByteArray_Get(alphabet, v & (jint) 0x3f);
    p += 3;
    op += 4;
    if (--count == 0) {
      if (do_cr_) *IOSByteArray_GetRef(output, op++) = 0x000d;
      *IOSByteArray_GetRef(output, op++) = 0x000a;
      count = RepackagedAndroidUtilBase64_Encoder_LINE_GROUPS;
    }
  }
  
#line 679
  if (finish) {
    
#line 685
    if (p - tailLen_ == len - 1) {
      jint t = 0;
      v = LShift32(((tailLen_ > 0 ? IOSByteArray_Get(nil_chk(tail_), t++) : IOSByteArray_Get(nil_chk(input), p++)) & (jint) 0xff), 4);
      tailLen_ -= t;
      *IOSByteArray_GetRef(nil_chk(output), op++) = IOSByteArray_Get(nil_chk(alphabet), (RShift32(v, 6)) & (jint) 0x3f);
      *IOSByteArray_GetRef(output, op++) = IOSByteArray_Get(alphabet, v & (jint) 0x3f);
      if (do_padding_) {
        *IOSByteArray_GetRef(output, op++) = '=';
        *IOSByteArray_GetRef(output, op++) = '=';
      }
      if (do_newline_) {
        if (do_cr_) *IOSByteArray_GetRef(output, op++) = 0x000d;
        *IOSByteArray_GetRef(output, op++) = 0x000a;
      }
    }
    else
#line 699
    if (p - tailLen_ == len - 2) {
      jint t = 0;
      v = (LShift32(((tailLen_ > 1 ? IOSByteArray_Get(nil_chk(tail_), t++) : IOSByteArray_Get(nil_chk(input), p++)) & (jint) 0xff), 10)) |
#line 702
      (LShift32(((tailLen_ > 0 ? IOSByteArray_Get(nil_chk(tail_), t++) : IOSByteArray_Get(nil_chk(input), p++)) & (jint) 0xff), 2));
      tailLen_ -= t;
      *IOSByteArray_GetRef(nil_chk(output), op++) = IOSByteArray_Get(nil_chk(alphabet), (RShift32(v, 12)) & (jint) 0x3f);
      *IOSByteArray_GetRef(output, op++) = IOSByteArray_Get(alphabet, (RShift32(v, 6)) & (jint) 0x3f);
      *IOSByteArray_GetRef(output, op++) = IOSByteArray_Get(alphabet, v & (jint) 0x3f);
      if (do_padding_) {
        *IOSByteArray_GetRef(output, op++) = '=';
      }
      if (do_newline_) {
        if (do_cr_) *IOSByteArray_GetRef(output, op++) = 0x000d;
        *IOSByteArray_GetRef(output, op++) = 0x000a;
      }
    }
    else
#line 714
    if (do_newline_ && op > 0 && count != RepackagedAndroidUtilBase64_Encoder_LINE_GROUPS) {
      if (do_cr_) *IOSByteArray_GetRef(nil_chk(output), op++) = 0x000d;
      *IOSByteArray_GetRef(nil_chk(output), op++) = 0x000a;
    }
    
#line 719
    NSAssert(tailLen_ == 0, @"repackaged/android/util/Base64.java:719 condition failed: assert tailLen == 0;");
    NSAssert(p == len, @"repackaged/android/util/Base64.java:720 condition failed: assert p == len;");
  }
  else {
    
#line 725
    if (p == len - 1) {
      *IOSByteArray_GetRef(nil_chk(tail_), tailLen_++) = IOSByteArray_Get(nil_chk(input), p);
    }
    else
#line 727
    if (p == len - 2) {
      *IOSByteArray_GetRef(nil_chk(tail_), tailLen_++) = IOSByteArray_Get(nil_chk(input), p);
      *IOSByteArray_GetRef(tail_, tailLen_++) = IOSByteArray_Get(input, p + 1);
    }
  }
  
#line 733
  self->op_ = op;
  self->count_ = count;
  
#line 736
  return YES;
}

+ (void)initialize {
  if (self == [RepackagedAndroidUtilBase64_Encoder class]) {
    RepackagedAndroidUtilBase64_Encoder_ENCODE_ = [IOSByteArray newArrayWithBytes:(jbyte[]){
#line 555
      'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P',
#line 556
      'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f',
#line 557
      'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v',
#line 558
      'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '+', '/' } count:64];
      RepackagedAndroidUtilBase64_Encoder_ENCODE_WEBSAFE_ = [IOSByteArray newArrayWithBytes:(jbyte[]){
#line 566
        'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P',
#line 567
        'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f',
#line 568
        'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v',
#line 569
        'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '-', '_' } count:64];
        J2OBJC_SET_INITIALIZED(RepackagedAndroidUtilBase64_Encoder)
      }
    }

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithInt:withByteArray:", "Encoder", NULL, 0x1, NULL, NULL },
    { "maxOutputSizeWithInt:", "maxOutputSize", "I", 0x1, NULL, NULL },
    { "processWithByteArray:withInt:withInt:withBoolean:", "process", "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "LINE_GROUPS_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidUtilBase64_Encoder_LINE_GROUPS },
    { "ENCODE_", NULL, 0x1a, "[B", &RepackagedAndroidUtilBase64_Encoder_ENCODE_, NULL,  },
    { "ENCODE_WEBSAFE_", NULL, 0x1a, "[B", &RepackagedAndroidUtilBase64_Encoder_ENCODE_WEBSAFE_, NULL,  },
    { "tail_", NULL, 0x12, "[B", NULL, NULL,  },
    { "tailLen_", NULL, 0x0, "I", NULL, NULL,  },
    { "count_", NULL, 0x2, "I", NULL, NULL,  },
    { "do_padding_", NULL, 0x11, "Z", NULL, NULL,  },
    { "do_newline_", NULL, 0x11, "Z", NULL, NULL,  },
    { "do_cr_", NULL, 0x11, "Z", NULL, NULL,  },
    { "alphabet_", NULL, 0x12, "[B", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _RepackagedAndroidUtilBase64_Encoder = { 2, "Encoder", "repackaged.android.util", "Base64", 0x8, 3, methods, 10, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_RepackagedAndroidUtilBase64_Encoder;
}

@end


#line 581
void RepackagedAndroidUtilBase64_Encoder_initWithInt_withByteArray_(RepackagedAndroidUtilBase64_Encoder *self, jint flags, IOSByteArray *output) {
  (void) RepackagedAndroidUtilBase64_Coder_init(self);
  
#line 582
  self->output_ = output;
  
#line 584
  self->do_padding_ = ((flags & RepackagedAndroidUtilBase64_NO_PADDING) == 0);
  self->do_newline_ = ((flags & RepackagedAndroidUtilBase64_NO_WRAP) == 0);
  self->do_cr_ = ((flags & RepackagedAndroidUtilBase64_CRLF) != 0);
  self->alphabet_ = ((flags & RepackagedAndroidUtilBase64_URL_SAFE) == 0) ? RepackagedAndroidUtilBase64_Encoder_ENCODE_ : RepackagedAndroidUtilBase64_Encoder_ENCODE_WEBSAFE_;
  
#line 589
  self->tail_ = [IOSByteArray newArrayWithLength:2];
  self->tailLen_ = 0;
  
#line 592
  self->count_ = self->do_newline_ ? RepackagedAndroidUtilBase64_Encoder_LINE_GROUPS : -1;
}


#line 581
RepackagedAndroidUtilBase64_Encoder *new_RepackagedAndroidUtilBase64_Encoder_initWithInt_withByteArray_(jint flags, IOSByteArray *output) {
  RepackagedAndroidUtilBase64_Encoder *self = [RepackagedAndroidUtilBase64_Encoder alloc];
  RepackagedAndroidUtilBase64_Encoder_initWithInt_withByteArray_(self, flags, output);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RepackagedAndroidUtilBase64_Encoder)
