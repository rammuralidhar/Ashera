//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/androidlayouts/repackaged/android/util/ArrayMap.java
//


#include "ArrayMap.h"
#include "ContainerHelpers.h"
#include "EmptyArray.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "Log.h"
#include "MapCollections.h"
#include "java/lang/ClassCastException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/lang/Throwable.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/Collection.h"
#include "java/util/Map.h"
#include "java/util/Set.h"

#line 0 "/Users/ramm/git/Ashera/AsheraAndroidParser/androidlayouts/repackaged/android/util/ArrayMap.java"

#define RepackagedAndroidUtilArrayMap_DEBUG NO
#define RepackagedAndroidUtilArrayMap_BASE_SIZE 4
#define RepackagedAndroidUtilArrayMap_CACHE_SIZE 10

@interface RepackagedAndroidUtilArrayMap ()

- (void)allocArraysWithInt:(jint)size OBJC_METHOD_FAMILY_NONE;

+ (void)freeArraysWithIntArray:(IOSIntArray *)hashes
             withNSObjectArray:(IOSObjectArray *)array
                       withInt:(jint)size;

- (instancetype)initWithBoolean:(jboolean)immutable;

- (RepackagedAndroidUtilMapCollections *)getCollection;

@end

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidUtilArrayMap, DEBUG, jboolean)

static NSString *RepackagedAndroidUtilArrayMap_TAG_ = 
#line 49
@"ArrayMap";
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidUtilArrayMap, TAG_, NSString *)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidUtilArrayMap, BASE_SIZE, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidUtilArrayMap, CACHE_SIZE, jint)

__attribute__((unused)) static void RepackagedAndroidUtilArrayMap_allocArraysWithInt_(RepackagedAndroidUtilArrayMap *self, jint size);

__attribute__((unused)) static void RepackagedAndroidUtilArrayMap_freeArraysWithIntArray_withNSObjectArray_withInt_(IOSIntArray *hashes, IOSObjectArray *array, jint size);

__attribute__((unused)) static void RepackagedAndroidUtilArrayMap_initWithBoolean_(RepackagedAndroidUtilArrayMap *self, jboolean immutable);

__attribute__((unused)) static RepackagedAndroidUtilArrayMap *new_RepackagedAndroidUtilArrayMap_initWithBoolean_(jboolean immutable) NS_RETURNS_RETAINED;

__attribute__((unused)) static RepackagedAndroidUtilMapCollections *RepackagedAndroidUtilArrayMap_getCollection(RepackagedAndroidUtilArrayMap *self);

@interface RepackagedAndroidUtilArrayMap_$1 : RepackagedAndroidUtilMapCollections {
 @public
  RepackagedAndroidUtilArrayMap *this$0_;
}

- (jint)colGetSize;

- (id)colGetEntryWithInt:(jint)index
                 withInt:(jint)offset;

- (jint)colIndexOfKeyWithId:(id)key;

- (jint)colIndexOfValueWithId:(id)value;

- (id<JavaUtilMap>)colGetMap;

- (void)colPutWithId:(id)key
              withId:(id)value;

- (id)colSetValueWithInt:(jint)index
                  withId:(id)value;

- (void)colRemoveAtWithInt:(jint)index;

- (void)colClear;

- (instancetype)initWithRepackagedAndroidUtilArrayMap:(RepackagedAndroidUtilArrayMap *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(RepackagedAndroidUtilArrayMap_$1)

J2OBJC_FIELD_SETTER(RepackagedAndroidUtilArrayMap_$1, this$0_, RepackagedAndroidUtilArrayMap *)

__attribute__((unused)) static void RepackagedAndroidUtilArrayMap_$1_initWithRepackagedAndroidUtilArrayMap_(RepackagedAndroidUtilArrayMap_$1 *self, RepackagedAndroidUtilArrayMap *outer$);

__attribute__((unused)) static RepackagedAndroidUtilArrayMap_$1 *new_RepackagedAndroidUtilArrayMap_$1_initWithRepackagedAndroidUtilArrayMap_(RepackagedAndroidUtilArrayMap *outer$) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(RepackagedAndroidUtilArrayMap_$1)

J2OBJC_INITIALIZED_DEFN(RepackagedAndroidUtilArrayMap)

RepackagedAndroidUtilArrayMap *RepackagedAndroidUtilArrayMap_EMPTY_;
IOSObjectArray *RepackagedAndroidUtilArrayMap_mBaseCache_;
jint RepackagedAndroidUtilArrayMap_mBaseCacheSize_;
IOSObjectArray *RepackagedAndroidUtilArrayMap_mTwiceBaseCache_;
jint RepackagedAndroidUtilArrayMap_mTwiceBaseCacheSize_;
IOSIntArray *RepackagedAndroidUtilArrayMap_EMPTY_IMMUTABLE_INTS_;


#line 47
@implementation RepackagedAndroidUtilArrayMap


#line 88
- (jint)indexOfWithId:(id)key
              withInt:(jint)hash_ {
  jint N = mSize_;
  
#line 92
  if (N == 0) {
    return ~0;
  }
  
#line 96
  jint index = RepackagedAndroidUtilContainerHelpers_binarySearchWithIntArray_withInt_withInt_(mHashes_, N, hash_);
  
#line 99
  if (index < 0) {
    return index;
  }
  
#line 104
  if ([nil_chk(key) isEqual:IOSObjectArray_Get(nil_chk(mArray_), LShift32(index, 1))]) {
    return index;
  }
  
#line 109
  jint end;
  for (end = index + 1; end < N && IOSIntArray_Get(nil_chk(mHashes_), end) == hash_; end++) {
    if ([key isEqual:IOSObjectArray_Get(mArray_, LShift32(end, 1))]) return end;
  }
  
#line 115
  for (jint i = index - 1; i >= 0 && IOSIntArray_Get(nil_chk(mHashes_), i) == hash_; i--) {
    if ([key isEqual:IOSObjectArray_Get(mArray_, LShift32(i, 1))]) return i;
  }
  
#line 123
  return ~end;
}


#line 126
- (jint)indexOfNull {
  jint N = mSize_;
  
#line 130
  if (N == 0) {
    return ~0;
  }
  
#line 134
  jint index = RepackagedAndroidUtilContainerHelpers_binarySearchWithIntArray_withInt_withInt_(mHashes_, N, 0);
  
#line 137
  if (index < 0) {
    return index;
  }
  
#line 142
  if (nil == IOSObjectArray_Get(nil_chk(mArray_), LShift32(index, 1))) {
    return index;
  }
  
#line 147
  jint end;
  for (end = index + 1; end < N && IOSIntArray_Get(nil_chk(mHashes_), end) == 0; end++) {
    if (nil == IOSObjectArray_Get(mArray_, LShift32(end, 1))) return end;
  }
  
#line 153
  for (jint i = index - 1; i >= 0 && IOSIntArray_Get(nil_chk(mHashes_), i) == 0; i--) {
    if (nil == IOSObjectArray_Get(mArray_, LShift32(i, 1))) return i;
  }
  
#line 161
  return ~end;
}


#line 164
- (void)allocArraysWithInt:(jint)size {
  RepackagedAndroidUtilArrayMap_allocArraysWithInt_(self, size);
}


#line 202
+ (void)freeArraysWithIntArray:(IOSIntArray *)hashes
             withNSObjectArray:(IOSObjectArray *)array
                       withInt:(jint)size {
  RepackagedAndroidUtilArrayMap_freeArraysWithIntArray_withNSObjectArray_withInt_(hashes, array, size);
}


#line 238
- (instancetype)init {
  RepackagedAndroidUtilArrayMap_init(self);
  return self;
}


#line 247
- (instancetype)initWithInt:(jint)capacity {
  RepackagedAndroidUtilArrayMap_initWithInt_(self, capacity);
  return self;
}


#line 257
- (instancetype)initWithBoolean:(jboolean)immutable {
  RepackagedAndroidUtilArrayMap_initWithBoolean_(self, immutable);
  return self;
}


#line 269
- (instancetype)initWithRepackagedAndroidUtilArrayMap:(RepackagedAndroidUtilArrayMap *)map {
  RepackagedAndroidUtilArrayMap_initWithRepackagedAndroidUtilArrayMap_(self, map);
  return self;
}


#line 280
- (void)clear {
  if (mSize_ > 0) {
    RepackagedAndroidUtilArrayMap_freeArraysWithIntArray_withNSObjectArray_withInt_(mHashes_, mArray_, mSize_);
    mHashes_ = RepackagedLibcoreUtilEmptyArray_get_INT_();
    mArray_ = RepackagedLibcoreUtilEmptyArray_get_OBJECT_();
    mSize_ = 0;
  }
}


#line 293
- (void)erase {
  if (mSize_ > 0) {
    jint N = LShift32(mSize_, 1);
    IOSObjectArray *array = mArray_;
    for (jint i = 0; i < N; i++) {
      (void) IOSObjectArray_Set(nil_chk(array), i, nil);
    }
    mSize_ = 0;
  }
}


#line 308
- (void)ensureCapacityWithInt:(jint)minimumCapacity {
  if (((IOSIntArray *) nil_chk(mHashes_))->size_ < minimumCapacity) {
    IOSIntArray *ohashes = mHashes_;
    IOSObjectArray *oarray = mArray_;
    RepackagedAndroidUtilArrayMap_allocArraysWithInt_(self, minimumCapacity);
    if (mSize_ > 0) {
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(ohashes, 0, mHashes_, 0, mSize_);
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(oarray, 0, mArray_, 0, LShift32(mSize_, 1));
    }
    RepackagedAndroidUtilArrayMap_freeArraysWithIntArray_withNSObjectArray_withInt_(ohashes, oarray, mSize_);
  }
}


#line 328
- (jboolean)containsKeyWithId:(id)key {
  return [self indexOfKeyWithId:key] >= 0;
}


#line 338
- (jint)indexOfKeyWithId:(id)key {
  return key == nil ? [self indexOfNull] : [self indexOfWithId:key withInt:((jint) [key hash])];
}

- (jint)indexOfValueWithId:(id)value {
  jint N = mSize_ * 2;
  IOSObjectArray *array = mArray_;
  if (value == nil) {
    for (jint i = 1; i < N; i += 2) {
      if (IOSObjectArray_Get(nil_chk(array), i) == nil) {
        return RShift32(i, 1);
      }
    }
  }
  else {
    
#line 352
    for (jint i = 1; i < N; i += 2) {
      if ([value isEqual:IOSObjectArray_Get(nil_chk(array), i)]) {
        return RShift32(i, 1);
      }
    }
  }
  return -1;
}


#line 369
- (jboolean)containsValueWithId:(id)value {
  return [self indexOfValueWithId:value] >= 0;
}


#line 380
- (id)getWithId:(id)key {
  jint index = [self indexOfKeyWithId:key];
  return index >= 0 ? (id) IOSObjectArray_Get(nil_chk(mArray_), (LShift32(index, 1)) + 1) : nil;
}


#line 390
- (id)keyAtWithInt:(jint)index {
  return (id) IOSObjectArray_Get(nil_chk(mArray_), LShift32(index, 1));
}


#line 399
- (id)valueAtWithInt:(jint)index {
  return (id) IOSObjectArray_Get(nil_chk(mArray_), (LShift32(index, 1)) + 1);
}


#line 409
- (id)setValueAtWithInt:(jint)index
                 withId:(id)value {
  index = (LShift32(index, 1)) + 1;
  id old = (id) IOSObjectArray_Get(nil_chk(mArray_), index);
  (void) IOSObjectArray_Set(mArray_, index, value);
  return old;
}


#line 420
- (jboolean)isEmpty {
  return mSize_ <= 0;
}


#line 433
- (id)putWithId:(id)key
         withId:(id)value {
  jint hash_;
  jint index;
  if (key == nil) {
    hash_ = 0;
    index = [self indexOfNull];
  }
  else {
    
#line 440
    hash_ = ((jint) [key hash]);
    index = [self indexOfWithId:key withInt:hash_];
  }
  if (index >= 0) {
    index = (LShift32(index, 1)) + 1;
    id old = (id) IOSObjectArray_Get(nil_chk(mArray_), index);
    (void) IOSObjectArray_Set(mArray_, index, value);
    return old;
  }
  
#line 450
  index = ~index;
  if (mSize_ >= ((IOSIntArray *) nil_chk(mHashes_))->size_) {
    jint n = mSize_ >= (RepackagedAndroidUtilArrayMap_BASE_SIZE * 2) ? (mSize_ + (RShift32(mSize_, 1))) :
#line 453
    (mSize_ >= RepackagedAndroidUtilArrayMap_BASE_SIZE ? (RepackagedAndroidUtilArrayMap_BASE_SIZE * 2) : RepackagedAndroidUtilArrayMap_BASE_SIZE);
    
#line 457
    IOSIntArray *ohashes = mHashes_;
    IOSObjectArray *oarray = mArray_;
    RepackagedAndroidUtilArrayMap_allocArraysWithInt_(self, n);
    
#line 461
    if (mHashes_->size_ > 0) {
      
#line 463
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(ohashes, 0, mHashes_, 0, ohashes->size_);
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(oarray, 0, mArray_, 0, ((IOSObjectArray *) nil_chk(oarray))->size_);
    }
    
#line 467
    RepackagedAndroidUtilArrayMap_freeArraysWithIntArray_withNSObjectArray_withInt_(ohashes, oarray, mSize_);
  }
  
#line 470
  if (index < mSize_) {
    
#line 473
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(mHashes_, index, mHashes_, index + 1, mSize_ - index);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(mArray_, LShift32(index, 1), mArray_, LShift32((index + 1), 1), LShift32((mSize_ - index), 1));
  }
  
#line 477
  *IOSIntArray_GetRef(mHashes_, index) = hash_;
  (void) IOSObjectArray_Set(nil_chk(mArray_), LShift32(index, 1), key);
  (void) IOSObjectArray_Set(mArray_, (LShift32(index, 1)) + 1, value);
  mSize_++;
  return nil;
}


#line 489
- (void)appendWithId:(id)key
              withId:(id)value {
  jint index = mSize_;
  jint hash_ = key == nil ? 0 : ((jint) [key hash]);
  if (index >= ((IOSIntArray *) nil_chk(mHashes_))->size_) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"Array is full");
  }
  if (index > 0 && IOSIntArray_Get(mHashes_, index - 1) > hash_) {
    JavaLangRuntimeException *e = new_JavaLangRuntimeException_initWithNSString_(@"here");
    (void) [e fillInStackTrace];
    RepackagedAndroidUtilLog_wWithNSString_withNSString_withJavaLangThrowable_(RepackagedAndroidUtilArrayMap_TAG_, JreStrcat("$I$I$I$@", @"New hash ", hash_, @" is before end of array hash ", IOSIntArray_Get(
#line 499
    mHashes_, index - 1), @" at index ",
#line 500
    index, @" key ", key), e);
    (void) [self putWithId:key withId:value];
    return;
  }
  mSize_ = index + 1;
  *IOSIntArray_GetRef(mHashes_, index) = hash_;
  LShiftAssignInt(&index, 1);
  (void) IOSObjectArray_Set(nil_chk(mArray_), index, key);
  (void) IOSObjectArray_Set(mArray_, index + 1, value);
}


#line 519
- (void)validate {
  jint N = mSize_;
  if (N <= 1) {
    
#line 523
    return;
  }
  jint basehash = IOSIntArray_Get(nil_chk(mHashes_), 0);
  jint basei = 0;
  for (jint i = 1; i < N; i++) {
    jint hash_ = IOSIntArray_Get(mHashes_, i);
    if (hash_ != basehash) {
      basehash = hash_;
      basei = i;
      continue;
    }
    
#line 536
    id cur = IOSObjectArray_Get(nil_chk(mArray_), LShift32(i, 1));
    for (jint j = i - 1; j >= basei; j--) {
      id prev = IOSObjectArray_Get(mArray_, LShift32(j, 1));
      if (cur == prev) {
        @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@", @"Duplicate key in ArrayMap: ", cur));
      }
      if (cur != nil && prev != nil && [cur isEqual:prev]) {
        @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@", @"Duplicate key in ArrayMap: ", cur));
      }
    }
  }
}


#line 553
- (void)putAllWithRepackagedAndroidUtilArrayMap:(RepackagedAndroidUtilArrayMap *)array {
  jint N = ((RepackagedAndroidUtilArrayMap *) nil_chk(array))->mSize_;
  [self ensureCapacityWithInt:mSize_ + N];
  if (mSize_ == 0) {
    if (N > 0) {
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(array->mHashes_, 0, mHashes_, 0, N);
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(array->mArray_, 0, mArray_, 0, LShift32(N, 1));
      mSize_ = N;
    }
  }
  else {
    
#line 563
    for (jint i = 0; i < N; i++) {
      (void) [self putWithId:[array keyAtWithInt:i] withId:[array valueAtWithInt:i]];
    }
  }
}


#line 576
- (id)removeWithId:(id)key {
  jint index = [self indexOfKeyWithId:key];
  if (index >= 0) {
    return [self removeAtWithInt:index];
  }
  
#line 582
  return nil;
}


#line 590
- (id)removeAtWithInt:(jint)index {
  id old = IOSObjectArray_Get(nil_chk(mArray_), (LShift32(index, 1)) + 1);
  if (mSize_ <= 1) {
    
#line 595
    RepackagedAndroidUtilArrayMap_freeArraysWithIntArray_withNSObjectArray_withInt_(mHashes_, mArray_, mSize_);
    mHashes_ = RepackagedLibcoreUtilEmptyArray_get_INT_();
    mArray_ = RepackagedLibcoreUtilEmptyArray_get_OBJECT_();
    mSize_ = 0;
  }
  else {
    
#line 600
    if (((IOSIntArray *) nil_chk(mHashes_))->size_ > (RepackagedAndroidUtilArrayMap_BASE_SIZE * 2) && mSize_ < mHashes_->size_ / 3) {
      
#line 604
      jint n = mSize_ > (RepackagedAndroidUtilArrayMap_BASE_SIZE * 2) ? (mSize_ + (RShift32(mSize_, 1))) : (RepackagedAndroidUtilArrayMap_BASE_SIZE * 2);
      
#line 608
      IOSIntArray *ohashes = mHashes_;
      IOSObjectArray *oarray = mArray_;
      RepackagedAndroidUtilArrayMap_allocArraysWithInt_(self, n);
      
#line 612
      mSize_--;
      if (index > 0) {
        
#line 615
        JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(ohashes, 0, mHashes_, 0, index);
        JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(oarray, 0, mArray_, 0, LShift32(index, 1));
      }
      if (index < mSize_) {
        
#line 621
        JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(ohashes, index + 1, mHashes_, index, mSize_ - index);
        JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(oarray, LShift32((index + 1), 1), mArray_, LShift32(index, 1), LShift32(
#line 623
        (mSize_ - index), 1));
      }
    }
    else {
      
#line 626
      mSize_--;
      if (index < mSize_) {
        
#line 630
        JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(mHashes_, index + 1, mHashes_, index, mSize_ - index);
        JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(mArray_, LShift32((index + 1), 1), mArray_, LShift32(index, 1), LShift32(
#line 632
        (mSize_ - index), 1));
      }
      (void) IOSObjectArray_Set(mArray_, LShift32(mSize_, 1), nil);
      (void) IOSObjectArray_Set(mArray_, (LShift32(mSize_, 1)) + 1, nil);
    }
  }
  return (id) old;
}


#line 645
- (jint)size {
  return mSize_;
}


#line 658
- (jboolean)isEqual:(id)object {
  if (self == object) {
    return YES;
  }
  if ([JavaUtilMap_class_() isInstance:object]) {
    id<JavaUtilMap> map = (id<JavaUtilMap>) check_protocol_cast(object, @protocol(JavaUtilMap));
    if ([self size] != [((id<JavaUtilMap>) nil_chk(map)) size]) {
      return NO;
    }
    
#line 668
    @try {
      for (jint i = 0; i < mSize_; i++) {
        id key = [self keyAtWithInt:i];
        id mine = [self valueAtWithInt:i];
        id theirs = [map getWithId:key];
        if (mine == nil) {
          if (theirs != nil || ![map containsKeyWithId:key]) {
            return NO;
          }
        }
        else
#line 677
        if (![mine isEqual:theirs]) {
          return NO;
        }
      }
    }
    @catch (
#line 681
    JavaLangNullPointerException *ignored) {
      return NO;
    }
    @catch (
#line 683
    JavaLangClassCastException *ignored) {
      return NO;
    }
    return YES;
  }
  return NO;
}


#line 695
- (NSUInteger)hash {
  IOSIntArray *hashes = mHashes_;
  IOSObjectArray *array = mArray_;
  jint result = 0;
  for (jint i = 0, v = 1, s = mSize_; i < s; i++, v += 2) {
    id value = IOSObjectArray_Get(nil_chk(array), v);
    result += IOSIntArray_Get(nil_chk(hashes), i) ^ (value == nil ? 0 : ((jint) [value hash]));
  }
  return result;
}


#line 714
- (NSString *)description {
  if ([self isEmpty]) {
    return @"{}";
  }
  
#line 719
  JavaLangStringBuilder *buffer = new_JavaLangStringBuilder_initWithInt_(mSize_ * 28);
  (void) [buffer appendWithChar:'{'];
  for (jint i = 0; i < mSize_; i++) {
    if (i > 0) {
      (void) [buffer appendWithNSString:@", "];
    }
    id key = [self keyAtWithInt:i];
    if (key != self) {
      (void) [buffer appendWithId:key];
    }
    else {
      
#line 729
      (void) [buffer appendWithNSString:@"(this Map)"];
    }
    (void) [buffer appendWithChar:'='];
    id value = [self valueAtWithInt:i];
    if (value != self) {
      (void) [buffer appendWithId:value];
    }
    else {
      
#line 736
      (void) [buffer appendWithNSString:@"(this Map)"];
    }
  }
  (void) [buffer appendWithChar:'}'];
  return [buffer description];
}


#line 748
- (RepackagedAndroidUtilMapCollections *)getCollection {
  return RepackagedAndroidUtilArrayMap_getCollection(self);
}


#line 806
- (jboolean)containsAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  return RepackagedAndroidUtilMapCollections_containsAllHelperWithJavaUtilMap_withJavaUtilCollection_(self, collection);
}


#line 815
- (void)putAllWithJavaUtilMap:(id<JavaUtilMap>)map {
  [self ensureCapacityWithInt:mSize_ + [((id<JavaUtilMap>) nil_chk(map)) size]];
  for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([map entrySet])) {
    (void) [self putWithId:[((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey] withId:[entry_ getValue]];
  }
}


#line 827
- (jboolean)removeAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  return RepackagedAndroidUtilMapCollections_removeAllHelperWithJavaUtilMap_withJavaUtilCollection_(self, collection);
}


#line 837
- (jboolean)retainAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  return RepackagedAndroidUtilMapCollections_retainAllHelperWithJavaUtilMap_withJavaUtilCollection_(self, collection);
}


#line 856
- (id<JavaUtilSet>)entrySet {
  return [((RepackagedAndroidUtilMapCollections *) nil_chk(RepackagedAndroidUtilArrayMap_getCollection(self))) getEntrySet];
}


#line 869
- (id<JavaUtilSet>)keySet {
  return [((RepackagedAndroidUtilMapCollections *) nil_chk(RepackagedAndroidUtilArrayMap_getCollection(self))) getKeySet];
}


#line 882
- (id<JavaUtilCollection>)values {
  return [((RepackagedAndroidUtilMapCollections *) nil_chk(RepackagedAndroidUtilArrayMap_getCollection(self))) getValues];
}

+ (void)initialize {
  if (self == [RepackagedAndroidUtilArrayMap class]) {
    RepackagedAndroidUtilArrayMap_EMPTY_ = new_RepackagedAndroidUtilArrayMap_initWithBoolean_(
#line 65
    YES);
    RepackagedAndroidUtilArrayMap_EMPTY_IMMUTABLE_INTS_ = [IOSIntArray newArrayWithLength:
#line 81
    0];
    J2OBJC_SET_INITIALIZED(RepackagedAndroidUtilArrayMap)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "indexOfWithId:withInt:", "indexOf", "I", 0x0, NULL, NULL },
    { "indexOfNull", NULL, "I", 0x0, NULL, NULL },
    { "allocArraysWithInt:", "allocArrays", "V", 0x2, NULL, NULL },
    { "freeArraysWithIntArray:withNSObjectArray:withInt:", "freeArrays", "V", 0xa, NULL, NULL },
    { "init", "ArrayMap", NULL, 0x1, NULL, NULL },
    { "initWithInt:", "ArrayMap", NULL, 0x1, NULL, NULL },
    { "initWithBoolean:", "ArrayMap", NULL, 0x2, NULL, NULL },
    { "initWithRepackagedAndroidUtilArrayMap:", "ArrayMap", NULL, 0x1, NULL, NULL },
    { "clear", NULL, "V", 0x1, NULL, NULL },
    { "erase", NULL, "V", 0x1, NULL, NULL },
    { "ensureCapacityWithInt:", "ensureCapacity", "V", 0x1, NULL, NULL },
    { "containsKeyWithId:", "containsKey", "Z", 0x1, NULL, NULL },
    { "indexOfKeyWithId:", "indexOfKey", "I", 0x1, NULL, NULL },
    { "indexOfValueWithId:", "indexOfValue", "I", 0x0, NULL, NULL },
    { "containsValueWithId:", "containsValue", "Z", 0x1, NULL, NULL },
    { "getWithId:", "get", "TV;", 0x1, NULL, "(Ljava/lang/Object;)TV;" },
    { "keyAtWithInt:", "keyAt", "TK;", 0x1, NULL, "(I)TK;" },
    { "valueAtWithInt:", "valueAt", "TV;", 0x1, NULL, "(I)TV;" },
    { "setValueAtWithInt:withId:", "setValueAt", "TV;", 0x1, NULL, "(ITV;)TV;" },
    { "isEmpty", NULL, "Z", 0x1, NULL, NULL },
    { "putWithId:withId:", "put", "TV;", 0x1, NULL, "(TK;TV;)TV;" },
    { "appendWithId:withId:", "append", "V", 0x1, NULL, "(TK;TV;)V" },
    { "validate", NULL, "V", 0x1, NULL, NULL },
    { "putAllWithRepackagedAndroidUtilArrayMap:", "putAll", "V", 0x1, NULL, NULL },
    { "removeWithId:", "remove", "TV;", 0x1, NULL, "(Ljava/lang/Object;)TV;" },
    { "removeAtWithInt:", "removeAt", "TV;", 0x1, NULL, "(I)TV;" },
    { "size", NULL, "I", 0x1, NULL, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL, NULL },
    { "hash", "hashCode", "I", 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getCollection", NULL, "Lrepackaged.android.util.MapCollections;", 0x2, NULL, NULL },
    { "containsAllWithJavaUtilCollection:", "containsAll", "Z", 0x1, NULL, NULL },
    { "putAllWithJavaUtilMap:", "putAll", "V", 0x1, NULL, NULL },
    { "removeAllWithJavaUtilCollection:", "removeAll", "Z", 0x1, NULL, NULL },
    { "retainAllWithJavaUtilCollection:", "retainAll", "Z", 0x1, NULL, NULL },
    { "entrySet", NULL, "Ljava.util.Set;", 0x1, NULL, NULL },
    { "keySet", NULL, "Ljava.util.Set;", 0x1, NULL, NULL },
    { "values", NULL, "Ljava.util.Collection;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "DEBUG__", "DEBUG", 0x1a, "Z", NULL, NULL, .constantValue.asBOOL = RepackagedAndroidUtilArrayMap_DEBUG },
    { "TAG_", NULL, 0x1a, "Ljava.lang.String;", &RepackagedAndroidUtilArrayMap_TAG_, NULL,  },
    { "BASE_SIZE_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidUtilArrayMap_BASE_SIZE },
    { "CACHE_SIZE_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidUtilArrayMap_CACHE_SIZE },
    { "EMPTY_", NULL, 0x19, "Lrepackaged.android.util.ArrayMap;", &RepackagedAndroidUtilArrayMap_EMPTY_, NULL,  },
    { "mBaseCache_", NULL, 0x8, "[Ljava.lang.Object;", &RepackagedAndroidUtilArrayMap_mBaseCache_, NULL,  },
    { "mBaseCacheSize_", NULL, 0x8, "I", &RepackagedAndroidUtilArrayMap_mBaseCacheSize_, NULL,  },
    { "mTwiceBaseCache_", NULL, 0x8, "[Ljava.lang.Object;", &RepackagedAndroidUtilArrayMap_mTwiceBaseCache_, NULL,  },
    { "mTwiceBaseCacheSize_", NULL, 0x8, "I", &RepackagedAndroidUtilArrayMap_mTwiceBaseCacheSize_, NULL,  },
    { "EMPTY_IMMUTABLE_INTS_", NULL, 0x18, "[I", &RepackagedAndroidUtilArrayMap_EMPTY_IMMUTABLE_INTS_, NULL,  },
    { "mHashes_", NULL, 0x0, "[I", NULL, NULL,  },
    { "mArray_", NULL, 0x0, "[Ljava.lang.Object;", NULL, NULL,  },
    { "mSize_", NULL, 0x0, "I", NULL, NULL,  },
    { "mCollections_", NULL, 0x0, "Lrepackaged.android.util.MapCollections;", NULL, "Lrepackaged/android/util/MapCollections<TK;TV;>;",  },
  };
  static const J2ObjcClassInfo _RepackagedAndroidUtilArrayMap = { 2, "ArrayMap", "repackaged.android.util", NULL, 0x11, 38, methods, 14, fields, 0, NULL, 0, NULL, NULL, "<K:Ljava/lang/Object;V:Ljava/lang/Object;>Ljava/lang/Object;Ljava/util/Map<TK;TV;>;" };
  return &_RepackagedAndroidUtilArrayMap;
}

@end


#line 164
void RepackagedAndroidUtilArrayMap_allocArraysWithInt_(RepackagedAndroidUtilArrayMap *self, jint size) {
  if (self->mHashes_ == RepackagedAndroidUtilArrayMap_EMPTY_IMMUTABLE_INTS_) {
    @throw new_JavaLangUnsupportedOperationException_initWithNSString_(@"ArrayMap is immutable");
  }
  if (size == (RepackagedAndroidUtilArrayMap_BASE_SIZE * 2)) {
    @synchronized(RepackagedAndroidUtilArrayMap_class_()) {
      if (RepackagedAndroidUtilArrayMap_mTwiceBaseCache_ != nil) {
        IOSObjectArray *array = RepackagedAndroidUtilArrayMap_mTwiceBaseCache_;
        self->mArray_ = array;
        RepackagedAndroidUtilArrayMap_mTwiceBaseCache_ = (IOSObjectArray *) check_class_cast(IOSObjectArray_Get(array, 0), [IOSObjectArray class]);
        self->mHashes_ = (IOSIntArray *) check_class_cast(IOSObjectArray_Get(array, 1), [IOSIntArray class]);
        (void) IOSObjectArray_Set(array, 0, IOSObjectArray_Set(array, 1, nil));
        RepackagedAndroidUtilArrayMap_mTwiceBaseCacheSize_--;
        
#line 179
        return;
      }
    }
  }
  else
#line 182
  if (size == RepackagedAndroidUtilArrayMap_BASE_SIZE) {
    @synchronized(RepackagedAndroidUtilArrayMap_class_()) {
      if (RepackagedAndroidUtilArrayMap_mBaseCache_ != nil) {
        IOSObjectArray *array = RepackagedAndroidUtilArrayMap_mBaseCache_;
        self->mArray_ = array;
        RepackagedAndroidUtilArrayMap_mBaseCache_ = (IOSObjectArray *) check_class_cast(IOSObjectArray_Get(array, 0), [IOSObjectArray class]);
        self->mHashes_ = (IOSIntArray *) check_class_cast(IOSObjectArray_Get(array, 1), [IOSIntArray class]);
        (void) IOSObjectArray_Set(array, 0, IOSObjectArray_Set(array, 1, nil));
        RepackagedAndroidUtilArrayMap_mBaseCacheSize_--;
        
#line 193
        return;
      }
    }
  }
  
#line 198
  self->mHashes_ = [IOSIntArray newArrayWithLength:size];
  self->mArray_ = [IOSObjectArray newArrayWithLength:LShift32(size, 1) type:NSObject_class_()];
}


#line 202
void RepackagedAndroidUtilArrayMap_freeArraysWithIntArray_withNSObjectArray_withInt_(IOSIntArray *hashes, IOSObjectArray *array, jint size) {
  RepackagedAndroidUtilArrayMap_initialize();
  
#line 203
  if (((IOSIntArray *) nil_chk(hashes))->size_ == (RepackagedAndroidUtilArrayMap_BASE_SIZE * 2)) {
    @synchronized(RepackagedAndroidUtilArrayMap_class_()) {
      if (RepackagedAndroidUtilArrayMap_mTwiceBaseCacheSize_ < RepackagedAndroidUtilArrayMap_CACHE_SIZE) {
        (void) IOSObjectArray_Set(nil_chk(array), 0, RepackagedAndroidUtilArrayMap_mTwiceBaseCache_);
        (void) IOSObjectArray_Set(array, 1, hashes);
        for (jint i = (LShift32(size, 1)) - 1; i >= 2; i--) {
          (void) IOSObjectArray_Set(array, i, nil);
        }
        RepackagedAndroidUtilArrayMap_mTwiceBaseCache_ = array;
        RepackagedAndroidUtilArrayMap_mTwiceBaseCacheSize_++;
      }
    }
  }
  else
#line 217
  if (hashes->size_ == RepackagedAndroidUtilArrayMap_BASE_SIZE) {
    @synchronized(RepackagedAndroidUtilArrayMap_class_()) {
      if (RepackagedAndroidUtilArrayMap_mBaseCacheSize_ < RepackagedAndroidUtilArrayMap_CACHE_SIZE) {
        (void) IOSObjectArray_Set(nil_chk(array), 0, RepackagedAndroidUtilArrayMap_mBaseCache_);
        (void) IOSObjectArray_Set(array, 1, hashes);
        for (jint i = (LShift32(size, 1)) - 1; i >= 2; i--) {
          (void) IOSObjectArray_Set(array, i, nil);
        }
        RepackagedAndroidUtilArrayMap_mBaseCache_ = array;
        RepackagedAndroidUtilArrayMap_mBaseCacheSize_++;
      }
    }
  }
}


#line 238
void RepackagedAndroidUtilArrayMap_init(RepackagedAndroidUtilArrayMap *self) {
  (void) NSObject_init(self);
  
#line 239
  self->mHashes_ = RepackagedLibcoreUtilEmptyArray_get_INT_();
  self->mArray_ = RepackagedLibcoreUtilEmptyArray_get_OBJECT_();
  self->mSize_ = 0;
}


#line 238
RepackagedAndroidUtilArrayMap *new_RepackagedAndroidUtilArrayMap_init() {
  RepackagedAndroidUtilArrayMap *self = [RepackagedAndroidUtilArrayMap alloc];
  RepackagedAndroidUtilArrayMap_init(self);
  return self;
}


#line 247
void RepackagedAndroidUtilArrayMap_initWithInt_(RepackagedAndroidUtilArrayMap *self, jint capacity) {
  (void) NSObject_init(self);
  
#line 248
  if (capacity == 0) {
    self->mHashes_ = RepackagedLibcoreUtilEmptyArray_get_INT_();
    self->mArray_ = RepackagedLibcoreUtilEmptyArray_get_OBJECT_();
  }
  else {
    
#line 252
    RepackagedAndroidUtilArrayMap_allocArraysWithInt_(self, capacity);
  }
  self->mSize_ = 0;
}


#line 247
RepackagedAndroidUtilArrayMap *new_RepackagedAndroidUtilArrayMap_initWithInt_(jint capacity) {
  RepackagedAndroidUtilArrayMap *self = [RepackagedAndroidUtilArrayMap alloc];
  RepackagedAndroidUtilArrayMap_initWithInt_(self, capacity);
  return self;
}


#line 257
void RepackagedAndroidUtilArrayMap_initWithBoolean_(RepackagedAndroidUtilArrayMap *self, jboolean immutable) {
  (void) NSObject_init(self);
  
#line 261
  self->mHashes_ = immutable ? RepackagedAndroidUtilArrayMap_EMPTY_IMMUTABLE_INTS_ : RepackagedLibcoreUtilEmptyArray_get_INT_();
  self->mArray_ = RepackagedLibcoreUtilEmptyArray_get_OBJECT_();
  self->mSize_ = 0;
}


#line 257
RepackagedAndroidUtilArrayMap *new_RepackagedAndroidUtilArrayMap_initWithBoolean_(jboolean immutable) {
  RepackagedAndroidUtilArrayMap *self = [RepackagedAndroidUtilArrayMap alloc];
  RepackagedAndroidUtilArrayMap_initWithBoolean_(self, immutable);
  return self;
}


#line 269
void RepackagedAndroidUtilArrayMap_initWithRepackagedAndroidUtilArrayMap_(RepackagedAndroidUtilArrayMap *self, RepackagedAndroidUtilArrayMap *map) {
  (void) RepackagedAndroidUtilArrayMap_init(self);
  if (map != nil) {
    [self putAllWithRepackagedAndroidUtilArrayMap:map];
  }
}


#line 269
RepackagedAndroidUtilArrayMap *new_RepackagedAndroidUtilArrayMap_initWithRepackagedAndroidUtilArrayMap_(RepackagedAndroidUtilArrayMap *map) {
  RepackagedAndroidUtilArrayMap *self = [RepackagedAndroidUtilArrayMap alloc];
  RepackagedAndroidUtilArrayMap_initWithRepackagedAndroidUtilArrayMap_(self, map);
  return self;
}


#line 748
RepackagedAndroidUtilMapCollections *RepackagedAndroidUtilArrayMap_getCollection(RepackagedAndroidUtilArrayMap *self) {
  if (self->mCollections_ == nil) {
    self->mCollections_ = new_RepackagedAndroidUtilArrayMap_$1_initWithRepackagedAndroidUtilArrayMap_(self);
  }
  
#line 797
  return self->mCollections_;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RepackagedAndroidUtilArrayMap)

@implementation RepackagedAndroidUtilArrayMap_$1


#line 752
- (jint)colGetSize {
  return this$0_->mSize_;
}


#line 757
- (id)colGetEntryWithInt:(jint)index
                 withInt:(jint)offset {
  return IOSObjectArray_Get(nil_chk(this$0_->mArray_), (LShift32(index, 1)) + offset);
}

- (jint)colIndexOfKeyWithId:(id)key {
  return [this$0_ indexOfKeyWithId:key];
}


#line 767
- (jint)colIndexOfValueWithId:(id)value {
  return [this$0_ indexOfValueWithId:value];
}


#line 772
- (id<JavaUtilMap>)colGetMap {
  return this$0_;
}


#line 777
- (void)colPutWithId:(id)key
              withId:(id)value {
  (void) [this$0_ putWithId:key withId:value];
}

- (id)colSetValueWithInt:(jint)index
                  withId:(id)value {
  return [this$0_ setValueAtWithInt:index withId:value];
}

- (void)colRemoveAtWithInt:(jint)index {
  (void) [this$0_ removeAtWithInt:index];
}


#line 792
- (void)colClear {
  [this$0_ clear];
}

- (instancetype)initWithRepackagedAndroidUtilArrayMap:(RepackagedAndroidUtilArrayMap *)outer$ {
  RepackagedAndroidUtilArrayMap_$1_initWithRepackagedAndroidUtilArrayMap_(self, outer$);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "colGetSize", NULL, "I", 0x4, NULL, NULL },
    { "colGetEntryWithInt:withInt:", "colGetEntry", "Ljava.lang.Object;", 0x4, NULL, NULL },
    { "colIndexOfKeyWithId:", "colIndexOfKey", "I", 0x4, NULL, NULL },
    { "colIndexOfValueWithId:", "colIndexOfValue", "I", 0x4, NULL, NULL },
    { "colGetMap", NULL, "Ljava.util.Map;", 0x4, NULL, NULL },
    { "colPutWithId:withId:", "colPut", "V", 0x4, NULL, "(TK;TV;)V" },
    { "colSetValueWithInt:withId:", "colSetValue", "TV;", 0x4, NULL, "(ITV;)TV;" },
    { "colRemoveAtWithInt:", "colRemoveAt", "V", 0x4, NULL, NULL },
    { "colClear", NULL, "V", 0x4, NULL, NULL },
    { "initWithRepackagedAndroidUtilArrayMap:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lrepackaged.android.util.ArrayMap;", NULL, NULL,  },
  };
  static const char *superclass_type_args[] = {"TK;", "TV;"};
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "RepackagedAndroidUtilArrayMap", "getCollection" };
  static const J2ObjcClassInfo _RepackagedAndroidUtilArrayMap_$1 = { 2, "", "repackaged.android.util", "ArrayMap", 0x8008, 10, methods, 1, fields, 2, superclass_type_args, 0, NULL, &enclosing_method, "Lrepackaged/android/util/MapCollections<TK;TV;>;" };
  return &_RepackagedAndroidUtilArrayMap_$1;
}

@end

void RepackagedAndroidUtilArrayMap_$1_initWithRepackagedAndroidUtilArrayMap_(RepackagedAndroidUtilArrayMap_$1 *self, RepackagedAndroidUtilArrayMap *outer$) {
  self->this$0_ = outer$;
  (void) RepackagedAndroidUtilMapCollections_init(self);
}

RepackagedAndroidUtilArrayMap_$1 *new_RepackagedAndroidUtilArrayMap_$1_initWithRepackagedAndroidUtilArrayMap_(RepackagedAndroidUtilArrayMap *outer$) {
  RepackagedAndroidUtilArrayMap_$1 *self = [RepackagedAndroidUtilArrayMap_$1 alloc];
  RepackagedAndroidUtilArrayMap_$1_initWithRepackagedAndroidUtilArrayMap_(self, outer$);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RepackagedAndroidUtilArrayMap_$1)
