//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/androidlayouts/repackaged/android/widget/LinearLayout.java
//

#ifndef _RepackagedAndroidWidgetLinearLayout_H_
#define _RepackagedAndroidWidgetLinearLayout_H_

#include "J2ObjC_header.h"
#include "ViewGroup.h"
#include "java/lang/annotation/Annotation.h"

@class RepackagedAndroidGraphicsCanvas;
@class RepackagedAndroidGraphicsDrawableDrawable;
@class RepackagedAndroidViewView;
@class RepackagedAndroidWidgetLinearLayout_LayoutParams;
@protocol JavaLangCharSequence;
@protocol RepackagedAndroidContentContext;
@protocol RepackagedAndroidUtilAttributeSet;
@protocol RepackagedAndroidViewViewHierarchyEncoder;

#define RepackagedAndroidWidgetLinearLayout_HORIZONTAL 0
#define RepackagedAndroidWidgetLinearLayout_VERTICAL 1
#define RepackagedAndroidWidgetLinearLayout_SHOW_DIVIDER_NONE 0
#define RepackagedAndroidWidgetLinearLayout_SHOW_DIVIDER_BEGINNING 1
#define RepackagedAndroidWidgetLinearLayout_SHOW_DIVIDER_MIDDLE 2
#define RepackagedAndroidWidgetLinearLayout_SHOW_DIVIDER_END 4

/**
 @brief A Layout that arranges its children in a single column or a single row.
 The direction of the row can be set by calling #setOrientation(int) setOrientation() . You can also specify gravity, which specifies the alignment of all the child elements by calling #setGravity(int) setGravity() or specify that specific children grow to fill up any remaining space in the layout by setting the <em>weight</em> member of repackaged.android.widget.LinearLayout.LayoutParams LinearLayout.LayoutParams . The default orientation is horizontal. <p>See the <a href="  guide/topics/ui/layout/linear.html">Linear Layout</a> guide.</p> <p> Also see LinearLayout.LayoutParams android.widget.LinearLayout.LayoutParams for layout attributes </p>
 ref android.R.styleable#LinearLayout_baselineAligned
 ref android.R.styleable#LinearLayout_baselineAlignedChildIndex
 ref android.R.styleable#LinearLayout_gravity
 ref android.R.styleable#LinearLayout_measureWithLargestChild
 ref android.R.styleable#LinearLayout_orientation
 ref android.R.styleable#LinearLayout_weightSum
 */
@interface RepackagedAndroidWidgetLinearLayout : RepackagedAndroidViewViewGroup

#pragma mark Public

- (instancetype)initWithRepackagedAndroidContentContext:(id<RepackagedAndroidContentContext>)context;

- (instancetype)initWithRepackagedAndroidContentContext:(id<RepackagedAndroidContentContext>)context
                  withRepackagedAndroidUtilAttributeSet:(id<RepackagedAndroidUtilAttributeSet>)attrs;

- (instancetype)initWithRepackagedAndroidContentContext:(id<RepackagedAndroidContentContext>)context
                  withRepackagedAndroidUtilAttributeSet:(id<RepackagedAndroidUtilAttributeSet>)attrs
                                                withInt:(jint)defStyleAttr;

- (instancetype)initWithRepackagedAndroidContentContext:(id<RepackagedAndroidContentContext>)context
                  withRepackagedAndroidUtilAttributeSet:(id<RepackagedAndroidUtilAttributeSet>)attrs
                                                withInt:(jint)defStyleAttr
                                                withInt:(jint)defStyleRes;

- (RepackagedAndroidWidgetLinearLayout_LayoutParams *)generateLayoutParamsWithRepackagedAndroidUtilAttributeSet:(id<RepackagedAndroidUtilAttributeSet>)attrs;

- (id<JavaLangCharSequence>)getAccessibilityClassName;

- (jint)getBaseline;

/**
 @return The index of the child that will be used if this layout is part of a larger layout that is baseline aligned, or -1 if none has been set.
 */
- (jint)getBaselineAlignedChildIndex;

/**
 @return the divider Drawable that will divide each item.
 ref android.R.styleable#LinearLayout_divider
 */
- (RepackagedAndroidGraphicsDrawableDrawable *)getDividerDrawable;

/**
 @brief Get the padding size used to inset dividers in pixels
 */
- (jint)getDividerPadding;

/**
 @brief Get the width of the current divider drawable.
 Used internally by framework.
 */
- (jint)getDividerWidth;

/**
 @brief Returns the current orientation.
 @return either #HORIZONTAL or #VERTICAL
 */
- (jint)getOrientation;

/**
 @return A flag set indicating how dividers should be shown around items.
 */
- (jint)getShowDividers;

/**
 @brief Returns the desired weights sum.
 @return A number greater than 0.0f if the weight sum is defined, or a number lower than or equals to 0.0f if not weight sum is to be used.
 */
- (jfloat)getWeightSum;

/**
 @brief <p>Indicates whether widgets contained within this layout are aligned on their baseline or not.
 </p>
 @return true when widgets are baseline-aligned, false otherwise
 */
- (jboolean)isBaselineAligned;

/**
 @brief When true, all children with a weight will be considered having the minimum size of the largest child.
 If false, all children are measured normally.
 @return True to measure children with a weight using the minimum size of the largest child, false otherwise.
 ref android.R.styleable#LinearLayout_measureWithLargestChild
 */
- (jboolean)isMeasureWithLargestChildEnabled;

- (void)onRtlPropertiesChangedWithInt:(jint)layoutDirection;

/**
 @brief <p>Defines whether widgets contained in this layout are baseline-aligned or not.
 </p>
 @param baselineAligned true to align widgets on their baseline, false otherwise
 ref android.R.styleable#LinearLayout_baselineAligned
 */
- (void)setBaselineAlignedWithBoolean:(jboolean)baselineAligned;

/**
 @param i The index of the child that will be used if this layout is part of a larger layout that is baseline aligned.
 ref android.R.styleable#LinearLayout_baselineAlignedChildIndex
 */
- (void)setBaselineAlignedChildIndexWithInt:(jint)i;

/**
 @brief Set a drawable to be used as a divider between items.
 @param divider Drawable that will divide each item.
 ref android.R.styleable#LinearLayout_divider
 */
- (void)setDividerDrawableWithRepackagedAndroidGraphicsDrawableDrawable:(RepackagedAndroidGraphicsDrawableDrawable *)divider;

/**
 @brief Set padding displayed on both ends of dividers.
 @param padding Padding value in pixels that will be applied to each end
 */
- (void)setDividerPaddingWithInt:(jint)padding;

/**
 @brief Describes how the child views are positioned.
 Defaults to GRAVITY_TOP. If this layout has a VERTICAL orientation, this controls where all the child views are placed if there is extra vertical space. If this layout has a HORIZONTAL orientation, this controls the alignment of the children.
 @param gravity See repackaged.android.view.Gravity
 ref android.R.styleable#LinearLayout_gravity
 */
- (void)setGravityWithInt:(jint)gravity;

- (void)setHorizontalGravityWithInt:(jint)horizontalGravity;

/**
 @brief When set to true, all children with a weight will be considered having the minimum size of the largest child.
 If false, all children are measured normally. Disabled by default.
 @param enabled True to measure children with a weight using the minimum size of the largest child, false otherwise.
 ref android.R.styleable#LinearLayout_measureWithLargestChild
 */
- (void)setMeasureWithLargestChildEnabledWithBoolean:(jboolean)enabled;

/**
 @brief Should the layout be a column or a row.
 @param orientation Pass #HORIZONTAL or #VERTICAL . Default value is #HORIZONTAL .
 ref android.R.styleable#LinearLayout_orientation
 */
- (void)setOrientationWithInt:(jint)orientation;

/**
 @brief Set how dividers should be shown between items in this layout
 @param showDividers One or more of #SHOW_DIVIDER_BEGINNING , #SHOW_DIVIDER_MIDDLE , or #SHOW_DIVIDER_END , or #SHOW_DIVIDER_NONE to show no dividers.
 */
- (void)setShowDividersWithInt:(jint)showDividers;

- (void)setVerticalGravityWithInt:(jint)verticalGravity;

/**
 @brief Defines the desired weights sum.
 If unspecified the weights sum is computed at layout time by adding the layout_weight of each child. This can be used for instance to give a single child 50% of the total available space by giving it a layout_weight of 0.5 and setting the weightSum to 1.0.
 @param weightSum a number greater than 0.0f, or a number lower than or equals to 0.0f if the weight sum should be computed from the children's layout_weight
 */
- (void)setWeightSumWithFloat:(jfloat)weightSum;

- (jboolean)shouldDelayChildPressedState;

#pragma mark Protected

- (jboolean)checkLayoutParamsWithRepackagedAndroidViewViewGroup_LayoutParams:(RepackagedAndroidViewViewGroup_LayoutParams *)p;

/**
 */
- (void)encodePropertiesWithRepackagedAndroidViewViewHierarchyEncoder:(id<RepackagedAndroidViewViewHierarchyEncoder>)encoder;

/**
 @brief Returns a set of layout parameters with a width of repackaged.android.view.ViewGroup.LayoutParams#MATCH_PARENT and a height of repackaged.android.view.ViewGroup.LayoutParams#WRAP_CONTENT when the layout's orientation is #VERTICAL .
 When the orientation is #HORIZONTAL , the width is set to LayoutParams#WRAP_CONTENT and the height to LayoutParams#WRAP_CONTENT .
 */
- (RepackagedAndroidWidgetLinearLayout_LayoutParams *)generateDefaultLayoutParams;

- (RepackagedAndroidWidgetLinearLayout_LayoutParams *)generateLayoutParamsWithRepackagedAndroidViewViewGroup_LayoutParams:(RepackagedAndroidViewViewGroup_LayoutParams *)p;

/**
 @brief Determines where to position dividers between children.
 @param childIndex Index of child to check for preceding divider
 @return true if there should be a divider before the child at childIndex
 Pending API consideration. Currently only used internally by the system.
 */
- (jboolean)hasDividerBeforeChildAtWithInt:(jint)childIndex;

- (void)onDrawWithRepackagedAndroidGraphicsCanvas:(RepackagedAndroidGraphicsCanvas *)canvas;

- (void)onLayoutWithBoolean:(jboolean)changed
                    withInt:(jint)l
                    withInt:(jint)t
                    withInt:(jint)r
                    withInt:(jint)b;

- (void)onMeasureWithInt:(jint)widthMeasureSpec
                 withInt:(jint)heightMeasureSpec;

#pragma mark Package-Private

- (void)drawDividersHorizontalWithRepackagedAndroidGraphicsCanvas:(RepackagedAndroidGraphicsCanvas *)canvas;

- (void)drawDividersVerticalWithRepackagedAndroidGraphicsCanvas:(RepackagedAndroidGraphicsCanvas *)canvas;

- (void)drawHorizontalDividerWithRepackagedAndroidGraphicsCanvas:(RepackagedAndroidGraphicsCanvas *)canvas
                                                         withInt:(jint)top;

- (void)drawVerticalDividerWithRepackagedAndroidGraphicsCanvas:(RepackagedAndroidGraphicsCanvas *)canvas
                                                       withInt:(jint)left;

/**
 @brief <p>Returns the number of children to skip after measuring/laying out the specified child.
 </p>
 @param child the child after which we want to skip children
 @param index the index of the child after which we want to skip children
 @return the number of children to skip, 0 by default
 */
- (jint)getChildrenSkipCountWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)child
                                                  withInt:(jint)index;

/**
 @brief <p>Return the location offset of the specified child.
 This can be used by subclasses to change the location of a given widget.</p>
 @param child the child for which to obtain the location offset
 @return the location offset in pixels
 */
- (jint)getLocationOffsetWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)child;

/**
 @brief <p>Return the size offset of the next sibling of the specified child.
 This can be used by subclasses to change the location of the widget following <code>child</code>.</p>
 @param child the child whose next sibling will be moved
 @return the location offset of the next child in pixels
 */
- (jint)getNextLocationOffsetWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)child;

/**
 @brief <p>Returns the view at the specified index.
 This method can be overriden to take into account virtual children. Refer to android.widget.TableLayout and android.widget.TableRow for an example.</p>
 @param index the child's index
 @return the child at the specified index
 */
- (RepackagedAndroidViewView *)getVirtualChildAtWithInt:(jint)index;

/**
 @brief <p>Returns the virtual number of children.
 This number might be different than the actual number of children if the layout can hold virtual children. Refer to android.widget.TableLayout and android.widget.TableRow for an example.</p>
 @return the virtual number of children
 */
- (jint)getVirtualChildCount;

/**
 @brief Position the children during a layout pass if the orientation of this LinearLayout is set to #HORIZONTAL .
 @param left
 @param top
 @param right
 @param bottom
 */
- (void)layoutHorizontalWithInt:(jint)left
                        withInt:(jint)top
                        withInt:(jint)right
                        withInt:(jint)bottom;

/**
 @brief Position the children during a layout pass if the orientation of this LinearLayout is set to #VERTICAL .
 @param left
 @param top
 @param right
 @param bottom
 */
- (void)layoutVerticalWithInt:(jint)left
                      withInt:(jint)top
                      withInt:(jint)right
                      withInt:(jint)bottom;

/**
 @brief <p>Measure the child according to the parent's measure specs.
 This method should be overriden by subclasses to force the sizing of children. This method is called by #measureVertical(int,int) and #measureHorizontal(int,int) .</p>
 @param child the child to measure
 @param childIndex the index of the child in this view
 @param widthMeasureSpec horizontal space requirements as imposed by the parent
 @param totalWidth extra space that has been used up by the parent horizontally
 @param heightMeasureSpec vertical space requirements as imposed by the parent
 @param totalHeight extra space that has been used up by the parent vertically
 */
- (void)measureChildBeforeLayoutWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)child
                                                      withInt:(jint)childIndex
                                                      withInt:(jint)widthMeasureSpec
                                                      withInt:(jint)totalWidth
                                                      withInt:(jint)heightMeasureSpec
                                                      withInt:(jint)totalHeight;

/**
 @brief Measures the children when the orientation of this LinearLayout is set to #HORIZONTAL .
 @param widthMeasureSpec Horizontal space requirements as imposed by the parent.
 @param heightMeasureSpec Vertical space requirements as imposed by the parent.
 */
- (void)measureHorizontalWithInt:(jint)widthMeasureSpec
                         withInt:(jint)heightMeasureSpec;

/**
 @brief <p>Returns the size (width or height) that should be occupied by a null child.
 </p>
 @param childIndex the index of the null child
 @return the width or height of the child depending on the orientation
 */
- (jint)measureNullChildWithInt:(jint)childIndex;

/**
 @brief Measures the children when the orientation of this LinearLayout is set to #VERTICAL .
 @param widthMeasureSpec Horizontal space requirements as imposed by the parent.
 @param heightMeasureSpec Vertical space requirements as imposed by the parent.
 */
- (void)measureVerticalWithInt:(jint)widthMeasureSpec
                       withInt:(jint)heightMeasureSpec;

@end

J2OBJC_EMPTY_STATIC_INIT(RepackagedAndroidWidgetLinearLayout)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidWidgetLinearLayout, HORIZONTAL, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidWidgetLinearLayout, VERTICAL, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidWidgetLinearLayout, SHOW_DIVIDER_NONE, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidWidgetLinearLayout, SHOW_DIVIDER_BEGINNING, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidWidgetLinearLayout, SHOW_DIVIDER_MIDDLE, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidWidgetLinearLayout, SHOW_DIVIDER_END, jint)

FOUNDATION_EXPORT void RepackagedAndroidWidgetLinearLayout_initWithRepackagedAndroidContentContext_(RepackagedAndroidWidgetLinearLayout *self, id<RepackagedAndroidContentContext> context);

FOUNDATION_EXPORT RepackagedAndroidWidgetLinearLayout *new_RepackagedAndroidWidgetLinearLayout_initWithRepackagedAndroidContentContext_(id<RepackagedAndroidContentContext> context) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void RepackagedAndroidWidgetLinearLayout_initWithRepackagedAndroidContentContext_withRepackagedAndroidUtilAttributeSet_(RepackagedAndroidWidgetLinearLayout *self, id<RepackagedAndroidContentContext> context, id<RepackagedAndroidUtilAttributeSet> attrs);

FOUNDATION_EXPORT RepackagedAndroidWidgetLinearLayout *new_RepackagedAndroidWidgetLinearLayout_initWithRepackagedAndroidContentContext_withRepackagedAndroidUtilAttributeSet_(id<RepackagedAndroidContentContext> context, id<RepackagedAndroidUtilAttributeSet> attrs) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void RepackagedAndroidWidgetLinearLayout_initWithRepackagedAndroidContentContext_withRepackagedAndroidUtilAttributeSet_withInt_(RepackagedAndroidWidgetLinearLayout *self, id<RepackagedAndroidContentContext> context, id<RepackagedAndroidUtilAttributeSet> attrs, jint defStyleAttr);

FOUNDATION_EXPORT RepackagedAndroidWidgetLinearLayout *new_RepackagedAndroidWidgetLinearLayout_initWithRepackagedAndroidContentContext_withRepackagedAndroidUtilAttributeSet_withInt_(id<RepackagedAndroidContentContext> context, id<RepackagedAndroidUtilAttributeSet> attrs, jint defStyleAttr) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void RepackagedAndroidWidgetLinearLayout_initWithRepackagedAndroidContentContext_withRepackagedAndroidUtilAttributeSet_withInt_withInt_(RepackagedAndroidWidgetLinearLayout *self, id<RepackagedAndroidContentContext> context, id<RepackagedAndroidUtilAttributeSet> attrs, jint defStyleAttr, jint defStyleRes);

FOUNDATION_EXPORT RepackagedAndroidWidgetLinearLayout *new_RepackagedAndroidWidgetLinearLayout_initWithRepackagedAndroidContentContext_withRepackagedAndroidUtilAttributeSet_withInt_withInt_(id<RepackagedAndroidContentContext> context, id<RepackagedAndroidUtilAttributeSet> attrs, jint defStyleAttr, jint defStyleRes) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(RepackagedAndroidWidgetLinearLayout)

/**
 */
@protocol RepackagedAndroidWidgetLinearLayout_OrientationMode < JavaLangAnnotationAnnotation >

@end

J2OBJC_EMPTY_STATIC_INIT(RepackagedAndroidWidgetLinearLayout_OrientationMode)

J2OBJC_TYPE_LITERAL_HEADER(RepackagedAndroidWidgetLinearLayout_OrientationMode)

/**
 */
@protocol RepackagedAndroidWidgetLinearLayout_DividerMode < JavaLangAnnotationAnnotation >

@end

J2OBJC_EMPTY_STATIC_INIT(RepackagedAndroidWidgetLinearLayout_DividerMode)

J2OBJC_TYPE_LITERAL_HEADER(RepackagedAndroidWidgetLinearLayout_DividerMode)

/**
 @brief Per-child layout information associated with ViewLinearLayout.
 ref android.R.styleable#LinearLayout_Layout_layout_weight
 ref android.R.styleable#LinearLayout_Layout_layout_gravity
 */
@interface RepackagedAndroidWidgetLinearLayout_LayoutParams : RepackagedAndroidViewViewGroup_MarginLayoutParams {
 @public
  /**
   @brief Indicates how much of the extra space in the LinearLayout will be allocated to the view associated with these LayoutParams.
   Specify 0 if the view should not be stretched. Otherwise the extra pixels will be pro-rated among all views whose weight is greater than 0.
   */
  jfloat weight_;
  /**
   @brief Gravity for the view associated with these LayoutParams.
   */
  jint gravity_;
}

#pragma mark Public

/**
 
 */
- (instancetype)initWithRepackagedAndroidContentContext:(id<RepackagedAndroidContentContext>)c
                  withRepackagedAndroidUtilAttributeSet:(id<RepackagedAndroidUtilAttributeSet>)attrs;

/**
 
 */
- (instancetype)initWithInt:(jint)width
                    withInt:(jint)height;

/**
 @brief Creates a new set of layout parameters with the specified width, height and weight.
 @param width the width, either #MATCH_PARENT , #WRAP_CONTENT or a fixed size in pixels
 @param height the height, either #MATCH_PARENT , #WRAP_CONTENT or a fixed size in pixels
 @param weight the weight
 */
- (instancetype)initWithInt:(jint)width
                    withInt:(jint)height
                  withFloat:(jfloat)weight;

/**
 
 */
- (instancetype)initWithRepackagedAndroidViewViewGroup_LayoutParams:(RepackagedAndroidViewViewGroup_LayoutParams *)p;

/**
 @brief Copy constructor.
 Clones the width, height, margin values, weight, and gravity of the source.
 @param source The layout params to copy from.
 */
- (instancetype)initWithRepackagedAndroidWidgetLinearLayout_LayoutParams:(RepackagedAndroidWidgetLinearLayout_LayoutParams *)source;

/**
 
 */
- (instancetype)initWithRepackagedAndroidViewViewGroup_MarginLayoutParams:(RepackagedAndroidViewViewGroup_MarginLayoutParams *)source;

- (NSString *)debugWithNSString:(NSString *)output;

#pragma mark Protected

/**
 */
- (void)encodePropertiesWithRepackagedAndroidViewViewHierarchyEncoder:(id<RepackagedAndroidViewViewHierarchyEncoder>)encoder;

@end

J2OBJC_EMPTY_STATIC_INIT(RepackagedAndroidWidgetLinearLayout_LayoutParams)

FOUNDATION_EXPORT void RepackagedAndroidWidgetLinearLayout_LayoutParams_initWithRepackagedAndroidContentContext_withRepackagedAndroidUtilAttributeSet_(RepackagedAndroidWidgetLinearLayout_LayoutParams *self, id<RepackagedAndroidContentContext> c, id<RepackagedAndroidUtilAttributeSet> attrs);

FOUNDATION_EXPORT RepackagedAndroidWidgetLinearLayout_LayoutParams *new_RepackagedAndroidWidgetLinearLayout_LayoutParams_initWithRepackagedAndroidContentContext_withRepackagedAndroidUtilAttributeSet_(id<RepackagedAndroidContentContext> c, id<RepackagedAndroidUtilAttributeSet> attrs) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void RepackagedAndroidWidgetLinearLayout_LayoutParams_initWithInt_withInt_(RepackagedAndroidWidgetLinearLayout_LayoutParams *self, jint width, jint height);

FOUNDATION_EXPORT RepackagedAndroidWidgetLinearLayout_LayoutParams *new_RepackagedAndroidWidgetLinearLayout_LayoutParams_initWithInt_withInt_(jint width, jint height) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void RepackagedAndroidWidgetLinearLayout_LayoutParams_initWithInt_withInt_withFloat_(RepackagedAndroidWidgetLinearLayout_LayoutParams *self, jint width, jint height, jfloat weight);

FOUNDATION_EXPORT RepackagedAndroidWidgetLinearLayout_LayoutParams *new_RepackagedAndroidWidgetLinearLayout_LayoutParams_initWithInt_withInt_withFloat_(jint width, jint height, jfloat weight) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void RepackagedAndroidWidgetLinearLayout_LayoutParams_initWithRepackagedAndroidViewViewGroup_LayoutParams_(RepackagedAndroidWidgetLinearLayout_LayoutParams *self, RepackagedAndroidViewViewGroup_LayoutParams *p);

FOUNDATION_EXPORT RepackagedAndroidWidgetLinearLayout_LayoutParams *new_RepackagedAndroidWidgetLinearLayout_LayoutParams_initWithRepackagedAndroidViewViewGroup_LayoutParams_(RepackagedAndroidViewViewGroup_LayoutParams *p) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void RepackagedAndroidWidgetLinearLayout_LayoutParams_initWithRepackagedAndroidViewViewGroup_MarginLayoutParams_(RepackagedAndroidWidgetLinearLayout_LayoutParams *self, RepackagedAndroidViewViewGroup_MarginLayoutParams *source);

FOUNDATION_EXPORT RepackagedAndroidWidgetLinearLayout_LayoutParams *new_RepackagedAndroidWidgetLinearLayout_LayoutParams_initWithRepackagedAndroidViewViewGroup_MarginLayoutParams_(RepackagedAndroidViewViewGroup_MarginLayoutParams *source) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void RepackagedAndroidWidgetLinearLayout_LayoutParams_initWithRepackagedAndroidWidgetLinearLayout_LayoutParams_(RepackagedAndroidWidgetLinearLayout_LayoutParams *self, RepackagedAndroidWidgetLinearLayout_LayoutParams *source);

FOUNDATION_EXPORT RepackagedAndroidWidgetLinearLayout_LayoutParams *new_RepackagedAndroidWidgetLinearLayout_LayoutParams_initWithRepackagedAndroidWidgetLinearLayout_LayoutParams_(RepackagedAndroidWidgetLinearLayout_LayoutParams *source) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(RepackagedAndroidWidgetLinearLayout_LayoutParams)

#endif // _RepackagedAndroidWidgetLinearLayout_H_
