//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/androidlayouts/repackaged/android/util/Base64InputStream.java
//


#include "Base64.h"
#include "Base64DataException.h"
#include "Base64InputStream.h"
#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/FilterInputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "java/lang/UnsupportedOperationException.h"

#line 0 "/Users/ramm/git/Ashera/AsheraAndroidParser/androidlayouts/repackaged/android/util/Base64InputStream.java"

#define RepackagedAndroidUtilBase64InputStream_BUFFER_SIZE 2048

@interface RepackagedAndroidUtilBase64InputStream () {
 @public
  RepackagedAndroidUtilBase64_Coder *coder_;
  jboolean eof_;
  IOSByteArray *inputBuffer_;
  jint outputStart_;
  jint outputEnd_;
}

/**
 @brief Read data from the input stream into inputBuffer, then decode/encode it into the empty coder.output, and reset the outputStart and outputEnd pointers.
 */
- (void)refill;

@end

J2OBJC_FIELD_SETTER(RepackagedAndroidUtilBase64InputStream, coder_, RepackagedAndroidUtilBase64_Coder *)
J2OBJC_FIELD_SETTER(RepackagedAndroidUtilBase64InputStream, inputBuffer_, IOSByteArray *)

static IOSByteArray *RepackagedAndroidUtilBase64InputStream_EMPTY_;
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidUtilBase64InputStream, EMPTY_, IOSByteArray *)
J2OBJC_STATIC_FIELD_SETTER(RepackagedAndroidUtilBase64InputStream, EMPTY_, IOSByteArray *)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidUtilBase64InputStream, BUFFER_SIZE, jint)

__attribute__((unused)) static void RepackagedAndroidUtilBase64InputStream_refill(RepackagedAndroidUtilBase64InputStream *self);

J2OBJC_INITIALIZED_DEFN(RepackagedAndroidUtilBase64InputStream)


#line 27
@implementation RepackagedAndroidUtilBase64InputStream


#line 46
- (instancetype)initWithJavaIoInputStream:(JavaIoInputStream *)inArg
                                  withInt:(jint)flags {
  RepackagedAndroidUtilBase64InputStream_initWithJavaIoInputStream_withInt_(self, inArg, flags);
  return self;
}


#line 61
- (instancetype)initWithJavaIoInputStream:(JavaIoInputStream *)inArg
                                  withInt:(jint)flags
                              withBoolean:(jboolean)encode {
  RepackagedAndroidUtilBase64InputStream_initWithJavaIoInputStream_withInt_withBoolean_(self, inArg, flags, encode);
  return self;
}


#line 75
- (jboolean)markSupported {
  return NO;
}

- (void)markWithInt:(jint)readlimit {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)reset {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)close {
  [((JavaIoInputStream *) nil_chk(in_)) close];
  inputBuffer_ = nil;
}

- (jint)available {
  return outputEnd_ - outputStart_;
}

- (jlong)skipWithLong:(jlong)n {
  if (outputStart_ >= outputEnd_) {
    RepackagedAndroidUtilBase64InputStream_refill(self);
  }
  if (outputStart_ >= outputEnd_) {
    return 0;
  }
  jlong bytes = JavaLangMath_minWithLong_withLong_(n, outputEnd_ - outputStart_);
  outputStart_ += bytes;
  return bytes;
}

- (jint)read {
  if (outputStart_ >= outputEnd_) {
    RepackagedAndroidUtilBase64InputStream_refill(self);
  }
  if (outputStart_ >= outputEnd_) {
    return -1;
  }
  else {
    
#line 115
    return IOSByteArray_Get(nil_chk(((RepackagedAndroidUtilBase64_Coder *) nil_chk(coder_))->output_), outputStart_++) & (jint) 0xff;
  }
}


#line 119
- (jint)readWithByteArray:(IOSByteArray *)b
                  withInt:(jint)off
                  withInt:(jint)len {
  if (outputStart_ >= outputEnd_) {
    RepackagedAndroidUtilBase64InputStream_refill(self);
  }
  if (outputStart_ >= outputEnd_) {
    return -1;
  }
  jint bytes = JavaLangMath_minWithInt_withInt_(len, outputEnd_ - outputStart_);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(((RepackagedAndroidUtilBase64_Coder *) nil_chk(coder_))->output_, outputStart_, b, off, bytes);
  outputStart_ += bytes;
  return bytes;
}


#line 137
- (void)refill {
  RepackagedAndroidUtilBase64InputStream_refill(self);
}

+ (void)initialize {
  if (self == [RepackagedAndroidUtilBase64InputStream class]) {
    RepackagedAndroidUtilBase64InputStream_EMPTY_ = [IOSByteArray newArrayWithLength:
#line 30
    0];
    J2OBJC_SET_INITIALIZED(RepackagedAndroidUtilBase64InputStream)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaIoInputStream:withInt:", "Base64InputStream", NULL, 0x1, NULL, NULL },
    { "initWithJavaIoInputStream:withInt:withBoolean:", "Base64InputStream", NULL, 0x1, NULL, NULL },
    { "markSupported", NULL, "Z", 0x1, NULL, NULL },
    { "markWithInt:", "mark", "V", 0x1, NULL, NULL },
    { "reset", NULL, "V", 0x1, NULL, NULL },
    { "close", NULL, "V", 0x1, "Ljava.io.IOException;", NULL },
    { "available", NULL, "I", 0x1, NULL, NULL },
    { "skipWithLong:", "skip", "J", 0x1, "Ljava.io.IOException;", NULL },
    { "read", NULL, "I", 0x1, "Ljava.io.IOException;", NULL },
    { "readWithByteArray:withInt:withInt:", "read", "I", 0x1, "Ljava.io.IOException;", NULL },
    { "refill", NULL, "V", 0x2, "Ljava.io.IOException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "coder_", NULL, 0x12, "Lrepackaged.android.util.Base64$Coder;", NULL, NULL,  },
    { "EMPTY_", NULL, 0xa, "[B", &RepackagedAndroidUtilBase64InputStream_EMPTY_, NULL,  },
    { "BUFFER_SIZE_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidUtilBase64InputStream_BUFFER_SIZE },
    { "eof_", NULL, 0x2, "Z", NULL, NULL,  },
    { "inputBuffer_", NULL, 0x2, "[B", NULL, NULL,  },
    { "outputStart_", NULL, 0x2, "I", NULL, NULL,  },
    { "outputEnd_", NULL, 0x2, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _RepackagedAndroidUtilBase64InputStream = { 2, "Base64InputStream", "repackaged.android.util", NULL, 0x1, 11, methods, 7, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_RepackagedAndroidUtilBase64InputStream;
}

@end


#line 46
void RepackagedAndroidUtilBase64InputStream_initWithJavaIoInputStream_withInt_(RepackagedAndroidUtilBase64InputStream *self, JavaIoInputStream *inArg, jint flags) {
  (void) RepackagedAndroidUtilBase64InputStream_initWithJavaIoInputStream_withInt_withBoolean_(self, inArg, flags, NO);
}


#line 46
RepackagedAndroidUtilBase64InputStream *new_RepackagedAndroidUtilBase64InputStream_initWithJavaIoInputStream_withInt_(JavaIoInputStream *inArg, jint flags) {
  RepackagedAndroidUtilBase64InputStream *self = [RepackagedAndroidUtilBase64InputStream alloc];
  RepackagedAndroidUtilBase64InputStream_initWithJavaIoInputStream_withInt_(self, inArg, flags);
  return self;
}


#line 61
void RepackagedAndroidUtilBase64InputStream_initWithJavaIoInputStream_withInt_withBoolean_(RepackagedAndroidUtilBase64InputStream *self, JavaIoInputStream *inArg, jint flags, jboolean encode) {
  (void) JavaIoFilterInputStream_initWithJavaIoInputStream_(self, inArg);
  self->eof_ = NO;
  self->inputBuffer_ = [IOSByteArray newArrayWithLength:RepackagedAndroidUtilBase64InputStream_BUFFER_SIZE];
  if (encode) {
    self->coder_ = new_RepackagedAndroidUtilBase64_Encoder_initWithInt_withByteArray_(flags, nil);
  }
  else {
    
#line 68
    self->coder_ = new_RepackagedAndroidUtilBase64_Decoder_initWithInt_withByteArray_(flags, nil);
  }
  ((RepackagedAndroidUtilBase64_Coder *) nil_chk(self->coder_))->output_ = [IOSByteArray newArrayWithLength:[self->coder_ maxOutputSizeWithInt:RepackagedAndroidUtilBase64InputStream_BUFFER_SIZE]];
  self->outputStart_ = 0;
  self->outputEnd_ = 0;
}


#line 61
RepackagedAndroidUtilBase64InputStream *new_RepackagedAndroidUtilBase64InputStream_initWithJavaIoInputStream_withInt_withBoolean_(JavaIoInputStream *inArg, jint flags, jboolean encode) {
  RepackagedAndroidUtilBase64InputStream *self = [RepackagedAndroidUtilBase64InputStream alloc];
  RepackagedAndroidUtilBase64InputStream_initWithJavaIoInputStream_withInt_withBoolean_(self, inArg, flags, encode);
  return self;
}


#line 137
void RepackagedAndroidUtilBase64InputStream_refill(RepackagedAndroidUtilBase64InputStream *self) {
  if (self->eof_) return;
  jint bytesRead = [((JavaIoInputStream *) nil_chk(self->in_)) readWithByteArray:self->inputBuffer_];
  jboolean success;
  if (bytesRead == -1) {
    self->eof_ = YES;
    success = [((RepackagedAndroidUtilBase64_Coder *) nil_chk(self->coder_)) processWithByteArray:RepackagedAndroidUtilBase64InputStream_EMPTY_ withInt:0 withInt:0 withBoolean:YES];
  }
  else {
    
#line 145
    success = [((RepackagedAndroidUtilBase64_Coder *) nil_chk(self->coder_)) processWithByteArray:self->inputBuffer_ withInt:0 withInt:bytesRead withBoolean:NO];
  }
  if (!success) {
    @throw new_RepackagedAndroidUtilBase64DataException_initWithNSString_(@"bad base-64");
  }
  self->outputEnd_ = ((RepackagedAndroidUtilBase64_Coder *) nil_chk(self->coder_))->op_;
  self->outputStart_ = 0;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RepackagedAndroidUtilBase64InputStream)
