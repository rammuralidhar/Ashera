//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/androidlayouts/repackaged/android/util/IntArray.java
//


#include "ArrayUtils.h"
#include "ContainerHelpers.h"
#include "EmptyArray.h"
#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "IntArray.h"
#include "J2ObjC_source.h"
#include "java/lang/ArrayIndexOutOfBoundsException.h"
#include "java/lang/CloneNotSupportedException.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/System.h"
#include "java/util/Arrays.h"

#line 0 "/Users/ramm/git/Ashera/AsheraAndroidParser/androidlayouts/repackaged/android/util/IntArray.java"

#define RepackagedAndroidUtilIntArray_MIN_CAPACITY_INCREMENT 12

@interface RepackagedAndroidUtilIntArray () {
 @public
  IOSIntArray *mValues_;
  jint mSize_;
}

/**
 @brief Ensures capacity to append at least <code>count</code> values.
 */
- (void)ensureCapacityWithInt:(jint)count;

@end

J2OBJC_FIELD_SETTER(RepackagedAndroidUtilIntArray, mValues_, IOSIntArray *)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidUtilIntArray, MIN_CAPACITY_INCREMENT, jint)

__attribute__((unused)) static void RepackagedAndroidUtilIntArray_ensureCapacityWithInt_(RepackagedAndroidUtilIntArray *self, jint count);


#line 29
@implementation RepackagedAndroidUtilIntArray


#line 38
- (instancetype)init {
  RepackagedAndroidUtilIntArray_init(self);
  return self;
}


#line 45
- (instancetype)initWithInt:(jint)initialCapacity {
  RepackagedAndroidUtilIntArray_initWithInt_(self, initialCapacity);
  return self;
}


#line 57
- (void)addWithInt:(jint)value {
  [self addWithInt:mSize_ withInt:value];
}


#line 66
- (void)addWithInt:(jint)index
           withInt:(jint)value {
  if (index < 0 || index > mSize_) {
    @throw new_JavaLangIndexOutOfBoundsException_init();
  }
  
#line 71
  RepackagedAndroidUtilIntArray_ensureCapacityWithInt_(self, 1);
  
#line 73
  if (mSize_ - index != 0) {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(mValues_, index, mValues_, index + 1, mSize_ - index);
  }
  
#line 77
  *IOSIntArray_GetRef(nil_chk(mValues_), index) = value;
  mSize_++;
}


#line 95
- (jint)binarySearchWithInt:(jint)value {
  return RepackagedAndroidUtilContainerHelpers_binarySearchWithIntArray_withInt_withInt_(mValues_, mSize_, value);
}


#line 102
- (void)addAllWithRepackagedAndroidUtilIntArray:(RepackagedAndroidUtilIntArray *)values {
  jint count = ((RepackagedAndroidUtilIntArray *) nil_chk(values))->mSize_;
  RepackagedAndroidUtilIntArray_ensureCapacityWithInt_(self, count);
  
#line 106
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(values->mValues_, 0, mValues_, mSize_, count);
  mSize_ += count;
}


#line 113
- (void)ensureCapacityWithInt:(jint)count {
  RepackagedAndroidUtilIntArray_ensureCapacityWithInt_(self, count);
}


#line 129
- (void)clear {
  mSize_ = 0;
}


#line 134
- (RepackagedAndroidUtilIntArray *)clone {
  RepackagedAndroidUtilIntArray *clone = (RepackagedAndroidUtilIntArray *) check_class_cast([super clone], [RepackagedAndroidUtilIntArray class]);
  ((RepackagedAndroidUtilIntArray *) nil_chk(clone))->mValues_ = [((IOSIntArray *) nil_chk(mValues_)) clone];
  return clone;
}


#line 143
- (jint)getWithInt:(jint)index {
  if (index >= mSize_) {
    @throw new_JavaLangArrayIndexOutOfBoundsException_initWithInt_(index);
  }
  return IOSIntArray_Get(nil_chk(mValues_), index);
}


#line 154
- (jint)indexOfWithInt:(jint)value {
  jint n = mSize_;
  for (jint i = 0; i < n; i++) {
    if (IOSIntArray_Get(nil_chk(mValues_), i) == value) {
      return i;
    }
  }
  return -1;
}


#line 167
- (void)removeWithInt:(jint)index {
  if (index >= mSize_) {
    @throw new_JavaLangArrayIndexOutOfBoundsException_initWithInt_(index);
  }
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(mValues_, index + 1, mValues_, index, mSize_ - index - 1);
  mSize_--;
}


#line 178
- (jint)size {
  return mSize_;
}


#line 185
- (IOSIntArray *)toArray {
  return JavaUtilArrays_copyOfWithIntArray_withInt_(mValues_, mSize_);
}

- (id)copyWithZone:(NSZone *)zone {
  return [self clone];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "IntArray", NULL, 0x1, NULL, NULL },
    { "initWithInt:", "IntArray", NULL, 0x1, NULL, NULL },
    { "addWithInt:", "add", "V", 0x1, NULL, NULL },
    { "addWithInt:withInt:", "add", "V", 0x1, NULL, NULL },
    { "binarySearchWithInt:", "binarySearch", "I", 0x1, NULL, NULL },
    { "addAllWithRepackagedAndroidUtilIntArray:", "addAll", "V", 0x1, NULL, NULL },
    { "ensureCapacityWithInt:", "ensureCapacity", "V", 0x2, NULL, NULL },
    { "clear", NULL, "V", 0x1, NULL, NULL },
    { "clone", NULL, "Lrepackaged.android.util.IntArray;", 0x1, "Ljava.lang.CloneNotSupportedException;", NULL },
    { "getWithInt:", "get", "I", 0x1, NULL, NULL },
    { "indexOfWithInt:", "indexOf", "I", 0x1, NULL, NULL },
    { "removeWithInt:", "remove", "V", 0x1, NULL, NULL },
    { "size", NULL, "I", 0x1, NULL, NULL },
    { "toArray", NULL, "[I", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "MIN_CAPACITY_INCREMENT_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = RepackagedAndroidUtilIntArray_MIN_CAPACITY_INCREMENT },
    { "mValues_", NULL, 0x2, "[I", NULL, NULL,  },
    { "mSize_", NULL, 0x2, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _RepackagedAndroidUtilIntArray = { 2, "IntArray", "repackaged.android.util", NULL, 0x1, 14, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_RepackagedAndroidUtilIntArray;
}

@end


#line 38
void RepackagedAndroidUtilIntArray_init(RepackagedAndroidUtilIntArray *self) {
  (void) RepackagedAndroidUtilIntArray_initWithInt_(self, 10);
}


#line 38
RepackagedAndroidUtilIntArray *new_RepackagedAndroidUtilIntArray_init() {
  RepackagedAndroidUtilIntArray *self = [RepackagedAndroidUtilIntArray alloc];
  RepackagedAndroidUtilIntArray_init(self);
  return self;
}


#line 45
void RepackagedAndroidUtilIntArray_initWithInt_(RepackagedAndroidUtilIntArray *self, jint initialCapacity) {
  (void) NSObject_init(self);
  
#line 46
  if (initialCapacity == 0) {
    self->mValues_ = RepackagedLibcoreUtilEmptyArray_get_INT_();
  }
  else {
    
#line 49
    self->mValues_ = RepackagedComAndroidInternalUtilArrayUtils_newUnpaddedIntArrayWithInt_(initialCapacity);
  }
  self->mSize_ = 0;
}


#line 45
RepackagedAndroidUtilIntArray *new_RepackagedAndroidUtilIntArray_initWithInt_(jint initialCapacity) {
  RepackagedAndroidUtilIntArray *self = [RepackagedAndroidUtilIntArray alloc];
  RepackagedAndroidUtilIntArray_initWithInt_(self, initialCapacity);
  return self;
}


#line 113
void RepackagedAndroidUtilIntArray_ensureCapacityWithInt_(RepackagedAndroidUtilIntArray *self, jint count) {
  jint currentSize = self->mSize_;
  jint minCapacity = currentSize + count;
  if (minCapacity >= ((IOSIntArray *) nil_chk(self->mValues_))->size_) {
    jint targetCap = currentSize + (currentSize < (RepackagedAndroidUtilIntArray_MIN_CAPACITY_INCREMENT / 2) ? RepackagedAndroidUtilIntArray_MIN_CAPACITY_INCREMENT : RShift32(
#line 118
    currentSize, 1));
    jint newCapacity = targetCap > minCapacity ? targetCap : minCapacity;
    IOSIntArray *newValues = RepackagedComAndroidInternalUtilArrayUtils_newUnpaddedIntArrayWithInt_(newCapacity);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->mValues_, 0, newValues, 0, currentSize);
    self->mValues_ = newValues;
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RepackagedAndroidUtilIntArray)
