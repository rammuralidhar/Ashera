//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/androidlayouts/repackaged/android/view/WindowInsets.java
//

#ifndef _RepackagedAndroidViewWindowInsets_H_
#define _RepackagedAndroidViewWindowInsets_H_

#include "J2ObjC_header.h"

@class RepackagedAndroidGraphicsRect;

/**
 @brief Describes a set of insets for window content.
 <p>WindowInsets are immutable and may be expanded to include more inset types in the future. To adjust insets, use one of the supplied clone methods to obtain a new WindowInsets instance with the adjusted properties.</p>
 */
@interface RepackagedAndroidViewWindowInsets : NSObject

#pragma mark Public

/**
 */
- (instancetype)initWithRepackagedAndroidGraphicsRect:(RepackagedAndroidGraphicsRect *)systemWindowInsets;

/**
 */
- (instancetype)initWithRepackagedAndroidGraphicsRect:(RepackagedAndroidGraphicsRect *)systemWindowInsets
                    withRepackagedAndroidGraphicsRect:(RepackagedAndroidGraphicsRect *)windowDecorInsets
                    withRepackagedAndroidGraphicsRect:(RepackagedAndroidGraphicsRect *)stableInsets
                                          withBoolean:(jboolean)isRound;

/**
 @brief Construct a new WindowInsets, copying all values from a source WindowInsets.
 @param src Source to copy insets from
 */
- (instancetype)initWithRepackagedAndroidViewWindowInsets:(RepackagedAndroidViewWindowInsets *)src;

/**
 @brief Returns a copy of this WindowInsets with the stable insets fully consumed.
 @return A modified copy of this WindowInsets
 */
- (RepackagedAndroidViewWindowInsets *)consumeStableInsets;

/**
 @brief Returns a copy of this WindowInsets with the system window insets fully consumed.
 @return A modified copy of this WindowInsets
 */
- (RepackagedAndroidViewWindowInsets *)consumeSystemWindowInsets;

/**
 @brief Returns a copy of this WindowInsets with selected system window insets fully consumed.
 @param left true to consume the left system window inset
 @param top true to consume the top system window inset
 @param right true to consume the right system window inset
 @param bottom true to consume the bottom system window inset
 @return A modified copy of this WindowInsets
 pending API
 */
- (RepackagedAndroidViewWindowInsets *)consumeSystemWindowInsetsWithBoolean:(jboolean)left
                                                                withBoolean:(jboolean)top
                                                                withBoolean:(jboolean)right
                                                                withBoolean:(jboolean)bottom;

/**
 */
- (RepackagedAndroidViewWindowInsets *)consumeWindowDecorInsets;

/**
 */
- (RepackagedAndroidViewWindowInsets *)consumeWindowDecorInsetsWithBoolean:(jboolean)left
                                                               withBoolean:(jboolean)top
                                                               withBoolean:(jboolean)right
                                                               withBoolean:(jboolean)bottom;

/**
 @brief Returns the bottom stable inset in pixels.
 <p>The stable inset represents the area of a full-screen window that <b>may</b> be partially or fully obscured by the system UI elements.  This value does not change based on the visibility state of those elements; for example, if the status bar is normally shown, but temporarily hidden, the stable inset will still provide the inset associated with the status bar being shown.</p>
 @return The bottom stable inset
 */
- (jint)getStableInsetBottom;

/**
 @brief Returns the left stable inset in pixels.
 <p>The stable inset represents the area of a full-screen window that <b>may</b> be partially or fully obscured by the system UI elements.  This value does not change based on the visibility state of those elements; for example, if the status bar is normally shown, but temporarily hidden, the stable inset will still provide the inset associated with the status bar being shown.</p>
 @return The left stable inset
 */
- (jint)getStableInsetLeft;

/**
 @brief Returns the right stable inset in pixels.
 <p>The stable inset represents the area of a full-screen window that <b>may</b> be partially or fully obscured by the system UI elements.  This value does not change based on the visibility state of those elements; for example, if the status bar is normally shown, but temporarily hidden, the stable inset will still provide the inset associated with the status bar being shown.</p>
 @return The right stable inset
 */
- (jint)getStableInsetRight;

/**
 @brief Returns the top stable inset in pixels.
 <p>The stable inset represents the area of a full-screen window that <b>may</b> be partially or fully obscured by the system UI elements.  This value does not change based on the visibility state of those elements; for example, if the status bar is normally shown, but temporarily hidden, the stable inset will still provide the inset associated with the status bar being shown.</p>
 @return The top stable inset
 */
- (jint)getStableInsetTop;

/**
 @brief Returns the bottom system window inset in pixels.
 <p>The system window inset represents the area of a full-screen window that is partially or fully obscured by the status bar, navigation bar, IME or other system windows. </p>
 @return The bottom system window inset
 */
- (jint)getSystemWindowInsetBottom;

/**
 @brief Returns the left system window inset in pixels.
 <p>The system window inset represents the area of a full-screen window that is partially or fully obscured by the status bar, navigation bar, IME or other system windows. </p>
 @return The left system window inset
 */
- (jint)getSystemWindowInsetLeft;

/**
 @brief Returns the right system window inset in pixels.
 <p>The system window inset represents the area of a full-screen window that is partially or fully obscured by the status bar, navigation bar, IME or other system windows. </p>
 @return The right system window inset
 */
- (jint)getSystemWindowInsetRight;

/**
 @brief Used to provide a safe copy of the system window insets to pass through to the existing fitSystemWindows method and other similar internals.
 */
- (RepackagedAndroidGraphicsRect *)getSystemWindowInsets;

/**
 @brief Returns the top system window inset in pixels.
 <p>The system window inset represents the area of a full-screen window that is partially or fully obscured by the status bar, navigation bar, IME or other system windows. </p>
 @return The top system window inset
 */
- (jint)getSystemWindowInsetTop;

/**
 @brief Returns the bottom window decor inset in pixels.
 <p>The window decor inset represents the area of the window content area that is partially or fully obscured by decorations within the window provided by the framework. This can include action bars, title bars, toolbars, etc.</p>
 @return The bottom window decor inset
 pending API
 */
- (jint)getWindowDecorInsetBottom;

/**
 @brief Returns the left window decor inset in pixels.
 <p>The window decor inset represents the area of the window content area that is partially or fully obscured by decorations within the window provided by the framework. This can include action bars, title bars, toolbars, etc.</p>
 @return The left window decor inset
 pending API
 */
- (jint)getWindowDecorInsetLeft;

/**
 @brief Returns the right window decor inset in pixels.
 <p>The window decor inset represents the area of the window content area that is partially or fully obscured by decorations within the window provided by the framework. This can include action bars, title bars, toolbars, etc.</p>
 @return The right window decor inset
 pending API
 */
- (jint)getWindowDecorInsetRight;

/**
 @brief Returns the top window decor inset in pixels.
 <p>The window decor inset represents the area of the window content area that is partially or fully obscured by decorations within the window provided by the framework. This can include action bars, title bars, toolbars, etc.</p>
 @return The top window decor inset
 pending API
 */
- (jint)getWindowDecorInsetTop;

/**
 @brief Returns true if this WindowInsets has any nonzero insets.
 @return true if any inset values are nonzero
 */
- (jboolean)hasInsets;

/**
 @brief Returns true if this WindowInsets has nonzero stable insets.
 <p>The stable inset represents the area of a full-screen window that <b>may</b> be partially or fully obscured by the system UI elements.  This value does not change based on the visibility state of those elements; for example, if the status bar is normally shown, but temporarily hidden, the stable inset will still provide the inset associated with the status bar being shown.</p>
 @return true if any of the stable inset values are nonzero
 */
- (jboolean)hasStableInsets;

/**
 @brief Returns true if this WindowInsets has nonzero system window insets.
 <p>The system window inset represents the area of a full-screen window that is partially or fully obscured by the status bar, navigation bar, IME or other system windows. </p>
 @return true if any of the system window inset values are nonzero
 */
- (jboolean)hasSystemWindowInsets;

/**
 @brief Returns true if this WindowInsets has nonzero window decor insets.
 <p>The window decor inset represents the area of the window content area that is partially or fully obscured by decorations within the window provided by the framework. This can include action bars, title bars, toolbars, etc.</p>
 @return true if any of the window decor inset values are nonzero
 pending API
 */
- (jboolean)hasWindowDecorInsets;

/**
 @brief Check if these insets have been fully consumed.
 <p>Insets are considered "consumed" if the applicable <code>consume*</code> methods have been called such that all insets have been set to zero. This affects propagation of insets through the view hierarchy; insets that have not been fully consumed will continue to propagate down to child views.</p> <p>The result of this method is equivalent to the return value of View#fitSystemWindows(repackaged.android.graphics.Rect) .</p>
 @return true if the insets have been fully consumed.
 */
- (jboolean)isConsumed;

/**
 @brief Returns true if the associated window has a round shape.
 <p>A round window's left, top, right and bottom edges reach all the way to the associated edges of the window but the corners may not be visible. Views responding to round insets should take care to not lay out critical elements within the corners where they may not be accessible.</p>
 @return True if the window is round
 */
- (jboolean)isRound;

/**
 @brief Returns a copy of this WindowInsets with selected system window insets replaced with new values.
 @param left New left inset in pixels
 @param top New top inset in pixels
 @param right New right inset in pixels
 @param bottom New bottom inset in pixels
 @return A modified copy of this WindowInsets
 */
- (RepackagedAndroidViewWindowInsets *)replaceSystemWindowInsetsWithInt:(jint)left
                                                                withInt:(jint)top
                                                                withInt:(jint)right
                                                                withInt:(jint)bottom;

/**
 @brief Returns a copy of this WindowInsets with selected system window insets replaced with new values.
 @param systemWindowInsets New system window insets. Each field is the inset in pixels for that edge
 @return A modified copy of this WindowInsets
 */
- (RepackagedAndroidViewWindowInsets *)replaceSystemWindowInsetsWithRepackagedAndroidGraphicsRect:(RepackagedAndroidGraphicsRect *)systemWindowInsets;

/**
 */
- (RepackagedAndroidViewWindowInsets *)replaceWindowDecorInsetsWithInt:(jint)left
                                                               withInt:(jint)top
                                                               withInt:(jint)right
                                                               withInt:(jint)bottom;

- (NSString *)description;

@end

J2OBJC_STATIC_INIT(RepackagedAndroidViewWindowInsets)

FOUNDATION_EXPORT RepackagedAndroidViewWindowInsets *RepackagedAndroidViewWindowInsets_CONSUMED_;
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewWindowInsets, CONSUMED_, RepackagedAndroidViewWindowInsets *)

FOUNDATION_EXPORT void RepackagedAndroidViewWindowInsets_initWithRepackagedAndroidGraphicsRect_withRepackagedAndroidGraphicsRect_withRepackagedAndroidGraphicsRect_withBoolean_(RepackagedAndroidViewWindowInsets *self, RepackagedAndroidGraphicsRect *systemWindowInsets, RepackagedAndroidGraphicsRect *windowDecorInsets, RepackagedAndroidGraphicsRect *stableInsets, jboolean isRound);

FOUNDATION_EXPORT RepackagedAndroidViewWindowInsets *new_RepackagedAndroidViewWindowInsets_initWithRepackagedAndroidGraphicsRect_withRepackagedAndroidGraphicsRect_withRepackagedAndroidGraphicsRect_withBoolean_(RepackagedAndroidGraphicsRect *systemWindowInsets, RepackagedAndroidGraphicsRect *windowDecorInsets, RepackagedAndroidGraphicsRect *stableInsets, jboolean isRound) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void RepackagedAndroidViewWindowInsets_initWithRepackagedAndroidViewWindowInsets_(RepackagedAndroidViewWindowInsets *self, RepackagedAndroidViewWindowInsets *src);

FOUNDATION_EXPORT RepackagedAndroidViewWindowInsets *new_RepackagedAndroidViewWindowInsets_initWithRepackagedAndroidViewWindowInsets_(RepackagedAndroidViewWindowInsets *src) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void RepackagedAndroidViewWindowInsets_initWithRepackagedAndroidGraphicsRect_(RepackagedAndroidViewWindowInsets *self, RepackagedAndroidGraphicsRect *systemWindowInsets);

FOUNDATION_EXPORT RepackagedAndroidViewWindowInsets *new_RepackagedAndroidViewWindowInsets_initWithRepackagedAndroidGraphicsRect_(RepackagedAndroidGraphicsRect *systemWindowInsets) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(RepackagedAndroidViewWindowInsets)

#endif // _RepackagedAndroidViewWindowInsets_H_
