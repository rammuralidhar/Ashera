//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/androidlayouts/repackaged/android/util/Slog.java
//

#ifndef _RepackagedAndroidUtilSlog_H_
#define _RepackagedAndroidUtilSlog_H_

#include "J2ObjC_header.h"

@class JavaLangThrowable;

/**
 */
@interface RepackagedAndroidUtilSlog : NSObject

#pragma mark Public

+ (jint)dWithNSString:(NSString *)tag
         withNSString:(NSString *)msg;

+ (jint)dWithNSString:(NSString *)tag
         withNSString:(NSString *)msg
withJavaLangThrowable:(JavaLangThrowable *)tr;

+ (jint)eWithNSString:(NSString *)tag
         withNSString:(NSString *)msg;

+ (jint)eWithNSString:(NSString *)tag
         withNSString:(NSString *)msg
withJavaLangThrowable:(JavaLangThrowable *)tr;

+ (jint)iWithNSString:(NSString *)tag
         withNSString:(NSString *)msg;

+ (jint)iWithNSString:(NSString *)tag
         withNSString:(NSString *)msg
withJavaLangThrowable:(JavaLangThrowable *)tr;

+ (jint)printlnWithInt:(jint)priority
          withNSString:(NSString *)tag
          withNSString:(NSString *)msg;

+ (jint)vWithNSString:(NSString *)tag
         withNSString:(NSString *)msg;

+ (jint)vWithNSString:(NSString *)tag
         withNSString:(NSString *)msg
withJavaLangThrowable:(JavaLangThrowable *)tr;

+ (jint)wWithNSString:(NSString *)tag
         withNSString:(NSString *)msg;

+ (jint)wWithNSString:(NSString *)tag
         withNSString:(NSString *)msg
withJavaLangThrowable:(JavaLangThrowable *)tr;

+ (jint)wWithNSString:(NSString *)tag
withJavaLangThrowable:(JavaLangThrowable *)tr;

/**
 @brief Like Log#wtf(String,String) , but will never cause the caller to crash, and will always be handled asynchronously.
 Primarily for use by coding running within the system process.
 */
+ (jint)wtfWithNSString:(NSString *)tag
           withNSString:(NSString *)msg;

/**
 @brief Like Log#wtf(String,String,Throwable) , but will never cause the caller to crash, and will always be handled asynchronously.
 Primarily for use by coding running within the system process.
 */
+ (jint)wtfWithNSString:(NSString *)tag
           withNSString:(NSString *)msg
  withJavaLangThrowable:(JavaLangThrowable *)tr;

/**
 @brief Like Log#wtf(String,Throwable) , but will never cause the caller to crash, and will always be handled asynchronously.
 Primarily for use by coding running within the system process.
 */
+ (jint)wtfWithNSString:(NSString *)tag
  withJavaLangThrowable:(JavaLangThrowable *)tr;

/**
 @brief Like #wtf(String,String) , but does not output anything to the log.
 */
+ (void)wtfQuietWithNSString:(NSString *)tag
                withNSString:(NSString *)msg;

/**
 @brief Like Log#wtfStack(String,String) , but will never cause the caller to crash, and will always be handled asynchronously.
 Primarily for use by coding running within the system process.
 */
+ (jint)wtfStackWithNSString:(NSString *)tag
                withNSString:(NSString *)msg;

@end

J2OBJC_EMPTY_STATIC_INIT(RepackagedAndroidUtilSlog)

FOUNDATION_EXPORT jint RepackagedAndroidUtilSlog_vWithNSString_withNSString_(NSString *tag, NSString *msg);

FOUNDATION_EXPORT jint RepackagedAndroidUtilSlog_vWithNSString_withNSString_withJavaLangThrowable_(NSString *tag, NSString *msg, JavaLangThrowable *tr);

FOUNDATION_EXPORT jint RepackagedAndroidUtilSlog_dWithNSString_withNSString_(NSString *tag, NSString *msg);

FOUNDATION_EXPORT jint RepackagedAndroidUtilSlog_dWithNSString_withNSString_withJavaLangThrowable_(NSString *tag, NSString *msg, JavaLangThrowable *tr);

FOUNDATION_EXPORT jint RepackagedAndroidUtilSlog_iWithNSString_withNSString_(NSString *tag, NSString *msg);

FOUNDATION_EXPORT jint RepackagedAndroidUtilSlog_iWithNSString_withNSString_withJavaLangThrowable_(NSString *tag, NSString *msg, JavaLangThrowable *tr);

FOUNDATION_EXPORT jint RepackagedAndroidUtilSlog_wWithNSString_withNSString_(NSString *tag, NSString *msg);

FOUNDATION_EXPORT jint RepackagedAndroidUtilSlog_wWithNSString_withNSString_withJavaLangThrowable_(NSString *tag, NSString *msg, JavaLangThrowable *tr);

FOUNDATION_EXPORT jint RepackagedAndroidUtilSlog_wWithNSString_withJavaLangThrowable_(NSString *tag, JavaLangThrowable *tr);

FOUNDATION_EXPORT jint RepackagedAndroidUtilSlog_eWithNSString_withNSString_(NSString *tag, NSString *msg);

FOUNDATION_EXPORT jint RepackagedAndroidUtilSlog_eWithNSString_withNSString_withJavaLangThrowable_(NSString *tag, NSString *msg, JavaLangThrowable *tr);

FOUNDATION_EXPORT jint RepackagedAndroidUtilSlog_wtfWithNSString_withNSString_(NSString *tag, NSString *msg);

FOUNDATION_EXPORT void RepackagedAndroidUtilSlog_wtfQuietWithNSString_withNSString_(NSString *tag, NSString *msg);

FOUNDATION_EXPORT jint RepackagedAndroidUtilSlog_wtfStackWithNSString_withNSString_(NSString *tag, NSString *msg);

FOUNDATION_EXPORT jint RepackagedAndroidUtilSlog_wtfWithNSString_withJavaLangThrowable_(NSString *tag, JavaLangThrowable *tr);

FOUNDATION_EXPORT jint RepackagedAndroidUtilSlog_wtfWithNSString_withNSString_withJavaLangThrowable_(NSString *tag, NSString *msg, JavaLangThrowable *tr);

FOUNDATION_EXPORT jint RepackagedAndroidUtilSlog_printlnWithInt_withNSString_withNSString_(jint priority, NSString *tag, NSString *msg);

J2OBJC_TYPE_LITERAL_HEADER(RepackagedAndroidUtilSlog)

#endif // _RepackagedAndroidUtilSlog_H_
