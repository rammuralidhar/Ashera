//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/androidlayouts/repackaged/android/graphics/Outline.java
//

#ifndef _RepackagedAndroidGraphicsOutline_H_
#define _RepackagedAndroidGraphicsOutline_H_

#include "J2ObjC_header.h"

@class RepackagedAndroidGraphicsPath;
@class RepackagedAndroidGraphicsRect;

/**
 @brief Defines a simple shape, used for bounding graphical regions.
 <p> Can be computed for a View, or computed by a Drawable, to drive the shape of shadows cast by a View, or to clip the contents of the View.
 */
@interface RepackagedAndroidGraphicsOutline : NSObject {
 @public
  /**
   */
  RepackagedAndroidGraphicsPath *mPath_;
  /**
   */
  RepackagedAndroidGraphicsRect *mRect_;
  /**
   */
  jfloat mRadius_;
  /**
   */
  jfloat mAlpha_;
}

#pragma mark Public

/**
 @brief Constructs an empty Outline.
 Call one of the setter methods to make the outline valid for use with a View.
 */
- (instancetype)init;

/**
 @brief Constructs an Outline with a copy of the data in src.
 */
- (instancetype)initWithRepackagedAndroidGraphicsOutline:(RepackagedAndroidGraphicsOutline *)src;

/**
 @brief Returns whether the outline can be used to clip a View.
 <p> Currently, only Outlines that can be represented as a rectangle, circle, or round rect support clipping.
 */
- (jboolean)canClip;

/**
 @brief Returns the alpha represented by the Outline.
 */
- (jfloat)getAlpha;

/**
 @brief Returns whether the Outline is empty.
 <p> Outlines are empty when constructed, or if #setEmpty() is called, until a setter method is called
 */
- (jboolean)isEmpty;

/**
 @brief Offsets the Outline by (dx,dy)
 */
- (void)offsetWithInt:(jint)dx
              withInt:(jint)dy;

/**
 @brief Replace the contents of this Outline with the contents of src.
 @param src Source outline to copy from.
 */
- (void)setWithRepackagedAndroidGraphicsOutline:(RepackagedAndroidGraphicsOutline *)src;

/**
 @brief Sets the alpha represented by the Outline - the degree to which the producer is guaranteed to be opaque over the Outline's shape.
 <p> An alpha value of <code>0.0f</code> either represents completely transparent content, or content that isn't guaranteed to fill the shape it publishes. <p> Content producing a fully opaque (alpha = <code>1.0f</code>) outline is assumed by the drawing system to fully cover content beneath it, meaning content beneath may be optimized away.
 */
- (void)setAlphaWithFloat:(jfloat)alpha;

/**
 @brief Sets the Constructs an Outline from a repackaged.android.graphics.Path#isConvex() convex path .
 */
- (void)setConvexPathWithRepackagedAndroidGraphicsPath:(RepackagedAndroidGraphicsPath *)convexPath;

/**
 @brief Sets the outline to be empty.
 */
- (void)setEmpty;

/**
 @brief Sets the outline to the oval defined by input rect.
 */
- (void)setOvalWithInt:(jint)left
               withInt:(jint)top
               withInt:(jint)right
               withInt:(jint)bottom;

/**
 @brief Convenience for #setOval(int,int,int,int)
 */
- (void)setOvalWithRepackagedAndroidGraphicsRect:(RepackagedAndroidGraphicsRect *)rect;

/**
 @brief Sets the Outline to the rounded rect defined by the input rect, and corner radius.
 */
- (void)setRectWithInt:(jint)left
               withInt:(jint)top
               withInt:(jint)right
               withInt:(jint)bottom;

/**
 @brief Convenience for #setRect(int,int,int,int)
 */
- (void)setRectWithRepackagedAndroidGraphicsRect:(RepackagedAndroidGraphicsRect *)rect;

/**
 @brief Sets the Outline to the rounded rect defined by the input rect, and corner radius.
 <p> Passing a zero radius is equivalent to calling #setRect(int,int,int,int)
 */
- (void)setRoundRectWithInt:(jint)left
                    withInt:(jint)top
                    withInt:(jint)right
                    withInt:(jint)bottom
                  withFloat:(jfloat)radius;

/**
 @brief Convenience for #setRoundRect(int,int,int,int,float)
 */
- (void)setRoundRectWithRepackagedAndroidGraphicsRect:(RepackagedAndroidGraphicsRect *)rect
                                            withFloat:(jfloat)radius;

@end

J2OBJC_EMPTY_STATIC_INIT(RepackagedAndroidGraphicsOutline)

J2OBJC_FIELD_SETTER(RepackagedAndroidGraphicsOutline, mPath_, RepackagedAndroidGraphicsPath *)
J2OBJC_FIELD_SETTER(RepackagedAndroidGraphicsOutline, mRect_, RepackagedAndroidGraphicsRect *)

FOUNDATION_EXPORT void RepackagedAndroidGraphicsOutline_init(RepackagedAndroidGraphicsOutline *self);

FOUNDATION_EXPORT RepackagedAndroidGraphicsOutline *new_RepackagedAndroidGraphicsOutline_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void RepackagedAndroidGraphicsOutline_initWithRepackagedAndroidGraphicsOutline_(RepackagedAndroidGraphicsOutline *self, RepackagedAndroidGraphicsOutline *src);

FOUNDATION_EXPORT RepackagedAndroidGraphicsOutline *new_RepackagedAndroidGraphicsOutline_initWithRepackagedAndroidGraphicsOutline_(RepackagedAndroidGraphicsOutline *src) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(RepackagedAndroidGraphicsOutline)

#endif // _RepackagedAndroidGraphicsOutline_H_
