//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroidParser/androidlayouts/repackaged/android/view/accessibility/AccessibilityNodeInfo.java
//

#ifndef _RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_H_
#define _RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_H_

#include "J2ObjC_header.h"
#include "Parcelable.h"

@class RepackagedAndroidGraphicsRect;
@class RepackagedAndroidOsBundle;
@class RepackagedAndroidUtilLongArray;
@class RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction;
@class RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_CollectionInfo;
@class RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_CollectionItemInfo;
@class RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_RangeInfo;
@class RepackagedAndroidViewAccessibilityAccessibilityWindowInfo;
@class RepackagedAndroidViewView;
@protocol JavaLangCharSequence;
@protocol JavaUtilList;
@protocol RepackagedAndroidOsParcel;

#define RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_UNDEFINED_CONNECTION_ID -1
#define RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_UNDEFINED_SELECTION_INDEX -1
#define RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_UNDEFINED_ITEM_ID 2147483647
#define RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_ACTIVE_WINDOW_ID 2147483647
#define RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_ANY_WINDOW_ID -2
#define RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_FLAG_PREFETCH_PREDECESSORS 1
#define RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_FLAG_PREFETCH_SIBLINGS 2
#define RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_FLAG_PREFETCH_DESCENDANTS 4
#define RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_FLAG_INCLUDE_NOT_IMPORTANT_VIEWS 8
#define RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_FLAG_REPORT_VIEW_IDS 16
#define RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_ACTION_FOCUS 1
#define RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_ACTION_CLEAR_FOCUS 2
#define RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_ACTION_SELECT 4
#define RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_ACTION_CLEAR_SELECTION 8
#define RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_ACTION_CLICK 16
#define RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_ACTION_LONG_CLICK 32
#define RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_ACTION_ACCESSIBILITY_FOCUS 64
#define RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_ACTION_CLEAR_ACCESSIBILITY_FOCUS 128
#define RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_ACTION_NEXT_AT_MOVEMENT_GRANULARITY 256
#define RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_ACTION_PREVIOUS_AT_MOVEMENT_GRANULARITY 512
#define RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_ACTION_NEXT_HTML_ELEMENT 1024
#define RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_ACTION_PREVIOUS_HTML_ELEMENT 2048
#define RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_ACTION_SCROLL_FORWARD 4096
#define RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_ACTION_SCROLL_BACKWARD 8192
#define RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_ACTION_COPY 16384
#define RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_ACTION_PASTE 32768
#define RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_ACTION_CUT 65536
#define RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_ACTION_SET_SELECTION 131072
#define RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_ACTION_EXPAND 262144
#define RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_ACTION_COLLAPSE 524288
#define RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_ACTION_DISMISS 1048576
#define RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_ACTION_SET_TEXT 2097152
#define RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_FOCUS_INPUT 1
#define RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_FOCUS_ACCESSIBILITY 2
#define RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_MOVEMENT_GRANULARITY_CHARACTER 1
#define RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_MOVEMENT_GRANULARITY_WORD 2
#define RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_MOVEMENT_GRANULARITY_LINE 4
#define RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_MOVEMENT_GRANULARITY_PARAGRAPH 8
#define RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_MOVEMENT_GRANULARITY_PAGE 16

/**
 @brief This class represents a node of the window content as well as actions that can be requested from its source.
 From the point of view of an android.accessibilityservice.AccessibilityService a window content is presented as tree of accessibility node info which may or may not map one-to-one to the view hierarchy. In other words, a custom view is free to report itself as a tree of accessibility node info. </p> <p> Once an accessibility node info is delivered to an accessibility service it is made immutable and calling a state mutation method generates an error. </p> <p> Please refer to android.accessibilityservice.AccessibilityService for details about how to obtain a handle to window content as a tree of accessibility node info as well as familiarizing with the security model. </p> <div class="special reference"> <h3>Developer Guides</h3> <p>For more information about making applications accessible, read the <a href="  guide/topics/ui/accessibility/index.html">Accessibility</a> developer guide.</p> </div>
 */
@interface RepackagedAndroidViewAccessibilityAccessibilityNodeInfo : NSObject < RepackagedAndroidOsParcelable >

#pragma mark Public

/**
 @brief Adds an action that can be performed on the node.
 <p> To add a standard action use the static constants on AccessibilityAction . To add a custom action create a new AccessibilityAction by passing in a resource id from your application as the action id and an optional label that describes the action. To override one of the standard actions use as the action id of a standard action id such as #ACTION_CLICK and an optional label that describes the action. </p> <p> <strong>Note:</strong> Cannot be called from an android.accessibilityservice.AccessibilityService . This class is made immutable before being delivered to an AccessibilityService. </p>
 @param action The action.
 @throws IllegalStateException If called from an AccessibilityService.
 */
- (void)addActionWithRepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction:(RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction *)action;

/**
 @brief Adds an action that can be performed on the node.
 <p> <strong>Note:</strong> Cannot be called from an android.accessibilityservice.AccessibilityService . This class is made immutable before being delivered to an AccessibilityService. </p>
 @param action The action.
 @throws IllegalStateException If called from an AccessibilityService.
 @throws IllegalArgumentException If the argument is not one of the standard actions.
 */
- (void)addActionWithInt:(jint)action;

/**
 @brief Adds a child.
 <p> <strong>Note:</strong> Cannot be called from an android.accessibilityservice.AccessibilityService . This class is made immutable before being delivered to an AccessibilityService. </p>
 @param child The child.
 @throws IllegalStateException If called from an AccessibilityService.
 */
- (void)addChildWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)child;

/**
 @brief Adds a virtual child which is a descendant of the given <code>root</code>.
 If <code>virtualDescendantId</code> is View#NO_ID the root is added as a child. <p> A virtual descendant is an imaginary View that is reported as a part of the view hierarchy for accessibility purposes. This enables custom views that draw complex content to report them selves as a tree of virtual views, thus conveying their logical structure. </p>
 @param root The root of the virtual subtree.
 @param virtualDescendantId The id of the virtual child.
 */
- (void)addChildWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)root
                                      withInt:(jint)virtualDescendantId;

/**
 @brief Unchecked version of #addChild(View) that does not verify uniqueness.
 For framework use only.
 */
- (void)addChildUncheckedWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)child;

/**
 @brief Gets if this node opens a popup or a dialog.
 @return If the the node opens a popup.
 */
- (jboolean)canOpenPopup;

/**
 
 */
- (jint)describeContents;

- (jboolean)isEqual:(id)object;

/**
 @brief Finds AccessibilityNodeInfo s by text.
 The match is case insensitive containment. The search is relative to this info i.e. this info is the root of the traversed tree. <p> <strong>Note:</strong> It is a client responsibility to recycle the received info by calling AccessibilityNodeInfo#recycle() to avoid creating of multiple instances. </p>
 @param text The searched text.
 @return A list of node info.
 */
- (id<JavaUtilList>)findAccessibilityNodeInfosByTextWithNSString:(NSString *)text;

/**
 @brief Finds AccessibilityNodeInfo s by the fully qualified view id's resource name where a fully qualified id is of the from "package:id/id_resource_name".
 For example, if the target application's package is "foo.bar" and the id resource name is "baz", the fully qualified resource id is "foo.bar:id/baz". <p> <strong>Note:</strong> It is a client responsibility to recycle the received info by calling AccessibilityNodeInfo#recycle() to avoid creating of multiple instances. </p> <p> <strong>Note:</strong> The primary usage of this API is for UI test automation and in order to report the fully qualified view id if an AccessibilityNodeInfo the client has to set the AccessibilityServiceInfo#FLAG_REPORT_VIEW_IDS flag when configuring his android.accessibilityservice.AccessibilityService . </p>
 @param viewId The fully qualified resource name of the view id to find.
 @return A list of node info.
 */
- (id<JavaUtilList>)findAccessibilityNodeInfosByViewIdWithNSString:(NSString *)viewId;

/**
 @brief Find the view that has the specified focus type.
 The search starts from the view represented by this node info.
 @param focus The focus to find. One of #FOCUS_INPUT or #FOCUS_ACCESSIBILITY .
 @return The node info of the focused view or null.
 */
- (RepackagedAndroidViewAccessibilityAccessibilityNodeInfo *)findFocusWithInt:(jint)focus;

/**
 @brief Searches for the nearest view in the specified direction that can take the input focus.
 @param direction The direction. Can be one of: View#FOCUS_DOWN , View#FOCUS_UP , View#FOCUS_LEFT , View#FOCUS_RIGHT , View#FOCUS_FORWARD , View#FOCUS_BACKWARD .
 @return The node info for the view that can take accessibility focus.
 */
- (RepackagedAndroidViewAccessibilityAccessibilityNodeInfo *)focusSearchWithInt:(jint)direction;

/**
 @brief Gets the accessibility view id which identifies a View in the view three.
 @param accessibilityNodeId The id of an AccessibilityNodeInfo .
 @return The accessibility view id part of the node id.
 */
+ (jint)getAccessibilityViewIdWithLong:(jlong)accessibilityNodeId;

/**
 @brief Gets the actions that can be performed on the node.
 */
- (id<JavaUtilList>)getActionList;

/**
 @brief Gets the actions that can be performed on the node.
 @return The bit mask of with actions.
 */
- (jint)getActions;

/**
 @brief Gets the node bounds in parent coordinates.
 @param outBounds The output node bounds.
 */
- (void)getBoundsInParentWithRepackagedAndroidGraphicsRect:(RepackagedAndroidGraphicsRect *)outBounds;

/**
 @brief Returns the actual rect containing the node bounds in screen coordinates.
 Not safe to expose outside the framework.
 */
- (RepackagedAndroidGraphicsRect *)getBoundsInScreen;

/**
 @brief Gets the node bounds in screen coordinates.
 @param outBounds The output node bounds.
 */
- (void)getBoundsInScreenWithRepackagedAndroidGraphicsRect:(RepackagedAndroidGraphicsRect *)outBounds;

/**
 @brief Get the child at given index.
 <p> <strong>Note:</strong> It is a client responsibility to recycle the received info by calling AccessibilityNodeInfo#recycle() to avoid creating of multiple instances. </p>
 @param index The child index.
 @return The child node.
 @throws IllegalStateException If called outside of an AccessibilityService.
 */
- (RepackagedAndroidViewAccessibilityAccessibilityNodeInfo *)getChildWithInt:(jint)index;

/**
 @brief Gets the number of children.
 @return The child count.
 */
- (jint)getChildCount;

/**
 @brief Returns the id of the child at the specified index.
 @throws IndexOutOfBoundsException when index &lt; 0 || index &gt;= getChildCount()
 */
- (jlong)getChildIdWithInt:(jint)index;

/**
 @brief Returns the array containing the IDs of this node's children.
 */
- (RepackagedAndroidUtilLongArray *)getChildNodeIds;

/**
 @brief Gets the class this node comes from.
 @return The class name.
 */
- (id<JavaLangCharSequence>)getClassName;

/**
 @brief Gets the collection info if the node is a collection.
 A collection child is always a collection item.
 @return The collection info.
 */
- (RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_CollectionInfo *)getCollectionInfo;

/**
 @brief Gets the collection item info if the node is a collection item.
 A collection item is always a child of a collection.
 @return The collection item info.
 */
- (RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_CollectionItemInfo *)getCollectionItemInfo;

/**
 @brief Gets the content description of this node.
 @return The content description.
 */
- (id<JavaLangCharSequence>)getContentDescription;

/**
 @brief Gets the error text of this node.
 @return The error text.
 */
- (id<JavaLangCharSequence>)getError;

/**
 @brief Gets an optional bundle with extra data.
 The bundle is lazily created and never <code>null</code>. <p> <strong>Note:</strong> It is recommended to use the package name of your application as a prefix for the keys to avoid collisions which may confuse an accessibility service if the same key has different meaning when emitted from different applications. </p>
 @return The bundle.
 */
- (RepackagedAndroidOsBundle *)getExtras;

/**
 @brief Gets the input type of the source as defined by InputType .
 @return The input type.
 */
- (jint)getInputType;

/**
 @brief Gets the node info which serves as the label of the view represented by this info for accessibility purposes.
 <p> <strong>Note:</strong> It is a client responsibility to recycle the received info by calling AccessibilityNodeInfo#recycle() to avoid creating of multiple instances. </p>
 @return The label.
 */
- (RepackagedAndroidViewAccessibilityAccessibilityNodeInfo *)getLabeledBy;

/**
 @brief Gets the node info for which the view represented by this info serves as a label for accessibility purposes.
 <p> <strong>Note:</strong> It is a client responsibility to recycle the received info by calling AccessibilityNodeInfo#recycle() to avoid creating of multiple instances. </p>
 @return The labeled info.
 */
- (RepackagedAndroidViewAccessibilityAccessibilityNodeInfo *)getLabelFor;

/**
 @brief Gets the node's live region mode.
 <p> A live region is a node that contains information that is important for the user and when it changes the user should be notified. For example, in a login screen with a TextView that displays an "incorrect password" notification, that view should be marked as a live region with mode View#ACCESSIBILITY_LIVE_REGION_POLITE . <p> It is the responsibility of the accessibility service to monitor AccessibilityEvent#TYPE_WINDOW_CONTENT_CHANGED events indicating changes to live region nodes and their children.
 @return The live region mode, or View#ACCESSIBILITY_LIVE_REGION_NONE if the view is not a live region.
 */
- (jint)getLiveRegion;

/**
 @brief Returns the maximum text length for this node.
 @return The maximum text length, or -1 for no limit.
 */
- (jint)getMaxTextLength;

/**
 @brief Gets the movement granularities for traversing the text of this node.
 @return The bit mask with granularities.
 */
- (jint)getMovementGranularities;

/**
 @brief Gets the package this node comes from.
 @return The package name.
 */
- (id<JavaLangCharSequence>)getPackageName;

/**
 @brief Gets the parent.
 <p> <strong>Note:</strong> It is a client responsibility to recycle the received info by calling AccessibilityNodeInfo#recycle() to avoid creating of multiple instances. </p>
 @return The parent.
 */
- (RepackagedAndroidViewAccessibilityAccessibilityNodeInfo *)getParent;

/**
 @return The parent node id.
 */
- (jlong)getParentNodeId;

/**
 @brief Gets the range info if this node is a range.
 @return The range.
 */
- (RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_RangeInfo *)getRangeInfo;

/**
 @brief Gets the id of the source node.
 @return The id.
 */
- (jlong)getSourceNodeId;

/**
 @brief Gets the text of this node.
 @return The text.
 */
- (id<JavaLangCharSequence>)getText;

/**
 @brief Gets the text selection end.
 @return The text selection end if there is selection or -1.
 */
- (jint)getTextSelectionEnd;

/**
 @brief Gets the text selection start.
 @return The text selection start if there is selection or -1.
 */
- (jint)getTextSelectionStart;

/**
 @brief Gets the node after which this one is visited in accessibility traversal.
 A screen-reader must visit the content of the other node before the content of this one.
 @return The succeeding node if such or <code>null</code>.
 */
- (RepackagedAndroidViewAccessibilityAccessibilityNodeInfo *)getTraversalAfter;

/**
 @brief Gets the node before which this one is visited during traversal.
 A screen-reader must visit the content of this node before the content of the one it precedes.
 @return The succeeding node if such or <code>null</code>.
 */
- (RepackagedAndroidViewAccessibilityAccessibilityNodeInfo *)getTraversalBefore;

/**
 @brief Gets the fully qualified resource name of the source view's id.
 <p> <strong>Note:</strong> The primary usage of this API is for UI test automation and in order to report the source view id of an AccessibilityNodeInfo the client has to set the AccessibilityServiceInfo#FLAG_REPORT_VIEW_IDS flag when configuring his android.accessibilityservice.AccessibilityService . </p>
 @return The id resource name.
 */
- (NSString *)getViewIdResourceName;

/**
 @brief Gets the virtual descendant id which identifies an imaginary view in a containing View.
 @param accessibilityNodeId The id of an AccessibilityNodeInfo .
 @return The virtual view id part of the node id.
 */
+ (jint)getVirtualDescendantIdWithLong:(jlong)accessibilityNodeId;

/**
 @brief Gets the window to which this node belongs.
 @return The window.
 */
- (RepackagedAndroidViewAccessibilityAccessibilityWindowInfo *)getWindow;

/**
 @brief Gets the id of the window from which the info comes from.
 @return The window id.
 */
- (jint)getWindowId;

- (NSUInteger)hash;

/**
 @brief Gets whether this node is accessibility focused.
 @return True if the node is accessibility focused.
 */
- (jboolean)isAccessibilityFocused;

/**
 @brief Gets whether this node is checkable.
 @return True if the node is checkable.
 */
- (jboolean)isCheckable;

/**
 @brief Gets whether this node is checked.
 @return True if the node is checked.
 */
- (jboolean)isChecked;

/**
 @brief Gets whether this node is clickable.
 @return True if the node is clickable.
 */
- (jboolean)isClickable;

/**
 @brief Gets if the content of this node is invalid.
 For example, a date is not well-formed.
 @return If the node content is invalid.
 */
- (jboolean)isContentInvalid;

/**
 @brief Gets whether this node is context clickable.
 @return True if the node is context clickable.
 */
- (jboolean)isContextClickable;

/**
 @brief Gets if the node can be dismissed.
 @return If the node can be dismissed.
 */
- (jboolean)isDismissable;

/**
 @brief Gets if the node is editable.
 @return True if the node is editable, false otherwise.
 */
- (jboolean)isEditable;

/**
 @brief Gets whether this node is enabled.
 @return True if the node is enabled.
 */
- (jboolean)isEnabled;

/**
 @brief Gets whether this node is focusable.
 @return True if the node is focusable.
 */
- (jboolean)isFocusable;

/**
 @brief Gets whether this node is focused.
 @return True if the node is focused.
 */
- (jboolean)isFocused;

/**
 @brief Gets whether this node is long clickable.
 @return True if the node is long clickable.
 */
- (jboolean)isLongClickable;

/**
 @brief Gets if the node is a multi line editable text.
 @return True if the node is multi line.
 */
- (jboolean)isMultiLine;

/**
 @brief Gets whether this node is a password.
 @return True if the node is a password.
 */
- (jboolean)isPassword;

/**
 @brief Gets if the node is scrollable.
 @return True if the node is scrollable, false otherwise.
 */
- (jboolean)isScrollable;

/**
 @brief Gets if this instance is sealed.
 @return Whether is sealed.
 */
- (jboolean)isSealed;

/**
 @brief Gets whether this node is selected.
 @return True if the node is selected.
 */
- (jboolean)isSelected;

/**
 @brief Gets whether this node is visible to the user.
 @return Whether the node is visible to the user.
 */
- (jboolean)isVisibleToUser;

/**
 @brief Makes a node id by shifting the <code>virtualDescendantId</code> by #VIRTUAL_DESCENDANT_ID_SHIFT and taking the bitwise or with the <code>accessibilityViewId</code>.
 @param accessibilityViewId A View accessibility id.
 @param virtualDescendantId A virtual descendant id.
 @return The node id.
 */
+ (jlong)makeNodeIdWithInt:(jint)accessibilityViewId
                   withInt:(jint)virtualDescendantId;

/**
 @brief Returns a cached instance if such is available otherwise a new one.
 @return An instance.
 */
+ (RepackagedAndroidViewAccessibilityAccessibilityNodeInfo *)obtain;

/**
 @brief Returns a cached instance if such is available or a new one is create.
 The returned instance is initialized from the given <code>info</code>.
 @param info The other info.
 @return An instance.
 */
+ (RepackagedAndroidViewAccessibilityAccessibilityNodeInfo *)obtainWithRepackagedAndroidViewAccessibilityAccessibilityNodeInfo:(RepackagedAndroidViewAccessibilityAccessibilityNodeInfo *)info;

/**
 @brief Returns a cached instance if such is available otherwise a new one and sets the source.
 @param source The source view.
 @return An instance.
 */
+ (RepackagedAndroidViewAccessibilityAccessibilityNodeInfo *)obtainWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)source;

/**
 @brief Returns a cached instance if such is available otherwise a new one and sets the source.
 @param root The root of the virtual subtree.
 @param virtualDescendantId The id of the virtual descendant.
 @return An instance.
 */
+ (RepackagedAndroidViewAccessibilityAccessibilityNodeInfo *)obtainWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)root
                                                                                         withInt:(jint)virtualDescendantId;

/**
 @brief Performs an action on the node.
 <p> <strong>Note:</strong> An action can be performed only if the request is made from an android.accessibilityservice.AccessibilityService . </p>
 @param action The action to perform.
 @return True if the action was performed.
 @throws IllegalStateException If called outside of an AccessibilityService.
 */
- (jboolean)performActionWithInt:(jint)action;

/**
 @brief Performs an action on the node.
 <p> <strong>Note:</strong> An action can be performed only if the request is made from an android.accessibilityservice.AccessibilityService . </p>
 @param action The action to perform.
 @param arguments A bundle with additional arguments.
 @return True if the action was performed.
 @throws IllegalStateException If called outside of an AccessibilityService.
 */
- (jboolean)performActionWithInt:(jint)action
   withRepackagedAndroidOsBundle:(RepackagedAndroidOsBundle *)arguments;

/**
 @brief Return an instance back to be reused.
 <p> <strong>Note:</strong> You must not touch the object after calling this function.
 @throws IllegalStateException If the info is already recycled.
 */
- (void)recycle;

/**
 @brief Refreshes this info with the latest state of the view it represents.
 <p> <strong>Note:</strong> If this method returns false this info is obsolete since it represents a view that is no longer in the view tree and should be recycled. </p>
 @return Whether the refresh succeeded.
 */
- (jboolean)refresh;

/**
 @brief Refreshes this info with the latest state of the view it represents.
 <p> <strong>Note:</strong> If this method returns false this info is obsolete since it represents a view that is no longer in the view tree and should be recycled. </p>
 @param bypassCache Whether to bypass the cache.
 @return Whether the refresh succeeded.
 */
- (jboolean)refreshWithBoolean:(jboolean)bypassCache;

/**
 @brief Removes an action that can be performed on the node.
 If the action was not already added to the node, calling this method has no effect. <p> <strong>Note:</strong> Cannot be called from an android.accessibilityservice.AccessibilityService . This class is made immutable before being delivered to an AccessibilityService. </p>
 @param action The action to be removed.
 @return The action removed from the list of actions.
 @throws IllegalStateException If called from an AccessibilityService.
 */
- (jboolean)removeActionWithRepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction:(RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction *)action;

/**
 @brief Removes an action that can be performed on the node.
 If the action was not already added to the node, calling this method has no effect. <p> <strong>Note:</strong> Cannot be called from an android.accessibilityservice.AccessibilityService . This class is made immutable before being delivered to an AccessibilityService. </p>
 @param action The action to be removed.
 @throws IllegalStateException If called from an AccessibilityService.
 */
- (void)removeActionWithInt:(jint)action;

/**
 @brief Removes a child.
 If the child was not previously added to the node, calling this method has no effect. <p> <strong>Note:</strong> Cannot be called from an android.accessibilityservice.AccessibilityService . This class is made immutable before being delivered to an AccessibilityService. </p>
 @param child The child.
 @return true if the child was present
 @throws IllegalStateException If called from an AccessibilityService.
 */
- (jboolean)removeChildWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)child;

/**
 @brief Removes a virtual child which is a descendant of the given <code>root</code>.
 If the child was not previously added to the node, calling this method has no effect.
 @param root The root of the virtual subtree.
 @param virtualDescendantId The id of the virtual child.
 @return true if the child was present
 */
- (jboolean)removeChildWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)root
                                             withInt:(jint)virtualDescendantId;

/**
 @brief Sets whether this node is accessibility focused.
 <p> <strong>Note:</strong> Cannot be called from an android.accessibilityservice.AccessibilityService . This class is made immutable before being delivered to an AccessibilityService. </p>
 @param focused True if the node is accessibility focused.
 @throws IllegalStateException If called from an AccessibilityService.
 */
- (void)setAccessibilityFocusedWithBoolean:(jboolean)focused;

/**
 @brief Sets the node bounds in parent coordinates.
 <p> <strong>Note:</strong> Cannot be called from an android.accessibilityservice.AccessibilityService . This class is made immutable before being delivered to an AccessibilityService. </p>
 @param bounds The node bounds.
 @throws IllegalStateException If called from an AccessibilityService.
 */
- (void)setBoundsInParentWithRepackagedAndroidGraphicsRect:(RepackagedAndroidGraphicsRect *)bounds;

/**
 @brief Sets the node bounds in screen coordinates.
 <p> <strong>Note:</strong> Cannot be called from an android.accessibilityservice.AccessibilityService . This class is made immutable before being delivered to an AccessibilityService. </p>
 @param bounds The node bounds.
 @throws IllegalStateException If called from an AccessibilityService.
 */
- (void)setBoundsInScreenWithRepackagedAndroidGraphicsRect:(RepackagedAndroidGraphicsRect *)bounds;

/**
 @brief Sets if this node opens a popup or a dialog.
 <p> <strong>Note:</strong> Cannot be called from an android.accessibilityservice.AccessibilityService . This class is made immutable before being delivered to an AccessibilityService. </p>
 @param opensPopup If the the node opens a popup.
 */
- (void)setCanOpenPopupWithBoolean:(jboolean)opensPopup;

/**
 @brief Sets whether this node is checkable.
 <p> <strong>Note:</strong> Cannot be called from an android.accessibilityservice.AccessibilityService . This class is made immutable before being delivered to an AccessibilityService. </p>
 @param checkable True if the node is checkable.
 @throws IllegalStateException If called from an AccessibilityService.
 */
- (void)setCheckableWithBoolean:(jboolean)checkable;

/**
 @brief Sets whether this node is checked.
 <p> <strong>Note:</strong> Cannot be called from an android.accessibilityservice.AccessibilityService . This class is made immutable before being delivered to an AccessibilityService. </p>
 @param checked True if the node is checked.
 @throws IllegalStateException If called from an AccessibilityService.
 */
- (void)setCheckedWithBoolean:(jboolean)checked;

/**
 @brief Sets the class this node comes from.
 <p> <strong>Note:</strong> Cannot be called from an android.accessibilityservice.AccessibilityService . This class is made immutable before being delivered to an AccessibilityService. </p>
 @param className The class name.
 @throws IllegalStateException If called from an AccessibilityService.
 */
- (void)setClassNameWithJavaLangCharSequence:(id<JavaLangCharSequence>)className_;

/**
 @brief Sets whether this node is clickable.
 <p> <strong>Note:</strong> Cannot be called from an android.accessibilityservice.AccessibilityService . This class is made immutable before being delivered to an AccessibilityService. </p>
 @param clickable True if the node is clickable.
 @throws IllegalStateException If called from an AccessibilityService.
 */
- (void)setClickableWithBoolean:(jboolean)clickable;

/**
 @brief Sets the collection info if the node is a collection.
 A collection child is always a collection item. <p> <strong>Note:</strong> Cannot be called from an android.accessibilityservice.AccessibilityService . This class is made immutable before being delivered to an AccessibilityService. </p>
 @param collectionInfo The collection info.
 */
- (void)setCollectionInfoWithRepackagedAndroidViewAccessibilityAccessibilityNodeInfo_CollectionInfo:(RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_CollectionInfo *)collectionInfo;

/**
 @brief Sets the collection item info if the node is a collection item.
 A collection item is always a child of a collection. <p> <strong>Note:</strong> Cannot be called from an android.accessibilityservice.AccessibilityService . This class is made immutable before being delivered to an AccessibilityService. </p>
 */
- (void)setCollectionItemInfoWithRepackagedAndroidViewAccessibilityAccessibilityNodeInfo_CollectionItemInfo:(RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_CollectionItemInfo *)collectionItemInfo;

/**
 @brief Sets the unique id of the IAccessibilityServiceConnection over which this instance can send requests to the system.
 @param connectionId The connection id.
 */
- (void)setConnectionIdWithInt:(jint)connectionId;

/**
 @brief Sets the content description of this node.
 <p> <strong>Note:</strong> Cannot be called from an android.accessibilityservice.AccessibilityService . This class is made immutable before being delivered to an AccessibilityService. </p>
 @param contentDescription The content description.
 @throws IllegalStateException If called from an AccessibilityService.
 */
- (void)setContentDescriptionWithJavaLangCharSequence:(id<JavaLangCharSequence>)contentDescription;

/**
 @brief Sets if the content of this node is invalid.
 For example, a date is not well-formed. <p> <strong>Note:</strong> Cannot be called from an android.accessibilityservice.AccessibilityService . This class is made immutable before being delivered to an AccessibilityService. </p>
 @param contentInvalid If the node content is invalid.
 */
- (void)setContentInvalidWithBoolean:(jboolean)contentInvalid;

/**
 @brief Sets whether this node is context clickable.
 <p> <strong>Note:</strong> Cannot be called from an android.accessibilityservice.AccessibilityService . This class is made immutable before being delivered to an AccessibilityService. </p>
 @param contextClickable True if the node is context clickable.
 @throws IllegalStateException If called from an AccessibilityService.
 */
- (void)setContextClickableWithBoolean:(jboolean)contextClickable;

/**
 @brief Sets if the node can be dismissed.
 <p> <strong>Note:</strong> Cannot be called from an android.accessibilityservice.AccessibilityService . This class is made immutable before being delivered to an AccessibilityService. </p>
 @param dismissable If the node can be dismissed.
 */
- (void)setDismissableWithBoolean:(jboolean)dismissable;

/**
 @brief Sets whether this node is editable.
 <p> <strong>Note:</strong> Cannot be called from an android.accessibilityservice.AccessibilityService . This class is made immutable before being delivered to an AccessibilityService. </p>
 @param editable True if the node is editable.
 @throws IllegalStateException If called from an AccessibilityService.
 */
- (void)setEditableWithBoolean:(jboolean)editable;

/**
 @brief Sets whether this node is enabled.
 <p> <strong>Note:</strong> Cannot be called from an android.accessibilityservice.AccessibilityService . This class is made immutable before being delivered to an AccessibilityService. </p>
 @param enabled True if the node is enabled.
 @throws IllegalStateException If called from an AccessibilityService.
 */
- (void)setEnabledWithBoolean:(jboolean)enabled;

/**
 @brief Sets the error text of this node.
 <p> <strong>Note:</strong> Cannot be called from an android.accessibilityservice.AccessibilityService . This class is made immutable before being delivered to an AccessibilityService. </p>
 @param error The error text.
 @throws IllegalStateException If called from an AccessibilityService.
 */
- (void)setErrorWithJavaLangCharSequence:(id<JavaLangCharSequence>)error;

/**
 @brief Sets whether this node is focusable.
 <p> <strong>Note:</strong> Cannot be called from an android.accessibilityservice.AccessibilityService . This class is made immutable before being delivered to an AccessibilityService. </p>
 @param focusable True if the node is focusable.
 @throws IllegalStateException If called from an AccessibilityService.
 */
- (void)setFocusableWithBoolean:(jboolean)focusable;

/**
 @brief Sets whether this node is focused.
 <p> <strong>Note:</strong> Cannot be called from an android.accessibilityservice.AccessibilityService . This class is made immutable before being delivered to an AccessibilityService. </p>
 @param focused True if the node is focused.
 @throws IllegalStateException If called from an AccessibilityService.
 */
- (void)setFocusedWithBoolean:(jboolean)focused;

/**
 @brief Sets the input type of the source as defined by InputType .
 <p> <strong>Note:</strong> Cannot be called from an android.accessibilityservice.AccessibilityService . This class is made immutable before being delivered to an AccessibilityService. </p>
 @param inputType The input type.
 @throws IllegalStateException If called from an AccessibilityService.
 */
- (void)setInputTypeWithInt:(jint)inputType;

/**
 @brief Sets the view which serves as the label of the view represented by this info for accessibility purposes.
 @param label The view that labels this node's source.
 */
- (void)setLabeledByWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)label;

/**
 @brief Sets the view which serves as the label of the view represented by this info for accessibility purposes.
 If <code>virtualDescendantId</code> is View#NO_ID the root is set as the label. <p> A virtual descendant is an imaginary View that is reported as a part of the view hierarchy for accessibility purposes. This enables custom views that draw complex content to report themselves as a tree of virtual views, thus conveying their logical structure. </p> <p> <strong>Note:</strong> Cannot be called from an android.accessibilityservice.AccessibilityService . This class is made immutable before being delivered to an AccessibilityService. </p>
 @param root The root whose virtual descendant labels this node's source.
 @param virtualDescendantId The id of the virtual descendant.
 */
- (void)setLabeledByWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)root
                                          withInt:(jint)virtualDescendantId;

/**
 @brief Sets the view for which the view represented by this info serves as a label for accessibility purposes.
 @param labeled The view for which this info serves as a label.
 */
- (void)setLabelForWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)labeled;

/**
 @brief Sets the view for which the view represented by this info serves as a label for accessibility purposes.
 If <code>virtualDescendantId</code> is View#NO_ID the root is set as the labeled. <p> A virtual descendant is an imaginary View that is reported as a part of the view hierarchy for accessibility purposes. This enables custom views that draw complex content to report themselves as a tree of virtual views, thus conveying their logical structure. </p> <p> <strong>Note:</strong> Cannot be called from an android.accessibilityservice.AccessibilityService . This class is made immutable before being delivered to an AccessibilityService. </p>
 @param root The root whose virtual descendant serves as a label.
 @param virtualDescendantId The id of the virtual descendant.
 */
- (void)setLabelForWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)root
                                         withInt:(jint)virtualDescendantId;

/**
 @brief Sets the node's live region mode.
 <p> <strong>Note:</strong> Cannot be called from an android.accessibilityservice.AccessibilityService . This class is made immutable before being delivered to an AccessibilityService.
 @param mode The live region mode, or View#ACCESSIBILITY_LIVE_REGION_NONE if the view is not a live region.
 */
- (void)setLiveRegionWithInt:(jint)mode;

/**
 @brief Sets whether this node is long clickable.
 <p> <strong>Note:</strong> Cannot be called from an android.accessibilityservice.AccessibilityService . This class is made immutable before being delivered to an AccessibilityService. </p>
 @param longClickable True if the node is long clickable.
 @throws IllegalStateException If called from an AccessibilityService.
 */
- (void)setLongClickableWithBoolean:(jboolean)longClickable;

/**
 @brief Sets the maximum text length, or -1 for no limit.
 <p> Typically used to indicate that an editable text field has a limit on the number of characters entered. <p> <strong>Note:</strong> Cannot be called from an android.accessibilityservice.AccessibilityService . This class is made immutable before being delivered to an AccessibilityService.
 @param max The maximum text length.
 @throws IllegalStateException If called from an AccessibilityService.
 */
- (void)setMaxTextLengthWithInt:(jint)max;

/**
 @brief Sets the movement granularities for traversing the text of this node.
 <p> <strong>Note:</strong> Cannot be called from an android.accessibilityservice.AccessibilityService . This class is made immutable before being delivered to an AccessibilityService. </p>
 @param granularities The bit mask with granularities.
 @throws IllegalStateException If called from an AccessibilityService.
 */
- (void)setMovementGranularitiesWithInt:(jint)granularities;

/**
 @brief Sets if the node is a multi line editable text.
 <p> <strong>Note:</strong> Cannot be called from an android.accessibilityservice.AccessibilityService . This class is made immutable before being delivered to an AccessibilityService. </p>
 @param multiLine True if the node is multi line.
 */
- (void)setMultiLineWithBoolean:(jboolean)multiLine;

/**
 @brief Sets the package this node comes from.
 <p> <strong>Note:</strong> Cannot be called from an android.accessibilityservice.AccessibilityService . This class is made immutable before being delivered to an AccessibilityService. </p>
 @param packageName The package name.
 @throws IllegalStateException If called from an AccessibilityService.
 */
- (void)setPackageNameWithJavaLangCharSequence:(id<JavaLangCharSequence>)packageName;

/**
 @brief Sets the parent.
 <p> <strong>Note:</strong> Cannot be called from an android.accessibilityservice.AccessibilityService . This class is made immutable before being delivered to an AccessibilityService. </p>
 @param parent The parent.
 @throws IllegalStateException If called from an AccessibilityService.
 */
- (void)setParentWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)parent;

/**
 @brief Sets the parent to be a virtual descendant of the given <code>root</code>.
 If <code>virtualDescendantId</code> equals to View#NO_ID the root is set as the parent. <p> A virtual descendant is an imaginary View that is reported as a part of the view hierarchy for accessibility purposes. This enables custom views that draw complex content to report them selves as a tree of virtual views, thus conveying their logical structure. </p> <p> <strong>Note:</strong> Cannot be called from an android.accessibilityservice.AccessibilityService . This class is made immutable before being delivered to an AccessibilityService. </p>
 @param root The root of the virtual subtree.
 @param virtualDescendantId The id of the virtual descendant.
 */
- (void)setParentWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)root
                                       withInt:(jint)virtualDescendantId;

/**
 @brief Sets whether this node is a password.
 <p> <strong>Note:</strong> Cannot be called from an android.accessibilityservice.AccessibilityService . This class is made immutable before being delivered to an AccessibilityService. </p>
 @param password True if the node is a password.
 @throws IllegalStateException If called from an AccessibilityService.
 */
- (void)setPasswordWithBoolean:(jboolean)password;

/**
 @brief Sets the range info if this node is a range.
 <p> <strong>Note:</strong> Cannot be called from an android.accessibilityservice.AccessibilityService . This class is made immutable before being delivered to an AccessibilityService. </p>
 @param rangeInfo The range info.
 */
- (void)setRangeInfoWithRepackagedAndroidViewAccessibilityAccessibilityNodeInfo_RangeInfo:(RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_RangeInfo *)rangeInfo;

/**
 @brief Sets if the node is scrollable.
 <p> <strong>Note:</strong> Cannot be called from an android.accessibilityservice.AccessibilityService . This class is made immutable before being delivered to an AccessibilityService. </p>
 @param scrollable True if the node is scrollable, false otherwise.
 @throws IllegalStateException If called from an AccessibilityService.
 */
- (void)setScrollableWithBoolean:(jboolean)scrollable;

/**
 @brief Sets if this instance is sealed.
 @param sealed Whether is sealed.
 */
- (void)setSealedWithBoolean:(jboolean)sealed;

/**
 @brief Sets whether this node is selected.
 <p> <strong>Note:</strong> Cannot be called from an android.accessibilityservice.AccessibilityService . This class is made immutable before being delivered to an AccessibilityService. </p>
 @param selected True if the node is selected.
 @throws IllegalStateException If called from an AccessibilityService.
 */
- (void)setSelectedWithBoolean:(jboolean)selected;

/**
 @brief Sets the source.
 <p> <strong>Note:</strong> Cannot be called from an android.accessibilityservice.AccessibilityService . This class is made immutable before being delivered to an AccessibilityService. </p>
 @param source The info source.
 */
- (void)setSourceWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)source;

/**
 @brief Sets the source to be a virtual descendant of the given <code>root</code>.
 If <code>virtualDescendantId</code> is View#NO_ID the root is set as the source. <p> A virtual descendant is an imaginary View that is reported as a part of the view hierarchy for accessibility purposes. This enables custom views that draw complex content to report themselves as a tree of virtual views, thus conveying their logical structure. </p> <p> <strong>Note:</strong> Cannot be called from an android.accessibilityservice.AccessibilityService . This class is made immutable before being delivered to an AccessibilityService. </p>
 @param root The root of the virtual subtree.
 @param virtualDescendantId The id of the virtual descendant.
 */
- (void)setSourceWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)root
                                       withInt:(jint)virtualDescendantId;

/**
 @brief Sets the text of this node.
 <p> <strong>Note:</strong> Cannot be called from an android.accessibilityservice.AccessibilityService . This class is made immutable before being delivered to an AccessibilityService. </p>
 @param text The text.
 @throws IllegalStateException If called from an AccessibilityService.
 */
- (void)setTextWithJavaLangCharSequence:(id<JavaLangCharSequence>)text;

/**
 @brief Sets the text selection start and end.
 <p> <strong>Note:</strong> Cannot be called from an android.accessibilityservice.AccessibilityService . This class is made immutable before being delivered to an AccessibilityService. </p>
 @param start The text selection start.
 @param end The text selection end.
 @throws IllegalStateException If called from an AccessibilityService.
 */
- (void)setTextSelectionWithInt:(jint)start
                        withInt:(jint)end;

/**
 @brief Sets the view whose node is visited after this one in accessibility traversal.
 A screen-reader must visit the content of the other node before the content of this one. <p> <strong>Note:</strong> Cannot be called from an android.accessibilityservice.AccessibilityService . This class is made immutable before being delivered to an AccessibilityService. </p>
 @param view The previous view.
 */
- (void)setTraversalAfterWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)view;

/**
 @brief Sets the node after which this one is visited in accessibility traversal.
 A screen-reader must visit the content of the other node before the content of this one. If <code>virtualDescendantId</code> equals to View#NO_ID the root is set as the predecessor. <p> A virtual descendant is an imaginary View that is reported as a part of the view hierarchy for accessibility purposes. This enables custom views that draw complex content to report them selves as a tree of virtual views, thus conveying their logical structure. </p> <p> <strong>Note:</strong> Cannot be called from an android.accessibilityservice.AccessibilityService . This class is made immutable before being delivered to an AccessibilityService. </p>
 @param root The root of the virtual subtree.
 @param virtualDescendantId The id of the virtual descendant.
 */
- (void)setTraversalAfterWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)root
                                               withInt:(jint)virtualDescendantId;

/**
 @brief Sets the view before whose node this one should be visited during traversal.
 A screen-reader must visit the content of this node before the content of the one it precedes. <p> <strong>Note:</strong> Cannot be called from an android.accessibilityservice.AccessibilityService . This class is made immutable before being delivered to an AccessibilityService. </p>
 @param view The view providing the preceding node.
 */
- (void)setTraversalBeforeWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)view;

/**
 @brief Sets the node before which this one is visited during traversal.
 A screen-reader must visit the content of this node before the content of the one it precedes. The successor is a virtual descendant of the given <code>root</code>. If <code>virtualDescendantId</code> equals to View#NO_ID the root is set as the successor. <p> A virtual descendant is an imaginary View that is reported as a part of the view hierarchy for accessibility purposes. This enables custom views that draw complex content to report them selves as a tree of virtual views, thus conveying their logical structure. </p> <p> <strong>Note:</strong> Cannot be called from an android.accessibilityservice.AccessibilityService . This class is made immutable before being delivered to an AccessibilityService. </p>
 @param root The root of the virtual subtree.
 @param virtualDescendantId The id of the virtual descendant.
 */
- (void)setTraversalBeforeWithRepackagedAndroidViewView:(RepackagedAndroidViewView *)root
                                                withInt:(jint)virtualDescendantId;

/**
 @brief Sets the fully qualified resource name of the source view's id.
 <p> <strong>Note:</strong> Cannot be called from an android.accessibilityservice.AccessibilityService . This class is made immutable before being delivered to an AccessibilityService. </p>
 @param viewIdResName The id resource name.
 */
- (void)setViewIdResourceNameWithNSString:(NSString *)viewIdResName;

/**
 @brief Sets whether this node is visible to the user.
 <p> <strong>Note:</strong> Cannot be called from an android.accessibilityservice.AccessibilityService . This class is made immutable before being delivered to an AccessibilityService. </p>
 @param visibleToUser Whether the node is visible to the user.
 @throws IllegalStateException If called from an AccessibilityService.
 */
- (void)setVisibleToUserWithBoolean:(jboolean)visibleToUser;

- (NSString *)description;

/**
 @brief <p> <strong>Note:</strong> After the instance is written to a parcel it is recycled.
 You must not touch the object after calling this function. </p>
 */
- (void)writeToParcelWithRepackagedAndroidOsParcel:(id<RepackagedAndroidOsParcel>)parcel
                                           withInt:(jint)flags;

#pragma mark Protected

/**
 @brief Enforces that this instance is not sealed.
 @throws IllegalStateException If this instance is sealed.
 */
- (void)enforceNotSealed;

/**
 @brief Enforces that this instance is sealed.
 @throws IllegalStateException If this instance is not sealed.
 */
- (void)enforceSealed;

@end

J2OBJC_STATIC_INIT(RepackagedAndroidViewAccessibilityAccessibilityNodeInfo)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewAccessibilityAccessibilityNodeInfo, UNDEFINED_CONNECTION_ID, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewAccessibilityAccessibilityNodeInfo, UNDEFINED_SELECTION_INDEX, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewAccessibilityAccessibilityNodeInfo, UNDEFINED_ITEM_ID, jint)

FOUNDATION_EXPORT jlong RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_ROOT_NODE_ID_;
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewAccessibilityAccessibilityNodeInfo, ROOT_NODE_ID_, jlong)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewAccessibilityAccessibilityNodeInfo, ACTIVE_WINDOW_ID, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewAccessibilityAccessibilityNodeInfo, ANY_WINDOW_ID, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewAccessibilityAccessibilityNodeInfo, FLAG_PREFETCH_PREDECESSORS, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewAccessibilityAccessibilityNodeInfo, FLAG_PREFETCH_SIBLINGS, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewAccessibilityAccessibilityNodeInfo, FLAG_PREFETCH_DESCENDANTS, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewAccessibilityAccessibilityNodeInfo, FLAG_INCLUDE_NOT_IMPORTANT_VIEWS, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewAccessibilityAccessibilityNodeInfo, FLAG_REPORT_VIEW_IDS, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewAccessibilityAccessibilityNodeInfo, ACTION_FOCUS, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewAccessibilityAccessibilityNodeInfo, ACTION_CLEAR_FOCUS, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewAccessibilityAccessibilityNodeInfo, ACTION_SELECT, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewAccessibilityAccessibilityNodeInfo, ACTION_CLEAR_SELECTION, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewAccessibilityAccessibilityNodeInfo, ACTION_CLICK, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewAccessibilityAccessibilityNodeInfo, ACTION_LONG_CLICK, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewAccessibilityAccessibilityNodeInfo, ACTION_ACCESSIBILITY_FOCUS, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewAccessibilityAccessibilityNodeInfo, ACTION_CLEAR_ACCESSIBILITY_FOCUS, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewAccessibilityAccessibilityNodeInfo, ACTION_NEXT_AT_MOVEMENT_GRANULARITY, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewAccessibilityAccessibilityNodeInfo, ACTION_PREVIOUS_AT_MOVEMENT_GRANULARITY, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewAccessibilityAccessibilityNodeInfo, ACTION_NEXT_HTML_ELEMENT, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewAccessibilityAccessibilityNodeInfo, ACTION_PREVIOUS_HTML_ELEMENT, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewAccessibilityAccessibilityNodeInfo, ACTION_SCROLL_FORWARD, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewAccessibilityAccessibilityNodeInfo, ACTION_SCROLL_BACKWARD, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewAccessibilityAccessibilityNodeInfo, ACTION_COPY, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewAccessibilityAccessibilityNodeInfo, ACTION_PASTE, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewAccessibilityAccessibilityNodeInfo, ACTION_CUT, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewAccessibilityAccessibilityNodeInfo, ACTION_SET_SELECTION, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewAccessibilityAccessibilityNodeInfo, ACTION_EXPAND, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewAccessibilityAccessibilityNodeInfo, ACTION_COLLAPSE, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewAccessibilityAccessibilityNodeInfo, ACTION_DISMISS, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewAccessibilityAccessibilityNodeInfo, ACTION_SET_TEXT, jint)

FOUNDATION_EXPORT NSString *RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_ACTION_ARGUMENT_MOVEMENT_GRANULARITY_INT_;
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewAccessibilityAccessibilityNodeInfo, ACTION_ARGUMENT_MOVEMENT_GRANULARITY_INT_, NSString *)

FOUNDATION_EXPORT NSString *RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_ACTION_ARGUMENT_HTML_ELEMENT_STRING_;
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewAccessibilityAccessibilityNodeInfo, ACTION_ARGUMENT_HTML_ELEMENT_STRING_, NSString *)

FOUNDATION_EXPORT NSString *RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_ACTION_ARGUMENT_EXTEND_SELECTION_BOOLEAN_;
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewAccessibilityAccessibilityNodeInfo, ACTION_ARGUMENT_EXTEND_SELECTION_BOOLEAN_, NSString *)

FOUNDATION_EXPORT NSString *RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_ACTION_ARGUMENT_SELECTION_START_INT_;
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewAccessibilityAccessibilityNodeInfo, ACTION_ARGUMENT_SELECTION_START_INT_, NSString *)

FOUNDATION_EXPORT NSString *RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_ACTION_ARGUMENT_SELECTION_END_INT_;
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewAccessibilityAccessibilityNodeInfo, ACTION_ARGUMENT_SELECTION_END_INT_, NSString *)

FOUNDATION_EXPORT NSString *RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_ACTION_ARGUMENT_SET_TEXT_CHARSEQUENCE_;
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewAccessibilityAccessibilityNodeInfo, ACTION_ARGUMENT_SET_TEXT_CHARSEQUENCE_, NSString *)

FOUNDATION_EXPORT NSString *RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_ACTION_ARGUMENT_ROW_INT_;
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewAccessibilityAccessibilityNodeInfo, ACTION_ARGUMENT_ROW_INT_, NSString *)

FOUNDATION_EXPORT NSString *RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_ACTION_ARGUMENT_COLUMN_INT_;
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewAccessibilityAccessibilityNodeInfo, ACTION_ARGUMENT_COLUMN_INT_, NSString *)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewAccessibilityAccessibilityNodeInfo, FOCUS_INPUT, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewAccessibilityAccessibilityNodeInfo, FOCUS_ACCESSIBILITY, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewAccessibilityAccessibilityNodeInfo, MOVEMENT_GRANULARITY_CHARACTER, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewAccessibilityAccessibilityNodeInfo, MOVEMENT_GRANULARITY_WORD, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewAccessibilityAccessibilityNodeInfo, MOVEMENT_GRANULARITY_LINE, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewAccessibilityAccessibilityNodeInfo, MOVEMENT_GRANULARITY_PARAGRAPH, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewAccessibilityAccessibilityNodeInfo, MOVEMENT_GRANULARITY_PAGE, jint)

FOUNDATION_EXPORT id<RepackagedAndroidOsParcelable_Creator> RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_CREATOR_;
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewAccessibilityAccessibilityNodeInfo, CREATOR_, id<RepackagedAndroidOsParcelable_Creator>)

FOUNDATION_EXPORT jint RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_getAccessibilityViewIdWithLong_(jlong accessibilityNodeId);

FOUNDATION_EXPORT jint RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_getVirtualDescendantIdWithLong_(jlong accessibilityNodeId);

FOUNDATION_EXPORT jlong RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_makeNodeIdWithInt_withInt_(jint accessibilityViewId, jint virtualDescendantId);

FOUNDATION_EXPORT RepackagedAndroidViewAccessibilityAccessibilityNodeInfo *RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_obtainWithRepackagedAndroidViewView_(RepackagedAndroidViewView *source);

FOUNDATION_EXPORT RepackagedAndroidViewAccessibilityAccessibilityNodeInfo *RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_obtainWithRepackagedAndroidViewView_withInt_(RepackagedAndroidViewView *root, jint virtualDescendantId);

FOUNDATION_EXPORT RepackagedAndroidViewAccessibilityAccessibilityNodeInfo *RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_obtain();

FOUNDATION_EXPORT RepackagedAndroidViewAccessibilityAccessibilityNodeInfo *RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_obtainWithRepackagedAndroidViewAccessibilityAccessibilityNodeInfo_(RepackagedAndroidViewAccessibilityAccessibilityNodeInfo *info);

J2OBJC_TYPE_LITERAL_HEADER(RepackagedAndroidViewAccessibilityAccessibilityNodeInfo)

/**
 @brief A class defining an action that can be performed on an AccessibilityNodeInfo .
 Each action has a unique id that is mandatory and optional data. <p> There are three categories of actions: <ul> <li><strong>Standard actions</strong> - These are actions that are reported and handled by the standard UI widgets in the platform. For each standard action there is a static constant defined in this class, e.g. #ACTION_FOCUS . </li> <li><strong>Custom actions action</strong> - These are actions that are reported and handled by custom widgets. i.e. ones that are not part of the UI toolkit. For example, an application may define a custom action for clearing the user history. </li> <li><strong>Overriden standard actions</strong> - These are actions that override standard actions to customize them. For example, an app may add a label to the standard click action to announce that this action clears browsing history. </ul> </p>
 */
@interface RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction : NSObject

#pragma mark Public

/**
 @brief Creates a new AccessibilityAction.
 For adding a standard action without a specific label, use the static constants. You can also override the description for one the standard actions. Below is an example how to override the standard click action by adding a custom label: <pre> AccessibilityAction action = new AccessibilityAction( AccessibilityAction.ACTION_ACTION_CLICK, getLocalizedLabel()); node.addAction(action); </pre>
 @param actionId The id for this action. This should either be one of the standard actions or a specific action for your app. In that case it is required to use a resource identifier.
 @param label The label for the new AccessibilityAction.
 */
- (instancetype)initWithInt:(jint)actionId
   withJavaLangCharSequence:(id<JavaLangCharSequence>)label;

- (jboolean)isEqual:(id)other;

/**
 @brief Gets the id for this action.
 @return The action id.
 */
- (jint)getId;

/**
 @brief Gets the label for this action.
 Its purpose is to describe the action to user.
 @return The label.
 */
- (id<JavaLangCharSequence>)getLabel;

- (NSUInteger)hash;

- (NSString *)description;

@end

J2OBJC_STATIC_INIT(RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction)

FOUNDATION_EXPORT RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction *RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction_ACTION_FOCUS_;
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction, ACTION_FOCUS_, RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction *)

FOUNDATION_EXPORT RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction *RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction_ACTION_CLEAR_FOCUS_;
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction, ACTION_CLEAR_FOCUS_, RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction *)

FOUNDATION_EXPORT RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction *RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction_ACTION_SELECT_;
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction, ACTION_SELECT_, RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction *)

FOUNDATION_EXPORT RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction *RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction_ACTION_CLEAR_SELECTION_;
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction, ACTION_CLEAR_SELECTION_, RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction *)

FOUNDATION_EXPORT RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction *RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction_ACTION_CLICK_;
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction, ACTION_CLICK_, RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction *)

FOUNDATION_EXPORT RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction *RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction_ACTION_LONG_CLICK_;
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction, ACTION_LONG_CLICK_, RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction *)

FOUNDATION_EXPORT RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction *RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction_ACTION_ACCESSIBILITY_FOCUS_;
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction, ACTION_ACCESSIBILITY_FOCUS_, RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction *)

FOUNDATION_EXPORT RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction *RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction_ACTION_CLEAR_ACCESSIBILITY_FOCUS_;
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction, ACTION_CLEAR_ACCESSIBILITY_FOCUS_, RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction *)

FOUNDATION_EXPORT RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction *RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction_ACTION_NEXT_AT_MOVEMENT_GRANULARITY_;
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction, ACTION_NEXT_AT_MOVEMENT_GRANULARITY_, RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction *)

FOUNDATION_EXPORT RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction *RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction_ACTION_PREVIOUS_AT_MOVEMENT_GRANULARITY_;
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction, ACTION_PREVIOUS_AT_MOVEMENT_GRANULARITY_, RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction *)

FOUNDATION_EXPORT RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction *RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction_ACTION_NEXT_HTML_ELEMENT_;
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction, ACTION_NEXT_HTML_ELEMENT_, RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction *)

FOUNDATION_EXPORT RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction *RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction_ACTION_PREVIOUS_HTML_ELEMENT_;
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction, ACTION_PREVIOUS_HTML_ELEMENT_, RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction *)

FOUNDATION_EXPORT RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction *RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction_ACTION_SCROLL_FORWARD_;
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction, ACTION_SCROLL_FORWARD_, RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction *)

FOUNDATION_EXPORT RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction *RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction_ACTION_SCROLL_BACKWARD_;
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction, ACTION_SCROLL_BACKWARD_, RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction *)

FOUNDATION_EXPORT RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction *RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction_ACTION_COPY_;
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction, ACTION_COPY_, RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction *)

FOUNDATION_EXPORT RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction *RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction_ACTION_PASTE_;
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction, ACTION_PASTE_, RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction *)

FOUNDATION_EXPORT RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction *RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction_ACTION_CUT_;
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction, ACTION_CUT_, RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction *)

FOUNDATION_EXPORT RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction *RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction_ACTION_SET_SELECTION_;
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction, ACTION_SET_SELECTION_, RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction *)

FOUNDATION_EXPORT RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction *RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction_ACTION_EXPAND_;
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction, ACTION_EXPAND_, RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction *)

FOUNDATION_EXPORT RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction *RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction_ACTION_COLLAPSE_;
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction, ACTION_COLLAPSE_, RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction *)

FOUNDATION_EXPORT RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction *RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction_ACTION_DISMISS_;
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction, ACTION_DISMISS_, RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction *)

FOUNDATION_EXPORT RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction *RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction_ACTION_SET_TEXT_;
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction, ACTION_SET_TEXT_, RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction *)

FOUNDATION_EXPORT RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction *RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction_ACTION_SHOW_ON_SCREEN_;
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction, ACTION_SHOW_ON_SCREEN_, RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction *)

FOUNDATION_EXPORT RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction *RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction_ACTION_SCROLL_TO_POSITION_;
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction, ACTION_SCROLL_TO_POSITION_, RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction *)

FOUNDATION_EXPORT RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction *RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction_ACTION_SCROLL_UP_;
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction, ACTION_SCROLL_UP_, RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction *)

FOUNDATION_EXPORT RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction *RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction_ACTION_SCROLL_LEFT_;
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction, ACTION_SCROLL_LEFT_, RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction *)

FOUNDATION_EXPORT RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction *RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction_ACTION_SCROLL_DOWN_;
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction, ACTION_SCROLL_DOWN_, RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction *)

FOUNDATION_EXPORT RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction *RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction_ACTION_SCROLL_RIGHT_;
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction, ACTION_SCROLL_RIGHT_, RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction *)

FOUNDATION_EXPORT RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction *RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction_ACTION_CONTEXT_CLICK_;
J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction, ACTION_CONTEXT_CLICK_, RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction *)

FOUNDATION_EXPORT void RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction_initWithInt_withJavaLangCharSequence_(RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction *self, jint actionId, id<JavaLangCharSequence> label);

FOUNDATION_EXPORT RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction *new_RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction_initWithInt_withJavaLangCharSequence_(jint actionId, id<JavaLangCharSequence> label) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_AccessibilityAction)

#define RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_RangeInfo_RANGE_TYPE_INT 0
#define RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_RangeInfo_RANGE_TYPE_FLOAT 1
#define RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_RangeInfo_RANGE_TYPE_PERCENT 2

/**
 @brief Class with information if a node is a range.
 Use RangeInfo#obtain(int,float,float,float) to get an instance.
 */
@interface RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_RangeInfo : NSObject

#pragma mark Public

/**
 @brief Gets the current value.
 @return The current value.
 */
- (jfloat)getCurrent;

/**
 @brief Gets the max value.
 @return The max value.
 */
- (jfloat)getMax;

/**
 @brief Gets the min value.
 @return The min value.
 */
- (jfloat)getMin;

/**
 @brief Gets the range type.
 @return The range type.
 */
- (jint)getType;

/**
 @brief Obtains a pooled instance.
 @param type The type of the range.
 @param min The min value.
 @param max The max value.
 @param current The current value.
 */
+ (RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_RangeInfo *)obtainWithInt:(jint)type
                                                                           withFloat:(jfloat)min
                                                                           withFloat:(jfloat)max
                                                                           withFloat:(jfloat)current;

/**
 @brief Obtains a pooled instance that is a clone of another one.
 @param other The instance to clone.
 */
+ (RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_RangeInfo *)obtainWithRepackagedAndroidViewAccessibilityAccessibilityNodeInfo_RangeInfo:(RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_RangeInfo *)other;

#pragma mark Package-Private

/**
 @brief Recycles this instance.
 */
- (void)recycle;

@end

J2OBJC_STATIC_INIT(RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_RangeInfo)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_RangeInfo, RANGE_TYPE_INT, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_RangeInfo, RANGE_TYPE_FLOAT, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_RangeInfo, RANGE_TYPE_PERCENT, jint)

FOUNDATION_EXPORT RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_RangeInfo *RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_RangeInfo_obtainWithRepackagedAndroidViewAccessibilityAccessibilityNodeInfo_RangeInfo_(RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_RangeInfo *other);

FOUNDATION_EXPORT RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_RangeInfo *RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_RangeInfo_obtainWithInt_withFloat_withFloat_withFloat_(jint type, jfloat min, jfloat max, jfloat current);

J2OBJC_TYPE_LITERAL_HEADER(RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_RangeInfo)

#define RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_CollectionInfo_SELECTION_MODE_NONE 0
#define RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_CollectionInfo_SELECTION_MODE_SINGLE 1
#define RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_CollectionInfo_SELECTION_MODE_MULTIPLE 2

/**
 @brief Class with information if a node is a collection.
 Use CollectionInfo#obtain(int,int,boolean) to get an instance. <p> A collection of items has rows and columns and may be hierarchical. For example, a horizontal list is a collection with one column, as many rows as the list items, and is not hierarchical; A table is a collection with several rows, several columns, and is not hierarchical; A vertical tree is a hierarchical collection with one column and as many rows as the first level children. </p>
 */
@interface RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_CollectionInfo : NSObject

#pragma mark Public

/**
 @brief Gets the number of columns.
 @return The column count.
 */
- (jint)getColumnCount;

/**
 @brief Gets the number of rows.
 @return The row count.
 */
- (jint)getRowCount;

/**
 @brief Gets the collection's selection mode.
 @return The collection's selection mode, one of: <ul> <li> #SELECTION_MODE_NONE <li> #SELECTION_MODE_SINGLE <li> #SELECTION_MODE_MULTIPLE </ul>
 */
- (jint)getSelectionMode;

/**
 @brief Gets if the collection is a hierarchically ordered.
 @return Whether the collection is hierarchical.
 */
- (jboolean)isHierarchical;

/**
 @brief Obtains a pooled instance that is a clone of another one.
 @param other The instance to clone.
 */
+ (RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_CollectionInfo *)obtainWithRepackagedAndroidViewAccessibilityAccessibilityNodeInfo_CollectionInfo:(RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_CollectionInfo *)other;

/**
 @brief Obtains a pooled instance.
 @param rowCount The number of rows.
 @param columnCount The number of columns.
 @param hierarchical Whether the collection is hierarchical.
 */
+ (RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_CollectionInfo *)obtainWithInt:(jint)rowCount
                                                                                  withInt:(jint)columnCount
                                                                              withBoolean:(jboolean)hierarchical;

/**
 @brief Obtains a pooled instance.
 @param rowCount The number of rows.
 @param columnCount The number of columns.
 @param hierarchical Whether the collection is hierarchical.
 @param selectionMode The collection's selection mode, one of: <ul> <li> #SELECTION_MODE_NONE <li> #SELECTION_MODE_SINGLE <li> #SELECTION_MODE_MULTIPLE </ul>
 */
+ (RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_CollectionInfo *)obtainWithInt:(jint)rowCount
                                                                                  withInt:(jint)columnCount
                                                                              withBoolean:(jboolean)hierarchical
                                                                                  withInt:(jint)selectionMode;

#pragma mark Package-Private

/**
 @brief Recycles this instance.
 */
- (void)recycle;

@end

J2OBJC_STATIC_INIT(RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_CollectionInfo)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_CollectionInfo, SELECTION_MODE_NONE, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_CollectionInfo, SELECTION_MODE_SINGLE, jint)

J2OBJC_STATIC_FIELD_GETTER(RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_CollectionInfo, SELECTION_MODE_MULTIPLE, jint)

FOUNDATION_EXPORT RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_CollectionInfo *RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_CollectionInfo_obtainWithRepackagedAndroidViewAccessibilityAccessibilityNodeInfo_CollectionInfo_(RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_CollectionInfo *other);

FOUNDATION_EXPORT RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_CollectionInfo *RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_CollectionInfo_obtainWithInt_withInt_withBoolean_(jint rowCount, jint columnCount, jboolean hierarchical);

FOUNDATION_EXPORT RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_CollectionInfo *RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_CollectionInfo_obtainWithInt_withInt_withBoolean_withInt_(jint rowCount, jint columnCount, jboolean hierarchical, jint selectionMode);

J2OBJC_TYPE_LITERAL_HEADER(RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_CollectionInfo)

/**
 @brief Class with information if a node is a collection item.
 Use CollectionItemInfo#obtain(int,int,int,int,boolean) to get an instance. <p> A collection item is contained in a collection, it starts at a given row and column in the collection, and spans one or more rows and columns. For example, a header of two related table columns starts at the first row and the first column, spans one row and two columns. </p>
 */
@interface RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_CollectionItemInfo : NSObject

#pragma mark Public

/**
 @brief Gets the column index at which the item is located.
 @return The column index.
 */
- (jint)getColumnIndex;

/**
 @brief Gets the number of columns the item spans.
 @return The column span.
 */
- (jint)getColumnSpan;

/**
 @brief Gets the row index at which the item is located.
 @return The row index.
 */
- (jint)getRowIndex;

/**
 @brief Gets the number of rows the item spans.
 @return The row span.
 */
- (jint)getRowSpan;

/**
 @brief Gets if the collection item is a heading.
 For example, section heading, table header, etc.
 @return If the item is a heading.
 */
- (jboolean)isHeading;

/**
 @brief Gets if the collection item is selected.
 @return If the item is selected.
 */
- (jboolean)isSelected;

/**
 @brief Obtains a pooled instance that is a clone of another one.
 @param other The instance to clone.
 */
+ (RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_CollectionItemInfo *)obtainWithRepackagedAndroidViewAccessibilityAccessibilityNodeInfo_CollectionItemInfo:(RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_CollectionItemInfo *)other;

/**
 @brief Obtains a pooled instance.
 @param rowIndex The row index at which the item is located.
 @param rowSpan The number of rows the item spans.
 @param columnIndex The column index at which the item is located.
 @param columnSpan The number of columns the item spans.
 @param heading Whether the item is a heading.
 */
+ (RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_CollectionItemInfo *)obtainWithInt:(jint)rowIndex
                                                                                      withInt:(jint)rowSpan
                                                                                      withInt:(jint)columnIndex
                                                                                      withInt:(jint)columnSpan
                                                                                  withBoolean:(jboolean)heading;

/**
 @brief Obtains a pooled instance.
 @param rowIndex The row index at which the item is located.
 @param rowSpan The number of rows the item spans.
 @param columnIndex The column index at which the item is located.
 @param columnSpan The number of columns the item spans.
 @param heading Whether the item is a heading.
 @param selected Whether the item is selected.
 */
+ (RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_CollectionItemInfo *)obtainWithInt:(jint)rowIndex
                                                                                      withInt:(jint)rowSpan
                                                                                      withInt:(jint)columnIndex
                                                                                      withInt:(jint)columnSpan
                                                                                  withBoolean:(jboolean)heading
                                                                                  withBoolean:(jboolean)selected;

#pragma mark Package-Private

/**
 @brief Recycles this instance.
 */
- (void)recycle;

@end

J2OBJC_STATIC_INIT(RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_CollectionItemInfo)

FOUNDATION_EXPORT RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_CollectionItemInfo *RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_CollectionItemInfo_obtainWithRepackagedAndroidViewAccessibilityAccessibilityNodeInfo_CollectionItemInfo_(RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_CollectionItemInfo *other);

FOUNDATION_EXPORT RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_CollectionItemInfo *RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_CollectionItemInfo_obtainWithInt_withInt_withInt_withInt_withBoolean_(jint rowIndex, jint rowSpan, jint columnIndex, jint columnSpan, jboolean heading);

FOUNDATION_EXPORT RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_CollectionItemInfo *RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_CollectionItemInfo_obtainWithInt_withInt_withInt_withInt_withBoolean_withBoolean_(jint rowIndex, jint rowSpan, jint columnIndex, jint columnSpan, jboolean heading, jboolean selected);

J2OBJC_TYPE_LITERAL_HEADER(RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_CollectionItemInfo)

#endif // _RepackagedAndroidViewAccessibilityAccessibilityNodeInfo_H_
