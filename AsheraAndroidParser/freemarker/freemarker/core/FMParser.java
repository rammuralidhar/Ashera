/* FMParser.java */
/* Generated By:JavaCC: Do not edit this line. FMParser.java */
package freemarker.core;

import freemarker.template.*;
import freemarker.template.utility.StringUtil;
import freemarker.template.utility.DeepUnwrap;
import java.io.*;
import java.util.*;

/**
 * This class is generated by JavaCC from a grammar file.
 */
public class FMParser implements FMParserConstants {

    private static final int ITERATOR_BLOCK_KIND_LIST = 0;
    private static final int ITERATOR_BLOCK_KIND_FOREACH = 1;
    private static final int ITERATOR_BLOCK_KIND_ITEMS = 2;
    private static final int ITERATOR_BLOCK_KIND_USER_DIRECTIVE = 3;

    private static class ParserIteratorBlockContext {
        private String loopVarName;
        private int kind;
    }

    /** Necessary for adding macros and setting location info. */
    private Template template;

    private boolean stripWhitespace, stripText;

    /** Keeps track of #list and #foreach nesting. */
    private List/*<ParserIteratorBlockContext>*/ iteratorBlockContexts;

    /**
     * Keeps track of the nesting depth of directives that support #break.
     */
    private int breakableDirectiveNesting;

    /**
     * Keeps track of the flags of the innermost parent #list or #foreach directive.
     */
    private int parentListAndForeachFlags;

    private boolean inMacro, inFunction;
    private LinkedList escapes = new LinkedList();
    private int mixedContentNesting; // for stripText
    private int incompatibleImprovements;

    /**
     * Create an FM expression parser using a string.
     *
     * @Deprecated This is an internal API of FreeMarker; can be removed any time.
     */
    static public FMParser createExpressionParser(String s) {
        SimpleCharStream scs = new SimpleCharStream(new StringReader(s), 1, 1, s.length());
        FMParserTokenManager token_source = new FMParserTokenManager(scs);
        token_source.SwitchTo(FMParserConstants.FM_EXPRESSION);
        FMParser parser = new FMParser(token_source);
        token_source.setParser(parser);
        return parser;
    }

    /**
     * Constructs a new parser object.
     * 
     * @param template
     *            The template associated with this parser.
     * @param reader
     *            The character stream to use as input
     * @param strictEscapeSyntax
     *            Whether FreeMarker directives must start with a #
     *
     * @Deprecated This is an internal API of FreeMarker; will be removed in 2.4.
     */
    public FMParser(Template template, Reader reader, boolean strictEscapeSyntax, boolean stripWhitespace) {
        this(reader);
        setTemplate(template);
        token_source.setParser(this);
        token_source.strictEscapeSyntax = strictEscapeSyntax;
        this.stripWhitespace = stripWhitespace;
    }

    /**
     * @Deprecated This is an internal API of FreeMarker; will be changed in 2.4.
     */
    public FMParser(Template template, Reader reader, boolean strictEscapeSyntax, boolean stripWhitespace, int tagSyntax) {
        this(template, reader, strictEscapeSyntax, stripWhitespace, tagSyntax,
                Configuration.PARSED_DEFAULT_INCOMPATIBLE_ENHANCEMENTS);
    }

    /**
     * @Deprecated This is an internal API of FreeMarker; will be changed in 2.4.
     */
    public FMParser(Template template, Reader reader, boolean strictEscapeSyntax, boolean stripWhitespace,
            int tagSyntax, int incompatibleImprovements) {
        this(template, reader, strictEscapeSyntax, stripWhitespace,
                tagSyntax, Configuration.AUTO_DETECT_NAMING_CONVENTION, incompatibleImprovements);
    }

    /**
     * @Deprecated This is an internal API of FreeMarker; will be changed in 2.4.
     */
    public FMParser(Template template, Reader reader, boolean strictEscapeSyntax, boolean stripWhitespace,
            int tagSyntax, int namingConvention, int incompatibleImprovements) {
        this(template, reader, strictEscapeSyntax, stripWhitespace);

        switch (tagSyntax) {
        case Configuration.AUTO_DETECT_TAG_SYNTAX:
            token_source.autodetectTagSyntax = true;
            break;
        case Configuration.ANGLE_BRACKET_TAG_SYNTAX:
            token_source.squBracTagSyntax = false;
            break;
        case Configuration.SQUARE_BRACKET_TAG_SYNTAX:
            token_source.squBracTagSyntax = true;
            break;
        default:
            throw new IllegalArgumentException("Illegal argument for tagSyntax");
        }

        switch (namingConvention) {
        case Configuration.AUTO_DETECT_NAMING_CONVENTION:
        case Configuration.CAMEL_CASE_NAMING_CONVENTION:
        case Configuration.LEGACY_NAMING_CONVENTION:
            token_source.initialNamingConvention = namingConvention;
            token_source.namingConvention = namingConvention;
            break;
        default:
            throw new IllegalArgumentException("Illegal argument for namingConvention");
        }

        token_source.incompatibleImprovements = incompatibleImprovements;
        this.incompatibleImprovements = incompatibleImprovements;
    }

    /**
     * @Deprecated This is an internal API of FreeMarker; will be changed in 2.4.
     */
    public FMParser(String template) {
        this(null, new StringReader(template), true, true);
    }

    void setTemplate(Template template)
    {
        this.template = template;
    }

    Template getTemplate()
    {
        return template;
    }

    /**
     * Don't use it, unless you are developing FreeMarker itself.
     */
    public int _getLastTagSyntax() {
        return token_source.squBracTagSyntax
                ? Configuration.SQUARE_BRACKET_TAG_SYNTAX
                : Configuration.ANGLE_BRACKET_TAG_SYNTAX;
    }

    /**
     * Don't use it, unless you are developing FreeMarker itself.
     * The naming convention used by this template; if it couldn't be detected so far, it will be the most probable one.
     * This could be used for formatting error messages, but not for anything serious.
     */
    public int _getLastNamingConvention() {
        return token_source.namingConvention;
    }

    /**
     * Throw an exception if the expression passed in is a String Literal
     */
    private void notStringLiteral(Expression exp, String expected) throws ParseException {
        if (exp instanceof StringLiteral) {
            throw new ParseException(
                    "Found string literal: " + exp + ". Expecting: " + expected,
                    exp);
        }
    }

    /**
     * Throw an exception if the expression passed in is a Number Literal
     */
    private void notNumberLiteral(Expression exp, String expected) throws ParseException {
        if (exp instanceof NumberLiteral) {
            throw new ParseException(
                    "Found number literal: " + exp.getCanonicalForm() + ". Expecting " + expected,
                    exp);
        }
    }

    /**
     * Throw an exception if the expression passed in is a boolean Literal
     */
    private void notBooleanLiteral(Expression exp, String expected) throws ParseException {
        if (exp instanceof BooleanLiteral) {
            throw new ParseException("Found: " + exp.getCanonicalForm() + ". Expecting " + expected, exp);
        }
    }

    /**
     * Throw an exception if the expression passed in is a Hash Literal
     */
    private void notHashLiteral(Expression exp, String expected) throws ParseException {
        if (exp instanceof HashLiteral) {
            throw new ParseException(
                    "Found hash literal: " + exp.getCanonicalForm() + ". Expecting " + expected,
                    exp);
        }
    }

    /**
     * Throw an exception if the expression passed in is a List Literal
     */
    private void notListLiteral(Expression exp, String expected)
            throws ParseException
    {
        if (exp instanceof ListLiteral) {
            throw new ParseException(
                    "Found list literal: " + exp.getCanonicalForm() + ". Expecting " + expected,
                    exp);
        }
    }

    /**
     * Throw an exception if the expression passed in is a literal other than of the numerical type
     */
    private void numberLiteralOnly(Expression exp) throws ParseException {
        notStringLiteral(exp, "number");
        notListLiteral(exp, "number");
        notHashLiteral(exp, "number");
        notBooleanLiteral(exp, "number");
    }

    /**
     * Throw an exception if the expression passed in is not a string.
     */
    private void stringLiteralOnly(Expression exp) throws ParseException {
        notNumberLiteral(exp, "string");
        notListLiteral(exp, "string");
        notHashLiteral(exp, "string");
        notBooleanLiteral(exp, "string");
    }

    /**
     * Throw an exception if the expression passed in is a literal other than of the boolean type
     */
    private void booleanLiteralOnly(Expression exp) throws ParseException {
        notStringLiteral(exp, "boolean (true/false)");
        notListLiteral(exp, "boolean (true/false)");
        notHashLiteral(exp, "boolean (true/false)");
        notNumberLiteral(exp, "boolean (true/false)");
    }

    private Expression escapedExpression(Expression exp) {
        if (!escapes.isEmpty()) {
            return ((EscapeBlock) escapes.getFirst()).doEscape(exp);
        } else {
            return exp;
        }
    }

    private boolean getBoolean(Expression exp) throws ParseException {
        TemplateModel tm = null;
        try {
            tm = exp.eval(null);
        } catch (Exception e) {
            throw new ParseException(e.getMessage()
                    + "\u005cnCould not evaluate expression: "
                    + exp.getCanonicalForm(),
                    exp,
                    e);
        }
        if (tm instanceof TemplateBooleanModel) {
            try {
                return ((TemplateBooleanModel) tm).getAsBoolean();
            } catch (TemplateModelException tme) {
            }
        }
        if (tm instanceof TemplateScalarModel) {
            try {
                return StringUtil.getYesNo(((TemplateScalarModel) tm).getAsString());
            } catch (Exception e) {
                throw new ParseException(e.getMessage()
                        + "\u005cnExpecting boolean (true/false), found: " + exp.getCanonicalForm(),
                        exp);
            }
        }
        throw new ParseException("Expecting boolean (true/false) parameter", exp);
    }

    private ParserIteratorBlockContext pushIteratorBlockContext() {
        if (iteratorBlockContexts == null) {
            iteratorBlockContexts = new ArrayList(4);
        }
        ParserIteratorBlockContext newCtx = new ParserIteratorBlockContext();
        iteratorBlockContexts.add(newCtx);
        return newCtx;
    }

    private void popIteratorBlockContext() {
        iteratorBlockContexts.remove(iteratorBlockContexts.size() - 1);
    }

    private ParserIteratorBlockContext peekIteratorBlockContext() {
        int size = iteratorBlockContexts != null ? iteratorBlockContexts.size() : 0;
        return size != 0 ? (ParserIteratorBlockContext) iteratorBlockContexts.get(size - 1) : null;
    }

    private void checkLoopVariableBuiltInLHO(String loopVarName, Expression lhoExp, Token biName)
            throws ParseException {
        int size = iteratorBlockContexts != null ? iteratorBlockContexts.size() : 0;
        for (int i = size - 1; i >= 0; i--) {
            ParserIteratorBlockContext ctx = (ParserIteratorBlockContext) iteratorBlockContexts.get(i);
            if (loopVarName.equals(ctx.loopVarName)) {
                if (ctx.kind == ITERATOR_BLOCK_KIND_USER_DIRECTIVE) {
                                throw new ParseException(
                                        "The left hand operand of ?" + biName.image
                                        + " can't be the loop variable of an user defined directive: "
                                        +  loopVarName,
                                        lhoExp);
                }
                return;  // success
            }
        }
        throw new ParseException(
                "The left hand operand of ?" + biName.image + " must be a loop variable, "
                + "but there's no loop variable in scope with this name: " + loopVarName,
                lhoExp);
    }

        private String forEachDirectiveSymbol() {
            // [2.4] Use camel case as the default
            return token_source.namingConvention == Configuration.CAMEL_CASE_NAMING_CONVENTION ? "#forEach" : "#foreach";
        }

// Now the actual parsing code, starting
// with the productions for FreeMarker's
// expression syntax.

/**
 * This is the same as OrExpression, since
 * the OR is the operator with the lowest
 * precedence.
 */
  final public Expression Expression() throws ParseException {Expression exp;
    exp = OrExpression();
{if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

/**
 * Lowest level expression, a literal, a variable,
 * or a possibly more complex expression bounded
 * by parentheses.
 */
  final public Expression PrimaryExpression() throws ParseException {Expression exp;
    if (jj_2_1(2)) {
      exp = NumberLiteral();
    } else if (jj_2_2(2)) {
      exp = HashLiteral();
    } else if (jj_2_3(2)) {
      exp = StringLiteral(true);
    } else if (jj_2_4(2)) {
      exp = BooleanLiteral();
    } else if (jj_2_5(2)) {
      exp = ListLiteral();
    } else if (jj_2_6(2)) {
      exp = Identifier();
    } else if (jj_2_7(2)) {
      exp = Parenthesis();
    } else if (jj_2_8(2)) {
      exp = BuiltinVariable();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_1:
    while (true) {
      if (jj_2_9(2147483647)) {
        ;
      } else {
        break label_1;
      }
      exp = AddSubExpression(exp);
    }
{if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression Parenthesis() throws ParseException {Expression exp, result;
    Token start, end;
    start = jj_consume_token(OPEN_PAREN);
    exp = Expression();
    end = jj_consume_token(CLOSE_PAREN);
result = new ParentheticalExpression(exp);
        result.setLocation(template, start, end);
        {if ("" != null) return result;}
    throw new Error("Missing return statement in function");
  }

/**
 * A primary expression preceded by zero or
 * more unary operators. (The only unary operator we
 * currently have is the NOT.)
 */
  final public Expression UnaryExpression() throws ParseException {Expression exp, result;
    boolean haveNot = false;
    Token t = null, start = null;
    if (jj_2_10(2)) {
      result = UnaryPlusMinusExpression();
    } else if (jj_2_11(2)) {
      result = NotExpression();
    } else if (jj_2_12(2)) {
      result = PrimaryExpression();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return result;}
    throw new Error("Missing return statement in function");
  }

  final public Expression NotExpression() throws ParseException {Token t;
    Expression exp, result = null;
    ArrayList nots = new ArrayList();
    label_2:
    while (true) {
      t = jj_consume_token(EXCLAM);
nots.add(t);
      if (jj_2_13(2)) {
        ;
      } else {
        break label_2;
      }
    }
    exp = PrimaryExpression();
for (int i = 0; i < nots.size(); i++) {
            result = new NotExpression(exp);
            Token tok = (Token) nots.get(nots.size() -i -1);
            result.setLocation(template, tok, exp);
            exp = result;
        }
        {if ("" != null) return result;}
    throw new Error("Missing return statement in function");
  }

  final public Expression UnaryPlusMinusExpression() throws ParseException {Expression exp, result;
    boolean isMinus = false;
    Token t;
    if (jj_2_14(2)) {
      t = jj_consume_token(PLUS);
    } else if (jj_2_15(2)) {
      t = jj_consume_token(MINUS);
isMinus = true;
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    exp = PrimaryExpression();
result = new UnaryPlusMinusExpression(exp, isMinus);
        result.setLocation(template, t, exp);
        {if ("" != null) return result;}
    throw new Error("Missing return statement in function");
  }

  final public Expression AdditiveExpression() throws ParseException {Expression lhs, rhs, result;
    boolean plus;
    lhs = MultiplicativeExpression();
result = lhs;
    label_3:
    while (true) {
      if (jj_2_16(2147483647)) {
        ;
      } else {
        break label_3;
      }
      if (jj_2_17(2)) {
        jj_consume_token(PLUS);
plus = true;
      } else if (jj_2_18(2)) {
        jj_consume_token(MINUS);
plus = false;
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      rhs = MultiplicativeExpression();
if (plus) {
                    // plus is treated separately, since it is also
                    // used for concatenation.
                result = new AddConcatExpression(lhs, rhs);
            } else {
                numberLiteralOnly(lhs);
                numberLiteralOnly(rhs);
                result = new ArithmeticExpression(lhs, rhs, ArithmeticExpression.TYPE_SUBSTRACTION);
            }
            result.setLocation(template, lhs, rhs);
            lhs = result;
    }
{if ("" != null) return result;}
    throw new Error("Missing return statement in function");
  }

/**
 * A unary expression followed by zero or more
 * unary expressions with operators in between.
 */
  final public Expression MultiplicativeExpression() throws ParseException {Expression lhs, rhs, result;
    int operation = ArithmeticExpression.TYPE_MULTIPLICATION;
    lhs = UnaryExpression();
result = lhs;
    label_4:
    while (true) {
      if (jj_2_19(2147483647)) {
        ;
      } else {
        break label_4;
      }
      if (jj_2_20(2)) {
        jj_consume_token(TIMES);
operation = ArithmeticExpression.TYPE_MULTIPLICATION;
      } else if (jj_2_21(2)) {
        jj_consume_token(DIVIDE);
operation = ArithmeticExpression.TYPE_DIVISION;
      } else if (jj_2_22(2)) {
        jj_consume_token(PERCENT);
operation = ArithmeticExpression.TYPE_MODULO;
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      rhs = UnaryExpression();
numberLiteralOnly(lhs);
            numberLiteralOnly(rhs);
            result = new ArithmeticExpression(lhs, rhs, operation);
            result.setLocation(template, lhs, rhs);
            lhs = result;
    }
{if ("" != null) return result;}
    throw new Error("Missing return statement in function");
  }

  final public Expression EqualityExpression() throws ParseException {Expression lhs, rhs, result;
    Token t;
    lhs = RelationalExpression();
result = lhs;
    if (jj_2_26(2147483647)) {
      if (jj_2_23(2)) {
        t = jj_consume_token(NOT_EQUALS);
      } else if (jj_2_24(2)) {
        t = jj_consume_token(EQUALS);
      } else if (jj_2_25(2)) {
        t = jj_consume_token(DOUBLE_EQUALS);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      rhs = RelationalExpression();
notHashLiteral(lhs, "scalar");
                notHashLiteral(rhs, "scalar");
                notListLiteral(lhs, "scalar");
                notListLiteral(rhs, "scalar");
                result = new ComparisonExpression(lhs, rhs, t.image);
                result.setLocation(template, lhs, rhs);
    } else {
      ;
    }
{if ("" != null) return result;}
    throw new Error("Missing return statement in function");
  }

  final public Expression RelationalExpression() throws ParseException {Expression lhs, rhs, result;
    Token t;
    lhs = RangeExpression();
result = lhs;
    if (jj_2_33(2147483647)) {
      if (jj_2_27(2)) {
        t = jj_consume_token(NATURAL_GTE);
      } else if (jj_2_28(2)) {
        t = jj_consume_token(ESCAPED_GTE);
      } else if (jj_2_29(2)) {
        t = jj_consume_token(NATURAL_GT);
      } else if (jj_2_30(2)) {
        t = jj_consume_token(ESCAPED_GT);
      } else if (jj_2_31(2)) {
        t = jj_consume_token(LESS_THAN_EQUALS);
      } else if (jj_2_32(2)) {
        t = jj_consume_token(LESS_THAN);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      rhs = RangeExpression();
notHashLiteral(lhs, "scalar");
            notHashLiteral(rhs, "scalar");
            notListLiteral(lhs, "scalar");
            notListLiteral(rhs, "scalar");
            notStringLiteral(lhs, "number");
            notStringLiteral(rhs, "number");
            result = new ComparisonExpression(lhs, rhs, t.image);
            result.setLocation(template, lhs, rhs);
    } else {
      ;
    }
{if ("" != null) return result;}
    throw new Error("Missing return statement in function");
  }

  final public Expression RangeExpression() throws ParseException {Expression lhs, rhs = null, result;
    int endType;
    Token dotDot = null;
    lhs = AdditiveExpression();
result = lhs;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DOT_DOT:
    case DOT_DOT_LESS:
    case DOT_DOT_ASTERISK:{
      if (jj_2_37(2)) {
        if (jj_2_34(2)) {
          jj_consume_token(DOT_DOT_LESS);
endType = Range.END_EXCLUSIVE;
        } else if (jj_2_35(2)) {
          jj_consume_token(DOT_DOT_ASTERISK);
endType = Range.END_SIZE_LIMITED;
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
        rhs = AdditiveExpression();
      } else if (jj_2_38(2)) {
        dotDot = jj_consume_token(DOT_DOT);
endType = Range.END_UNBOUND;
        if (jj_2_36(2147483647)) {
          rhs = AdditiveExpression();
endType = Range.END_INCLUSIVE;
        } else {
          ;
        }
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
numberLiteralOnly(lhs);
            if (rhs != null) {
                numberLiteralOnly(rhs);
            }

            Range range = new Range(lhs, rhs, endType);
            if (rhs != null) {
                range.setLocation(template, lhs, rhs);
            } else {
                range.setLocation(template, lhs, dotDot);
            }
            result = range;
      break;
      }
    default:
      jj_la1[0] = jj_gen;
      ;
    }
{if ("" != null) return result;}
    throw new Error("Missing return statement in function");
  }

  final public Expression AndExpression() throws ParseException {Expression lhs, rhs, result;
    lhs = EqualityExpression();
result = lhs;
    label_5:
    while (true) {
      if (jj_2_39(2147483647)) {
        ;
      } else {
        break label_5;
      }
      jj_consume_token(AND);
      rhs = EqualityExpression();
booleanLiteralOnly(lhs);
            booleanLiteralOnly(rhs);
            result = new AndExpression(lhs, rhs);
            result.setLocation(template, lhs, rhs);
            lhs = result;
    }
{if ("" != null) return result;}
    throw new Error("Missing return statement in function");
  }

  final public Expression OrExpression() throws ParseException {Expression lhs, rhs, result;
    lhs = AndExpression();
result = lhs;
    label_6:
    while (true) {
      if (jj_2_40(2147483647)) {
        ;
      } else {
        break label_6;
      }
      jj_consume_token(OR);
      rhs = AndExpression();
booleanLiteralOnly(lhs);
            booleanLiteralOnly(rhs);
            result = new OrExpression(lhs, rhs);
            result.setLocation(template, lhs, rhs);
            lhs = result;
    }
{if ("" != null) return result;}
    throw new Error("Missing return statement in function");
  }

  final public ListLiteral ListLiteral() throws ParseException {ArrayList values = new ArrayList();
    Token begin, end;
    begin = jj_consume_token(OPEN_BRACKET);
    values = PositionalArgs();
    end = jj_consume_token(CLOSE_BRACKET);
ListLiteral result = new ListLiteral(values);
        result.setLocation(template, begin, end);
        {if ("" != null) return result;}
    throw new Error("Missing return statement in function");
  }

  final public Expression NumberLiteral() throws ParseException {Token op = null, t;
    if (jj_2_41(2)) {
      t = jj_consume_token(INTEGER);
    } else if (jj_2_42(2)) {
      t = jj_consume_token(DECIMAL);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
String s = t.image;
        Expression result = new NumberLiteral(template.getArithmeticEngine().toNumber(s));
        Token startToken = (op != null) ? op : t;
        result.setLocation(template, startToken, t);
        {if ("" != null) return result;}
    throw new Error("Missing return statement in function");
  }

  final public Identifier Identifier() throws ParseException {Token t;
    t = jj_consume_token(ID);
Identifier id = new Identifier(t.image);
        id.setLocation(template, t, t);
        {if ("" != null) return id;}
    throw new Error("Missing return statement in function");
  }

  final public Expression IdentifierOrStringLiteral() throws ParseException {Expression exp;
    if (jj_2_43(2)) {
      exp = Identifier();
    } else if (jj_2_44(2)) {
      exp = StringLiteral(false);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public BuiltinVariable BuiltinVariable() throws ParseException {Token dot, name;
    dot = jj_consume_token(DOT);
    name = jj_consume_token(ID);
BuiltinVariable result = null;
        token_source.checkNamingConvention(name);
        result = new BuiltinVariable(name, token_source);
        result.setLocation(template, dot, name);
        {if ("" != null) return result;}
    throw new Error("Missing return statement in function");
  }

/**
 * Production that builds up an expression
 * using the dot or dynamic key name
 * or the args list if this is a method invocation.
 */
  final public Expression AddSubExpression(Expression exp) throws ParseException {Expression result = null;
    if (jj_2_45(2)) {
      result = DotVariable(exp);
    } else if (jj_2_46(2)) {
      result = DynamicKey(exp);
    } else if (jj_2_47(2)) {
      result = MethodArgs(exp);
    } else if (jj_2_48(2)) {
      result = BuiltIn(exp);
    } else if (jj_2_49(2)) {
      result = DefaultTo(exp);
    } else if (jj_2_50(2)) {
      result = Exists(exp);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return result;}
    throw new Error("Missing return statement in function");
  }

  final public Expression DefaultTo(Expression exp) throws ParseException {Expression rhs = null;
    Token t;
    if (jj_2_52(2)) {
      t = jj_consume_token(TERMINATING_EXCLAM);
    } else if (jj_2_53(2)) {
      t = jj_consume_token(EXCLAM);
      if (jj_2_51(2147483647)) {
        rhs = Expression();
      } else {
        ;
      }
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
DefaultToExpression result = new DefaultToExpression(exp, rhs);
        if (rhs == null) {
            result.setLocation(template, exp, t);
        } else {
            result.setLocation(template, exp, rhs);
        }
        {if ("" != null) return result;}
    throw new Error("Missing return statement in function");
  }

  final public Expression Exists(Expression exp) throws ParseException {Token t;
    t = jj_consume_token(EXISTS);
ExistsExpression result = new ExistsExpression(exp);
        result.setLocation(template, exp, t);
        {if ("" != null) return result;}
    throw new Error("Missing return statement in function");
  }

  final public Expression BuiltIn(Expression lhoExp) throws ParseException {Token t = null;
    BuiltIn result;
    ArrayList/*<Expression>*/ args = null;
    Token openParen;
    Token closeParen;
    jj_consume_token(BUILT_IN);
    t = jj_consume_token(ID);
token_source.checkNamingConvention(t);
        result = BuiltIn.newBuiltIn(incompatibleImprovements, lhoExp, t, token_source);
        result.setLocation(template, lhoExp, t);

        if (!(result instanceof SpecialBuiltIn)) {
            {if ("" != null) return result;}
        }

        if (result instanceof BuiltInForLoopVariable) {
            if (!(lhoExp instanceof Identifier)) {
                {if (true) throw new ParseException(
                        "Expression used as the left hand operand of ?" + t.image
                        + " must be a simple loop variable name.", lhoExp);}
            }
            String loopVarName = ((Identifier) lhoExp).getName();
            checkLoopVariableBuiltInLHO(loopVarName, lhoExp, t);
            ((BuiltInForLoopVariable) result).bindToLoopVariable(loopVarName);

            {if ("" != null) return result;}
        }
    if (result instanceof BuiltInWithParseTimeParameters) {
      openParen = jj_consume_token(OPEN_PAREN);
      args = PositionalArgs();
      closeParen = jj_consume_token(CLOSE_PAREN);
result.setLocation(template, lhoExp, closeParen);
            ((BuiltInWithParseTimeParameters) result).bindToParameters(args, openParen, closeParen);
            {if ("" != null) return result;}
    } else {
      ;
    }
// Should have already return-ed
        {if (true) throw new AssertionError("Unhandled " + SpecialBuiltIn.class.getName() + " subclass: " + result.getClass());}
    throw new Error("Missing return statement in function");
  }

/**
 * production for when a key is specified by <DOT> + keyname
 */
  final public Expression DotVariable(Expression exp) throws ParseException {Token t;
    jj_consume_token(DOT);
    if (jj_2_63(2)) {
      t = jj_consume_token(ID);
    } else if (jj_2_64(2)) {
      t = jj_consume_token(TIMES);
    } else if (jj_2_65(2)) {
      t = jj_consume_token(DOUBLE_STAR);
    } else if (jj_2_66(2)) {
      if (jj_2_54(2)) {
        t = jj_consume_token(LESS_THAN);
      } else if (jj_2_55(2)) {
        t = jj_consume_token(LESS_THAN_EQUALS);
      } else if (jj_2_56(2)) {
        t = jj_consume_token(ESCAPED_GT);
      } else if (jj_2_57(2)) {
        t = jj_consume_token(ESCAPED_GTE);
      } else if (jj_2_58(2)) {
        t = jj_consume_token(FALSE);
      } else if (jj_2_59(2)) {
        t = jj_consume_token(TRUE);
      } else if (jj_2_60(2)) {
        t = jj_consume_token(IN);
      } else if (jj_2_61(2)) {
        t = jj_consume_token(AS);
      } else if (jj_2_62(2)) {
        t = jj_consume_token(USING);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
if (!Character.isLetter(t.image.charAt(0))) {
                    {if (true) throw new ParseException(t.image + " is not a valid identifier.", template, t);}
                }
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
notListLiteral(exp, "hash");
            notStringLiteral(exp, "hash");
            notBooleanLiteral(exp, "hash");
            Dot dot = new Dot(exp, t.image);
            dot.setLocation(template, exp, t);
            {if ("" != null) return dot;}
    throw new Error("Missing return statement in function");
  }

/**
 * production for when the key is specified
 * in brackets.
 */
  final public Expression DynamicKey(Expression exp) throws ParseException {Expression arg;
    Token t;
    jj_consume_token(OPEN_BRACKET);
    arg = Expression();
    t = jj_consume_token(CLOSE_BRACKET);
notBooleanLiteral(exp, "list or hash");
        notNumberLiteral(exp, "list or hash");
        DynamicKeyName dkn = new DynamicKeyName(exp, arg);
        dkn.setLocation(template, exp, t);
        {if ("" != null) return dkn;}
    throw new Error("Missing return statement in function");
  }

/**
 * production for an arglist part of a method invocation.
 */
  final public MethodCall MethodArgs(Expression exp) throws ParseException {ArrayList args = new ArrayList();
        Token end;
    jj_consume_token(OPEN_PAREN);
    args = PositionalArgs();
    end = jj_consume_token(CLOSE_PAREN);
args.trimToSize();
            MethodCall result = new MethodCall(exp, args);
            result.setLocation(template, exp, end);
            {if ("" != null) return result;}
    throw new Error("Missing return statement in function");
  }

  final public StringLiteral StringLiteral(boolean interpolate) throws ParseException {Token t;
    boolean raw = false;
    if (jj_2_67(2)) {
      t = jj_consume_token(STRING_LITERAL);
    } else if (jj_2_68(2)) {
      t = jj_consume_token(RAW_STRING);
raw = true;
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
String s = t.image;
        // Get rid of the quotes.
        s = s.substring(1, s.length() -1);
        if (raw) {
            s = s.substring(1);
        } else try {
            s = StringUtil.FTLStringLiteralDec(s);
        } catch (ParseException pe) {
            pe.lineNumber = t.beginLine;
            pe.columnNumber = t.beginColumn;
            pe.endLineNumber = t.endLine;
            pe.endColumnNumber = t.endColumn;
            {if (true) throw pe;}
        }
        StringLiteral result = new StringLiteral(s);
        result.setLocation(template, t, t);
        if (interpolate && !raw) {
            // TODO: This logic is broken. It can't handle literals that contains both ${...} and $\{...}. 
            if (t.image.indexOf("${") >= 0 || t.image.indexOf("#{") >= 0) result.parseValue(token_source);
        }
        {if ("" != null) return result;}
    throw new Error("Missing return statement in function");
  }

  final public Expression BooleanLiteral() throws ParseException {Token t;
    Expression result;
    if (jj_2_69(2)) {
      t = jj_consume_token(FALSE);
result = new BooleanLiteral(false);
    } else if (jj_2_70(2)) {
      t = jj_consume_token(TRUE);
result = new BooleanLiteral(true);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
result.setLocation(template, t, t);
        {if ("" != null) return result;}
    throw new Error("Missing return statement in function");
  }

  final public HashLiteral HashLiteral() throws ParseException {Token begin, end;
    Expression key, value;
    ArrayList keys = new ArrayList();
    ArrayList values = new ArrayList();
    begin = jj_consume_token(OPENING_CURLY_BRACKET);
    if (jj_2_76(2)) {
      key = Expression();
      if (jj_2_71(2)) {
        jj_consume_token(COMMA);
      } else if (jj_2_72(2)) {
        jj_consume_token(COLON);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      value = Expression();
stringLiteralOnly(key);
            keys.add(key);
            values.add(value);
      label_7:
      while (true) {
        if (jj_2_73(2)) {
          ;
        } else {
          break label_7;
        }
        jj_consume_token(COMMA);
        key = Expression();
        if (jj_2_74(2)) {
          jj_consume_token(COMMA);
        } else if (jj_2_75(2)) {
          jj_consume_token(COLON);
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
        value = Expression();
stringLiteralOnly(key);
                keys.add(key);
                values.add(value);
      }
    } else {
      ;
    }
    end = jj_consume_token(CLOSING_CURLY_BRACKET);
HashLiteral result = new HashLiteral(keys, values);
        result.setLocation(template, begin, end);
        {if ("" != null) return result;}
    throw new Error("Missing return statement in function");
  }

/**
 * A production representing the ${...}
 * that outputs a variable.
 */
  final public DollarVariable StringOutput() throws ParseException {Expression exp;
    Token begin, end;
    begin = jj_consume_token(DOLLAR_INTERPOLATION_OPENING);
    exp = Expression();
notHashLiteral(exp, NonStringException.STRING_COERCABLE_TYPES_DESC);
        notListLiteral(exp, NonStringException.STRING_COERCABLE_TYPES_DESC);
    end = jj_consume_token(CLOSING_CURLY_BRACKET);
DollarVariable result = new DollarVariable(exp, escapedExpression(exp));
        result.setLocation(template, begin, end);
        {if ("" != null) return result;}
    throw new Error("Missing return statement in function");
  }

  final public NumericalOutput NumericalOutput() throws ParseException {Expression exp;
    Token fmt = null, begin, end;
    begin = jj_consume_token(HASH_INTERPOLATION_OPENING);
    exp = Expression();
numberLiteralOnly(exp);
    if (jj_2_77(2)) {
      jj_consume_token(SEMICOLON);
      fmt = jj_consume_token(ID);
    } else {
      ;
    }
    end = jj_consume_token(CLOSING_CURLY_BRACKET);
NumericalOutput result;
        if (fmt != null) {
            int minFrac = -1;  // -1 indicates that the value has not been set
            int maxFrac = -1;

            StringTokenizer st = new StringTokenizer(fmt.image, "mM", true);
            char type = '-';
            while (st.hasMoreTokens()) {
                String token = st.nextToken();
                try {
                        if (type != '-') {
                            switch (type) {
                            case 'm':
                                if (minFrac != -1) {if (true) throw new ParseException("Invalid formatting string", template, fmt);}
                                minFrac = Integer.parseInt(token);
                                break;
                            case 'M':
                                if (maxFrac != -1) {if (true) throw new ParseException("Invalid formatting string", template, fmt);}
                                maxFrac = Integer.parseInt(token);
                                break;
                            default:
                                {if (true) throw new ParseException("Invalid formatting string", template, fmt);}
                            }
                            type = '-';
                        } else if (token.equals("m")) {
                            type = 'm';
                        } else if (token.equals("M")) {
                            type = 'M';
                        } else {
                            {if (true) throw new ParseException();}
                        }
                } catch (ParseException e) {
                        {if (true) throw new ParseException("Invalid format specifier " + fmt.image, template, fmt);}
                } catch (NumberFormatException e) {
                        {if (true) throw new ParseException("Invalid number in the format specifier " + fmt.image, template, fmt);}
                }
            }

            if (maxFrac == -1) {
                    if (minFrac == -1) {
                        {if (true) throw new ParseException(
                                        "Invalid format specification, at least one of m and M must be specified!", template, fmt);}
                    }
                maxFrac = minFrac;
            } else if (minFrac == -1) {
                minFrac = 0;
            }
            if (minFrac > maxFrac) {
                {if (true) throw new ParseException(
                                "Invalid format specification, min cannot be greater than max!", template, fmt);}
            }
            if (minFrac > 50 || maxFrac > 50) {// sanity check
                {if (true) throw new ParseException("Cannot specify more than 50 fraction digits", template, fmt);}
            }
            result = new NumericalOutput(exp, minFrac, maxFrac);
        } else {  // if format != null
            result = new NumericalOutput(exp);
        }
        result.setLocation(template, begin, end);
        {if ("" != null) return result;}
    throw new Error("Missing return statement in function");
  }

  final public TemplateElement If() throws ParseException {Token start, end, t;
    Expression condition;
    TemplateElement block;
    IfBlock ifBlock;
    ConditionalBlock cblock;
    start = jj_consume_token(IF);
    condition = Expression();
    jj_consume_token(DIRECTIVE_END);
    block = OptionalBlock();
cblock = new ConditionalBlock(condition, block, ConditionalBlock.TYPE_IF);
        cblock.setLocation(template, start, block);
        ifBlock = new IfBlock(cblock);
    label_8:
    while (true) {
      if (jj_2_78(2)) {
        ;
      } else {
        break label_8;
      }
      t = jj_consume_token(ELSE_IF);
      condition = Expression();
      LooseDirectiveEnd();
      block = OptionalBlock();
cblock = new ConditionalBlock(condition, block, ConditionalBlock.TYPE_ELSE_IF);
            cblock.setLocation(template, t, block);
            ifBlock.addBlock(cblock);
    }
    if (jj_2_79(2)) {
      t = jj_consume_token(ELSE);
      block = OptionalBlock();
cblock = new ConditionalBlock(null, block, ConditionalBlock.TYPE_ELSE);
                cblock.setLocation(template, t, block);
                ifBlock.addBlock(cblock);
    } else {
      ;
    }
    end = jj_consume_token(END_IF);
ifBlock.setLocation(template, start, end);
        {if ("" != null) return ifBlock;}
    throw new Error("Missing return statement in function");
  }

  final public AttemptBlock Attempt() throws ParseException {Token start, end;
    TemplateElement block;
    RecoveryBlock recoveryBlock;
    start = jj_consume_token(ATTEMPT);
    block = OptionalBlock();
    recoveryBlock = Recover();
    if (jj_2_80(2)) {
      end = jj_consume_token(END_RECOVER);
    } else if (jj_2_81(2)) {
      end = jj_consume_token(END_ATTEMPT);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
AttemptBlock result = new AttemptBlock(block, recoveryBlock);
        result.setLocation(template, start, end);
        {if ("" != null) return result;}
    throw new Error("Missing return statement in function");
  }

  final public RecoveryBlock Recover() throws ParseException {Token start;
    TemplateElement block;
    start = jj_consume_token(RECOVER);
    block = OptionalBlock();
RecoveryBlock result = new RecoveryBlock(block);
        result.setLocation(template, start, block);
        {if ("" != null) return result;}
    throw new Error("Missing return statement in function");
  }

  final public TemplateElement List() throws ParseException {Expression exp;
    Token loopVar = null, start, end;
    TemplateElement mainBlock;
    ElseOfList elseOfList = null;
    ParserIteratorBlockContext iterCtx;
    start = jj_consume_token(LIST);
    exp = Expression();
    if (jj_2_82(2)) {
      jj_consume_token(AS);
      loopVar = jj_consume_token(ID);
    } else {
      ;
    }
    jj_consume_token(DIRECTIVE_END);
iterCtx = pushIteratorBlockContext();
        if (loopVar != null) {
            iterCtx.loopVarName = loopVar.image;
            breakableDirectiveNesting++;
        }
    mainBlock = OptionalBlock();
if (loopVar != null) {
            breakableDirectiveNesting--;
        } else if (iterCtx.kind != ITERATOR_BLOCK_KIND_ITEMS) {
            {if (true) throw new ParseException(
                    "#list must have either \u005c"as loopVar\u005c" parameter or nested #items that belongs to it.",
                    template, start);}
        }
        popIteratorBlockContext();
    if (jj_2_83(2)) {
      elseOfList = ElseOfList();
    } else {
      ;
    }
    end = jj_consume_token(END_LIST);
IteratorBlock list = new IteratorBlock(exp, loopVar != null ? loopVar.image : null, mainBlock, false);
        list.setLocation(template, start, end);

        TemplateElement result;
        if (elseOfList == null) {
            result = list;
        } else {
            result = new ListElseContainer(list, elseOfList);
            result.setLocation(template, start, end);
        }
        {if ("" != null) return result;}
    throw new Error("Missing return statement in function");
  }

  final public ElseOfList ElseOfList() throws ParseException {Token start;
    TemplateElement block;
    start = jj_consume_token(ELSE);
    block = OptionalBlock();
ElseOfList result = new ElseOfList(block);
                result.setLocation(template, start, block);
                {if ("" != null) return result;}
    throw new Error("Missing return statement in function");
  }

  final public IteratorBlock ForEach() throws ParseException {Expression exp;
    Token loopVar, start, end;
    TemplateElement block;
    start = jj_consume_token(FOREACH);
    loopVar = jj_consume_token(ID);
    jj_consume_token(IN);
    exp = Expression();
    jj_consume_token(DIRECTIVE_END);
ParserIteratorBlockContext iterCtx = pushIteratorBlockContext();
        iterCtx.loopVarName = loopVar.image;
        iterCtx.kind = ITERATOR_BLOCK_KIND_FOREACH;
        breakableDirectiveNesting++;
    block = OptionalBlock();
    end = jj_consume_token(END_FOREACH);
breakableDirectiveNesting--;
        popIteratorBlockContext();

        IteratorBlock result = new IteratorBlock(exp, loopVar.image, block, true);
        result.setLocation(template, start, end);
        {if ("" != null) return result;}
    throw new Error("Missing return statement in function");
  }

  final public Items Items() throws ParseException {Token loopVar, start, end;
    TemplateElement block;
    ParserIteratorBlockContext iterCtx;
    start = jj_consume_token(ITEMS);
    loopVar = jj_consume_token(ID);
    jj_consume_token(DIRECTIVE_END);
iterCtx = peekIteratorBlockContext();
        if (iterCtx == null) {
            {if (true) throw new ParseException("#items must be inside a #list block.", template, start);}
        }
        if (iterCtx.loopVarName != null) {
            String msg;
                if (iterCtx.kind == ITERATOR_BLOCK_KIND_FOREACH) {
                    msg = forEachDirectiveSymbol() + " doesn't support nested #items.";
                } else if (iterCtx.kind == ITERATOR_BLOCK_KIND_ITEMS) {
                msg = "Can't nest #items into each other that belong to the same #list.";
                } else {
                    msg = "The parent #list of the #items must not have \u005c"as loopVar\u005c" parameter.";
            }
            {if (true) throw new ParseException(msg, template, start);}
        }
        iterCtx.kind = ITERATOR_BLOCK_KIND_ITEMS;
        iterCtx.loopVarName = loopVar.image;

        breakableDirectiveNesting++;
    block = OptionalBlock();
    end = jj_consume_token(END_ITEMS);
breakableDirectiveNesting--;
        iterCtx.loopVarName = null;

        Items result = new Items(loopVar.image, block);
        result.setLocation(template, start, end);
        {if ("" != null) return result;}
    throw new Error("Missing return statement in function");
  }

  final public Sep Sep() throws ParseException {Token loopVar, start, end = null;
    TemplateElement block;
    start = jj_consume_token(SEP);
if (peekIteratorBlockContext() == null) {
            {if (true) throw new ParseException(
                    "#sep must be inside a #list (or " + forEachDirectiveSymbol() + ") block.",
                    template, start);}
        }
    block = OptionalBlock();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case END_SEP:{
      end = jj_consume_token(END_SEP);
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      ;
    }
Sep result = new Sep(block);
        if (end != null) {
            result.setLocation(template, start, end); // Template, Token, Token
        } else {
            result.setLocation(template, start, block); // Template, Token, TemplateObject
        }
        {if ("" != null) return result;}
    throw new Error("Missing return statement in function");
  }

  final public VisitNode Visit() throws ParseException {Token start, end;
    Expression targetNode, namespaces = null;
    start = jj_consume_token(VISIT);
    targetNode = Expression();
    if (jj_2_84(2)) {
      jj_consume_token(USING);
      namespaces = Expression();
    } else {
      ;
    }
    end = LooseDirectiveEnd();
VisitNode result = new VisitNode(targetNode, namespaces);
        result.setLocation(template, start, end);
        {if ("" != null) return result;}
    throw new Error("Missing return statement in function");
  }

  final public RecurseNode Recurse() throws ParseException {Token start, end = null;
    Expression node = null, namespaces = null;
    if (jj_2_87(2)) {
      start = jj_consume_token(SIMPLE_RECURSE);
    } else if (jj_2_88(2)) {
      start = jj_consume_token(RECURSE);
      if (jj_2_85(2)) {
        node = Expression();
      } else {
        ;
      }
      if (jj_2_86(2)) {
        jj_consume_token(USING);
        namespaces = Expression();
      } else {
        ;
      }
      end = LooseDirectiveEnd();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
if (end == null) end = start;
        RecurseNode result = new RecurseNode(node, namespaces);
        result.setLocation(template, start, end);
        {if ("" != null) return result;}
    throw new Error("Missing return statement in function");
  }

  final public FallbackInstruction FallBack() throws ParseException {Token tok;
    tok = jj_consume_token(FALLBACK);
if (!inMacro) {
            {if (true) throw new ParseException("Cannot fall back outside a macro.", template, tok);}
        }
        FallbackInstruction result = new FallbackInstruction();
        result.setLocation(template, tok, tok);
        {if ("" != null) return result;}
    throw new Error("Missing return statement in function");
  }

/**
 * Production used to break out of a loop or a switch block.
 */
  final public BreakInstruction Break() throws ParseException {Token start;
    start = jj_consume_token(BREAK);
if (breakableDirectiveNesting < 1) {
            {if (true) throw new ParseException(start.image + " must be nested inside a directive that supports it: "
                    + " #list with \u005c"as\u005c", #items, #switch (or the deprecated " + forEachDirectiveSymbol() + ")",
                    template, start);}
        }
        BreakInstruction result = new BreakInstruction();
        result.setLocation(template, start, start);
        {if ("" != null) return result;}
    throw new Error("Missing return statement in function");
  }

/**
 * Production used to jump out of a macro.
 * The stop instruction terminates the rendering of the template.
 */
  final public ReturnInstruction Return() throws ParseException {Token start, end = null;
    Expression exp = null;
    if (jj_2_89(2)) {
      start = jj_consume_token(SIMPLE_RETURN);
end = start;
    } else if (jj_2_90(2)) {
      start = jj_consume_token(RETURN);
      exp = Expression();
      end = LooseDirectiveEnd();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
if (inMacro) {
            if (exp != null) {
                {if (true) throw new ParseException("A macro cannot return a value", template, start);}
            }
        } else if (inFunction) {
            if (exp == null) {
                {if (true) throw new ParseException("A function must return a value", template, start);}
            }
        } else {
            if (exp == null) {
                {if (true) throw new ParseException(
                                "A return instruction can only occur inside a macro or function", template, start);}
            }
        }
        ReturnInstruction result = new ReturnInstruction(exp);
        result.setLocation(template, start, end);
        {if ("" != null) return result;}
    throw new Error("Missing return statement in function");
  }

  final public StopInstruction Stop() throws ParseException {Token start = null;
    Expression exp = null;
    if (jj_2_91(2)) {
      start = jj_consume_token(HALT);
    } else if (jj_2_92(2)) {
      start = jj_consume_token(STOP);
      exp = Expression();
      LooseDirectiveEnd();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
StopInstruction result = new StopInstruction(exp);
        result.setLocation(template, start, start);
        {if ("" != null) return result;}
    throw new Error("Missing return statement in function");
  }

  final public TemplateElement Nested() throws ParseException {Token t, end;
    ArrayList bodyParameters;
    BodyInstruction result = null;
    if (jj_2_93(2)) {
      t = jj_consume_token(SIMPLE_NESTED);
result = new BodyInstruction(null);
                result.setLocation(template, t, t);
    } else if (jj_2_94(2)) {
      t = jj_consume_token(NESTED);
      bodyParameters = PositionalArgs();
      end = LooseDirectiveEnd();
result = new BodyInstruction(bodyParameters);
                result.setLocation(template, t, end);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
if (!inMacro) {
            {if (true) throw new ParseException("Cannot use a " + t.image + " instruction outside a macro.", template, t);}
        }
        {if ("" != null) return result;}
    throw new Error("Missing return statement in function");
  }

  final public TemplateElement Flush() throws ParseException {Token t;
    t = jj_consume_token(FLUSH);
FlushInstruction result = new FlushInstruction();
        result.setLocation(template, t, t);
        {if ("" != null) return result;}
    throw new Error("Missing return statement in function");
  }

  final public TemplateElement Trim() throws ParseException {Token t;
    TrimInstruction result = null;
    if (jj_2_95(2)) {
      t = jj_consume_token(TRIM);
result = new TrimInstruction(true, true);
    } else if (jj_2_96(2)) {
      t = jj_consume_token(LTRIM);
result = new TrimInstruction(true, false);
    } else if (jj_2_97(2)) {
      t = jj_consume_token(RTRIM);
result = new TrimInstruction(false, true);
    } else if (jj_2_98(2)) {
      t = jj_consume_token(NOTRIM);
result = new TrimInstruction(false, false);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
result.setLocation(template, t, t);
        {if ("" != null) return result;}
    throw new Error("Missing return statement in function");
  }

  final public TemplateElement Assign() throws ParseException {Token start, end;
    int scope;
    Token id = null;
    Token equalsOp;
    Expression nameExp, exp, nsExp = null;
    String varName;
    ArrayList assignments = new ArrayList();
    Assignment ass;
    TemplateElement block;
    if (jj_2_99(2)) {
      start = jj_consume_token(ASSIGN);
scope = Assignment.NAMESPACE;
    } else if (jj_2_100(2)) {
      start = jj_consume_token(GLOBALASSIGN);
scope = Assignment.GLOBAL;
    } else if (jj_2_101(2)) {
      start = jj_consume_token(LOCALASSIGN);
scope = Assignment.LOCAL;
scope = Assignment.LOCAL;
            if (!inMacro && !inFunction) {
                {if (true) throw new ParseException("Local variable assigned outside a macro.", template, start);}
            }
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    nameExp = IdentifierOrStringLiteral();
varName = (nameExp instanceof StringLiteral)
                ? ((StringLiteral) nameExp).getAsString()
                : ((Identifier) nameExp).getName();
    if (jj_2_129(2)) {
      if (jj_2_110(2)) {
        if (jj_2_102(2)) {
          jj_consume_token(EQUALS);
        } else if (jj_2_103(2)) {
          jj_consume_token(PLUS_EQUALS);
        } else if (jj_2_104(2)) {
          jj_consume_token(MINUS_EQUALS);
        } else if (jj_2_105(2)) {
          jj_consume_token(TIMES_EQUALS);
        } else if (jj_2_106(2)) {
          jj_consume_token(DIV_EQUALS);
        } else if (jj_2_107(2)) {
          jj_consume_token(MOD_EQUALS);
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
equalsOp = token;
        exp = Expression();
      } else if (jj_2_111(2)) {
        if (jj_2_108(2)) {
          jj_consume_token(PLUS_PLUS);
        } else if (jj_2_109(2)) {
          jj_consume_token(MINUS_MINUS);
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
equalsOp = token;
                           exp = null;
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
ass = new Assignment(varName, equalsOp.kind, exp, scope);
                if (exp != null) {
                   ass.setLocation(template, nameExp, exp);
                } else {
                   ass.setLocation(template, nameExp, equalsOp);
                }
                    assignments.add(ass);
      label_9:
      while (true) {
        if (jj_2_112(2147483647)) {
          ;
        } else {
          break label_9;
        }
        if (jj_2_113(2)) {
          jj_consume_token(COMMA);
        } else {
          ;
        }
        nameExp = IdentifierOrStringLiteral();
varName = (nameExp instanceof StringLiteral)
                                        ? ((StringLiteral) nameExp).getAsString()
                                        : ((Identifier) nameExp).getName();
        if (jj_2_122(2)) {
          if (jj_2_114(2)) {
            jj_consume_token(EQUALS);
          } else if (jj_2_115(2)) {
            jj_consume_token(PLUS_EQUALS);
          } else if (jj_2_116(2)) {
            jj_consume_token(MINUS_EQUALS);
          } else if (jj_2_117(2)) {
            jj_consume_token(TIMES_EQUALS);
          } else if (jj_2_118(2)) {
            jj_consume_token(DIV_EQUALS);
          } else if (jj_2_119(2)) {
            jj_consume_token(MOD_EQUALS);
          } else {
            jj_consume_token(-1);
            throw new ParseException();
          }
equalsOp = token;
          exp = Expression();
        } else if (jj_2_123(2)) {
          if (jj_2_120(2)) {
            jj_consume_token(PLUS_PLUS);
          } else if (jj_2_121(2)) {
            jj_consume_token(MINUS_MINUS);
          } else {
            jj_consume_token(-1);
            throw new ParseException();
          }
equalsOp = token;
                               exp = null;
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
ass = new Assignment(varName, equalsOp.kind, exp, scope);
                        if (exp != null) {
                           ass.setLocation(template, nameExp, exp);
                        } else {
                       ass.setLocation(template, nameExp, equalsOp);
                        }
                        assignments.add(ass);
      }
      if (jj_2_124(2)) {
        id = jj_consume_token(IN);
        nsExp = Expression();
if (scope != Assignment.NAMESPACE) {
                                {if (true) throw new ParseException("Cannot assign to namespace here.", template, id);}
                        }
      } else {
        ;
      }
      end = LooseDirectiveEnd();
if (assignments.size() == 1) {
                    Assignment a = (Assignment) assignments.get(0);
                    a.setNamespaceExp(nsExp);
                    a.setLocation(template, start, end);
                    {if ("" != null) return a;}
                } else {
                            AssignmentInstruction ai = new AssignmentInstruction(scope);
                            for (int i = 0; i< assignments.size(); i++) {
                                ai.addAssignment((Assignment) assignments.get(i));
                            }
                            ai.setNamespaceExp(nsExp);
                            ai.setLocation(template, start, end);
                            {if ("" != null) return ai;}
                    }
    } else if (jj_2_130(2)) {
      if (jj_2_125(2)) {
        id = jj_consume_token(IN);
        nsExp = Expression();
if (scope != Assignment.NAMESPACE) {
                                {if (true) throw new ParseException("Cannot assign to namespace here.", template, id);}
                        }
      } else {
        ;
      }
      jj_consume_token(DIRECTIVE_END);
      block = OptionalBlock();
      if (jj_2_126(2)) {
        end = jj_consume_token(END_LOCAL);
if (scope != Assignment.LOCAL) {
                                {if (true) throw new ParseException("Mismatched assignment tags.", template, end);}
                                }
      } else if (jj_2_127(2)) {
        end = jj_consume_token(END_ASSIGN);
if (scope != Assignment.NAMESPACE) {
                                {if (true) throw new ParseException("Mismatched assignment tags.", template, end);}
                                }
      } else if (jj_2_128(2)) {
        end = jj_consume_token(END_GLOBAL);
if (scope != Assignment.GLOBAL) {if (true) throw new ParseException(
                                        "Mismatched assignment tags", template, end);}
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
BlockAssignment ba = new BlockAssignment(block, varName, scope, nsExp);
                    ba.setLocation(template, start, end);
                    {if ("" != null) return ba;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Include Include() throws ParseException {Expression nameExp;
    Token att, start, end;
    Expression exp, parseExp = null, encodingExp = null, ignoreMissingExp = null;
    start = jj_consume_token(_INCLUDE);
    nameExp = Expression();
    if (jj_2_131(2)) {
      jj_consume_token(SEMICOLON);
    } else {
      ;
    }
    label_10:
    while (true) {
      if (jj_2_132(2)) {
        ;
      } else {
        break label_10;
      }
      att = jj_consume_token(ID);
      jj_consume_token(EQUALS);
      exp = Expression();
String attString = att.image;
            if (attString.equalsIgnoreCase("parse")) {
                    parseExp = exp;
            } else if (attString.equalsIgnoreCase("encoding")) {
                encodingExp = exp;
            } else if (attString.equalsIgnoreCase("ignore_missing") || attString.equals("ignoreMissing")) {
                token_source.checkNamingConvention(att);
                ignoreMissingExp = exp;
            } else {
                String correctedName = attString.equals("ignoreMissing") ? "ignore_missing" : null;
                {if (true) throw new ParseException(
                                "Unsupported named #include parameter: \u005c"" + attString + "\u005c". Supported parameters are: "
                                + "\u005c"parse\u005c", \u005c"encoding\u005c", \u005c"ignore_missing\u005c"."
                                + (correctedName == null
                                      ? ""
                                      : " Supporting camelCase parameter names is planned for FreeMarker 2.4.0; "
                                      + "check if an update is available, and if it indeed supports camel "
                                      + "case."),
                                template, att);}
            }
    }
    end = LooseDirectiveEnd();
Include result = new Include(template, nameExp, encodingExp, parseExp, ignoreMissingExp);
        result.setLocation(template, start, end);
        {if ("" != null) return result;}
    throw new Error("Missing return statement in function");
  }

  final public LibraryLoad Import() throws ParseException {Token start, end, ns;
    Expression nameExp;
    start = jj_consume_token(IMPORT);
    nameExp = Expression();
    jj_consume_token(AS);
    ns = jj_consume_token(ID);
    end = LooseDirectiveEnd();
LibraryLoad result = new LibraryLoad(template, nameExp, ns.image);
        result.setLocation(template, start, end);
        template.addImport(result);
        {if ("" != null) return result;}
    throw new Error("Missing return statement in function");
  }

  final public Macro Macro() throws ParseException {Token arg, start, end;
    Expression nameExp;
    String name;
    ArrayList argNames = new ArrayList();
    HashMap args = new HashMap();
    ArrayList defNames = new ArrayList();
    Expression defValue = null;
    List lastIteratorBlockContexts;
    int lastBreakableDirectiveNesting;
    TemplateElement block;
    boolean isFunction = false, hasDefaults = false;
    boolean isCatchAll = false;
    String catchAll = null;
    if (jj_2_133(2)) {
      start = jj_consume_token(MACRO);
    } else if (jj_2_134(2)) {
      start = jj_consume_token(FUNCTION);
isFunction = true;
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
if (inMacro || inFunction) {
            {if (true) throw new ParseException("Macros cannot be nested.", template, start);}
        }
        if (isFunction) inFunction = true; else inMacro = true;
    nameExp = IdentifierOrStringLiteral();
name = (nameExp instanceof StringLiteral)
                ? ((StringLiteral) nameExp).getAsString()
                : ((Identifier) nameExp).getName();
    if (jj_2_135(2)) {
      jj_consume_token(OPEN_PAREN);
    } else {
      ;
    }
    label_11:
    while (true) {
      if (jj_2_136(2)) {
        ;
      } else {
        break label_11;
      }
      arg = jj_consume_token(ID);
defValue = null;
      if (jj_2_137(2)) {
        jj_consume_token(ELLIPSIS);
isCatchAll = true;
      } else {
        ;
      }
      if (jj_2_138(2)) {
        jj_consume_token(EQUALS);
        defValue = Expression();
defNames.add(arg.image);
                hasDefaults = true;
      } else {
        ;
      }
      if (jj_2_139(2)) {
        jj_consume_token(COMMA);
      } else {
        ;
      }
if (catchAll != null) {
                {if (true) throw new ParseException(
                "There may only be one \u005c"catch-all\u005c" parameter in a macro declaration, and it must be the last parameter.",
                template, arg);}
            }
            if (isCatchAll) {
                if (defValue != null) {
                    {if (true) throw new ParseException(
                    "\u005c"Catch-all\u005c" macro parameter may not have a default value.",
                    template, arg);}
                }
                catchAll = arg.image;
            } else {
                argNames.add(arg.image);
                if (hasDefaults && defValue == null) {
                    {if (true) throw new ParseException(
                                    "In a macro declaration, parameters without a default value "
                                    + "must all occur before the parameters with default values.",
                    template, arg);}
                }
                args.put(arg.image, defValue);
            }
    }
    if (jj_2_140(2)) {
      jj_consume_token(CLOSE_PAREN);
    } else {
      ;
    }
    jj_consume_token(DIRECTIVE_END);
// To prevent parser check loopholes like <#list ...><#macro ...><#break></#macro></#list>.
        lastIteratorBlockContexts = iteratorBlockContexts;
        iteratorBlockContexts = null;
        if (incompatibleImprovements >= _TemplateAPI.VERSION_INT_2_3_23) {
                lastBreakableDirectiveNesting = breakableDirectiveNesting;
                breakableDirectiveNesting = 0;
        } else {
            lastBreakableDirectiveNesting = 0; // Just to prevent uninitialized local variable error later
        }
    block = OptionalBlock();
    if (jj_2_141(2)) {
      end = jj_consume_token(END_MACRO);
if(isFunction) {if (true) throw new ParseException("Expected function end tag here.", template, start);}
    } else if (jj_2_142(2)) {
      end = jj_consume_token(END_FUNCTION);
if(!isFunction) {if (true) throw new ParseException("Expected macro end tag here.", template, start);}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
iteratorBlockContexts = lastIteratorBlockContexts;
        if (incompatibleImprovements >= _TemplateAPI.VERSION_INT_2_3_23) {
            breakableDirectiveNesting = lastBreakableDirectiveNesting;
        }

        inMacro = inFunction = false;
        Macro result = new Macro(name, argNames, args, catchAll, isFunction, block);
        result.setLocation(template, start, end);
        template.addMacro(result);
        {if ("" != null) return result;}
    throw new Error("Missing return statement in function");
  }

  final public CompressedBlock Compress() throws ParseException {TemplateElement block;
    Token start, end;
    start = jj_consume_token(COMPRESS);
    block = OptionalBlock();
    end = jj_consume_token(END_COMPRESS);
CompressedBlock cb = new CompressedBlock(block);
        cb.setLocation(template, start, end);
        {if ("" != null) return cb;}
    throw new Error("Missing return statement in function");
  }

  final public TemplateElement UnifiedMacroTransform() throws ParseException {Token start = null, end, t;
    HashMap namedArgs = null;
    ArrayList positionalArgs = null, bodyParameters = null;
    Expression startTagNameExp;
    TemplateElement nestedBlock = null;
    Expression exp;
    int pushedCtxCount = 0;
    start = jj_consume_token(UNIFIED_CALL);
    exp = Expression();
if (exp instanceof Identifier || (exp instanceof Dot && ((Dot) exp).onlyHasIdentifiers())) {
            startTagNameExp = exp;
        } else {
            startTagNameExp = null;
        }
    if (jj_2_143(2)) {
      jj_consume_token(TERMINATING_WHITESPACE);
    } else {
      ;
    }
    if (jj_2_144(2147483647)) {
      namedArgs = NamedArgs();
    } else {
      positionalArgs = PositionalArgs();
    }
    if (jj_2_150(2)) {
      jj_consume_token(SEMICOLON);
bodyParameters = new ArrayList(4);
      if (jj_2_149(2)) {
        if (jj_2_145(2)) {
          jj_consume_token(TERMINATING_WHITESPACE);
        } else {
          ;
        }
        t = jj_consume_token(ID);
bodyParameters.add(t.image);
        label_12:
        while (true) {
          if (jj_2_146(2)) {
            ;
          } else {
            break label_12;
          }
          if (jj_2_147(2)) {
            jj_consume_token(TERMINATING_WHITESPACE);
          } else {
            ;
          }
          jj_consume_token(COMMA);
          if (jj_2_148(2)) {
            jj_consume_token(TERMINATING_WHITESPACE);
          } else {
            ;
          }
          t = jj_consume_token(ID);
bodyParameters.add(t.image);
        }
      } else {
        ;
      }
    } else {
      ;
    }
    if (jj_2_151(2)) {
      end = jj_consume_token(EMPTY_DIRECTIVE_END);
    } else if (jj_2_152(2)) {
      jj_consume_token(DIRECTIVE_END);
if (bodyParameters != null && iteratorBlockContexts != null && !iteratorBlockContexts.isEmpty()) {
                    // It's possible that we shadow a #list/#items loop variable, in which case that must be noted.
                    int ctxsLen = iteratorBlockContexts.size();
                    int bodyParsLen = bodyParameters.size();
                        for (int bodyParIdx = 0; bodyParIdx < bodyParsLen; bodyParIdx++) {
                        String bodyParName = (String) bodyParameters.get(bodyParIdx);
                        walkCtxSack: for (int ctxIdx = ctxsLen - 1; ctxIdx >= 0; ctxIdx--) {
                            ParserIteratorBlockContext ctx
                                    = (ParserIteratorBlockContext) iteratorBlockContexts.get(ctxIdx);
                            if (ctx.loopVarName != null && ctx.loopVarName.equals(bodyParName)) {
                                // If it wasn't already shadowed, shadow it:
                                if (ctx.kind != ITERATOR_BLOCK_KIND_USER_DIRECTIVE) {
                                    ParserIteratorBlockContext shadowingCtx = pushIteratorBlockContext();
                                    shadowingCtx.loopVarName = bodyParName;
                                    shadowingCtx.kind = ITERATOR_BLOCK_KIND_USER_DIRECTIVE;
                                    pushedCtxCount++;
                                }
                                break walkCtxSack;
                            }
                        }
                   }
                }
      nestedBlock = OptionalBlock();
      end = jj_consume_token(UNIFIED_CALL_END);
for (int i = 0; i < pushedCtxCount; i++) {
                    popIteratorBlockContext();
                }

                String endTagName = end.image.substring(3, end.image.length() - 1).trim();
                if (endTagName.length() > 0) {
                    if (startTagNameExp == null) {
                        {if (true) throw new ParseException("Expecting </@>", template, end);}
                    } else {
                        String startTagName = startTagNameExp.getCanonicalForm();
                        if (!endTagName.equals(startTagName)) {
                            {if (true) throw new ParseException("Expecting </@> or </@" + startTagName + ">", template, end);}
                        }
                    }
                }
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
TemplateElement result = (positionalArgs != null)
                        ? new UnifiedCall(exp, positionalArgs, nestedBlock, bodyParameters)
                    : new UnifiedCall(exp, namedArgs, nestedBlock, bodyParameters);
        result.setLocation(template, start, end);
        {if ("" != null) return result;}
    throw new Error("Missing return statement in function");
  }

  final public TemplateElement Call() throws ParseException {Token start, end, id;
    HashMap namedArgs = null;
    ArrayList positionalArgs = null;
    String macroName= null;
    start = jj_consume_token(CALL);
    id = jj_consume_token(ID);
macroName = id.image;
    if (jj_2_155(2147483647)) {
      namedArgs = NamedArgs();
    } else {
      if (jj_2_153(2147483647)) {
        jj_consume_token(OPEN_PAREN);
      } else {
        ;
      }
      positionalArgs = PositionalArgs();
      if (jj_2_154(2)) {
        jj_consume_token(CLOSE_PAREN);
      } else {
        ;
      }
    }
    end = LooseDirectiveEnd();
UnifiedCall result = null;
        if (positionalArgs != null) {
            result = new UnifiedCall(new Identifier(macroName), positionalArgs, null, null);
        } else {
            result = new UnifiedCall(new Identifier(macroName), namedArgs, null, null);
        }
        result.legacySyntax = true;
        result.setLocation(template, start, end);
        {if ("" != null) return result;}
    throw new Error("Missing return statement in function");
  }

  final public HashMap NamedArgs() throws ParseException {HashMap result = new HashMap();
    Token t;
    Expression exp;
    label_13:
    while (true) {
      t = jj_consume_token(ID);
      jj_consume_token(EQUALS);
token_source.SwitchTo(token_source.NAMED_PARAMETER_EXPRESSION);
            token_source.inInvocation = true;
      exp = Expression();
result.put(t.image, exp);
      if (jj_2_156(2)) {
        ;
      } else {
        break label_13;
      }
    }
token_source.inInvocation = false;
        {if ("" != null) return result;}
    throw new Error("Missing return statement in function");
  }

  final public ArrayList PositionalArgs() throws ParseException {ArrayList result = new ArrayList();
    Expression arg;
    if (jj_2_159(2)) {
      arg = Expression();
result.add(arg);
      label_14:
      while (true) {
        if (jj_2_157(2)) {
          ;
        } else {
          break label_14;
        }
        if (jj_2_158(2)) {
          jj_consume_token(COMMA);
        } else {
          ;
        }
        arg = Expression();
result.add(arg);
      }
    } else {
      ;
    }
{if ("" != null) return result;}
    throw new Error("Missing return statement in function");
  }

  final public Comment Comment() throws ParseException {Token start, end;
    StringBuffer buf = new StringBuffer();
    if (jj_2_160(2)) {
      start = jj_consume_token(COMMENT);
    } else if (jj_2_161(2)) {
      start = jj_consume_token(TERSE_COMMENT);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    end = UnparsedContent(start, buf);
Comment result = new Comment(buf.toString());
        result.setLocation(template, start, end);
        {if ("" != null) return result;}
    throw new Error("Missing return statement in function");
  }

  final public TextBlock NoParse() throws ParseException {Token start, end;
    StringBuffer buf = new StringBuffer();
    start = jj_consume_token(NOPARSE);
    end = UnparsedContent(start, buf);
TextBlock result = new TextBlock(buf.toString(), true);
        result.setLocation(template, start, end);
        {if ("" != null) return result;}
    throw new Error("Missing return statement in function");
  }

  final public TransformBlock Transform() throws ParseException {Token start, end, argName;
    Expression exp, argExp;
    TemplateElement content = null;
    HashMap args = null;
    start = jj_consume_token(TRANSFORM);
    exp = Expression();
    if (jj_2_162(2)) {
      jj_consume_token(SEMICOLON);
    } else {
      ;
    }
    label_15:
    while (true) {
      if (jj_2_163(2)) {
        ;
      } else {
        break label_15;
      }
      argName = jj_consume_token(ID);
      jj_consume_token(EQUALS);
      argExp = Expression();
if (args == null) args = new HashMap();
            args.put(argName.image, argExp);
    }
    if (jj_2_164(2)) {
      end = jj_consume_token(EMPTY_DIRECTIVE_END);
    } else if (jj_2_165(2)) {
      jj_consume_token(DIRECTIVE_END);
      content = OptionalBlock();
      end = jj_consume_token(END_TRANSFORM);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
TransformBlock result = new TransformBlock(exp, args, content);
        result.setLocation(template, start, end);
        {if ("" != null) return result;}
    throw new Error("Missing return statement in function");
  }

  final public SwitchBlock Switch() throws ParseException {SwitchBlock switchBlock;
    Case caseIns;
    Expression switchExp;
    Token start, end;
    boolean defaultFound = false;
    start = jj_consume_token(SWITCH);
    switchExp = Expression();
    jj_consume_token(DIRECTIVE_END);
breakableDirectiveNesting++;
        switchBlock = new SwitchBlock(switchExp);
    label_16:
    while (true) {
      if (jj_2_166(2)) {
        ;
      } else {
        break label_16;
      }
      caseIns = Case();
if (caseIns.condition == null) {
                if (defaultFound) {
                    {if (true) throw new ParseException(
                    "You can only have one default case in a switch statement", template, start);}
                }
                defaultFound = true;
            }
            switchBlock.addCase(caseIns);
    }
    if (jj_2_167(2)) {
      jj_consume_token(STATIC_TEXT_WS);
    } else {
      ;
    }
    end = jj_consume_token(END_SWITCH);
breakableDirectiveNesting--;
        switchBlock.setLocation(template, start, end);
        {if ("" != null) return switchBlock;}
    throw new Error("Missing return statement in function");
  }

  final public Case Case() throws ParseException {Expression exp;
    TemplateElement block;
    Token start;
    if (jj_2_168(2)) {
      jj_consume_token(STATIC_TEXT_WS);
    } else {
      ;
    }
    if (jj_2_169(2)) {
      start = jj_consume_token(CASE);
      exp = Expression();
      jj_consume_token(DIRECTIVE_END);
    } else if (jj_2_170(2)) {
      start = jj_consume_token(DEFAUL);
exp = null;
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    block = OptionalBlock();
Case result = new Case(exp, block);
        result.setLocation(template, start, block);
        {if ("" != null) return result;}
    throw new Error("Missing return statement in function");
  }

  final public EscapeBlock Escape() throws ParseException {Token variable, start, end;
    Expression escapeExpr;
    TemplateElement content;
    start = jj_consume_token(ESCAPE);
    variable = jj_consume_token(ID);
    jj_consume_token(AS);
    escapeExpr = Expression();
    jj_consume_token(DIRECTIVE_END);
EscapeBlock result = new EscapeBlock(variable.image, escapeExpr, escapedExpression(escapeExpr));
        escapes.addFirst(result);
    content = OptionalBlock();
result.setContent(content);
        escapes.removeFirst();
    end = jj_consume_token(END_ESCAPE);
result.setLocation(template, start, end);
        {if ("" != null) return result;}
    throw new Error("Missing return statement in function");
  }

  final public NoEscapeBlock NoEscape() throws ParseException {Token start, end;
    TemplateElement content;
    start = jj_consume_token(NOESCAPE);
if (escapes.isEmpty()) {
            {if (true) throw new ParseException("#noescape with no matching #escape encountered.", template, start);}
        }
        Object escape = escapes.removeFirst();
    content = OptionalBlock();
    end = jj_consume_token(END_NOESCAPE);
escapes.addFirst(escape);
        NoEscapeBlock result = new NoEscapeBlock(content);
        result.setLocation(template, start, end);
        {if ("" != null) return result;}
    throw new Error("Missing return statement in function");
  }

/**
 * Production to terminate potentially empty elements. Either a ">" or "/>"
 */
  final public Token LooseDirectiveEnd() throws ParseException {Token t;
    if (jj_2_171(2)) {
      t = jj_consume_token(DIRECTIVE_END);
    } else if (jj_2_172(2)) {
      t = jj_consume_token(EMPTY_DIRECTIVE_END);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return t;}
    throw new Error("Missing return statement in function");
  }

  final public PropertySetting Setting() throws ParseException {Token start, end, key;
    Expression value;
    start = jj_consume_token(SETTING);
    key = jj_consume_token(ID);
    jj_consume_token(EQUALS);
    value = Expression();
    end = LooseDirectiveEnd();
token_source.checkNamingConvention(key);
        PropertySetting result = new PropertySetting(key, token_source, value, template.getConfiguration());
        result.setLocation(template, start, end);
        {if ("" != null) return result;}
    throw new Error("Missing return statement in function");
  }

/**
 * A production for FreeMarker directives.
 */
  final public TemplateElement FreemarkerDirective() throws ParseException {TemplateElement tp;
    if (jj_2_173(2)) {
      tp = If();
    } else if (jj_2_174(2)) {
      tp = List();
    } else if (jj_2_175(2)) {
      tp = ForEach();
    } else if (jj_2_176(2)) {
      tp = Assign();
    } else if (jj_2_177(2)) {
      tp = Include();
    } else if (jj_2_178(2)) {
      tp = Import();
    } else if (jj_2_179(2)) {
      tp = Macro();
    } else if (jj_2_180(2)) {
      tp = Compress();
    } else if (jj_2_181(2)) {
      tp = UnifiedMacroTransform();
    } else if (jj_2_182(2)) {
      tp = Items();
    } else if (jj_2_183(2)) {
      tp = Sep();
    } else if (jj_2_184(2)) {
      tp = Call();
    } else if (jj_2_185(2)) {
      tp = Comment();
    } else if (jj_2_186(2)) {
      tp = NoParse();
    } else if (jj_2_187(2)) {
      tp = Transform();
    } else if (jj_2_188(2)) {
      tp = Switch();
    } else if (jj_2_189(2)) {
      tp = Setting();
    } else if (jj_2_190(2)) {
      tp = Break();
    } else if (jj_2_191(2)) {
      tp = Return();
    } else if (jj_2_192(2)) {
      tp = Stop();
    } else if (jj_2_193(2)) {
      tp = Flush();
    } else if (jj_2_194(2)) {
      tp = Trim();
    } else if (jj_2_195(2)) {
      tp = Nested();
    } else if (jj_2_196(2)) {
      tp = Escape();
    } else if (jj_2_197(2)) {
      tp = NoEscape();
    } else if (jj_2_198(2)) {
      tp = Visit();
    } else if (jj_2_199(2)) {
      tp = Recurse();
    } else if (jj_2_200(2)) {
      tp = FallBack();
    } else if (jj_2_201(2)) {
      tp = Attempt();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return tp;}
    throw new Error("Missing return statement in function");
  }

/**
 * Production for a block of raw text
 * i.e. text that contains no
 * FreeMarker directives.
 */
  final public TextBlock PCData() throws ParseException {StringBuffer buf = new StringBuffer();
    Token t = null, start = null, prevToken = null;
    label_17:
    while (true) {
      if (jj_2_202(2)) {
prevToken = t;
        t = jj_consume_token(STATIC_TEXT_WS);
      } else if (jj_2_203(2)) {
        t = jj_consume_token(STATIC_TEXT_NON_WS);
      } else if (jj_2_204(2)) {
        t = jj_consume_token(STATIC_TEXT_FALSE_ALARM);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
buf.append(t.image);
            if (start == null) start = t;
            if (prevToken != null) prevToken.next = null;
      if (jj_2_205(2147483647)) {
        ;
      } else {
        break label_17;
      }
    }
if (stripText && mixedContentNesting == 1) {if ("" != null) return TextBlock.EMPTY_BLOCK;}

        TextBlock result = new TextBlock(buf.toString(), false);
        result.setLocation(template, start, t);
        {if ("" != null) return result;}
    throw new Error("Missing return statement in function");
  }

/**
 * Production for dealing with unparsed content,
 * i.e. what is inside a comment or noparse tag.
 * It returns the ending token. The content
 * of the tag is put in buf.
 */
  final public Token UnparsedContent(Token start, StringBuffer buf) throws ParseException {Token t;
    label_18:
    while (true) {
      if (jj_2_206(2)) {
        t = jj_consume_token(KEEP_GOING);
      } else if (jj_2_207(2)) {
        t = jj_consume_token(MAYBE_END);
      } else if (jj_2_208(2)) {
        t = jj_consume_token(TERSE_COMMENT_END);
      } else if (jj_2_209(2)) {
        t = jj_consume_token(LONE_LESS_THAN_OR_DASH);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
buf.append(t.image);
      if (jj_2_210(2)) {
        ;
      } else {
        break label_18;
      }
    }
buf.setLength(buf.length() - t.image.length());
        if (!t.image.endsWith(";")
                && _TemplateAPI.getTemplateLanguageVersionAsInt(template) >= _TemplateAPI.VERSION_INT_2_3_21) {
            {if (true) throw new ParseException("Unclosed \u005c"" + start.image + "\u005c"", template, start);}
        }
        {if ("" != null) return t;}
    throw new Error("Missing return statement in function");
  }

  final public MixedContent MixedContent() throws ParseException {MixedContent mixedContent = new MixedContent();
    TemplateElement elem, begin = null;
    mixedContentNesting++;
    label_19:
    while (true) {
      if (jj_2_211(2)) {
        elem = PCData();
      } else if (jj_2_212(2)) {
        elem = StringOutput();
      } else if (jj_2_213(2)) {
        elem = NumericalOutput();
      } else if (jj_2_214(2)) {
        elem = FreemarkerDirective();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
if (begin == null) {
                begin = elem;
            }
            mixedContent.addElement(elem);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ATTEMPT:
      case IF:
      case LIST:
      case ITEMS:
      case SEP:
      case FOREACH:
      case SWITCH:
      case ASSIGN:
      case GLOBALASSIGN:
      case LOCALASSIGN:
      case _INCLUDE:
      case IMPORT:
      case FUNCTION:
      case MACRO:
      case TRANSFORM:
      case VISIT:
      case STOP:
      case RETURN:
      case CALL:
      case SETTING:
      case COMPRESS:
      case COMMENT:
      case TERSE_COMMENT:
      case NOPARSE:
      case BREAK:
      case SIMPLE_RETURN:
      case HALT:
      case FLUSH:
      case TRIM:
      case LTRIM:
      case RTRIM:
      case NOTRIM:
      case SIMPLE_NESTED:
      case NESTED:
      case SIMPLE_RECURSE:
      case RECURSE:
      case FALLBACK:
      case ESCAPE:
      case NOESCAPE:
      case UNIFIED_CALL:
      case STATIC_TEXT_WS:
      case STATIC_TEXT_NON_WS:
      case STATIC_TEXT_FALSE_ALARM:
      case DOLLAR_INTERPOLATION_OPENING:
      case HASH_INTERPOLATION_OPENING:{
        ;
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        break label_19;
      }
    }
mixedContentNesting--;
        mixedContent.setLocation(template, begin, elem);
        {if ("" != null) return mixedContent;}
    throw new Error("Missing return statement in function");
  }

/**
 * A production freemarker text that may contain
 * ${...} and #{...} but no directives.
 */
  final public TemplateElement FreeMarkerText() throws ParseException {MixedContent nodes = new MixedContent();
    TemplateElement elem, begin = null;
    label_20:
    while (true) {
      if (jj_2_215(2)) {
        elem = PCData();
      } else if (jj_2_216(2)) {
        elem = StringOutput();
      } else if (jj_2_217(2)) {
        elem = NumericalOutput();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
if (begin == null) {
                begin = elem;
            }
            nodes.addElement(elem);
      if (jj_2_218(2)) {
        ;
      } else {
        break label_20;
      }
    }
nodes.setLocation(template, begin, elem);
        {if ("" != null) return nodes;}
    throw new Error("Missing return statement in function");
  }

/**
 * A production for a block of optional content.
 * Returns an empty Text block if there is no
 * content.
 */
  final public TemplateElement OptionalBlock() throws ParseException {TemplateElement tp = TextBlock.EMPTY_BLOCK;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ATTEMPT:
    case IF:
    case LIST:
    case ITEMS:
    case SEP:
    case FOREACH:
    case SWITCH:
    case ASSIGN:
    case GLOBALASSIGN:
    case LOCALASSIGN:
    case _INCLUDE:
    case IMPORT:
    case FUNCTION:
    case MACRO:
    case TRANSFORM:
    case VISIT:
    case STOP:
    case RETURN:
    case CALL:
    case SETTING:
    case COMPRESS:
    case COMMENT:
    case TERSE_COMMENT:
    case NOPARSE:
    case BREAK:
    case SIMPLE_RETURN:
    case HALT:
    case FLUSH:
    case TRIM:
    case LTRIM:
    case RTRIM:
    case NOTRIM:
    case SIMPLE_NESTED:
    case NESTED:
    case SIMPLE_RECURSE:
    case RECURSE:
    case FALLBACK:
    case ESCAPE:
    case NOESCAPE:
    case UNIFIED_CALL:
    case STATIC_TEXT_WS:
    case STATIC_TEXT_NON_WS:
    case STATIC_TEXT_FALSE_ALARM:
    case DOLLAR_INTERPOLATION_OPENING:
    case HASH_INTERPOLATION_OPENING:{
      // has no effect but to get rid of a spurious warning.
              tp = MixedContent();
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      ;
    }
{if ("" != null) return tp;}
    throw new Error("Missing return statement in function");
  }

  final public void HeaderElement() throws ParseException {Token key;
    Expression exp = null;
    if (jj_2_219(2)) {
      jj_consume_token(STATIC_TEXT_WS);
    } else {
      ;
    }
    if (jj_2_221(2)) {
      jj_consume_token(TRIVIAL_FTL_HEADER);
    } else if (jj_2_222(2)) {
      jj_consume_token(FTL_HEADER);
      label_21:
      while (true) {
        if (jj_2_220(2)) {
          ;
        } else {
          break label_21;
        }
        key = jj_consume_token(ID);
        jj_consume_token(EQUALS);
        exp = Expression();
token_source.checkNamingConvention(key);

                    String ks = key.image;
                    TemplateModel value = null;
                    try {
                        value = exp.eval(null);
                    } catch (Exception e) {
                        {if (true) throw new ParseException(
                                        "Could not evaluate expression: " + exp.getCanonicalForm() + " \u005cnUnderlying cause: "
                                                +  e.getMessage(),
                                exp, e);}
                    }
                    String vs = null;
                    if (value instanceof TemplateScalarModel) {
                        try {
                            vs = ((TemplateScalarModel) exp).getAsString();
                        } catch (TemplateModelException tme) {}
                    }
                    if (template != null) {
                        if (ks.equalsIgnoreCase("encoding")) {
                            if (vs == null) {
                                {if (true) throw new ParseException("Expecting an encoding string.", exp);}
                            }
                            String encoding = template.getEncoding();
                            if (encoding != null && !encoding.equalsIgnoreCase(vs)) {
                                {if (true) throw new Template.WrongEncodingException(vs, encoding);}
                            }
                        } else if (ks.equalsIgnoreCase("STRIP_WHITESPACE") || ks.equals("stripWhitespace")) {
                            this.stripWhitespace = getBoolean(exp);
                        } else if (ks.equalsIgnoreCase("STRIP_TEXT") || ks.equals("stripText")) {
                            this.stripText = getBoolean(exp);
                        } else if (ks.equalsIgnoreCase("STRICT_SYNTAX") || ks.equals("strictSyntax")) {
                            this.token_source.strictEscapeSyntax = getBoolean(exp);
                        } else if (ks.equalsIgnoreCase("ns_prefixes") || ks.equals("nsPrefixes")) {
                            if (!(value instanceof TemplateHashModelEx)) {
                                {if (true) throw new ParseException("Expecting a hash of prefixes to namespace URI's.", exp);}
                            }
                            TemplateHashModelEx prefixMap = (TemplateHashModelEx) value;
                            try {
                                TemplateCollectionModel keys = prefixMap.keys();
                                for (TemplateModelIterator it = keys.iterator(); it.hasNext();) {
                                    String prefix = ((TemplateScalarModel) it.next()).getAsString();
                                    TemplateModel valueModel = prefixMap.get(prefix);
                                    if (!(valueModel instanceof TemplateScalarModel)) {
                                        {if (true) throw new ParseException("Non-string value in prefix to namespace hash.", exp);}
                                    }
                                    String nsURI = ((TemplateScalarModel) valueModel).getAsString();
                                    try {
                                        template.addPrefixNSMapping(prefix, nsURI);
                                    } catch (IllegalArgumentException iae) {
                                        {if (true) throw new ParseException(iae.getMessage(), exp);}
                                    }
                                }
                            } catch (TemplateModelException tme) {
                            }
                        } else if (ks.equalsIgnoreCase("attributes")) {
                            if (!(value instanceof TemplateHashModelEx)) {
                                {if (true) throw new ParseException("Expecting a hash of attribute names to values.", exp);}
                            }
                            TemplateHashModelEx attributeMap = (TemplateHashModelEx) value;
                            try {
                                TemplateCollectionModel keys = attributeMap.keys();
                                for (TemplateModelIterator it = keys.iterator(); it.hasNext();) {
                                        String attName = ((TemplateScalarModel) it.next()).getAsString();
                                        Object attValue = DeepUnwrap.unwrap(attributeMap.get(attName));
                                        template.setCustomAttribute(attName, attValue);
                                }
                            } catch (TemplateModelException tme) {
                            }
                        } else {
                            String correctName;
                                if (ks.equals("charset")) {
                                    correctName = "encoding";
                                } else if (ks.equals("xmlns")) {
                                    // [2.4] If came case will be the default, update this
                                correctName
                                        = token_source.namingConvention == Configuration.CAMEL_CASE_NAMING_CONVENTION
                                                ? "nsPrefixes" : "ns_prefixes";
                                } else {
                                   correctName = null;
                                }
                            {if (true) throw new ParseException(
                                    "Unknown FTL header parameter: " + key.image
                                    + (correctName == null ? "" : ". Did you mean " + correctName + "?"),
                                    template, key);}
                        }
                    }
      }
      LooseDirectiveEnd();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public Map ParamList() throws ParseException {Identifier id;
    Expression exp;
    Map result = new HashMap();
    label_22:
    while (true) {
      id = Identifier();
      jj_consume_token(EQUALS);
      exp = Expression();
result.put(id.toString(), exp);
      if (jj_2_223(2)) {
        jj_consume_token(COMMA);
      } else {
        ;
      }
      if (jj_2_224(2)) {
        ;
      } else {
        break label_22;
      }
    }
{if ("" != null) return result;}
    throw new Error("Missing return statement in function");
  }

/**
 * Root production to be used when parsing
 * an entire file.
 */
  final public TemplateElement Root() throws ParseException {TemplateElement doc;
    if (jj_2_225(2147483647)) {
      HeaderElement();
    } else {
      ;
    }
    doc = OptionalBlock();
    jj_consume_token(0);
doc.setFieldsForRootElement();
        doc = doc.postParseCleanup(stripWhitespace);
        // The cleanup result is possibly an element from deeper:
        doc.setFieldsForRootElement();
        {if ("" != null) return doc;}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_2_24(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  private boolean jj_2_25(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  private boolean jj_2_26(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  private boolean jj_2_27(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  private boolean jj_2_28(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  private boolean jj_2_29(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  private boolean jj_2_30(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  private boolean jj_2_31(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  private boolean jj_2_32(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  private boolean jj_2_33(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  private boolean jj_2_34(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  private boolean jj_2_35(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  private boolean jj_2_36(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  private boolean jj_2_37(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  private boolean jj_2_38(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  private boolean jj_2_39(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  private boolean jj_2_40(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  private boolean jj_2_41(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

  private boolean jj_2_42(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_42(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(41, xla); }
  }

  private boolean jj_2_43(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_43(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(42, xla); }
  }

  private boolean jj_2_44(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_44(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(43, xla); }
  }

  private boolean jj_2_45(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_45(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(44, xla); }
  }

  private boolean jj_2_46(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_46(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(45, xla); }
  }

  private boolean jj_2_47(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_47(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(46, xla); }
  }

  private boolean jj_2_48(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_48(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(47, xla); }
  }

  private boolean jj_2_49(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_49(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(48, xla); }
  }

  private boolean jj_2_50(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_50(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(49, xla); }
  }

  private boolean jj_2_51(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_51(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(50, xla); }
  }

  private boolean jj_2_52(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_52(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(51, xla); }
  }

  private boolean jj_2_53(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_53(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(52, xla); }
  }

  private boolean jj_2_54(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_54(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(53, xla); }
  }

  private boolean jj_2_55(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_55(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(54, xla); }
  }

  private boolean jj_2_56(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_56(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(55, xla); }
  }

  private boolean jj_2_57(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_57(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(56, xla); }
  }

  private boolean jj_2_58(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_58(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(57, xla); }
  }

  private boolean jj_2_59(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_59(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(58, xla); }
  }

  private boolean jj_2_60(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_60(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(59, xla); }
  }

  private boolean jj_2_61(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_61(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(60, xla); }
  }

  private boolean jj_2_62(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_62(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(61, xla); }
  }

  private boolean jj_2_63(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_63(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(62, xla); }
  }

  private boolean jj_2_64(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_64(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(63, xla); }
  }

  private boolean jj_2_65(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_65(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(64, xla); }
  }

  private boolean jj_2_66(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_66(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(65, xla); }
  }

  private boolean jj_2_67(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_67(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(66, xla); }
  }

  private boolean jj_2_68(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_68(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(67, xla); }
  }

  private boolean jj_2_69(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_69(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(68, xla); }
  }

  private boolean jj_2_70(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_70(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(69, xla); }
  }

  private boolean jj_2_71(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_71(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(70, xla); }
  }

  private boolean jj_2_72(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_72(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(71, xla); }
  }

  private boolean jj_2_73(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_73(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(72, xla); }
  }

  private boolean jj_2_74(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_74(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(73, xla); }
  }

  private boolean jj_2_75(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_75(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(74, xla); }
  }

  private boolean jj_2_76(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_76(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(75, xla); }
  }

  private boolean jj_2_77(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_77(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(76, xla); }
  }

  private boolean jj_2_78(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_78(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(77, xla); }
  }

  private boolean jj_2_79(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_79(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(78, xla); }
  }

  private boolean jj_2_80(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_80(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(79, xla); }
  }

  private boolean jj_2_81(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_81(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(80, xla); }
  }

  private boolean jj_2_82(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_82(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(81, xla); }
  }

  private boolean jj_2_83(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_83(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(82, xla); }
  }

  private boolean jj_2_84(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_84(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(83, xla); }
  }

  private boolean jj_2_85(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_85(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(84, xla); }
  }

  private boolean jj_2_86(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_86(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(85, xla); }
  }

  private boolean jj_2_87(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_87(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(86, xla); }
  }

  private boolean jj_2_88(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_88(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(87, xla); }
  }

  private boolean jj_2_89(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_89(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(88, xla); }
  }

  private boolean jj_2_90(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_90(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(89, xla); }
  }

  private boolean jj_2_91(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_91(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(90, xla); }
  }

  private boolean jj_2_92(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_92(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(91, xla); }
  }

  private boolean jj_2_93(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_93(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(92, xla); }
  }

  private boolean jj_2_94(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_94(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(93, xla); }
  }

  private boolean jj_2_95(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_95(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(94, xla); }
  }

  private boolean jj_2_96(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_96(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(95, xla); }
  }

  private boolean jj_2_97(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_97(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(96, xla); }
  }

  private boolean jj_2_98(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_98(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(97, xla); }
  }

  private boolean jj_2_99(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_99(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(98, xla); }
  }

  private boolean jj_2_100(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_100(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(99, xla); }
  }

  private boolean jj_2_101(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_101(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(100, xla); }
  }

  private boolean jj_2_102(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_102(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(101, xla); }
  }

  private boolean jj_2_103(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_103(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(102, xla); }
  }

  private boolean jj_2_104(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_104(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(103, xla); }
  }

  private boolean jj_2_105(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_105(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(104, xla); }
  }

  private boolean jj_2_106(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_106(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(105, xla); }
  }

  private boolean jj_2_107(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_107(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(106, xla); }
  }

  private boolean jj_2_108(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_108(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(107, xla); }
  }

  private boolean jj_2_109(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_109(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(108, xla); }
  }

  private boolean jj_2_110(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_110(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(109, xla); }
  }

  private boolean jj_2_111(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_111(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(110, xla); }
  }

  private boolean jj_2_112(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_112(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(111, xla); }
  }

  private boolean jj_2_113(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_113(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(112, xla); }
  }

  private boolean jj_2_114(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_114(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(113, xla); }
  }

  private boolean jj_2_115(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_115(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(114, xla); }
  }

  private boolean jj_2_116(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_116(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(115, xla); }
  }

  private boolean jj_2_117(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_117(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(116, xla); }
  }

  private boolean jj_2_118(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_118(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(117, xla); }
  }

  private boolean jj_2_119(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_119(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(118, xla); }
  }

  private boolean jj_2_120(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_120(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(119, xla); }
  }

  private boolean jj_2_121(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_121(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(120, xla); }
  }

  private boolean jj_2_122(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_122(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(121, xla); }
  }

  private boolean jj_2_123(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_123(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(122, xla); }
  }

  private boolean jj_2_124(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_124(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(123, xla); }
  }

  private boolean jj_2_125(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_125(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(124, xla); }
  }

  private boolean jj_2_126(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_126(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(125, xla); }
  }

  private boolean jj_2_127(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_127(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(126, xla); }
  }

  private boolean jj_2_128(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_128(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(127, xla); }
  }

  private boolean jj_2_129(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_129(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(128, xla); }
  }

  private boolean jj_2_130(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_130(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(129, xla); }
  }

  private boolean jj_2_131(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_131(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(130, xla); }
  }

  private boolean jj_2_132(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_132(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(131, xla); }
  }

  private boolean jj_2_133(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_133(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(132, xla); }
  }

  private boolean jj_2_134(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_134(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(133, xla); }
  }

  private boolean jj_2_135(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_135(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(134, xla); }
  }

  private boolean jj_2_136(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_136(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(135, xla); }
  }

  private boolean jj_2_137(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_137(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(136, xla); }
  }

  private boolean jj_2_138(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_138(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(137, xla); }
  }

  private boolean jj_2_139(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_139(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(138, xla); }
  }

  private boolean jj_2_140(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_140(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(139, xla); }
  }

  private boolean jj_2_141(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_141(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(140, xla); }
  }

  private boolean jj_2_142(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_142(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(141, xla); }
  }

  private boolean jj_2_143(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_143(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(142, xla); }
  }

  private boolean jj_2_144(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_144(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(143, xla); }
  }

  private boolean jj_2_145(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_145(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(144, xla); }
  }

  private boolean jj_2_146(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_146(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(145, xla); }
  }

  private boolean jj_2_147(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_147(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(146, xla); }
  }

  private boolean jj_2_148(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_148(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(147, xla); }
  }

  private boolean jj_2_149(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_149(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(148, xla); }
  }

  private boolean jj_2_150(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_150(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(149, xla); }
  }

  private boolean jj_2_151(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_151(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(150, xla); }
  }

  private boolean jj_2_152(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_152(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(151, xla); }
  }

  private boolean jj_2_153(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_153(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(152, xla); }
  }

  private boolean jj_2_154(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_154(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(153, xla); }
  }

  private boolean jj_2_155(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_155(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(154, xla); }
  }

  private boolean jj_2_156(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_156(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(155, xla); }
  }

  private boolean jj_2_157(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_157(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(156, xla); }
  }

  private boolean jj_2_158(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_158(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(157, xla); }
  }

  private boolean jj_2_159(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_159(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(158, xla); }
  }

  private boolean jj_2_160(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_160(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(159, xla); }
  }

  private boolean jj_2_161(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_161(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(160, xla); }
  }

  private boolean jj_2_162(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_162(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(161, xla); }
  }

  private boolean jj_2_163(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_163(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(162, xla); }
  }

  private boolean jj_2_164(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_164(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(163, xla); }
  }

  private boolean jj_2_165(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_165(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(164, xla); }
  }

  private boolean jj_2_166(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_166(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(165, xla); }
  }

  private boolean jj_2_167(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_167(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(166, xla); }
  }

  private boolean jj_2_168(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_168(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(167, xla); }
  }

  private boolean jj_2_169(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_169(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(168, xla); }
  }

  private boolean jj_2_170(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_170(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(169, xla); }
  }

  private boolean jj_2_171(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_171(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(170, xla); }
  }

  private boolean jj_2_172(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_172(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(171, xla); }
  }

  private boolean jj_2_173(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_173(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(172, xla); }
  }

  private boolean jj_2_174(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_174(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(173, xla); }
  }

  private boolean jj_2_175(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_175(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(174, xla); }
  }

  private boolean jj_2_176(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_176(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(175, xla); }
  }

  private boolean jj_2_177(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_177(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(176, xla); }
  }

  private boolean jj_2_178(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_178(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(177, xla); }
  }

  private boolean jj_2_179(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_179(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(178, xla); }
  }

  private boolean jj_2_180(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_180(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(179, xla); }
  }

  private boolean jj_2_181(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_181(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(180, xla); }
  }

  private boolean jj_2_182(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_182(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(181, xla); }
  }

  private boolean jj_2_183(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_183(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(182, xla); }
  }

  private boolean jj_2_184(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_184(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(183, xla); }
  }

  private boolean jj_2_185(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_185(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(184, xla); }
  }

  private boolean jj_2_186(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_186(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(185, xla); }
  }

  private boolean jj_2_187(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_187(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(186, xla); }
  }

  private boolean jj_2_188(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_188(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(187, xla); }
  }

  private boolean jj_2_189(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_189(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(188, xla); }
  }

  private boolean jj_2_190(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_190(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(189, xla); }
  }

  private boolean jj_2_191(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_191(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(190, xla); }
  }

  private boolean jj_2_192(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_192(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(191, xla); }
  }

  private boolean jj_2_193(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_193(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(192, xla); }
  }

  private boolean jj_2_194(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_194(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(193, xla); }
  }

  private boolean jj_2_195(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_195(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(194, xla); }
  }

  private boolean jj_2_196(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_196(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(195, xla); }
  }

  private boolean jj_2_197(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_197(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(196, xla); }
  }

  private boolean jj_2_198(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_198(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(197, xla); }
  }

  private boolean jj_2_199(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_199(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(198, xla); }
  }

  private boolean jj_2_200(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_200(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(199, xla); }
  }

  private boolean jj_2_201(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_201(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(200, xla); }
  }

  private boolean jj_2_202(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_202(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(201, xla); }
  }

  private boolean jj_2_203(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_203(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(202, xla); }
  }

  private boolean jj_2_204(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_204(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(203, xla); }
  }

  private boolean jj_2_205(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_205(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(204, xla); }
  }

  private boolean jj_2_206(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_206(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(205, xla); }
  }

  private boolean jj_2_207(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_207(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(206, xla); }
  }

  private boolean jj_2_208(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_208(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(207, xla); }
  }

  private boolean jj_2_209(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_209(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(208, xla); }
  }

  private boolean jj_2_210(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_210(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(209, xla); }
  }

  private boolean jj_2_211(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_211(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(210, xla); }
  }

  private boolean jj_2_212(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_212(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(211, xla); }
  }

  private boolean jj_2_213(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_213(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(212, xla); }
  }

  private boolean jj_2_214(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_214(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(213, xla); }
  }

  private boolean jj_2_215(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_215(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(214, xla); }
  }

  private boolean jj_2_216(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_216(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(215, xla); }
  }

  private boolean jj_2_217(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_217(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(216, xla); }
  }

  private boolean jj_2_218(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_218(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(217, xla); }
  }

  private boolean jj_2_219(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_219(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(218, xla); }
  }

  private boolean jj_2_220(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_220(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(219, xla); }
  }

  private boolean jj_2_221(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_221(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(220, xla); }
  }

  private boolean jj_2_222(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_222(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(221, xla); }
  }

  private boolean jj_2_223(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_223(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(222, xla); }
  }

  private boolean jj_2_224(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_224(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(223, xla); }
  }

  private boolean jj_2_225(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_225(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(224, xla); }
  }

  private boolean jj_3_21()
 {
    if (jj_scan_token(DIVIDE)) return true;
    return false;
  }

  private boolean jj_3_151()
 {
    if (jj_scan_token(EMPTY_DIRECTIVE_END)) return true;
    return false;
  }

  private boolean jj_3_20()
 {
    if (jj_scan_token(TIMES)) return true;
    return false;
  }

  private boolean jj_3_19()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(113)) {
    jj_scanpos = xsp;
    if (jj_scan_token(116)) {
    jj_scanpos = xsp;
    if (jj_scan_token(117)) return true;
    }
    }
    return false;
  }

  private boolean jj_3_145()
 {
    if (jj_scan_token(TERMINATING_WHITESPACE)) return true;
    return false;
  }

  private boolean jj_3_149()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_145()) jj_scanpos = xsp;
    if (jj_scan_token(ID)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_146()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_144()
 {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(EQUALS)) return true;
    return false;
  }

  private boolean jj_3_82()
 {
    if (jj_scan_token(AS)) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3_150()
 {
    if (jj_scan_token(SEMICOLON)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_149()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_94()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_20()) {
    jj_scanpos = xsp;
    if (jj_3_21()) {
    jj_scanpos = xsp;
    if (jj_3_22()) return true;
    }
    }
    if (jj_3R_93()) return true;
    return false;
  }

  private boolean jj_3R_51()
 {
    if (jj_scan_token(LIST)) return true;
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3R_84()
 {
    if (jj_3R_93()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_94()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_143()
 {
    if (jj_scan_token(TERMINATING_WHITESPACE)) return true;
    return false;
  }

  private boolean jj_3R_58()
 {
    if (jj_scan_token(UNIFIED_CALL)) return true;
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3R_90()
 {
    if (jj_scan_token(RECOVER)) return true;
    return false;
  }

  private boolean jj_3_18()
 {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  private boolean jj_3_17()
 {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  private boolean jj_3_16()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(111)) {
    jj_scanpos = xsp;
    if (jj_scan_token(112)) return true;
    }
    return false;
  }

  private boolean jj_3_225()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(72)) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(70)) {
    jj_scanpos = xsp;
    if (jj_scan_token(69)) return true;
    }
    return false;
  }

  private boolean jj_3_81()
 {
    if (jj_scan_token(END_ATTEMPT)) return true;
    return false;
  }

  private boolean jj_3_80()
 {
    if (jj_scan_token(END_RECOVER)) return true;
    return false;
  }

  private boolean jj_3R_85()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_17()) {
    jj_scanpos = xsp;
    if (jj_3_18()) return true;
    }
    if (jj_3R_84()) return true;
    return false;
  }

  private boolean jj_3R_57()
 {
    if (jj_scan_token(COMPRESS)) return true;
    if (jj_3R_44()) return true;
    if (jj_scan_token(END_COMPRESS)) return true;
    return false;
  }

  private boolean jj_3R_78()
 {
    if (jj_scan_token(ATTEMPT)) return true;
    if (jj_3R_44()) return true;
    if (jj_3R_90()) return true;
    return false;
  }

  private boolean jj_3R_34()
 {
    if (jj_3R_84()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_85()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_223()
 {
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  private boolean jj_3_15()
 {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  private boolean jj_3_79()
 {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3_14()
 {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  private boolean jj_3_142()
 {
    if (jj_scan_token(END_FUNCTION)) return true;
    return false;
  }

  private boolean jj_3_224()
 {
    if (jj_3R_28()) return true;
    if (jj_scan_token(EQUALS)) return true;
    return false;
  }

  private boolean jj_3R_31()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_14()) {
    jj_scanpos = xsp;
    if (jj_3_15()) return true;
    }
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3_141()
 {
    if (jj_scan_token(END_MACRO)) return true;
    return false;
  }

  private boolean jj_3_78()
 {
    if (jj_scan_token(ELSE_IF)) return true;
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3_13()
 {
    if (jj_scan_token(EXCLAM)) return true;
    return false;
  }

  private boolean jj_3_140()
 {
    if (jj_scan_token(CLOSE_PAREN)) return true;
    return false;
  }

  private boolean jj_3R_32()
 {
    Token xsp;
    if (jj_3_13()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_13()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3R_50()
 {
    if (jj_scan_token(IF)) return true;
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3_12()
 {
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3_11()
 {
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3_10()
 {
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3R_93()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3_12()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_139()
 {
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  private boolean jj_3_138()
 {
    if (jj_scan_token(EQUALS)) return true;
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3_137()
 {
    if (jj_scan_token(ELLIPSIS)) return true;
    return false;
  }

  private boolean jj_3_136()
 {
    if (jj_scan_token(ID)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_137()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_138()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_139()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_135()
 {
    if (jj_scan_token(OPEN_PAREN)) return true;
    return false;
  }

  private boolean jj_3_9()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(91)) {
    jj_scanpos = xsp;
    if (jj_scan_token(124)) {
    jj_scanpos = xsp;
    if (jj_scan_token(126)) {
    jj_scanpos = xsp;
    if (jj_scan_token(95)) {
    jj_scanpos = xsp;
    if (jj_scan_token(120)) {
    jj_scanpos = xsp;
    if (jj_scan_token(144)) {
    jj_scanpos = xsp;
    if (jj_scan_token(96)) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_29()
 {
    if (jj_scan_token(OPEN_PAREN)) return true;
    if (jj_3R_42()) return true;
    if (jj_scan_token(CLOSE_PAREN)) return true;
    return false;
  }

  private boolean jj_3_134()
 {
    if (jj_scan_token(FUNCTION)) return true;
    return false;
  }

  private boolean jj_3_133()
 {
    if (jj_scan_token(MACRO)) return true;
    return false;
  }

  private boolean jj_3R_83()
 {
    if (jj_3R_92()) return true;
    return false;
  }

  private boolean jj_3_8()
 {
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3R_56()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_133()) {
    jj_scanpos = xsp;
    if (jj_3_134()) return true;
    }
    if (jj_3R_88()) return true;
    return false;
  }

  private boolean jj_3_7()
 {
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3_6()
 {
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3_5()
 {
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3_4()
 {
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3_3()
 {
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3_2()
 {
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3_220()
 {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(EQUALS)) return true;
    return false;
  }

  private boolean jj_3R_33()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_1()) {
    jj_scanpos = xsp;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3_8()) return true;
    }
    }
    }
    }
    }
    }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_83()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_77()
 {
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3R_81()
 {
    if (jj_scan_token(HASH_INTERPOLATION_OPENING)) return true;
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3_222()
 {
    if (jj_scan_token(FTL_HEADER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_220()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3R_55()
 {
    if (jj_scan_token(IMPORT)) return true;
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3_221()
 {
    if (jj_scan_token(TRIVIAL_FTL_HEADER)) return true;
    return false;
  }

  private boolean jj_3R_42()
 {
    if (jj_3R_86()) return true;
    return false;
  }

  private boolean jj_3_219()
 {
    if (jj_scan_token(STATIC_TEXT_WS)) return true;
    return false;
  }

  private boolean jj_3R_80()
 {
    if (jj_scan_token(DOLLAR_INTERPOLATION_OPENING)) return true;
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3R_87()
 {
    if (jj_3R_97()) return true;
    return false;
  }

  private boolean jj_3R_44()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_87()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_75()
 {
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3_74()
 {
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  private boolean jj_3_73()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_42()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_74()) {
    jj_scanpos = xsp;
    if (jj_3_75()) return true;
    }
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3_132()
 {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(EQUALS)) return true;
    return false;
  }

  private boolean jj_3_217()
 {
    if (jj_3R_81()) return true;
    return false;
  }

  private boolean jj_3_72()
 {
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3_216()
 {
    if (jj_3R_80()) return true;
    return false;
  }

  private boolean jj_3_131()
 {
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3_209()
 {
    if (jj_scan_token(LONE_LESS_THAN_OR_DASH)) return true;
    return false;
  }

  private boolean jj_3_215()
 {
    if (jj_3R_79()) return true;
    return false;
  }

  private boolean jj_3R_54()
 {
    if (jj_scan_token(_INCLUDE)) return true;
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3_71()
 {
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  private boolean jj_3_218()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_215()) {
    jj_scanpos = xsp;
    if (jj_3_216()) {
    jj_scanpos = xsp;
    if (jj_3_217()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_76()
 {
    if (jj_3R_42()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_71()) {
    jj_scanpos = xsp;
    if (jj_3_72()) return true;
    }
    if (jj_3R_42()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_73()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_128()
 {
    if (jj_scan_token(END_GLOBAL)) return true;
    return false;
  }

  private boolean jj_3R_24()
 {
    if (jj_scan_token(OPENING_CURLY_BRACKET)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_76()) jj_scanpos = xsp;
    if (jj_scan_token(CLOSING_CURLY_BRACKET)) return true;
    return false;
  }

  private boolean jj_3_119()
 {
    if (jj_scan_token(MOD_EQUALS)) return true;
    return false;
  }

  private boolean jj_3_127()
 {
    if (jj_scan_token(END_ASSIGN)) return true;
    return false;
  }

  private boolean jj_3_126()
 {
    if (jj_scan_token(END_LOCAL)) return true;
    return false;
  }

  private boolean jj_3_208()
 {
    if (jj_scan_token(TERSE_COMMENT_END)) return true;
    return false;
  }

  private boolean jj_3_70()
 {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  private boolean jj_3_118()
 {
    if (jj_scan_token(DIV_EQUALS)) return true;
    return false;
  }

  private boolean jj_3_69()
 {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  private boolean jj_3_214()
 {
    if (jj_3R_82()) return true;
    return false;
  }

  private boolean jj_3_213()
 {
    if (jj_3R_81()) return true;
    return false;
  }

  private boolean jj_3_212()
 {
    if (jj_3R_80()) return true;
    return false;
  }

  private boolean jj_3R_26()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_69()) {
    jj_scanpos = xsp;
    if (jj_3_70()) return true;
    }
    return false;
  }

  private boolean jj_3_125()
 {
    if (jj_scan_token(IN)) return true;
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3_211()
 {
    if (jj_3R_79()) return true;
    return false;
  }

  private boolean jj_3R_100()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_211()) {
    jj_scanpos = xsp;
    if (jj_3_212()) {
    jj_scanpos = xsp;
    if (jj_3_213()) {
    jj_scanpos = xsp;
    if (jj_3_214()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3_117()
 {
    if (jj_scan_token(TIMES_EQUALS)) return true;
    return false;
  }

  private boolean jj_3_130()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_125()) jj_scanpos = xsp;
    if (jj_scan_token(DIRECTIVE_END)) return true;
    if (jj_3R_44()) return true;
    xsp = jj_scanpos;
    if (jj_3_126()) {
    jj_scanpos = xsp;
    if (jj_3_127()) {
    jj_scanpos = xsp;
    if (jj_3_128()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_207()
 {
    if (jj_scan_token(MAYBE_END)) return true;
    return false;
  }

  private boolean jj_3R_97()
 {
    Token xsp;
    if (jj_3R_100()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_100()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_107()
 {
    if (jj_scan_token(MOD_EQUALS)) return true;
    return false;
  }

  private boolean jj_3_116()
 {
    if (jj_scan_token(MINUS_EQUALS)) return true;
    return false;
  }

  private boolean jj_3_121()
 {
    if (jj_scan_token(MINUS_MINUS)) return true;
    return false;
  }

  private boolean jj_3_68()
 {
    if (jj_scan_token(RAW_STRING)) return true;
    return false;
  }

  private boolean jj_3_124()
 {
    if (jj_scan_token(IN)) return true;
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3_106()
 {
    if (jj_scan_token(DIV_EQUALS)) return true;
    return false;
  }

  private boolean jj_3_206()
 {
    if (jj_scan_token(KEEP_GOING)) return true;
    return false;
  }

  private boolean jj_3_210()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_206()) {
    jj_scanpos = xsp;
    if (jj_3_207()) {
    jj_scanpos = xsp;
    if (jj_3_208()) {
    jj_scanpos = xsp;
    if (jj_3_209()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3_67()
 {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_89()
 {
    Token xsp;
    if (jj_3_210()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_210()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_25()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_67()) {
    jj_scanpos = xsp;
    if (jj_3_68()) return true;
    }
    return false;
  }

  private boolean jj_3_115()
 {
    if (jj_scan_token(PLUS_EQUALS)) return true;
    return false;
  }

  private boolean jj_3_120()
 {
    if (jj_scan_token(PLUS_PLUS)) return true;
    return false;
  }

  private boolean jj_3_123()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_120()) {
    jj_scanpos = xsp;
    if (jj_3_121()) return true;
    }
    return false;
  }

  private boolean jj_3_105()
 {
    if (jj_scan_token(TIMES_EQUALS)) return true;
    return false;
  }

  private boolean jj_3_114()
 {
    if (jj_scan_token(EQUALS)) return true;
    return false;
  }

  private boolean jj_3R_38()
 {
    if (jj_scan_token(OPEN_PAREN)) return true;
    if (jj_3R_47()) return true;
    if (jj_scan_token(CLOSE_PAREN)) return true;
    return false;
  }

  private boolean jj_3_122()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_114()) {
    jj_scanpos = xsp;
    if (jj_3_115()) {
    jj_scanpos = xsp;
    if (jj_3_116()) {
    jj_scanpos = xsp;
    if (jj_3_117()) {
    jj_scanpos = xsp;
    if (jj_3_118()) {
    jj_scanpos = xsp;
    if (jj_3_119()) return true;
    }
    }
    }
    }
    }
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3_204()
 {
    if (jj_scan_token(STATIC_TEXT_FALSE_ALARM)) return true;
    return false;
  }

  private boolean jj_3_205()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(72)) {
    jj_scanpos = xsp;
    if (jj_scan_token(73)) {
    jj_scanpos = xsp;
    if (jj_scan_token(74)) return true;
    }
    }
    return false;
  }

  private boolean jj_3_203()
 {
    if (jj_scan_token(STATIC_TEXT_NON_WS)) return true;
    return false;
  }

  private boolean jj_3_104()
 {
    if (jj_scan_token(MINUS_EQUALS)) return true;
    return false;
  }

  private boolean jj_3_202()
 {
    if (jj_scan_token(STATIC_TEXT_WS)) return true;
    return false;
  }

  private boolean jj_3_113()
 {
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  private boolean jj_3R_91()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_202()) {
    jj_scanpos = xsp;
    if (jj_3_203()) {
    jj_scanpos = xsp;
    if (jj_3_204()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_112()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(121)) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(133)) {
    jj_scanpos = xsp;
    if (jj_scan_token(85)) return true;
    }
    xsp = jj_scanpos;
    if (jj_scan_token(97)) {
    jj_scanpos = xsp;
    if (jj_scan_token(100)) {
    jj_scanpos = xsp;
    if (jj_scan_token(101)) {
    jj_scanpos = xsp;
    if (jj_scan_token(102)) {
    jj_scanpos = xsp;
    if (jj_scan_token(103)) {
    jj_scanpos = xsp;
    if (jj_scan_token(104)) {
    jj_scanpos = xsp;
    if (jj_scan_token(105)) {
    jj_scanpos = xsp;
    if (jj_scan_token(106)) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_109()
 {
    if (jj_scan_token(MINUS_MINUS)) return true;
    return false;
  }

  private boolean jj_3R_48()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_113()) jj_scanpos = xsp;
    if (jj_3R_88()) return true;
    return false;
  }

  private boolean jj_3R_79()
 {
    Token xsp;
    if (jj_3R_91()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_91()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_103()
 {
    if (jj_scan_token(PLUS_EQUALS)) return true;
    return false;
  }

  private boolean jj_3R_37()
 {
    if (jj_scan_token(OPEN_BRACKET)) return true;
    if (jj_3R_42()) return true;
    if (jj_scan_token(CLOSE_BRACKET)) return true;
    return false;
  }

  private boolean jj_3_108()
 {
    if (jj_scan_token(PLUS_PLUS)) return true;
    return false;
  }

  private boolean jj_3_102()
 {
    if (jj_scan_token(EQUALS)) return true;
    return false;
  }

  private boolean jj_3_111()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_108()) {
    jj_scanpos = xsp;
    if (jj_3_109()) return true;
    }
    return false;
  }

  private boolean jj_3_201()
 {
    if (jj_3R_78()) return true;
    return false;
  }

  private boolean jj_3_200()
 {
    if (jj_3R_77()) return true;
    return false;
  }

  private boolean jj_3_65()
 {
    if (jj_scan_token(DOUBLE_STAR)) return true;
    return false;
  }

  private boolean jj_3_199()
 {
    if (jj_3R_76()) return true;
    return false;
  }

  private boolean jj_3_62()
 {
    if (jj_scan_token(USING)) return true;
    return false;
  }

  private boolean jj_3_198()
 {
    if (jj_3R_75()) return true;
    return false;
  }

  private boolean jj_3_61()
 {
    if (jj_scan_token(AS)) return true;
    return false;
  }

  private boolean jj_3_197()
 {
    if (jj_3R_74()) return true;
    return false;
  }

  private boolean jj_3_60()
 {
    if (jj_scan_token(IN)) return true;
    return false;
  }

  private boolean jj_3_196()
 {
    if (jj_3R_73()) return true;
    return false;
  }

  private boolean jj_3_59()
 {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  private boolean jj_3_110()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_102()) {
    jj_scanpos = xsp;
    if (jj_3_103()) {
    jj_scanpos = xsp;
    if (jj_3_104()) {
    jj_scanpos = xsp;
    if (jj_3_105()) {
    jj_scanpos = xsp;
    if (jj_3_106()) {
    jj_scanpos = xsp;
    if (jj_3_107()) return true;
    }
    }
    }
    }
    }
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3_195()
 {
    if (jj_3R_72()) return true;
    return false;
  }

  private boolean jj_3_58()
 {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  private boolean jj_3_194()
 {
    if (jj_3R_71()) return true;
    return false;
  }

  private boolean jj_3_57()
 {
    if (jj_scan_token(ESCAPED_GTE)) return true;
    return false;
  }

  private boolean jj_3_193()
 {
    if (jj_3R_70()) return true;
    return false;
  }

  private boolean jj_3_56()
 {
    if (jj_scan_token(ESCAPED_GT)) return true;
    return false;
  }

  private boolean jj_3_64()
 {
    if (jj_scan_token(TIMES)) return true;
    return false;
  }

  private boolean jj_3_192()
 {
    if (jj_3R_69()) return true;
    return false;
  }

  private boolean jj_3_55()
 {
    if (jj_scan_token(LESS_THAN_EQUALS)) return true;
    return false;
  }

  private boolean jj_3_191()
 {
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3_54()
 {
    if (jj_scan_token(LESS_THAN)) return true;
    return false;
  }

  private boolean jj_3_190()
 {
    if (jj_3R_67()) return true;
    return false;
  }

  private boolean jj_3_189()
 {
    if (jj_3R_66()) return true;
    return false;
  }

  private boolean jj_3_129()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_110()) {
    jj_scanpos = xsp;
    if (jj_3_111()) return true;
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_48()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3_124()) jj_scanpos = xsp;
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3_66()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_54()) {
    jj_scanpos = xsp;
    if (jj_3_55()) {
    jj_scanpos = xsp;
    if (jj_3_56()) {
    jj_scanpos = xsp;
    if (jj_3_57()) {
    jj_scanpos = xsp;
    if (jj_3_58()) {
    jj_scanpos = xsp;
    if (jj_3_59()) {
    jj_scanpos = xsp;
    if (jj_3_60()) {
    jj_scanpos = xsp;
    if (jj_3_61()) {
    jj_scanpos = xsp;
    if (jj_3_62()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_188()
 {
    if (jj_3R_65()) return true;
    return false;
  }

  private boolean jj_3_63()
 {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3_187()
 {
    if (jj_3R_64()) return true;
    return false;
  }

  private boolean jj_3_186()
 {
    if (jj_3R_63()) return true;
    return false;
  }

  private boolean jj_3_185()
 {
    if (jj_3R_62()) return true;
    return false;
  }

  private boolean jj_3R_36()
 {
    if (jj_scan_token(DOT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_63()) {
    jj_scanpos = xsp;
    if (jj_3_64()) {
    jj_scanpos = xsp;
    if (jj_3_65()) {
    jj_scanpos = xsp;
    if (jj_3_66()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3_184()
 {
    if (jj_3R_61()) return true;
    return false;
  }

  private boolean jj_3_183()
 {
    if (jj_3R_60()) return true;
    return false;
  }

  private boolean jj_3_182()
 {
    if (jj_3R_59()) return true;
    return false;
  }

  private boolean jj_3_101()
 {
    if (jj_scan_token(LOCALASSIGN)) return true;
    return false;
  }

  private boolean jj_3_181()
 {
    if (jj_3R_58()) return true;
    return false;
  }

  private boolean jj_3_180()
 {
    if (jj_3R_57()) return true;
    return false;
  }

  private boolean jj_3_100()
 {
    if (jj_scan_token(GLOBALASSIGN)) return true;
    return false;
  }

  private boolean jj_3_99()
 {
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  private boolean jj_3_179()
 {
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3_178()
 {
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3_177()
 {
    if (jj_3R_54()) return true;
    return false;
  }

  private boolean jj_3R_53()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_99()) {
    jj_scanpos = xsp;
    if (jj_3_100()) {
    jj_scanpos = xsp;
    if (jj_3_101()) return true;
    }
    }
    if (jj_3R_88()) return true;
    return false;
  }

  private boolean jj_3_176()
 {
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3_175()
 {
    if (jj_3R_52()) return true;
    return false;
  }

  private boolean jj_3_174()
 {
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3_173()
 {
    if (jj_3R_50()) return true;
    return false;
  }

  private boolean jj_3R_106()
 {
    if (jj_scan_token(OPEN_PAREN)) return true;
    if (jj_3R_47()) return true;
    if (jj_scan_token(CLOSE_PAREN)) return true;
    return false;
  }

  private boolean jj_3R_82()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_173()) {
    jj_scanpos = xsp;
    if (jj_3_174()) {
    jj_scanpos = xsp;
    if (jj_3_175()) {
    jj_scanpos = xsp;
    if (jj_3_176()) {
    jj_scanpos = xsp;
    if (jj_3_177()) {
    jj_scanpos = xsp;
    if (jj_3_178()) {
    jj_scanpos = xsp;
    if (jj_3_179()) {
    jj_scanpos = xsp;
    if (jj_3_180()) {
    jj_scanpos = xsp;
    if (jj_3_181()) {
    jj_scanpos = xsp;
    if (jj_3_182()) {
    jj_scanpos = xsp;
    if (jj_3_183()) {
    jj_scanpos = xsp;
    if (jj_3_184()) {
    jj_scanpos = xsp;
    if (jj_3_185()) {
    jj_scanpos = xsp;
    if (jj_3_186()) {
    jj_scanpos = xsp;
    if (jj_3_187()) {
    jj_scanpos = xsp;
    if (jj_3_188()) {
    jj_scanpos = xsp;
    if (jj_3_189()) {
    jj_scanpos = xsp;
    if (jj_3_190()) {
    jj_scanpos = xsp;
    if (jj_3_191()) {
    jj_scanpos = xsp;
    if (jj_3_192()) {
    jj_scanpos = xsp;
    if (jj_3_193()) {
    jj_scanpos = xsp;
    if (jj_3_194()) {
    jj_scanpos = xsp;
    if (jj_3_195()) {
    jj_scanpos = xsp;
    if (jj_3_196()) {
    jj_scanpos = xsp;
    if (jj_3_197()) {
    jj_scanpos = xsp;
    if (jj_3_198()) {
    jj_scanpos = xsp;
    if (jj_3_199()) {
    jj_scanpos = xsp;
    if (jj_3_200()) {
    jj_scanpos = xsp;
    if (jj_3_201()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_98()
 {
    if (jj_scan_token(NOTRIM)) return true;
    return false;
  }

  private boolean jj_3_97()
 {
    if (jj_scan_token(RTRIM)) return true;
    return false;
  }

  private boolean jj_3_96()
 {
    if (jj_scan_token(LTRIM)) return true;
    return false;
  }

  private boolean jj_3_95()
 {
    if (jj_scan_token(TRIM)) return true;
    return false;
  }

  private boolean jj_3R_71()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_95()) {
    jj_scanpos = xsp;
    if (jj_3_96()) {
    jj_scanpos = xsp;
    if (jj_3_97()) {
    jj_scanpos = xsp;
    if (jj_3_98()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_66()
 {
    if (jj_scan_token(SETTING)) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3R_39()
 {
    if (jj_scan_token(BUILT_IN)) return true;
    if (jj_scan_token(ID)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_106()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_70()
 {
    if (jj_scan_token(FLUSH)) return true;
    return false;
  }

  private boolean jj_3_172()
 {
    if (jj_scan_token(EMPTY_DIRECTIVE_END)) return true;
    return false;
  }

  private boolean jj_3_171()
 {
    if (jj_scan_token(DIRECTIVE_END)) return true;
    return false;
  }

  private boolean jj_3R_46()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_171()) {
    jj_scanpos = xsp;
    if (jj_3_172()) return true;
    }
    return false;
  }

  private boolean jj_3_51()
 {
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3R_41()
 {
    if (jj_scan_token(EXISTS)) return true;
    return false;
  }

  private boolean jj_3_94()
 {
    if (jj_scan_token(NESTED)) return true;
    if (jj_3R_47()) return true;
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3R_43()
 {
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3_93()
 {
    if (jj_scan_token(SIMPLE_NESTED)) return true;
    return false;
  }

  private boolean jj_3_53()
 {
    if (jj_scan_token(EXCLAM)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_43()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_72()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_93()) {
    jj_scanpos = xsp;
    if (jj_3_94()) return true;
    }
    return false;
  }

  private boolean jj_3R_74()
 {
    if (jj_scan_token(NOESCAPE)) return true;
    if (jj_3R_44()) return true;
    if (jj_scan_token(END_NOESCAPE)) return true;
    return false;
  }

  private boolean jj_3_52()
 {
    if (jj_scan_token(TERMINATING_EXCLAM)) return true;
    return false;
  }

  private boolean jj_3R_40()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_52()) {
    jj_scanpos = xsp;
    if (jj_3_53()) return true;
    }
    return false;
  }

  private boolean jj_3_92()
 {
    if (jj_scan_token(STOP)) return true;
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3_91()
 {
    if (jj_scan_token(HALT)) return true;
    return false;
  }

  private boolean jj_3_50()
 {
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3_49()
 {
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3R_69()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_91()) {
    jj_scanpos = xsp;
    if (jj_3_92()) return true;
    }
    return false;
  }

  private boolean jj_3_48()
 {
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3_47()
 {
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3_46()
 {
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3_45()
 {
    if (jj_3R_36()) return true;
    return false;
  }

  private boolean jj_3R_73()
 {
    if (jj_scan_token(ESCAPE)) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3R_92()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_45()) {
    jj_scanpos = xsp;
    if (jj_3_46()) {
    jj_scanpos = xsp;
    if (jj_3_47()) {
    jj_scanpos = xsp;
    if (jj_3_48()) {
    jj_scanpos = xsp;
    if (jj_3_49()) {
    jj_scanpos = xsp;
    if (jj_3_50()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_170()
 {
    if (jj_scan_token(DEFAUL)) return true;
    return false;
  }

  private boolean jj_3_169()
 {
    if (jj_scan_token(CASE)) return true;
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3_90()
 {
    if (jj_scan_token(RETURN)) return true;
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3_89()
 {
    if (jj_scan_token(SIMPLE_RETURN)) return true;
    return false;
  }

  private boolean jj_3_168()
 {
    if (jj_scan_token(STATIC_TEXT_WS)) return true;
    return false;
  }

  private boolean jj_3R_49()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_168()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_169()) {
    jj_scanpos = xsp;
    if (jj_3_170()) return true;
    }
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3R_68()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_89()) {
    jj_scanpos = xsp;
    if (jj_3_90()) return true;
    }
    return false;
  }

  private boolean jj_3R_30()
 {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3_44()
 {
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3_43()
 {
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3_167()
 {
    if (jj_scan_token(STATIC_TEXT_WS)) return true;
    return false;
  }

  private boolean jj_3R_88()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_43()) {
    jj_scanpos = xsp;
    if (jj_3_44()) return true;
    }
    return false;
  }

  private boolean jj_3R_67()
 {
    if (jj_scan_token(BREAK)) return true;
    return false;
  }

  private boolean jj_3_166()
 {
    if (jj_3R_49()) return true;
    return false;
  }

  private boolean jj_3R_28()
 {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3R_65()
 {
    if (jj_scan_token(SWITCH)) return true;
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3_42()
 {
    if (jj_scan_token(DECIMAL)) return true;
    return false;
  }

  private boolean jj_3R_77()
 {
    if (jj_scan_token(FALLBACK)) return true;
    return false;
  }

  private boolean jj_3_41()
 {
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  private boolean jj_3R_23()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_41()) {
    jj_scanpos = xsp;
    if (jj_3_42()) return true;
    }
    return false;
  }

  private boolean jj_3_86()
 {
    if (jj_scan_token(USING)) return true;
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3_85()
 {
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3_165()
 {
    if (jj_scan_token(DIRECTIVE_END)) return true;
    if (jj_3R_44()) return true;
    if (jj_scan_token(END_TRANSFORM)) return true;
    return false;
  }

  private boolean jj_3_164()
 {
    if (jj_scan_token(EMPTY_DIRECTIVE_END)) return true;
    return false;
  }

  private boolean jj_3R_27()
 {
    if (jj_scan_token(OPEN_BRACKET)) return true;
    if (jj_3R_47()) return true;
    if (jj_scan_token(CLOSE_BRACKET)) return true;
    return false;
  }

  private boolean jj_3_88()
 {
    if (jj_scan_token(RECURSE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_85()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_86()) jj_scanpos = xsp;
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3_163()
 {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(EQUALS)) return true;
    return false;
  }

  private boolean jj_3_87()
 {
    if (jj_scan_token(SIMPLE_RECURSE)) return true;
    return false;
  }

  private boolean jj_3_162()
 {
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_76()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_87()) {
    jj_scanpos = xsp;
    if (jj_3_88()) return true;
    }
    return false;
  }

  private boolean jj_3_40()
 {
    if (jj_scan_token(OR)) return true;
    return false;
  }

  private boolean jj_3R_64()
 {
    if (jj_scan_token(TRANSFORM)) return true;
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3R_96()
 {
    if (jj_scan_token(OR)) return true;
    if (jj_3R_95()) return true;
    return false;
  }

  private boolean jj_3_84()
 {
    if (jj_scan_token(USING)) return true;
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3R_86()
 {
    if (jj_3R_95()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_96()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_63()
 {
    if (jj_scan_token(NOPARSE)) return true;
    if (jj_3R_89()) return true;
    return false;
  }

  private boolean jj_3R_75()
 {
    if (jj_scan_token(VISIT)) return true;
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3_39()
 {
    if (jj_scan_token(AND)) return true;
    return false;
  }

  private boolean jj_3_161()
 {
    if (jj_scan_token(TERSE_COMMENT)) return true;
    return false;
  }

  private boolean jj_3_160()
 {
    if (jj_scan_token(COMMENT)) return true;
    return false;
  }

  private boolean jj_3R_99()
 {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_98()) return true;
    return false;
  }

  private boolean jj_3R_62()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_160()) {
    jj_scanpos = xsp;
    if (jj_3_161()) return true;
    }
    if (jj_3R_89()) return true;
    return false;
  }

  private boolean jj_3R_95()
 {
    if (jj_3R_98()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_99()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_158()
 {
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  private boolean jj_3_157()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_158()) jj_scanpos = xsp;
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3_36()
 {
    if (jj_3R_34()) return true;
    return false;
  }

  private boolean jj_3R_60()
 {
    if (jj_scan_token(SEP)) return true;
    if (jj_3R_44()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(36)) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_159()
 {
    if (jj_3R_42()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_157()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_47()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_159()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_35()
 {
    if (jj_3R_34()) return true;
    return false;
  }

  private boolean jj_3_35()
 {
    if (jj_scan_token(DOT_DOT_ASTERISK)) return true;
    return false;
  }

  private boolean jj_3_34()
 {
    if (jj_scan_token(DOT_DOT_LESS)) return true;
    return false;
  }

  private boolean jj_3_38()
 {
    if (jj_scan_token(DOT_DOT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_35()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_156()
 {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(EQUALS)) return true;
    return false;
  }

  private boolean jj_3_37()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_34()) {
    jj_scanpos = xsp;
    if (jj_3_35()) return true;
    }
    if (jj_3R_34()) return true;
    return false;
  }

  private boolean jj_3R_105()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_37()) {
    jj_scanpos = xsp;
    if (jj_3_38()) return true;
    }
    return false;
  }

  private boolean jj_3_153()
 {
    if (jj_scan_token(OPEN_PAREN)) return true;
    return false;
  }

  private boolean jj_3R_103()
 {
    if (jj_3R_34()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_105()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_59()
 {
    if (jj_scan_token(ITEMS)) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3_154()
 {
    if (jj_scan_token(CLOSE_PAREN)) return true;
    return false;
  }

  private boolean jj_3_155()
 {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(EQUALS)) return true;
    return false;
  }

  private boolean jj_3_32()
 {
    if (jj_scan_token(LESS_THAN)) return true;
    return false;
  }

  private boolean jj_3_31()
 {
    if (jj_scan_token(LESS_THAN_EQUALS)) return true;
    return false;
  }

  private boolean jj_3_30()
 {
    if (jj_scan_token(ESCAPED_GT)) return true;
    return false;
  }

  private boolean jj_3_33()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(142)) {
    jj_scanpos = xsp;
    if (jj_scan_token(110)) {
    jj_scanpos = xsp;
    if (jj_scan_token(141)) {
    jj_scanpos = xsp;
    if (jj_scan_token(109)) {
    jj_scanpos = xsp;
    if (jj_scan_token(108)) {
    jj_scanpos = xsp;
    if (jj_scan_token(108)) {
    jj_scanpos = xsp;
    if (jj_scan_token(107)) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_29()
 {
    if (jj_scan_token(NATURAL_GT)) return true;
    return false;
  }

  private boolean jj_3R_61()
 {
    if (jj_scan_token(CALL)) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3_28()
 {
    if (jj_scan_token(ESCAPED_GTE)) return true;
    return false;
  }

  private boolean jj_3_27()
 {
    if (jj_scan_token(NATURAL_GTE)) return true;
    return false;
  }

  private boolean jj_3R_104()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_27()) {
    jj_scanpos = xsp;
    if (jj_3_28()) {
    jj_scanpos = xsp;
    if (jj_3_29()) {
    jj_scanpos = xsp;
    if (jj_3_30()) {
    jj_scanpos = xsp;
    if (jj_3_31()) {
    jj_scanpos = xsp;
    if (jj_3_32()) return true;
    }
    }
    }
    }
    }
    if (jj_3R_103()) return true;
    return false;
  }

  private boolean jj_3R_52()
 {
    if (jj_scan_token(FOREACH)) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3R_101()
 {
    if (jj_3R_103()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_104()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_45()
 {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3_26()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(99)) {
    jj_scanpos = xsp;
    if (jj_scan_token(97)) {
    jj_scanpos = xsp;
    if (jj_scan_token(98)) return true;
    }
    }
    return false;
  }

  private boolean jj_3_25()
 {
    if (jj_scan_token(DOUBLE_EQUALS)) return true;
    return false;
  }

  private boolean jj_3_24()
 {
    if (jj_scan_token(EQUALS)) return true;
    return false;
  }

  private boolean jj_3_23()
 {
    if (jj_scan_token(NOT_EQUALS)) return true;
    return false;
  }

  private boolean jj_3R_102()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_23()) {
    jj_scanpos = xsp;
    if (jj_3_24()) {
    jj_scanpos = xsp;
    if (jj_3_25()) return true;
    }
    }
    if (jj_3R_101()) return true;
    return false;
  }

  private boolean jj_3R_98()
 {
    if (jj_3R_101()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_102()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_83()
 {
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3_148()
 {
    if (jj_scan_token(TERMINATING_WHITESPACE)) return true;
    return false;
  }

  private boolean jj_3_22()
 {
    if (jj_scan_token(PERCENT)) return true;
    return false;
  }

  private boolean jj_3_147()
 {
    if (jj_scan_token(TERMINATING_WHITESPACE)) return true;
    return false;
  }

  private boolean jj_3_146()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_147()) jj_scanpos = xsp;
    if (jj_scan_token(COMMA)) return true;
    xsp = jj_scanpos;
    if (jj_3_148()) jj_scanpos = xsp;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3_152()
 {
    if (jj_scan_token(DIRECTIVE_END)) return true;
    if (jj_3R_44()) return true;
    if (jj_scan_token(UNIFIED_CALL_END)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public FMParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[4];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
      jj_la1_init_4();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0xffff7d40,0xffff7d40,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x10,0xfdfe0001,0xfdfe0001,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x70000000,0x0,0x1f0a,0x1f0a,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_4() {
      jj_la1_4 = new int[] {0x0,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[225];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public FMParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public FMParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new FMParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public FMParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new FMParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public FMParser(FMParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(FMParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[149];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 4; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((jj_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 149; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 225; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
            case 37: jj_3_38(); break;
            case 38: jj_3_39(); break;
            case 39: jj_3_40(); break;
            case 40: jj_3_41(); break;
            case 41: jj_3_42(); break;
            case 42: jj_3_43(); break;
            case 43: jj_3_44(); break;
            case 44: jj_3_45(); break;
            case 45: jj_3_46(); break;
            case 46: jj_3_47(); break;
            case 47: jj_3_48(); break;
            case 48: jj_3_49(); break;
            case 49: jj_3_50(); break;
            case 50: jj_3_51(); break;
            case 51: jj_3_52(); break;
            case 52: jj_3_53(); break;
            case 53: jj_3_54(); break;
            case 54: jj_3_55(); break;
            case 55: jj_3_56(); break;
            case 56: jj_3_57(); break;
            case 57: jj_3_58(); break;
            case 58: jj_3_59(); break;
            case 59: jj_3_60(); break;
            case 60: jj_3_61(); break;
            case 61: jj_3_62(); break;
            case 62: jj_3_63(); break;
            case 63: jj_3_64(); break;
            case 64: jj_3_65(); break;
            case 65: jj_3_66(); break;
            case 66: jj_3_67(); break;
            case 67: jj_3_68(); break;
            case 68: jj_3_69(); break;
            case 69: jj_3_70(); break;
            case 70: jj_3_71(); break;
            case 71: jj_3_72(); break;
            case 72: jj_3_73(); break;
            case 73: jj_3_74(); break;
            case 74: jj_3_75(); break;
            case 75: jj_3_76(); break;
            case 76: jj_3_77(); break;
            case 77: jj_3_78(); break;
            case 78: jj_3_79(); break;
            case 79: jj_3_80(); break;
            case 80: jj_3_81(); break;
            case 81: jj_3_82(); break;
            case 82: jj_3_83(); break;
            case 83: jj_3_84(); break;
            case 84: jj_3_85(); break;
            case 85: jj_3_86(); break;
            case 86: jj_3_87(); break;
            case 87: jj_3_88(); break;
            case 88: jj_3_89(); break;
            case 89: jj_3_90(); break;
            case 90: jj_3_91(); break;
            case 91: jj_3_92(); break;
            case 92: jj_3_93(); break;
            case 93: jj_3_94(); break;
            case 94: jj_3_95(); break;
            case 95: jj_3_96(); break;
            case 96: jj_3_97(); break;
            case 97: jj_3_98(); break;
            case 98: jj_3_99(); break;
            case 99: jj_3_100(); break;
            case 100: jj_3_101(); break;
            case 101: jj_3_102(); break;
            case 102: jj_3_103(); break;
            case 103: jj_3_104(); break;
            case 104: jj_3_105(); break;
            case 105: jj_3_106(); break;
            case 106: jj_3_107(); break;
            case 107: jj_3_108(); break;
            case 108: jj_3_109(); break;
            case 109: jj_3_110(); break;
            case 110: jj_3_111(); break;
            case 111: jj_3_112(); break;
            case 112: jj_3_113(); break;
            case 113: jj_3_114(); break;
            case 114: jj_3_115(); break;
            case 115: jj_3_116(); break;
            case 116: jj_3_117(); break;
            case 117: jj_3_118(); break;
            case 118: jj_3_119(); break;
            case 119: jj_3_120(); break;
            case 120: jj_3_121(); break;
            case 121: jj_3_122(); break;
            case 122: jj_3_123(); break;
            case 123: jj_3_124(); break;
            case 124: jj_3_125(); break;
            case 125: jj_3_126(); break;
            case 126: jj_3_127(); break;
            case 127: jj_3_128(); break;
            case 128: jj_3_129(); break;
            case 129: jj_3_130(); break;
            case 130: jj_3_131(); break;
            case 131: jj_3_132(); break;
            case 132: jj_3_133(); break;
            case 133: jj_3_134(); break;
            case 134: jj_3_135(); break;
            case 135: jj_3_136(); break;
            case 136: jj_3_137(); break;
            case 137: jj_3_138(); break;
            case 138: jj_3_139(); break;
            case 139: jj_3_140(); break;
            case 140: jj_3_141(); break;
            case 141: jj_3_142(); break;
            case 142: jj_3_143(); break;
            case 143: jj_3_144(); break;
            case 144: jj_3_145(); break;
            case 145: jj_3_146(); break;
            case 146: jj_3_147(); break;
            case 147: jj_3_148(); break;
            case 148: jj_3_149(); break;
            case 149: jj_3_150(); break;
            case 150: jj_3_151(); break;
            case 151: jj_3_152(); break;
            case 152: jj_3_153(); break;
            case 153: jj_3_154(); break;
            case 154: jj_3_155(); break;
            case 155: jj_3_156(); break;
            case 156: jj_3_157(); break;
            case 157: jj_3_158(); break;
            case 158: jj_3_159(); break;
            case 159: jj_3_160(); break;
            case 160: jj_3_161(); break;
            case 161: jj_3_162(); break;
            case 162: jj_3_163(); break;
            case 163: jj_3_164(); break;
            case 164: jj_3_165(); break;
            case 165: jj_3_166(); break;
            case 166: jj_3_167(); break;
            case 167: jj_3_168(); break;
            case 168: jj_3_169(); break;
            case 169: jj_3_170(); break;
            case 170: jj_3_171(); break;
            case 171: jj_3_172(); break;
            case 172: jj_3_173(); break;
            case 173: jj_3_174(); break;
            case 174: jj_3_175(); break;
            case 175: jj_3_176(); break;
            case 176: jj_3_177(); break;
            case 177: jj_3_178(); break;
            case 178: jj_3_179(); break;
            case 179: jj_3_180(); break;
            case 180: jj_3_181(); break;
            case 181: jj_3_182(); break;
            case 182: jj_3_183(); break;
            case 183: jj_3_184(); break;
            case 184: jj_3_185(); break;
            case 185: jj_3_186(); break;
            case 186: jj_3_187(); break;
            case 187: jj_3_188(); break;
            case 188: jj_3_189(); break;
            case 189: jj_3_190(); break;
            case 190: jj_3_191(); break;
            case 191: jj_3_192(); break;
            case 192: jj_3_193(); break;
            case 193: jj_3_194(); break;
            case 194: jj_3_195(); break;
            case 195: jj_3_196(); break;
            case 196: jj_3_197(); break;
            case 197: jj_3_198(); break;
            case 198: jj_3_199(); break;
            case 199: jj_3_200(); break;
            case 200: jj_3_201(); break;
            case 201: jj_3_202(); break;
            case 202: jj_3_203(); break;
            case 203: jj_3_204(); break;
            case 204: jj_3_205(); break;
            case 205: jj_3_206(); break;
            case 206: jj_3_207(); break;
            case 207: jj_3_208(); break;
            case 208: jj_3_209(); break;
            case 209: jj_3_210(); break;
            case 210: jj_3_211(); break;
            case 211: jj_3_212(); break;
            case 212: jj_3_213(); break;
            case 213: jj_3_214(); break;
            case 214: jj_3_215(); break;
            case 215: jj_3_216(); break;
            case 216: jj_3_217(); break;
            case 217: jj_3_218(); break;
            case 218: jj_3_219(); break;
            case 219: jj_3_220(); break;
            case 220: jj_3_221(); break;
            case 221: jj_3_222(); break;
            case 222: jj_3_223(); break;
            case 223: jj_3_224(); break;
            case 224: jj_3_225(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
