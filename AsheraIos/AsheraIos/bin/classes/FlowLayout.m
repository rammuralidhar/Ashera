//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroid/src/org/apmem/tools/layouts/FlowLayout.java
//

#include "FlowLayout.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "LayoutConfiguration.h"
#include "LineDefinition.h"
#include "R.h"
#include "android/content/Context.h"
#include "android/content/res/TypedArray.h"
#include "android/graphics/Canvas.h"
#include "android/graphics/Paint.h"
#include "android/graphics/Rect.h"
#include "android/util/AttributeSet.h"
#include "android/view/Gravity.h"
#include "android/view/View.h"
#include "android/view/ViewDebug.h"
#include "android/view/ViewGroup.h"
#include "android/widget/LinearLayout.h"
#include "java/lang/Math.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"

@interface OrgApmemToolsLayoutsFlowLayout () {
 @public
  OrgApmemToolsLayoutsLayoutConfiguration *config_;
  jboolean applyWrap_;
}

- (jint)findSizeWithInt:(jint)modeSize
                withInt:(jint)controlMaxSize
                withInt:(jint)contentSize;

- (void)calculateLinesAndChildPositionWithJavaUtilList:(id<JavaUtilList>)lines;

- (void)applyPositionsToViewsWithOrgApmemToolsLayoutsLineDefinition:(OrgApmemToolsLayoutsLineDefinition *)line;

- (void)applyGravityToLinesWithJavaUtilList:(id<JavaUtilList>)lines
                                    withInt:(jint)realControlLength
                                    withInt:(jint)realControlThickness;

- (void)applyGravityToLineWithOrgApmemToolsLayoutsLineDefinition:(OrgApmemToolsLayoutsLineDefinition *)line;

- (jint)getGravityWithOrgApmemToolsLayoutsFlowLayout_LayoutParams:(OrgApmemToolsLayoutsFlowLayout_LayoutParams *)lp;

- (jfloat)getWeightWithOrgApmemToolsLayoutsFlowLayout_LayoutParams:(OrgApmemToolsLayoutsFlowLayout_LayoutParams *)lp;

- (void)drawDebugInfoWithAndroidGraphicsCanvas:(AndroidGraphicsCanvas *)canvas
                           withAndroidViewView:(AndroidViewView *)child;

- (AndroidGraphicsPaint *)createPaintWithInt:(jint)color;

@end

J2OBJC_FIELD_SETTER(OrgApmemToolsLayoutsFlowLayout, config_, OrgApmemToolsLayoutsLayoutConfiguration *)

__attribute__((unused)) static jint OrgApmemToolsLayoutsFlowLayout_findSizeWithInt_withInt_withInt_(OrgApmemToolsLayoutsFlowLayout *self, jint modeSize, jint controlMaxSize, jint contentSize);

__attribute__((unused)) static void OrgApmemToolsLayoutsFlowLayout_calculateLinesAndChildPositionWithJavaUtilList_(OrgApmemToolsLayoutsFlowLayout *self, id<JavaUtilList> lines);

__attribute__((unused)) static void OrgApmemToolsLayoutsFlowLayout_applyPositionsToViewsWithOrgApmemToolsLayoutsLineDefinition_(OrgApmemToolsLayoutsFlowLayout *self, OrgApmemToolsLayoutsLineDefinition *line);

__attribute__((unused)) static void OrgApmemToolsLayoutsFlowLayout_applyGravityToLinesWithJavaUtilList_withInt_withInt_(OrgApmemToolsLayoutsFlowLayout *self, id<JavaUtilList> lines, jint realControlLength, jint realControlThickness);

__attribute__((unused)) static void OrgApmemToolsLayoutsFlowLayout_applyGravityToLineWithOrgApmemToolsLayoutsLineDefinition_(OrgApmemToolsLayoutsFlowLayout *self, OrgApmemToolsLayoutsLineDefinition *line);

__attribute__((unused)) static jint OrgApmemToolsLayoutsFlowLayout_getGravityWithOrgApmemToolsLayoutsFlowLayout_LayoutParams_(OrgApmemToolsLayoutsFlowLayout *self, OrgApmemToolsLayoutsFlowLayout_LayoutParams *lp);

__attribute__((unused)) static jfloat OrgApmemToolsLayoutsFlowLayout_getWeightWithOrgApmemToolsLayoutsFlowLayout_LayoutParams_(OrgApmemToolsLayoutsFlowLayout *self, OrgApmemToolsLayoutsFlowLayout_LayoutParams *lp);

__attribute__((unused)) static void OrgApmemToolsLayoutsFlowLayout_drawDebugInfoWithAndroidGraphicsCanvas_withAndroidViewView_(OrgApmemToolsLayoutsFlowLayout *self, AndroidGraphicsCanvas *canvas, AndroidViewView *child);

__attribute__((unused)) static AndroidGraphicsPaint *OrgApmemToolsLayoutsFlowLayout_createPaintWithInt_(OrgApmemToolsLayoutsFlowLayout *self, jint color);

@interface OrgApmemToolsLayoutsFlowLayout_LayoutParams () {
 @public
  jint spacingLength_;
  jint spacingThickness_;
  jint inlineStartLength_;
  jint length_;
  jint thickness_;
  jint inlineStartThickness_;
  jint x_;
  jint y_;
}

- (void)readStyleParametersWithAndroidContentContext:(AndroidContentContext *)context
                         withAndroidUtilAttributeSet:(id<AndroidUtilAttributeSet>)attributeSet;

@end

__attribute__((unused)) static void OrgApmemToolsLayoutsFlowLayout_LayoutParams_readStyleParametersWithAndroidContentContext_withAndroidUtilAttributeSet_(OrgApmemToolsLayoutsFlowLayout_LayoutParams *self, AndroidContentContext *context, id<AndroidUtilAttributeSet> attributeSet);

#line 0 "/Users/ramm/git/Ashera/AsheraAndroid/src/org/apmem/tools/layouts/FlowLayout.java"


#line 20
@implementation OrgApmemToolsLayoutsFlowLayout


#line 30
- (instancetype)initWithAndroidContentContext:(AndroidContentContext *)context
                                  withBoolean:(jboolean)applyWrap {
  OrgApmemToolsLayoutsFlowLayout_initWithAndroidContentContext_withBoolean_(self, context, applyWrap);
  return self;
}

- (instancetype)initWithAndroidContentContext:(AndroidContentContext *)context
                  withAndroidUtilAttributeSet:(id<AndroidUtilAttributeSet>)attributeSet {
  OrgApmemToolsLayoutsFlowLayout_initWithAndroidContentContext_withAndroidUtilAttributeSet_(self, context, attributeSet);
  return self;
}


#line 43
- (void)onMeasureWithInt:(jint)widthMeasureSpec
                 withInt:(jint)heightMeasureSpec {
  if (!applyWrap_) {
    [super onMeasureWithInt:widthMeasureSpec withInt:heightMeasureSpec];
    return;
  }
  
#line 49
  jint sizeWidth = AndroidViewView_MeasureSpec_getSizeWithInt_(widthMeasureSpec) - [self getPaddingRight] - [self getPaddingLeft];
  jint sizeHeight = AndroidViewView_MeasureSpec_getSizeWithInt_(heightMeasureSpec) - [self getPaddingTop] - [self getPaddingBottom];
  jint modeWidth = AndroidViewView_MeasureSpec_getModeWithInt_(widthMeasureSpec);
  jint modeHeight = AndroidViewView_MeasureSpec_getModeWithInt_(heightMeasureSpec);
  jint controlMaxLength = [((OrgApmemToolsLayoutsLayoutConfiguration *) nil_chk(self->config_)) getOrientation] == OrgApmemToolsLayoutsFlowLayout_HORIZONTAL ? sizeWidth : sizeHeight;
  jint controlMaxThickness = [self->config_ getOrientation] == OrgApmemToolsLayoutsFlowLayout_HORIZONTAL ? sizeHeight : sizeWidth;
  jint modeLength = [self->config_ getOrientation] == OrgApmemToolsLayoutsFlowLayout_HORIZONTAL ? modeWidth : modeHeight;
  jint modeThickness = [self->config_ getOrientation] == OrgApmemToolsLayoutsFlowLayout_HORIZONTAL ? modeHeight : modeWidth;
  
#line 58
  [((id<JavaUtilList>) nil_chk(lines_)) clear];
  OrgApmemToolsLayoutsLineDefinition *currentLine = new_OrgApmemToolsLayoutsLineDefinition_initWithInt_withOrgApmemToolsLayoutsLayoutConfiguration_(controlMaxLength, config_);
  [lines_ addWithId:currentLine];
  
#line 62
  jint count = [self getChildCount];
  for (jint i = 0; i < count; i++) {
    AndroidViewView *child = [self getChildAtWithInt:i];
    if ([((AndroidViewView *) nil_chk(child)) getVisibility] == AndroidViewView_GONE) {
      continue;
    }
    
#line 69
    OrgApmemToolsLayoutsFlowLayout_LayoutParams *lp = (OrgApmemToolsLayoutsFlowLayout_LayoutParams *) check_class_cast([child getLayoutParams], [OrgApmemToolsLayoutsFlowLayout_LayoutParams class]);
    
#line 71
    [child measureWithInt:AndroidViewViewGroup_getChildMeasureSpecWithInt_withInt_withInt_(
#line 72
    widthMeasureSpec, [self getPaddingLeft] + [self getPaddingRight], ((OrgApmemToolsLayoutsFlowLayout_LayoutParams *) nil_chk(lp))->width_) withInt:AndroidViewViewGroup_getChildMeasureSpecWithInt_withInt_withInt_(
#line 73
    heightMeasureSpec, [self getPaddingTop] + [self getPaddingBottom], lp->height_)];
    
#line 76
    [lp clearCalculatedFieldsWithInt:[self->config_ getOrientation]];
    if ([self->config_ getOrientation] == OrgApmemToolsLayoutsFlowLayout_HORIZONTAL) {
      [lp setLengthWithInt:[child getMeasuredWidth]];
      [lp setThicknessWithInt:[child getMeasuredHeight]];
    }
    else {
      
#line 81
      [lp setLengthWithInt:[child getMeasuredHeight]];
      [lp setThicknessWithInt:[child getMeasuredWidth]];
    }
    
#line 85
    jboolean newLine = lp->newLine_ || (modeLength != AndroidViewView_MeasureSpec_UNSPECIFIED && ![currentLine canFitWithAndroidViewView:child]);
    if (newLine) {
      currentLine = new_OrgApmemToolsLayoutsLineDefinition_initWithInt_withOrgApmemToolsLayoutsLayoutConfiguration_(controlMaxLength, config_);
      if ([self->config_ getOrientation] == OrgApmemToolsLayoutsFlowLayout_VERTICAL && [self->config_ getLayoutDirection] == OrgApmemToolsLayoutsFlowLayout_LAYOUT_DIRECTION_RTL) {
        [lines_ addWithInt:0 withId:currentLine];
      }
      else {
        
#line 91
        [lines_ addWithId:currentLine];
      }
    }
    
#line 95
    if ([self->config_ getOrientation] == OrgApmemToolsLayoutsFlowLayout_HORIZONTAL && [self->config_ getLayoutDirection] == OrgApmemToolsLayoutsFlowLayout_LAYOUT_DIRECTION_RTL) {
      [currentLine addViewWithInt:0 withAndroidViewView:child];
    }
    else {
      
#line 98
      [currentLine addViewWithAndroidViewView:child];
    }
  }
  
#line 102
  OrgApmemToolsLayoutsFlowLayout_calculateLinesAndChildPositionWithJavaUtilList_(self, lines_);
  
#line 104
  jint contentLength = 0;
  jint linesCount = [lines_ size];
  for (jint i = 0; i < linesCount; i++) {
    OrgApmemToolsLayoutsLineDefinition *l = [lines_ getWithInt:i];
    contentLength = JavaLangMath_maxWithInt_withInt_(contentLength, [((OrgApmemToolsLayoutsLineDefinition *) nil_chk(l)) getLineLength]);
  }
  jint contentThickness = [currentLine getLineStartThickness] + [currentLine getLineThickness];
  
#line 112
  jint realControlLength = OrgApmemToolsLayoutsFlowLayout_findSizeWithInt_withInt_withInt_(self, modeLength, controlMaxLength, contentLength);
  jint realControlThickness = OrgApmemToolsLayoutsFlowLayout_findSizeWithInt_withInt_withInt_(self, modeHeight, controlMaxThickness, contentThickness);
  
#line 115
  OrgApmemToolsLayoutsFlowLayout_applyGravityToLinesWithJavaUtilList_withInt_withInt_(self, lines_, realControlLength, realControlThickness);
  
#line 117
  for (jint i = 0; i < linesCount; i++) {
    OrgApmemToolsLayoutsLineDefinition *line = [lines_ getWithInt:i];
    OrgApmemToolsLayoutsFlowLayout_applyGravityToLineWithOrgApmemToolsLayoutsLineDefinition_(self, line);
    OrgApmemToolsLayoutsFlowLayout_applyPositionsToViewsWithOrgApmemToolsLayoutsLineDefinition_(self, line);
  }
  
#line 124
  jint totalControlWidth = [self getPaddingLeft] + [self getPaddingRight];
  jint totalControlHeight = [self getPaddingBottom] + [self getPaddingTop];
  if ([self->config_ getOrientation] == OrgApmemToolsLayoutsFlowLayout_HORIZONTAL) {
    totalControlWidth += contentLength;
    totalControlHeight += contentThickness;
  }
  else {
    
#line 130
    totalControlWidth += contentThickness;
    totalControlHeight += contentLength;
  }
  [self setMeasuredDimensionWithInt:AndroidViewView_resolveSizeWithInt_withInt_(totalControlWidth, widthMeasureSpec) withInt:AndroidViewView_resolveSizeWithInt_withInt_(totalControlHeight, heightMeasureSpec)];
}


#line 136
- (jint)findSizeWithInt:(jint)modeSize
                withInt:(jint)controlMaxSize
                withInt:(jint)contentSize {
  return OrgApmemToolsLayoutsFlowLayout_findSizeWithInt_withInt_withInt_(self, modeSize, controlMaxSize, contentSize);
}


#line 155
- (void)calculateLinesAndChildPositionWithJavaUtilList:(id<JavaUtilList>)lines {
  OrgApmemToolsLayoutsFlowLayout_calculateLinesAndChildPositionWithJavaUtilList_(self, lines);
}


#line 174
- (void)applyPositionsToViewsWithOrgApmemToolsLayoutsLineDefinition:(OrgApmemToolsLayoutsLineDefinition *)line {
  OrgApmemToolsLayoutsFlowLayout_applyPositionsToViewsWithOrgApmemToolsLayoutsLineDefinition_(self, line);
}


#line 200
- (void)applyGravityToLinesWithJavaUtilList:(id<JavaUtilList>)lines
                                    withInt:(jint)realControlLength
                                    withInt:(jint)realControlThickness {
  OrgApmemToolsLayoutsFlowLayout_applyGravityToLinesWithJavaUtilList_withInt_withInt_(self, lines, realControlLength, realControlThickness);
}


#line 236
- (void)applyGravityToLineWithOrgApmemToolsLayoutsLineDefinition:(OrgApmemToolsLayoutsLineDefinition *)line {
  OrgApmemToolsLayoutsFlowLayout_applyGravityToLineWithOrgApmemToolsLayoutsLineDefinition_(self, line);
}


#line 282
- (jint)getGravityWithOrgApmemToolsLayoutsFlowLayout_LayoutParams:(OrgApmemToolsLayoutsFlowLayout_LayoutParams *)lp {
  return OrgApmemToolsLayoutsFlowLayout_getGravityWithOrgApmemToolsLayoutsFlowLayout_LayoutParams_(self, lp);
}

- (jfloat)getWeightWithOrgApmemToolsLayoutsFlowLayout_LayoutParams:(OrgApmemToolsLayoutsFlowLayout_LayoutParams *)lp {
  return OrgApmemToolsLayoutsFlowLayout_getWeightWithOrgApmemToolsLayoutsFlowLayout_LayoutParams_(self, lp);
}


#line 291
- (void)onLayoutWithBoolean:(jboolean)changed
                    withInt:(jint)l
                    withInt:(jint)t
                    withInt:(jint)r
                    withInt:(jint)b {
  if (!applyWrap_) {
    [super onLayoutWithBoolean:changed withInt:l withInt:t withInt:r withInt:b];
    return;
  }
  jint count = [self getChildCount];
  for (jint i = 0; i < count; i++) {
    AndroidViewView *child = [self getChildAtWithInt:i];
    OrgApmemToolsLayoutsFlowLayout_LayoutParams *lp = (OrgApmemToolsLayoutsFlowLayout_LayoutParams *) check_class_cast([((AndroidViewView *) nil_chk(child)) getLayoutParams], [OrgApmemToolsLayoutsFlowLayout_LayoutParams class]);
    [child layoutWithInt:((OrgApmemToolsLayoutsFlowLayout_LayoutParams *) nil_chk(lp))->x_ + lp->leftMargin_ withInt:lp->y_ + lp->topMargin_ withInt:
#line 301
    lp->x_ + lp->leftMargin_ + [child getMeasuredWidth] withInt:lp->y_ + lp->topMargin_ + [child getMeasuredHeight]];
  }
}


#line 306
- (jboolean)drawChildWithAndroidGraphicsCanvas:(AndroidGraphicsCanvas *)canvas
                           withAndroidViewView:(AndroidViewView *)child
                                      withLong:(jlong)drawingTime {
  jboolean more = [super drawChildWithAndroidGraphicsCanvas:canvas withAndroidViewView:child withLong:drawingTime];
  OrgApmemToolsLayoutsFlowLayout_drawDebugInfoWithAndroidGraphicsCanvas_withAndroidViewView_(self, canvas, child);
  return more;
}


#line 313
- (jboolean)checkLayoutParamsWithAndroidViewViewGroup_LayoutParams:(AndroidViewViewGroup_LayoutParams *)p {
  return [p isKindOfClass:[OrgApmemToolsLayoutsFlowLayout_LayoutParams class]];
}


#line 318
- (OrgApmemToolsLayoutsFlowLayout_LayoutParams *)generateDefaultLayoutParams {
  return new_OrgApmemToolsLayoutsFlowLayout_LayoutParams_initWithInt_withInt_(AndroidViewViewGroup_LayoutParams_WRAP_CONTENT, AndroidViewViewGroup_LayoutParams_WRAP_CONTENT);
}


#line 323
- (OrgApmemToolsLayoutsFlowLayout_LayoutParams *)generateLayoutParamsWithAndroidUtilAttributeSet:(id<AndroidUtilAttributeSet>)attributeSet {
  return new_OrgApmemToolsLayoutsFlowLayout_LayoutParams_initWithAndroidContentContext_withAndroidUtilAttributeSet_([self getContext], attributeSet);
}


#line 328
- (OrgApmemToolsLayoutsFlowLayout_LayoutParams *)generateLayoutParamsWithAndroidViewViewGroup_LayoutParams:(AndroidViewViewGroup_LayoutParams *)p {
  return new_OrgApmemToolsLayoutsFlowLayout_LayoutParams_initWithAndroidViewViewGroup_LayoutParams_(p);
}

- (void)drawDebugInfoWithAndroidGraphicsCanvas:(AndroidGraphicsCanvas *)canvas
                           withAndroidViewView:(AndroidViewView *)child {
  OrgApmemToolsLayoutsFlowLayout_drawDebugInfoWithAndroidGraphicsCanvas_withAndroidViewView_(self, canvas, child);
}


#line 387
- (AndroidGraphicsPaint *)createPaintWithInt:(jint)color {
  return OrgApmemToolsLayoutsFlowLayout_createPaintWithInt_(self, color);
}


#line 395
- (jint)getOrientation {
  return [((OrgApmemToolsLayoutsLayoutConfiguration *) nil_chk(self->config_)) getOrientation];
}

- (void)setOrientationWithInt:(jint)orientation {
  [super setOrientationWithInt:orientation];
  [((OrgApmemToolsLayoutsLayoutConfiguration *) nil_chk(self->config_)) setOrientationWithInt:orientation];
  [self requestLayout];
}

- (jboolean)isDebugDraw {
  return [((OrgApmemToolsLayoutsLayoutConfiguration *) nil_chk(self->config_)) isDebugDraw];
}

- (void)setDebugDrawWithBoolean:(jboolean)debugDraw {
  [((OrgApmemToolsLayoutsLayoutConfiguration *) nil_chk(self->config_)) setDebugDrawWithBoolean:debugDraw];
  [self invalidate];
}

- (jfloat)getWeightDefault {
  return [((OrgApmemToolsLayoutsLayoutConfiguration *) nil_chk(self->config_)) getWeightDefault];
}

- (void)setWeightDefaultWithFloat:(jfloat)weightDefault {
  [((OrgApmemToolsLayoutsLayoutConfiguration *) nil_chk(self->config_)) setWeightDefaultWithFloat:weightDefault];
  [self requestLayout];
}

- (jint)getGravity {
  return [((OrgApmemToolsLayoutsLayoutConfiguration *) nil_chk(self->config_)) getGravity];
}

- (void)setGravityWithInt:(jint)gravity {
  [((OrgApmemToolsLayoutsLayoutConfiguration *) nil_chk(self->config_)) setGravityWithInt:gravity];
  [self requestLayout];
}

- (jint)getLayoutDirection {
  if (self->config_ == nil) {
    
#line 435
    return OrgApmemToolsLayoutsFlowLayout_LAYOUT_DIRECTION_LTR;
  }
  
#line 438
  return [((OrgApmemToolsLayoutsLayoutConfiguration *) nil_chk(self->config_)) getLayoutDirection];
}


#line 441
- (void)setLayoutDirectionWithInt:(jint)layoutDirection {
  [((OrgApmemToolsLayoutsLayoutConfiguration *) nil_chk(self->config_)) setLayoutDirectionWithInt:layoutDirection];
  [self requestLayout];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithAndroidContentContext:withBoolean:", "FlowLayout", NULL, 0x1, NULL, NULL },
    { "initWithAndroidContentContext:withAndroidUtilAttributeSet:", "FlowLayout", NULL, 0x1, NULL, NULL },
    { "onMeasureWithInt:withInt:", "onMeasure", "V", 0x4, NULL, NULL },
    { "findSizeWithInt:withInt:withInt:", "findSize", "I", 0x2, NULL, NULL },
    { "calculateLinesAndChildPositionWithJavaUtilList:", "calculateLinesAndChildPosition", "V", 0x2, NULL, NULL },
    { "applyPositionsToViewsWithOrgApmemToolsLayoutsLineDefinition:", "applyPositionsToViews", "V", 0x2, NULL, NULL },
    { "applyGravityToLinesWithJavaUtilList:withInt:withInt:", "applyGravityToLines", "V", 0x2, NULL, NULL },
    { "applyGravityToLineWithOrgApmemToolsLayoutsLineDefinition:", "applyGravityToLine", "V", 0x2, NULL, NULL },
    { "getGravityWithOrgApmemToolsLayoutsFlowLayout_LayoutParams:", "getGravity", "I", 0x2, NULL, NULL },
    { "getWeightWithOrgApmemToolsLayoutsFlowLayout_LayoutParams:", "getWeight", "F", 0x2, NULL, NULL },
    { "onLayoutWithBoolean:withInt:withInt:withInt:withInt:", "onLayout", "V", 0x4, NULL, NULL },
    { "drawChildWithAndroidGraphicsCanvas:withAndroidViewView:withLong:", "drawChild", "Z", 0x4, NULL, NULL },
    { "checkLayoutParamsWithAndroidViewViewGroup_LayoutParams:", "checkLayoutParams", "Z", 0x4, NULL, NULL },
    { "generateDefaultLayoutParams", NULL, "Lorg.apmem.tools.layouts.FlowLayout$LayoutParams;", 0x4, NULL, NULL },
    { "generateLayoutParamsWithAndroidUtilAttributeSet:", "generateLayoutParams", "Lorg.apmem.tools.layouts.FlowLayout$LayoutParams;", 0x1, NULL, NULL },
    { "generateLayoutParamsWithAndroidViewViewGroup_LayoutParams:", "generateLayoutParams", "Lorg.apmem.tools.layouts.FlowLayout$LayoutParams;", 0x4, NULL, NULL },
    { "drawDebugInfoWithAndroidGraphicsCanvas:withAndroidViewView:", "drawDebugInfo", "V", 0x2, NULL, NULL },
    { "createPaintWithInt:", "createPaint", "Landroid.graphics.Paint;", 0x2, NULL, NULL },
    { "getOrientation", NULL, "I", 0x1, NULL, NULL },
    { "setOrientationWithInt:", "setOrientation", "V", 0x1, NULL, NULL },
    { "isDebugDraw", NULL, "Z", 0x1, NULL, NULL },
    { "setDebugDrawWithBoolean:", "setDebugDraw", "V", 0x1, NULL, NULL },
    { "getWeightDefault", NULL, "F", 0x1, NULL, NULL },
    { "setWeightDefaultWithFloat:", "setWeightDefault", "V", 0x1, NULL, NULL },
    { "getGravity", NULL, "I", 0x1, NULL, NULL },
    { "setGravityWithInt:", "setGravity", "V", 0x1, NULL, NULL },
    { "getLayoutDirection", NULL, "I", 0x1, NULL, NULL },
    { "setLayoutDirectionWithInt:", "setLayoutDirection", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "HORIZONTAL", "HORIZONTAL", 0x19, "I", NULL, NULL, .constantValue.asInt = OrgApmemToolsLayoutsFlowLayout_HORIZONTAL },
    { "VERTICAL", "VERTICAL", 0x19, "I", NULL, NULL, .constantValue.asInt = OrgApmemToolsLayoutsFlowLayout_VERTICAL },
    { "LAYOUT_DIRECTION_LTR", "LAYOUT_DIRECTION_LTR", 0x19, "I", NULL, NULL, .constantValue.asInt = OrgApmemToolsLayoutsFlowLayout_LAYOUT_DIRECTION_LTR },
    { "LAYOUT_DIRECTION_RTL", "LAYOUT_DIRECTION_RTL", 0x19, "I", NULL, NULL, .constantValue.asInt = OrgApmemToolsLayoutsFlowLayout_LAYOUT_DIRECTION_RTL },
    { "config_", NULL, 0x12, "Lorg.apmem.tools.layouts.LayoutConfiguration;", NULL, NULL, .constantValue.asLong = 0 },
    { "lines_", NULL, 0x0, "Ljava.util.List;", NULL, "Ljava/util/List<Lorg/apmem/tools/layouts/LineDefinition;>;", .constantValue.asLong = 0 },
    { "applyWrap_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const char *inner_classes[] = {"Lorg.apmem.tools.layouts.FlowLayout$LayoutParams;"};
  static const J2ObjcClassInfo _OrgApmemToolsLayoutsFlowLayout = { 2, "FlowLayout", "org.apmem.tools.layouts", NULL, 0x1, 28, methods, 7, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_OrgApmemToolsLayoutsFlowLayout;
}

@end


#line 30
void OrgApmemToolsLayoutsFlowLayout_initWithAndroidContentContext_withBoolean_(OrgApmemToolsLayoutsFlowLayout *self, AndroidContentContext *context, jboolean applyWrap) {
  (void) AndroidWidgetLinearLayout_initWithAndroidContentContext_(self, context);
  self->lines_ = new_JavaUtilArrayList_init();
  
#line 32
  self->applyWrap_ = applyWrap;
  self->config_ = new_OrgApmemToolsLayoutsLayoutConfiguration_initWithAndroidContentContext_withAndroidUtilAttributeSet_(context, nil);
}


#line 30
OrgApmemToolsLayoutsFlowLayout *new_OrgApmemToolsLayoutsFlowLayout_initWithAndroidContentContext_withBoolean_(AndroidContentContext *context, jboolean applyWrap) {
  OrgApmemToolsLayoutsFlowLayout *self = [OrgApmemToolsLayoutsFlowLayout alloc];
  OrgApmemToolsLayoutsFlowLayout_initWithAndroidContentContext_withBoolean_(self, context, applyWrap);
  return self;
}

void OrgApmemToolsLayoutsFlowLayout_initWithAndroidContentContext_withAndroidUtilAttributeSet_(OrgApmemToolsLayoutsFlowLayout *self, AndroidContentContext *context, id<AndroidUtilAttributeSet> attributeSet) {
  (void) AndroidWidgetLinearLayout_initWithAndroidContentContext_withAndroidUtilAttributeSet_(self, context, attributeSet);
  self->lines_ = new_JavaUtilArrayList_init();
  
#line 38
  self->config_ = new_OrgApmemToolsLayoutsLayoutConfiguration_initWithAndroidContentContext_withAndroidUtilAttributeSet_(context, attributeSet);
}


#line 36
OrgApmemToolsLayoutsFlowLayout *new_OrgApmemToolsLayoutsFlowLayout_initWithAndroidContentContext_withAndroidUtilAttributeSet_(AndroidContentContext *context, id<AndroidUtilAttributeSet> attributeSet) {
  OrgApmemToolsLayoutsFlowLayout *self = [OrgApmemToolsLayoutsFlowLayout alloc];
  OrgApmemToolsLayoutsFlowLayout_initWithAndroidContentContext_withAndroidUtilAttributeSet_(self, context, attributeSet);
  return self;
}


#line 136
jint OrgApmemToolsLayoutsFlowLayout_findSizeWithInt_withInt_withInt_(OrgApmemToolsLayoutsFlowLayout *self, jint modeSize, jint controlMaxSize, jint contentSize) {
  jint realControlLength;
  switch (modeSize) {
    case AndroidViewView_MeasureSpec_UNSPECIFIED:
    realControlLength = contentSize;
    break;
    case AndroidViewView_MeasureSpec_AT_MOST:
    realControlLength = JavaLangMath_minWithInt_withInt_(contentSize, controlMaxSize);
    break;
    case AndroidViewView_MeasureSpec_EXACTLY:
    realControlLength = controlMaxSize;
    break;
    default:
    realControlLength = contentSize;
    break;
  }
  return realControlLength;
}

void OrgApmemToolsLayoutsFlowLayout_calculateLinesAndChildPositionWithJavaUtilList_(OrgApmemToolsLayoutsFlowLayout *self, id<JavaUtilList> lines) {
  jint prevLinesThickness = 0;
  jint linesCount = [((id<JavaUtilList>) nil_chk(lines)) size];
  for (jint i = 0; i < linesCount; i++) {
    OrgApmemToolsLayoutsLineDefinition *line = [lines getWithInt:i];
    [((OrgApmemToolsLayoutsLineDefinition *) nil_chk(line)) addLineStartThicknessWithInt:prevLinesThickness];
    prevLinesThickness += [line getLineThickness];
    jint prevChildThickness = 0;
    id<JavaUtilList> childViews = [line getViews];
    jint numChildViews = [((id<JavaUtilList>) nil_chk(childViews)) size];
    for (jint j = 0; j < numChildViews; j++) {
      AndroidViewView *child = [childViews getWithInt:j];
      OrgApmemToolsLayoutsFlowLayout_LayoutParams *layoutParams = (OrgApmemToolsLayoutsFlowLayout_LayoutParams *) check_class_cast([((AndroidViewView *) nil_chk(child)) getLayoutParams], [OrgApmemToolsLayoutsFlowLayout_LayoutParams class]);
      [((OrgApmemToolsLayoutsFlowLayout_LayoutParams *) nil_chk(layoutParams)) setInlineStartLengthWithInt:prevChildThickness];
      prevChildThickness += [layoutParams getLength] + [layoutParams getSpacingLength];
    }
  }
}

void OrgApmemToolsLayoutsFlowLayout_applyPositionsToViewsWithOrgApmemToolsLayoutsLineDefinition_(OrgApmemToolsLayoutsFlowLayout *self, OrgApmemToolsLayoutsLineDefinition *line) {
  id<JavaUtilList> childViews = [((OrgApmemToolsLayoutsLineDefinition *) nil_chk(line)) getViews];
  jint childCount = [((id<JavaUtilList>) nil_chk(childViews)) size];
  for (jint i = 0; i < childCount; i++) {
    AndroidViewView *child = [childViews getWithInt:i];
    OrgApmemToolsLayoutsFlowLayout_LayoutParams *layoutParams = (OrgApmemToolsLayoutsFlowLayout_LayoutParams *) check_class_cast([((AndroidViewView *) nil_chk(child)) getLayoutParams], [OrgApmemToolsLayoutsFlowLayout_LayoutParams class]);
    if ([((OrgApmemToolsLayoutsLayoutConfiguration *) nil_chk(self->config_)) getOrientation] == OrgApmemToolsLayoutsFlowLayout_HORIZONTAL) {
      [layoutParams setPositionWithInt:
#line 182
      [self getPaddingLeft] + [line getLineStartLength] + [((OrgApmemToolsLayoutsFlowLayout_LayoutParams *) nil_chk(layoutParams)) getInlineStartLength] withInt:
#line 183
      [self getPaddingTop] + [line getLineStartThickness] + [layoutParams getInlineStartThickness]];
      [child measureWithInt:AndroidViewView_MeasureSpec_makeMeasureSpecWithInt_withInt_(
#line 185
      [layoutParams getLength], AndroidViewView_MeasureSpec_EXACTLY) withInt:AndroidViewView_MeasureSpec_makeMeasureSpecWithInt_withInt_(
#line 186
      [layoutParams getThickness], AndroidViewView_MeasureSpec_EXACTLY)];
    }
    else {
      [layoutParams setPositionWithInt:
#line 190
      [self getPaddingLeft] + [line getLineStartThickness] + [((OrgApmemToolsLayoutsFlowLayout_LayoutParams *) nil_chk(layoutParams)) getInlineStartThickness] withInt:
#line 191
      [self getPaddingTop] + [line getLineStartLength] + [layoutParams getInlineStartLength]];
      [child measureWithInt:AndroidViewView_MeasureSpec_makeMeasureSpecWithInt_withInt_(
#line 193
      [layoutParams getThickness], AndroidViewView_MeasureSpec_EXACTLY) withInt:AndroidViewView_MeasureSpec_makeMeasureSpecWithInt_withInt_(
#line 194
      [layoutParams getLength], AndroidViewView_MeasureSpec_EXACTLY)];
    }
  }
}


#line 200
void OrgApmemToolsLayoutsFlowLayout_applyGravityToLinesWithJavaUtilList_withInt_withInt_(OrgApmemToolsLayoutsFlowLayout *self, id<JavaUtilList> lines, jint realControlLength, jint realControlThickness) {
  jint linesCount = [((id<JavaUtilList>) nil_chk(lines)) size];
  if (linesCount <= 0) {
    return;
  }
  
#line 206
  jint totalWeight = linesCount;
  OrgApmemToolsLayoutsLineDefinition *lastLine = [lines getWithInt:linesCount - 1];
  jint excessThickness = realControlThickness - ([((OrgApmemToolsLayoutsLineDefinition *) nil_chk(lastLine)) getLineThickness] + [lastLine getLineStartThickness]);
  jint excessOffset = 0;
  for (jint i = 0; i < linesCount; i++) {
    OrgApmemToolsLayoutsLineDefinition *child = [lines getWithInt:i];
    jint weight = 1;
    jint gravity = [self getGravity];
    jint extraThickness = JavaLangMath_roundWithFloat_(excessThickness * weight / totalWeight);
    
#line 216
    jint childLength = [((OrgApmemToolsLayoutsLineDefinition *) nil_chk(child)) getLineLength];
    jint childThickness = [child getLineThickness];
    
#line 219
    AndroidGraphicsRect *container = new_AndroidGraphicsRect_init();
    container->top_ = excessOffset;
    container->left_ = 0;
    container->right_ = realControlLength;
    container->bottom_ = childThickness + extraThickness + excessOffset;
    
#line 225
    AndroidGraphicsRect *result = new_AndroidGraphicsRect_init();
    AndroidViewGravity_applyWithInt_withInt_withInt_withAndroidGraphicsRect_withAndroidGraphicsRect_(gravity, childLength, childThickness, container, result);
    
#line 228
    excessOffset += extraThickness;
    [child addLineStartLengthWithInt:result->left_];
    [child addLineStartThicknessWithInt:result->top_];
    [child setLengthWithInt:[result width]];
    [child setThicknessWithInt:[result height]];
  }
}


#line 236
void OrgApmemToolsLayoutsFlowLayout_applyGravityToLineWithOrgApmemToolsLayoutsLineDefinition_(OrgApmemToolsLayoutsFlowLayout *self, OrgApmemToolsLayoutsLineDefinition *line) {
  id<JavaUtilList> views = [((OrgApmemToolsLayoutsLineDefinition *) nil_chk(line)) getViews];
  jint viewCount = [((id<JavaUtilList>) nil_chk(views)) size];
  if (viewCount <= 0) {
    return;
  }
  
#line 243
  jfloat totalWeight = 0;
  for (jint i = 0; i < viewCount; i++) {
    AndroidViewView *prev = [views getWithInt:i];
    OrgApmemToolsLayoutsFlowLayout_LayoutParams *plp = (OrgApmemToolsLayoutsFlowLayout_LayoutParams *) check_class_cast([((AndroidViewView *) nil_chk(prev)) getLayoutParams], [OrgApmemToolsLayoutsFlowLayout_LayoutParams class]);
    JrePlusAssignFloatF(&totalWeight, OrgApmemToolsLayoutsFlowLayout_getWeightWithOrgApmemToolsLayoutsFlowLayout_LayoutParams_(self, plp));
  }
  
#line 250
  AndroidViewView *lastChild = [views getWithInt:viewCount - 1];
  OrgApmemToolsLayoutsFlowLayout_LayoutParams *lastChildLayoutParams = (OrgApmemToolsLayoutsFlowLayout_LayoutParams *) check_class_cast([((AndroidViewView *) nil_chk(lastChild)) getLayoutParams], [OrgApmemToolsLayoutsFlowLayout_LayoutParams class]);
  jint excessLength = [line getLineLength] - ([((OrgApmemToolsLayoutsFlowLayout_LayoutParams *) nil_chk(lastChildLayoutParams)) getLength] + [lastChildLayoutParams getInlineStartLength]);
  jint excessOffset = 0;
  for (jint i = 0; i < viewCount; i++) {
    AndroidViewView *child = [views getWithInt:i];
    OrgApmemToolsLayoutsFlowLayout_LayoutParams *layoutParams = (OrgApmemToolsLayoutsFlowLayout_LayoutParams *) check_class_cast([((AndroidViewView *) nil_chk(child)) getLayoutParams], [OrgApmemToolsLayoutsFlowLayout_LayoutParams class]);
    
#line 258
    jfloat weight = OrgApmemToolsLayoutsFlowLayout_getWeightWithOrgApmemToolsLayoutsFlowLayout_LayoutParams_(self, layoutParams);
    jint gravity = OrgApmemToolsLayoutsFlowLayout_getGravityWithOrgApmemToolsLayoutsFlowLayout_LayoutParams_(self, layoutParams);
    jint extraLength = JavaLangMath_roundWithFloat_(excessLength * weight / totalWeight);
    
#line 262
    jint childLength = [((OrgApmemToolsLayoutsFlowLayout_LayoutParams *) nil_chk(layoutParams)) getLength] + [layoutParams getSpacingLength];
    jint childThickness = [layoutParams getThickness] + [layoutParams getSpacingThickness];
    
#line 265
    AndroidGraphicsRect *container = new_AndroidGraphicsRect_init();
    container->top_ = 0;
    container->left_ = excessOffset;
    container->right_ = childLength + extraLength + excessOffset;
    container->bottom_ = [line getLineThickness];
    
#line 271
    AndroidGraphicsRect *result = new_AndroidGraphicsRect_init();
    AndroidViewGravity_applyWithInt_withInt_withInt_withAndroidGraphicsRect_withAndroidGraphicsRect_(gravity, childLength, childThickness, container, result);
    
#line 274
    excessOffset += extraLength;
    [layoutParams setInlineStartLengthWithInt:result->left_ + [layoutParams getInlineStartLength]];
    [layoutParams setInlineStartThicknessWithInt:result->top_];
    [layoutParams setLengthWithInt:[result width] - [layoutParams getSpacingLength]];
    [layoutParams setThicknessWithInt:[result height] - [layoutParams getSpacingThickness]];
  }
}


#line 282
jint OrgApmemToolsLayoutsFlowLayout_getGravityWithOrgApmemToolsLayoutsFlowLayout_LayoutParams_(OrgApmemToolsLayoutsFlowLayout *self, OrgApmemToolsLayoutsFlowLayout_LayoutParams *lp) {
  return [((OrgApmemToolsLayoutsFlowLayout_LayoutParams *) nil_chk(lp)) gravitySpecified] ? lp->gravity_LayoutParams_ : [((OrgApmemToolsLayoutsLayoutConfiguration *) nil_chk(self->config_)) getGravity];
}

jfloat OrgApmemToolsLayoutsFlowLayout_getWeightWithOrgApmemToolsLayoutsFlowLayout_LayoutParams_(OrgApmemToolsLayoutsFlowLayout *self, OrgApmemToolsLayoutsFlowLayout_LayoutParams *lp) {
  return [((OrgApmemToolsLayoutsFlowLayout_LayoutParams *) nil_chk(lp)) weightSpecified] ? lp->weight_LayoutParams_ : [((OrgApmemToolsLayoutsLayoutConfiguration *) nil_chk(self->config_)) getWeightDefault];
}


#line 332
void OrgApmemToolsLayoutsFlowLayout_drawDebugInfoWithAndroidGraphicsCanvas_withAndroidViewView_(OrgApmemToolsLayoutsFlowLayout *self, AndroidGraphicsCanvas *canvas, AndroidViewView *child) {
  if (![((OrgApmemToolsLayoutsLayoutConfiguration *) nil_chk(self->config_)) isDebugDraw]) {
    return;
  }
  
#line 337
  AndroidGraphicsPaint *childPaint = OrgApmemToolsLayoutsFlowLayout_createPaintWithInt_(self, (jint) 0xffffff00);
  AndroidGraphicsPaint *newLinePaint = OrgApmemToolsLayoutsFlowLayout_createPaintWithInt_(self, (jint) 0xffff0000);
  
#line 340
  OrgApmemToolsLayoutsFlowLayout_LayoutParams *lp = (OrgApmemToolsLayoutsFlowLayout_LayoutParams *) check_class_cast([((AndroidViewView *) nil_chk(child)) getLayoutParams], [OrgApmemToolsLayoutsFlowLayout_LayoutParams class]);
  
#line 342
  if (((OrgApmemToolsLayoutsFlowLayout_LayoutParams *) nil_chk(lp))->rightMargin_ > 0) {
    jfloat x = [child getRight];
    jfloat y = [child getTop] + [child getHeight] / 2.0f;
    [((AndroidGraphicsCanvas *) nil_chk(canvas)) drawLineWithFloat:x withFloat:y withFloat:x + lp->rightMargin_ withFloat:y withAndroidGraphicsPaint:childPaint];
    [canvas drawLineWithFloat:x + lp->rightMargin_ - 4.0f withFloat:y - 4.0f withFloat:x + lp->rightMargin_ withFloat:y withAndroidGraphicsPaint:childPaint];
    [canvas drawLineWithFloat:x + lp->rightMargin_ - 4.0f withFloat:y + 4.0f withFloat:x + lp->rightMargin_ withFloat:y withAndroidGraphicsPaint:childPaint];
  }
  
#line 350
  if (lp->leftMargin_ > 0) {
    jfloat x = [child getLeft];
    jfloat y = [child getTop] + [child getHeight] / 2.0f;
    [((AndroidGraphicsCanvas *) nil_chk(canvas)) drawLineWithFloat:x withFloat:y withFloat:x - lp->leftMargin_ withFloat:y withAndroidGraphicsPaint:childPaint];
    [canvas drawLineWithFloat:x - lp->leftMargin_ + 4.0f withFloat:y - 4.0f withFloat:x - lp->leftMargin_ withFloat:y withAndroidGraphicsPaint:childPaint];
    [canvas drawLineWithFloat:x - lp->leftMargin_ + 4.0f withFloat:y + 4.0f withFloat:x - lp->leftMargin_ withFloat:y withAndroidGraphicsPaint:childPaint];
  }
  
#line 358
  if (lp->bottomMargin_ > 0) {
    jfloat x = [child getLeft] + [child getWidth] / 2.0f;
    jfloat y = [child getBottom];
    [((AndroidGraphicsCanvas *) nil_chk(canvas)) drawLineWithFloat:x withFloat:y withFloat:x withFloat:y + lp->bottomMargin_ withAndroidGraphicsPaint:childPaint];
    [canvas drawLineWithFloat:x - 4.0f withFloat:y + lp->bottomMargin_ - 4.0f withFloat:x withFloat:y + lp->bottomMargin_ withAndroidGraphicsPaint:childPaint];
    [canvas drawLineWithFloat:x + 4.0f withFloat:y + lp->bottomMargin_ - 4.0f withFloat:x withFloat:y + lp->bottomMargin_ withAndroidGraphicsPaint:childPaint];
  }
  
#line 366
  if (lp->topMargin_ > 0) {
    jfloat x = [child getLeft] + [child getWidth] / 2.0f;
    jfloat y = [child getTop];
    [((AndroidGraphicsCanvas *) nil_chk(canvas)) drawLineWithFloat:x withFloat:y withFloat:x withFloat:y - lp->topMargin_ withAndroidGraphicsPaint:childPaint];
    [canvas drawLineWithFloat:x - 4.0f withFloat:y - lp->topMargin_ + 4.0f withFloat:x withFloat:y - lp->topMargin_ withAndroidGraphicsPaint:childPaint];
    [canvas drawLineWithFloat:x + 4.0f withFloat:y - lp->topMargin_ + 4.0f withFloat:x withFloat:y - lp->topMargin_ withAndroidGraphicsPaint:childPaint];
  }
  
#line 374
  if (lp->newLine_) {
    if ([self->config_ getOrientation] == OrgApmemToolsLayoutsFlowLayout_HORIZONTAL) {
      jfloat x = [child getLeft];
      jfloat y = [child getTop] + [child getHeight] / 2.0f;
      [((AndroidGraphicsCanvas *) nil_chk(canvas)) drawLineWithFloat:x withFloat:y - 6.0f withFloat:x withFloat:y + 6.0f withAndroidGraphicsPaint:newLinePaint];
    }
    else {
      
#line 380
      jfloat x = [child getLeft] + [child getWidth] / 2.0f;
      jfloat y = [child getTop];
      [((AndroidGraphicsCanvas *) nil_chk(canvas)) drawLineWithFloat:x - 6.0f withFloat:y withFloat:x + 6.0f withFloat:y withAndroidGraphicsPaint:newLinePaint];
    }
  }
}


#line 387
AndroidGraphicsPaint *OrgApmemToolsLayoutsFlowLayout_createPaintWithInt_(OrgApmemToolsLayoutsFlowLayout *self, jint color) {
  AndroidGraphicsPaint *paint = new_AndroidGraphicsPaint_init();
  [paint setAntiAliasWithBoolean:YES];
  [paint setColorWithInt:color];
  [paint setStrokeWidthWithFloat:2.0f];
  return paint;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApmemToolsLayoutsFlowLayout)

#line 0 "/Users/ramm/git/Ashera/AsheraAndroid/src/org/apmem/tools/layouts/FlowLayout.java"


#line 446
@implementation OrgApmemToolsLayoutsFlowLayout_LayoutParams


#line 473
- (instancetype)initWithAndroidContentContext:(AndroidContentContext *)context
                  withAndroidUtilAttributeSet:(id<AndroidUtilAttributeSet>)attributeSet {
  OrgApmemToolsLayoutsFlowLayout_LayoutParams_initWithAndroidContentContext_withAndroidUtilAttributeSet_(self, context, attributeSet);
  return self;
}


#line 478
- (instancetype)initWithInt:(jint)width
                    withInt:(jint)height {
  OrgApmemToolsLayoutsFlowLayout_LayoutParams_initWithInt_withInt_(self, width, height);
  return self;
}


#line 482
- (instancetype)initWithAndroidViewViewGroup_LayoutParams:(AndroidViewViewGroup_LayoutParams *)layoutParams {
  OrgApmemToolsLayoutsFlowLayout_LayoutParams_initWithAndroidViewViewGroup_LayoutParams_(self, layoutParams);
  return self;
}


#line 486
- (jboolean)gravitySpecified {
  return self->gravity_LayoutParams_ != AndroidViewGravity_NO_GRAVITY;
}

- (jboolean)weightSpecified {
  return self->weight_LayoutParams_ >= 0;
}

- (void)readStyleParametersWithAndroidContentContext:(AndroidContentContext *)context
                         withAndroidUtilAttributeSet:(id<AndroidUtilAttributeSet>)attributeSet {
  OrgApmemToolsLayoutsFlowLayout_LayoutParams_readStyleParametersWithAndroidContentContext_withAndroidUtilAttributeSet_(self, context, attributeSet);
}


#line 506
- (void)setPositionWithInt:(jint)x
                   withInt:(jint)y {
  self->x_ = x;
  self->y_ = y;
}


#line 511
- (jint)getInlineStartLength {
  return inlineStartLength_;
}

- (void)setInlineStartLengthWithInt:(jint)inlineStartLength {
  self->inlineStartLength_ = inlineStartLength;
}

- (jint)getLength {
  return length_;
}

- (void)setLengthWithInt:(jint)length {
  self->length_ = length;
}

- (jint)getThickness {
  return thickness_;
}

- (void)setThicknessWithInt:(jint)thickness {
  self->thickness_ = thickness;
}

- (jint)getInlineStartThickness {
  return inlineStartThickness_;
}

- (void)setInlineStartThicknessWithInt:(jint)inlineStartThickness {
  self->inlineStartThickness_ = inlineStartThickness;
}

- (jint)getSpacingLength {
  return spacingLength_;
}

- (jint)getSpacingThickness {
  return spacingThickness_;
}

- (void)clearCalculatedFieldsWithInt:(jint)orientation {
  if (orientation == OrgApmemToolsLayoutsFlowLayout_HORIZONTAL) {
    self->spacingLength_ = self->leftMargin_ + self->rightMargin_;
    self->spacingThickness_ = self->topMargin_ + self->bottomMargin_;
  }
  else {
    
#line 556
    self->spacingLength_ = self->topMargin_ + self->bottomMargin_;
    self->spacingThickness_ = self->leftMargin_ + self->rightMargin_;
  }
}

+ (IOSObjectArray *)__annotations_gravity_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[AndroidViewViewDebug_ExportedProperty alloc] initWithCategory:@"" withDeepExport:false withFlagMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withFormatToHexString:false withHasAdjacentMapping:false withIndexMapping:[IOSObjectArray arrayWithObjects:(id[]) {  } count:0 type:NSObject_class_()] withMapping:[IOSObjectArray arrayWithObjects:(id[]) { [[AndroidViewViewDebug_IntToString alloc] initWithFrom:0 withTo:@"NONE"], [[AndroidViewViewDebug_IntToString alloc] initWithFrom:48 withTo:@"TOP"], [[AndroidViewViewDebug_IntToString alloc] initWithFrom:80 withTo:@"BOTTOM"], [[AndroidViewViewDebug_IntToString alloc] initWithFrom:3 withTo:@"LEFT"], [[AndroidViewViewDebug_IntToString alloc] initWithFrom:5 withTo:@"RIGHT"], [[AndroidViewViewDebug_IntToString alloc] initWithFrom:16 withTo:@"CENTER_VERTICAL"], [[AndroidViewViewDebug_IntToString alloc] initWithFrom:112 withTo:@"FILL_VERTICAL"], [[AndroidViewViewDebug_IntToString alloc] initWithFrom:1 withTo:@"CENTER_HORIZONTAL"], [[AndroidViewViewDebug_IntToString alloc] initWithFrom:7 withTo:@"FILL_HORIZONTAL"], [[AndroidViewViewDebug_IntToString alloc] initWithFrom:17 withTo:@"CENTER"], [[AndroidViewViewDebug_IntToString alloc] initWithFrom:119 withTo:@"FILL"] } count:11 type:NSObject_class_()] withPrefix:@"" withResolveId:false] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithAndroidContentContext:withAndroidUtilAttributeSet:", "LayoutParams", NULL, 0x1, NULL, NULL },
    { "initWithInt:withInt:", "LayoutParams", NULL, 0x1, NULL, NULL },
    { "initWithAndroidViewViewGroup_LayoutParams:", "LayoutParams", NULL, 0x1, NULL, NULL },
    { "gravitySpecified", NULL, "Z", 0x1, NULL, NULL },
    { "weightSpecified", NULL, "Z", 0x1, NULL, NULL },
    { "readStyleParametersWithAndroidContentContext:withAndroidUtilAttributeSet:", "readStyleParameters", "V", 0x2, NULL, NULL },
    { "setPositionWithInt:withInt:", "setPosition", "V", 0x0, NULL, NULL },
    { "getInlineStartLength", NULL, "I", 0x0, NULL, NULL },
    { "setInlineStartLengthWithInt:", "setInlineStartLength", "V", 0x0, NULL, NULL },
    { "getLength", NULL, "I", 0x0, NULL, NULL },
    { "setLengthWithInt:", "setLength", "V", 0x0, NULL, NULL },
    { "getThickness", NULL, "I", 0x0, NULL, NULL },
    { "setThicknessWithInt:", "setThickness", "V", 0x0, NULL, NULL },
    { "getInlineStartThickness", NULL, "I", 0x0, NULL, NULL },
    { "setInlineStartThicknessWithInt:", "setInlineStartThickness", "V", 0x0, NULL, NULL },
    { "getSpacingLength", NULL, "I", 0x0, NULL, NULL },
    { "getSpacingThickness", NULL, "I", 0x0, NULL, NULL },
    { "clearCalculatedFieldsWithInt:", "clearCalculatedFields", "V", 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "newLine_", NULL, 0x1, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "gravity_LayoutParams_", "gravity", 0x1, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "weight_LayoutParams_", "weight", 0x1, "F", NULL, NULL, .constantValue.asLong = 0 },
    { "spacingLength_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "spacingThickness_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "inlineStartLength_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "length_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "thickness_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "inlineStartThickness_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "x_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "y_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgApmemToolsLayoutsFlowLayout_LayoutParams = { 2, "LayoutParams", "org.apmem.tools.layouts", "FlowLayout", 0x9, 18, methods, 11, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApmemToolsLayoutsFlowLayout_LayoutParams;
}

@end


#line 473
void OrgApmemToolsLayoutsFlowLayout_LayoutParams_initWithAndroidContentContext_withAndroidUtilAttributeSet_(OrgApmemToolsLayoutsFlowLayout_LayoutParams *self, AndroidContentContext *context, id<AndroidUtilAttributeSet> attributeSet) {
  (void) AndroidWidgetLinearLayout_LayoutParams_initWithAndroidContentContext_withAndroidUtilAttributeSet_(self, context, attributeSet);
  self->newLine_ =
#line 447
  NO;
  self->gravity_LayoutParams_ =
#line 461
  AndroidViewGravity_NO_GRAVITY;
  self->weight_LayoutParams_ = -1.0f;
  
#line 475
  OrgApmemToolsLayoutsFlowLayout_LayoutParams_readStyleParametersWithAndroidContentContext_withAndroidUtilAttributeSet_(self, context, attributeSet);
}


#line 473
OrgApmemToolsLayoutsFlowLayout_LayoutParams *new_OrgApmemToolsLayoutsFlowLayout_LayoutParams_initWithAndroidContentContext_withAndroidUtilAttributeSet_(AndroidContentContext *context, id<AndroidUtilAttributeSet> attributeSet) {
  OrgApmemToolsLayoutsFlowLayout_LayoutParams *self = [OrgApmemToolsLayoutsFlowLayout_LayoutParams alloc];
  OrgApmemToolsLayoutsFlowLayout_LayoutParams_initWithAndroidContentContext_withAndroidUtilAttributeSet_(self, context, attributeSet);
  return self;
}


#line 478
void OrgApmemToolsLayoutsFlowLayout_LayoutParams_initWithInt_withInt_(OrgApmemToolsLayoutsFlowLayout_LayoutParams *self, jint width, jint height) {
  (void) AndroidWidgetLinearLayout_LayoutParams_initWithInt_withInt_(self, width, height);
  self->newLine_ =
#line 447
  NO;
  self->gravity_LayoutParams_ =
#line 461
  AndroidViewGravity_NO_GRAVITY;
  self->weight_LayoutParams_ = -1.0f;
}


#line 478
OrgApmemToolsLayoutsFlowLayout_LayoutParams *new_OrgApmemToolsLayoutsFlowLayout_LayoutParams_initWithInt_withInt_(jint width, jint height) {
  OrgApmemToolsLayoutsFlowLayout_LayoutParams *self = [OrgApmemToolsLayoutsFlowLayout_LayoutParams alloc];
  OrgApmemToolsLayoutsFlowLayout_LayoutParams_initWithInt_withInt_(self, width, height);
  return self;
}


#line 482
void OrgApmemToolsLayoutsFlowLayout_LayoutParams_initWithAndroidViewViewGroup_LayoutParams_(OrgApmemToolsLayoutsFlowLayout_LayoutParams *self, AndroidViewViewGroup_LayoutParams *layoutParams) {
  (void) AndroidWidgetLinearLayout_LayoutParams_initWithAndroidViewViewGroup_LayoutParams_(self, layoutParams);
  self->newLine_ =
#line 447
  NO;
  self->gravity_LayoutParams_ =
#line 461
  AndroidViewGravity_NO_GRAVITY;
  self->weight_LayoutParams_ = -1.0f;
}


#line 482
OrgApmemToolsLayoutsFlowLayout_LayoutParams *new_OrgApmemToolsLayoutsFlowLayout_LayoutParams_initWithAndroidViewViewGroup_LayoutParams_(AndroidViewViewGroup_LayoutParams *layoutParams) {
  OrgApmemToolsLayoutsFlowLayout_LayoutParams *self = [OrgApmemToolsLayoutsFlowLayout_LayoutParams alloc];
  OrgApmemToolsLayoutsFlowLayout_LayoutParams_initWithAndroidViewViewGroup_LayoutParams_(self, layoutParams);
  return self;
}


#line 494
void OrgApmemToolsLayoutsFlowLayout_LayoutParams_readStyleParametersWithAndroidContentContext_withAndroidUtilAttributeSet_(OrgApmemToolsLayoutsFlowLayout_LayoutParams *self, AndroidContentContext *context, id<AndroidUtilAttributeSet> attributeSet) {
  AndroidContentResTypedArray *a = [((AndroidContentContext *) nil_chk(context)) obtainStyledAttributesWithAndroidUtilAttributeSet:attributeSet withIntArray:JreLoadStatic(ComAsheraAndroidExtR_styleable, FlowLayout_LayoutParams_)];
  @try {
    self->newLine_ = [((AndroidContentResTypedArray *) nil_chk(a)) getBooleanWithInt:ComAsheraAndroidExtR_styleable_FlowLayout_LayoutParams_layout_newLine withBoolean:NO];
    self->gravity_LayoutParams_ = [a getIntWithInt:ComAsheraAndroidExtR_styleable_FlowLayout_LayoutParams_android_layout_gravity withInt:AndroidViewGravity_NO_GRAVITY];
    self->weight_LayoutParams_ = [a getFloatWithInt:ComAsheraAndroidExtR_styleable_FlowLayout_LayoutParams_layout_weight withFloat:-1.0f];
  }
  @finally {
    
#line 501
    [((AndroidContentResTypedArray *) nil_chk(a)) recycle];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApmemToolsLayoutsFlowLayout_LayoutParams)
