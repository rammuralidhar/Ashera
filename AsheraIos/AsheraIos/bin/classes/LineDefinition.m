//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/Ashera/AsheraAndroid/src/org/apmem/tools/layouts/LineDefinition.java
//


#include "FlowLayout.h"
#include "J2ObjC_source.h"
#include "LayoutConfiguration.h"
#include "LineDefinition.h"
#include "android/view/View.h"
#include "android/view/ViewGroup.h"
#include "java/lang/Math.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"

#line 0 "/Users/ramm/git/Ashera/AsheraAndroid/src/org/apmem/tools/layouts/LineDefinition.java"

@interface W3CLineDefinition () {
 @public
  id<JavaUtilList> views_;
  W3CLayoutConfiguration *config_;
  jint maxLength_;
  jint lineLength_;
  jint lineThickness_;
  jint lineLengthWithSpacing_;
  jint lineThicknessWithSpacing_;
  jint lineStartThickness_;
  jint lineStartLength_;
}

@end

J2OBJC_FIELD_SETTER(W3CLineDefinition, views_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(W3CLineDefinition, config_, W3CLayoutConfiguration *)


#line 8
@implementation W3CLineDefinition


#line 19
- (instancetype)initWithInt:(jint)maxLength
 withW3CLayoutConfiguration:(W3CLayoutConfiguration *)config {
  W3CLineDefinition_initWithInt_withW3CLayoutConfiguration_(self, maxLength, config);
  return self;
}


#line 26
- (void)addViewWithAndroidViewView:(AndroidViewView *)child {
  [self addViewWithInt:[((id<JavaUtilList>) nil_chk(self->views_)) size] withAndroidViewView:child];
}

- (void)addViewWithInt:(jint)i
   withAndroidViewView:(AndroidViewView *)child {
  W3CFlowLayout_LayoutParams *lp = (W3CFlowLayout_LayoutParams *) check_class_cast([((AndroidViewView *) nil_chk(child)) getLayoutParams], [W3CFlowLayout_LayoutParams class]);
  
#line 33
  [((id<JavaUtilList>) nil_chk(self->views_)) addWithInt:i withId:child];
  
#line 35
  self->lineLength_ = self->lineLengthWithSpacing_ + [((W3CFlowLayout_LayoutParams *) nil_chk(lp)) getLength];
  self->lineLengthWithSpacing_ = self->lineLength_ + [lp getSpacingLength];
  self->lineThicknessWithSpacing_ = JavaLangMath_maxWithInt_withInt_(self->lineThicknessWithSpacing_, [lp getThickness] + [lp getSpacingThickness]);
  self->lineThickness_ = JavaLangMath_maxWithInt_withInt_(self->lineThickness_, [lp getThickness]);
}


#line 41
- (jboolean)canFitWithAndroidViewView:(AndroidViewView *)child {
  jint childLength;
  if ([((W3CLayoutConfiguration *) nil_chk(self->config_)) getOrientation] == W3CFlowLayout_HORIZONTAL) {
    childLength = [((AndroidViewView *) nil_chk(child)) getMeasuredWidth];
  }
  else {
    
#line 46
    childLength = [((AndroidViewView *) nil_chk(child)) getMeasuredHeight];
  }
  return lineLengthWithSpacing_ + childLength <= maxLength_;
}


#line 51
- (jint)getLineStartThickness {
  return lineStartThickness_;
}

- (jint)getLineThickness {
  return lineThicknessWithSpacing_;
}

- (jint)getLineLength {
  return lineLength_;
}

- (jint)getLineStartLength {
  return lineStartLength_;
}

- (id<JavaUtilList>)getViews {
  return views_;
}

- (void)setThicknessWithInt:(jint)thickness {
  jint thicknessSpacing = self->lineThicknessWithSpacing_ - self->lineThickness_;
  self->lineThicknessWithSpacing_ = thickness;
  self->lineThickness_ = thickness - thicknessSpacing;
}

- (void)setLengthWithInt:(jint)length {
  jint lengthSpacing = self->lineLengthWithSpacing_ - self->lineLength_;
  self->lineLength_ = length;
  self->lineLengthWithSpacing_ = length + lengthSpacing;
}

- (void)addLineStartThicknessWithInt:(jint)extraLineStartThickness {
  self->lineStartThickness_ += extraLineStartThickness;
}

- (void)addLineStartLengthWithInt:(jint)extraLineStartLength {
  self->lineStartLength_ += extraLineStartLength;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithInt:withW3CLayoutConfiguration:", "LineDefinition", NULL, 0x1, NULL, NULL },
    { "addViewWithAndroidViewView:", "addView", "V", 0x1, NULL, NULL },
    { "addViewWithInt:withAndroidViewView:", "addView", "V", 0x1, NULL, NULL },
    { "canFitWithAndroidViewView:", "canFit", "Z", 0x1, NULL, NULL },
    { "getLineStartThickness", NULL, "I", 0x1, NULL, NULL },
    { "getLineThickness", NULL, "I", 0x1, NULL, NULL },
    { "getLineLength", NULL, "I", 0x1, NULL, NULL },
    { "getLineStartLength", NULL, "I", 0x1, NULL, NULL },
    { "getViews", NULL, "Ljava.util.List;", 0x1, NULL, NULL },
    { "setThicknessWithInt:", "setThickness", "V", 0x1, NULL, NULL },
    { "setLengthWithInt:", "setLength", "V", 0x1, NULL, NULL },
    { "addLineStartThicknessWithInt:", "addLineStartThickness", "V", 0x1, NULL, NULL },
    { "addLineStartLengthWithInt:", "addLineStartLength", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "views_", NULL, 0x12, "Ljava.util.List;", NULL, "Ljava/util/List<Landroid/view/View;>;",  },
    { "config_", NULL, 0x12, "Lorg.apmem.tools.layouts.LayoutConfiguration;", NULL, NULL,  },
    { "maxLength_", NULL, 0x12, "I", NULL, NULL,  },
    { "lineLength_", NULL, 0x2, "I", NULL, NULL,  },
    { "lineThickness_", NULL, 0x2, "I", NULL, NULL,  },
    { "lineLengthWithSpacing_", NULL, 0x2, "I", NULL, NULL,  },
    { "lineThicknessWithSpacing_", NULL, 0x2, "I", NULL, NULL,  },
    { "lineStartThickness_", NULL, 0x2, "I", NULL, NULL,  },
    { "lineStartLength_", NULL, 0x2, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _W3CLineDefinition = { 2, "LineDefinition", "org.apmem.tools.layouts", NULL, 0x0, 13, methods, 9, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_W3CLineDefinition;
}

@end


#line 19
void W3CLineDefinition_initWithInt_withW3CLayoutConfiguration_(W3CLineDefinition *self, jint maxLength, W3CLayoutConfiguration *config) {
  (void) NSObject_init(self);
  self->views_ = new_JavaUtilArrayList_init();
  
#line 20
  self->lineStartThickness_ = 0;
  self->lineStartLength_ = 0;
  self->maxLength_ = maxLength;
  self->config_ = config;
}


#line 19
W3CLineDefinition *new_W3CLineDefinition_initWithInt_withW3CLayoutConfiguration_(jint maxLength, W3CLayoutConfiguration *config) {
  W3CLineDefinition *self = [W3CLineDefinition alloc];
  W3CLineDefinition_initWithInt_withW3CLayoutConfiguration_(self, maxLength, config);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(W3CLineDefinition)
